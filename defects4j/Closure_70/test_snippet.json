[
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.getOptions()",
        "snippet": "  @Override\n  public CompilerOptions getOptions() {\n    CompilerOptions options = super.getOptions();\n    options.looseTypes = true;\n    return options;\n  }\n",
        "begin_line": 43,
        "end_line": 48,
        "comment": "",
        "child_ranges": [
            "(line 45,col 5)-(line 45,col 49)",
            "(line 46,col 5)-(line 46,col 30)",
            "(line 47,col 5)-(line 47,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testInitialTypingScope()",
        "snippet": "  public void testInitialTypingScope() {\n    Scope s = new TypedScopeCreator(compiler,\n        new DefaultCodingConvention()).createInitialScope(\n            new Node(Token.BLOCK));\n\n    assertEquals(ARRAY_FUNCTION_TYPE, s.getVar(\"Array\").getType());\n    assertEquals(BOOLEAN_OBJECT_FUNCTION_TYPE,\n        s.getVar(\"Boolean\").getType());\n    assertEquals(DATE_FUNCTION_TYPE, s.getVar(\"Date\").getType());\n    assertEquals(ERROR_FUNCTION_TYPE, s.getVar(\"Error\").getType());\n    assertEquals(EVAL_ERROR_FUNCTION_TYPE,\n        s.getVar(\"EvalError\").getType());\n    assertEquals(NUMBER_OBJECT_FUNCTION_TYPE,\n        s.getVar(\"Number\").getType());\n    assertEquals(OBJECT_FUNCTION_TYPE, s.getVar(\"Object\").getType());\n    assertEquals(RANGE_ERROR_FUNCTION_TYPE,\n        s.getVar(\"RangeError\").getType());\n    assertEquals(REFERENCE_ERROR_FUNCTION_TYPE,\n        s.getVar(\"ReferenceError\").getType());\n    assertEquals(REGEXP_FUNCTION_TYPE, s.getVar(\"RegExp\").getType());\n    assertEquals(STRING_OBJECT_FUNCTION_TYPE,\n        s.getVar(\"String\").getType());\n    assertEquals(SYNTAX_ERROR_FUNCTION_TYPE,\n        s.getVar(\"SyntaxError\").getType());\n    assertEquals(TYPE_ERROR_FUNCTION_TYPE,\n        s.getVar(\"TypeError\").getType());\n    assertEquals(URI_ERROR_FUNCTION_TYPE,\n        s.getVar(\"URIError\").getType());\n  }\n",
        "begin_line": 50,
        "end_line": 78,
        "comment": "",
        "child_ranges": [
            "(line 51,col 5)-(line 53,col 35)",
            "(line 55,col 5)-(line 55,col 67)",
            "(line 56,col 5)-(line 57,col 39)",
            "(line 58,col 5)-(line 58,col 65)",
            "(line 59,col 5)-(line 59,col 67)",
            "(line 60,col 5)-(line 61,col 41)",
            "(line 62,col 5)-(line 63,col 38)",
            "(line 64,col 5)-(line 64,col 69)",
            "(line 65,col 5)-(line 66,col 42)",
            "(line 67,col 5)-(line 68,col 46)",
            "(line 69,col 5)-(line 69,col 69)",
            "(line 70,col 5)-(line 71,col 38)",
            "(line 72,col 5)-(line 73,col 43)",
            "(line 74,col 5)-(line 75,col 41)",
            "(line 76,col 5)-(line 77,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testTypeCheck1()",
        "snippet": "  public void testTypeCheck1() throws Exception {\n    testTypes(\"/**@return {void}*/function foo(){ if (foo()) return; }\");\n  }\n",
        "begin_line": 80,
        "end_line": 82,
        "comment": "",
        "child_ranges": [
            "(line 81,col 5)-(line 81,col 73)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testTypeCheck2()",
        "snippet": "  public void testTypeCheck2() throws Exception {\n    testTypes(\"/**@return {void}*/function foo(){ var x=foo(); x--; }\",\n        \"increment/decrement\\n\" +\n        \"found   : undefined\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 84,
        "end_line": 89,
        "comment": "",
        "child_ranges": [
            "(line 85,col 5)-(line 88,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testTypeCheck4()",
        "snippet": "  public void testTypeCheck4() throws Exception {\n    testTypes(\"/**@return {void}*/function foo(){ !foo(); }\");\n  }\n",
        "begin_line": 91,
        "end_line": 93,
        "comment": "",
        "child_ranges": [
            "(line 92,col 5)-(line 92,col 62)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testTypeCheck5()",
        "snippet": "  public void testTypeCheck5() throws Exception {\n    testTypes(\"/**@return {void}*/function foo(){ var a = +foo(); }\",\n        \"sign operator\\n\" +\n        \"found   : undefined\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 95,
        "end_line": 100,
        "comment": "",
        "child_ranges": [
            "(line 96,col 5)-(line 99,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testTypeCheck6()",
        "snippet": "  public void testTypeCheck6() throws Exception {\n    testTypes(\n        \"/**@return {void}*/function foo(){\" +\n        \"/** @type {undefined|number} */var a;if (a == foo())return;}\");\n  }\n",
        "begin_line": 102,
        "end_line": 106,
        "comment": "",
        "child_ranges": [
            "(line 103,col 5)-(line 105,col 72)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testTypeCheck7()",
        "snippet": "  public void testTypeCheck7() throws Exception {\n    testTypes(\"function foo() {delete 'abc';}\",\n        TypeCheck.BAD_DELETE);\n  }\n",
        "begin_line": 108,
        "end_line": 111,
        "comment": "",
        "child_ranges": [
            "(line 109,col 5)-(line 110,col 30)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testTypeCheck8()",
        "snippet": "  public void testTypeCheck8() throws Exception {\n    testTypes(\"/**@return {void}*/function foo(){do {} while (foo());}\");\n  }\n",
        "begin_line": 113,
        "end_line": 115,
        "comment": "",
        "child_ranges": [
            "(line 114,col 5)-(line 114,col 73)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testTypeCheck9()",
        "snippet": "  public void testTypeCheck9() throws Exception {\n    testTypes(\"/**@return {void}*/function foo(){while (foo());}\");\n  }\n",
        "begin_line": 117,
        "end_line": 119,
        "comment": "",
        "child_ranges": [
            "(line 118,col 5)-(line 118,col 67)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testTypeCheck10()",
        "snippet": "  public void testTypeCheck10() throws Exception {\n    testTypes(\"/**@return {void}*/function foo(){for (;foo(););}\");\n  }\n",
        "begin_line": 121,
        "end_line": 123,
        "comment": "",
        "child_ranges": [
            "(line 122,col 5)-(line 122,col 67)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testTypeCheck11()",
        "snippet": "  public void testTypeCheck11() throws Exception {\n    testTypes(\"/**@type !Number */var a;\" +\n        \"/**@type !String */var b;\" +\n        \"a = b;\",\n        \"assignment\\n\" +\n        \"found   : String\\n\" +\n        \"required: Number\");\n  }\n",
        "begin_line": 125,
        "end_line": 132,
        "comment": "",
        "child_ranges": [
            "(line 126,col 5)-(line 131,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testTypeCheck12()",
        "snippet": "  public void testTypeCheck12() throws Exception {\n    testTypes(\"/**@return {!Object}*/function foo(){var a = 3^foo();}\",\n        \"bad right operand to bitwise operator\\n\" +\n        \"found   : Object\\n\" +\n        \"required: (boolean|null|number|string|undefined)\");\n  }\n",
        "begin_line": 134,
        "end_line": 139,
        "comment": "",
        "child_ranges": [
            "(line 135,col 5)-(line 138,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testTypeCheck13()",
        "snippet": "  public void testTypeCheck13() throws Exception {\n    testTypes(\"/**@type {!Number|!String}*/var i; i=/xx/;\",\n        \"assignment\\n\" +\n        \"found   : RegExp\\n\" +\n        \"required: (Number|String)\");\n  }\n",
        "begin_line": 141,
        "end_line": 146,
        "comment": "",
        "child_ranges": [
            "(line 142,col 5)-(line 145,col 37)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testTypeCheck14()",
        "snippet": "  public void testTypeCheck14() throws Exception {\n    testTypes(\"/**@param opt_a*/function foo(opt_a){}\");\n  }\n",
        "begin_line": 148,
        "end_line": 150,
        "comment": "",
        "child_ranges": [
            "(line 149,col 5)-(line 149,col 56)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testTypeCheck15()",
        "snippet": "  public void testTypeCheck15() throws Exception {\n    testTypes(\"/**@type {Number} */var x;x=null;x=10;\",\n        \"assignment\\n\" +\n        \"found   : number\\n\" +\n        \"required: (Number|null|undefined)\");\n  }\n",
        "begin_line": 153,
        "end_line": 158,
        "comment": "",
        "child_ranges": [
            "(line 154,col 5)-(line 157,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testTypeCheck16a()",
        "snippet": "  public void testTypeCheck16a() throws Exception {\n    testTypes(\"/**@type {Number|null} */var x='';\",\n              \"initializing variable\\n\" +\n              \"found   : string\\n\" +\n              \"required: (Number|null|undefined)\");\n  }\n",
        "begin_line": 160,
        "end_line": 165,
        "comment": "",
        "child_ranges": [
            "(line 161,col 5)-(line 164,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testTypeCheck16b()",
        "snippet": "  public void testTypeCheck16b() throws Exception {\n    testTypes(\"/**@type {!Number|null} */var x='';\",\n              \"initializing variable\\n\" +\n              \"found   : string\\n\" +\n              \"required: (Number|null)\");\n  }\n",
        "begin_line": 167,
        "end_line": 172,
        "comment": "",
        "child_ranges": [
            "(line 168,col 5)-(line 171,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testTypeCheck17()",
        "snippet": "  public void testTypeCheck17() throws Exception {\n    testTypes(\"/**@return {Number}\\n@param {Number} opt_foo */\\n\" +\n        \"function a(opt_foo){\\nreturn /**@type {Number}*/(opt_foo);\\n}\");\n  }\n",
        "begin_line": 174,
        "end_line": 177,
        "comment": "",
        "child_ranges": [
            "(line 175,col 5)-(line 176,col 73)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testTypeCheck18()",
        "snippet": "  public void testTypeCheck18() throws Exception {\n    testTypes(\"/**@return {RegExp}\\n*/\\n function a(){return new RegExp();}\");\n  }\n",
        "begin_line": 180,
        "end_line": 182,
        "comment": "",
        "child_ranges": [
            "(line 181,col 5)-(line 181,col 78)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testTypeCheck19()",
        "snippet": "  public void testTypeCheck19() throws Exception {\n    testTypes(\"/**@return {Array}\\n*/\\n function a(){return new Array();}\");\n  }\n",
        "begin_line": 184,
        "end_line": 186,
        "comment": "",
        "child_ranges": [
            "(line 185,col 5)-(line 185,col 76)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testTypeCheck20()",
        "snippet": "  public void testTypeCheck20() throws Exception {\n    testTypes(\"/**@return {Date}\\n*/\\n function a(){return new Date();}\");\n  }\n",
        "begin_line": 188,
        "end_line": 190,
        "comment": "",
        "child_ranges": [
            "(line 189,col 5)-(line 189,col 74)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testTypeCheckBasicDowncast()",
        "snippet": "  public void testTypeCheckBasicDowncast() throws Exception {\n    testTypes(\"/** @constructor */function foo() {}\\n\" +\n                  \"/** @type {Object} */ var bar = new foo();\\n\");\n  }\n",
        "begin_line": 192,
        "end_line": 195,
        "comment": "",
        "child_ranges": [
            "(line 193,col 5)-(line 194,col 66)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testTypeCheckNoDowncastToNumber()",
        "snippet": "  public void testTypeCheckNoDowncastToNumber() throws Exception {\n    testTypes(\"/** @constructor */function foo() {}\\n\" +\n                  \"/** @type {!Number} */ var bar = new foo();\\n\",\n        \"initializing variable\\n\" +\n        \"found   : foo\\n\" +\n        \"required: Number\");\n  }\n",
        "begin_line": 197,
        "end_line": 203,
        "comment": "",
        "child_ranges": [
            "(line 198,col 5)-(line 202,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testTypeCheck21()",
        "snippet": "  public void testTypeCheck21() throws Exception {\n    testTypes(\"/** @type Array.<String> */var foo;\");\n  }\n",
        "begin_line": 205,
        "end_line": 207,
        "comment": "",
        "child_ranges": [
            "(line 206,col 5)-(line 206,col 53)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testTypeCheck22()",
        "snippet": "  public void testTypeCheck22() throws Exception {\n    testTypes(\"/** @param {Element|Object} p */\\nfunction foo(p){}\\n\" +\n                  \"/** @constructor */function Element(){}\\n\" +\n                  \"/** @type {Element|Object} */var v;\\n\" +\n                  \"foo(v);\\n\");\n  }\n",
        "begin_line": 209,
        "end_line": 214,
        "comment": "",
        "child_ranges": [
            "(line 210,col 5)-(line 213,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testTypeCheck23()",
        "snippet": "  public void testTypeCheck23() throws Exception {\n    testTypes(\"/** @type {(Object,Null)} */var foo; foo = null;\");\n  }\n",
        "begin_line": 216,
        "end_line": 218,
        "comment": "",
        "child_ranges": [
            "(line 217,col 5)-(line 217,col 66)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testTypeCheck24()",
        "snippet": "  public void testTypeCheck24() throws Exception {\n    testTypes(\"/** @constructor */function MyType(){}\\n\" +\n        \"/** @type {(MyType,Null)} */var foo; foo = null;\");\n  }\n",
        "begin_line": 220,
        "end_line": 223,
        "comment": "",
        "child_ranges": [
            "(line 221,col 5)-(line 222,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testTypeCheckDefaultExterns()",
        "snippet": "  public void testTypeCheckDefaultExterns() throws Exception {\n    testTypes(\"/** @param {string} x */ function f(x) {}\" +\n        \"f([].length);\" ,\n        \"actual parameter 1 of f does not match formal parameter\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 225,
        "end_line": 231,
        "comment": "",
        "child_ranges": [
            "(line 226,col 5)-(line 230,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testTypeCheckCustomExterns()",
        "snippet": "  public void testTypeCheckCustomExterns() throws Exception {\n    testTypes(\n        DEFAULT_EXTERNS + \"/** @type {boolean} */ Array.prototype.oogabooga;\",\n        \"/** @param {string} x */ function f(x) {}\" +\n        \"f([].oogabooga);\" ,\n        \"actual parameter 1 of f does not match formal parameter\\n\" +\n        \"found   : boolean\\n\" +\n        \"required: string\", false);\n  }\n",
        "begin_line": 233,
        "end_line": 241,
        "comment": "",
        "child_ranges": [
            "(line 234,col 5)-(line 240,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testParameterizedArray1()",
        "snippet": "  public void testParameterizedArray1() throws Exception {\n    testTypes(\"/** @param {!Array.<number>} a\\n\" +\n        \"* @return {string}\\n\" +\n        \"*/ var f = function(a) { return a[0]; };\",\n        \"inconsistent return type\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 243,
        "end_line": 250,
        "comment": "",
        "child_ranges": [
            "(line 244,col 5)-(line 249,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testParameterizedArray2()",
        "snippet": "  public void testParameterizedArray2() throws Exception {\n    testTypes(\"/** @param {!Array.<!Array.<number>>} a\\n\" +\n        \"* @return {number}\\n\" +\n        \"*/ var f = function(a) { return a[0]; };\",\n        \"inconsistent return type\\n\" +\n        \"found   : Array\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 252,
        "end_line": 259,
        "comment": "",
        "child_ranges": [
            "(line 253,col 5)-(line 258,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testParameterizedArray3()",
        "snippet": "  public void testParameterizedArray3() throws Exception {\n    testTypes(\"/** @param {!Array.<number>} a\\n\" +\n        \"* @return {number}\\n\" +\n        \"*/ var f = function(a) { a[1] = 0; return a[0]; };\");\n  }\n",
        "begin_line": 261,
        "end_line": 265,
        "comment": "",
        "child_ranges": [
            "(line 262,col 5)-(line 264,col 62)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testParameterizedArray4()",
        "snippet": "  public void testParameterizedArray4() throws Exception {\n    testTypes(\"/** @param {!Array.<number>} a\\n\" +\n        \"*/ var f = function(a) { a[0] = 'a'; };\",\n        \"assignment\\n\" +\n        \"found   : string\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 267,
        "end_line": 273,
        "comment": "",
        "child_ranges": [
            "(line 268,col 5)-(line 272,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testParameterizedArray5()",
        "snippet": "  public void testParameterizedArray5() throws Exception {\n    testTypes(\"/** @param {!Array.<*>} a\\n\" +\n        \"*/ var f = function(a) { a[0] = 'a'; };\");\n  }\n",
        "begin_line": 275,
        "end_line": 278,
        "comment": "",
        "child_ranges": [
            "(line 276,col 5)-(line 277,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testParameterizedArray6()",
        "snippet": "  public void testParameterizedArray6() throws Exception {\n    testTypes(\"/** @param {!Array.<*>} a\\n\" +\n        \"* @return {string}\\n\" +\n        \"*/ var f = function(a) { return a[0]; };\",\n        \"inconsistent return type\\n\" +\n        \"found   : *\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 280,
        "end_line": 287,
        "comment": "",
        "child_ranges": [
            "(line 281,col 5)-(line 286,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testParameterizedArray7()",
        "snippet": "  public void testParameterizedArray7() throws Exception {\n    testTypes(\"/** @param {?Array.<number>} a\\n\" +\n        \"* @return {string}\\n\" +\n        \"*/ var f = function(a) { return a[0]; };\",\n        \"inconsistent return type\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 289,
        "end_line": 296,
        "comment": "",
        "child_ranges": [
            "(line 290,col 5)-(line 295,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testParameterizedObject1()",
        "snippet": "  public void testParameterizedObject1() throws Exception {\n    testTypes(\"/** @param {!Object.<number>} a\\n\" +\n        \"* @return {string}\\n\" +\n        \"*/ var f = function(a) { return a[0]; };\",\n        \"inconsistent return type\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 298,
        "end_line": 305,
        "comment": "",
        "child_ranges": [
            "(line 299,col 5)-(line 304,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testParameterizedObject2()",
        "snippet": "  public void testParameterizedObject2() throws Exception {\n    testTypes(\"/** @param {!Object.<string,number>} a\\n\" +\n        \"* @return {string}\\n\" +\n        \"*/ var f = function(a) { return a['x']; };\",\n        \"inconsistent return type\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 307,
        "end_line": 314,
        "comment": "",
        "child_ranges": [
            "(line 308,col 5)-(line 313,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testParameterizedObject3()",
        "snippet": "  public void testParameterizedObject3() throws Exception {\n    testTypes(\"/** @param {!Object.<number,string>} a\\n\" +\n        \"* @return {string}\\n\" +\n        \"*/ var f = function(a) { return a['x']; };\",\n        \"restricted index type\\n\" +\n        \"found   : string\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 316,
        "end_line": 323,
        "comment": "",
        "child_ranges": [
            "(line 317,col 5)-(line 322,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testParameterizedObject4()",
        "snippet": "  public void testParameterizedObject4() throws Exception {\n    testTypes(\"/** @enum {string} */ var E = {A: 'a', B: 'b'};\\n\" +\n        \"/** @param {!Object.<E,string>} a\\n\" +\n        \"* @return {string}\\n\" +\n        \"*/ var f = function(a) { return a['x']; };\",\n        \"restricted index type\\n\" +\n        \"found   : string\\n\" +\n        \"required: E.<string>\");\n  }\n",
        "begin_line": 325,
        "end_line": 333,
        "comment": "",
        "child_ranges": [
            "(line 326,col 5)-(line 332,col 32)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testUnionOfFunctionAndType()",
        "snippet": "  public void testUnionOfFunctionAndType() throws Exception {\n    testTypes(\"/** @type {null|(function(Number):void)} */ var a;\" +\n        \"/** @type {(function(Number):void)|null} */ var b = null; a = b;\");\n  }\n",
        "begin_line": 335,
        "end_line": 338,
        "comment": "",
        "child_ranges": [
            "(line 336,col 5)-(line 337,col 76)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testOptionalParameterComparedToUndefined()",
        "snippet": "  public void testOptionalParameterComparedToUndefined() throws Exception {\n    testTypes(\"/**@param opt_a {Number}*/function foo(opt_a)\" +\n        \"{if (opt_a==undefined) var b = 3;}\");\n  }\n",
        "begin_line": 340,
        "end_line": 343,
        "comment": "",
        "child_ranges": [
            "(line 341,col 5)-(line 342,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testOptionalAllType()",
        "snippet": "  public void testOptionalAllType() throws Exception {\n    testTypes(\"/** @param {*} opt_x */function f(opt_x) { return opt_x }\\n\" +\n        \"/** @type {*} */var y;\\n\" +\n        \"f(y);\");\n  }\n",
        "begin_line": 345,
        "end_line": 349,
        "comment": "",
        "child_ranges": [
            "(line 346,col 5)-(line 348,col 17)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testOptionalUnknownNamedType()",
        "snippet": "  public void testOptionalUnknownNamedType() throws Exception {\n    testTypes(\"/** @param {!T} opt_x\\n@return {undefined} */\\n\" +\n        \"function f(opt_x) { return opt_x; }\\n\" +\n        \"/** @constructor */var T = function() {};\",\n        \"inconsistent return type\\n\" +\n        \"found   : (T|undefined)\\n\" +\n        \"required: undefined\");\n  }\n",
        "begin_line": 351,
        "end_line": 358,
        "comment": "",
        "child_ranges": [
            "(line 352,col 5)-(line 357,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testOptionalArgFunctionParam()",
        "snippet": "  public void testOptionalArgFunctionParam() throws Exception {\n    testTypes(\"/** @param {function(number=)} a */\" +\n        \"function f(a) {a()};\");\n  }\n",
        "begin_line": 360,
        "end_line": 363,
        "comment": "",
        "child_ranges": [
            "(line 361,col 5)-(line 362,col 32)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testOptionalArgFunctionParam2()",
        "snippet": "  public void testOptionalArgFunctionParam2() throws Exception {\n    testTypes(\"/** @param {function(number=)} a */\" +\n        \"function f(a) {a(3)};\");\n  }\n",
        "begin_line": 365,
        "end_line": 368,
        "comment": "",
        "child_ranges": [
            "(line 366,col 5)-(line 367,col 33)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testOptionalArgFunctionParam3()",
        "snippet": "  public void testOptionalArgFunctionParam3() throws Exception {\n    testTypes(\"/** @param {function(number=)} a */\" +\n        \"function f(a) {a(undefined)};\");\n  }\n",
        "begin_line": 370,
        "end_line": 373,
        "comment": "",
        "child_ranges": [
            "(line 371,col 5)-(line 372,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testOptionalArgFunctionParam4()",
        "snippet": "  public void testOptionalArgFunctionParam4() throws Exception {\n    String expectedWarning = \"Function a: called with 2 argument(s). \" +\n        \"Function requires at least 0 argument(s) and no more than 1 \" +\n        \"argument(s).\";\n\n    testTypes(\"/** @param {function(number=)} a */function f(a) {a(3,4)};\",\n              expectedWarning, false);\n  }\n",
        "begin_line": 375,
        "end_line": 382,
        "comment": "",
        "child_ranges": [
            "(line 376,col 5)-(line 378,col 23)",
            "(line 380,col 5)-(line 381,col 38)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testOptionalArgFunctionParamError()",
        "snippet": "  public void testOptionalArgFunctionParamError() throws Exception {\n    String expectedWarning =\n        \"Bad type annotation. variable length argument must be last\";\n    testTypes(\"/** @param {function(...[number], number=)} a */\" +\n              \"function f(a) {};\", expectedWarning, false);\n  }\n",
        "begin_line": 384,
        "end_line": 389,
        "comment": "",
        "child_ranges": [
            "(line 385,col 5)-(line 386,col 69)",
            "(line 387,col 5)-(line 388,col 59)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testOptionalNullableArgFunctionParam()",
        "snippet": "  public void testOptionalNullableArgFunctionParam() throws Exception {\n    testTypes(\"/** @param {function(?number=)} a */\" +\n              \"function f(a) {a()};\");\n  }\n",
        "begin_line": 391,
        "end_line": 394,
        "comment": "",
        "child_ranges": [
            "(line 392,col 5)-(line 393,col 38)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testOptionalNullableArgFunctionParam2()",
        "snippet": "  public void testOptionalNullableArgFunctionParam2() throws Exception {\n    testTypes(\"/** @param {function(?number=)} a */\" +\n              \"function f(a) {a(null)};\");\n  }\n",
        "begin_line": 396,
        "end_line": 399,
        "comment": "",
        "child_ranges": [
            "(line 397,col 5)-(line 398,col 42)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testOptionalNullableArgFunctionParam3()",
        "snippet": "  public void testOptionalNullableArgFunctionParam3() throws Exception {\n    testTypes(\"/** @param {function(?number=)} a */\" +\n              \"function f(a) {a(3)};\");\n  }\n",
        "begin_line": 401,
        "end_line": 404,
        "comment": "",
        "child_ranges": [
            "(line 402,col 5)-(line 403,col 39)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testOptionalArgFunctionReturn()",
        "snippet": "  public void testOptionalArgFunctionReturn() throws Exception {\n    testTypes(\"/** @return {function(number=)} */\" +\n              \"function f() { return function(opt_x) { }; };\" +\n              \"f()()\");\n  }\n",
        "begin_line": 406,
        "end_line": 410,
        "comment": "",
        "child_ranges": [
            "(line 407,col 5)-(line 409,col 23)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testOptionalArgFunctionReturn2()",
        "snippet": "  public void testOptionalArgFunctionReturn2() throws Exception {\n    testTypes(\"/** @return {function(Object=)} */\" +\n              \"function f() { return function(opt_x) { }; };\" +\n              \"f()({})\");\n  }\n",
        "begin_line": 412,
        "end_line": 416,
        "comment": "",
        "child_ranges": [
            "(line 413,col 5)-(line 415,col 25)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testBooleanType()",
        "snippet": "  public void testBooleanType() throws Exception {\n    testTypes(\"/**@type {boolean} */var x = 1 < 2;\");\n  }\n",
        "begin_line": 418,
        "end_line": 420,
        "comment": "",
        "child_ranges": [
            "(line 419,col 5)-(line 419,col 53)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testBooleanReduction1()",
        "snippet": "  public void testBooleanReduction1() throws Exception {\n    testTypes(\"/**@type {string} */var x; x = null || \\\"a\\\";\");\n  }\n",
        "begin_line": 422,
        "end_line": 424,
        "comment": "",
        "child_ranges": [
            "(line 423,col 5)-(line 423,col 63)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testBooleanReduction2()",
        "snippet": "  public void testBooleanReduction2() throws Exception {\n    // It's important for the type system to recognize that in no case\n    // can the boolean expression evaluate to a boolean value.\n    testTypes(\"/** @param {string} s\\n @return {string} */\" +\n        \"(function(s) { return ((s == 'a') && s) || 'b'; })\");\n  }\n",
        "begin_line": 426,
        "end_line": 431,
        "comment": "",
        "child_ranges": [
            "(line 429,col 5)-(line 430,col 62)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testBooleanReduction3()",
        "snippet": "  public void testBooleanReduction3() throws Exception {\n    testTypes(\"/** @param {string} s\\n @return {string?} */\" +\n        \"(function(s) { return s && null && 3; })\");\n  }\n",
        "begin_line": 433,
        "end_line": 436,
        "comment": "",
        "child_ranges": [
            "(line 434,col 5)-(line 435,col 52)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testBooleanReduction4()",
        "snippet": "  public void testBooleanReduction4() throws Exception {\n    testTypes(\"/** @param {Object} x\\n @return {Object} */\" +\n        \"(function(x) { return null || x || null ; })\");\n  }\n",
        "begin_line": 438,
        "end_line": 441,
        "comment": "",
        "child_ranges": [
            "(line 439,col 5)-(line 440,col 56)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testBooleanReduction5()",
        "snippet": "  public void testBooleanReduction5() throws Exception {\n    testTypes(\"/**\\n\" +\n        \"* @param {Array|string} x\\n\" +\n        \"* @return {string?}\\n\" +\n        \"*/\\n\" +\n        \"var f = function(x) {\\n\" +\n        \"if (!x || typeof x == 'string') {\\n\" +\n        \"return x;\\n\" +\n        \"}\\n\" +\n        \"return null;\\n\" +\n        \"};\");\n  }\n",
        "begin_line": 443,
        "end_line": 454,
        "comment": "",
        "child_ranges": [
            "(line 444,col 5)-(line 453,col 14)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testBooleanReduction6()",
        "snippet": "  public void testBooleanReduction6() throws Exception {\n    testTypes(\"/**\\n\" +\n        \"* @param {Array|string|null} x\\n\" +\n        \"* @return {string?}\\n\" +\n        \"*/\\n\" +\n        \"var f = function(x) {\\n\" +\n        \"if (!(x && typeof x != 'string')) {\\n\" +\n        \"return x;\\n\" +\n        \"}\\n\" +\n        \"return null;\\n\" +\n        \"};\");\n  }\n",
        "begin_line": 456,
        "end_line": 467,
        "comment": "",
        "child_ranges": [
            "(line 457,col 5)-(line 466,col 14)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testBooleanReduction7()",
        "snippet": "   public void testBooleanReduction7() throws Exception {\n     testTypes(\"/** @constructor */var T = function() {};\\n\" +\n         \"/**\\n\" +\n         \"* @param {Array|T} x\\n\" +\n         \"* @return {null|undefined}\\n\" +\n         \"*/\\n\" +\n         \"var f = function(x) {\\n\" +\n         \"if (!x) {\\n\" +\n         \"return x;\\n\" +\n         \"}\\n\" +\n         \"return null;\\n\" +\n         \"};\");\n   }\n",
        "begin_line": 469,
        "end_line": 481,
        "comment": "",
        "child_ranges": [
            "(line 470,col 6)-(line 480,col 15)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testNullAnd()",
        "snippet": "  public void testNullAnd() throws Exception {\n    testTypes(\"/** @type null */var x;\\n\" +\n        \"/** @type number */var r = x && x;\",\n        \"initializing variable\\n\" +\n        \"found   : null\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 483,
        "end_line": 489,
        "comment": "",
        "child_ranges": [
            "(line 484,col 5)-(line 488,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testNullOr()",
        "snippet": "  public void testNullOr() throws Exception {\n    testTypes(\"/** @type null */var x;\\n\" +\n        \"/** @type number */var r = x || x;\",\n        \"initializing variable\\n\" +\n        \"found   : null\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 491,
        "end_line": 497,
        "comment": "",
        "child_ranges": [
            "(line 492,col 5)-(line 496,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testBooleanPreservation1()",
        "snippet": "  public void testBooleanPreservation1() throws Exception {\n    testTypes(\"/**@type {string} */var x = \\\"a\\\";\" +\n        \"x = ((x == \\\"a\\\") && x) || x == \\\"b\\\";\",\n        \"assignment\\n\" +\n        \"found   : (boolean|string)\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 499,
        "end_line": 505,
        "comment": "",
        "child_ranges": [
            "(line 500,col 5)-(line 504,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testBooleanPreservation2()",
        "snippet": "  public void testBooleanPreservation2() throws Exception {\n    testTypes(\"/**@type {string} */var x = \\\"a\\\"; x = (x == \\\"a\\\") || x;\",\n        \"assignment\\n\" +\n        \"found   : (boolean|string)\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 507,
        "end_line": 512,
        "comment": "",
        "child_ranges": [
            "(line 508,col 5)-(line 511,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testBooleanPreservation3()",
        "snippet": "  public void testBooleanPreservation3() throws Exception {\n    testTypes(\"/** @param {Function?} x\\n @return {boolean?} */\" +\n        \"function f(x) { return x && x == \\\"a\\\"; }\",\n        \"condition always evaluates to false\\n\" +\n        \"left : Function\\n\" +\n        \"right: string\");\n  }\n",
        "begin_line": 514,
        "end_line": 520,
        "comment": "",
        "child_ranges": [
            "(line 515,col 5)-(line 519,col 25)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testBooleanPreservation4()",
        "snippet": "  public void testBooleanPreservation4() throws Exception {\n    testTypes(\"/** @param {Function?|boolean} x\\n @return {boolean} */\" +\n        \"function f(x) { return x && x == \\\"a\\\"; }\",\n        \"inconsistent return type\\n\" +\n        \"found   : (boolean|null|undefined)\\n\" +\n        \"required: boolean\");\n  }\n",
        "begin_line": 522,
        "end_line": 528,
        "comment": "",
        "child_ranges": [
            "(line 523,col 5)-(line 527,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testTypeOfReduction1()",
        "snippet": "  public void testTypeOfReduction1() throws Exception {\n    testTypes(\"/** @param {string|number} x\\n @return {string} */ \" +\n        \"function f(x) { return typeof x == 'number' ? String(x) : x; }\");\n  }\n",
        "begin_line": 530,
        "end_line": 533,
        "comment": "",
        "child_ranges": [
            "(line 531,col 5)-(line 532,col 74)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testTypeOfReduction2()",
        "snippet": "  public void testTypeOfReduction2() throws Exception {\n    testTypes(\"/** @param {string|number} x\\n @return {string} */ \" +\n        \"function f(x) { return typeof x != 'string' ? String(x) : x; }\");\n  }\n",
        "begin_line": 535,
        "end_line": 538,
        "comment": "",
        "child_ranges": [
            "(line 536,col 5)-(line 537,col 74)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testTypeOfReduction3()",
        "snippet": "  public void testTypeOfReduction3() throws Exception {\n    testTypes(\"/** @param {number|null} x\\n @return {number} */ \" +\n        \"function f(x) { return typeof x == 'object' ? 1 : x; }\");\n  }\n",
        "begin_line": 540,
        "end_line": 543,
        "comment": "",
        "child_ranges": [
            "(line 541,col 5)-(line 542,col 66)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testTypeOfReduction4()",
        "snippet": "  public void testTypeOfReduction4() throws Exception {\n    testTypes(\"/** @param {Object|undefined} x\\n @return {Object} */ \" +\n        \"function f(x) { return typeof x == 'undefined' ? {} : x; }\");\n  }\n",
        "begin_line": 545,
        "end_line": 548,
        "comment": "",
        "child_ranges": [
            "(line 546,col 5)-(line 547,col 70)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testTypeOfReduction5()",
        "snippet": "  public void testTypeOfReduction5() throws Exception {\n    testTypes(\"/** @enum {string} */ var E = {A: 'a', B: 'b'};\\n\" +\n        \"/** @param {!E|number} x\\n @return {string} */ \" +\n        \"function f(x) { return typeof x != 'number' ? x : 'a'; }\");\n  }\n",
        "begin_line": 550,
        "end_line": 554,
        "comment": "",
        "child_ranges": [
            "(line 551,col 5)-(line 553,col 68)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testTypeOfReduction6()",
        "snippet": "  public void testTypeOfReduction6() throws Exception {\n    testTypes(\"/** @param {number|string} x\\n@return {string} */\\n\" +\n        \"function f(x) {\\n\" +\n        \"return typeof x == 'string' && x.length == 3 ? x : 'a';\\n\" +\n        \"}\");\n  }\n",
        "begin_line": 556,
        "end_line": 561,
        "comment": "",
        "child_ranges": [
            "(line 557,col 5)-(line 560,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testTypeOfReduction7()",
        "snippet": "  public void testTypeOfReduction7() throws Exception {\n    testTypes(\"/** @return {string} */var f = function(x) { \" +\n        \"return typeof x == 'number' ? x : 'a'; }\",\n        \"inconsistent return type\\n\" +\n        \"found   : (number|string)\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 563,
        "end_line": 569,
        "comment": "",
        "child_ranges": [
            "(line 564,col 5)-(line 568,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testTypeOfReduction8()",
        "snippet": "  public void testTypeOfReduction8() throws Exception {\n    testClosureTypes(\n        CLOSURE_DEFS +\n        \"/** @param {number|string} x\\n@return {string} */\\n\" +\n        \"function f(x) {\\n\" +\n        \"return goog.isString(x) && x.length == 3 ? x : 'a';\\n\" +\n        \"}\", null);\n  }\n",
        "begin_line": 571,
        "end_line": 578,
        "comment": "",
        "child_ranges": [
            "(line 572,col 5)-(line 577,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testTypeOfReduction9()",
        "snippet": "  public void testTypeOfReduction9() throws Exception {\n    testClosureTypes(\n        CLOSURE_DEFS +\n        \"/** @param {!Array|string} x\\n@return {string} */\\n\" +\n        \"function f(x) {\\n\" +\n        \"return goog.isArray(x) ? 'a' : x;\\n\" +\n        \"}\", null);\n  }\n",
        "begin_line": 580,
        "end_line": 587,
        "comment": "",
        "child_ranges": [
            "(line 581,col 5)-(line 586,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testTypeOfReduction10()",
        "snippet": "  public void testTypeOfReduction10() throws Exception {\n    testClosureTypes(\n        CLOSURE_DEFS +\n        \"/** @param {Array|string} x\\n@return {Array} */\\n\" +\n        \"function f(x) {\\n\" +\n        \"return goog.isArray(x) ? x : [];\\n\" +\n        \"}\", null);\n  }\n",
        "begin_line": 589,
        "end_line": 596,
        "comment": "",
        "child_ranges": [
            "(line 590,col 5)-(line 595,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testTypeOfReduction11()",
        "snippet": "  public void testTypeOfReduction11() throws Exception {\n    testClosureTypes(\n        CLOSURE_DEFS +\n        \"/** @param {Array|string} x\\n@return {Array} */\\n\" +\n        \"function f(x) {\\n\" +\n        \"return goog.isObject(x) ? x : [];\\n\" +\n        \"}\", null);\n  }\n",
        "begin_line": 598,
        "end_line": 605,
        "comment": "",
        "child_ranges": [
            "(line 599,col 5)-(line 604,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testTypeOfReduction12()",
        "snippet": "  public void testTypeOfReduction12() throws Exception {\n    testTypes(\"/** @enum {string} */ var E = {A: 'a', B: 'b'};\\n\" +\n        \"/** @param {E|Array} x\\n @return {Array} */ \" +\n        \"function f(x) { return typeof x == 'object' ? x : []; }\");\n  }\n",
        "begin_line": 607,
        "end_line": 611,
        "comment": "",
        "child_ranges": [
            "(line 608,col 5)-(line 610,col 67)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testTypeOfReduction13()",
        "snippet": "  public void testTypeOfReduction13() throws Exception {\n    testClosureTypes(\n        CLOSURE_DEFS +\n        \"/** @enum {string} */ var E = {A: 'a', B: 'b'};\\n\" +\n        \"/** @param {E|Array} x\\n@return {Array} */ \" +\n        \"function f(x) { return goog.isObject(x) ? x : []; }\", null);\n  }\n",
        "begin_line": 613,
        "end_line": 619,
        "comment": "",
        "child_ranges": [
            "(line 614,col 5)-(line 618,col 69)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testTypeOfReduction14()",
        "snippet": "  public void testTypeOfReduction14() throws Exception {\n    // Don't do type inference on GETELEMs.\n    testClosureTypes(\n        CLOSURE_DEFS +\n        \"function f(arguments) { \" +\n        \"  return goog.isString(arguments[0]) ? arguments[0] : 0;\" +\n        \"}\", null);\n  }\n",
        "begin_line": 621,
        "end_line": 628,
        "comment": "",
        "child_ranges": [
            "(line 623,col 5)-(line 627,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testTypeOfReduction15()",
        "snippet": "  public void testTypeOfReduction15() throws Exception {\n    // Don't do type inference on GETELEMs.\n    testClosureTypes(\n        CLOSURE_DEFS +\n        \"function f(arguments) { \" +\n        \"  return typeof arguments[0] == 'string' ? arguments[0] : 0;\" +\n        \"}\", null);\n  }\n",
        "begin_line": 630,
        "end_line": 637,
        "comment": "",
        "child_ranges": [
            "(line 632,col 5)-(line 636,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testQualifiedNameReduction1()",
        "snippet": "  public void testQualifiedNameReduction1() throws Exception {\n    testTypes(\"var x = {}; /** @type {string?} */ x.a = 'a';\\n\" +\n        \"/** @return {string} */ var f = function() {\\n\" +\n        \"return x.a ? x.a : 'a'; }\");\n  }\n",
        "begin_line": 639,
        "end_line": 643,
        "comment": "",
        "child_ranges": [
            "(line 640,col 5)-(line 642,col 37)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testQualifiedNameReduction2()",
        "snippet": "  public void testQualifiedNameReduction2() throws Exception {\n    testTypes(\"/** @param {string?} a\\n@constructor */ var T = \" +\n        \"function(a) {this.a = a};\\n\" +\n        \"/** @return {string} */ T.prototype.f = function() {\\n\" +\n        \"return this.a ? this.a : 'a'; }\");\n  }\n",
        "begin_line": 645,
        "end_line": 650,
        "comment": "",
        "child_ranges": [
            "(line 646,col 5)-(line 649,col 43)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testQualifiedNameReduction3()",
        "snippet": "  public void testQualifiedNameReduction3() throws Exception {\n    testTypes(\"/** @param {string|Array} a\\n@constructor */ var T = \" +\n        \"function(a) {this.a = a};\\n\" +\n        \"/** @return {string} */ T.prototype.f = function() {\\n\" +\n        \"return typeof this.a == 'string' ? this.a : 'a'; }\");\n  }\n",
        "begin_line": 652,
        "end_line": 657,
        "comment": "",
        "child_ranges": [
            "(line 653,col 5)-(line 656,col 62)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testQualifiedNameReduction4()",
        "snippet": "  public void testQualifiedNameReduction4() throws Exception {\n    testClosureTypes(\n        CLOSURE_DEFS +\n        \"/** @param {string|Array} a\\n@constructor */ var T = \" +\n        \"function(a) {this.a = a};\\n\" +\n        \"/** @return {string} */ T.prototype.f = function() {\\n\" +\n        \"return goog.isString(this.a) ? this.a : 'a'; }\", null);\n  }\n",
        "begin_line": 659,
        "end_line": 666,
        "comment": "",
        "child_ranges": [
            "(line 660,col 5)-(line 665,col 64)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testInstanceOfReduction1()",
        "snippet": "  public void testInstanceOfReduction1() throws Exception {\n    testTypes(\"/** @constructor */ var T = function() {};\\n\" +\n        \"/** @param {T|string} x\\n@return {T} */\\n\" +\n        \"var f = function(x) {\\n\" +\n        \"if (x instanceof T) { return x; } else { return new T(); }\\n\" +\n        \"};\");\n  }\n",
        "begin_line": 668,
        "end_line": 674,
        "comment": "",
        "child_ranges": [
            "(line 669,col 5)-(line 673,col 14)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testInstanceOfReduction2()",
        "snippet": "  public void testInstanceOfReduction2() throws Exception {\n    testTypes(\"/** @constructor */ var T = function() {};\\n\" +\n        \"/** @param {!T|string} x\\n@return {string} */\\n\" +\n        \"var f = function(x) {\\n\" +\n        \"if (x instanceof T) { return ''; } else { return x; }\\n\" +\n        \"};\");\n  }\n",
        "begin_line": 676,
        "end_line": 682,
        "comment": "",
        "child_ranges": [
            "(line 677,col 5)-(line 681,col 14)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testPropertyInferredPropagation()",
        "snippet": "  public void testPropertyInferredPropagation() throws Exception {\n    testTypes(\"/** @return {Object} */function f() { return {}; }\\n\" +\n         \"function g() { var x = f(); if (x.p) x.a = 'a'; else x.a = 'b'; }\\n\" +\n         \"function h() { var x = f(); x.a = false; }\");\n  }\n",
        "begin_line": 684,
        "end_line": 688,
        "comment": "",
        "child_ranges": [
            "(line 685,col 5)-(line 687,col 55)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testPropertyInference1()",
        "snippet": "  public void testPropertyInference1() throws Exception {\n    testTypes(\n        \"/** @constructor */ function F() { this.x_ = true; }\" +\n        \"/** @return {string} */\" +\n        \"F.prototype.bar = function() { if (this.x_) return this.x_; };\",\n        \"inconsistent return type\\n\" +\n        \"found   : boolean\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 690,
        "end_line": 698,
        "comment": "",
        "child_ranges": [
            "(line 691,col 5)-(line 697,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testPropertyInference2()",
        "snippet": "  public void testPropertyInference2() throws Exception {\n    testTypes(\n        \"/** @constructor */ function F() { this.x_ = true; }\" +\n        \"F.prototype.baz = function() { this.x_ = null; };\" +\n        \"/** @return {string} */\" +\n        \"F.prototype.bar = function() { if (this.x_) return this.x_; };\",\n        \"inconsistent return type\\n\" +\n        \"found   : boolean\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 700,
        "end_line": 709,
        "comment": "",
        "child_ranges": [
            "(line 701,col 5)-(line 708,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testPropertyInference3()",
        "snippet": "  public void testPropertyInference3() throws Exception {\n    testTypes(\n        \"/** @constructor */ function F() { this.x_ = true; }\" +\n        \"F.prototype.baz = function() { this.x_ = 3; };\" +\n        \"/** @return {string} */\" +\n        \"F.prototype.bar = function() { if (this.x_) return this.x_; };\",\n        \"inconsistent return type\\n\" +\n        \"found   : (boolean|number)\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 711,
        "end_line": 720,
        "comment": "",
        "child_ranges": [
            "(line 712,col 5)-(line 719,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testPropertyInference4()",
        "snippet": "  public void testPropertyInference4() throws Exception {\n    testTypes(\n        \"/** @constructor */ function F() { }\" +\n        \"F.prototype.x_ = 3;\" +\n        \"/** @return {string} */\" +\n        \"F.prototype.bar = function() { if (this.x_) return this.x_; };\",\n        \"inconsistent return type\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 722,
        "end_line": 731,
        "comment": "",
        "child_ranges": [
            "(line 723,col 5)-(line 730,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testPropertyInference5()",
        "snippet": "  public void testPropertyInference5() throws Exception {\n    testTypes(\n        \"/** @constructor */ function F() { }\" +\n        \"F.prototype.baz = function() { this.x_ = 3; };\" +\n        \"/** @return {string} */\" +\n        \"F.prototype.bar = function() { if (this.x_) return this.x_; };\");\n  }\n",
        "begin_line": 733,
        "end_line": 739,
        "comment": "",
        "child_ranges": [
            "(line 734,col 5)-(line 738,col 74)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testPropertyInference6()",
        "snippet": "  public void testPropertyInference6() throws Exception {\n    testTypes(\n        \"/** @constructor */ function F() { }\" +\n        \"(new F).x_ = 3;\" +\n        \"/** @return {string} */\" +\n        \"F.prototype.bar = function() { return this.x_; };\");\n  }\n",
        "begin_line": 741,
        "end_line": 747,
        "comment": "",
        "child_ranges": [
            "(line 742,col 5)-(line 746,col 61)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testPropertyInference7()",
        "snippet": "  public void testPropertyInference7() throws Exception {\n    testTypes(\n        \"/** @constructor */ function F() { this.x_ = true; }\" +\n        \"(new F).x_ = 3;\" +\n        \"/** @return {string} */\" +\n        \"F.prototype.bar = function() { return this.x_; };\",\n        \"inconsistent return type\\n\" +\n        \"found   : boolean\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 749,
        "end_line": 758,
        "comment": "",
        "child_ranges": [
            "(line 750,col 5)-(line 757,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testPropertyInference8()",
        "snippet": "  public void testPropertyInference8() throws Exception {\n    testTypes(\n        \"/** @constructor */ function F() { \" +\n        \"  /** @type {string} */ this.x_ = 'x';\" +\n        \"}\" +\n        \"(new F).x_ = 3;\" +\n        \"/** @return {string} */\" +\n        \"F.prototype.bar = function() { return this.x_; };\",\n        \"assignment to property x_ of F\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 760,
        "end_line": 771,
        "comment": "",
        "child_ranges": [
            "(line 761,col 5)-(line 770,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testNoPersistentTypeInferenceForObjectProperties()",
        "snippet": "  public void testNoPersistentTypeInferenceForObjectProperties()\n      throws Exception {\n    testTypes(\"/** @param {Object} o\\n@param {string} x */\\n\" +\n        \"function s1(o,x) { o.x = x; }\\n\" +\n        \"/** @param {Object} o\\n@return {string} */\\n\" +\n        \"function g1(o) { return typeof o.x == 'undefined' ? '' : o.x; }\\n\" +\n        \"/** @param {Object} o\\n@param {number} x */\\n\" +\n        \"function s2(o,x) { o.x = x; }\\n\" +\n        \"/** @param {Object} o\\n@return {number} */\\n\" +\n        \"function g2(o) { return typeof o.x == 'undefined' ? 0 : o.x; }\");\n  }\n",
        "begin_line": 773,
        "end_line": 783,
        "comment": "",
        "child_ranges": [
            "(line 775,col 5)-(line 782,col 74)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testNoPersistentTypeInferenceForFunctionProperties()",
        "snippet": "  public void testNoPersistentTypeInferenceForFunctionProperties()\n      throws Exception {\n    testTypes(\"/** @param {Function} o\\n@param {string} x */\\n\" +\n        \"function s1(o,x) { o.x = x; }\\n\" +\n        \"/** @param {Function} o\\n@return {string} */\\n\" +\n        \"function g1(o) { return typeof o.x == 'undefined' ? '' : o.x; }\\n\" +\n        \"/** @param {Function} o\\n@param {number} x */\\n\" +\n        \"function s2(o,x) { o.x = x; }\\n\" +\n        \"/** @param {Function} o\\n@return {number} */\\n\" +\n        \"function g2(o) { return typeof o.x == 'undefined' ? 0 : o.x; }\");\n  }\n",
        "begin_line": 785,
        "end_line": 795,
        "comment": "",
        "child_ranges": [
            "(line 787,col 5)-(line 794,col 74)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testObjectPropertyTypeInferredInLocalScope1()",
        "snippet": "  public void testObjectPropertyTypeInferredInLocalScope1() throws Exception {\n    testTypes(\"/** @param {!Object} o\\n@return {string} */\\n\" +\n        \"function f(o) { o.x = 1; return o.x; }\",\n        \"inconsistent return type\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 797,
        "end_line": 803,
        "comment": "",
        "child_ranges": [
            "(line 798,col 5)-(line 802,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testObjectPropertyTypeInferredInLocalScope2()",
        "snippet": "  public void testObjectPropertyTypeInferredInLocalScope2() throws Exception {\n    testTypes(\"/**@param {!Object} o\\n@param {number?} x\\n@return {string}*/\" +\n        \"function f(o, x) { o.x = 'a';\\nif (x) {o.x = x;}\\nreturn o.x; }\",\n        \"inconsistent return type\\n\" +\n        \"found   : (number|string)\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 805,
        "end_line": 811,
        "comment": "",
        "child_ranges": [
            "(line 806,col 5)-(line 810,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testObjectPropertyTypeInferredInLocalScope3()",
        "snippet": "  public void testObjectPropertyTypeInferredInLocalScope3() throws Exception {\n    testTypes(\"/**@param {!Object} o\\n@param {number?} x\\n@return {string}*/\" +\n        \"function f(o, x) { if (x) {o.x = x;} else {o.x = 'a';}\\nreturn o.x; }\",\n        \"inconsistent return type\\n\" +\n        \"found   : (number|string)\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 813,
        "end_line": 819,
        "comment": "",
        "child_ranges": [
            "(line 814,col 5)-(line 818,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testMismatchingOverridingInferredPropertyBeforeDeclaredProperty1()",
        "snippet": "  public void testMismatchingOverridingInferredPropertyBeforeDeclaredProperty1()\n      throws Exception {\n    testTypes(\"/** @constructor */var T = function() { this.x = ''; };\\n\" +\n        \"/** @type {number} */ T.prototype.x = 0;\",\n        \"assignment to property x of T\\n\" +\n        \"found   : string\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 821,
        "end_line": 828,
        "comment": "",
        "child_ranges": [
            "(line 823,col 5)-(line 827,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testMismatchingOverridingInferredPropertyBeforeDeclaredProperty2()",
        "snippet": "  public void testMismatchingOverridingInferredPropertyBeforeDeclaredProperty2()\n      throws Exception {\n    testTypes(\"/** @constructor */var T = function() { this.x = ''; };\\n\" +\n        \"/** @type {number} */ T.prototype.x;\",\n        \"assignment to property x of T\\n\" +\n        \"found   : string\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 830,
        "end_line": 837,
        "comment": "",
        "child_ranges": [
            "(line 832,col 5)-(line 836,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testMismatchingOverridingInferredPropertyBeforeDeclaredProperty3()",
        "snippet": "  public void testMismatchingOverridingInferredPropertyBeforeDeclaredProperty3()\n      throws Exception {\n    testTypes(\"/** @type {Object} */ var n = {};\\n\" +\n        \"/** @constructor */ n.T = function() { this.x = ''; };\\n\" +\n        \"/** @type {number} */ n.T.prototype.x = 0;\",\n        \"assignment to property x of n.T\\n\" +\n        \"found   : string\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 839,
        "end_line": 847,
        "comment": "",
        "child_ranges": [
            "(line 841,col 5)-(line 846,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testMismatchingOverridingInferredPropertyBeforeDeclaredProperty4()",
        "snippet": "  public void testMismatchingOverridingInferredPropertyBeforeDeclaredProperty4()\n      throws Exception {\n    testTypes(\"var n = {};\\n\" +\n        \"/** @constructor */ n.T = function() { this.x = ''; };\\n\" +\n        \"/** @type {number} */ n.T.prototype.x = 0;\",\n        \"assignment to property x of n.T\\n\" +\n        \"found   : string\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 849,
        "end_line": 857,
        "comment": "",
        "child_ranges": [
            "(line 851,col 5)-(line 856,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testPropertyUsedBeforeDefinition1()",
        "snippet": "  public void testPropertyUsedBeforeDefinition1() throws Exception {\n    testTypes(\"/** @constructor */ var T = function() {};\\n\" +\n        \"/** @return {string} */\" +\n        \"T.prototype.f = function() { return this.g(); };\\n\" +\n        \"/** @return {number} */ T.prototype.g = function() { return 1; };\\n\",\n        \"inconsistent return type\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 859,
        "end_line": 867,
        "comment": "",
        "child_ranges": [
            "(line 860,col 5)-(line 866,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testPropertyUsedBeforeDefinition2()",
        "snippet": "  public void testPropertyUsedBeforeDefinition2() throws Exception {\n    testTypes(\"var n = {};\\n\" +\n        \"/** @constructor */ n.T = function() {};\\n\" +\n        \"/** @return {string} */\" +\n        \"n.T.prototype.f = function() { return this.g(); };\\n\" +\n        \"/** @return {number} */ n.T.prototype.g = function() { return 1; };\\n\",\n        \"inconsistent return type\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 869,
        "end_line": 878,
        "comment": "",
        "child_ranges": [
            "(line 870,col 5)-(line 877,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testAdd1()",
        "snippet": "  public void testAdd1() throws Exception {\n    testTypes(\"/**@return {void}*/function foo(){var a = 'abc'+foo();}\");\n  }\n",
        "begin_line": 880,
        "end_line": 882,
        "comment": "",
        "child_ranges": [
            "(line 881,col 5)-(line 881,col 73)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testAdd2()",
        "snippet": "  public void testAdd2() throws Exception {\n    testTypes(\"/**@return {void}*/function foo(){var a = foo()+4;}\");\n  }\n",
        "begin_line": 884,
        "end_line": 886,
        "comment": "",
        "child_ranges": [
            "(line 885,col 5)-(line 885,col 69)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testAdd3()",
        "snippet": "  public void testAdd3() throws Exception {\n    testTypes(\"/** @type {string} */ var a = 'a';\" +\n        \"/** @type {string} */ var b = 'b';\" +\n        \"/** @type {string} */ var c = a + b;\");\n  }\n",
        "begin_line": 888,
        "end_line": 892,
        "comment": "",
        "child_ranges": [
            "(line 889,col 5)-(line 891,col 48)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testAdd4()",
        "snippet": "  public void testAdd4() throws Exception {\n    testTypes(\"/** @type {number} */ var a = 5;\" +\n        \"/** @type {string} */ var b = 'b';\" +\n        \"/** @type {string} */ var c = a + b;\");\n  }\n",
        "begin_line": 894,
        "end_line": 898,
        "comment": "",
        "child_ranges": [
            "(line 895,col 5)-(line 897,col 48)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testAdd5()",
        "snippet": "  public void testAdd5() throws Exception {\n    testTypes(\"/** @type {string} */ var a = 'a';\" +\n        \"/** @type {number} */ var b = 5;\" +\n        \"/** @type {string} */ var c = a + b;\");\n  }\n",
        "begin_line": 900,
        "end_line": 904,
        "comment": "",
        "child_ranges": [
            "(line 901,col 5)-(line 903,col 48)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testAdd6()",
        "snippet": "  public void testAdd6() throws Exception {\n    testTypes(\"/** @type {number} */ var a = 5;\" +\n        \"/** @type {number} */ var b = 5;\" +\n        \"/** @type {number} */ var c = a + b;\");\n  }\n",
        "begin_line": 906,
        "end_line": 910,
        "comment": "",
        "child_ranges": [
            "(line 907,col 5)-(line 909,col 48)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testAdd7()",
        "snippet": "  public void testAdd7() throws Exception {\n    testTypes(\"/** @type {number} */ var a = 5;\" +\n        \"/** @type {string} */ var b = 'b';\" +\n        \"/** @type {number} */ var c = a + b;\",\n        \"initializing variable\\n\" +\n        \"found   : string\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 912,
        "end_line": 919,
        "comment": "",
        "child_ranges": [
            "(line 913,col 5)-(line 918,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testAdd8()",
        "snippet": "  public void testAdd8() throws Exception {\n    testTypes(\"/** @type {string} */ var a = 'a';\" +\n        \"/** @type {number} */ var b = 5;\" +\n        \"/** @type {number} */ var c = a + b;\",\n        \"initializing variable\\n\" +\n        \"found   : string\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 921,
        "end_line": 928,
        "comment": "",
        "child_ranges": [
            "(line 922,col 5)-(line 927,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testAdd9()",
        "snippet": "  public void testAdd9() throws Exception {\n    testTypes(\"/** @type {number} */ var a = 5;\" +\n        \"/** @type {number} */ var b = 5;\" +\n        \"/** @type {string} */ var c = a + b;\",\n        \"initializing variable\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 930,
        "end_line": 937,
        "comment": "",
        "child_ranges": [
            "(line 931,col 5)-(line 936,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testAdd10()",
        "snippet": "  public void testAdd10() throws Exception {\n    // d.e.f will have unknown type.\n    testTypes(\n        suppressMissingProperty(\"e\", \"f\") +\n        \"/** @type {number} */ var a = 5;\" +\n        \"/** @type {string} */ var c = a + d.e.f;\");\n  }\n",
        "begin_line": 939,
        "end_line": 945,
        "comment": "",
        "child_ranges": [
            "(line 941,col 5)-(line 944,col 52)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testAdd11()",
        "snippet": "  public void testAdd11() throws Exception {\n    // d.e.f will have unknown type.\n    testTypes(\n        suppressMissingProperty(\"e\", \"f\") +\n        \"/** @type {number} */ var a = 5;\" +\n        \"/** @type {number} */ var c = a + d.e.f;\");\n  }\n",
        "begin_line": 947,
        "end_line": 953,
        "comment": "",
        "child_ranges": [
            "(line 949,col 5)-(line 952,col 52)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testAdd12()",
        "snippet": "  public void testAdd12() throws Exception {\n    testTypes(\"/** @return {(number,string)} */ function a() { return 5; }\" +\n        \"/** @type {number} */ var b = 5;\" +\n        \"/** @type {boolean} */ var c = a() + b;\",\n        \"initializing variable\\n\" +\n        \"found   : (number|string)\\n\" +\n        \"required: boolean\");\n  }\n",
        "begin_line": 955,
        "end_line": 962,
        "comment": "",
        "child_ranges": [
            "(line 956,col 5)-(line 961,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testAdd13()",
        "snippet": "  public void testAdd13() throws Exception {\n    testTypes(\"/** @type {number} */ var a = 5;\" +\n        \"/** @return {(number,string)} */ function b() { return 5; }\" +\n        \"/** @type {boolean} */ var c = a + b();\",\n        \"initializing variable\\n\" +\n        \"found   : (number|string)\\n\" +\n        \"required: boolean\");\n  }\n",
        "begin_line": 964,
        "end_line": 971,
        "comment": "",
        "child_ranges": [
            "(line 965,col 5)-(line 970,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testAdd14()",
        "snippet": "  public void testAdd14() throws Exception {\n    testTypes(\"/** @type {(null,string)} */ var a = null;\" +\n        \"/** @type {number} */ var b = 5;\" +\n        \"/** @type {boolean} */ var c = a + b;\",\n        \"initializing variable\\n\" +\n        \"found   : (number|string)\\n\" +\n        \"required: boolean\");\n  }\n",
        "begin_line": 973,
        "end_line": 980,
        "comment": "",
        "child_ranges": [
            "(line 974,col 5)-(line 979,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testAdd15()",
        "snippet": "  public void testAdd15() throws Exception {\n    testTypes(\"/** @type {number} */ var a = 5;\" +\n        \"/** @return {(number,string)} */ function b() { return 5; }\" +\n        \"/** @type {boolean} */ var c = a + b();\",\n        \"initializing variable\\n\" +\n        \"found   : (number|string)\\n\" +\n        \"required: boolean\");\n  }\n",
        "begin_line": 982,
        "end_line": 989,
        "comment": "",
        "child_ranges": [
            "(line 983,col 5)-(line 988,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testAdd16()",
        "snippet": "  public void testAdd16() throws Exception {\n    testTypes(\"/** @type {(undefined,string)} */ var a = undefined;\" +\n        \"/** @type {number} */ var b = 5;\" +\n        \"/** @type {boolean} */ var c = a + b;\",\n        \"initializing variable\\n\" +\n        \"found   : (number|string)\\n\" +\n        \"required: boolean\");\n  }\n",
        "begin_line": 991,
        "end_line": 998,
        "comment": "",
        "child_ranges": [
            "(line 992,col 5)-(line 997,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testAdd17()",
        "snippet": "  public void testAdd17() throws Exception {\n    testTypes(\"/** @type {number} */ var a = 5;\" +\n        \"/** @type {(undefined,string)} */ var b = undefined;\" +\n        \"/** @type {boolean} */ var c = a + b;\",\n        \"initializing variable\\n\" +\n        \"found   : (number|string)\\n\" +\n        \"required: boolean\");\n  }\n",
        "begin_line": 1000,
        "end_line": 1007,
        "comment": "",
        "child_ranges": [
            "(line 1001,col 5)-(line 1006,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testAdd18()",
        "snippet": "  public void testAdd18() throws Exception {\n    testTypes(\"function f() {};\" +\n        \"/** @type {string} */ var a = 'a';\" +\n        \"/** @type {number} */ var c = a + f();\",\n        \"initializing variable\\n\" +\n        \"found   : string\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 1009,
        "end_line": 1016,
        "comment": "",
        "child_ranges": [
            "(line 1010,col 5)-(line 1015,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testAdd19()",
        "snippet": "  public void testAdd19() throws Exception {\n    testTypes(\"/** @param {number} opt_x\\n@param {number} opt_y\\n\" +\n        \"@return {number} */ function f(opt_x, opt_y) {\" +\n        \"return opt_x + opt_y;}\");\n  }\n",
        "begin_line": 1018,
        "end_line": 1022,
        "comment": "",
        "child_ranges": [
            "(line 1019,col 5)-(line 1021,col 34)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testAdd20()",
        "snippet": "  public void testAdd20() throws Exception {\n    testTypes(\"/** @param {!Number} opt_x\\n@param {!Number} opt_y\\n\" +\n        \"@return {number} */ function f(opt_x, opt_y) {\" +\n        \"return opt_x + opt_y;}\");\n  }\n",
        "begin_line": 1024,
        "end_line": 1028,
        "comment": "",
        "child_ranges": [
            "(line 1025,col 5)-(line 1027,col 34)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testAdd21()",
        "snippet": "  public void testAdd21() throws Exception {\n    testTypes(\"/** @param {Number|Boolean} opt_x\\n\" +\n        \"@param {number|boolean} opt_y\\n\" +\n        \"@return {number} */ function f(opt_x, opt_y) {\" +\n        \"return opt_x + opt_y;}\");\n  }\n",
        "begin_line": 1030,
        "end_line": 1035,
        "comment": "",
        "child_ranges": [
            "(line 1031,col 5)-(line 1034,col 34)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testNumericComparison1()",
        "snippet": "  public void testNumericComparison1() throws Exception {\n    testTypes(\"/**@param {number} a*/ function f(a) {return a < 3;}\");\n  }\n",
        "begin_line": 1037,
        "end_line": 1039,
        "comment": "",
        "child_ranges": [
            "(line 1038,col 5)-(line 1038,col 70)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testNumericComparison2()",
        "snippet": "  public void testNumericComparison2() throws Exception {\n    testTypes(\"/**@param {!Object} a*/ function f(a) {return a < 3;}\",\n        \"left side of numeric comparison\\n\" +\n        \"found   : Object\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 1041,
        "end_line": 1046,
        "comment": "",
        "child_ranges": [
            "(line 1042,col 5)-(line 1045,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testNumericComparison3()",
        "snippet": "  public void testNumericComparison3() throws Exception {\n    testTypes(\"/**@param {string} a*/ function f(a) {return a < 3;}\");\n  }\n",
        "begin_line": 1048,
        "end_line": 1050,
        "comment": "",
        "child_ranges": [
            "(line 1049,col 5)-(line 1049,col 70)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testNumericComparison4()",
        "snippet": "  public void testNumericComparison4() throws Exception {\n    testTypes(\"/**@param {(number,undefined)} a*/ \" +\n              \"function f(a) {return a < 3;}\");\n  }\n",
        "begin_line": 1052,
        "end_line": 1055,
        "comment": "",
        "child_ranges": [
            "(line 1053,col 5)-(line 1054,col 47)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testNumericComparison5()",
        "snippet": "  public void testNumericComparison5() throws Exception {\n    testTypes(\"/**@param {*} a*/ function f(a) {return a < 3;}\",\n        \"left side of numeric comparison\\n\" +\n        \"found   : *\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 1057,
        "end_line": 1062,
        "comment": "",
        "child_ranges": [
            "(line 1058,col 5)-(line 1061,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testNumericComparison6()",
        "snippet": "  public void testNumericComparison6() throws Exception {\n    testTypes(\"/**@return {void}*/ function foo() { if (3 >= foo()) return; }\",\n        \"right side of numeric comparison\\n\" +\n        \"found   : undefined\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 1064,
        "end_line": 1069,
        "comment": "",
        "child_ranges": [
            "(line 1065,col 5)-(line 1068,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testStringComparison1()",
        "snippet": "  public void testStringComparison1() throws Exception {\n    testTypes(\"/**@param {string} a*/ function f(a) {return a < 'x';}\");\n  }\n",
        "begin_line": 1071,
        "end_line": 1073,
        "comment": "",
        "child_ranges": [
            "(line 1072,col 5)-(line 1072,col 72)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testStringComparison2()",
        "snippet": "  public void testStringComparison2() throws Exception {\n    testTypes(\"/**@param {Object} a*/ function f(a) {return a < 'x';}\");\n  }\n",
        "begin_line": 1075,
        "end_line": 1077,
        "comment": "",
        "child_ranges": [
            "(line 1076,col 5)-(line 1076,col 72)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testStringComparison3()",
        "snippet": "  public void testStringComparison3() throws Exception {\n    testTypes(\"/**@param {number} a*/ function f(a) {return a < 'x';}\");\n  }\n",
        "begin_line": 1079,
        "end_line": 1081,
        "comment": "",
        "child_ranges": [
            "(line 1080,col 5)-(line 1080,col 72)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testStringComparison4()",
        "snippet": "  public void testStringComparison4() throws Exception {\n    testTypes(\"/**@param {string|undefined} a*/ \" +\n                  \"function f(a) {return a < 'x';}\");\n  }\n",
        "begin_line": 1083,
        "end_line": 1086,
        "comment": "",
        "child_ranges": [
            "(line 1084,col 5)-(line 1085,col 53)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testStringComparison5()",
        "snippet": "  public void testStringComparison5() throws Exception {\n    testTypes(\"/**@param {*} a*/ \" +\n                  \"function f(a) {return a < 'x';}\");\n  }\n",
        "begin_line": 1088,
        "end_line": 1091,
        "comment": "",
        "child_ranges": [
            "(line 1089,col 5)-(line 1090,col 53)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testStringComparison6()",
        "snippet": "  public void testStringComparison6() throws Exception {\n    testTypes(\"/**@return {void} */ \" +\n        \"function foo() { if ('a' >= foo()) return; }\",\n        \"right side of comparison\\n\" +\n        \"found   : undefined\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 1093,
        "end_line": 1099,
        "comment": "",
        "child_ranges": [
            "(line 1094,col 5)-(line 1098,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testValueOfComparison1()",
        "snippet": "  public void testValueOfComparison1() throws Exception {\n    testTypes(\"/** @constructor */function O() {};\" +\n        \"/**@override*/O.prototype.valueOf = function() { return 1; };\" +\n        \"/**@param {!O} a\\n@param {!O} b*/ function f(a,b) { return a < b; }\");\n  }\n",
        "begin_line": 1101,
        "end_line": 1105,
        "comment": "",
        "child_ranges": [
            "(line 1102,col 5)-(line 1104,col 79)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testValueOfComparison2()",
        "snippet": "  public void testValueOfComparison2() throws Exception {\n    testTypes(\"/** @constructor */function O() {};\" +\n        \"/**@override*/O.prototype.valueOf = function() { return 1; };\" +\n        \"/**@param {!O} a\\n@param {number} b*/\" +\n        \"function f(a,b) { return a < b; }\");\n  }\n",
        "begin_line": 1107,
        "end_line": 1112,
        "comment": "",
        "child_ranges": [
            "(line 1108,col 5)-(line 1111,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testValueOfComparison3()",
        "snippet": "  public void testValueOfComparison3() throws Exception {\n    testTypes(\"/** @constructor */function O() {};\" +\n        \"/**@override*/O.prototype.toString = function() { return 'o'; };\" +\n        \"/**@param {!O} a\\n@param {string} b*/\" +\n        \"function f(a,b) { return a < b; }\");\n  }\n",
        "begin_line": 1114,
        "end_line": 1119,
        "comment": "",
        "child_ranges": [
            "(line 1115,col 5)-(line 1118,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testGenericRelationalExpression()",
        "snippet": "  public void testGenericRelationalExpression() throws Exception {\n    testTypes(\"/**@param {*} a\\n@param {*} b*/ \" +\n                  \"function f(a,b) {return a < b;}\");\n  }\n",
        "begin_line": 1121,
        "end_line": 1124,
        "comment": "",
        "child_ranges": [
            "(line 1122,col 5)-(line 1123,col 53)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testInstanceof1()",
        "snippet": "  public void testInstanceof1() throws Exception {\n    testTypes(\"function foo(){\" +\n        \"if (bar instanceof 3)return;}\",\n        \"instanceof requires an object\\n\" +\n        \"found   : number\\n\" +\n        \"required: Object\");\n  }\n",
        "begin_line": 1126,
        "end_line": 1132,
        "comment": "",
        "child_ranges": [
            "(line 1127,col 5)-(line 1131,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testInstanceof2()",
        "snippet": "  public void testInstanceof2() throws Exception {\n    testTypes(\"/**@return {void}*/function foo(){\" +\n        \"if (foo() instanceof Object)return;}\",\n        \"deterministic instanceof yields false\\n\" +\n        \"found   : undefined\\n\" +\n        \"required: NoObject\");\n  }\n",
        "begin_line": 1134,
        "end_line": 1140,
        "comment": "",
        "child_ranges": [
            "(line 1135,col 5)-(line 1139,col 30)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testInstanceof3()",
        "snippet": "  public void testInstanceof3() throws Exception {\n    testTypes(\"/**@return {*} */function foo(){\" +\n        \"if (foo() instanceof Object)return;}\");\n  }\n",
        "begin_line": 1142,
        "end_line": 1145,
        "comment": "",
        "child_ranges": [
            "(line 1143,col 5)-(line 1144,col 48)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testInstanceof4()",
        "snippet": "  public void testInstanceof4() throws Exception {\n    testTypes(\"/**@return {(Object|number)} */function foo(){\" +\n        \"if (foo() instanceof Object)return 3;}\");\n  }\n",
        "begin_line": 1147,
        "end_line": 1150,
        "comment": "",
        "child_ranges": [
            "(line 1148,col 5)-(line 1149,col 50)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testInstanceof5()",
        "snippet": "  public void testInstanceof5() throws Exception {\n    // No warning for unknown types.\n    testTypes(\"/** @return {?} */ function foo(){\" +\n        \"if (foo() instanceof Object)return;}\");\n  }\n",
        "begin_line": 1152,
        "end_line": 1156,
        "comment": "",
        "child_ranges": [
            "(line 1154,col 5)-(line 1155,col 48)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testInstanceof6()",
        "snippet": "  public void testInstanceof6() throws Exception {\n    testTypes(\"/**@return {(Array|number)} */function foo(){\" +\n        \"if (foo() instanceof Object)return 3;}\");\n  }\n",
        "begin_line": 1158,
        "end_line": 1161,
        "comment": "",
        "child_ranges": [
            "(line 1159,col 5)-(line 1160,col 50)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testInstanceOfReduction3()",
        "snippet": "  public void testInstanceOfReduction3() throws Exception {\n    testTypes(\n        \"/** \\n\" +\n        \" * @param {Object} x \\n\" +\n        \" * @param {Function} y \\n\" +\n        \" * @return {boolean} \\n\" +\n        \" */\\n\" +\n        \"var f = function(x, y) {\\n\" +\n        \"  return x instanceof y;\\n\" +\n        \"};\");\n  }\n",
        "begin_line": 1163,
        "end_line": 1173,
        "comment": "",
        "child_ranges": [
            "(line 1164,col 5)-(line 1172,col 14)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testScoping1()",
        "snippet": "  public void testScoping1() throws Exception {\n    testTypes(\n        \"/**@param {string} a*/function foo(a){\" +\n        \"  /**@param {Array|string} a*/function bar(a){\" +\n        \"    if (a instanceof Array)return;\" +\n        \"  }\" +\n        \"}\");\n  }\n",
        "begin_line": 1175,
        "end_line": 1182,
        "comment": "",
        "child_ranges": [
            "(line 1176,col 5)-(line 1181,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testScoping2()",
        "snippet": "  public void testScoping2() throws Exception {\n    testTypes(\n        \"/** @type number */ var a;\" +\n        \"function Foo() {\" +\n        \"  /** @type string */ var a;\" +\n        \"}\");\n  }\n",
        "begin_line": 1184,
        "end_line": 1190,
        "comment": "",
        "child_ranges": [
            "(line 1185,col 5)-(line 1189,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testScoping3()",
        "snippet": "  public void testScoping3() throws Exception {\n    testTypes(\"\\n\\n/** @type{Number}*/var b;\\n/** @type{!String} */var b;\",\n        \"variable b redefined with type String, original \" +\n        \"definition at [testcode]:3 with type (Number|null|undefined)\");\n  }\n",
        "begin_line": 1192,
        "end_line": 1196,
        "comment": "",
        "child_ranges": [
            "(line 1193,col 5)-(line 1195,col 72)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testScoping4()",
        "snippet": "  public void testScoping4() throws Exception {\n    testTypes(\"/** @type{Number}*/var b; if (true) /** @type{!String} */var b;\",\n        \"variable b redefined with type String, original \" +\n        \"definition at [testcode]:1 with type (Number|null|undefined)\");\n  }\n",
        "begin_line": 1198,
        "end_line": 1202,
        "comment": "",
        "child_ranges": [
            "(line 1199,col 5)-(line 1201,col 72)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testScoping5()",
        "snippet": "  public void testScoping5() throws Exception {\n    // multiple definitions are not checked by the type checker but by a\n    // subsequent pass\n    testTypes(\"if (true) var b; var b;\");\n  }\n",
        "begin_line": 1204,
        "end_line": 1208,
        "comment": "",
        "child_ranges": [
            "(line 1207,col 5)-(line 1207,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testScoping6()",
        "snippet": "  public void testScoping6() throws Exception {\n    // multiple definitions are not checked by the type checker but by a\n    // subsequent pass\n    testTypes(\"if (true) var b; if (true) var b;\");\n  }\n",
        "begin_line": 1210,
        "end_line": 1214,
        "comment": "",
        "child_ranges": [
            "(line 1213,col 5)-(line 1213,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testScoping7()",
        "snippet": "  public void testScoping7() throws Exception {\n    testTypes(\"/** @constructor */function A() {\" +\n        \"  /** @type !A */this.a = null;\" +\n        \"}\",\n        \"assignment to property a of A\\n\" +\n        \"found   : null\\n\" +\n        \"required: A\");\n  }\n",
        "begin_line": 1216,
        "end_line": 1223,
        "comment": "",
        "child_ranges": [
            "(line 1217,col 5)-(line 1222,col 23)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testScoping8()",
        "snippet": "  public void testScoping8() throws Exception {\n    testTypes(\"/** @constructor */function A() {}\" +\n        \"/** @constructor */function B() {\" +\n        \"  /** @type !A */this.a = null;\" +\n        \"}\",\n        \"assignment to property a of B\\n\" +\n        \"found   : null\\n\" +\n        \"required: A\");\n  }\n",
        "begin_line": 1225,
        "end_line": 1233,
        "comment": "",
        "child_ranges": [
            "(line 1226,col 5)-(line 1232,col 23)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testScoping9()",
        "snippet": "  public void testScoping9() throws Exception {\n    testTypes(\"/** @constructor */function B() {\" +\n        \"  /** @type !A */this.a = null;\" +\n        \"}\" +\n        \"/** @constructor */function A() {}\",\n        \"assignment to property a of B\\n\" +\n        \"found   : null\\n\" +\n        \"required: A\");\n  }\n",
        "begin_line": 1235,
        "end_line": 1243,
        "comment": "",
        "child_ranges": [
            "(line 1236,col 5)-(line 1242,col 23)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testScoping10()",
        "snippet": "  public void testScoping10() throws Exception {\n    TypeCheckResult p = parseAndTypeCheckWithScope(\"var a = function b(){};\");\n\n    // a declared, b is not\n    assertTrue(p.scope.isDeclared(\"a\", false));\n    assertFalse(p.scope.isDeclared(\"b\", false));\n\n    // checking that a has the correct assigned type\n    assertEquals(\"function (): undefined\",\n        p.scope.getVar(\"a\").getType().toString());\n  }\n",
        "begin_line": 1245,
        "end_line": 1255,
        "comment": "",
        "child_ranges": [
            "(line 1246,col 5)-(line 1246,col 78)",
            "(line 1249,col 5)-(line 1249,col 47)",
            "(line 1250,col 5)-(line 1250,col 48)",
            "(line 1253,col 5)-(line 1254,col 50)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testScoping11()",
        "snippet": "  public void testScoping11() throws Exception {\n    // named anonymous functions create a binding in their body only\n    // the return is wrong but the assignment is ok since the type of b is ?\n    testTypes(\n        \"/** @return {number} */var a = function b(){ return b };\",\n        \"inconsistent return type\\n\" +\n        \"found   : function (): number\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 1257,
        "end_line": 1265,
        "comment": "",
        "child_ranges": [
            "(line 1260,col 5)-(line 1264,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testFunctionArguments1()",
        "snippet": "  public void testFunctionArguments1() throws Exception {\n    testFunctionType(\n        \"/** @param {number} a\\n@return {string} */\" +\n        \"function f(a) {}\",\n        \"function (number): string\");\n  }\n",
        "begin_line": 1267,
        "end_line": 1272,
        "comment": "",
        "child_ranges": [
            "(line 1268,col 5)-(line 1271,col 37)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testFunctionArguments2()",
        "snippet": "  public void testFunctionArguments2() throws Exception {\n    testFunctionType(\n        \"/** @param {number} opt_a\\n@return {string} */\" +\n        \"function f(opt_a) {}\",\n        \"function ((number|undefined)): string\");\n  }\n",
        "begin_line": 1274,
        "end_line": 1279,
        "comment": "",
        "child_ranges": [
            "(line 1275,col 5)-(line 1278,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testFunctionArguments3()",
        "snippet": "  public void testFunctionArguments3() throws Exception {\n    testFunctionType(\n        \"/** @param {number} b\\n@return {string} */\" +\n        \"function f(a,b) {}\",\n        \"function (?, number): string\");\n  }\n",
        "begin_line": 1281,
        "end_line": 1286,
        "comment": "",
        "child_ranges": [
            "(line 1282,col 5)-(line 1285,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testFunctionArguments4()",
        "snippet": "  public void testFunctionArguments4() throws Exception {\n    testFunctionType(\n        \"/** @param {number} opt_a\\n@return {string} */\" +\n        \"function f(a,opt_a) {}\",\n        \"function (?, (number|undefined)): string\");\n  }\n",
        "begin_line": 1288,
        "end_line": 1293,
        "comment": "",
        "child_ranges": [
            "(line 1289,col 5)-(line 1292,col 52)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testFunctionArguments5()",
        "snippet": "  public void testFunctionArguments5() throws Exception {\n    testTypes(\n        \"function a(opt_a,a) {}\",\n        \"optional arguments must be at the end\");\n  }\n",
        "begin_line": 1295,
        "end_line": 1299,
        "comment": "",
        "child_ranges": [
            "(line 1296,col 5)-(line 1298,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testFunctionArguments6()",
        "snippet": "  public void testFunctionArguments6() throws Exception {\n    testTypes(\n        \"function a(var_args,a) {}\",\n        \"variable length argument must be last\");\n  }\n",
        "begin_line": 1301,
        "end_line": 1305,
        "comment": "",
        "child_ranges": [
            "(line 1302,col 5)-(line 1304,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testFunctionArguments7()",
        "snippet": "  public void testFunctionArguments7() throws Exception {\n    testTypes(\n        \"/** @param {number} opt_a\\n@return {string} */\" +\n        \"function a(a,opt_a,var_args) {}\");\n  }\n",
        "begin_line": 1307,
        "end_line": 1311,
        "comment": "",
        "child_ranges": [
            "(line 1308,col 5)-(line 1310,col 43)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testFunctionArguments8()",
        "snippet": "  public void testFunctionArguments8() throws Exception {\n    testTypes(\n        \"function a(a,opt_a,var_args,b) {}\",\n        \"variable length argument must be last\");\n  }\n",
        "begin_line": 1313,
        "end_line": 1317,
        "comment": "",
        "child_ranges": [
            "(line 1314,col 5)-(line 1316,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testFunctionArguments9()",
        "snippet": "  public void testFunctionArguments9() throws Exception {\n    // testing that only one error is reported\n    testTypes(\n        \"function a(a,opt_a,var_args,b,c) {}\",\n        \"variable length argument must be last\");\n  }\n",
        "begin_line": 1319,
        "end_line": 1324,
        "comment": "",
        "child_ranges": [
            "(line 1321,col 5)-(line 1323,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testFunctionArguments10()",
        "snippet": "  public void testFunctionArguments10() throws Exception {\n    // testing that only one error is reported\n    testTypes(\n        \"function a(a,opt_a,b,c) {}\",\n        \"optional arguments must be at the end\");\n  }\n",
        "begin_line": 1326,
        "end_line": 1331,
        "comment": "",
        "child_ranges": [
            "(line 1328,col 5)-(line 1330,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testFunctionArguments11()",
        "snippet": "  public void testFunctionArguments11() throws Exception {\n    testTypes(\n        \"function a(a,opt_a,b,c,var_args,d) {}\",\n        \"optional arguments must be at the end\");\n  }\n",
        "begin_line": 1333,
        "end_line": 1337,
        "comment": "",
        "child_ranges": [
            "(line 1334,col 5)-(line 1336,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testFunctionArguments12()",
        "snippet": "  public void testFunctionArguments12() throws Exception {\n    testTypes(\"/** @param foo {String} */function bar(baz){}\",\n        \"parameter foo does not appear in bar's parameter list\");\n  }\n",
        "begin_line": 1339,
        "end_line": 1342,
        "comment": "",
        "child_ranges": [
            "(line 1340,col 5)-(line 1341,col 65)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testFunctionArguments13()",
        "snippet": "  public void testFunctionArguments13() throws Exception {\n    // verifying that the argument type have non-inferrable types\n    testTypes(\n        \"/** @return {boolean} */ function u() { return true; }\" +\n        \"/** @param {boolean} b\\n@return {?boolean} */\" +\n        \"function f(b) { if (u()) { b = null; } return b; }\",\n        \"assignment\\n\" +\n        \"found   : null\\n\" +\n        \"required: boolean\");\n  }\n",
        "begin_line": 1344,
        "end_line": 1353,
        "comment": "",
        "child_ranges": [
            "(line 1346,col 5)-(line 1352,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testFunctionArguments14()",
        "snippet": "  public void testFunctionArguments14() throws Exception {\n    testTypes(\n        \"/**\\n\" +\n        \" * @param {string} x\\n\" +\n        \" * @param {number} opt_y\\n\" +\n        \" * @param {boolean} var_args\\n\" +\n        \" */ function f(x, opt_y, var_args) {}\" +\n        \"f('3'); f('3', 2); f('3', 2, true); f('3', 2, true, false);\");\n  }\n",
        "begin_line": 1355,
        "end_line": 1363,
        "comment": "",
        "child_ranges": [
            "(line 1356,col 5)-(line 1362,col 71)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testFunctionArguments15()",
        "snippet": "  public void testFunctionArguments15() throws Exception {\n    testTypes(\n        \"/** @param {?function(*)} f */\" +\n        \"function g(f) { f(1, 2); }\",\n        \"Function f: called with 2 argument(s). \" +\n        \"Function requires at least 1 argument(s) \" +\n        \"and no more than 1 argument(s).\");\n  }\n",
        "begin_line": 1365,
        "end_line": 1372,
        "comment": "",
        "child_ranges": [
            "(line 1366,col 5)-(line 1371,col 43)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testPrintFunctionName1()",
        "snippet": "  public void testPrintFunctionName1() throws Exception {\n    // Ensures that the function name is pretty.\n    testTypes(\n        \"var goog = {}; goog.run = function(f) {};\" +\n        \"goog.run();\",\n        \"Function goog.run: called with 0 argument(s). \" +\n        \"Function requires at least 1 argument(s) \" +\n        \"and no more than 1 argument(s).\");\n  }\n",
        "begin_line": 1374,
        "end_line": 1382,
        "comment": "",
        "child_ranges": [
            "(line 1376,col 5)-(line 1381,col 43)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testPrintFunctionName2()",
        "snippet": "  public void testPrintFunctionName2() throws Exception {\n    testTypes(\n        \"/** @constructor */ var Foo = function() {}; \" +\n        \"Foo.prototype.run = function(f) {};\" +\n        \"(new Foo).run();\",\n        \"Function Foo.prototype.run: called with 0 argument(s). \" +\n        \"Function requires at least 1 argument(s) \" +\n        \"and no more than 1 argument(s).\");\n  }\n",
        "begin_line": 1384,
        "end_line": 1392,
        "comment": "",
        "child_ranges": [
            "(line 1385,col 5)-(line 1391,col 43)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testFunctionInference1()",
        "snippet": "  public void testFunctionInference1() throws Exception {\n    testFunctionType(\n        \"function f(a) {}\",\n        \"function (?): undefined\");\n  }\n",
        "begin_line": 1394,
        "end_line": 1398,
        "comment": "",
        "child_ranges": [
            "(line 1395,col 5)-(line 1397,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testFunctionInference2()",
        "snippet": "  public void testFunctionInference2() throws Exception {\n    testFunctionType(\n        \"function f(a,b) {}\",\n        \"function (?, ?): undefined\");\n  }\n",
        "begin_line": 1400,
        "end_line": 1404,
        "comment": "",
        "child_ranges": [
            "(line 1401,col 5)-(line 1403,col 38)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testFunctionInference3()",
        "snippet": "  public void testFunctionInference3() throws Exception {\n    testFunctionType(\n        \"function f(var_args) {}\",\n        \"function (...[?]): undefined\");\n  }\n",
        "begin_line": 1406,
        "end_line": 1410,
        "comment": "",
        "child_ranges": [
            "(line 1407,col 5)-(line 1409,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testFunctionInference4()",
        "snippet": "  public void testFunctionInference4() throws Exception {\n    testFunctionType(\n        \"function f(a,b,c,var_args) {}\",\n        \"function (?, ?, ?, ...[?]): undefined\");\n  }\n",
        "begin_line": 1412,
        "end_line": 1416,
        "comment": "",
        "child_ranges": [
            "(line 1413,col 5)-(line 1415,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testFunctionInference5()",
        "snippet": "  public void testFunctionInference5() throws Exception {\n    testFunctionType(\n        \"/** @this Date\\n@return {string} */function f(a) {}\",\n        \"function (this:Date, ?): string\");\n  }\n",
        "begin_line": 1418,
        "end_line": 1422,
        "comment": "",
        "child_ranges": [
            "(line 1419,col 5)-(line 1421,col 43)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testFunctionInference6()",
        "snippet": "  public void testFunctionInference6() throws Exception {\n    testFunctionType(\n        \"/** @this Date\\n@return {string} */function f(opt_a) {}\",\n        \"function (this:Date, ?): string\");\n  }\n",
        "begin_line": 1424,
        "end_line": 1428,
        "comment": "",
        "child_ranges": [
            "(line 1425,col 5)-(line 1427,col 43)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testFunctionInference7()",
        "snippet": "  public void testFunctionInference7() throws Exception {\n    testFunctionType(\n        \"/** @this Date */function f(a,b,c,var_args) {}\",\n        \"function (this:Date, ?, ?, ?, ...[?]): undefined\");\n  }\n",
        "begin_line": 1430,
        "end_line": 1434,
        "comment": "",
        "child_ranges": [
            "(line 1431,col 5)-(line 1433,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testFunctionInference8()",
        "snippet": "  public void testFunctionInference8() throws Exception {\n    testFunctionType(\n        \"function f() {}\",\n        \"function (): undefined\");\n  }\n",
        "begin_line": 1436,
        "end_line": 1440,
        "comment": "",
        "child_ranges": [
            "(line 1437,col 5)-(line 1439,col 34)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testFunctionInference9()",
        "snippet": "  public void testFunctionInference9() throws Exception {\n    testFunctionType(\n        \"var f = function() {};\",\n        \"function (): undefined\");\n  }\n",
        "begin_line": 1442,
        "end_line": 1446,
        "comment": "",
        "child_ranges": [
            "(line 1443,col 5)-(line 1445,col 34)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testFunctionInference10()",
        "snippet": "  public void testFunctionInference10() throws Exception {\n    testFunctionType(\n        \"/** @this Date\\n@param {boolean} b\\n@return {string} */\" +\n        \"var f = function(a,b) {};\",\n        \"function (this:Date, ?, boolean): string\");\n  }\n",
        "begin_line": 1448,
        "end_line": 1453,
        "comment": "",
        "child_ranges": [
            "(line 1449,col 5)-(line 1452,col 52)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testFunctionInference11()",
        "snippet": "  public void testFunctionInference11() throws Exception {\n    testFunctionType(\n        \"var goog = {};\" +\n        \"/** @return {number}*/goog.f = function(){};\",\n        \"goog.f\",\n        \"function (): number\");\n  }\n",
        "begin_line": 1455,
        "end_line": 1461,
        "comment": "",
        "child_ranges": [
            "(line 1456,col 5)-(line 1460,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testFunctionInference12()",
        "snippet": "  public void testFunctionInference12() throws Exception {\n    testFunctionType(\n        \"var goog = {};\" +\n        \"goog.f = function(){};\",\n        \"goog.f\",\n        \"function (): undefined\");\n  }\n",
        "begin_line": 1463,
        "end_line": 1469,
        "comment": "",
        "child_ranges": [
            "(line 1464,col 5)-(line 1468,col 34)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testFunctionInference13()",
        "snippet": "  public void testFunctionInference13() throws Exception {\n    testFunctionType(\n        \"var goog = {};\" +\n        \"/** @constructor */ goog.Foo = function(){};\" +\n        \"/** @param {!goog.Foo} f */function eatFoo(f){};\",\n        \"eatFoo\",\n        \"function (goog.Foo): undefined\");\n  }\n",
        "begin_line": 1471,
        "end_line": 1478,
        "comment": "",
        "child_ranges": [
            "(line 1472,col 5)-(line 1477,col 42)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testFunctionInference14()",
        "snippet": "  public void testFunctionInference14() throws Exception {\n    testFunctionType(\n        \"var goog = {};\" +\n        \"/** @constructor */ goog.Foo = function(){};\" +\n        \"/** @return {!goog.Foo} */function eatFoo(){ return new goog.Foo; };\",\n        \"eatFoo\",\n        \"function (): goog.Foo\");\n  }\n",
        "begin_line": 1480,
        "end_line": 1487,
        "comment": "",
        "child_ranges": [
            "(line 1481,col 5)-(line 1486,col 33)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testFunctionInference15()",
        "snippet": "  public void testFunctionInference15() throws Exception {\n    testFunctionType(\n        \"/** @constructor */ function f() {};\" +\n        \"f.prototype.foo = function(){};\",\n        \"f.prototype.foo\",\n        \"function (this:f): undefined\");\n  }\n",
        "begin_line": 1489,
        "end_line": 1495,
        "comment": "",
        "child_ranges": [
            "(line 1490,col 5)-(line 1494,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testFunctionInference16()",
        "snippet": "  public void testFunctionInference16() throws Exception {\n    testFunctionType(\n        \"/** @constructor */ function f() {};\" +\n        \"f.prototype.foo = function(){};\",\n        \"(new f).foo\",\n        \"function (this:f): undefined\");\n  }\n",
        "begin_line": 1497,
        "end_line": 1503,
        "comment": "",
        "child_ranges": [
            "(line 1498,col 5)-(line 1502,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testFunctionInference17()",
        "snippet": "  public void testFunctionInference17() throws Exception {\n    testFunctionType(\n        \"/** @constructor */ function f() {}\" +\n        \"function abstractMethod() {}\" +\n        \"/** @param {number} x */ f.prototype.foo = abstractMethod;\",\n        \"(new f).foo\",\n        \"function (this:f, number): ?\");\n  }\n",
        "begin_line": 1505,
        "end_line": 1512,
        "comment": "",
        "child_ranges": [
            "(line 1506,col 5)-(line 1511,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testFunctionInference18()",
        "snippet": "  public void testFunctionInference18() throws Exception {\n    testFunctionType(\n        \"var goog = {};\" +\n        \"/** @this {Date} */ goog.eatWithDate;\",\n        \"goog.eatWithDate\",\n        \"function (this:Date): ?\");\n  }\n",
        "begin_line": 1514,
        "end_line": 1520,
        "comment": "",
        "child_ranges": [
            "(line 1515,col 5)-(line 1519,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testFunctionInference19()",
        "snippet": "  public void testFunctionInference19() throws Exception {\n    testFunctionType(\n        \"/** @param {string} x */ var f;\",\n        \"f\",\n        \"function (string): ?\");\n  }\n",
        "begin_line": 1522,
        "end_line": 1527,
        "comment": "",
        "child_ranges": [
            "(line 1523,col 5)-(line 1526,col 32)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testFunctionInference20()",
        "snippet": "  public void testFunctionInference20() throws Exception {\n    testFunctionType(\n        \"/** @this {Date} */ var f;\",\n        \"f\",\n        \"function (this:Date): ?\");\n  }\n",
        "begin_line": 1529,
        "end_line": 1534,
        "comment": "",
        "child_ranges": [
            "(line 1530,col 5)-(line 1533,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testInnerFunction1()",
        "snippet": "  public void testInnerFunction1() throws Exception {\n    testTypes(\n        \"function f() {\" +\n        \" /** @type {number} */ var x = 3;\\n\" +\n        \" function g() { x = null; }\" +\n        \" return x;\" +\n        \"}\",\n        \"assignment\\n\" +\n        \"found   : null\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 1536,
        "end_line": 1546,
        "comment": "",
        "child_ranges": [
            "(line 1537,col 5)-(line 1545,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testInnerFunction2()",
        "snippet": "  public void testInnerFunction2() throws Exception {\n    testTypes(\n        \"/** @return {number} */\\n\" +\n        \"function f() {\" +\n        \" var x = null;\\n\" +\n        \" function g() { x = 3; }\" +\n        \" g();\" +\n        \" return x;\" +\n        \"}\",\n        \"inconsistent return type\\n\" +\n        \"found   : (null|number)\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 1548,
        "end_line": 1560,
        "comment": "",
        "child_ranges": [
            "(line 1549,col 5)-(line 1559,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testInnerFunction3()",
        "snippet": "  public void testInnerFunction3() throws Exception {\n    testTypes(\n        \"var x = null;\" +\n        \"/** @return {number} */\\n\" +\n        \"function f() {\" +\n        \" x = 3;\\n\" +\n        \" /** @return {number} */\\n\" +\n        \" function g() { x = true; return x; }\" +\n        \" return x;\" +\n        \"}\",\n        \"inconsistent return type\\n\" +\n        \"found   : boolean\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 1562,
        "end_line": 1575,
        "comment": "",
        "child_ranges": [
            "(line 1563,col 5)-(line 1574,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testInnerFunction4()",
        "snippet": "  public void testInnerFunction4() throws Exception {\n    testTypes(\n        \"var x = null;\" +\n        \"/** @return {number} */\\n\" +\n        \"function f() {\" +\n        \" x = '3';\\n\" +\n        \" /** @return {number} */\\n\" +\n        \" function g() { x = 3; return x; }\" +\n        \" return x;\" +\n        \"}\",\n        \"inconsistent return type\\n\" +\n        \"found   : string\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 1577,
        "end_line": 1590,
        "comment": "",
        "child_ranges": [
            "(line 1578,col 5)-(line 1589,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testInnerFunction5()",
        "snippet": "  public void testInnerFunction5() throws Exception {\n    testTypes(\n        \"/** @return {number} */\\n\" +\n        \"function f() {\" +\n        \" var x = 3;\\n\" +\n        \" /** @return {number} */\" +\n        \" function g() { var x = 3;x = true; return x; }\" +\n        \" return x;\" +\n        \"}\",\n        \"inconsistent return type\\n\" +\n        \"found   : boolean\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 1592,
        "end_line": 1604,
        "comment": "",
        "child_ranges": [
            "(line 1593,col 5)-(line 1603,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testInnerFunction6()",
        "snippet": "  public void testInnerFunction6() throws Exception {\n    testClosureTypes(\n        CLOSURE_DEFS +\n        \"function f() {\" +\n        \" var x = 0 || function() {};\\n\" +\n        \" function g() { if (goog.isFunction(x)) { x(1); } }\" +\n        \" g();\" +\n        \"}\", null);\n  }\n",
        "begin_line": 1606,
        "end_line": 1614,
        "comment": "",
        "child_ranges": [
            "(line 1607,col 5)-(line 1613,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testInnerFunction7()",
        "snippet": "  public void testInnerFunction7() throws Exception {\n    testClosureTypes(\n        CLOSURE_DEFS +\n        \"function f() {\" +\n        \" /** @type {number|function()} */\" +\n        \" var x = 0 || function() {};\\n\" +\n        \" function g() { if (goog.isFunction(x)) { x(1); } }\" +\n        \" g();\" +\n        \"}\",\n        \"Function x: called with 1 argument(s). \" +\n        \"Function requires at least 0 argument(s) \" +\n        \"and no more than 0 argument(s).\");\n  }\n",
        "begin_line": 1616,
        "end_line": 1628,
        "comment": "",
        "child_ranges": [
            "(line 1617,col 5)-(line 1627,col 43)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testInnerFunction8()",
        "snippet": "  public void testInnerFunction8() throws Exception {\n    testClosureTypes(\n        CLOSURE_DEFS +\n        \"function f() {\" +\n        \" function x() {};\\n\" +\n        \" function g() { if (goog.isFunction(x)) { x(1); } }\" +\n        \" g();\" +\n        \"}\",\n        \"Function x: called with 1 argument(s). \" +\n        \"Function requires at least 0 argument(s) \" +\n        \"and no more than 0 argument(s).\");\n  }\n",
        "begin_line": 1630,
        "end_line": 1641,
        "comment": "",
        "child_ranges": [
            "(line 1631,col 5)-(line 1640,col 43)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testInnerFunction9()",
        "snippet": "  public void testInnerFunction9() throws Exception {\n    testTypes(\n        \"function f() {\" +\n        \" var x = 3;\\n\" +\n        \" function g() { x = null; };\\n\" +\n        \" function h() { return x == null; }\" +\n        \" return h();\" +\n        \"}\");\n  }\n",
        "begin_line": 1643,
        "end_line": 1651,
        "comment": "",
        "child_ranges": [
            "(line 1644,col 5)-(line 1650,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testAbstractMethodHandling1()",
        "snippet": "  public void testAbstractMethodHandling1() throws Exception {\n    testTypes(\n        \"/** @type {Function} */ var abstractFn = function() {};\" +\n        \"abstractFn(1);\");\n  }\n",
        "begin_line": 1653,
        "end_line": 1657,
        "comment": "",
        "child_ranges": [
            "(line 1654,col 5)-(line 1656,col 26)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testAbstractMethodHandling2()",
        "snippet": "  public void testAbstractMethodHandling2() throws Exception {\n    testTypes(\n        \"var abstractFn = function() {};\" +\n        \"abstractFn(1);\",\n        \"Function abstractFn: called with 1 argument(s). \" +\n        \"Function requires at least 0 argument(s) \" +\n        \"and no more than 0 argument(s).\");\n  }\n",
        "begin_line": 1659,
        "end_line": 1666,
        "comment": "",
        "child_ranges": [
            "(line 1660,col 5)-(line 1665,col 43)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testAbstractMethodHandling3()",
        "snippet": "  public void testAbstractMethodHandling3() throws Exception {\n    testTypes(\n        \"var goog = {};\" +\n        \"/** @type {Function} */ goog.abstractFn = function() {};\" +\n        \"goog.abstractFn(1);\");\n  }\n",
        "begin_line": 1668,
        "end_line": 1673,
        "comment": "",
        "child_ranges": [
            "(line 1669,col 5)-(line 1672,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testAbstractMethodHandling4()",
        "snippet": "  public void testAbstractMethodHandling4() throws Exception {\n    testTypes(\n        \"var goog = {};\" +\n        \"goog.abstractFn = function() {};\" +\n        \"goog.abstractFn(1);\",\n        \"Function goog.abstractFn: called with 1 argument(s). \" +\n        \"Function requires at least 0 argument(s) \" +\n        \"and no more than 0 argument(s).\");\n  }\n",
        "begin_line": 1675,
        "end_line": 1683,
        "comment": "",
        "child_ranges": [
            "(line 1676,col 5)-(line 1682,col 43)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testAbstractMethodHandling5()",
        "snippet": "  public void testAbstractMethodHandling5() throws Exception {\n    testTypes(\n        \"/** @type {!Function} */ var abstractFn = function() {};\" +\n        \"/** @param {number} x */ var f = abstractFn;\" +\n        \"f('x');\",\n        \"actual parameter 1 of f does not match formal parameter\\n\" +\n        \"found   : string\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 1685,
        "end_line": 1693,
        "comment": "",
        "child_ranges": [
            "(line 1686,col 5)-(line 1692,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testAbstractMethodHandling6()",
        "snippet": "  public void testAbstractMethodHandling6() throws Exception {\n    testTypes(\n        \"var goog = {};\" +\n        \"/** @type {Function} */ goog.abstractFn = function() {};\" +\n        \"/** @param {number} x */ goog.f = abstractFn;\" +\n        \"goog.f('x');\",\n        \"actual parameter 1 of goog.f does not match formal parameter\\n\" +\n        \"found   : string\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 1695,
        "end_line": 1704,
        "comment": "",
        "child_ranges": [
            "(line 1696,col 5)-(line 1703,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testMethodInference1()",
        "snippet": "  public void testMethodInference1() throws Exception {\n    testTypes(\n        \"/** @constructor */ function F() {}\" +\n        \"/** @return {number} */ F.prototype.foo = function() { return 3; };\" +\n        \"/** @constructor \\n * @extends {F} */ \" +\n        \"function G() {}\" +\n        \"/** @override */ G.prototype.foo = function() { return true; };\",\n        \"inconsistent return type\\n\" +\n        \"found   : boolean\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 1706,
        "end_line": 1716,
        "comment": "",
        "child_ranges": [
            "(line 1707,col 5)-(line 1715,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testMethodInference2()",
        "snippet": "  public void testMethodInference2() throws Exception {\n    testTypes(\n        \"var goog = {};\" +\n        \"/** @constructor */ goog.F = function() {};\" +\n        \"/** @return {number} */ goog.F.prototype.foo = \" +\n        \"    function() { return 3; };\" +\n        \"/** @constructor \\n * @extends {goog.F} */ \" +\n        \"goog.G = function() {};\" +\n        \"/** @override */ goog.G.prototype.foo = function() { return true; };\",\n        \"inconsistent return type\\n\" +\n        \"found   : boolean\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 1718,
        "end_line": 1730,
        "comment": "",
        "child_ranges": [
            "(line 1719,col 5)-(line 1729,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testMethodInference3()",
        "snippet": "  public void testMethodInference3() throws Exception {\n    testTypes(\n        \"/** @constructor */ function F() {}\" +\n        \"/** @param {boolean} x \\n * @return {number} */ \" +\n        \"F.prototype.foo = function(x) { return 3; };\" +\n        \"/** @constructor \\n * @extends {F} */ \" +\n        \"function G() {}\" +\n        \"/** @override */ \" +\n        \"G.prototype.foo = function(x) { return x; };\",\n        \"inconsistent return type\\n\" +\n        \"found   : boolean\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 1732,
        "end_line": 1744,
        "comment": "",
        "child_ranges": [
            "(line 1733,col 5)-(line 1743,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testMethodInference4()",
        "snippet": "  public void testMethodInference4() throws Exception {\n    testTypes(\n        \"/** @constructor */ function F() {}\" +\n        \"/** @param {boolean} x \\n * @return {number} */ \" +\n        \"F.prototype.foo = function(x) { return 3; };\" +\n        \"/** @constructor \\n * @extends {F} */ \" +\n        \"function G() {}\" +\n        \"/** @override */ \" +\n        \"G.prototype.foo = function(y) { return y; };\",\n        \"inconsistent return type\\n\" +\n        \"found   : boolean\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 1746,
        "end_line": 1758,
        "comment": "",
        "child_ranges": [
            "(line 1747,col 5)-(line 1757,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testMethodInference5()",
        "snippet": "  public void testMethodInference5() throws Exception {\n    testTypes(\n        \"/** @constructor */ function F() {}\" +\n        \"/** @param {number} x \\n * @return {string} */ \" +\n        \"F.prototype.foo = function(x) { return 'x'; };\" +\n        \"/** @constructor \\n * @extends {F} */ \" +\n        \"function G() {}\" +\n        \"/** @type {number} */ G.prototype.num = 3;\" +\n        \"/** @override */ \" +\n        \"G.prototype.foo = function(y) { return this.num + y; };\",\n        \"inconsistent return type\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 1760,
        "end_line": 1773,
        "comment": "",
        "child_ranges": [
            "(line 1761,col 5)-(line 1772,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testMethodInference6()",
        "snippet": "  public void testMethodInference6() throws Exception {\n    testTypes(\n        \"/** @constructor */ function F() {}\" +\n        \"/** @param {number} x */ F.prototype.foo = function(x) { };\" +\n        \"/** @constructor \\n * @extends {F} */ \" +\n        \"function G() {}\" +\n        \"/** @override */ G.prototype.foo = function() { };\" +\n        \"(new G()).foo(1);\",\n        \"Function G.prototype.foo: called with 1 argument(s). \" +\n        \"Function requires at least 0 argument(s) \" +\n        \"and no more than 0 argument(s).\");\n  }\n",
        "begin_line": 1775,
        "end_line": 1786,
        "comment": "",
        "child_ranges": [
            "(line 1776,col 5)-(line 1785,col 43)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testMethodInference7()",
        "snippet": "  public void testMethodInference7() throws Exception {\n    testTypes(\n        \"/** @constructor */ function F() {}\" +\n        \"F.prototype.foo = function() { };\" +\n        \"/** @constructor \\n * @extends {F} */ \" +\n        \"function G() {}\" +\n        \"/** @override */ G.prototype.foo = function(x, y) { };\" +\n        \"(new G()).foo();\",\n        \"Function G.prototype.foo: called with 0 argument(s). \" +\n        \"Function requires at least 2 argument(s) \" +\n        \"and no more than 2 argument(s).\");\n  }\n",
        "begin_line": 1788,
        "end_line": 1799,
        "comment": "",
        "child_ranges": [
            "(line 1789,col 5)-(line 1798,col 43)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testMethodInference8()",
        "snippet": "  public void testMethodInference8() throws Exception {\n    testTypes(\n        \"/** @constructor */ function F() {}\" +\n        \"F.prototype.foo = function() { };\" +\n        \"/** @constructor \\n * @extends {F} */ \" +\n        \"function G() {}\" +\n        \"/** @override */ \" +\n        \"G.prototype.foo = function(a, opt_b, var_args) { };\" +\n        \"(new G()).foo();\",\n        \"Function G.prototype.foo: called with 0 argument(s). \" +\n        \"Function requires at least 1 argument(s).\");\n  }\n",
        "begin_line": 1801,
        "end_line": 1812,
        "comment": "",
        "child_ranges": [
            "(line 1802,col 5)-(line 1811,col 53)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testMethodInference9()",
        "snippet": "  public void testMethodInference9() throws Exception {\n    testTypes(\n        \"/** @constructor */ function F() {}\" +\n        \"F.prototype.foo = function() { };\" +\n        \"/** @constructor \\n * @extends {F} */ \" +\n        \"function G() {}\" +\n        \"/** @override */ \" +\n        \"G.prototype.foo = function(a, var_args, opt_b) { };\",\n        \"variable length argument must be last\");\n  }\n",
        "begin_line": 1814,
        "end_line": 1823,
        "comment": "",
        "child_ranges": [
            "(line 1815,col 5)-(line 1822,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testStaticMethodDeclaration1()",
        "snippet": "  public void testStaticMethodDeclaration1() throws Exception {\n    testTypes(\n        \"/** @constructor */ function F() { F.foo(true); }\" +\n        \"/** @param {number} x */ F.foo = function(x) {};\",\n        \"actual parameter 1 of F.foo does not match formal parameter\\n\" +\n        \"found   : boolean\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 1825,
        "end_line": 1832,
        "comment": "",
        "child_ranges": [
            "(line 1826,col 5)-(line 1831,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testStaticMethodDeclaration2()",
        "snippet": "  public void testStaticMethodDeclaration2() throws Exception {\n    testTypes(\n        \"var goog = goog || {}; function f() { goog.foo(true); }\" +\n        \"/** @param {number} x */ goog.foo = function(x) {};\",\n        \"actual parameter 1 of goog.foo does not match formal parameter\\n\" +\n        \"found   : boolean\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 1834,
        "end_line": 1841,
        "comment": "",
        "child_ranges": [
            "(line 1835,col 5)-(line 1840,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testStaticMethodDeclaration3()",
        "snippet": "  public void testStaticMethodDeclaration3() throws Exception {\n    testTypes(\n        \"var goog = goog || {}; function f() { goog.foo(true); }\" +\n        \"goog.foo = function() {};\",\n        \"Function goog.foo: called with 1 argument(s). Function requires \" +\n        \"at least 0 argument(s) and no more than 0 argument(s).\");\n  }\n",
        "begin_line": 1843,
        "end_line": 1849,
        "comment": "",
        "child_ranges": [
            "(line 1844,col 5)-(line 1848,col 66)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testDuplicateStaticMethodDecl1()",
        "snippet": "  public void testDuplicateStaticMethodDecl1() throws Exception {\n    testTypes(\n        \"var goog = goog || {};\" +\n        \"/** @param {number} x */ goog.foo = function(x) {};\" +\n        \"/** @param {number} x */ goog.foo = function(x) {};\",\n        \"variable goog.foo redefined with type function (number): undefined, \" +\n        \"original definition at [testcode]:1 \" +\n        \"with type function (number): undefined\");\n  }\n",
        "begin_line": 1851,
        "end_line": 1859,
        "comment": "",
        "child_ranges": [
            "(line 1852,col 5)-(line 1858,col 50)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testDuplicateStaticMethodDecl2()",
        "snippet": "  public void testDuplicateStaticMethodDecl2() throws Exception {\n    testTypes(\n        \"var goog = goog || {};\" +\n        \"/** @param {number} x */ goog.foo = function(x) {};\" +\n        \"/** @param {number} x \\n * @suppress {duplicate} */ \" +\n        \"goog.foo = function(x) {};\");\n  }\n",
        "begin_line": 1861,
        "end_line": 1867,
        "comment": "",
        "child_ranges": [
            "(line 1862,col 5)-(line 1866,col 38)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testDuplicateStaticMethodDecl3()",
        "snippet": "  public void testDuplicateStaticMethodDecl3() throws Exception {\n    testTypes(\n        \"var goog = goog || {};\" +\n        \"goog.foo = function(x) {};\" +\n        \"goog.foo = function(x) {};\");\n  }\n",
        "begin_line": 1869,
        "end_line": 1874,
        "comment": "",
        "child_ranges": [
            "(line 1870,col 5)-(line 1873,col 38)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testDuplicateStaticMethodDecl4()",
        "snippet": "  public void testDuplicateStaticMethodDecl4() throws Exception {\n    testTypes(\n        \"var goog = goog || {};\" +\n        \"/** @type {Function} */ goog.foo = function(x) {};\" +\n        \"goog.foo = function(x) {};\");\n  }\n",
        "begin_line": 1876,
        "end_line": 1881,
        "comment": "",
        "child_ranges": [
            "(line 1877,col 5)-(line 1880,col 38)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testDuplicateStaticMethodDecl5()",
        "snippet": "  public void testDuplicateStaticMethodDecl5() throws Exception {\n    testTypes(\n        \"var goog = goog || {};\" +\n        \"goog.foo = function(x) {};\" +\n        \"/** @return {undefined} */ goog.foo = function(x) {};\",\n        \"variable goog.foo redefined with type function (?): undefined, \" +\n        \"original definition at [testcode]:1 with type \" +\n        \"function (?): undefined\");\n  }\n",
        "begin_line": 1883,
        "end_line": 1891,
        "comment": "",
        "child_ranges": [
            "(line 1884,col 5)-(line 1890,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testDuplicateStaticPropertyDecl1()",
        "snippet": "  public void testDuplicateStaticPropertyDecl1() throws Exception {\n    testTypes(\n        \"var goog = goog || {};\" +\n        \"/** @type {Foo} */ goog.foo;\" +\n        \"/** @type {Foo} */ goog.foo;\" +\n        \"/** @constructor */ function Foo() {}\");\n  }\n",
        "begin_line": 1893,
        "end_line": 1899,
        "comment": "",
        "child_ranges": [
            "(line 1894,col 5)-(line 1898,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testDuplicateStaticPropertyDecl2()",
        "snippet": "  public void testDuplicateStaticPropertyDecl2() throws Exception {\n    testTypes(\n        \"var goog = goog || {};\" +\n        \"/** @type {Foo} */ goog.foo;\" +\n        \"/** @type {Foo} \\n * @suppress {duplicate} */ goog.foo;\" +\n        \"/** @constructor */ function Foo() {}\");\n  }\n",
        "begin_line": 1901,
        "end_line": 1907,
        "comment": "",
        "child_ranges": [
            "(line 1902,col 5)-(line 1906,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testDuplicateStaticPropertyDecl3()",
        "snippet": "  public void testDuplicateStaticPropertyDecl3() throws Exception {\n    testTypes(\n        \"var goog = goog || {};\" +\n        \"/** @type {!Foo} */ goog.foo;\" +\n        \"/** @type {string} */ goog.foo;\" +\n        \"/** @constructor */ function Foo() {}\",\n        \"variable goog.foo redefined with type string, \" +\n        \"original definition at [testcode]:1 with type Foo\");\n  }\n",
        "begin_line": 1909,
        "end_line": 1917,
        "comment": "",
        "child_ranges": [
            "(line 1910,col 5)-(line 1916,col 61)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testDuplicateStaticPropertyDecl4()",
        "snippet": "  public void testDuplicateStaticPropertyDecl4() throws Exception {\n    testTypes(\n        \"var goog = goog || {};\" +\n        \"/** @type {!Foo} */ goog.foo;\" +\n        \"/** @type {string} */ goog.foo = 'x';\" +\n        \"/** @constructor */ function Foo() {}\",\n        \"variable goog.foo redefined with type string, \" +\n        \"original definition at [testcode]:1 with type Foo\");\n  }\n",
        "begin_line": 1919,
        "end_line": 1927,
        "comment": "",
        "child_ranges": [
            "(line 1920,col 5)-(line 1926,col 61)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testDuplicateStaticPropertyDecl5()",
        "snippet": "  public void testDuplicateStaticPropertyDecl5() throws Exception {\n    testTypes(\n        \"var goog = goog || {};\" +\n        \"/** @type {!Foo} */ goog.foo;\" +\n        \"/** @type {string}\\n * @suppress {duplicate} */ goog.foo = 'x';\" +\n        \"/** @constructor */ function Foo() {}\",\n        \"variable goog.foo redefined with type string, \" +\n        \"original definition at [testcode]:1 with type Foo\");\n  }\n",
        "begin_line": 1929,
        "end_line": 1937,
        "comment": "",
        "child_ranges": [
            "(line 1930,col 5)-(line 1936,col 61)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testDuplicateStaticPropertyDecl6()",
        "snippet": "  public void testDuplicateStaticPropertyDecl6() throws Exception {\n    testTypes(\n        \"var goog = goog || {};\" +\n        \"/** @type {string} */ goog.foo = 'y';\" +\n        \"/** @type {string}\\n * @suppress {duplicate} */ goog.foo = 'x';\");\n  }\n",
        "begin_line": 1939,
        "end_line": 1944,
        "comment": "",
        "child_ranges": [
            "(line 1940,col 5)-(line 1943,col 75)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testDuplicateStaticPropertyDecl7()",
        "snippet": "  public void testDuplicateStaticPropertyDecl7() throws Exception {\n    testTypes(\n        \"var goog = goog || {};\" +\n        \"/** @param {string} x */ goog.foo;\" +\n        \"/** @type {function(string)} */ goog.foo;\");\n  }\n",
        "begin_line": 1946,
        "end_line": 1951,
        "comment": "",
        "child_ranges": [
            "(line 1947,col 5)-(line 1950,col 53)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testDuplicateStaticPropertyDecl8()",
        "snippet": "  public void testDuplicateStaticPropertyDecl8() throws Exception {\n    testTypes(\n        \"var goog = goog || {};\" +\n        \"/** @return {EventCopy} */ goog.foo;\" +\n        \"/** @constructor */ function EventCopy() {}\" +\n        \"/** @return {EventCopy} */ goog.foo;\");\n  }\n",
        "begin_line": 1953,
        "end_line": 1959,
        "comment": "",
        "child_ranges": [
            "(line 1954,col 5)-(line 1958,col 48)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testDuplicateStaticPropertyDecl9()",
        "snippet": "  public void testDuplicateStaticPropertyDecl9() throws Exception {\n    testTypes(\n        \"var goog = goog || {};\" +\n        \"/** @return {EventCopy} */ goog.foo;\" +\n        \"/** @return {EventCopy} */ goog.foo;\" +\n        \"/** @constructor */ function EventCopy() {}\");\n  }\n",
        "begin_line": 1961,
        "end_line": 1967,
        "comment": "",
        "child_ranges": [
            "(line 1962,col 5)-(line 1966,col 55)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testDuplicateLocalVarDecl()",
        "snippet": "  public void testDuplicateLocalVarDecl() throws Exception {\n    testClosureTypesMultipleWarnings(\n        \"/** @param {number} x */\\n\" +\n        \"function f(x) { /** @type {string} */ var x = ''; }\",\n        Lists.newArrayList(\n            \"variable x redefined with type string, original definition\" +\n            \" at  [testcode] :2 with type number\",\n            \"initializing variable\\n\" +\n            \"found   : string\\n\" +\n            \"required: number\"));\n  }\n",
        "begin_line": 1969,
        "end_line": 1979,
        "comment": "",
        "child_ranges": [
            "(line 1970,col 5)-(line 1978,col 33)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testStubFunctionDeclaration1()",
        "snippet": "  public void testStubFunctionDeclaration1() throws Exception {\n    testFunctionType(\n        \"/** @constructor */ function f() {};\" +\n        \"/** @param {number} x \\n * @param {string} y \\n\" +\n        \"  * @return {number} */ f.prototype.foo;\",\n        \"(new f).foo\",\n        \"function (this:f, number, string): number\");\n  }\n",
        "begin_line": 1981,
        "end_line": 1988,
        "comment": "",
        "child_ranges": [
            "(line 1982,col 5)-(line 1987,col 53)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testStubFunctionDeclaration2()",
        "snippet": "  public void testStubFunctionDeclaration2() throws Exception {\n    testExternFunctionType(\n        // externs\n        \"/** @constructor */ function f() {};\" +\n        \"/** @constructor \\n * @extends {f} */ f.subclass;\",\n        \"f.subclass\",\n        \"function (new:f.subclass): ?\");\n  }\n",
        "begin_line": 1990,
        "end_line": 1997,
        "comment": "",
        "child_ranges": [
            "(line 1991,col 5)-(line 1996,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testStubFunctionDeclaration3()",
        "snippet": "  public void testStubFunctionDeclaration3() throws Exception {\n    testFunctionType(\n        \"/** @constructor */ function f() {};\" +\n        \"/** @return {undefined} */ f.foo;\",\n        \"f.foo\",\n        \"function (): undefined\");\n  }\n",
        "begin_line": 1999,
        "end_line": 2005,
        "comment": "",
        "child_ranges": [
            "(line 2000,col 5)-(line 2004,col 34)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testStubFunctionDeclaration4()",
        "snippet": "  public void testStubFunctionDeclaration4() throws Exception {\n    testFunctionType(\n        \"/** @constructor */ function f() { \" +\n        \"  /** @return {number} */ this.foo;\" +\n        \"}\",\n        \"(new f).foo\",\n        \"function (this:f): number\");\n  }\n",
        "begin_line": 2007,
        "end_line": 2014,
        "comment": "",
        "child_ranges": [
            "(line 2008,col 5)-(line 2013,col 37)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testStubFunctionDeclaration5()",
        "snippet": "  public void testStubFunctionDeclaration5() throws Exception {\n    testFunctionType(\n        \"/** @constructor */ function f() { \" +\n        \"  /** @type {Function} */ this.foo;\" +\n        \"}\",\n        \"(new f).foo\",\n        createOptionalType(createNullableType(U2U_CONSTRUCTOR_TYPE))\n            .toString());\n  }\n",
        "begin_line": 2016,
        "end_line": 2024,
        "comment": "",
        "child_ranges": [
            "(line 2017,col 5)-(line 2023,col 25)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testStubFunctionDeclaration6()",
        "snippet": "  public void testStubFunctionDeclaration6() throws Exception {\n    testFunctionType(\n        \"/** @constructor */ function f() {} \" +\n        \"/** @type {Function} */ f.prototype.foo;\",\n        \"(new f).foo\",\n        createOptionalType(createNullableType(U2U_CONSTRUCTOR_TYPE))\n            .toString());\n  }\n",
        "begin_line": 2026,
        "end_line": 2033,
        "comment": "",
        "child_ranges": [
            "(line 2027,col 5)-(line 2032,col 25)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testStubFunctionDeclaration7()",
        "snippet": "  public void testStubFunctionDeclaration7() throws Exception {\n    testFunctionType(\n        \"/** @constructor */ function f() {} \" +\n        \"/** @type {Function} */ f.prototype.foo = function() {};\",\n        \"(new f).foo\",\n        createOptionalType(createNullableType(U2U_CONSTRUCTOR_TYPE))\n            .toString());\n  }\n",
        "begin_line": 2035,
        "end_line": 2042,
        "comment": "",
        "child_ranges": [
            "(line 2036,col 5)-(line 2041,col 25)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testStubFunctionDeclaration8()",
        "snippet": "  public void testStubFunctionDeclaration8() throws Exception {\n    testFunctionType(\n        \"/** @type {Function} */ var f = function() {}; \",\n        \"f\",\n        createOptionalType(createNullableType(U2U_CONSTRUCTOR_TYPE))\n            .toString());\n  }\n",
        "begin_line": 2044,
        "end_line": 2050,
        "comment": "",
        "child_ranges": [
            "(line 2045,col 5)-(line 2049,col 25)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testStubFunctionDeclaration9()",
        "snippet": "  public void testStubFunctionDeclaration9() throws Exception {\n    testFunctionType(\n        \"/** @type {function():number} */ var f; \",\n        \"f\",\n        \"function (): number\");\n  }\n",
        "begin_line": 2052,
        "end_line": 2057,
        "comment": "",
        "child_ranges": [
            "(line 2053,col 5)-(line 2056,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testStubFunctionDeclaration10()",
        "snippet": "  public void testStubFunctionDeclaration10() throws Exception {\n    testFunctionType(\n        \"/** @type {function(number):number} */ var f = function(x) {};\",\n        \"f\",\n        \"function (number): number\");\n  }\n",
        "begin_line": 2059,
        "end_line": 2064,
        "comment": "",
        "child_ranges": [
            "(line 2060,col 5)-(line 2063,col 37)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testNestedFunctionInference1()",
        "snippet": "  public void testNestedFunctionInference1() throws Exception {\n    String nestedAssignOfFooAndBar =\n        \"/** @constructor */ function f() {};\" +\n        \"f.prototype.foo = f.prototype.bar = function(){};\";\n    testFunctionType(nestedAssignOfFooAndBar, \"(new f).bar\",\n        \"function (this:f): undefined\");\n  }\n",
        "begin_line": 2066,
        "end_line": 2072,
        "comment": "",
        "child_ranges": [
            "(line 2067,col 5)-(line 2069,col 60)",
            "(line 2070,col 5)-(line 2071,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testFunctionType(java.lang.String, java.lang.String)",
        "snippet": "  private void testFunctionType(String functionDef, String functionType)\n      throws Exception {\n    testFunctionType(functionDef, \"f\", functionType);\n  }\n",
        "begin_line": 2078,
        "end_line": 2081,
        "comment": "\n   * Tests the type of a function definition. The function defined by\n   * {@code functionDef} should be named {@code \"f\"}.\n   ",
        "child_ranges": [
            "(line 2080,col 5)-(line 2080,col 53)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testFunctionType(java.lang.String, java.lang.String, java.lang.String)",
        "snippet": "  private void testFunctionType(String functionDef, String functionName,\n      String functionType) throws Exception {\n    // using the variable initialization check to verify the function's type\n    testTypes(\n        functionDef +\n        \"/** @type number */var a=\" + functionName + \";\",\n        \"initializing variable\\n\" +\n        \"found   : \" + functionType + \"\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 2087,
        "end_line": 2096,
        "comment": "\n   * Tests the type of a function definition. The function defined by\n   * {@code functionDef} should be named {@code functionName}.\n   ",
        "child_ranges": [
            "(line 2090,col 5)-(line 2095,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testExternFunctionType(java.lang.String, java.lang.String, java.lang.String)",
        "snippet": "  private void testExternFunctionType(String functionDef, String functionName,\n      String functionType) throws Exception {\n    testTypes(\n        functionDef,\n        \"/** @type number */var a=\" + functionName + \";\",\n        \"initializing variable\\n\" +\n        \"found   : \" + functionType + \"\\n\" +\n        \"required: number\", false);\n  }\n",
        "begin_line": 2103,
        "end_line": 2111,
        "comment": "\n   * Tests the type of a function definition in externs.\n   * The function defined by {@code functionDef} should be\n   * named {@code functionName}.\n   ",
        "child_ranges": [
            "(line 2105,col 5)-(line 2110,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testTypeRedefinition()",
        "snippet": "  public void testTypeRedefinition() throws Exception {\n    testTypes(\"a={};/**@enum {string}*/ a.A = {ZOR:'b'};\"\n        + \"/** @constructor */ a.A = function() {}\",\n        \"variable a.A redefined with type function (new:a.A): undefined, \" +\n        \"original definition at [testcode]:1 with type enum{a.A}\");\n  }\n",
        "begin_line": 2113,
        "end_line": 2118,
        "comment": "",
        "child_ranges": [
            "(line 2114,col 5)-(line 2117,col 67)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testIn1()",
        "snippet": "  public void testIn1() throws Exception {\n    testTypes(\"'foo' in Object\");\n  }\n",
        "begin_line": 2120,
        "end_line": 2122,
        "comment": "",
        "child_ranges": [
            "(line 2121,col 5)-(line 2121,col 33)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testIn2()",
        "snippet": "  public void testIn2() throws Exception {\n    testTypes(\"3 in Object\");\n  }\n",
        "begin_line": 2124,
        "end_line": 2126,
        "comment": "",
        "child_ranges": [
            "(line 2125,col 5)-(line 2125,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testIn3()",
        "snippet": "  public void testIn3() throws Exception {\n    testTypes(\"undefined in Object\");\n  }\n",
        "begin_line": 2128,
        "end_line": 2130,
        "comment": "",
        "child_ranges": [
            "(line 2129,col 5)-(line 2129,col 37)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testIn4()",
        "snippet": "  public void testIn4() throws Exception {\n    testTypes(\"Date in Object\",\n        \"left side of 'in'\\n\" +\n        \"found   : function (new:Date, ?, ?, ?, ?, ?, ?, ?): string\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 2132,
        "end_line": 2137,
        "comment": "",
        "child_ranges": [
            "(line 2133,col 5)-(line 2136,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testIn5()",
        "snippet": "  public void testIn5() throws Exception {\n    testTypes(\"'x' in null\",\n        \"'in' requires an object\\n\" +\n        \"found   : null\\n\" +\n        \"required: Object\");\n  }\n",
        "begin_line": 2139,
        "end_line": 2144,
        "comment": "",
        "child_ranges": [
            "(line 2140,col 5)-(line 2143,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testIn6()",
        "snippet": "  public void testIn6() throws Exception {\n    testTypes(\n        \"/** @param {number} x */\" +\n        \"function g(x) {}\" +\n        \"g(1 in {});\",\n        \"actual parameter 1 of g does not match formal parameter\\n\" +\n        \"found   : boolean\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 2146,
        "end_line": 2154,
        "comment": "",
        "child_ranges": [
            "(line 2147,col 5)-(line 2153,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testIn7()",
        "snippet": "  public void testIn7() throws Exception {\n    // Make sure we do inference in the 'in' expression.\n    testTypes(\n        \"/**\\n\" +\n        \" * @param {number} x\\n\" +\n        \" * @return {number}\\n\" +\n        \" */\\n\" +\n        \"function g(x) { return 5; }\" +\n        \"function f() {\" +\n        \"  var x = {};\" +\n        \"  x.foo = '3';\" +\n        \"  return g(x.foo) in {};\" +\n        \"}\",\n        \"actual parameter 1 of g does not match formal parameter\\n\" +\n        \"found   : string\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 2156,
        "end_line": 2172,
        "comment": "",
        "child_ranges": [
            "(line 2158,col 5)-(line 2171,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testComparison2()",
        "snippet": "  public void testComparison2() throws Exception {\n    testTypes(\"/**@type number*/var a;\" +\n        \"/**@type !Date */var b;\" +\n        \"if (a!==b) {}\",\n        \"condition always evaluates to the same value\\n\" +\n        \"left : number\\n\" +\n        \"right: Date\");\n  }\n",
        "begin_line": 2184,
        "end_line": 2191,
        "comment": "",
        "child_ranges": [
            "(line 2185,col 5)-(line 2190,col 23)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testComparison3()",
        "snippet": "  public void testComparison3() throws Exception {\n    // Since null == undefined in JavaScript, this code is reasonable.\n    testTypes(\"/** @type {(Object,undefined)} */var a;\" +\n        \"var b = a == null\");\n  }\n",
        "begin_line": 2193,
        "end_line": 2197,
        "comment": "",
        "child_ranges": [
            "(line 2195,col 5)-(line 2196,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testComparison4()",
        "snippet": "  public void testComparison4() throws Exception {\n    testTypes(\"/** @type {(!Object,undefined)} */var a;\" +\n        \"/** @type {!Object} */var b;\" +\n        \"var c = a == b\");\n  }\n",
        "begin_line": 2199,
        "end_line": 2203,
        "comment": "",
        "child_ranges": [
            "(line 2200,col 5)-(line 2202,col 26)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testComparison5()",
        "snippet": "  public void testComparison5() throws Exception {\n    testTypes(\"/** @type null */var a;\" +\n        \"/** @type null */var b;\" +\n        \"a == b\",\n        \"condition always evaluates to true\\n\" +\n        \"left : null\\n\" +\n        \"right: null\");\n  }\n",
        "begin_line": 2205,
        "end_line": 2212,
        "comment": "",
        "child_ranges": [
            "(line 2206,col 5)-(line 2211,col 23)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testComparison6()",
        "snippet": "  public void testComparison6() throws Exception {\n    testTypes(\"/** @type null */var a;\" +\n        \"/** @type null */var b;\" +\n        \"a != b\",\n        \"condition always evaluates to false\\n\" +\n        \"left : null\\n\" +\n        \"right: null\");\n  }\n",
        "begin_line": 2214,
        "end_line": 2221,
        "comment": "",
        "child_ranges": [
            "(line 2215,col 5)-(line 2220,col 23)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testComparison7()",
        "snippet": "  public void testComparison7() throws Exception {\n    testTypes(\"var a;\" +\n        \"var b;\" +\n        \"a == b\",\n        \"condition always evaluates to true\\n\" +\n        \"left : undefined\\n\" +\n        \"right: undefined\");\n  }\n",
        "begin_line": 2223,
        "end_line": 2230,
        "comment": "",
        "child_ranges": [
            "(line 2224,col 5)-(line 2229,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testComparison8()",
        "snippet": "  public void testComparison8() throws Exception {\n    testTypes(\"/** @type {Array.<string>} */ var a = [];\" +\n        \"a[0] == null || a[1] == undefined\");\n  }\n",
        "begin_line": 2232,
        "end_line": 2235,
        "comment": "",
        "child_ranges": [
            "(line 2233,col 5)-(line 2234,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testComparison9()",
        "snippet": "  public void testComparison9() throws Exception {\n    testTypes(\"/** @type {Array.<undefined>} */ var a = [];\" +\n        \"a[0] == null\",\n        \"condition always evaluates to true\\n\" +\n        \"left : undefined\\n\" +\n        \"right: null\");\n  }\n",
        "begin_line": 2237,
        "end_line": 2243,
        "comment": "",
        "child_ranges": [
            "(line 2238,col 5)-(line 2242,col 23)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testComparison10()",
        "snippet": "  public void testComparison10() throws Exception {\n    testTypes(\"/** @type {Array.<undefined>} */ var a = [];\" +\n        \"a[0] === null\");\n  }\n",
        "begin_line": 2245,
        "end_line": 2248,
        "comment": "",
        "child_ranges": [
            "(line 2246,col 5)-(line 2247,col 25)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testEnumStaticMethod1()",
        "snippet": "  public void testEnumStaticMethod1() throws Exception {\n    testTypes(\n        \"/** @enum */ var Foo = {AAA: 1};\" +\n        \"/** @param {number} x */ Foo.method = function(x) {};\" +\n        \"Foo.method(true);\",\n        \"actual parameter 1 of Foo.method does not match formal parameter\\n\" +\n        \"found   : boolean\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 2250,
        "end_line": 2258,
        "comment": "",
        "child_ranges": [
            "(line 2251,col 5)-(line 2257,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testEnumStaticMethod2()",
        "snippet": "  public void testEnumStaticMethod2() throws Exception {\n    testTypes(\n        \"/** @enum */ var Foo = {AAA: 1};\" +\n        \"/** @param {number} x */ Foo.method = function(x) {};\" +\n        \"function f() { Foo.method(true); }\",\n        \"actual parameter 1 of Foo.method does not match formal parameter\\n\" +\n        \"found   : boolean\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 2260,
        "end_line": 2268,
        "comment": "",
        "child_ranges": [
            "(line 2261,col 5)-(line 2267,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testEnum1()",
        "snippet": "  public void testEnum1() throws Exception {\n    testTypes(\"/**@enum*/var a={BB:1,CC:2};\\n\" +\n        \"/**@type {a}*/var d;d=a.BB;\");\n  }\n",
        "begin_line": 2270,
        "end_line": 2273,
        "comment": "",
        "child_ranges": [
            "(line 2271,col 5)-(line 2272,col 39)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testEnum2()",
        "snippet": "  public void testEnum2() throws Exception {\n    testTypes(\"/**@enum*/var a={b:1}\",\n        \"enum key b must be a syntactic constant\");\n  }\n",
        "begin_line": 2275,
        "end_line": 2278,
        "comment": "",
        "child_ranges": [
            "(line 2276,col 5)-(line 2277,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testEnum3()",
        "snippet": "  public void testEnum3() throws Exception {\n    testTypes(\"/**@enum*/var a={BB:1,BB:2}\",\n        \"enum element BB already defined\", true);\n  }\n",
        "begin_line": 2280,
        "end_line": 2283,
        "comment": "",
        "child_ranges": [
            "(line 2281,col 5)-(line 2282,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testEnum4()",
        "snippet": "  public void testEnum4() throws Exception {\n    testTypes(\"/**@enum*/var a={BB:'string'}\",\n        \"element type must match enum's type\\n\" +\n        \"found   : string\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 2285,
        "end_line": 2290,
        "comment": "",
        "child_ranges": [
            "(line 2286,col 5)-(line 2289,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testEnum5()",
        "snippet": "  public void testEnum5() throws Exception {\n    testTypes(\"/**@enum {String}*/var a={BB:'string'}\",\n        \"element type must match enum's type\\n\" +\n        \"found   : string\\n\" +\n        \"required: (String|null|undefined)\");\n  }\n",
        "begin_line": 2292,
        "end_line": 2297,
        "comment": "",
        "child_ranges": [
            "(line 2293,col 5)-(line 2296,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testEnum6()",
        "snippet": "  public void testEnum6() throws Exception {\n    testTypes(\"/**@enum*/var a={BB:1,CC:2};\\n/**@type {!Array}*/var d;d=a.BB;\",\n        \"assignment\\n\" +\n        \"found   : a.<number>\\n\" +\n        \"required: Array\");\n  }\n",
        "begin_line": 2299,
        "end_line": 2304,
        "comment": "",
        "child_ranges": [
            "(line 2300,col 5)-(line 2303,col 27)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testEnum7()",
        "snippet": "  public void testEnum7() throws Exception {\n    testTypes(\"/** @enum */var a={AA:1,BB:2,CC:3};\" +\n        \"/** @type a */var b=a.D;\",\n        \"element D does not exist on this enum\");\n  }\n",
        "begin_line": 2306,
        "end_line": 2310,
        "comment": "",
        "child_ranges": [
            "(line 2307,col 5)-(line 2309,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testEnum8()",
        "snippet": "  public void testEnum8() throws Exception {\n    testTypes(\"/** @enum */var a=8;\",\n        \"enum initializer must be an object literal or an enum\");\n  }\n",
        "begin_line": 2312,
        "end_line": 2315,
        "comment": "",
        "child_ranges": [
            "(line 2313,col 5)-(line 2314,col 65)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testEnum9()",
        "snippet": "  public void testEnum9() throws Exception {\n    testTypes(\n        \"var goog = {};\" +\n        \"/** @enum */goog.a=8;\",\n        \"enum initializer must be an object literal or an enum\");\n  }\n",
        "begin_line": 2317,
        "end_line": 2322,
        "comment": "",
        "child_ranges": [
            "(line 2318,col 5)-(line 2321,col 65)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testEnum10()",
        "snippet": "  public void testEnum10() throws Exception {\n    testTypes(\n        \"/** @enum {number} */\" +\n        \"goog.K = { A : 3 };\");\n  }\n",
        "begin_line": 2324,
        "end_line": 2328,
        "comment": "",
        "child_ranges": [
            "(line 2325,col 5)-(line 2327,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testEnum11()",
        "snippet": "  public void testEnum11() throws Exception {\n    testTypes(\n        \"/** @enum {number} */\" +\n        \"goog.K = { 502 : 3 };\");\n  }\n",
        "begin_line": 2330,
        "end_line": 2334,
        "comment": "",
        "child_ranges": [
            "(line 2331,col 5)-(line 2333,col 33)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testEnum12()",
        "snippet": "  public void testEnum12() throws Exception {\n    testTypes(\n        \"/** @enum {number} */ var a = {};\" +\n        \"/** @enum */ var b = a;\");\n  }\n",
        "begin_line": 2336,
        "end_line": 2340,
        "comment": "",
        "child_ranges": [
            "(line 2337,col 5)-(line 2339,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testEnum13()",
        "snippet": "  public void testEnum13() throws Exception {\n    testTypes(\n        \"/** @enum {number} */ var a = {};\" +\n        \"/** @enum {string} */ var b = a;\",\n        \"incompatible enum element types\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 2342,
        "end_line": 2349,
        "comment": "",
        "child_ranges": [
            "(line 2343,col 5)-(line 2348,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testEnum14()",
        "snippet": "  public void testEnum14() throws Exception {\n    testTypes(\n        \"/** @enum {number} */ var a = {FOO:5};\" +\n        \"/** @enum */ var b = a;\" +\n        \"var c = b.FOO;\");\n  }\n",
        "begin_line": 2351,
        "end_line": 2356,
        "comment": "",
        "child_ranges": [
            "(line 2352,col 5)-(line 2355,col 26)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testEnum15()",
        "snippet": "  public void testEnum15() throws Exception {\n    testTypes(\n        \"/** @enum {number} */ var a = {FOO:5};\" +\n        \"/** @enum */ var b = a;\" +\n        \"var c = b.BAR;\",\n        \"element BAR does not exist on this enum\");\n  }\n",
        "begin_line": 2358,
        "end_line": 2364,
        "comment": "",
        "child_ranges": [
            "(line 2359,col 5)-(line 2363,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testEnum16()",
        "snippet": "  public void testEnum16() throws Exception {\n    testTypes(\"var goog = {};\" +\n        \"/**@enum*/goog.a={BB:1,BB:2}\",\n        \"enum element BB already defined\", true);\n  }\n",
        "begin_line": 2366,
        "end_line": 2370,
        "comment": "",
        "child_ranges": [
            "(line 2367,col 5)-(line 2369,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testEnum17()",
        "snippet": "  public void testEnum17() throws Exception {\n    testTypes(\"var goog = {};\" +\n        \"/**@enum*/goog.a={BB:'string'}\",\n        \"element type must match enum's type\\n\" +\n        \"found   : string\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 2372,
        "end_line": 2378,
        "comment": "",
        "child_ranges": [
            "(line 2373,col 5)-(line 2377,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testEnum18()",
        "snippet": "  public void testEnum18() throws Exception {\n    testTypes(\"/**@enum*/ var E = {A: 1, B: 2};\" +\n        \"/** @param {!E} x\\n@return {number} */\\n\" +\n        \"var f = function(x) { return x; };\");\n  }\n",
        "begin_line": 2380,
        "end_line": 2384,
        "comment": "",
        "child_ranges": [
            "(line 2381,col 5)-(line 2383,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testEnum19()",
        "snippet": "  public void testEnum19() throws Exception {\n    testTypes(\"/**@enum*/ var E = {A: 1, B: 2};\" +\n        \"/** @param {number} x\\n@return {!E} */\\n\" +\n        \"var f = function(x) { return x; };\",\n        \"inconsistent return type\\n\" +\n        \"found   : number\\n\" +\n        \"required: E.<number>\");\n  }\n",
        "begin_line": 2386,
        "end_line": 2393,
        "comment": "",
        "child_ranges": [
            "(line 2387,col 5)-(line 2392,col 32)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testEnum20()",
        "snippet": "  public void testEnum20() throws Exception {\n    testTypes(\"/**@enum*/ var E = {A: 1, B: 2}; var x = []; x[E.A] = 0;\");\n  }\n",
        "begin_line": 2395,
        "end_line": 2397,
        "comment": "",
        "child_ranges": [
            "(line 2396,col 5)-(line 2396,col 74)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testEnum21()",
        "snippet": "  public void testEnum21() throws Exception {\n    Node n = parseAndTypeCheck(\n        \"/** @enum {string} */ var E = {A : 'a', B : 'b'};\\n\" +\n        \"/** @param {!E} x\\n@return {!E} */ function f(x) { return x; }\");\n    Node nodeX = n.getLastChild().getLastChild().getLastChild().getLastChild();\n    JSType typeE = nodeX.getJSType();\n    assertFalse(typeE.isObject());\n    assertFalse(typeE.isNullable());\n  }\n",
        "begin_line": 2399,
        "end_line": 2407,
        "comment": "",
        "child_ranges": [
            "(line 2400,col 5)-(line 2402,col 74)",
            "(line 2403,col 5)-(line 2403,col 79)",
            "(line 2404,col 5)-(line 2404,col 37)",
            "(line 2405,col 5)-(line 2405,col 34)",
            "(line 2406,col 5)-(line 2406,col 36)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testEnum22()",
        "snippet": "  public void testEnum22() throws Exception {\n    testTypes(\"/**@enum*/ var E = {A: 1, B: 2};\" +\n        \"/** @param {E} x \\n* @return {number} */ function f(x) {return x}\");\n  }\n",
        "begin_line": 2409,
        "end_line": 2412,
        "comment": "",
        "child_ranges": [
            "(line 2410,col 5)-(line 2411,col 77)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testEnum23()",
        "snippet": "  public void testEnum23() throws Exception {\n    testTypes(\"/**@enum*/ var E = {A: 1, B: 2};\" +\n        \"/** @param {E} x \\n* @return {string} */ function f(x) {return x}\",\n        \"inconsistent return type\\n\" +\n        \"found   : E.<number>\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 2414,
        "end_line": 2420,
        "comment": "",
        "child_ranges": [
            "(line 2415,col 5)-(line 2419,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testEnum24()",
        "snippet": "  public void testEnum24() throws Exception {\n    testTypes(\"/**@enum {Object} */ var E = {A: {}};\" +\n        \"/** @param {E} x \\n* @return {!Object} */ function f(x) {return x}\",\n        \"inconsistent return type\\n\" +\n        \"found   : E.<(Object|null|undefined)>\\n\" +\n        \"required: Object\");\n  }\n",
        "begin_line": 2422,
        "end_line": 2428,
        "comment": "",
        "child_ranges": [
            "(line 2423,col 5)-(line 2427,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testEnum25()",
        "snippet": "  public void testEnum25() throws Exception {\n    testTypes(\"/**@enum {!Object} */ var E = {A: {}};\" +\n        \"/** @param {E} x \\n* @return {!Object} */ function f(x) {return x}\");\n  }\n",
        "begin_line": 2430,
        "end_line": 2433,
        "comment": "",
        "child_ranges": [
            "(line 2431,col 5)-(line 2432,col 78)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testEnum26()",
        "snippet": "  public void testEnum26() throws Exception {\n    testTypes(\"var a = {}; /**@enum*/ a.B = {A: 1, B: 2};\" +\n        \"/** @param {a.B} x \\n* @return {number} */ function f(x) {return x}\");\n  }\n",
        "begin_line": 2435,
        "end_line": 2438,
        "comment": "",
        "child_ranges": [
            "(line 2436,col 5)-(line 2437,col 79)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testEnum27()",
        "snippet": "  public void testEnum27() throws Exception {\n    // x is unknown\n    testTypes(\"/** @enum */ var A = {B: 1, C: 2}; \" +\n        \"function f(x) { return A == x; }\");\n  }\n",
        "begin_line": 2440,
        "end_line": 2444,
        "comment": "",
        "child_ranges": [
            "(line 2442,col 5)-(line 2443,col 44)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testEnum28()",
        "snippet": "  public void testEnum28() throws Exception {\n    // x is unknown\n    testTypes(\"/** @enum */ var A = {B: 1, C: 2}; \" +\n        \"function f(x) { return A.B == x; }\");\n  }\n",
        "begin_line": 2446,
        "end_line": 2450,
        "comment": "",
        "child_ranges": [
            "(line 2448,col 5)-(line 2449,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testEnum29()",
        "snippet": "  public void testEnum29() throws Exception {\n    testTypes(\"/** @enum */ var A = {B: 1, C: 2}; \" +\n        \"/** @return {number} */ function f() { return A; }\",\n        \"inconsistent return type\\n\" +\n        \"found   : enum{A}\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 2452,
        "end_line": 2458,
        "comment": "",
        "child_ranges": [
            "(line 2453,col 5)-(line 2457,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testEnum30()",
        "snippet": "  public void testEnum30() throws Exception {\n    testTypes(\"/** @enum */ var A = {B: 1, C: 2}; \" +\n        \"/** @return {number} */ function f() { return A.B; }\");\n  }\n",
        "begin_line": 2460,
        "end_line": 2463,
        "comment": "",
        "child_ranges": [
            "(line 2461,col 5)-(line 2462,col 64)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testEnum31()",
        "snippet": "  public void testEnum31() throws Exception {\n    testTypes(\"/** @enum */ var A = {B: 1, C: 2}; \" +\n        \"/** @return {A} */ function f() { return A; }\",\n        \"inconsistent return type\\n\" +\n        \"found   : enum{A}\\n\" +\n        \"required: A.<number>\");\n  }\n",
        "begin_line": 2465,
        "end_line": 2471,
        "comment": "",
        "child_ranges": [
            "(line 2466,col 5)-(line 2470,col 32)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testEnum32()",
        "snippet": "  public void testEnum32() throws Exception {\n    testTypes(\"/** @enum */ var A = {B: 1, C: 2}; \" +\n        \"/** @return {A} */ function f() { return A.B; }\");\n  }\n",
        "begin_line": 2473,
        "end_line": 2476,
        "comment": "",
        "child_ranges": [
            "(line 2474,col 5)-(line 2475,col 59)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testEnum34()",
        "snippet": "  public void testEnum34() throws Exception {\n    testTypes(\"/** @enum */ var A = {B: 1, C: 2}; \" +\n        \"/** @param {number} x */ function f(x) { return x == A.B; }\");\n  }\n",
        "begin_line": 2478,
        "end_line": 2481,
        "comment": "",
        "child_ranges": [
            "(line 2479,col 5)-(line 2480,col 71)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testEnum35()",
        "snippet": "  public void testEnum35() throws Exception {\n    testTypes(\"var a = a || {}; /** @enum */ a.b = {C: 1, D: 2};\" +\n              \"/** @return {a.b} */ function f() { return a.b.C; }\");\n  }\n",
        "begin_line": 2483,
        "end_line": 2486,
        "comment": "",
        "child_ranges": [
            "(line 2484,col 5)-(line 2485,col 69)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testEnum36()",
        "snippet": "  public void testEnum36() throws Exception {\n    testTypes(\"var a = a || {}; /** @enum */ a.b = {C: 1, D: 2};\" +\n              \"/** @return {!a.b} */ function f() { return 1; }\",\n              \"inconsistent return type\\n\" +\n              \"found   : number\\n\" +\n              \"required: a.b.<number>\");\n  }\n",
        "begin_line": 2488,
        "end_line": 2494,
        "comment": "",
        "child_ranges": [
            "(line 2489,col 5)-(line 2493,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testEnum37()",
        "snippet": "  public void testEnum37() throws Exception {\n    testTypes(\n        \"var goog = goog || {};\" +\n        \"/** @enum {number} */ goog.a = {};\" +\n        \"/** @enum */ var b = goog.a;\");\n  }\n",
        "begin_line": 2496,
        "end_line": 2501,
        "comment": "",
        "child_ranges": [
            "(line 2497,col 5)-(line 2500,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testEnum38()",
        "snippet": "  public void testEnum38() throws Exception {\n    testTypes(\n        \"/** @enum {MyEnum} */ var MyEnum = {};\" +\n        \"/** @param {MyEnum} x */ function f(x) {}\",\n        \"Parse error. Cycle detected in inheritance chain \" +\n        \"of type MyEnum\");\n  }\n",
        "begin_line": 2503,
        "end_line": 2509,
        "comment": "",
        "child_ranges": [
            "(line 2504,col 5)-(line 2508,col 26)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testEnum39()",
        "snippet": "  public void testEnum39() throws Exception {\n    testTypes(\n        \"/** @enum {Number} */ var MyEnum = {FOO: new Number(1)};\" +\n        \"/** @param {MyEnum} x \\n * @return {number} */\" +\n        \"function f(x) { return x == MyEnum.FOO && MyEnum.FOO == x; }\",\n        \"inconsistent return type\\n\" +\n        \"found   : boolean\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 2511,
        "end_line": 2519,
        "comment": "",
        "child_ranges": [
            "(line 2512,col 5)-(line 2518,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testEnum40()",
        "snippet": "  public void testEnum40() throws Exception {\n    testTypes(\n        \"/** @enum {Number} */ var MyEnum = {FOO: new Number(1)};\" +\n        \"/** @param {number} x \\n * @return {number} */\" +\n        \"function f(x) { return x == MyEnum.FOO && MyEnum.FOO == x; }\",\n        \"inconsistent return type\\n\" +\n        \"found   : boolean\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 2521,
        "end_line": 2529,
        "comment": "",
        "child_ranges": [
            "(line 2522,col 5)-(line 2528,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testAliasedEnum1()",
        "snippet": "  public void testAliasedEnum1() throws Exception {\n    testTypes(\n        \"/** @enum */ var YourEnum = {FOO: 3};\" +\n        \"/** @enum */ var MyEnum = YourEnum;\" +\n        \"/** @param {MyEnum} x */ function f(x) {} f(MyEnum.FOO);\");\n  }\n",
        "begin_line": 2531,
        "end_line": 2536,
        "comment": "",
        "child_ranges": [
            "(line 2532,col 5)-(line 2535,col 68)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testAliasedEnum2()",
        "snippet": "  public void testAliasedEnum2() throws Exception {\n    testTypes(\n        \"/** @enum */ var YourEnum = {FOO: 3};\" +\n        \"/** @enum */ var MyEnum = YourEnum;\" +\n        \"/** @param {YourEnum} x */ function f(x) {} f(MyEnum.FOO);\");\n  }\n",
        "begin_line": 2538,
        "end_line": 2543,
        "comment": "",
        "child_ranges": [
            "(line 2539,col 5)-(line 2542,col 70)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testAliasedEnum3()",
        "snippet": "  public void testAliasedEnum3() throws Exception {\n    testTypes(\n        \"/** @enum */ var YourEnum = {FOO: 3};\" +\n        \"/** @enum */ var MyEnum = YourEnum;\" +\n        \"/** @param {MyEnum} x */ function f(x) {} f(YourEnum.FOO);\");\n  }\n",
        "begin_line": 2545,
        "end_line": 2550,
        "comment": "",
        "child_ranges": [
            "(line 2546,col 5)-(line 2549,col 70)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testAliasedEnum4()",
        "snippet": "  public void testAliasedEnum4() throws Exception {\n    testTypes(\n        \"/** @enum */ var YourEnum = {FOO: 3};\" +\n        \"/** @enum */ var MyEnum = YourEnum;\" +\n        \"/** @param {YourEnum} x */ function f(x) {} f(YourEnum.FOO);\");\n  }\n",
        "begin_line": 2552,
        "end_line": 2557,
        "comment": "",
        "child_ranges": [
            "(line 2553,col 5)-(line 2556,col 72)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testAliasedEnum5()",
        "snippet": "  public void testAliasedEnum5() throws Exception {\n    testTypes(\n        \"/** @enum */ var YourEnum = {FOO: 3};\" +\n        \"/** @enum */ var MyEnum = YourEnum;\" +\n        \"/** @param {string} x */ function f(x) {} f(MyEnum.FOO);\",\n        \"actual parameter 1 of f does not match formal parameter\\n\" +\n        \"found   : YourEnum.<number>\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 2559,
        "end_line": 2567,
        "comment": "",
        "child_ranges": [
            "(line 2560,col 5)-(line 2566,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testBackwardsEnumUse1()",
        "snippet": "  public void testBackwardsEnumUse1() throws Exception {\n    testTypes(\n        \"/** @return {string} */ function f() { return MyEnum.FOO; }\" +\n        \"/** @enum {string} */ var MyEnum = {FOO: 'x'};\");\n  }\n",
        "begin_line": 2569,
        "end_line": 2573,
        "comment": "",
        "child_ranges": [
            "(line 2570,col 5)-(line 2572,col 58)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testBackwardsEnumUse2()",
        "snippet": "  public void testBackwardsEnumUse2() throws Exception {\n    testTypes(\n        \"/** @return {number} */ function f() { return MyEnum.FOO; }\" +\n        \"/** @enum {string} */ var MyEnum = {FOO: 'x'};\",\n        \"inconsistent return type\\n\" +\n        \"found   : MyEnum.<string>\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 2575,
        "end_line": 2582,
        "comment": "",
        "child_ranges": [
            "(line 2576,col 5)-(line 2581,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testBackwardsEnumUse3()",
        "snippet": "  public void testBackwardsEnumUse3() throws Exception {\n    testTypes(\n        \"/** @return {string} */ function f() { return MyEnum.FOO; }\" +\n        \"/** @enum {string} */ var YourEnum = {FOO: 'x'};\" +\n        \"/** @enum {string} */ var MyEnum = YourEnum;\");\n  }\n",
        "begin_line": 2584,
        "end_line": 2589,
        "comment": "",
        "child_ranges": [
            "(line 2585,col 5)-(line 2588,col 56)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testBackwardsEnumUse4()",
        "snippet": "  public void testBackwardsEnumUse4() throws Exception {\n    testTypes(\n        \"/** @return {number} */ function f() { return MyEnum.FOO; }\" +\n        \"/** @enum {string} */ var YourEnum = {FOO: 'x'};\" +\n        \"/** @enum {string} */ var MyEnum = YourEnum;\",\n        \"inconsistent return type\\n\" +\n        \"found   : YourEnum.<string>\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 2591,
        "end_line": 2599,
        "comment": "",
        "child_ranges": [
            "(line 2592,col 5)-(line 2598,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testBackwardsEnumUse5()",
        "snippet": "  public void testBackwardsEnumUse5() throws Exception {\n    testTypes(\n        \"/** @return {string} */ function f() { return MyEnum.BAR; }\" +\n        \"/** @enum {string} */ var YourEnum = {FOO: 'x'};\" +\n        \"/** @enum {string} */ var MyEnum = YourEnum;\",\n        \"element BAR does not exist on this enum\");\n  }\n",
        "begin_line": 2601,
        "end_line": 2607,
        "comment": "",
        "child_ranges": [
            "(line 2602,col 5)-(line 2606,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testBackwardsConstructor1()",
        "snippet": "  public void testBackwardsConstructor1() throws Exception {\n    testTypes(\n        \"function f() { (new Foo(true)); }\" +\n        \"/** \\n * @constructor \\n * @param {number} x */\" +\n        \"var Foo = function(x) {};\",\n        \"actual parameter 1 of Foo does not match formal parameter\\n\" +\n        \"found   : boolean\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 2609,
        "end_line": 2617,
        "comment": "",
        "child_ranges": [
            "(line 2610,col 5)-(line 2616,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testBackwardsConstructor2()",
        "snippet": "  public void testBackwardsConstructor2() throws Exception {\n    testTypes(\n        \"function f() { (new Foo(true)); }\" +\n        \"/** \\n * @constructor \\n * @param {number} x */\" +\n        \"var YourFoo = function(x) {};\" +\n        \"/** \\n * @constructor \\n * @param {number} x */\" +\n        \"var Foo = YourFoo;\",\n        \"actual parameter 1 of Foo does not match formal parameter\\n\" +\n        \"found   : boolean\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 2619,
        "end_line": 2629,
        "comment": "",
        "child_ranges": [
            "(line 2620,col 5)-(line 2628,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testMinimalConstructorAnnotation()",
        "snippet": "  public void testMinimalConstructorAnnotation() throws Exception {\n    testTypes(\"/** @constructor */function Foo(){}\");\n  }\n",
        "begin_line": 2631,
        "end_line": 2633,
        "comment": "",
        "child_ranges": [
            "(line 2632,col 5)-(line 2632,col 53)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testGoodExtends1()",
        "snippet": "  public void testGoodExtends1() throws Exception {\n    // A minimal @extends example\n    testTypes(\"/** @constructor */function base() {}\\n\" +\n        \"/** @constructor\\n * @extends {base} */function derived() {}\\n\");\n  }\n",
        "begin_line": 2635,
        "end_line": 2639,
        "comment": "",
        "child_ranges": [
            "(line 2637,col 5)-(line 2638,col 74)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testGoodExtends2()",
        "snippet": "  public void testGoodExtends2() throws Exception {\n    testTypes(\"/** @constructor\\n * @extends base */function derived() {}\\n\" +\n        \"/** @constructor */function base() {}\\n\");\n  }\n",
        "begin_line": 2641,
        "end_line": 2644,
        "comment": "",
        "child_ranges": [
            "(line 2642,col 5)-(line 2643,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testGoodExtends3()",
        "snippet": "  public void testGoodExtends3() throws Exception {\n    testTypes(\"/** @constructor\\n * @extends {Object} */function base() {}\\n\" +\n        \"/** @constructor\\n * @extends {base} */function derived() {}\\n\");\n  }\n",
        "begin_line": 2646,
        "end_line": 2649,
        "comment": "",
        "child_ranges": [
            "(line 2647,col 5)-(line 2648,col 74)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testGoodExtends4()",
        "snippet": "  public void testGoodExtends4() throws Exception {\n    // Ensure that @extends actually sets the base type of a constructor\n    // correctly. Because this isn't part of the human-readable Function\n    // definition, we need to crawl the prototype chain (eww).\n    Node n = parseAndTypeCheck(\n        \"var goog = {};\\n\" +\n        \"/** @constructor */goog.Base = function(){};\\n\" +\n        \"/** @constructor\\n\" +\n        \"  * @extends {goog.Base} */goog.Derived = function(){};\\n\");\n    Node subTypeName = n.getLastChild().getLastChild().getFirstChild();\n    assertEquals(\"goog.Derived\", subTypeName.getQualifiedName());\n\n    FunctionType subCtorType =\n        (FunctionType) subTypeName.getNext().getJSType();\n    assertEquals(\"goog.Derived\", subCtorType.getInstanceType().toString());\n\n    JSType superType = subCtorType.getPrototype().getImplicitPrototype();\n    assertEquals(\"goog.Base\", superType.toString());\n  }\n",
        "begin_line": 2651,
        "end_line": 2669,
        "comment": "",
        "child_ranges": [
            "(line 2655,col 5)-(line 2659,col 69)",
            "(line 2660,col 5)-(line 2660,col 71)",
            "(line 2661,col 5)-(line 2661,col 65)",
            "(line 2663,col 5)-(line 2664,col 57)",
            "(line 2665,col 5)-(line 2665,col 75)",
            "(line 2667,col 5)-(line 2667,col 73)",
            "(line 2668,col 5)-(line 2668,col 52)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testGoodExtends5()",
        "snippet": "  public void testGoodExtends5() throws Exception {\n    // we allow for the extends annotation to be placed first\n    testTypes(\"/** @constructor */function base() {}\\n\" +\n        \"/** @extends {base}\\n * @constructor */function derived() {}\\n\");\n  }\n",
        "begin_line": 2671,
        "end_line": 2675,
        "comment": "",
        "child_ranges": [
            "(line 2673,col 5)-(line 2674,col 74)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testGoodExtends6()",
        "snippet": "  public void testGoodExtends6() throws Exception {\n    testFunctionType(\n        CLOSURE_DEFS +\n        \"/** @constructor */function base() {}\\n\" +\n        \"/** @return {number} */ \" +\n        \"  base.prototype.foo = function() { return 1; };\\n\" +\n        \"/** @extends {base}\\n * @constructor */function derived() {}\\n\" +\n        \"goog.inherits(derived, base);\",\n        \"derived.superClass_.foo\",\n        \"function (this:base): number\");\n  }\n",
        "begin_line": 2677,
        "end_line": 2687,
        "comment": "",
        "child_ranges": [
            "(line 2678,col 5)-(line 2686,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testGoodExtends7()",
        "snippet": "  public void testGoodExtends7() throws Exception {\n    testFunctionType(\n        \"Function.prototype.inherits = function(x) {};\" +\n        \"/** @constructor */function base() {}\\n\" +\n        \"/** @extends {base}\\n * @constructor */function derived() {}\\n\" +\n        \"derived.inherits(base);\",\n        \"(new derived).constructor\",\n        \"function (new:derived): undefined\");\n  }\n",
        "begin_line": 2689,
        "end_line": 2697,
        "comment": "",
        "child_ranges": [
            "(line 2690,col 5)-(line 2696,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testGoodExtends8()",
        "snippet": "  public void testGoodExtends8() throws Exception {\n    testTypes(\"/** @constructor \\n @extends {Base} */ function Sub() {}\" +\n        \"/** @return {number} */ function f() { return (new Sub()).foo; }\" +\n        \"/** @constructor */ function Base() {}\" +\n        \"/** @type {boolean} */ Base.prototype.foo = true;\",\n        \"inconsistent return type\\n\" +\n        \"found   : boolean\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 2699,
        "end_line": 2707,
        "comment": "",
        "child_ranges": [
            "(line 2700,col 5)-(line 2706,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testGoodExtends9()",
        "snippet": "  public void testGoodExtends9() throws Exception {\n    testTypes(\n        \"/** @constructor */ function Super() {}\" +\n        \"Super.prototype.foo = function() {};\" +\n        \"/** @constructor \\n * @extends {Super} */ function Sub() {}\" +\n        \"Sub.prototype = new Super();\" +\n        \"/** @override */ Sub.prototype.foo = function() {};\");\n  }\n",
        "begin_line": 2709,
        "end_line": 2716,
        "comment": "",
        "child_ranges": [
            "(line 2710,col 5)-(line 2715,col 63)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testGoodExtends10()",
        "snippet": "  public void testGoodExtends10() throws Exception {\n    testTypes(\n        \"/** @constructor */ function Super() {}\" +\n        \"/** @constructor \\n * @extends {Super} */ function Sub() {}\" +\n        \"Sub.prototype = new Super();\" +\n        \"/** @return {Super} */ function foo() { return new Sub(); }\");\n  }\n",
        "begin_line": 2718,
        "end_line": 2724,
        "comment": "",
        "child_ranges": [
            "(line 2719,col 5)-(line 2723,col 71)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testGoodExtends11()",
        "snippet": "  public void testGoodExtends11() throws Exception {\n    testTypes(\n        \"/** @constructor */ function Super() {}\" +\n        \"/** @param {boolean} x */ Super.prototype.foo = function(x) {};\" +\n        \"/** @constructor \\n * @extends {Super} */ function Sub() {}\" +\n        \"Sub.prototype = new Super();\" +\n        \"(new Sub()).foo(0);\",\n        \"actual parameter 1 of Super.prototype.foo \" +\n        \"does not match formal parameter\\n\" +\n        \"found   : number\\n\" +\n        \"required: boolean\");\n  }\n",
        "begin_line": 2726,
        "end_line": 2737,
        "comment": "",
        "child_ranges": [
            "(line 2727,col 5)-(line 2736,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testBadExtends1()",
        "snippet": "  public void testBadExtends1() throws Exception {\n    testTypes(\"/** @constructor */function base() {}\\n\" +\n        \"/** @constructor\\n * @extends {not_base} */function derived() {}\\n\",\n        \"Bad type annotation. Unknown type not_base\");\n  }\n",
        "begin_line": 2739,
        "end_line": 2743,
        "comment": "",
        "child_ranges": [
            "(line 2740,col 5)-(line 2742,col 54)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testBadExtends2()",
        "snippet": "  public void testBadExtends2() throws Exception {\n    testTypes(\"/** @constructor */function base() {\\n\" +\n        \"/** @type {!Number}*/\\n\" +\n        \"this.baseMember = new Number(4);\\n\" +\n        \"}\\n\" +\n        \"/** @constructor\\n\" +\n        \"  * @extends {base} */function derived() {}\\n\" +\n        \"/** @param {!String} x*/\\n\" +\n        \"function foo(x){ }\\n\" +\n        \"/** @type {!derived}*/var y;\\n\" +\n        \"foo(y.baseMember);\\n\",\n        \"actual parameter 1 of foo does not match formal parameter\\n\" +\n        \"found   : Number\\n\" +\n        \"required: String\");\n  }\n",
        "begin_line": 2745,
        "end_line": 2759,
        "comment": "",
        "child_ranges": [
            "(line 2746,col 5)-(line 2758,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testBadExtends3()",
        "snippet": "  public void testBadExtends3() throws Exception {\n    testTypes(\"/** @extends {Object} */function base() {}\",\n        \"@extends used without @constructor or @interface for base\");\n  }\n",
        "begin_line": 2761,
        "end_line": 2764,
        "comment": "",
        "child_ranges": [
            "(line 2762,col 5)-(line 2763,col 69)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testLateExtends()",
        "snippet": "  public void testLateExtends() throws Exception {\n    testTypes(\n        CLOSURE_DEFS +\n        \"/** @constructor */ function Foo() {}\\n\" +\n        \"Foo.prototype.foo = function() {};\\n\" +\n        \"/** @constructor */function Bar() {}\\n\" +\n        \"goog.inherits(Foo, Bar);\\n\",\n        \"Missing @extends tag on type Foo\");\n  }\n",
        "begin_line": 2766,
        "end_line": 2774,
        "comment": "",
        "child_ranges": [
            "(line 2767,col 5)-(line 2773,col 44)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testSuperclassMatch()",
        "snippet": "  public void testSuperclassMatch() throws Exception {\n    compiler.getOptions().setCodingConvention(new GoogleCodingConvention());\n    testTypes(\"/** @constructor */ var Foo = function() {};\\n\" +\n        \"/** @constructor \\n @extends Foo */ var Bar = function() {};\\n\" +\n        \"Bar.inherits = function(x){};\" +\n        \"Bar.inherits(Foo);\\n\");\n  }\n",
        "begin_line": 2776,
        "end_line": 2782,
        "comment": "",
        "child_ranges": [
            "(line 2777,col 5)-(line 2777,col 76)",
            "(line 2778,col 5)-(line 2781,col 32)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testSuperclassMatchWithMixin()",
        "snippet": "  public void testSuperclassMatchWithMixin() throws Exception {\n    compiler.getOptions().setCodingConvention(new GoogleCodingConvention());\n    testTypes(\"/** @constructor */ var Foo = function() {};\\n\" +\n        \"/** @constructor */ var Baz = function() {};\\n\" +\n        \"/** @constructor \\n @extends Foo */ var Bar = function() {};\\n\" +\n        \"Bar.inherits = function(x){};\" +\n        \"Bar.mixin = function(y){};\" +\n        \"Bar.inherits(Foo);\\n\" +\n        \"Bar.mixin(Baz);\\n\");\n  }\n",
        "begin_line": 2784,
        "end_line": 2793,
        "comment": "",
        "child_ranges": [
            "(line 2785,col 5)-(line 2785,col 76)",
            "(line 2786,col 5)-(line 2792,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testSuperclassMismatch1()",
        "snippet": "  public void testSuperclassMismatch1() throws Exception {\n    compiler.getOptions().setCodingConvention(new GoogleCodingConvention());\n    testTypes(\"/** @constructor */ var Foo = function() {};\\n\" +\n        \"/** @constructor \\n @extends Object */ var Bar = function() {};\\n\" +\n        \"Bar.inherits = function(x){};\" +\n        \"Bar.inherits(Foo);\\n\",\n        \"Missing @extends tag on type Bar\");\n  }\n",
        "begin_line": 2795,
        "end_line": 2802,
        "comment": "",
        "child_ranges": [
            "(line 2796,col 5)-(line 2796,col 76)",
            "(line 2797,col 5)-(line 2801,col 44)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testSuperclassMismatch2()",
        "snippet": "  public void testSuperclassMismatch2() throws Exception {\n    compiler.getOptions().setCodingConvention(new GoogleCodingConvention());\n    testTypes(\"/** @constructor */ var Foo = function(){};\\n\" +\n        \"/** @constructor */ var Bar = function(){};\\n\" +\n        \"Bar.inherits = function(x){};\" +\n        \"Bar.inherits(Foo);\",\n        \"Missing @extends tag on type Bar\");\n  }\n",
        "begin_line": 2804,
        "end_line": 2811,
        "comment": "",
        "child_ranges": [
            "(line 2805,col 5)-(line 2805,col 76)",
            "(line 2806,col 5)-(line 2810,col 44)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testSuperClassDefinedAfterSubClass1()",
        "snippet": "  public void testSuperClassDefinedAfterSubClass1() throws Exception {\n    testTypes(\n        \"/** @constructor \\n * @extends {Base} */ function A() {}\" +\n        \"/** @constructor \\n * @extends {Base} */ function B() {}\" +\n        \"/** @constructor */ function Base() {}\" +\n        \"/** @param {A|B} x \\n * @return {B|A} */ \" +\n        \"function foo(x) { return x; }\");\n  }\n",
        "begin_line": 2813,
        "end_line": 2820,
        "comment": "",
        "child_ranges": [
            "(line 2814,col 5)-(line 2819,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testSuperClassDefinedAfterSubClass2()",
        "snippet": "  public void testSuperClassDefinedAfterSubClass2() throws Exception {\n    testTypes(\n        \"/** @constructor \\n * @extends {Base} */ function A() {}\" +\n        \"/** @constructor \\n * @extends {Base} */ function B() {}\" +\n        \"/** @param {A|B} x \\n * @return {B|A} */ \" +\n        \"function foo(x) { return x; }\" +\n        \"/** @constructor */ function Base() {}\");\n  }\n",
        "begin_line": 2822,
        "end_line": 2829,
        "comment": "",
        "child_ranges": [
            "(line 2823,col 5)-(line 2828,col 50)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testDirectPrototypeAssignment1()",
        "snippet": "  public void testDirectPrototypeAssignment1() throws Exception {\n    testTypes(\n        \"/** @constructor */ function Base() {}\" +\n        \"Base.prototype.foo = 3;\" +\n        \"/** @constructor \\n * @extends {Base} */ function A() {}\" +\n        \"A.prototype = new Base();\" +\n        \"/** @return {string} */ function foo() { return (new A).foo; }\",\n        \"inconsistent return type\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 2831,
        "end_line": 2841,
        "comment": "",
        "child_ranges": [
            "(line 2832,col 5)-(line 2840,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testDirectPrototypeAssignment2()",
        "snippet": "  public void testDirectPrototypeAssignment2() throws Exception {\n    // This ensures that we don't attach property 'foo' onto the Base\n    // instance object.\n    testTypes(\n        \"/** @constructor */ function Base() {}\" +\n        \"/** @constructor \\n * @extends {Base} */ function A() {}\" +\n        \"A.prototype = new Base();\" +\n        \"A.prototype.foo = 3;\" +\n        \"/** @return {string} */ function foo() { return (new Base).foo; }\");\n  }\n",
        "begin_line": 2843,
        "end_line": 2852,
        "comment": "",
        "child_ranges": [
            "(line 2846,col 5)-(line 2851,col 77)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testGoodImplements1()",
        "snippet": "  public void testGoodImplements1() throws Exception {\n    testTypes(\"/** @interface */function Disposable() {}\\n\" +\n        \"/** @implements {Disposable}\\n * @constructor */function f() {}\");\n  }\n",
        "begin_line": 2854,
        "end_line": 2857,
        "comment": "",
        "child_ranges": [
            "(line 2855,col 5)-(line 2856,col 75)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testGoodImplements2()",
        "snippet": "  public void testGoodImplements2() throws Exception {\n    testTypes(\"/** @interface */function Base1() {}\\n\" +\n        \"/** @interface */function Base2() {}\\n\" +\n        \"/** @constructor\\n\" +\n        \" * @implements {Base1}\\n\" +\n        \" * @implements {Base2}\\n\" +\n        \" */ function derived() {}\");\n  }\n",
        "begin_line": 2859,
        "end_line": 2866,
        "comment": "",
        "child_ranges": [
            "(line 2860,col 5)-(line 2865,col 37)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testBadImplements1()",
        "snippet": "  public void testBadImplements1() throws Exception {\n    testTypes(\"/** @interface */function Base1() {}\\n\" +\n        \"/** @interface */function Base2() {}\\n\" +\n        \"/** @constructor\\n\" +\n        \" * @implements {nonExistent}\\n\" +\n        \" * @implements {Base2}\\n\" +\n        \" */ function derived() {}\",\n        \"Bad type annotation. Unknown type nonExistent\");\n  }\n",
        "begin_line": 2868,
        "end_line": 2876,
        "comment": "",
        "child_ranges": [
            "(line 2869,col 5)-(line 2875,col 57)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testBadImplements2()",
        "snippet": "  public void testBadImplements2() throws Exception {\n    testTypes(\"/** @interface */function Disposable() {}\\n\" +\n        \"/** @implements {Disposable}\\n */function f() {}\",\n        \"@implements used without @constructor or @interface for f\");\n  }\n",
        "begin_line": 2878,
        "end_line": 2882,
        "comment": "",
        "child_ranges": [
            "(line 2879,col 5)-(line 2881,col 69)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testBadImplements3()",
        "snippet": "  public void testBadImplements3() throws Exception {\n    testTypes(\"/** @interface */function Disposable() {}\\n\" +\n        \"/** @implements {Disposable}\\n * @interface */function f() {}\",\n        \"f cannot implement this type; an interface can only extend, \" +\n        \"but not implement interfaces\");\n  }\n",
        "begin_line": 2884,
        "end_line": 2889,
        "comment": "",
        "child_ranges": [
            "(line 2885,col 5)-(line 2888,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testInterfaceExtends()",
        "snippet": "  public void testInterfaceExtends() throws Exception {\n    testTypes(\"/** @interface */function A() {}\\n\" +\n        \"/** @interface \\n * @extends {A} */function B() {}\\n\" +\n        \"/** @constructor\\n\" +\n        \" * @implements {B}\\n\" +\n        \" */ function derived() {}\");\n  }\n",
        "begin_line": 2891,
        "end_line": 2897,
        "comment": "",
        "child_ranges": [
            "(line 2892,col 5)-(line 2896,col 37)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testBadInterfaceExtends1()",
        "snippet": "  public void testBadInterfaceExtends1() throws Exception {\n    testTypes(\"/** @interface \\n * @extends {nonExistent} */function A() {}\",\n        \"Bad type annotation. Unknown type nonExistent\");\n  }\n",
        "begin_line": 2899,
        "end_line": 2902,
        "comment": "",
        "child_ranges": [
            "(line 2900,col 5)-(line 2901,col 57)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testBadInterfaceExtends2()",
        "snippet": "  public void testBadInterfaceExtends2() throws Exception {\n    testTypes(\"/** @constructor */function A() {}\\n\" +\n        \"/** @interface \\n * @extends {A} */function B() {}\",\n        \"B cannot extend this type; a constructor can only extend objects \" +\n        \"and an interface can only extend interfaces\");\n  }\n",
        "begin_line": 2904,
        "end_line": 2909,
        "comment": "",
        "child_ranges": [
            "(line 2905,col 5)-(line 2908,col 55)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testBadInterfaceExtends3()",
        "snippet": "  public void testBadInterfaceExtends3() throws Exception {\n    testTypes(\"/** @interface */function A() {}\\n\" +\n        \"/** @constructor \\n * @extends {A} */function B() {}\",\n        \"B cannot extend this type; a constructor can only extend objects \" +\n        \"and an interface can only extend interfaces\");\n  }\n",
        "begin_line": 2911,
        "end_line": 2916,
        "comment": "",
        "child_ranges": [
            "(line 2912,col 5)-(line 2915,col 55)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testBadInterfaceExtends4()",
        "snippet": "  public void testBadInterfaceExtends4() throws Exception {\n    // TODO(user): This should be detected as an error. Even if we enforce\n    // that A cannot be used in the assignment, we should still detect the\n    // inheritance chain as invalid.\n    testTypes(\"/** @interface */function A() {}\\n\" +\n        \"/** @constructor */function B() {}\\n\" +\n        \"B.prototype = A;\");\n  }\n",
        "begin_line": 2918,
        "end_line": 2925,
        "comment": "",
        "child_ranges": [
            "(line 2922,col 5)-(line 2924,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testBadInterfaceExtends5()",
        "snippet": "  public void testBadInterfaceExtends5() throws Exception {\n    // TODO(user): This should be detected as an error. Even if we enforce\n    // that A cannot be used in the assignment, we should still detect the\n    // inheritance chain as invalid.\n    testTypes(\"/** @constructor */function A() {}\\n\" +\n        \"/** @interface */function B() {}\\n\" +\n        \"B.prototype = A;\");\n  }\n",
        "begin_line": 2927,
        "end_line": 2934,
        "comment": "",
        "child_ranges": [
            "(line 2931,col 5)-(line 2933,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testBadImplementsAConstructor()",
        "snippet": "  public void testBadImplementsAConstructor() throws Exception {\n    testTypes(\"/** @constructor */function A() {}\\n\" +\n        \"/** @constructor \\n * @implements {A} */function B() {}\",\n        \"can only implement interfaces\");\n  }\n",
        "begin_line": 2936,
        "end_line": 2940,
        "comment": "",
        "child_ranges": [
            "(line 2937,col 5)-(line 2939,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testBadImplementsNonInterfaceType()",
        "snippet": "  public void testBadImplementsNonInterfaceType() throws Exception {\n    testTypes(\"/** @constructor \\n * @implements {Boolean} */function B() {}\",\n        \"can only implement interfaces\");\n  }\n",
        "begin_line": 2942,
        "end_line": 2945,
        "comment": "",
        "child_ranges": [
            "(line 2943,col 5)-(line 2944,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testBadImplementsNonObjectType()",
        "snippet": "  public void testBadImplementsNonObjectType() throws Exception {\n    testTypes(\"/** @constructor \\n * @implements {string} */function S() {}\",\n        \"can only implement interfaces\");\n  }\n",
        "begin_line": 2947,
        "end_line": 2950,
        "comment": "",
        "child_ranges": [
            "(line 2948,col 5)-(line 2949,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testInterfaceAssignment1()",
        "snippet": "  public void testInterfaceAssignment1() throws Exception {\n    testTypes(\"/** @interface */var I = function() {};\\n\" +\n        \"/** @constructor\\n@implements {I} */var T = function() {};\\n\" +\n        \"var t = new T();\\n\" +\n        \"/** @type {!I} */var i = t;\");\n  }\n",
        "begin_line": 2952,
        "end_line": 2957,
        "comment": "",
        "child_ranges": [
            "(line 2953,col 5)-(line 2956,col 39)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testInterfaceAssignment2()",
        "snippet": "  public void testInterfaceAssignment2() throws Exception {\n    testTypes(\"/** @interface */var I = function() {};\\n\" +\n        \"/** @constructor */var T = function() {};\\n\" +\n        \"var t = new T();\\n\" +\n        \"/** @type {!I} */var i = t;\",\n        \"initializing variable\\n\" +\n        \"found   : T\\n\" +\n        \"required: I\");\n  }\n",
        "begin_line": 2959,
        "end_line": 2967,
        "comment": "",
        "child_ranges": [
            "(line 2960,col 5)-(line 2966,col 23)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testInterfaceAssignment3()",
        "snippet": "  public void testInterfaceAssignment3() throws Exception {\n    testTypes(\"/** @interface */var I = function() {};\\n\" +\n        \"/** @constructor\\n@implements {I} */var T = function() {};\\n\" +\n        \"var t = new T();\\n\" +\n        \"/** @type {I|number} */var i = t;\");\n  }\n",
        "begin_line": 2969,
        "end_line": 2974,
        "comment": "",
        "child_ranges": [
            "(line 2970,col 5)-(line 2973,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testInterfaceAssignment4()",
        "snippet": "  public void testInterfaceAssignment4() throws Exception {\n    testTypes(\"/** @interface */var I1 = function() {};\\n\" +\n        \"/** @interface */var I2 = function() {};\\n\" +\n        \"/** @constructor\\n@implements {I1} */var T = function() {};\\n\" +\n        \"var t = new T();\\n\" +\n        \"/** @type {I1|I2} */var i = t;\");\n  }\n",
        "begin_line": 2976,
        "end_line": 2982,
        "comment": "",
        "child_ranges": [
            "(line 2977,col 5)-(line 2981,col 42)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testInterfaceAssignment5()",
        "snippet": "  public void testInterfaceAssignment5() throws Exception {\n    testTypes(\"/** @interface */var I1 = function() {};\\n\" +\n        \"/** @interface */var I2 = function() {};\\n\" +\n        \"/** @constructor\\n@implements {I1}\\n@implements {I2}*/\" +\n        \"var T = function() {};\\n\" +\n        \"var t = new T();\\n\" +\n        \"/** @type {I1} */var i1 = t;\\n\" +\n        \"/** @type {I2} */var i2 = t;\\n\");\n  }\n",
        "begin_line": 2984,
        "end_line": 2992,
        "comment": "",
        "child_ranges": [
            "(line 2985,col 5)-(line 2991,col 42)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testInterfaceAssignment6()",
        "snippet": "  public void testInterfaceAssignment6() throws Exception {\n    testTypes(\"/** @interface */var I1 = function() {};\\n\" +\n        \"/** @interface */var I2 = function() {};\\n\" +\n        \"/** @constructor\\n@implements {I1} */var T = function() {};\\n\" +\n        \"/** @type {!I1} */var i1 = new T();\\n\" +\n        \"/** @type {!I2} */var i2 = i1;\\n\",\n        \"initializing variable\\n\" +\n        \"found   : I1\\n\" +\n        \"required: I2\");\n  }\n",
        "begin_line": 2994,
        "end_line": 3003,
        "comment": "",
        "child_ranges": [
            "(line 2995,col 5)-(line 3002,col 24)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testInterfaceAssignment7()",
        "snippet": "  public void testInterfaceAssignment7() throws Exception {\n    testTypes(\"/** @interface */var I1 = function() {};\\n\" +\n        \"/** @interface\\n@extends {I1}*/var I2 = function() {};\\n\" +\n        \"/** @constructor\\n@implements {I2}*/var T = function() {};\\n\" +\n        \"var t = new T();\\n\" +\n        \"/** @type {I1} */var i1 = t;\\n\" +\n        \"/** @type {I2} */var i2 = t;\\n\" +\n        \"i1 = i2;\\n\");\n  }\n",
        "begin_line": 3005,
        "end_line": 3013,
        "comment": "",
        "child_ranges": [
            "(line 3006,col 5)-(line 3012,col 22)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testInterfaceAssignment8()",
        "snippet": "  public void testInterfaceAssignment8() throws Exception {\n    testTypes(\"/** @interface */var I = function() {};\\n\" +\n        \"/** @type {I} */var i;\\n\" +\n        \"/** @type {Object} */var o = i;\");\n  }\n",
        "begin_line": 3015,
        "end_line": 3019,
        "comment": "",
        "child_ranges": [
            "(line 3016,col 5)-(line 3018,col 43)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testInterfaceAssignment9()",
        "snippet": "  public void testInterfaceAssignment9() throws Exception {\n    testTypes(\"/** @interface */var I = function() {};\\n\" +\n        \"/** @return {I?} */function f() { return null; }\\n\" +\n        \"/** @type {!I} */var i = f();\\n\",\n        \"initializing variable\\n\" +\n        \"found   : (I|null|undefined)\\n\" +\n        \"required: I\");\n  }\n",
        "begin_line": 3021,
        "end_line": 3028,
        "comment": "",
        "child_ranges": [
            "(line 3022,col 5)-(line 3027,col 23)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testInterfaceAssignment10()",
        "snippet": "  public void testInterfaceAssignment10() throws Exception {\n    testTypes(\"/** @interface */var I1 = function() {};\\n\" +\n        \"/** @interface */var I2 = function() {};\\n\" +\n        \"/** @constructor\\n@implements {I2} */var T = function() {};\\n\" +\n        \"/** @return {!I1|!I2} */function f() { return new T(); }\\n\" +\n        \"/** @type {!I1} */var i1 = f();\\n\",\n        \"initializing variable\\n\" +\n        \"found   : (I1|I2)\\n\" +\n        \"required: I1\");\n  }\n",
        "begin_line": 3030,
        "end_line": 3039,
        "comment": "",
        "child_ranges": [
            "(line 3031,col 5)-(line 3038,col 24)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testInterfaceAssignment11()",
        "snippet": "  public void testInterfaceAssignment11() throws Exception {\n    testTypes(\"/** @interface */var I1 = function() {};\\n\" +\n        \"/** @interface */var I2 = function() {};\\n\" +\n        \"/** @constructor */var T = function() {};\\n\" +\n        \"/** @return {!I1|!I2|!T} */function f() { return new T(); }\\n\" +\n        \"/** @type {!I1} */var i1 = f();\\n\",\n        \"initializing variable\\n\" +\n        \"found   : (I1|I2|T)\\n\" +\n        \"required: I1\");\n  }\n",
        "begin_line": 3041,
        "end_line": 3050,
        "comment": "",
        "child_ranges": [
            "(line 3042,col 5)-(line 3049,col 24)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testInterfaceAssignment12()",
        "snippet": "  public void testInterfaceAssignment12() throws Exception {\n    testTypes(\"/** @interface */var I = function() {};\\n\" +\n              \"/** @constructor\\n@implements{I}*/var T1 = function() {};\\n\" +\n              \"/** @constructor\\n@extends {T1}*/var T2 = function() {};\\n\" +\n              \"/** @return {I} */function f() { return new T2(); }\");\n  }\n",
        "begin_line": 3052,
        "end_line": 3057,
        "comment": "",
        "child_ranges": [
            "(line 3053,col 5)-(line 3056,col 69)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testInterfaceAssignment13()",
        "snippet": "  public void testInterfaceAssignment13() throws Exception {\n    testTypes(\"/** @interface */var I = function() {};\\n\" +\n        \"/** @constructor\\n@implements {I}*/var T = function() {};\\n\" +\n        \"/** @constructor */function Super() {};\\n\" +\n        \"/** @return {I} */Super.prototype.foo = \" +\n        \"function() { return new T(); };\\n\" +\n        \"/** @constructor\\n@extends {Super} */function Sub() {}\\n\" +\n        \"/** @override\\n@return {T} */Sub.prototype.foo = \" +\n        \"function() { return new T(); };\\n\");\n  }\n",
        "begin_line": 3059,
        "end_line": 3068,
        "comment": "",
        "child_ranges": [
            "(line 3060,col 5)-(line 3067,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testGetprop1()",
        "snippet": "  public void testGetprop1() throws Exception {\n    testTypes(\"/** @return {void}*/function foo(){foo().bar;}\",\n        \"undefined has no properties\\n\" +\n        \"found   : undefined\\n\" +\n        \"required: Object\");\n  }\n",
        "begin_line": 3070,
        "end_line": 3075,
        "comment": "",
        "child_ranges": [
            "(line 3071,col 5)-(line 3074,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testArrayAccess1()",
        "snippet": "  public void testArrayAccess1() throws Exception {\n    testTypes(\"var a = []; var b = a['hi'];\");\n  }\n",
        "begin_line": 3077,
        "end_line": 3079,
        "comment": "",
        "child_ranges": [
            "(line 3078,col 5)-(line 3078,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testArrayAccess2()",
        "snippet": "  public void testArrayAccess2() throws Exception {\n    testTypes(\"var a = []; var b = a[[1,2]];\",\n        \"array access\\n\" +\n        \"found   : Array\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 3081,
        "end_line": 3086,
        "comment": "",
        "child_ranges": [
            "(line 3082,col 5)-(line 3085,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testArrayAccess3()",
        "snippet": "  public void testArrayAccess3() throws Exception {\n    testTypes(\"var bar = [];\" +\n        \"/** @return {void} */function baz(){};\" +\n        \"var foo = bar[baz()];\",\n        \"array access\\n\" +\n        \"found   : undefined\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 3088,
        "end_line": 3095,
        "comment": "",
        "child_ranges": [
            "(line 3089,col 5)-(line 3094,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testArrayAccess4()",
        "snippet": "  public void testArrayAccess4() throws Exception {\n    testTypes(\"/**@return {!Array}*/function foo(){};var bar = foo()[foo()];\",\n        \"array access\\n\" +\n        \"found   : Array\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 3097,
        "end_line": 3102,
        "comment": "",
        "child_ranges": [
            "(line 3098,col 5)-(line 3101,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testArrayAccess6()",
        "snippet": "  public void testArrayAccess6() throws Exception {\n    testTypes(\"var bar = null[1];\",\n        \"only arrays or objects can be accessed\\n\" +\n        \"found   : null\\n\" +\n        \"required: Object\");\n  }\n",
        "begin_line": 3104,
        "end_line": 3109,
        "comment": "",
        "child_ranges": [
            "(line 3105,col 5)-(line 3108,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testArrayAccess7()",
        "snippet": "  public void testArrayAccess7() throws Exception {\n    testTypes(\"var bar = void 0; bar[0];\",\n        \"only arrays or objects can be accessed\\n\" +\n        \"found   : undefined\\n\" +\n        \"required: Object\");\n  }\n",
        "begin_line": 3111,
        "end_line": 3116,
        "comment": "",
        "child_ranges": [
            "(line 3112,col 5)-(line 3115,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testArrayAccess8()",
        "snippet": "  public void testArrayAccess8() throws Exception {\n    // Verifies that we don't emit two warnings, because\n    // the var has been dereferenced after the first one.\n    testTypes(\"var bar = void 0; bar[0]; bar[1];\",\n        \"only arrays or objects can be accessed\\n\" +\n        \"found   : undefined\\n\" +\n        \"required: Object\");\n  }\n",
        "begin_line": 3118,
        "end_line": 3125,
        "comment": "",
        "child_ranges": [
            "(line 3121,col 5)-(line 3124,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testPropAccess()",
        "snippet": "  public void testPropAccess() throws Exception {\n    testTypes(\"/** @param {*} x */var f = function(x) {\\n\" +\n        \"var o = String(x);\\n\" +\n        \"if (typeof o['a'] != 'undefined') { return o['a']; }\\n\" +\n        \"return null;\\n\" +\n        \"};\");\n  }\n",
        "begin_line": 3127,
        "end_line": 3133,
        "comment": "",
        "child_ranges": [
            "(line 3128,col 5)-(line 3132,col 14)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testPropAccess2()",
        "snippet": "  public void testPropAccess2() throws Exception {\n    testTypes(\"var bar = void 0; bar.baz;\",\n        \"undefined has no properties\\n\" +\n        \"found   : undefined\\n\" +\n        \"required: Object\");\n  }\n",
        "begin_line": 3135,
        "end_line": 3140,
        "comment": "",
        "child_ranges": [
            "(line 3136,col 5)-(line 3139,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testPropAccess3()",
        "snippet": "  public void testPropAccess3() throws Exception {\n    // Verifies that we don't emit two warnings, because\n    // the var has been dereferenced after the first one.\n    testTypes(\"var bar = void 0; bar.baz; bar.bax;\",\n        \"undefined has no properties\\n\" +\n        \"found   : undefined\\n\" +\n        \"required: Object\");\n  }\n",
        "begin_line": 3142,
        "end_line": 3149,
        "comment": "",
        "child_ranges": [
            "(line 3145,col 5)-(line 3148,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testPropAccess4()",
        "snippet": "  public void testPropAccess4() throws Exception {\n    testTypes(\"/** @param {*} x */ function f(x) { return x['hi']; }\");\n  }\n",
        "begin_line": 3151,
        "end_line": 3153,
        "comment": "",
        "child_ranges": [
            "(line 3152,col 5)-(line 3152,col 71)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testSwitchCase1()",
        "snippet": "  public void testSwitchCase1() throws Exception {\n    testTypes(\"/**@type number*/var a;\" +\n        \"/**@type string*/var b;\" +\n        \"switch(a){case b:;}\",\n        \"case expression doesn't match switch\\n\" +\n        \"found   : string\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 3155,
        "end_line": 3162,
        "comment": "",
        "child_ranges": [
            "(line 3156,col 5)-(line 3161,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testSwitchCase2()",
        "snippet": "  public void testSwitchCase2() throws Exception {\n    testTypes(\"var a = null; switch (typeof a) { case 'foo': }\");\n  }\n",
        "begin_line": 3164,
        "end_line": 3166,
        "comment": "",
        "child_ranges": [
            "(line 3165,col 5)-(line 3165,col 65)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testVar1()",
        "snippet": "  public void testVar1() throws Exception {\n    TypeCheckResult p =\n        parseAndTypeCheckWithScope(\"/** @type {(string,null)} */var a = null\");\n\n    assertEquals(createUnionType(STRING_TYPE, NULL_TYPE),\n        p.scope.getVar(\"a\").getType());\n  }\n",
        "begin_line": 3168,
        "end_line": 3174,
        "comment": "",
        "child_ranges": [
            "(line 3169,col 5)-(line 3170,col 79)",
            "(line 3172,col 5)-(line 3173,col 39)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testVar2()",
        "snippet": "  public void testVar2() throws Exception {\n    testTypes(\"/** @type {Function} */ var a = function(){}\");\n  }\n",
        "begin_line": 3176,
        "end_line": 3178,
        "comment": "",
        "child_ranges": [
            "(line 3177,col 5)-(line 3177,col 62)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testVar3()",
        "snippet": "  public void testVar3() throws Exception {\n    TypeCheckResult p = parseAndTypeCheckWithScope(\"var a = 3;\");\n\n    assertEquals(NUMBER_TYPE, p.scope.getVar(\"a\").getType());\n  }\n",
        "begin_line": 3180,
        "end_line": 3184,
        "comment": "",
        "child_ranges": [
            "(line 3181,col 5)-(line 3181,col 65)",
            "(line 3183,col 5)-(line 3183,col 61)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testVar4()",
        "snippet": "  public void testVar4() throws Exception {\n    TypeCheckResult p = parseAndTypeCheckWithScope(\n        \"var a = 3; a = 'string';\");\n\n    assertEquals(createUnionType(STRING_TYPE, NUMBER_TYPE),\n        p.scope.getVar(\"a\").getType());\n  }\n",
        "begin_line": 3186,
        "end_line": 3192,
        "comment": "",
        "child_ranges": [
            "(line 3187,col 5)-(line 3188,col 36)",
            "(line 3190,col 5)-(line 3191,col 39)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testVar5()",
        "snippet": "  public void testVar5() throws Exception {\n    testTypes(\"var goog = {};\" +\n        \"/** @type string */goog.foo = 'hello';\" +\n        \"/** @type number */var a = goog.foo;\",\n        \"initializing variable\\n\" +\n        \"found   : string\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 3194,
        "end_line": 3201,
        "comment": "",
        "child_ranges": [
            "(line 3195,col 5)-(line 3200,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testVar6()",
        "snippet": "  public void testVar6() throws Exception {\n    testTypes(\n        \"function f() {\" +\n        \"  return function() {\" +\n        \"    /** @type {!Date} */\" +\n        \"    var a = 7;\" +\n        \"  };\" +\n        \"}\",\n        \"initializing variable\\n\" +\n        \"found   : number\\n\" +\n        \"required: Date\");\n  }\n",
        "begin_line": 3203,
        "end_line": 3214,
        "comment": "",
        "child_ranges": [
            "(line 3204,col 5)-(line 3213,col 26)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testVar7()",
        "snippet": "  public void testVar7() throws Exception {\n    testTypes(\"/** @type number */var a, b;\",\n        \"declaration of multiple variables with shared type information\");\n  }\n",
        "begin_line": 3216,
        "end_line": 3219,
        "comment": "",
        "child_ranges": [
            "(line 3217,col 5)-(line 3218,col 74)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testVar8()",
        "snippet": "  public void testVar8() throws Exception {\n    testTypes(\"var a, b;\");\n  }\n",
        "begin_line": 3221,
        "end_line": 3223,
        "comment": "",
        "child_ranges": [
            "(line 3222,col 5)-(line 3222,col 27)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testVar9()",
        "snippet": "  public void testVar9() throws Exception {\n    testTypes(\"/** @enum */var a;\",\n        \"enum initializer must be an object literal or an enum\");\n  }\n",
        "begin_line": 3225,
        "end_line": 3228,
        "comment": "",
        "child_ranges": [
            "(line 3226,col 5)-(line 3227,col 65)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testVar10()",
        "snippet": "  public void testVar10() throws Exception {\n    testTypes(\"/** @type !Number */var foo = 'abc';\",\n        \"initializing variable\\n\" +\n        \"found   : string\\n\" +\n        \"required: Number\");\n  }\n",
        "begin_line": 3230,
        "end_line": 3235,
        "comment": "",
        "child_ranges": [
            "(line 3231,col 5)-(line 3234,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testVar11()",
        "snippet": "  public void testVar11() throws Exception {\n    testTypes(\"var /** @type !Date */foo = 'abc';\",\n        \"initializing variable\\n\" +\n        \"found   : string\\n\" +\n        \"required: Date\");\n  }\n",
        "begin_line": 3237,
        "end_line": 3242,
        "comment": "",
        "child_ranges": [
            "(line 3238,col 5)-(line 3241,col 26)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testVar12()",
        "snippet": "  public void testVar12() throws Exception {\n    testTypes(\"var /** @type !Date */foo = 'abc', \" +\n        \"/** @type !RegExp */bar = 5;\",\n        new String[] {\n        \"initializing variable\\n\" +\n        \"found   : string\\n\" +\n        \"required: Date\",\n        \"initializing variable\\n\" +\n        \"found   : number\\n\" +\n        \"required: RegExp\"});\n  }\n",
        "begin_line": 3244,
        "end_line": 3254,
        "comment": "",
        "child_ranges": [
            "(line 3245,col 5)-(line 3253,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testVar13()",
        "snippet": "  public void testVar13() throws Exception {\n    // this caused an NPE\n    testTypes(\"var /** @type number */a,a;\");\n  }\n",
        "begin_line": 3256,
        "end_line": 3259,
        "comment": "",
        "child_ranges": [
            "(line 3258,col 5)-(line 3258,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testVar14()",
        "snippet": "  public void testVar14() throws Exception {\n    testTypes(\"/** @return {number} */ function f() { var x; return x; }\",\n        \"inconsistent return type\\n\" +\n        \"found   : undefined\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 3261,
        "end_line": 3266,
        "comment": "",
        "child_ranges": [
            "(line 3262,col 5)-(line 3265,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testVar15()",
        "snippet": "  public void testVar15() throws Exception {\n    testTypes(\"/** @return {number} */\" +\n        \"function f() { var x = x || {}; return x; }\",\n        \"inconsistent return type\\n\" +\n        \"found   : {}\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 3268,
        "end_line": 3274,
        "comment": "",
        "child_ranges": [
            "(line 3269,col 5)-(line 3273,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testAssign1()",
        "snippet": "  public void testAssign1() throws Exception {\n    testTypes(\"var goog = {};\" +\n        \"/** @type number */goog.foo = 'hello';\",\n        \"assignment to property foo of goog\\n\" +\n        \"found   : string\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 3276,
        "end_line": 3282,
        "comment": "",
        "child_ranges": [
            "(line 3277,col 5)-(line 3281,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testAssign2()",
        "snippet": "  public void testAssign2() throws Exception {\n    testTypes(\"var goog = {};\" +\n        \"/** @type number */goog.foo = 3;\" +\n        \"goog.foo = 'hello';\",\n        \"assignment to property foo of goog\\n\" +\n        \"found   : string\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 3284,
        "end_line": 3291,
        "comment": "",
        "child_ranges": [
            "(line 3285,col 5)-(line 3290,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testAssign3()",
        "snippet": "  public void testAssign3() throws Exception {\n    testTypes(\"var goog = {};\" +\n        \"/** @type number */goog.foo = 3;\" +\n        \"goog.foo = 4;\");\n  }\n",
        "begin_line": 3293,
        "end_line": 3297,
        "comment": "",
        "child_ranges": [
            "(line 3294,col 5)-(line 3296,col 25)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testAssign4()",
        "snippet": "  public void testAssign4() throws Exception {\n    testTypes(\"var goog = {};\" +\n        \"goog.foo = 3;\" +\n        \"goog.foo = 'hello';\");\n  }\n",
        "begin_line": 3299,
        "end_line": 3303,
        "comment": "",
        "child_ranges": [
            "(line 3300,col 5)-(line 3302,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testAssignInference()",
        "snippet": "  public void testAssignInference() throws Exception {\n    testTypes(\n        \"/**\" +\n        \" * @param {Array} x\" +\n        \" * @return {number}\" +\n        \" */\" +\n        \"function f(x) {\" +\n        \"  var y = null;\" +\n        \"  y = x[0];\" +\n        \"  if (y == null) { return 4; } else { return 6; }\" +\n        \"}\");\n  }\n",
        "begin_line": 3305,
        "end_line": 3316,
        "comment": "",
        "child_ranges": [
            "(line 3306,col 5)-(line 3315,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testOr1()",
        "snippet": "  public void testOr1() throws Exception {\n    testTypes(\"/** @type number */var a;\" +\n        \"/** @type number */var b;\" +\n        \"a + b || undefined;\");\n  }\n",
        "begin_line": 3318,
        "end_line": 3322,
        "comment": "",
        "child_ranges": [
            "(line 3319,col 5)-(line 3321,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testOr2()",
        "snippet": "  public void testOr2() throws Exception {\n    testTypes(\"/** @type number */var a;\" +\n        \"/** @type number */var b;\" +\n        \"/** @type number */var c = a + b || undefined;\",\n        \"initializing variable\\n\" +\n        \"found   : (number|undefined)\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 3324,
        "end_line": 3331,
        "comment": "",
        "child_ranges": [
            "(line 3325,col 5)-(line 3330,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testOr3()",
        "snippet": "  public void testOr3() throws Exception {\n    testTypes(\"/** @type {(number, undefined)} */var a;\" +\n        \"/** @type number */var c = a || 3;\");\n  }\n",
        "begin_line": 3333,
        "end_line": 3336,
        "comment": "",
        "child_ranges": [
            "(line 3334,col 5)-(line 3335,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testOr4()",
        "snippet": "  public void testOr4() throws Exception {\n     testTypes(\"/**@type {number} */var x;x=null || \\\"a\\\";\",\n         \"assignment\\n\" +\n         \"found   : string\\n\" +\n         \"required: number\");\n  }\n",
        "begin_line": 3343,
        "end_line": 3348,
        "comment": "\n   * Test that type inference continues with the right side,\n   * when no short-circuiting is possible.\n   * See bugid 1205387 for more details.\n   ",
        "child_ranges": [
            "(line 3344,col 6)-(line 3347,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testOr5()",
        "snippet": "  public void testOr5() throws Exception {\n     testTypes(\"/**@type {number} */var x;x=undefined || \\\"a\\\";\",\n         \"assignment\\n\" +\n         \"found   : string\\n\" +\n         \"required: number\");\n  }\n",
        "begin_line": 3353,
        "end_line": 3358,
        "comment": "\n   * @see #testOr4()\n   ",
        "child_ranges": [
            "(line 3354,col 6)-(line 3357,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testAnd1()",
        "snippet": "  public void testAnd1() throws Exception {\n    testTypes(\"/** @type number */var a;\" +\n        \"/** @type number */var b;\" +\n        \"a + b && undefined;\");\n  }\n",
        "begin_line": 3360,
        "end_line": 3364,
        "comment": "",
        "child_ranges": [
            "(line 3361,col 5)-(line 3363,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testAnd2()",
        "snippet": "  public void testAnd2() throws Exception {\n    testTypes(\"/** @type number */var a;\" +\n        \"/** @type number */var b;\" +\n        \"/** @type number */var c = a + b && undefined;\",\n        \"initializing variable\\n\" +\n        \"found   : (number|undefined)\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 3366,
        "end_line": 3373,
        "comment": "",
        "child_ranges": [
            "(line 3367,col 5)-(line 3372,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testAnd3()",
        "snippet": "  public void testAnd3() throws Exception {\n    testTypes(\"/** @type {(!Array, undefined)} */var a;\" +\n        \"/** @type number */var c = a && undefined;\",\n        \"initializing variable\\n\" +\n        \"found   : undefined\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 3375,
        "end_line": 3381,
        "comment": "",
        "child_ranges": [
            "(line 3376,col 5)-(line 3380,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testAnd4()",
        "snippet": "  public void testAnd4() throws Exception {\n    testTypes(\"/** @param {number} x */function f(x){};\\n\" +\n        \"/** @type null */var x; /** @type {number?} */var y;\\n\" +\n        \"if (x && y) { f(y) }\");\n  }\n",
        "begin_line": 3383,
        "end_line": 3387,
        "comment": "",
        "child_ranges": [
            "(line 3384,col 5)-(line 3386,col 32)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testAnd5()",
        "snippet": "  public void testAnd5() throws Exception {\n    testTypes(\"/** @param {number} x\\n@param {string} y*/function f(x,y){};\\n\" +\n        \"/** @type {number?} */var x; /** @type {string?} */var y;\\n\" +\n        \"if (x && y) { f(x, y) }\");\n  }\n",
        "begin_line": 3389,
        "end_line": 3393,
        "comment": "",
        "child_ranges": [
            "(line 3390,col 5)-(line 3392,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testAnd6()",
        "snippet": "  public void testAnd6() throws Exception {\n    testTypes(\"/** @param {number} x */function f(x){};\\n\" +\n        \"/** @type {number|undefined} */var x;\\n\" +\n        \"if (x && f(x)) { f(x) }\");\n  }\n",
        "begin_line": 3395,
        "end_line": 3399,
        "comment": "",
        "child_ranges": [
            "(line 3396,col 5)-(line 3398,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testAnd7()",
        "snippet": "  public void testAnd7() throws Exception {\n    // TODO(user): a deterministic warning should be generated for this\n    // case since x && x is always false. The implementation of this requires\n    // a more precise handling of a null value within a variable's type.\n    // Currently, a null value defaults to ? which passes every check.\n    testTypes(\"/** @type null */var x; if (x && x) {}\");\n  }\n",
        "begin_line": 3401,
        "end_line": 3407,
        "comment": "",
        "child_ranges": [
            "(line 3406,col 5)-(line 3406,col 56)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testHook()",
        "snippet": "  public void testHook() throws Exception {\n    testTypes(\"/**@return {void}*/function foo(){ var x=foo()?a:b; }\");\n  }\n",
        "begin_line": 3409,
        "end_line": 3411,
        "comment": "",
        "child_ranges": [
            "(line 3410,col 5)-(line 3410,col 71)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testHookRestrictsType1()",
        "snippet": "  public void testHookRestrictsType1() throws Exception {\n    testTypes(\"/** @return {(string,null)} */\" +\n        \"function f() { return null;}\" +\n        \"/** @type {(string,null)} */ var a = f();\" +\n        \"/** @type string */\" +\n        \"var b = a ? a : 'default';\");\n  }\n",
        "begin_line": 3413,
        "end_line": 3419,
        "comment": "",
        "child_ranges": [
            "(line 3414,col 5)-(line 3418,col 38)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testHookRestrictsType2()",
        "snippet": "  public void testHookRestrictsType2() throws Exception {\n    testTypes(\"/** @type {String} */\" +\n        \"var a = null;\" +\n        \"/** @type (null|undefined) */\" +\n        \"var b = a ? null : a;\");\n  }\n",
        "begin_line": 3421,
        "end_line": 3426,
        "comment": "",
        "child_ranges": [
            "(line 3422,col 5)-(line 3425,col 33)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testHookRestrictsType3()",
        "snippet": "  public void testHookRestrictsType3() throws Exception {\n    testTypes(\"/** @type {String} */\" +\n        \"var a;\" +\n        \"/** @type (null|undefined) */\" +\n        \"var b = (!a) ? a : null;\");\n  }\n",
        "begin_line": 3428,
        "end_line": 3433,
        "comment": "",
        "child_ranges": [
            "(line 3429,col 5)-(line 3432,col 36)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testHookRestrictsType4()",
        "snippet": "  public void testHookRestrictsType4() throws Exception {\n    testTypes(\"/** @type {(boolean,undefined)} */\" +\n        \"var a;\" +\n        \"/** @type boolean */\" +\n        \"var b = a != null ? a : true;\");\n  }\n",
        "begin_line": 3435,
        "end_line": 3440,
        "comment": "",
        "child_ranges": [
            "(line 3436,col 5)-(line 3439,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testHookRestrictsType5()",
        "snippet": "  public void testHookRestrictsType5() throws Exception {\n    testTypes(\"/** @type {(boolean,undefined)} */\" +\n        \"var a;\" +\n        \"/** @type {(undefined)} */\" +\n        \"var b = a == null ? a : undefined;\");\n  }\n",
        "begin_line": 3442,
        "end_line": 3447,
        "comment": "",
        "child_ranges": [
            "(line 3443,col 5)-(line 3446,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testHookRestrictsType6()",
        "snippet": "  public void testHookRestrictsType6() throws Exception {\n    testTypes(\"/** @type {(number,null,undefined)} */\" +\n        \"var a;\" +\n        \"/** @type {number} */\" +\n        \"var b = a == null ? 5 : a;\");\n  }\n",
        "begin_line": 3449,
        "end_line": 3454,
        "comment": "",
        "child_ranges": [
            "(line 3450,col 5)-(line 3453,col 38)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testHookRestrictsType7()",
        "snippet": "  public void testHookRestrictsType7() throws Exception {\n    testTypes(\"/** @type {(number,null,undefined)} */\" +\n        \"var a;\" +\n        \"/** @type {number} */\" +\n        \"var b = a == undefined ? 5 : a;\");\n  }\n",
        "begin_line": 3456,
        "end_line": 3461,
        "comment": "",
        "child_ranges": [
            "(line 3457,col 5)-(line 3460,col 43)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testWhileRestrictsType1()",
        "snippet": "  public void testWhileRestrictsType1() throws Exception {\n    testTypes(\"/** @param {null} x */ function g(x) {}\" +\n        \"/** @param {number?} x */\\n\" +\n        \"function f(x) {\\n\" +\n        \"while (x) {\\n\" +\n        \"if (g(x)) { x = 1; }\\n\" +\n        \"x = x-1;\\n}\\n}\",\n        \"actual parameter 1 of g does not match formal parameter\\n\" +\n        \"found   : number\\n\" +\n        \"required: null\");\n  }\n",
        "begin_line": 3463,
        "end_line": 3473,
        "comment": "",
        "child_ranges": [
            "(line 3464,col 5)-(line 3472,col 26)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testWhileRestrictsType2()",
        "snippet": "  public void testWhileRestrictsType2() throws Exception {\n    testTypes(\"/** @param {number?} x\\n@return {number}*/\\n\" +\n        \"function f(x) {\\n/** @type {number} */var y = 0;\" +\n        \"while (x) {\\n\" +\n        \"y = x;\\n\" +\n        \"x = x-1;\\n}\\n\" +\n        \"return y;}\");\n  }\n",
        "begin_line": 3475,
        "end_line": 3482,
        "comment": "",
        "child_ranges": [
            "(line 3476,col 5)-(line 3481,col 22)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testHigherOrderFunctions1()",
        "snippet": "  public void testHigherOrderFunctions1() throws Exception {\n    testTypes(\n        \"/** @type {function(number)} */var f;\" +\n        \"f(true);\",\n        \"actual parameter 1 of f does not match formal parameter\\n\" +\n        \"found   : boolean\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 3484,
        "end_line": 3491,
        "comment": "",
        "child_ranges": [
            "(line 3485,col 5)-(line 3490,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testHigherOrderFunctions2()",
        "snippet": "  public void testHigherOrderFunctions2() throws Exception {\n    testTypes(\n        \"/** @type {function():!Date} */var f;\" +\n        \"/** @type boolean */var a = f();\",\n        \"initializing variable\\n\" +\n        \"found   : Date\\n\" +\n        \"required: boolean\");\n  }\n",
        "begin_line": 3493,
        "end_line": 3500,
        "comment": "",
        "child_ranges": [
            "(line 3494,col 5)-(line 3499,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testHigherOrderFunctions3()",
        "snippet": "  public void testHigherOrderFunctions3() throws Exception {\n    testTypes(\n        \"/** @type {function(this:Error):Date} */var f; new f\",\n        \"cannot instantiate non-constructor\");\n  }\n",
        "begin_line": 3502,
        "end_line": 3506,
        "comment": "",
        "child_ranges": [
            "(line 3503,col 5)-(line 3505,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testHigherOrderFunctions4()",
        "snippet": "  public void testHigherOrderFunctions4() throws Exception {\n    testTypes(\n        \"/** @type {function(this:Error,...[number]):Date} */var f; new f\",\n        \"cannot instantiate non-constructor\");\n  }\n",
        "begin_line": 3508,
        "end_line": 3512,
        "comment": "",
        "child_ranges": [
            "(line 3509,col 5)-(line 3511,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testConstructorAlias1()",
        "snippet": "  public void testConstructorAlias1() throws Exception {\n    testTypes(\n        \"/** @constructor */ var Foo = function() {};\" +\n        \"/** @type {number} */ Foo.prototype.bar = 3;\" +\n        \"/** @constructor */ var FooAlias = Foo;\" +\n        \"/** @return {string} */ function foo() { \" +\n        \"  return (new FooAlias()).bar; }\",\n        \"inconsistent return type\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 3514,
        "end_line": 3524,
        "comment": "",
        "child_ranges": [
            "(line 3515,col 5)-(line 3523,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testConstructorAlias2()",
        "snippet": "  public void testConstructorAlias2() throws Exception {\n    testTypes(\n        \"/** @constructor */ var Foo = function() {};\" +\n        \"/** @constructor */ var FooAlias = Foo;\" +\n        \"/** @type {number} */ FooAlias.prototype.bar = 3;\" +\n        \"/** @return {string} */ function foo() { \" +\n        \"  return (new Foo()).bar; }\",\n        \"inconsistent return type\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 3526,
        "end_line": 3536,
        "comment": "",
        "child_ranges": [
            "(line 3527,col 5)-(line 3535,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testConstructorAlias3()",
        "snippet": "  public void testConstructorAlias3() throws Exception {\n    testTypes(\n        \"/** @constructor */ var Foo = function() {};\" +\n        \"/** @type {number} */ Foo.prototype.bar = 3;\" +\n        \"/** @constructor */ var FooAlias = Foo;\" +\n        \"/** @return {string} */ function foo() { \" +\n        \"  return (new FooAlias()).bar; }\",\n        \"inconsistent return type\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 3538,
        "end_line": 3548,
        "comment": "",
        "child_ranges": [
            "(line 3539,col 5)-(line 3547,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testConstructorAlias4()",
        "snippet": "  public void testConstructorAlias4() throws Exception {\n    testTypes(\n        \"/** @constructor */ var Foo = function() {};\" +\n        \"var FooAlias = Foo;\" +\n        \"/** @type {number} */ FooAlias.prototype.bar = 3;\" +\n        \"/** @return {string} */ function foo() { \" +\n        \"  return (new Foo()).bar; }\",\n        \"inconsistent return type\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 3550,
        "end_line": 3560,
        "comment": "",
        "child_ranges": [
            "(line 3551,col 5)-(line 3559,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testConstructorAlias5()",
        "snippet": "  public void testConstructorAlias5() throws Exception {\n    testTypes(\n        \"/** @constructor */ var Foo = function() {};\" +\n        \"/** @constructor */ var FooAlias = Foo;\" +\n        \"/** @return {FooAlias} */ function foo() { \" +\n        \"  return new Foo(); }\");\n  }\n",
        "begin_line": 3562,
        "end_line": 3568,
        "comment": "",
        "child_ranges": [
            "(line 3563,col 5)-(line 3567,col 33)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testConstructorAlias6()",
        "snippet": "  public void testConstructorAlias6() throws Exception {\n    testTypes(\n        \"/** @constructor */ var Foo = function() {};\" +\n        \"/** @constructor */ var FooAlias = Foo;\" +\n        \"/** @return {Foo} */ function foo() { \" +\n        \"  return new FooAlias(); }\");\n  }\n",
        "begin_line": 3570,
        "end_line": 3576,
        "comment": "",
        "child_ranges": [
            "(line 3571,col 5)-(line 3575,col 38)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testConstructorAlias7()",
        "snippet": "  public void testConstructorAlias7() throws Exception {\n    testTypes(\n        \"var goog = {};\" +\n        \"/** @constructor */ goog.Foo = function() {};\" +\n        \"/** @constructor */ goog.FooAlias = goog.Foo;\" +\n        \"/** @return {number} */ function foo() { \" +\n        \"  return new goog.FooAlias(); }\",\n        \"inconsistent return type\\n\" +\n        \"found   : goog.Foo\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 3578,
        "end_line": 3588,
        "comment": "",
        "child_ranges": [
            "(line 3579,col 5)-(line 3587,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testConstructorAlias8()",
        "snippet": "  public void testConstructorAlias8() throws Exception {\n    testTypes(\n        \"var goog = {};\" +\n        \"/**\\n * @param {number} x \\n * @constructor */ \" +\n        \"goog.Foo = function(x) {};\" +\n        \"/**\\n * @param {number} x \\n * @constructor */ \" +\n        \"goog.FooAlias = goog.Foo;\" +\n        \"/** @return {number} */ function foo() { \" +\n        \"  return new goog.FooAlias(1); }\",\n        \"inconsistent return type\\n\" +\n        \"found   : goog.Foo\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 3590,
        "end_line": 3602,
        "comment": "",
        "child_ranges": [
            "(line 3591,col 5)-(line 3601,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testConstructorAlias9()",
        "snippet": "  public void testConstructorAlias9() throws Exception {\n    testTypes(\n        \"var goog = {};\" +\n        \"/**\\n * @param {number} x \\n * @constructor */ \" +\n        \"goog.Foo = function(x) {};\" +\n        \"/** @constructor */ goog.FooAlias = goog.Foo;\" +\n        \"/** @return {number} */ function foo() { \" +\n        \"  return new goog.FooAlias(1); }\",\n        \"inconsistent return type\\n\" +\n        \"found   : goog.Foo\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 3604,
        "end_line": 3615,
        "comment": "",
        "child_ranges": [
            "(line 3605,col 5)-(line 3614,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testConstructorAlias10()",
        "snippet": "  public void testConstructorAlias10() throws Exception {\n    testTypes(\n        \"/**\\n * @param {number} x \\n * @constructor */ \" +\n        \"var Foo = function(x) {};\" +\n        \"/** @constructor */ var FooAlias = Foo;\" +\n        \"/** @return {number} */ function foo() { \" +\n        \"  return new FooAlias(1); }\",\n        \"inconsistent return type\\n\" +\n        \"found   : Foo\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 3617,
        "end_line": 3627,
        "comment": "",
        "child_ranges": [
            "(line 3618,col 5)-(line 3626,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testClosure1()",
        "snippet": "  public void testClosure1() throws Exception {\n    testClosureTypes(\n        CLOSURE_DEFS +\n        \"/** @type {string|undefined} */var a;\" +\n        \"/** @type string */\" +\n        \"var b = goog.isDef(a) ? a : 'default';\",\n        null);\n  }\n",
        "begin_line": 3629,
        "end_line": 3636,
        "comment": "",
        "child_ranges": [
            "(line 3630,col 5)-(line 3635,col 14)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testClosure2()",
        "snippet": "  public void testClosure2() throws Exception {\n    testClosureTypes(\n        CLOSURE_DEFS +\n        \"/** @type {string|null} */var a;\" +\n        \"/** @type string */\" +\n        \"var b = goog.isNull(a) ? 'default' : a;\",\n        null);\n  }\n",
        "begin_line": 3638,
        "end_line": 3645,
        "comment": "",
        "child_ranges": [
            "(line 3639,col 5)-(line 3644,col 14)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testClosure3()",
        "snippet": "  public void testClosure3() throws Exception {\n    testClosureTypes(\n        CLOSURE_DEFS +\n        \"/** @type {string|null|undefined} */var a;\" +\n        \"/** @type string */\" +\n        \"var b = goog.isDefAndNotNull(a) ? a : 'default';\",\n        null);\n  }\n",
        "begin_line": 3647,
        "end_line": 3654,
        "comment": "",
        "child_ranges": [
            "(line 3648,col 5)-(line 3653,col 14)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testClosure4()",
        "snippet": "  public void testClosure4() throws Exception {\n    testClosureTypes(\n        CLOSURE_DEFS +\n        \"/** @type {string|undefined} */var a;\" +\n        \"/** @type string */\" +\n        \"var b = !goog.isDef(a) ? 'default' : a;\",\n        null);\n  }\n",
        "begin_line": 3656,
        "end_line": 3663,
        "comment": "",
        "child_ranges": [
            "(line 3657,col 5)-(line 3662,col 14)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testClosure5()",
        "snippet": "  public void testClosure5() throws Exception {\n    testClosureTypes(\n        CLOSURE_DEFS +\n        \"/** @type {string|null} */var a;\" +\n        \"/** @type string */\" +\n        \"var b = !goog.isNull(a) ? a : 'default';\",\n        null);\n  }\n",
        "begin_line": 3665,
        "end_line": 3672,
        "comment": "",
        "child_ranges": [
            "(line 3666,col 5)-(line 3671,col 14)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testClosure6()",
        "snippet": "  public void testClosure6() throws Exception {\n    testClosureTypes(\n        CLOSURE_DEFS +\n        \"/** @type {string|null|undefined} */var a;\" +\n        \"/** @type string */\" +\n        \"var b = !goog.isDefAndNotNull(a) ? 'default' : a;\",\n        null);\n  }\n",
        "begin_line": 3674,
        "end_line": 3681,
        "comment": "",
        "child_ranges": [
            "(line 3675,col 5)-(line 3680,col 14)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testReturn1()",
        "snippet": "  public void testReturn1() throws Exception {\n    testTypes(\"/**@return {void}*/function foo(){ return 3; }\",\n        \"inconsistent return type\\n\" +\n        \"found   : number\\n\" +\n        \"required: undefined\");\n  }\n",
        "begin_line": 3683,
        "end_line": 3688,
        "comment": "",
        "child_ranges": [
            "(line 3684,col 5)-(line 3687,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testReturn2()",
        "snippet": "  public void testReturn2() throws Exception {\n    testTypes(\"/**@return {!Number}*/function foo(){ return; }\",\n        \"inconsistent return type\\n\" +\n        \"found   : undefined\\n\" +\n        \"required: Number\");\n  }\n",
        "begin_line": 3690,
        "end_line": 3695,
        "comment": "",
        "child_ranges": [
            "(line 3691,col 5)-(line 3694,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testReturn3()",
        "snippet": "  public void testReturn3() throws Exception {\n    testTypes(\"/**@return {!Number}*/function foo(){ return 'abc'; }\",\n        \"inconsistent return type\\n\" +\n        \"found   : string\\n\" +\n        \"required: Number\");\n  }\n",
        "begin_line": 3697,
        "end_line": 3702,
        "comment": "",
        "child_ranges": [
            "(line 3698,col 5)-(line 3701,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testReturn4()",
        "snippet": "  public void testReturn4() throws Exception {\n    testTypes(\"/**@return {!Number}\\n*/\\n function a(){return new Array();}\",\n        \"inconsistent return type\\n\" +\n        \"found   : Array\\n\" +\n        \"required: Number\");\n  }\n",
        "begin_line": 3704,
        "end_line": 3709,
        "comment": "",
        "child_ranges": [
            "(line 3705,col 5)-(line 3708,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testReturn5()",
        "snippet": "  public void testReturn5() throws Exception {\n    testTypes(\"/** @param {number} n\\n\" +\n        \"@constructor */function n(n){return};\");\n  }\n",
        "begin_line": 3711,
        "end_line": 3714,
        "comment": "",
        "child_ranges": [
            "(line 3712,col 5)-(line 3713,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testReturn6()",
        "snippet": "  public void testReturn6() throws Exception {\n    testTypes(\n        \"/** @param {number} opt_a\\n@return {string} */\" +\n        \"function a(opt_a) { return opt_a }\",\n        \"inconsistent return type\\n\" +\n        \"found   : (number|undefined)\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 3716,
        "end_line": 3723,
        "comment": "",
        "child_ranges": [
            "(line 3717,col 5)-(line 3722,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testReturn7()",
        "snippet": "  public void testReturn7() throws Exception {\n    testTypes(\"/** @constructor */var A = function() {};\\n\" +\n        \"/** @constructor */var B = function() {};\\n\" +\n        \"/** @return {!B} */A.f = function() { return 1; };\",\n        \"inconsistent return type\\n\" +\n        \"found   : number\\n\" +\n        \"required: B\");\n  }\n",
        "begin_line": 3725,
        "end_line": 3732,
        "comment": "",
        "child_ranges": [
            "(line 3726,col 5)-(line 3731,col 23)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testReturn8()",
        "snippet": "  public void testReturn8() throws Exception {\n    testTypes(\"/** @constructor */var A = function() {};\\n\" +\n        \"/** @constructor */var B = function() {};\\n\" +\n        \"/** @return {!B} */A.prototype.f = function() { return 1; };\",\n        \"inconsistent return type\\n\" +\n        \"found   : number\\n\" +\n        \"required: B\");\n  }\n",
        "begin_line": 3734,
        "end_line": 3741,
        "comment": "",
        "child_ranges": [
            "(line 3735,col 5)-(line 3740,col 23)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testThis1()",
        "snippet": "  public void testThis1() throws Exception {\n    testTypes(\"var goog = {};\" +\n        \"/** @constructor */goog.A = function(){};\" +\n        \"/** @return {number} */goog.A.prototype.n = \" +\n        \"  function() { return this };\",\n        \"inconsistent return type\\n\" +\n        \"found   : goog.A\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 3743,
        "end_line": 3751,
        "comment": "",
        "child_ranges": [
            "(line 3744,col 5)-(line 3750,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testThis2()",
        "snippet": "  public void testThis2() throws Exception {\n    testTypes(\"var goog = {};\" +\n        \"/** @constructor */goog.A = function(){\" +\n        \"  this.foo = null;\" +\n        \"};\" +\n        \"/** @return {number} */\" +\n        \"goog.A.prototype.n = function() { return this.foo };\",\n        \"inconsistent return type\\n\" +\n        \"found   : null\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 3753,
        "end_line": 3763,
        "comment": "",
        "child_ranges": [
            "(line 3754,col 5)-(line 3762,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testThis3()",
        "snippet": "  public void testThis3() throws Exception {\n    testTypes(\"var goog = {};\" +\n        \"/** @constructor */goog.A = function(){\" +\n        \"  this.foo = null;\" +\n        \"  this.foo = 5;\" +\n        \"};\");\n  }\n",
        "begin_line": 3765,
        "end_line": 3771,
        "comment": "",
        "child_ranges": [
            "(line 3766,col 5)-(line 3770,col 14)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testThis4()",
        "snippet": "  public void testThis4() throws Exception {\n    testTypes(\"var goog = {};\" +\n        \"/** @constructor */goog.A = function(){\" +\n        \"  /** @type {string?} */this.foo = null;\" +\n        \"};\" +\n        \"/** @return {number} */goog.A.prototype.n = function() {\" +\n        \"  return this.foo };\",\n        \"inconsistent return type\\n\" +\n        \"found   : (null|string|undefined)\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 3773,
        "end_line": 3783,
        "comment": "",
        "child_ranges": [
            "(line 3774,col 5)-(line 3782,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testThis5()",
        "snippet": "  public void testThis5() throws Exception {\n    testTypes(\"/** @this Date\\n@return {number}*/function h() { return this }\",\n        \"inconsistent return type\\n\" +\n        \"found   : Date\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 3785,
        "end_line": 3790,
        "comment": "",
        "child_ranges": [
            "(line 3786,col 5)-(line 3789,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testThis6()",
        "snippet": "  public void testThis6() throws Exception {\n    testTypes(\"var goog = {};\" +\n        \"/** @constructor\\n@return {!Date} */\" +\n        \"goog.A = function(){ return this };\",\n        \"inconsistent return type\\n\" +\n        \"found   : goog.A\\n\" +\n        \"required: Date\");\n  }\n",
        "begin_line": 3792,
        "end_line": 3799,
        "comment": "",
        "child_ranges": [
            "(line 3793,col 5)-(line 3798,col 26)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testThis7()",
        "snippet": "  public void testThis7() throws Exception {\n    testTypes(\"/** @constructor */function A(){};\" +\n        \"/** @return {number} */A.prototype.n = function() { return this };\",\n        \"inconsistent return type\\n\" +\n        \"found   : A\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 3801,
        "end_line": 3807,
        "comment": "",
        "child_ranges": [
            "(line 3802,col 5)-(line 3806,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testThis8()",
        "snippet": "  public void testThis8() throws Exception {\n    testTypes(\"/** @constructor */function A(){\" +\n        \"  /** @type {string?} */this.foo = null;\" +\n        \"};\" +\n        \"/** @return {number} */A.prototype.n = function() {\" +\n        \"  return this.foo };\",\n        \"inconsistent return type\\n\" +\n        \"found   : (null|string|undefined)\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 3809,
        "end_line": 3818,
        "comment": "",
        "child_ranges": [
            "(line 3810,col 5)-(line 3817,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testThis9()",
        "snippet": "  public void testThis9() throws Exception {\n    // In A.bar, the type of {@code this} is unknown.\n    testTypes(\"/** @constructor */function A(){};\" +\n        \"A.prototype.foo = 3;\" +\n        \"/** @return {string} */ A.bar = function() { return this.foo; };\");\n  }\n",
        "begin_line": 3820,
        "end_line": 3825,
        "comment": "",
        "child_ranges": [
            "(line 3822,col 5)-(line 3824,col 76)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testThis10()",
        "snippet": "  public void testThis10() throws Exception {\n    // In A.bar, the type of {@code this} is inferred from the @this tag.\n    testTypes(\"/** @constructor */function A(){};\" +\n        \"A.prototype.foo = 3;\" +\n        \"/** @this {A}\\n@return {string} */\" +\n        \"A.bar = function() { return this.foo; };\",\n        \"inconsistent return type\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 3827,
        "end_line": 3836,
        "comment": "",
        "child_ranges": [
            "(line 3829,col 5)-(line 3835,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testGlobalThis1()",
        "snippet": "  public void testGlobalThis1() throws Exception {\n    testTypes(\"/** @constructor */ function Window() {}\" +\n        \"/** @param {string} msg */ \" +\n        \"Window.prototype.alert = function(msg) {};\" +\n        \"this.alert(3);\",\n        \"actual parameter 1 of Window.prototype.alert \" +\n        \"does not match formal parameter\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 3838,
        "end_line": 3847,
        "comment": "",
        "child_ranges": [
            "(line 3839,col 5)-(line 3846,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testGlobalThis2()",
        "snippet": "  public void testGlobalThis2() throws Exception {\n    testTypes(\"/** @constructor */ function Bindow() {}\" +\n        \"/** @param {string} msg */ \" +\n        \"Bindow.prototype.alert = function(msg) {};\" +\n        \"this.alert = 3;\" +\n        \"(new Bindow()).alert(this.alert)\");\n  }\n",
        "begin_line": 3849,
        "end_line": 3855,
        "comment": "",
        "child_ranges": [
            "(line 3850,col 5)-(line 3854,col 44)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testGlobalThis3()",
        "snippet": "  public void testGlobalThis3() throws Exception {\n    testTypes(\n        \"/** @param {string} msg */ \" +\n        \"function alert(msg) {};\" +\n        \"this.alert(3);\",\n        \"actual parameter 1 of global this.alert \" +\n        \"does not match formal parameter\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 3857,
        "end_line": 3866,
        "comment": "",
        "child_ranges": [
            "(line 3858,col 5)-(line 3865,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testGlobalThis4()",
        "snippet": "  public void testGlobalThis4() throws Exception {\n    testTypes(\n        \"/** @param {string} msg */ \" +\n        \"var alert = function(msg) {};\" +\n        \"this.alert(3);\",\n        \"actual parameter 1 of global this.alert \" +\n        \"does not match formal parameter\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 3868,
        "end_line": 3877,
        "comment": "",
        "child_ranges": [
            "(line 3869,col 5)-(line 3876,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testGlobalThis5()",
        "snippet": "  public void testGlobalThis5() throws Exception {\n    testTypes(\n        \"function f() {\" +\n        \"  /** @param {string} msg */ \" +\n        \"  var alert = function(msg) {};\" +\n        \"}\" +\n        \"this.alert(3);\",\n        \"Property alert never defined on global this\");\n  }\n",
        "begin_line": 3879,
        "end_line": 3887,
        "comment": "",
        "child_ranges": [
            "(line 3880,col 5)-(line 3886,col 55)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testGlobalThis6()",
        "snippet": "  public void testGlobalThis6() throws Exception {\n    testTypes(\n        \"/** @param {string} msg */ \" +\n        \"var alert = function(msg) {};\" +\n        \"var x = 3;\" +\n        \"x = 'msg';\" +\n        \"this.alert(this.x);\");\n  }\n",
        "begin_line": 3889,
        "end_line": 3896,
        "comment": "",
        "child_ranges": [
            "(line 3890,col 5)-(line 3895,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testControlFlowRestrictsType1a()",
        "snippet": "  public void testControlFlowRestrictsType1a() throws Exception {\n    testTypes(\"/** @return {String?} */ function f() { return null; }\\n\" +\n        \"/** @type {String?} */ var a = f();\\n\" +\n        \"/** @type String */ var b = new String('foo');\\n\" +\n        \"/** @type (null|undefined) */ var c = null;\\n\" +\n        \"if (a) {\\n\" +\n        \"  b = a;\\n\" +\n        \"} else {\\n\" +\n        \"  c = a;\\n\" +\n        \"}\");\n  }\n",
        "begin_line": 3898,
        "end_line": 3908,
        "comment": "",
        "child_ranges": [
            "(line 3899,col 5)-(line 3907,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testControlFlowRestrictsType1b()",
        "snippet": "  public void testControlFlowRestrictsType1b() throws Exception {\n    testTypes(\"/** @return {!String|null} */ function f() { return null; }\\n\" +\n        \"/** @type {!String|null} */ var a = f();\\n\" +\n        \"/** @type String */ var b = new String('foo');\\n\" +\n        \"/** @type (null) */ var c = null;\\n\" +\n        \"if (a) {\\n\" +\n        \"  b = a;\\n\" +\n        \"} else {\\n\" +\n        \"  c = a;\\n\" +\n        \"}\");\n  }\n",
        "begin_line": 3910,
        "end_line": 3920,
        "comment": "",
        "child_ranges": [
            "(line 3911,col 5)-(line 3919,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testControlFlowRestrictsType1c()",
        "snippet": "  public void testControlFlowRestrictsType1c() throws Exception {\n    testTypes(\"/** @return {!String|undefined} */\\n\" +\n        \"function f() { return undefined; }\\n\" +\n        \"/** @type {!String|undefined} */ var a = f();\\n\" +\n        \"/** @type String */ var b = new String('foo');\\n\" +\n        \"/** @type undefined */ var c = undefined;\\n\" +\n        \"if (a) {\\n\" +\n        \"  b = a;\\n\" +\n        \"} else {\\n\" +\n        \"  c = a;\\n\" +\n        \"}\");\n  }\n",
        "begin_line": 3922,
        "end_line": 3933,
        "comment": "",
        "child_ranges": [
            "(line 3923,col 5)-(line 3932,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testControlFlowRestrictsType2()",
        "snippet": "  public void testControlFlowRestrictsType2() throws Exception {\n    testTypes(\"/** @return {(string,null)} */ function f() { return null; }\" +\n        \"/** @type {(string,null)} */ var a = f();\" +\n        \"/** @type string */ var b = 'foo';\" +\n        \"/** @type null */ var c = null;\" +\n        \"if (a) {\" +\n        \"  b = a;\" +\n        \"} else {\" +\n        \"  c = a;\" +\n        \"}\",\n        \"assignment\\n\" +\n        \"found   : (null|string)\\n\" +\n        \"required: null\");\n  }\n",
        "begin_line": 3935,
        "end_line": 3948,
        "comment": "",
        "child_ranges": [
            "(line 3936,col 5)-(line 3947,col 26)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testControlFlowRestrictsType3()",
        "snippet": "  public void testControlFlowRestrictsType3() throws Exception {\n    testTypes(\"/** @type {(string,void)} */\" +\n        \"var a;\" +\n        \"/** @type string */\" +\n        \"var b = 'foo';\" +\n        \"if (a) {\" +\n        \"  b = a;\" +\n        \"}\");\n  }\n",
        "begin_line": 3950,
        "end_line": 3958,
        "comment": "",
        "child_ranges": [
            "(line 3951,col 5)-(line 3957,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testControlFlowRestrictsType4()",
        "snippet": "  public void testControlFlowRestrictsType4() throws Exception {\n    testTypes(\"/** @param {string} a */ function f(a){}\" +\n        \"/** @type {(string,undefined)} */ var a;\" +\n        \"a && f(a);\");\n  }\n",
        "begin_line": 3960,
        "end_line": 3964,
        "comment": "",
        "child_ranges": [
            "(line 3961,col 5)-(line 3963,col 22)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testControlFlowRestrictsType5()",
        "snippet": "  public void testControlFlowRestrictsType5() throws Exception {\n    testTypes(\"/** @param {undefined} a */ function f(a){}\" +\n        \"/** @type {(!Array,undefined)} */ var a;\" +\n        \"a || f(a);\");\n  }\n",
        "begin_line": 3966,
        "end_line": 3970,
        "comment": "",
        "child_ranges": [
            "(line 3967,col 5)-(line 3969,col 22)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testControlFlowRestrictsType6()",
        "snippet": "  public void testControlFlowRestrictsType6() throws Exception {\n    testTypes(\"/** @param {undefined} x */ function f(x) {}\" +\n        \"/** @type {(string,undefined)} */ var a;\" +\n        \"a && f(a);\",\n        \"actual parameter 1 of f does not match formal parameter\\n\" +\n        \"found   : string\\n\" +\n        \"required: undefined\");\n  }\n",
        "begin_line": 3972,
        "end_line": 3979,
        "comment": "",
        "child_ranges": [
            "(line 3973,col 5)-(line 3978,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testControlFlowRestrictsType7()",
        "snippet": "  public void testControlFlowRestrictsType7() throws Exception {\n    testTypes(\"/** @param {undefined} x */ function f(x) {}\" +\n        \"/** @type {(string,undefined)} */ var a;\" +\n        \"a && f(a);\",\n        \"actual parameter 1 of f does not match formal parameter\\n\" +\n        \"found   : string\\n\" +\n        \"required: undefined\");\n  }\n",
        "begin_line": 3981,
        "end_line": 3988,
        "comment": "",
        "child_ranges": [
            "(line 3982,col 5)-(line 3987,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testControlFlowRestrictsType8()",
        "snippet": "  public void testControlFlowRestrictsType8() throws Exception {\n    testTypes(\"/** @param {undefined} a */ function f(a){}\" +\n        \"/** @type {(!Array,undefined)} */ var a;\" +\n        \"if (a || f(a)) {}\");\n  }\n",
        "begin_line": 3990,
        "end_line": 3994,
        "comment": "",
        "child_ranges": [
            "(line 3991,col 5)-(line 3993,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testControlFlowRestrictsType9()",
        "snippet": "  public void testControlFlowRestrictsType9() throws Exception {\n    testTypes(\"/** @param {number?} x\\n * @return {number}*/\\n\" +\n        \"var f = function(x) {\\n\" +\n        \"if (!x || x == 1) { return 1; } else { return x; }\\n\" +\n        \"};\");\n  }\n",
        "begin_line": 3996,
        "end_line": 4001,
        "comment": "",
        "child_ranges": [
            "(line 3997,col 5)-(line 4000,col 14)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testSwitchCase3()",
        "snippet": "  public void testSwitchCase3() throws Exception {\n    testTypes(\"/** @type String */\" +\n        \"var a = new String('foo');\" +\n        \"switch (a) { case 'A': }\");\n  }\n",
        "begin_line": 4003,
        "end_line": 4007,
        "comment": "",
        "child_ranges": [
            "(line 4004,col 5)-(line 4006,col 36)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testSwitchCase4()",
        "snippet": "  public void testSwitchCase4() throws Exception {\n    testTypes(\"/** @type {(string,Null)} */\" +\n        \"var a = 'foo';\" +\n        \"switch (a) { case 'A':break; case null:break; }\");\n  }\n",
        "begin_line": 4009,
        "end_line": 4013,
        "comment": "",
        "child_ranges": [
            "(line 4010,col 5)-(line 4012,col 59)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testSwitchCase5()",
        "snippet": "  public void testSwitchCase5() throws Exception {\n    testTypes(\"/** @type {(String,Null)} */\" +\n        \"var a = new String('foo');\" +\n        \"switch (a) { case 'A':break; case null:break; }\");\n  }\n",
        "begin_line": 4015,
        "end_line": 4019,
        "comment": "",
        "child_ranges": [
            "(line 4016,col 5)-(line 4018,col 59)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testSwitchCase6()",
        "snippet": "  public void testSwitchCase6() throws Exception {\n    testTypes(\"/** @type {(Number,Null)} */\" +\n        \"var a = new Number(5);\" +\n        \"switch (a) { case 5:break; case null:break; }\");\n  }\n",
        "begin_line": 4021,
        "end_line": 4025,
        "comment": "",
        "child_ranges": [
            "(line 4022,col 5)-(line 4024,col 57)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testSwitchCase7()",
        "snippet": "  public void testSwitchCase7() throws Exception {\n    // This really tests the inference inside the case.\n    testTypes(\n        \"/**\\n\" +\n        \" * @param {number} x\\n\" +\n        \" * @return {number}\\n\" +\n        \" */\\n\" +\n        \"function g(x) { return 5; }\" +\n        \"function f() {\" +\n        \"  var x = {};\" +\n        \"  x.foo = '3';\" +\n        \"  switch (3) { case g(x.foo): return 3; }\" +\n        \"}\",\n        \"actual parameter 1 of g does not match formal parameter\\n\" +\n        \"found   : string\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 4027,
        "end_line": 4043,
        "comment": "",
        "child_ranges": [
            "(line 4029,col 5)-(line 4042,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testSwitchCase8()",
        "snippet": "  public void testSwitchCase8() throws Exception {\n    // This really tests the inference inside the switch clause.\n    testTypes(\n        \"/**\\n\" +\n        \" * @param {number} x\\n\" +\n        \" * @return {number}\\n\" +\n        \" */\\n\" +\n        \"function g(x) { return 5; }\" +\n        \"function f() {\" +\n        \"  var x = {};\" +\n        \"  x.foo = '3';\" +\n        \"  switch (g(x.foo)) { case 3: return 3; }\" +\n        \"}\",\n        \"actual parameter 1 of g does not match formal parameter\\n\" +\n        \"found   : string\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 4045,
        "end_line": 4061,
        "comment": "",
        "child_ranges": [
            "(line 4047,col 5)-(line 4060,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testNoTypeCheck1()",
        "snippet": "  public void testNoTypeCheck1() throws Exception {\n    testTypes(\"/** @notypecheck */function foo() { new 4 }\");\n  }\n",
        "begin_line": 4063,
        "end_line": 4065,
        "comment": "",
        "child_ranges": [
            "(line 4064,col 5)-(line 4064,col 61)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testNoTypeCheck2()",
        "snippet": "  public void testNoTypeCheck2() throws Exception {\n    testTypes(\"/** @notypecheck */var foo = function() { new 4 }\");\n  }\n",
        "begin_line": 4067,
        "end_line": 4069,
        "comment": "",
        "child_ranges": [
            "(line 4068,col 5)-(line 4068,col 67)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testNoTypeCheck3()",
        "snippet": "  public void testNoTypeCheck3() throws Exception {\n    testTypes(\"/** @notypecheck */var foo = function bar() { new 4 }\");\n  }\n",
        "begin_line": 4071,
        "end_line": 4073,
        "comment": "",
        "child_ranges": [
            "(line 4072,col 5)-(line 4072,col 71)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testNoTypeCheck4()",
        "snippet": "  public void testNoTypeCheck4() throws Exception {\n    testTypes(\"var foo;\" +\n        \"/** @notypecheck */foo = function() { new 4 }\");\n  }\n",
        "begin_line": 4075,
        "end_line": 4078,
        "comment": "",
        "child_ranges": [
            "(line 4076,col 5)-(line 4077,col 57)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testNoTypeCheck5()",
        "snippet": "  public void testNoTypeCheck5() throws Exception {\n    testTypes(\"var foo;\" +\n        \"foo = /** @notypecheck */function() { new 4 }\");\n  }\n",
        "begin_line": 4080,
        "end_line": 4083,
        "comment": "",
        "child_ranges": [
            "(line 4081,col 5)-(line 4082,col 57)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testNoTypeCheck6()",
        "snippet": "  public void testNoTypeCheck6() throws Exception {\n    testTypes(\"var foo;\" +\n        \"/** @notypecheck */foo = function bar() { new 4 }\");\n  }\n",
        "begin_line": 4085,
        "end_line": 4088,
        "comment": "",
        "child_ranges": [
            "(line 4086,col 5)-(line 4087,col 61)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testNoTypeCheck7()",
        "snippet": "  public void testNoTypeCheck7() throws Exception {\n    testTypes(\"var foo;\" +\n        \"foo = /** @notypecheck */function bar() { new 4 }\");\n  }\n",
        "begin_line": 4090,
        "end_line": 4093,
        "comment": "",
        "child_ranges": [
            "(line 4091,col 5)-(line 4092,col 61)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testNoTypeCheck8()",
        "snippet": "  public void testNoTypeCheck8() throws Exception {\n    testTypes(\"/** @fileoverview \\n * @notypecheck */ var foo;\" +\n        \"var bar = 3; /** @param {string} x */ function f(x) {} f(bar);\");\n  }\n",
        "begin_line": 4095,
        "end_line": 4098,
        "comment": "",
        "child_ranges": [
            "(line 4096,col 5)-(line 4097,col 74)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testImplicitCast()",
        "snippet": "  public void testImplicitCast() throws Exception {\n    testTypes(\"/** @constructor */ function Element() {};\\n\" +\n             \"/** @type {string}\\n\" +\n             \"  * @implicitCast */\" +\n             \"Element.prototype.innerHTML;\",\n             \"(new Element).innerHTML = new Array();\", null, false);\n  }\n",
        "begin_line": 4100,
        "end_line": 4106,
        "comment": "",
        "child_ranges": [
            "(line 4101,col 5)-(line 4105,col 68)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testImplicitCastSubclassAccess()",
        "snippet": "  public void testImplicitCastSubclassAccess() throws Exception {\n    testTypes(\"/** @constructor */ function Element() {};\\n\" +\n             \"/** @type {string}\\n\" +\n             \"  * @implicitCast */\" +\n             \"Element.prototype.innerHTML;\" +\n             \"/** @constructor \\n @extends Element */\" +\n             \"function DIVElement() {};\",\n             \"(new DIVElement).innerHTML = new Array();\", null, false);\n  }\n",
        "begin_line": 4108,
        "end_line": 4116,
        "comment": "",
        "child_ranges": [
            "(line 4109,col 5)-(line 4115,col 71)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testImplicitCastNotInExterns()",
        "snippet": "  public void testImplicitCastNotInExterns() throws Exception {\n    testTypes(\"/** @constructor */ function Element() {};\\n\" +\n             \"/** @type {string}\\n\" +\n             \"  * @implicitCast */\" +\n             \"Element.prototype.innerHTML;\" +\n             \"(new Element).innerHTML = new Array();\",\n             new String[] {\n               \"Illegal annotation on innerHTML. @implicitCast may only be \" +\n               \"used in externs.\",\n               \"assignment to property innerHTML of Element\\n\" +\n               \"found   : Array\\n\" +\n               \"required: string\"});\n  }\n",
        "begin_line": 4118,
        "end_line": 4130,
        "comment": "",
        "child_ranges": [
            "(line 4119,col 5)-(line 4129,col 36)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testNumberNode()",
        "snippet": "  public void testNumberNode() throws Exception {\n    Node n = typeCheck(Node.newNumber(0));\n\n    assertEquals(NUMBER_TYPE, n.getJSType());\n  }\n",
        "begin_line": 4132,
        "end_line": 4136,
        "comment": "",
        "child_ranges": [
            "(line 4133,col 5)-(line 4133,col 42)",
            "(line 4135,col 5)-(line 4135,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testStringNode()",
        "snippet": "  public void testStringNode() throws Exception {\n    Node n = typeCheck(Node.newString(\"hello\"));\n\n    assertEquals(STRING_TYPE, n.getJSType());\n  }\n",
        "begin_line": 4138,
        "end_line": 4142,
        "comment": "",
        "child_ranges": [
            "(line 4139,col 5)-(line 4139,col 48)",
            "(line 4141,col 5)-(line 4141,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testBooleanNodeTrue()",
        "snippet": "  public void testBooleanNodeTrue() throws Exception {\n    Node trueNode = typeCheck(new Node(Token.TRUE));\n\n    assertEquals(BOOLEAN_TYPE, trueNode.getJSType());\n  }\n",
        "begin_line": 4144,
        "end_line": 4148,
        "comment": "",
        "child_ranges": [
            "(line 4145,col 5)-(line 4145,col 52)",
            "(line 4147,col 5)-(line 4147,col 53)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testBooleanNodeFalse()",
        "snippet": "  public void testBooleanNodeFalse() throws Exception {\n    Node falseNode = typeCheck(new Node(Token.FALSE));\n\n    assertEquals(BOOLEAN_TYPE, falseNode.getJSType());\n  }\n",
        "begin_line": 4150,
        "end_line": 4154,
        "comment": "",
        "child_ranges": [
            "(line 4151,col 5)-(line 4151,col 54)",
            "(line 4153,col 5)-(line 4153,col 54)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testUndefinedNode()",
        "snippet": "  public void testUndefinedNode() throws Exception {\n    Node p = new Node(Token.ADD);\n    Node n = Node.newString(Token.NAME, \"undefined\");\n    p.addChildToBack(n);\n    p.addChildToBack(Node.newNumber(5));\n    typeCheck(p);\n\n    assertEquals(VOID_TYPE, n.getJSType());\n  }\n",
        "begin_line": 4156,
        "end_line": 4164,
        "comment": "",
        "child_ranges": [
            "(line 4157,col 5)-(line 4157,col 33)",
            "(line 4158,col 5)-(line 4158,col 53)",
            "(line 4159,col 5)-(line 4159,col 24)",
            "(line 4160,col 5)-(line 4160,col 40)",
            "(line 4161,col 5)-(line 4161,col 17)",
            "(line 4163,col 5)-(line 4163,col 43)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testNumberAutoboxing()",
        "snippet": "  public void testNumberAutoboxing() throws Exception {\n    testTypes(\"/** @type Number */var a = 4;\",\n        \"initializing variable\\n\" +\n        \"found   : number\\n\" +\n        \"required: (Number|null|undefined)\");\n  }\n",
        "begin_line": 4166,
        "end_line": 4171,
        "comment": "",
        "child_ranges": [
            "(line 4167,col 5)-(line 4170,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testNumberUnboxing()",
        "snippet": "  public void testNumberUnboxing() throws Exception {\n    testTypes(\"/** @type number */var a = new Number(4);\",\n        \"initializing variable\\n\" +\n        \"found   : Number\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 4173,
        "end_line": 4178,
        "comment": "",
        "child_ranges": [
            "(line 4174,col 5)-(line 4177,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testStringAutoboxing()",
        "snippet": "  public void testStringAutoboxing() throws Exception {\n    testTypes(\"/** @type String */var a = 'hello';\",\n        \"initializing variable\\n\" +\n        \"found   : string\\n\" +\n        \"required: (String|null|undefined)\");\n  }\n",
        "begin_line": 4180,
        "end_line": 4185,
        "comment": "",
        "child_ranges": [
            "(line 4181,col 5)-(line 4184,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testStringUnboxing()",
        "snippet": "  public void testStringUnboxing() throws Exception {\n    testTypes(\"/** @type string */var a = new String('hello');\",\n        \"initializing variable\\n\" +\n        \"found   : String\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 4187,
        "end_line": 4192,
        "comment": "",
        "child_ranges": [
            "(line 4188,col 5)-(line 4191,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testBooleanAutoboxing()",
        "snippet": "  public void testBooleanAutoboxing() throws Exception {\n    testTypes(\"/** @type Boolean */var a = true;\",\n        \"initializing variable\\n\" +\n        \"found   : boolean\\n\" +\n        \"required: (Boolean|null|undefined)\");\n  }\n",
        "begin_line": 4194,
        "end_line": 4199,
        "comment": "",
        "child_ranges": [
            "(line 4195,col 5)-(line 4198,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testBooleanUnboxing()",
        "snippet": "  public void testBooleanUnboxing() throws Exception {\n    testTypes(\"/** @type boolean */var a = new Boolean(false);\",\n        \"initializing variable\\n\" +\n        \"found   : Boolean\\n\" +\n        \"required: boolean\");\n  }\n",
        "begin_line": 4201,
        "end_line": 4206,
        "comment": "",
        "child_ranges": [
            "(line 4202,col 5)-(line 4205,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testIssue86()",
        "snippet": "  public void testIssue86() throws Exception {\n    testTypes(\n        \"/** @interface */ function I() {}\" +\n        \"/** @return {number} */ I.prototype.get = function(){};\" +\n        \"/** @constructor \\n * @implements {I} */ function F() {}\" +\n        \"/** @override */ F.prototype.get = function() { return true; };\",\n        \"inconsistent return type\\n\" +\n        \"found   : boolean\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 4208,
        "end_line": 4217,
        "comment": "",
        "child_ranges": [
            "(line 4209,col 5)-(line 4216,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testIssue124()",
        "snippet": "  public void testIssue124() throws Exception {\n    testTypes(\n        \"var t = null;\" +\n        \"function test() {\" +\n        \"  if (t != null) { t = null; }\" +\n        \"  t = 1;\" +\n        \"}\");\n  }\n",
        "begin_line": 4219,
        "end_line": 4226,
        "comment": "",
        "child_ranges": [
            "(line 4220,col 5)-(line 4225,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testIssue124b()",
        "snippet": "  public void testIssue124b() throws Exception {\n    testTypes(\n        \"var t = null;\" +\n        \"function test() {\" +\n        \"  if (t != null) { t = null; }\" +\n        \"  t = undefined;\" +\n        \"}\",\n        \"condition always evaluates to false\\n\" +\n        \"left : (null|undefined)\\n\" +\n        \"right: null\");\n  }\n",
        "begin_line": 4228,
        "end_line": 4238,
        "comment": "",
        "child_ranges": [
            "(line 4229,col 5)-(line 4237,col 23)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testBug592170()",
        "snippet": "  public void testBug592170() throws Exception {\n    testTypes(\n        \"/** @param {Function} opt_f ... */\" +\n        \"function foo(opt_f) {\" +\n        \"  /** @type {Function} */\" +\n        \"  return opt_f || function () {};\" +\n        \"}\");\n  }\n",
        "begin_line": 4245,
        "end_line": 4252,
        "comment": "\n   * Tests that the || operator is type checked correctly, that is of\n   * the type of the first argument or of the second argument. See\n   * bugid 592170 for more details.\n   ",
        "child_ranges": [
            "(line 4246,col 5)-(line 4251,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testBug901455()",
        "snippet": "  public void testBug901455() throws Exception {\n    testTypes(\"/** @return {(number,undefined)} */ function a() { return 3; }\" +\n        \"var b = undefined === a()\");\n    testTypes(\"/** @return {(number,undefined)} */ function a() { return 3; }\" +\n        \"var b = a() === undefined\");\n  }\n",
        "begin_line": 4259,
        "end_line": 4264,
        "comment": "\n   * Tests that undefined can be compared shallowly to a value of type\n   * (number,undefined) regardless of the side on which the undefined\n   * value is.\n   ",
        "child_ranges": [
            "(line 4260,col 5)-(line 4261,col 37)",
            "(line 4262,col 5)-(line 4263,col 37)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testBug908701()",
        "snippet": "  public void testBug908701() throws Exception {\n    testTypes(\"/** @type {String} */var s = new String('foo');\" +\n        \"var b = s.match(/a/) != null;\");\n  }\n",
        "begin_line": 4269,
        "end_line": 4272,
        "comment": "\n   * Tests that the match method of strings returns nullable arrays.\n   ",
        "child_ranges": [
            "(line 4270,col 5)-(line 4271,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testBug908625()",
        "snippet": "  public void testBug908625() throws Exception {\n    testTypes(\"/** @constructor */function A(){}\" +\n        \"/** @constructor\\n * @extends A */function B(){}\" +\n        \"/** @param {B} b\" +\n        \"\\n @return {(A,undefined)} */function foo(b){return b}\");\n  }\n",
        "begin_line": 4277,
        "end_line": 4282,
        "comment": "\n   * Tests that named types play nicely with subtyping.\n   ",
        "child_ranges": [
            "(line 4278,col 5)-(line 4281,col 66)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testBug911118()",
        "snippet": "  public void testBug911118() throws Exception {\n    // verifying the type assigned to anonymous functions assigned variables\n    Scope s = parseAndTypeCheckWithScope(\"var a = function(){};\").scope;\n    JSType type = s.getVar(\"a\").getType();\n    assertEquals(\"function (): undefined\", type.toString());\n\n    // verifying the bug example\n    testTypes(\"function nullFunction() {};\" +\n        \"var foo = nullFunction;\" +\n        \"foo = function() {};\" +\n        \"foo();\");\n  }\n",
        "begin_line": 4288,
        "end_line": 4299,
        "comment": "\n   * Tests that assigning two untyped functions to a variable whose type is\n   * inferred and calling this variable is legal.\n   ",
        "child_ranges": [
            "(line 4290,col 5)-(line 4290,col 72)",
            "(line 4291,col 5)-(line 4291,col 42)",
            "(line 4292,col 5)-(line 4292,col 60)",
            "(line 4295,col 5)-(line 4298,col 18)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testBug909000()",
        "snippet": "  public void testBug909000() throws Exception {\n    testTypes(\"/** @constructor */function A(){}\\n\" +\n        \"/** @param {!A} a\\n\" +\n        \"@return {boolean}*/\\n\" +\n        \"function y(a) { return a }\",\n        \"inconsistent return type\\n\" +\n        \"found   : A\\n\" +\n        \"required: boolean\");\n  }\n",
        "begin_line": 4301,
        "end_line": 4309,
        "comment": "",
        "child_ranges": [
            "(line 4302,col 5)-(line 4308,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testBug930117()",
        "snippet": "  public void testBug930117() throws Exception {\n    testTypes(\n        \"/** @param {boolean} x */function f(x){}\" +\n        \"f(null);\",\n        \"actual parameter 1 of f does not match formal parameter\\n\" +\n        \"found   : null\\n\" +\n        \"required: boolean\");\n  }\n",
        "begin_line": 4311,
        "end_line": 4318,
        "comment": "",
        "child_ranges": [
            "(line 4312,col 5)-(line 4317,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testBug1484445()",
        "snippet": "  public void testBug1484445() throws Exception {\n    testTypes(\n        \"/** @constructor */ function Foo() {}\" +\n        \"/** @type {number?} */ Foo.prototype.bar = null;\" +\n        \"/** @type {number?} */ Foo.prototype.baz = null;\" +\n        \"/** @param {Foo} foo */\" +\n        \"function f(foo) {\" +\n        \"  while (true) {\" +\n        \"    if (foo.bar == null && foo.baz == null) {\" +\n        \"      foo.bar;\" +\n        \"    }\" +\n        \"  }\" +\n        \"}\");\n  }\n",
        "begin_line": 4320,
        "end_line": 4333,
        "comment": "",
        "child_ranges": [
            "(line 4321,col 5)-(line 4332,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testBug1859535()",
        "snippet": "  public void testBug1859535() throws Exception {\n    testTypes(\n        \"/**\\n\" +\n        \" * @param {Function} childCtor Child class.\\n\" +\n        \" * @param {Function} parentCtor Parent class.\\n\" +\n        \" */\" +\n        \"var inherits = function(childCtor, parentCtor) {\" +\n        \"  /** @constructor */\" +\n        \"  function tempCtor() {};\" +\n        \"  tempCtor.prototype = parentCtor.prototype;\" +\n        \"  childCtor.superClass_ = parentCtor.prototype;\" +\n        \"  childCtor.prototype = new tempCtor();\" +\n        \"  /** @override */ childCtor.prototype.constructor = childCtor;\" +\n        \"};\" +\n        \"/**\" +\n        \" * @param {Function} constructor\\n\" +\n        \" * @param {Object} var_args\\n\" +\n        \" * @return {Object}\\n\" +\n        \" */\" +\n        \"var factory = function(constructor, var_args) {\" +\n        \"  /** @constructor */\" +\n        \"  var tempCtor = function() {};\" +\n        \"  tempCtor.prototype = constructor.prototype;\" +\n        \"  var obj = new tempCtor();\" +\n        \"  constructor.apply(obj, arguments);\" +\n        \"  return obj;\" +\n        \"};\");\n  }\n",
        "begin_line": 4335,
        "end_line": 4362,
        "comment": "",
        "child_ranges": [
            "(line 4336,col 5)-(line 4361,col 14)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testBug1940591()",
        "snippet": "  public void testBug1940591() throws Exception {\n    testTypes(\n        \"/** @type {Object} */\" +\n        \"var a = {};\\n\" +\n        \"/** @type {number} */\\n\" +\n        \"a.name = 0;\\n\" +\n        \"/**\\n\" +\n        \" * @param {Function} x anything.\\n\" +\n        \" */\\n\" +\n        \"a.g = function(x) { x.name = 'a'; }\");\n  }\n",
        "begin_line": 4364,
        "end_line": 4374,
        "comment": "",
        "child_ranges": [
            "(line 4365,col 5)-(line 4373,col 47)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testBug1942972()",
        "snippet": "  public void testBug1942972() throws Exception {\n    testTypes(\n        \"var google = {\\n\"+\n        \"  gears: {\\n\" +\n        \"    factory: {},\\n\" +\n        \"    workerPool: {}\\n\" +\n        \"  }\\n\" +\n        \"};\\n\" +\n        \"\\n\" +\n        \"google.gears = {factory: {}};\\n\");\n  }\n",
        "begin_line": 4376,
        "end_line": 4386,
        "comment": "",
        "child_ranges": [
            "(line 4377,col 5)-(line 4385,col 43)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testBug1943776()",
        "snippet": "  public void testBug1943776() throws Exception {\n    testTypes(\n        \"/** @return  {{foo: Array}} */\" +\n        \"function bar() {\" +\n        \"  return {foo: []};\" +\n        \"}\");\n  }\n",
        "begin_line": 4388,
        "end_line": 4394,
        "comment": "",
        "child_ranges": [
            "(line 4389,col 5)-(line 4393,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testBug1987544()",
        "snippet": "  public void testBug1987544() throws Exception {\n    testTypes(\n        \"/** @param {string} x */ function foo(x) {}\" +\n        \"var duration;\" +\n        \"if (true && !(duration = 3)) {\" +\n        \" foo(duration);\" +\n        \"}\",\n        \"actual parameter 1 of foo does not match formal parameter\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 4396,
        "end_line": 4406,
        "comment": "",
        "child_ranges": [
            "(line 4397,col 5)-(line 4405,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testBug1940769()",
        "snippet": "  public void testBug1940769() throws Exception {\n    testTypes(\n        \"/** @return {!Object} */ \" +\n        \"function proto(obj) { return obj.prototype; }\" +\n        \"/** @constructor */ function Map() {}\" +\n        \"/**\\n\" +\n        \" * @constructor\\n\" +\n        \" * @extends {Map}\\n\" +\n        \" */\" +\n        \"function Map2() { Map.call(this); };\" +\n        \"Map2.prototype = proto(Map);\");\n  }\n",
        "begin_line": 4408,
        "end_line": 4419,
        "comment": "",
        "child_ranges": [
            "(line 4409,col 5)-(line 4418,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testBug2335992()",
        "snippet": "  public void testBug2335992() throws Exception {\n    testTypes(\n        \"/** @return {*} */ function f() { return 3; }\" +\n        \"var x = f();\" +\n        \"/** @type {string} */\" +\n        \"x.y = 3;\",\n        \"assignment to property y of x\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 4421,
        "end_line": 4430,
        "comment": "",
        "child_ranges": [
            "(line 4422,col 5)-(line 4429,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testBug2341812()",
        "snippet": "  public void testBug2341812() throws Exception {\n    testTypes(\n        \"/** @interface */\" +\n        \"function EventTarget() {}\" +\n        \"/** @constructor \\n * @implements {EventTarget} */\" +\n        \"function Node() {}\" +\n        \"/** @type {number} */ Node.prototype.index;\" +\n        \"/** @param {EventTarget} x \\n * @return {string} */\" +\n        \"function foo(x) { return x.index; }\");\n  }\n",
        "begin_line": 4432,
        "end_line": 4441,
        "comment": "",
        "child_ranges": [
            "(line 4433,col 5)-(line 4440,col 47)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testScopedConstructors()",
        "snippet": "  public void testScopedConstructors() throws Exception {\n    testTypes(\n        \"function foo1() { \" +\n        \"  /** @constructor */ function Bar() { \" +\n        \"    /** @type {number} */ this.x = 3;\" +\n        \"  }\" +\n        \"}\" +\n        \"function foo2() { \" +\n        \"  /** @constructor */ function Bar() { \" +\n        \"    /** @type {string} */ this.x = 'y';\" +\n        \"  }\" +\n        \"  /** \" +\n        \"   * @param {Bar} b\\n\" +\n        \"   * @return {number}\\n\" +\n        \"   */\" +\n        \"  function baz(b) { return b.x; }\" +\n        \"}\",\n        \"inconsistent return type\\n\" +\n        \"found   : string\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 4443,
        "end_line": 4463,
        "comment": "",
        "child_ranges": [
            "(line 4444,col 5)-(line 4462,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testQualifiedNameInference1()",
        "snippet": "  public void testQualifiedNameInference1() throws Exception {\n    testTypes(\n        \"/** @constructor */ function Foo() {}\" +\n        \"/** @type {number?} */ Foo.prototype.bar = null;\" +\n        \"/** @type {number?} */ Foo.prototype.baz = null;\" +\n        \"/** @param {Foo} foo */\" +\n        \"function f(foo) {\" +\n        \"  while (true) {\" +\n        \"    if (!foo.baz) break; \" +\n        \"    foo.bar = null;\" +\n        \"  }\" +\n        // Tests a bug where this condition always evaluated to true.\n        \"  return foo.bar == null;\" +\n        \"}\");\n  }\n",
        "begin_line": 4465,
        "end_line": 4479,
        "comment": "",
        "child_ranges": [
            "(line 4466,col 5)-(line 4478,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testQualifiedNameInference2()",
        "snippet": "  public void testQualifiedNameInference2() throws Exception {\n    testTypes(\n        \"var x = {};\" +\n        \"x.y = c;\" +\n        \"function f(a, b) {\" +\n        \"  if (a) {\" +\n        \"    if (b) \" +\n        \"      x.y = 2;\" +\n        \"    else \" +\n        \"      x.y = 1;\" +\n        \"  }\" +\n        \"  return x.y == null;\" +\n        \"}\");\n  }\n",
        "begin_line": 4481,
        "end_line": 4494,
        "comment": "",
        "child_ranges": [
            "(line 4482,col 5)-(line 4493,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testQualifiedNameInference3()",
        "snippet": "  public void testQualifiedNameInference3() throws Exception {\n    testTypes(\n        \"var x = {};\" +\n        \"x.y = c;\" +\n        \"function f(a, b) {\" +\n        \"  if (a) {\" +\n        \"    if (b) \" +\n        \"      x.y = 2;\" +\n        \"    else \" +\n        \"      x.y = 1;\" +\n        \"  }\" +\n        \"  return x.y == null;\" +\n        \"} function g() { x.y = null; }\");\n  }\n",
        "begin_line": 4496,
        "end_line": 4509,
        "comment": "",
        "child_ranges": [
            "(line 4497,col 5)-(line 4508,col 42)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testQualifiedNameInference4()",
        "snippet": "  public void testQualifiedNameInference4() throws Exception {\n    testTypes(\n        \"/** @param {string} x */ function f(x) {}\\n\" +\n        \"/**\\n\" +\n        \" * @param {?string} x \\n\" +\n        \" * @constructor\\n\" +\n        \" */\" +\n        \"function Foo(x) { this.x_ = x; }\\n\" +\n        \"Foo.prototype.bar = function() {\" +\n        \"  if (this.x_) { f(this.x_); }\" +\n        \"};\");\n  }\n",
        "begin_line": 4511,
        "end_line": 4522,
        "comment": "",
        "child_ranges": [
            "(line 4512,col 5)-(line 4521,col 14)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testSheqRefinedScope()",
        "snippet": "  public void testSheqRefinedScope() throws Exception {\n    Node n = parseAndTypeCheck(\n        \"/** @constructor */function A() {}\\n\" +\n        \"/** @constructor \\n @extends A */ function B() {}\\n\" +\n        \"/** @return {number} */\\n\" +\n        \"B.prototype.p = function() { return 1; }\\n\" +\n        \"/** @param {A} a\\n @param {B} b */\\n\" +\n        \"function f(a, b) {\\n\" +\n        \"  b.p();\\n\" +\n        \"  if (a === b) {\\n\" +\n        \"    b.p();\\n\" +\n        \"  }\\n\" +\n        \"}\");\n    Node nodeC = n.getLastChild().getLastChild().getLastChild().getLastChild()\n        .getLastChild().getLastChild();\n    JSType typeC = nodeC.getJSType();\n    assertTrue(typeC.isNumber());\n\n    Node nodeB = nodeC.getFirstChild().getFirstChild();\n    JSType typeB = nodeB.getJSType();\n    assertEquals(\"B\", typeB.toString());\n  }\n",
        "begin_line": 4524,
        "end_line": 4545,
        "comment": "",
        "child_ranges": [
            "(line 4525,col 5)-(line 4536,col 13)",
            "(line 4537,col 5)-(line 4538,col 39)",
            "(line 4539,col 5)-(line 4539,col 37)",
            "(line 4540,col 5)-(line 4540,col 33)",
            "(line 4542,col 5)-(line 4542,col 55)",
            "(line 4543,col 5)-(line 4543,col 37)",
            "(line 4544,col 5)-(line 4544,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testAssignToUntypedVariable()",
        "snippet": "  public void testAssignToUntypedVariable() throws Exception {\n    Node n = parseAndTypeCheck(\"var z; z = 1;\");\n\n    Node assign = n.getLastChild().getFirstChild();\n    Node node = assign.getFirstChild();\n    assertFalse(node.getJSType().isUnknownType());\n    assertEquals(\"number\", node.getJSType().toString());\n  }\n",
        "begin_line": 4547,
        "end_line": 4554,
        "comment": "",
        "child_ranges": [
            "(line 4548,col 5)-(line 4548,col 48)",
            "(line 4550,col 5)-(line 4550,col 51)",
            "(line 4551,col 5)-(line 4551,col 39)",
            "(line 4552,col 5)-(line 4552,col 50)",
            "(line 4553,col 5)-(line 4553,col 56)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testAssignToUntypedProperty()",
        "snippet": "  public void testAssignToUntypedProperty() throws Exception {\n    Node n = parseAndTypeCheck(\n        \"/** @constructor */ function Foo() {}\\n\" +\n        \"Foo.prototype.a = 1;\" +\n        \"(new Foo).a;\");\n\n    Node node = n.getLastChild().getFirstChild();\n    assertFalse(node.getJSType().isUnknownType());\n    assertTrue(node.getJSType().isNumber());\n  }\n",
        "begin_line": 4556,
        "end_line": 4565,
        "comment": "",
        "child_ranges": [
            "(line 4557,col 5)-(line 4560,col 24)",
            "(line 4562,col 5)-(line 4562,col 49)",
            "(line 4563,col 5)-(line 4563,col 50)",
            "(line 4564,col 5)-(line 4564,col 44)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testNew1()",
        "snippet": "  public void testNew1() throws Exception {\n    testTypes(\"new 4\", TypeCheck.NOT_A_CONSTRUCTOR);\n  }\n",
        "begin_line": 4567,
        "end_line": 4569,
        "comment": "",
        "child_ranges": [
            "(line 4568,col 5)-(line 4568,col 52)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testNew2()",
        "snippet": "  public void testNew2() throws Exception {\n    testTypes(\"var Math = {}; new Math()\", TypeCheck.NOT_A_CONSTRUCTOR);\n  }\n",
        "begin_line": 4571,
        "end_line": 4573,
        "comment": "",
        "child_ranges": [
            "(line 4572,col 5)-(line 4572,col 72)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testNew3()",
        "snippet": "  public void testNew3() throws Exception {\n    testTypes(\"new Date()\");\n  }\n",
        "begin_line": 4575,
        "end_line": 4577,
        "comment": "",
        "child_ranges": [
            "(line 4576,col 5)-(line 4576,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testNew4()",
        "snippet": "  public void testNew4() throws Exception {\n    testTypes(\"/** @constructor */function A(){}; new A();\");\n  }\n",
        "begin_line": 4579,
        "end_line": 4581,
        "comment": "",
        "child_ranges": [
            "(line 4580,col 5)-(line 4580,col 61)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testNew5()",
        "snippet": "  public void testNew5() throws Exception {\n    testTypes(\"function A(){}; new A();\", TypeCheck.NOT_A_CONSTRUCTOR);\n  }\n",
        "begin_line": 4583,
        "end_line": 4585,
        "comment": "",
        "child_ranges": [
            "(line 4584,col 5)-(line 4584,col 71)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testNew6()",
        "snippet": "  public void testNew6() throws Exception {\n    TypeCheckResult p =\n      parseAndTypeCheckWithScope(\"/** @constructor */function A(){};\" +\n      \"var a = new A();\");\n\n    JSType aType = p.scope.getVar(\"a\").getType();\n    assertTrue(aType instanceof ObjectType);\n    ObjectType aObjectType = (ObjectType) aType;\n    assertEquals(\"A\", aObjectType.getConstructor().getReferenceName());\n  }\n",
        "begin_line": 4587,
        "end_line": 4596,
        "comment": "",
        "child_ranges": [
            "(line 4588,col 5)-(line 4590,col 26)",
            "(line 4592,col 5)-(line 4592,col 49)",
            "(line 4593,col 5)-(line 4593,col 44)",
            "(line 4594,col 5)-(line 4594,col 48)",
            "(line 4595,col 5)-(line 4595,col 71)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testNew7()",
        "snippet": "  public void testNew7() throws Exception {\n    testTypes(\"/** @param {Function} opt_constructor */\" +\n        \"function foo(opt_constructor) {\" +\n        \"if (opt_constructor) { new opt_constructor; }\" +\n        \"}\");\n  }\n",
        "begin_line": 4598,
        "end_line": 4603,
        "comment": "",
        "child_ranges": [
            "(line 4599,col 5)-(line 4602,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testNew8()",
        "snippet": "  public void testNew8() throws Exception {\n    testTypes(\"/** @param {Function} opt_constructor */\" +\n        \"function foo(opt_constructor) {\" +\n        \"new opt_constructor;\" +\n        \"}\");\n  }\n",
        "begin_line": 4605,
        "end_line": 4610,
        "comment": "",
        "child_ranges": [
            "(line 4606,col 5)-(line 4609,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testNew9()",
        "snippet": "  public void testNew9() throws Exception {\n    testTypes(\"/** @param {Function} opt_constructor */\" +\n        \"function foo(opt_constructor) {\" +\n        \"new (opt_constructor || Array);\" +\n        \"}\");\n  }\n",
        "begin_line": 4612,
        "end_line": 4617,
        "comment": "",
        "child_ranges": [
            "(line 4613,col 5)-(line 4616,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testNew10()",
        "snippet": "  public void testNew10() throws Exception {\n    testTypes(\"var goog = {};\" +\n        \"/** @param {Function} opt_constructor */\" +\n        \"goog.Foo = function (opt_constructor) {\" +\n        \"new (opt_constructor || Array);\" +\n        \"}\");\n  }\n",
        "begin_line": 4619,
        "end_line": 4625,
        "comment": "",
        "child_ranges": [
            "(line 4620,col 5)-(line 4624,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testNew11()",
        "snippet": "  public void testNew11() throws Exception {\n    testTypes(\"/** @param {Function} c1 */\" +\n        \"function f(c1) {\" +\n        \"  var c2 = function(){};\" +\n        \"  c1.prototype = new c2;\" +\n        \"}\", TypeCheck.NOT_A_CONSTRUCTOR);\n  }\n",
        "begin_line": 4627,
        "end_line": 4633,
        "comment": "",
        "child_ranges": [
            "(line 4628,col 5)-(line 4632,col 42)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testNew12()",
        "snippet": "  public void testNew12() throws Exception {\n    TypeCheckResult p = parseAndTypeCheckWithScope(\"var a = new Array();\");\n    Var a = p.scope.getVar(\"a\");\n\n    assertEquals(ARRAY_TYPE, a.getType());\n  }\n",
        "begin_line": 4635,
        "end_line": 4640,
        "comment": "",
        "child_ranges": [
            "(line 4636,col 5)-(line 4636,col 75)",
            "(line 4637,col 5)-(line 4637,col 32)",
            "(line 4639,col 5)-(line 4639,col 42)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testNew13()",
        "snippet": "  public void testNew13() throws Exception {\n    TypeCheckResult p = parseAndTypeCheckWithScope(\n        \"/** @constructor */function FooBar(){};\" +\n        \"var a = new FooBar();\");\n    Var a = p.scope.getVar(\"a\");\n\n    assertTrue(a.getType() instanceof ObjectType);\n    assertEquals(\"FooBar\", a.getType().toString());\n  }\n",
        "begin_line": 4642,
        "end_line": 4650,
        "comment": "",
        "child_ranges": [
            "(line 4643,col 5)-(line 4645,col 33)",
            "(line 4646,col 5)-(line 4646,col 32)",
            "(line 4648,col 5)-(line 4648,col 50)",
            "(line 4649,col 5)-(line 4649,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testNew14()",
        "snippet": "  public void testNew14() throws Exception {\n    TypeCheckResult p = parseAndTypeCheckWithScope(\n        \"/** @constructor */var FooBar = function(){};\" +\n        \"var a = new FooBar();\");\n    Var a = p.scope.getVar(\"a\");\n\n    assertTrue(a.getType() instanceof ObjectType);\n    assertEquals(\"FooBar\", a.getType().toString());\n  }\n",
        "begin_line": 4652,
        "end_line": 4660,
        "comment": "",
        "child_ranges": [
            "(line 4653,col 5)-(line 4655,col 33)",
            "(line 4656,col 5)-(line 4656,col 32)",
            "(line 4658,col 5)-(line 4658,col 50)",
            "(line 4659,col 5)-(line 4659,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testNew15()",
        "snippet": "  public void testNew15() throws Exception {\n    TypeCheckResult p = parseAndTypeCheckWithScope(\n        \"var goog = {};\" +\n        \"/** @constructor */goog.A = function(){};\" +\n        \"var a = new goog.A();\");\n    Var a = p.scope.getVar(\"a\");\n\n    assertTrue(a.getType() instanceof ObjectType);\n    assertEquals(\"goog.A\", a.getType().toString());\n  }\n",
        "begin_line": 4662,
        "end_line": 4671,
        "comment": "",
        "child_ranges": [
            "(line 4663,col 5)-(line 4666,col 33)",
            "(line 4667,col 5)-(line 4667,col 32)",
            "(line 4669,col 5)-(line 4669,col 50)",
            "(line 4670,col 5)-(line 4670,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testNew16()",
        "snippet": "  public void testNew16() throws Exception {\n    testTypes(\n        \"/** \\n\" +\n        \" * @param {string} x \\n\" +\n        \" * @constructor \\n\" +\n        \" */\" +\n        \"function Foo(x) {}\" +\n        \"function g() { new Foo(1); }\",\n        \"actual parameter 1 of Foo does not match formal parameter\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 4673,
        "end_line": 4684,
        "comment": "",
        "child_ranges": [
            "(line 4674,col 5)-(line 4683,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testName1()",
        "snippet": "  public void testName1() throws Exception {\n    assertEquals(VOID_TYPE, testNameNode(\"undefined\"));\n  }\n",
        "begin_line": 4686,
        "end_line": 4688,
        "comment": "",
        "child_ranges": [
            "(line 4687,col 5)-(line 4687,col 55)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testName2()",
        "snippet": "  public void testName2() throws Exception {\n    assertEquals(OBJECT_FUNCTION_TYPE, testNameNode(\"Object\"));\n  }\n",
        "begin_line": 4690,
        "end_line": 4692,
        "comment": "",
        "child_ranges": [
            "(line 4691,col 5)-(line 4691,col 63)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testName3()",
        "snippet": "  public void testName3() throws Exception {\n    assertEquals(ARRAY_FUNCTION_TYPE, testNameNode(\"Array\"));\n  }\n",
        "begin_line": 4694,
        "end_line": 4696,
        "comment": "",
        "child_ranges": [
            "(line 4695,col 5)-(line 4695,col 61)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testName4()",
        "snippet": "  public void testName4() throws Exception {\n    assertEquals(DATE_FUNCTION_TYPE, testNameNode(\"Date\"));\n  }\n",
        "begin_line": 4698,
        "end_line": 4700,
        "comment": "",
        "child_ranges": [
            "(line 4699,col 5)-(line 4699,col 59)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testName5()",
        "snippet": "  public void testName5() throws Exception {\n    assertEquals(REGEXP_FUNCTION_TYPE, testNameNode(\"RegExp\"));\n  }\n",
        "begin_line": 4702,
        "end_line": 4704,
        "comment": "",
        "child_ranges": [
            "(line 4703,col 5)-(line 4703,col 63)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testNameNode(java.lang.String)",
        "snippet": "  private JSType testNameNode(String name) {\n    Node node = Node.newString(Token.NAME, name);\n    Node parent = new Node(Token.SCRIPT, node);\n\n    Node externs = new Node(Token.BLOCK);\n    Node externAndJsRoot = new Node(Token.BLOCK, externs, parent);\n    externAndJsRoot.setIsSyntheticBlock(true);\n\n    makeTypeCheck().processForTesting(null, parent);\n    return node.getJSType();\n  }\n",
        "begin_line": 4709,
        "end_line": 4719,
        "comment": "\n   * Type checks a NAME node and retrieve its type.\n   ",
        "child_ranges": [
            "(line 4710,col 5)-(line 4710,col 49)",
            "(line 4711,col 5)-(line 4711,col 47)",
            "(line 4713,col 5)-(line 4713,col 41)",
            "(line 4714,col 5)-(line 4714,col 66)",
            "(line 4715,col 5)-(line 4715,col 46)",
            "(line 4717,col 5)-(line 4717,col 52)",
            "(line 4718,col 5)-(line 4718,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testBitOperation1()",
        "snippet": "  public void testBitOperation1() throws Exception {\n    testTypes(\"/**@return {void}*/function foo(){ ~foo(); }\",\n        \"operator ~ cannot be applied to undefined\");\n  }\n",
        "begin_line": 4721,
        "end_line": 4724,
        "comment": "",
        "child_ranges": [
            "(line 4722,col 5)-(line 4723,col 53)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testBitOperation2()",
        "snippet": "  public void testBitOperation2() throws Exception {\n    testTypes(\"/**@return {void}*/function foo(){var a = foo()<<3;}\",\n        \"operator << cannot be applied to undefined\");\n  }\n",
        "begin_line": 4726,
        "end_line": 4729,
        "comment": "",
        "child_ranges": [
            "(line 4727,col 5)-(line 4728,col 54)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testBitOperation3()",
        "snippet": "  public void testBitOperation3() throws Exception {\n    testTypes(\"/**@return {void}*/function foo(){var a = 3<<foo();}\",\n        \"operator << cannot be applied to undefined\");\n  }\n",
        "begin_line": 4731,
        "end_line": 4734,
        "comment": "",
        "child_ranges": [
            "(line 4732,col 5)-(line 4733,col 54)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testBitOperation4()",
        "snippet": "  public void testBitOperation4() throws Exception {\n    testTypes(\"/**@return {void}*/function foo(){var a = foo()>>>3;}\",\n        \"operator >>> cannot be applied to undefined\");\n  }\n",
        "begin_line": 4736,
        "end_line": 4739,
        "comment": "",
        "child_ranges": [
            "(line 4737,col 5)-(line 4738,col 55)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testBitOperation5()",
        "snippet": "  public void testBitOperation5() throws Exception {\n    testTypes(\"/**@return {void}*/function foo(){var a = 3>>>foo();}\",\n        \"operator >>> cannot be applied to undefined\");\n  }\n",
        "begin_line": 4741,
        "end_line": 4744,
        "comment": "",
        "child_ranges": [
            "(line 4742,col 5)-(line 4743,col 55)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testBitOperation6()",
        "snippet": "  public void testBitOperation6() throws Exception {\n    testTypes(\"/**@return {!Object}*/function foo(){var a = foo()&3;}\",\n        \"bad left operand to bitwise operator\\n\" +\n        \"found   : Object\\n\" +\n        \"required: (boolean|null|number|string|undefined)\");\n  }\n",
        "begin_line": 4746,
        "end_line": 4751,
        "comment": "",
        "child_ranges": [
            "(line 4747,col 5)-(line 4750,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testBitOperation7()",
        "snippet": "  public void testBitOperation7() throws Exception {\n    testTypes(\"var x = null; x |= undefined; x &= 3; x ^= '3'; x |= true;\");\n  }\n",
        "begin_line": 4753,
        "end_line": 4755,
        "comment": "",
        "child_ranges": [
            "(line 4754,col 5)-(line 4754,col 76)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testBitOperation8()",
        "snippet": "  public void testBitOperation8() throws Exception {\n    testTypes(\"var x = void 0; x |= new Number(3);\");\n  }\n",
        "begin_line": 4757,
        "end_line": 4759,
        "comment": "",
        "child_ranges": [
            "(line 4758,col 5)-(line 4758,col 53)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testBitOperation9()",
        "snippet": "  public void testBitOperation9() throws Exception {\n    testTypes(\"var x = void 0; x |= {};\",\n        \"bad right operand to bitwise operator\\n\" +\n        \"found   : {}\\n\" +\n        \"required: (boolean|null|number|string|undefined)\");\n  }\n",
        "begin_line": 4761,
        "end_line": 4766,
        "comment": "",
        "child_ranges": [
            "(line 4762,col 5)-(line 4765,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testCall1()",
        "snippet": "  public void testCall1() throws Exception {\n    testTypes(\"3();\", \"number expressions are not callable\");\n  }\n",
        "begin_line": 4768,
        "end_line": 4770,
        "comment": "",
        "child_ranges": [
            "(line 4769,col 5)-(line 4769,col 61)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testCall2()",
        "snippet": "  public void testCall2() throws Exception {\n    testTypes(\"/** @param {!Number} foo*/function bar(foo){ bar('abc'); }\",\n        \"actual parameter 1 of bar does not match formal parameter\\n\" +\n        \"found   : string\\n\" +\n        \"required: Number\");\n  }\n",
        "begin_line": 4772,
        "end_line": 4777,
        "comment": "",
        "child_ranges": [
            "(line 4773,col 5)-(line 4776,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testCall3()",
        "snippet": "  public void testCall3() throws Exception {\n    // We are checking that an unresolved named type can successfully\n    // meet with a functional type to produce a callable type.\n    testTypes(\"/** @type {Function|undefined} */var opt_f;\" +\n        \"/** @type {some.unknown.type} */var f1;\" +\n        \"var f2 = opt_f || f1;\" +\n        \"f2();\",\n        \"Bad type annotation. Unknown type some.unknown.type\");\n  }\n",
        "begin_line": 4779,
        "end_line": 4787,
        "comment": "",
        "child_ranges": [
            "(line 4782,col 5)-(line 4786,col 63)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testCall4()",
        "snippet": "  public void testCall4() throws Exception {\n    testTypes(\"/**@param {!RegExp} a*/var foo = function bar(a){ bar('abc'); }\",\n        \"actual parameter 1 of bar does not match formal parameter\\n\" +\n        \"found   : string\\n\" +\n        \"required: RegExp\");\n  }\n",
        "begin_line": 4789,
        "end_line": 4794,
        "comment": "",
        "child_ranges": [
            "(line 4790,col 5)-(line 4793,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testCall5()",
        "snippet": "  public void testCall5() throws Exception {\n    testTypes(\"/**@param {!RegExp} a*/var foo = function bar(a){ foo('abc'); }\",\n        \"actual parameter 1 of foo does not match formal parameter\\n\" +\n        \"found   : string\\n\" +\n        \"required: RegExp\");\n  }\n",
        "begin_line": 4796,
        "end_line": 4801,
        "comment": "",
        "child_ranges": [
            "(line 4797,col 5)-(line 4800,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testCall6()",
        "snippet": "  public void testCall6() throws Exception {\n    testTypes(\"/** @param {!Number} foo*/function bar(foo){}\" +\n        \"bar('abc');\",\n        \"actual parameter 1 of bar does not match formal parameter\\n\" +\n        \"found   : string\\n\" +\n        \"required: Number\");\n  }\n",
        "begin_line": 4803,
        "end_line": 4809,
        "comment": "",
        "child_ranges": [
            "(line 4804,col 5)-(line 4808,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testCall7()",
        "snippet": "  public void testCall7() throws Exception {\n    testTypes(\"/** @param {!RegExp} a*/var foo = function bar(a){};\" +\n        \"foo('abc');\",\n        \"actual parameter 1 of foo does not match formal parameter\\n\" +\n        \"found   : string\\n\" +\n        \"required: RegExp\");\n  }\n",
        "begin_line": 4811,
        "end_line": 4817,
        "comment": "",
        "child_ranges": [
            "(line 4812,col 5)-(line 4816,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testCall8()",
        "snippet": "  public void testCall8() throws Exception {\n    testTypes(\"/** @type {Function|number} */var f;f();\",\n        \"(Function|number) expressions are \" +\n        \"not callable\");\n  }\n",
        "begin_line": 4819,
        "end_line": 4823,
        "comment": "",
        "child_ranges": [
            "(line 4820,col 5)-(line 4822,col 24)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testCall9()",
        "snippet": "  public void testCall9() throws Exception {\n    testTypes(\n        \"var goog = {};\" +\n        \"/** @constructor */ goog.Foo = function() {};\" +\n        \"/** @param {!goog.Foo} a */ var bar = function(a){};\" +\n        \"bar('abc');\",\n        \"actual parameter 1 of bar does not match formal parameter\\n\" +\n        \"found   : string\\n\" +\n        \"required: goog.Foo\");\n  }\n",
        "begin_line": 4825,
        "end_line": 4834,
        "comment": "",
        "child_ranges": [
            "(line 4826,col 5)-(line 4833,col 30)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testCall10()",
        "snippet": "  public void testCall10() throws Exception {\n    testTypes(\"/** @type {Function} */var f;f();\");\n  }\n",
        "begin_line": 4836,
        "end_line": 4838,
        "comment": "",
        "child_ranges": [
            "(line 4837,col 5)-(line 4837,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testCall11()",
        "snippet": "  public void testCall11() throws Exception {\n    testTypes(\"var f = new Function(); f();\");\n  }\n",
        "begin_line": 4840,
        "end_line": 4842,
        "comment": "",
        "child_ranges": [
            "(line 4841,col 5)-(line 4841,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testFunctionCall1()",
        "snippet": "  public void testFunctionCall1() throws Exception {\n    testTypes(\n        \"/** @param {number} x */ var foo = function(x) {};\" +\n        \"foo.call(null, 3);\");\n  }\n",
        "begin_line": 4844,
        "end_line": 4848,
        "comment": "",
        "child_ranges": [
            "(line 4845,col 5)-(line 4847,col 30)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testFunctionCall2()",
        "snippet": "  public void testFunctionCall2() throws Exception {\n    testTypes(\n        \"/** @param {number} x */ var foo = function(x) {};\" +\n        \"foo.call(null, 'bar');\",\n        \"actual parameter 2 of foo.call does not match formal parameter\\n\" +\n        \"found   : string\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 4850,
        "end_line": 4857,
        "comment": "",
        "child_ranges": [
            "(line 4851,col 5)-(line 4856,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testFunctionCall3()",
        "snippet": "  public void testFunctionCall3() throws Exception {\n    testTypes(\n        \"/** @param {number} x \\n * @constructor */ \" +\n        \"var Foo = function(x) { this.bar.call(null, x); };\" +\n        \"/** @type {function(number)} */ Foo.prototype.bar;\");\n  }\n",
        "begin_line": 4859,
        "end_line": 4864,
        "comment": "",
        "child_ranges": [
            "(line 4860,col 5)-(line 4863,col 62)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testFunctionCall4()",
        "snippet": "  public void testFunctionCall4() throws Exception {\n    testTypes(\n        \"/** @param {string} x \\n * @constructor */ \" +\n        \"var Foo = function(x) { this.bar.call(null, x); };\" +\n        \"/** @type {function(number)} */ Foo.prototype.bar;\",\n        \"actual parameter 2 of this.bar.call \" +\n        \"does not match formal parameter\\n\" +\n        \"found   : string\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 4866,
        "end_line": 4875,
        "comment": "",
        "child_ranges": [
            "(line 4867,col 5)-(line 4874,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testFunctionCall5()",
        "snippet": "  public void testFunctionCall5() throws Exception {\n    testTypes(\n        \"/** @param {Function} handler \\n * @constructor */ \" +\n        \"var Foo = function(handler) { handler.call(this, x); };\");\n  }\n",
        "begin_line": 4877,
        "end_line": 4881,
        "comment": "",
        "child_ranges": [
            "(line 4878,col 5)-(line 4880,col 67)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testFunctionCall6()",
        "snippet": "  public void testFunctionCall6() throws Exception {\n    testTypes(\n        \"/** @param {Function} handler \\n * @constructor */ \" +\n        \"var Foo = function(handler) { handler.apply(this, x); };\");\n  }\n",
        "begin_line": 4883,
        "end_line": 4887,
        "comment": "",
        "child_ranges": [
            "(line 4884,col 5)-(line 4886,col 68)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testFunctionCall7()",
        "snippet": "  public void testFunctionCall7() throws Exception {\n    testTypes(\n        \"/** @param {Function} handler \\n * @param {Object} opt_context */ \" +\n        \"var Foo = function(handler, opt_context) { \" +\n        \"  handler.call(opt_context, x);\" +\n        \"};\");\n  }\n",
        "begin_line": 4889,
        "end_line": 4895,
        "comment": "",
        "child_ranges": [
            "(line 4890,col 5)-(line 4894,col 14)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testFunctionCall8()",
        "snippet": "  public void testFunctionCall8() throws Exception {\n    testTypes(\n        \"/** @param {Function} handler \\n * @param {Object} opt_context */ \" +\n        \"var Foo = function(handler, opt_context) { \" +\n        \"  handler.apply(opt_context, x);\" +\n        \"};\");\n  }\n",
        "begin_line": 4897,
        "end_line": 4903,
        "comment": "",
        "child_ranges": [
            "(line 4898,col 5)-(line 4902,col 14)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testCast2()",
        "snippet": "  public void testCast2() throws Exception {\n    // can upcast to a base type.\n    testTypes(\"/** @constructor */function base() {}\\n\" +\n        \"/** @constructor\\n @extends {base} */function derived() {}\\n\" +\n        \"/** @type {base} */ var baz = new derived();\\n\");\n  }\n",
        "begin_line": 4905,
        "end_line": 4910,
        "comment": "",
        "child_ranges": [
            "(line 4907,col 5)-(line 4909,col 58)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testCast3()",
        "snippet": "  public void testCast3() throws Exception {\n    // cannot downcast\n    testTypes(\"/** @constructor */function base() {}\\n\" +\n        \"/** @constructor @extends {base} */function derived() {}\\n\" +\n        \"/** @type {!derived} */ var baz = new base();\\n\",\n        \"initializing variable\\n\" +\n        \"found   : base\\n\" +\n        \"required: derived\");\n  }\n",
        "begin_line": 4912,
        "end_line": 4920,
        "comment": "",
        "child_ranges": [
            "(line 4914,col 5)-(line 4919,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testCast4()",
        "snippet": "  public void testCast4() throws Exception {\n    // downcast must be explicit\n    testTypes(\"/** @constructor */function base() {}\\n\" +\n        \"/** @constructor\\n * @extends {base} */function derived() {}\\n\" +\n        \"/** @type {!derived} */ var baz = \" +\n        \"/** @type {!derived} */(new base());\\n\");\n  }\n",
        "begin_line": 4922,
        "end_line": 4928,
        "comment": "",
        "child_ranges": [
            "(line 4924,col 5)-(line 4927,col 50)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testCast5()",
        "snippet": "  public void testCast5() throws Exception {\n    // cannot explicitly cast to an unrelated type\n    testTypes(\"/** @constructor */function foo() {}\\n\" +\n        \"/** @constructor */function bar() {}\\n\" +\n        \"var baz = /** @type {!foo} */(new bar);\\n\",\n        \"invalid cast - must be a subtype or supertype\\n\" +\n        \"from: bar\\n\" +\n        \"to  : foo\");\n  }\n",
        "begin_line": 4930,
        "end_line": 4938,
        "comment": "",
        "child_ranges": [
            "(line 4932,col 5)-(line 4937,col 21)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testCast6()",
        "snippet": "  public void testCast6() throws Exception {\n    // can explicitly cast to a subtype or supertype\n    testTypes(\"/** @constructor */function foo() {}\\n\" +\n        \"/** @constructor \\n @extends foo */function bar() {}\\n\" +\n        \"var baz = /** @type {!bar} */(new bar);\\n\" +\n        \"var baz = /** @type {!foo} */(new foo);\\n\" +\n        \"var baz = /** @type {bar} */(new bar);\\n\" +\n        \"var baz = /** @type {foo} */(new foo);\\n\" +\n        \"var baz = /** @type {!foo} */(new bar);\\n\" +\n        \"var baz = /** @type {!bar} */(new foo);\\n\" +\n        \"var baz = /** @type {foo} */(new bar);\\n\" +\n        \"var baz = /** @type {bar} */(new foo);\\n\");\n  }\n",
        "begin_line": 4940,
        "end_line": 4952,
        "comment": "",
        "child_ranges": [
            "(line 4942,col 5)-(line 4951,col 52)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testCast7()",
        "snippet": "  public void testCast7() throws Exception {\n    testTypes(\"var x = /** @type {foo} */ (new Object());\",\n        \"Bad type annotation. Unknown type foo\");\n  }\n",
        "begin_line": 4954,
        "end_line": 4957,
        "comment": "",
        "child_ranges": [
            "(line 4955,col 5)-(line 4956,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testCast8()",
        "snippet": "  public void testCast8() throws Exception {\n    testTypes(\"function f() { return /** @type {foo} */ (new Object()); }\",\n        \"Bad type annotation. Unknown type foo\");\n  }\n",
        "begin_line": 4959,
        "end_line": 4962,
        "comment": "",
        "child_ranges": [
            "(line 4960,col 5)-(line 4961,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testCast9()",
        "snippet": "  public void testCast9() throws Exception {\n    testTypes(\"var foo = {};\" +\n        \"function f() { return /** @type {foo} */ (new Object()); }\",\n        \"Bad type annotation. Unknown type foo\");\n  }\n",
        "begin_line": 4964,
        "end_line": 4968,
        "comment": "",
        "child_ranges": [
            "(line 4965,col 5)-(line 4967,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testCast10()",
        "snippet": "  public void testCast10() throws Exception {\n    testTypes(\"var foo = function() {};\" +\n        \"function f() { return /** @type {foo} */ (new Object()); }\",\n        \"Bad type annotation. Unknown type foo\");\n  }\n",
        "begin_line": 4970,
        "end_line": 4974,
        "comment": "",
        "child_ranges": [
            "(line 4971,col 5)-(line 4973,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testCast11()",
        "snippet": "  public void testCast11() throws Exception {\n    testTypes(\"var goog = {}; goog.foo = {};\" +\n        \"function f() { return /** @type {goog.foo} */ (new Object()); }\",\n        \"Bad type annotation. Unknown type goog.foo\");\n  }\n",
        "begin_line": 4976,
        "end_line": 4980,
        "comment": "",
        "child_ranges": [
            "(line 4977,col 5)-(line 4979,col 54)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testCast12()",
        "snippet": "  public void testCast12() throws Exception {\n    testTypes(\"var goog = {}; goog.foo = function() {};\" +\n        \"function f() { return /** @type {goog.foo} */ (new Object()); }\",\n        \"Bad type annotation. Unknown type goog.foo\");\n  }\n",
        "begin_line": 4982,
        "end_line": 4986,
        "comment": "",
        "child_ranges": [
            "(line 4983,col 5)-(line 4985,col 54)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testCast13()",
        "snippet": "  public void testCast13() throws Exception {\n    // Test to make sure that the forward-declaration still allows for\n    // a warning.\n    testClosureTypes(\"var goog = {}; \" +\n        \"goog.addDependency('zzz.js', ['goog.foo'], []);\" +\n        \"goog.foo = function() {};\" +\n        \"function f() { return /** @type {goog.foo} */ (new Object()); }\",\n        \"Bad type annotation. Unknown type goog.foo\");\n  }\n",
        "begin_line": 4988,
        "end_line": 4996,
        "comment": "",
        "child_ranges": [
            "(line 4991,col 5)-(line 4995,col 54)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testCast14()",
        "snippet": "  public void testCast14() throws Exception {\n    // Test to make sure that the forward-declaration still prevents\n    // some warnings.\n    testClosureTypes(\"var goog = {}; \" +\n        \"goog.addDependency('zzz.js', ['goog.bar'], []);\" +\n        \"function f() { return /** @type {goog.bar} */ (new Object()); }\",\n        null);\n  }\n",
        "begin_line": 4998,
        "end_line": 5005,
        "comment": "",
        "child_ranges": [
            "(line 5001,col 5)-(line 5004,col 14)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testCast15()",
        "snippet": "  public void testCast15() throws Exception {\n    // This fixes a bug where a type cast on an object literal\n    // would cause a runtime cast exception if the node was visited\n    // more than once.\n    //\n    // Some code assumes that an object literal must have a object type,\n    // while because of the cast, it could have any type (including\n    // a union).\n    testTypes(\n        \"for (var i = 0; i < 10; i++) {\" +\n          \"var x = /** @type {Object|number} */ ({foo: 3});\" +\n          \"/** @param {boolean} x */ function f(x) {}\" +\n          \"f(x.foo);\" +\n          \"f([].foo);\" +\n        \"}\",\n        \"Property foo never defined on Array\");\n  }\n",
        "begin_line": 5007,
        "end_line": 5023,
        "comment": "",
        "child_ranges": [
            "(line 5015,col 5)-(line 5022,col 47)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testCast16()",
        "snippet": "  public void testCast16() throws Exception {\n    // Mostly verifying that rhino actually understands these JsDocs.\n    testTypes(\"/** @constructor */ function Foo() {} \\n\" +\n        \"/** @type {Foo} */ var x = /** @type {Foo} */ ({})\");\n\n    testTypes(\"/** @constructor */ function Foo() {} \\n\" +\n        \"/** @type {Foo} */ var x = (/** @type {Foo} */ {})\");\n\n    // Not really encourage because of possible ambiguity but it works.\n    testTypes(\"/** @constructor */ function Foo() {} \\n\" +\n        \"/** @type {Foo} */ var x = /** @type {Foo} */ {}\");\n  }\n",
        "begin_line": 5025,
        "end_line": 5036,
        "comment": "",
        "child_ranges": [
            "(line 5027,col 5)-(line 5028,col 62)",
            "(line 5030,col 5)-(line 5031,col 62)",
            "(line 5034,col 5)-(line 5035,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testNestedCasts()",
        "snippet": "  public void testNestedCasts() throws Exception {\n    testTypes(\"/** @constructor */var T = function() {};\\n\" +\n        \"/** @constructor */var V = function() {};\\n\" +\n        \"/**\\n\" +\n        \"* @param {boolean} b\\n\" +\n        \"* @return {T|V}\\n\" +\n        \"*/\\n\" +\n        \"function f(b) { return b ? new T() : new V(); }\\n\" +\n        \"/**\\n\" +\n        \"* @param {boolean} b\\n\" +\n        \"* @return {boolean|undefined}\\n\" +\n        \"*/\\n\" +\n        \"function g(b) { return b ? true : undefined; }\\n\" +\n        \"/** @return {T} */\\n\" +\n        \"function h() {\\n\" +\n        \"return /** @type {T} */ (f(/** @type {boolean} */ (g(true))));\\n\" +\n        \"}\");\n  }\n",
        "begin_line": 5038,
        "end_line": 5055,
        "comment": "",
        "child_ranges": [
            "(line 5039,col 5)-(line 5054,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testNativeCast1()",
        "snippet": "  public void testNativeCast1() throws Exception {\n    testTypes(\n        \"/** @param {number} x */ function f(x) {}\" +\n        \"f(String(true));\",\n        \"actual parameter 1 of f does not match formal parameter\\n\" +\n        \"found   : string\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 5057,
        "end_line": 5064,
        "comment": "",
        "child_ranges": [
            "(line 5058,col 5)-(line 5063,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testNativeCast2()",
        "snippet": "  public void testNativeCast2() throws Exception {\n    testTypes(\n        \"/** @param {string} x */ function f(x) {}\" +\n        \"f(Number(true));\",\n        \"actual parameter 1 of f does not match formal parameter\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 5066,
        "end_line": 5073,
        "comment": "",
        "child_ranges": [
            "(line 5067,col 5)-(line 5072,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testNativeCast3()",
        "snippet": "  public void testNativeCast3() throws Exception {\n    testTypes(\n        \"/** @param {number} x */ function f(x) {}\" +\n        \"f(Boolean(''));\",\n        \"actual parameter 1 of f does not match formal parameter\\n\" +\n        \"found   : boolean\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 5075,
        "end_line": 5082,
        "comment": "",
        "child_ranges": [
            "(line 5076,col 5)-(line 5081,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testNativeCast4()",
        "snippet": "  public void testNativeCast4() throws Exception {\n    testTypes(\n        \"/** @param {number} x */ function f(x) {}\" +\n        \"f(Error(''));\",\n        \"actual parameter 1 of f does not match formal parameter\\n\" +\n        \"found   : Error\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 5084,
        "end_line": 5091,
        "comment": "",
        "child_ranges": [
            "(line 5085,col 5)-(line 5090,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testBadConstructorCall()",
        "snippet": "  public void testBadConstructorCall() throws Exception {\n    testTypes(\n        \"/** @constructor */ function Foo() {}\" +\n        \"Foo();\",\n        \"Constructor function (new:Foo): undefined should be called \" +\n        \"with the \\\"new\\\" keyword\");\n  }\n",
        "begin_line": 5093,
        "end_line": 5099,
        "comment": "",
        "child_ranges": [
            "(line 5094,col 5)-(line 5098,col 36)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testTypeof()",
        "snippet": "  public void testTypeof() throws Exception {\n    testTypes(\"/**@return {void}*/function foo(){ var a = typeof foo(); }\");\n  }\n",
        "begin_line": 5101,
        "end_line": 5103,
        "comment": "",
        "child_ranges": [
            "(line 5102,col 5)-(line 5102,col 76)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testConstructorType1()",
        "snippet": "  public void testConstructorType1() throws Exception {\n    testTypes(\"/**@constructor*/function Foo(){}\" +\n        \"/**@type{!Foo}*/var f = new Date();\",\n        \"initializing variable\\n\" +\n        \"found   : Date\\n\" +\n        \"required: Foo\");\n  }\n",
        "begin_line": 5105,
        "end_line": 5111,
        "comment": "",
        "child_ranges": [
            "(line 5106,col 5)-(line 5110,col 25)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testConstructorType2()",
        "snippet": "  public void testConstructorType2() throws Exception {\n    testTypes(\"/**@constructor*/function Foo(){\\n\" +\n        \"/**@type{Number}*/this.bar = new Number(5);\\n\" +\n        \"}\\n\" +\n        \"/**@type{Foo}*/var f = new Foo();\\n\" +\n        \"/**@type{Number}*/var n = f.bar;\");\n  }\n",
        "begin_line": 5113,
        "end_line": 5119,
        "comment": "",
        "child_ranges": [
            "(line 5114,col 5)-(line 5118,col 44)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testConstructorType3()",
        "snippet": "  public void testConstructorType3() throws Exception {\n    // Reverse the declaration order so that we know that Foo is getting set\n    // even on an out-of-order declaration sequence.\n    testTypes(\"/**@type{Foo}*/var f = new Foo();\\n\" +\n        \"/**@type{Number}*/var n = f.bar;\" +\n        \"/**@constructor*/function Foo(){\\n\" +\n        \"/**@type{Number}*/this.bar = new Number(5);\\n\" +\n        \"}\\n\");\n  }\n",
        "begin_line": 5121,
        "end_line": 5129,
        "comment": "",
        "child_ranges": [
            "(line 5124,col 5)-(line 5128,col 15)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testConstructorType4()",
        "snippet": "  public void testConstructorType4() throws Exception {\n    testTypes(\"/**@constructor*/function Foo(){\\n\" +\n        \"/**@type{!Number}*/this.bar = new Number(5);\\n\" +\n        \"}\\n\" +\n        \"/**@type{!Foo}*/var f = new Foo();\\n\" +\n        \"/**@type{!String}*/var n = f.bar;\",\n        \"initializing variable\\n\" +\n        \"found   : Number\\n\" +\n        \"required: String\");\n  }\n",
        "begin_line": 5131,
        "end_line": 5140,
        "comment": "",
        "child_ranges": [
            "(line 5132,col 5)-(line 5139,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testConstructorType5()",
        "snippet": "  public void testConstructorType5() throws Exception {\n    testTypes(\"/**@constructor*/function Foo(){}\\n\" +\n        \"if (Foo){}\\n\");\n  }\n",
        "begin_line": 5142,
        "end_line": 5145,
        "comment": "",
        "child_ranges": [
            "(line 5143,col 5)-(line 5144,col 24)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testConstructorType6()",
        "snippet": "  public void testConstructorType6() throws Exception {\n    testTypes(\"/** @constructor */\\n\" +\n        \"function bar() {}\\n\" +\n        \"function _foo() {\\n\" +\n        \" /** @param {bar} x */\\n\" +\n        \"  function f(x) {}\\n\" +\n        \"}\");\n  }\n",
        "begin_line": 5147,
        "end_line": 5154,
        "comment": "",
        "child_ranges": [
            "(line 5148,col 5)-(line 5153,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testConstructorType7()",
        "snippet": "  public void testConstructorType7() throws Exception {\n    TypeCheckResult p =\n        parseAndTypeCheckWithScope(\"/** @constructor */function A(){};\");\n\n    JSType type = p.scope.getVar(\"A\").getType();\n    assertTrue(type instanceof FunctionType);\n    FunctionType fType = (FunctionType) type;\n    assertEquals(\"A\", fType.getReferenceName());\n  }\n",
        "begin_line": 5156,
        "end_line": 5164,
        "comment": "",
        "child_ranges": [
            "(line 5157,col 5)-(line 5158,col 73)",
            "(line 5160,col 5)-(line 5160,col 48)",
            "(line 5161,col 5)-(line 5161,col 45)",
            "(line 5162,col 5)-(line 5162,col 45)",
            "(line 5163,col 5)-(line 5163,col 48)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testAnonymousType1()",
        "snippet": "  public void testAnonymousType1() throws Exception {\n    testTypes(\"function f() {}\" +\n        \"/** @constructor */\\n\" +\n        \"f().bar = function() {};\");\n  }\n",
        "begin_line": 5166,
        "end_line": 5170,
        "comment": "",
        "child_ranges": [
            "(line 5167,col 5)-(line 5169,col 36)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testAnonymousType2()",
        "snippet": "  public void testAnonymousType2() throws Exception {\n    testTypes(\"function f() {}\" +\n        \"/** @interface */\\n\" +\n        \"f().bar = function() {};\");\n  }\n",
        "begin_line": 5172,
        "end_line": 5176,
        "comment": "",
        "child_ranges": [
            "(line 5173,col 5)-(line 5175,col 36)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testAnonymousType3()",
        "snippet": "  public void testAnonymousType3() throws Exception {\n    testTypes(\"function f() {}\" +\n        \"/** @enum */\\n\" +\n        \"f().bar = {FOO: 1};\");\n  }\n",
        "begin_line": 5178,
        "end_line": 5182,
        "comment": "",
        "child_ranges": [
            "(line 5179,col 5)-(line 5181,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testBang1()",
        "snippet": "  public void testBang1() throws Exception {\n    testTypes(\"/** @param {Object} x\\n@return {!Object} */\\n\" +\n        \"function f(x) { return x; }\",\n        \"inconsistent return type\\n\" +\n        \"found   : (Object|null|undefined)\\n\" +\n        \"required: Object\");\n  }\n",
        "begin_line": 5184,
        "end_line": 5190,
        "comment": "",
        "child_ranges": [
            "(line 5185,col 5)-(line 5189,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testBang2()",
        "snippet": "  public void testBang2() throws Exception {\n    testTypes(\"/** @param {Object} x\\n@return {!Object} */\\n\" +\n        \"function f(x) { return x ? x : new Object(); }\");\n  }\n",
        "begin_line": 5192,
        "end_line": 5195,
        "comment": "",
        "child_ranges": [
            "(line 5193,col 5)-(line 5194,col 58)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testBang3()",
        "snippet": "  public void testBang3() throws Exception {\n    testTypes(\"/** @param {Object} x\\n@return {!Object} */\\n\" +\n        \"function f(x) { return /** @type {!Object} */ (x); }\");\n  }\n",
        "begin_line": 5197,
        "end_line": 5200,
        "comment": "",
        "child_ranges": [
            "(line 5198,col 5)-(line 5199,col 64)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testBang4()",
        "snippet": "  public void testBang4() throws Exception {\n    testTypes(\"/**@param {Object} x\\n@param {Object} y\\n@return {boolean}*/\\n\" +\n        \"function f(x, y) {\\n\" +\n        \"if (typeof x != 'undefined') { return x == y; }\\n\" +\n        \"else { return x != y; }\\n}\");\n  }\n",
        "begin_line": 5202,
        "end_line": 5207,
        "comment": "",
        "child_ranges": [
            "(line 5203,col 5)-(line 5206,col 38)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testBang5()",
        "snippet": "  public void testBang5() throws Exception {\n    testTypes(\"/**@param {Object} x\\n@param {Object} y\\n@return {boolean}*/\\n\" +\n        \"function f(x, y) { return !!x && x == y; }\");\n  }\n",
        "begin_line": 5209,
        "end_line": 5212,
        "comment": "",
        "child_ranges": [
            "(line 5210,col 5)-(line 5211,col 54)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testBang6()",
        "snippet": "  public void testBang6() throws Exception {\n    testTypes(\"/** @param {Object?} x\\n@return {Object} */\\n\" +\n        \"function f(x) { return x; }\");\n  }\n",
        "begin_line": 5214,
        "end_line": 5217,
        "comment": "",
        "child_ranges": [
            "(line 5215,col 5)-(line 5216,col 39)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testBang7()",
        "snippet": "  public void testBang7() throws Exception {\n    testTypes(\"/**@param {(Object,string,null)} x\\n\" +\n        \"@return {(Object,string)}*/function f(x) { return x; }\");\n  }\n",
        "begin_line": 5219,
        "end_line": 5222,
        "comment": "",
        "child_ranges": [
            "(line 5220,col 5)-(line 5221,col 66)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testDefinePropertyOnNullableObject1()",
        "snippet": "  public void testDefinePropertyOnNullableObject1() throws Exception {\n    testTypes(\"/** @type {Object} */ var n = {};\\n\" +\n        \"/** @type {number} */ n.x = 1;\\n\" +\n        \"/** @return {boolean} */function f() { return n.x; }\",\n        \"inconsistent return type\\n\" +\n        \"found   : number\\n\" +\n        \"required: boolean\");\n  }\n",
        "begin_line": 5224,
        "end_line": 5231,
        "comment": "",
        "child_ranges": [
            "(line 5225,col 5)-(line 5230,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testDefinePropertyOnNullableObject2()",
        "snippet": "  public void testDefinePropertyOnNullableObject2() throws Exception {\n    testTypes(\"/** @constructor */ var T = function() {};\\n\" +\n        \"/** @param {T} t\\n@return {boolean} */function f(t) {\\n\" +\n        \"t.x = 1; return t.x; }\",\n        \"inconsistent return type\\n\" +\n        \"found   : number\\n\" +\n        \"required: boolean\");\n  }\n",
        "begin_line": 5233,
        "end_line": 5240,
        "comment": "",
        "child_ranges": [
            "(line 5234,col 5)-(line 5239,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testUnknownConstructorInstanceType1()",
        "snippet": "  public void testUnknownConstructorInstanceType1() throws Exception {\n    testTypes(\"/** @return {Array} */ function g(f) { return new f(); }\");\n  }\n",
        "begin_line": 5242,
        "end_line": 5244,
        "comment": "",
        "child_ranges": [
            "(line 5243,col 5)-(line 5243,col 74)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testUnknownConstructorInstanceType2()",
        "snippet": "  public void testUnknownConstructorInstanceType2() throws Exception {\n    testTypes(\"function g(f) { return /** @type Array */ new f(); }\");\n  }\n",
        "begin_line": 5246,
        "end_line": 5248,
        "comment": "",
        "child_ranges": [
            "(line 5247,col 5)-(line 5247,col 70)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testUnknownConstructorInstanceType3()",
        "snippet": "  public void testUnknownConstructorInstanceType3() throws Exception {\n    testTypes(\"function g(f) { var x = new f(); x.a = 1; return x; }\");\n  }\n",
        "begin_line": 5250,
        "end_line": 5252,
        "comment": "",
        "child_ranges": [
            "(line 5251,col 5)-(line 5251,col 71)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testUnknownPrototypeChain()",
        "snippet": "  public void testUnknownPrototypeChain() throws Exception {\n    testTypes(\"/**\\n\" +\n              \"* @param {Object} co\\n\" +\n              \" * @return {Object}\\n\" +\n              \" */\\n\" +\n              \"function inst(co) {\\n\" +\n              \" /** @constructor */\\n\" +\n              \" var c = function() {};\\n\" +\n              \" c.prototype = co.prototype;\\n\" +\n              \" return new c;\\n\" +\n              \"}\");\n  }\n",
        "begin_line": 5254,
        "end_line": 5265,
        "comment": "",
        "child_ranges": [
            "(line 5255,col 5)-(line 5264,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testNamespacedConstructor()",
        "snippet": "  public void testNamespacedConstructor() throws Exception {\n    Node root = parseAndTypeCheck(\n        \"var goog = {};\" +\n        \"/** @constructor */ goog.MyClass = function() {};\" +\n        \"/** @return {!goog.MyClass} */ \" +\n        \"function foo() { return new goog.MyClass(); }\");\n\n    JSType typeOfFoo = root.getLastChild().getJSType();\n    assert(typeOfFoo instanceof FunctionType);\n\n    JSType retType = ((FunctionType) typeOfFoo).getReturnType();\n    assert(retType instanceof ObjectType);\n    assertEquals(\"goog.MyClass\", ((ObjectType) retType).getReferenceName());\n  }\n",
        "begin_line": 5267,
        "end_line": 5280,
        "comment": "",
        "child_ranges": [
            "(line 5268,col 5)-(line 5272,col 57)",
            "(line 5274,col 5)-(line 5274,col 55)",
            "(line 5275,col 5)-(line 5275,col 46)",
            "(line 5277,col 5)-(line 5277,col 64)",
            "(line 5278,col 5)-(line 5278,col 42)",
            "(line 5279,col 5)-(line 5279,col 76)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testComplexNamespace()",
        "snippet": "  public void testComplexNamespace() throws Exception {\n    String js =\n      \"var goog = {};\" +\n      \"goog.foo = {};\" +\n      \"goog.foo.bar = 5;\";\n\n    TypeCheckResult p = parseAndTypeCheckWithScope(js);\n\n    // goog type in the scope\n    JSType googScopeType = p.scope.getVar(\"goog\").getType();\n    assertTrue(googScopeType instanceof ObjectType);\n    assertTrue(\"foo property not present on goog type\",\n        ((ObjectType) googScopeType).hasProperty(\"foo\"));\n    assertFalse(\"bar property present on goog type\",\n        ((ObjectType) googScopeType).hasProperty(\"bar\"));\n\n    // goog type on the VAR node\n    Node varNode = p.root.getFirstChild();\n    assertEquals(Token.VAR, varNode.getType());\n    JSType googNodeType = varNode.getFirstChild().getJSType();\n    assertTrue(googNodeType instanceof ObjectType);\n\n    // goog scope type and goog type on VAR node must be the same\n    assertTrue(googScopeType == googNodeType);\n\n    // goog type on the left of the GETPROP node (under fist ASSIGN)\n    Node getpropFoo1 = varNode.getNext().getFirstChild().getFirstChild();\n    assertEquals(Token.GETPROP, getpropFoo1.getType());\n    assertEquals(\"goog\", getpropFoo1.getFirstChild().getString());\n    JSType googGetpropFoo1Type = getpropFoo1.getFirstChild().getJSType();\n    assertTrue(googGetpropFoo1Type instanceof ObjectType);\n\n    // still the same type as the one on the variable\n    assertTrue(googGetpropFoo1Type == googScopeType);\n\n    // the foo property should be defined on goog\n    JSType googFooType = ((ObjectType) googScopeType).getPropertyType(\"foo\");\n    assertTrue(googFooType instanceof ObjectType);\n\n    // goog type on the left of the GETPROP lower level node\n    // (under second ASSIGN)\n    Node getpropFoo2 = varNode.getNext().getNext()\n        .getFirstChild().getFirstChild().getFirstChild();\n    assertEquals(Token.GETPROP, getpropFoo2.getType());\n    assertEquals(\"goog\", getpropFoo2.getFirstChild().getString());\n    JSType googGetpropFoo2Type = getpropFoo2.getFirstChild().getJSType();\n    assertTrue(googGetpropFoo2Type instanceof ObjectType);\n\n    // still the same type as the one on the variable\n    assertTrue(googGetpropFoo2Type == googScopeType);\n\n    // goog.foo type on the left of the top level GETPROP node\n    // (under second ASSIGN)\n    JSType googFooGetprop2Type = getpropFoo2.getJSType();\n    assertTrue(\"goog.foo incorrectly annotated in goog.foo.bar selection\",\n        googFooGetprop2Type instanceof ObjectType);\n    ObjectType googFooGetprop2ObjectType = (ObjectType) googFooGetprop2Type;\n    assertFalse(\"foo property present on goog.foo type\",\n        googFooGetprop2ObjectType.hasProperty(\"foo\"));\n    assertTrue(\"bar property not present on goog.foo type\",\n        googFooGetprop2ObjectType.hasProperty(\"bar\"));\n    assertEquals(\"bar property on goog.foo type incorrectly inferred\",\n        NUMBER_TYPE, googFooGetprop2ObjectType.getPropertyType(\"bar\"));\n  }\n",
        "begin_line": 5282,
        "end_line": 5345,
        "comment": "",
        "child_ranges": [
            "(line 5283,col 5)-(line 5286,col 26)",
            "(line 5288,col 5)-(line 5288,col 55)",
            "(line 5291,col 5)-(line 5291,col 60)",
            "(line 5292,col 5)-(line 5292,col 52)",
            "(line 5293,col 5)-(line 5294,col 57)",
            "(line 5295,col 5)-(line 5296,col 57)",
            "(line 5299,col 5)-(line 5299,col 42)",
            "(line 5300,col 5)-(line 5300,col 47)",
            "(line 5301,col 5)-(line 5301,col 62)",
            "(line 5302,col 5)-(line 5302,col 51)",
            "(line 5305,col 5)-(line 5305,col 46)",
            "(line 5308,col 5)-(line 5308,col 73)",
            "(line 5309,col 5)-(line 5309,col 55)",
            "(line 5310,col 5)-(line 5310,col 66)",
            "(line 5311,col 5)-(line 5311,col 73)",
            "(line 5312,col 5)-(line 5312,col 58)",
            "(line 5315,col 5)-(line 5315,col 53)",
            "(line 5318,col 5)-(line 5318,col 77)",
            "(line 5319,col 5)-(line 5319,col 50)",
            "(line 5323,col 5)-(line 5324,col 57)",
            "(line 5325,col 5)-(line 5325,col 55)",
            "(line 5326,col 5)-(line 5326,col 66)",
            "(line 5327,col 5)-(line 5327,col 73)",
            "(line 5328,col 5)-(line 5328,col 58)",
            "(line 5331,col 5)-(line 5331,col 53)",
            "(line 5335,col 5)-(line 5335,col 57)",
            "(line 5336,col 5)-(line 5337,col 51)",
            "(line 5338,col 5)-(line 5338,col 76)",
            "(line 5339,col 5)-(line 5340,col 54)",
            "(line 5341,col 5)-(line 5342,col 54)",
            "(line 5343,col 5)-(line 5344,col 71)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testAddingMethodsUsingPrototypeIdiomSimpleNamespace()",
        "snippet": "  public void testAddingMethodsUsingPrototypeIdiomSimpleNamespace()\n      throws Exception {\n    Node js1Node = parseAndTypeCheck(\n        \"/** @constructor */function A() {}\" +\n        \"A.prototype.m1 = 5\");\n\n    ObjectType instanceType = getInstanceType(js1Node);\n    assertEquals(NATIVE_PROPERTIES_COUNT + 1,\n        instanceType.getPropertiesCount());\n    checkObjectType(instanceType, \"m1\", NUMBER_TYPE);\n  }\n",
        "begin_line": 5347,
        "end_line": 5357,
        "comment": "",
        "child_ranges": [
            "(line 5349,col 5)-(line 5351,col 30)",
            "(line 5353,col 5)-(line 5353,col 55)",
            "(line 5354,col 5)-(line 5355,col 43)",
            "(line 5356,col 5)-(line 5356,col 53)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testAddingMethodsUsingPrototypeIdiomComplexNamespace1()",
        "snippet": "  public void testAddingMethodsUsingPrototypeIdiomComplexNamespace1()\n      throws Exception {\n    TypeCheckResult p = parseAndTypeCheckWithScope(\n        \"var goog = {};\" +\n        \"goog.A = /** @constructor */function() {};\" +\n        \"/** @type number */goog.A.prototype.m1 = 5\");\n\n    testAddingMethodsUsingPrototypeIdiomComplexNamespace(p);\n  }\n",
        "begin_line": 5359,
        "end_line": 5367,
        "comment": "",
        "child_ranges": [
            "(line 5361,col 5)-(line 5364,col 54)",
            "(line 5366,col 5)-(line 5366,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testAddingMethodsUsingPrototypeIdiomComplexNamespace2()",
        "snippet": "  public void testAddingMethodsUsingPrototypeIdiomComplexNamespace2()\n      throws Exception {\n    TypeCheckResult p = parseAndTypeCheckWithScope(\n        \"var goog = {};\" +\n        \"/** @constructor */goog.A = function() {};\" +\n        \"/** @type number */goog.A.prototype.m1 = 5\");\n\n    testAddingMethodsUsingPrototypeIdiomComplexNamespace(p);\n  }\n",
        "begin_line": 5369,
        "end_line": 5377,
        "comment": "",
        "child_ranges": [
            "(line 5371,col 5)-(line 5374,col 54)",
            "(line 5376,col 5)-(line 5376,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testAddingMethodsUsingPrototypeIdiomComplexNamespace(com.google.javascript.jscomp.LooseTypeCheckTest.TypeCheckResult)",
        "snippet": "  private void testAddingMethodsUsingPrototypeIdiomComplexNamespace(\n      TypeCheckResult p) {\n    ObjectType goog = (ObjectType) p.scope.getVar(\"goog\").getType();\n    assertEquals(NATIVE_PROPERTIES_COUNT + 1, goog.getPropertiesCount());\n    JSType googA = goog.getPropertyType(\"A\");\n    assertNotNull(googA);\n    assertTrue(googA instanceof FunctionType);\n    FunctionType googAFunction = (FunctionType) googA;\n    ObjectType classA = googAFunction.getInstanceType();\n    assertEquals(NATIVE_PROPERTIES_COUNT + 1, classA.getPropertiesCount());\n    checkObjectType(classA, \"m1\", NUMBER_TYPE);\n  }\n",
        "begin_line": 5379,
        "end_line": 5390,
        "comment": "",
        "child_ranges": [
            "(line 5381,col 5)-(line 5381,col 68)",
            "(line 5382,col 5)-(line 5382,col 73)",
            "(line 5383,col 5)-(line 5383,col 45)",
            "(line 5384,col 5)-(line 5384,col 25)",
            "(line 5385,col 5)-(line 5385,col 46)",
            "(line 5386,col 5)-(line 5386,col 54)",
            "(line 5387,col 5)-(line 5387,col 56)",
            "(line 5388,col 5)-(line 5388,col 75)",
            "(line 5389,col 5)-(line 5389,col 47)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testAddingMethodsPrototypeIdiomAndObjectLiteralSimpleNamespace()",
        "snippet": "  public void testAddingMethodsPrototypeIdiomAndObjectLiteralSimpleNamespace()\n      throws Exception {\n    Node js1Node = parseAndTypeCheck(\n        \"/** @constructor */function A() {}\" +\n        \"A.prototype = {m1: 5, m2: true}\");\n\n    ObjectType instanceType = getInstanceType(js1Node);\n    assertEquals(NATIVE_PROPERTIES_COUNT + 2,\n        instanceType.getPropertiesCount());\n    checkObjectType(instanceType, \"m1\", NUMBER_TYPE);\n    checkObjectType(instanceType, \"m2\", BOOLEAN_TYPE);\n  }\n",
        "begin_line": 5392,
        "end_line": 5403,
        "comment": "",
        "child_ranges": [
            "(line 5394,col 5)-(line 5396,col 43)",
            "(line 5398,col 5)-(line 5398,col 55)",
            "(line 5399,col 5)-(line 5400,col 43)",
            "(line 5401,col 5)-(line 5401,col 53)",
            "(line 5402,col 5)-(line 5402,col 54)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testDontAddMethodsIfNoConstructor()",
        "snippet": "  public void testDontAddMethodsIfNoConstructor()\n      throws Exception {\n    Node js1Node = parseAndTypeCheck(\n        \"function A() {}\" +\n        \"A.prototype = {m1: 5, m2: true}\");\n\n    JSType functionAType = js1Node.getFirstChild().getJSType();\n    assertEquals(\"function (): undefined\", functionAType.toString());\n    assertEquals(UNKNOWN_TYPE,\n        U2U_FUNCTION_TYPE.getPropertyType(\"m1\"));\n    assertEquals(UNKNOWN_TYPE,\n        U2U_FUNCTION_TYPE.getPropertyType(\"m2\"));\n  }\n",
        "begin_line": 5405,
        "end_line": 5417,
        "comment": "",
        "child_ranges": [
            "(line 5407,col 5)-(line 5409,col 43)",
            "(line 5411,col 5)-(line 5411,col 63)",
            "(line 5412,col 5)-(line 5412,col 69)",
            "(line 5413,col 5)-(line 5414,col 49)",
            "(line 5415,col 5)-(line 5416,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testFunctionAssignement()",
        "snippet": "  public void testFunctionAssignement() throws Exception {\n    testTypes(\"/**\" +\n        \"* @param {string} ph0\" +\n        \"* @param {string} ph1\" +\n        \"* @return {string}\" +\n        \"*/\" +\n        \"function MSG_CALENDAR_ACCESS_ERROR(ph0, ph1) {return ''}\" +\n        \"/** @type {Function} */\" +\n        \"var MSG_CALENDAR_ADD_ERROR = MSG_CALENDAR_ACCESS_ERROR;\");\n  }\n",
        "begin_line": 5419,
        "end_line": 5428,
        "comment": "",
        "child_ranges": [
            "(line 5420,col 5)-(line 5427,col 67)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testAddMethodsPrototypeTwoWays()",
        "snippet": "  public void testAddMethodsPrototypeTwoWays() throws Exception {\n    Node js1Node = parseAndTypeCheck(\n        \"/** @constructor */function A() {}\" +\n        \"A.prototype = {m1: 5, m2: true};\" +\n        \"A.prototype.m3 = 'third property!';\");\n\n    ObjectType instanceType = getInstanceType(js1Node);\n    assertEquals(\"A\", instanceType.toString());\n    assertEquals(NATIVE_PROPERTIES_COUNT + 3,\n        instanceType.getPropertiesCount());\n    checkObjectType(instanceType, \"m1\", NUMBER_TYPE);\n    checkObjectType(instanceType, \"m2\", BOOLEAN_TYPE);\n    checkObjectType(instanceType, \"m3\", STRING_TYPE);\n  }\n",
        "begin_line": 5430,
        "end_line": 5443,
        "comment": "",
        "child_ranges": [
            "(line 5431,col 5)-(line 5434,col 47)",
            "(line 5436,col 5)-(line 5436,col 55)",
            "(line 5437,col 5)-(line 5437,col 47)",
            "(line 5438,col 5)-(line 5439,col 43)",
            "(line 5440,col 5)-(line 5440,col 53)",
            "(line 5441,col 5)-(line 5441,col 54)",
            "(line 5442,col 5)-(line 5442,col 53)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testPrototypePropertyTypes()",
        "snippet": "  public void testPrototypePropertyTypes() throws Exception {\n    Node js1Node = parseAndTypeCheck(\n        \"/** @constructor */function A() {\\n\" +\n        \"  /** @type string */ this.m1;\\n\" +\n        \"  /** @type Object? */ this.m2 = {};\\n\" +\n        \"  /** @type boolean */ this.m3;\\n\" +\n        \"}\\n\" +\n        \"/** @type string */ A.prototype.m4;\\n\" +\n        \"/** @type number */ A.prototype.m5 = 0;\\n\" +\n        \"/** @type boolean */ A.prototype.m6;\\n\");\n\n    ObjectType instanceType = getInstanceType(js1Node);\n    assertEquals(NATIVE_PROPERTIES_COUNT + 6,\n        instanceType.getPropertiesCount());\n    checkObjectType(instanceType, \"m1\", STRING_TYPE);\n    checkObjectType(instanceType, \"m2\",\n        createUnionType(createUnionType(OBJECT_TYPE, NULL_TYPE), VOID_TYPE));\n    checkObjectType(instanceType, \"m3\", BOOLEAN_TYPE);\n    checkObjectType(instanceType, \"m4\", STRING_TYPE);\n    checkObjectType(instanceType, \"m5\", NUMBER_TYPE);\n    checkObjectType(instanceType, \"m6\", BOOLEAN_TYPE);\n  }\n",
        "begin_line": 5445,
        "end_line": 5466,
        "comment": "",
        "child_ranges": [
            "(line 5446,col 5)-(line 5454,col 50)",
            "(line 5456,col 5)-(line 5456,col 55)",
            "(line 5457,col 5)-(line 5458,col 43)",
            "(line 5459,col 5)-(line 5459,col 53)",
            "(line 5460,col 5)-(line 5461,col 77)",
            "(line 5462,col 5)-(line 5462,col 54)",
            "(line 5463,col 5)-(line 5463,col 53)",
            "(line 5464,col 5)-(line 5464,col 53)",
            "(line 5465,col 5)-(line 5465,col 54)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testValueTypeBuiltInPrototypePropertyType()",
        "snippet": "  public void testValueTypeBuiltInPrototypePropertyType() throws Exception {\n    Node node = parseAndTypeCheck(\"\\\"x\\\".charAt(0)\");\n    assertEquals(STRING_TYPE, node.getFirstChild().getFirstChild().getJSType());\n  }\n",
        "begin_line": 5468,
        "end_line": 5471,
        "comment": "",
        "child_ranges": [
            "(line 5469,col 5)-(line 5469,col 53)",
            "(line 5470,col 5)-(line 5470,col 80)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testDeclareBuiltInConstructor()",
        "snippet": "  public void testDeclareBuiltInConstructor() throws Exception {\n    // Built-in prototype properties should be accessible\n    // even if the built-in constructor is declared.\n    Node node = parseAndTypeCheck(\n        \"/** @constructor */ var String = function(opt_str) {};\\n\" +\n        \"(new String(\\\"x\\\")).charAt(0)\");\n    assertEquals(STRING_TYPE, node.getLastChild().getFirstChild().getJSType());\n  }\n",
        "begin_line": 5473,
        "end_line": 5480,
        "comment": "",
        "child_ranges": [
            "(line 5476,col 5)-(line 5478,col 41)",
            "(line 5479,col 5)-(line 5479,col 79)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testExtendBuiltInType1()",
        "snippet": "  public void testExtendBuiltInType1() throws Exception {\n    String externs =\n        \"/** @constructor */ var String = function(opt_str) {};\\n\" +\n        \"/**\\n\" +\n        \"* @param {number} start\\n\" +\n        \"* @param {number} opt_length\\n\"  +\n        \"* @return {string}\\n\" +\n        \"*/\\n\" +\n        \"String.prototype.substr = function(start, opt_length) {};\\n\";\n    Node n1 = parseAndTypeCheck(externs + \"(new String(\\\"x\\\")).substr(0,1);\");\n    assertEquals(STRING_TYPE, n1.getLastChild().getFirstChild().getJSType());\n  }\n",
        "begin_line": 5482,
        "end_line": 5493,
        "comment": "",
        "child_ranges": [
            "(line 5483,col 5)-(line 5490,col 70)",
            "(line 5491,col 5)-(line 5491,col 78)",
            "(line 5492,col 5)-(line 5492,col 77)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testExtendBuiltInType2()",
        "snippet": "  public void testExtendBuiltInType2() throws Exception {\n    String externs =\n        \"/** @constructor */ var String = function(opt_str) {};\\n\" +\n        \"/**\\n\" +\n        \"* @param {number} start\\n\" +\n        \"* @param {number} opt_length\\n\"  +\n        \"* @return {string}\\n\" +\n        \"*/\\n\" +\n        \"String.prototype.substr = function(start, opt_length) {};\\n\";\n    Node n2 = parseAndTypeCheck(externs + \"\\\"x\\\".substr(0,1);\");\n    assertEquals(STRING_TYPE, n2.getLastChild().getFirstChild().getJSType());\n  }\n",
        "begin_line": 5495,
        "end_line": 5506,
        "comment": "",
        "child_ranges": [
            "(line 5496,col 5)-(line 5503,col 70)",
            "(line 5504,col 5)-(line 5504,col 64)",
            "(line 5505,col 5)-(line 5505,col 77)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testExtendFunction1()",
        "snippet": "  public void testExtendFunction1() throws Exception {\n    Node n = parseAndTypeCheck(\"/**@return {number}*/Function.prototype.f = \" +\n        \"function() { return 1; };\\n\" +\n        \"(new Function()).f();\");\n    JSType type = n.getLastChild().getLastChild().getJSType();\n    assertEquals(NUMBER_TYPE, type);\n  }\n",
        "begin_line": 5508,
        "end_line": 5514,
        "comment": "",
        "child_ranges": [
            "(line 5509,col 5)-(line 5511,col 33)",
            "(line 5512,col 5)-(line 5512,col 62)",
            "(line 5513,col 5)-(line 5513,col 36)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testExtendFunction2()",
        "snippet": "  public void testExtendFunction2() throws Exception {\n    Node n = parseAndTypeCheck(\"/**@return {number}*/Function.prototype.f = \" +\n        \"function() { return 1; };\\n\" +\n        \"(function() {}).f();\");\n    JSType type = n.getLastChild().getLastChild().getJSType();\n    assertEquals(NUMBER_TYPE, type);\n  }\n",
        "begin_line": 5516,
        "end_line": 5522,
        "comment": "",
        "child_ranges": [
            "(line 5517,col 5)-(line 5519,col 32)",
            "(line 5520,col 5)-(line 5520,col 62)",
            "(line 5521,col 5)-(line 5521,col 36)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testInheritanceCheck1()",
        "snippet": "  public void testInheritanceCheck1() throws Exception {\n    testTypes(\n        \"/** @constructor */function Super() {};\" +\n        \"/** @constructor\\n @extends {Super} */function Sub() {};\" +\n        \"Sub.prototype.foo = function() {};\");\n  }\n",
        "begin_line": 5524,
        "end_line": 5529,
        "comment": "",
        "child_ranges": [
            "(line 5525,col 5)-(line 5528,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testInheritanceCheck2()",
        "snippet": "  public void testInheritanceCheck2() throws Exception {\n    testTypes(\n        \"/** @constructor */function Super() {};\" +\n        \"/** @constructor\\n @extends {Super} */function Sub() {};\" +\n        \"/** @override */Sub.prototype.foo = function() {};\",\n        \"property foo not defined on any superclass of Sub\");\n  }\n",
        "begin_line": 5531,
        "end_line": 5537,
        "comment": "",
        "child_ranges": [
            "(line 5532,col 5)-(line 5536,col 61)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testInheritanceCheck3()",
        "snippet": "  public void testInheritanceCheck3() throws Exception {\n    testTypes(\n        \"/** @constructor */function Super() {};\" +\n        \"Super.prototype.foo = function() {};\" +\n        \"/** @constructor\\n @extends {Super} */function Sub() {};\" +\n        \"Sub.prototype.foo = function() {};\",\n        \"property foo already defined on superclass Super; \" +\n        \"use @override to override it\");\n  }\n",
        "begin_line": 5539,
        "end_line": 5547,
        "comment": "",
        "child_ranges": [
            "(line 5540,col 5)-(line 5546,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testInheritanceCheck4()",
        "snippet": "  public void testInheritanceCheck4() throws Exception {\n    testTypes(\n        \"/** @constructor */function Super() {};\" +\n        \"Super.prototype.foo = function() {};\" +\n        \"/** @constructor\\n @extends {Super} */function Sub() {};\" +\n        \"/** @override */Sub.prototype.foo = function() {};\");\n  }\n",
        "begin_line": 5549,
        "end_line": 5555,
        "comment": "",
        "child_ranges": [
            "(line 5550,col 5)-(line 5554,col 62)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testInheritanceCheck5()",
        "snippet": "  public void testInheritanceCheck5() throws Exception {\n    testTypes(\n        \"/** @constructor */function Root() {};\" +\n        \"Root.prototype.foo = function() {};\" +\n        \"/** @constructor\\n @extends {Root} */function Super() {};\" +\n        \"/** @constructor\\n @extends {Super} */function Sub() {};\" +\n        \"Sub.prototype.foo = function() {};\",\n        \"property foo already defined on superclass Root; \" +\n        \"use @override to override it\");\n  }\n",
        "begin_line": 5557,
        "end_line": 5566,
        "comment": "",
        "child_ranges": [
            "(line 5558,col 5)-(line 5565,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testInheritanceCheck6()",
        "snippet": "  public void testInheritanceCheck6() throws Exception {\n    testTypes(\n        \"/** @constructor */function Root() {};\" +\n        \"Root.prototype.foo = function() {};\" +\n        \"/** @constructor\\n @extends {Root} */function Super() {};\" +\n        \"/** @constructor\\n @extends {Super} */function Sub() {};\" +\n        \"/** @override */Sub.prototype.foo = function() {};\");\n  }\n",
        "begin_line": 5568,
        "end_line": 5575,
        "comment": "",
        "child_ranges": [
            "(line 5569,col 5)-(line 5574,col 62)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testInheritanceCheck7()",
        "snippet": "  public void testInheritanceCheck7() throws Exception {\n    testTypes(\n        \"var goog = {};\" +\n        \"/** @constructor */goog.Super = function() {};\" +\n        \"goog.Super.prototype.foo = 3;\" +\n        \"/** @constructor\\n @extends {goog.Super} */goog.Sub = function() {};\" +\n        \"goog.Sub.prototype.foo = 5;\",\n        \"property foo already defined on superclass goog.Super; \" +\n        \"use @override to override it\");\n  }\n",
        "begin_line": 5577,
        "end_line": 5586,
        "comment": "",
        "child_ranges": [
            "(line 5578,col 5)-(line 5585,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testInheritanceCheck8()",
        "snippet": "  public void testInheritanceCheck8() throws Exception {\n    testTypes(\n        \"var goog = {};\" +\n        \"/** @constructor */goog.Super = function() {};\" +\n        \"goog.Super.prototype.foo = 3;\" +\n        \"/** @constructor\\n @extends {goog.Super} */goog.Sub = function() {};\" +\n        \"/** @override */goog.Sub.prototype.foo = 5;\");\n  }\n",
        "begin_line": 5588,
        "end_line": 5595,
        "comment": "",
        "child_ranges": [
            "(line 5589,col 5)-(line 5594,col 55)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testInheritanceCheck9_1()",
        "snippet": "  public void testInheritanceCheck9_1() throws Exception {\n    testTypes(\n        \"/** @constructor */function Super() {};\" +\n        \"Super.prototype.foo = function() { return 3; };\" +\n        \"/** @constructor\\n @extends {Super} */function Sub() {};\" +\n        \"/** @override\\n @return {number} */Sub.prototype.foo =\\n\" +\n        \"function() { return 1; };\");\n  }\n",
        "begin_line": 5597,
        "end_line": 5604,
        "comment": "",
        "child_ranges": [
            "(line 5598,col 5)-(line 5603,col 37)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testInheritanceCheck9_2()",
        "snippet": "  public void testInheritanceCheck9_2() throws Exception {\n    testTypes(\n        \"/** @constructor */function Super() {};\" +\n        \"/** @return {number} */\" +\n        \"Super.prototype.foo = function() { return 1; };\" +\n        \"/** @constructor\\n @extends {Super} */function Sub() {};\" +\n        \"/** @override */Sub.prototype.foo =\\n\" +\n        \"function() {};\");\n  }\n",
        "begin_line": 5606,
        "end_line": 5614,
        "comment": "",
        "child_ranges": [
            "(line 5607,col 5)-(line 5613,col 26)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testInheritanceCheck9_3()",
        "snippet": "  public void testInheritanceCheck9_3() throws Exception {\n    testTypes(\n        \"/** @constructor */function Super() {};\" +\n        \"/** @return {number} */\" +\n        \"Super.prototype.foo = function() { return 1; };\" +\n        \"/** @constructor\\n @extends {Super} */function Sub() {};\" +\n        \"/** @override\\n @return {string} */Sub.prototype.foo =\\n\" +\n        \"function() { return \\\"some string\\\" };\",\n        \"mismatch of the foo property type and the type of the property it \" +\n        \"overrides from superclass Super\\n\" +\n        \"original: function (this:Super): number\\n\" +\n        \"override: function (this:Sub): string\");\n  }\n",
        "begin_line": 5616,
        "end_line": 5628,
        "comment": "",
        "child_ranges": [
            "(line 5617,col 5)-(line 5627,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testInheritanceCheck10_1()",
        "snippet": "  public void testInheritanceCheck10_1() throws Exception {\n    testTypes(\n        \"/** @constructor */function Root() {};\" +\n        \"Root.prototype.foo = function() { return 4; };\" +\n        \"/** @constructor\\n @extends {Root} */function Super() {};\" +\n        \"/** @constructor\\n @extends {Super} */function Sub() {};\" +\n        \"/** @override\\n @return {number} */Sub.prototype.foo =\\n\" +\n        \"function() { return 1; };\");\n  }\n",
        "begin_line": 5630,
        "end_line": 5638,
        "comment": "",
        "child_ranges": [
            "(line 5631,col 5)-(line 5637,col 37)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testInheritanceCheck10_2()",
        "snippet": "  public void testInheritanceCheck10_2() throws Exception {\n    testTypes(\n        \"/** @constructor */function Root() {};\" +\n        \"/** @return {number} */\" +\n        \"Root.prototype.foo = function() { return 1; };\" +\n        \"/** @constructor\\n @extends {Root} */function Super() {};\" +\n        \"/** @constructor\\n @extends {Super} */function Sub() {};\" +\n        \"/** @override */Sub.prototype.foo =\\n\" +\n        \"function() {};\");\n  }\n",
        "begin_line": 5640,
        "end_line": 5649,
        "comment": "",
        "child_ranges": [
            "(line 5641,col 5)-(line 5648,col 26)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testInheritanceCheck10_3()",
        "snippet": "  public void testInheritanceCheck10_3() throws Exception {\n    testTypes(\n        \"/** @constructor */function Root() {};\" +\n        \"/** @return {number} */\" +\n        \"Root.prototype.foo = function() { return 1; };\" +\n        \"/** @constructor\\n @extends {Root} */function Super() {};\" +\n        \"/** @constructor\\n @extends {Super} */function Sub() {};\" +\n        \"/** @override\\n @return {string} */Sub.prototype.foo =\\n\" +\n        \"function() { return \\\"some string\\\" };\",\n        \"mismatch of the foo property type and the type of the property it \" +\n        \"overrides from superclass Root\\n\" +\n        \"original: function (this:Root): number\\n\" +\n        \"override: function (this:Sub): string\");\n  }\n",
        "begin_line": 5651,
        "end_line": 5664,
        "comment": "",
        "child_ranges": [
            "(line 5652,col 5)-(line 5663,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testInterfaceInheritanceCheck11()",
        "snippet": "  public void testInterfaceInheritanceCheck11() throws Exception {\n    testTypes(\n        \"/** @constructor */function Super() {};\" +\n        \"/** @param {number} bar */Super.prototype.foo = function(bar) {};\" +\n        \"/** @constructor\\n @extends {Super} */function Sub() {};\" +\n        \"/** @override\\n  @param {string} bar */Sub.prototype.foo =\\n\" +\n        \"function(bar) {};\",\n        \"mismatch of the foo property type and the type of the property it \" +\n        \"overrides from superclass Super\\n\" +\n        \"original: function (this:Super, number): undefined\\n\" +\n        \"override: function (this:Sub, string): undefined\");\n  }\n",
        "begin_line": 5666,
        "end_line": 5677,
        "comment": "",
        "child_ranges": [
            "(line 5667,col 5)-(line 5676,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testInheritanceCheck12()",
        "snippet": "  public void testInheritanceCheck12() throws Exception {\n    testTypes(\n        \"var goog = {};\" +\n        \"/** @constructor */goog.Super = function() {};\" +\n        \"goog.Super.prototype.foo = 3;\" +\n        \"/** @constructor\\n @extends {goog.Super} */goog.Sub = function() {};\" +\n        \"/** @override */goog.Sub.prototype.foo = \\\"some string\\\";\",\n        \"mismatch of the foo property type and the type of the property it \" +\n        \"overrides from superclass goog.Super\\n\" +\n        \"original: number\\n\" +\n        \"override: string\");\n  }\n",
        "begin_line": 5679,
        "end_line": 5690,
        "comment": "",
        "child_ranges": [
            "(line 5680,col 5)-(line 5689,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testInheritanceCheck13()",
        "snippet": "  public void testInheritanceCheck13() throws Exception {\n    testTypes(\n        \"var goog = {};\\n\" +\n        \"/** @constructor\\n @extends {goog.Missing} */function Sub() {};\" +\n        \"/** @override */Sub.prototype.foo = function() {};\",\n        \"Bad type annotation. Unknown type goog.Missing\");\n  }\n",
        "begin_line": 5692,
        "end_line": 5698,
        "comment": "",
        "child_ranges": [
            "(line 5693,col 5)-(line 5697,col 58)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testInheritanceCheck14()",
        "snippet": "  public void testInheritanceCheck14() throws Exception {\n    testTypes(\n        \"var goog = {};\\n\" +\n        \"/** @constructor\\n @extends {goog.Missing} */\\n\" +\n        \"goog.Super = function() {};\\n\" +\n        \"/** @constructor\\n @extends {goog.Super} */function Sub() {};\" +\n        \"/** @override */Sub.prototype.foo = function() {};\",\n        \"Bad type annotation. Unknown type goog.Missing\");\n  }\n",
        "begin_line": 5700,
        "end_line": 5708,
        "comment": "",
        "child_ranges": [
            "(line 5701,col 5)-(line 5707,col 58)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testInterfaceInheritanceCheck1()",
        "snippet": "  public void testInterfaceInheritanceCheck1() throws Exception {\n    testTypes(\n        \"/** @interface */function Super() {};\" +\n        \"/** @desc description */Super.prototype.foo = function() {};\" +\n        \"/** @constructor\\n @implements {Super} */function Sub() {};\" +\n        \"Sub.prototype.foo = function() {};\",\n        \"property foo already defined on interface Super; use @override to \" +\n        \"override it\");\n  }\n",
        "begin_line": 5740,
        "end_line": 5748,
        "comment": "",
        "child_ranges": [
            "(line 5741,col 5)-(line 5747,col 23)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testInterfaceInheritanceCheck2()",
        "snippet": "  public void testInterfaceInheritanceCheck2() throws Exception {\n    testTypes(\n        \"/** @interface */function Super() {};\" +\n        \"/** @desc description */Super.prototype.foo = function() {};\" +\n        \"/** @constructor\\n @implements {Super} */function Sub() {};\" +\n        \"/** @override */Sub.prototype.foo = function() {};\");\n  }\n",
        "begin_line": 5750,
        "end_line": 5756,
        "comment": "",
        "child_ranges": [
            "(line 5751,col 5)-(line 5755,col 62)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testInterfaceInheritanceCheck3()",
        "snippet": "  public void testInterfaceInheritanceCheck3() throws Exception {\n    testTypes(\n        \"/** @interface */function Root() {};\" +\n        \"/** @return {number} */Root.prototype.foo = function() {};\" +\n        \"/** @interface\\n @extends {Root} */function Super() {};\" +\n        \"/** @constructor\\n @implements {Super} */function Sub() {};\" +\n        \"/** @return {number} */Sub.prototype.foo = function() { return 1;};\",\n        \"property foo already defined on interface Root; use @override to \" +\n        \"override it\");\n  }\n",
        "begin_line": 5758,
        "end_line": 5767,
        "comment": "",
        "child_ranges": [
            "(line 5759,col 5)-(line 5766,col 23)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testInterfaceInheritanceCheck4()",
        "snippet": "  public void testInterfaceInheritanceCheck4() throws Exception {\n    testTypes(\n        \"/** @interface */function Root() {};\" +\n        \"/** @return {number} */Root.prototype.foo = function() {};\" +\n        \"/** @interface\\n @extends {Root} */function Super() {};\" +\n        \"/** @constructor\\n @implements {Super} */function Sub() {};\" +\n        \"/** @override\\n * @return {number} */Sub.prototype.foo =\\n\" +\n        \"function() { return 1;};\");\n  }\n",
        "begin_line": 5769,
        "end_line": 5777,
        "comment": "",
        "child_ranges": [
            "(line 5770,col 5)-(line 5776,col 36)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testInterfaceInheritanceCheck5()",
        "snippet": "  public void testInterfaceInheritanceCheck5() throws Exception {\n    testTypes(\n        \"/** @interface */function Super() {};\" +\n        \"/** @return {string} */Super.prototype.foo = function() {};\" +\n        \"/** @constructor\\n @implements {Super} */function Sub() {};\" +\n        \"/** @override\\n @return {number} */Sub.prototype.foo =\\n\" +\n        \"function() { return 1; };\",\n        \"mismatch of the foo property type and the type of the property it \" +\n        \"overrides from interface Super\\n\" +\n        \"original: function (this:Super): string\\n\" +\n        \"override: function (this:Sub): number\");\n  }\n",
        "begin_line": 5779,
        "end_line": 5790,
        "comment": "",
        "child_ranges": [
            "(line 5780,col 5)-(line 5789,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testInterfaceInheritanceCheck6()",
        "snippet": "  public void testInterfaceInheritanceCheck6() throws Exception {\n    testTypes(\n        \"/** @interface */function Root() {};\" +\n        \"/** @return {string} */Root.prototype.foo = function() {};\" +\n        \"/** @interface\\n @extends {Root} */function Super() {};\" +\n        \"/** @constructor\\n @implements {Super} */function Sub() {};\" +\n        \"/** @override\\n @return {number} */Sub.prototype.foo =\\n\" +\n        \"function() { return 1; };\",\n        \"mismatch of the foo property type and the type of the property it \" +\n        \"overrides from interface Root\\n\" +\n        \"original: function (this:Root): string\\n\" +\n        \"override: function (this:Sub): number\");\n  }\n",
        "begin_line": 5792,
        "end_line": 5804,
        "comment": "",
        "child_ranges": [
            "(line 5793,col 5)-(line 5803,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testInterfaceInheritanceCheck7()",
        "snippet": "  public void testInterfaceInheritanceCheck7() throws Exception {\n    testTypes(\n        \"/** @interface */function Super() {};\" +\n        \"/** @param {number} bar */Super.prototype.foo = function(bar) {};\" +\n        \"/** @constructor\\n @implements {Super} */function Sub() {};\" +\n        \"/** @override\\n  @param {string} bar */Sub.prototype.foo =\\n\" +\n        \"function(bar) {};\",\n        \"mismatch of the foo property type and the type of the property it \" +\n        \"overrides from interface Super\\n\" +\n        \"original: function (this:Super, number): undefined\\n\" +\n        \"override: function (this:Sub, string): undefined\");\n  }\n",
        "begin_line": 5806,
        "end_line": 5817,
        "comment": "",
        "child_ranges": [
            "(line 5807,col 5)-(line 5816,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testInterfaceInheritanceCheck8()",
        "snippet": "  public void testInterfaceInheritanceCheck8() throws Exception {\n    testTypes(\n        \"/** @constructor\\n @implements {Super} */function Sub() {};\" +\n        \"/** @override */Sub.prototype.foo = function() {};\",\n        new String[] {\n          \"Bad type annotation. Unknown type Super\",\n          \"property foo not defined on any superclass of Sub\"\n        });\n  }\n",
        "begin_line": 5819,
        "end_line": 5827,
        "comment": "",
        "child_ranges": [
            "(line 5820,col 5)-(line 5826,col 11)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testInterfacePropertyNotImplemented()",
        "snippet": "  public void testInterfacePropertyNotImplemented() throws Exception {\n    testTypes(\n        \"/** @interface */function Int() {};\" +\n        \"/** @desc description */Int.prototype.foo = function() {};\" +\n        \"/** @constructor\\n @implements {Int} */function Foo() {};\",\n        \"property foo on interface Int is not implemented by type Foo\");\n  }\n",
        "begin_line": 5829,
        "end_line": 5835,
        "comment": "",
        "child_ranges": [
            "(line 5830,col 5)-(line 5834,col 72)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testInterfacePropertyNotImplemented2()",
        "snippet": "  public void testInterfacePropertyNotImplemented2() throws Exception {\n    testTypes(\n        \"/** @interface */function Int() {};\" +\n        \"/** @desc description */Int.prototype.foo = function() {};\" +\n        \"/** @interface \\n @extends {Int} */function Int2() {};\" +\n        \"/** @constructor\\n @implements {Int2} */function Foo() {};\",\n        \"property foo on interface Int is not implemented by type Foo\");\n  }\n",
        "begin_line": 5837,
        "end_line": 5844,
        "comment": "",
        "child_ranges": [
            "(line 5838,col 5)-(line 5843,col 72)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testStubConstructorImplementingInterface()",
        "snippet": "  public void testStubConstructorImplementingInterface() throws Exception {\n    // This does not throw a warning for unimplemented property because Foo is\n    // just a stub.\n    testTypes(\n        // externs\n        \"/** @interface */ function Int() {}\\n\" +\n        \"/** @desc description */Int.prototype.foo = function() {};\" +\n        \"/** @constructor \\n @implements {Int} */ var Foo;\\n\",\n        \"\", null, false);\n  }\n",
        "begin_line": 5846,
        "end_line": 5855,
        "comment": "",
        "child_ranges": [
            "(line 5849,col 5)-(line 5854,col 25)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testObjectLiteral()",
        "snippet": "  public void testObjectLiteral() throws Exception {\n    Node n = parseAndTypeCheck(\"var a = {m1: 7, m2: 'hello'}\");\n\n    Node nameNode = n.getFirstChild().getFirstChild();\n    Node objectNode = nameNode.getFirstChild();\n\n    // node extraction\n    assertEquals(Token.NAME, nameNode.getType());\n    assertEquals(Token.OBJECTLIT, objectNode.getType());\n\n    // value's type\n    ObjectType objectType =\n        (ObjectType) objectNode.getJSType();\n    assertEquals(NUMBER_TYPE, objectType.getPropertyType(\"m1\"));\n    assertEquals(STRING_TYPE, objectType.getPropertyType(\"m2\"));\n\n    // variable's type\n    assertEquals(objectType, nameNode.getJSType());\n  }\n",
        "begin_line": 5857,
        "end_line": 5875,
        "comment": "",
        "child_ranges": [
            "(line 5858,col 5)-(line 5858,col 63)",
            "(line 5860,col 5)-(line 5860,col 54)",
            "(line 5861,col 5)-(line 5861,col 47)",
            "(line 5864,col 5)-(line 5864,col 49)",
            "(line 5865,col 5)-(line 5865,col 56)",
            "(line 5868,col 5)-(line 5869,col 44)",
            "(line 5870,col 5)-(line 5870,col 64)",
            "(line 5871,col 5)-(line 5871,col 64)",
            "(line 5874,col 5)-(line 5874,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testObjectLiteralDeclaration1()",
        "snippet": "  public void testObjectLiteralDeclaration1() throws Exception {\n    testTypes(\n        \"var x = {\" +\n        \"/** @type {boolean} */ abc: true,\" +\n        \"/** @type {number} */ 'def': 0,\" +\n        \"/** @type {string} */ 3: 'fgh'\" +\n        \"};\");\n  }\n",
        "begin_line": 5877,
        "end_line": 5884,
        "comment": "",
        "child_ranges": [
            "(line 5878,col 5)-(line 5883,col 14)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testCallDateConstructorAsFunction()",
        "snippet": "  public void testCallDateConstructorAsFunction() throws Exception {\n    // ECMA-262 15.9.2: When Date is called as a function rather than as a\n    // constructor, it returns a string.\n    Node n = parseAndTypeCheck(\"Date()\");\n    assertEquals(STRING_TYPE, n.getFirstChild().getFirstChild().getJSType());\n  }\n",
        "begin_line": 5886,
        "end_line": 5891,
        "comment": "",
        "child_ranges": [
            "(line 5889,col 5)-(line 5889,col 41)",
            "(line 5890,col 5)-(line 5890,col 77)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testCallErrorConstructorAsFunction()",
        "snippet": "  public void testCallErrorConstructorAsFunction() throws Exception {\n    Node n = parseAndTypeCheck(\"Error('x')\");\n    assertEquals(ERROR_TYPE,\n                 n.getFirstChild().getFirstChild().getJSType());\n  }\n",
        "begin_line": 5896,
        "end_line": 5900,
        "comment": "",
        "child_ranges": [
            "(line 5897,col 5)-(line 5897,col 45)",
            "(line 5898,col 5)-(line 5899,col 64)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testCallArrayConstructorAsFunction()",
        "snippet": "  public void testCallArrayConstructorAsFunction() throws Exception {\n    Node n = parseAndTypeCheck(\"Array()\");\n    assertEquals(ARRAY_TYPE,\n                 n.getFirstChild().getFirstChild().getJSType());\n  }\n",
        "begin_line": 5902,
        "end_line": 5906,
        "comment": "",
        "child_ranges": [
            "(line 5903,col 5)-(line 5903,col 42)",
            "(line 5904,col 5)-(line 5905,col 64)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testPropertyTypeOfUnionType()",
        "snippet": "  public void testPropertyTypeOfUnionType() throws Exception {\n    testTypes(\"var a = {};\" +\n        \"/** @constructor */ a.N = function() {};\\n\" +\n        \"a.N.prototype.p = 1;\\n\" +\n        \"/** @constructor */ a.S = function() {};\\n\" +\n        \"a.S.prototype.p = 'a';\\n\" +\n        \"/** @param {!a.N|!a.S} x\\n@return {string} */\\n\" +\n        \"var f = function(x) { return x.p; };\",\n        \"inconsistent return type\\n\" +\n        \"found   : (number|string)\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 5908,
        "end_line": 5919,
        "comment": "",
        "child_ranges": [
            "(line 5909,col 5)-(line 5918,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testAnnotatedPropertyOnInterface1()",
        "snippet": "  public void testAnnotatedPropertyOnInterface1() throws Exception {\n    // For interfaces we must allow function definitions that don't have a\n    // return statement, even though they declare a returned type.\n    testTypes(\"/** @interface */ u.T = function() {};\\n\" +\n        \"/** @return {number} */ u.T.prototype.f = function() {};\");\n  }\n",
        "begin_line": 5952,
        "end_line": 5957,
        "comment": "",
        "child_ranges": [
            "(line 5955,col 5)-(line 5956,col 68)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testAnnotatedPropertyOnInterface2()",
        "snippet": "  public void testAnnotatedPropertyOnInterface2() throws Exception {\n    testTypes(\"/** @interface */ u.T = function() {};\\n\" +\n        \"/** @return {number} */ u.T.prototype.f = function() { };\");\n  }\n",
        "begin_line": 5959,
        "end_line": 5962,
        "comment": "",
        "child_ranges": [
            "(line 5960,col 5)-(line 5961,col 69)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testAnnotatedPropertyOnInterface3()",
        "snippet": "  public void testAnnotatedPropertyOnInterface3() throws Exception {\n    testTypes(\"/** @interface */ function T() {};\\n\" +\n        \"/** @return {number} */ T.prototype.f = function() { };\");\n  }\n",
        "begin_line": 5964,
        "end_line": 5967,
        "comment": "",
        "child_ranges": [
            "(line 5965,col 5)-(line 5966,col 67)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testAnnotatedPropertyOnInterface4()",
        "snippet": "  public void testAnnotatedPropertyOnInterface4() throws Exception {\n    testTypes(\n        CLOSURE_DEFS +\n        \"/** @interface */ function T() {};\\n\" +\n        \"/** @return {number} */ T.prototype.f = goog.abstractMethod;\");\n  }\n",
        "begin_line": 5969,
        "end_line": 5974,
        "comment": "",
        "child_ranges": [
            "(line 5970,col 5)-(line 5973,col 72)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testWarnUnannotatedPropertyOnInterface5()",
        "snippet": "  public void testWarnUnannotatedPropertyOnInterface5() throws Exception {\n    testTypes(\"/** @interface */ u.T = function () {};\\n\" +\n        \"/** @desc x does something */u.T.prototype.x = function() {};\");\n  }\n",
        "begin_line": 5988,
        "end_line": 5991,
        "comment": "",
        "child_ranges": [
            "(line 5989,col 5)-(line 5990,col 73)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testWarnUnannotatedPropertyOnInterface6()",
        "snippet": "  public void testWarnUnannotatedPropertyOnInterface6() throws Exception {\n    testTypes(\"/** @interface */ function T() {};\\n\" +\n        \"/** @desc x does something */T.prototype.x = function() {};\");\n  }\n",
        "begin_line": 5993,
        "end_line": 5996,
        "comment": "",
        "child_ranges": [
            "(line 5994,col 5)-(line 5995,col 71)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testWarnDataPropertyOnInterface3()",
        "snippet": "  public void testWarnDataPropertyOnInterface3() throws Exception {\n    testTypes(\"/** @interface */ u.T = function () {};\\n\" +\n        \"/** @type {number} */u.T.prototype.x = 1;\",\n        \"interface members can only be empty property declarations, \"\n        + \"empty functions, or goog.abstractMethod\");\n  }\n",
        "begin_line": 6012,
        "end_line": 6017,
        "comment": "",
        "child_ranges": [
            "(line 6013,col 5)-(line 6016,col 53)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testWarnDataPropertyOnInterface4()",
        "snippet": "  public void testWarnDataPropertyOnInterface4() throws Exception {\n    testTypes(\"/** @interface */ function T() {};\\n\" +\n        \"/** @type {number} */T.prototype.x = 1;\",\n        \"interface members can only be empty property declarations, \"\n        + \"empty functions, or goog.abstractMethod\");\n  }\n",
        "begin_line": 6019,
        "end_line": 6024,
        "comment": "",
        "child_ranges": [
            "(line 6020,col 5)-(line 6023,col 53)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testErrorMismatchingPropertyOnInterface4()",
        "snippet": "  public void testErrorMismatchingPropertyOnInterface4() throws Exception {\n    testTypes(\"/** @interface */ u.T = function () {};\\n\" +\n        \"/** @param {Number} foo */u.T.prototype.x =\\n\" +\n        \"function() {};\",\n        \"parameter foo does not appear in u.T.prototype.x's parameter list\");\n  }\n",
        "begin_line": 6055,
        "end_line": 6060,
        "comment": "",
        "child_ranges": [
            "(line 6056,col 5)-(line 6059,col 77)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testErrorMismatchingPropertyOnInterface5()",
        "snippet": "  public void testErrorMismatchingPropertyOnInterface5() throws Exception {\n    testTypes(\"/** @interface */ function T() {};\\n\" +\n        \"/** @type {number} */T.prototype.x = function() { };\",\n        \"assignment to property x of T.prototype\\n\" +\n        \"found   : function (): undefined\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 6062,
        "end_line": 6068,
        "comment": "",
        "child_ranges": [
            "(line 6063,col 5)-(line 6067,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testErrorMismatchingPropertyOnInterface6()",
        "snippet": "  public void testErrorMismatchingPropertyOnInterface6() throws Exception {\n    testTypes(\"/** @interface */ function T() {};\\n\" +\n        \"/** @return {number} */T.prototype.x = 1\",\n        \"interface members can only be empty property declarations, \"\n        + \"empty functions, or goog.abstractMethod\"\n        );\n  }\n",
        "begin_line": 6070,
        "end_line": 6076,
        "comment": "",
        "child_ranges": [
            "(line 6071,col 5)-(line 6075,col 10)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testInterfaceNonEmptyFunction()",
        "snippet": "  public void testInterfaceNonEmptyFunction() throws Exception {\n    testTypes(\"/** @interface */ function T() {};\\n\" +\n        \"T.prototype.x = function() { return 'foo'; }\",\n        \"interface member functions must have an empty body\"\n        );\n  }\n",
        "begin_line": 6078,
        "end_line": 6083,
        "comment": "",
        "child_ranges": [
            "(line 6079,col 5)-(line 6082,col 10)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testDoubleNestedInterface()",
        "snippet": "  public void testDoubleNestedInterface() throws Exception {\n    testTypes(\"/** @interface */ var I1 = function() {};\\n\" +\n              \"/** @interface */ I1.I2 = function() {};\\n\" +\n              \"/** @interface */ I1.I2.I3 = function() {};\\n\");\n  }\n",
        "begin_line": 6085,
        "end_line": 6089,
        "comment": "",
        "child_ranges": [
            "(line 6086,col 5)-(line 6088,col 63)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testStaticDataPropertyOnNestedInterface()",
        "snippet": "  public void testStaticDataPropertyOnNestedInterface() throws Exception {\n    testTypes(\"/** @interface */ var I1 = function() {};\\n\" +\n              \"/** @interface */ I1.I2 = function() {};\\n\" +\n              \"/** @type {number} */ I1.I2.x = 1;\\n\");\n  }\n",
        "begin_line": 6091,
        "end_line": 6095,
        "comment": "",
        "child_ranges": [
            "(line 6092,col 5)-(line 6094,col 54)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testInterfaceInstantiation()",
        "snippet": "  public void testInterfaceInstantiation() throws Exception {\n    testTypes(\"/** @interface */var f = function(){}; new f\",\n              \"cannot instantiate non-constructor\");\n  }\n",
        "begin_line": 6097,
        "end_line": 6100,
        "comment": "",
        "child_ranges": [
            "(line 6098,col 5)-(line 6099,col 52)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testPrototypeLoop()",
        "snippet": "  public void testPrototypeLoop() throws Exception {\n    testClosureTypesMultipleWarnings(\n        suppressMissingProperty(\"foo\") +\n        \"/** @constructor \\n * @extends {T} */var T = function() {};\" +\n        \"alert((new T).foo);\",\n        Lists.newArrayList(\n            \"Parse error. Cycle detected in inheritance chain of type T\",\n            \"Could not resolve type in @extends tag of T\"));\n  }\n",
        "begin_line": 6102,
        "end_line": 6110,
        "comment": "",
        "child_ranges": [
            "(line 6103,col 5)-(line 6109,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testDirectPrototypeAssign()",
        "snippet": "  public void testDirectPrototypeAssign() throws Exception {\n    testTypes(\n        \"/** @constructor */ function Foo() {}\" +\n        \"/** @constructor */ function Bar() {}\" +\n        \"/** @type {Array} */ Bar.prototype = new Foo()\",\n        \"assignment to property prototype of Bar\\n\" +\n        \"found   : Foo\\n\" +\n        \"required: (Array|null|undefined)\");\n  }\n",
        "begin_line": 6112,
        "end_line": 6120,
        "comment": "",
        "child_ranges": [
            "(line 6113,col 5)-(line 6119,col 44)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testResolutionViaRegistry1()",
        "snippet": "  public void testResolutionViaRegistry1() throws Exception {\n    testTypes(\"/** @constructor */ u.T = function() {};\\n\" +\n        \"/** @type {(number|string)} */ u.T.prototype.a;\\n\" +\n        \"/**\\n\" +\n        \"* @param {u.T} t\\n\" +\n        \"* @return {string}\\n\" +\n        \"*/\\n\" +\n        \"var f = function(t) { return t.a; };\",\n        \"inconsistent return type\\n\" +\n        \"found   : (number|string)\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 6125,
        "end_line": 6136,
        "comment": "",
        "child_ranges": [
            "(line 6126,col 5)-(line 6135,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testResolutionViaRegistry2()",
        "snippet": "  public void testResolutionViaRegistry2() throws Exception {\n    testTypes(\n        \"/** @constructor */ u.T = function() {\" +\n        \"  this.a = 0; };\\n\" +\n        \"/**\\n\" +\n        \"* @param {u.T} t\\n\" +\n        \"* @return {string}\\n\" +\n        \"*/\\n\" +\n        \"var f = function(t) { return t.a; };\",\n        \"inconsistent return type\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 6138,
        "end_line": 6150,
        "comment": "",
        "child_ranges": [
            "(line 6139,col 5)-(line 6149,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testResolutionViaRegistry3()",
        "snippet": "  public void testResolutionViaRegistry3() throws Exception {\n    testTypes(\"/** @constructor */ u.T = function() {};\\n\" +\n        \"/** @type {(number|string)} */ u.T.prototype.a = 0;\\n\" +\n        \"/**\\n\" +\n        \"* @param {u.T} t\\n\" +\n        \"* @return {string}\\n\" +\n        \"*/\\n\" +\n        \"var f = function(t) { return t.a; };\",\n        \"inconsistent return type\\n\" +\n        \"found   : (number|string)\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 6152,
        "end_line": 6163,
        "comment": "",
        "child_ranges": [
            "(line 6153,col 5)-(line 6162,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testResolutionViaRegistry4()",
        "snippet": "  public void testResolutionViaRegistry4() throws Exception {\n    testTypes(\"/** @constructor */ u.A = function() {};\\n\" +\n        \"/**\\n* @constructor\\n* @extends {u.A}\\n*/\\nu.A.A = function() {}\\n;\" +\n        \"/**\\n* @constructor\\n* @extends {u.A}\\n*/\\nu.A.B = function() {};\\n\" +\n        \"var ab = new u.A.B();\\n\" +\n        \"/** @type {!u.A} */ var a = ab;\\n\" +\n        \"/** @type {!u.A.A} */ var aa = ab;\\n\",\n        \"initializing variable\\n\" +\n        \"found   : u.A.B\\n\" +\n        \"required: u.A.A\");\n  }\n",
        "begin_line": 6165,
        "end_line": 6175,
        "comment": "",
        "child_ranges": [
            "(line 6166,col 5)-(line 6174,col 27)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testResolutionViaRegistry5()",
        "snippet": "  public void testResolutionViaRegistry5() throws Exception {\n    Node n = parseAndTypeCheck(\"/** @constructor */ u.T = function() {}; u.T\");\n    JSType type = n.getLastChild().getLastChild().getJSType();\n    assertFalse(type.isUnknownType());\n    assertTrue(type instanceof FunctionType);\n    assertEquals(\"u.T\",\n        ((FunctionType) type).getInstanceType().getReferenceName());\n  }\n",
        "begin_line": 6177,
        "end_line": 6184,
        "comment": "",
        "child_ranges": [
            "(line 6178,col 5)-(line 6178,col 79)",
            "(line 6179,col 5)-(line 6179,col 62)",
            "(line 6180,col 5)-(line 6180,col 38)",
            "(line 6181,col 5)-(line 6181,col 45)",
            "(line 6182,col 5)-(line 6183,col 68)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testGatherProperyWithoutAnnotation1()",
        "snippet": "  public void testGatherProperyWithoutAnnotation1() throws Exception {\n    Node n = parseAndTypeCheck(\"/** @constructor */ var T = function() {};\" +\n        \"/** @type {!T} */var t; t.x; t;\");\n    JSType type = n.getLastChild().getLastChild().getJSType();\n    assertFalse(type.isUnknownType());\n    assertTrue(type instanceof ObjectType);\n    ObjectType objectType = (ObjectType) type;\n    assertFalse(objectType.hasProperty(\"x\"));\n    assertEquals(\n        Lists.newArrayList(objectType),\n        registry.getTypesWithProperty(\"x\"));\n  }\n",
        "begin_line": 6186,
        "end_line": 6197,
        "comment": "",
        "child_ranges": [
            "(line 6187,col 5)-(line 6188,col 43)",
            "(line 6189,col 5)-(line 6189,col 62)",
            "(line 6190,col 5)-(line 6190,col 38)",
            "(line 6191,col 5)-(line 6191,col 43)",
            "(line 6192,col 5)-(line 6192,col 46)",
            "(line 6193,col 5)-(line 6193,col 45)",
            "(line 6194,col 5)-(line 6196,col 44)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testGatherProperyWithoutAnnotation2()",
        "snippet": "  public void testGatherProperyWithoutAnnotation2() throws Exception {\n    TypeCheckResult ns =\n        parseAndTypeCheckWithScope(\"/** @type {!Object} */var t; t.x; t;\");\n    Node n = ns.root;\n    Scope s = ns.scope;\n    JSType type = n.getLastChild().getLastChild().getJSType();\n    assertFalse(type.isUnknownType());\n    assertEquals(type, OBJECT_TYPE);\n    assertTrue(type instanceof ObjectType);\n    ObjectType objectType = (ObjectType) type;\n    assertFalse(objectType.hasProperty(\"x\"));\n    assertEquals(\n        Lists.newArrayList(OBJECT_TYPE),\n        registry.getTypesWithProperty(\"x\"));\n  }\n",
        "begin_line": 6199,
        "end_line": 6213,
        "comment": "",
        "child_ranges": [
            "(line 6200,col 5)-(line 6201,col 75)",
            "(line 6202,col 5)-(line 6202,col 21)",
            "(line 6203,col 5)-(line 6203,col 23)",
            "(line 6204,col 5)-(line 6204,col 62)",
            "(line 6205,col 5)-(line 6205,col 38)",
            "(line 6206,col 5)-(line 6206,col 36)",
            "(line 6207,col 5)-(line 6207,col 43)",
            "(line 6208,col 5)-(line 6208,col 46)",
            "(line 6209,col 5)-(line 6209,col 45)",
            "(line 6210,col 5)-(line 6212,col 44)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testFunctionMasksVariableBug()",
        "snippet": "  public void testFunctionMasksVariableBug() throws Exception {\n    testTypes(\"var x = 4; var f = function x(b) { return b ? 1 : x(true); };\",\n        \"function x masks variable (IE bug)\");\n  }\n",
        "begin_line": 6215,
        "end_line": 6218,
        "comment": "",
        "child_ranges": [
            "(line 6216,col 5)-(line 6217,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testDfa1()",
        "snippet": "  public void testDfa1() throws Exception {\n    testTypes(\"var x = null;\\n x = 1;\\n /** @type number */ var y = x;\");\n  }\n",
        "begin_line": 6220,
        "end_line": 6222,
        "comment": "",
        "child_ranges": [
            "(line 6221,col 5)-(line 6221,col 73)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testDfa2()",
        "snippet": "  public void testDfa2() throws Exception {\n    testTypes(\"function u() {}\\n\" +\n        \"/** @return {number} */ function f() {\\nvar x = 'todo';\\n\" +\n        \"if (u()) { x = 1; } else { x = 2; } return x;\\n}\");\n  }\n",
        "begin_line": 6224,
        "end_line": 6228,
        "comment": "",
        "child_ranges": [
            "(line 6225,col 5)-(line 6227,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testDfa3()",
        "snippet": "  public void testDfa3() throws Exception {\n    testTypes(\"function u() {}\\n\" +\n        \"/** @return {number} */ function f() {\\n\" +\n        \"/** @type {number|string} */ var x = 'todo';\\n\" +\n        \"if (u()) { x = 1; } else { x = 2; } return x;\\n}\");\n  }\n",
        "begin_line": 6230,
        "end_line": 6235,
        "comment": "",
        "child_ranges": [
            "(line 6231,col 5)-(line 6234,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testDfa4()",
        "snippet": "  public void testDfa4() throws Exception {\n    testTypes(\"/** @param {Date?} d */ function f(d) {\\n\" +\n        \"if (!d) { return; }\\n\" +\n        \"/** @type {!Date} */ var e = d;\\n}\");\n  }\n",
        "begin_line": 6237,
        "end_line": 6241,
        "comment": "",
        "child_ranges": [
            "(line 6238,col 5)-(line 6240,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testDfa5()",
        "snippet": "  public void testDfa5() throws Exception {\n    testTypes(\"/** @return {string?} */ function u() {return 'a';}\\n\" +\n        \"/** @param {string?} x\\n@return {string} */ function f(x) {\\n\" +\n        \"while (!x) { x = u(); }\\nreturn x;\\n}\");\n  }\n",
        "begin_line": 6243,
        "end_line": 6247,
        "comment": "",
        "child_ranges": [
            "(line 6244,col 5)-(line 6246,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testDfa6()",
        "snippet": "  public void testDfa6() throws Exception {\n    testTypes(\"/** @return {Object?} */ function u() {return {};}\\n\" +\n        \"/** @param {Object?} x */ function f(x) {\\n\" +\n        \"while (x) { x = u(); if (!x) { x = u(); } }\\n}\");\n  }\n",
        "begin_line": 6249,
        "end_line": 6253,
        "comment": "",
        "child_ranges": [
            "(line 6250,col 5)-(line 6252,col 58)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testDfa7()",
        "snippet": "  public void testDfa7() throws Exception {\n    testTypes(\"/** @constructor */ var T = function() {};\\n\" +\n        \"/** @type {Date?} */ T.prototype.x = null;\\n\" +\n        \"/** @param {!T} t */ function f(t) {\\n\" +\n        \"if (!t.x) { return; }\\n\" +\n        \"/** @type {!Date} */ var e = t.x;\\n}\");\n  }\n",
        "begin_line": 6255,
        "end_line": 6261,
        "comment": "",
        "child_ranges": [
            "(line 6256,col 5)-(line 6260,col 48)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testDfa8()",
        "snippet": "  public void testDfa8() throws Exception {\n    testTypes(\"/** @constructor */ var T = function() {};\\n\" +\n        \"/** @type {number|string} */ T.prototype.x = '';\\n\" +\n        \"function u() {}\\n\" +\n        \"/** @param {!T} t\\n@return {number} */ function f(t) {\\n\" +\n        \"if (u()) { t.x = 1; } else { t.x = 2; } return t.x;\\n}\");\n  }\n",
        "begin_line": 6263,
        "end_line": 6269,
        "comment": "",
        "child_ranges": [
            "(line 6264,col 5)-(line 6268,col 66)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testDfa9()",
        "snippet": "  public void testDfa9() throws Exception {\n    testTypes(\"function f() {\\n/** @type {string?} */var x;\\nx = null;\\n\" +\n        \"if (x == null) { return 0; } else { return 1; } }\",\n        \"condition always evaluates to true\\n\" +\n        \"left : null\\n\" +\n        \"right: null\");\n  }\n",
        "begin_line": 6271,
        "end_line": 6277,
        "comment": "",
        "child_ranges": [
            "(line 6272,col 5)-(line 6276,col 23)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testDfa10()",
        "snippet": "  public void testDfa10() throws Exception {\n    testTypes(\"/** @param {null} x */ function g(x) {}\" +\n        \"/** @param {string?} x */function f(x) {\\n\" +\n        \"if (!x) { x = ''; }\\n\" +\n        \"if (g(x)) { return 0; } else { return 1; } }\",\n        \"actual parameter 1 of g does not match formal parameter\\n\" +\n        \"found   : string\\n\" +\n        \"required: null\");\n  }\n",
        "begin_line": 6279,
        "end_line": 6287,
        "comment": "",
        "child_ranges": [
            "(line 6280,col 5)-(line 6286,col 26)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testDfa11()",
        "snippet": "  public void testDfa11() throws Exception {\n    testTypes(\"/** @param {string} opt_x\\n@return {string} */\\n\" +\n        \"function f(opt_x) { if (!opt_x) { \" +\n        \"throw new Error('x cannot be empty'); } return opt_x; }\");\n  }\n",
        "begin_line": 6289,
        "end_line": 6293,
        "comment": "",
        "child_ranges": [
            "(line 6290,col 5)-(line 6292,col 67)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testDfa12()",
        "snippet": "  public void testDfa12() throws Exception {\n    testTypes(\"/** @param {string} x \\n * @constructor \\n */\" +\n        \"var Bar = function(x) {};\" +\n        \"/** @param {string} x */ function g(x) { return true; }\" +\n        \"/** @param {string|number} opt_x */ \" +\n        \"function f(opt_x) { \" +\n        \"  if (opt_x) { new Bar(g(opt_x) && 'x'); }\" +\n        \"}\",\n        \"actual parameter 1 of g does not match formal parameter\\n\" +\n        \"found   : (number|string)\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 6295,
        "end_line": 6306,
        "comment": "",
        "child_ranges": [
            "(line 6296,col 5)-(line 6305,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testDfa13()",
        "snippet": "  public void testDfa13() throws Exception {\n    testTypes(\n        \"/**\\n\" +\n        \" * @param {string} x \\n\" +\n        \" * @param {number} y \\n\" +\n        \" * @param {number} z \\n\" +\n        \" */\" +\n        \"function g(x, y, z) {}\" +\n        \"function f() { \" +\n        \"  var x = 'a'; g(x, x = 3, x);\" +\n        \"}\");\n  }\n",
        "begin_line": 6308,
        "end_line": 6319,
        "comment": "",
        "child_ranges": [
            "(line 6309,col 5)-(line 6318,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testTypeInferenceWithCast1()",
        "snippet": "  public void testTypeInferenceWithCast1() throws Exception {\n    testTypes(\n        \"/**@return {(number,null,undefined)}*/function u(x) {return null;}\" +\n        \"/**@param {number?} x\\n@return {number?}*/function f(x) {return x;}\" +\n        \"/**@return {number?}*/function g(x) {\" +\n        \"var y = /**@type {number?}*/(u(x)); return f(y);}\");\n  }\n",
        "begin_line": 6321,
        "end_line": 6327,
        "comment": "",
        "child_ranges": [
            "(line 6322,col 5)-(line 6326,col 61)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testTypeInferenceWithCast2()",
        "snippet": "  public void testTypeInferenceWithCast2() throws Exception {\n    testTypes(\n        \"/**@return {(number,null,undefined)}*/function u(x) {return null;}\" +\n        \"/**@param {number?} x\\n@return {number?}*/function f(x) {return x;}\" +\n        \"/**@return {number?}*/function g(x) {\" +\n        \"var y; y = /**@type {number?}*/(u(x)); return f(y);}\");\n  }\n",
        "begin_line": 6329,
        "end_line": 6335,
        "comment": "",
        "child_ranges": [
            "(line 6330,col 5)-(line 6334,col 64)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testTypeInferenceWithCast3()",
        "snippet": "  public void testTypeInferenceWithCast3() throws Exception {\n    testTypes(\n        \"/**@return {(number,null,undefined)}*/function u(x) {return 1;}\" +\n        \"/**@return {number}*/function g(x) {\" +\n        \"return /**@type {number}*/(u(x));}\");\n  }\n",
        "begin_line": 6337,
        "end_line": 6342,
        "comment": "",
        "child_ranges": [
            "(line 6338,col 5)-(line 6341,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testTypeInferenceWithCast4()",
        "snippet": "  public void testTypeInferenceWithCast4() throws Exception {\n    testTypes(\n        \"/**@return {(number,null,undefined)}*/function u(x) {return 1;}\" +\n        \"/**@return {number}*/function g(x) {\" +\n        \"return /**@type {number}*/(u(x)) && 1;}\");\n  }\n",
        "begin_line": 6344,
        "end_line": 6349,
        "comment": "",
        "child_ranges": [
            "(line 6345,col 5)-(line 6348,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testTypeInferenceWithCast5()",
        "snippet": "  public void testTypeInferenceWithCast5() throws Exception {\n    testTypes(\n        \"/** @param {number} x */ function foo(x) {}\" +\n        \"/** @param {{length:*}} y */ function bar(y) {\" +\n        \"  /** @type {string} */ y.length;\" +\n        \"  foo(y.length);\" +\n        \"}\",\n        \"actual parameter 1 of foo does not match formal parameter\\n\" +\n        \"found   : string\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 6351,
        "end_line": 6361,
        "comment": "",
        "child_ranges": [
            "(line 6352,col 5)-(line 6360,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testTypeInferenceWithClosure1()",
        "snippet": "  public void testTypeInferenceWithClosure1() throws Exception {\n    testTypes(\n        \"/** @return {boolean} */\" +\n        \"function f() {\" +\n        \"  /** @type {?string} */ var x = null;\" +\n        \"  function g() { x = 'y'; } g(); \" +\n        \"  return x == null;\" +\n        \"}\");\n  }\n",
        "begin_line": 6363,
        "end_line": 6371,
        "comment": "",
        "child_ranges": [
            "(line 6364,col 5)-(line 6370,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testTypeInferenceWithClosure2()",
        "snippet": "  public void testTypeInferenceWithClosure2() throws Exception {\n    testTypes(\n        \"/** @return {boolean} */\" +\n        \"function f() {\" +\n        \"  /** @type {?string} */ var x = null;\" +\n        \"  function g() { x = 'y'; } g(); \" +\n        \"  return x === 3;\" +\n        \"}\",\n        \"condition always evaluates to the same value\\n\" +\n        \"left : (null|string|undefined)\\n\" +\n        \"right: number\");\n  }\n",
        "begin_line": 6373,
        "end_line": 6384,
        "comment": "",
        "child_ranges": [
            "(line 6374,col 5)-(line 6383,col 25)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testForwardPropertyReference()",
        "snippet": "  public void testForwardPropertyReference() throws Exception {\n    testTypes(\"/** @constructor */ var Foo = function() { this.init(); };\" +\n        \"/** @return {string} */\" +\n        \"Foo.prototype.getString = function() {\" +\n        \"  return this.number_;\" +\n        \"};\" +\n        \"Foo.prototype.init = function() {\" +\n        \"  /** @type {number} */\" +\n        \"  this.number_ = 3;\" +\n        \"};\",\n        \"inconsistent return type\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 6386,
        "end_line": 6399,
        "comment": "",
        "child_ranges": [
            "(line 6387,col 5)-(line 6398,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testNoForwardTypeDeclaration()",
        "snippet": "  public void testNoForwardTypeDeclaration() throws Exception {\n    testTypes(\n        \"/** @param {MyType} x */ function f(x) {}\",\n        \"Bad type annotation. Unknown type MyType\");\n  }\n",
        "begin_line": 6401,
        "end_line": 6405,
        "comment": "",
        "child_ranges": [
            "(line 6402,col 5)-(line 6404,col 52)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testNoForwardTypeDeclarationAndNoBraces()",
        "snippet": "  public void testNoForwardTypeDeclarationAndNoBraces() throws Exception {\n    testTypes(\"/** @return The result. */ function f() {}\");\n  }\n",
        "begin_line": 6407,
        "end_line": 6409,
        "comment": "",
        "child_ranges": [
            "(line 6408,col 5)-(line 6408,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testForwardTypeDeclaration1()",
        "snippet": "  public void testForwardTypeDeclaration1() throws Exception {\n    testClosureTypes(\n        // malformed addDependency calls shouldn't cause a crash\n        \"goog.addDependency();\" +\n        \"goog.addDependency('y', [goog]);\" +\n\n        \"goog.addDependency('zzz.js', ['MyType'], []);\" +\n        \"/** @param {MyType} x \\n * @return {number} */\" +\n        \"function f(x) { return 3; }\", null);\n  }\n",
        "begin_line": 6411,
        "end_line": 6420,
        "comment": "",
        "child_ranges": [
            "(line 6412,col 5)-(line 6419,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testForwardTypeDeclaration2()",
        "snippet": "  public void testForwardTypeDeclaration2() throws Exception {\n    String f = \"goog.addDependency('zzz.js', ['MyType'], []);\" +\n        \"/** @param {MyType} x */ function f(x) { }\";\n    testClosureTypes(f, null);\n    testClosureTypes(f + \"f(3);\",\n        \"actual parameter 1 of f does not match formal parameter\\n\" +\n        \"found   : number\\n\" +\n        \"required: (MyType|null|undefined)\");\n  }\n",
        "begin_line": 6422,
        "end_line": 6430,
        "comment": "",
        "child_ranges": [
            "(line 6423,col 5)-(line 6424,col 53)",
            "(line 6425,col 5)-(line 6425,col 30)",
            "(line 6426,col 5)-(line 6429,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testForwardTypeDeclaration3()",
        "snippet": "  public void testForwardTypeDeclaration3() throws Exception {\n    testClosureTypes(\n        \"goog.addDependency('zzz.js', ['MyType'], []);\" +\n        \"/** @param {MyType} x */ function f(x) { return x; }\" +\n        \"/** @constructor */ var MyType = function() {};\" +\n        \"f(3);\",\n        \"actual parameter 1 of f does not match formal parameter\\n\" +\n        \"found   : number\\n\" +\n        \"required: (MyType|null|undefined)\");\n  }\n",
        "begin_line": 6432,
        "end_line": 6441,
        "comment": "",
        "child_ranges": [
            "(line 6433,col 5)-(line 6440,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testMalformedOldTypeDef()",
        "snippet": "  public void testMalformedOldTypeDef() throws Exception {\n    testTypes(\n        \"var goog = {}; goog.typedef = true;\" +\n        \"goog.Bar = goog.typedef\",\n        \"Typedef for goog.Bar does not have any type information\");\n  }\n",
        "begin_line": 6443,
        "end_line": 6448,
        "comment": "",
        "child_ranges": [
            "(line 6444,col 5)-(line 6447,col 67)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testMalformedOldTypeDef2()",
        "snippet": "  public void testMalformedOldTypeDef2() throws Exception {\n    testTypes(\n        \"var goog = {}; goog.typedef = true;\" +\n        \"/** @typedef {boolean} */ goog.Bar = goog.typedef\",\n        \"Typedef for goog.Bar does not have any type information\");\n  }\n",
        "begin_line": 6450,
        "end_line": 6455,
        "comment": "",
        "child_ranges": [
            "(line 6451,col 5)-(line 6454,col 67)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testDuplicateOldTypeDef()",
        "snippet": "  public void testDuplicateOldTypeDef() throws Exception {\n    testTypes(\n        \"var goog = {}; goog.typedef = true;\" +\n        \"/** @constructor */ goog.Bar = function() {};\" +\n        \"/** @type {number} */ goog.Bar = goog.typedef\",\n        \"variable goog.Bar redefined with type number, \" +\n        \"original definition at [testcode]:1 \" +\n        \"with type function (new:goog.Bar): undefined\");\n  }\n",
        "begin_line": 6457,
        "end_line": 6465,
        "comment": "",
        "child_ranges": [
            "(line 6458,col 5)-(line 6464,col 56)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testOldTypeDef1()",
        "snippet": "  public void testOldTypeDef1() throws Exception {\n    testTypes(\n        \"var goog = {}; goog.typedef = true;\" +\n        \"/** @type {number} */ goog.Bar = goog.typedef;\" +\n        \"/** @param {goog.Bar} x */ function f(x) {}\" +\n        \"f(3);\");\n  }\n",
        "begin_line": 6467,
        "end_line": 6473,
        "comment": "",
        "child_ranges": [
            "(line 6468,col 5)-(line 6472,col 17)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testOldTypeDef2()",
        "snippet": "  public void testOldTypeDef2() throws Exception {\n    testTypes(\n        \"var goog = {}; goog.typedef = true;\" +\n        \"/** @type {number} */ goog.Bar = goog.typedef;\" +\n        \"/** @param {goog.Bar} x */ function f(x) {}\" +\n        \"f('3');\",\n        \"actual parameter 1 of f does not match formal parameter\\n\" +\n        \"found   : string\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 6475,
        "end_line": 6484,
        "comment": "",
        "child_ranges": [
            "(line 6476,col 5)-(line 6483,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testOldTypeDef3()",
        "snippet": "  public void testOldTypeDef3() throws Exception {\n    testTypes(\n        \"var goog = {}; goog.typedef = true;\" +\n        \"/** @type {number} */ var Bar = goog.typedef;\" +\n        \"/** @param {Bar} x */ function f(x) {}\" +\n        \"f('3');\",\n        \"actual parameter 1 of f does not match formal parameter\\n\" +\n        \"found   : string\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 6486,
        "end_line": 6495,
        "comment": "",
        "child_ranges": [
            "(line 6487,col 5)-(line 6494,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testCircularOldTypeDef()",
        "snippet": "  public void testCircularOldTypeDef() throws Exception {\n    testTypes(\n        \"var goog = {}; goog.typedef = true;\" +\n        \"/** @type {number|Array.<goog.Bar>} */ goog.Bar = goog.typedef;\" +\n        \"/** @param {goog.Bar} x */ function f(x) {}\" +\n        \"f(3); f([3]); f([[3]]);\");\n  }\n",
        "begin_line": 6497,
        "end_line": 6503,
        "comment": "",
        "child_ranges": [
            "(line 6498,col 5)-(line 6502,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testDuplicateTypeDef()",
        "snippet": "  public void testDuplicateTypeDef() throws Exception {\n    testTypes(\n        \"var goog = {};\" +\n        \"/** @constructor */ goog.Bar = function() {};\" +\n        \"/** @typedef {number} */ goog.Bar;\",\n        \"variable goog.Bar redefined with type None, \" +\n        \"original definition at [testcode]:1 \" +\n        \"with type function (new:goog.Bar): undefined\");\n  }\n",
        "begin_line": 6505,
        "end_line": 6513,
        "comment": "",
        "child_ranges": [
            "(line 6506,col 5)-(line 6512,col 56)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testTypeDef1()",
        "snippet": "  public void testTypeDef1() throws Exception {\n    testTypes(\n        \"var goog = {};\" +\n        \"/** @typedef {number} */ goog.Bar;\" +\n        \"/** @param {goog.Bar} x */ function f(x) {}\" +\n        \"f(3);\");\n  }\n",
        "begin_line": 6515,
        "end_line": 6521,
        "comment": "",
        "child_ranges": [
            "(line 6516,col 5)-(line 6520,col 17)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testTypeDef2()",
        "snippet": "  public void testTypeDef2() throws Exception {\n    testTypes(\n        \"var goog = {};\" +\n        \"/** @typedef {number} */ goog.Bar;\" +\n        \"/** @param {goog.Bar} x */ function f(x) {}\" +\n        \"f('3');\",\n        \"actual parameter 1 of f does not match formal parameter\\n\" +\n        \"found   : string\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 6523,
        "end_line": 6532,
        "comment": "",
        "child_ranges": [
            "(line 6524,col 5)-(line 6531,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testTypeDef3()",
        "snippet": "  public void testTypeDef3() throws Exception {\n    testTypes(\n        \"var goog = {};\" +\n        \"/** @typedef {number} */ var Bar;\" +\n        \"/** @param {Bar} x */ function f(x) {}\" +\n        \"f('3');\",\n        \"actual parameter 1 of f does not match formal parameter\\n\" +\n        \"found   : string\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 6534,
        "end_line": 6543,
        "comment": "",
        "child_ranges": [
            "(line 6535,col 5)-(line 6542,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testCircularTypeDef()",
        "snippet": "  public void testCircularTypeDef() throws Exception {\n    testTypes(\n        \"var goog = {};\" +\n        \"/** @typedef {number|Array.<goog.Bar>} */ goog.Bar;\" +\n        \"/** @param {goog.Bar} x */ function f(x) {}\" +\n        \"f(3); f([3]); f([[3]]);\");\n  }\n",
        "begin_line": 6545,
        "end_line": 6551,
        "comment": "",
        "child_ranges": [
            "(line 6546,col 5)-(line 6550,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testGetTypedPercent1()",
        "snippet": "  public void testGetTypedPercent1() throws Exception {\n    String js = \"var id = function(x) { return x; }\\n\" +\n                \"var id2 = function(x) { return id(x); }\";\n    assertEquals(50.0, getTypedPercent(js), 0.1);\n  }\n",
        "begin_line": 6553,
        "end_line": 6557,
        "comment": "",
        "child_ranges": [
            "(line 6554,col 5)-(line 6555,col 58)",
            "(line 6556,col 5)-(line 6556,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testGetTypedPercent2()",
        "snippet": "  public void testGetTypedPercent2() throws Exception {\n    String js = \"var x = {}; x.y = 1;\";\n    assertEquals(100.0, getTypedPercent(js), 0.1);\n  }\n",
        "begin_line": 6559,
        "end_line": 6562,
        "comment": "",
        "child_ranges": [
            "(line 6560,col 5)-(line 6560,col 39)",
            "(line 6561,col 5)-(line 6561,col 50)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testGetTypedPercent3()",
        "snippet": "  public void testGetTypedPercent3() throws Exception {\n    String js = \"var f = function(x) { x.a = x.b; }\";\n    assertEquals(50.0, getTypedPercent(js), 0.1);\n  }\n",
        "begin_line": 6564,
        "end_line": 6567,
        "comment": "",
        "child_ranges": [
            "(line 6565,col 5)-(line 6565,col 53)",
            "(line 6566,col 5)-(line 6566,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testGetTypedPercent4()",
        "snippet": "  public void testGetTypedPercent4() throws Exception {\n    String js = \"var n = {};\\n /** @constructor */ n.T = function() {};\\n\" +\n        \"/** @type n.T */ var x = new n.T();\";\n    assertEquals(100.0, getTypedPercent(js), 0.1);\n  }\n",
        "begin_line": 6569,
        "end_line": 6573,
        "comment": "",
        "child_ranges": [
            "(line 6570,col 5)-(line 6571,col 46)",
            "(line 6572,col 5)-(line 6572,col 50)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.getTypedPercent(java.lang.String)",
        "snippet": "  private double getTypedPercent(String js) throws Exception {\n    Node n = compiler.parseTestCode(js);\n\n    Node externs = new Node(Token.BLOCK);\n    Node externAndJsRoot = new Node(Token.BLOCK, externs, n);\n    externAndJsRoot.setIsSyntheticBlock(true);\n\n    TypeCheck t = makeTypeCheck();\n    t.processForTesting(null, n);\n    return t.getTypedPercent();\n  }\n",
        "begin_line": 6575,
        "end_line": 6585,
        "comment": "",
        "child_ranges": [
            "(line 6576,col 5)-(line 6576,col 40)",
            "(line 6578,col 5)-(line 6578,col 41)",
            "(line 6579,col 5)-(line 6579,col 61)",
            "(line 6580,col 5)-(line 6580,col 46)",
            "(line 6582,col 5)-(line 6582,col 34)",
            "(line 6583,col 5)-(line 6583,col 33)",
            "(line 6584,col 5)-(line 6584,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.getInstanceType(com.google.javascript.rhino.Node)",
        "snippet": "  private ObjectType getInstanceType(Node js1Node) {\n    JSType type = js1Node.getFirstChild().getJSType();\n    assertNotNull(type);\n    assertTrue(type instanceof FunctionType);\n    FunctionType functionType = (FunctionType) type;\n    assertTrue(functionType.isConstructor());\n    return functionType.getInstanceType();\n  }\n",
        "begin_line": 6587,
        "end_line": 6594,
        "comment": "",
        "child_ranges": [
            "(line 6588,col 5)-(line 6588,col 54)",
            "(line 6589,col 5)-(line 6589,col 24)",
            "(line 6590,col 5)-(line 6590,col 45)",
            "(line 6591,col 5)-(line 6591,col 52)",
            "(line 6592,col 5)-(line 6592,col 45)",
            "(line 6593,col 5)-(line 6593,col 42)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testPrototypePropertyReference()",
        "snippet": "  public void testPrototypePropertyReference() throws Exception {\n    TypeCheckResult p = parseAndTypeCheckWithScope(\"\"\n        + \"/** @constructor */\\n\"\n        + \"function Foo() {}\\n\"\n        + \"/** @param {number} a */\\n\"\n        + \"Foo.prototype.bar = function(a){};\\n\"\n        + \"/** @param {Foo} f */\\n\"\n        + \"function baz(f) {\\n\"\n        + \"  Foo.prototype.bar.call(f, 3);\\n\"\n        + \"}\");\n    assertEquals(0, compiler.getErrorCount());\n    assertEquals(0, compiler.getWarningCount());\n\n    assertTrue(p.scope.getVar(\"Foo\").getType() instanceof FunctionType);\n    FunctionType fooType = (FunctionType) p.scope.getVar(\"Foo\").getType();\n    assertEquals(\"function (this:Foo, number): undefined\",\n                 fooType.getPrototype().getPropertyType(\"bar\").toString());\n  }\n",
        "begin_line": 6596,
        "end_line": 6613,
        "comment": "",
        "child_ranges": [
            "(line 6597,col 5)-(line 6605,col 15)",
            "(line 6606,col 5)-(line 6606,col 46)",
            "(line 6607,col 5)-(line 6607,col 48)",
            "(line 6609,col 5)-(line 6609,col 72)",
            "(line 6610,col 5)-(line 6610,col 74)",
            "(line 6611,col 5)-(line 6612,col 75)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testResolvingNamedTypes()",
        "snippet": "  public void testResolvingNamedTypes() throws Exception {\n    String js = \"\"\n        + \"/** @constructor */\\n\"\n        + \"var Foo = function() {}\\n\"\n        + \"/** @param {number} a */\\n\"\n        + \"Foo.prototype.foo = function(a) {\\n\"\n        + \"  return this.baz().toString();\\n\"\n        + \"};\\n\"\n        + \"/** @return {Baz} */\\n\"\n        + \"Foo.prototype.baz = function() { return new Baz(); };\\n\"\n        + \"/** @constructor\\n\"\n        + \"  * @extends Foo */\\n\"\n        + \"var Bar = function() {};\"\n        + \"/** @constructor */\\n\"\n        + \"var Baz = function() {};\";\n    assertEquals(100.0, getTypedPercent(js), 0.1);\n  }\n",
        "begin_line": 6615,
        "end_line": 6631,
        "comment": "",
        "child_ranges": [
            "(line 6616,col 5)-(line 6629,col 37)",
            "(line 6630,col 5)-(line 6630,col 50)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testMissingProperty1()",
        "snippet": "  public void testMissingProperty1() throws Exception {\n    testTypes(\n        \"/** @constructor */ function Foo() {}\" +\n        \"Foo.prototype.bar = function() { return this.a; };\" +\n        \"Foo.prototype.baz = function() { this.a = 3; };\");\n  }\n",
        "begin_line": 6633,
        "end_line": 6638,
        "comment": "",
        "child_ranges": [
            "(line 6634,col 5)-(line 6637,col 59)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testMissingProperty2()",
        "snippet": "  public void testMissingProperty2() throws Exception {\n    testTypes(\n        \"/** @constructor */ function Foo() {}\" +\n        \"Foo.prototype.bar = function() { return this.a; };\" +\n        \"Foo.prototype.baz = function() { this.b = 3; };\",\n        \"Property a never defined on Foo\");\n  }\n",
        "begin_line": 6640,
        "end_line": 6646,
        "comment": "",
        "child_ranges": [
            "(line 6641,col 5)-(line 6645,col 43)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testMissingProperty3()",
        "snippet": "  public void testMissingProperty3() throws Exception {\n    testTypes(\n        \"/** @constructor */ function Foo() {}\" +\n        \"Foo.prototype.bar = function() { return this.a; };\" +\n        \"(new Foo).a = 3;\");\n  }\n",
        "begin_line": 6648,
        "end_line": 6653,
        "comment": "",
        "child_ranges": [
            "(line 6649,col 5)-(line 6652,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testMissingProperty4()",
        "snippet": "  public void testMissingProperty4() throws Exception {\n    testTypes(\n        \"/** @constructor */ function Foo() {}\" +\n        \"Foo.prototype.bar = function() { return this.a; };\" +\n        \"(new Foo).b = 3;\",\n        \"Property a never defined on Foo\");\n  }\n",
        "begin_line": 6655,
        "end_line": 6661,
        "comment": "",
        "child_ranges": [
            "(line 6656,col 5)-(line 6660,col 43)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testMissingProperty5()",
        "snippet": "  public void testMissingProperty5() throws Exception {\n    testTypes(\n        \"/** @constructor */ function Foo() {}\" +\n        \"Foo.prototype.bar = function() { return this.a; };\" +\n        \"/** @constructor */ function Bar() { this.a = 3; };\",\n        \"Property a never defined on Foo\");\n  }\n",
        "begin_line": 6663,
        "end_line": 6669,
        "comment": "",
        "child_ranges": [
            "(line 6664,col 5)-(line 6668,col 43)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testMissingProperty6()",
        "snippet": "  public void testMissingProperty6() throws Exception {\n    testTypes(\n        \"/** @constructor */ function Foo() {}\" +\n        \"Foo.prototype.bar = function() { return this.a; };\" +\n        \"/** @constructor \\n * @extends {Foo} */ \" +\n        \"function Bar() { this.a = 3; };\");\n  }\n",
        "begin_line": 6671,
        "end_line": 6677,
        "comment": "",
        "child_ranges": [
            "(line 6672,col 5)-(line 6676,col 43)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testMissingProperty7()",
        "snippet": "  public void testMissingProperty7() throws Exception {\n    testTypes(\n        \"/** @param {Object} obj */\" +\n        \"function foo(obj) { return obj.impossible; }\",\n        \"Property impossible never defined on Object\");\n  }\n",
        "begin_line": 6679,
        "end_line": 6684,
        "comment": "",
        "child_ranges": [
            "(line 6680,col 5)-(line 6683,col 55)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testMissingProperty8()",
        "snippet": "  public void testMissingProperty8() throws Exception {\n    testTypes(\n        \"/** @param {Object} obj */\" +\n        \"function foo(obj) { return typeof obj.impossible; }\");\n  }\n",
        "begin_line": 6686,
        "end_line": 6690,
        "comment": "",
        "child_ranges": [
            "(line 6687,col 5)-(line 6689,col 63)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testMissingProperty9()",
        "snippet": "  public void testMissingProperty9() throws Exception {\n    testTypes(\n        \"/** @param {Object} obj */\" +\n        \"function foo(obj) { if (obj.impossible) { return true; } }\");\n  }\n",
        "begin_line": 6692,
        "end_line": 6696,
        "comment": "",
        "child_ranges": [
            "(line 6693,col 5)-(line 6695,col 70)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testMissingProperty10()",
        "snippet": "  public void testMissingProperty10() throws Exception {\n    testTypes(\n        \"/** @param {Object} obj */\" +\n        \"function foo(obj) { while (obj.impossible) { return true; } }\");\n  }\n",
        "begin_line": 6698,
        "end_line": 6702,
        "comment": "",
        "child_ranges": [
            "(line 6699,col 5)-(line 6701,col 73)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testMissingProperty11()",
        "snippet": "  public void testMissingProperty11() throws Exception {\n    testTypes(\n        \"/** @param {Object} obj */\" +\n        \"function foo(obj) { for (;obj.impossible;) { return true; } }\");\n  }\n",
        "begin_line": 6704,
        "end_line": 6708,
        "comment": "",
        "child_ranges": [
            "(line 6705,col 5)-(line 6707,col 73)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testMissingProperty12()",
        "snippet": "  public void testMissingProperty12() throws Exception {\n    testTypes(\n        \"/** @param {Object} obj */\" +\n        \"function foo(obj) { do { } while (obj.impossible); }\");\n  }\n",
        "begin_line": 6710,
        "end_line": 6714,
        "comment": "",
        "child_ranges": [
            "(line 6711,col 5)-(line 6713,col 64)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testMissingProperty13()",
        "snippet": "  public void testMissingProperty13() throws Exception {\n    testTypes(\n        \"var goog = {}; goog.isDef = function(x) { return false; };\" +\n        \"/** @param {Object} obj */\" +\n        \"function foo(obj) { return goog.isDef(obj.impossible); }\");\n  }\n",
        "begin_line": 6716,
        "end_line": 6721,
        "comment": "",
        "child_ranges": [
            "(line 6717,col 5)-(line 6720,col 68)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testMissingProperty14()",
        "snippet": "  public void testMissingProperty14() throws Exception {\n    testTypes(\n        \"var goog = {}; goog.isDef = function(x) { return false; };\" +\n        \"/** @param {Object} obj */\" +\n        \"function foo(obj) { return goog.isNull(obj.impossible); }\",\n        \"Property isNull never defined on goog\");\n  }\n",
        "begin_line": 6723,
        "end_line": 6729,
        "comment": "",
        "child_ranges": [
            "(line 6724,col 5)-(line 6728,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testMissingProperty15()",
        "snippet": "  public void testMissingProperty15() throws Exception {\n    testTypes(\n        \"/** @param {Object} x */\" +\n        \"function f(x) { if (x.foo) { x.foo(); } }\");\n  }\n",
        "begin_line": 6731,
        "end_line": 6735,
        "comment": "",
        "child_ranges": [
            "(line 6732,col 5)-(line 6734,col 53)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testMissingProperty16()",
        "snippet": "  public void testMissingProperty16() throws Exception {\n    testTypes(\n        \"/** @param {Object} x */\" +\n        \"function f(x) { x.foo(); if (x.foo) {} }\",\n        \"Property foo never defined on Object\");\n  }\n",
        "begin_line": 6737,
        "end_line": 6742,
        "comment": "",
        "child_ranges": [
            "(line 6738,col 5)-(line 6741,col 48)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testMissingProperty17()",
        "snippet": "  public void testMissingProperty17() throws Exception {\n    testTypes(\n        \"/** @param {Object} x */\" +\n        \"function f(x) { if (typeof x.foo == 'function') { x.foo(); } }\");\n  }\n",
        "begin_line": 6744,
        "end_line": 6748,
        "comment": "",
        "child_ranges": [
            "(line 6745,col 5)-(line 6747,col 74)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testMissingProperty18()",
        "snippet": "  public void testMissingProperty18() throws Exception {\n    testTypes(\n        \"/** @param {Object} x */\" +\n        \"function f(x) { if (x.foo instanceof Function) { x.foo(); } }\");\n  }\n",
        "begin_line": 6750,
        "end_line": 6754,
        "comment": "",
        "child_ranges": [
            "(line 6751,col 5)-(line 6753,col 73)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testMissingProperty19()",
        "snippet": "  public void testMissingProperty19() throws Exception {\n    testTypes(\n        \"/** @param {Object} x */\" +\n        \"function f(x) { if (x.bar) { if (x.foo) {} } else { x.foo(); } }\",\n        \"Property foo never defined on Object\");\n  }\n",
        "begin_line": 6756,
        "end_line": 6761,
        "comment": "",
        "child_ranges": [
            "(line 6757,col 5)-(line 6760,col 48)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testMissingProperty20()",
        "snippet": "  public void testMissingProperty20() throws Exception {\n    // NOTE(nicksantos): In the else branch, we know that x.foo is a\n    // CHECKED_UNKNOWN (UNKNOWN restricted to a falsey value). We could\n    // do some more sophisticated analysis here. Obviously, if x.foo is false,\n    // then x.foo cannot possibly be called. For example, you could imagine a\n    // VagueType that was like UnknownType, but had some constraints on it\n    // so that we knew it could never be a function.\n    //\n    // For now, we just punt on this issue.\n    testTypes(\n        \"/** @param {Object} x */\" +\n        \"function f(x) { if (x.foo) { } else { x.foo(); } }\");\n  }\n",
        "begin_line": 6763,
        "end_line": 6775,
        "comment": "",
        "child_ranges": [
            "(line 6772,col 5)-(line 6774,col 62)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testMissingProperty21()",
        "snippet": "  public void testMissingProperty21() throws Exception {\n    testTypes(\n        \"/** @param {Object} x */\" +\n        \"function f(x) { x.foo && x.foo(); }\");\n  }\n",
        "begin_line": 6777,
        "end_line": 6781,
        "comment": "",
        "child_ranges": [
            "(line 6778,col 5)-(line 6780,col 47)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testMissingProperty22()",
        "snippet": "  public void testMissingProperty22() throws Exception {\n    testTypes(\n        \"/** @param {Object} x \\n * @return {boolean} */\" +\n        \"function f(x) { return x.foo ? x.foo() : true; }\");\n  }\n",
        "begin_line": 6783,
        "end_line": 6787,
        "comment": "",
        "child_ranges": [
            "(line 6784,col 5)-(line 6786,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testMissingProperty23()",
        "snippet": "  public void testMissingProperty23() throws Exception {\n    testTypes(\n        \"function f(x) { x.impossible(); }\",\n        \"Property impossible never defined on x\");\n  }\n",
        "begin_line": 6789,
        "end_line": 6793,
        "comment": "",
        "child_ranges": [
            "(line 6790,col 5)-(line 6792,col 50)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testMissingProperty24()",
        "snippet": "  public void testMissingProperty24() throws Exception {\n    testClosureTypes(\n        \"goog.addDependency('zzz.js', ['MissingType'], []);\" +\n        \"/** @param {MissingType} x */\" +\n        \"function f(x) { x.impossible(); }\", null);\n  }\n",
        "begin_line": 6795,
        "end_line": 6800,
        "comment": "",
        "child_ranges": [
            "(line 6796,col 5)-(line 6799,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testMissingProperty25()",
        "snippet": "  public void testMissingProperty25() throws Exception {\n    testTypes(\n        \"/** @constructor */ var Foo = function() {};\" +\n        \"Foo.prototype.bar = function() {};\" +\n        \"/** @constructor */ var FooAlias = Foo;\" +\n        \"(new FooAlias()).bar();\");\n  }\n",
        "begin_line": 6802,
        "end_line": 6808,
        "comment": "",
        "child_ranges": [
            "(line 6803,col 5)-(line 6807,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testMissingProperty26()",
        "snippet": "  public void testMissingProperty26() throws Exception {\n    testTypes(\n        \"/** @constructor */ var Foo = function() {};\" +\n        \"/** @constructor */ var FooAlias = Foo;\" +\n        \"FooAlias.prototype.bar = function() {};\" +\n        \"(new Foo()).bar();\");\n  }\n",
        "begin_line": 6810,
        "end_line": 6816,
        "comment": "",
        "child_ranges": [
            "(line 6811,col 5)-(line 6815,col 30)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testMissingProperty27()",
        "snippet": "  public void testMissingProperty27() throws Exception {\n    testClosureTypes(\n        \"goog.addDependency('zzz.js', ['MissingType'], []);\" +\n        \"/** @param {?MissingType} x */\" +\n        \"function f(x) {\" +\n        \"  for (var parent = x; parent; parent = parent.getParent()) {}\" +\n        \"}\", null);\n  }\n",
        "begin_line": 6818,
        "end_line": 6825,
        "comment": "",
        "child_ranges": [
            "(line 6819,col 5)-(line 6824,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testMissingProperty28()",
        "snippet": "  public void testMissingProperty28() throws Exception {\n    testTypes(\n        \"function f(obj) {\" +\n        \"  /** @type {*} */ obj.foo;\" +\n        \"  return obj.foo;\" +\n        \"}\");\n    testTypes(\n        \"function f(obj) {\" +\n        \"  /** @type {*} */ obj.foo;\" +\n        \"  return obj.foox;\" +\n        \"}\",\n        \"Property foox never defined on obj\");\n  }\n",
        "begin_line": 6827,
        "end_line": 6839,
        "comment": "",
        "child_ranges": [
            "(line 6828,col 5)-(line 6832,col 13)",
            "(line 6833,col 5)-(line 6838,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testMissingProperty29()",
        "snippet": "  public void testMissingProperty29() throws Exception {\n    // This used to emit a warning.\n    testTypes(\n        // externs\n        \"/** @constructor */ var Foo;\" +\n        \"Foo.prototype.opera;\" +\n        \"Foo.prototype.opera.postError;\",\n        \"\",\n        null,\n        false);\n  }\n",
        "begin_line": 6841,
        "end_line": 6851,
        "comment": "",
        "child_ranges": [
            "(line 6843,col 5)-(line 6850,col 15)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testDeclaredNativeTypeEquality()",
        "snippet": "  public void testDeclaredNativeTypeEquality() throws Exception {\n    Node n = parseAndTypeCheck(\"/** @constructor */ function Object() {};\");\n    assertEquals(registry.getNativeType(JSTypeNative.OBJECT_FUNCTION_TYPE),\n                 n.getFirstChild().getJSType());\n  }\n",
        "begin_line": 6853,
        "end_line": 6857,
        "comment": "",
        "child_ranges": [
            "(line 6854,col 5)-(line 6854,col 76)",
            "(line 6855,col 5)-(line 6856,col 48)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testUndefinedVar()",
        "snippet": "  public void testUndefinedVar() throws Exception {\n    Node n = parseAndTypeCheck(\"var undefined;\");\n    assertEquals(registry.getNativeType(JSTypeNative.VOID_TYPE),\n                 n.getFirstChild().getFirstChild().getJSType());\n  }\n",
        "begin_line": 6859,
        "end_line": 6863,
        "comment": "",
        "child_ranges": [
            "(line 6860,col 5)-(line 6860,col 49)",
            "(line 6861,col 5)-(line 6862,col 64)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testFlowScopeBug1()",
        "snippet": "  public void testFlowScopeBug1() throws Exception {\n    Node n = parseAndTypeCheck(\"/** @param {number} a \\n\"\n        + \"* @param {number} b */\\n\"\n        + \"function f(a, b) {\\n\"\n        + \"/** @type number */\"\n        + \"var i = 0;\"\n        + \"for (; (i + a) < b; ++i) {}}\");\n\n    // check the type of the add node for i + f\n    assertEquals(registry.getNativeType(JSTypeNative.NUMBER_TYPE),\n        n.getFirstChild().getLastChild().getLastChild().getFirstChild()\n        .getNext().getFirstChild().getJSType());\n  }\n",
        "begin_line": 6865,
        "end_line": 6877,
        "comment": "",
        "child_ranges": [
            "(line 6866,col 5)-(line 6871,col 42)",
            "(line 6874,col 5)-(line 6876,col 48)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testFlowScopeBug2()",
        "snippet": "  public void testFlowScopeBug2() throws Exception {\n    Node n = parseAndTypeCheck(\"/** @constructor */ function Foo() {};\\n\"\n        + \"Foo.prototype.hi = false;\"\n        + \"function foo(a, b) {\\n\"\n        + \"  /** @type Array */\"\n        + \"  var arr;\"\n        + \"  /** @type number */\"\n        + \"  var iter;\"\n        + \"  for (iter = 0; iter < arr.length; ++ iter) {\"\n        + \"    /** @type Foo */\"\n        + \"    var afoo = arr[iter];\"\n        + \"    afoo;\"\n        + \"  }\"\n        + \"}\");\n\n    // check the type of afoo when referenced\n    assertEquals(registry.createOptionalType(\n            registry.createNullableType(registry.getType(\"Foo\"))),\n        n.getLastChild().getLastChild().getLastChild().getLastChild()\n        .getLastChild().getLastChild().getJSType());\n  }\n",
        "begin_line": 6879,
        "end_line": 6899,
        "comment": "",
        "child_ranges": [
            "(line 6880,col 5)-(line 6892,col 15)",
            "(line 6895,col 5)-(line 6898,col 52)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testAddSingletonGetter()",
        "snippet": "  public void testAddSingletonGetter() {\n    Node n = parseAndTypeCheck(\n        \"/** @constructor */ function Foo() {};\\n\" +\n        \"goog.addSingletonGetter(Foo);\");\n    ObjectType o = (ObjectType) n.getFirstChild().getJSType();\n    assertEquals(\"function (): Foo\",\n        o.getPropertyType(\"getInstance\").toString());\n    assertEquals(\"Foo\", o.getPropertyType(\"instance_\").toString());\n  }\n",
        "begin_line": 6901,
        "end_line": 6909,
        "comment": "",
        "child_ranges": [
            "(line 6902,col 5)-(line 6904,col 41)",
            "(line 6905,col 5)-(line 6905,col 62)",
            "(line 6906,col 5)-(line 6907,col 53)",
            "(line 6908,col 5)-(line 6908,col 67)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testTypeCheckStandaloneAST()",
        "snippet": "  public void testTypeCheckStandaloneAST() throws Exception {\n    Node n = compiler.parseTestCode(\"function Foo() { }\");\n    typeCheck(n);\n    TypedScopeCreator scopeCreator = new TypedScopeCreator(compiler);\n    Scope topScope = scopeCreator.createScope(n, null);\n\n    Node second = compiler.parseTestCode(\"new Foo\");\n\n    Node externs = new Node(Token.BLOCK);\n    Node externAndJsRoot = new Node(Token.BLOCK, externs, second);\n    externAndJsRoot.setIsSyntheticBlock(true);\n\n    new TypeCheck(\n        compiler,\n        new SemanticReverseAbstractInterpreter(\n            compiler.getCodingConvention(), registry),\n        registry, topScope, scopeCreator, CheckLevel.WARNING, CheckLevel.OFF)\n        .process(null, second);\n\n    assertEquals(1, compiler.getWarningCount());\n    assertEquals(\"cannot instantiate non-constructor\",\n        compiler.getWarnings()[0].description);\n  }\n",
        "begin_line": 6911,
        "end_line": 6933,
        "comment": "",
        "child_ranges": [
            "(line 6912,col 5)-(line 6912,col 58)",
            "(line 6913,col 5)-(line 6913,col 17)",
            "(line 6914,col 5)-(line 6914,col 69)",
            "(line 6915,col 5)-(line 6915,col 55)",
            "(line 6917,col 5)-(line 6917,col 52)",
            "(line 6919,col 5)-(line 6919,col 41)",
            "(line 6920,col 5)-(line 6920,col 66)",
            "(line 6921,col 5)-(line 6921,col 46)",
            "(line 6923,col 5)-(line 6928,col 31)",
            "(line 6930,col 5)-(line 6930,col 48)",
            "(line 6931,col 5)-(line 6932,col 47)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testBadTemplateType1()",
        "snippet": "  public void testBadTemplateType1() throws Exception {\n    testTypes(\n        \"/**\\n\" +\n        \"* @param {T} x\\n\" +\n        \"* @param {T} y\\n\" +\n        \"* @param {function(this:T, ...)} z\\n\" +\n        \"* @template T\\n\" +\n        \"*/\\n\" +\n        \"function f(x, y, z) {}\\n\" +\n        \"f(this, this, function() { this });\",\n        FunctionTypeBuilder.TEMPLATE_TYPE_DUPLICATED.format(), true);\n  }\n",
        "begin_line": 6935,
        "end_line": 6946,
        "comment": "",
        "child_ranges": [
            "(line 6936,col 5)-(line 6945,col 69)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testBadTemplateType2()",
        "snippet": "  public void testBadTemplateType2() throws Exception {\n    testTypes(\n        \"/**\\n\" +\n        \"* @param {T} x\\n\" +\n        \"* @param {function(this:T, ...)} y\\n\" +\n        \"* @template T\\n\" +\n        \"*/\\n\" +\n        \"function f(x, y) {}\\n\" +\n        \"f(0, function() {});\",\n        TypeInference.TEMPLATE_TYPE_NOT_OBJECT_TYPE.format(), true);\n  }\n",
        "begin_line": 6948,
        "end_line": 6958,
        "comment": "",
        "child_ranges": [
            "(line 6949,col 5)-(line 6957,col 68)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testBadTemplateType3()",
        "snippet": "  public void testBadTemplateType3() throws Exception {\n    testTypes(\n        \"/**\\n\" +\n        \" * @param {T} x\\n\" +\n        \" * @template T\\n\" +\n        \"*/\\n\" +\n        \"function f(x) {}\\n\" +\n        \"f(this);\",\n        TypeInference.TEMPLATE_TYPE_OF_THIS_EXPECTED.format(), true);\n  }\n",
        "begin_line": 6960,
        "end_line": 6969,
        "comment": "",
        "child_ranges": [
            "(line 6961,col 5)-(line 6968,col 69)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testBadTemplateType4()",
        "snippet": "  public void testBadTemplateType4() throws Exception {\n    testTypes(\n        \"/**\\n\" +\n        \"* @template T\\n\" +\n        \"*/\\n\" +\n        \"function f() {}\\n\" +\n        \"f();\",\n        FunctionTypeBuilder.TEMPLATE_TYPE_EXPECTED.format(), true);\n  }\n",
        "begin_line": 6971,
        "end_line": 6979,
        "comment": "",
        "child_ranges": [
            "(line 6972,col 5)-(line 6978,col 67)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testBadTemplateType5()",
        "snippet": "  public void testBadTemplateType5() throws Exception {\n    testTypes(\n        \"/**\\n\" +\n        \"* @template T\\n\" +\n        \"* @return {T}\\n\" +\n        \"*/\\n\" +\n        \"function f() {}\\n\" +\n        \"f();\",\n        FunctionTypeBuilder.TEMPLATE_TYPE_EXPECTED.format(), true);\n  }\n",
        "begin_line": 6981,
        "end_line": 6990,
        "comment": "",
        "child_ranges": [
            "(line 6982,col 5)-(line 6989,col 67)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.checkObjectType(com.google.javascript.rhino.jstype.ObjectType, java.lang.String, com.google.javascript.rhino.jstype.JSType)",
        "snippet": "  private void checkObjectType(ObjectType objectType, String propertyName,\n        JSType expectedType) {\n    assertTrue(\"Expected \" + objectType.getReferenceName() +\n        \" to have property \" +\n        propertyName, objectType.hasProperty(propertyName));\n    assertEquals(\"Expected \" + objectType.getReferenceName() +\n        \"'s property \" +\n        propertyName + \" to have type \" + expectedType,\n        expectedType, objectType.getPropertyType(propertyName));\n  }\n",
        "begin_line": 6992,
        "end_line": 7001,
        "comment": "",
        "child_ranges": [
            "(line 6994,col 5)-(line 6996,col 60)",
            "(line 6997,col 5)-(line 7000,col 64)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testTypes(java.lang.String)",
        "snippet": "  private void testTypes(String js) throws Exception {\n    testTypes(js, (String) null);\n  }\n",
        "begin_line": 7003,
        "end_line": 7005,
        "comment": "",
        "child_ranges": [
            "(line 7004,col 5)-(line 7004,col 33)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testTypes(java.lang.String, java.lang.String)",
        "snippet": "  private void testTypes(String js, String description) throws Exception {\n    testTypes(js, description, false);\n  }\n",
        "begin_line": 7007,
        "end_line": 7009,
        "comment": "",
        "child_ranges": [
            "(line 7008,col 5)-(line 7008,col 38)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testTypes(java.lang.String, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  private void testTypes(String js, DiagnosticType type) throws Exception {\n    testTypes(js, type.format(), false);\n  }\n",
        "begin_line": 7011,
        "end_line": 7013,
        "comment": "",
        "child_ranges": [
            "(line 7012,col 5)-(line 7012,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testClosureTypes(java.lang.String, java.lang.String)",
        "snippet": "  private void testClosureTypes(String js, String description)\n      throws Exception {\n    testClosureTypesMultipleWarnings(js,\n        description == null ? null : Lists.newArrayList(description));\n  }\n",
        "begin_line": 7015,
        "end_line": 7019,
        "comment": "",
        "child_ranges": [
            "(line 7017,col 5)-(line 7018,col 70)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testClosureTypesMultipleWarnings(java.lang.String, java.util.List<java.lang.String>)",
        "snippet": "  private void testClosureTypesMultipleWarnings(\n      String js, List<String> descriptions) throws Exception {\n    Node n = compiler.parseTestCode(js);\n    Node externs = new Node(Token.BLOCK);\n    Node externAndJsRoot = new Node(Token.BLOCK, externs, n);\n    externAndJsRoot.setIsSyntheticBlock(true);\n\n    assertEquals(\"parsing error: \" +\n        Joiner.on(\", \").join(compiler.getErrors()),\n        0, compiler.getErrorCount());\n\n    // For processing goog.addDependency for forward typedefs.\n    new ProcessClosurePrimitives(compiler, CheckLevel.ERROR, true)\n        .process(null, n);\n\n    CodingConvention convention = compiler.getCodingConvention();\n    new TypeCheck(compiler,\n        new ClosureReverseAbstractInterpreter(\n            convention, registry).append(\n                new SemanticReverseAbstractInterpreter(\n                    convention, registry))\n            .getFirst(),\n        registry)\n        .processForTesting(null, n);\n\n    assertEquals(0, compiler.getErrorCount());\n\n    if (descriptions == null) {\n      assertEquals(\n          \"unexpected warning(s) : \" +\n          Joiner.on(\", \").join(compiler.getWarnings()),\n          0, compiler.getWarningCount());\n    } else {\n      assertEquals(descriptions.size(), compiler.getWarningCount());\n      for (int i = 0; i < descriptions.size(); i++) {\n        assertEquals(descriptions.get(i),\n            compiler.getWarnings()[i].description);\n      }\n    }\n  }\n",
        "begin_line": 7021,
        "end_line": 7060,
        "comment": "",
        "child_ranges": [
            "(line 7023,col 5)-(line 7023,col 40)",
            "(line 7024,col 5)-(line 7024,col 41)",
            "(line 7025,col 5)-(line 7025,col 61)",
            "(line 7026,col 5)-(line 7026,col 46)",
            "(line 7028,col 5)-(line 7030,col 37)",
            "(line 7033,col 5)-(line 7034,col 26)",
            "(line 7036,col 5)-(line 7036,col 65)",
            "(line 7037,col 5)-(line 7044,col 36)",
            "(line 7046,col 5)-(line 7046,col 46)",
            "(line 7048,col 5)-(line 7059,col 5)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testTypes(java.lang.String, java.lang.String, boolean)",
        "snippet": "  void testTypes(String js, String description, boolean isError)\n      throws Exception {\n    testTypes(DEFAULT_EXTERNS, js, description, isError);\n  }\n",
        "begin_line": 7062,
        "end_line": 7065,
        "comment": "",
        "child_ranges": [
            "(line 7064,col 5)-(line 7064,col 57)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testTypes(java.lang.String, java.lang.String, java.lang.String, boolean)",
        "snippet": "  void testTypes(String externs, String js, String description, boolean isError)\n      throws Exception {\n    Node n = parseAndTypeCheck(externs, js);\n\n    JSError[] errors = compiler.getErrors();\n    if (description != null && isError) {\n      assertTrue(\"expected an error\", errors.length > 0);\n      assertEquals(description, errors[0].description);\n      errors = Arrays.asList(errors).subList(1, errors.length).toArray(\n          new JSError[errors.length - 1]);\n    }\n    if (errors.length > 0) {\n      fail(\"unexpected error(s):\\n\" + Joiner.on(\"\\n\").join(errors));\n    }\n\n    JSError[] warnings = compiler.getWarnings();\n    if (description != null && !isError) {\n      assertTrue(\"expected a warning\", warnings.length > 0);\n      assertEquals(description, warnings[0].description);\n      warnings = Arrays.asList(warnings).subList(1, warnings.length).toArray(\n          new JSError[warnings.length - 1]);\n    }\n    if (warnings.length > 0) {\n      fail(\"unexpected warnings(s):\\n\" + Joiner.on(\"\\n\").join(warnings));\n    }\n  }\n",
        "begin_line": 7067,
        "end_line": 7092,
        "comment": "",
        "child_ranges": [
            "(line 7069,col 5)-(line 7069,col 44)",
            "(line 7071,col 5)-(line 7071,col 44)",
            "(line 7072,col 5)-(line 7077,col 5)",
            "(line 7078,col 5)-(line 7080,col 5)",
            "(line 7082,col 5)-(line 7082,col 48)",
            "(line 7083,col 5)-(line 7088,col 5)",
            "(line 7089,col 5)-(line 7091,col 5)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.parseAndTypeCheck(java.lang.String)",
        "snippet": "  private Node parseAndTypeCheck(String js) {\n    return parseAndTypeCheck(DEFAULT_EXTERNS, js);\n  }\n",
        "begin_line": 7097,
        "end_line": 7099,
        "comment": "\n   * Parses and type checks the JavaScript code.\n   ",
        "child_ranges": [
            "(line 7098,col 5)-(line 7098,col 50)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.parseAndTypeCheck(java.lang.String, java.lang.String)",
        "snippet": "  private Node parseAndTypeCheck(String externs, String js) {\n    return parseAndTypeCheckWithScope(externs, js).root;\n  }\n",
        "begin_line": 7101,
        "end_line": 7103,
        "comment": "",
        "child_ranges": [
            "(line 7102,col 5)-(line 7102,col 56)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.parseAndTypeCheckWithScope(java.lang.String)",
        "snippet": "  private TypeCheckResult parseAndTypeCheckWithScope(String js) {\n    return parseAndTypeCheckWithScope(DEFAULT_EXTERNS, js);\n  }\n",
        "begin_line": 7109,
        "end_line": 7111,
        "comment": "\n   * Parses and type checks the JavaScript code and returns the Scope used\n   * whilst type checking.\n   ",
        "child_ranges": [
            "(line 7110,col 5)-(line 7110,col 59)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.parseAndTypeCheckWithScope(java.lang.String, java.lang.String)",
        "snippet": "  private TypeCheckResult parseAndTypeCheckWithScope(\n      String externs, String js) {\n    compiler.init(\n        Lists.newArrayList(JSSourceFile.fromCode(\"[externs]\", externs)),\n        Lists.newArrayList(JSSourceFile.fromCode(\"[testcode]\", js)),\n        compiler.getOptions());\n\n    Node n = compiler.getInput(\"[testcode]\").getAstRoot(compiler);\n    Node externsNode = compiler.getInput(\"[externs]\").getAstRoot(compiler);\n    Node externAndJsRoot = new Node(Token.BLOCK, externsNode, n);\n    externAndJsRoot.setIsSyntheticBlock(true);\n\n    assertEquals(\"parsing error: \" +\n        Joiner.on(\", \").join(compiler.getErrors()),\n        0, compiler.getErrorCount());\n\n    Scope s = makeTypeCheck().processForTesting(externsNode, n);\n    return new TypeCheckResult(n, s);\n  }\n",
        "begin_line": 7113,
        "end_line": 7131,
        "comment": "",
        "child_ranges": [
            "(line 7115,col 5)-(line 7118,col 31)",
            "(line 7120,col 5)-(line 7120,col 66)",
            "(line 7121,col 5)-(line 7121,col 75)",
            "(line 7122,col 5)-(line 7122,col 65)",
            "(line 7123,col 5)-(line 7123,col 46)",
            "(line 7125,col 5)-(line 7127,col 37)",
            "(line 7129,col 5)-(line 7129,col 64)",
            "(line 7130,col 5)-(line 7130,col 37)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.typeCheck(com.google.javascript.rhino.Node)",
        "snippet": "  private Node typeCheck(Node n) {\n    Node externsNode = new Node(Token.BLOCK);\n    Node externAndJsRoot = new Node(Token.BLOCK, externsNode, n);\n    externAndJsRoot.setIsSyntheticBlock(true);\n\n    makeTypeCheck().processForTesting(null, n);\n    return n;\n  }\n",
        "begin_line": 7133,
        "end_line": 7140,
        "comment": "",
        "child_ranges": [
            "(line 7134,col 5)-(line 7134,col 45)",
            "(line 7135,col 5)-(line 7135,col 65)",
            "(line 7136,col 5)-(line 7136,col 46)",
            "(line 7138,col 5)-(line 7138,col 47)",
            "(line 7139,col 5)-(line 7139,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.makeTypeCheck()",
        "snippet": "  private TypeCheck makeTypeCheck() {\n    return new TypeCheck(\n        compiler,\n        new SemanticReverseAbstractInterpreter(\n            compiler.getCodingConvention(), registry),\n        registry);\n  }\n",
        "begin_line": 7142,
        "end_line": 7148,
        "comment": "",
        "child_ranges": [
            "(line 7143,col 5)-(line 7147,col 18)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testTypes(java.lang.String, java.lang.String[])",
        "snippet": "  void testTypes(String js, String[] warnings) throws Exception {\n    Node n = compiler.parseTestCode(js);\n    assertEquals(0, compiler.getErrorCount());\n    Node externsNode = new Node(Token.BLOCK);\n    Node externAndJsRoot = new Node(Token.BLOCK, externsNode, n);\n\n    makeTypeCheck().processForTesting(null, n);\n    assertEquals(0, compiler.getErrorCount());\n    if (warnings != null) {\n      assertEquals(warnings.length, compiler.getWarningCount());\n      JSError[] messages = compiler.getWarnings();\n      for (int i = 0; i < warnings.length && i < compiler.getWarningCount();\n           i++) {\n        assertEquals(warnings[i], messages[i].description);\n      }\n    } else {\n      assertEquals(0, compiler.getWarningCount());\n    }\n  }\n",
        "begin_line": 7150,
        "end_line": 7168,
        "comment": "",
        "child_ranges": [
            "(line 7151,col 5)-(line 7151,col 40)",
            "(line 7152,col 5)-(line 7152,col 46)",
            "(line 7153,col 5)-(line 7153,col 45)",
            "(line 7154,col 5)-(line 7154,col 65)",
            "(line 7156,col 5)-(line 7156,col 47)",
            "(line 7157,col 5)-(line 7157,col 46)",
            "(line 7158,col 5)-(line 7167,col 5)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.suppressMissingProperty(java.lang.String...)",
        "snippet": "  String suppressMissingProperty(String ... props) {\n    String result = \"function dummy(x) { \";\n    for (String prop : props) {\n      result += \"x.\" + prop + \" = 3;\";\n    }\n    return result + \"}\";\n  }\n",
        "begin_line": 7170,
        "end_line": 7176,
        "comment": "",
        "child_ranges": [
            "(line 7171,col 5)-(line 7171,col 43)",
            "(line 7172,col 5)-(line 7174,col 5)",
            "(line 7175,col 5)-(line 7175,col 24)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.TypeCheckResult.TypeCheckResult(com.google.javascript.rhino.Node, com.google.javascript.jscomp.Scope)",
        "snippet": "    private TypeCheckResult(Node root, Scope scope) {\n      this.root = root;\n      this.scope = scope;\n    }\n",
        "begin_line": 7182,
        "end_line": 7185,
        "comment": "",
        "child_ranges": [
            "(line 7183,col 7)-(line 7183,col 23)",
            "(line 7184,col 7)-(line 7184,col 25)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.setUp()",
        "snippet": "  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    reportMissingOverrides = CheckLevel.WARNING;\n  }\n",
        "begin_line": 40,
        "end_line": 44,
        "comment": "",
        "child_ranges": [
            "(line 42,col 5)-(line 42,col 18)",
            "(line 43,col 5)-(line 43,col 48)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInitialTypingScope()",
        "snippet": "  public void testInitialTypingScope() {\n    Scope s = new TypedScopeCreator(compiler,\n        new DefaultCodingConvention()).createInitialScope(\n            new Node(Token.BLOCK));\n\n    assertEquals(ARRAY_FUNCTION_TYPE, s.getVar(\"Array\").getType());\n    assertEquals(BOOLEAN_OBJECT_FUNCTION_TYPE,\n        s.getVar(\"Boolean\").getType());\n    assertEquals(DATE_FUNCTION_TYPE, s.getVar(\"Date\").getType());\n    assertEquals(ERROR_FUNCTION_TYPE, s.getVar(\"Error\").getType());\n    assertEquals(EVAL_ERROR_FUNCTION_TYPE,\n        s.getVar(\"EvalError\").getType());\n    assertEquals(NUMBER_OBJECT_FUNCTION_TYPE,\n        s.getVar(\"Number\").getType());\n    assertEquals(OBJECT_FUNCTION_TYPE, s.getVar(\"Object\").getType());\n    assertEquals(RANGE_ERROR_FUNCTION_TYPE,\n        s.getVar(\"RangeError\").getType());\n    assertEquals(REFERENCE_ERROR_FUNCTION_TYPE,\n        s.getVar(\"ReferenceError\").getType());\n    assertEquals(REGEXP_FUNCTION_TYPE, s.getVar(\"RegExp\").getType());\n    assertEquals(STRING_OBJECT_FUNCTION_TYPE,\n        s.getVar(\"String\").getType());\n    assertEquals(SYNTAX_ERROR_FUNCTION_TYPE,\n        s.getVar(\"SyntaxError\").getType());\n    assertEquals(TYPE_ERROR_FUNCTION_TYPE,\n        s.getVar(\"TypeError\").getType());\n    assertEquals(URI_ERROR_FUNCTION_TYPE,\n        s.getVar(\"URIError\").getType());\n  }\n",
        "begin_line": 46,
        "end_line": 74,
        "comment": "",
        "child_ranges": [
            "(line 47,col 5)-(line 49,col 35)",
            "(line 51,col 5)-(line 51,col 67)",
            "(line 52,col 5)-(line 53,col 39)",
            "(line 54,col 5)-(line 54,col 65)",
            "(line 55,col 5)-(line 55,col 67)",
            "(line 56,col 5)-(line 57,col 41)",
            "(line 58,col 5)-(line 59,col 38)",
            "(line 60,col 5)-(line 60,col 69)",
            "(line 61,col 5)-(line 62,col 42)",
            "(line 63,col 5)-(line 64,col 46)",
            "(line 65,col 5)-(line 65,col 69)",
            "(line 66,col 5)-(line 67,col 38)",
            "(line 68,col 5)-(line 69,col 43)",
            "(line 70,col 5)-(line 71,col 41)",
            "(line 72,col 5)-(line 73,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypeCheck1()",
        "snippet": "  public void testTypeCheck1() throws Exception {\n    testTypes(\"/**@return {void}*/function foo(){ if (foo()) return; }\");\n  }\n",
        "begin_line": 76,
        "end_line": 78,
        "comment": "",
        "child_ranges": [
            "(line 77,col 5)-(line 77,col 73)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypeCheck2()",
        "snippet": "  public void testTypeCheck2() throws Exception {\n    testTypes(\"/**@return {void}*/function foo(){ var x=foo(); x--; }\",\n        \"increment/decrement\\n\" +\n        \"found   : undefined\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 80,
        "end_line": 85,
        "comment": "",
        "child_ranges": [
            "(line 81,col 5)-(line 84,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypeCheck4()",
        "snippet": "  public void testTypeCheck4() throws Exception {\n    testTypes(\"/**@return {void}*/function foo(){ !foo(); }\");\n  }\n",
        "begin_line": 87,
        "end_line": 89,
        "comment": "",
        "child_ranges": [
            "(line 88,col 5)-(line 88,col 62)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypeCheck5()",
        "snippet": "  public void testTypeCheck5() throws Exception {\n    testTypes(\"/**@return {void}*/function foo(){ var a = +foo(); }\",\n        \"sign operator\\n\" +\n        \"found   : undefined\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 91,
        "end_line": 96,
        "comment": "",
        "child_ranges": [
            "(line 92,col 5)-(line 95,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypeCheck6()",
        "snippet": "  public void testTypeCheck6() throws Exception {\n    testTypes(\n        \"/**@return {void}*/function foo(){\" +\n        \"/** @type {undefined|number} */var a;if (a == foo())return;}\");\n  }\n",
        "begin_line": 98,
        "end_line": 102,
        "comment": "",
        "child_ranges": [
            "(line 99,col 5)-(line 101,col 72)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypeCheck7()",
        "snippet": "  public void testTypeCheck7() throws Exception {\n    testTypes(\"function foo() {delete 'abc';}\",\n        TypeCheck.BAD_DELETE);\n  }\n",
        "begin_line": 104,
        "end_line": 107,
        "comment": "",
        "child_ranges": [
            "(line 105,col 5)-(line 106,col 30)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypeCheck8()",
        "snippet": "  public void testTypeCheck8() throws Exception {\n    testTypes(\"/**@return {void}*/function foo(){do {} while (foo());}\");\n  }\n",
        "begin_line": 109,
        "end_line": 111,
        "comment": "",
        "child_ranges": [
            "(line 110,col 5)-(line 110,col 73)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypeCheck9()",
        "snippet": "  public void testTypeCheck9() throws Exception {\n    testTypes(\"/**@return {void}*/function foo(){while (foo());}\");\n  }\n",
        "begin_line": 113,
        "end_line": 115,
        "comment": "",
        "child_ranges": [
            "(line 114,col 5)-(line 114,col 67)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypeCheck10()",
        "snippet": "  public void testTypeCheck10() throws Exception {\n    testTypes(\"/**@return {void}*/function foo(){for (;foo(););}\");\n  }\n",
        "begin_line": 117,
        "end_line": 119,
        "comment": "",
        "child_ranges": [
            "(line 118,col 5)-(line 118,col 67)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypeCheck11()",
        "snippet": "  public void testTypeCheck11() throws Exception {\n    testTypes(\"/**@type !Number */var a;\" +\n        \"/**@type !String */var b;\" +\n        \"a = b;\",\n        \"assignment\\n\" +\n        \"found   : String\\n\" +\n        \"required: Number\");\n  }\n",
        "begin_line": 121,
        "end_line": 128,
        "comment": "",
        "child_ranges": [
            "(line 122,col 5)-(line 127,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypeCheck12()",
        "snippet": "  public void testTypeCheck12() throws Exception {\n    testTypes(\"/**@return {!Object}*/function foo(){var a = 3^foo();}\",\n        \"bad right operand to bitwise operator\\n\" +\n        \"found   : Object\\n\" +\n        \"required: (boolean|null|number|string|undefined)\");\n  }\n",
        "begin_line": 130,
        "end_line": 135,
        "comment": "",
        "child_ranges": [
            "(line 131,col 5)-(line 134,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypeCheck13()",
        "snippet": "  public void testTypeCheck13() throws Exception {\n    testTypes(\"/**@type {!Number|!String}*/var i; i=/xx/;\",\n        \"assignment\\n\" +\n        \"found   : RegExp\\n\" +\n        \"required: (Number|String)\");\n  }\n",
        "begin_line": 137,
        "end_line": 142,
        "comment": "",
        "child_ranges": [
            "(line 138,col 5)-(line 141,col 37)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypeCheck14()",
        "snippet": "  public void testTypeCheck14() throws Exception {\n    testTypes(\"/**@param opt_a*/function foo(opt_a){}\");\n  }\n",
        "begin_line": 144,
        "end_line": 146,
        "comment": "",
        "child_ranges": [
            "(line 145,col 5)-(line 145,col 56)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypeCheck15()",
        "snippet": "  public void testTypeCheck15() throws Exception {\n    testTypes(\"/**@type {Number|null} */var x;x=null;x=10;\",\n        \"assignment\\n\" +\n        \"found   : number\\n\" +\n        \"required: (Number|null)\");\n  }\n",
        "begin_line": 149,
        "end_line": 154,
        "comment": "",
        "child_ranges": [
            "(line 150,col 5)-(line 153,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypeCheck16()",
        "snippet": "  public void testTypeCheck16() throws Exception {\n    testTypes(\"/**@type {Number|null} */var x='';\",\n              \"initializing variable\\n\" +\n              \"found   : string\\n\" +\n              \"required: (Number|null)\");\n  }\n",
        "begin_line": 156,
        "end_line": 161,
        "comment": "",
        "child_ranges": [
            "(line 157,col 5)-(line 160,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypeCheck17()",
        "snippet": "  public void testTypeCheck17() throws Exception {\n    testTypes(\"/**@return {Number}\\n@param {Number} opt_foo */\\n\" +\n        \"function a(opt_foo){\\nreturn /**@type {Number}*/(opt_foo);\\n}\");\n  }\n",
        "begin_line": 164,
        "end_line": 167,
        "comment": "",
        "child_ranges": [
            "(line 165,col 5)-(line 166,col 73)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypeCheck18()",
        "snippet": "  public void testTypeCheck18() throws Exception {\n    testTypes(\"/**@return {RegExp}\\n*/\\n function a(){return new RegExp();}\");\n  }\n",
        "begin_line": 170,
        "end_line": 172,
        "comment": "",
        "child_ranges": [
            "(line 171,col 5)-(line 171,col 78)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypeCheck19()",
        "snippet": "  public void testTypeCheck19() throws Exception {\n    testTypes(\"/**@return {Array}\\n*/\\n function a(){return new Array();}\");\n  }\n",
        "begin_line": 174,
        "end_line": 176,
        "comment": "",
        "child_ranges": [
            "(line 175,col 5)-(line 175,col 76)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypeCheck20()",
        "snippet": "  public void testTypeCheck20() throws Exception {\n    testTypes(\"/**@return {Date}\\n*/\\n function a(){return new Date();}\");\n  }\n",
        "begin_line": 178,
        "end_line": 180,
        "comment": "",
        "child_ranges": [
            "(line 179,col 5)-(line 179,col 74)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypeCheckBasicDowncast()",
        "snippet": "  public void testTypeCheckBasicDowncast() throws Exception {\n    testTypes(\"/** @constructor */function foo() {}\\n\" +\n                  \"/** @type {Object} */ var bar = new foo();\\n\");\n  }\n",
        "begin_line": 182,
        "end_line": 185,
        "comment": "",
        "child_ranges": [
            "(line 183,col 5)-(line 184,col 66)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypeCheckNoDowncastToNumber()",
        "snippet": "  public void testTypeCheckNoDowncastToNumber() throws Exception {\n    testTypes(\"/** @constructor */function foo() {}\\n\" +\n                  \"/** @type {!Number} */ var bar = new foo();\\n\",\n        \"initializing variable\\n\" +\n        \"found   : foo\\n\" +\n        \"required: Number\");\n  }\n",
        "begin_line": 187,
        "end_line": 193,
        "comment": "",
        "child_ranges": [
            "(line 188,col 5)-(line 192,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypeCheck21()",
        "snippet": "  public void testTypeCheck21() throws Exception {\n    testTypes(\"/** @type Array.<String> */var foo;\");\n  }\n",
        "begin_line": 195,
        "end_line": 197,
        "comment": "",
        "child_ranges": [
            "(line 196,col 5)-(line 196,col 53)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypeCheck22()",
        "snippet": "  public void testTypeCheck22() throws Exception {\n    testTypes(\"/** @param {Element|Object} p */\\nfunction foo(p){}\\n\" +\n                  \"/** @constructor */function Element(){}\\n\" +\n                  \"/** @type {Element|Object} */var v;\\n\" +\n                  \"foo(v);\\n\");\n  }\n",
        "begin_line": 199,
        "end_line": 204,
        "comment": "",
        "child_ranges": [
            "(line 200,col 5)-(line 203,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypeCheck23()",
        "snippet": "  public void testTypeCheck23() throws Exception {\n    testTypes(\"/** @type {(Object,Null)} */var foo; foo = null;\");\n  }\n",
        "begin_line": 206,
        "end_line": 208,
        "comment": "",
        "child_ranges": [
            "(line 207,col 5)-(line 207,col 66)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypeCheck24()",
        "snippet": "  public void testTypeCheck24() throws Exception {\n    testTypes(\"/** @constructor */function MyType(){}\\n\" +\n        \"/** @type {(MyType,Null)} */var foo; foo = null;\");\n  }\n",
        "begin_line": 210,
        "end_line": 213,
        "comment": "",
        "child_ranges": [
            "(line 211,col 5)-(line 212,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypeCheckDefaultExterns()",
        "snippet": "  public void testTypeCheckDefaultExterns() throws Exception {\n    testTypes(\"/** @param {string} x */ function f(x) {}\" +\n        \"f([].length);\" ,\n        \"actual parameter 1 of f does not match formal parameter\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 215,
        "end_line": 221,
        "comment": "",
        "child_ranges": [
            "(line 216,col 5)-(line 220,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypeCheckCustomExterns()",
        "snippet": "  public void testTypeCheckCustomExterns() throws Exception {\n    testTypes(\n        DEFAULT_EXTERNS + \"/** @type {boolean} */ Array.prototype.oogabooga;\",\n        \"/** @param {string} x */ function f(x) {}\" +\n        \"f([].oogabooga);\" ,\n        \"actual parameter 1 of f does not match formal parameter\\n\" +\n        \"found   : boolean\\n\" +\n        \"required: string\", false);\n  }\n",
        "begin_line": 223,
        "end_line": 231,
        "comment": "",
        "child_ranges": [
            "(line 224,col 5)-(line 230,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testParameterizedArray1()",
        "snippet": "  public void testParameterizedArray1() throws Exception {\n    testTypes(\"/** @param {!Array.<number>} a\\n\" +\n        \"* @return {string}\\n\" +\n        \"*/ var f = function(a) { return a[0]; };\",\n        \"inconsistent return type\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 233,
        "end_line": 240,
        "comment": "",
        "child_ranges": [
            "(line 234,col 5)-(line 239,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testParameterizedArray2()",
        "snippet": "  public void testParameterizedArray2() throws Exception {\n    testTypes(\"/** @param {!Array.<!Array.<number>>} a\\n\" +\n        \"* @return {number}\\n\" +\n        \"*/ var f = function(a) { return a[0]; };\",\n        \"inconsistent return type\\n\" +\n        \"found   : Array\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 242,
        "end_line": 249,
        "comment": "",
        "child_ranges": [
            "(line 243,col 5)-(line 248,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testParameterizedArray3()",
        "snippet": "  public void testParameterizedArray3() throws Exception {\n    testTypes(\"/** @param {!Array.<number>} a\\n\" +\n        \"* @return {number}\\n\" +\n        \"*/ var f = function(a) { a[1] = 0; return a[0]; };\");\n  }\n",
        "begin_line": 251,
        "end_line": 255,
        "comment": "",
        "child_ranges": [
            "(line 252,col 5)-(line 254,col 62)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testParameterizedArray4()",
        "snippet": "  public void testParameterizedArray4() throws Exception {\n    testTypes(\"/** @param {!Array.<number>} a\\n\" +\n        \"*/ var f = function(a) { a[0] = 'a'; };\",\n        \"assignment\\n\" +\n        \"found   : string\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 257,
        "end_line": 263,
        "comment": "",
        "child_ranges": [
            "(line 258,col 5)-(line 262,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testParameterizedArray5()",
        "snippet": "  public void testParameterizedArray5() throws Exception {\n    testTypes(\"/** @param {!Array.<*>} a\\n\" +\n        \"*/ var f = function(a) { a[0] = 'a'; };\");\n  }\n",
        "begin_line": 265,
        "end_line": 268,
        "comment": "",
        "child_ranges": [
            "(line 266,col 5)-(line 267,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testParameterizedArray6()",
        "snippet": "  public void testParameterizedArray6() throws Exception {\n    testTypes(\"/** @param {!Array.<*>} a\\n\" +\n        \"* @return {string}\\n\" +\n        \"*/ var f = function(a) { return a[0]; };\",\n        \"inconsistent return type\\n\" +\n        \"found   : *\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 270,
        "end_line": 277,
        "comment": "",
        "child_ranges": [
            "(line 271,col 5)-(line 276,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testParameterizedArray7()",
        "snippet": "  public void testParameterizedArray7() throws Exception {\n    testTypes(\"/** @param {?Array.<number>} a\\n\" +\n        \"* @return {string}\\n\" +\n        \"*/ var f = function(a) { return a[0]; };\",\n        \"inconsistent return type\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 279,
        "end_line": 286,
        "comment": "",
        "child_ranges": [
            "(line 280,col 5)-(line 285,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testParameterizedObject1()",
        "snippet": "  public void testParameterizedObject1() throws Exception {\n    testTypes(\"/** @param {!Object.<number>} a\\n\" +\n        \"* @return {string}\\n\" +\n        \"*/ var f = function(a) { return a[0]; };\",\n        \"inconsistent return type\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 288,
        "end_line": 295,
        "comment": "",
        "child_ranges": [
            "(line 289,col 5)-(line 294,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testParameterizedObject2()",
        "snippet": "  public void testParameterizedObject2() throws Exception {\n    testTypes(\"/** @param {!Object.<string,number>} a\\n\" +\n        \"* @return {string}\\n\" +\n        \"*/ var f = function(a) { return a['x']; };\",\n        \"inconsistent return type\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 297,
        "end_line": 304,
        "comment": "",
        "child_ranges": [
            "(line 298,col 5)-(line 303,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testParameterizedObject3()",
        "snippet": "  public void testParameterizedObject3() throws Exception {\n    testTypes(\"/** @param {!Object.<number,string>} a\\n\" +\n        \"* @return {string}\\n\" +\n        \"*/ var f = function(a) { return a['x']; };\",\n        \"restricted index type\\n\" +\n        \"found   : string\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 306,
        "end_line": 313,
        "comment": "",
        "child_ranges": [
            "(line 307,col 5)-(line 312,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testParameterizedObject4()",
        "snippet": "  public void testParameterizedObject4() throws Exception {\n    testTypes(\"/** @enum {string} */ var E = {A: 'a', B: 'b'};\\n\" +\n        \"/** @param {!Object.<E,string>} a\\n\" +\n        \"* @return {string}\\n\" +\n        \"*/ var f = function(a) { return a['x']; };\",\n        \"restricted index type\\n\" +\n        \"found   : string\\n\" +\n        \"required: E.<string>\");\n  }\n",
        "begin_line": 315,
        "end_line": 323,
        "comment": "",
        "child_ranges": [
            "(line 316,col 5)-(line 322,col 32)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testUnionOfFunctionAndType()",
        "snippet": "  public void testUnionOfFunctionAndType() throws Exception {\n    testTypes(\"/** @type {null|(function(Number):void)} */ var a;\" +\n        \"/** @type {(function(Number):void)|null} */ var b = null; a = b;\");\n  }\n",
        "begin_line": 325,
        "end_line": 328,
        "comment": "",
        "child_ranges": [
            "(line 326,col 5)-(line 327,col 76)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testOptionalParameterComparedToUndefined()",
        "snippet": "  public void testOptionalParameterComparedToUndefined() throws Exception {\n    testTypes(\"/**@param opt_a {Number}*/function foo(opt_a)\" +\n        \"{if (opt_a==undefined) var b = 3;}\");\n  }\n",
        "begin_line": 330,
        "end_line": 333,
        "comment": "",
        "child_ranges": [
            "(line 331,col 5)-(line 332,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testOptionalAllType()",
        "snippet": "  public void testOptionalAllType() throws Exception {\n    testTypes(\"/** @param {*} opt_x */function f(opt_x) { return opt_x }\\n\" +\n        \"/** @type {*} */var y;\\n\" +\n        \"f(y);\");\n  }\n",
        "begin_line": 335,
        "end_line": 339,
        "comment": "",
        "child_ranges": [
            "(line 336,col 5)-(line 338,col 17)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testOptionalUnknownNamedType()",
        "snippet": "  public void testOptionalUnknownNamedType() throws Exception {\n    testTypes(\"/** @param {!T} opt_x\\n@return {undefined} */\\n\" +\n        \"function f(opt_x) { return opt_x; }\\n\" +\n        \"/** @constructor */var T = function() {};\",\n        \"inconsistent return type\\n\" +\n        \"found   : (T|undefined)\\n\" +\n        \"required: undefined\");\n  }\n",
        "begin_line": 341,
        "end_line": 348,
        "comment": "",
        "child_ranges": [
            "(line 342,col 5)-(line 347,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testOptionalArgFunctionParam()",
        "snippet": "  public void testOptionalArgFunctionParam() throws Exception {\n    testTypes(\"/** @param {function(number=)} a */\" +\n        \"function f(a) {a()};\");\n  }\n",
        "begin_line": 350,
        "end_line": 353,
        "comment": "",
        "child_ranges": [
            "(line 351,col 5)-(line 352,col 32)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testOptionalArgFunctionParam2()",
        "snippet": "  public void testOptionalArgFunctionParam2() throws Exception {\n    testTypes(\"/** @param {function(number=)} a */\" +\n        \"function f(a) {a(3)};\");\n  }\n",
        "begin_line": 355,
        "end_line": 358,
        "comment": "",
        "child_ranges": [
            "(line 356,col 5)-(line 357,col 33)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testOptionalArgFunctionParam3()",
        "snippet": "  public void testOptionalArgFunctionParam3() throws Exception {\n    testTypes(\"/** @param {function(number=)} a */\" +\n        \"function f(a) {a(undefined)};\");\n  }\n",
        "begin_line": 360,
        "end_line": 363,
        "comment": "",
        "child_ranges": [
            "(line 361,col 5)-(line 362,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testOptionalArgFunctionParam4()",
        "snippet": "  public void testOptionalArgFunctionParam4() throws Exception {\n    String expectedWarning = \"Function a: called with 2 argument(s). \" +\n        \"Function requires at least 0 argument(s) and no more than 1 \" +\n        \"argument(s).\";\n\n    testTypes(\"/** @param {function(number=)} a */function f(a) {a(3,4)};\",\n              expectedWarning, false);\n  }\n",
        "begin_line": 365,
        "end_line": 372,
        "comment": "",
        "child_ranges": [
            "(line 366,col 5)-(line 368,col 23)",
            "(line 370,col 5)-(line 371,col 38)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testOptionalArgFunctionParamError()",
        "snippet": "  public void testOptionalArgFunctionParamError() throws Exception {\n    String expectedWarning =\n        \"Bad type annotation. variable length argument must be last\";\n    testTypes(\"/** @param {function(...[number], number=)} a */\" +\n              \"function f(a) {};\", expectedWarning, false);\n  }\n",
        "begin_line": 374,
        "end_line": 379,
        "comment": "",
        "child_ranges": [
            "(line 375,col 5)-(line 376,col 69)",
            "(line 377,col 5)-(line 378,col 59)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testOptionalNullableArgFunctionParam()",
        "snippet": "  public void testOptionalNullableArgFunctionParam() throws Exception {\n    testTypes(\"/** @param {function(?number=)} a */\" +\n              \"function f(a) {a()};\");\n  }\n",
        "begin_line": 381,
        "end_line": 384,
        "comment": "",
        "child_ranges": [
            "(line 382,col 5)-(line 383,col 38)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testOptionalNullableArgFunctionParam2()",
        "snippet": "  public void testOptionalNullableArgFunctionParam2() throws Exception {\n    testTypes(\"/** @param {function(?number=)} a */\" +\n              \"function f(a) {a(null)};\");\n  }\n",
        "begin_line": 386,
        "end_line": 389,
        "comment": "",
        "child_ranges": [
            "(line 387,col 5)-(line 388,col 42)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testOptionalNullableArgFunctionParam3()",
        "snippet": "  public void testOptionalNullableArgFunctionParam3() throws Exception {\n    testTypes(\"/** @param {function(?number=)} a */\" +\n              \"function f(a) {a(3)};\");\n  }\n",
        "begin_line": 391,
        "end_line": 394,
        "comment": "",
        "child_ranges": [
            "(line 392,col 5)-(line 393,col 39)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testOptionalArgFunctionReturn()",
        "snippet": "  public void testOptionalArgFunctionReturn() throws Exception {\n    testTypes(\"/** @return {function(number=)} */\" +\n              \"function f() { return function(opt_x) { }; };\" +\n              \"f()()\");\n  }\n",
        "begin_line": 396,
        "end_line": 400,
        "comment": "",
        "child_ranges": [
            "(line 397,col 5)-(line 399,col 23)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testOptionalArgFunctionReturn2()",
        "snippet": "  public void testOptionalArgFunctionReturn2() throws Exception {\n    testTypes(\"/** @return {function(Object=)} */\" +\n              \"function f() { return function(opt_x) { }; };\" +\n              \"f()({})\");\n  }\n",
        "begin_line": 402,
        "end_line": 406,
        "comment": "",
        "child_ranges": [
            "(line 403,col 5)-(line 405,col 25)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBooleanType()",
        "snippet": "  public void testBooleanType() throws Exception {\n    testTypes(\"/**@type {boolean} */var x = 1 < 2;\");\n  }\n",
        "begin_line": 408,
        "end_line": 410,
        "comment": "",
        "child_ranges": [
            "(line 409,col 5)-(line 409,col 53)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBooleanReduction1()",
        "snippet": "  public void testBooleanReduction1() throws Exception {\n    testTypes(\"/**@type {string} */var x; x = null || \\\"a\\\";\");\n  }\n",
        "begin_line": 412,
        "end_line": 414,
        "comment": "",
        "child_ranges": [
            "(line 413,col 5)-(line 413,col 63)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBooleanReduction2()",
        "snippet": "  public void testBooleanReduction2() throws Exception {\n    // It's important for the type system to recognize that in no case\n    // can the boolean expression evaluate to a boolean value.\n    testTypes(\"/** @param {string} s\\n @return {string} */\" +\n        \"(function(s) { return ((s == 'a') && s) || 'b'; })\");\n  }\n",
        "begin_line": 416,
        "end_line": 421,
        "comment": "",
        "child_ranges": [
            "(line 419,col 5)-(line 420,col 62)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBooleanReduction3()",
        "snippet": "  public void testBooleanReduction3() throws Exception {\n    testTypes(\"/** @param {string} s\\n @return {string?} */\" +\n        \"(function(s) { return s && null && 3; })\");\n  }\n",
        "begin_line": 423,
        "end_line": 426,
        "comment": "",
        "child_ranges": [
            "(line 424,col 5)-(line 425,col 52)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBooleanReduction4()",
        "snippet": "  public void testBooleanReduction4() throws Exception {\n    testTypes(\"/** @param {Object} x\\n @return {Object} */\" +\n        \"(function(x) { return null || x || null ; })\");\n  }\n",
        "begin_line": 428,
        "end_line": 431,
        "comment": "",
        "child_ranges": [
            "(line 429,col 5)-(line 430,col 56)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBooleanReduction5()",
        "snippet": "  public void testBooleanReduction5() throws Exception {\n    testTypes(\"/**\\n\" +\n        \"* @param {Array|string} x\\n\" +\n        \"* @return {string?}\\n\" +\n        \"*/\\n\" +\n        \"var f = function(x) {\\n\" +\n        \"if (!x || typeof x == 'string') {\\n\" +\n        \"return x;\\n\" +\n        \"}\\n\" +\n        \"return null;\\n\" +\n        \"};\");\n  }\n",
        "begin_line": 433,
        "end_line": 444,
        "comment": "",
        "child_ranges": [
            "(line 434,col 5)-(line 443,col 14)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBooleanReduction6()",
        "snippet": "  public void testBooleanReduction6() throws Exception {\n    testTypes(\"/**\\n\" +\n        \"* @param {Array|string|null} x\\n\" +\n        \"* @return {string?}\\n\" +\n        \"*/\\n\" +\n        \"var f = function(x) {\\n\" +\n        \"if (!(x && typeof x != 'string')) {\\n\" +\n        \"return x;\\n\" +\n        \"}\\n\" +\n        \"return null;\\n\" +\n        \"};\");\n  }\n",
        "begin_line": 446,
        "end_line": 457,
        "comment": "",
        "child_ranges": [
            "(line 447,col 5)-(line 456,col 14)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBooleanReduction7()",
        "snippet": "   public void testBooleanReduction7() throws Exception {\n    testTypes(\"/** @constructor */var T = function() {};\\n\" +\n        \"/**\\n\" +\n        \"* @param {Array|T} x\\n\" +\n        \"* @return {null}\\n\" +\n        \"*/\\n\" +\n        \"var f = function(x) {\\n\" +\n        \"if (!x) {\\n\" +\n        \"return x;\\n\" +\n        \"}\\n\" +\n        \"return null;\\n\" +\n        \"};\");\n  }\n",
        "begin_line": 459,
        "end_line": 471,
        "comment": "",
        "child_ranges": [
            "(line 460,col 5)-(line 470,col 14)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testNullAnd()",
        "snippet": "  public void testNullAnd() throws Exception {\n    testTypes(\"/** @type null */var x;\\n\" +\n        \"/** @type number */var r = x && x;\",\n        \"initializing variable\\n\" +\n        \"found   : null\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 473,
        "end_line": 479,
        "comment": "",
        "child_ranges": [
            "(line 474,col 5)-(line 478,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testNullOr()",
        "snippet": "  public void testNullOr() throws Exception {\n    testTypes(\"/** @type null */var x;\\n\" +\n        \"/** @type number */var r = x || x;\",\n        \"initializing variable\\n\" +\n        \"found   : null\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 481,
        "end_line": 487,
        "comment": "",
        "child_ranges": [
            "(line 482,col 5)-(line 486,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBooleanPreservation1()",
        "snippet": "  public void testBooleanPreservation1() throws Exception {\n    testTypes(\"/**@type {string} */var x = \\\"a\\\";\" +\n        \"x = ((x == \\\"a\\\") && x) || x == \\\"b\\\";\",\n        \"assignment\\n\" +\n        \"found   : (boolean|string)\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 489,
        "end_line": 495,
        "comment": "",
        "child_ranges": [
            "(line 490,col 5)-(line 494,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBooleanPreservation2()",
        "snippet": "  public void testBooleanPreservation2() throws Exception {\n    testTypes(\"/**@type {string} */var x = \\\"a\\\"; x = (x == \\\"a\\\") || x;\",\n        \"assignment\\n\" +\n        \"found   : (boolean|string)\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 497,
        "end_line": 502,
        "comment": "",
        "child_ranges": [
            "(line 498,col 5)-(line 501,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBooleanPreservation3()",
        "snippet": "  public void testBooleanPreservation3() throws Exception {\n    testTypes(\"/** @param {Function?} x\\n @return {boolean?} */\" +\n        \"function f(x) { return x && x == \\\"a\\\"; }\",\n        \"condition always evaluates to false\\n\" +\n        \"left : Function\\n\" +\n        \"right: string\");\n  }\n",
        "begin_line": 504,
        "end_line": 510,
        "comment": "",
        "child_ranges": [
            "(line 505,col 5)-(line 509,col 25)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBooleanPreservation4()",
        "snippet": "  public void testBooleanPreservation4() throws Exception {\n    testTypes(\"/** @param {Function?|boolean} x\\n @return {boolean} */\" +\n        \"function f(x) { return x && x == \\\"a\\\"; }\",\n        \"inconsistent return type\\n\" +\n        \"found   : (boolean|null)\\n\" +\n        \"required: boolean\");\n  }\n",
        "begin_line": 512,
        "end_line": 518,
        "comment": "",
        "child_ranges": [
            "(line 513,col 5)-(line 517,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypeOfReduction1()",
        "snippet": "  public void testTypeOfReduction1() throws Exception {\n    testTypes(\"/** @param {string|number} x\\n @return {string} */ \" +\n        \"function f(x) { return typeof x == 'number' ? String(x) : x; }\");\n  }\n",
        "begin_line": 520,
        "end_line": 523,
        "comment": "",
        "child_ranges": [
            "(line 521,col 5)-(line 522,col 74)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypeOfReduction2()",
        "snippet": "  public void testTypeOfReduction2() throws Exception {\n    testTypes(\"/** @param {string|number} x\\n @return {string} */ \" +\n        \"function f(x) { return typeof x != 'string' ? String(x) : x; }\");\n  }\n",
        "begin_line": 525,
        "end_line": 528,
        "comment": "",
        "child_ranges": [
            "(line 526,col 5)-(line 527,col 74)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypeOfReduction3()",
        "snippet": "  public void testTypeOfReduction3() throws Exception {\n    testTypes(\"/** @param {number|null} x\\n @return {number} */ \" +\n        \"function f(x) { return typeof x == 'object' ? 1 : x; }\");\n  }\n",
        "begin_line": 530,
        "end_line": 533,
        "comment": "",
        "child_ranges": [
            "(line 531,col 5)-(line 532,col 66)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypeOfReduction4()",
        "snippet": "  public void testTypeOfReduction4() throws Exception {\n    testTypes(\"/** @param {Object|undefined} x\\n @return {Object} */ \" +\n        \"function f(x) { return typeof x == 'undefined' ? {} : x; }\");\n  }\n",
        "begin_line": 535,
        "end_line": 538,
        "comment": "",
        "child_ranges": [
            "(line 536,col 5)-(line 537,col 70)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypeOfReduction5()",
        "snippet": "  public void testTypeOfReduction5() throws Exception {\n    testTypes(\"/** @enum {string} */ var E = {A: 'a', B: 'b'};\\n\" +\n        \"/** @param {!E|number} x\\n @return {string} */ \" +\n        \"function f(x) { return typeof x != 'number' ? x : 'a'; }\");\n  }\n",
        "begin_line": 540,
        "end_line": 544,
        "comment": "",
        "child_ranges": [
            "(line 541,col 5)-(line 543,col 68)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypeOfReduction6()",
        "snippet": "  public void testTypeOfReduction6() throws Exception {\n    testTypes(\"/** @param {number|string} x\\n@return {string} */\\n\" +\n        \"function f(x) {\\n\" +\n        \"return typeof x == 'string' && x.length == 3 ? x : 'a';\\n\" +\n        \"}\");\n  }\n",
        "begin_line": 546,
        "end_line": 551,
        "comment": "",
        "child_ranges": [
            "(line 547,col 5)-(line 550,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypeOfReduction7()",
        "snippet": "  public void testTypeOfReduction7() throws Exception {\n    testTypes(\"/** @return {string} */var f = function(x) { \" +\n        \"return typeof x == 'number' ? x : 'a'; }\",\n        \"inconsistent return type\\n\" +\n        \"found   : (number|string)\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 553,
        "end_line": 559,
        "comment": "",
        "child_ranges": [
            "(line 554,col 5)-(line 558,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypeOfReduction8()",
        "snippet": "  public void testTypeOfReduction8() throws Exception {\n    testClosureTypes(\n        CLOSURE_DEFS +\n        \"/** @param {number|string} x\\n@return {string} */\\n\" +\n        \"function f(x) {\\n\" +\n        \"return goog.isString(x) && x.length == 3 ? x : 'a';\\n\" +\n        \"}\", null);\n  }\n",
        "begin_line": 561,
        "end_line": 568,
        "comment": "",
        "child_ranges": [
            "(line 562,col 5)-(line 567,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypeOfReduction9()",
        "snippet": "  public void testTypeOfReduction9() throws Exception {\n    testClosureTypes(\n        CLOSURE_DEFS +\n        \"/** @param {!Array|string} x\\n@return {string} */\\n\" +\n        \"function f(x) {\\n\" +\n        \"return goog.isArray(x) ? 'a' : x;\\n\" +\n        \"}\", null);\n  }\n",
        "begin_line": 570,
        "end_line": 577,
        "comment": "",
        "child_ranges": [
            "(line 571,col 5)-(line 576,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypeOfReduction10()",
        "snippet": "  public void testTypeOfReduction10() throws Exception {\n    testClosureTypes(\n        CLOSURE_DEFS +\n        \"/** @param {Array|string} x\\n@return {Array} */\\n\" +\n        \"function f(x) {\\n\" +\n        \"return goog.isArray(x) ? x : [];\\n\" +\n        \"}\", null);\n  }\n",
        "begin_line": 579,
        "end_line": 586,
        "comment": "",
        "child_ranges": [
            "(line 580,col 5)-(line 585,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypeOfReduction11()",
        "snippet": "  public void testTypeOfReduction11() throws Exception {\n    testClosureTypes(\n        CLOSURE_DEFS +\n        \"/** @param {Array|string} x\\n@return {Array} */\\n\" +\n        \"function f(x) {\\n\" +\n        \"return goog.isObject(x) ? x : [];\\n\" +\n        \"}\", null);\n  }\n",
        "begin_line": 588,
        "end_line": 595,
        "comment": "",
        "child_ranges": [
            "(line 589,col 5)-(line 594,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypeOfReduction12()",
        "snippet": "  public void testTypeOfReduction12() throws Exception {\n    testTypes(\"/** @enum {string} */ var E = {A: 'a', B: 'b'};\\n\" +\n        \"/** @param {E|Array} x\\n @return {Array} */ \" +\n        \"function f(x) { return typeof x == 'object' ? x : []; }\");\n  }\n",
        "begin_line": 597,
        "end_line": 601,
        "comment": "",
        "child_ranges": [
            "(line 598,col 5)-(line 600,col 67)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypeOfReduction13()",
        "snippet": "  public void testTypeOfReduction13() throws Exception {\n    testClosureTypes(\n        CLOSURE_DEFS +\n        \"/** @enum {string} */ var E = {A: 'a', B: 'b'};\\n\" +\n        \"/** @param {E|Array} x\\n@return {Array} */ \" +\n        \"function f(x) { return goog.isObject(x) ? x : []; }\", null);\n  }\n",
        "begin_line": 603,
        "end_line": 609,
        "comment": "",
        "child_ranges": [
            "(line 604,col 5)-(line 608,col 69)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypeOfReduction14()",
        "snippet": "  public void testTypeOfReduction14() throws Exception {\n    // Don't do type inference on GETELEMs.\n    testClosureTypes(\n        CLOSURE_DEFS +\n        \"function f(arguments) { \" +\n        \"  return goog.isString(arguments[0]) ? arguments[0] : 0;\" +\n        \"}\", null);\n  }\n",
        "begin_line": 611,
        "end_line": 618,
        "comment": "",
        "child_ranges": [
            "(line 613,col 5)-(line 617,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypeOfReduction15()",
        "snippet": "  public void testTypeOfReduction15() throws Exception {\n    // Don't do type inference on GETELEMs.\n    testClosureTypes(\n        CLOSURE_DEFS +\n        \"function f(arguments) { \" +\n        \"  return typeof arguments[0] == 'string' ? arguments[0] : 0;\" +\n        \"}\", null);\n  }\n",
        "begin_line": 620,
        "end_line": 627,
        "comment": "",
        "child_ranges": [
            "(line 622,col 5)-(line 626,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testQualifiedNameReduction1()",
        "snippet": "  public void testQualifiedNameReduction1() throws Exception {\n    testTypes(\"var x = {}; /** @type {string?} */ x.a = 'a';\\n\" +\n        \"/** @return {string} */ var f = function() {\\n\" +\n        \"return x.a ? x.a : 'a'; }\");\n  }\n",
        "begin_line": 629,
        "end_line": 633,
        "comment": "",
        "child_ranges": [
            "(line 630,col 5)-(line 632,col 37)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testQualifiedNameReduction2()",
        "snippet": "  public void testQualifiedNameReduction2() throws Exception {\n    testTypes(\"/** @param {string?} a\\n@constructor */ var T = \" +\n        \"function(a) {this.a = a};\\n\" +\n        \"/** @return {string} */ T.prototype.f = function() {\\n\" +\n        \"return this.a ? this.a : 'a'; }\");\n  }\n",
        "begin_line": 635,
        "end_line": 640,
        "comment": "",
        "child_ranges": [
            "(line 636,col 5)-(line 639,col 43)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testQualifiedNameReduction3()",
        "snippet": "  public void testQualifiedNameReduction3() throws Exception {\n    testTypes(\"/** @param {string|Array} a\\n@constructor */ var T = \" +\n        \"function(a) {this.a = a};\\n\" +\n        \"/** @return {string} */ T.prototype.f = function() {\\n\" +\n        \"return typeof this.a == 'string' ? this.a : 'a'; }\");\n  }\n",
        "begin_line": 642,
        "end_line": 647,
        "comment": "",
        "child_ranges": [
            "(line 643,col 5)-(line 646,col 62)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testQualifiedNameReduction4()",
        "snippet": "  public void testQualifiedNameReduction4() throws Exception {\n    testClosureTypes(\n        CLOSURE_DEFS +\n        \"/** @param {string|Array} a\\n@constructor */ var T = \" +\n        \"function(a) {this.a = a};\\n\" +\n        \"/** @return {string} */ T.prototype.f = function() {\\n\" +\n        \"return goog.isString(this.a) ? this.a : 'a'; }\", null);\n  }\n",
        "begin_line": 649,
        "end_line": 656,
        "comment": "",
        "child_ranges": [
            "(line 650,col 5)-(line 655,col 64)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testQualifiedNameReduction5a()",
        "snippet": "  public void testQualifiedNameReduction5a() throws Exception {\n    testTypes(\"var x = {/** @type {string} */ a:'b' };\\n\" +\n        \"/** @return {string} */ var f = function() {\\n\" +\n        \"return x.a; }\");\n  }\n",
        "begin_line": 658,
        "end_line": 662,
        "comment": "",
        "child_ranges": [
            "(line 659,col 5)-(line 661,col 25)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testQualifiedNameReduction5b()",
        "snippet": "  public void testQualifiedNameReduction5b() throws Exception {\n    testTypes(\n        \"var x = {/** @type {number} */ a:12 };\\n\" +\n        \"/** @return {string} */\\n\" +\n        \"var f = function() {\\n\" +\n        \"  return x.a;\\n\" +\n        \"}\",\n        \"inconsistent return type\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 664,
        "end_line": 674,
        "comment": "",
        "child_ranges": [
            "(line 665,col 5)-(line 673,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testQualifiedNameReduction5c()",
        "snippet": "  public void testQualifiedNameReduction5c() throws Exception {\n    testTypes(\n        \"/** @return {string} */ var f = function() {\\n\" +\n        \"var x = {/** @type {number} */ a:0 };\\n\" +\n        \"return (x.a) ? (x.a) : 'a'; }\",\n        \"inconsistent return type\\n\" +\n        \"found   : (number|string)\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 676,
        "end_line": 684,
        "comment": "",
        "child_ranges": [
            "(line 677,col 5)-(line 683,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testQualifiedNameReduction6()",
        "snippet": "  public void testQualifiedNameReduction6() throws Exception {\n    testTypes(\n        \"/** @return {string} */ var f = function() {\\n\" +\n        \"var x = {/** @return {string?} */ get a() {return 'a'}};\\n\" +\n        \"return x.a ? x.a : 'a'; }\");\n  }\n",
        "begin_line": 686,
        "end_line": 691,
        "comment": "",
        "child_ranges": [
            "(line 687,col 5)-(line 690,col 37)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testQualifiedNameReduction7()",
        "snippet": "  public void testQualifiedNameReduction7() throws Exception {\n    testTypes(\n        \"/** @return {string} */ var f = function() {\\n\" +\n        \"var x = {/** @return {number} */ get a() {return 12}};\\n\" +\n        \"return x.a; }\",\n        \"inconsistent return type\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 693,
        "end_line": 701,
        "comment": "",
        "child_ranges": [
            "(line 694,col 5)-(line 700,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testQualifiedNameReduction7a()",
        "snippet": "  public void testQualifiedNameReduction7a() throws Exception {\n    // It would be nice to find a way to make this an error.\n    testTypes(\n        \"/** @return {string} */ var f = function() {\\n\" +\n        \"var x = {get a() {return 12}};\\n\" +\n        \"return x.a; }\");\n  }\n",
        "begin_line": 703,
        "end_line": 709,
        "comment": "",
        "child_ranges": [
            "(line 705,col 5)-(line 708,col 25)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testQualifiedNameReduction8()",
        "snippet": "  public void testQualifiedNameReduction8() throws Exception {\n    testTypes(\n        \"/** @return {string} */ var f = function() {\\n\" +\n        \"var x = {get a() {return 'a'}};\\n\" +\n        \"return x.a ? x.a : 'a'; }\");\n  }\n",
        "begin_line": 711,
        "end_line": 716,
        "comment": "",
        "child_ranges": [
            "(line 712,col 5)-(line 715,col 37)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testQualifiedNameReduction9()",
        "snippet": "  public void testQualifiedNameReduction9() throws Exception {\n    testTypes(\n        \"/** @return {string} */ var f = function() {\\n\" +\n        \"var x = { /** @param {string} b */ set a(b) {}};\\n\" +\n        \"return x.a ? x.a : 'a'; }\");\n  }\n",
        "begin_line": 718,
        "end_line": 723,
        "comment": "",
        "child_ranges": [
            "(line 719,col 5)-(line 722,col 37)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testQualifiedNameReduction10()",
        "snippet": "  public void testQualifiedNameReduction10() throws Exception {\n    // TODO(johnlenz): separate setter property types from getter property\n    // types.\n    testTypes(\n        \"/** @return {string} */ var f = function() {\\n\" +\n        \"var x = { /** @param {number} b */ set a(b) {}};\\n\" +\n        \"return x.a ? x.a : 'a'; }\",\n        \"inconsistent return type\\n\" +\n        \"found   : (number|string)\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 725,
        "end_line": 735,
        "comment": "",
        "child_ranges": [
            "(line 728,col 5)-(line 734,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testObjLitDef1a()",
        "snippet": "  public void testObjLitDef1a() throws Exception {\n    testTypes(\n        \"var x = {/** @type {number} */ a:12 };\\n\" +\n        \"x.a = 'a';\",\n        \"assignment to property a of x\\n\" +\n        \"found   : string\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 737,
        "end_line": 744,
        "comment": "",
        "child_ranges": [
            "(line 738,col 5)-(line 743,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testObjLitDef1b()",
        "snippet": "  public void testObjLitDef1b() throws Exception {\n    testTypes(\n        \"function f(){\" +\n          \"var x = {/** @type {number} */ a:12 };\\n\" +\n          \"x.a = 'a';\" +\n        \"};\\n\" +\n        \"f();\",\n        \"assignment to property a of x\\n\" +\n        \"found   : string\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 746,
        "end_line": 756,
        "comment": "",
        "child_ranges": [
            "(line 747,col 5)-(line 755,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testObjLitDef2a()",
        "snippet": "  public void testObjLitDef2a() throws Exception {\n    testTypes(\n        \"var x = {/** @param {number} b */ set a(b){} };\\n\" +\n        \"x.a = 'a';\",\n        \"assignment to property a of x\\n\" +\n        \"found   : string\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 758,
        "end_line": 765,
        "comment": "",
        "child_ranges": [
            "(line 759,col 5)-(line 764,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testObjLitDef2b()",
        "snippet": "  public void testObjLitDef2b() throws Exception {\n    testTypes(\n        \"function f(){\" +\n          \"var x = {/** @param {number} b */ set a(b){} };\\n\" +\n          \"x.a = 'a';\" +\n        \"};\\n\" +\n        \"f();\",\n        \"assignment to property a of x\\n\" +\n        \"found   : string\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 767,
        "end_line": 777,
        "comment": "",
        "child_ranges": [
            "(line 768,col 5)-(line 776,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testObjLitDef3a()",
        "snippet": "  public void testObjLitDef3a() throws Exception {\n    testTypes(\n        \"/** @type {string} */ var y;\\n\" +\n        \"var x = {/** @return {number} */ get a(){} };\\n\" +\n        \"y = x.a;\",\n        \"assignment\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 779,
        "end_line": 787,
        "comment": "",
        "child_ranges": [
            "(line 780,col 5)-(line 786,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testObjLitDef3b()",
        "snippet": "  public void testObjLitDef3b() throws Exception {\n    testTypes(\n      \"/** @type {string} */ var y;\\n\" +\n        \"function f(){\" +\n          \"var x = {/** @return {number} */ get a(){} };\\n\" +\n          \"y = x.a;\" +\n        \"};\\n\" +\n        \"f();\",\n        \"assignment\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 789,
        "end_line": 800,
        "comment": "",
        "child_ranges": [
            "(line 790,col 5)-(line 799,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testObjLitDef4()",
        "snippet": "  public void testObjLitDef4() throws Exception {\n    testTypes(\n        \"var x = {\" +\n          \"/** @return {number} */ a:12 };\\n\",\n          \"assignment to property a of {a: function (): number}\\n\" +\n          \"found   : number\\n\" +\n          \"required: function (): number\");\n  }\n",
        "begin_line": 802,
        "end_line": 809,
        "comment": "",
        "child_ranges": [
            "(line 803,col 5)-(line 808,col 43)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testObjLitDef5()",
        "snippet": "  public void testObjLitDef5() throws Exception {\n    testTypes(\n        \"var x = {};\\n\" +\n        \"/** @return {number} */ x.a = 12;\\n\",\n        \"assignment to property a of x\\n\" +\n        \"found   : number\\n\" +\n        \"required: function (): number\");\n  }\n",
        "begin_line": 811,
        "end_line": 818,
        "comment": "",
        "child_ranges": [
            "(line 812,col 5)-(line 817,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInstanceOfReduction1()",
        "snippet": "  public void testInstanceOfReduction1() throws Exception {\n    testTypes(\"/** @constructor */ var T = function() {};\\n\" +\n        \"/** @param {T|string} x\\n@return {T} */\\n\" +\n        \"var f = function(x) {\\n\" +\n        \"if (x instanceof T) { return x; } else { return new T(); }\\n\" +\n        \"};\");\n  }\n",
        "begin_line": 821,
        "end_line": 827,
        "comment": "",
        "child_ranges": [
            "(line 822,col 5)-(line 826,col 14)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInstanceOfReduction2()",
        "snippet": "  public void testInstanceOfReduction2() throws Exception {\n    testTypes(\"/** @constructor */ var T = function() {};\\n\" +\n        \"/** @param {!T|string} x\\n@return {string} */\\n\" +\n        \"var f = function(x) {\\n\" +\n        \"if (x instanceof T) { return ''; } else { return x; }\\n\" +\n        \"};\");\n  }\n",
        "begin_line": 829,
        "end_line": 835,
        "comment": "",
        "child_ranges": [
            "(line 830,col 5)-(line 834,col 14)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testPropertyInferredPropagation()",
        "snippet": "  public void testPropertyInferredPropagation() throws Exception {\n    testTypes(\"/** @return {Object} */function f() { return {}; }\\n\" +\n         \"function g() { var x = f(); if (x.p) x.a = 'a'; else x.a = 'b'; }\\n\" +\n         \"function h() { var x = f(); x.a = false; }\");\n  }\n",
        "begin_line": 837,
        "end_line": 841,
        "comment": "",
        "child_ranges": [
            "(line 838,col 5)-(line 840,col 55)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testPropertyInference1()",
        "snippet": "  public void testPropertyInference1() throws Exception {\n    testTypes(\n        \"/** @constructor */ function F() { this.x_ = true; }\" +\n        \"/** @return {string} */\" +\n        \"F.prototype.bar = function() { if (this.x_) return this.x_; };\",\n        \"inconsistent return type\\n\" +\n        \"found   : boolean\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 843,
        "end_line": 851,
        "comment": "",
        "child_ranges": [
            "(line 844,col 5)-(line 850,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testPropertyInference2()",
        "snippet": "  public void testPropertyInference2() throws Exception {\n    testTypes(\n        \"/** @constructor */ function F() { this.x_ = true; }\" +\n        \"F.prototype.baz = function() { this.x_ = null; };\" +\n        \"/** @return {string} */\" +\n        \"F.prototype.bar = function() { if (this.x_) return this.x_; };\",\n        \"inconsistent return type\\n\" +\n        \"found   : boolean\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 853,
        "end_line": 862,
        "comment": "",
        "child_ranges": [
            "(line 854,col 5)-(line 861,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testPropertyInference3()",
        "snippet": "  public void testPropertyInference3() throws Exception {\n    testTypes(\n        \"/** @constructor */ function F() { this.x_ = true; }\" +\n        \"F.prototype.baz = function() { this.x_ = 3; };\" +\n        \"/** @return {string} */\" +\n        \"F.prototype.bar = function() { if (this.x_) return this.x_; };\",\n        \"inconsistent return type\\n\" +\n        \"found   : (boolean|number)\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 864,
        "end_line": 873,
        "comment": "",
        "child_ranges": [
            "(line 865,col 5)-(line 872,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testPropertyInference4()",
        "snippet": "  public void testPropertyInference4() throws Exception {\n    testTypes(\n        \"/** @constructor */ function F() { }\" +\n        \"F.prototype.x_ = 3;\" +\n        \"/** @return {string} */\" +\n        \"F.prototype.bar = function() { if (this.x_) return this.x_; };\",\n        \"inconsistent return type\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 875,
        "end_line": 884,
        "comment": "",
        "child_ranges": [
            "(line 876,col 5)-(line 883,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testPropertyInference5()",
        "snippet": "  public void testPropertyInference5() throws Exception {\n    testTypes(\n        \"/** @constructor */ function F() { }\" +\n        \"F.prototype.baz = function() { this.x_ = 3; };\" +\n        \"/** @return {string} */\" +\n        \"F.prototype.bar = function() { if (this.x_) return this.x_; };\");\n  }\n",
        "begin_line": 886,
        "end_line": 892,
        "comment": "",
        "child_ranges": [
            "(line 887,col 5)-(line 891,col 74)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testPropertyInference6()",
        "snippet": "  public void testPropertyInference6() throws Exception {\n    testTypes(\n        \"/** @constructor */ function F() { }\" +\n        \"(new F).x_ = 3;\" +\n        \"/** @return {string} */\" +\n        \"F.prototype.bar = function() { return this.x_; };\");\n  }\n",
        "begin_line": 894,
        "end_line": 900,
        "comment": "",
        "child_ranges": [
            "(line 895,col 5)-(line 899,col 61)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testPropertyInference7()",
        "snippet": "  public void testPropertyInference7() throws Exception {\n    testTypes(\n        \"/** @constructor */ function F() { this.x_ = true; }\" +\n        \"(new F).x_ = 3;\" +\n        \"/** @return {string} */\" +\n        \"F.prototype.bar = function() { return this.x_; };\",\n        \"inconsistent return type\\n\" +\n        \"found   : boolean\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 902,
        "end_line": 911,
        "comment": "",
        "child_ranges": [
            "(line 903,col 5)-(line 910,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testPropertyInference8()",
        "snippet": "  public void testPropertyInference8() throws Exception {\n    testTypes(\n        \"/** @constructor */ function F() { \" +\n        \"  /** @type {string} */ this.x_ = 'x';\" +\n        \"}\" +\n        \"(new F).x_ = 3;\" +\n        \"/** @return {string} */\" +\n        \"F.prototype.bar = function() { return this.x_; };\",\n        \"assignment to property x_ of F\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 913,
        "end_line": 924,
        "comment": "",
        "child_ranges": [
            "(line 914,col 5)-(line 923,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testNoPersistentTypeInferenceForObjectProperties()",
        "snippet": "  public void testNoPersistentTypeInferenceForObjectProperties()\n      throws Exception {\n    testTypes(\"/** @param {Object} o\\n@param {string} x */\\n\" +\n        \"function s1(o,x) { o.x = x; }\\n\" +\n        \"/** @param {Object} o\\n@return {string} */\\n\" +\n        \"function g1(o) { return typeof o.x == 'undefined' ? '' : o.x; }\\n\" +\n        \"/** @param {Object} o\\n@param {number} x */\\n\" +\n        \"function s2(o,x) { o.x = x; }\\n\" +\n        \"/** @param {Object} o\\n@return {number} */\\n\" +\n        \"function g2(o) { return typeof o.x == 'undefined' ? 0 : o.x; }\");\n  }\n",
        "begin_line": 926,
        "end_line": 936,
        "comment": "",
        "child_ranges": [
            "(line 928,col 5)-(line 935,col 74)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testNoPersistentTypeInferenceForFunctionProperties()",
        "snippet": "  public void testNoPersistentTypeInferenceForFunctionProperties()\n      throws Exception {\n    testTypes(\"/** @param {Function} o\\n@param {string} x */\\n\" +\n        \"function s1(o,x) { o.x = x; }\\n\" +\n        \"/** @param {Function} o\\n@return {string} */\\n\" +\n        \"function g1(o) { return typeof o.x == 'undefined' ? '' : o.x; }\\n\" +\n        \"/** @param {Function} o\\n@param {number} x */\\n\" +\n        \"function s2(o,x) { o.x = x; }\\n\" +\n        \"/** @param {Function} o\\n@return {number} */\\n\" +\n        \"function g2(o) { return typeof o.x == 'undefined' ? 0 : o.x; }\");\n  }\n",
        "begin_line": 938,
        "end_line": 948,
        "comment": "",
        "child_ranges": [
            "(line 940,col 5)-(line 947,col 74)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testObjectPropertyTypeInferredInLocalScope1()",
        "snippet": "  public void testObjectPropertyTypeInferredInLocalScope1() throws Exception {\n    testTypes(\"/** @param {!Object} o\\n@return {string} */\\n\" +\n        \"function f(o) { o.x = 1; return o.x; }\",\n        \"inconsistent return type\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 950,
        "end_line": 956,
        "comment": "",
        "child_ranges": [
            "(line 951,col 5)-(line 955,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testObjectPropertyTypeInferredInLocalScope2()",
        "snippet": "  public void testObjectPropertyTypeInferredInLocalScope2() throws Exception {\n    testTypes(\"/**@param {!Object} o\\n@param {number?} x\\n@return {string}*/\" +\n        \"function f(o, x) { o.x = 'a';\\nif (x) {o.x = x;}\\nreturn o.x; }\",\n        \"inconsistent return type\\n\" +\n        \"found   : (number|string)\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 958,
        "end_line": 964,
        "comment": "",
        "child_ranges": [
            "(line 959,col 5)-(line 963,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testObjectPropertyTypeInferredInLocalScope3()",
        "snippet": "  public void testObjectPropertyTypeInferredInLocalScope3() throws Exception {\n    testTypes(\"/**@param {!Object} o\\n@param {number?} x\\n@return {string}*/\" +\n        \"function f(o, x) { if (x) {o.x = x;} else {o.x = 'a';}\\nreturn o.x; }\",\n        \"inconsistent return type\\n\" +\n        \"found   : (number|string)\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 966,
        "end_line": 972,
        "comment": "",
        "child_ranges": [
            "(line 967,col 5)-(line 971,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testMismatchingOverridingInferredPropertyBeforeDeclaredProperty1()",
        "snippet": "  public void testMismatchingOverridingInferredPropertyBeforeDeclaredProperty1()\n      throws Exception {\n    testTypes(\"/** @constructor */var T = function() { this.x = ''; };\\n\" +\n        \"/** @type {number} */ T.prototype.x = 0;\",\n        \"assignment to property x of T\\n\" +\n        \"found   : string\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 974,
        "end_line": 981,
        "comment": "",
        "child_ranges": [
            "(line 976,col 5)-(line 980,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testMismatchingOverridingInferredPropertyBeforeDeclaredProperty2()",
        "snippet": "  public void testMismatchingOverridingInferredPropertyBeforeDeclaredProperty2()\n      throws Exception {\n    testTypes(\"/** @constructor */var T = function() { this.x = ''; };\\n\" +\n        \"/** @type {number} */ T.prototype.x;\",\n        \"assignment to property x of T\\n\" +\n        \"found   : string\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 983,
        "end_line": 990,
        "comment": "",
        "child_ranges": [
            "(line 985,col 5)-(line 989,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testMismatchingOverridingInferredPropertyBeforeDeclaredProperty3()",
        "snippet": "  public void testMismatchingOverridingInferredPropertyBeforeDeclaredProperty3()\n      throws Exception {\n    testTypes(\"/** @type {Object} */ var n = {};\\n\" +\n        \"/** @constructor */ n.T = function() { this.x = ''; };\\n\" +\n        \"/** @type {number} */ n.T.prototype.x = 0;\",\n        \"assignment to property x of n.T\\n\" +\n        \"found   : string\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 992,
        "end_line": 1000,
        "comment": "",
        "child_ranges": [
            "(line 994,col 5)-(line 999,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testMismatchingOverridingInferredPropertyBeforeDeclaredProperty4()",
        "snippet": "  public void testMismatchingOverridingInferredPropertyBeforeDeclaredProperty4()\n      throws Exception {\n    testTypes(\"var n = {};\\n\" +\n        \"/** @constructor */ n.T = function() { this.x = ''; };\\n\" +\n        \"/** @type {number} */ n.T.prototype.x = 0;\",\n        \"assignment to property x of n.T\\n\" +\n        \"found   : string\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 1002,
        "end_line": 1010,
        "comment": "",
        "child_ranges": [
            "(line 1004,col 5)-(line 1009,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testPropertyUsedBeforeDefinition1()",
        "snippet": "  public void testPropertyUsedBeforeDefinition1() throws Exception {\n    testTypes(\"/** @constructor */ var T = function() {};\\n\" +\n        \"/** @return {string} */\" +\n        \"T.prototype.f = function() { return this.g(); };\\n\" +\n        \"/** @return {number} */ T.prototype.g = function() { return 1; };\\n\",\n        \"inconsistent return type\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 1012,
        "end_line": 1020,
        "comment": "",
        "child_ranges": [
            "(line 1013,col 5)-(line 1019,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testPropertyUsedBeforeDefinition2()",
        "snippet": "  public void testPropertyUsedBeforeDefinition2() throws Exception {\n    testTypes(\"var n = {};\\n\" +\n        \"/** @constructor */ n.T = function() {};\\n\" +\n        \"/** @return {string} */\" +\n        \"n.T.prototype.f = function() { return this.g(); };\\n\" +\n        \"/** @return {number} */ n.T.prototype.g = function() { return 1; };\\n\",\n        \"inconsistent return type\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 1022,
        "end_line": 1031,
        "comment": "",
        "child_ranges": [
            "(line 1023,col 5)-(line 1030,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testAdd1()",
        "snippet": "  public void testAdd1() throws Exception {\n    testTypes(\"/**@return {void}*/function foo(){var a = 'abc'+foo();}\");\n  }\n",
        "begin_line": 1033,
        "end_line": 1035,
        "comment": "",
        "child_ranges": [
            "(line 1034,col 5)-(line 1034,col 73)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testAdd2()",
        "snippet": "  public void testAdd2() throws Exception {\n    testTypes(\"/**@return {void}*/function foo(){var a = foo()+4;}\");\n  }\n",
        "begin_line": 1037,
        "end_line": 1039,
        "comment": "",
        "child_ranges": [
            "(line 1038,col 5)-(line 1038,col 69)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testAdd3()",
        "snippet": "  public void testAdd3() throws Exception {\n    testTypes(\"/** @type {string} */ var a = 'a';\" +\n        \"/** @type {string} */ var b = 'b';\" +\n        \"/** @type {string} */ var c = a + b;\");\n  }\n",
        "begin_line": 1041,
        "end_line": 1045,
        "comment": "",
        "child_ranges": [
            "(line 1042,col 5)-(line 1044,col 48)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testAdd4()",
        "snippet": "  public void testAdd4() throws Exception {\n    testTypes(\"/** @type {number} */ var a = 5;\" +\n        \"/** @type {string} */ var b = 'b';\" +\n        \"/** @type {string} */ var c = a + b;\");\n  }\n",
        "begin_line": 1047,
        "end_line": 1051,
        "comment": "",
        "child_ranges": [
            "(line 1048,col 5)-(line 1050,col 48)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testAdd5()",
        "snippet": "  public void testAdd5() throws Exception {\n    testTypes(\"/** @type {string} */ var a = 'a';\" +\n        \"/** @type {number} */ var b = 5;\" +\n        \"/** @type {string} */ var c = a + b;\");\n  }\n",
        "begin_line": 1053,
        "end_line": 1057,
        "comment": "",
        "child_ranges": [
            "(line 1054,col 5)-(line 1056,col 48)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testAdd6()",
        "snippet": "  public void testAdd6() throws Exception {\n    testTypes(\"/** @type {number} */ var a = 5;\" +\n        \"/** @type {number} */ var b = 5;\" +\n        \"/** @type {number} */ var c = a + b;\");\n  }\n",
        "begin_line": 1059,
        "end_line": 1063,
        "comment": "",
        "child_ranges": [
            "(line 1060,col 5)-(line 1062,col 48)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testAdd7()",
        "snippet": "  public void testAdd7() throws Exception {\n    testTypes(\"/** @type {number} */ var a = 5;\" +\n        \"/** @type {string} */ var b = 'b';\" +\n        \"/** @type {number} */ var c = a + b;\",\n        \"initializing variable\\n\" +\n        \"found   : string\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 1065,
        "end_line": 1072,
        "comment": "",
        "child_ranges": [
            "(line 1066,col 5)-(line 1071,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testAdd8()",
        "snippet": "  public void testAdd8() throws Exception {\n    testTypes(\"/** @type {string} */ var a = 'a';\" +\n        \"/** @type {number} */ var b = 5;\" +\n        \"/** @type {number} */ var c = a + b;\",\n        \"initializing variable\\n\" +\n        \"found   : string\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 1074,
        "end_line": 1081,
        "comment": "",
        "child_ranges": [
            "(line 1075,col 5)-(line 1080,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testAdd9()",
        "snippet": "  public void testAdd9() throws Exception {\n    testTypes(\"/** @type {number} */ var a = 5;\" +\n        \"/** @type {number} */ var b = 5;\" +\n        \"/** @type {string} */ var c = a + b;\",\n        \"initializing variable\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 1083,
        "end_line": 1090,
        "comment": "",
        "child_ranges": [
            "(line 1084,col 5)-(line 1089,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testAdd10()",
        "snippet": "  public void testAdd10() throws Exception {\n    // d.e.f will have unknown type.\n    testTypes(\n        suppressMissingProperty(\"e\", \"f\") +\n        \"/** @type {number} */ var a = 5;\" +\n        \"/** @type {string} */ var c = a + d.e.f;\");\n  }\n",
        "begin_line": 1092,
        "end_line": 1098,
        "comment": "",
        "child_ranges": [
            "(line 1094,col 5)-(line 1097,col 52)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testAdd11()",
        "snippet": "  public void testAdd11() throws Exception {\n    // d.e.f will have unknown type.\n    testTypes(\n        suppressMissingProperty(\"e\", \"f\") +\n        \"/** @type {number} */ var a = 5;\" +\n        \"/** @type {number} */ var c = a + d.e.f;\");\n  }\n",
        "begin_line": 1100,
        "end_line": 1106,
        "comment": "",
        "child_ranges": [
            "(line 1102,col 5)-(line 1105,col 52)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testAdd12()",
        "snippet": "  public void testAdd12() throws Exception {\n    testTypes(\"/** @return {(number,string)} */ function a() { return 5; }\" +\n        \"/** @type {number} */ var b = 5;\" +\n        \"/** @type {boolean} */ var c = a() + b;\",\n        \"initializing variable\\n\" +\n        \"found   : (number|string)\\n\" +\n        \"required: boolean\");\n  }\n",
        "begin_line": 1108,
        "end_line": 1115,
        "comment": "",
        "child_ranges": [
            "(line 1109,col 5)-(line 1114,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testAdd13()",
        "snippet": "  public void testAdd13() throws Exception {\n    testTypes(\"/** @type {number} */ var a = 5;\" +\n        \"/** @return {(number,string)} */ function b() { return 5; }\" +\n        \"/** @type {boolean} */ var c = a + b();\",\n        \"initializing variable\\n\" +\n        \"found   : (number|string)\\n\" +\n        \"required: boolean\");\n  }\n",
        "begin_line": 1117,
        "end_line": 1124,
        "comment": "",
        "child_ranges": [
            "(line 1118,col 5)-(line 1123,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testAdd14()",
        "snippet": "  public void testAdd14() throws Exception {\n    testTypes(\"/** @type {(null,string)} */ var a = null;\" +\n        \"/** @type {number} */ var b = 5;\" +\n        \"/** @type {boolean} */ var c = a + b;\",\n        \"initializing variable\\n\" +\n        \"found   : (number|string)\\n\" +\n        \"required: boolean\");\n  }\n",
        "begin_line": 1126,
        "end_line": 1133,
        "comment": "",
        "child_ranges": [
            "(line 1127,col 5)-(line 1132,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testAdd15()",
        "snippet": "  public void testAdd15() throws Exception {\n    testTypes(\"/** @type {number} */ var a = 5;\" +\n        \"/** @return {(number,string)} */ function b() { return 5; }\" +\n        \"/** @type {boolean} */ var c = a + b();\",\n        \"initializing variable\\n\" +\n        \"found   : (number|string)\\n\" +\n        \"required: boolean\");\n  }\n",
        "begin_line": 1135,
        "end_line": 1142,
        "comment": "",
        "child_ranges": [
            "(line 1136,col 5)-(line 1141,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testAdd16()",
        "snippet": "  public void testAdd16() throws Exception {\n    testTypes(\"/** @type {(undefined,string)} */ var a = undefined;\" +\n        \"/** @type {number} */ var b = 5;\" +\n        \"/** @type {boolean} */ var c = a + b;\",\n        \"initializing variable\\n\" +\n        \"found   : (number|string)\\n\" +\n        \"required: boolean\");\n  }\n",
        "begin_line": 1144,
        "end_line": 1151,
        "comment": "",
        "child_ranges": [
            "(line 1145,col 5)-(line 1150,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testAdd17()",
        "snippet": "  public void testAdd17() throws Exception {\n    testTypes(\"/** @type {number} */ var a = 5;\" +\n        \"/** @type {(undefined,string)} */ var b = undefined;\" +\n        \"/** @type {boolean} */ var c = a + b;\",\n        \"initializing variable\\n\" +\n        \"found   : (number|string)\\n\" +\n        \"required: boolean\");\n  }\n",
        "begin_line": 1153,
        "end_line": 1160,
        "comment": "",
        "child_ranges": [
            "(line 1154,col 5)-(line 1159,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testAdd18()",
        "snippet": "  public void testAdd18() throws Exception {\n    testTypes(\"function f() {};\" +\n        \"/** @type {string} */ var a = 'a';\" +\n        \"/** @type {number} */ var c = a + f();\",\n        \"initializing variable\\n\" +\n        \"found   : string\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 1162,
        "end_line": 1169,
        "comment": "",
        "child_ranges": [
            "(line 1163,col 5)-(line 1168,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testAdd19()",
        "snippet": "  public void testAdd19() throws Exception {\n    testTypes(\"/** @param {number} opt_x\\n@param {number} opt_y\\n\" +\n        \"@return {number} */ function f(opt_x, opt_y) {\" +\n        \"return opt_x + opt_y;}\");\n  }\n",
        "begin_line": 1171,
        "end_line": 1175,
        "comment": "",
        "child_ranges": [
            "(line 1172,col 5)-(line 1174,col 34)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testAdd20()",
        "snippet": "  public void testAdd20() throws Exception {\n    testTypes(\"/** @param {!Number} opt_x\\n@param {!Number} opt_y\\n\" +\n        \"@return {number} */ function f(opt_x, opt_y) {\" +\n        \"return opt_x + opt_y;}\");\n  }\n",
        "begin_line": 1177,
        "end_line": 1181,
        "comment": "",
        "child_ranges": [
            "(line 1178,col 5)-(line 1180,col 34)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testAdd21()",
        "snippet": "  public void testAdd21() throws Exception {\n    testTypes(\"/** @param {Number|Boolean} opt_x\\n\" +\n        \"@param {number|boolean} opt_y\\n\" +\n        \"@return {number} */ function f(opt_x, opt_y) {\" +\n        \"return opt_x + opt_y;}\");\n  }\n",
        "begin_line": 1183,
        "end_line": 1188,
        "comment": "",
        "child_ranges": [
            "(line 1184,col 5)-(line 1187,col 34)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testNumericComparison1()",
        "snippet": "  public void testNumericComparison1() throws Exception {\n    testTypes(\"/**@param {number} a*/ function f(a) {return a < 3;}\");\n  }\n",
        "begin_line": 1190,
        "end_line": 1192,
        "comment": "",
        "child_ranges": [
            "(line 1191,col 5)-(line 1191,col 70)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testNumericComparison2()",
        "snippet": "  public void testNumericComparison2() throws Exception {\n    testTypes(\"/**@param {!Object} a*/ function f(a) {return a < 3;}\",\n        \"left side of numeric comparison\\n\" +\n        \"found   : Object\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 1194,
        "end_line": 1199,
        "comment": "",
        "child_ranges": [
            "(line 1195,col 5)-(line 1198,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testNumericComparison3()",
        "snippet": "  public void testNumericComparison3() throws Exception {\n    testTypes(\"/**@param {string} a*/ function f(a) {return a < 3;}\");\n  }\n",
        "begin_line": 1201,
        "end_line": 1203,
        "comment": "",
        "child_ranges": [
            "(line 1202,col 5)-(line 1202,col 70)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testNumericComparison4()",
        "snippet": "  public void testNumericComparison4() throws Exception {\n    testTypes(\"/**@param {(number,undefined)} a*/ \" +\n              \"function f(a) {return a < 3;}\");\n  }\n",
        "begin_line": 1205,
        "end_line": 1208,
        "comment": "",
        "child_ranges": [
            "(line 1206,col 5)-(line 1207,col 47)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testNumericComparison5()",
        "snippet": "  public void testNumericComparison5() throws Exception {\n    testTypes(\"/**@param {*} a*/ function f(a) {return a < 3;}\",\n        \"left side of numeric comparison\\n\" +\n        \"found   : *\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 1210,
        "end_line": 1215,
        "comment": "",
        "child_ranges": [
            "(line 1211,col 5)-(line 1214,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testNumericComparison6()",
        "snippet": "  public void testNumericComparison6() throws Exception {\n    testTypes(\"/**@return {void} */ function foo() { if (3 >= foo()) return; }\",\n        \"right side of numeric comparison\\n\" +\n        \"found   : undefined\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 1217,
        "end_line": 1222,
        "comment": "",
        "child_ranges": [
            "(line 1218,col 5)-(line 1221,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testStringComparison1()",
        "snippet": "  public void testStringComparison1() throws Exception {\n    testTypes(\"/**@param {string} a*/ function f(a) {return a < 'x';}\");\n  }\n",
        "begin_line": 1224,
        "end_line": 1226,
        "comment": "",
        "child_ranges": [
            "(line 1225,col 5)-(line 1225,col 72)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testStringComparison2()",
        "snippet": "  public void testStringComparison2() throws Exception {\n    testTypes(\"/**@param {Object} a*/ function f(a) {return a < 'x';}\");\n  }\n",
        "begin_line": 1228,
        "end_line": 1230,
        "comment": "",
        "child_ranges": [
            "(line 1229,col 5)-(line 1229,col 72)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testStringComparison3()",
        "snippet": "  public void testStringComparison3() throws Exception {\n    testTypes(\"/**@param {number} a*/ function f(a) {return a < 'x';}\");\n  }\n",
        "begin_line": 1232,
        "end_line": 1234,
        "comment": "",
        "child_ranges": [
            "(line 1233,col 5)-(line 1233,col 72)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testStringComparison4()",
        "snippet": "  public void testStringComparison4() throws Exception {\n    testTypes(\"/**@param {string|undefined} a*/ \" +\n                  \"function f(a) {return a < 'x';}\");\n  }\n",
        "begin_line": 1236,
        "end_line": 1239,
        "comment": "",
        "child_ranges": [
            "(line 1237,col 5)-(line 1238,col 53)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testStringComparison5()",
        "snippet": "  public void testStringComparison5() throws Exception {\n    testTypes(\"/**@param {*} a*/ \" +\n                  \"function f(a) {return a < 'x';}\");\n  }\n",
        "begin_line": 1241,
        "end_line": 1244,
        "comment": "",
        "child_ranges": [
            "(line 1242,col 5)-(line 1243,col 53)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testStringComparison6()",
        "snippet": "  public void testStringComparison6() throws Exception {\n    testTypes(\"/**@return {void} */ \" +\n        \"function foo() { if ('a' >= foo()) return; }\",\n        \"right side of comparison\\n\" +\n        \"found   : undefined\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 1246,
        "end_line": 1252,
        "comment": "",
        "child_ranges": [
            "(line 1247,col 5)-(line 1251,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testValueOfComparison1()",
        "snippet": "  public void testValueOfComparison1() throws Exception {\n    testTypes(\"/** @constructor */function O() {};\" +\n        \"/**@override*/O.prototype.valueOf = function() { return 1; };\" +\n        \"/**@param {!O} a\\n@param {!O} b*/ function f(a,b) { return a < b; }\");\n  }\n",
        "begin_line": 1254,
        "end_line": 1258,
        "comment": "",
        "child_ranges": [
            "(line 1255,col 5)-(line 1257,col 79)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testValueOfComparison2()",
        "snippet": "  public void testValueOfComparison2() throws Exception {\n    testTypes(\"/** @constructor */function O() {};\" +\n        \"/**@override*/O.prototype.valueOf = function() { return 1; };\" +\n        \"/**@param {!O} a\\n@param {number} b*/\" +\n        \"function f(a,b) { return a < b; }\");\n  }\n",
        "begin_line": 1260,
        "end_line": 1265,
        "comment": "",
        "child_ranges": [
            "(line 1261,col 5)-(line 1264,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testValueOfComparison3()",
        "snippet": "  public void testValueOfComparison3() throws Exception {\n    testTypes(\"/** @constructor */function O() {};\" +\n        \"/**@override*/O.prototype.toString = function() { return 'o'; };\" +\n        \"/**@param {!O} a\\n@param {string} b*/\" +\n        \"function f(a,b) { return a < b; }\");\n  }\n",
        "begin_line": 1267,
        "end_line": 1272,
        "comment": "",
        "child_ranges": [
            "(line 1268,col 5)-(line 1271,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testGenericRelationalExpression()",
        "snippet": "  public void testGenericRelationalExpression() throws Exception {\n    testTypes(\"/**@param {*} a\\n@param {*} b*/ \" +\n                  \"function f(a,b) {return a < b;}\");\n  }\n",
        "begin_line": 1274,
        "end_line": 1277,
        "comment": "",
        "child_ranges": [
            "(line 1275,col 5)-(line 1276,col 53)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInstanceof1()",
        "snippet": "  public void testInstanceof1() throws Exception {\n    testTypes(\"function foo(){\" +\n        \"if (bar instanceof 3)return;}\",\n        \"instanceof requires an object\\n\" +\n        \"found   : number\\n\" +\n        \"required: Object\");\n  }\n",
        "begin_line": 1279,
        "end_line": 1285,
        "comment": "",
        "child_ranges": [
            "(line 1280,col 5)-(line 1284,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInstanceof2()",
        "snippet": "  public void testInstanceof2() throws Exception {\n    testTypes(\"/**@return {void}*/function foo(){\" +\n        \"if (foo() instanceof Object)return;}\",\n        \"deterministic instanceof yields false\\n\" +\n        \"found   : undefined\\n\" +\n        \"required: NoObject\");\n  }\n",
        "begin_line": 1287,
        "end_line": 1293,
        "comment": "",
        "child_ranges": [
            "(line 1288,col 5)-(line 1292,col 30)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInstanceof3()",
        "snippet": "  public void testInstanceof3() throws Exception {\n    testTypes(\"/**@return {*} */function foo(){\" +\n        \"if (foo() instanceof Object)return;}\");\n  }\n",
        "begin_line": 1295,
        "end_line": 1298,
        "comment": "",
        "child_ranges": [
            "(line 1296,col 5)-(line 1297,col 48)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInstanceof4()",
        "snippet": "  public void testInstanceof4() throws Exception {\n    testTypes(\"/**@return {(Object|number)} */function foo(){\" +\n        \"if (foo() instanceof Object)return 3;}\");\n  }\n",
        "begin_line": 1300,
        "end_line": 1303,
        "comment": "",
        "child_ranges": [
            "(line 1301,col 5)-(line 1302,col 50)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInstanceof5()",
        "snippet": "  public void testInstanceof5() throws Exception {\n    // No warning for unknown types.\n    testTypes(\"/** @return {?} */ function foo(){\" +\n        \"if (foo() instanceof Object)return;}\");\n  }\n",
        "begin_line": 1305,
        "end_line": 1309,
        "comment": "",
        "child_ranges": [
            "(line 1307,col 5)-(line 1308,col 48)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInstanceof6()",
        "snippet": "  public void testInstanceof6() throws Exception {\n    testTypes(\"/**@return {(Array|number)} */function foo(){\" +\n        \"if (foo() instanceof Object)return 3;}\");\n  }\n",
        "begin_line": 1311,
        "end_line": 1314,
        "comment": "",
        "child_ranges": [
            "(line 1312,col 5)-(line 1313,col 50)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInstanceOfReduction3()",
        "snippet": "  public void testInstanceOfReduction3() throws Exception {\n    testTypes(\n        \"/** \\n\" +\n        \" * @param {Object} x \\n\" +\n        \" * @param {Function} y \\n\" +\n        \" * @return {boolean} \\n\" +\n        \" */\\n\" +\n        \"var f = function(x, y) {\\n\" +\n        \"  return x instanceof y;\\n\" +\n        \"};\");\n  }\n",
        "begin_line": 1316,
        "end_line": 1326,
        "comment": "",
        "child_ranges": [
            "(line 1317,col 5)-(line 1325,col 14)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testScoping1()",
        "snippet": "  public void testScoping1() throws Exception {\n    testTypes(\n        \"/**@param {string} a*/function foo(a){\" +\n        \"  /**@param {Array|string} a*/function bar(a){\" +\n        \"    if (a instanceof Array)return;\" +\n        \"  }\" +\n        \"}\");\n  }\n",
        "begin_line": 1328,
        "end_line": 1335,
        "comment": "",
        "child_ranges": [
            "(line 1329,col 5)-(line 1334,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testScoping2()",
        "snippet": "  public void testScoping2() throws Exception {\n    testTypes(\n        \"/** @type number */ var a;\" +\n        \"function Foo() {\" +\n        \"  /** @type string */ var a;\" +\n        \"}\");\n  }\n",
        "begin_line": 1337,
        "end_line": 1343,
        "comment": "",
        "child_ranges": [
            "(line 1338,col 5)-(line 1342,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testScoping3()",
        "snippet": "  public void testScoping3() throws Exception {\n    testTypes(\"\\n\\n/** @type{Number}*/var b;\\n/** @type{!String} */var b;\",\n        \"variable b redefined with type String, original \" +\n        \"definition at [testcode]:3 with type (Number|null)\");\n  }\n",
        "begin_line": 1345,
        "end_line": 1349,
        "comment": "",
        "child_ranges": [
            "(line 1346,col 5)-(line 1348,col 62)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testScoping4()",
        "snippet": "  public void testScoping4() throws Exception {\n    testTypes(\"/** @type{Number}*/var b; if (true) /** @type{!String} */var b;\",\n        \"variable b redefined with type String, original \" +\n        \"definition at [testcode]:1 with type (Number|null)\");\n  }\n",
        "begin_line": 1351,
        "end_line": 1355,
        "comment": "",
        "child_ranges": [
            "(line 1352,col 5)-(line 1354,col 62)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testScoping5()",
        "snippet": "  public void testScoping5() throws Exception {\n    // multiple definitions are not checked by the type checker but by a\n    // subsequent pass\n    testTypes(\"if (true) var b; var b;\");\n  }\n",
        "begin_line": 1357,
        "end_line": 1361,
        "comment": "",
        "child_ranges": [
            "(line 1360,col 5)-(line 1360,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testScoping6()",
        "snippet": "  public void testScoping6() throws Exception {\n    // multiple definitions are not checked by the type checker but by a\n    // subsequent pass\n    testTypes(\"if (true) var b; if (true) var b;\");\n  }\n",
        "begin_line": 1363,
        "end_line": 1367,
        "comment": "",
        "child_ranges": [
            "(line 1366,col 5)-(line 1366,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testScoping7()",
        "snippet": "  public void testScoping7() throws Exception {\n    testTypes(\"/** @constructor */function A() {\" +\n        \"  /** @type !A */this.a = null;\" +\n        \"}\",\n        \"assignment to property a of A\\n\" +\n        \"found   : null\\n\" +\n        \"required: A\");\n  }\n",
        "begin_line": 1369,
        "end_line": 1376,
        "comment": "",
        "child_ranges": [
            "(line 1370,col 5)-(line 1375,col 23)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testScoping8()",
        "snippet": "  public void testScoping8() throws Exception {\n    testTypes(\"/** @constructor */function A() {}\" +\n        \"/** @constructor */function B() {\" +\n        \"  /** @type !A */this.a = null;\" +\n        \"}\",\n        \"assignment to property a of B\\n\" +\n        \"found   : null\\n\" +\n        \"required: A\");\n  }\n",
        "begin_line": 1378,
        "end_line": 1386,
        "comment": "",
        "child_ranges": [
            "(line 1379,col 5)-(line 1385,col 23)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testScoping9()",
        "snippet": "  public void testScoping9() throws Exception {\n    testTypes(\"/** @constructor */function B() {\" +\n        \"  /** @type !A */this.a = null;\" +\n        \"}\" +\n        \"/** @constructor */function A() {}\",\n        \"assignment to property a of B\\n\" +\n        \"found   : null\\n\" +\n        \"required: A\");\n  }\n",
        "begin_line": 1388,
        "end_line": 1396,
        "comment": "",
        "child_ranges": [
            "(line 1389,col 5)-(line 1395,col 23)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testScoping10()",
        "snippet": "  public void testScoping10() throws Exception {\n    TypeCheckResult p = parseAndTypeCheckWithScope(\"var a = function b(){};\");\n\n    // a declared, b is not\n    assertTrue(p.scope.isDeclared(\"a\", false));\n    assertFalse(p.scope.isDeclared(\"b\", false));\n\n    // checking that a has the correct assigned type\n    assertEquals(\"function (): undefined\",\n        p.scope.getVar(\"a\").getType().toString());\n  }\n",
        "begin_line": 1398,
        "end_line": 1408,
        "comment": "",
        "child_ranges": [
            "(line 1399,col 5)-(line 1399,col 78)",
            "(line 1402,col 5)-(line 1402,col 47)",
            "(line 1403,col 5)-(line 1403,col 48)",
            "(line 1406,col 5)-(line 1407,col 50)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testScoping11()",
        "snippet": "  public void testScoping11() throws Exception {\n    // named function expressions create a binding in their body only\n    // the return is wrong but the assignment is ok since the type of b is ?\n    testTypes(\n        \"/** @return {number} */var a = function b(){ return b };\",\n        \"inconsistent return type\\n\" +\n        \"found   : function (): number\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 1410,
        "end_line": 1418,
        "comment": "",
        "child_ranges": [
            "(line 1413,col 5)-(line 1417,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testScoping12()",
        "snippet": "  public void testScoping12() throws Exception {\n    testTypes(\n        \"/** @constructor */ function F() {}\" +\n        \"/** @type {number} */ F.prototype.bar = 3;\" +\n        \"/** @param {!F} f */ function g(f) {\" +\n        \"  /** @return {string} */\" +\n        \"  function h() {\" +\n        \"    return f.bar;\" +\n        \"  }\" +\n        \"}\",\n        \"inconsistent return type\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 1420,
        "end_line": 1433,
        "comment": "",
        "child_ranges": [
            "(line 1421,col 5)-(line 1432,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testFunctionArguments1()",
        "snippet": "  public void testFunctionArguments1() throws Exception {\n    testFunctionType(\n        \"/** @param {number} a\\n@return {string} */\" +\n        \"function f(a) {}\",\n        \"function (number): string\");\n  }\n",
        "begin_line": 1435,
        "end_line": 1440,
        "comment": "",
        "child_ranges": [
            "(line 1436,col 5)-(line 1439,col 37)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testFunctionArguments2()",
        "snippet": "  public void testFunctionArguments2() throws Exception {\n    testFunctionType(\n        \"/** @param {number} opt_a\\n@return {string} */\" +\n        \"function f(opt_a) {}\",\n        \"function ((number|undefined)): string\");\n  }\n",
        "begin_line": 1442,
        "end_line": 1447,
        "comment": "",
        "child_ranges": [
            "(line 1443,col 5)-(line 1446,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testFunctionArguments3()",
        "snippet": "  public void testFunctionArguments3() throws Exception {\n    testFunctionType(\n        \"/** @param {number} b\\n@return {string} */\" +\n        \"function f(a,b) {}\",\n        \"function (?, number): string\");\n  }\n",
        "begin_line": 1449,
        "end_line": 1454,
        "comment": "",
        "child_ranges": [
            "(line 1450,col 5)-(line 1453,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testFunctionArguments4()",
        "snippet": "  public void testFunctionArguments4() throws Exception {\n    testFunctionType(\n        \"/** @param {number} opt_a\\n@return {string} */\" +\n        \"function f(a,opt_a) {}\",\n        \"function (?, (number|undefined)): string\");\n  }\n",
        "begin_line": 1456,
        "end_line": 1461,
        "comment": "",
        "child_ranges": [
            "(line 1457,col 5)-(line 1460,col 52)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testFunctionArguments5()",
        "snippet": "  public void testFunctionArguments5() throws Exception {\n    testTypes(\n        \"function a(opt_a,a) {}\",\n        \"optional arguments must be at the end\");\n  }\n",
        "begin_line": 1463,
        "end_line": 1467,
        "comment": "",
        "child_ranges": [
            "(line 1464,col 5)-(line 1466,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testFunctionArguments6()",
        "snippet": "  public void testFunctionArguments6() throws Exception {\n    testTypes(\n        \"function a(var_args,a) {}\",\n        \"variable length argument must be last\");\n  }\n",
        "begin_line": 1469,
        "end_line": 1473,
        "comment": "",
        "child_ranges": [
            "(line 1470,col 5)-(line 1472,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testFunctionArguments7()",
        "snippet": "  public void testFunctionArguments7() throws Exception {\n    testTypes(\n        \"/** @param {number} opt_a\\n@return {string} */\" +\n        \"function a(a,opt_a,var_args) {}\");\n  }\n",
        "begin_line": 1475,
        "end_line": 1479,
        "comment": "",
        "child_ranges": [
            "(line 1476,col 5)-(line 1478,col 43)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testFunctionArguments8()",
        "snippet": "  public void testFunctionArguments8() throws Exception {\n    testTypes(\n        \"function a(a,opt_a,var_args,b) {}\",\n        \"variable length argument must be last\");\n  }\n",
        "begin_line": 1481,
        "end_line": 1485,
        "comment": "",
        "child_ranges": [
            "(line 1482,col 5)-(line 1484,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testFunctionArguments9()",
        "snippet": "  public void testFunctionArguments9() throws Exception {\n    // testing that only one error is reported\n    testTypes(\n        \"function a(a,opt_a,var_args,b,c) {}\",\n        \"variable length argument must be last\");\n  }\n",
        "begin_line": 1487,
        "end_line": 1492,
        "comment": "",
        "child_ranges": [
            "(line 1489,col 5)-(line 1491,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testFunctionArguments10()",
        "snippet": "  public void testFunctionArguments10() throws Exception {\n    // testing that only one error is reported\n    testTypes(\n        \"function a(a,opt_a,b,c) {}\",\n        \"optional arguments must be at the end\");\n  }\n",
        "begin_line": 1494,
        "end_line": 1499,
        "comment": "",
        "child_ranges": [
            "(line 1496,col 5)-(line 1498,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testFunctionArguments11()",
        "snippet": "  public void testFunctionArguments11() throws Exception {\n    testTypes(\n        \"function a(a,opt_a,b,c,var_args,d) {}\",\n        \"optional arguments must be at the end\");\n  }\n",
        "begin_line": 1501,
        "end_line": 1505,
        "comment": "",
        "child_ranges": [
            "(line 1502,col 5)-(line 1504,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testFunctionArguments12()",
        "snippet": "  public void testFunctionArguments12() throws Exception {\n    testTypes(\"/** @param foo {String} */function bar(baz){}\",\n        \"parameter foo does not appear in bar's parameter list\");\n  }\n",
        "begin_line": 1507,
        "end_line": 1510,
        "comment": "",
        "child_ranges": [
            "(line 1508,col 5)-(line 1509,col 65)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testFunctionArguments13()",
        "snippet": "  public void testFunctionArguments13() throws Exception {\n    // verifying that the argument type have non-inferrable types\n    testTypes(\n        \"/** @return {boolean} */ function u() { return true; }\" +\n        \"/** @param {boolean} b\\n@return {?boolean} */\" +\n        \"function f(b) { if (u()) { b = null; } return b; }\",\n        \"assignment\\n\" +\n        \"found   : null\\n\" +\n        \"required: boolean\");\n  }\n",
        "begin_line": 1512,
        "end_line": 1521,
        "comment": "",
        "child_ranges": [
            "(line 1514,col 5)-(line 1520,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testFunctionArguments14()",
        "snippet": "  public void testFunctionArguments14() throws Exception {\n    testTypes(\n        \"/**\\n\" +\n        \" * @param {string} x\\n\" +\n        \" * @param {number} opt_y\\n\" +\n        \" * @param {boolean} var_args\\n\" +\n        \" */ function f(x, opt_y, var_args) {}\" +\n        \"f('3'); f('3', 2); f('3', 2, true); f('3', 2, true, false);\");\n  }\n",
        "begin_line": 1523,
        "end_line": 1531,
        "comment": "",
        "child_ranges": [
            "(line 1524,col 5)-(line 1530,col 71)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testFunctionArguments15()",
        "snippet": "  public void testFunctionArguments15() throws Exception {\n    testTypes(\n        \"/** @param {?function(*)} f */\" +\n        \"function g(f) { f(1, 2); }\",\n        \"Function f: called with 2 argument(s). \" +\n        \"Function requires at least 1 argument(s) \" +\n        \"and no more than 1 argument(s).\");\n  }\n",
        "begin_line": 1533,
        "end_line": 1540,
        "comment": "",
        "child_ranges": [
            "(line 1534,col 5)-(line 1539,col 43)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testFunctionArguments16()",
        "snippet": "  public void testFunctionArguments16() throws Exception {\n    testTypes(\n        \"/** @param {...number} var_args */\" +\n        \"function g(var_args) {} g(1, true);\",\n        \"actual parameter 2 of g does not match formal parameter\\n\" +\n        \"found   : boolean\\n\" +\n        \"required: (number|undefined)\");\n  }\n",
        "begin_line": 1542,
        "end_line": 1549,
        "comment": "",
        "child_ranges": [
            "(line 1543,col 5)-(line 1548,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testPrintFunctionName1()",
        "snippet": "  public void testPrintFunctionName1() throws Exception {\n    // Ensures that the function name is pretty.\n    testTypes(\n        \"var goog = {}; goog.run = function(f) {};\" +\n        \"goog.run();\",\n        \"Function goog.run: called with 0 argument(s). \" +\n        \"Function requires at least 1 argument(s) \" +\n        \"and no more than 1 argument(s).\");\n  }\n",
        "begin_line": 1551,
        "end_line": 1559,
        "comment": "",
        "child_ranges": [
            "(line 1553,col 5)-(line 1558,col 43)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testPrintFunctionName2()",
        "snippet": "  public void testPrintFunctionName2() throws Exception {\n    testTypes(\n        \"/** @constructor */ var Foo = function() {}; \" +\n        \"Foo.prototype.run = function(f) {};\" +\n        \"(new Foo).run();\",\n        \"Function Foo.prototype.run: called with 0 argument(s). \" +\n        \"Function requires at least 1 argument(s) \" +\n        \"and no more than 1 argument(s).\");\n  }\n",
        "begin_line": 1561,
        "end_line": 1569,
        "comment": "",
        "child_ranges": [
            "(line 1562,col 5)-(line 1568,col 43)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testFunctionInference1()",
        "snippet": "  public void testFunctionInference1() throws Exception {\n    testFunctionType(\n        \"function f(a) {}\",\n        \"function (?): undefined\");\n  }\n",
        "begin_line": 1571,
        "end_line": 1575,
        "comment": "",
        "child_ranges": [
            "(line 1572,col 5)-(line 1574,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testFunctionInference2()",
        "snippet": "  public void testFunctionInference2() throws Exception {\n    testFunctionType(\n        \"function f(a,b) {}\",\n        \"function (?, ?): undefined\");\n  }\n",
        "begin_line": 1577,
        "end_line": 1581,
        "comment": "",
        "child_ranges": [
            "(line 1578,col 5)-(line 1580,col 38)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testFunctionInference3()",
        "snippet": "  public void testFunctionInference3() throws Exception {\n    testFunctionType(\n        \"function f(var_args) {}\",\n        \"function (...[?]): undefined\");\n  }\n",
        "begin_line": 1583,
        "end_line": 1587,
        "comment": "",
        "child_ranges": [
            "(line 1584,col 5)-(line 1586,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testFunctionInference4()",
        "snippet": "  public void testFunctionInference4() throws Exception {\n    testFunctionType(\n        \"function f(a,b,c,var_args) {}\",\n        \"function (?, ?, ?, ...[?]): undefined\");\n  }\n",
        "begin_line": 1589,
        "end_line": 1593,
        "comment": "",
        "child_ranges": [
            "(line 1590,col 5)-(line 1592,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testFunctionInference5()",
        "snippet": "  public void testFunctionInference5() throws Exception {\n    testFunctionType(\n        \"/** @this Date\\n@return {string} */function f(a) {}\",\n        \"function (this:Date, ?): string\");\n  }\n",
        "begin_line": 1595,
        "end_line": 1599,
        "comment": "",
        "child_ranges": [
            "(line 1596,col 5)-(line 1598,col 43)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testFunctionInference6()",
        "snippet": "  public void testFunctionInference6() throws Exception {\n    testFunctionType(\n        \"/** @this Date\\n@return {string} */function f(opt_a) {}\",\n        \"function (this:Date, ?): string\");\n  }\n",
        "begin_line": 1601,
        "end_line": 1605,
        "comment": "",
        "child_ranges": [
            "(line 1602,col 5)-(line 1604,col 43)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testFunctionInference7()",
        "snippet": "  public void testFunctionInference7() throws Exception {\n    testFunctionType(\n        \"/** @this Date */function f(a,b,c,var_args) {}\",\n        \"function (this:Date, ?, ?, ?, ...[?]): undefined\");\n  }\n",
        "begin_line": 1607,
        "end_line": 1611,
        "comment": "",
        "child_ranges": [
            "(line 1608,col 5)-(line 1610,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testFunctionInference8()",
        "snippet": "  public void testFunctionInference8() throws Exception {\n    testFunctionType(\n        \"function f() {}\",\n        \"function (): undefined\");\n  }\n",
        "begin_line": 1613,
        "end_line": 1617,
        "comment": "",
        "child_ranges": [
            "(line 1614,col 5)-(line 1616,col 34)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testFunctionInference9()",
        "snippet": "  public void testFunctionInference9() throws Exception {\n    testFunctionType(\n        \"var f = function() {};\",\n        \"function (): undefined\");\n  }\n",
        "begin_line": 1619,
        "end_line": 1623,
        "comment": "",
        "child_ranges": [
            "(line 1620,col 5)-(line 1622,col 34)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testFunctionInference10()",
        "snippet": "  public void testFunctionInference10() throws Exception {\n    testFunctionType(\n        \"/** @this Date\\n@param {boolean} b\\n@return {string} */\" +\n        \"var f = function(a,b) {};\",\n        \"function (this:Date, ?, boolean): string\");\n  }\n",
        "begin_line": 1625,
        "end_line": 1630,
        "comment": "",
        "child_ranges": [
            "(line 1626,col 5)-(line 1629,col 52)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testFunctionInference11()",
        "snippet": "  public void testFunctionInference11() throws Exception {\n    testFunctionType(\n        \"var goog = {};\" +\n        \"/** @return {number}*/goog.f = function(){};\",\n        \"goog.f\",\n        \"function (): number\");\n  }\n",
        "begin_line": 1632,
        "end_line": 1638,
        "comment": "",
        "child_ranges": [
            "(line 1633,col 5)-(line 1637,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testFunctionInference12()",
        "snippet": "  public void testFunctionInference12() throws Exception {\n    testFunctionType(\n        \"var goog = {};\" +\n        \"goog.f = function(){};\",\n        \"goog.f\",\n        \"function (): undefined\");\n  }\n",
        "begin_line": 1640,
        "end_line": 1646,
        "comment": "",
        "child_ranges": [
            "(line 1641,col 5)-(line 1645,col 34)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testFunctionInference13()",
        "snippet": "  public void testFunctionInference13() throws Exception {\n    testFunctionType(\n        \"var goog = {};\" +\n        \"/** @constructor */ goog.Foo = function(){};\" +\n        \"/** @param {!goog.Foo} f */function eatFoo(f){};\",\n        \"eatFoo\",\n        \"function (goog.Foo): undefined\");\n  }\n",
        "begin_line": 1648,
        "end_line": 1655,
        "comment": "",
        "child_ranges": [
            "(line 1649,col 5)-(line 1654,col 42)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testFunctionInference14()",
        "snippet": "  public void testFunctionInference14() throws Exception {\n    testFunctionType(\n        \"var goog = {};\" +\n        \"/** @constructor */ goog.Foo = function(){};\" +\n        \"/** @return {!goog.Foo} */function eatFoo(){ return new goog.Foo; };\",\n        \"eatFoo\",\n        \"function (): goog.Foo\");\n  }\n",
        "begin_line": 1657,
        "end_line": 1664,
        "comment": "",
        "child_ranges": [
            "(line 1658,col 5)-(line 1663,col 33)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testFunctionInference15()",
        "snippet": "  public void testFunctionInference15() throws Exception {\n    testFunctionType(\n        \"/** @constructor */ function f() {};\" +\n        \"f.prototype.foo = function(){};\",\n        \"f.prototype.foo\",\n        \"function (this:f): undefined\");\n  }\n",
        "begin_line": 1666,
        "end_line": 1672,
        "comment": "",
        "child_ranges": [
            "(line 1667,col 5)-(line 1671,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testFunctionInference16()",
        "snippet": "  public void testFunctionInference16() throws Exception {\n    testFunctionType(\n        \"/** @constructor */ function f() {};\" +\n        \"f.prototype.foo = function(){};\",\n        \"(new f).foo\",\n        \"function (this:f): undefined\");\n  }\n",
        "begin_line": 1674,
        "end_line": 1680,
        "comment": "",
        "child_ranges": [
            "(line 1675,col 5)-(line 1679,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testFunctionInference17()",
        "snippet": "  public void testFunctionInference17() throws Exception {\n    testFunctionType(\n        \"/** @constructor */ function f() {}\" +\n        \"function abstractMethod() {}\" +\n        \"/** @param {number} x */ f.prototype.foo = abstractMethod;\",\n        \"(new f).foo\",\n        \"function (this:f, number): ?\");\n  }\n",
        "begin_line": 1682,
        "end_line": 1689,
        "comment": "",
        "child_ranges": [
            "(line 1683,col 5)-(line 1688,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testFunctionInference18()",
        "snippet": "  public void testFunctionInference18() throws Exception {\n    testFunctionType(\n        \"var goog = {};\" +\n        \"/** @this {Date} */ goog.eatWithDate;\",\n        \"goog.eatWithDate\",\n        \"function (this:Date): ?\");\n  }\n",
        "begin_line": 1691,
        "end_line": 1697,
        "comment": "",
        "child_ranges": [
            "(line 1692,col 5)-(line 1696,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testFunctionInference19()",
        "snippet": "  public void testFunctionInference19() throws Exception {\n    testFunctionType(\n        \"/** @param {string} x */ var f;\",\n        \"f\",\n        \"function (string): ?\");\n  }\n",
        "begin_line": 1699,
        "end_line": 1704,
        "comment": "",
        "child_ranges": [
            "(line 1700,col 5)-(line 1703,col 32)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testFunctionInference20()",
        "snippet": "  public void testFunctionInference20() throws Exception {\n    testFunctionType(\n        \"/** @this {Date} */ var f;\",\n        \"f\",\n        \"function (this:Date): ?\");\n  }\n",
        "begin_line": 1706,
        "end_line": 1711,
        "comment": "",
        "child_ranges": [
            "(line 1707,col 5)-(line 1710,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInnerFunction1()",
        "snippet": "  public void testInnerFunction1() throws Exception {\n    testTypes(\n        \"function f() {\" +\n        \" /** @type {number} */ var x = 3;\\n\" +\n        \" function g() { x = null; }\" +\n        \" return x;\" +\n        \"}\",\n        \"assignment\\n\" +\n        \"found   : null\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 1713,
        "end_line": 1723,
        "comment": "",
        "child_ranges": [
            "(line 1714,col 5)-(line 1722,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInnerFunction2()",
        "snippet": "  public void testInnerFunction2() throws Exception {\n    testTypes(\n        \"/** @return {number} */\\n\" +\n        \"function f() {\" +\n        \" var x = null;\\n\" +\n        \" function g() { x = 3; }\" +\n        \" g();\" +\n        \" return x;\" +\n        \"}\",\n        \"inconsistent return type\\n\" +\n        \"found   : (null|number)\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 1725,
        "end_line": 1737,
        "comment": "",
        "child_ranges": [
            "(line 1726,col 5)-(line 1736,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInnerFunction3()",
        "snippet": "  public void testInnerFunction3() throws Exception {\n    testTypes(\n        \"var x = null;\" +\n        \"/** @return {number} */\\n\" +\n        \"function f() {\" +\n        \" x = 3;\\n\" +\n        \" /** @return {number} */\\n\" +\n        \" function g() { x = true; return x; }\" +\n        \" return x;\" +\n        \"}\",\n        \"inconsistent return type\\n\" +\n        \"found   : boolean\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 1739,
        "end_line": 1752,
        "comment": "",
        "child_ranges": [
            "(line 1740,col 5)-(line 1751,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInnerFunction4()",
        "snippet": "  public void testInnerFunction4() throws Exception {\n    testTypes(\n        \"var x = null;\" +\n        \"/** @return {number} */\\n\" +\n        \"function f() {\" +\n        \" x = '3';\\n\" +\n        \" /** @return {number} */\\n\" +\n        \" function g() { x = 3; return x; }\" +\n        \" return x;\" +\n        \"}\",\n        \"inconsistent return type\\n\" +\n        \"found   : string\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 1754,
        "end_line": 1767,
        "comment": "",
        "child_ranges": [
            "(line 1755,col 5)-(line 1766,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInnerFunction5()",
        "snippet": "  public void testInnerFunction5() throws Exception {\n    testTypes(\n        \"/** @return {number} */\\n\" +\n        \"function f() {\" +\n        \" var x = 3;\\n\" +\n        \" /** @return {number} */\" +\n        \" function g() { var x = 3;x = true; return x; }\" +\n        \" return x;\" +\n        \"}\",\n        \"inconsistent return type\\n\" +\n        \"found   : boolean\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 1769,
        "end_line": 1781,
        "comment": "",
        "child_ranges": [
            "(line 1770,col 5)-(line 1780,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInnerFunction6()",
        "snippet": "  public void testInnerFunction6() throws Exception {\n    testClosureTypes(\n        CLOSURE_DEFS +\n        \"function f() {\" +\n        \" var x = 0 || function() {};\\n\" +\n        \" function g() { if (goog.isFunction(x)) { x(1); } }\" +\n        \" g();\" +\n        \"}\", null);\n  }\n",
        "begin_line": 1783,
        "end_line": 1791,
        "comment": "",
        "child_ranges": [
            "(line 1784,col 5)-(line 1790,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInnerFunction7()",
        "snippet": "  public void testInnerFunction7() throws Exception {\n    testClosureTypes(\n        CLOSURE_DEFS +\n        \"function f() {\" +\n        \" /** @type {number|function()} */\" +\n        \" var x = 0 || function() {};\\n\" +\n        \" function g() { if (goog.isFunction(x)) { x(1); } }\" +\n        \" g();\" +\n        \"}\",\n        \"Function x: called with 1 argument(s). \" +\n        \"Function requires at least 0 argument(s) \" +\n        \"and no more than 0 argument(s).\");\n  }\n",
        "begin_line": 1793,
        "end_line": 1805,
        "comment": "",
        "child_ranges": [
            "(line 1794,col 5)-(line 1804,col 43)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInnerFunction8()",
        "snippet": "  public void testInnerFunction8() throws Exception {\n    testClosureTypes(\n        CLOSURE_DEFS +\n        \"function f() {\" +\n        \" function x() {};\\n\" +\n        \" function g() { if (goog.isFunction(x)) { x(1); } }\" +\n        \" g();\" +\n        \"}\",\n        \"Function x: called with 1 argument(s). \" +\n        \"Function requires at least 0 argument(s) \" +\n        \"and no more than 0 argument(s).\");\n  }\n",
        "begin_line": 1807,
        "end_line": 1818,
        "comment": "",
        "child_ranges": [
            "(line 1808,col 5)-(line 1817,col 43)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInnerFunction9()",
        "snippet": "  public void testInnerFunction9() throws Exception {\n    testTypes(\n        \"function f() {\" +\n        \" var x = 3;\\n\" +\n        \" function g() { x = null; };\\n\" +\n        \" function h() { return x == null; }\" +\n        \" return h();\" +\n        \"}\");\n  }\n",
        "begin_line": 1820,
        "end_line": 1828,
        "comment": "",
        "child_ranges": [
            "(line 1821,col 5)-(line 1827,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testAbstractMethodHandling1()",
        "snippet": "  public void testAbstractMethodHandling1() throws Exception {\n    testTypes(\n        \"/** @type {Function} */ var abstractFn = function() {};\" +\n        \"abstractFn(1);\");\n  }\n",
        "begin_line": 1830,
        "end_line": 1834,
        "comment": "",
        "child_ranges": [
            "(line 1831,col 5)-(line 1833,col 26)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testAbstractMethodHandling2()",
        "snippet": "  public void testAbstractMethodHandling2() throws Exception {\n    testTypes(\n        \"var abstractFn = function() {};\" +\n        \"abstractFn(1);\",\n        \"Function abstractFn: called with 1 argument(s). \" +\n        \"Function requires at least 0 argument(s) \" +\n        \"and no more than 0 argument(s).\");\n  }\n",
        "begin_line": 1836,
        "end_line": 1843,
        "comment": "",
        "child_ranges": [
            "(line 1837,col 5)-(line 1842,col 43)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testAbstractMethodHandling3()",
        "snippet": "  public void testAbstractMethodHandling3() throws Exception {\n    testTypes(\n        \"var goog = {};\" +\n        \"/** @type {Function} */ goog.abstractFn = function() {};\" +\n        \"goog.abstractFn(1);\");\n  }\n",
        "begin_line": 1845,
        "end_line": 1850,
        "comment": "",
        "child_ranges": [
            "(line 1846,col 5)-(line 1849,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testAbstractMethodHandling4()",
        "snippet": "  public void testAbstractMethodHandling4() throws Exception {\n    testTypes(\n        \"var goog = {};\" +\n        \"goog.abstractFn = function() {};\" +\n        \"goog.abstractFn(1);\",\n        \"Function goog.abstractFn: called with 1 argument(s). \" +\n        \"Function requires at least 0 argument(s) \" +\n        \"and no more than 0 argument(s).\");\n  }\n",
        "begin_line": 1852,
        "end_line": 1860,
        "comment": "",
        "child_ranges": [
            "(line 1853,col 5)-(line 1859,col 43)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testAbstractMethodHandling5()",
        "snippet": "  public void testAbstractMethodHandling5() throws Exception {\n    testTypes(\n        \"/** @type {!Function} */ var abstractFn = function() {};\" +\n        \"/** @param {number} x */ var f = abstractFn;\" +\n        \"f('x');\",\n        \"actual parameter 1 of f does not match formal parameter\\n\" +\n        \"found   : string\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 1862,
        "end_line": 1870,
        "comment": "",
        "child_ranges": [
            "(line 1863,col 5)-(line 1869,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testAbstractMethodHandling6()",
        "snippet": "  public void testAbstractMethodHandling6() throws Exception {\n    testTypes(\n        \"var goog = {};\" +\n        \"/** @type {Function} */ goog.abstractFn = function() {};\" +\n        \"/** @param {number} x */ goog.f = abstractFn;\" +\n        \"goog.f('x');\",\n        \"actual parameter 1 of goog.f does not match formal parameter\\n\" +\n        \"found   : string\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 1872,
        "end_line": 1881,
        "comment": "",
        "child_ranges": [
            "(line 1873,col 5)-(line 1880,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testMethodInference1()",
        "snippet": "  public void testMethodInference1() throws Exception {\n    testTypes(\n        \"/** @constructor */ function F() {}\" +\n        \"/** @return {number} */ F.prototype.foo = function() { return 3; };\" +\n        \"/** @constructor \\n * @extends {F} */ \" +\n        \"function G() {}\" +\n        \"/** @override */ G.prototype.foo = function() { return true; };\",\n        \"inconsistent return type\\n\" +\n        \"found   : boolean\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 1883,
        "end_line": 1893,
        "comment": "",
        "child_ranges": [
            "(line 1884,col 5)-(line 1892,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testMethodInference2()",
        "snippet": "  public void testMethodInference2() throws Exception {\n    testTypes(\n        \"var goog = {};\" +\n        \"/** @constructor */ goog.F = function() {};\" +\n        \"/** @return {number} */ goog.F.prototype.foo = \" +\n        \"    function() { return 3; };\" +\n        \"/** @constructor \\n * @extends {goog.F} */ \" +\n        \"goog.G = function() {};\" +\n        \"/** @override */ goog.G.prototype.foo = function() { return true; };\",\n        \"inconsistent return type\\n\" +\n        \"found   : boolean\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 1895,
        "end_line": 1907,
        "comment": "",
        "child_ranges": [
            "(line 1896,col 5)-(line 1906,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testMethodInference3()",
        "snippet": "  public void testMethodInference3() throws Exception {\n    testTypes(\n        \"/** @constructor */ function F() {}\" +\n        \"/** @param {boolean} x \\n * @return {number} */ \" +\n        \"F.prototype.foo = function(x) { return 3; };\" +\n        \"/** @constructor \\n * @extends {F} */ \" +\n        \"function G() {}\" +\n        \"/** @override */ \" +\n        \"G.prototype.foo = function(x) { return x; };\",\n        \"inconsistent return type\\n\" +\n        \"found   : boolean\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 1909,
        "end_line": 1921,
        "comment": "",
        "child_ranges": [
            "(line 1910,col 5)-(line 1920,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testMethodInference4()",
        "snippet": "  public void testMethodInference4() throws Exception {\n    testTypes(\n        \"/** @constructor */ function F() {}\" +\n        \"/** @param {boolean} x \\n * @return {number} */ \" +\n        \"F.prototype.foo = function(x) { return 3; };\" +\n        \"/** @constructor \\n * @extends {F} */ \" +\n        \"function G() {}\" +\n        \"/** @override */ \" +\n        \"G.prototype.foo = function(y) { return y; };\",\n        \"inconsistent return type\\n\" +\n        \"found   : boolean\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 1923,
        "end_line": 1935,
        "comment": "",
        "child_ranges": [
            "(line 1924,col 5)-(line 1934,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testMethodInference5()",
        "snippet": "  public void testMethodInference5() throws Exception {\n    testTypes(\n        \"/** @constructor */ function F() {}\" +\n        \"/** @param {number} x \\n * @return {string} */ \" +\n        \"F.prototype.foo = function(x) { return 'x'; };\" +\n        \"/** @constructor \\n * @extends {F} */ \" +\n        \"function G() {}\" +\n        \"/** @type {number} */ G.prototype.num = 3;\" +\n        \"/** @override */ \" +\n        \"G.prototype.foo = function(y) { return this.num + y; };\",\n        \"inconsistent return type\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 1937,
        "end_line": 1950,
        "comment": "",
        "child_ranges": [
            "(line 1938,col 5)-(line 1949,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testMethodInference6()",
        "snippet": "  public void testMethodInference6() throws Exception {\n    testTypes(\n        \"/** @constructor */ function F() {}\" +\n        \"/** @param {number} x */ F.prototype.foo = function(x) { };\" +\n        \"/** @constructor \\n * @extends {F} */ \" +\n        \"function G() {}\" +\n        \"/** @override */ G.prototype.foo = function() { };\" +\n        \"(new G()).foo(1);\",\n        \"Function G.prototype.foo: called with 1 argument(s). \" +\n        \"Function requires at least 0 argument(s) \" +\n        \"and no more than 0 argument(s).\");\n  }\n",
        "begin_line": 1952,
        "end_line": 1963,
        "comment": "",
        "child_ranges": [
            "(line 1953,col 5)-(line 1962,col 43)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testMethodInference7()",
        "snippet": "  public void testMethodInference7() throws Exception {\n    testTypes(\n        \"/** @constructor */ function F() {}\" +\n        \"F.prototype.foo = function() { };\" +\n        \"/** @constructor \\n * @extends {F} */ \" +\n        \"function G() {}\" +\n        \"/** @override */ G.prototype.foo = function(x, y) { };\" +\n        \"(new G()).foo();\",\n        \"Function G.prototype.foo: called with 0 argument(s). \" +\n        \"Function requires at least 2 argument(s) \" +\n        \"and no more than 2 argument(s).\");\n  }\n",
        "begin_line": 1965,
        "end_line": 1976,
        "comment": "",
        "child_ranges": [
            "(line 1966,col 5)-(line 1975,col 43)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testMethodInference8()",
        "snippet": "  public void testMethodInference8() throws Exception {\n    testTypes(\n        \"/** @constructor */ function F() {}\" +\n        \"F.prototype.foo = function() { };\" +\n        \"/** @constructor \\n * @extends {F} */ \" +\n        \"function G() {}\" +\n        \"/** @override */ \" +\n        \"G.prototype.foo = function(a, opt_b, var_args) { };\" +\n        \"(new G()).foo();\",\n        \"Function G.prototype.foo: called with 0 argument(s). \" +\n        \"Function requires at least 1 argument(s).\");\n  }\n",
        "begin_line": 1978,
        "end_line": 1989,
        "comment": "",
        "child_ranges": [
            "(line 1979,col 5)-(line 1988,col 53)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testMethodInference9()",
        "snippet": "  public void testMethodInference9() throws Exception {\n    testTypes(\n        \"/** @constructor */ function F() {}\" +\n        \"F.prototype.foo = function() { };\" +\n        \"/** @constructor \\n * @extends {F} */ \" +\n        \"function G() {}\" +\n        \"/** @override */ \" +\n        \"G.prototype.foo = function(a, var_args, opt_b) { };\",\n        \"variable length argument must be last\");\n  }\n",
        "begin_line": 1991,
        "end_line": 2000,
        "comment": "",
        "child_ranges": [
            "(line 1992,col 5)-(line 1999,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testStaticMethodDeclaration1()",
        "snippet": "  public void testStaticMethodDeclaration1() throws Exception {\n    testTypes(\n        \"/** @constructor */ function F() { F.foo(true); }\" +\n        \"/** @param {number} x */ F.foo = function(x) {};\",\n        \"actual parameter 1 of F.foo does not match formal parameter\\n\" +\n        \"found   : boolean\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 2002,
        "end_line": 2009,
        "comment": "",
        "child_ranges": [
            "(line 2003,col 5)-(line 2008,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testStaticMethodDeclaration2()",
        "snippet": "  public void testStaticMethodDeclaration2() throws Exception {\n    testTypes(\n        \"var goog = goog || {}; function f() { goog.foo(true); }\" +\n        \"/** @param {number} x */ goog.foo = function(x) {};\",\n        \"actual parameter 1 of goog.foo does not match formal parameter\\n\" +\n        \"found   : boolean\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 2011,
        "end_line": 2018,
        "comment": "",
        "child_ranges": [
            "(line 2012,col 5)-(line 2017,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testStaticMethodDeclaration3()",
        "snippet": "  public void testStaticMethodDeclaration3() throws Exception {\n    testTypes(\n        \"var goog = goog || {}; function f() { goog.foo(true); }\" +\n        \"goog.foo = function() {};\",\n        \"Function goog.foo: called with 1 argument(s). Function requires \" +\n        \"at least 0 argument(s) and no more than 0 argument(s).\");\n  }\n",
        "begin_line": 2020,
        "end_line": 2026,
        "comment": "",
        "child_ranges": [
            "(line 2021,col 5)-(line 2025,col 66)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testDuplicateStaticMethodDecl1()",
        "snippet": "  public void testDuplicateStaticMethodDecl1() throws Exception {\n    testTypes(\n        \"var goog = goog || {};\" +\n        \"/** @param {number} x */ goog.foo = function(x) {};\" +\n        \"/** @param {number} x */ goog.foo = function(x) {};\",\n        \"variable goog.foo redefined with type function (number): undefined, \" +\n        \"original definition at [testcode]:1 \" +\n        \"with type function (number): undefined\");\n  }\n",
        "begin_line": 2028,
        "end_line": 2036,
        "comment": "",
        "child_ranges": [
            "(line 2029,col 5)-(line 2035,col 50)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testDuplicateStaticMethodDecl2()",
        "snippet": "  public void testDuplicateStaticMethodDecl2() throws Exception {\n    testTypes(\n        \"var goog = goog || {};\" +\n        \"/** @param {number} x */ goog.foo = function(x) {};\" +\n        \"/** @param {number} x \\n * @suppress {duplicate} */ \" +\n        \"goog.foo = function(x) {};\");\n  }\n",
        "begin_line": 2038,
        "end_line": 2044,
        "comment": "",
        "child_ranges": [
            "(line 2039,col 5)-(line 2043,col 38)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testDuplicateStaticMethodDecl3()",
        "snippet": "  public void testDuplicateStaticMethodDecl3() throws Exception {\n    testTypes(\n        \"var goog = goog || {};\" +\n        \"goog.foo = function(x) {};\" +\n        \"goog.foo = function(x) {};\");\n  }\n",
        "begin_line": 2046,
        "end_line": 2051,
        "comment": "",
        "child_ranges": [
            "(line 2047,col 5)-(line 2050,col 38)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testDuplicateStaticMethodDecl4()",
        "snippet": "  public void testDuplicateStaticMethodDecl4() throws Exception {\n    testTypes(\n        \"var goog = goog || {};\" +\n        \"/** @type {Function} */ goog.foo = function(x) {};\" +\n        \"goog.foo = function(x) {};\");\n  }\n",
        "begin_line": 2053,
        "end_line": 2058,
        "comment": "",
        "child_ranges": [
            "(line 2054,col 5)-(line 2057,col 38)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testDuplicateStaticMethodDecl5()",
        "snippet": "  public void testDuplicateStaticMethodDecl5() throws Exception {\n    testTypes(\n        \"var goog = goog || {};\" +\n        \"goog.foo = function(x) {};\" +\n        \"/** @return {undefined} */ goog.foo = function(x) {};\",\n        \"variable goog.foo redefined with type function (?): undefined, \" +\n        \"original definition at [testcode]:1 with type \" +\n        \"function (?): undefined\");\n  }\n",
        "begin_line": 2060,
        "end_line": 2068,
        "comment": "",
        "child_ranges": [
            "(line 2061,col 5)-(line 2067,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testDuplicateStaticPropertyDecl1()",
        "snippet": "  public void testDuplicateStaticPropertyDecl1() throws Exception {\n    testTypes(\n        \"var goog = goog || {};\" +\n        \"/** @type {Foo} */ goog.foo;\" +\n        \"/** @type {Foo} */ goog.foo;\" +\n        \"/** @constructor */ function Foo() {}\");\n  }\n",
        "begin_line": 2070,
        "end_line": 2076,
        "comment": "",
        "child_ranges": [
            "(line 2071,col 5)-(line 2075,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testDuplicateStaticPropertyDecl2()",
        "snippet": "  public void testDuplicateStaticPropertyDecl2() throws Exception {\n    testTypes(\n        \"var goog = goog || {};\" +\n        \"/** @type {Foo} */ goog.foo;\" +\n        \"/** @type {Foo} \\n * @suppress {duplicate} */ goog.foo;\" +\n        \"/** @constructor */ function Foo() {}\");\n  }\n",
        "begin_line": 2078,
        "end_line": 2084,
        "comment": "",
        "child_ranges": [
            "(line 2079,col 5)-(line 2083,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testDuplicateStaticPropertyDecl3()",
        "snippet": "  public void testDuplicateStaticPropertyDecl3() throws Exception {\n    testTypes(\n        \"var goog = goog || {};\" +\n        \"/** @type {!Foo} */ goog.foo;\" +\n        \"/** @type {string} */ goog.foo;\" +\n        \"/** @constructor */ function Foo() {}\",\n        \"variable goog.foo redefined with type string, \" +\n        \"original definition at [testcode]:1 with type Foo\");\n  }\n",
        "begin_line": 2086,
        "end_line": 2094,
        "comment": "",
        "child_ranges": [
            "(line 2087,col 5)-(line 2093,col 61)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testDuplicateStaticPropertyDecl4()",
        "snippet": "  public void testDuplicateStaticPropertyDecl4() throws Exception {\n    testTypes(\n        \"var goog = goog || {};\" +\n        \"/** @type {!Foo} */ goog.foo;\" +\n        \"/** @type {string} */ goog.foo = 'x';\" +\n        \"/** @constructor */ function Foo() {}\",\n        \"variable goog.foo redefined with type string, \" +\n        \"original definition at [testcode]:1 with type Foo\");\n  }\n",
        "begin_line": 2096,
        "end_line": 2104,
        "comment": "",
        "child_ranges": [
            "(line 2097,col 5)-(line 2103,col 61)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testDuplicateStaticPropertyDecl5()",
        "snippet": "  public void testDuplicateStaticPropertyDecl5() throws Exception {\n    testTypes(\n        \"var goog = goog || {};\" +\n        \"/** @type {!Foo} */ goog.foo;\" +\n        \"/** @type {string}\\n * @suppress {duplicate} */ goog.foo = 'x';\" +\n        \"/** @constructor */ function Foo() {}\",\n        \"variable goog.foo redefined with type string, \" +\n        \"original definition at [testcode]:1 with type Foo\");\n  }\n",
        "begin_line": 2106,
        "end_line": 2114,
        "comment": "",
        "child_ranges": [
            "(line 2107,col 5)-(line 2113,col 61)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testDuplicateStaticPropertyDecl6()",
        "snippet": "  public void testDuplicateStaticPropertyDecl6() throws Exception {\n    testTypes(\n        \"var goog = goog || {};\" +\n        \"/** @type {string} */ goog.foo = 'y';\" +\n        \"/** @type {string}\\n * @suppress {duplicate} */ goog.foo = 'x';\");\n  }\n",
        "begin_line": 2116,
        "end_line": 2121,
        "comment": "",
        "child_ranges": [
            "(line 2117,col 5)-(line 2120,col 75)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testDuplicateStaticPropertyDecl7()",
        "snippet": "  public void testDuplicateStaticPropertyDecl7() throws Exception {\n    testTypes(\n        \"var goog = goog || {};\" +\n        \"/** @param {string} x */ goog.foo;\" +\n        \"/** @type {function(string)} */ goog.foo;\");\n  }\n",
        "begin_line": 2123,
        "end_line": 2128,
        "comment": "",
        "child_ranges": [
            "(line 2124,col 5)-(line 2127,col 53)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testDuplicateStaticPropertyDecl8()",
        "snippet": "  public void testDuplicateStaticPropertyDecl8() throws Exception {\n    testTypes(\n        \"var goog = goog || {};\" +\n        \"/** @return {EventCopy} */ goog.foo;\" +\n        \"/** @constructor */ function EventCopy() {}\" +\n        \"/** @return {EventCopy} */ goog.foo;\");\n  }\n",
        "begin_line": 2130,
        "end_line": 2136,
        "comment": "",
        "child_ranges": [
            "(line 2131,col 5)-(line 2135,col 48)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testDuplicateStaticPropertyDecl9()",
        "snippet": "  public void testDuplicateStaticPropertyDecl9() throws Exception {\n    testTypes(\n        \"var goog = goog || {};\" +\n        \"/** @return {EventCopy} */ goog.foo;\" +\n        \"/** @return {EventCopy} */ goog.foo;\" +\n        \"/** @constructor */ function EventCopy() {}\");\n  }\n",
        "begin_line": 2138,
        "end_line": 2144,
        "comment": "",
        "child_ranges": [
            "(line 2139,col 5)-(line 2143,col 55)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testDuplicateLocalVarDecl()",
        "snippet": "  public void testDuplicateLocalVarDecl() throws Exception {\n    testClosureTypesMultipleWarnings(\n        \"/** @param {number} x */\\n\" +\n        \"function f(x) { /** @type {string} */ var x = ''; }\",\n        Lists.newArrayList(\n            \"variable x redefined with type string, original definition\" +\n            \" at  [testcode] :2 with type number\",\n            \"initializing variable\\n\" +\n            \"found   : string\\n\" +\n            \"required: number\"));\n  }\n",
        "begin_line": 2146,
        "end_line": 2156,
        "comment": "",
        "child_ranges": [
            "(line 2147,col 5)-(line 2155,col 33)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testStubFunctionDeclaration1()",
        "snippet": "  public void testStubFunctionDeclaration1() throws Exception {\n    testFunctionType(\n        \"/** @constructor */ function f() {};\" +\n        \"/** @param {number} x \\n * @param {string} y \\n\" +\n        \"  * @return {number} */ f.prototype.foo;\",\n        \"(new f).foo\",\n        \"function (this:f, number, string): number\");\n  }\n",
        "begin_line": 2158,
        "end_line": 2165,
        "comment": "",
        "child_ranges": [
            "(line 2159,col 5)-(line 2164,col 53)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testStubFunctionDeclaration2()",
        "snippet": "  public void testStubFunctionDeclaration2() throws Exception {\n    testExternFunctionType(\n        // externs\n        \"/** @constructor */ function f() {};\" +\n        \"/** @constructor \\n * @extends {f} */ f.subclass;\",\n        \"f.subclass\",\n        \"function (new:f.subclass): ?\");\n  }\n",
        "begin_line": 2167,
        "end_line": 2174,
        "comment": "",
        "child_ranges": [
            "(line 2168,col 5)-(line 2173,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testStubFunctionDeclaration3()",
        "snippet": "  public void testStubFunctionDeclaration3() throws Exception {\n    testFunctionType(\n        \"/** @constructor */ function f() {};\" +\n        \"/** @return {undefined} */ f.foo;\",\n        \"f.foo\",\n        \"function (): undefined\");\n  }\n",
        "begin_line": 2176,
        "end_line": 2182,
        "comment": "",
        "child_ranges": [
            "(line 2177,col 5)-(line 2181,col 34)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testStubFunctionDeclaration4()",
        "snippet": "  public void testStubFunctionDeclaration4() throws Exception {\n    testFunctionType(\n        \"/** @constructor */ function f() { \" +\n        \"  /** @return {number} */ this.foo;\" +\n        \"}\",\n        \"(new f).foo\",\n        \"function (this:f): number\");\n  }\n",
        "begin_line": 2184,
        "end_line": 2191,
        "comment": "",
        "child_ranges": [
            "(line 2185,col 5)-(line 2190,col 37)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testStubFunctionDeclaration5()",
        "snippet": "  public void testStubFunctionDeclaration5() throws Exception {\n    testFunctionType(\n        \"/** @constructor */ function f() { \" +\n        \"  /** @type {Function} */ this.foo;\" +\n        \"}\",\n        \"(new f).foo\",\n        createNullableType(U2U_CONSTRUCTOR_TYPE).toString());\n  }\n",
        "begin_line": 2193,
        "end_line": 2200,
        "comment": "",
        "child_ranges": [
            "(line 2194,col 5)-(line 2199,col 61)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testStubFunctionDeclaration6()",
        "snippet": "  public void testStubFunctionDeclaration6() throws Exception {\n    testFunctionType(\n        \"/** @constructor */ function f() {} \" +\n        \"/** @type {Function} */ f.prototype.foo;\",\n        \"(new f).foo\",\n        createNullableType(U2U_CONSTRUCTOR_TYPE).toString());\n  }\n",
        "begin_line": 2202,
        "end_line": 2208,
        "comment": "",
        "child_ranges": [
            "(line 2203,col 5)-(line 2207,col 61)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testStubFunctionDeclaration7()",
        "snippet": "  public void testStubFunctionDeclaration7() throws Exception {\n    testFunctionType(\n        \"/** @constructor */ function f() {} \" +\n        \"/** @type {Function} */ f.prototype.foo = function() {};\",\n        \"(new f).foo\",\n        createNullableType(U2U_CONSTRUCTOR_TYPE).toString());\n  }\n",
        "begin_line": 2210,
        "end_line": 2216,
        "comment": "",
        "child_ranges": [
            "(line 2211,col 5)-(line 2215,col 61)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testStubFunctionDeclaration8()",
        "snippet": "  public void testStubFunctionDeclaration8() throws Exception {\n    testFunctionType(\n        \"/** @type {Function} */ var f = function() {}; \",\n        \"f\",\n        createNullableType(U2U_CONSTRUCTOR_TYPE).toString());\n  }\n",
        "begin_line": 2218,
        "end_line": 2223,
        "comment": "",
        "child_ranges": [
            "(line 2219,col 5)-(line 2222,col 61)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testStubFunctionDeclaration9()",
        "snippet": "  public void testStubFunctionDeclaration9() throws Exception {\n    testFunctionType(\n        \"/** @type {function():number} */ var f; \",\n        \"f\",\n        \"function (): number\");\n  }\n",
        "begin_line": 2225,
        "end_line": 2230,
        "comment": "",
        "child_ranges": [
            "(line 2226,col 5)-(line 2229,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testStubFunctionDeclaration10()",
        "snippet": "  public void testStubFunctionDeclaration10() throws Exception {\n    testFunctionType(\n        \"/** @type {function(number):number} */ var f = function(x) {};\",\n        \"f\",\n        \"function (number): number\");\n  }\n",
        "begin_line": 2232,
        "end_line": 2237,
        "comment": "",
        "child_ranges": [
            "(line 2233,col 5)-(line 2236,col 37)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testNestedFunctionInference1()",
        "snippet": "  public void testNestedFunctionInference1() throws Exception {\n    String nestedAssignOfFooAndBar =\n        \"/** @constructor */ function f() {};\" +\n        \"f.prototype.foo = f.prototype.bar = function(){};\";\n    testFunctionType(nestedAssignOfFooAndBar, \"(new f).bar\",\n        \"function (this:f): undefined\");\n  }\n",
        "begin_line": 2239,
        "end_line": 2245,
        "comment": "",
        "child_ranges": [
            "(line 2240,col 5)-(line 2242,col 60)",
            "(line 2243,col 5)-(line 2244,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testFunctionType(java.lang.String, java.lang.String)",
        "snippet": "  private void testFunctionType(String functionDef, String functionType)\n      throws Exception {\n    testFunctionType(functionDef, \"f\", functionType);\n  }\n",
        "begin_line": 2251,
        "end_line": 2254,
        "comment": "\n   * Tests the type of a function definition. The function defined by\n   * {@code functionDef} should be named {@code \"f\"}.\n   ",
        "child_ranges": [
            "(line 2253,col 5)-(line 2253,col 53)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testFunctionType(java.lang.String, java.lang.String, java.lang.String)",
        "snippet": "  private void testFunctionType(String functionDef, String functionName,\n      String functionType) throws Exception {\n    // using the variable initialization check to verify the function's type\n    testTypes(\n        functionDef +\n        \"/** @type number */var a=\" + functionName + \";\",\n        \"initializing variable\\n\" +\n        \"found   : \" + functionType + \"\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 2260,
        "end_line": 2269,
        "comment": "\n   * Tests the type of a function definition. The function defined by\n   * {@code functionDef} should be named {@code functionName}.\n   ",
        "child_ranges": [
            "(line 2263,col 5)-(line 2268,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testExternFunctionType(java.lang.String, java.lang.String, java.lang.String)",
        "snippet": "  private void testExternFunctionType(String functionDef, String functionName,\n      String functionType) throws Exception {\n    testTypes(\n        functionDef,\n        \"/** @type number */var a=\" + functionName + \";\",\n        \"initializing variable\\n\" +\n        \"found   : \" + functionType + \"\\n\" +\n        \"required: number\", false);\n  }\n",
        "begin_line": 2276,
        "end_line": 2284,
        "comment": "\n   * Tests the type of a function definition in externs.\n   * The function defined by {@code functionDef} should be\n   * named {@code functionName}.\n   ",
        "child_ranges": [
            "(line 2278,col 5)-(line 2283,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypeRedefinition()",
        "snippet": "  public void testTypeRedefinition() throws Exception {\n    testTypes(\"a={};/**@enum {string}*/ a.A = {ZOR:'b'};\"\n        + \"/** @constructor */ a.A = function() {}\",\n        \"variable a.A redefined with type function (new:a.A): undefined, \" +\n        \"original definition at [testcode]:1 with type enum{a.A}\");\n  }\n",
        "begin_line": 2286,
        "end_line": 2291,
        "comment": "",
        "child_ranges": [
            "(line 2287,col 5)-(line 2290,col 67)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testIn1()",
        "snippet": "  public void testIn1() throws Exception {\n    testTypes(\"'foo' in Object\");\n  }\n",
        "begin_line": 2293,
        "end_line": 2295,
        "comment": "",
        "child_ranges": [
            "(line 2294,col 5)-(line 2294,col 33)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testIn2()",
        "snippet": "  public void testIn2() throws Exception {\n    testTypes(\"3 in Object\");\n  }\n",
        "begin_line": 2297,
        "end_line": 2299,
        "comment": "",
        "child_ranges": [
            "(line 2298,col 5)-(line 2298,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testIn3()",
        "snippet": "  public void testIn3() throws Exception {\n    testTypes(\"undefined in Object\");\n  }\n",
        "begin_line": 2301,
        "end_line": 2303,
        "comment": "",
        "child_ranges": [
            "(line 2302,col 5)-(line 2302,col 37)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testIn4()",
        "snippet": "  public void testIn4() throws Exception {\n    testTypes(\"Date in Object\",\n        \"left side of 'in'\\n\" +\n        \"found   : function (new:Date, ?, ?, ?, ?, ?, ?, ?): string\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 2305,
        "end_line": 2310,
        "comment": "",
        "child_ranges": [
            "(line 2306,col 5)-(line 2309,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testIn5()",
        "snippet": "  public void testIn5() throws Exception {\n    testTypes(\"'x' in null\",\n        \"'in' requires an object\\n\" +\n        \"found   : null\\n\" +\n        \"required: Object\");\n  }\n",
        "begin_line": 2312,
        "end_line": 2317,
        "comment": "",
        "child_ranges": [
            "(line 2313,col 5)-(line 2316,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testIn6()",
        "snippet": "  public void testIn6() throws Exception {\n    testTypes(\n        \"/** @param {number} x */\" +\n        \"function g(x) {}\" +\n        \"g(1 in {});\",\n        \"actual parameter 1 of g does not match formal parameter\\n\" +\n        \"found   : boolean\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 2319,
        "end_line": 2327,
        "comment": "",
        "child_ranges": [
            "(line 2320,col 5)-(line 2326,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testIn7()",
        "snippet": "  public void testIn7() throws Exception {\n    // Make sure we do inference in the 'in' expression.\n    testTypes(\n        \"/**\\n\" +\n        \" * @param {number} x\\n\" +\n        \" * @return {number}\\n\" +\n        \" */\\n\" +\n        \"function g(x) { return 5; }\" +\n        \"function f() {\" +\n        \"  var x = {};\" +\n        \"  x.foo = '3';\" +\n        \"  return g(x.foo) in {};\" +\n        \"}\",\n        \"actual parameter 1 of g does not match formal parameter\\n\" +\n        \"found   : string\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 2329,
        "end_line": 2345,
        "comment": "",
        "child_ranges": [
            "(line 2331,col 5)-(line 2344,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testForIn1()",
        "snippet": "  public void testForIn1() throws Exception {\n    testTypes(\n        \"/** @param {boolean} x */ function f(x) {}\" +\n        \"for (var k in {}) {\" +\n        \"  f(k);\" +\n        \"}\",\n        \"actual parameter 1 of f does not match formal parameter\\n\" +\n        \"found   : string\\n\" +\n        \"required: boolean\");\n  }\n",
        "begin_line": 2347,
        "end_line": 2356,
        "comment": "",
        "child_ranges": [
            "(line 2348,col 5)-(line 2355,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testForIn2()",
        "snippet": "  public void testForIn2() throws Exception {\n    testTypes(\n        \"/** @param {boolean} x */ function f(x) {}\" +\n        \"/** @enum {string} */ var E = {FOO: 'bar'};\" +\n        \"/** @type {Object.<E, string>} */ var obj = {};\" +\n        \"var k = null;\" +\n        \"for (k in obj) {\" +\n        \"  f(k);\" +\n        \"}\",\n        \"actual parameter 1 of f does not match formal parameter\\n\" +\n        \"found   : E.<string>\\n\" +\n        \"required: boolean\");\n  }\n",
        "begin_line": 2358,
        "end_line": 2370,
        "comment": "",
        "child_ranges": [
            "(line 2359,col 5)-(line 2369,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testForIn3()",
        "snippet": "  public void testForIn3() throws Exception {\n    testTypes(\n        \"/** @param {boolean} x */ function f(x) {}\" +\n        \"/** @type {Object.<number>} */ var obj = {};\" +\n        \"for (var k in obj) {\" +\n        \"  f(obj[k]);\" +\n        \"}\",\n        \"actual parameter 1 of f does not match formal parameter\\n\" +\n        \"found   : number\\n\" +\n        \"required: boolean\");\n  }\n",
        "begin_line": 2372,
        "end_line": 2382,
        "comment": "",
        "child_ranges": [
            "(line 2373,col 5)-(line 2381,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testForIn4()",
        "snippet": "  public void testForIn4() throws Exception {\n    testTypes(\n        \"/** @param {boolean} x */ function f(x) {}\" +\n        \"/** @enum {string} */ var E = {FOO: 'bar'};\" +\n        \"/** @type {Object.<E, Array>} */ var obj = {};\" +\n        \"for (var k in obj) {\" +\n        \"  f(obj[k]);\" +\n        \"}\",\n        \"actual parameter 1 of f does not match formal parameter\\n\" +\n        \"found   : (Array|null)\\n\" +\n        \"required: boolean\");\n  }\n",
        "begin_line": 2384,
        "end_line": 2395,
        "comment": "",
        "child_ranges": [
            "(line 2385,col 5)-(line 2394,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testForIn5()",
        "snippet": "  public void testForIn5() throws Exception {\n    testTypes(\n        \"/** @param {boolean} x */ function f(x) {}\" +\n        \"/** @constructor */ var E = function(){};\" +\n        \"/** @type {Object.<E, number>} */ var obj = {};\" +\n        \"for (var k in obj) {\" +\n        \"  f(k);\" +\n        \"}\",\n        \"actual parameter 1 of f does not match formal parameter\\n\" +\n        \"found   : string\\n\" +\n        \"required: boolean\");\n  }\n",
        "begin_line": 2397,
        "end_line": 2408,
        "comment": "",
        "child_ranges": [
            "(line 2398,col 5)-(line 2407,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testComparison2()",
        "snippet": "  public void testComparison2() throws Exception {\n    testTypes(\"/**@type number*/var a;\" +\n        \"/**@type !Date */var b;\" +\n        \"if (a!==b) {}\",\n        \"condition always evaluates to the same value\\n\" +\n        \"left : number\\n\" +\n        \"right: Date\");\n  }\n",
        "begin_line": 2420,
        "end_line": 2427,
        "comment": "",
        "child_ranges": [
            "(line 2421,col 5)-(line 2426,col 23)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testComparison3()",
        "snippet": "  public void testComparison3() throws Exception {\n    // Since null == undefined in JavaScript, this code is reasonable.\n    testTypes(\"/** @type {(Object,undefined)} */var a;\" +\n        \"var b = a == null\");\n  }\n",
        "begin_line": 2429,
        "end_line": 2433,
        "comment": "",
        "child_ranges": [
            "(line 2431,col 5)-(line 2432,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testComparison4()",
        "snippet": "  public void testComparison4() throws Exception {\n    testTypes(\"/** @type {(!Object,undefined)} */var a;\" +\n        \"/** @type {!Object} */var b;\" +\n        \"var c = a == b\");\n  }\n",
        "begin_line": 2435,
        "end_line": 2439,
        "comment": "",
        "child_ranges": [
            "(line 2436,col 5)-(line 2438,col 26)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testComparison5()",
        "snippet": "  public void testComparison5() throws Exception {\n    testTypes(\"/** @type null */var a;\" +\n        \"/** @type null */var b;\" +\n        \"a == b\",\n        \"condition always evaluates to true\\n\" +\n        \"left : null\\n\" +\n        \"right: null\");\n  }\n",
        "begin_line": 2441,
        "end_line": 2448,
        "comment": "",
        "child_ranges": [
            "(line 2442,col 5)-(line 2447,col 23)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testComparison6()",
        "snippet": "  public void testComparison6() throws Exception {\n    testTypes(\"/** @type null */var a;\" +\n        \"/** @type null */var b;\" +\n        \"a != b\",\n        \"condition always evaluates to false\\n\" +\n        \"left : null\\n\" +\n        \"right: null\");\n  }\n",
        "begin_line": 2450,
        "end_line": 2457,
        "comment": "",
        "child_ranges": [
            "(line 2451,col 5)-(line 2456,col 23)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testComparison7()",
        "snippet": "  public void testComparison7() throws Exception {\n    testTypes(\"var a;\" +\n        \"var b;\" +\n        \"a == b\",\n        \"condition always evaluates to true\\n\" +\n        \"left : undefined\\n\" +\n        \"right: undefined\");\n  }\n",
        "begin_line": 2459,
        "end_line": 2466,
        "comment": "",
        "child_ranges": [
            "(line 2460,col 5)-(line 2465,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testComparison8()",
        "snippet": "  public void testComparison8() throws Exception {\n    testTypes(\"/** @type {Array.<string>} */ var a = [];\" +\n        \"a[0] == null || a[1] == undefined\");\n  }\n",
        "begin_line": 2468,
        "end_line": 2471,
        "comment": "",
        "child_ranges": [
            "(line 2469,col 5)-(line 2470,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testComparison9()",
        "snippet": "  public void testComparison9() throws Exception {\n    testTypes(\"/** @type {Array.<undefined>} */ var a = [];\" +\n        \"a[0] == null\",\n        \"condition always evaluates to true\\n\" +\n        \"left : undefined\\n\" +\n        \"right: null\");\n  }\n",
        "begin_line": 2473,
        "end_line": 2479,
        "comment": "",
        "child_ranges": [
            "(line 2474,col 5)-(line 2478,col 23)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testComparison10()",
        "snippet": "  public void testComparison10() throws Exception {\n    testTypes(\"/** @type {Array.<undefined>} */ var a = [];\" +\n        \"a[0] === null\");\n  }\n",
        "begin_line": 2481,
        "end_line": 2484,
        "comment": "",
        "child_ranges": [
            "(line 2482,col 5)-(line 2483,col 25)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testComparison11()",
        "snippet": "  public void testComparison11() throws Exception {\n    testTypes(\n        \"(function(){}) == 'x'\",\n        \"condition always evaluates to false\\n\" +\n        \"left : function (): undefined\\n\" +\n        \"right: string\");\n  }\n",
        "begin_line": 2486,
        "end_line": 2492,
        "comment": "",
        "child_ranges": [
            "(line 2487,col 5)-(line 2491,col 25)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testComparison12()",
        "snippet": "  public void testComparison12() throws Exception {\n    testTypes(\n        \"(function(){}) == 3\",\n        \"condition always evaluates to false\\n\" +\n        \"left : function (): undefined\\n\" +\n        \"right: number\");\n  }\n",
        "begin_line": 2494,
        "end_line": 2500,
        "comment": "",
        "child_ranges": [
            "(line 2495,col 5)-(line 2499,col 25)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testComparison13()",
        "snippet": "  public void testComparison13() throws Exception {\n    testTypes(\n        \"(function(){}) == false\",\n        \"condition always evaluates to false\\n\" +\n        \"left : function (): undefined\\n\" +\n        \"right: boolean\");\n  }\n",
        "begin_line": 2502,
        "end_line": 2508,
        "comment": "",
        "child_ranges": [
            "(line 2503,col 5)-(line 2507,col 26)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testDeleteOperator1()",
        "snippet": "  public void testDeleteOperator1() throws Exception {\n    testTypes(\n        \"var x = {};\" +\n        \"/** @return {string} */ function f() { return delete x['a']; }\",\n        \"inconsistent return type\\n\" +\n        \"found   : boolean\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 2510,
        "end_line": 2517,
        "comment": "",
        "child_ranges": [
            "(line 2511,col 5)-(line 2516,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testDeleteOperator2()",
        "snippet": "  public void testDeleteOperator2() throws Exception {\n    testTypes(\n        \"var obj = {};\" +\n        \"/** \\n\" +\n        \" * @param {string} x\\n\" +\n        \" * @return {Object} */ function f(x) { return obj; }\" +\n        \"/** @param {?number} x */ function g(x) {\" +\n        \"  if (x) { delete f(x)['a']; }\" +\n        \"}\",\n        \"actual parameter 1 of f does not match formal parameter\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 2519,
        "end_line": 2531,
        "comment": "",
        "child_ranges": [
            "(line 2520,col 5)-(line 2530,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testEnumStaticMethod1()",
        "snippet": "  public void testEnumStaticMethod1() throws Exception {\n    testTypes(\n        \"/** @enum */ var Foo = {AAA: 1};\" +\n        \"/** @param {number} x */ Foo.method = function(x) {};\" +\n        \"Foo.method(true);\",\n        \"actual parameter 1 of Foo.method does not match formal parameter\\n\" +\n        \"found   : boolean\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 2533,
        "end_line": 2541,
        "comment": "",
        "child_ranges": [
            "(line 2534,col 5)-(line 2540,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testEnumStaticMethod2()",
        "snippet": "  public void testEnumStaticMethod2() throws Exception {\n    testTypes(\n        \"/** @enum */ var Foo = {AAA: 1};\" +\n        \"/** @param {number} x */ Foo.method = function(x) {};\" +\n        \"function f() { Foo.method(true); }\",\n        \"actual parameter 1 of Foo.method does not match formal parameter\\n\" +\n        \"found   : boolean\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 2543,
        "end_line": 2551,
        "comment": "",
        "child_ranges": [
            "(line 2544,col 5)-(line 2550,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testEnum1()",
        "snippet": "  public void testEnum1() throws Exception {\n    testTypes(\"/**@enum*/var a={BB:1,CC:2};\\n\" +\n        \"/**@type {a}*/var d;d=a.BB;\");\n  }\n",
        "begin_line": 2553,
        "end_line": 2556,
        "comment": "",
        "child_ranges": [
            "(line 2554,col 5)-(line 2555,col 39)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testEnum2()",
        "snippet": "  public void testEnum2() throws Exception {\n    testTypes(\"/**@enum*/var a={b:1}\",\n        \"enum key b must be a syntactic constant\");\n  }\n",
        "begin_line": 2558,
        "end_line": 2561,
        "comment": "",
        "child_ranges": [
            "(line 2559,col 5)-(line 2560,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testEnum3()",
        "snippet": "  public void testEnum3() throws Exception {\n    testTypes(\"/**@enum*/var a={BB:1,BB:2}\",\n        \"enum element BB already defined\", true);\n  }\n",
        "begin_line": 2563,
        "end_line": 2566,
        "comment": "",
        "child_ranges": [
            "(line 2564,col 5)-(line 2565,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testEnum4()",
        "snippet": "  public void testEnum4() throws Exception {\n    testTypes(\"/**@enum*/var a={BB:'string'}\",\n        \"element type must match enum's type\\n\" +\n        \"found   : string\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 2568,
        "end_line": 2573,
        "comment": "",
        "child_ranges": [
            "(line 2569,col 5)-(line 2572,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testEnum5()",
        "snippet": "  public void testEnum5() throws Exception {\n    testTypes(\"/**@enum {String}*/var a={BB:'string'}\",\n        \"element type must match enum's type\\n\" +\n        \"found   : string\\n\" +\n        \"required: (String|null)\");\n  }\n",
        "begin_line": 2575,
        "end_line": 2580,
        "comment": "",
        "child_ranges": [
            "(line 2576,col 5)-(line 2579,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testEnum6()",
        "snippet": "  public void testEnum6() throws Exception {\n    testTypes(\"/**@enum*/var a={BB:1,CC:2};\\n/**@type {!Array}*/var d;d=a.BB;\",\n        \"assignment\\n\" +\n        \"found   : a.<number>\\n\" +\n        \"required: Array\");\n  }\n",
        "begin_line": 2582,
        "end_line": 2587,
        "comment": "",
        "child_ranges": [
            "(line 2583,col 5)-(line 2586,col 27)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testEnum7()",
        "snippet": "  public void testEnum7() throws Exception {\n    testTypes(\"/** @enum */var a={AA:1,BB:2,CC:3};\" +\n        \"/** @type a */var b=a.D;\",\n        \"element D does not exist on this enum\");\n  }\n",
        "begin_line": 2589,
        "end_line": 2593,
        "comment": "",
        "child_ranges": [
            "(line 2590,col 5)-(line 2592,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testEnum8()",
        "snippet": "  public void testEnum8() throws Exception {\n    testTypes(\"/** @enum */var a=8;\",\n        \"enum initializer must be an object literal or an enum\");\n  }\n",
        "begin_line": 2595,
        "end_line": 2598,
        "comment": "",
        "child_ranges": [
            "(line 2596,col 5)-(line 2597,col 65)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testEnum9()",
        "snippet": "  public void testEnum9() throws Exception {\n    testTypes(\n        \"var goog = {};\" +\n        \"/** @enum */goog.a=8;\",\n        \"enum initializer must be an object literal or an enum\");\n  }\n",
        "begin_line": 2600,
        "end_line": 2605,
        "comment": "",
        "child_ranges": [
            "(line 2601,col 5)-(line 2604,col 65)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testEnum10()",
        "snippet": "  public void testEnum10() throws Exception {\n    testTypes(\n        \"/** @enum {number} */\" +\n        \"goog.K = { A : 3 };\");\n  }\n",
        "begin_line": 2607,
        "end_line": 2611,
        "comment": "",
        "child_ranges": [
            "(line 2608,col 5)-(line 2610,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testEnum11()",
        "snippet": "  public void testEnum11() throws Exception {\n    testTypes(\n        \"/** @enum {number} */\" +\n        \"goog.K = { 502 : 3 };\");\n  }\n",
        "begin_line": 2613,
        "end_line": 2617,
        "comment": "",
        "child_ranges": [
            "(line 2614,col 5)-(line 2616,col 33)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testEnum12()",
        "snippet": "  public void testEnum12() throws Exception {\n    testTypes(\n        \"/** @enum {number} */ var a = {};\" +\n        \"/** @enum */ var b = a;\");\n  }\n",
        "begin_line": 2619,
        "end_line": 2623,
        "comment": "",
        "child_ranges": [
            "(line 2620,col 5)-(line 2622,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testEnum13()",
        "snippet": "  public void testEnum13() throws Exception {\n    testTypes(\n        \"/** @enum {number} */ var a = {};\" +\n        \"/** @enum {string} */ var b = a;\",\n        \"incompatible enum element types\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 2625,
        "end_line": 2632,
        "comment": "",
        "child_ranges": [
            "(line 2626,col 5)-(line 2631,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testEnum14()",
        "snippet": "  public void testEnum14() throws Exception {\n    testTypes(\n        \"/** @enum {number} */ var a = {FOO:5};\" +\n        \"/** @enum */ var b = a;\" +\n        \"var c = b.FOO;\");\n  }\n",
        "begin_line": 2634,
        "end_line": 2639,
        "comment": "",
        "child_ranges": [
            "(line 2635,col 5)-(line 2638,col 26)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testEnum15()",
        "snippet": "  public void testEnum15() throws Exception {\n    testTypes(\n        \"/** @enum {number} */ var a = {FOO:5};\" +\n        \"/** @enum */ var b = a;\" +\n        \"var c = b.BAR;\",\n        \"element BAR does not exist on this enum\");\n  }\n",
        "begin_line": 2641,
        "end_line": 2647,
        "comment": "",
        "child_ranges": [
            "(line 2642,col 5)-(line 2646,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testEnum16()",
        "snippet": "  public void testEnum16() throws Exception {\n    testTypes(\"var goog = {};\" +\n        \"/**@enum*/goog.a={BB:1,BB:2}\",\n        \"enum element BB already defined\", true);\n  }\n",
        "begin_line": 2649,
        "end_line": 2653,
        "comment": "",
        "child_ranges": [
            "(line 2650,col 5)-(line 2652,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testEnum17()",
        "snippet": "  public void testEnum17() throws Exception {\n    testTypes(\"var goog = {};\" +\n        \"/**@enum*/goog.a={BB:'string'}\",\n        \"element type must match enum's type\\n\" +\n        \"found   : string\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 2655,
        "end_line": 2661,
        "comment": "",
        "child_ranges": [
            "(line 2656,col 5)-(line 2660,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testEnum18()",
        "snippet": "  public void testEnum18() throws Exception {\n    testTypes(\"/**@enum*/ var E = {A: 1, B: 2};\" +\n        \"/** @param {!E} x\\n@return {number} */\\n\" +\n        \"var f = function(x) { return x; };\");\n  }\n",
        "begin_line": 2663,
        "end_line": 2667,
        "comment": "",
        "child_ranges": [
            "(line 2664,col 5)-(line 2666,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testEnum19()",
        "snippet": "  public void testEnum19() throws Exception {\n    testTypes(\"/**@enum*/ var E = {A: 1, B: 2};\" +\n        \"/** @param {number} x\\n@return {!E} */\\n\" +\n        \"var f = function(x) { return x; };\",\n        \"inconsistent return type\\n\" +\n        \"found   : number\\n\" +\n        \"required: E.<number>\");\n  }\n",
        "begin_line": 2669,
        "end_line": 2676,
        "comment": "",
        "child_ranges": [
            "(line 2670,col 5)-(line 2675,col 32)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testEnum20()",
        "snippet": "  public void testEnum20() throws Exception {\n    testTypes(\"/**@enum*/ var E = {A: 1, B: 2}; var x = []; x[E.A] = 0;\");\n  }\n",
        "begin_line": 2678,
        "end_line": 2680,
        "comment": "",
        "child_ranges": [
            "(line 2679,col 5)-(line 2679,col 74)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testEnum21()",
        "snippet": "  public void testEnum21() throws Exception {\n    Node n = parseAndTypeCheck(\n        \"/** @enum {string} */ var E = {A : 'a', B : 'b'};\\n\" +\n        \"/** @param {!E} x\\n@return {!E} */ function f(x) { return x; }\");\n    Node nodeX = n.getLastChild().getLastChild().getLastChild().getLastChild();\n    JSType typeE = nodeX.getJSType();\n    assertFalse(typeE.isObject());\n    assertFalse(typeE.isNullable());\n  }\n",
        "begin_line": 2682,
        "end_line": 2690,
        "comment": "",
        "child_ranges": [
            "(line 2683,col 5)-(line 2685,col 74)",
            "(line 2686,col 5)-(line 2686,col 79)",
            "(line 2687,col 5)-(line 2687,col 37)",
            "(line 2688,col 5)-(line 2688,col 34)",
            "(line 2689,col 5)-(line 2689,col 36)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testEnum22()",
        "snippet": "  public void testEnum22() throws Exception {\n    testTypes(\"/**@enum*/ var E = {A: 1, B: 2};\" +\n        \"/** @param {E} x \\n* @return {number} */ function f(x) {return x}\");\n  }\n",
        "begin_line": 2692,
        "end_line": 2695,
        "comment": "",
        "child_ranges": [
            "(line 2693,col 5)-(line 2694,col 77)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testEnum23()",
        "snippet": "  public void testEnum23() throws Exception {\n    testTypes(\"/**@enum*/ var E = {A: 1, B: 2};\" +\n        \"/** @param {E} x \\n* @return {string} */ function f(x) {return x}\",\n        \"inconsistent return type\\n\" +\n        \"found   : E.<number>\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 2697,
        "end_line": 2703,
        "comment": "",
        "child_ranges": [
            "(line 2698,col 5)-(line 2702,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testEnum24()",
        "snippet": "  public void testEnum24() throws Exception {\n    testTypes(\"/**@enum {Object} */ var E = {A: {}};\" +\n        \"/** @param {E} x \\n* @return {!Object} */ function f(x) {return x}\",\n        \"inconsistent return type\\n\" +\n        \"found   : E.<(Object|null)>\\n\" +\n        \"required: Object\");\n  }\n",
        "begin_line": 2705,
        "end_line": 2711,
        "comment": "",
        "child_ranges": [
            "(line 2706,col 5)-(line 2710,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testEnum25()",
        "snippet": "  public void testEnum25() throws Exception {\n    testTypes(\"/**@enum {!Object} */ var E = {A: {}};\" +\n        \"/** @param {E} x \\n* @return {!Object} */ function f(x) {return x}\");\n  }\n",
        "begin_line": 2713,
        "end_line": 2716,
        "comment": "",
        "child_ranges": [
            "(line 2714,col 5)-(line 2715,col 78)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testEnum26()",
        "snippet": "  public void testEnum26() throws Exception {\n    testTypes(\"var a = {}; /**@enum*/ a.B = {A: 1, B: 2};\" +\n        \"/** @param {a.B} x \\n* @return {number} */ function f(x) {return x}\");\n  }\n",
        "begin_line": 2718,
        "end_line": 2721,
        "comment": "",
        "child_ranges": [
            "(line 2719,col 5)-(line 2720,col 79)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testEnum27()",
        "snippet": "  public void testEnum27() throws Exception {\n    // x is unknown\n    testTypes(\"/** @enum */ var A = {B: 1, C: 2}; \" +\n        \"function f(x) { return A == x; }\");\n  }\n",
        "begin_line": 2723,
        "end_line": 2727,
        "comment": "",
        "child_ranges": [
            "(line 2725,col 5)-(line 2726,col 44)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testEnum28()",
        "snippet": "  public void testEnum28() throws Exception {\n    // x is unknown\n    testTypes(\"/** @enum */ var A = {B: 1, C: 2}; \" +\n        \"function f(x) { return A.B == x; }\");\n  }\n",
        "begin_line": 2729,
        "end_line": 2733,
        "comment": "",
        "child_ranges": [
            "(line 2731,col 5)-(line 2732,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testEnum29()",
        "snippet": "  public void testEnum29() throws Exception {\n    testTypes(\"/** @enum */ var A = {B: 1, C: 2}; \" +\n        \"/** @return {number} */ function f() { return A; }\",\n        \"inconsistent return type\\n\" +\n        \"found   : enum{A}\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 2735,
        "end_line": 2741,
        "comment": "",
        "child_ranges": [
            "(line 2736,col 5)-(line 2740,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testEnum30()",
        "snippet": "  public void testEnum30() throws Exception {\n    testTypes(\"/** @enum */ var A = {B: 1, C: 2}; \" +\n        \"/** @return {number} */ function f() { return A.B; }\");\n  }\n",
        "begin_line": 2743,
        "end_line": 2746,
        "comment": "",
        "child_ranges": [
            "(line 2744,col 5)-(line 2745,col 64)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testEnum31()",
        "snippet": "  public void testEnum31() throws Exception {\n    testTypes(\"/** @enum */ var A = {B: 1, C: 2}; \" +\n        \"/** @return {A} */ function f() { return A; }\",\n        \"inconsistent return type\\n\" +\n        \"found   : enum{A}\\n\" +\n        \"required: A.<number>\");\n  }\n",
        "begin_line": 2748,
        "end_line": 2754,
        "comment": "",
        "child_ranges": [
            "(line 2749,col 5)-(line 2753,col 32)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testEnum32()",
        "snippet": "  public void testEnum32() throws Exception {\n    testTypes(\"/** @enum */ var A = {B: 1, C: 2}; \" +\n        \"/** @return {A} */ function f() { return A.B; }\");\n  }\n",
        "begin_line": 2756,
        "end_line": 2759,
        "comment": "",
        "child_ranges": [
            "(line 2757,col 5)-(line 2758,col 59)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testEnum34()",
        "snippet": "  public void testEnum34() throws Exception {\n    testTypes(\"/** @enum */ var A = {B: 1, C: 2}; \" +\n        \"/** @param {number} x */ function f(x) { return x == A.B; }\");\n  }\n",
        "begin_line": 2761,
        "end_line": 2764,
        "comment": "",
        "child_ranges": [
            "(line 2762,col 5)-(line 2763,col 71)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testEnum35()",
        "snippet": "  public void testEnum35() throws Exception {\n    testTypes(\"var a = a || {}; /** @enum */ a.b = {C: 1, D: 2};\" +\n              \"/** @return {a.b} */ function f() { return a.b.C; }\");\n  }\n",
        "begin_line": 2766,
        "end_line": 2769,
        "comment": "",
        "child_ranges": [
            "(line 2767,col 5)-(line 2768,col 69)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testEnum36()",
        "snippet": "  public void testEnum36() throws Exception {\n    testTypes(\"var a = a || {}; /** @enum */ a.b = {C: 1, D: 2};\" +\n              \"/** @return {!a.b} */ function f() { return 1; }\",\n              \"inconsistent return type\\n\" +\n              \"found   : number\\n\" +\n              \"required: a.b.<number>\");\n  }\n",
        "begin_line": 2771,
        "end_line": 2777,
        "comment": "",
        "child_ranges": [
            "(line 2772,col 5)-(line 2776,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testEnum37()",
        "snippet": "  public void testEnum37() throws Exception {\n    testTypes(\n        \"var goog = goog || {};\" +\n        \"/** @enum {number} */ goog.a = {};\" +\n        \"/** @enum */ var b = goog.a;\");\n  }\n",
        "begin_line": 2779,
        "end_line": 2784,
        "comment": "",
        "child_ranges": [
            "(line 2780,col 5)-(line 2783,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testEnum38()",
        "snippet": "  public void testEnum38() throws Exception {\n    testTypes(\n        \"/** @enum {MyEnum} */ var MyEnum = {};\" +\n        \"/** @param {MyEnum} x */ function f(x) {}\",\n        \"Parse error. Cycle detected in inheritance chain \" +\n        \"of type MyEnum\");\n  }\n",
        "begin_line": 2786,
        "end_line": 2792,
        "comment": "",
        "child_ranges": [
            "(line 2787,col 5)-(line 2791,col 26)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testEnum39()",
        "snippet": "  public void testEnum39() throws Exception {\n    testTypes(\n        \"/** @enum {Number} */ var MyEnum = {FOO: new Number(1)};\" +\n        \"/** @param {MyEnum} x \\n * @return {number} */\" +\n        \"function f(x) { return x == MyEnum.FOO && MyEnum.FOO == x; }\",\n        \"inconsistent return type\\n\" +\n        \"found   : boolean\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 2794,
        "end_line": 2802,
        "comment": "",
        "child_ranges": [
            "(line 2795,col 5)-(line 2801,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testEnum40()",
        "snippet": "  public void testEnum40() throws Exception {\n    testTypes(\n        \"/** @enum {Number} */ var MyEnum = {FOO: new Number(1)};\" +\n        \"/** @param {number} x \\n * @return {number} */\" +\n        \"function f(x) { return x == MyEnum.FOO && MyEnum.FOO == x; }\",\n        \"inconsistent return type\\n\" +\n        \"found   : boolean\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 2804,
        "end_line": 2812,
        "comment": "",
        "child_ranges": [
            "(line 2805,col 5)-(line 2811,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testEnum41()",
        "snippet": "  public void testEnum41() throws Exception {\n    testTypes(\n        \"/** @enum {number} */ var MyEnum = {/** @const */ FOO: 1};\" +\n        \"/** @return {string} */\" +\n        \"function f() { return MyEnum.FOO; }\",\n        \"inconsistent return type\\n\" +\n        \"found   : MyEnum.<number>\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 2814,
        "end_line": 2822,
        "comment": "",
        "child_ranges": [
            "(line 2815,col 5)-(line 2821,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testAliasedEnum1()",
        "snippet": "  public void testAliasedEnum1() throws Exception {\n    testTypes(\n        \"/** @enum */ var YourEnum = {FOO: 3};\" +\n        \"/** @enum */ var MyEnum = YourEnum;\" +\n        \"/** @param {MyEnum} x */ function f(x) {} f(MyEnum.FOO);\");\n  }\n",
        "begin_line": 2824,
        "end_line": 2829,
        "comment": "",
        "child_ranges": [
            "(line 2825,col 5)-(line 2828,col 68)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testAliasedEnum2()",
        "snippet": "  public void testAliasedEnum2() throws Exception {\n    testTypes(\n        \"/** @enum */ var YourEnum = {FOO: 3};\" +\n        \"/** @enum */ var MyEnum = YourEnum;\" +\n        \"/** @param {YourEnum} x */ function f(x) {} f(MyEnum.FOO);\");\n  }\n",
        "begin_line": 2831,
        "end_line": 2836,
        "comment": "",
        "child_ranges": [
            "(line 2832,col 5)-(line 2835,col 70)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testAliasedEnum3()",
        "snippet": "  public void testAliasedEnum3() throws Exception {\n    testTypes(\n        \"/** @enum */ var YourEnum = {FOO: 3};\" +\n        \"/** @enum */ var MyEnum = YourEnum;\" +\n        \"/** @param {MyEnum} x */ function f(x) {} f(YourEnum.FOO);\");\n  }\n",
        "begin_line": 2838,
        "end_line": 2843,
        "comment": "",
        "child_ranges": [
            "(line 2839,col 5)-(line 2842,col 70)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testAliasedEnum4()",
        "snippet": "  public void testAliasedEnum4() throws Exception {\n    testTypes(\n        \"/** @enum */ var YourEnum = {FOO: 3};\" +\n        \"/** @enum */ var MyEnum = YourEnum;\" +\n        \"/** @param {YourEnum} x */ function f(x) {} f(YourEnum.FOO);\");\n  }\n",
        "begin_line": 2845,
        "end_line": 2850,
        "comment": "",
        "child_ranges": [
            "(line 2846,col 5)-(line 2849,col 72)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testAliasedEnum5()",
        "snippet": "  public void testAliasedEnum5() throws Exception {\n    testTypes(\n        \"/** @enum */ var YourEnum = {FOO: 3};\" +\n        \"/** @enum */ var MyEnum = YourEnum;\" +\n        \"/** @param {string} x */ function f(x) {} f(MyEnum.FOO);\",\n        \"actual parameter 1 of f does not match formal parameter\\n\" +\n        \"found   : YourEnum.<number>\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 2852,
        "end_line": 2860,
        "comment": "",
        "child_ranges": [
            "(line 2853,col 5)-(line 2859,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBackwardsEnumUse1()",
        "snippet": "  public void testBackwardsEnumUse1() throws Exception {\n    testTypes(\n        \"/** @return {string} */ function f() { return MyEnum.FOO; }\" +\n        \"/** @enum {string} */ var MyEnum = {FOO: 'x'};\");\n  }\n",
        "begin_line": 2862,
        "end_line": 2866,
        "comment": "",
        "child_ranges": [
            "(line 2863,col 5)-(line 2865,col 58)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBackwardsEnumUse2()",
        "snippet": "  public void testBackwardsEnumUse2() throws Exception {\n    testTypes(\n        \"/** @return {number} */ function f() { return MyEnum.FOO; }\" +\n        \"/** @enum {string} */ var MyEnum = {FOO: 'x'};\",\n        \"inconsistent return type\\n\" +\n        \"found   : MyEnum.<string>\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 2868,
        "end_line": 2875,
        "comment": "",
        "child_ranges": [
            "(line 2869,col 5)-(line 2874,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBackwardsEnumUse3()",
        "snippet": "  public void testBackwardsEnumUse3() throws Exception {\n    testTypes(\n        \"/** @return {string} */ function f() { return MyEnum.FOO; }\" +\n        \"/** @enum {string} */ var YourEnum = {FOO: 'x'};\" +\n        \"/** @enum {string} */ var MyEnum = YourEnum;\");\n  }\n",
        "begin_line": 2877,
        "end_line": 2882,
        "comment": "",
        "child_ranges": [
            "(line 2878,col 5)-(line 2881,col 56)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBackwardsEnumUse4()",
        "snippet": "  public void testBackwardsEnumUse4() throws Exception {\n    testTypes(\n        \"/** @return {number} */ function f() { return MyEnum.FOO; }\" +\n        \"/** @enum {string} */ var YourEnum = {FOO: 'x'};\" +\n        \"/** @enum {string} */ var MyEnum = YourEnum;\",\n        \"inconsistent return type\\n\" +\n        \"found   : YourEnum.<string>\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 2884,
        "end_line": 2892,
        "comment": "",
        "child_ranges": [
            "(line 2885,col 5)-(line 2891,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBackwardsEnumUse5()",
        "snippet": "  public void testBackwardsEnumUse5() throws Exception {\n    testTypes(\n        \"/** @return {string} */ function f() { return MyEnum.BAR; }\" +\n        \"/** @enum {string} */ var YourEnum = {FOO: 'x'};\" +\n        \"/** @enum {string} */ var MyEnum = YourEnum;\",\n        \"element BAR does not exist on this enum\");\n  }\n",
        "begin_line": 2894,
        "end_line": 2900,
        "comment": "",
        "child_ranges": [
            "(line 2895,col 5)-(line 2899,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBackwardsTypedefUse1()",
        "snippet": "  public void testBackwardsTypedefUse1() throws Exception {\n    testTypes(\n        \"/** @this {MyTypedef} */ function f() {}\" +\n        \"/** @typedef {string} */ var MyTypedef;\",\n        \"@this type of a function must be an object\\n\" +\n        \"Actual type: string\");\n  }\n",
        "begin_line": 2902,
        "end_line": 2908,
        "comment": "",
        "child_ranges": [
            "(line 2903,col 5)-(line 2907,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBackwardsTypedefUse2()",
        "snippet": "  public void testBackwardsTypedefUse2() throws Exception {\n    testTypes(\n        \"/** @this {MyTypedef} */ function f() {}\" +\n        \"/** @typedef {!(Date|Array)} */ var MyTypedef;\");\n  }\n",
        "begin_line": 2910,
        "end_line": 2914,
        "comment": "",
        "child_ranges": [
            "(line 2911,col 5)-(line 2913,col 58)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBackwardsTypedefUse3()",
        "snippet": "  public void testBackwardsTypedefUse3() throws Exception {\n    testTypes(\n        \"/** @this {MyTypedef} */ function f() {}\" +\n        \"/** @typedef {(Date|string)} */ var MyTypedef;\",\n        \"@this type of a function must be an object\\n\" +\n        \"Actual type: (Date|null|string)\");\n  }\n",
        "begin_line": 2916,
        "end_line": 2922,
        "comment": "",
        "child_ranges": [
            "(line 2917,col 5)-(line 2921,col 43)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBackwardsTypedefUse4()",
        "snippet": "  public void testBackwardsTypedefUse4() throws Exception {\n    testTypes(\n        \"/** @return {MyTypedef} */ function f() { return null; }\" +\n        \"/** @typedef {string} */ var MyTypedef;\",\n        \"inconsistent return type\\n\" +\n        \"found   : null\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 2924,
        "end_line": 2931,
        "comment": "",
        "child_ranges": [
            "(line 2925,col 5)-(line 2930,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBackwardsTypedefUse5()",
        "snippet": "  public void testBackwardsTypedefUse5() throws Exception {\n    testTypes(\n        \"/** @return {MyTypedef} */ function f() { return null; }\" +\n        \"/** @type {string} */ var MyTypedef = goog.typedef;\",\n        \"inconsistent return type\\n\" +\n        \"found   : null\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 2933,
        "end_line": 2940,
        "comment": "",
        "child_ranges": [
            "(line 2934,col 5)-(line 2939,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBackwardsTypedefUse6()",
        "snippet": "  public void testBackwardsTypedefUse6() throws Exception {\n    testTypes(\n        \"/** @return {goog.MyTypedef} */ function f() { return null; }\" +\n        \"var goog = {};\" +\n        \"/** @typedef {string} */ goog.MyTypedef;\",\n        \"inconsistent return type\\n\" +\n        \"found   : null\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 2942,
        "end_line": 2950,
        "comment": "",
        "child_ranges": [
            "(line 2943,col 5)-(line 2949,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBackwardsTypedefUse7()",
        "snippet": "  public void testBackwardsTypedefUse7() throws Exception {\n    testTypes(\n        \"/** @return {goog.MyTypedef} */ function f() { return null; }\" +\n        \"var goog = {};\" +\n        \"/** @typedef {Object} */ goog.MyTypedef;\");\n  }\n",
        "begin_line": 2952,
        "end_line": 2957,
        "comment": "",
        "child_ranges": [
            "(line 2953,col 5)-(line 2956,col 52)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBackwardsTypedefUse8()",
        "snippet": "  public void testBackwardsTypedefUse8() throws Exception {\n    // Tehnically, this isn't quite right, because the JS runtime\n    // will coerce null -> the global object. But we'll punt on that for now.\n    testTypes(\n        \"/** @param {!Array} x */ function g(x) {}\" +\n        \"/** @this {goog.MyTypedef} */ function f() { g(this); }\" +\n        \"var goog = {};\" +\n        \"/** @typedef {(Array|null|undefined)} */ goog.MyTypedef;\");\n  }\n",
        "begin_line": 2959,
        "end_line": 2967,
        "comment": "",
        "child_ranges": [
            "(line 2962,col 5)-(line 2966,col 68)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBackwardsTypedefUse9()",
        "snippet": "  public void testBackwardsTypedefUse9() throws Exception {\n    testTypes(\n        \"/** @param {!Array} x */ function g(x) {}\" +\n        \"/** @this {goog.MyTypedef} */ function f() { g(this); }\" +\n        \"var goog = {};\" +\n        \"/** @typedef {(Error|null|undefined)} */ goog.MyTypedef;\",\n        \"actual parameter 1 of g does not match formal parameter\\n\" +\n        \"found   : Error\\n\" +\n        \"required: Array\");\n  }\n",
        "begin_line": 2969,
        "end_line": 2978,
        "comment": "",
        "child_ranges": [
            "(line 2970,col 5)-(line 2977,col 27)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBackwardsConstructor1()",
        "snippet": "  public void testBackwardsConstructor1() throws Exception {\n    testTypes(\n        \"function f() { (new Foo(true)); }\" +\n        \"/** \\n * @constructor \\n * @param {number} x */\" +\n        \"var Foo = function(x) {};\",\n        \"actual parameter 1 of Foo does not match formal parameter\\n\" +\n        \"found   : boolean\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 2980,
        "end_line": 2988,
        "comment": "",
        "child_ranges": [
            "(line 2981,col 5)-(line 2987,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBackwardsConstructor2()",
        "snippet": "  public void testBackwardsConstructor2() throws Exception {\n    testTypes(\n        \"function f() { (new Foo(true)); }\" +\n        \"/** \\n * @constructor \\n * @param {number} x */\" +\n        \"var YourFoo = function(x) {};\" +\n        \"/** \\n * @constructor \\n * @param {number} x */\" +\n        \"var Foo = YourFoo;\",\n        \"actual parameter 1 of Foo does not match formal parameter\\n\" +\n        \"found   : boolean\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 2990,
        "end_line": 3000,
        "comment": "",
        "child_ranges": [
            "(line 2991,col 5)-(line 2999,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testMinimalConstructorAnnotation()",
        "snippet": "  public void testMinimalConstructorAnnotation() throws Exception {\n    testTypes(\"/** @constructor */function Foo(){}\");\n  }\n",
        "begin_line": 3002,
        "end_line": 3004,
        "comment": "",
        "child_ranges": [
            "(line 3003,col 5)-(line 3003,col 53)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testGoodExtends1()",
        "snippet": "  public void testGoodExtends1() throws Exception {\n    // A minimal @extends example\n    testTypes(\"/** @constructor */function base() {}\\n\" +\n        \"/** @constructor\\n * @extends {base} */function derived() {}\\n\");\n  }\n",
        "begin_line": 3006,
        "end_line": 3010,
        "comment": "",
        "child_ranges": [
            "(line 3008,col 5)-(line 3009,col 74)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testGoodExtends2()",
        "snippet": "  public void testGoodExtends2() throws Exception {\n    testTypes(\"/** @constructor\\n * @extends base */function derived() {}\\n\" +\n        \"/** @constructor */function base() {}\\n\");\n  }\n",
        "begin_line": 3012,
        "end_line": 3015,
        "comment": "",
        "child_ranges": [
            "(line 3013,col 5)-(line 3014,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testGoodExtends3()",
        "snippet": "  public void testGoodExtends3() throws Exception {\n    testTypes(\"/** @constructor\\n * @extends {Object} */function base() {}\\n\" +\n        \"/** @constructor\\n * @extends {base} */function derived() {}\\n\");\n  }\n",
        "begin_line": 3017,
        "end_line": 3020,
        "comment": "",
        "child_ranges": [
            "(line 3018,col 5)-(line 3019,col 74)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testGoodExtends4()",
        "snippet": "  public void testGoodExtends4() throws Exception {\n    // Ensure that @extends actually sets the base type of a constructor\n    // correctly. Because this isn't part of the human-readable Function\n    // definition, we need to crawl the prototype chain (eww).\n    Node n = parseAndTypeCheck(\n        \"var goog = {};\\n\" +\n        \"/** @constructor */goog.Base = function(){};\\n\" +\n        \"/** @constructor\\n\" +\n        \"  * @extends {goog.Base} */goog.Derived = function(){};\\n\");\n    Node subTypeName = n.getLastChild().getLastChild().getFirstChild();\n    assertEquals(\"goog.Derived\", subTypeName.getQualifiedName());\n\n    FunctionType subCtorType =\n        (FunctionType) subTypeName.getNext().getJSType();\n    assertEquals(\"goog.Derived\", subCtorType.getInstanceType().toString());\n\n    JSType superType = subCtorType.getPrototype().getImplicitPrototype();\n    assertEquals(\"goog.Base\", superType.toString());\n  }\n",
        "begin_line": 3022,
        "end_line": 3040,
        "comment": "",
        "child_ranges": [
            "(line 3026,col 5)-(line 3030,col 69)",
            "(line 3031,col 5)-(line 3031,col 71)",
            "(line 3032,col 5)-(line 3032,col 65)",
            "(line 3034,col 5)-(line 3035,col 57)",
            "(line 3036,col 5)-(line 3036,col 75)",
            "(line 3038,col 5)-(line 3038,col 73)",
            "(line 3039,col 5)-(line 3039,col 52)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testGoodExtends5()",
        "snippet": "  public void testGoodExtends5() throws Exception {\n    // we allow for the extends annotation to be placed first\n    testTypes(\"/** @constructor */function base() {}\\n\" +\n        \"/** @extends {base}\\n * @constructor */function derived() {}\\n\");\n  }\n",
        "begin_line": 3042,
        "end_line": 3046,
        "comment": "",
        "child_ranges": [
            "(line 3044,col 5)-(line 3045,col 74)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testGoodExtends6()",
        "snippet": "  public void testGoodExtends6() throws Exception {\n    testFunctionType(\n        CLOSURE_DEFS +\n        \"/** @constructor */function base() {}\\n\" +\n        \"/** @return {number} */ \" +\n        \"  base.prototype.foo = function() { return 1; };\\n\" +\n        \"/** @extends {base}\\n * @constructor */function derived() {}\\n\" +\n        \"goog.inherits(derived, base);\",\n        \"derived.superClass_.foo\",\n        \"function (this:base): number\");\n  }\n",
        "begin_line": 3048,
        "end_line": 3058,
        "comment": "",
        "child_ranges": [
            "(line 3049,col 5)-(line 3057,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testGoodExtends7()",
        "snippet": "  public void testGoodExtends7() throws Exception {\n    testFunctionType(\n        \"Function.prototype.inherits = function(x) {};\" +\n        \"/** @constructor */function base() {}\\n\" +\n        \"/** @extends {base}\\n * @constructor */function derived() {}\\n\" +\n        \"derived.inherits(base);\",\n        \"(new derived).constructor\",\n        \"function (new:derived): undefined\");\n  }\n",
        "begin_line": 3060,
        "end_line": 3068,
        "comment": "",
        "child_ranges": [
            "(line 3061,col 5)-(line 3067,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testGoodExtends8()",
        "snippet": "  public void testGoodExtends8() throws Exception {\n    testTypes(\"/** @constructor \\n @extends {Base} */ function Sub() {}\" +\n        \"/** @return {number} */ function f() { return (new Sub()).foo; }\" +\n        \"/** @constructor */ function Base() {}\" +\n        \"/** @type {boolean} */ Base.prototype.foo = true;\",\n        \"inconsistent return type\\n\" +\n        \"found   : boolean\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 3070,
        "end_line": 3078,
        "comment": "",
        "child_ranges": [
            "(line 3071,col 5)-(line 3077,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testGoodExtends9()",
        "snippet": "  public void testGoodExtends9() throws Exception {\n    testTypes(\n        \"/** @constructor */ function Super() {}\" +\n        \"Super.prototype.foo = function() {};\" +\n        \"/** @constructor \\n * @extends {Super} */ function Sub() {}\" +\n        \"Sub.prototype = new Super();\" +\n        \"/** @override */ Sub.prototype.foo = function() {};\");\n  }\n",
        "begin_line": 3080,
        "end_line": 3087,
        "comment": "",
        "child_ranges": [
            "(line 3081,col 5)-(line 3086,col 63)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testGoodExtends10()",
        "snippet": "  public void testGoodExtends10() throws Exception {\n    testTypes(\n        \"/** @constructor */ function Super() {}\" +\n        \"/** @constructor \\n * @extends {Super} */ function Sub() {}\" +\n        \"Sub.prototype = new Super();\" +\n        \"/** @return {Super} */ function foo() { return new Sub(); }\");\n  }\n",
        "begin_line": 3089,
        "end_line": 3095,
        "comment": "",
        "child_ranges": [
            "(line 3090,col 5)-(line 3094,col 71)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testGoodExtends11()",
        "snippet": "  public void testGoodExtends11() throws Exception {\n    testTypes(\n        \"/** @constructor */ function Super() {}\" +\n        \"/** @param {boolean} x */ Super.prototype.foo = function(x) {};\" +\n        \"/** @constructor \\n * @extends {Super} */ function Sub() {}\" +\n        \"Sub.prototype = new Super();\" +\n        \"(new Sub()).foo(0);\",\n        \"actual parameter 1 of Super.prototype.foo \" +\n        \"does not match formal parameter\\n\" +\n        \"found   : number\\n\" +\n        \"required: boolean\");\n  }\n",
        "begin_line": 3097,
        "end_line": 3108,
        "comment": "",
        "child_ranges": [
            "(line 3098,col 5)-(line 3107,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testGoodExtends12()",
        "snippet": "  public void testGoodExtends12() throws Exception {\n    testTypes(\n        \"/** @constructor \\n * @extends {Super} */ function Sub() {}\" +\n        \"/** @constructor \\n * @extends {Sub} */ function Sub2() {}\" +\n        \"/** @constructor */ function Super() {}\" +\n        \"/** @param {Super} x */ function foo(x) {}\" +\n        \"foo(new Sub2());\");\n  }\n",
        "begin_line": 3110,
        "end_line": 3117,
        "comment": "",
        "child_ranges": [
            "(line 3111,col 5)-(line 3116,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testGoodExtends13()",
        "snippet": "  public void testGoodExtends13() throws Exception {\n    testTypes(\n        \"/** @constructor \\n * @extends {B}  */ function C() {}\" +\n        \"/** @constructor \\n * @extends {D}  */ function E() {}\" +\n        \"/** @constructor \\n * @extends {C}  */ function D() {}\" +\n        \"/** @constructor \\n * @extends {A} */ function B() {}\" +\n        \"/** @constructor */ function A() {}\" +\n        \"/** @param {number} x */ function f(x) {} f(new E());\",\n        \"actual parameter 1 of f does not match formal parameter\\n\" +\n        \"found   : E\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 3119,
        "end_line": 3130,
        "comment": "",
        "child_ranges": [
            "(line 3120,col 5)-(line 3129,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBadExtends1()",
        "snippet": "  public void testBadExtends1() throws Exception {\n    testTypes(\"/** @constructor */function base() {}\\n\" +\n        \"/** @constructor\\n * @extends {not_base} */function derived() {}\\n\",\n        \"Bad type annotation. Unknown type not_base\");\n  }\n",
        "begin_line": 3132,
        "end_line": 3136,
        "comment": "",
        "child_ranges": [
            "(line 3133,col 5)-(line 3135,col 54)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBadExtends2()",
        "snippet": "  public void testBadExtends2() throws Exception {\n    testTypes(\"/** @constructor */function base() {\\n\" +\n        \"/** @type {!Number}*/\\n\" +\n        \"this.baseMember = new Number(4);\\n\" +\n        \"}\\n\" +\n        \"/** @constructor\\n\" +\n        \"  * @extends {base} */function derived() {}\\n\" +\n        \"/** @param {!String} x*/\\n\" +\n        \"function foo(x){ }\\n\" +\n        \"/** @type {!derived}*/var y;\\n\" +\n        \"foo(y.baseMember);\\n\",\n        \"actual parameter 1 of foo does not match formal parameter\\n\" +\n        \"found   : Number\\n\" +\n        \"required: String\");\n  }\n",
        "begin_line": 3138,
        "end_line": 3152,
        "comment": "",
        "child_ranges": [
            "(line 3139,col 5)-(line 3151,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBadExtends3()",
        "snippet": "  public void testBadExtends3() throws Exception {\n    testTypes(\"/** @extends {Object} */function base() {}\",\n        \"@extends used without @constructor or @interface for base\");\n  }\n",
        "begin_line": 3154,
        "end_line": 3157,
        "comment": "",
        "child_ranges": [
            "(line 3155,col 5)-(line 3156,col 69)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBadExtends4()",
        "snippet": "  public void testBadExtends4() throws Exception {\n    // If there's a subclass of a class with a bad extends,\n    // we only want to warn about the first one.\n    testTypes(\n        \"/** @constructor \\n * @extends {bad} */ function Sub() {}\" +\n        \"/** @constructor \\n * @extends {Sub} */ function Sub2() {}\" +\n        \"/** @param {Sub} x */ function foo(x) {}\" +\n        \"foo(new Sub2());\",\n        \"Bad type annotation. Unknown type bad\");\n  }\n",
        "begin_line": 3159,
        "end_line": 3168,
        "comment": "",
        "child_ranges": [
            "(line 3162,col 5)-(line 3167,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testLateExtends()",
        "snippet": "  public void testLateExtends() throws Exception {\n    testTypes(\n        CLOSURE_DEFS +\n        \"/** @constructor */ function Foo() {}\\n\" +\n        \"Foo.prototype.foo = function() {};\\n\" +\n        \"/** @constructor */function Bar() {}\\n\" +\n        \"goog.inherits(Foo, Bar);\\n\",\n        \"Missing @extends tag on type Foo\");\n  }\n",
        "begin_line": 3170,
        "end_line": 3178,
        "comment": "",
        "child_ranges": [
            "(line 3171,col 5)-(line 3177,col 44)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testSuperclassMatch()",
        "snippet": "  public void testSuperclassMatch() throws Exception {\n    compiler.getOptions().setCodingConvention(new GoogleCodingConvention());\n    testTypes(\"/** @constructor */ var Foo = function() {};\\n\" +\n        \"/** @constructor \\n @extends Foo */ var Bar = function() {};\\n\" +\n        \"Bar.inherits = function(x){};\" +\n        \"Bar.inherits(Foo);\\n\");\n  }\n",
        "begin_line": 3180,
        "end_line": 3186,
        "comment": "",
        "child_ranges": [
            "(line 3181,col 5)-(line 3181,col 76)",
            "(line 3182,col 5)-(line 3185,col 32)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testSuperclassMatchWithMixin()",
        "snippet": "  public void testSuperclassMatchWithMixin() throws Exception {\n    compiler.getOptions().setCodingConvention(new GoogleCodingConvention());\n    testTypes(\"/** @constructor */ var Foo = function() {};\\n\" +\n        \"/** @constructor */ var Baz = function() {};\\n\" +\n        \"/** @constructor \\n @extends Foo */ var Bar = function() {};\\n\" +\n        \"Bar.inherits = function(x){};\" +\n        \"Bar.mixin = function(y){};\" +\n        \"Bar.inherits(Foo);\\n\" +\n        \"Bar.mixin(Baz);\\n\");\n  }\n",
        "begin_line": 3188,
        "end_line": 3197,
        "comment": "",
        "child_ranges": [
            "(line 3189,col 5)-(line 3189,col 76)",
            "(line 3190,col 5)-(line 3196,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testSuperclassMismatch1()",
        "snippet": "  public void testSuperclassMismatch1() throws Exception {\n    compiler.getOptions().setCodingConvention(new GoogleCodingConvention());\n    testTypes(\"/** @constructor */ var Foo = function() {};\\n\" +\n        \"/** @constructor \\n @extends Object */ var Bar = function() {};\\n\" +\n        \"Bar.inherits = function(x){};\" +\n        \"Bar.inherits(Foo);\\n\",\n        \"Missing @extends tag on type Bar\");\n  }\n",
        "begin_line": 3199,
        "end_line": 3206,
        "comment": "",
        "child_ranges": [
            "(line 3200,col 5)-(line 3200,col 76)",
            "(line 3201,col 5)-(line 3205,col 44)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testSuperclassMismatch2()",
        "snippet": "  public void testSuperclassMismatch2() throws Exception {\n    compiler.getOptions().setCodingConvention(new GoogleCodingConvention());\n    testTypes(\"/** @constructor */ var Foo = function(){};\\n\" +\n        \"/** @constructor */ var Bar = function(){};\\n\" +\n        \"Bar.inherits = function(x){};\" +\n        \"Bar.inherits(Foo);\",\n        \"Missing @extends tag on type Bar\");\n  }\n",
        "begin_line": 3208,
        "end_line": 3215,
        "comment": "",
        "child_ranges": [
            "(line 3209,col 5)-(line 3209,col 76)",
            "(line 3210,col 5)-(line 3214,col 44)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testSuperClassDefinedAfterSubClass1()",
        "snippet": "  public void testSuperClassDefinedAfterSubClass1() throws Exception {\n    testTypes(\n        \"/** @constructor \\n * @extends {Base} */ function A() {}\" +\n        \"/** @constructor \\n * @extends {Base} */ function B() {}\" +\n        \"/** @constructor */ function Base() {}\" +\n        \"/** @param {A|B} x \\n * @return {B|A} */ \" +\n        \"function foo(x) { return x; }\");\n  }\n",
        "begin_line": 3217,
        "end_line": 3224,
        "comment": "",
        "child_ranges": [
            "(line 3218,col 5)-(line 3223,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testSuperClassDefinedAfterSubClass2()",
        "snippet": "  public void testSuperClassDefinedAfterSubClass2() throws Exception {\n    testTypes(\n        \"/** @constructor \\n * @extends {Base} */ function A() {}\" +\n        \"/** @constructor \\n * @extends {Base} */ function B() {}\" +\n        \"/** @param {A|B} x \\n * @return {B|A} */ \" +\n        \"function foo(x) { return x; }\" +\n        \"/** @constructor */ function Base() {}\");\n  }\n",
        "begin_line": 3226,
        "end_line": 3233,
        "comment": "",
        "child_ranges": [
            "(line 3227,col 5)-(line 3232,col 50)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testDirectPrototypeAssignment1()",
        "snippet": "  public void testDirectPrototypeAssignment1() throws Exception {\n    testTypes(\n        \"/** @constructor */ function Base() {}\" +\n        \"Base.prototype.foo = 3;\" +\n        \"/** @constructor \\n * @extends {Base} */ function A() {}\" +\n        \"A.prototype = new Base();\" +\n        \"/** @return {string} */ function foo() { return (new A).foo; }\",\n        \"inconsistent return type\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 3235,
        "end_line": 3245,
        "comment": "",
        "child_ranges": [
            "(line 3236,col 5)-(line 3244,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testDirectPrototypeAssignment2()",
        "snippet": "  public void testDirectPrototypeAssignment2() throws Exception {\n    // This ensures that we don't attach property 'foo' onto the Base\n    // instance object.\n    testTypes(\n        \"/** @constructor */ function Base() {}\" +\n        \"/** @constructor \\n * @extends {Base} */ function A() {}\" +\n        \"A.prototype = new Base();\" +\n        \"A.prototype.foo = 3;\" +\n        \"/** @return {string} */ function foo() { return (new Base).foo; }\");\n  }\n",
        "begin_line": 3247,
        "end_line": 3256,
        "comment": "",
        "child_ranges": [
            "(line 3250,col 5)-(line 3255,col 77)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testDirectPrototypeAssignment3()",
        "snippet": "  public void testDirectPrototypeAssignment3() throws Exception {\n    // This verifies that the compiler doesn't crash if the user\n    // overwrites the prototype of a global variable in a local scope.\n    testTypes(\n        \"/** @constructor */ var MainWidgetCreator = function() {};\" +\n        \"/** @param {Function} ctor */\" +\n        \"function createMainWidget(ctor) {\" +\n        \"  /** @constructor */ function tempCtor() {};\" +\n        \"  tempCtor.prototype = ctor.prototype;\" +\n        \"  MainWidgetCreator.superClass_ = ctor.prototype;\" +\n        \"  MainWidgetCreator.prototype = new tempCtor();\" +\n        \"}\");\n  }\n",
        "begin_line": 3258,
        "end_line": 3270,
        "comment": "",
        "child_ranges": [
            "(line 3261,col 5)-(line 3269,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testGoodImplements1()",
        "snippet": "  public void testGoodImplements1() throws Exception {\n    testTypes(\"/** @interface */function Disposable() {}\\n\" +\n        \"/** @implements {Disposable}\\n * @constructor */function f() {}\");\n  }\n",
        "begin_line": 3272,
        "end_line": 3275,
        "comment": "",
        "child_ranges": [
            "(line 3273,col 5)-(line 3274,col 75)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testGoodImplements2()",
        "snippet": "  public void testGoodImplements2() throws Exception {\n    testTypes(\"/** @interface */function Base1() {}\\n\" +\n        \"/** @interface */function Base2() {}\\n\" +\n        \"/** @constructor\\n\" +\n        \" * @implements {Base1}\\n\" +\n        \" * @implements {Base2}\\n\" +\n        \" */ function derived() {}\");\n  }\n",
        "begin_line": 3277,
        "end_line": 3284,
        "comment": "",
        "child_ranges": [
            "(line 3278,col 5)-(line 3283,col 37)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testGoodImplements3()",
        "snippet": "  public void testGoodImplements3() throws Exception {\n    testTypes(\"/** @interface */function Disposable() {}\\n\" +\n        \"/** @constructor \\n @implements {Disposable} */function f() {}\");\n  }\n",
        "begin_line": 3286,
        "end_line": 3289,
        "comment": "",
        "child_ranges": [
            "(line 3287,col 5)-(line 3288,col 74)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testGoodImplements4()",
        "snippet": "  public void testGoodImplements4() throws Exception {\n    testTypes(\"var goog = {};\" +\n        \"/** @type {!Function} */\" +\n        \"goog.abstractMethod = function() {};\" +\n        \"/** @interface */\\n\" +\n        \"goog.Disposable = goog.abstractMethod;\" +\n        \"goog.Disposable.prototype.dispose = goog.abstractMethod;\" +\n        \"/** @implements {goog.Disposable}\\n * @constructor */\" +\n        \"goog.SubDisposable = function() {};\" +\n        \"/** @inheritDoc */ \" +\n        \"goog.SubDisposable.prototype.dispose = function() {};\");\n  }\n",
        "begin_line": 3291,
        "end_line": 3302,
        "comment": "",
        "child_ranges": [
            "(line 3292,col 5)-(line 3301,col 65)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBadImplements1()",
        "snippet": "  public void testBadImplements1() throws Exception {\n    testTypes(\"/** @interface */function Base1() {}\\n\" +\n        \"/** @interface */function Base2() {}\\n\" +\n        \"/** @constructor\\n\" +\n        \" * @implements {nonExistent}\\n\" +\n        \" * @implements {Base2}\\n\" +\n        \" */ function derived() {}\",\n        \"Bad type annotation. Unknown type nonExistent\");\n  }\n",
        "begin_line": 3304,
        "end_line": 3312,
        "comment": "",
        "child_ranges": [
            "(line 3305,col 5)-(line 3311,col 57)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBadImplements2()",
        "snippet": "  public void testBadImplements2() throws Exception {\n    testTypes(\"/** @interface */function Disposable() {}\\n\" +\n        \"/** @implements {Disposable}\\n */function f() {}\",\n        \"@implements used without @constructor or @interface for f\");\n  }\n",
        "begin_line": 3314,
        "end_line": 3318,
        "comment": "",
        "child_ranges": [
            "(line 3315,col 5)-(line 3317,col 69)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBadImplements3()",
        "snippet": "  public void testBadImplements3() throws Exception {\n    testTypes(\n        \"var goog = {};\" +\n        \"/** @type {!Function} */ goog.abstractMethod = function(){};\" +\n        \"/** @interface */ var Disposable = goog.abstractMethod;\" +\n        \"Disposable.prototype.method = goog.abstractMethod;\" +\n        \"/** @implements {Disposable}\\n * @constructor */function f() {}\",\n        \"property method on interface Disposable is not implemented by type f\");\n  }\n",
        "begin_line": 3320,
        "end_line": 3328,
        "comment": "",
        "child_ranges": [
            "(line 3321,col 5)-(line 3327,col 80)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBadImplements4()",
        "snippet": "  public void testBadImplements4() throws Exception {\n    testTypes(\"/** @interface */function Disposable() {}\\n\" +\n        \"/** @implements {Disposable}\\n * @interface */function f() {}\",\n        \"f cannot implement this type; an interface can only extend, \" +\n        \"but not implement interfaces\");\n  }\n",
        "begin_line": 3330,
        "end_line": 3335,
        "comment": "",
        "child_ranges": [
            "(line 3331,col 5)-(line 3334,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInterfaceExtends()",
        "snippet": "  public void testInterfaceExtends() throws Exception {\n    testTypes(\"/** @interface */function A() {}\\n\" +\n        \"/** @interface \\n * @extends {A} */function B() {}\\n\" +\n        \"/** @constructor\\n\" +\n        \" * @implements {B}\\n\" +\n        \" */ function derived() {}\");\n  }\n",
        "begin_line": 3337,
        "end_line": 3343,
        "comment": "",
        "child_ranges": [
            "(line 3338,col 5)-(line 3342,col 37)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBadInterfaceExtends1()",
        "snippet": "  public void testBadInterfaceExtends1() throws Exception {\n    testTypes(\"/** @interface \\n * @extends {nonExistent} */function A() {}\",\n        \"Bad type annotation. Unknown type nonExistent\");\n  }\n",
        "begin_line": 3345,
        "end_line": 3348,
        "comment": "",
        "child_ranges": [
            "(line 3346,col 5)-(line 3347,col 57)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBadInterfaceExtends2()",
        "snippet": "  public void testBadInterfaceExtends2() throws Exception {\n    testTypes(\"/** @constructor */function A() {}\\n\" +\n        \"/** @interface \\n * @extends {A} */function B() {}\",\n        \"B cannot extend this type; a constructor can only extend objects \" +\n        \"and an interface can only extend interfaces\");\n  }\n",
        "begin_line": 3350,
        "end_line": 3355,
        "comment": "",
        "child_ranges": [
            "(line 3351,col 5)-(line 3354,col 55)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBadInterfaceExtends3()",
        "snippet": "  public void testBadInterfaceExtends3() throws Exception {\n    testTypes(\"/** @interface */function A() {}\\n\" +\n        \"/** @constructor \\n * @extends {A} */function B() {}\",\n        \"B cannot extend this type; a constructor can only extend objects \" +\n        \"and an interface can only extend interfaces\");\n  }\n",
        "begin_line": 3357,
        "end_line": 3362,
        "comment": "",
        "child_ranges": [
            "(line 3358,col 5)-(line 3361,col 55)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBadInterfaceExtends4()",
        "snippet": "  public void testBadInterfaceExtends4() throws Exception {\n    // TODO(user): This should be detected as an error. Even if we enforce\n    // that A cannot be used in the assignment, we should still detect the\n    // inheritance chain as invalid.\n    testTypes(\"/** @interface */function A() {}\\n\" +\n        \"/** @constructor */function B() {}\\n\" +\n        \"B.prototype = A;\");\n  }\n",
        "begin_line": 3364,
        "end_line": 3371,
        "comment": "",
        "child_ranges": [
            "(line 3368,col 5)-(line 3370,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBadInterfaceExtends5()",
        "snippet": "  public void testBadInterfaceExtends5() throws Exception {\n    // TODO(user): This should be detected as an error. Even if we enforce\n    // that A cannot be used in the assignment, we should still detect the\n    // inheritance chain as invalid.\n    testTypes(\"/** @constructor */function A() {}\\n\" +\n        \"/** @interface */function B() {}\\n\" +\n        \"B.prototype = A;\");\n  }\n",
        "begin_line": 3373,
        "end_line": 3380,
        "comment": "",
        "child_ranges": [
            "(line 3377,col 5)-(line 3379,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBadImplementsAConstructor()",
        "snippet": "  public void testBadImplementsAConstructor() throws Exception {\n    testTypes(\"/** @constructor */function A() {}\\n\" +\n        \"/** @constructor \\n * @implements {A} */function B() {}\",\n        \"can only implement interfaces\");\n  }\n",
        "begin_line": 3382,
        "end_line": 3386,
        "comment": "",
        "child_ranges": [
            "(line 3383,col 5)-(line 3385,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBadImplementsNonInterfaceType()",
        "snippet": "  public void testBadImplementsNonInterfaceType() throws Exception {\n    testTypes(\"/** @constructor \\n * @implements {Boolean} */function B() {}\",\n        \"can only implement interfaces\");\n  }\n",
        "begin_line": 3388,
        "end_line": 3391,
        "comment": "",
        "child_ranges": [
            "(line 3389,col 5)-(line 3390,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBadImplementsNonObjectType()",
        "snippet": "  public void testBadImplementsNonObjectType() throws Exception {\n    testTypes(\"/** @constructor \\n * @implements {string} */function S() {}\",\n        \"can only implement interfaces\");\n  }\n",
        "begin_line": 3393,
        "end_line": 3396,
        "comment": "",
        "child_ranges": [
            "(line 3394,col 5)-(line 3395,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInterfaceAssignment1()",
        "snippet": "  public void testInterfaceAssignment1() throws Exception {\n    testTypes(\"/** @interface */var I = function() {};\\n\" +\n        \"/** @constructor\\n@implements {I} */var T = function() {};\\n\" +\n        \"var t = new T();\\n\" +\n        \"/** @type {!I} */var i = t;\");\n  }\n",
        "begin_line": 3398,
        "end_line": 3403,
        "comment": "",
        "child_ranges": [
            "(line 3399,col 5)-(line 3402,col 39)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInterfaceAssignment2()",
        "snippet": "  public void testInterfaceAssignment2() throws Exception {\n    testTypes(\"/** @interface */var I = function() {};\\n\" +\n        \"/** @constructor */var T = function() {};\\n\" +\n        \"var t = new T();\\n\" +\n        \"/** @type {!I} */var i = t;\",\n        \"initializing variable\\n\" +\n        \"found   : T\\n\" +\n        \"required: I\");\n  }\n",
        "begin_line": 3405,
        "end_line": 3413,
        "comment": "",
        "child_ranges": [
            "(line 3406,col 5)-(line 3412,col 23)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInterfaceAssignment3()",
        "snippet": "  public void testInterfaceAssignment3() throws Exception {\n    testTypes(\"/** @interface */var I = function() {};\\n\" +\n        \"/** @constructor\\n@implements {I} */var T = function() {};\\n\" +\n        \"var t = new T();\\n\" +\n        \"/** @type {I|number} */var i = t;\");\n  }\n",
        "begin_line": 3415,
        "end_line": 3420,
        "comment": "",
        "child_ranges": [
            "(line 3416,col 5)-(line 3419,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInterfaceAssignment4()",
        "snippet": "  public void testInterfaceAssignment4() throws Exception {\n    testTypes(\"/** @interface */var I1 = function() {};\\n\" +\n        \"/** @interface */var I2 = function() {};\\n\" +\n        \"/** @constructor\\n@implements {I1} */var T = function() {};\\n\" +\n        \"var t = new T();\\n\" +\n        \"/** @type {I1|I2} */var i = t;\");\n  }\n",
        "begin_line": 3422,
        "end_line": 3428,
        "comment": "",
        "child_ranges": [
            "(line 3423,col 5)-(line 3427,col 42)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInterfaceAssignment5()",
        "snippet": "  public void testInterfaceAssignment5() throws Exception {\n    testTypes(\"/** @interface */var I1 = function() {};\\n\" +\n        \"/** @interface */var I2 = function() {};\\n\" +\n        \"/** @constructor\\n@implements {I1}\\n@implements {I2}*/\" +\n        \"var T = function() {};\\n\" +\n        \"var t = new T();\\n\" +\n        \"/** @type {I1} */var i1 = t;\\n\" +\n        \"/** @type {I2} */var i2 = t;\\n\");\n  }\n",
        "begin_line": 3430,
        "end_line": 3438,
        "comment": "",
        "child_ranges": [
            "(line 3431,col 5)-(line 3437,col 42)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInterfaceAssignment6()",
        "snippet": "  public void testInterfaceAssignment6() throws Exception {\n    testTypes(\"/** @interface */var I1 = function() {};\\n\" +\n        \"/** @interface */var I2 = function() {};\\n\" +\n        \"/** @constructor\\n@implements {I1} */var T = function() {};\\n\" +\n        \"/** @type {!I1} */var i1 = new T();\\n\" +\n        \"/** @type {!I2} */var i2 = i1;\\n\",\n        \"initializing variable\\n\" +\n        \"found   : I1\\n\" +\n        \"required: I2\");\n  }\n",
        "begin_line": 3440,
        "end_line": 3449,
        "comment": "",
        "child_ranges": [
            "(line 3441,col 5)-(line 3448,col 24)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInterfaceAssignment7()",
        "snippet": "  public void testInterfaceAssignment7() throws Exception {\n    testTypes(\"/** @interface */var I1 = function() {};\\n\" +\n        \"/** @interface\\n@extends {I1}*/var I2 = function() {};\\n\" +\n        \"/** @constructor\\n@implements {I2}*/var T = function() {};\\n\" +\n        \"var t = new T();\\n\" +\n        \"/** @type {I1} */var i1 = t;\\n\" +\n        \"/** @type {I2} */var i2 = t;\\n\" +\n        \"i1 = i2;\\n\");\n  }\n",
        "begin_line": 3451,
        "end_line": 3459,
        "comment": "",
        "child_ranges": [
            "(line 3452,col 5)-(line 3458,col 22)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInterfaceAssignment8()",
        "snippet": "  public void testInterfaceAssignment8() throws Exception {\n    testTypes(\"/** @interface */var I = function() {};\\n\" +\n        \"/** @type {I} */var i;\\n\" +\n        \"/** @type {Object} */var o = i;\\n\" +\n        \"new Object().prototype = i.prototype;\");\n  }\n",
        "begin_line": 3461,
        "end_line": 3466,
        "comment": "",
        "child_ranges": [
            "(line 3462,col 5)-(line 3465,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInterfaceAssignment9()",
        "snippet": "  public void testInterfaceAssignment9() throws Exception {\n    testTypes(\"/** @interface */var I = function() {};\\n\" +\n        \"/** @return {I?} */function f() { return null; }\\n\" +\n        \"/** @type {!I} */var i = f();\\n\",\n        \"initializing variable\\n\" +\n        \"found   : (I|null)\\n\" +\n        \"required: I\");\n  }\n",
        "begin_line": 3468,
        "end_line": 3475,
        "comment": "",
        "child_ranges": [
            "(line 3469,col 5)-(line 3474,col 23)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInterfaceAssignment10()",
        "snippet": "  public void testInterfaceAssignment10() throws Exception {\n    testTypes(\"/** @interface */var I1 = function() {};\\n\" +\n        \"/** @interface */var I2 = function() {};\\n\" +\n        \"/** @constructor\\n@implements {I2} */var T = function() {};\\n\" +\n        \"/** @return {!I1|!I2} */function f() { return new T(); }\\n\" +\n        \"/** @type {!I1} */var i1 = f();\\n\",\n        \"initializing variable\\n\" +\n        \"found   : (I1|I2)\\n\" +\n        \"required: I1\");\n  }\n",
        "begin_line": 3477,
        "end_line": 3486,
        "comment": "",
        "child_ranges": [
            "(line 3478,col 5)-(line 3485,col 24)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInterfaceAssignment11()",
        "snippet": "  public void testInterfaceAssignment11() throws Exception {\n    testTypes(\"/** @interface */var I1 = function() {};\\n\" +\n        \"/** @interface */var I2 = function() {};\\n\" +\n        \"/** @constructor */var T = function() {};\\n\" +\n        \"/** @return {!I1|!I2|!T} */function f() { return new T(); }\\n\" +\n        \"/** @type {!I1} */var i1 = f();\\n\",\n        \"initializing variable\\n\" +\n        \"found   : (I1|I2|T)\\n\" +\n        \"required: I1\");\n  }\n",
        "begin_line": 3488,
        "end_line": 3497,
        "comment": "",
        "child_ranges": [
            "(line 3489,col 5)-(line 3496,col 24)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInterfaceAssignment12()",
        "snippet": "  public void testInterfaceAssignment12() throws Exception {\n    testTypes(\"/** @interface */var I = function() {};\\n\" +\n              \"/** @constructor\\n@implements{I}*/var T1 = function() {};\\n\" +\n              \"/** @constructor\\n@extends {T1}*/var T2 = function() {};\\n\" +\n              \"/** @return {I} */function f() { return new T2(); }\");\n  }\n",
        "begin_line": 3499,
        "end_line": 3504,
        "comment": "",
        "child_ranges": [
            "(line 3500,col 5)-(line 3503,col 69)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInterfaceAssignment13()",
        "snippet": "  public void testInterfaceAssignment13() throws Exception {\n    testTypes(\"/** @interface */var I = function() {};\\n\" +\n        \"/** @constructor\\n@implements {I}*/var T = function() {};\\n\" +\n        \"/** @constructor */function Super() {};\\n\" +\n        \"/** @return {I} */Super.prototype.foo = \" +\n        \"function() { return new T(); };\\n\" +\n        \"/** @constructor\\n@extends {Super} */function Sub() {}\\n\" +\n        \"/** @override\\n@return {T} */Sub.prototype.foo = \" +\n        \"function() { return new T(); };\\n\");\n  }\n",
        "begin_line": 3506,
        "end_line": 3515,
        "comment": "",
        "child_ranges": [
            "(line 3507,col 5)-(line 3514,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testGetprop1()",
        "snippet": "  public void testGetprop1() throws Exception {\n    testTypes(\"/** @return {void}*/function foo(){foo().bar;}\",\n        \"undefined has no properties\\n\" +\n        \"found   : undefined\\n\" +\n        \"required: Object\");\n  }\n",
        "begin_line": 3517,
        "end_line": 3522,
        "comment": "",
        "child_ranges": [
            "(line 3518,col 5)-(line 3521,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testGetprop2()",
        "snippet": "  public void testGetprop2() throws Exception {\n    testTypes(\"var x = null; x.alert();\",\n        \"null has no properties\\n\" +\n        \"found   : null\\n\" +\n        \"required: Object\");\n  }\n",
        "begin_line": 3524,
        "end_line": 3529,
        "comment": "",
        "child_ranges": [
            "(line 3525,col 5)-(line 3528,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testGetprop3()",
        "snippet": "  public void testGetprop3() throws Exception {\n    testTypes(\n        \"/** @constructor */ \" +\n        \"function Foo() { /** @type {?Object} */ this.x = null; }\" +\n        \"Foo.prototype.initX = function() { this.x = {foo: 1}; };\" +\n        \"Foo.prototype.bar = function() {\" +\n        \"  if (this.x == null) { this.initX(); alert(this.x.foo); }\" +\n        \"};\");\n  }\n",
        "begin_line": 3531,
        "end_line": 3539,
        "comment": "",
        "child_ranges": [
            "(line 3532,col 5)-(line 3538,col 14)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testArrayAccess1()",
        "snippet": "  public void testArrayAccess1() throws Exception {\n    testTypes(\"var a = []; var b = a['hi'];\");\n  }\n",
        "begin_line": 3541,
        "end_line": 3543,
        "comment": "",
        "child_ranges": [
            "(line 3542,col 5)-(line 3542,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testArrayAccess2()",
        "snippet": "  public void testArrayAccess2() throws Exception {\n    testTypes(\"var a = []; var b = a[[1,2]];\",\n        \"array access\\n\" +\n        \"found   : Array\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 3545,
        "end_line": 3550,
        "comment": "",
        "child_ranges": [
            "(line 3546,col 5)-(line 3549,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testArrayAccess3()",
        "snippet": "  public void testArrayAccess3() throws Exception {\n    testTypes(\"var bar = [];\" +\n        \"/** @return {void} */function baz(){};\" +\n        \"var foo = bar[baz()];\",\n        \"array access\\n\" +\n        \"found   : undefined\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 3552,
        "end_line": 3559,
        "comment": "",
        "child_ranges": [
            "(line 3553,col 5)-(line 3558,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testArrayAccess4()",
        "snippet": "  public void testArrayAccess4() throws Exception {\n    testTypes(\"/**@return {!Array}*/function foo(){};var bar = foo()[foo()];\",\n        \"array access\\n\" +\n        \"found   : Array\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 3561,
        "end_line": 3566,
        "comment": "",
        "child_ranges": [
            "(line 3562,col 5)-(line 3565,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testArrayAccess6()",
        "snippet": "  public void testArrayAccess6() throws Exception {\n    testTypes(\"var bar = null[1];\",\n        \"only arrays or objects can be accessed\\n\" +\n        \"found   : null\\n\" +\n        \"required: Object\");\n  }\n",
        "begin_line": 3568,
        "end_line": 3573,
        "comment": "",
        "child_ranges": [
            "(line 3569,col 5)-(line 3572,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testArrayAccess7()",
        "snippet": "  public void testArrayAccess7() throws Exception {\n    testTypes(\"var bar = void 0; bar[0];\",\n        \"only arrays or objects can be accessed\\n\" +\n        \"found   : undefined\\n\" +\n        \"required: Object\");\n  }\n",
        "begin_line": 3575,
        "end_line": 3580,
        "comment": "",
        "child_ranges": [
            "(line 3576,col 5)-(line 3579,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testArrayAccess8()",
        "snippet": "  public void testArrayAccess8() throws Exception {\n    // Verifies that we don't emit two warnings, because\n    // the var has been dereferenced after the first one.\n    testTypes(\"var bar = void 0; bar[0]; bar[1];\",\n        \"only arrays or objects can be accessed\\n\" +\n        \"found   : undefined\\n\" +\n        \"required: Object\");\n  }\n",
        "begin_line": 3582,
        "end_line": 3589,
        "comment": "",
        "child_ranges": [
            "(line 3585,col 5)-(line 3588,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testPropAccess()",
        "snippet": "  public void testPropAccess() throws Exception {\n    testTypes(\"/** @param {*} x */var f = function(x) {\\n\" +\n        \"var o = String(x);\\n\" +\n        \"if (typeof o['a'] != 'undefined') { return o['a']; }\\n\" +\n        \"return null;\\n\" +\n        \"};\");\n  }\n",
        "begin_line": 3591,
        "end_line": 3597,
        "comment": "",
        "child_ranges": [
            "(line 3592,col 5)-(line 3596,col 14)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testPropAccess2()",
        "snippet": "  public void testPropAccess2() throws Exception {\n    testTypes(\"var bar = void 0; bar.baz;\",\n        \"undefined has no properties\\n\" +\n        \"found   : undefined\\n\" +\n        \"required: Object\");\n  }\n",
        "begin_line": 3599,
        "end_line": 3604,
        "comment": "",
        "child_ranges": [
            "(line 3600,col 5)-(line 3603,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testPropAccess3()",
        "snippet": "  public void testPropAccess3() throws Exception {\n    // Verifies that we don't emit two warnings, because\n    // the var has been dereferenced after the first one.\n    testTypes(\"var bar = void 0; bar.baz; bar.bax;\",\n        \"undefined has no properties\\n\" +\n        \"found   : undefined\\n\" +\n        \"required: Object\");\n  }\n",
        "begin_line": 3606,
        "end_line": 3613,
        "comment": "",
        "child_ranges": [
            "(line 3609,col 5)-(line 3612,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testPropAccess4()",
        "snippet": "  public void testPropAccess4() throws Exception {\n    testTypes(\"/** @param {*} x */ function f(x) { return x['hi']; }\");\n  }\n",
        "begin_line": 3615,
        "end_line": 3617,
        "comment": "",
        "child_ranges": [
            "(line 3616,col 5)-(line 3616,col 71)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testSwitchCase1()",
        "snippet": "  public void testSwitchCase1() throws Exception {\n    testTypes(\"/**@type number*/var a;\" +\n        \"/**@type string*/var b;\" +\n        \"switch(a){case b:;}\",\n        \"case expression doesn't match switch\\n\" +\n        \"found   : string\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 3619,
        "end_line": 3626,
        "comment": "",
        "child_ranges": [
            "(line 3620,col 5)-(line 3625,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testSwitchCase2()",
        "snippet": "  public void testSwitchCase2() throws Exception {\n    testTypes(\"var a = null; switch (typeof a) { case 'foo': }\");\n  }\n",
        "begin_line": 3628,
        "end_line": 3630,
        "comment": "",
        "child_ranges": [
            "(line 3629,col 5)-(line 3629,col 65)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testVar1()",
        "snippet": "  public void testVar1() throws Exception {\n    TypeCheckResult p =\n        parseAndTypeCheckWithScope(\"/** @type {(string,null)} */var a = null\");\n\n    assertEquals(createUnionType(STRING_TYPE, NULL_TYPE),\n        p.scope.getVar(\"a\").getType());\n  }\n",
        "begin_line": 3632,
        "end_line": 3638,
        "comment": "",
        "child_ranges": [
            "(line 3633,col 5)-(line 3634,col 79)",
            "(line 3636,col 5)-(line 3637,col 39)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testVar2()",
        "snippet": "  public void testVar2() throws Exception {\n    testTypes(\"/** @type {Function} */ var a = function(){}\");\n  }\n",
        "begin_line": 3640,
        "end_line": 3642,
        "comment": "",
        "child_ranges": [
            "(line 3641,col 5)-(line 3641,col 62)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testVar3()",
        "snippet": "  public void testVar3() throws Exception {\n    TypeCheckResult p = parseAndTypeCheckWithScope(\"var a = 3;\");\n\n    assertEquals(NUMBER_TYPE, p.scope.getVar(\"a\").getType());\n  }\n",
        "begin_line": 3644,
        "end_line": 3648,
        "comment": "",
        "child_ranges": [
            "(line 3645,col 5)-(line 3645,col 65)",
            "(line 3647,col 5)-(line 3647,col 61)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testVar4()",
        "snippet": "  public void testVar4() throws Exception {\n    TypeCheckResult p = parseAndTypeCheckWithScope(\n        \"var a = 3; a = 'string';\");\n\n    assertEquals(createUnionType(STRING_TYPE, NUMBER_TYPE),\n        p.scope.getVar(\"a\").getType());\n  }\n",
        "begin_line": 3650,
        "end_line": 3656,
        "comment": "",
        "child_ranges": [
            "(line 3651,col 5)-(line 3652,col 36)",
            "(line 3654,col 5)-(line 3655,col 39)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testVar5()",
        "snippet": "  public void testVar5() throws Exception {\n    testTypes(\"var goog = {};\" +\n        \"/** @type string */goog.foo = 'hello';\" +\n        \"/** @type number */var a = goog.foo;\",\n        \"initializing variable\\n\" +\n        \"found   : string\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 3658,
        "end_line": 3665,
        "comment": "",
        "child_ranges": [
            "(line 3659,col 5)-(line 3664,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testVar6()",
        "snippet": "  public void testVar6() throws Exception {\n    testTypes(\n        \"function f() {\" +\n        \"  return function() {\" +\n        \"    /** @type {!Date} */\" +\n        \"    var a = 7;\" +\n        \"  };\" +\n        \"}\",\n        \"initializing variable\\n\" +\n        \"found   : number\\n\" +\n        \"required: Date\");\n  }\n",
        "begin_line": 3667,
        "end_line": 3678,
        "comment": "",
        "child_ranges": [
            "(line 3668,col 5)-(line 3677,col 26)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testVar7()",
        "snippet": "  public void testVar7() throws Exception {\n    testTypes(\"/** @type number */var a, b;\",\n        \"declaration of multiple variables with shared type information\");\n  }\n",
        "begin_line": 3680,
        "end_line": 3683,
        "comment": "",
        "child_ranges": [
            "(line 3681,col 5)-(line 3682,col 74)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testVar8()",
        "snippet": "  public void testVar8() throws Exception {\n    testTypes(\"var a, b;\");\n  }\n",
        "begin_line": 3685,
        "end_line": 3687,
        "comment": "",
        "child_ranges": [
            "(line 3686,col 5)-(line 3686,col 27)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testVar9()",
        "snippet": "  public void testVar9() throws Exception {\n    testTypes(\"/** @enum */var a;\",\n        \"enum initializer must be an object literal or an enum\");\n  }\n",
        "begin_line": 3689,
        "end_line": 3692,
        "comment": "",
        "child_ranges": [
            "(line 3690,col 5)-(line 3691,col 65)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testVar10()",
        "snippet": "  public void testVar10() throws Exception {\n    testTypes(\"/** @type !Number */var foo = 'abc';\",\n        \"initializing variable\\n\" +\n        \"found   : string\\n\" +\n        \"required: Number\");\n  }\n",
        "begin_line": 3694,
        "end_line": 3699,
        "comment": "",
        "child_ranges": [
            "(line 3695,col 5)-(line 3698,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testVar11()",
        "snippet": "  public void testVar11() throws Exception {\n    testTypes(\"var /** @type !Date */foo = 'abc';\",\n        \"initializing variable\\n\" +\n        \"found   : string\\n\" +\n        \"required: Date\");\n  }\n",
        "begin_line": 3701,
        "end_line": 3706,
        "comment": "",
        "child_ranges": [
            "(line 3702,col 5)-(line 3705,col 26)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testVar12()",
        "snippet": "  public void testVar12() throws Exception {\n    testTypes(\"var /** @type !Date */foo = 'abc', \" +\n        \"/** @type !RegExp */bar = 5;\",\n        new String[] {\n        \"initializing variable\\n\" +\n        \"found   : string\\n\" +\n        \"required: Date\",\n        \"initializing variable\\n\" +\n        \"found   : number\\n\" +\n        \"required: RegExp\"});\n  }\n",
        "begin_line": 3708,
        "end_line": 3718,
        "comment": "",
        "child_ranges": [
            "(line 3709,col 5)-(line 3717,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testVar13()",
        "snippet": "  public void testVar13() throws Exception {\n    // this caused an NPE\n    testTypes(\"var /** @type number */a,a;\");\n  }\n",
        "begin_line": 3720,
        "end_line": 3723,
        "comment": "",
        "child_ranges": [
            "(line 3722,col 5)-(line 3722,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testVar14()",
        "snippet": "  public void testVar14() throws Exception {\n    testTypes(\"/** @return {number} */ function f() { var x; return x; }\",\n        \"inconsistent return type\\n\" +\n        \"found   : undefined\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 3725,
        "end_line": 3730,
        "comment": "",
        "child_ranges": [
            "(line 3726,col 5)-(line 3729,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testVar15()",
        "snippet": "  public void testVar15() throws Exception {\n    testTypes(\"/** @return {number} */\" +\n        \"function f() { var x = x || {}; return x; }\",\n        \"inconsistent return type\\n\" +\n        \"found   : {}\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 3732,
        "end_line": 3738,
        "comment": "",
        "child_ranges": [
            "(line 3733,col 5)-(line 3737,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testAssign1()",
        "snippet": "  public void testAssign1() throws Exception {\n    testTypes(\"var goog = {};\" +\n        \"/** @type number */goog.foo = 'hello';\",\n        \"assignment to property foo of goog\\n\" +\n        \"found   : string\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 3740,
        "end_line": 3746,
        "comment": "",
        "child_ranges": [
            "(line 3741,col 5)-(line 3745,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testAssign2()",
        "snippet": "  public void testAssign2() throws Exception {\n    testTypes(\"var goog = {};\" +\n        \"/** @type number */goog.foo = 3;\" +\n        \"goog.foo = 'hello';\",\n        \"assignment to property foo of goog\\n\" +\n        \"found   : string\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 3748,
        "end_line": 3755,
        "comment": "",
        "child_ranges": [
            "(line 3749,col 5)-(line 3754,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testAssign3()",
        "snippet": "  public void testAssign3() throws Exception {\n    testTypes(\"var goog = {};\" +\n        \"/** @type number */goog.foo = 3;\" +\n        \"goog.foo = 4;\");\n  }\n",
        "begin_line": 3757,
        "end_line": 3761,
        "comment": "",
        "child_ranges": [
            "(line 3758,col 5)-(line 3760,col 25)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testAssign4()",
        "snippet": "  public void testAssign4() throws Exception {\n    testTypes(\"var goog = {};\" +\n        \"goog.foo = 3;\" +\n        \"goog.foo = 'hello';\");\n  }\n",
        "begin_line": 3763,
        "end_line": 3767,
        "comment": "",
        "child_ranges": [
            "(line 3764,col 5)-(line 3766,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testAssignInference()",
        "snippet": "  public void testAssignInference() throws Exception {\n    testTypes(\n        \"/**\" +\n        \" * @param {Array} x\" +\n        \" * @return {number}\" +\n        \" */\" +\n        \"function f(x) {\" +\n        \"  var y = null;\" +\n        \"  y = x[0];\" +\n        \"  if (y == null) { return 4; } else { return 6; }\" +\n        \"}\");\n  }\n",
        "begin_line": 3769,
        "end_line": 3780,
        "comment": "",
        "child_ranges": [
            "(line 3770,col 5)-(line 3779,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testOr1()",
        "snippet": "  public void testOr1() throws Exception {\n    testTypes(\"/** @type number */var a;\" +\n        \"/** @type number */var b;\" +\n        \"a + b || undefined;\");\n  }\n",
        "begin_line": 3782,
        "end_line": 3786,
        "comment": "",
        "child_ranges": [
            "(line 3783,col 5)-(line 3785,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testOr2()",
        "snippet": "  public void testOr2() throws Exception {\n    testTypes(\"/** @type number */var a;\" +\n        \"/** @type number */var b;\" +\n        \"/** @type number */var c = a + b || undefined;\",\n        \"initializing variable\\n\" +\n        \"found   : (number|undefined)\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 3788,
        "end_line": 3795,
        "comment": "",
        "child_ranges": [
            "(line 3789,col 5)-(line 3794,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testOr3()",
        "snippet": "  public void testOr3() throws Exception {\n    testTypes(\"/** @type {(number, undefined)} */var a;\" +\n        \"/** @type number */var c = a || 3;\");\n  }\n",
        "begin_line": 3797,
        "end_line": 3800,
        "comment": "",
        "child_ranges": [
            "(line 3798,col 5)-(line 3799,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testOr4()",
        "snippet": "  public void testOr4() throws Exception {\n     testTypes(\"/**@type {number} */var x;x=null || \\\"a\\\";\",\n         \"assignment\\n\" +\n         \"found   : string\\n\" +\n         \"required: number\");\n  }\n",
        "begin_line": 3807,
        "end_line": 3812,
        "comment": "\n   * Test that type inference continues with the right side,\n   * when no short-circuiting is possible.\n   * See bugid 1205387 for more details.\n   ",
        "child_ranges": [
            "(line 3808,col 6)-(line 3811,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testOr5()",
        "snippet": "  public void testOr5() throws Exception {\n     testTypes(\"/**@type {number} */var x;x=undefined || \\\"a\\\";\",\n         \"assignment\\n\" +\n         \"found   : string\\n\" +\n         \"required: number\");\n  }\n",
        "begin_line": 3817,
        "end_line": 3822,
        "comment": "\n   * @see #testOr4()\n   ",
        "child_ranges": [
            "(line 3818,col 6)-(line 3821,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testAnd1()",
        "snippet": "  public void testAnd1() throws Exception {\n    testTypes(\"/** @type number */var a;\" +\n        \"/** @type number */var b;\" +\n        \"a + b && undefined;\");\n  }\n",
        "begin_line": 3824,
        "end_line": 3828,
        "comment": "",
        "child_ranges": [
            "(line 3825,col 5)-(line 3827,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testAnd2()",
        "snippet": "  public void testAnd2() throws Exception {\n    testTypes(\"/** @type number */var a;\" +\n        \"/** @type number */var b;\" +\n        \"/** @type number */var c = a + b && undefined;\",\n        \"initializing variable\\n\" +\n        \"found   : (number|undefined)\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 3830,
        "end_line": 3837,
        "comment": "",
        "child_ranges": [
            "(line 3831,col 5)-(line 3836,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testAnd3()",
        "snippet": "  public void testAnd3() throws Exception {\n    testTypes(\"/** @type {(!Array, undefined)} */var a;\" +\n        \"/** @type number */var c = a && undefined;\",\n        \"initializing variable\\n\" +\n        \"found   : undefined\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 3839,
        "end_line": 3845,
        "comment": "",
        "child_ranges": [
            "(line 3840,col 5)-(line 3844,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testAnd4()",
        "snippet": "  public void testAnd4() throws Exception {\n    testTypes(\"/** @param {number} x */function f(x){};\\n\" +\n        \"/** @type null */var x; /** @type {number?} */var y;\\n\" +\n        \"if (x && y) { f(y) }\");\n  }\n",
        "begin_line": 3847,
        "end_line": 3851,
        "comment": "",
        "child_ranges": [
            "(line 3848,col 5)-(line 3850,col 32)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testAnd5()",
        "snippet": "  public void testAnd5() throws Exception {\n    testTypes(\"/** @param {number} x\\n@param {string} y*/function f(x,y){};\\n\" +\n        \"/** @type {number?} */var x; /** @type {string?} */var y;\\n\" +\n        \"if (x && y) { f(x, y) }\");\n  }\n",
        "begin_line": 3853,
        "end_line": 3857,
        "comment": "",
        "child_ranges": [
            "(line 3854,col 5)-(line 3856,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testAnd6()",
        "snippet": "  public void testAnd6() throws Exception {\n    testTypes(\"/** @param {number} x */function f(x){};\\n\" +\n        \"/** @type {number|undefined} */var x;\\n\" +\n        \"if (x && f(x)) { f(x) }\");\n  }\n",
        "begin_line": 3859,
        "end_line": 3863,
        "comment": "",
        "child_ranges": [
            "(line 3860,col 5)-(line 3862,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testAnd7()",
        "snippet": "  public void testAnd7() throws Exception {\n    // TODO(user): a deterministic warning should be generated for this\n    // case since x && x is always false. The implementation of this requires\n    // a more precise handling of a null value within a variable's type.\n    // Currently, a null value defaults to ? which passes every check.\n    testTypes(\"/** @type null */var x; if (x && x) {}\");\n  }\n",
        "begin_line": 3865,
        "end_line": 3871,
        "comment": "",
        "child_ranges": [
            "(line 3870,col 5)-(line 3870,col 56)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testHook()",
        "snippet": "  public void testHook() throws Exception {\n    testTypes(\"/**@return {void}*/function foo(){ var x=foo()?a:b; }\");\n  }\n",
        "begin_line": 3873,
        "end_line": 3875,
        "comment": "",
        "child_ranges": [
            "(line 3874,col 5)-(line 3874,col 71)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testHookRestrictsType1()",
        "snippet": "  public void testHookRestrictsType1() throws Exception {\n    testTypes(\"/** @return {(string,null)} */\" +\n        \"function f() { return null;}\" +\n        \"/** @type {(string,null)} */ var a = f();\" +\n        \"/** @type string */\" +\n        \"var b = a ? a : 'default';\");\n  }\n",
        "begin_line": 3877,
        "end_line": 3883,
        "comment": "",
        "child_ranges": [
            "(line 3878,col 5)-(line 3882,col 38)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testHookRestrictsType2()",
        "snippet": "  public void testHookRestrictsType2() throws Exception {\n    testTypes(\"/** @type {String} */\" +\n        \"var a = null;\" +\n        \"/** @type null */\" +\n        \"var b = a ? null : a;\");\n  }\n",
        "begin_line": 3885,
        "end_line": 3890,
        "comment": "",
        "child_ranges": [
            "(line 3886,col 5)-(line 3889,col 33)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testHookRestrictsType3()",
        "snippet": "  public void testHookRestrictsType3() throws Exception {\n    testTypes(\"/** @type {String} */\" +\n        \"var a;\" +\n        \"/** @type null */\" +\n        \"var b = (!a) ? a : null;\");\n  }\n",
        "begin_line": 3892,
        "end_line": 3897,
        "comment": "",
        "child_ranges": [
            "(line 3893,col 5)-(line 3896,col 36)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testHookRestrictsType4()",
        "snippet": "  public void testHookRestrictsType4() throws Exception {\n    testTypes(\"/** @type {(boolean,undefined)} */\" +\n        \"var a;\" +\n        \"/** @type boolean */\" +\n        \"var b = a != null ? a : true;\");\n  }\n",
        "begin_line": 3899,
        "end_line": 3904,
        "comment": "",
        "child_ranges": [
            "(line 3900,col 5)-(line 3903,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testHookRestrictsType5()",
        "snippet": "  public void testHookRestrictsType5() throws Exception {\n    testTypes(\"/** @type {(boolean,undefined)} */\" +\n        \"var a;\" +\n        \"/** @type {(undefined)} */\" +\n        \"var b = a == null ? a : undefined;\");\n  }\n",
        "begin_line": 3906,
        "end_line": 3911,
        "comment": "",
        "child_ranges": [
            "(line 3907,col 5)-(line 3910,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testHookRestrictsType6()",
        "snippet": "  public void testHookRestrictsType6() throws Exception {\n    testTypes(\"/** @type {(number,null,undefined)} */\" +\n        \"var a;\" +\n        \"/** @type {number} */\" +\n        \"var b = a == null ? 5 : a;\");\n  }\n",
        "begin_line": 3913,
        "end_line": 3918,
        "comment": "",
        "child_ranges": [
            "(line 3914,col 5)-(line 3917,col 38)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testHookRestrictsType7()",
        "snippet": "  public void testHookRestrictsType7() throws Exception {\n    testTypes(\"/** @type {(number,null,undefined)} */\" +\n        \"var a;\" +\n        \"/** @type {number} */\" +\n        \"var b = a == undefined ? 5 : a;\");\n  }\n",
        "begin_line": 3920,
        "end_line": 3925,
        "comment": "",
        "child_ranges": [
            "(line 3921,col 5)-(line 3924,col 43)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testWhileRestrictsType1()",
        "snippet": "  public void testWhileRestrictsType1() throws Exception {\n    testTypes(\"/** @param {null} x */ function g(x) {}\" +\n        \"/** @param {number?} x */\\n\" +\n        \"function f(x) {\\n\" +\n        \"while (x) {\\n\" +\n        \"if (g(x)) { x = 1; }\\n\" +\n        \"x = x-1;\\n}\\n}\",\n        \"actual parameter 1 of g does not match formal parameter\\n\" +\n        \"found   : number\\n\" +\n        \"required: null\");\n  }\n",
        "begin_line": 3927,
        "end_line": 3937,
        "comment": "",
        "child_ranges": [
            "(line 3928,col 5)-(line 3936,col 26)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testWhileRestrictsType2()",
        "snippet": "  public void testWhileRestrictsType2() throws Exception {\n    testTypes(\"/** @param {number?} x\\n@return {number}*/\\n\" +\n        \"function f(x) {\\n/** @type {number} */var y = 0;\" +\n        \"while (x) {\\n\" +\n        \"y = x;\\n\" +\n        \"x = x-1;\\n}\\n\" +\n        \"return y;}\");\n  }\n",
        "begin_line": 3939,
        "end_line": 3946,
        "comment": "",
        "child_ranges": [
            "(line 3940,col 5)-(line 3945,col 22)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testHigherOrderFunctions1()",
        "snippet": "  public void testHigherOrderFunctions1() throws Exception {\n    testTypes(\n        \"/** @type {function(number)} */var f;\" +\n        \"f(true);\",\n        \"actual parameter 1 of f does not match formal parameter\\n\" +\n        \"found   : boolean\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 3948,
        "end_line": 3955,
        "comment": "",
        "child_ranges": [
            "(line 3949,col 5)-(line 3954,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testHigherOrderFunctions2()",
        "snippet": "  public void testHigherOrderFunctions2() throws Exception {\n    testTypes(\n        \"/** @type {function():!Date} */var f;\" +\n        \"/** @type boolean */var a = f();\",\n        \"initializing variable\\n\" +\n        \"found   : Date\\n\" +\n        \"required: boolean\");\n  }\n",
        "begin_line": 3957,
        "end_line": 3964,
        "comment": "",
        "child_ranges": [
            "(line 3958,col 5)-(line 3963,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testHigherOrderFunctions3()",
        "snippet": "  public void testHigherOrderFunctions3() throws Exception {\n    testTypes(\n        \"/** @type {function(this:Error):Date} */var f; new f\",\n        \"cannot instantiate non-constructor\");\n  }\n",
        "begin_line": 3966,
        "end_line": 3970,
        "comment": "",
        "child_ranges": [
            "(line 3967,col 5)-(line 3969,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testHigherOrderFunctions4()",
        "snippet": "  public void testHigherOrderFunctions4() throws Exception {\n    testTypes(\n        \"/** @type {function(this:Error,...[number]):Date} */var f; new f\",\n        \"cannot instantiate non-constructor\");\n  }\n",
        "begin_line": 3972,
        "end_line": 3976,
        "comment": "",
        "child_ranges": [
            "(line 3973,col 5)-(line 3975,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testHigherOrderFunctions5()",
        "snippet": "  public void testHigherOrderFunctions5() throws Exception {\n    testTypes(\n        \"/** @param {number} x */ function g(x) {}\" +\n        \"/** @type {function(new:Error,...[number]):Date} */ var f;\" +\n        \"g(new f());\",\n        \"actual parameter 1 of g does not match formal parameter\\n\" +\n        \"found   : Error\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 3978,
        "end_line": 3986,
        "comment": "",
        "child_ranges": [
            "(line 3979,col 5)-(line 3985,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testConstructorAlias1()",
        "snippet": "  public void testConstructorAlias1() throws Exception {\n    testTypes(\n        \"/** @constructor */ var Foo = function() {};\" +\n        \"/** @type {number} */ Foo.prototype.bar = 3;\" +\n        \"/** @constructor */ var FooAlias = Foo;\" +\n        \"/** @return {string} */ function foo() { \" +\n        \"  return (new FooAlias()).bar; }\",\n        \"inconsistent return type\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 3988,
        "end_line": 3998,
        "comment": "",
        "child_ranges": [
            "(line 3989,col 5)-(line 3997,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testConstructorAlias2()",
        "snippet": "  public void testConstructorAlias2() throws Exception {\n    testTypes(\n        \"/** @constructor */ var Foo = function() {};\" +\n        \"/** @constructor */ var FooAlias = Foo;\" +\n        \"/** @type {number} */ FooAlias.prototype.bar = 3;\" +\n        \"/** @return {string} */ function foo() { \" +\n        \"  return (new Foo()).bar; }\",\n        \"inconsistent return type\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 4000,
        "end_line": 4010,
        "comment": "",
        "child_ranges": [
            "(line 4001,col 5)-(line 4009,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testConstructorAlias3()",
        "snippet": "  public void testConstructorAlias3() throws Exception {\n    testTypes(\n        \"/** @constructor */ var Foo = function() {};\" +\n        \"/** @type {number} */ Foo.prototype.bar = 3;\" +\n        \"/** @constructor */ var FooAlias = Foo;\" +\n        \"/** @return {string} */ function foo() { \" +\n        \"  return (new FooAlias()).bar; }\",\n        \"inconsistent return type\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 4012,
        "end_line": 4022,
        "comment": "",
        "child_ranges": [
            "(line 4013,col 5)-(line 4021,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testConstructorAlias4()",
        "snippet": "  public void testConstructorAlias4() throws Exception {\n    testTypes(\n        \"/** @constructor */ var Foo = function() {};\" +\n        \"var FooAlias = Foo;\" +\n        \"/** @type {number} */ FooAlias.prototype.bar = 3;\" +\n        \"/** @return {string} */ function foo() { \" +\n        \"  return (new Foo()).bar; }\",\n        \"inconsistent return type\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 4024,
        "end_line": 4034,
        "comment": "",
        "child_ranges": [
            "(line 4025,col 5)-(line 4033,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testConstructorAlias5()",
        "snippet": "  public void testConstructorAlias5() throws Exception {\n    testTypes(\n        \"/** @constructor */ var Foo = function() {};\" +\n        \"/** @constructor */ var FooAlias = Foo;\" +\n        \"/** @return {FooAlias} */ function foo() { \" +\n        \"  return new Foo(); }\");\n  }\n",
        "begin_line": 4036,
        "end_line": 4042,
        "comment": "",
        "child_ranges": [
            "(line 4037,col 5)-(line 4041,col 33)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testConstructorAlias6()",
        "snippet": "  public void testConstructorAlias6() throws Exception {\n    testTypes(\n        \"/** @constructor */ var Foo = function() {};\" +\n        \"/** @constructor */ var FooAlias = Foo;\" +\n        \"/** @return {Foo} */ function foo() { \" +\n        \"  return new FooAlias(); }\");\n  }\n",
        "begin_line": 4044,
        "end_line": 4050,
        "comment": "",
        "child_ranges": [
            "(line 4045,col 5)-(line 4049,col 38)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testConstructorAlias7()",
        "snippet": "  public void testConstructorAlias7() throws Exception {\n    testTypes(\n        \"var goog = {};\" +\n        \"/** @constructor */ goog.Foo = function() {};\" +\n        \"/** @constructor */ goog.FooAlias = goog.Foo;\" +\n        \"/** @return {number} */ function foo() { \" +\n        \"  return new goog.FooAlias(); }\",\n        \"inconsistent return type\\n\" +\n        \"found   : goog.Foo\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 4052,
        "end_line": 4062,
        "comment": "",
        "child_ranges": [
            "(line 4053,col 5)-(line 4061,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testConstructorAlias8()",
        "snippet": "  public void testConstructorAlias8() throws Exception {\n    testTypes(\n        \"var goog = {};\" +\n        \"/**\\n * @param {number} x \\n * @constructor */ \" +\n        \"goog.Foo = function(x) {};\" +\n        \"/**\\n * @param {number} x \\n * @constructor */ \" +\n        \"goog.FooAlias = goog.Foo;\" +\n        \"/** @return {number} */ function foo() { \" +\n        \"  return new goog.FooAlias(1); }\",\n        \"inconsistent return type\\n\" +\n        \"found   : goog.Foo\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 4064,
        "end_line": 4076,
        "comment": "",
        "child_ranges": [
            "(line 4065,col 5)-(line 4075,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testConstructorAlias9()",
        "snippet": "  public void testConstructorAlias9() throws Exception {\n    testTypes(\n        \"var goog = {};\" +\n        \"/**\\n * @param {number} x \\n * @constructor */ \" +\n        \"goog.Foo = function(x) {};\" +\n        \"/** @constructor */ goog.FooAlias = goog.Foo;\" +\n        \"/** @return {number} */ function foo() { \" +\n        \"  return new goog.FooAlias(1); }\",\n        \"inconsistent return type\\n\" +\n        \"found   : goog.Foo\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 4078,
        "end_line": 4089,
        "comment": "",
        "child_ranges": [
            "(line 4079,col 5)-(line 4088,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testConstructorAlias10()",
        "snippet": "  public void testConstructorAlias10() throws Exception {\n    testTypes(\n        \"/**\\n * @param {number} x \\n * @constructor */ \" +\n        \"var Foo = function(x) {};\" +\n        \"/** @constructor */ var FooAlias = Foo;\" +\n        \"/** @return {number} */ function foo() { \" +\n        \"  return new FooAlias(1); }\",\n        \"inconsistent return type\\n\" +\n        \"found   : Foo\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 4091,
        "end_line": 4101,
        "comment": "",
        "child_ranges": [
            "(line 4092,col 5)-(line 4100,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testClosure1()",
        "snippet": "  public void testClosure1() throws Exception {\n    testClosureTypes(\n        CLOSURE_DEFS +\n        \"/** @type {string|undefined} */var a;\" +\n        \"/** @type string */\" +\n        \"var b = goog.isDef(a) ? a : 'default';\",\n        null);\n  }\n",
        "begin_line": 4103,
        "end_line": 4110,
        "comment": "",
        "child_ranges": [
            "(line 4104,col 5)-(line 4109,col 14)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testClosure2()",
        "snippet": "  public void testClosure2() throws Exception {\n    testClosureTypes(\n        CLOSURE_DEFS +\n        \"/** @type {string?} */var a;\" +\n        \"/** @type string */\" +\n        \"var b = goog.isNull(a) ? 'default' : a;\",\n        null);\n  }\n",
        "begin_line": 4112,
        "end_line": 4119,
        "comment": "",
        "child_ranges": [
            "(line 4113,col 5)-(line 4118,col 14)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testClosure3()",
        "snippet": "  public void testClosure3() throws Exception {\n    testClosureTypes(\n        CLOSURE_DEFS +\n        \"/** @type {string|null|undefined} */var a;\" +\n        \"/** @type string */\" +\n        \"var b = goog.isDefAndNotNull(a) ? a : 'default';\",\n        null);\n  }\n",
        "begin_line": 4121,
        "end_line": 4128,
        "comment": "",
        "child_ranges": [
            "(line 4122,col 5)-(line 4127,col 14)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testClosure4()",
        "snippet": "  public void testClosure4() throws Exception {\n    testClosureTypes(\n        CLOSURE_DEFS +\n        \"/** @type {string|undefined} */var a;\" +\n        \"/** @type string */\" +\n        \"var b = !goog.isDef(a) ? 'default' : a;\",\n        null);\n  }\n",
        "begin_line": 4130,
        "end_line": 4137,
        "comment": "",
        "child_ranges": [
            "(line 4131,col 5)-(line 4136,col 14)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testClosure5()",
        "snippet": "  public void testClosure5() throws Exception {\n    testClosureTypes(\n        CLOSURE_DEFS +\n        \"/** @type {string?} */var a;\" +\n        \"/** @type string */\" +\n        \"var b = !goog.isNull(a) ? a : 'default';\",\n        null);\n  }\n",
        "begin_line": 4139,
        "end_line": 4146,
        "comment": "",
        "child_ranges": [
            "(line 4140,col 5)-(line 4145,col 14)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testClosure6()",
        "snippet": "  public void testClosure6() throws Exception {\n    testClosureTypes(\n        CLOSURE_DEFS +\n        \"/** @type {string|null|undefined} */var a;\" +\n        \"/** @type string */\" +\n        \"var b = !goog.isDefAndNotNull(a) ? 'default' : a;\",\n        null);\n  }\n",
        "begin_line": 4148,
        "end_line": 4155,
        "comment": "",
        "child_ranges": [
            "(line 4149,col 5)-(line 4154,col 14)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testClosure7()",
        "snippet": "  public void testClosure7() throws Exception {\n    testClosureTypes(\n        CLOSURE_DEFS +\n        \"goog.asserts = {};\" +\n        \"/** @return {*} */ goog.asserts.assert = function(x) { return x; };\" +\n        \"/** @type {string|null|undefined} */ var a = foo();\" +\n        \"/** @type {number} */\" +\n        \"var b = goog.asserts.assert(a);\",\n        \"initializing variable\\n\" +\n        \"found   : string\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 4157,
        "end_line": 4168,
        "comment": "",
        "child_ranges": [
            "(line 4158,col 5)-(line 4167,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testReturn1()",
        "snippet": "  public void testReturn1() throws Exception {\n    testTypes(\"/**@return {void}*/function foo(){ return 3; }\",\n        \"inconsistent return type\\n\" +\n        \"found   : number\\n\" +\n        \"required: undefined\");\n  }\n",
        "begin_line": 4170,
        "end_line": 4175,
        "comment": "",
        "child_ranges": [
            "(line 4171,col 5)-(line 4174,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testReturn2()",
        "snippet": "  public void testReturn2() throws Exception {\n    testTypes(\"/**@return {!Number}*/function foo(){ return; }\",\n        \"inconsistent return type\\n\" +\n        \"found   : undefined\\n\" +\n        \"required: Number\");\n  }\n",
        "begin_line": 4177,
        "end_line": 4182,
        "comment": "",
        "child_ranges": [
            "(line 4178,col 5)-(line 4181,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testReturn3()",
        "snippet": "  public void testReturn3() throws Exception {\n    testTypes(\"/**@return {!Number}*/function foo(){ return 'abc'; }\",\n        \"inconsistent return type\\n\" +\n        \"found   : string\\n\" +\n        \"required: Number\");\n  }\n",
        "begin_line": 4184,
        "end_line": 4189,
        "comment": "",
        "child_ranges": [
            "(line 4185,col 5)-(line 4188,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testReturn4()",
        "snippet": "  public void testReturn4() throws Exception {\n    testTypes(\"/**@return {!Number}\\n*/\\n function a(){return new Array();}\",\n        \"inconsistent return type\\n\" +\n        \"found   : Array\\n\" +\n        \"required: Number\");\n  }\n",
        "begin_line": 4191,
        "end_line": 4196,
        "comment": "",
        "child_ranges": [
            "(line 4192,col 5)-(line 4195,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testReturn5()",
        "snippet": "  public void testReturn5() throws Exception {\n    testTypes(\"/** @param {number} n\\n\" +\n        \"@constructor */function n(n){return};\");\n  }\n",
        "begin_line": 4198,
        "end_line": 4201,
        "comment": "",
        "child_ranges": [
            "(line 4199,col 5)-(line 4200,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testReturn6()",
        "snippet": "  public void testReturn6() throws Exception {\n    testTypes(\n        \"/** @param {number} opt_a\\n@return {string} */\" +\n        \"function a(opt_a) { return opt_a }\",\n        \"inconsistent return type\\n\" +\n        \"found   : (number|undefined)\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 4203,
        "end_line": 4210,
        "comment": "",
        "child_ranges": [
            "(line 4204,col 5)-(line 4209,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testReturn7()",
        "snippet": "  public void testReturn7() throws Exception {\n    testTypes(\"/** @constructor */var A = function() {};\\n\" +\n        \"/** @constructor */var B = function() {};\\n\" +\n        \"/** @return {!B} */A.f = function() { return 1; };\",\n        \"inconsistent return type\\n\" +\n        \"found   : number\\n\" +\n        \"required: B\");\n  }\n",
        "begin_line": 4212,
        "end_line": 4219,
        "comment": "",
        "child_ranges": [
            "(line 4213,col 5)-(line 4218,col 23)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testReturn8()",
        "snippet": "  public void testReturn8() throws Exception {\n    testTypes(\"/** @constructor */var A = function() {};\\n\" +\n        \"/** @constructor */var B = function() {};\\n\" +\n        \"/** @return {!B} */A.prototype.f = function() { return 1; };\",\n        \"inconsistent return type\\n\" +\n        \"found   : number\\n\" +\n        \"required: B\");\n  }\n",
        "begin_line": 4221,
        "end_line": 4228,
        "comment": "",
        "child_ranges": [
            "(line 4222,col 5)-(line 4227,col 23)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInferredReturn1()",
        "snippet": "  public void testInferredReturn1() throws Exception {\n    testTypes(\n        \"function f() {} /** @param {number} x */ function g(x) {}\" +\n        \"g(f());\",\n        \"actual parameter 1 of g does not match formal parameter\\n\" +\n        \"found   : undefined\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 4230,
        "end_line": 4237,
        "comment": "",
        "child_ranges": [
            "(line 4231,col 5)-(line 4236,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInferredReturn2()",
        "snippet": "  public void testInferredReturn2() throws Exception {\n    testTypes(\n        \"/** @constructor */ function Foo() {}\" +\n        \"Foo.prototype.bar = function() {}; \" +\n        \"/** @param {number} x */ function g(x) {}\" +\n        \"g((new Foo()).bar());\",\n        \"actual parameter 1 of g does not match formal parameter\\n\" +\n        \"found   : undefined\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 4239,
        "end_line": 4248,
        "comment": "",
        "child_ranges": [
            "(line 4240,col 5)-(line 4247,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInferredReturn3()",
        "snippet": "  public void testInferredReturn3() throws Exception {\n    testTypes(\n        \"/** @constructor */ function Foo() {}\" +\n        \"Foo.prototype.bar = function() {}; \" +\n        \"/** @constructor \\n * @extends {Foo} */ function SubFoo() {}\" +\n        \"/** @return {number} \\n * @override  */ \" +\n        \"SubFoo.prototype.bar = function() { return 3; }; \",\n        \"mismatch of the bar property type and the type of the property \" +\n        \"it overrides from superclass Foo\\n\" +\n        \"original: function (this:Foo): undefined\\n\" +\n        \"override: function (this:SubFoo): number\");\n  }\n",
        "begin_line": 4250,
        "end_line": 4261,
        "comment": "",
        "child_ranges": [
            "(line 4251,col 5)-(line 4260,col 52)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInferredReturn4()",
        "snippet": "  public void testInferredReturn4() throws Exception {\n    // By design, this throws a warning. if you want global x to be\n    // defined to some other type of function, then you need to declare it\n    // as a greater type.\n    testTypes(\n        \"var x = function() {};\" +\n        \"x = /** @type {function(): number} */ (function() { return 3; });\",\n        \"assignment\\n\" +\n        \"found   : function (): number\\n\" +\n        \"required: function (): undefined\");\n  }\n",
        "begin_line": 4263,
        "end_line": 4273,
        "comment": "",
        "child_ranges": [
            "(line 4267,col 5)-(line 4272,col 44)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInferredReturn5()",
        "snippet": "  public void testInferredReturn5() throws Exception {\n    // If x is local, then the function type is not declared.\n    testTypes(\n        \"/** @return {string} */\" +\n        \"function f() {\" +\n        \"  var x = function() {};\" +\n        \"  x = /** @type {function(): number} */ (function() { return 3; });\" +\n        \"  return x();\" +\n        \"}\",\n        \"inconsistent return type\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 4275,
        "end_line": 4287,
        "comment": "",
        "child_ranges": [
            "(line 4277,col 5)-(line 4286,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInferredReturn6()",
        "snippet": "  public void testInferredReturn6() throws Exception {\n    testTypes(\n        \"/** @return {string} */\" +\n        \"function f() {\" +\n        \"  var x = function() {};\" +\n        \"  if (f()) \" +\n        \"    x = /** @type {function(): number} */ \" +\n        \"        (function() { return 3; });\" +\n        \"  return x();\" +\n        \"}\",\n        \"inconsistent return type\\n\" +\n        \"found   : (number|undefined)\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 4289,
        "end_line": 4302,
        "comment": "",
        "child_ranges": [
            "(line 4290,col 5)-(line 4301,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInferredReturn7()",
        "snippet": "  public void testInferredReturn7() throws Exception {\n    testTypes(\n        \"/** @constructor */ function Foo() {}\" +\n        \"/** @param {number} x */ Foo.prototype.bar = function(x) {};\" +\n        \"Foo.prototype.bar = function(x) { return 3; };\",\n        \"inconsistent return type\\n\" +\n        \"found   : number\\n\" +\n        \"required: undefined\");\n  }\n",
        "begin_line": 4304,
        "end_line": 4312,
        "comment": "",
        "child_ranges": [
            "(line 4305,col 5)-(line 4311,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInferredReturn8()",
        "snippet": "  public void testInferredReturn8() throws Exception {\n    reportMissingOverrides = CheckLevel.OFF;\n    testTypes(\n        \"/** @constructor */ function Foo() {}\" +\n        \"/** @param {number} x */ Foo.prototype.bar = function(x) {};\" +\n        \"/** @constructor \\n * @extends {Foo} */ function SubFoo() {}\" +\n        \"/** @param {number} x */ SubFoo.prototype.bar = \" +\n        \"    function(x) { return 3; }\",\n        \"inconsistent return type\\n\" +\n        \"found   : number\\n\" +\n        \"required: undefined\");\n  }\n",
        "begin_line": 4314,
        "end_line": 4325,
        "comment": "",
        "child_ranges": [
            "(line 4315,col 5)-(line 4315,col 44)",
            "(line 4316,col 5)-(line 4324,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInferredParam1()",
        "snippet": "  public void testInferredParam1() throws Exception {\n    testTypes(\n        \"/** @constructor */ function Foo() {}\" +\n        \"/** @param {number} x */ Foo.prototype.bar = function(x) {};\" +\n        \"/** @param {string} x */ function f(x) {}\" +\n        \"Foo.prototype.bar = function(y) { f(y); };\",\n        \"actual parameter 1 of f does not match formal parameter\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 4327,
        "end_line": 4336,
        "comment": "",
        "child_ranges": [
            "(line 4328,col 5)-(line 4335,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInferredParam2()",
        "snippet": "  public void testInferredParam2() throws Exception {\n    reportMissingOverrides = CheckLevel.OFF;\n    testTypes(\n        \"/** @param {string} x */ function f(x) {}\" +\n        \"/** @constructor */ function Foo() {}\" +\n        \"/** @param {number} x */ Foo.prototype.bar = function(x) {};\" +\n        \"/** @constructor \\n * @extends {Foo} */ function SubFoo() {}\" +\n        \"/** @return {void} */ SubFoo.prototype.bar = \" +\n        \"    function(x) { f(x); }\",\n        \"actual parameter 1 of f does not match formal parameter\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 4338,
        "end_line": 4350,
        "comment": "",
        "child_ranges": [
            "(line 4339,col 5)-(line 4339,col 44)",
            "(line 4340,col 5)-(line 4349,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInferredParam3()",
        "snippet": "  public void testInferredParam3() throws Exception {\n    reportMissingOverrides = CheckLevel.OFF;\n    testTypes(\n        \"/** @param {string} x */ function f(x) {}\" +\n        \"/** @constructor */ function Foo() {}\" +\n        \"/** @param {number=} x */ Foo.prototype.bar = function(x) {};\" +\n        \"/** @constructor \\n * @extends {Foo} */ function SubFoo() {}\" +\n        \"/** @return {void} */ SubFoo.prototype.bar = \" +\n        \"    function(x) { f(x); }; (new SubFoo()).bar();\",\n        \"actual parameter 1 of f does not match formal parameter\\n\" +\n        \"found   : (number|undefined)\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 4352,
        "end_line": 4364,
        "comment": "",
        "child_ranges": [
            "(line 4353,col 5)-(line 4353,col 44)",
            "(line 4354,col 5)-(line 4363,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInferredParam4()",
        "snippet": "  public void testInferredParam4() throws Exception {\n    reportMissingOverrides = CheckLevel.OFF;\n    testTypes(\n        \"/** @param {string} x */ function f(x) {}\" +\n        \"/** @constructor */ function Foo() {}\" +\n        \"/** @param {...number} x */ Foo.prototype.bar = function(x) {};\" +\n        \"/** @constructor \\n * @extends {Foo} */ function SubFoo() {}\" +\n        \"/** @return {void} */ SubFoo.prototype.bar = \" +\n        \"    function(x) { f(x); }; (new SubFoo()).bar();\",\n        \"actual parameter 1 of f does not match formal parameter\\n\" +\n        \"found   : (number|undefined)\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 4366,
        "end_line": 4378,
        "comment": "",
        "child_ranges": [
            "(line 4367,col 5)-(line 4367,col 44)",
            "(line 4368,col 5)-(line 4377,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInferredParam5()",
        "snippet": "  public void testInferredParam5() throws Exception {\n    reportMissingOverrides = CheckLevel.OFF;\n    testTypes(\n        \"/** @param {string} x */ function f(x) {}\" +\n        \"/** @constructor */ function Foo() {}\" +\n        \"/** @param {...number} x */ Foo.prototype.bar = function(x) {};\" +\n        \"/** @constructor \\n * @extends {Foo} */ function SubFoo() {}\" +\n        \"/** @param {number=} x \\n * @param {...number} y  */ \" +\n        \"SubFoo.prototype.bar = \" +\n        \"    function(x, y) { f(x); }; (new SubFoo()).bar();\",\n        \"actual parameter 1 of f does not match formal parameter\\n\" +\n        \"found   : (number|undefined)\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 4380,
        "end_line": 4393,
        "comment": "",
        "child_ranges": [
            "(line 4381,col 5)-(line 4381,col 44)",
            "(line 4382,col 5)-(line 4392,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInferredParam6()",
        "snippet": "  public void testInferredParam6() throws Exception {\n    reportMissingOverrides = CheckLevel.OFF;\n    testTypes(\n        \"/** @param {string} x */ function f(x) {}\" +\n        \"/** @constructor */ function Foo() {}\" +\n        \"/** @param {number=} x */ Foo.prototype.bar = function(x) {};\" +\n        \"/** @constructor \\n * @extends {Foo} */ function SubFoo() {}\" +\n        \"/** @param {number=} x \\n * @param {number=} y */ \" +\n        \"SubFoo.prototype.bar = \" +\n        \"    function(x, y) { f(y); };\",\n        \"actual parameter 1 of f does not match formal parameter\\n\" +\n        \"found   : (number|undefined)\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 4395,
        "end_line": 4408,
        "comment": "",
        "child_ranges": [
            "(line 4396,col 5)-(line 4396,col 44)",
            "(line 4397,col 5)-(line 4407,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testOverriddenReturn1()",
        "snippet": "  public void testOverriddenReturn1() throws Exception {\n    testTypes(\n        \"/** @constructor */ function Foo() {}\" +\n        \"/** @return {Object} */ Foo.prototype.bar = \" +\n        \"    function() { return {}; };\" +\n        \"/** @constructor \\n * @extends {Foo} */ function SubFoo() {}\" +\n        \"/** @return {SubFoo}\\n * @override */ SubFoo.prototype.bar = \" +\n        \"    function() { return new Foo(); }\",\n        \"inconsistent return type\\n\" +\n        \"found   : Foo\\n\" +\n        \"required: (SubFoo|null)\");\n  }\n",
        "begin_line": 4410,
        "end_line": 4421,
        "comment": "",
        "child_ranges": [
            "(line 4411,col 5)-(line 4420,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testOverriddenReturn2()",
        "snippet": "  public void testOverriddenReturn2() throws Exception {\n    testTypes(\n        \"/** @constructor */ function Foo() {}\" +\n        \"/** @return {SubFoo} */ Foo.prototype.bar = \" +\n        \"    function() { return new SubFoo(); };\" +\n        \"/** @constructor \\n * @extends {Foo} */ function SubFoo() {}\" +\n        \"/** @return {Foo} x\\n * @override */ SubFoo.prototype.bar = \" +\n        \"    function() { return new SubFoo(); }\",\n        \"mismatch of the bar property type and the type of the \" +\n        \"property it overrides from superclass Foo\\n\" +\n        \"original: function (this:Foo): (SubFoo|null)\\n\" +\n        \"override: function (this:SubFoo): (Foo|null)\");\n  }\n",
        "begin_line": 4423,
        "end_line": 4435,
        "comment": "",
        "child_ranges": [
            "(line 4424,col 5)-(line 4434,col 56)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testThis1()",
        "snippet": "  public void testThis1() throws Exception {\n    testTypes(\"var goog = {};\" +\n        \"/** @constructor */goog.A = function(){};\" +\n        \"/** @return {number} */\" +\n        \"goog.A.prototype.n = function() { return this };\",\n        \"inconsistent return type\\n\" +\n        \"found   : goog.A\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 4437,
        "end_line": 4445,
        "comment": "",
        "child_ranges": [
            "(line 4438,col 5)-(line 4444,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testThis2()",
        "snippet": "  public void testThis2() throws Exception {\n    testTypes(\"var goog = {};\" +\n        \"/** @constructor */goog.A = function(){\" +\n        \"  this.foo = null;\" +\n        \"};\" +\n        \"/** @return {number} */\" +\n        \"goog.A.prototype.n = function() { return this.foo };\",\n        \"inconsistent return type\\n\" +\n        \"found   : null\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 4447,
        "end_line": 4457,
        "comment": "",
        "child_ranges": [
            "(line 4448,col 5)-(line 4456,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testThis3()",
        "snippet": "  public void testThis3() throws Exception {\n    testTypes(\"var goog = {};\" +\n        \"/** @constructor */goog.A = function(){\" +\n        \"  this.foo = null;\" +\n        \"  this.foo = 5;\" +\n        \"};\");\n  }\n",
        "begin_line": 4459,
        "end_line": 4465,
        "comment": "",
        "child_ranges": [
            "(line 4460,col 5)-(line 4464,col 14)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testThis4()",
        "snippet": "  public void testThis4() throws Exception {\n    testTypes(\"var goog = {};\" +\n        \"/** @constructor */goog.A = function(){\" +\n        \"  /** @type {string?} */this.foo = null;\" +\n        \"};\" +\n        \"/** @return {number} */goog.A.prototype.n = function() {\" +\n        \"  return this.foo };\",\n        \"inconsistent return type\\n\" +\n        \"found   : (null|string)\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 4467,
        "end_line": 4477,
        "comment": "",
        "child_ranges": [
            "(line 4468,col 5)-(line 4476,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testThis5()",
        "snippet": "  public void testThis5() throws Exception {\n    testTypes(\"/** @this Date\\n@return {number}*/function h() { return this }\",\n        \"inconsistent return type\\n\" +\n        \"found   : Date\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 4479,
        "end_line": 4484,
        "comment": "",
        "child_ranges": [
            "(line 4480,col 5)-(line 4483,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testThis6()",
        "snippet": "  public void testThis6() throws Exception {\n    testTypes(\"var goog = {};\" +\n        \"/** @constructor\\n@return {!Date} */\" +\n        \"goog.A = function(){ return this };\",\n        \"inconsistent return type\\n\" +\n        \"found   : goog.A\\n\" +\n        \"required: Date\");\n  }\n",
        "begin_line": 4486,
        "end_line": 4493,
        "comment": "",
        "child_ranges": [
            "(line 4487,col 5)-(line 4492,col 26)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testThis7()",
        "snippet": "  public void testThis7() throws Exception {\n    testTypes(\"/** @constructor */function A(){};\" +\n        \"/** @return {number} */A.prototype.n = function() { return this };\",\n        \"inconsistent return type\\n\" +\n        \"found   : A\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 4495,
        "end_line": 4501,
        "comment": "",
        "child_ranges": [
            "(line 4496,col 5)-(line 4500,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testThis8()",
        "snippet": "  public void testThis8() throws Exception {\n    testTypes(\"/** @constructor */function A(){\" +\n        \"  /** @type {string?} */this.foo = null;\" +\n        \"};\" +\n        \"/** @return {number} */A.prototype.n = function() {\" +\n        \"  return this.foo };\",\n        \"inconsistent return type\\n\" +\n        \"found   : (null|string)\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 4503,
        "end_line": 4512,
        "comment": "",
        "child_ranges": [
            "(line 4504,col 5)-(line 4511,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testThis9()",
        "snippet": "  public void testThis9() throws Exception {\n    // In A.bar, the type of {@code this} is unknown.\n    testTypes(\"/** @constructor */function A(){};\" +\n        \"A.prototype.foo = 3;\" +\n        \"/** @return {string} */ A.bar = function() { return this.foo; };\");\n  }\n",
        "begin_line": 4514,
        "end_line": 4519,
        "comment": "",
        "child_ranges": [
            "(line 4516,col 5)-(line 4518,col 76)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testThis10()",
        "snippet": "  public void testThis10() throws Exception {\n    // In A.bar, the type of {@code this} is inferred from the @this tag.\n    testTypes(\"/** @constructor */function A(){};\" +\n        \"A.prototype.foo = 3;\" +\n        \"/** @this {A}\\n@return {string} */\" +\n        \"A.bar = function() { return this.foo; };\",\n        \"inconsistent return type\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 4521,
        "end_line": 4530,
        "comment": "",
        "child_ranges": [
            "(line 4523,col 5)-(line 4529,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testThis11()",
        "snippet": "  public void testThis11() throws Exception {\n    testTypes(\n        \"/** @param {number} x */ function f(x) {}\" +\n        \"/** @constructor */ function Ctor() {\" +\n        \"  /** @this {Date} */\" +\n        \"  this.method = function() {\" +\n        \"    f(this);\" +\n        \"  };\" +\n        \"}\",\n        \"actual parameter 1 of f does not match formal parameter\\n\" +\n        \"found   : Date\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 4532,
        "end_line": 4544,
        "comment": "",
        "child_ranges": [
            "(line 4533,col 5)-(line 4543,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testGlobalThis1()",
        "snippet": "  public void testGlobalThis1() throws Exception {\n    testTypes(\"/** @constructor */ function Window() {}\" +\n        \"/** @param {string} msg */ \" +\n        \"Window.prototype.alert = function(msg) {};\" +\n        \"this.alert(3);\",\n        \"actual parameter 1 of Window.prototype.alert \" +\n        \"does not match formal parameter\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 4546,
        "end_line": 4555,
        "comment": "",
        "child_ranges": [
            "(line 4547,col 5)-(line 4554,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testGlobalThis2()",
        "snippet": "  public void testGlobalThis2() throws Exception {\n    // this.alert = 3 doesn't count as a declaration, so this isn't a warning.\n    testTypes(\"/** @constructor */ function Bindow() {}\" +\n        \"/** @param {string} msg */ \" +\n        \"Bindow.prototype.alert = function(msg) {};\" +\n        \"this.alert = 3;\" +\n        \"(new Bindow()).alert(this.alert)\");\n  }\n",
        "begin_line": 4557,
        "end_line": 4564,
        "comment": "",
        "child_ranges": [
            "(line 4559,col 5)-(line 4563,col 44)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testGlobalThis2b()",
        "snippet": "  public void testGlobalThis2b() throws Exception {\n    testTypes(\"/** @constructor */ function Bindow() {}\" +\n        \"/** @param {string} msg */ \" +\n        \"Bindow.prototype.alert = function(msg) {};\" +\n        \"/** @return {number} */ this.alert = function() { return 3; };\" +\n        \"(new Bindow()).alert(this.alert())\",\n        \"actual parameter 1 of Bindow.prototype.alert \" +\n        \"does not match formal parameter\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 4567,
        "end_line": 4577,
        "comment": "",
        "child_ranges": [
            "(line 4568,col 5)-(line 4576,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testGlobalThis3()",
        "snippet": "  public void testGlobalThis3() throws Exception {\n    testTypes(\n        \"/** @param {string} msg */ \" +\n        \"function alert(msg) {};\" +\n        \"this.alert(3);\",\n        \"actual parameter 1 of global this.alert \" +\n        \"does not match formal parameter\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 4579,
        "end_line": 4588,
        "comment": "",
        "child_ranges": [
            "(line 4580,col 5)-(line 4587,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testGlobalThis4()",
        "snippet": "  public void testGlobalThis4() throws Exception {\n    testTypes(\n        \"/** @param {string} msg */ \" +\n        \"var alert = function(msg) {};\" +\n        \"this.alert(3);\",\n        \"actual parameter 1 of global this.alert \" +\n        \"does not match formal parameter\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 4590,
        "end_line": 4599,
        "comment": "",
        "child_ranges": [
            "(line 4591,col 5)-(line 4598,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testGlobalThis5()",
        "snippet": "  public void testGlobalThis5() throws Exception {\n    testTypes(\n        \"function f() {\" +\n        \"  /** @param {string} msg */ \" +\n        \"  var alert = function(msg) {};\" +\n        \"}\" +\n        \"this.alert(3);\",\n        \"Property alert never defined on global this\");\n  }\n",
        "begin_line": 4601,
        "end_line": 4609,
        "comment": "",
        "child_ranges": [
            "(line 4602,col 5)-(line 4608,col 55)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testGlobalThis6()",
        "snippet": "  public void testGlobalThis6() throws Exception {\n    testTypes(\n        \"/** @param {string} msg */ \" +\n        \"var alert = function(msg) {};\" +\n        \"var x = 3;\" +\n        \"x = 'msg';\" +\n        \"this.alert(this.x);\");\n  }\n",
        "begin_line": 4611,
        "end_line": 4618,
        "comment": "",
        "child_ranges": [
            "(line 4612,col 5)-(line 4617,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testGlobalThis7()",
        "snippet": "  public void testGlobalThis7() throws Exception {\n    testTypes(\n        \"/** @constructor */ function Window() {}\" +\n        \"/** @param {Window} msg */ \" +\n        \"var foo = function(msg) {};\" +\n        \"foo(this);\");\n  }\n",
        "begin_line": 4620,
        "end_line": 4626,
        "comment": "",
        "child_ranges": [
            "(line 4621,col 5)-(line 4625,col 22)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testGlobalThis8()",
        "snippet": "  public void testGlobalThis8() throws Exception {\n    testTypes(\n        \"/** @constructor */ function Window() {}\" +\n        \"/** @param {number} msg */ \" +\n        \"var foo = function(msg) {};\" +\n        \"foo(this);\",\n        \"actual parameter 1 of foo does not match formal parameter\\n\" +\n        \"found   : global this\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 4628,
        "end_line": 4637,
        "comment": "",
        "child_ranges": [
            "(line 4629,col 5)-(line 4636,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testGlobalThis9()",
        "snippet": "  public void testGlobalThis9() throws Exception {\n    testTypes(\n        // Window is not marked as a constructor, so the\n        // inheritance doesn't happen.\n        \"function Window() {}\" +\n        \"Window.prototype.alert = function() {};\" +\n        \"this.alert();\",\n        \"Property alert never defined on global this\");\n  }\n",
        "begin_line": 4639,
        "end_line": 4647,
        "comment": "",
        "child_ranges": [
            "(line 4640,col 5)-(line 4646,col 55)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testControlFlowRestrictsType1()",
        "snippet": "  public void testControlFlowRestrictsType1() throws Exception {\n    testTypes(\"/** @return {String?} */ function f() { return null; }\" +\n        \"/** @type {String?} */ var a = f();\" +\n        \"/** @type String */ var b = new String('foo');\" +\n        \"/** @type null */ var c = null;\" +\n        \"if (a) {\" +\n        \"  b = a;\" +\n        \"} else {\" +\n        \"  c = a;\" +\n        \"}\");\n  }\n",
        "begin_line": 4649,
        "end_line": 4659,
        "comment": "",
        "child_ranges": [
            "(line 4650,col 5)-(line 4658,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testControlFlowRestrictsType2()",
        "snippet": "  public void testControlFlowRestrictsType2() throws Exception {\n    testTypes(\"/** @return {(string,null)} */ function f() { return null; }\" +\n        \"/** @type {(string,null)} */ var a = f();\" +\n        \"/** @type string */ var b = 'foo';\" +\n        \"/** @type null */ var c = null;\" +\n        \"if (a) {\" +\n        \"  b = a;\" +\n        \"} else {\" +\n        \"  c = a;\" +\n        \"}\",\n        \"assignment\\n\" +\n        \"found   : (null|string)\\n\" +\n        \"required: null\");\n  }\n",
        "begin_line": 4661,
        "end_line": 4674,
        "comment": "",
        "child_ranges": [
            "(line 4662,col 5)-(line 4673,col 26)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testControlFlowRestrictsType3()",
        "snippet": "  public void testControlFlowRestrictsType3() throws Exception {\n    testTypes(\"/** @type {(string,void)} */\" +\n        \"var a;\" +\n        \"/** @type string */\" +\n        \"var b = 'foo';\" +\n        \"if (a) {\" +\n        \"  b = a;\" +\n        \"}\");\n  }\n",
        "begin_line": 4676,
        "end_line": 4684,
        "comment": "",
        "child_ranges": [
            "(line 4677,col 5)-(line 4683,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testControlFlowRestrictsType4()",
        "snippet": "  public void testControlFlowRestrictsType4() throws Exception {\n    testTypes(\"/** @param {string} a */ function f(a){}\" +\n        \"/** @type {(string,undefined)} */ var a;\" +\n        \"a && f(a);\");\n  }\n",
        "begin_line": 4686,
        "end_line": 4690,
        "comment": "",
        "child_ranges": [
            "(line 4687,col 5)-(line 4689,col 22)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testControlFlowRestrictsType5()",
        "snippet": "  public void testControlFlowRestrictsType5() throws Exception {\n    testTypes(\"/** @param {undefined} a */ function f(a){}\" +\n        \"/** @type {(!Array,undefined)} */ var a;\" +\n        \"a || f(a);\");\n  }\n",
        "begin_line": 4692,
        "end_line": 4696,
        "comment": "",
        "child_ranges": [
            "(line 4693,col 5)-(line 4695,col 22)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testControlFlowRestrictsType6()",
        "snippet": "  public void testControlFlowRestrictsType6() throws Exception {\n    testTypes(\"/** @param {undefined} x */ function f(x) {}\" +\n        \"/** @type {(string,undefined)} */ var a;\" +\n        \"a && f(a);\",\n        \"actual parameter 1 of f does not match formal parameter\\n\" +\n        \"found   : string\\n\" +\n        \"required: undefined\");\n  }\n",
        "begin_line": 4698,
        "end_line": 4705,
        "comment": "",
        "child_ranges": [
            "(line 4699,col 5)-(line 4704,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testControlFlowRestrictsType7()",
        "snippet": "  public void testControlFlowRestrictsType7() throws Exception {\n    testTypes(\"/** @param {undefined} x */ function f(x) {}\" +\n        \"/** @type {(string,undefined)} */ var a;\" +\n        \"a && f(a);\",\n        \"actual parameter 1 of f does not match formal parameter\\n\" +\n        \"found   : string\\n\" +\n        \"required: undefined\");\n  }\n",
        "begin_line": 4707,
        "end_line": 4714,
        "comment": "",
        "child_ranges": [
            "(line 4708,col 5)-(line 4713,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testControlFlowRestrictsType8()",
        "snippet": "  public void testControlFlowRestrictsType8() throws Exception {\n    testTypes(\"/** @param {undefined} a */ function f(a){}\" +\n        \"/** @type {(!Array,undefined)} */ var a;\" +\n        \"if (a || f(a)) {}\");\n  }\n",
        "begin_line": 4716,
        "end_line": 4720,
        "comment": "",
        "child_ranges": [
            "(line 4717,col 5)-(line 4719,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testControlFlowRestrictsType9()",
        "snippet": "  public void testControlFlowRestrictsType9() throws Exception {\n    testTypes(\"/** @param {number?} x\\n * @return {number}*/\\n\" +\n        \"var f = function(x) {\\n\" +\n        \"if (!x || x == 1) { return 1; } else { return x; }\\n\" +\n        \"};\");\n  }\n",
        "begin_line": 4722,
        "end_line": 4727,
        "comment": "",
        "child_ranges": [
            "(line 4723,col 5)-(line 4726,col 14)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testControlFlowRestrictsType10()",
        "snippet": "  public void testControlFlowRestrictsType10() throws Exception {\n    // We should correctly infer that y will be (null|{}) because\n    // the loop wraps around.\n    testTypes(\"/** @param {number} x */ function f(x) {}\" +\n        \"function g() {\" +\n        \"  var y = null;\" +\n        \"  for (var i = 0; i < 10; i++) {\" +\n        \"    f(y);\" +\n        \"    if (y != null) {\" +\n        \"      // y is None the first time it goes thru this branch\\n\" +\n        \"    } else {\" +\n        \"      y = {};\" +\n        \"    }\" +\n        \"  }\" +\n        \"};\",\n        \"actual parameter 1 of f does not match formal parameter\\n\" +\n        \"found   : (null|{})\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 4729,
        "end_line": 4747,
        "comment": "",
        "child_ranges": [
            "(line 4732,col 5)-(line 4746,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testControlFlowRestrictsType11()",
        "snippet": "  public void testControlFlowRestrictsType11() throws Exception {\n    testTypes(\"/** @param {boolean} x */ function f(x) {}\" +\n        \"function g() {\" +\n        \"  var y = null;\" +\n        \"  if (y != null) {\" +\n        \"    for (var i = 0; i < 10; i++) {\" +\n        \"      f(y);\" +\n        \"    }\" +\n        \"  }\" +\n        \"};\",\n        \"condition always evaluates to false\\n\" +\n        \"left : null\\n\" +\n        \"right: null\");\n  }\n",
        "begin_line": 4749,
        "end_line": 4762,
        "comment": "",
        "child_ranges": [
            "(line 4750,col 5)-(line 4761,col 23)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testSwitchCase3()",
        "snippet": "  public void testSwitchCase3() throws Exception {\n    testTypes(\"/** @type String */\" +\n        \"var a = new String('foo');\" +\n        \"switch (a) { case 'A': }\");\n  }\n",
        "begin_line": 4764,
        "end_line": 4768,
        "comment": "",
        "child_ranges": [
            "(line 4765,col 5)-(line 4767,col 36)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testSwitchCase4()",
        "snippet": "  public void testSwitchCase4() throws Exception {\n    testTypes(\"/** @type {(string,Null)} */\" +\n        \"var a = 'foo';\" +\n        \"switch (a) { case 'A':break; case null:break; }\");\n  }\n",
        "begin_line": 4770,
        "end_line": 4774,
        "comment": "",
        "child_ranges": [
            "(line 4771,col 5)-(line 4773,col 59)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testSwitchCase5()",
        "snippet": "  public void testSwitchCase5() throws Exception {\n    testTypes(\"/** @type {(String,Null)} */\" +\n        \"var a = new String('foo');\" +\n        \"switch (a) { case 'A':break; case null:break; }\");\n  }\n",
        "begin_line": 4776,
        "end_line": 4780,
        "comment": "",
        "child_ranges": [
            "(line 4777,col 5)-(line 4779,col 59)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testSwitchCase6()",
        "snippet": "  public void testSwitchCase6() throws Exception {\n    testTypes(\"/** @type {(Number,Null)} */\" +\n        \"var a = new Number(5);\" +\n        \"switch (a) { case 5:break; case null:break; }\");\n  }\n",
        "begin_line": 4782,
        "end_line": 4786,
        "comment": "",
        "child_ranges": [
            "(line 4783,col 5)-(line 4785,col 57)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testSwitchCase7()",
        "snippet": "  public void testSwitchCase7() throws Exception {\n    // This really tests the inference inside the case.\n    testTypes(\n        \"/**\\n\" +\n        \" * @param {number} x\\n\" +\n        \" * @return {number}\\n\" +\n        \" */\\n\" +\n        \"function g(x) { return 5; }\" +\n        \"function f() {\" +\n        \"  var x = {};\" +\n        \"  x.foo = '3';\" +\n        \"  switch (3) { case g(x.foo): return 3; }\" +\n        \"}\",\n        \"actual parameter 1 of g does not match formal parameter\\n\" +\n        \"found   : string\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 4788,
        "end_line": 4804,
        "comment": "",
        "child_ranges": [
            "(line 4790,col 5)-(line 4803,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testSwitchCase8()",
        "snippet": "  public void testSwitchCase8() throws Exception {\n    // This really tests the inference inside the switch clause.\n    testTypes(\n        \"/**\\n\" +\n        \" * @param {number} x\\n\" +\n        \" * @return {number}\\n\" +\n        \" */\\n\" +\n        \"function g(x) { return 5; }\" +\n        \"function f() {\" +\n        \"  var x = {};\" +\n        \"  x.foo = '3';\" +\n        \"  switch (g(x.foo)) { case 3: return 3; }\" +\n        \"}\",\n        \"actual parameter 1 of g does not match formal parameter\\n\" +\n        \"found   : string\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 4806,
        "end_line": 4822,
        "comment": "",
        "child_ranges": [
            "(line 4808,col 5)-(line 4821,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testNoTypeCheck1()",
        "snippet": "  public void testNoTypeCheck1() throws Exception {\n    testTypes(\"/** @notypecheck */function foo() { new 4 }\");\n  }\n",
        "begin_line": 4824,
        "end_line": 4826,
        "comment": "",
        "child_ranges": [
            "(line 4825,col 5)-(line 4825,col 61)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testNoTypeCheck2()",
        "snippet": "  public void testNoTypeCheck2() throws Exception {\n    testTypes(\"/** @notypecheck */var foo = function() { new 4 }\");\n  }\n",
        "begin_line": 4828,
        "end_line": 4830,
        "comment": "",
        "child_ranges": [
            "(line 4829,col 5)-(line 4829,col 67)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testNoTypeCheck3()",
        "snippet": "  public void testNoTypeCheck3() throws Exception {\n    testTypes(\"/** @notypecheck */var foo = function bar() { new 4 }\");\n  }\n",
        "begin_line": 4832,
        "end_line": 4834,
        "comment": "",
        "child_ranges": [
            "(line 4833,col 5)-(line 4833,col 71)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testNoTypeCheck4()",
        "snippet": "  public void testNoTypeCheck4() throws Exception {\n    testTypes(\"var foo;\" +\n        \"/** @notypecheck */foo = function() { new 4 }\");\n  }\n",
        "begin_line": 4836,
        "end_line": 4839,
        "comment": "",
        "child_ranges": [
            "(line 4837,col 5)-(line 4838,col 57)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testNoTypeCheck5()",
        "snippet": "  public void testNoTypeCheck5() throws Exception {\n    testTypes(\"var foo;\" +\n        \"foo = /** @notypecheck */function() { new 4 }\");\n  }\n",
        "begin_line": 4841,
        "end_line": 4844,
        "comment": "",
        "child_ranges": [
            "(line 4842,col 5)-(line 4843,col 57)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testNoTypeCheck6()",
        "snippet": "  public void testNoTypeCheck6() throws Exception {\n    testTypes(\"var foo;\" +\n        \"/** @notypecheck */foo = function bar() { new 4 }\");\n  }\n",
        "begin_line": 4846,
        "end_line": 4849,
        "comment": "",
        "child_ranges": [
            "(line 4847,col 5)-(line 4848,col 61)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testNoTypeCheck7()",
        "snippet": "  public void testNoTypeCheck7() throws Exception {\n    testTypes(\"var foo;\" +\n        \"foo = /** @notypecheck */function bar() { new 4 }\");\n  }\n",
        "begin_line": 4851,
        "end_line": 4854,
        "comment": "",
        "child_ranges": [
            "(line 4852,col 5)-(line 4853,col 61)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testNoTypeCheck8()",
        "snippet": "  public void testNoTypeCheck8() throws Exception {\n    testTypes(\"/** @fileoverview \\n * @notypecheck */ var foo;\" +\n        \"var bar = 3; /** @param {string} x */ function f(x) {} f(bar);\");\n  }\n",
        "begin_line": 4856,
        "end_line": 4859,
        "comment": "",
        "child_ranges": [
            "(line 4857,col 5)-(line 4858,col 74)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testNoTypeCheck9()",
        "snippet": "  public void testNoTypeCheck9() throws Exception {\n    testTypes(\"/** @notypecheck */ function g() { }\" +\n        \" /** @type {string} */ var a = 1\",\n        \"initializing variable\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\"\n        );\n  }\n",
        "begin_line": 4861,
        "end_line": 4868,
        "comment": "",
        "child_ranges": [
            "(line 4862,col 5)-(line 4867,col 10)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testNoTypeCheck10()",
        "snippet": "  public void testNoTypeCheck10() throws Exception {\n    testTypes(\"/** @notypecheck */ function g() { }\" +\n        \" function h() {/** @type {string} */ var a = 1}\",\n        \"initializing variable\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\"\n        );\n  }\n",
        "begin_line": 4870,
        "end_line": 4877,
        "comment": "",
        "child_ranges": [
            "(line 4871,col 5)-(line 4876,col 10)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testNoTypeCheck11()",
        "snippet": "  public void testNoTypeCheck11() throws Exception {\n    testTypes(\"/** @notypecheck */ function g() { }\" +\n        \"/** @notypecheck */ function h() {/** @type {string} */ var a = 1}\"\n        );\n  }\n",
        "begin_line": 4879,
        "end_line": 4883,
        "comment": "",
        "child_ranges": [
            "(line 4880,col 5)-(line 4882,col 10)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testNoTypeCheck12()",
        "snippet": "  public void testNoTypeCheck12() throws Exception {\n    testTypes(\"/** @notypecheck */ function g() { }\" +\n        \"function h() {/** @type {string}\\n * @notypecheck\\n*/ var a = 1}\"\n        );\n  }\n",
        "begin_line": 4885,
        "end_line": 4889,
        "comment": "",
        "child_ranges": [
            "(line 4886,col 5)-(line 4888,col 10)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testNoTypeCheck13()",
        "snippet": "  public void testNoTypeCheck13() throws Exception {\n    testTypes(\"/** @notypecheck */ function g() { }\" +\n        \"function h() {/** @type {string}\\n * @notypecheck\\n*/ var a = 1;\" +\n        \"/** @type {string}*/ var b = 1}\",\n        \"initializing variable\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\"\n        );\n  }\n",
        "begin_line": 4891,
        "end_line": 4899,
        "comment": "",
        "child_ranges": [
            "(line 4892,col 5)-(line 4898,col 10)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testNoTypeCheck14()",
        "snippet": "  public void testNoTypeCheck14() throws Exception {\n    testTypes(\"/** @fileoverview \\n * @notypecheck */ function g() { }\" +\n        \"g(1,2,3)\");\n  }\n",
        "begin_line": 4901,
        "end_line": 4904,
        "comment": "",
        "child_ranges": [
            "(line 4902,col 5)-(line 4903,col 20)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testImplicitCast()",
        "snippet": "  public void testImplicitCast() throws Exception {\n    testTypes(\"/** @constructor */ function Element() {};\\n\" +\n             \"/** @type {string}\\n\" +\n             \"  * @implicitCast */\" +\n             \"Element.prototype.innerHTML;\",\n             \"(new Element).innerHTML = new Array();\", null, false);\n  }\n",
        "begin_line": 4906,
        "end_line": 4912,
        "comment": "",
        "child_ranges": [
            "(line 4907,col 5)-(line 4911,col 68)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testImplicitCastSubclassAccess()",
        "snippet": "  public void testImplicitCastSubclassAccess() throws Exception {\n    testTypes(\"/** @constructor */ function Element() {};\\n\" +\n             \"/** @type {string}\\n\" +\n             \"  * @implicitCast */\" +\n             \"Element.prototype.innerHTML;\" +\n             \"/** @constructor \\n @extends Element */\" +\n             \"function DIVElement() {};\",\n             \"(new DIVElement).innerHTML = new Array();\",\n             null, false);\n  }\n",
        "begin_line": 4914,
        "end_line": 4923,
        "comment": "",
        "child_ranges": [
            "(line 4915,col 5)-(line 4922,col 26)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testImplicitCastNotInExterns()",
        "snippet": "  public void testImplicitCastNotInExterns() throws Exception {\n    testTypes(\"/** @constructor */ function Element() {};\\n\" +\n             \"/** @type {string}\\n\" +\n             \"  * @implicitCast */\" +\n             \"Element.prototype.innerHTML;\" +\n             \"(new Element).innerHTML = new Array();\",\n             new String[] {\n               \"Illegal annotation on innerHTML. @implicitCast may only be \" +\n               \"used in externs.\",\n               \"assignment to property innerHTML of Element\\n\" +\n               \"found   : Array\\n\" +\n               \"required: string\"});\n  }\n",
        "begin_line": 4925,
        "end_line": 4937,
        "comment": "",
        "child_ranges": [
            "(line 4926,col 5)-(line 4936,col 36)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testNumberNode()",
        "snippet": "  public void testNumberNode() throws Exception {\n    Node n = typeCheck(Node.newNumber(0));\n\n    assertEquals(NUMBER_TYPE, n.getJSType());\n  }\n",
        "begin_line": 4939,
        "end_line": 4943,
        "comment": "",
        "child_ranges": [
            "(line 4940,col 5)-(line 4940,col 42)",
            "(line 4942,col 5)-(line 4942,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testStringNode()",
        "snippet": "  public void testStringNode() throws Exception {\n    Node n = typeCheck(Node.newString(\"hello\"));\n\n    assertEquals(STRING_TYPE, n.getJSType());\n  }\n",
        "begin_line": 4945,
        "end_line": 4949,
        "comment": "",
        "child_ranges": [
            "(line 4946,col 5)-(line 4946,col 48)",
            "(line 4948,col 5)-(line 4948,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBooleanNodeTrue()",
        "snippet": "  public void testBooleanNodeTrue() throws Exception {\n    Node trueNode = typeCheck(new Node(Token.TRUE));\n\n    assertEquals(BOOLEAN_TYPE, trueNode.getJSType());\n  }\n",
        "begin_line": 4951,
        "end_line": 4955,
        "comment": "",
        "child_ranges": [
            "(line 4952,col 5)-(line 4952,col 52)",
            "(line 4954,col 5)-(line 4954,col 53)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBooleanNodeFalse()",
        "snippet": "  public void testBooleanNodeFalse() throws Exception {\n    Node falseNode = typeCheck(new Node(Token.FALSE));\n\n    assertEquals(BOOLEAN_TYPE, falseNode.getJSType());\n  }\n",
        "begin_line": 4957,
        "end_line": 4961,
        "comment": "",
        "child_ranges": [
            "(line 4958,col 5)-(line 4958,col 54)",
            "(line 4960,col 5)-(line 4960,col 54)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testUndefinedNode()",
        "snippet": "  public void testUndefinedNode() throws Exception {\n    Node p = new Node(Token.ADD);\n    Node n = Node.newString(Token.NAME, \"undefined\");\n    p.addChildToBack(n);\n    p.addChildToBack(Node.newNumber(5));\n    typeCheck(p);\n\n    assertEquals(VOID_TYPE, n.getJSType());\n  }\n",
        "begin_line": 4963,
        "end_line": 4971,
        "comment": "",
        "child_ranges": [
            "(line 4964,col 5)-(line 4964,col 33)",
            "(line 4965,col 5)-(line 4965,col 53)",
            "(line 4966,col 5)-(line 4966,col 24)",
            "(line 4967,col 5)-(line 4967,col 40)",
            "(line 4968,col 5)-(line 4968,col 17)",
            "(line 4970,col 5)-(line 4970,col 43)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testNumberAutoboxing()",
        "snippet": "  public void testNumberAutoboxing() throws Exception {\n    testTypes(\"/** @type Number */var a = 4;\",\n        \"initializing variable\\n\" +\n        \"found   : number\\n\" +\n        \"required: (Number|null)\");\n  }\n",
        "begin_line": 4973,
        "end_line": 4978,
        "comment": "",
        "child_ranges": [
            "(line 4974,col 5)-(line 4977,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testNumberUnboxing()",
        "snippet": "  public void testNumberUnboxing() throws Exception {\n    testTypes(\"/** @type number */var a = new Number(4);\",\n        \"initializing variable\\n\" +\n        \"found   : Number\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 4980,
        "end_line": 4985,
        "comment": "",
        "child_ranges": [
            "(line 4981,col 5)-(line 4984,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testStringAutoboxing()",
        "snippet": "  public void testStringAutoboxing() throws Exception {\n    testTypes(\"/** @type String */var a = 'hello';\",\n        \"initializing variable\\n\" +\n        \"found   : string\\n\" +\n        \"required: (String|null)\");\n  }\n",
        "begin_line": 4987,
        "end_line": 4992,
        "comment": "",
        "child_ranges": [
            "(line 4988,col 5)-(line 4991,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testStringUnboxing()",
        "snippet": "  public void testStringUnboxing() throws Exception {\n    testTypes(\"/** @type string */var a = new String('hello');\",\n        \"initializing variable\\n\" +\n        \"found   : String\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 4994,
        "end_line": 4999,
        "comment": "",
        "child_ranges": [
            "(line 4995,col 5)-(line 4998,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBooleanAutoboxing()",
        "snippet": "  public void testBooleanAutoboxing() throws Exception {\n    testTypes(\"/** @type Boolean */var a = true;\",\n        \"initializing variable\\n\" +\n        \"found   : boolean\\n\" +\n        \"required: (Boolean|null)\");\n  }\n",
        "begin_line": 5001,
        "end_line": 5006,
        "comment": "",
        "child_ranges": [
            "(line 5002,col 5)-(line 5005,col 36)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBooleanUnboxing()",
        "snippet": "  public void testBooleanUnboxing() throws Exception {\n    testTypes(\"/** @type boolean */var a = new Boolean(false);\",\n        \"initializing variable\\n\" +\n        \"found   : Boolean\\n\" +\n        \"required: boolean\");\n  }\n",
        "begin_line": 5008,
        "end_line": 5013,
        "comment": "",
        "child_ranges": [
            "(line 5009,col 5)-(line 5012,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testIssue86()",
        "snippet": "  public void testIssue86() throws Exception {\n    testTypes(\n        \"/** @interface */ function I() {}\" +\n        \"/** @return {number} */ I.prototype.get = function(){};\" +\n        \"/** @constructor \\n * @implements {I} */ function F() {}\" +\n        \"/** @override */ F.prototype.get = function() { return true; };\",\n        \"inconsistent return type\\n\" +\n        \"found   : boolean\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 5015,
        "end_line": 5024,
        "comment": "",
        "child_ranges": [
            "(line 5016,col 5)-(line 5023,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testIssue124()",
        "snippet": "  public void testIssue124() throws Exception {\n    testTypes(\n        \"var t = null;\" +\n        \"function test() {\" +\n        \"  if (t != null) { t = null; }\" +\n        \"  t = 1;\" +\n        \"}\");\n  }\n",
        "begin_line": 5026,
        "end_line": 5033,
        "comment": "",
        "child_ranges": [
            "(line 5027,col 5)-(line 5032,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testIssue124b()",
        "snippet": "  public void testIssue124b() throws Exception {\n    testTypes(\n        \"var t = null;\" +\n        \"function test() {\" +\n        \"  if (t != null) { t = null; }\" +\n        \"  t = undefined;\" +\n        \"}\",\n        \"condition always evaluates to false\\n\" +\n        \"left : (null|undefined)\\n\" +\n        \"right: null\");\n  }\n",
        "begin_line": 5035,
        "end_line": 5045,
        "comment": "",
        "child_ranges": [
            "(line 5036,col 5)-(line 5044,col 23)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testIssue259()",
        "snippet": "  public void testIssue259() throws Exception {\n    testTypes(\n        \"/** @param {number} x */ function f(x) {}\" +\n        \"/** @constructor */\" +\n        \"var Clock = function() {\" +\n        \"  /** @constructor */\" +\n        \"  this.Date = function() {};\" +\n        \"  f(new this.Date());\" +\n        \"};\",\n        \"actual parameter 1 of f does not match formal parameter\\n\" +\n        \"found   : this.Date\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 5047,
        "end_line": 5059,
        "comment": "",
        "child_ranges": [
            "(line 5048,col 5)-(line 5058,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testIssue301()",
        "snippet": "  public void testIssue301() throws Exception {\n    testTypes(\n        \"Array.indexOf = function() {};\" +\n        \"var s = 'hello';\" +\n        \"alert(s.toLowerCase.indexOf('1'));\",\n        \"Property indexOf never defined on String.prototype.toLowerCase\");\n  }\n",
        "begin_line": 5061,
        "end_line": 5067,
        "comment": "",
        "child_ranges": [
            "(line 5062,col 5)-(line 5066,col 74)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testIssue380()",
        "snippet": "  public void testIssue380() throws Exception {\n    testTypes(\n        \"/** @type { function(string): {innerHTML: string} } */\" +\n        \"document.getElementById;\" +\n        \"var list = /** @type {!Array.<string>} */ ['hello', 'you'];\\n\" +\n        \"list.push('?');\\n\" +\n        \"document.getElementById('node').innerHTML = list.toString();\");\n  }\n",
        "begin_line": 5069,
        "end_line": 5076,
        "comment": "",
        "child_ranges": [
            "(line 5070,col 5)-(line 5075,col 72)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBug592170()",
        "snippet": "  public void testBug592170() throws Exception {\n    testTypes(\n        \"/** @param {Function} opt_f ... */\" +\n        \"function foo(opt_f) {\" +\n        \"  /** @type {Function} */\" +\n        \"  return opt_f || function () {};\" +\n        \"}\");\n  }\n",
        "begin_line": 5083,
        "end_line": 5090,
        "comment": "\n   * Tests that the || operator is type checked correctly, that is of\n   * the type of the first argument or of the second argument. See\n   * bugid 592170 for more details.\n   ",
        "child_ranges": [
            "(line 5084,col 5)-(line 5089,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBug901455()",
        "snippet": "  public void testBug901455() throws Exception {\n    testTypes(\"/** @return {(number,undefined)} */ function a() { return 3; }\" +\n        \"var b = undefined === a()\");\n    testTypes(\"/** @return {(number,undefined)} */ function a() { return 3; }\" +\n        \"var b = a() === undefined\");\n  }\n",
        "begin_line": 5097,
        "end_line": 5102,
        "comment": "\n   * Tests that undefined can be compared shallowly to a value of type\n   * (number,undefined) regardless of the side on which the undefined\n   * value is.\n   ",
        "child_ranges": [
            "(line 5098,col 5)-(line 5099,col 37)",
            "(line 5100,col 5)-(line 5101,col 37)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBug908701()",
        "snippet": "  public void testBug908701() throws Exception {\n    testTypes(\"/** @type {String} */var s = new String('foo');\" +\n        \"var b = s.match(/a/) != null;\");\n  }\n",
        "begin_line": 5107,
        "end_line": 5110,
        "comment": "\n   * Tests that the match method of strings returns nullable arrays.\n   ",
        "child_ranges": [
            "(line 5108,col 5)-(line 5109,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBug908625()",
        "snippet": "  public void testBug908625() throws Exception {\n    testTypes(\"/** @constructor */function A(){}\" +\n        \"/** @constructor\\n * @extends A */function B(){}\" +\n        \"/** @param {B} b\" +\n        \"\\n @return {(A,undefined)} */function foo(b){return b}\");\n  }\n",
        "begin_line": 5115,
        "end_line": 5120,
        "comment": "\n   * Tests that named types play nicely with subtyping.\n   ",
        "child_ranges": [
            "(line 5116,col 5)-(line 5119,col 66)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBug911118()",
        "snippet": "  public void testBug911118() throws Exception {\n    // verifying the type assigned to function expressions assigned variables\n    Scope s = parseAndTypeCheckWithScope(\"var a = function(){};\").scope;\n    JSType type = s.getVar(\"a\").getType();\n    assertEquals(\"function (): undefined\", type.toString());\n\n    // verifying the bug example\n    testTypes(\"function nullFunction() {};\" +\n        \"var foo = nullFunction;\" +\n        \"foo = function() {};\" +\n        \"foo();\");\n  }\n",
        "begin_line": 5126,
        "end_line": 5137,
        "comment": "\n   * Tests that assigning two untyped functions to a variable whose type is\n   * inferred and calling this variable is legal.\n   ",
        "child_ranges": [
            "(line 5128,col 5)-(line 5128,col 72)",
            "(line 5129,col 5)-(line 5129,col 42)",
            "(line 5130,col 5)-(line 5130,col 60)",
            "(line 5133,col 5)-(line 5136,col 18)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBug909000()",
        "snippet": "  public void testBug909000() throws Exception {\n    testTypes(\"/** @constructor */function A(){}\\n\" +\n        \"/** @param {!A} a\\n\" +\n        \"@return {boolean}*/\\n\" +\n        \"function y(a) { return a }\",\n        \"inconsistent return type\\n\" +\n        \"found   : A\\n\" +\n        \"required: boolean\");\n  }\n",
        "begin_line": 5139,
        "end_line": 5147,
        "comment": "",
        "child_ranges": [
            "(line 5140,col 5)-(line 5146,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBug930117()",
        "snippet": "  public void testBug930117() throws Exception {\n    testTypes(\n        \"/** @param {boolean} x */function f(x){}\" +\n        \"f(null);\",\n        \"actual parameter 1 of f does not match formal parameter\\n\" +\n        \"found   : null\\n\" +\n        \"required: boolean\");\n  }\n",
        "begin_line": 5149,
        "end_line": 5156,
        "comment": "",
        "child_ranges": [
            "(line 5150,col 5)-(line 5155,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBug1484445()",
        "snippet": "  public void testBug1484445() throws Exception {\n    testTypes(\n        \"/** @constructor */ function Foo() {}\" +\n        \"/** @type {number?} */ Foo.prototype.bar = null;\" +\n        \"/** @type {number?} */ Foo.prototype.baz = null;\" +\n        \"/** @param {Foo} foo */\" +\n        \"function f(foo) {\" +\n        \"  while (true) {\" +\n        \"    if (foo.bar == null && foo.baz == null) {\" +\n        \"      foo.bar;\" +\n        \"    }\" +\n        \"  }\" +\n        \"}\");\n  }\n",
        "begin_line": 5158,
        "end_line": 5171,
        "comment": "",
        "child_ranges": [
            "(line 5159,col 5)-(line 5170,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBug1859535()",
        "snippet": "  public void testBug1859535() throws Exception {\n    testTypes(\n        \"/**\\n\" +\n        \" * @param {Function} childCtor Child class.\\n\" +\n        \" * @param {Function} parentCtor Parent class.\\n\" +\n        \" */\" +\n        \"var inherits = function(childCtor, parentCtor) {\" +\n        \"  /** @constructor */\" +\n        \"  function tempCtor() {};\" +\n        \"  tempCtor.prototype = parentCtor.prototype;\" +\n        \"  childCtor.superClass_ = parentCtor.prototype;\" +\n        \"  childCtor.prototype = new tempCtor();\" +\n        \"  /** @override */ childCtor.prototype.constructor = childCtor;\" +\n        \"};\" +\n        \"/**\" +\n        \" * @param {Function} constructor\\n\" +\n        \" * @param {Object} var_args\\n\" +\n        \" * @return {Object}\\n\" +\n        \" */\" +\n        \"var factory = function(constructor, var_args) {\" +\n        \"  /** @constructor */\" +\n        \"  var tempCtor = function() {};\" +\n        \"  tempCtor.prototype = constructor.prototype;\" +\n        \"  var obj = new tempCtor();\" +\n        \"  constructor.apply(obj, arguments);\" +\n        \"  return obj;\" +\n        \"};\");\n  }\n",
        "begin_line": 5173,
        "end_line": 5200,
        "comment": "",
        "child_ranges": [
            "(line 5174,col 5)-(line 5199,col 14)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBug1940591()",
        "snippet": "  public void testBug1940591() throws Exception {\n    testTypes(\n        \"/** @type {Object} */\" +\n        \"var a = {};\\n\" +\n        \"/** @type {number} */\\n\" +\n        \"a.name = 0;\\n\" +\n        \"/**\\n\" +\n        \" * @param {Function} x anything.\\n\" +\n        \" */\\n\" +\n        \"a.g = function(x) { x.name = 'a'; }\");\n  }\n",
        "begin_line": 5202,
        "end_line": 5212,
        "comment": "",
        "child_ranges": [
            "(line 5203,col 5)-(line 5211,col 47)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBug1942972()",
        "snippet": "  public void testBug1942972() throws Exception {\n    testTypes(\n        \"var google = {\\n\"+\n        \"  gears: {\\n\" +\n        \"    factory: {},\\n\" +\n        \"    workerPool: {}\\n\" +\n        \"  }\\n\" +\n        \"};\\n\" +\n        \"\\n\" +\n        \"google.gears = {factory: {}};\\n\");\n  }\n",
        "begin_line": 5214,
        "end_line": 5224,
        "comment": "",
        "child_ranges": [
            "(line 5215,col 5)-(line 5223,col 43)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBug1943776()",
        "snippet": "  public void testBug1943776() throws Exception {\n    testTypes(\n        \"/** @return  {{foo: Array}} */\" +\n        \"function bar() {\" +\n        \"  return {foo: []};\" +\n        \"}\");\n  }\n",
        "begin_line": 5226,
        "end_line": 5232,
        "comment": "",
        "child_ranges": [
            "(line 5227,col 5)-(line 5231,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBug1987544()",
        "snippet": "  public void testBug1987544() throws Exception {\n    testTypes(\n        \"/** @param {string} x */ function foo(x) {}\" +\n        \"var duration;\" +\n        \"if (true && !(duration = 3)) {\" +\n        \" foo(duration);\" +\n        \"}\",\n        \"actual parameter 1 of foo does not match formal parameter\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 5234,
        "end_line": 5244,
        "comment": "",
        "child_ranges": [
            "(line 5235,col 5)-(line 5243,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBug1940769()",
        "snippet": "  public void testBug1940769() throws Exception {\n    testTypes(\n        \"/** @return {!Object} */ \" +\n        \"function proto(obj) { return obj.prototype; }\" +\n        \"/** @constructor */ function Map() {}\" +\n        \"/**\\n\" +\n        \" * @constructor\\n\" +\n        \" * @extends {Map}\\n\" +\n        \" */\" +\n        \"function Map2() { Map.call(this); };\" +\n        \"Map2.prototype = proto(Map);\");\n  }\n",
        "begin_line": 5246,
        "end_line": 5257,
        "comment": "",
        "child_ranges": [
            "(line 5247,col 5)-(line 5256,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBug2335992()",
        "snippet": "  public void testBug2335992() throws Exception {\n    testTypes(\n        \"/** @return {*} */ function f() { return 3; }\" +\n        \"var x = f();\" +\n        \"/** @type {string} */\" +\n        \"x.y = 3;\",\n        \"assignment to property y of x\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 5259,
        "end_line": 5268,
        "comment": "",
        "child_ranges": [
            "(line 5260,col 5)-(line 5267,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBug2341812()",
        "snippet": "  public void testBug2341812() throws Exception {\n    testTypes(\n        \"/** @interface */\" +\n        \"function EventTarget() {}\" +\n        \"/** @constructor \\n * @implements {EventTarget} */\" +\n        \"function Node() {}\" +\n        \"/** @type {number} */ Node.prototype.index;\" +\n        \"/** @param {EventTarget} x \\n * @return {string} */\" +\n        \"function foo(x) { return x.index; }\");\n  }\n",
        "begin_line": 5270,
        "end_line": 5279,
        "comment": "",
        "child_ranges": [
            "(line 5271,col 5)-(line 5278,col 47)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testScopedConstructors1()",
        "snippet": "  public void testScopedConstructors1() throws Exception {\n    testTypes(\n        \"function foo1() { \" +\n        \"  /** @constructor */ function Bar() { \" +\n        \"    /** @type {number} */ this.x = 3;\" +\n        \"  }\" +\n        \"}\" +\n        \"function foo2() { \" +\n        \"  /** @constructor */ function Bar() { \" +\n        \"    /** @type {string} */ this.x = 'y';\" +\n        \"  }\" +\n        \"  /** \" +\n        \"   * @param {Bar} b\\n\" +\n        \"   * @return {number}\\n\" +\n        \"   */\" +\n        \"  function baz(b) { return b.x; }\" +\n        \"}\",\n        \"inconsistent return type\\n\" +\n        \"found   : string\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 5281,
        "end_line": 5301,
        "comment": "",
        "child_ranges": [
            "(line 5282,col 5)-(line 5300,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testScopedConstructors2()",
        "snippet": "  public void testScopedConstructors2() throws Exception {\n    testTypes(\n        \"/** @param {Function} f */\" +\n        \"function foo1(f) {\" +\n        \"  /** @param {Function} g */\" +\n        \"  f.prototype.bar = function(g) {};\" +\n        \"}\");\n  }\n",
        "begin_line": 5303,
        "end_line": 5310,
        "comment": "",
        "child_ranges": [
            "(line 5304,col 5)-(line 5309,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testQualifiedNameInference1()",
        "snippet": "  public void testQualifiedNameInference1() throws Exception {\n    testTypes(\n        \"/** @constructor */ function Foo() {}\" +\n        \"/** @type {number?} */ Foo.prototype.bar = null;\" +\n        \"/** @type {number?} */ Foo.prototype.baz = null;\" +\n        \"/** @param {Foo} foo */\" +\n        \"function f(foo) {\" +\n        \"  while (true) {\" +\n        \"    if (!foo.baz) break; \" +\n        \"    foo.bar = null;\" +\n        \"  }\" +\n        // Tests a bug where this condition always evaluated to true.\n        \"  return foo.bar == null;\" +\n        \"}\");\n  }\n",
        "begin_line": 5312,
        "end_line": 5326,
        "comment": "",
        "child_ranges": [
            "(line 5313,col 5)-(line 5325,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testQualifiedNameInference2()",
        "snippet": "  public void testQualifiedNameInference2() throws Exception {\n    testTypes(\n        \"var x = {};\" +\n        \"x.y = c;\" +\n        \"function f(a, b) {\" +\n        \"  if (a) {\" +\n        \"    if (b) \" +\n        \"      x.y = 2;\" +\n        \"    else \" +\n        \"      x.y = 1;\" +\n        \"  }\" +\n        \"  return x.y == null;\" +\n        \"}\");\n  }\n",
        "begin_line": 5328,
        "end_line": 5341,
        "comment": "",
        "child_ranges": [
            "(line 5329,col 5)-(line 5340,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testQualifiedNameInference3()",
        "snippet": "  public void testQualifiedNameInference3() throws Exception {\n    testTypes(\n        \"var x = {};\" +\n        \"x.y = c;\" +\n        \"function f(a, b) {\" +\n        \"  if (a) {\" +\n        \"    if (b) \" +\n        \"      x.y = 2;\" +\n        \"    else \" +\n        \"      x.y = 1;\" +\n        \"  }\" +\n        \"  return x.y == null;\" +\n        \"} function g() { x.y = null; }\");\n  }\n",
        "begin_line": 5343,
        "end_line": 5356,
        "comment": "",
        "child_ranges": [
            "(line 5344,col 5)-(line 5355,col 42)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testQualifiedNameInference4()",
        "snippet": "  public void testQualifiedNameInference4() throws Exception {\n    testTypes(\n        \"/** @param {string} x */ function f(x) {}\\n\" +\n        \"/**\\n\" +\n        \" * @param {?string} x \\n\" +\n        \" * @constructor\\n\" +\n        \" */\" +\n        \"function Foo(x) { this.x_ = x; }\\n\" +\n        \"Foo.prototype.bar = function() {\" +\n        \"  if (this.x_) { f(this.x_); }\" +\n        \"};\");\n  }\n",
        "begin_line": 5358,
        "end_line": 5369,
        "comment": "",
        "child_ranges": [
            "(line 5359,col 5)-(line 5368,col 14)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testQualifiedNameInference5()",
        "snippet": "  public void testQualifiedNameInference5() throws Exception {\n    testTypes(\n        \"var ns = {}; \" +\n        \"(function() { \" +\n        \"    /** @param {number} x */ ns.foo = function(x) {}; })();\" +\n        \"(function() { ns.foo(true); })();\",\n        \"actual parameter 1 of ns.foo does not match formal parameter\\n\" +\n        \"found   : boolean\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 5371,
        "end_line": 5380,
        "comment": "",
        "child_ranges": [
            "(line 5372,col 5)-(line 5379,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testQualifiedNameInference6()",
        "snippet": "  public void testQualifiedNameInference6() throws Exception {\n    testTypes(\n        \"var ns = {}; \" +\n        \"/** @param {number} x */ ns.foo = function(x) {};\" +\n        \"(function() { \" +\n        \"    ns.foo = function(x) {};\" +\n        \"    ns.foo(true); })();\",\n        \"actual parameter 1 of ns.foo does not match formal parameter\\n\" +\n        \"found   : boolean\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 5382,
        "end_line": 5392,
        "comment": "",
        "child_ranges": [
            "(line 5383,col 5)-(line 5391,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testQualifiedNameInference7()",
        "snippet": "  public void testQualifiedNameInference7() throws Exception {\n    testTypes(\n        \"var ns = {}; \" +\n        \"(function() { \" +\n        \"  /** @constructor \\n * @param {number} x */ \" +\n        \"  ns.Foo = function(x) {};\" +\n        \"  /** @param {ns.Foo} x */ function f(x) {}\" +\n        \"  f(new ns.Foo(true));\" +\n        \"})();\",\n        \"actual parameter 1 of ns.Foo does not match formal parameter\\n\" +\n        \"found   : boolean\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 5394,
        "end_line": 5406,
        "comment": "",
        "child_ranges": [
            "(line 5395,col 5)-(line 5405,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testQualifiedNameInference8()",
        "snippet": "  public void testQualifiedNameInference8() throws Exception {\n    testTypes(\n        \"var ns = {}; \" +\n        \"(function() { \" +\n        \"  /** @constructor \\n * @param {number} x */ \" +\n        \"  ns.Foo = function(x) {};\" +\n        \"})();\" +\n        \"/** @param {ns.Foo} x */ function f(x) {}\" +\n        \"f(new ns.Foo(true));\",\n        \"Bad type annotation. Unknown type ns.Foo\");\n  }\n",
        "begin_line": 5408,
        "end_line": 5418,
        "comment": "",
        "child_ranges": [
            "(line 5409,col 5)-(line 5417,col 52)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testQualifiedNameInference9()",
        "snippet": "  public void testQualifiedNameInference9() throws Exception {\n    testTypes(\n        \"var ns = {}; \" +\n        \"ns.ns2 = {}; \" +\n        \"(function() { \" +\n        \"  /** @constructor \\n * @param {number} x */ \" +\n        \"  ns.ns2.Foo = function(x) {};\" +\n        \"  /** @param {ns.ns2.Foo} x */ function f(x) {}\" +\n        \"  f(new ns.ns2.Foo(true));\" +\n        \"})();\",\n        \"actual parameter 1 of ns.ns2.Foo does not match formal parameter\\n\" +\n        \"found   : boolean\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 5420,
        "end_line": 5433,
        "comment": "",
        "child_ranges": [
            "(line 5421,col 5)-(line 5432,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testQualifiedNameInference10()",
        "snippet": "  public void testQualifiedNameInference10() throws Exception {\n    testTypes(\n        \"var ns = {}; \" +\n        \"ns.ns2 = {}; \" +\n        \"(function() { \" +\n        \"  /** @interface */ \" +\n        \"  ns.ns2.Foo = function() {};\" +\n        \"  /** @constructor \\n * @implements {ns.ns2.Foo} */ \" +\n        \"  function F() {}\" +\n        \"  (new F());\" +\n        \"})();\");\n  }\n",
        "begin_line": 5435,
        "end_line": 5446,
        "comment": "",
        "child_ranges": [
            "(line 5436,col 5)-(line 5445,col 17)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testSheqRefinedScope()",
        "snippet": "  public void testSheqRefinedScope() throws Exception {\n    Node n = parseAndTypeCheck(\n        \"/** @constructor */function A() {}\\n\" +\n        \"/** @constructor \\n @extends A */ function B() {}\\n\" +\n        \"/** @return {number} */\\n\" +\n        \"B.prototype.p = function() { return 1; }\\n\" +\n        \"/** @param {A} a\\n @param {B} b */\\n\" +\n        \"function f(a, b) {\\n\" +\n        \"  b.p();\\n\" +\n        \"  if (a === b) {\\n\" +\n        \"    b.p();\\n\" +\n        \"  }\\n\" +\n        \"}\");\n    Node nodeC = n.getLastChild().getLastChild().getLastChild().getLastChild()\n        .getLastChild().getLastChild();\n    JSType typeC = nodeC.getJSType();\n    assertTrue(typeC.isNumber());\n\n    Node nodeB = nodeC.getFirstChild().getFirstChild();\n    JSType typeB = nodeB.getJSType();\n    assertEquals(\"B\", typeB.toString());\n  }\n",
        "begin_line": 5448,
        "end_line": 5469,
        "comment": "",
        "child_ranges": [
            "(line 5449,col 5)-(line 5460,col 13)",
            "(line 5461,col 5)-(line 5462,col 39)",
            "(line 5463,col 5)-(line 5463,col 37)",
            "(line 5464,col 5)-(line 5464,col 33)",
            "(line 5466,col 5)-(line 5466,col 55)",
            "(line 5467,col 5)-(line 5467,col 37)",
            "(line 5468,col 5)-(line 5468,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testAssignToUntypedVariable()",
        "snippet": "  public void testAssignToUntypedVariable() throws Exception {\n    Node n = parseAndTypeCheck(\"var z; z = 1;\");\n\n    Node assign = n.getLastChild().getFirstChild();\n    Node node = assign.getFirstChild();\n    assertFalse(node.getJSType().isUnknownType());\n    assertEquals(\"number\", node.getJSType().toString());\n  }\n",
        "begin_line": 5471,
        "end_line": 5478,
        "comment": "",
        "child_ranges": [
            "(line 5472,col 5)-(line 5472,col 48)",
            "(line 5474,col 5)-(line 5474,col 51)",
            "(line 5475,col 5)-(line 5475,col 39)",
            "(line 5476,col 5)-(line 5476,col 50)",
            "(line 5477,col 5)-(line 5477,col 56)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testAssignToUntypedProperty()",
        "snippet": "  public void testAssignToUntypedProperty() throws Exception {\n    Node n = parseAndTypeCheck(\n        \"/** @constructor */ function Foo() {}\\n\" +\n        \"Foo.prototype.a = 1;\" +\n        \"(new Foo).a;\");\n\n    Node node = n.getLastChild().getFirstChild();\n    assertFalse(node.getJSType().isUnknownType());\n    assertTrue(node.getJSType().isNumber());\n  }\n",
        "begin_line": 5480,
        "end_line": 5489,
        "comment": "",
        "child_ranges": [
            "(line 5481,col 5)-(line 5484,col 24)",
            "(line 5486,col 5)-(line 5486,col 49)",
            "(line 5487,col 5)-(line 5487,col 50)",
            "(line 5488,col 5)-(line 5488,col 44)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testNew1()",
        "snippet": "  public void testNew1() throws Exception {\n    testTypes(\"new 4\", TypeCheck.NOT_A_CONSTRUCTOR);\n  }\n",
        "begin_line": 5491,
        "end_line": 5493,
        "comment": "",
        "child_ranges": [
            "(line 5492,col 5)-(line 5492,col 52)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testNew2()",
        "snippet": "  public void testNew2() throws Exception {\n    testTypes(\"var Math = {}; new Math()\", TypeCheck.NOT_A_CONSTRUCTOR);\n  }\n",
        "begin_line": 5495,
        "end_line": 5497,
        "comment": "",
        "child_ranges": [
            "(line 5496,col 5)-(line 5496,col 72)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testNew3()",
        "snippet": "  public void testNew3() throws Exception {\n    testTypes(\"new Date()\");\n  }\n",
        "begin_line": 5499,
        "end_line": 5501,
        "comment": "",
        "child_ranges": [
            "(line 5500,col 5)-(line 5500,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testNew4()",
        "snippet": "  public void testNew4() throws Exception {\n    testTypes(\"/** @constructor */function A(){}; new A();\");\n  }\n",
        "begin_line": 5503,
        "end_line": 5505,
        "comment": "",
        "child_ranges": [
            "(line 5504,col 5)-(line 5504,col 61)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testNew5()",
        "snippet": "  public void testNew5() throws Exception {\n    testTypes(\"function A(){}; new A();\", TypeCheck.NOT_A_CONSTRUCTOR);\n  }\n",
        "begin_line": 5507,
        "end_line": 5509,
        "comment": "",
        "child_ranges": [
            "(line 5508,col 5)-(line 5508,col 71)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testNew6()",
        "snippet": "  public void testNew6() throws Exception {\n    TypeCheckResult p =\n      parseAndTypeCheckWithScope(\"/** @constructor */function A(){};\" +\n      \"var a = new A();\");\n\n    JSType aType = p.scope.getVar(\"a\").getType();\n    assertTrue(aType instanceof ObjectType);\n    ObjectType aObjectType = (ObjectType) aType;\n    assertEquals(\"A\", aObjectType.getConstructor().getReferenceName());\n  }\n",
        "begin_line": 5511,
        "end_line": 5520,
        "comment": "",
        "child_ranges": [
            "(line 5512,col 5)-(line 5514,col 26)",
            "(line 5516,col 5)-(line 5516,col 49)",
            "(line 5517,col 5)-(line 5517,col 44)",
            "(line 5518,col 5)-(line 5518,col 48)",
            "(line 5519,col 5)-(line 5519,col 71)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testNew7()",
        "snippet": "  public void testNew7() throws Exception {\n    testTypes(\"/** @param {Function} opt_constructor */\" +\n        \"function foo(opt_constructor) {\" +\n        \"if (opt_constructor) { new opt_constructor; }\" +\n        \"}\");\n  }\n",
        "begin_line": 5522,
        "end_line": 5527,
        "comment": "",
        "child_ranges": [
            "(line 5523,col 5)-(line 5526,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testNew8()",
        "snippet": "  public void testNew8() throws Exception {\n    testTypes(\"/** @param {Function} opt_constructor */\" +\n        \"function foo(opt_constructor) {\" +\n        \"new opt_constructor;\" +\n        \"}\");\n  }\n",
        "begin_line": 5529,
        "end_line": 5534,
        "comment": "",
        "child_ranges": [
            "(line 5530,col 5)-(line 5533,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testNew9()",
        "snippet": "  public void testNew9() throws Exception {\n    testTypes(\"/** @param {Function} opt_constructor */\" +\n        \"function foo(opt_constructor) {\" +\n        \"new (opt_constructor || Array);\" +\n        \"}\");\n  }\n",
        "begin_line": 5536,
        "end_line": 5541,
        "comment": "",
        "child_ranges": [
            "(line 5537,col 5)-(line 5540,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testNew10()",
        "snippet": "  public void testNew10() throws Exception {\n    testTypes(\"var goog = {};\" +\n        \"/** @param {Function} opt_constructor */\" +\n        \"goog.Foo = function (opt_constructor) {\" +\n        \"new (opt_constructor || Array);\" +\n        \"}\");\n  }\n",
        "begin_line": 5543,
        "end_line": 5549,
        "comment": "",
        "child_ranges": [
            "(line 5544,col 5)-(line 5548,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testNew11()",
        "snippet": "  public void testNew11() throws Exception {\n    testTypes(\"/** @param {Function} c1 */\" +\n        \"function f(c1) {\" +\n        \"  var c2 = function(){};\" +\n        \"  c1.prototype = new c2;\" +\n        \"}\", TypeCheck.NOT_A_CONSTRUCTOR);\n  }\n",
        "begin_line": 5551,
        "end_line": 5557,
        "comment": "",
        "child_ranges": [
            "(line 5552,col 5)-(line 5556,col 42)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testNew12()",
        "snippet": "  public void testNew12() throws Exception {\n    TypeCheckResult p = parseAndTypeCheckWithScope(\"var a = new Array();\");\n    Var a = p.scope.getVar(\"a\");\n\n    assertEquals(ARRAY_TYPE, a.getType());\n  }\n",
        "begin_line": 5559,
        "end_line": 5564,
        "comment": "",
        "child_ranges": [
            "(line 5560,col 5)-(line 5560,col 75)",
            "(line 5561,col 5)-(line 5561,col 32)",
            "(line 5563,col 5)-(line 5563,col 42)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testNew13()",
        "snippet": "  public void testNew13() throws Exception {\n    TypeCheckResult p = parseAndTypeCheckWithScope(\n        \"/** @constructor */function FooBar(){};\" +\n        \"var a = new FooBar();\");\n    Var a = p.scope.getVar(\"a\");\n\n    assertTrue(a.getType() instanceof ObjectType);\n    assertEquals(\"FooBar\", a.getType().toString());\n  }\n",
        "begin_line": 5566,
        "end_line": 5574,
        "comment": "",
        "child_ranges": [
            "(line 5567,col 5)-(line 5569,col 33)",
            "(line 5570,col 5)-(line 5570,col 32)",
            "(line 5572,col 5)-(line 5572,col 50)",
            "(line 5573,col 5)-(line 5573,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testNew14()",
        "snippet": "  public void testNew14() throws Exception {\n    TypeCheckResult p = parseAndTypeCheckWithScope(\n        \"/** @constructor */var FooBar = function(){};\" +\n        \"var a = new FooBar();\");\n    Var a = p.scope.getVar(\"a\");\n\n    assertTrue(a.getType() instanceof ObjectType);\n    assertEquals(\"FooBar\", a.getType().toString());\n  }\n",
        "begin_line": 5576,
        "end_line": 5584,
        "comment": "",
        "child_ranges": [
            "(line 5577,col 5)-(line 5579,col 33)",
            "(line 5580,col 5)-(line 5580,col 32)",
            "(line 5582,col 5)-(line 5582,col 50)",
            "(line 5583,col 5)-(line 5583,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testNew15()",
        "snippet": "  public void testNew15() throws Exception {\n    TypeCheckResult p = parseAndTypeCheckWithScope(\n        \"var goog = {};\" +\n        \"/** @constructor */goog.A = function(){};\" +\n        \"var a = new goog.A();\");\n    Var a = p.scope.getVar(\"a\");\n\n    assertTrue(a.getType() instanceof ObjectType);\n    assertEquals(\"goog.A\", a.getType().toString());\n  }\n",
        "begin_line": 5586,
        "end_line": 5595,
        "comment": "",
        "child_ranges": [
            "(line 5587,col 5)-(line 5590,col 33)",
            "(line 5591,col 5)-(line 5591,col 32)",
            "(line 5593,col 5)-(line 5593,col 50)",
            "(line 5594,col 5)-(line 5594,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testNew16()",
        "snippet": "  public void testNew16() throws Exception {\n    testTypes(\n        \"/** \\n\" +\n        \" * @param {string} x \\n\" +\n        \" * @constructor \\n\" +\n        \" */\" +\n        \"function Foo(x) {}\" +\n        \"function g() { new Foo(1); }\",\n        \"actual parameter 1 of Foo does not match formal parameter\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 5597,
        "end_line": 5608,
        "comment": "",
        "child_ranges": [
            "(line 5598,col 5)-(line 5607,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testName1()",
        "snippet": "  public void testName1() throws Exception {\n    assertEquals(VOID_TYPE, testNameNode(\"undefined\"));\n  }\n",
        "begin_line": 5610,
        "end_line": 5612,
        "comment": "",
        "child_ranges": [
            "(line 5611,col 5)-(line 5611,col 55)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testName2()",
        "snippet": "  public void testName2() throws Exception {\n    assertEquals(OBJECT_FUNCTION_TYPE, testNameNode(\"Object\"));\n  }\n",
        "begin_line": 5614,
        "end_line": 5616,
        "comment": "",
        "child_ranges": [
            "(line 5615,col 5)-(line 5615,col 63)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testName3()",
        "snippet": "  public void testName3() throws Exception {\n    assertEquals(ARRAY_FUNCTION_TYPE, testNameNode(\"Array\"));\n  }\n",
        "begin_line": 5618,
        "end_line": 5620,
        "comment": "",
        "child_ranges": [
            "(line 5619,col 5)-(line 5619,col 61)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testName4()",
        "snippet": "  public void testName4() throws Exception {\n    assertEquals(DATE_FUNCTION_TYPE, testNameNode(\"Date\"));\n  }\n",
        "begin_line": 5622,
        "end_line": 5624,
        "comment": "",
        "child_ranges": [
            "(line 5623,col 5)-(line 5623,col 59)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testName5()",
        "snippet": "  public void testName5() throws Exception {\n    assertEquals(REGEXP_FUNCTION_TYPE, testNameNode(\"RegExp\"));\n  }\n",
        "begin_line": 5626,
        "end_line": 5628,
        "comment": "",
        "child_ranges": [
            "(line 5627,col 5)-(line 5627,col 63)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testNameNode(java.lang.String)",
        "snippet": "  private JSType testNameNode(String name) {\n    Node node = Node.newString(Token.NAME, name);\n    Node parent = new Node(Token.SCRIPT, node);\n\n    Node externs = new Node(Token.BLOCK);\n    Node externAndJsRoot = new Node(Token.BLOCK, externs, parent);\n    externAndJsRoot.setIsSyntheticBlock(true);\n\n    makeTypeCheck().processForTesting(null, parent);\n    return node.getJSType();\n  }\n",
        "begin_line": 5633,
        "end_line": 5643,
        "comment": "\n   * Type checks a NAME node and retrieve its type.\n   ",
        "child_ranges": [
            "(line 5634,col 5)-(line 5634,col 49)",
            "(line 5635,col 5)-(line 5635,col 47)",
            "(line 5637,col 5)-(line 5637,col 41)",
            "(line 5638,col 5)-(line 5638,col 66)",
            "(line 5639,col 5)-(line 5639,col 46)",
            "(line 5641,col 5)-(line 5641,col 52)",
            "(line 5642,col 5)-(line 5642,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBitOperation1()",
        "snippet": "  public void testBitOperation1() throws Exception {\n    testTypes(\"/**@return {void}*/function foo(){ ~foo(); }\",\n        \"operator ~ cannot be applied to undefined\");\n  }\n",
        "begin_line": 5645,
        "end_line": 5648,
        "comment": "",
        "child_ranges": [
            "(line 5646,col 5)-(line 5647,col 53)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBitOperation2()",
        "snippet": "  public void testBitOperation2() throws Exception {\n    testTypes(\"/**@return {void}*/function foo(){var a = foo()<<3;}\",\n        \"operator << cannot be applied to undefined\");\n  }\n",
        "begin_line": 5650,
        "end_line": 5653,
        "comment": "",
        "child_ranges": [
            "(line 5651,col 5)-(line 5652,col 54)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBitOperation3()",
        "snippet": "  public void testBitOperation3() throws Exception {\n    testTypes(\"/**@return {void}*/function foo(){var a = 3<<foo();}\",\n        \"operator << cannot be applied to undefined\");\n  }\n",
        "begin_line": 5655,
        "end_line": 5658,
        "comment": "",
        "child_ranges": [
            "(line 5656,col 5)-(line 5657,col 54)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBitOperation4()",
        "snippet": "  public void testBitOperation4() throws Exception {\n    testTypes(\"/**@return {void}*/function foo(){var a = foo()>>>3;}\",\n        \"operator >>> cannot be applied to undefined\");\n  }\n",
        "begin_line": 5660,
        "end_line": 5663,
        "comment": "",
        "child_ranges": [
            "(line 5661,col 5)-(line 5662,col 55)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBitOperation5()",
        "snippet": "  public void testBitOperation5() throws Exception {\n    testTypes(\"/**@return {void}*/function foo(){var a = 3>>>foo();}\",\n        \"operator >>> cannot be applied to undefined\");\n  }\n",
        "begin_line": 5665,
        "end_line": 5668,
        "comment": "",
        "child_ranges": [
            "(line 5666,col 5)-(line 5667,col 55)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBitOperation6()",
        "snippet": "  public void testBitOperation6() throws Exception {\n    testTypes(\"/**@return {!Object}*/function foo(){var a = foo()&3;}\",\n        \"bad left operand to bitwise operator\\n\" +\n        \"found   : Object\\n\" +\n        \"required: (boolean|null|number|string|undefined)\");\n  }\n",
        "begin_line": 5670,
        "end_line": 5675,
        "comment": "",
        "child_ranges": [
            "(line 5671,col 5)-(line 5674,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBitOperation7()",
        "snippet": "  public void testBitOperation7() throws Exception {\n    testTypes(\"var x = null; x |= undefined; x &= 3; x ^= '3'; x |= true;\");\n  }\n",
        "begin_line": 5677,
        "end_line": 5679,
        "comment": "",
        "child_ranges": [
            "(line 5678,col 5)-(line 5678,col 76)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBitOperation8()",
        "snippet": "  public void testBitOperation8() throws Exception {\n    testTypes(\"var x = void 0; x |= new Number(3);\");\n  }\n",
        "begin_line": 5681,
        "end_line": 5683,
        "comment": "",
        "child_ranges": [
            "(line 5682,col 5)-(line 5682,col 53)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBitOperation9()",
        "snippet": "  public void testBitOperation9() throws Exception {\n    testTypes(\"var x = void 0; x |= {};\",\n        \"bad right operand to bitwise operator\\n\" +\n        \"found   : {}\\n\" +\n        \"required: (boolean|null|number|string|undefined)\");\n  }\n",
        "begin_line": 5685,
        "end_line": 5690,
        "comment": "",
        "child_ranges": [
            "(line 5686,col 5)-(line 5689,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testCall1()",
        "snippet": "  public void testCall1() throws Exception {\n    testTypes(\"3();\", \"number expressions are not callable\");\n  }\n",
        "begin_line": 5692,
        "end_line": 5694,
        "comment": "",
        "child_ranges": [
            "(line 5693,col 5)-(line 5693,col 61)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testCall2()",
        "snippet": "  public void testCall2() throws Exception {\n    testTypes(\"/** @param {!Number} foo*/function bar(foo){ bar('abc'); }\",\n        \"actual parameter 1 of bar does not match formal parameter\\n\" +\n        \"found   : string\\n\" +\n        \"required: Number\");\n  }\n",
        "begin_line": 5696,
        "end_line": 5701,
        "comment": "",
        "child_ranges": [
            "(line 5697,col 5)-(line 5700,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testCall3()",
        "snippet": "  public void testCall3() throws Exception {\n    // We are checking that an unresolved named type can successfully\n    // meet with a functional type to produce a callable type.\n    testTypes(\"/** @type {Function|undefined} */var opt_f;\" +\n        \"/** @type {some.unknown.type} */var f1;\" +\n        \"var f2 = opt_f || f1;\" +\n        \"f2();\",\n        \"Bad type annotation. Unknown type some.unknown.type\");\n  }\n",
        "begin_line": 5703,
        "end_line": 5711,
        "comment": "",
        "child_ranges": [
            "(line 5706,col 5)-(line 5710,col 63)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testCall4()",
        "snippet": "  public void testCall4() throws Exception {\n    testTypes(\"/**@param {!RegExp} a*/var foo = function bar(a){ bar('abc'); }\",\n        \"actual parameter 1 of bar does not match formal parameter\\n\" +\n        \"found   : string\\n\" +\n        \"required: RegExp\");\n  }\n",
        "begin_line": 5713,
        "end_line": 5718,
        "comment": "",
        "child_ranges": [
            "(line 5714,col 5)-(line 5717,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testCall5()",
        "snippet": "  public void testCall5() throws Exception {\n    testTypes(\"/**@param {!RegExp} a*/var foo = function bar(a){ foo('abc'); }\",\n        \"actual parameter 1 of foo does not match formal parameter\\n\" +\n        \"found   : string\\n\" +\n        \"required: RegExp\");\n  }\n",
        "begin_line": 5720,
        "end_line": 5725,
        "comment": "",
        "child_ranges": [
            "(line 5721,col 5)-(line 5724,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testCall6()",
        "snippet": "  public void testCall6() throws Exception {\n    testTypes(\"/** @param {!Number} foo*/function bar(foo){}\" +\n        \"bar('abc');\",\n        \"actual parameter 1 of bar does not match formal parameter\\n\" +\n        \"found   : string\\n\" +\n        \"required: Number\");\n  }\n",
        "begin_line": 5727,
        "end_line": 5733,
        "comment": "",
        "child_ranges": [
            "(line 5728,col 5)-(line 5732,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testCall7()",
        "snippet": "  public void testCall7() throws Exception {\n    testTypes(\"/** @param {!RegExp} a*/var foo = function bar(a){};\" +\n        \"foo('abc');\",\n        \"actual parameter 1 of foo does not match formal parameter\\n\" +\n        \"found   : string\\n\" +\n        \"required: RegExp\");\n  }\n",
        "begin_line": 5735,
        "end_line": 5741,
        "comment": "",
        "child_ranges": [
            "(line 5736,col 5)-(line 5740,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testCall8()",
        "snippet": "  public void testCall8() throws Exception {\n    testTypes(\"/** @type {Function|number} */var f;f();\",\n        \"(Function|number) expressions are \" +\n        \"not callable\");\n  }\n",
        "begin_line": 5743,
        "end_line": 5747,
        "comment": "",
        "child_ranges": [
            "(line 5744,col 5)-(line 5746,col 24)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testCall9()",
        "snippet": "  public void testCall9() throws Exception {\n    testTypes(\n        \"var goog = {};\" +\n        \"/** @constructor */ goog.Foo = function() {};\" +\n        \"/** @param {!goog.Foo} a */ var bar = function(a){};\" +\n        \"bar('abc');\",\n        \"actual parameter 1 of bar does not match formal parameter\\n\" +\n        \"found   : string\\n\" +\n        \"required: goog.Foo\");\n  }\n",
        "begin_line": 5749,
        "end_line": 5758,
        "comment": "",
        "child_ranges": [
            "(line 5750,col 5)-(line 5757,col 30)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testCall10()",
        "snippet": "  public void testCall10() throws Exception {\n    testTypes(\"/** @type {Function} */var f;f();\");\n  }\n",
        "begin_line": 5760,
        "end_line": 5762,
        "comment": "",
        "child_ranges": [
            "(line 5761,col 5)-(line 5761,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testCall11()",
        "snippet": "  public void testCall11() throws Exception {\n    testTypes(\"var f = new Function(); f();\");\n  }\n",
        "begin_line": 5764,
        "end_line": 5766,
        "comment": "",
        "child_ranges": [
            "(line 5765,col 5)-(line 5765,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testFunctionCall1()",
        "snippet": "  public void testFunctionCall1() throws Exception {\n    testTypes(\n        \"/** @param {number} x */ var foo = function(x) {};\" +\n        \"foo.call(null, 3);\");\n  }\n",
        "begin_line": 5768,
        "end_line": 5772,
        "comment": "",
        "child_ranges": [
            "(line 5769,col 5)-(line 5771,col 30)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testFunctionCall2()",
        "snippet": "  public void testFunctionCall2() throws Exception {\n    testTypes(\n        \"/** @param {number} x */ var foo = function(x) {};\" +\n        \"foo.call(null, 'bar');\",\n        \"actual parameter 2 of foo.call does not match formal parameter\\n\" +\n        \"found   : string\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 5774,
        "end_line": 5781,
        "comment": "",
        "child_ranges": [
            "(line 5775,col 5)-(line 5780,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testFunctionCall3()",
        "snippet": "  public void testFunctionCall3() throws Exception {\n    testTypes(\n        \"/** @param {number} x \\n * @constructor */ \" +\n        \"var Foo = function(x) { this.bar.call(null, x); };\" +\n        \"/** @type {function(number)} */ Foo.prototype.bar;\");\n  }\n",
        "begin_line": 5783,
        "end_line": 5788,
        "comment": "",
        "child_ranges": [
            "(line 5784,col 5)-(line 5787,col 62)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testFunctionCall4()",
        "snippet": "  public void testFunctionCall4() throws Exception {\n    testTypes(\n        \"/** @param {string} x \\n * @constructor */ \" +\n        \"var Foo = function(x) { this.bar.call(null, x); };\" +\n        \"/** @type {function(number)} */ Foo.prototype.bar;\",\n        \"actual parameter 2 of this.bar.call \" +\n        \"does not match formal parameter\\n\" +\n        \"found   : string\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 5790,
        "end_line": 5799,
        "comment": "",
        "child_ranges": [
            "(line 5791,col 5)-(line 5798,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testFunctionCall5()",
        "snippet": "  public void testFunctionCall5() throws Exception {\n    testTypes(\n        \"/** @param {Function} handler \\n * @constructor */ \" +\n        \"var Foo = function(handler) { handler.call(this, x); };\");\n  }\n",
        "begin_line": 5801,
        "end_line": 5805,
        "comment": "",
        "child_ranges": [
            "(line 5802,col 5)-(line 5804,col 67)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testFunctionCall6()",
        "snippet": "  public void testFunctionCall6() throws Exception {\n    testTypes(\n        \"/** @param {Function} handler \\n * @constructor */ \" +\n        \"var Foo = function(handler) { handler.apply(this, x); };\");\n  }\n",
        "begin_line": 5807,
        "end_line": 5811,
        "comment": "",
        "child_ranges": [
            "(line 5808,col 5)-(line 5810,col 68)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testFunctionCall7()",
        "snippet": "  public void testFunctionCall7() throws Exception {\n    testTypes(\n        \"/** @param {Function} handler \\n * @param {Object} opt_context */ \" +\n        \"var Foo = function(handler, opt_context) { \" +\n        \"  handler.call(opt_context, x);\" +\n        \"};\");\n  }\n",
        "begin_line": 5813,
        "end_line": 5819,
        "comment": "",
        "child_ranges": [
            "(line 5814,col 5)-(line 5818,col 14)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testFunctionCall8()",
        "snippet": "  public void testFunctionCall8() throws Exception {\n    testTypes(\n        \"/** @param {Function} handler \\n * @param {Object} opt_context */ \" +\n        \"var Foo = function(handler, opt_context) { \" +\n        \"  handler.apply(opt_context, x);\" +\n        \"};\");\n  }\n",
        "begin_line": 5821,
        "end_line": 5827,
        "comment": "",
        "child_ranges": [
            "(line 5822,col 5)-(line 5826,col 14)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testCast2()",
        "snippet": "  public void testCast2() throws Exception {\n    // can upcast to a base type.\n    testTypes(\"/** @constructor */function base() {}\\n\" +\n        \"/** @constructor\\n @extends {base} */function derived() {}\\n\" +\n        \"/** @type {base} */ var baz = new derived();\\n\");\n  }\n",
        "begin_line": 5829,
        "end_line": 5834,
        "comment": "",
        "child_ranges": [
            "(line 5831,col 5)-(line 5833,col 58)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testCast3()",
        "snippet": "  public void testCast3() throws Exception {\n    // cannot downcast\n    testTypes(\"/** @constructor */function base() {}\\n\" +\n        \"/** @constructor @extends {base} */function derived() {}\\n\" +\n        \"/** @type {!derived} */ var baz = new base();\\n\",\n        \"initializing variable\\n\" +\n        \"found   : base\\n\" +\n        \"required: derived\");\n  }\n",
        "begin_line": 5836,
        "end_line": 5844,
        "comment": "",
        "child_ranges": [
            "(line 5838,col 5)-(line 5843,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testCast4()",
        "snippet": "  public void testCast4() throws Exception {\n    // downcast must be explicit\n    testTypes(\"/** @constructor */function base() {}\\n\" +\n        \"/** @constructor\\n * @extends {base} */function derived() {}\\n\" +\n        \"/** @type {!derived} */ var baz = \" +\n        \"/** @type {!derived} */(new base());\\n\");\n  }\n",
        "begin_line": 5846,
        "end_line": 5852,
        "comment": "",
        "child_ranges": [
            "(line 5848,col 5)-(line 5851,col 50)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testCast5()",
        "snippet": "  public void testCast5() throws Exception {\n    // cannot explicitly cast to an unrelated type\n    testTypes(\"/** @constructor */function foo() {}\\n\" +\n        \"/** @constructor */function bar() {}\\n\" +\n        \"var baz = /** @type {!foo} */(new bar);\\n\",\n        \"invalid cast - must be a subtype or supertype\\n\" +\n        \"from: bar\\n\" +\n        \"to  : foo\");\n  }\n",
        "begin_line": 5854,
        "end_line": 5862,
        "comment": "",
        "child_ranges": [
            "(line 5856,col 5)-(line 5861,col 21)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testCast6()",
        "snippet": "  public void testCast6() throws Exception {\n    // can explicitly cast to a subtype or supertype\n    testTypes(\"/** @constructor */function foo() {}\\n\" +\n        \"/** @constructor \\n @extends foo */function bar() {}\\n\" +\n        \"var baz = /** @type {!bar} */(new bar);\\n\" +\n        \"var baz = /** @type {!foo} */(new foo);\\n\" +\n        \"var baz = /** @type {bar} */(new bar);\\n\" +\n        \"var baz = /** @type {foo} */(new foo);\\n\" +\n        \"var baz = /** @type {!foo} */(new bar);\\n\" +\n        \"var baz = /** @type {!bar} */(new foo);\\n\" +\n        \"var baz = /** @type {foo} */(new bar);\\n\" +\n        \"var baz = /** @type {bar} */(new foo);\\n\");\n  }\n",
        "begin_line": 5864,
        "end_line": 5876,
        "comment": "",
        "child_ranges": [
            "(line 5866,col 5)-(line 5875,col 52)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testCast7()",
        "snippet": "  public void testCast7() throws Exception {\n    testTypes(\"var x = /** @type {foo} */ (new Object());\",\n        \"Bad type annotation. Unknown type foo\");\n  }\n",
        "begin_line": 5878,
        "end_line": 5881,
        "comment": "",
        "child_ranges": [
            "(line 5879,col 5)-(line 5880,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testCast8()",
        "snippet": "  public void testCast8() throws Exception {\n    testTypes(\"function f() { return /** @type {foo} */ (new Object()); }\",\n        \"Bad type annotation. Unknown type foo\");\n  }\n",
        "begin_line": 5883,
        "end_line": 5886,
        "comment": "",
        "child_ranges": [
            "(line 5884,col 5)-(line 5885,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testCast9()",
        "snippet": "  public void testCast9() throws Exception {\n    testTypes(\"var foo = {};\" +\n        \"function f() { return /** @type {foo} */ (new Object()); }\",\n        \"Bad type annotation. Unknown type foo\");\n  }\n",
        "begin_line": 5888,
        "end_line": 5892,
        "comment": "",
        "child_ranges": [
            "(line 5889,col 5)-(line 5891,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testCast10()",
        "snippet": "  public void testCast10() throws Exception {\n    testTypes(\"var foo = function() {};\" +\n        \"function f() { return /** @type {foo} */ (new Object()); }\",\n        \"Bad type annotation. Unknown type foo\");\n  }\n",
        "begin_line": 5894,
        "end_line": 5898,
        "comment": "",
        "child_ranges": [
            "(line 5895,col 5)-(line 5897,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testCast11()",
        "snippet": "  public void testCast11() throws Exception {\n    testTypes(\"var goog = {}; goog.foo = {};\" +\n        \"function f() { return /** @type {goog.foo} */ (new Object()); }\",\n        \"Bad type annotation. Unknown type goog.foo\");\n  }\n",
        "begin_line": 5900,
        "end_line": 5904,
        "comment": "",
        "child_ranges": [
            "(line 5901,col 5)-(line 5903,col 54)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testCast12()",
        "snippet": "  public void testCast12() throws Exception {\n    testTypes(\"var goog = {}; goog.foo = function() {};\" +\n        \"function f() { return /** @type {goog.foo} */ (new Object()); }\",\n        \"Bad type annotation. Unknown type goog.foo\");\n  }\n",
        "begin_line": 5906,
        "end_line": 5910,
        "comment": "",
        "child_ranges": [
            "(line 5907,col 5)-(line 5909,col 54)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testCast13()",
        "snippet": "  public void testCast13() throws Exception {\n    // Test to make sure that the forward-declaration still allows for\n    // a warning.\n    testClosureTypes(\"var goog = {}; \" +\n        \"goog.addDependency('zzz.js', ['goog.foo'], []);\" +\n        \"goog.foo = function() {};\" +\n        \"function f() { return /** @type {goog.foo} */ (new Object()); }\",\n        \"Bad type annotation. Unknown type goog.foo\");\n  }\n",
        "begin_line": 5912,
        "end_line": 5920,
        "comment": "",
        "child_ranges": [
            "(line 5915,col 5)-(line 5919,col 54)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testCast14()",
        "snippet": "  public void testCast14() throws Exception {\n    // Test to make sure that the forward-declaration still prevents\n    // some warnings.\n    testClosureTypes(\"var goog = {}; \" +\n        \"goog.addDependency('zzz.js', ['goog.bar'], []);\" +\n        \"function f() { return /** @type {goog.bar} */ (new Object()); }\",\n        null);\n  }\n",
        "begin_line": 5922,
        "end_line": 5929,
        "comment": "",
        "child_ranges": [
            "(line 5925,col 5)-(line 5928,col 14)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testCast15()",
        "snippet": "  public void testCast15() throws Exception {\n    // This fixes a bug where a type cast on an object literal\n    // would cause a runtime cast exception if the node was visited\n    // more than once.\n    //\n    // Some code assumes that an object literal must have a object type,\n    // while because of the cast, it could have any type (including\n    // a union).\n    testTypes(\n        \"for (var i = 0; i < 10; i++) {\" +\n          \"var x = /** @type {Object|number} */ ({foo: 3});\" +\n          \"/** @param {boolean} x */ function f(x) {}\" +\n          \"f(x.foo);\" +\n          \"f([].foo);\" +\n        \"}\",\n        \"Property foo never defined on Array\");\n  }\n",
        "begin_line": 5931,
        "end_line": 5947,
        "comment": "",
        "child_ranges": [
            "(line 5939,col 5)-(line 5946,col 47)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testCast16()",
        "snippet": "  public void testCast16() throws Exception {\n    // A type cast should not invalidate the checks on the members\n    testTypes(\n        \"for (var i = 0; i < 10; i++) {\" +\n          \"var x = /** @type {Object|number} */ (\" +\n          \"  {/** @type {string} */ foo: 3});\" +\n        \"}\",\n        \"assignment to property foo of (Object|null|number)\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 5949,
        "end_line": 5959,
        "comment": "",
        "child_ranges": [
            "(line 5951,col 5)-(line 5958,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testCast17()",
        "snippet": "  public void testCast17() throws Exception {\n    // Mostly verifying that rhino actually understands these JsDocs.\n    testTypes(\"/** @constructor */ function Foo() {} \\n\" +\n        \"/** @type {Foo} */ var x = /** @type {Foo} */ ({})\");\n\n    testTypes(\"/** @constructor */ function Foo() {} \\n\" +\n        \"/** @type {Foo} */ var x = (/** @type {Foo} */ {})\");\n\n    // Not really encourage because of possible ambiguity but it works.\n    testTypes(\"/** @constructor */ function Foo() {} \\n\" +\n        \"/** @type {Foo} */ var x = /** @type {Foo} */ {}\");\n  }\n",
        "begin_line": 5961,
        "end_line": 5972,
        "comment": "",
        "child_ranges": [
            "(line 5963,col 5)-(line 5964,col 62)",
            "(line 5966,col 5)-(line 5967,col 62)",
            "(line 5970,col 5)-(line 5971,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testNestedCasts()",
        "snippet": "  public void testNestedCasts() throws Exception {\n    testTypes(\"/** @constructor */var T = function() {};\\n\" +\n        \"/** @constructor */var V = function() {};\\n\" +\n        \"/**\\n\" +\n        \"* @param {boolean} b\\n\" +\n        \"* @return {T|V}\\n\" +\n        \"*/\\n\" +\n        \"function f(b) { return b ? new T() : new V(); }\\n\" +\n        \"/**\\n\" +\n        \"* @param {boolean} b\\n\" +\n        \"* @return {boolean|undefined}\\n\" +\n        \"*/\\n\" +\n        \"function g(b) { return b ? true : undefined; }\\n\" +\n        \"/** @return {T} */\\n\" +\n        \"function h() {\\n\" +\n        \"return /** @type {T} */ (f(/** @type {boolean} */ (g(true))));\\n\" +\n        \"}\");\n  }\n",
        "begin_line": 5974,
        "end_line": 5991,
        "comment": "",
        "child_ranges": [
            "(line 5975,col 5)-(line 5990,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testNativeCast1()",
        "snippet": "  public void testNativeCast1() throws Exception {\n    testTypes(\n        \"/** @param {number} x */ function f(x) {}\" +\n        \"f(String(true));\",\n        \"actual parameter 1 of f does not match formal parameter\\n\" +\n        \"found   : string\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 5993,
        "end_line": 6000,
        "comment": "",
        "child_ranges": [
            "(line 5994,col 5)-(line 5999,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testNativeCast2()",
        "snippet": "  public void testNativeCast2() throws Exception {\n    testTypes(\n        \"/** @param {string} x */ function f(x) {}\" +\n        \"f(Number(true));\",\n        \"actual parameter 1 of f does not match formal parameter\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 6002,
        "end_line": 6009,
        "comment": "",
        "child_ranges": [
            "(line 6003,col 5)-(line 6008,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testNativeCast3()",
        "snippet": "  public void testNativeCast3() throws Exception {\n    testTypes(\n        \"/** @param {number} x */ function f(x) {}\" +\n        \"f(Boolean(''));\",\n        \"actual parameter 1 of f does not match formal parameter\\n\" +\n        \"found   : boolean\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 6011,
        "end_line": 6018,
        "comment": "",
        "child_ranges": [
            "(line 6012,col 5)-(line 6017,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testNativeCast4()",
        "snippet": "  public void testNativeCast4() throws Exception {\n    testTypes(\n        \"/** @param {number} x */ function f(x) {}\" +\n        \"f(Error(''));\",\n        \"actual parameter 1 of f does not match formal parameter\\n\" +\n        \"found   : Error\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 6020,
        "end_line": 6027,
        "comment": "",
        "child_ranges": [
            "(line 6021,col 5)-(line 6026,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBadConstructorCall()",
        "snippet": "  public void testBadConstructorCall() throws Exception {\n    testTypes(\n        \"/** @constructor */ function Foo() {}\" +\n        \"Foo();\",\n        \"Constructor function (new:Foo): undefined should be called \" +\n        \"with the \\\"new\\\" keyword\");\n  }\n",
        "begin_line": 6029,
        "end_line": 6035,
        "comment": "",
        "child_ranges": [
            "(line 6030,col 5)-(line 6034,col 36)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypeof()",
        "snippet": "  public void testTypeof() throws Exception {\n    testTypes(\"/**@return {void}*/function foo(){ var a = typeof foo(); }\");\n  }\n",
        "begin_line": 6037,
        "end_line": 6039,
        "comment": "",
        "child_ranges": [
            "(line 6038,col 5)-(line 6038,col 76)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testConstructorType1()",
        "snippet": "  public void testConstructorType1() throws Exception {\n    testTypes(\"/**@constructor*/function Foo(){}\" +\n        \"/**@type{!Foo}*/var f = new Date();\",\n        \"initializing variable\\n\" +\n        \"found   : Date\\n\" +\n        \"required: Foo\");\n  }\n",
        "begin_line": 6041,
        "end_line": 6047,
        "comment": "",
        "child_ranges": [
            "(line 6042,col 5)-(line 6046,col 25)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testConstructorType2()",
        "snippet": "  public void testConstructorType2() throws Exception {\n    testTypes(\"/**@constructor*/function Foo(){\\n\" +\n        \"/**@type{Number}*/this.bar = new Number(5);\\n\" +\n        \"}\\n\" +\n        \"/**@type{Foo}*/var f = new Foo();\\n\" +\n        \"/**@type{Number}*/var n = f.bar;\");\n  }\n",
        "begin_line": 6049,
        "end_line": 6055,
        "comment": "",
        "child_ranges": [
            "(line 6050,col 5)-(line 6054,col 44)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testConstructorType3()",
        "snippet": "  public void testConstructorType3() throws Exception {\n    // Reverse the declaration order so that we know that Foo is getting set\n    // even on an out-of-order declaration sequence.\n    testTypes(\"/**@type{Foo}*/var f = new Foo();\\n\" +\n        \"/**@type{Number}*/var n = f.bar;\" +\n        \"/**@constructor*/function Foo(){\\n\" +\n        \"/**@type{Number}*/this.bar = new Number(5);\\n\" +\n        \"}\\n\");\n  }\n",
        "begin_line": 6057,
        "end_line": 6065,
        "comment": "",
        "child_ranges": [
            "(line 6060,col 5)-(line 6064,col 15)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testConstructorType4()",
        "snippet": "  public void testConstructorType4() throws Exception {\n    testTypes(\"/**@constructor*/function Foo(){\\n\" +\n        \"/**@type{!Number}*/this.bar = new Number(5);\\n\" +\n        \"}\\n\" +\n        \"/**@type{!Foo}*/var f = new Foo();\\n\" +\n        \"/**@type{!String}*/var n = f.bar;\",\n        \"initializing variable\\n\" +\n        \"found   : Number\\n\" +\n        \"required: String\");\n  }\n",
        "begin_line": 6067,
        "end_line": 6076,
        "comment": "",
        "child_ranges": [
            "(line 6068,col 5)-(line 6075,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testConstructorType5()",
        "snippet": "  public void testConstructorType5() throws Exception {\n    testTypes(\"/**@constructor*/function Foo(){}\\n\" +\n        \"if (Foo){}\\n\");\n  }\n",
        "begin_line": 6078,
        "end_line": 6081,
        "comment": "",
        "child_ranges": [
            "(line 6079,col 5)-(line 6080,col 24)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testConstructorType6()",
        "snippet": "  public void testConstructorType6() throws Exception {\n    testTypes(\"/** @constructor */\\n\" +\n        \"function bar() {}\\n\" +\n        \"function _foo() {\\n\" +\n        \" /** @param {bar} x */\\n\" +\n        \"  function f(x) {}\\n\" +\n        \"}\");\n  }\n",
        "begin_line": 6083,
        "end_line": 6090,
        "comment": "",
        "child_ranges": [
            "(line 6084,col 5)-(line 6089,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testConstructorType7()",
        "snippet": "  public void testConstructorType7() throws Exception {\n    TypeCheckResult p =\n        parseAndTypeCheckWithScope(\"/** @constructor */function A(){};\");\n\n    JSType type = p.scope.getVar(\"A\").getType();\n    assertTrue(type instanceof FunctionType);\n    FunctionType fType = (FunctionType) type;\n    assertEquals(\"A\", fType.getReferenceName());\n  }\n",
        "begin_line": 6092,
        "end_line": 6100,
        "comment": "",
        "child_ranges": [
            "(line 6093,col 5)-(line 6094,col 73)",
            "(line 6096,col 5)-(line 6096,col 48)",
            "(line 6097,col 5)-(line 6097,col 45)",
            "(line 6098,col 5)-(line 6098,col 45)",
            "(line 6099,col 5)-(line 6099,col 48)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testConstructorType8()",
        "snippet": "  public void testConstructorType8() throws Exception {\n    testTypes(\n        \"var ns = {};\" +\n        \"ns.create = function() { return function() {}; };\" +\n        \"/** @constructor */ ns.Foo = ns.create();\" +\n        \"ns.Foo.prototype = {x: 0, y: 0};\" +\n        \"/**\\n\" +\n        \" * @param {ns.Foo} foo\\n\" +\n        \" * @return {string}\\n\" +\n        \" */\\n\" +\n        \"function f(foo) {\" +\n        \"  return foo.x;\" +\n        \"}\",\n        \"inconsistent return type\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 6102,
        "end_line": 6118,
        "comment": "",
        "child_ranges": [
            "(line 6103,col 5)-(line 6117,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testConstructorType9()",
        "snippet": "  public void testConstructorType9() throws Exception {\n    testTypes(\n        \"var ns = {};\" +\n        \"ns.create = function() { return function() {}; };\" +\n        \"ns.extend = function(x) { return x; };\" +\n        \"/** @constructor */ ns.Foo = ns.create();\" +\n        \"ns.Foo.prototype = ns.extend({x: 0, y: 0});\" +\n        \"/**\\n\" +\n        \" * @param {ns.Foo} foo\\n\" +\n        \" * @return {string}\\n\" +\n        \" */\\n\" +\n        \"function f(foo) {\" +\n        \"  return foo.x;\" +\n        \"}\");\n  }\n",
        "begin_line": 6120,
        "end_line": 6134,
        "comment": "",
        "child_ranges": [
            "(line 6121,col 5)-(line 6133,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testAnonymousType1()",
        "snippet": "  public void testAnonymousType1() throws Exception {\n    testTypes(\"function f() {}\" +\n        \"/** @constructor */\\n\" +\n        \"f().bar = function() {};\");\n  }\n",
        "begin_line": 6136,
        "end_line": 6140,
        "comment": "",
        "child_ranges": [
            "(line 6137,col 5)-(line 6139,col 36)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testAnonymousType2()",
        "snippet": "  public void testAnonymousType2() throws Exception {\n    testTypes(\"function f() {}\" +\n        \"/** @interface */\\n\" +\n        \"f().bar = function() {};\");\n  }\n",
        "begin_line": 6142,
        "end_line": 6146,
        "comment": "",
        "child_ranges": [
            "(line 6143,col 5)-(line 6145,col 36)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testAnonymousType3()",
        "snippet": "  public void testAnonymousType3() throws Exception {\n    testTypes(\"function f() {}\" +\n        \"/** @enum */\\n\" +\n        \"f().bar = {FOO: 1};\");\n  }\n",
        "begin_line": 6148,
        "end_line": 6152,
        "comment": "",
        "child_ranges": [
            "(line 6149,col 5)-(line 6151,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBang1()",
        "snippet": "  public void testBang1() throws Exception {\n    testTypes(\"/** @param {Object} x\\n@return {!Object} */\\n\" +\n        \"function f(x) { return x; }\",\n        \"inconsistent return type\\n\" +\n        \"found   : (Object|null)\\n\" +\n        \"required: Object\");\n  }\n",
        "begin_line": 6154,
        "end_line": 6160,
        "comment": "",
        "child_ranges": [
            "(line 6155,col 5)-(line 6159,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBang2()",
        "snippet": "  public void testBang2() throws Exception {\n    testTypes(\"/** @param {Object} x\\n@return {!Object} */\\n\" +\n        \"function f(x) { return x ? x : new Object(); }\");\n  }\n",
        "begin_line": 6162,
        "end_line": 6165,
        "comment": "",
        "child_ranges": [
            "(line 6163,col 5)-(line 6164,col 58)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBang3()",
        "snippet": "  public void testBang3() throws Exception {\n    testTypes(\"/** @param {Object} x\\n@return {!Object} */\\n\" +\n        \"function f(x) { return /** @type {!Object} */ (x); }\");\n  }\n",
        "begin_line": 6167,
        "end_line": 6170,
        "comment": "",
        "child_ranges": [
            "(line 6168,col 5)-(line 6169,col 64)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBang4()",
        "snippet": "  public void testBang4() throws Exception {\n    testTypes(\"/**@param {Object} x\\n@param {Object} y\\n@return {boolean}*/\\n\" +\n        \"function f(x, y) {\\n\" +\n        \"if (typeof x != 'undefined') { return x == y; }\\n\" +\n        \"else { return x != y; }\\n}\");\n  }\n",
        "begin_line": 6172,
        "end_line": 6177,
        "comment": "",
        "child_ranges": [
            "(line 6173,col 5)-(line 6176,col 38)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBang5()",
        "snippet": "  public void testBang5() throws Exception {\n    testTypes(\"/**@param {Object} x\\n@param {Object} y\\n@return {boolean}*/\\n\" +\n        \"function f(x, y) { return !!x && x == y; }\");\n  }\n",
        "begin_line": 6179,
        "end_line": 6182,
        "comment": "",
        "child_ranges": [
            "(line 6180,col 5)-(line 6181,col 54)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBang6()",
        "snippet": "  public void testBang6() throws Exception {\n    testTypes(\"/** @param {Object?} x\\n@return {Object} */\\n\" +\n        \"function f(x) { return x; }\");\n  }\n",
        "begin_line": 6184,
        "end_line": 6187,
        "comment": "",
        "child_ranges": [
            "(line 6185,col 5)-(line 6186,col 39)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBang7()",
        "snippet": "  public void testBang7() throws Exception {\n    testTypes(\"/**@param {(Object,string,null)} x\\n\" +\n        \"@return {(Object,string)}*/function f(x) { return x; }\");\n  }\n",
        "begin_line": 6189,
        "end_line": 6192,
        "comment": "",
        "child_ranges": [
            "(line 6190,col 5)-(line 6191,col 66)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testDefinePropertyOnNullableObject1()",
        "snippet": "  public void testDefinePropertyOnNullableObject1() throws Exception {\n    testTypes(\"/** @type {Object} */ var n = {};\\n\" +\n        \"/** @type {number} */ n.x = 1;\\n\" +\n        \"/** @return {boolean} */function f() { return n.x; }\",\n        \"inconsistent return type\\n\" +\n        \"found   : number\\n\" +\n        \"required: boolean\");\n  }\n",
        "begin_line": 6194,
        "end_line": 6201,
        "comment": "",
        "child_ranges": [
            "(line 6195,col 5)-(line 6200,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testDefinePropertyOnNullableObject2()",
        "snippet": "  public void testDefinePropertyOnNullableObject2() throws Exception {\n    testTypes(\"/** @constructor */ var T = function() {};\\n\" +\n        \"/** @param {T} t\\n@return {boolean} */function f(t) {\\n\" +\n        \"t.x = 1; return t.x; }\",\n        \"inconsistent return type\\n\" +\n        \"found   : number\\n\" +\n        \"required: boolean\");\n  }\n",
        "begin_line": 6203,
        "end_line": 6210,
        "comment": "",
        "child_ranges": [
            "(line 6204,col 5)-(line 6209,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testUnknownConstructorInstanceType1()",
        "snippet": "  public void testUnknownConstructorInstanceType1() throws Exception {\n    testTypes(\"/** @return {Array} */ function g(f) { return new f(); }\");\n  }\n",
        "begin_line": 6212,
        "end_line": 6214,
        "comment": "",
        "child_ranges": [
            "(line 6213,col 5)-(line 6213,col 74)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testUnknownConstructorInstanceType2()",
        "snippet": "  public void testUnknownConstructorInstanceType2() throws Exception {\n    testTypes(\"function g(f) { return /** @type Array */ new f(); }\");\n  }\n",
        "begin_line": 6216,
        "end_line": 6218,
        "comment": "",
        "child_ranges": [
            "(line 6217,col 5)-(line 6217,col 70)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testUnknownConstructorInstanceType3()",
        "snippet": "  public void testUnknownConstructorInstanceType3() throws Exception {\n    testTypes(\"function g(f) { var x = new f(); x.a = 1; return x; }\");\n  }\n",
        "begin_line": 6220,
        "end_line": 6222,
        "comment": "",
        "child_ranges": [
            "(line 6221,col 5)-(line 6221,col 71)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testUnknownPrototypeChain()",
        "snippet": "  public void testUnknownPrototypeChain() throws Exception {\n    testTypes(\"/**\\n\" +\n              \"* @param {Object} co\\n\" +\n              \" * @return {Object}\\n\" +\n              \" */\\n\" +\n              \"function inst(co) {\\n\" +\n              \" /** @constructor */\\n\" +\n              \" var c = function() {};\\n\" +\n              \" c.prototype = co.prototype;\\n\" +\n              \" return new c;\\n\" +\n              \"}\");\n  }\n",
        "begin_line": 6224,
        "end_line": 6235,
        "comment": "",
        "child_ranges": [
            "(line 6225,col 5)-(line 6234,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testNamespacedConstructor()",
        "snippet": "  public void testNamespacedConstructor() throws Exception {\n    Node root = parseAndTypeCheck(\n        \"var goog = {};\" +\n        \"/** @constructor */ goog.MyClass = function() {};\" +\n        \"/** @return {!goog.MyClass} */ \" +\n        \"function foo() { return new goog.MyClass(); }\");\n\n    JSType typeOfFoo = root.getLastChild().getJSType();\n    assert(typeOfFoo instanceof FunctionType);\n\n    JSType retType = ((FunctionType) typeOfFoo).getReturnType();\n    assert(retType instanceof ObjectType);\n    assertEquals(\"goog.MyClass\", ((ObjectType) retType).getReferenceName());\n  }\n",
        "begin_line": 6237,
        "end_line": 6250,
        "comment": "",
        "child_ranges": [
            "(line 6238,col 5)-(line 6242,col 57)",
            "(line 6244,col 5)-(line 6244,col 55)",
            "(line 6245,col 5)-(line 6245,col 46)",
            "(line 6247,col 5)-(line 6247,col 64)",
            "(line 6248,col 5)-(line 6248,col 42)",
            "(line 6249,col 5)-(line 6249,col 76)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testComplexNamespace()",
        "snippet": "  public void testComplexNamespace() throws Exception {\n    String js =\n      \"var goog = {};\" +\n      \"goog.foo = {};\" +\n      \"goog.foo.bar = 5;\";\n\n    TypeCheckResult p = parseAndTypeCheckWithScope(js);\n\n    // goog type in the scope\n    JSType googScopeType = p.scope.getVar(\"goog\").getType();\n    assertTrue(googScopeType instanceof ObjectType);\n    assertTrue(\"foo property not present on goog type\",\n        ((ObjectType) googScopeType).hasProperty(\"foo\"));\n    assertFalse(\"bar property present on goog type\",\n        ((ObjectType) googScopeType).hasProperty(\"bar\"));\n\n    // goog type on the VAR node\n    Node varNode = p.root.getFirstChild();\n    assertEquals(Token.VAR, varNode.getType());\n    JSType googNodeType = varNode.getFirstChild().getJSType();\n    assertTrue(googNodeType instanceof ObjectType);\n\n    // goog scope type and goog type on VAR node must be the same\n    assertTrue(googScopeType == googNodeType);\n\n    // goog type on the left of the GETPROP node (under fist ASSIGN)\n    Node getpropFoo1 = varNode.getNext().getFirstChild().getFirstChild();\n    assertEquals(Token.GETPROP, getpropFoo1.getType());\n    assertEquals(\"goog\", getpropFoo1.getFirstChild().getString());\n    JSType googGetpropFoo1Type = getpropFoo1.getFirstChild().getJSType();\n    assertTrue(googGetpropFoo1Type instanceof ObjectType);\n\n    // still the same type as the one on the variable\n    assertTrue(googGetpropFoo1Type == googScopeType);\n\n    // the foo property should be defined on goog\n    JSType googFooType = ((ObjectType) googScopeType).getPropertyType(\"foo\");\n    assertTrue(googFooType instanceof ObjectType);\n\n    // goog type on the left of the GETPROP lower level node\n    // (under second ASSIGN)\n    Node getpropFoo2 = varNode.getNext().getNext()\n        .getFirstChild().getFirstChild().getFirstChild();\n    assertEquals(Token.GETPROP, getpropFoo2.getType());\n    assertEquals(\"goog\", getpropFoo2.getFirstChild().getString());\n    JSType googGetpropFoo2Type = getpropFoo2.getFirstChild().getJSType();\n    assertTrue(googGetpropFoo2Type instanceof ObjectType);\n\n    // still the same type as the one on the variable\n    assertTrue(googGetpropFoo2Type == googScopeType);\n\n    // goog.foo type on the left of the top level GETPROP node\n    // (under second ASSIGN)\n    JSType googFooGetprop2Type = getpropFoo2.getJSType();\n    assertTrue(\"goog.foo incorrectly annotated in goog.foo.bar selection\",\n        googFooGetprop2Type instanceof ObjectType);\n    ObjectType googFooGetprop2ObjectType = (ObjectType) googFooGetprop2Type;\n    assertFalse(\"foo property present on goog.foo type\",\n        googFooGetprop2ObjectType.hasProperty(\"foo\"));\n    assertTrue(\"bar property not present on goog.foo type\",\n        googFooGetprop2ObjectType.hasProperty(\"bar\"));\n    assertEquals(\"bar property on goog.foo type incorrectly inferred\",\n        NUMBER_TYPE, googFooGetprop2ObjectType.getPropertyType(\"bar\"));\n  }\n",
        "begin_line": 6252,
        "end_line": 6315,
        "comment": "",
        "child_ranges": [
            "(line 6253,col 5)-(line 6256,col 26)",
            "(line 6258,col 5)-(line 6258,col 55)",
            "(line 6261,col 5)-(line 6261,col 60)",
            "(line 6262,col 5)-(line 6262,col 52)",
            "(line 6263,col 5)-(line 6264,col 57)",
            "(line 6265,col 5)-(line 6266,col 57)",
            "(line 6269,col 5)-(line 6269,col 42)",
            "(line 6270,col 5)-(line 6270,col 47)",
            "(line 6271,col 5)-(line 6271,col 62)",
            "(line 6272,col 5)-(line 6272,col 51)",
            "(line 6275,col 5)-(line 6275,col 46)",
            "(line 6278,col 5)-(line 6278,col 73)",
            "(line 6279,col 5)-(line 6279,col 55)",
            "(line 6280,col 5)-(line 6280,col 66)",
            "(line 6281,col 5)-(line 6281,col 73)",
            "(line 6282,col 5)-(line 6282,col 58)",
            "(line 6285,col 5)-(line 6285,col 53)",
            "(line 6288,col 5)-(line 6288,col 77)",
            "(line 6289,col 5)-(line 6289,col 50)",
            "(line 6293,col 5)-(line 6294,col 57)",
            "(line 6295,col 5)-(line 6295,col 55)",
            "(line 6296,col 5)-(line 6296,col 66)",
            "(line 6297,col 5)-(line 6297,col 73)",
            "(line 6298,col 5)-(line 6298,col 58)",
            "(line 6301,col 5)-(line 6301,col 53)",
            "(line 6305,col 5)-(line 6305,col 57)",
            "(line 6306,col 5)-(line 6307,col 51)",
            "(line 6308,col 5)-(line 6308,col 76)",
            "(line 6309,col 5)-(line 6310,col 54)",
            "(line 6311,col 5)-(line 6312,col 54)",
            "(line 6313,col 5)-(line 6314,col 71)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testAddingMethodsUsingPrototypeIdiomSimpleNamespace()",
        "snippet": "  public void testAddingMethodsUsingPrototypeIdiomSimpleNamespace()\n      throws Exception {\n    Node js1Node = parseAndTypeCheck(\n        \"/** @constructor */function A() {}\" +\n        \"A.prototype.m1 = 5\");\n\n    ObjectType instanceType = getInstanceType(js1Node);\n    assertEquals(NATIVE_PROPERTIES_COUNT + 1,\n        instanceType.getPropertiesCount());\n    checkObjectType(instanceType, \"m1\", NUMBER_TYPE);\n  }\n",
        "begin_line": 6317,
        "end_line": 6327,
        "comment": "",
        "child_ranges": [
            "(line 6319,col 5)-(line 6321,col 30)",
            "(line 6323,col 5)-(line 6323,col 55)",
            "(line 6324,col 5)-(line 6325,col 43)",
            "(line 6326,col 5)-(line 6326,col 53)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testAddingMethodsUsingPrototypeIdiomComplexNamespace1()",
        "snippet": "  public void testAddingMethodsUsingPrototypeIdiomComplexNamespace1()\n      throws Exception {\n    TypeCheckResult p = parseAndTypeCheckWithScope(\n        \"var goog = {};\" +\n        \"goog.A = /** @constructor */function() {};\" +\n        \"/** @type number */goog.A.prototype.m1 = 5\");\n\n    testAddingMethodsUsingPrototypeIdiomComplexNamespace(p);\n  }\n",
        "begin_line": 6329,
        "end_line": 6337,
        "comment": "",
        "child_ranges": [
            "(line 6331,col 5)-(line 6334,col 54)",
            "(line 6336,col 5)-(line 6336,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testAddingMethodsUsingPrototypeIdiomComplexNamespace2()",
        "snippet": "  public void testAddingMethodsUsingPrototypeIdiomComplexNamespace2()\n      throws Exception {\n    TypeCheckResult p = parseAndTypeCheckWithScope(\n        \"var goog = {};\" +\n        \"/** @constructor */goog.A = function() {};\" +\n        \"/** @type number */goog.A.prototype.m1 = 5\");\n\n    testAddingMethodsUsingPrototypeIdiomComplexNamespace(p);\n  }\n",
        "begin_line": 6339,
        "end_line": 6347,
        "comment": "",
        "child_ranges": [
            "(line 6341,col 5)-(line 6344,col 54)",
            "(line 6346,col 5)-(line 6346,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testAddingMethodsUsingPrototypeIdiomComplexNamespace(com.google.javascript.jscomp.TypeCheckTest.TypeCheckResult)",
        "snippet": "  private void testAddingMethodsUsingPrototypeIdiomComplexNamespace(\n      TypeCheckResult p) {\n    ObjectType goog = (ObjectType) p.scope.getVar(\"goog\").getType();\n    assertEquals(NATIVE_PROPERTIES_COUNT + 1, goog.getPropertiesCount());\n    JSType googA = goog.getPropertyType(\"A\");\n    assertNotNull(googA);\n    assertTrue(googA instanceof FunctionType);\n    FunctionType googAFunction = (FunctionType) googA;\n    ObjectType classA = googAFunction.getInstanceType();\n    assertEquals(NATIVE_PROPERTIES_COUNT + 1, classA.getPropertiesCount());\n    checkObjectType(classA, \"m1\", NUMBER_TYPE);\n  }\n",
        "begin_line": 6349,
        "end_line": 6360,
        "comment": "",
        "child_ranges": [
            "(line 6351,col 5)-(line 6351,col 68)",
            "(line 6352,col 5)-(line 6352,col 73)",
            "(line 6353,col 5)-(line 6353,col 45)",
            "(line 6354,col 5)-(line 6354,col 25)",
            "(line 6355,col 5)-(line 6355,col 46)",
            "(line 6356,col 5)-(line 6356,col 54)",
            "(line 6357,col 5)-(line 6357,col 56)",
            "(line 6358,col 5)-(line 6358,col 75)",
            "(line 6359,col 5)-(line 6359,col 47)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testAddingMethodsPrototypeIdiomAndObjectLiteralSimpleNamespace()",
        "snippet": "  public void testAddingMethodsPrototypeIdiomAndObjectLiteralSimpleNamespace()\n      throws Exception {\n    Node js1Node = parseAndTypeCheck(\n        \"/** @constructor */function A() {}\" +\n        \"A.prototype = {m1: 5, m2: true}\");\n\n    ObjectType instanceType = getInstanceType(js1Node);\n    assertEquals(NATIVE_PROPERTIES_COUNT + 2,\n        instanceType.getPropertiesCount());\n    checkObjectType(instanceType, \"m1\", NUMBER_TYPE);\n    checkObjectType(instanceType, \"m2\", BOOLEAN_TYPE);\n  }\n",
        "begin_line": 6362,
        "end_line": 6373,
        "comment": "",
        "child_ranges": [
            "(line 6364,col 5)-(line 6366,col 43)",
            "(line 6368,col 5)-(line 6368,col 55)",
            "(line 6369,col 5)-(line 6370,col 43)",
            "(line 6371,col 5)-(line 6371,col 53)",
            "(line 6372,col 5)-(line 6372,col 54)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testDontAddMethodsIfNoConstructor()",
        "snippet": "  public void testDontAddMethodsIfNoConstructor()\n      throws Exception {\n    Node js1Node = parseAndTypeCheck(\n        \"function A() {}\" +\n        \"A.prototype = {m1: 5, m2: true}\");\n\n    JSType functionAType = js1Node.getFirstChild().getJSType();\n    assertEquals(\"function (): undefined\", functionAType.toString());\n    assertEquals(UNKNOWN_TYPE,\n        U2U_FUNCTION_TYPE.getPropertyType(\"m1\"));\n    assertEquals(UNKNOWN_TYPE,\n        U2U_FUNCTION_TYPE.getPropertyType(\"m2\"));\n  }\n",
        "begin_line": 6375,
        "end_line": 6387,
        "comment": "",
        "child_ranges": [
            "(line 6377,col 5)-(line 6379,col 43)",
            "(line 6381,col 5)-(line 6381,col 63)",
            "(line 6382,col 5)-(line 6382,col 69)",
            "(line 6383,col 5)-(line 6384,col 49)",
            "(line 6385,col 5)-(line 6386,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testFunctionAssignement()",
        "snippet": "  public void testFunctionAssignement() throws Exception {\n    testTypes(\"/**\" +\n        \"* @param {string} ph0\" +\n        \"* @param {string} ph1\" +\n        \"* @return {string}\" +\n        \"*/\" +\n        \"function MSG_CALENDAR_ACCESS_ERROR(ph0, ph1) {return ''}\" +\n        \"/** @type {Function} */\" +\n        \"var MSG_CALENDAR_ADD_ERROR = MSG_CALENDAR_ACCESS_ERROR;\");\n  }\n",
        "begin_line": 6389,
        "end_line": 6398,
        "comment": "",
        "child_ranges": [
            "(line 6390,col 5)-(line 6397,col 67)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testAddMethodsPrototypeTwoWays()",
        "snippet": "  public void testAddMethodsPrototypeTwoWays() throws Exception {\n    Node js1Node = parseAndTypeCheck(\n        \"/** @constructor */function A() {}\" +\n        \"A.prototype = {m1: 5, m2: true};\" +\n        \"A.prototype.m3 = 'third property!';\");\n\n    ObjectType instanceType = getInstanceType(js1Node);\n    assertEquals(\"A\", instanceType.toString());\n    assertEquals(NATIVE_PROPERTIES_COUNT + 3,\n        instanceType.getPropertiesCount());\n    checkObjectType(instanceType, \"m1\", NUMBER_TYPE);\n    checkObjectType(instanceType, \"m2\", BOOLEAN_TYPE);\n    checkObjectType(instanceType, \"m3\", STRING_TYPE);\n  }\n",
        "begin_line": 6400,
        "end_line": 6413,
        "comment": "",
        "child_ranges": [
            "(line 6401,col 5)-(line 6404,col 47)",
            "(line 6406,col 5)-(line 6406,col 55)",
            "(line 6407,col 5)-(line 6407,col 47)",
            "(line 6408,col 5)-(line 6409,col 43)",
            "(line 6410,col 5)-(line 6410,col 53)",
            "(line 6411,col 5)-(line 6411,col 54)",
            "(line 6412,col 5)-(line 6412,col 53)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testPrototypePropertyTypes()",
        "snippet": "  public void testPrototypePropertyTypes() throws Exception {\n    Node js1Node = parseAndTypeCheck(\n        \"/** @constructor */function A() {\\n\" +\n        \"  /** @type string */ this.m1;\\n\" +\n        \"  /** @type Object? */ this.m2 = {};\\n\" +\n        \"  /** @type boolean */ this.m3;\\n\" +\n        \"}\\n\" +\n        \"/** @type string */ A.prototype.m4;\\n\" +\n        \"/** @type number */ A.prototype.m5 = 0;\\n\" +\n        \"/** @type boolean */ A.prototype.m6;\\n\");\n\n    ObjectType instanceType = getInstanceType(js1Node);\n    assertEquals(NATIVE_PROPERTIES_COUNT + 6,\n        instanceType.getPropertiesCount());\n    checkObjectType(instanceType, \"m1\", STRING_TYPE);\n    checkObjectType(instanceType, \"m2\",\n        createUnionType(OBJECT_TYPE, NULL_TYPE));\n    checkObjectType(instanceType, \"m3\", BOOLEAN_TYPE);\n    checkObjectType(instanceType, \"m4\", STRING_TYPE);\n    checkObjectType(instanceType, \"m5\", NUMBER_TYPE);\n    checkObjectType(instanceType, \"m6\", BOOLEAN_TYPE);\n  }\n",
        "begin_line": 6415,
        "end_line": 6436,
        "comment": "",
        "child_ranges": [
            "(line 6416,col 5)-(line 6424,col 50)",
            "(line 6426,col 5)-(line 6426,col 55)",
            "(line 6427,col 5)-(line 6428,col 43)",
            "(line 6429,col 5)-(line 6429,col 53)",
            "(line 6430,col 5)-(line 6431,col 49)",
            "(line 6432,col 5)-(line 6432,col 54)",
            "(line 6433,col 5)-(line 6433,col 53)",
            "(line 6434,col 5)-(line 6434,col 53)",
            "(line 6435,col 5)-(line 6435,col 54)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testValueTypeBuiltInPrototypePropertyType()",
        "snippet": "  public void testValueTypeBuiltInPrototypePropertyType() throws Exception {\n    Node node = parseAndTypeCheck(\"\\\"x\\\".charAt(0)\");\n    assertEquals(STRING_TYPE, node.getFirstChild().getFirstChild().getJSType());\n  }\n",
        "begin_line": 6438,
        "end_line": 6441,
        "comment": "",
        "child_ranges": [
            "(line 6439,col 5)-(line 6439,col 53)",
            "(line 6440,col 5)-(line 6440,col 80)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testDeclareBuiltInConstructor()",
        "snippet": "  public void testDeclareBuiltInConstructor() throws Exception {\n    // Built-in prototype properties should be accessible\n    // even if the built-in constructor is declared.\n    Node node = parseAndTypeCheck(\n        \"/** @constructor */ var String = function(opt_str) {};\\n\" +\n        \"(new String(\\\"x\\\")).charAt(0)\");\n    assertEquals(STRING_TYPE, node.getLastChild().getFirstChild().getJSType());\n  }\n",
        "begin_line": 6443,
        "end_line": 6450,
        "comment": "",
        "child_ranges": [
            "(line 6446,col 5)-(line 6448,col 41)",
            "(line 6449,col 5)-(line 6449,col 79)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testExtendBuiltInType1()",
        "snippet": "  public void testExtendBuiltInType1() throws Exception {\n    String externs =\n        \"/** @constructor */ var String = function(opt_str) {};\\n\" +\n        \"/**\\n\" +\n        \"* @param {number} start\\n\" +\n        \"* @param {number} opt_length\\n\"  +\n        \"* @return {string}\\n\" +\n        \"*/\\n\" +\n        \"String.prototype.substr = function(start, opt_length) {};\\n\";\n    Node n1 = parseAndTypeCheck(externs + \"(new String(\\\"x\\\")).substr(0,1);\");\n    assertEquals(STRING_TYPE, n1.getLastChild().getFirstChild().getJSType());\n  }\n",
        "begin_line": 6452,
        "end_line": 6463,
        "comment": "",
        "child_ranges": [
            "(line 6453,col 5)-(line 6460,col 70)",
            "(line 6461,col 5)-(line 6461,col 78)",
            "(line 6462,col 5)-(line 6462,col 77)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testExtendBuiltInType2()",
        "snippet": "  public void testExtendBuiltInType2() throws Exception {\n    String externs =\n        \"/** @constructor */ var String = function(opt_str) {};\\n\" +\n        \"/**\\n\" +\n        \"* @param {number} start\\n\" +\n        \"* @param {number} opt_length\\n\"  +\n        \"* @return {string}\\n\" +\n        \"*/\\n\" +\n        \"String.prototype.substr = function(start, opt_length) {};\\n\";\n    Node n2 = parseAndTypeCheck(externs + \"\\\"x\\\".substr(0,1);\");\n    assertEquals(STRING_TYPE, n2.getLastChild().getFirstChild().getJSType());\n  }\n",
        "begin_line": 6465,
        "end_line": 6476,
        "comment": "",
        "child_ranges": [
            "(line 6466,col 5)-(line 6473,col 70)",
            "(line 6474,col 5)-(line 6474,col 64)",
            "(line 6475,col 5)-(line 6475,col 77)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testExtendFunction1()",
        "snippet": "  public void testExtendFunction1() throws Exception {\n    Node n = parseAndTypeCheck(\"/**@return {number}*/Function.prototype.f = \" +\n        \"function() { return 1; };\\n\" +\n        \"(new Function()).f();\");\n    JSType type = n.getLastChild().getLastChild().getJSType();\n    assertEquals(NUMBER_TYPE, type);\n  }\n",
        "begin_line": 6478,
        "end_line": 6484,
        "comment": "",
        "child_ranges": [
            "(line 6479,col 5)-(line 6481,col 33)",
            "(line 6482,col 5)-(line 6482,col 62)",
            "(line 6483,col 5)-(line 6483,col 36)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testExtendFunction2()",
        "snippet": "  public void testExtendFunction2() throws Exception {\n    Node n = parseAndTypeCheck(\"/**@return {number}*/Function.prototype.f = \" +\n        \"function() { return 1; };\\n\" +\n        \"(function() {}).f();\");\n    JSType type = n.getLastChild().getLastChild().getJSType();\n    assertEquals(NUMBER_TYPE, type);\n  }\n",
        "begin_line": 6486,
        "end_line": 6492,
        "comment": "",
        "child_ranges": [
            "(line 6487,col 5)-(line 6489,col 32)",
            "(line 6490,col 5)-(line 6490,col 62)",
            "(line 6491,col 5)-(line 6491,col 36)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInheritanceCheck1()",
        "snippet": "  public void testInheritanceCheck1() throws Exception {\n    testTypes(\n        \"/** @constructor */function Super() {};\" +\n        \"/** @constructor\\n @extends {Super} */function Sub() {};\" +\n        \"Sub.prototype.foo = function() {};\");\n  }\n",
        "begin_line": 6494,
        "end_line": 6499,
        "comment": "",
        "child_ranges": [
            "(line 6495,col 5)-(line 6498,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInheritanceCheck2()",
        "snippet": "  public void testInheritanceCheck2() throws Exception {\n    testTypes(\n        \"/** @constructor */function Super() {};\" +\n        \"/** @constructor\\n @extends {Super} */function Sub() {};\" +\n        \"/** @override */Sub.prototype.foo = function() {};\",\n        \"property foo not defined on any superclass of Sub\");\n  }\n",
        "begin_line": 6501,
        "end_line": 6507,
        "comment": "",
        "child_ranges": [
            "(line 6502,col 5)-(line 6506,col 61)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInheritanceCheck3()",
        "snippet": "  public void testInheritanceCheck3() throws Exception {\n    testTypes(\n        \"/** @constructor */function Super() {};\" +\n        \"Super.prototype.foo = function() {};\" +\n        \"/** @constructor\\n @extends {Super} */function Sub() {};\" +\n        \"Sub.prototype.foo = function() {};\",\n        \"property foo already defined on superclass Super; \" +\n        \"use @override to override it\");\n  }\n",
        "begin_line": 6509,
        "end_line": 6517,
        "comment": "",
        "child_ranges": [
            "(line 6510,col 5)-(line 6516,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInheritanceCheck4()",
        "snippet": "  public void testInheritanceCheck4() throws Exception {\n    testTypes(\n        \"/** @constructor */function Super() {};\" +\n        \"Super.prototype.foo = function() {};\" +\n        \"/** @constructor\\n @extends {Super} */function Sub() {};\" +\n        \"/** @override */Sub.prototype.foo = function() {};\");\n  }\n",
        "begin_line": 6519,
        "end_line": 6525,
        "comment": "",
        "child_ranges": [
            "(line 6520,col 5)-(line 6524,col 62)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInheritanceCheck5()",
        "snippet": "  public void testInheritanceCheck5() throws Exception {\n    testTypes(\n        \"/** @constructor */function Root() {};\" +\n        \"Root.prototype.foo = function() {};\" +\n        \"/** @constructor\\n @extends {Root} */function Super() {};\" +\n        \"/** @constructor\\n @extends {Super} */function Sub() {};\" +\n        \"Sub.prototype.foo = function() {};\",\n        \"property foo already defined on superclass Root; \" +\n        \"use @override to override it\");\n  }\n",
        "begin_line": 6527,
        "end_line": 6536,
        "comment": "",
        "child_ranges": [
            "(line 6528,col 5)-(line 6535,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInheritanceCheck6()",
        "snippet": "  public void testInheritanceCheck6() throws Exception {\n    testTypes(\n        \"/** @constructor */function Root() {};\" +\n        \"Root.prototype.foo = function() {};\" +\n        \"/** @constructor\\n @extends {Root} */function Super() {};\" +\n        \"/** @constructor\\n @extends {Super} */function Sub() {};\" +\n        \"/** @override */Sub.prototype.foo = function() {};\");\n  }\n",
        "begin_line": 6538,
        "end_line": 6545,
        "comment": "",
        "child_ranges": [
            "(line 6539,col 5)-(line 6544,col 62)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInheritanceCheck7()",
        "snippet": "  public void testInheritanceCheck7() throws Exception {\n    testTypes(\n        \"var goog = {};\" +\n        \"/** @constructor */goog.Super = function() {};\" +\n        \"goog.Super.prototype.foo = 3;\" +\n        \"/** @constructor\\n @extends {goog.Super} */goog.Sub = function() {};\" +\n        \"goog.Sub.prototype.foo = 5;\",\n        \"property foo already defined on superclass goog.Super; \" +\n        \"use @override to override it\");\n  }\n",
        "begin_line": 6547,
        "end_line": 6556,
        "comment": "",
        "child_ranges": [
            "(line 6548,col 5)-(line 6555,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInheritanceCheck8()",
        "snippet": "  public void testInheritanceCheck8() throws Exception {\n    testTypes(\n        \"var goog = {};\" +\n        \"/** @constructor */goog.Super = function() {};\" +\n        \"goog.Super.prototype.foo = 3;\" +\n        \"/** @constructor\\n @extends {goog.Super} */goog.Sub = function() {};\" +\n        \"/** @override */goog.Sub.prototype.foo = 5;\");\n  }\n",
        "begin_line": 6558,
        "end_line": 6565,
        "comment": "",
        "child_ranges": [
            "(line 6559,col 5)-(line 6564,col 55)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInheritanceCheck9_1()",
        "snippet": "  public void testInheritanceCheck9_1() throws Exception {\n    testTypes(\n        \"/** @constructor */function Super() {};\" +\n        \"Super.prototype.foo = function() { return 3; };\" +\n        \"/** @constructor\\n @extends {Super} */function Sub() {};\" +\n        \"/** @override\\n @return {number} */Sub.prototype.foo =\\n\" +\n        \"function() { return 1; };\");\n  }\n",
        "begin_line": 6567,
        "end_line": 6574,
        "comment": "",
        "child_ranges": [
            "(line 6568,col 5)-(line 6573,col 37)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInheritanceCheck9_2()",
        "snippet": "  public void testInheritanceCheck9_2() throws Exception {\n    testTypes(\n        \"/** @constructor */function Super() {};\" +\n        \"/** @return {number} */\" +\n        \"Super.prototype.foo = function() { return 1; };\" +\n        \"/** @constructor\\n @extends {Super} */function Sub() {};\" +\n        \"/** @override */Sub.prototype.foo =\\n\" +\n        \"function() {};\");\n  }\n",
        "begin_line": 6576,
        "end_line": 6584,
        "comment": "",
        "child_ranges": [
            "(line 6577,col 5)-(line 6583,col 26)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInheritanceCheck9_3()",
        "snippet": "  public void testInheritanceCheck9_3() throws Exception {\n    testTypes(\n        \"/** @constructor */function Super() {};\" +\n        \"/** @return {number} */\" +\n        \"Super.prototype.foo = function() { return 1; };\" +\n        \"/** @constructor\\n @extends {Super} */function Sub() {};\" +\n        \"/** @override\\n @return {string} */Sub.prototype.foo =\\n\" +\n        \"function() { return \\\"some string\\\" };\",\n        \"mismatch of the foo property type and the type of the property it \" +\n        \"overrides from superclass Super\\n\" +\n        \"original: function (this:Super): number\\n\" +\n        \"override: function (this:Sub): string\");\n  }\n",
        "begin_line": 6586,
        "end_line": 6598,
        "comment": "",
        "child_ranges": [
            "(line 6587,col 5)-(line 6597,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInheritanceCheck10_1()",
        "snippet": "  public void testInheritanceCheck10_1() throws Exception {\n    testTypes(\n        \"/** @constructor */function Root() {};\" +\n        \"Root.prototype.foo = function() { return 3; };\" +\n        \"/** @constructor\\n @extends {Root} */function Super() {};\" +\n        \"/** @constructor\\n @extends {Super} */function Sub() {};\" +\n        \"/** @override\\n @return {number} */Sub.prototype.foo =\\n\" +\n        \"function() { return 1; };\");\n  }\n",
        "begin_line": 6600,
        "end_line": 6608,
        "comment": "",
        "child_ranges": [
            "(line 6601,col 5)-(line 6607,col 37)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInheritanceCheck10_2()",
        "snippet": "  public void testInheritanceCheck10_2() throws Exception {\n    testTypes(\n        \"/** @constructor */function Root() {};\" +\n        \"/** @return {number} */\" +\n        \"Root.prototype.foo = function() { return 1; };\" +\n        \"/** @constructor\\n @extends {Root} */function Super() {};\" +\n        \"/** @constructor\\n @extends {Super} */function Sub() {};\" +\n        \"/** @override */Sub.prototype.foo =\\n\" +\n        \"function() {};\");\n  }\n",
        "begin_line": 6610,
        "end_line": 6619,
        "comment": "",
        "child_ranges": [
            "(line 6611,col 5)-(line 6618,col 26)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInheritanceCheck10_3()",
        "snippet": "  public void testInheritanceCheck10_3() throws Exception {\n    testTypes(\n        \"/** @constructor */function Root() {};\" +\n        \"/** @return {number} */\" +\n        \"Root.prototype.foo = function() { return 1; };\" +\n        \"/** @constructor\\n @extends {Root} */function Super() {};\" +\n        \"/** @constructor\\n @extends {Super} */function Sub() {};\" +\n        \"/** @override\\n @return {string} */Sub.prototype.foo =\\n\" +\n        \"function() { return \\\"some string\\\" };\",\n        \"mismatch of the foo property type and the type of the property it \" +\n        \"overrides from superclass Root\\n\" +\n        \"original: function (this:Root): number\\n\" +\n        \"override: function (this:Sub): string\");\n  }\n",
        "begin_line": 6621,
        "end_line": 6634,
        "comment": "",
        "child_ranges": [
            "(line 6622,col 5)-(line 6633,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInterfaceInheritanceCheck11()",
        "snippet": "  public void testInterfaceInheritanceCheck11() throws Exception {\n    testTypes(\n        \"/** @constructor */function Super() {};\" +\n        \"/** @param {number} bar */Super.prototype.foo = function(bar) {};\" +\n        \"/** @constructor\\n @extends {Super} */function Sub() {};\" +\n        \"/** @override\\n  @param {string} bar */Sub.prototype.foo =\\n\" +\n        \"function(bar) {};\",\n        \"mismatch of the foo property type and the type of the property it \" +\n        \"overrides from superclass Super\\n\" +\n        \"original: function (this:Super, number): undefined\\n\" +\n        \"override: function (this:Sub, string): undefined\");\n  }\n",
        "begin_line": 6636,
        "end_line": 6647,
        "comment": "",
        "child_ranges": [
            "(line 6637,col 5)-(line 6646,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInheritanceCheck12()",
        "snippet": "  public void testInheritanceCheck12() throws Exception {\n    testTypes(\n        \"var goog = {};\" +\n        \"/** @constructor */goog.Super = function() {};\" +\n        \"goog.Super.prototype.foo = 3;\" +\n        \"/** @constructor\\n @extends {goog.Super} */goog.Sub = function() {};\" +\n        \"/** @override */goog.Sub.prototype.foo = \\\"some string\\\";\",\n        \"mismatch of the foo property type and the type of the property it \" +\n        \"overrides from superclass goog.Super\\n\" +\n        \"original: number\\n\" +\n        \"override: string\");\n  }\n",
        "begin_line": 6649,
        "end_line": 6660,
        "comment": "",
        "child_ranges": [
            "(line 6650,col 5)-(line 6659,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInheritanceCheck13()",
        "snippet": "  public void testInheritanceCheck13() throws Exception {\n    testTypes(\n        \"var goog = {};\\n\" +\n        \"/** @constructor\\n @extends {goog.Missing} */function Sub() {};\" +\n        \"/** @override */Sub.prototype.foo = function() {};\",\n        \"Bad type annotation. Unknown type goog.Missing\");\n  }\n",
        "begin_line": 6662,
        "end_line": 6668,
        "comment": "",
        "child_ranges": [
            "(line 6663,col 5)-(line 6667,col 58)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInheritanceCheck14()",
        "snippet": "  public void testInheritanceCheck14() throws Exception {\n    testClosureTypes(\n        \"var goog = {};\\n\" +\n        \"/** @constructor\\n @extends {goog.Missing} */\\n\" +\n        \"goog.Super = function() {};\\n\" +\n        \"/** @constructor\\n @extends {goog.Super} */function Sub() {};\" +\n        \"/** @override */Sub.prototype.foo = function() {};\",\n        \"Bad type annotation. Unknown type goog.Missing\");\n  }\n",
        "begin_line": 6670,
        "end_line": 6678,
        "comment": "",
        "child_ranges": [
            "(line 6671,col 5)-(line 6677,col 58)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInterfaceInheritanceCheck1()",
        "snippet": "  public void testInterfaceInheritanceCheck1() throws Exception {\n    testTypes(\n        \"/** @interface */function Super() {};\" +\n        \"/** @desc description */Super.prototype.foo = function() {};\" +\n        \"/** @constructor\\n @implements {Super} */function Sub() {};\" +\n        \"Sub.prototype.foo = function() {};\",\n        \"property foo already defined on interface Super; use @override to \" +\n        \"override it\");\n  }\n",
        "begin_line": 6710,
        "end_line": 6718,
        "comment": "",
        "child_ranges": [
            "(line 6711,col 5)-(line 6717,col 23)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInterfaceInheritanceCheck2()",
        "snippet": "  public void testInterfaceInheritanceCheck2() throws Exception {\n    testTypes(\n        \"/** @interface */function Super() {};\" +\n        \"/** @desc description */Super.prototype.foo = function() {};\" +\n        \"/** @constructor\\n @implements {Super} */function Sub() {};\" +\n        \"/** @override */Sub.prototype.foo = function() {};\");\n  }\n",
        "begin_line": 6720,
        "end_line": 6726,
        "comment": "",
        "child_ranges": [
            "(line 6721,col 5)-(line 6725,col 62)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInterfaceInheritanceCheck3()",
        "snippet": "  public void testInterfaceInheritanceCheck3() throws Exception {\n    testTypes(\n        \"/** @interface */function Root() {};\" +\n        \"/** @return {number} */Root.prototype.foo = function() {};\" +\n        \"/** @interface\\n @extends {Root} */function Super() {};\" +\n        \"/** @constructor\\n @implements {Super} */function Sub() {};\" +\n        \"/** @return {number} */Sub.prototype.foo = function() { return 1;};\",\n        \"property foo already defined on interface Root; use @override to \" +\n        \"override it\");\n  }\n",
        "begin_line": 6728,
        "end_line": 6737,
        "comment": "",
        "child_ranges": [
            "(line 6729,col 5)-(line 6736,col 23)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInterfaceInheritanceCheck4()",
        "snippet": "  public void testInterfaceInheritanceCheck4() throws Exception {\n    testTypes(\n        \"/** @interface */function Root() {};\" +\n        \"/** @return {number} */Root.prototype.foo = function() {};\" +\n        \"/** @interface\\n @extends {Root} */function Super() {};\" +\n        \"/** @constructor\\n @implements {Super} */function Sub() {};\" +\n        \"/** @override\\n * @return {number} */Sub.prototype.foo =\\n\" +\n        \"function() { return 1;};\");\n  }\n",
        "begin_line": 6739,
        "end_line": 6747,
        "comment": "",
        "child_ranges": [
            "(line 6740,col 5)-(line 6746,col 36)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInterfaceInheritanceCheck5()",
        "snippet": "  public void testInterfaceInheritanceCheck5() throws Exception {\n    testTypes(\n        \"/** @interface */function Super() {};\" +\n        \"/** @return {string} */Super.prototype.foo = function() {};\" +\n        \"/** @constructor\\n @implements {Super} */function Sub() {};\" +\n        \"/** @override\\n @return {number} */Sub.prototype.foo =\\n\" +\n        \"function() { return 1; };\",\n        \"mismatch of the foo property type and the type of the property it \" +\n        \"overrides from interface Super\\n\" +\n        \"original: function (this:Super): string\\n\" +\n        \"override: function (this:Sub): number\");\n  }\n",
        "begin_line": 6749,
        "end_line": 6760,
        "comment": "",
        "child_ranges": [
            "(line 6750,col 5)-(line 6759,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInterfaceInheritanceCheck6()",
        "snippet": "  public void testInterfaceInheritanceCheck6() throws Exception {\n    testTypes(\n        \"/** @interface */function Root() {};\" +\n        \"/** @return {string} */Root.prototype.foo = function() {};\" +\n        \"/** @interface\\n @extends {Root} */function Super() {};\" +\n        \"/** @constructor\\n @implements {Super} */function Sub() {};\" +\n        \"/** @override\\n @return {number} */Sub.prototype.foo =\\n\" +\n        \"function() { return 1; };\",\n        \"mismatch of the foo property type and the type of the property it \" +\n        \"overrides from interface Root\\n\" +\n        \"original: function (this:Root): string\\n\" +\n        \"override: function (this:Sub): number\");\n  }\n",
        "begin_line": 6762,
        "end_line": 6774,
        "comment": "",
        "child_ranges": [
            "(line 6763,col 5)-(line 6773,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInterfaceInheritanceCheck7()",
        "snippet": "  public void testInterfaceInheritanceCheck7() throws Exception {\n    testTypes(\n        \"/** @interface */function Super() {};\" +\n        \"/** @param {number} bar */Super.prototype.foo = function(bar) {};\" +\n        \"/** @constructor\\n @implements {Super} */function Sub() {};\" +\n        \"/** @override\\n  @param {string} bar */Sub.prototype.foo =\\n\" +\n        \"function(bar) {};\",\n        \"mismatch of the foo property type and the type of the property it \" +\n        \"overrides from interface Super\\n\" +\n        \"original: function (this:Super, number): undefined\\n\" +\n        \"override: function (this:Sub, string): undefined\");\n  }\n",
        "begin_line": 6776,
        "end_line": 6787,
        "comment": "",
        "child_ranges": [
            "(line 6777,col 5)-(line 6786,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInterfaceInheritanceCheck8()",
        "snippet": "  public void testInterfaceInheritanceCheck8() throws Exception {\n    testTypes(\n        \"/** @constructor\\n @implements {Super} */function Sub() {};\" +\n        \"/** @override */Sub.prototype.foo = function() {};\",\n        new String[] {\n          \"Bad type annotation. Unknown type Super\",\n          \"property foo not defined on any superclass of Sub\"\n        });\n  }\n",
        "begin_line": 6789,
        "end_line": 6797,
        "comment": "",
        "child_ranges": [
            "(line 6790,col 5)-(line 6796,col 11)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInterfaceInheritanceCheck9()",
        "snippet": "  public void testInterfaceInheritanceCheck9() throws Exception {\n    testTypes(\n        \"/** @interface */ function I() {}\" +\n        \"/** @return {number} */ I.prototype.bar = function() {};\" +\n        \"/** @constructor */ function F() {}\" +\n        \"/** @return {number} */ F.prototype.bar = function() {return 3; };\" +\n        \"/** @return {number} */ F.prototype.foo = function() {return 3; };\" +\n        \"/** @constructor \\n * @extends {F} \\n * @implements {I} */ \" +\n        \"function G() {}\" +\n        \"/** @return {string} */ function f() { return new G().bar(); }\",\n        \"inconsistent return type\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 6799,
        "end_line": 6812,
        "comment": "",
        "child_ranges": [
            "(line 6800,col 5)-(line 6811,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInterfaceInheritanceCheck10()",
        "snippet": "  public void testInterfaceInheritanceCheck10() throws Exception {\n    testTypes(\n        \"/** @interface */ function I() {}\" +\n        \"/** @return {number} */ I.prototype.bar = function() {};\" +\n        \"/** @constructor */ function F() {}\" +\n        \"/** @return {number} */ F.prototype.foo = function() {return 3; };\" +\n        \"/** @constructor \\n * @extends {F} \\n * @implements {I} */ \" +\n        \"function G() {}\" +\n        \"/** @return {number} \\n * @override */ \" +\n        \"G.prototype.bar = G.prototype.foo;\" +\n        \"/** @return {string} */ function f() { return new G().bar(); }\",\n        \"inconsistent return type\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 6814,
        "end_line": 6828,
        "comment": "",
        "child_ranges": [
            "(line 6815,col 5)-(line 6827,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInterfaceInheritanceCheck12()",
        "snippet": "  public void testInterfaceInheritanceCheck12() throws Exception {\n    testTypes(\n        \"/** @interface */ function I() {};\\n\" +\n        \"/** @type {string} */ I.prototype.foobar;\\n\" +\n        \"/** \\n * @constructor \\n * @implements {I} */\\n\" +\n        \"function C() {\\n\" +\n        \"/** \\n * @type {number} */ this.foobar = 2;};\\n\" +\n        \"/** @type {I} */ \\n var test = new C(); alert(test.foobar);\",\n        \"mismatch of the foobar property type and the type of the property\" +\n        \" it overrides from interface I\\n\" +\n        \"original: string\\n\" +\n        \"override: number\");\n  }\n",
        "begin_line": 6830,
        "end_line": 6842,
        "comment": "",
        "child_ranges": [
            "(line 6831,col 5)-(line 6841,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInterfaceInheritanceCheck13()",
        "snippet": "  public void testInterfaceInheritanceCheck13() throws Exception {\n    testTypes(\n        \"function abstractMethod() {};\\n\" +\n        \"/** @interface */var base = function() {};\\n\" +\n        \"/** @extends {base} \\n @interface */ var Int = function() {}\\n\" +\n        \"/** @type {{bar : !Function}} */ var x; \\n\" +\n        \"/** @type {!Function} */ base.prototype.bar = abstractMethod; \\n\" +\n        \"/** @type {Int} */ foo;\\n\" +\n        \"foo.bar();\");\n  }\n",
        "begin_line": 6844,
        "end_line": 6853,
        "comment": "",
        "child_ranges": [
            "(line 6845,col 5)-(line 6852,col 22)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInterfacePropertyNotImplemented()",
        "snippet": "  public void testInterfacePropertyNotImplemented() throws Exception {\n    testTypes(\n        \"/** @interface */function Int() {};\" +\n        \"/** @desc description */Int.prototype.foo = function() {};\" +\n        \"/** @constructor\\n @implements {Int} */function Foo() {};\",\n        \"property foo on interface Int is not implemented by type Foo\");\n  }\n",
        "begin_line": 6855,
        "end_line": 6861,
        "comment": "",
        "child_ranges": [
            "(line 6856,col 5)-(line 6860,col 72)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInterfacePropertyNotImplemented2()",
        "snippet": "  public void testInterfacePropertyNotImplemented2() throws Exception {\n    testTypes(\n        \"/** @interface */function Int() {};\" +\n        \"/** @desc description */Int.prototype.foo = function() {};\" +\n        \"/** @interface \\n @extends {Int} */function Int2() {};\" +\n        \"/** @constructor\\n @implements {Int2} */function Foo() {};\",\n        \"property foo on interface Int is not implemented by type Foo\");\n  }\n",
        "begin_line": 6863,
        "end_line": 6870,
        "comment": "",
        "child_ranges": [
            "(line 6864,col 5)-(line 6869,col 72)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testStubConstructorImplementingInterface()",
        "snippet": "  public void testStubConstructorImplementingInterface() throws Exception {\n    // This does not throw a warning for unimplemented property because Foo is\n    // just a stub.\n    testTypes(\n        // externs\n        \"/** @interface */ function Int() {}\\n\" +\n        \"/** @desc description */Int.prototype.foo = function() {};\" +\n        \"/** @constructor \\n @implements {Int} */ var Foo;\\n\",\n        \"\", null, false);\n  }\n",
        "begin_line": 6872,
        "end_line": 6881,
        "comment": "",
        "child_ranges": [
            "(line 6875,col 5)-(line 6880,col 25)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testObjectLiteral()",
        "snippet": "  public void testObjectLiteral() throws Exception {\n    Node n = parseAndTypeCheck(\"var a = {m1: 7, m2: 'hello'}\");\n\n    Node nameNode = n.getFirstChild().getFirstChild();\n    Node objectNode = nameNode.getFirstChild();\n\n    // node extraction\n    assertEquals(Token.NAME, nameNode.getType());\n    assertEquals(Token.OBJECTLIT, objectNode.getType());\n\n    // value's type\n    ObjectType objectType =\n        (ObjectType) objectNode.getJSType();\n    assertEquals(NUMBER_TYPE, objectType.getPropertyType(\"m1\"));\n    assertEquals(STRING_TYPE, objectType.getPropertyType(\"m2\"));\n\n    // variable's type\n    assertEquals(objectType, nameNode.getJSType());\n  }\n",
        "begin_line": 6883,
        "end_line": 6901,
        "comment": "",
        "child_ranges": [
            "(line 6884,col 5)-(line 6884,col 63)",
            "(line 6886,col 5)-(line 6886,col 54)",
            "(line 6887,col 5)-(line 6887,col 47)",
            "(line 6890,col 5)-(line 6890,col 49)",
            "(line 6891,col 5)-(line 6891,col 56)",
            "(line 6894,col 5)-(line 6895,col 44)",
            "(line 6896,col 5)-(line 6896,col 64)",
            "(line 6897,col 5)-(line 6897,col 64)",
            "(line 6900,col 5)-(line 6900,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testObjectLiteralDeclaration1()",
        "snippet": "  public void testObjectLiteralDeclaration1() throws Exception {\n    testTypes(\n        \"var x = {\" +\n        \"/** @type {boolean} */ abc: true,\" +\n        \"/** @type {number} */ 'def': 0,\" +\n        \"/** @type {string} */ 3: 'fgh'\" +\n        \"};\");\n  }\n",
        "begin_line": 6903,
        "end_line": 6910,
        "comment": "",
        "child_ranges": [
            "(line 6904,col 5)-(line 6909,col 14)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testObjectLiteralDeclaration2()",
        "snippet": "  public void testObjectLiteralDeclaration2() throws Exception {\n    testTypes(\n        \"var x = {\" +\n        \"  /** @type {boolean} */ abc: true\" +\n        \"};\" +\n        \"x.abc = 0;\",\n        \"assignment to property abc of x\\n\" +\n        \"found   : number\\n\" +\n        \"required: boolean\");\n  }\n",
        "begin_line": 6912,
        "end_line": 6921,
        "comment": "",
        "child_ranges": [
            "(line 6913,col 5)-(line 6920,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testObjectLiteralDeclaration3()",
        "snippet": "  public void testObjectLiteralDeclaration3() throws Exception {\n    testTypes(\n        \"/** @param {{foo: !Function}} x */ function f(x) {}\" +\n        \"f({foo: function() {}});\");\n  }\n",
        "begin_line": 6923,
        "end_line": 6927,
        "comment": "",
        "child_ranges": [
            "(line 6924,col 5)-(line 6926,col 36)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testObjectLiteralDeclaration4()",
        "snippet": "  public void testObjectLiteralDeclaration4() throws Exception {\n    testClosureTypesMultipleWarnings(\n        \"var x = {\" +\n        \"  /** @param {boolean} x */ abc: function(x) {}\" +\n        \"};\" +\n        \"/**\\n\" +\n        \" * @param {string} x\\n\" +\n        \" * @suppress {duplicate}\\n\" +\n        \" */ x.abc = function(x) {};\",\n        Lists.newArrayList(\n            \"variable x.abc redefined with type \" +\n            \"function (string): undefined, \" +\n            \"original definition at  [testcode] :1 with type \" +\n            \"function (boolean): undefined\",\n            \"assignment to property abc of x\\n\" +\n            \"found   : function (string): undefined\\n\" +\n            \"required: function (boolean): undefined\"));\n  }\n",
        "begin_line": 6929,
        "end_line": 6946,
        "comment": "",
        "child_ranges": [
            "(line 6930,col 5)-(line 6945,col 56)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testObjectLiteralDeclaration5()",
        "snippet": "  public void testObjectLiteralDeclaration5() throws Exception {\n    testTypes(\n        \"var x = {\" +\n        \"  /** @param {boolean} x */ abc: function(x) {}\" +\n        \"};\" +\n        \"/**\\n\" +\n        \" * @param {boolean} x\\n\" +\n        \" * @suppress {duplicate}\\n\" +\n        \" */ x.abc = function(x) {};\");\n  }\n",
        "begin_line": 6948,
        "end_line": 6957,
        "comment": "",
        "child_ranges": [
            "(line 6949,col 5)-(line 6956,col 39)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testObjectLiteralDeclaration6()",
        "snippet": "  public void testObjectLiteralDeclaration6() throws Exception {\n    testTypes(\n        \"var x = {};\" +\n        \"/**\\n\" +\n        \" * @param {boolean} x\\n\" +\n        \" * @suppress {duplicate}\\n\" +\n        \" */ x.abc = function(x) {};\" +\n        \"x = {\" +\n        \"  /**\\n\" +\n        \"   * @param {boolean} x\\n\" +\n        \"   * @suppress {duplicate}\\n\" +\n        \"   */\" +\n        \"  abc: function(x) {}\" +\n        \"};\");\n  }\n",
        "begin_line": 6959,
        "end_line": 6973,
        "comment": "",
        "child_ranges": [
            "(line 6960,col 5)-(line 6972,col 14)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testObjectLiteralDeclaration7()",
        "snippet": "  public void testObjectLiteralDeclaration7() throws Exception {\n    testTypes(\n        \"var x = {};\" +\n        \"/**\\n\" +\n        \" * @type {function(boolean): undefined}\\n\" +\n        \" */ x.abc = function(x) {};\" +\n        \"x = {\" +\n        \"  /**\\n\" +\n        \"   * @param {boolean} x\\n\" +\n        \"   * @suppress {duplicate}\\n\" +\n        \"   */\" +\n        \"  abc: function(x) {}\" +\n        \"};\");\n  }\n",
        "begin_line": 6975,
        "end_line": 6988,
        "comment": "",
        "child_ranges": [
            "(line 6976,col 5)-(line 6987,col 14)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testCallDateConstructorAsFunction()",
        "snippet": "  public void testCallDateConstructorAsFunction() throws Exception {\n    // ECMA-262 15.9.2: When Date is called as a function rather than as a\n    // constructor, it returns a string.\n    Node n = parseAndTypeCheck(\"Date()\");\n    assertEquals(STRING_TYPE, n.getFirstChild().getFirstChild().getJSType());\n  }\n",
        "begin_line": 6990,
        "end_line": 6995,
        "comment": "",
        "child_ranges": [
            "(line 6993,col 5)-(line 6993,col 41)",
            "(line 6994,col 5)-(line 6994,col 77)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testCallErrorConstructorAsFunction()",
        "snippet": "  public void testCallErrorConstructorAsFunction() throws Exception {\n    Node n = parseAndTypeCheck(\"Error('x')\");\n    assertEquals(ERROR_TYPE,\n                 n.getFirstChild().getFirstChild().getJSType());\n  }\n",
        "begin_line": 7000,
        "end_line": 7004,
        "comment": "",
        "child_ranges": [
            "(line 7001,col 5)-(line 7001,col 45)",
            "(line 7002,col 5)-(line 7003,col 64)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testCallArrayConstructorAsFunction()",
        "snippet": "  public void testCallArrayConstructorAsFunction() throws Exception {\n    Node n = parseAndTypeCheck(\"Array()\");\n    assertEquals(ARRAY_TYPE,\n                 n.getFirstChild().getFirstChild().getJSType());\n  }\n",
        "begin_line": 7006,
        "end_line": 7010,
        "comment": "",
        "child_ranges": [
            "(line 7007,col 5)-(line 7007,col 42)",
            "(line 7008,col 5)-(line 7009,col 64)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testPropertyTypeOfUnionType()",
        "snippet": "  public void testPropertyTypeOfUnionType() throws Exception {\n    testTypes(\"var a = {};\" +\n        \"/** @constructor */ a.N = function() {};\\n\" +\n        \"a.N.prototype.p = 1;\\n\" +\n        \"/** @constructor */ a.S = function() {};\\n\" +\n        \"a.S.prototype.p = 'a';\\n\" +\n        \"/** @param {!a.N|!a.S} x\\n@return {string} */\\n\" +\n        \"var f = function(x) { return x.p; };\",\n        \"inconsistent return type\\n\" +\n        \"found   : (number|string)\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 7012,
        "end_line": 7023,
        "comment": "",
        "child_ranges": [
            "(line 7013,col 5)-(line 7022,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testAnnotatedPropertyOnInterface1()",
        "snippet": "  public void testAnnotatedPropertyOnInterface1() throws Exception {\n    // For interfaces we must allow function definitions that don't have a\n    // return statement, even though they declare a returned type.\n    testTypes(\"/** @interface */ u.T = function() {};\\n\" +\n        \"/** @return {number} */ u.T.prototype.f = function() {};\");\n  }\n",
        "begin_line": 7056,
        "end_line": 7061,
        "comment": "",
        "child_ranges": [
            "(line 7059,col 5)-(line 7060,col 68)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testAnnotatedPropertyOnInterface2()",
        "snippet": "  public void testAnnotatedPropertyOnInterface2() throws Exception {\n    testTypes(\"/** @interface */ u.T = function() {};\\n\" +\n        \"/** @return {number} */ u.T.prototype.f = function() { };\");\n  }\n",
        "begin_line": 7063,
        "end_line": 7066,
        "comment": "",
        "child_ranges": [
            "(line 7064,col 5)-(line 7065,col 69)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testAnnotatedPropertyOnInterface3()",
        "snippet": "  public void testAnnotatedPropertyOnInterface3() throws Exception {\n    testTypes(\"/** @interface */ function T() {};\\n\" +\n        \"/** @return {number} */ T.prototype.f = function() { };\");\n  }\n",
        "begin_line": 7068,
        "end_line": 7071,
        "comment": "",
        "child_ranges": [
            "(line 7069,col 5)-(line 7070,col 67)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testAnnotatedPropertyOnInterface4()",
        "snippet": "  public void testAnnotatedPropertyOnInterface4() throws Exception {\n    testTypes(\n        CLOSURE_DEFS +\n        \"/** @interface */ function T() {};\\n\" +\n        \"/** @return {number} */ T.prototype.f = goog.abstractMethod;\");\n  }\n",
        "begin_line": 7073,
        "end_line": 7078,
        "comment": "",
        "child_ranges": [
            "(line 7074,col 5)-(line 7077,col 72)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testWarnUnannotatedPropertyOnInterface5()",
        "snippet": "  public void testWarnUnannotatedPropertyOnInterface5() throws Exception {\n    testTypes(\"/** @interface */ u.T = function () {};\\n\" +\n        \"/** @desc x does something */u.T.prototype.x = function() {};\");\n  }\n",
        "begin_line": 7092,
        "end_line": 7095,
        "comment": "",
        "child_ranges": [
            "(line 7093,col 5)-(line 7094,col 73)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testWarnUnannotatedPropertyOnInterface6()",
        "snippet": "  public void testWarnUnannotatedPropertyOnInterface6() throws Exception {\n    testTypes(\"/** @interface */ function T() {};\\n\" +\n        \"/** @desc x does something */T.prototype.x = function() {};\");\n  }\n",
        "begin_line": 7097,
        "end_line": 7100,
        "comment": "",
        "child_ranges": [
            "(line 7098,col 5)-(line 7099,col 71)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testDataPropertyOnInterface1()",
        "snippet": "  public void testDataPropertyOnInterface1() throws Exception {\n    testTypes(\"/** @interface */ function T() {};\\n\" +\n        \"/** @type {number} */T.prototype.x;\");\n  }\n",
        "begin_line": 7110,
        "end_line": 7113,
        "comment": "",
        "child_ranges": [
            "(line 7111,col 5)-(line 7112,col 47)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testDataPropertyOnInterface2()",
        "snippet": "  public void testDataPropertyOnInterface2() throws Exception {\n    reportMissingOverrides = CheckLevel.OFF;\n    testTypes(\"/** @interface */ function T() {};\\n\" +\n        \"/** @type {number} */T.prototype.x;\\n\" +\n        \"/** @constructor \\n\" +\n        \" *  @implements {T} \\n\" +\n        \" */\\n\" +\n        \"function C() {}\\n\" +\n        \"C.prototype.x = 'foo';\",\n        \"mismatch of the x property type and the type of the property it \" +\n        \"overrides from interface T\\n\" +\n        \"original: number\\n\" +\n        \"override: string\");\n  }\n",
        "begin_line": 7115,
        "end_line": 7128,
        "comment": "",
        "child_ranges": [
            "(line 7116,col 5)-(line 7116,col 44)",
            "(line 7117,col 5)-(line 7127,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testDataPropertyOnInterface3()",
        "snippet": "  public void testDataPropertyOnInterface3() throws Exception {\n    testTypes(\"/** @interface */ function T() {};\\n\" +\n        \"/** @type {number} */T.prototype.x;\\n\" +\n        \"/** @constructor \\n\" +\n        \" *  @implements {T} \\n\" +\n        \" */\\n\" +\n        \"function C() {}\\n\" +\n        \"/** @override */\\n\" +\n        \"C.prototype.x = 'foo';\",\n        \"mismatch of the x property type and the type of the property it \" +\n        \"overrides from interface T\\n\" +\n        \"original: number\\n\" +\n        \"override: string\");\n  }\n",
        "begin_line": 7130,
        "end_line": 7143,
        "comment": "",
        "child_ranges": [
            "(line 7131,col 5)-(line 7142,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testDataPropertyOnInterface4()",
        "snippet": "  public void testDataPropertyOnInterface4() throws Exception {\n    testTypes(\"/** @interface */ function T() {};\\n\" +\n        \"/** @type {number} */T.prototype.x;\\n\" +\n        \"/** @constructor \\n\" +\n        \" *  @implements {T} \\n\" +\n        \" */\\n\" +\n        \"function C() { /** @type {string} */ \\n this.x = 'foo'; }\\n\",\n        \"mismatch of the x property type and the type of the property it \" +\n        \"overrides from interface T\\n\" +\n        \"original: number\\n\" +\n        \"override: string\");\n  }\n",
        "begin_line": 7145,
        "end_line": 7156,
        "comment": "",
        "child_ranges": [
            "(line 7146,col 5)-(line 7155,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testWarnDataPropertyOnInterface3()",
        "snippet": "  public void testWarnDataPropertyOnInterface3() throws Exception {\n    testTypes(\"/** @interface */ u.T = function () {};\\n\" +\n        \"/** @type {number} */u.T.prototype.x = 1;\",\n        \"interface members can only be empty property declarations, \"\n        + \"empty functions, or goog.abstractMethod\");\n  }\n",
        "begin_line": 7158,
        "end_line": 7163,
        "comment": "",
        "child_ranges": [
            "(line 7159,col 5)-(line 7162,col 53)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testWarnDataPropertyOnInterface4()",
        "snippet": "  public void testWarnDataPropertyOnInterface4() throws Exception {\n    testTypes(\"/** @interface */ function T() {};\\n\" +\n        \"/** @type {number} */T.prototype.x = 1;\",\n        \"interface members can only be empty property declarations, \"\n        + \"empty functions, or goog.abstractMethod\");\n  }\n",
        "begin_line": 7165,
        "end_line": 7170,
        "comment": "",
        "child_ranges": [
            "(line 7166,col 5)-(line 7169,col 53)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testErrorMismatchingPropertyOnInterface4()",
        "snippet": "  public void testErrorMismatchingPropertyOnInterface4() throws Exception {\n    testTypes(\"/** @interface */ u.T = function () {};\\n\" +\n        \"/** @param {Number} foo */u.T.prototype.x =\\n\" +\n        \"function() {};\",\n        \"parameter foo does not appear in u.T.prototype.x's parameter list\");\n  }\n",
        "begin_line": 7201,
        "end_line": 7206,
        "comment": "",
        "child_ranges": [
            "(line 7202,col 5)-(line 7205,col 77)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testErrorMismatchingPropertyOnInterface5()",
        "snippet": "  public void testErrorMismatchingPropertyOnInterface5() throws Exception {\n    testTypes(\"/** @interface */ function T() {};\\n\" +\n        \"/** @type {number} */T.prototype.x = function() { };\",\n        \"assignment to property x of T.prototype\\n\" +\n        \"found   : function (): undefined\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 7208,
        "end_line": 7214,
        "comment": "",
        "child_ranges": [
            "(line 7209,col 5)-(line 7213,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testErrorMismatchingPropertyOnInterface6()",
        "snippet": "  public void testErrorMismatchingPropertyOnInterface6() throws Exception {\n    testTypes(\"/** @interface */ function T() {};\\n\" +\n        \"/** @return {number} */T.prototype.x = 1\",\n        \"interface members can only be empty property declarations, \"\n        + \"empty functions, or goog.abstractMethod\"\n        );\n  }\n",
        "begin_line": 7216,
        "end_line": 7222,
        "comment": "",
        "child_ranges": [
            "(line 7217,col 5)-(line 7221,col 10)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInterfaceNonEmptyFunction()",
        "snippet": "  public void testInterfaceNonEmptyFunction() throws Exception {\n    testTypes(\"/** @interface */ function T() {};\\n\" +\n        \"T.prototype.x = function() { return 'foo'; }\",\n        \"interface member functions must have an empty body\"\n        );\n  }\n",
        "begin_line": 7224,
        "end_line": 7229,
        "comment": "",
        "child_ranges": [
            "(line 7225,col 5)-(line 7228,col 10)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testDoubleNestedInterface()",
        "snippet": "  public void testDoubleNestedInterface() throws Exception {\n    testTypes(\"/** @interface */ var I1 = function() {};\\n\" +\n              \"/** @interface */ I1.I2 = function() {};\\n\" +\n              \"/** @interface */ I1.I2.I3 = function() {};\\n\");\n  }\n",
        "begin_line": 7231,
        "end_line": 7235,
        "comment": "",
        "child_ranges": [
            "(line 7232,col 5)-(line 7234,col 63)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testStaticDataPropertyOnNestedInterface()",
        "snippet": "  public void testStaticDataPropertyOnNestedInterface() throws Exception {\n    testTypes(\"/** @interface */ var I1 = function() {};\\n\" +\n              \"/** @interface */ I1.I2 = function() {};\\n\" +\n              \"/** @type {number} */ I1.I2.x = 1;\\n\");\n  }\n",
        "begin_line": 7237,
        "end_line": 7241,
        "comment": "",
        "child_ranges": [
            "(line 7238,col 5)-(line 7240,col 54)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInterfaceInstantiation()",
        "snippet": "  public void testInterfaceInstantiation() throws Exception {\n    testTypes(\"/** @interface */var f = function(){}; new f\",\n              \"cannot instantiate non-constructor\");\n  }\n",
        "begin_line": 7243,
        "end_line": 7246,
        "comment": "",
        "child_ranges": [
            "(line 7244,col 5)-(line 7245,col 52)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testPrototypeLoop()",
        "snippet": "  public void testPrototypeLoop() throws Exception {\n    testClosureTypesMultipleWarnings(\n        suppressMissingProperty(\"foo\") +\n        \"/** @constructor \\n * @extends {T} */var T = function() {};\" +\n        \"alert((new T).foo);\",\n        Lists.newArrayList(\n            \"Parse error. Cycle detected in inheritance chain of type T\",\n            \"Could not resolve type in @extends tag of T\"));\n  }\n",
        "begin_line": 7248,
        "end_line": 7256,
        "comment": "",
        "child_ranges": [
            "(line 7249,col 5)-(line 7255,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testDirectPrototypeAssign()",
        "snippet": "  public void testDirectPrototypeAssign() throws Exception {\n    testTypes(\n        \"/** @constructor */ function Foo() {}\" +\n        \"/** @constructor */ function Bar() {}\" +\n        \"/** @type {Array} */ Bar.prototype = new Foo()\",\n        \"assignment to property prototype of Bar\\n\" +\n        \"found   : Foo\\n\" +\n        \"required: (Array|null)\");\n  }\n",
        "begin_line": 7258,
        "end_line": 7266,
        "comment": "",
        "child_ranges": [
            "(line 7259,col 5)-(line 7265,col 34)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testResolutionViaRegistry1()",
        "snippet": "  public void testResolutionViaRegistry1() throws Exception {\n    testTypes(\"/** @constructor */ u.T = function() {};\\n\" +\n        \"/** @type {(number|string)} */ u.T.prototype.a;\\n\" +\n        \"/**\\n\" +\n        \"* @param {u.T} t\\n\" +\n        \"* @return {string}\\n\" +\n        \"*/\\n\" +\n        \"var f = function(t) { return t.a; };\",\n        \"inconsistent return type\\n\" +\n        \"found   : (number|string)\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 7271,
        "end_line": 7282,
        "comment": "",
        "child_ranges": [
            "(line 7272,col 5)-(line 7281,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testResolutionViaRegistry2()",
        "snippet": "  public void testResolutionViaRegistry2() throws Exception {\n    testTypes(\n        \"/** @constructor */ u.T = function() {\" +\n        \"  this.a = 0; };\\n\" +\n        \"/**\\n\" +\n        \"* @param {u.T} t\\n\" +\n        \"* @return {string}\\n\" +\n        \"*/\\n\" +\n        \"var f = function(t) { return t.a; };\",\n        \"inconsistent return type\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 7284,
        "end_line": 7296,
        "comment": "",
        "child_ranges": [
            "(line 7285,col 5)-(line 7295,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testResolutionViaRegistry3()",
        "snippet": "  public void testResolutionViaRegistry3() throws Exception {\n    testTypes(\"/** @constructor */ u.T = function() {};\\n\" +\n        \"/** @type {(number|string)} */ u.T.prototype.a = 0;\\n\" +\n        \"/**\\n\" +\n        \"* @param {u.T} t\\n\" +\n        \"* @return {string}\\n\" +\n        \"*/\\n\" +\n        \"var f = function(t) { return t.a; };\",\n        \"inconsistent return type\\n\" +\n        \"found   : (number|string)\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 7298,
        "end_line": 7309,
        "comment": "",
        "child_ranges": [
            "(line 7299,col 5)-(line 7308,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testResolutionViaRegistry4()",
        "snippet": "  public void testResolutionViaRegistry4() throws Exception {\n    testTypes(\"/** @constructor */ u.A = function() {};\\n\" +\n        \"/**\\n* @constructor\\n* @extends {u.A}\\n*/\\nu.A.A = function() {}\\n;\" +\n        \"/**\\n* @constructor\\n* @extends {u.A}\\n*/\\nu.A.B = function() {};\\n\" +\n        \"var ab = new u.A.B();\\n\" +\n        \"/** @type {!u.A} */ var a = ab;\\n\" +\n        \"/** @type {!u.A.A} */ var aa = ab;\\n\",\n        \"initializing variable\\n\" +\n        \"found   : u.A.B\\n\" +\n        \"required: u.A.A\");\n  }\n",
        "begin_line": 7311,
        "end_line": 7321,
        "comment": "",
        "child_ranges": [
            "(line 7312,col 5)-(line 7320,col 27)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testResolutionViaRegistry5()",
        "snippet": "  public void testResolutionViaRegistry5() throws Exception {\n    Node n = parseAndTypeCheck(\"/** @constructor */ u.T = function() {}; u.T\");\n    JSType type = n.getLastChild().getLastChild().getJSType();\n    assertFalse(type.isUnknownType());\n    assertTrue(type instanceof FunctionType);\n    assertEquals(\"u.T\",\n        ((FunctionType) type).getInstanceType().getReferenceName());\n  }\n",
        "begin_line": 7323,
        "end_line": 7330,
        "comment": "",
        "child_ranges": [
            "(line 7324,col 5)-(line 7324,col 79)",
            "(line 7325,col 5)-(line 7325,col 62)",
            "(line 7326,col 5)-(line 7326,col 38)",
            "(line 7327,col 5)-(line 7327,col 45)",
            "(line 7328,col 5)-(line 7329,col 68)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testGatherProperyWithoutAnnotation1()",
        "snippet": "  public void testGatherProperyWithoutAnnotation1() throws Exception {\n    Node n = parseAndTypeCheck(\"/** @constructor */ var T = function() {};\" +\n        \"/** @type {!T} */var t; t.x; t;\");\n    JSType type = n.getLastChild().getLastChild().getJSType();\n    assertFalse(type.isUnknownType());\n    assertTrue(type instanceof ObjectType);\n    ObjectType objectType = (ObjectType) type;\n    assertFalse(objectType.hasProperty(\"x\"));\n    assertEquals(\n        Lists.newArrayList(objectType),\n        registry.getTypesWithProperty(\"x\"));\n  }\n",
        "begin_line": 7332,
        "end_line": 7343,
        "comment": "",
        "child_ranges": [
            "(line 7333,col 5)-(line 7334,col 43)",
            "(line 7335,col 5)-(line 7335,col 62)",
            "(line 7336,col 5)-(line 7336,col 38)",
            "(line 7337,col 5)-(line 7337,col 43)",
            "(line 7338,col 5)-(line 7338,col 46)",
            "(line 7339,col 5)-(line 7339,col 45)",
            "(line 7340,col 5)-(line 7342,col 44)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testGatherProperyWithoutAnnotation2()",
        "snippet": "  public void testGatherProperyWithoutAnnotation2() throws Exception {\n    TypeCheckResult ns =\n        parseAndTypeCheckWithScope(\"/** @type {!Object} */var t; t.x; t;\");\n    Node n = ns.root;\n    Scope s = ns.scope;\n    JSType type = n.getLastChild().getLastChild().getJSType();\n    assertFalse(type.isUnknownType());\n    assertEquals(type, OBJECT_TYPE);\n    assertTrue(type instanceof ObjectType);\n    ObjectType objectType = (ObjectType) type;\n    assertFalse(objectType.hasProperty(\"x\"));\n    assertEquals(\n        Lists.newArrayList(OBJECT_TYPE),\n        registry.getTypesWithProperty(\"x\"));\n  }\n",
        "begin_line": 7345,
        "end_line": 7359,
        "comment": "",
        "child_ranges": [
            "(line 7346,col 5)-(line 7347,col 75)",
            "(line 7348,col 5)-(line 7348,col 21)",
            "(line 7349,col 5)-(line 7349,col 23)",
            "(line 7350,col 5)-(line 7350,col 62)",
            "(line 7351,col 5)-(line 7351,col 38)",
            "(line 7352,col 5)-(line 7352,col 36)",
            "(line 7353,col 5)-(line 7353,col 43)",
            "(line 7354,col 5)-(line 7354,col 46)",
            "(line 7355,col 5)-(line 7355,col 45)",
            "(line 7356,col 5)-(line 7358,col 44)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testFunctionMasksVariableBug()",
        "snippet": "  public void testFunctionMasksVariableBug() throws Exception {\n    testTypes(\"var x = 4; var f = function x(b) { return b ? 1 : x(true); };\",\n        \"function x masks variable (IE bug)\");\n  }\n",
        "begin_line": 7361,
        "end_line": 7364,
        "comment": "",
        "child_ranges": [
            "(line 7362,col 5)-(line 7363,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testDfa1()",
        "snippet": "  public void testDfa1() throws Exception {\n    testTypes(\"var x = null;\\n x = 1;\\n /** @type number */ var y = x;\");\n  }\n",
        "begin_line": 7366,
        "end_line": 7368,
        "comment": "",
        "child_ranges": [
            "(line 7367,col 5)-(line 7367,col 73)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testDfa2()",
        "snippet": "  public void testDfa2() throws Exception {\n    testTypes(\"function u() {}\\n\" +\n        \"/** @return {number} */ function f() {\\nvar x = 'todo';\\n\" +\n        \"if (u()) { x = 1; } else { x = 2; } return x;\\n}\");\n  }\n",
        "begin_line": 7370,
        "end_line": 7374,
        "comment": "",
        "child_ranges": [
            "(line 7371,col 5)-(line 7373,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testDfa3()",
        "snippet": "  public void testDfa3() throws Exception {\n    testTypes(\"function u() {}\\n\" +\n        \"/** @return {number} */ function f() {\\n\" +\n        \"/** @type {number|string} */ var x = 'todo';\\n\" +\n        \"if (u()) { x = 1; } else { x = 2; } return x;\\n}\");\n  }\n",
        "begin_line": 7376,
        "end_line": 7381,
        "comment": "",
        "child_ranges": [
            "(line 7377,col 5)-(line 7380,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testDfa4()",
        "snippet": "  public void testDfa4() throws Exception {\n    testTypes(\"/** @param {Date?} d */ function f(d) {\\n\" +\n        \"if (!d) { return; }\\n\" +\n        \"/** @type {!Date} */ var e = d;\\n}\");\n  }\n",
        "begin_line": 7383,
        "end_line": 7387,
        "comment": "",
        "child_ranges": [
            "(line 7384,col 5)-(line 7386,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testDfa5()",
        "snippet": "  public void testDfa5() throws Exception {\n    testTypes(\"/** @return {string?} */ function u() {return 'a';}\\n\" +\n        \"/** @param {string?} x\\n@return {string} */ function f(x) {\\n\" +\n        \"while (!x) { x = u(); }\\nreturn x;\\n}\");\n  }\n",
        "begin_line": 7389,
        "end_line": 7393,
        "comment": "",
        "child_ranges": [
            "(line 7390,col 5)-(line 7392,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testDfa6()",
        "snippet": "  public void testDfa6() throws Exception {\n    testTypes(\"/** @return {Object?} */ function u() {return {};}\\n\" +\n        \"/** @param {Object?} x */ function f(x) {\\n\" +\n        \"while (x) { x = u(); if (!x) { x = u(); } }\\n}\");\n  }\n",
        "begin_line": 7395,
        "end_line": 7399,
        "comment": "",
        "child_ranges": [
            "(line 7396,col 5)-(line 7398,col 58)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testDfa7()",
        "snippet": "  public void testDfa7() throws Exception {\n    testTypes(\"/** @constructor */ var T = function() {};\\n\" +\n        \"/** @type {Date?} */ T.prototype.x = null;\\n\" +\n        \"/** @param {!T} t */ function f(t) {\\n\" +\n        \"if (!t.x) { return; }\\n\" +\n        \"/** @type {!Date} */ var e = t.x;\\n}\");\n  }\n",
        "begin_line": 7401,
        "end_line": 7407,
        "comment": "",
        "child_ranges": [
            "(line 7402,col 5)-(line 7406,col 48)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testDfa8()",
        "snippet": "  public void testDfa8() throws Exception {\n    testTypes(\"/** @constructor */ var T = function() {};\\n\" +\n        \"/** @type {number|string} */ T.prototype.x = '';\\n\" +\n        \"function u() {}\\n\" +\n        \"/** @param {!T} t\\n@return {number} */ function f(t) {\\n\" +\n        \"if (u()) { t.x = 1; } else { t.x = 2; } return t.x;\\n}\");\n  }\n",
        "begin_line": 7409,
        "end_line": 7415,
        "comment": "",
        "child_ranges": [
            "(line 7410,col 5)-(line 7414,col 66)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testDfa9()",
        "snippet": "  public void testDfa9() throws Exception {\n    testTypes(\"function f() {\\n/** @type {string?} */var x;\\nx = null;\\n\" +\n        \"if (x == null) { return 0; } else { return 1; } }\",\n        \"condition always evaluates to true\\n\" +\n        \"left : null\\n\" +\n        \"right: null\");\n  }\n",
        "begin_line": 7417,
        "end_line": 7423,
        "comment": "",
        "child_ranges": [
            "(line 7418,col 5)-(line 7422,col 23)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testDfa10()",
        "snippet": "  public void testDfa10() throws Exception {\n    testTypes(\"/** @param {null} x */ function g(x) {}\" +\n        \"/** @param {string?} x */function f(x) {\\n\" +\n        \"if (!x) { x = ''; }\\n\" +\n        \"if (g(x)) { return 0; } else { return 1; } }\",\n        \"actual parameter 1 of g does not match formal parameter\\n\" +\n        \"found   : string\\n\" +\n        \"required: null\");\n  }\n",
        "begin_line": 7425,
        "end_line": 7433,
        "comment": "",
        "child_ranges": [
            "(line 7426,col 5)-(line 7432,col 26)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testDfa11()",
        "snippet": "  public void testDfa11() throws Exception {\n    testTypes(\"/** @param {string} opt_x\\n@return {string} */\\n\" +\n        \"function f(opt_x) { if (!opt_x) { \" +\n        \"throw new Error('x cannot be empty'); } return opt_x; }\");\n  }\n",
        "begin_line": 7435,
        "end_line": 7439,
        "comment": "",
        "child_ranges": [
            "(line 7436,col 5)-(line 7438,col 67)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testDfa12()",
        "snippet": "  public void testDfa12() throws Exception {\n    testTypes(\"/** @param {string} x \\n * @constructor \\n */\" +\n        \"var Bar = function(x) {};\" +\n        \"/** @param {string} x */ function g(x) { return true; }\" +\n        \"/** @param {string|number} opt_x */ \" +\n        \"function f(opt_x) { \" +\n        \"  if (opt_x) { new Bar(g(opt_x) && 'x'); }\" +\n        \"}\",\n        \"actual parameter 1 of g does not match formal parameter\\n\" +\n        \"found   : (number|string)\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 7441,
        "end_line": 7452,
        "comment": "",
        "child_ranges": [
            "(line 7442,col 5)-(line 7451,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testDfa13()",
        "snippet": "  public void testDfa13() throws Exception {\n    testTypes(\n        \"/**\\n\" +\n        \" * @param {string} x \\n\" +\n        \" * @param {number} y \\n\" +\n        \" * @param {number} z \\n\" +\n        \" */\" +\n        \"function g(x, y, z) {}\" +\n        \"function f() { \" +\n        \"  var x = 'a'; g(x, x = 3, x);\" +\n        \"}\");\n  }\n",
        "begin_line": 7454,
        "end_line": 7465,
        "comment": "",
        "child_ranges": [
            "(line 7455,col 5)-(line 7464,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypeInferenceWithCast1()",
        "snippet": "  public void testTypeInferenceWithCast1() throws Exception {\n    testTypes(\n        \"/**@return {(number,null,undefined)}*/function u(x) {return null;}\" +\n        \"/**@param {number?} x\\n@return {number?}*/function f(x) {return x;}\" +\n        \"/**@return {number?}*/function g(x) {\" +\n        \"var y = /**@type {number?}*/(u(x)); return f(y);}\");\n  }\n",
        "begin_line": 7467,
        "end_line": 7473,
        "comment": "",
        "child_ranges": [
            "(line 7468,col 5)-(line 7472,col 61)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypeInferenceWithCast2()",
        "snippet": "  public void testTypeInferenceWithCast2() throws Exception {\n    testTypes(\n        \"/**@return {(number,null,undefined)}*/function u(x) {return null;}\" +\n        \"/**@param {number?} x\\n@return {number?}*/function f(x) {return x;}\" +\n        \"/**@return {number?}*/function g(x) {\" +\n        \"var y; y = /**@type {number?}*/(u(x)); return f(y);}\");\n  }\n",
        "begin_line": 7475,
        "end_line": 7481,
        "comment": "",
        "child_ranges": [
            "(line 7476,col 5)-(line 7480,col 64)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypeInferenceWithCast3()",
        "snippet": "  public void testTypeInferenceWithCast3() throws Exception {\n    testTypes(\n        \"/**@return {(number,null,undefined)}*/function u(x) {return 1;}\" +\n        \"/**@return {number}*/function g(x) {\" +\n        \"return /**@type {number}*/(u(x));}\");\n  }\n",
        "begin_line": 7483,
        "end_line": 7488,
        "comment": "",
        "child_ranges": [
            "(line 7484,col 5)-(line 7487,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypeInferenceWithCast4()",
        "snippet": "  public void testTypeInferenceWithCast4() throws Exception {\n    testTypes(\n        \"/**@return {(number,null,undefined)}*/function u(x) {return 1;}\" +\n        \"/**@return {number}*/function g(x) {\" +\n        \"return /**@type {number}*/(u(x)) && 1;}\");\n  }\n",
        "begin_line": 7490,
        "end_line": 7495,
        "comment": "",
        "child_ranges": [
            "(line 7491,col 5)-(line 7494,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypeInferenceWithCast5()",
        "snippet": "  public void testTypeInferenceWithCast5() throws Exception {\n    testTypes(\n        \"/** @param {number} x */ function foo(x) {}\" +\n        \"/** @param {{length:*}} y */ function bar(y) {\" +\n        \"  /** @type {string} */ y.length;\" +\n        \"  foo(y.length);\" +\n        \"}\",\n        \"actual parameter 1 of foo does not match formal parameter\\n\" +\n        \"found   : string\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 7497,
        "end_line": 7507,
        "comment": "",
        "child_ranges": [
            "(line 7498,col 5)-(line 7506,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypeInferenceWithClosure1()",
        "snippet": "  public void testTypeInferenceWithClosure1() throws Exception {\n    testTypes(\n        \"/** @return {boolean} */\" +\n        \"function f() {\" +\n        \"  /** @type {?string} */ var x = null;\" +\n        \"  function g() { x = 'y'; } g(); \" +\n        \"  return x == null;\" +\n        \"}\");\n  }\n",
        "begin_line": 7509,
        "end_line": 7517,
        "comment": "",
        "child_ranges": [
            "(line 7510,col 5)-(line 7516,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypeInferenceWithClosure2()",
        "snippet": "  public void testTypeInferenceWithClosure2() throws Exception {\n    testTypes(\n        \"/** @return {boolean} */\" +\n        \"function f() {\" +\n        \"  /** @type {?string} */ var x = null;\" +\n        \"  function g() { x = 'y'; } g(); \" +\n        \"  return x === 3;\" +\n        \"}\",\n        \"condition always evaluates to the same value\\n\" +\n        \"left : (null|string)\\n\" +\n        \"right: number\");\n  }\n",
        "begin_line": 7519,
        "end_line": 7530,
        "comment": "",
        "child_ranges": [
            "(line 7520,col 5)-(line 7529,col 25)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testForwardPropertyReference()",
        "snippet": "  public void testForwardPropertyReference() throws Exception {\n    testTypes(\"/** @constructor */ var Foo = function() { this.init(); };\" +\n        \"/** @return {string} */\" +\n        \"Foo.prototype.getString = function() {\" +\n        \"  return this.number_;\" +\n        \"};\" +\n        \"Foo.prototype.init = function() {\" +\n        \"  /** @type {number} */\" +\n        \"  this.number_ = 3;\" +\n        \"};\",\n        \"inconsistent return type\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 7532,
        "end_line": 7545,
        "comment": "",
        "child_ranges": [
            "(line 7533,col 5)-(line 7544,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testNoForwardTypeDeclaration()",
        "snippet": "  public void testNoForwardTypeDeclaration() throws Exception {\n    testTypes(\n        \"/** @param {MyType} x */ function f(x) {}\",\n        \"Bad type annotation. Unknown type MyType\");\n  }\n",
        "begin_line": 7547,
        "end_line": 7551,
        "comment": "",
        "child_ranges": [
            "(line 7548,col 5)-(line 7550,col 52)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testNoForwardTypeDeclarationAndNoBraces()",
        "snippet": "  public void testNoForwardTypeDeclarationAndNoBraces() throws Exception {\n    testTypes(\"/** @return The result. */ function f() {}\");\n  }\n",
        "begin_line": 7553,
        "end_line": 7555,
        "comment": "",
        "child_ranges": [
            "(line 7554,col 5)-(line 7554,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testForwardTypeDeclaration1()",
        "snippet": "  public void testForwardTypeDeclaration1() throws Exception {\n    testClosureTypes(\n        // malformed addDependency calls shouldn't cause a crash\n        \"goog.addDependency();\" +\n        \"goog.addDependency('y', [goog]);\" +\n\n        \"goog.addDependency('zzz.js', ['MyType'], []);\" +\n        \"/** @param {MyType} x \\n * @return {number} */\" +\n        \"function f(x) { return 3; }\", null);\n  }\n",
        "begin_line": 7557,
        "end_line": 7566,
        "comment": "",
        "child_ranges": [
            "(line 7558,col 5)-(line 7565,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testForwardTypeDeclaration2()",
        "snippet": "  public void testForwardTypeDeclaration2() throws Exception {\n    String f = \"goog.addDependency('zzz.js', ['MyType'], []);\" +\n        \"/** @param {MyType} x */ function f(x) { }\";\n    testClosureTypes(f, null);\n    testClosureTypes(f + \"f(3);\",\n        \"actual parameter 1 of f does not match formal parameter\\n\" +\n        \"found   : number\\n\" +\n        \"required: (MyType|null)\");\n  }\n",
        "begin_line": 7568,
        "end_line": 7576,
        "comment": "",
        "child_ranges": [
            "(line 7569,col 5)-(line 7570,col 53)",
            "(line 7571,col 5)-(line 7571,col 30)",
            "(line 7572,col 5)-(line 7575,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testForwardTypeDeclaration3()",
        "snippet": "  public void testForwardTypeDeclaration3() throws Exception {\n    testClosureTypes(\n        \"goog.addDependency('zzz.js', ['MyType'], []);\" +\n        \"/** @param {MyType} x */ function f(x) { return x; }\" +\n        \"/** @constructor */ var MyType = function() {};\" +\n        \"f(3);\",\n        \"actual parameter 1 of f does not match formal parameter\\n\" +\n        \"found   : number\\n\" +\n        \"required: (MyType|null)\");\n  }\n",
        "begin_line": 7578,
        "end_line": 7587,
        "comment": "",
        "child_ranges": [
            "(line 7579,col 5)-(line 7586,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testForwardTypeDeclaration4()",
        "snippet": "  public void testForwardTypeDeclaration4() throws Exception {\n    testClosureTypes(\n        \"goog.addDependency('zzz.js', ['MyType'], []);\" +\n        \"/** @param {MyType} x */ function f(x) { return x; }\" +\n        \"/** @constructor */ var MyType = function() {};\" +\n        \"f(new MyType());\",\n        null);\n  }\n",
        "begin_line": 7589,
        "end_line": 7596,
        "comment": "",
        "child_ranges": [
            "(line 7590,col 5)-(line 7595,col 14)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testForwardTypeDeclaration5()",
        "snippet": "  public void testForwardTypeDeclaration5() throws Exception {\n    testClosureTypes(\n        \"goog.addDependency('zzz.js', ['MyType'], []);\" +\n        \"/**\\n\" +\n        \" * @constructor\\n\" +\n        \" * @extends {MyType}\\n\" +\n        \" */ var YourType = function() {};\" +\n        \"/** @override */ YourType.prototype.method = function() {};\",\n        \"Could not resolve type in @extends tag of YourType\");\n  }\n",
        "begin_line": 7598,
        "end_line": 7607,
        "comment": "",
        "child_ranges": [
            "(line 7599,col 5)-(line 7606,col 62)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testForwardTypeDeclaration6()",
        "snippet": "  public void testForwardTypeDeclaration6() throws Exception {\n    testClosureTypesMultipleWarnings(\n        \"goog.addDependency('zzz.js', ['MyType'], []);\" +\n        \"/**\\n\" +\n        \" * @constructor\\n\" +\n        \" * @implements {MyType}\\n\" +\n        \" */ var YourType = function() {};\" +\n        \"/** @override */ YourType.prototype.method = function() {};\",\n        Lists.newArrayList(\n            \"Could not resolve type in @implements tag of YourType\",\n            \"property method not defined on any superclass of YourType\"));\n  }\n",
        "begin_line": 7609,
        "end_line": 7620,
        "comment": "",
        "child_ranges": [
            "(line 7610,col 5)-(line 7619,col 74)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testForwardTypeDeclaration7()",
        "snippet": "  public void testForwardTypeDeclaration7() throws Exception {\n    testClosureTypes(\n        \"goog.addDependency('zzz.js', ['MyType'], []);\" +\n        \"/** @param {MyType=} x */\" +\n        \"function f(x) { return x == undefined; }\", null);\n  }\n",
        "begin_line": 7622,
        "end_line": 7627,
        "comment": "",
        "child_ranges": [
            "(line 7623,col 5)-(line 7626,col 58)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testForwardTypeDeclaration8()",
        "snippet": "  public void testForwardTypeDeclaration8() throws Exception {\n    testClosureTypes(\n        \"goog.addDependency('zzz.js', ['MyType'], []);\" +\n        \"/** @param {MyType} x */\" +\n        \"function f(x) { return x.name == undefined; }\", null);\n  }\n",
        "begin_line": 7629,
        "end_line": 7634,
        "comment": "",
        "child_ranges": [
            "(line 7630,col 5)-(line 7633,col 63)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testForwardTypeDeclaration9()",
        "snippet": "  public void testForwardTypeDeclaration9() throws Exception {\n    testClosureTypes(\n        \"goog.addDependency('zzz.js', ['MyType'], []);\" +\n        \"/** @param {MyType} x */\" +\n        \"function f(x) { x.name = 'Bob'; }\", null);\n  }\n",
        "begin_line": 7636,
        "end_line": 7641,
        "comment": "",
        "child_ranges": [
            "(line 7637,col 5)-(line 7640,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testForwardTypeDeclaration10()",
        "snippet": "  public void testForwardTypeDeclaration10() throws Exception {\n    String f = \"goog.addDependency('zzz.js', ['MyType'], []);\" +\n        \"/** @param {MyType|number} x */ function f(x) { }\";\n    testClosureTypes(f, null);\n    testClosureTypes(f + \"f(3);\", null);\n    testClosureTypes(f + \"f('3');\",\n        \"actual parameter 1 of f does not match formal parameter\\n\" +\n        \"found   : string\\n\" +\n        \"required: (MyType|null|number)\");\n  }\n",
        "begin_line": 7643,
        "end_line": 7652,
        "comment": "",
        "child_ranges": [
            "(line 7644,col 5)-(line 7645,col 60)",
            "(line 7646,col 5)-(line 7646,col 30)",
            "(line 7647,col 5)-(line 7647,col 40)",
            "(line 7648,col 5)-(line 7651,col 42)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testMalformedOldTypeDef()",
        "snippet": "  public void testMalformedOldTypeDef() throws Exception {\n    testTypes(\n        \"var goog = {}; goog.typedef = true;\" +\n        \"goog.Bar = goog.typedef\",\n        \"Typedef for goog.Bar does not have any type information\");\n  }\n",
        "begin_line": 7654,
        "end_line": 7659,
        "comment": "",
        "child_ranges": [
            "(line 7655,col 5)-(line 7658,col 67)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testMalformedOldTypeDef2()",
        "snippet": "  public void testMalformedOldTypeDef2() throws Exception {\n    testTypes(\n        \"var goog = {}; goog.typedef = true;\" +\n        \"/** @typedef {boolean} */ goog.Bar = goog.typedef\",\n        \"Typedef for goog.Bar does not have any type information\");\n  }\n",
        "begin_line": 7661,
        "end_line": 7666,
        "comment": "",
        "child_ranges": [
            "(line 7662,col 5)-(line 7665,col 67)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testDuplicateOldTypeDef()",
        "snippet": "  public void testDuplicateOldTypeDef() throws Exception {\n    testTypes(\n        \"var goog = {}; goog.typedef = true;\" +\n        \"/** @constructor */ goog.Bar = function() {};\" +\n        \"/** @type {number} */ goog.Bar = goog.typedef\",\n        \"variable goog.Bar redefined with type number, \" +\n        \"original definition at [testcode]:1 \" +\n        \"with type function (new:goog.Bar): undefined\");\n  }\n",
        "begin_line": 7668,
        "end_line": 7676,
        "comment": "",
        "child_ranges": [
            "(line 7669,col 5)-(line 7675,col 56)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testOldTypeDef1()",
        "snippet": "  public void testOldTypeDef1() throws Exception {\n    testTypes(\n        \"var goog = {}; goog.typedef = true;\" +\n        \"/** @type {number} */ goog.Bar = goog.typedef;\" +\n        \"/** @param {goog.Bar} x */ function f(x) {}\" +\n        \"f(3);\");\n  }\n",
        "begin_line": 7678,
        "end_line": 7684,
        "comment": "",
        "child_ranges": [
            "(line 7679,col 5)-(line 7683,col 17)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testOldTypeDef2()",
        "snippet": "  public void testOldTypeDef2() throws Exception {\n    testTypes(\n        \"var goog = {}; goog.typedef = true;\" +\n        \"/** @type {number} */ goog.Bar = goog.typedef;\" +\n        \"/** @param {goog.Bar} x */ function f(x) {}\" +\n        \"f('3');\",\n        \"actual parameter 1 of f does not match formal parameter\\n\" +\n        \"found   : string\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 7686,
        "end_line": 7695,
        "comment": "",
        "child_ranges": [
            "(line 7687,col 5)-(line 7694,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testOldTypeDef3()",
        "snippet": "  public void testOldTypeDef3() throws Exception {\n    testTypes(\n        \"var goog = {}; goog.typedef = true;\" +\n        \"/** @type {number} */ var Bar = goog.typedef;\" +\n        \"/** @param {Bar} x */ function f(x) {}\" +\n        \"f('3');\",\n        \"actual parameter 1 of f does not match formal parameter\\n\" +\n        \"found   : string\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 7697,
        "end_line": 7706,
        "comment": "",
        "child_ranges": [
            "(line 7698,col 5)-(line 7705,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testCircularOldTypeDef()",
        "snippet": "  public void testCircularOldTypeDef() throws Exception {\n    testTypes(\n        \"var goog = {}; goog.typedef = true;\" +\n        \"/** @type {number|Array.<goog.Bar>} */ goog.Bar = goog.typedef;\" +\n        \"/** @param {goog.Bar} x */ function f(x) {}\" +\n        \"f(3); f([3]); f([[3]]);\");\n  }\n",
        "begin_line": 7708,
        "end_line": 7714,
        "comment": "",
        "child_ranges": [
            "(line 7709,col 5)-(line 7713,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testDuplicateTypeDef()",
        "snippet": "  public void testDuplicateTypeDef() throws Exception {\n    testTypes(\n        \"var goog = {};\" +\n        \"/** @constructor */ goog.Bar = function() {};\" +\n        \"/** @typedef {number} */ goog.Bar;\",\n        \"variable goog.Bar redefined with type None, \" +\n        \"original definition at [testcode]:1 \" +\n        \"with type function (new:goog.Bar): undefined\");\n  }\n",
        "begin_line": 7716,
        "end_line": 7724,
        "comment": "",
        "child_ranges": [
            "(line 7717,col 5)-(line 7723,col 56)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypeDef1()",
        "snippet": "  public void testTypeDef1() throws Exception {\n    testTypes(\n        \"var goog = {};\" +\n        \"/** @typedef {number} */ goog.Bar;\" +\n        \"/** @param {goog.Bar} x */ function f(x) {}\" +\n        \"f(3);\");\n  }\n",
        "begin_line": 7726,
        "end_line": 7732,
        "comment": "",
        "child_ranges": [
            "(line 7727,col 5)-(line 7731,col 17)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypeDef2()",
        "snippet": "  public void testTypeDef2() throws Exception {\n    testTypes(\n        \"var goog = {};\" +\n        \"/** @typedef {number} */ goog.Bar;\" +\n        \"/** @param {goog.Bar} x */ function f(x) {}\" +\n        \"f('3');\",\n        \"actual parameter 1 of f does not match formal parameter\\n\" +\n        \"found   : string\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 7734,
        "end_line": 7743,
        "comment": "",
        "child_ranges": [
            "(line 7735,col 5)-(line 7742,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypeDef3()",
        "snippet": "  public void testTypeDef3() throws Exception {\n    testTypes(\n        \"var goog = {};\" +\n        \"/** @typedef {number} */ var Bar;\" +\n        \"/** @param {Bar} x */ function f(x) {}\" +\n        \"f('3');\",\n        \"actual parameter 1 of f does not match formal parameter\\n\" +\n        \"found   : string\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 7745,
        "end_line": 7754,
        "comment": "",
        "child_ranges": [
            "(line 7746,col 5)-(line 7753,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypeDef4()",
        "snippet": "  public void testTypeDef4() throws Exception {\n    testTypes(\n        \"/** @constructor */ function A() {}\" +\n        \"/** @constructor */ function B() {}\" +\n        \"/** @typedef {(A|B)} */ var AB;\" +\n        \"/** @param {AB} x */ function f(x) {}\" +\n        \"f(new A()); f(new B()); f(1);\",\n        \"actual parameter 1 of f does not match formal parameter\\n\" +\n        \"found   : number\\n\" +\n        \"required: (A|B|null)\");\n  }\n",
        "begin_line": 7756,
        "end_line": 7766,
        "comment": "",
        "child_ranges": [
            "(line 7757,col 5)-(line 7765,col 32)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypeDef5()",
        "snippet": "  public void testTypeDef5() throws Exception {\n    // Notice that the error message is slightly different than\n    // the one for testTypeDef4, even though they should be the same.\n    // This is an implementation detail necessary for NamedTypes work out\n    // ok, and it should change if NamedTypes ever go away.\n    testTypes(\n        \"/** @param {AB} x */ function f(x) {}\" +\n        \"/** @constructor */ function A() {}\" +\n        \"/** @constructor */ function B() {}\" +\n        \"/** @typedef {(A|B)} */ var AB;\" +\n        \"f(new A()); f(new B()); f(1);\",\n        \"actual parameter 1 of f does not match formal parameter\\n\" +\n        \"found   : number\\n\" +\n        \"required: (A|B|null)\");\n  }\n",
        "begin_line": 7768,
        "end_line": 7782,
        "comment": "",
        "child_ranges": [
            "(line 7773,col 5)-(line 7781,col 32)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testCircularTypeDef()",
        "snippet": "  public void testCircularTypeDef() throws Exception {\n    testTypes(\n        \"var goog = {};\" +\n        \"/** @typedef {number|Array.<goog.Bar>} */ goog.Bar;\" +\n        \"/** @param {goog.Bar} x */ function f(x) {}\" +\n        \"f(3); f([3]); f([[3]]);\");\n  }\n",
        "begin_line": 7784,
        "end_line": 7790,
        "comment": "",
        "child_ranges": [
            "(line 7785,col 5)-(line 7789,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testGetTypedPercent1()",
        "snippet": "  public void testGetTypedPercent1() throws Exception {\n    String js = \"var id = function(x) { return x; }\\n\" +\n                \"var id2 = function(x) { return id(x); }\";\n    assertEquals(50.0, getTypedPercent(js), 0.1);\n  }\n",
        "begin_line": 7792,
        "end_line": 7796,
        "comment": "",
        "child_ranges": [
            "(line 7793,col 5)-(line 7794,col 58)",
            "(line 7795,col 5)-(line 7795,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testGetTypedPercent2()",
        "snippet": "  public void testGetTypedPercent2() throws Exception {\n    String js = \"var x = {}; x.y = 1;\";\n    assertEquals(100.0, getTypedPercent(js), 0.1);\n  }\n",
        "begin_line": 7798,
        "end_line": 7801,
        "comment": "",
        "child_ranges": [
            "(line 7799,col 5)-(line 7799,col 39)",
            "(line 7800,col 5)-(line 7800,col 50)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testGetTypedPercent3()",
        "snippet": "  public void testGetTypedPercent3() throws Exception {\n    String js = \"var f = function(x) { x.a = x.b; }\";\n    assertEquals(50.0, getTypedPercent(js), 0.1);\n  }\n",
        "begin_line": 7803,
        "end_line": 7806,
        "comment": "",
        "child_ranges": [
            "(line 7804,col 5)-(line 7804,col 53)",
            "(line 7805,col 5)-(line 7805,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testGetTypedPercent4()",
        "snippet": "  public void testGetTypedPercent4() throws Exception {\n    String js = \"var n = {};\\n /** @constructor */ n.T = function() {};\\n\" +\n        \"/** @type n.T */ var x = new n.T();\";\n    assertEquals(100.0, getTypedPercent(js), 0.1);\n  }\n",
        "begin_line": 7808,
        "end_line": 7812,
        "comment": "",
        "child_ranges": [
            "(line 7809,col 5)-(line 7810,col 46)",
            "(line 7811,col 5)-(line 7811,col 50)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.getTypedPercent(java.lang.String)",
        "snippet": "  private double getTypedPercent(String js) throws Exception {\n    Node n = compiler.parseTestCode(js);\n\n    Node externs = new Node(Token.BLOCK);\n    Node externAndJsRoot = new Node(Token.BLOCK, externs, n);\n    externAndJsRoot.setIsSyntheticBlock(true);\n\n    TypeCheck t = makeTypeCheck();\n    t.processForTesting(null, n);\n    return t.getTypedPercent();\n  }\n",
        "begin_line": 7814,
        "end_line": 7824,
        "comment": "",
        "child_ranges": [
            "(line 7815,col 5)-(line 7815,col 40)",
            "(line 7817,col 5)-(line 7817,col 41)",
            "(line 7818,col 5)-(line 7818,col 61)",
            "(line 7819,col 5)-(line 7819,col 46)",
            "(line 7821,col 5)-(line 7821,col 34)",
            "(line 7822,col 5)-(line 7822,col 33)",
            "(line 7823,col 5)-(line 7823,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.getInstanceType(com.google.javascript.rhino.Node)",
        "snippet": "  private ObjectType getInstanceType(Node js1Node) {\n    JSType type = js1Node.getFirstChild().getJSType();\n    assertNotNull(type);\n    assertTrue(type instanceof FunctionType);\n    FunctionType functionType = (FunctionType) type;\n    assertTrue(functionType.isConstructor());\n    return functionType.getInstanceType();\n  }\n",
        "begin_line": 7826,
        "end_line": 7833,
        "comment": "",
        "child_ranges": [
            "(line 7827,col 5)-(line 7827,col 54)",
            "(line 7828,col 5)-(line 7828,col 24)",
            "(line 7829,col 5)-(line 7829,col 45)",
            "(line 7830,col 5)-(line 7830,col 52)",
            "(line 7831,col 5)-(line 7831,col 45)",
            "(line 7832,col 5)-(line 7832,col 42)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testPrototypePropertyReference()",
        "snippet": "  public void testPrototypePropertyReference() throws Exception {\n    TypeCheckResult p = parseAndTypeCheckWithScope(\"\"\n        + \"/** @constructor */\\n\"\n        + \"function Foo() {}\\n\"\n        + \"/** @param {number} a */\\n\"\n        + \"Foo.prototype.bar = function(a){};\\n\"\n        + \"/** @param {Foo} f */\\n\"\n        + \"function baz(f) {\\n\"\n        + \"  Foo.prototype.bar.call(f, 3);\\n\"\n        + \"}\");\n    assertEquals(0, compiler.getErrorCount());\n    assertEquals(0, compiler.getWarningCount());\n\n    assertTrue(p.scope.getVar(\"Foo\").getType() instanceof FunctionType);\n    FunctionType fooType = (FunctionType) p.scope.getVar(\"Foo\").getType();\n    assertEquals(\"function (this:Foo, number): undefined\",\n                 fooType.getPrototype().getPropertyType(\"bar\").toString());\n  }\n",
        "begin_line": 7835,
        "end_line": 7852,
        "comment": "",
        "child_ranges": [
            "(line 7836,col 5)-(line 7844,col 15)",
            "(line 7845,col 5)-(line 7845,col 46)",
            "(line 7846,col 5)-(line 7846,col 48)",
            "(line 7848,col 5)-(line 7848,col 72)",
            "(line 7849,col 5)-(line 7849,col 74)",
            "(line 7850,col 5)-(line 7851,col 75)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testResolvingNamedTypes()",
        "snippet": "  public void testResolvingNamedTypes() throws Exception {\n    String js = \"\"\n        + \"/** @constructor */\\n\"\n        + \"var Foo = function() {}\\n\"\n        + \"/** @param {number} a */\\n\"\n        + \"Foo.prototype.foo = function(a) {\\n\"\n        + \"  return this.baz().toString();\\n\"\n        + \"};\\n\"\n        + \"/** @return {Baz} */\\n\"\n        + \"Foo.prototype.baz = function() { return new Baz(); };\\n\"\n        + \"/** @constructor\\n\"\n        + \"  * @extends Foo */\\n\"\n        + \"var Bar = function() {};\"\n        + \"/** @constructor */\\n\"\n        + \"var Baz = function() {};\";\n    assertEquals(100.0, getTypedPercent(js), 0.1);\n  }\n",
        "begin_line": 7854,
        "end_line": 7870,
        "comment": "",
        "child_ranges": [
            "(line 7855,col 5)-(line 7868,col 37)",
            "(line 7869,col 5)-(line 7869,col 50)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testMissingProperty1()",
        "snippet": "  public void testMissingProperty1() throws Exception {\n    testTypes(\n        \"/** @constructor */ function Foo() {}\" +\n        \"Foo.prototype.bar = function() { return this.a; };\" +\n        \"Foo.prototype.baz = function() { this.a = 3; };\");\n  }\n",
        "begin_line": 7872,
        "end_line": 7877,
        "comment": "",
        "child_ranges": [
            "(line 7873,col 5)-(line 7876,col 59)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testMissingProperty2()",
        "snippet": "  public void testMissingProperty2() throws Exception {\n    testTypes(\n        \"/** @constructor */ function Foo() {}\" +\n        \"Foo.prototype.bar = function() { return this.a; };\" +\n        \"Foo.prototype.baz = function() { this.b = 3; };\",\n        \"Property a never defined on Foo\");\n  }\n",
        "begin_line": 7879,
        "end_line": 7885,
        "comment": "",
        "child_ranges": [
            "(line 7880,col 5)-(line 7884,col 43)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testMissingProperty3()",
        "snippet": "  public void testMissingProperty3() throws Exception {\n    testTypes(\n        \"/** @constructor */ function Foo() {}\" +\n        \"Foo.prototype.bar = function() { return this.a; };\" +\n        \"(new Foo).a = 3;\");\n  }\n",
        "begin_line": 7887,
        "end_line": 7892,
        "comment": "",
        "child_ranges": [
            "(line 7888,col 5)-(line 7891,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testMissingProperty4()",
        "snippet": "  public void testMissingProperty4() throws Exception {\n    testTypes(\n        \"/** @constructor */ function Foo() {}\" +\n        \"Foo.prototype.bar = function() { return this.a; };\" +\n        \"(new Foo).b = 3;\",\n        \"Property a never defined on Foo\");\n  }\n",
        "begin_line": 7894,
        "end_line": 7900,
        "comment": "",
        "child_ranges": [
            "(line 7895,col 5)-(line 7899,col 43)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testMissingProperty5()",
        "snippet": "  public void testMissingProperty5() throws Exception {\n    testTypes(\n        \"/** @constructor */ function Foo() {}\" +\n        \"Foo.prototype.bar = function() { return this.a; };\" +\n        \"/** @constructor */ function Bar() { this.a = 3; };\",\n        \"Property a never defined on Foo\");\n  }\n",
        "begin_line": 7902,
        "end_line": 7908,
        "comment": "",
        "child_ranges": [
            "(line 7903,col 5)-(line 7907,col 43)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testMissingProperty6()",
        "snippet": "  public void testMissingProperty6() throws Exception {\n    testTypes(\n        \"/** @constructor */ function Foo() {}\" +\n        \"Foo.prototype.bar = function() { return this.a; };\" +\n        \"/** @constructor \\n * @extends {Foo} */ \" +\n        \"function Bar() { this.a = 3; };\");\n  }\n",
        "begin_line": 7910,
        "end_line": 7916,
        "comment": "",
        "child_ranges": [
            "(line 7911,col 5)-(line 7915,col 43)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testMissingProperty7()",
        "snippet": "  public void testMissingProperty7() throws Exception {\n    testTypes(\n        \"/** @param {Object} obj */\" +\n        \"function foo(obj) { return obj.impossible; }\",\n        \"Property impossible never defined on Object\");\n  }\n",
        "begin_line": 7918,
        "end_line": 7923,
        "comment": "",
        "child_ranges": [
            "(line 7919,col 5)-(line 7922,col 55)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testMissingProperty8()",
        "snippet": "  public void testMissingProperty8() throws Exception {\n    testTypes(\n        \"/** @param {Object} obj */\" +\n        \"function foo(obj) { return typeof obj.impossible; }\");\n  }\n",
        "begin_line": 7925,
        "end_line": 7929,
        "comment": "",
        "child_ranges": [
            "(line 7926,col 5)-(line 7928,col 63)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testMissingProperty9()",
        "snippet": "  public void testMissingProperty9() throws Exception {\n    testTypes(\n        \"/** @param {Object} obj */\" +\n        \"function foo(obj) { if (obj.impossible) { return true; } }\");\n  }\n",
        "begin_line": 7931,
        "end_line": 7935,
        "comment": "",
        "child_ranges": [
            "(line 7932,col 5)-(line 7934,col 70)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testMissingProperty10()",
        "snippet": "  public void testMissingProperty10() throws Exception {\n    testTypes(\n        \"/** @param {Object} obj */\" +\n        \"function foo(obj) { while (obj.impossible) { return true; } }\");\n  }\n",
        "begin_line": 7937,
        "end_line": 7941,
        "comment": "",
        "child_ranges": [
            "(line 7938,col 5)-(line 7940,col 73)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testMissingProperty11()",
        "snippet": "  public void testMissingProperty11() throws Exception {\n    testTypes(\n        \"/** @param {Object} obj */\" +\n        \"function foo(obj) { for (;obj.impossible;) { return true; } }\");\n  }\n",
        "begin_line": 7943,
        "end_line": 7947,
        "comment": "",
        "child_ranges": [
            "(line 7944,col 5)-(line 7946,col 73)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testMissingProperty12()",
        "snippet": "  public void testMissingProperty12() throws Exception {\n    testTypes(\n        \"/** @param {Object} obj */\" +\n        \"function foo(obj) { do { } while (obj.impossible); }\");\n  }\n",
        "begin_line": 7949,
        "end_line": 7953,
        "comment": "",
        "child_ranges": [
            "(line 7950,col 5)-(line 7952,col 64)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testMissingProperty13()",
        "snippet": "  public void testMissingProperty13() throws Exception {\n    testTypes(\n        \"var goog = {}; goog.isDef = function(x) { return false; };\" +\n        \"/** @param {Object} obj */\" +\n        \"function foo(obj) { return goog.isDef(obj.impossible); }\");\n  }\n",
        "begin_line": 7955,
        "end_line": 7960,
        "comment": "",
        "child_ranges": [
            "(line 7956,col 5)-(line 7959,col 68)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testMissingProperty14()",
        "snippet": "  public void testMissingProperty14() throws Exception {\n    testTypes(\n        \"var goog = {}; goog.isDef = function(x) { return false; };\" +\n        \"/** @param {Object} obj */\" +\n        \"function foo(obj) { return goog.isNull(obj.impossible); }\",\n        \"Property isNull never defined on goog\");\n  }\n",
        "begin_line": 7962,
        "end_line": 7968,
        "comment": "",
        "child_ranges": [
            "(line 7963,col 5)-(line 7967,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testMissingProperty15()",
        "snippet": "  public void testMissingProperty15() throws Exception {\n    testTypes(\n        \"/** @param {Object} x */\" +\n        \"function f(x) { if (x.foo) { x.foo(); } }\");\n  }\n",
        "begin_line": 7970,
        "end_line": 7974,
        "comment": "",
        "child_ranges": [
            "(line 7971,col 5)-(line 7973,col 53)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testMissingProperty16()",
        "snippet": "  public void testMissingProperty16() throws Exception {\n    testTypes(\n        \"/** @param {Object} x */\" +\n        \"function f(x) { x.foo(); if (x.foo) {} }\",\n        \"Property foo never defined on Object\");\n  }\n",
        "begin_line": 7976,
        "end_line": 7981,
        "comment": "",
        "child_ranges": [
            "(line 7977,col 5)-(line 7980,col 48)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testMissingProperty17()",
        "snippet": "  public void testMissingProperty17() throws Exception {\n    testTypes(\n        \"/** @param {Object} x */\" +\n        \"function f(x) { if (typeof x.foo == 'function') { x.foo(); } }\");\n  }\n",
        "begin_line": 7983,
        "end_line": 7987,
        "comment": "",
        "child_ranges": [
            "(line 7984,col 5)-(line 7986,col 74)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testMissingProperty18()",
        "snippet": "  public void testMissingProperty18() throws Exception {\n    testTypes(\n        \"/** @param {Object} x */\" +\n        \"function f(x) { if (x.foo instanceof Function) { x.foo(); } }\");\n  }\n",
        "begin_line": 7989,
        "end_line": 7993,
        "comment": "",
        "child_ranges": [
            "(line 7990,col 5)-(line 7992,col 73)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testMissingProperty19()",
        "snippet": "  public void testMissingProperty19() throws Exception {\n    testTypes(\n        \"/** @param {Object} x */\" +\n        \"function f(x) { if (x.bar) { if (x.foo) {} } else { x.foo(); } }\",\n        \"Property foo never defined on Object\");\n  }\n",
        "begin_line": 7995,
        "end_line": 8000,
        "comment": "",
        "child_ranges": [
            "(line 7996,col 5)-(line 7999,col 48)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testMissingProperty20()",
        "snippet": "  public void testMissingProperty20() throws Exception {\n    // NOTE(nicksantos): In the else branch, we know that x.foo is a\n    // CHECKED_UNKNOWN (UNKNOWN restricted to a falsey value). We could\n    // do some more sophisticated analysis here. Obviously, if x.foo is false,\n    // then x.foo cannot possibly be called. For example, you could imagine a\n    // VagueType that was like UnknownType, but had some constraints on it\n    // so that we knew it could never be a function.\n    //\n    // For now, we just punt on this issue.\n    testTypes(\n        \"/** @param {Object} x */\" +\n        \"function f(x) { if (x.foo) { } else { x.foo(); } }\");\n  }\n",
        "begin_line": 8002,
        "end_line": 8014,
        "comment": "",
        "child_ranges": [
            "(line 8011,col 5)-(line 8013,col 62)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testMissingProperty21()",
        "snippet": "  public void testMissingProperty21() throws Exception {\n    testTypes(\n        \"/** @param {Object} x */\" +\n        \"function f(x) { x.foo && x.foo(); }\");\n  }\n",
        "begin_line": 8016,
        "end_line": 8020,
        "comment": "",
        "child_ranges": [
            "(line 8017,col 5)-(line 8019,col 47)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testMissingProperty22()",
        "snippet": "  public void testMissingProperty22() throws Exception {\n    testTypes(\n        \"/** @param {Object} x \\n * @return {boolean} */\" +\n        \"function f(x) { return x.foo ? x.foo() : true; }\");\n  }\n",
        "begin_line": 8022,
        "end_line": 8026,
        "comment": "",
        "child_ranges": [
            "(line 8023,col 5)-(line 8025,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testMissingProperty23()",
        "snippet": "  public void testMissingProperty23() throws Exception {\n    testTypes(\n        \"function f(x) { x.impossible(); }\",\n        \"Property impossible never defined on x\");\n  }\n",
        "begin_line": 8028,
        "end_line": 8032,
        "comment": "",
        "child_ranges": [
            "(line 8029,col 5)-(line 8031,col 50)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testMissingProperty24()",
        "snippet": "  public void testMissingProperty24() throws Exception {\n    testClosureTypes(\n        \"goog.addDependency('zzz.js', ['MissingType'], []);\" +\n        \"/** @param {MissingType} x */\" +\n        \"function f(x) { x.impossible(); }\", null);\n  }\n",
        "begin_line": 8034,
        "end_line": 8039,
        "comment": "",
        "child_ranges": [
            "(line 8035,col 5)-(line 8038,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testMissingProperty25()",
        "snippet": "  public void testMissingProperty25() throws Exception {\n    testTypes(\n        \"/** @constructor */ var Foo = function() {};\" +\n        \"Foo.prototype.bar = function() {};\" +\n        \"/** @constructor */ var FooAlias = Foo;\" +\n        \"(new FooAlias()).bar();\");\n  }\n",
        "begin_line": 8041,
        "end_line": 8047,
        "comment": "",
        "child_ranges": [
            "(line 8042,col 5)-(line 8046,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testMissingProperty26()",
        "snippet": "  public void testMissingProperty26() throws Exception {\n    testTypes(\n        \"/** @constructor */ var Foo = function() {};\" +\n        \"/** @constructor */ var FooAlias = Foo;\" +\n        \"FooAlias.prototype.bar = function() {};\" +\n        \"(new Foo()).bar();\");\n  }\n",
        "begin_line": 8049,
        "end_line": 8055,
        "comment": "",
        "child_ranges": [
            "(line 8050,col 5)-(line 8054,col 30)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testMissingProperty27()",
        "snippet": "  public void testMissingProperty27() throws Exception {\n    testClosureTypes(\n        \"goog.addDependency('zzz.js', ['MissingType'], []);\" +\n        \"/** @param {?MissingType} x */\" +\n        \"function f(x) {\" +\n        \"  for (var parent = x; parent; parent = parent.getParent()) {}\" +\n        \"}\", null);\n  }\n",
        "begin_line": 8057,
        "end_line": 8064,
        "comment": "",
        "child_ranges": [
            "(line 8058,col 5)-(line 8063,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testMissingProperty28()",
        "snippet": "  public void testMissingProperty28() throws Exception {\n    testTypes(\n        \"function f(obj) {\" +\n        \"  /** @type {*} */ obj.foo;\" +\n        \"  return obj.foo;\" +\n        \"}\");\n    testTypes(\n        \"function f(obj) {\" +\n        \"  /** @type {*} */ obj.foo;\" +\n        \"  return obj.foox;\" +\n        \"}\",\n        \"Property foox never defined on obj\");\n  }\n",
        "begin_line": 8066,
        "end_line": 8078,
        "comment": "",
        "child_ranges": [
            "(line 8067,col 5)-(line 8071,col 13)",
            "(line 8072,col 5)-(line 8077,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testMissingProperty29()",
        "snippet": "  public void testMissingProperty29() throws Exception {\n    // This used to emit a warning.\n    testTypes(\n        // externs\n        \"/** @constructor */ var Foo;\" +\n        \"Foo.prototype.opera;\" +\n        \"Foo.prototype.opera.postError;\",\n        \"\",\n        null,\n        false);\n  }\n",
        "begin_line": 8080,
        "end_line": 8090,
        "comment": "",
        "child_ranges": [
            "(line 8082,col 5)-(line 8089,col 15)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testMissingProperty30()",
        "snippet": "  public void testMissingProperty30() throws Exception {\n    testTypes(\n        \"/** @return {*} */\" +\n        \"function f() {\" +\n        \" return {};\" +\n        \"}\" +\n        \"f().a = 3;\" +\n        \"/** @param {Object} y */ function g(y) { return y.a; }\");\n  }\n",
        "begin_line": 8092,
        "end_line": 8100,
        "comment": "",
        "child_ranges": [
            "(line 8093,col 5)-(line 8099,col 66)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testMissingProperty31()",
        "snippet": "  public void testMissingProperty31() throws Exception {\n    testTypes(\n        \"/** @return {Array|number} */\" +\n        \"function f() {\" +\n        \" return [];\" +\n        \"}\" +\n        \"f().a = 3;\" +\n        \"/** @param {Array} y */ function g(y) { return y.a; }\");\n  }\n",
        "begin_line": 8102,
        "end_line": 8110,
        "comment": "",
        "child_ranges": [
            "(line 8103,col 5)-(line 8109,col 65)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testMissingProperty32()",
        "snippet": "  public void testMissingProperty32() throws Exception {\n    testTypes(\n        \"/** @return {Array|number} */\" +\n        \"function f() {\" +\n        \" return [];\" +\n        \"}\" +\n        \"f().a = 3;\" +\n        \"/** @param {Date} y */ function g(y) { return y.a; }\",\n        \"Property a never defined on Date\");\n  }\n",
        "begin_line": 8112,
        "end_line": 8121,
        "comment": "",
        "child_ranges": [
            "(line 8113,col 5)-(line 8120,col 44)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testMissingProperty33()",
        "snippet": "  public void testMissingProperty33() throws Exception {\n    testTypes(\n      \"/** @param {Object} x */\" +\n      \"function f(x) { !x.foo || x.foo(); }\");\n  }\n",
        "begin_line": 8123,
        "end_line": 8127,
        "comment": "",
        "child_ranges": [
            "(line 8124,col 5)-(line 8126,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testMissingProperty34()",
        "snippet": "  public void testMissingProperty34() throws Exception {\n    testTypes(\n        \"/** @fileoverview \\n * @suppress {missingProperties} */\" +\n        \"/** @constructor */ function Foo() {}\" +\n        \"Foo.prototype.bar = function() { return this.a; };\" +\n        \"Foo.prototype.baz = function() { this.b = 3; };\");\n  }\n",
        "begin_line": 8129,
        "end_line": 8135,
        "comment": "",
        "child_ranges": [
            "(line 8130,col 5)-(line 8134,col 59)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testMissingProperty35()",
        "snippet": "  public void testMissingProperty35() throws Exception {\n    // Bar has specialProp defined, so Bar|Baz may have specialProp defined.\n    testTypes(\n        \"/** @constructor */ function Foo() {}\" +\n        \"/** @constructor */ function Bar() {}\" +\n        \"/** @constructor */ function Baz() {}\" +\n        \"/** @param {Foo|Bar} x */ function f(x) { x.specialProp = 1; }\" +\n        \"/** @param {Bar|Baz} x */ function g(x) { return x.specialProp; }\");\n  }\n",
        "begin_line": 8137,
        "end_line": 8145,
        "comment": "",
        "child_ranges": [
            "(line 8139,col 5)-(line 8144,col 77)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testMissingProperty36()",
        "snippet": "  public void testMissingProperty36() throws Exception {\n    // Foo has baz defined, and SubFoo has bar defined, so some objects with\n    // bar may have baz.\n    testTypes(\n        \"/** @constructor */ function Foo() {}\" +\n        \"Foo.prototype.baz = 0;\" +\n        \"/** @constructor \\n * @extends {Foo} */ function SubFoo() {}\" +\n        \"SubFoo.prototype.bar = 0;\" +\n        \"/** @param {{bar: number}} x */ function f(x) { return x.baz; }\");\n  }\n",
        "begin_line": 8147,
        "end_line": 8156,
        "comment": "",
        "child_ranges": [
            "(line 8150,col 5)-(line 8155,col 75)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testMissingProperty37()",
        "snippet": "  public void testMissingProperty37() throws Exception {\n    // This used to emit a missing property warning because we couldn't\n    // determine that the inf(Foo, {isVisible:boolean}) == SubFoo.\n    testTypes(\n        \"/** @param {{isVisible: boolean}} x */ function f(x){\" +\n        \"  x.isVisible = false;\" +\n        \"}\" +\n        \"/** @constructor */ function Foo() {}\" +\n        \"/**\\n\" +\n        \" * @constructor \\n\" +\n        \" * @extends {Foo}\\n\" +\n        \" */ function SubFoo() {}\" +\n        \"/** @type {boolean} */ SubFoo.prototype.isVisible = true;\" +\n        \"/**\\n\" +\n        \" * @param {Foo} x\\n\" +\n        \" * @return {boolean}\\n\" +\n        \" */\\n\" +\n        \"function g(x) { return x.isVisible; }\");\n  }\n",
        "begin_line": 8158,
        "end_line": 8176,
        "comment": "",
        "child_ranges": [
            "(line 8161,col 5)-(line 8175,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testReflectObject1()",
        "snippet": "  public void testReflectObject1() throws Exception {\n    testClosureTypes(\n        \"var goog = {}; goog.reflect = {}; \" +\n        \"goog.reflect.object = function(x, y){};\" +\n        \"/** @constructor */ function A() {}\" +\n        \"goog.reflect.object(A, {x: 3});\",\n        null);\n  }\n",
        "begin_line": 8178,
        "end_line": 8185,
        "comment": "",
        "child_ranges": [
            "(line 8179,col 5)-(line 8184,col 14)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testReflectObject2()",
        "snippet": "  public void testReflectObject2() throws Exception {\n    testClosureTypes(\n        \"var goog = {}; goog.reflect = {}; \" +\n        \"goog.reflect.object = function(x, y){};\" +\n        \"/** @param {string} x */ function f(x) {}\" +\n        \"/** @constructor */ function A() {}\" +\n        \"goog.reflect.object(A, {x: f(1 + 1)});\",\n        \"actual parameter 1 of f does not match formal parameter\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 8187,
        "end_line": 8197,
        "comment": "",
        "child_ranges": [
            "(line 8188,col 5)-(line 8196,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testLends1()",
        "snippet": "  public void testLends1() throws Exception {\n    testTypes(\n        \"function extend(x, y) {}\" +\n        \"/** @constructor */ function Foo() {}\" +\n        \"extend(Foo, /** @lends */ ({bar: 1}));\",\n        \"Bad type annotation. missing object name in @lends tag\");\n  }\n",
        "begin_line": 8199,
        "end_line": 8205,
        "comment": "",
        "child_ranges": [
            "(line 8200,col 5)-(line 8204,col 66)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testLends2()",
        "snippet": "  public void testLends2() throws Exception {\n    testTypes(\n        \"function extend(x, y) {}\" +\n        \"/** @constructor */ function Foo() {}\" +\n        \"extend(Foo, /** @lends {Foob} */ ({bar: 1}));\",\n        \"Variable Foob not declared before @lends annotation.\");\n  }\n",
        "begin_line": 8207,
        "end_line": 8213,
        "comment": "",
        "child_ranges": [
            "(line 8208,col 5)-(line 8212,col 64)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testLends3()",
        "snippet": "  public void testLends3() throws Exception {\n    testTypes(\n        \"function extend(x, y) {}\" +\n        \"/** @constructor */ function Foo() {}\" +\n        \"extend(Foo, {bar: 1});\" +\n        \"alert(Foo.bar);\",\n        \"Property bar never defined on Foo\");\n  }\n",
        "begin_line": 8215,
        "end_line": 8222,
        "comment": "",
        "child_ranges": [
            "(line 8216,col 5)-(line 8221,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testLends4()",
        "snippet": "  public void testLends4() throws Exception {\n    testTypes(\n        \"function extend(x, y) {}\" +\n        \"/** @constructor */ function Foo() {}\" +\n        \"extend(Foo, /** @lends {Foo} */ ({bar: 1}));\" +\n        \"alert(Foo.bar);\");\n  }\n",
        "begin_line": 8224,
        "end_line": 8230,
        "comment": "",
        "child_ranges": [
            "(line 8225,col 5)-(line 8229,col 27)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testLends5()",
        "snippet": "  public void testLends5() throws Exception {\n    testTypes(\n        \"function extend(x, y) {}\" +\n        \"/** @constructor */ function Foo() {}\" +\n        \"extend(Foo, {bar: 1});\" +\n        \"alert((new Foo()).bar);\",\n        \"Property bar never defined on Foo\");\n  }\n",
        "begin_line": 8232,
        "end_line": 8239,
        "comment": "",
        "child_ranges": [
            "(line 8233,col 5)-(line 8238,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testLends6()",
        "snippet": "  public void testLends6() throws Exception {\n    testTypes(\n        \"function extend(x, y) {}\" +\n        \"/** @constructor */ function Foo() {}\" +\n        \"extend(Foo, /** @lends {Foo.prototype} */ ({bar: 1}));\" +\n        \"alert((new Foo()).bar);\");\n  }\n",
        "begin_line": 8241,
        "end_line": 8247,
        "comment": "",
        "child_ranges": [
            "(line 8242,col 5)-(line 8246,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testLends7()",
        "snippet": "  public void testLends7() throws Exception {\n    testTypes(\n        \"function extend(x, y) {}\" +\n        \"/** @constructor */ function Foo() {}\" +\n        \"extend(Foo, /** @lends {Foo.prototype|Foo} */ ({bar: 1}));\",\n        \"Bad type annotation. expected closing }\");\n  }\n",
        "begin_line": 8249,
        "end_line": 8255,
        "comment": "",
        "child_ranges": [
            "(line 8250,col 5)-(line 8254,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testLends8()",
        "snippet": "  public void testLends8() throws Exception {\n    testTypes(\n        \"function extend(x, y) {}\" +\n        \"/** @type {number} */ var Foo = 3;\" +\n        \"extend(Foo, /** @lends {Foo} */ ({bar: 1}));\",\n        \"May only lend properties to object types. Foo has type number.\");\n  }\n",
        "begin_line": 8257,
        "end_line": 8263,
        "comment": "",
        "child_ranges": [
            "(line 8258,col 5)-(line 8262,col 74)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testLends9()",
        "snippet": "  public void testLends9() throws Exception {\n    testClosureTypesMultipleWarnings(\n        \"function extend(x, y) {}\" +\n        \"/** @constructor */ function Foo() {}\" +\n        \"extend(Foo, /** @lends {!Foo} */ ({bar: 1}));\",\n        Lists.newArrayList(\n            \"Bad type annotation. expected closing }\",\n            \"Bad type annotation. missing object name in @lends tag\"));\n  }\n",
        "begin_line": 8265,
        "end_line": 8273,
        "comment": "",
        "child_ranges": [
            "(line 8266,col 5)-(line 8272,col 71)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testDeclaredNativeTypeEquality()",
        "snippet": "  public void testDeclaredNativeTypeEquality() throws Exception {\n    Node n = parseAndTypeCheck(\"/** @constructor */ function Object() {};\");\n    assertEquals(registry.getNativeType(JSTypeNative.OBJECT_FUNCTION_TYPE),\n                 n.getFirstChild().getJSType());\n  }\n",
        "begin_line": 8275,
        "end_line": 8279,
        "comment": "",
        "child_ranges": [
            "(line 8276,col 5)-(line 8276,col 76)",
            "(line 8277,col 5)-(line 8278,col 48)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testUndefinedVar()",
        "snippet": "  public void testUndefinedVar() throws Exception {\n    Node n = parseAndTypeCheck(\"var undefined;\");\n    assertEquals(registry.getNativeType(JSTypeNative.VOID_TYPE),\n                 n.getFirstChild().getFirstChild().getJSType());\n  }\n",
        "begin_line": 8281,
        "end_line": 8285,
        "comment": "",
        "child_ranges": [
            "(line 8282,col 5)-(line 8282,col 49)",
            "(line 8283,col 5)-(line 8284,col 64)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testFlowScopeBug1()",
        "snippet": "  public void testFlowScopeBug1() throws Exception {\n    Node n = parseAndTypeCheck(\"/** @param {number} a \\n\"\n        + \"* @param {number} b */\\n\"\n        + \"function f(a, b) {\\n\"\n        + \"/** @type number */\"\n        + \"var i = 0;\"\n        + \"for (; (i + a) < b; ++i) {}}\");\n\n    // check the type of the add node for i + f\n    assertEquals(registry.getNativeType(JSTypeNative.NUMBER_TYPE),\n        n.getFirstChild().getLastChild().getLastChild().getFirstChild()\n        .getNext().getFirstChild().getJSType());\n  }\n",
        "begin_line": 8287,
        "end_line": 8299,
        "comment": "",
        "child_ranges": [
            "(line 8288,col 5)-(line 8293,col 42)",
            "(line 8296,col 5)-(line 8298,col 48)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testFlowScopeBug2()",
        "snippet": "  public void testFlowScopeBug2() throws Exception {\n    Node n = parseAndTypeCheck(\"/** @constructor */ function Foo() {};\\n\"\n        + \"Foo.prototype.hi = false;\"\n        + \"function foo(a, b) {\\n\"\n        + \"  /** @type Array */\"\n        + \"  var arr;\"\n        + \"  /** @type number */\"\n        + \"  var iter;\"\n        + \"  for (iter = 0; iter < arr.length; ++ iter) {\"\n        + \"    /** @type Foo */\"\n        + \"    var afoo = arr[iter];\"\n        + \"    afoo;\"\n        + \"  }\"\n        + \"}\");\n\n    // check the type of afoo when referenced\n    assertEquals(registry.createNullableType(registry.getType(\"Foo\")),\n        n.getLastChild().getLastChild().getLastChild().getLastChild()\n        .getLastChild().getLastChild().getJSType());\n  }\n",
        "begin_line": 8301,
        "end_line": 8320,
        "comment": "",
        "child_ranges": [
            "(line 8302,col 5)-(line 8314,col 15)",
            "(line 8317,col 5)-(line 8319,col 52)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testAddSingletonGetter()",
        "snippet": "  public void testAddSingletonGetter() {\n    Node n = parseAndTypeCheck(\n        \"/** @constructor */ function Foo() {};\\n\" +\n        \"goog.addSingletonGetter(Foo);\");\n    ObjectType o = (ObjectType) n.getFirstChild().getJSType();\n    assertEquals(\"function (): Foo\",\n        o.getPropertyType(\"getInstance\").toString());\n    assertEquals(\"Foo\", o.getPropertyType(\"instance_\").toString());\n  }\n",
        "begin_line": 8322,
        "end_line": 8330,
        "comment": "",
        "child_ranges": [
            "(line 8323,col 5)-(line 8325,col 41)",
            "(line 8326,col 5)-(line 8326,col 62)",
            "(line 8327,col 5)-(line 8328,col 53)",
            "(line 8329,col 5)-(line 8329,col 67)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypeCheckStandaloneAST()",
        "snippet": "  public void testTypeCheckStandaloneAST() throws Exception {\n    Node n = compiler.parseTestCode(\"function Foo() { }\");\n    typeCheck(n);\n    TypedScopeCreator scopeCreator = new TypedScopeCreator(compiler);\n    Scope topScope = scopeCreator.createScope(n, null);\n\n    Node second = compiler.parseTestCode(\"new Foo\");\n\n    Node externs = new Node(Token.BLOCK);\n    Node externAndJsRoot = new Node(Token.BLOCK, externs, second);\n    externAndJsRoot.setIsSyntheticBlock(true);\n\n    new TypeCheck(\n        compiler,\n        new SemanticReverseAbstractInterpreter(\n            compiler.getCodingConvention(), registry),\n        registry, topScope, scopeCreator, CheckLevel.WARNING, CheckLevel.OFF)\n        .process(null, second);\n\n    assertEquals(1, compiler.getWarningCount());\n    assertEquals(\"cannot instantiate non-constructor\",\n        compiler.getWarnings()[0].description);\n  }\n",
        "begin_line": 8332,
        "end_line": 8354,
        "comment": "",
        "child_ranges": [
            "(line 8333,col 5)-(line 8333,col 58)",
            "(line 8334,col 5)-(line 8334,col 17)",
            "(line 8335,col 5)-(line 8335,col 69)",
            "(line 8336,col 5)-(line 8336,col 55)",
            "(line 8338,col 5)-(line 8338,col 52)",
            "(line 8340,col 5)-(line 8340,col 41)",
            "(line 8341,col 5)-(line 8341,col 66)",
            "(line 8342,col 5)-(line 8342,col 46)",
            "(line 8344,col 5)-(line 8349,col 31)",
            "(line 8351,col 5)-(line 8351,col 48)",
            "(line 8352,col 5)-(line 8353,col 47)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testUpdateParameterTypeOnClosure()",
        "snippet": "  public void testUpdateParameterTypeOnClosure() throws Exception {\n    testTypes(\n        \"/**\\n\" +\n        \"* @constructor\\n\" +\n        \"* @param {*=} opt_value\\n\" +\n        \"* @return {?}\\n\" +\n        \"*/\\n\" +\n        \"function Object(opt_value) {}\\n\" +\n        \"/**\\n\" +\n        \"* @constructor\\n\" +\n        \"* @param {...*} var_args\\n\" +\n        \"*/\\n\" +\n        \"function Function(var_args) {}\\n\" +\n        \"/**\\n\" +\n        \"* @type {Function}\\n\" +\n        \"*/\\n\" +\n        // The line below sets JSDocInfo on Object so that the type of the\n        // argument to function f has JSDoc through its prototype chain.\n        \"Object.prototype.constructor = function() {};\\n\",\n        \"/**\\n\" +\n        \"* @param {function(): boolean} fn\\n\" +\n        \"*/\\n\" +\n        \"function f(fn) {}\\n\" +\n        \"f(function(g) { });\\n\",\n        null,\n        false);\n  }\n",
        "begin_line": 8356,
        "end_line": 8382,
        "comment": "",
        "child_ranges": [
            "(line 8357,col 5)-(line 8381,col 15)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBadTemplateType1()",
        "snippet": "  public void testBadTemplateType1() throws Exception {\n    testTypes(\n        \"/**\\n\" +\n        \"* @param {T} x\\n\" +\n        \"* @param {T} y\\n\" +\n        \"* @param {function(this:T, ...)} z\\n\" +\n        \"* @template T\\n\" +\n        \"*/\\n\" +\n        \"function f(x, y, z) {}\\n\" +\n        \"f(this, this, function() { this });\",\n        FunctionTypeBuilder.TEMPLATE_TYPE_DUPLICATED.format(), true);\n  }\n",
        "begin_line": 8384,
        "end_line": 8395,
        "comment": "",
        "child_ranges": [
            "(line 8385,col 5)-(line 8394,col 69)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBadTemplateType2()",
        "snippet": "  public void testBadTemplateType2() throws Exception {\n    testTypes(\n        \"/**\\n\" +\n        \"* @param {T} x\\n\" +\n        \"* @param {function(this:T, ...)} y\\n\" +\n        \"* @template T\\n\" +\n        \"*/\\n\" +\n        \"function f(x, y) {}\\n\" +\n        \"f(0, function() {});\",\n        TypeInference.TEMPLATE_TYPE_NOT_OBJECT_TYPE.format(), true);\n  }\n",
        "begin_line": 8397,
        "end_line": 8407,
        "comment": "",
        "child_ranges": [
            "(line 8398,col 5)-(line 8406,col 68)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBadTemplateType3()",
        "snippet": "  public void testBadTemplateType3() throws Exception {\n    testTypes(\n        \"/**\\n\" +\n        \" * @param {T} x\\n\" +\n        \" * @template T\\n\" +\n        \"*/\\n\" +\n        \"function f(x) {}\\n\" +\n        \"f(this);\",\n        TypeInference.TEMPLATE_TYPE_OF_THIS_EXPECTED.format(), true);\n  }\n",
        "begin_line": 8409,
        "end_line": 8418,
        "comment": "",
        "child_ranges": [
            "(line 8410,col 5)-(line 8417,col 69)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBadTemplateType4()",
        "snippet": "  public void testBadTemplateType4() throws Exception {\n    testTypes(\n        \"/**\\n\" +\n        \"* @template T\\n\" +\n        \"*/\\n\" +\n        \"function f() {}\\n\" +\n        \"f();\",\n        FunctionTypeBuilder.TEMPLATE_TYPE_EXPECTED.format(), true);\n  }\n",
        "begin_line": 8420,
        "end_line": 8428,
        "comment": "",
        "child_ranges": [
            "(line 8421,col 5)-(line 8427,col 67)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBadTemplateType5()",
        "snippet": "  public void testBadTemplateType5() throws Exception {\n    testTypes(\n        \"/**\\n\" +\n        \"* @template T\\n\" +\n        \"* @return {T}\\n\" +\n        \"*/\\n\" +\n        \"function f() {}\\n\" +\n        \"f();\",\n        FunctionTypeBuilder.TEMPLATE_TYPE_EXPECTED.format(), true);\n  }\n",
        "begin_line": 8430,
        "end_line": 8439,
        "comment": "",
        "child_ranges": [
            "(line 8431,col 5)-(line 8438,col 67)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testFunctionLiteralUndefinedThisArgument()",
        "snippet": "  public void testFunctionLiteralUndefinedThisArgument() throws Exception {\n    testTypes(\"\"\n        + \"/**\\n\"\n        + \" * @param {function(this:T, ...)?} fn\\n\"\n        + \" * @param {?T} opt_obj\\n\"\n        + \" * @template T\\n\"\n        + \" */\\n\"\n        + \"function baz(fn, opt_obj) {}\\n\"\n        + \"baz(function() { this; });\",\n        \"Function literal argument refers to undefined this argument\");\n  }\n",
        "begin_line": 8441,
        "end_line": 8451,
        "comment": "",
        "child_ranges": [
            "(line 8442,col 5)-(line 8450,col 71)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testFunctionLiteralDefinedThisArgument()",
        "snippet": "  public void testFunctionLiteralDefinedThisArgument() throws Exception {\n    testTypes(\"\"\n        + \"/**\\n\"\n        + \" * @param {function(this:T, ...)?} fn\\n\"\n        + \" * @param {?T} opt_obj\\n\"\n        + \" * @template T\\n\"\n        + \" */\\n\"\n        + \"function baz(fn, opt_obj) {}\\n\"\n        + \"baz(function() { this; }, {});\");\n  }\n",
        "begin_line": 8453,
        "end_line": 8462,
        "comment": "",
        "child_ranges": [
            "(line 8454,col 5)-(line 8461,col 44)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testFunctionLiteralUnreadThisArgument()",
        "snippet": "  public void testFunctionLiteralUnreadThisArgument() throws Exception {\n    testTypes(\"\"\n        + \"/**\\n\"\n        + \" * @param {function(this:T, ...)?} fn\\n\"\n        + \" * @param {?T} opt_obj\\n\"\n        + \" * @template T\\n\"\n        + \" */\\n\"\n        + \"function baz(fn, opt_obj) {}\\n\"\n        + \"baz(function() {}, {});\",\n        \"Function literal argument does not refer to bound this argument\");\n  }\n",
        "begin_line": 8464,
        "end_line": 8474,
        "comment": "",
        "child_ranges": [
            "(line 8465,col 5)-(line 8473,col 75)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testFunctionLiteralUnreadNullThisArgument()",
        "snippet": "  public void testFunctionLiteralUnreadNullThisArgument() throws Exception {\n    testTypes(\"\"\n        + \"/**\\n\"\n        + \" * @param {function(this:T, ...)?} fn\\n\"\n        + \" * @param {?T} opt_obj\\n\"\n        + \" * @template T\\n\"\n        + \" */\\n\"\n        + \"function baz(fn, opt_obj) {}\\n\"\n        + \"baz(function() {}, null);\");\n  }\n",
        "begin_line": 8476,
        "end_line": 8485,
        "comment": "",
        "child_ranges": [
            "(line 8477,col 5)-(line 8484,col 39)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testActiveXObject()",
        "snippet": "  public void testActiveXObject() throws Exception {\n    testTypes(\n        \"/** @type {Object} */ var x = new ActiveXObject();\" +\n        \"/** @type { {impossibleProperty} } */ var y = new ActiveXObject();\");\n  }\n",
        "begin_line": 8487,
        "end_line": 8491,
        "comment": "",
        "child_ranges": [
            "(line 8488,col 5)-(line 8490,col 78)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testDuplicateRecordFields1()",
        "snippet": "  public void testDuplicateRecordFields1() throws Exception {\n    testTypes(\"/**\"\n         + \"* @param {{x:string, x:number}} a\"\n         + \"*/\"\n         + \"function f(a) {};\",\n         \"Parse error. Duplicate record field x\");\n  }\n",
        "begin_line": 8493,
        "end_line": 8499,
        "comment": "",
        "child_ranges": [
            "(line 8494,col 5)-(line 8498,col 50)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testDuplicateRecordFields2()",
        "snippet": "  public void testDuplicateRecordFields2() throws Exception {\n    testTypes(\"/**\"\n         + \"* @param {{name:string,number:x,number:y}} a\"\n         + \" */\"\n         + \"function f(a) {};\",\n         new String[] {\"Bad type annotation. Unknown type x\",\n           \"Parse error. Duplicate record field number\",\n           \"Bad type annotation. Unknown type y\"});\n  }\n",
        "begin_line": 8501,
        "end_line": 8509,
        "comment": "",
        "child_ranges": [
            "(line 8502,col 5)-(line 8508,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testMultipleExtendsInterface1()",
        "snippet": "  public void testMultipleExtendsInterface1() throws Exception {\n    testTypes(\"/** @interface */ function base1() {}\\n\"\n        + \"/** @interface */ function base2() {}\\n\"\n        + \"/** @interface\\n\"\n        + \"* @extends {base1}\\n\"\n        + \"* @extends {base2}\\n\"\n        + \"*/\\n\"\n        + \"function derived() {}\");\n  }\n",
        "begin_line": 8511,
        "end_line": 8519,
        "comment": "",
        "child_ranges": [
            "(line 8512,col 5)-(line 8518,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testMultipleExtendsInterface2()",
        "snippet": "  public void testMultipleExtendsInterface2() throws Exception {\n    testTypes(\n        \"/** @interface */function Int0() {};\" +\n        \"/** @interface */function Int1() {};\" +\n        \"/** @desc description */Int0.prototype.foo = function() {};\" +\n        \"/** @interface \\n @extends {Int0} \\n @extends {Int1} */\" +\n        \"function Int2() {};\" +\n        \"/** @constructor\\n @implements {Int2} */function Foo() {};\",\n        \"property foo on interface Int0 is not implemented by type Foo\");\n  }\n",
        "begin_line": 8521,
        "end_line": 8530,
        "comment": "",
        "child_ranges": [
            "(line 8522,col 5)-(line 8529,col 73)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testMultipleExtendsInterface3()",
        "snippet": "  public void testMultipleExtendsInterface3() throws Exception {\n    testTypes(\n        \"/** @interface */function Int0() {};\" +\n        \"/** @interface */function Int1() {};\" +\n        \"/** @desc description */Int1.prototype.foo = function() {};\" +\n        \"/** @interface \\n @extends {Int0} \\n @extends {Int1} */\" +\n        \"function Int2() {};\" +\n        \"/** @constructor\\n @implements {Int2} */function Foo() {};\",\n        \"property foo on interface Int1 is not implemented by type Foo\");\n  }\n",
        "begin_line": 8532,
        "end_line": 8541,
        "comment": "",
        "child_ranges": [
            "(line 8533,col 5)-(line 8540,col 73)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testMultipleExtendsInterface4()",
        "snippet": "  public void testMultipleExtendsInterface4() throws Exception {\n    testTypes(\n        \"/** @interface */function Int0() {};\" +\n        \"/** @interface */function Int1() {};\" +\n        \"/** @interface \\n @extends {Int0} \\n @extends {Int1} \\n\" +\n        \" @extends {number} */\" +\n        \"function Int2() {};\" +\n        \"/** @constructor\\n @implements {Int2} */function Foo() {};\",\n        \"Int2 @extends non-object type number\");\n  }\n",
        "begin_line": 8543,
        "end_line": 8552,
        "comment": "",
        "child_ranges": [
            "(line 8544,col 5)-(line 8551,col 48)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testMultipleExtendsInterface5()",
        "snippet": "  public void testMultipleExtendsInterface5() throws Exception {\n    testTypes(\n        \"/** @interface */function Int0() {};\" +\n        \"/** @constructor */function Int1() {};\" +\n        \"/** @desc description @ return {string} x */\" +\n        \"/** @interface \\n @extends {Int0} \\n @extends {Int1} */\" +\n        \"function Int2() {};\",\n        \"Int2 cannot extend this type; a constructor can only extend \" +\n        \"objects and an interface can only extend interfaces\");\n  }\n",
        "begin_line": 8554,
        "end_line": 8563,
        "comment": "",
        "child_ranges": [
            "(line 8555,col 5)-(line 8562,col 63)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testMultipleExtendsInterface6()",
        "snippet": "  public void testMultipleExtendsInterface6() throws Exception {\n    testTypes(\n        \"/** @interface */function Super1() {};\" +\n        \"/** @interface */function Super2() {};\" +\n        \"/** @param {number} bar */Super2.prototype.foo = function(bar) {};\" +\n        \"/** @interface\\n @extends {Super1}\\n \" +\n        \"@extends {Super2} */function Sub() {};\" +\n        \"/** @override\\n @param {string} bar */Sub.prototype.foo =\\n\" +\n        \"function(bar) {};\",\n        \"mismatch of the foo property type and the type of the property it \" +\n        \"overrides from superclass Super2\\n\" +\n        \"original: function (this:Super2, number): undefined\\n\" +\n        \"override: function (this:Sub, string): undefined\");\n  }\n",
        "begin_line": 8565,
        "end_line": 8578,
        "comment": "",
        "child_ranges": [
            "(line 8566,col 5)-(line 8577,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testMultipleExtendsInterfaceAssignment()",
        "snippet": "  public void testMultipleExtendsInterfaceAssignment() throws Exception {\n    testTypes(\"/** @interface */var I1 = function() {};\\n\" +\n        \"/** @interface */ var I2 = function() {}\\n\" +\n        \"/** @interface\\n@extends {I1}\\n@extends {I2}*/\" +\n        \"var I3 = function() {};\\n\" +\n        \"/** @constructor\\n@implements {I3}*/var T = function() {};\\n\" +\n        \"var t = new T();\\n\" +\n         \"/** @type {I1} */var i1 = t;\\n\" +\n         \"/** @type {I2} */var i2 = t;\\n\" +\n         \"/** @type {I3} */var i3 = t;\\n\" +\n         \"i1 = i3;\\n\" +\n         \"i2 = i3;\\n\");\n  }\n",
        "begin_line": 8580,
        "end_line": 8592,
        "comment": "",
        "child_ranges": [
            "(line 8581,col 5)-(line 8591,col 23)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testMultipleExtendsInterfaceParamPass()",
        "snippet": "  public void testMultipleExtendsInterfaceParamPass() throws Exception {\n    testTypes(\"/** @interface */var I1 = function() {};\\n\" +\n        \"/** @interface */ var I2 = function() {}\\n\" +\n        \"/** @interface\\n@extends {I1}\\n@extends {I2}*/\" +\n        \"var I3 = function() {};\\n\" +\n        \"/** @constructor\\n@implements {I3}*/var T = function() {};\\n\" +\n        \"var t = new T();\\n\" +\n        \"/** @param x I1 \\n@param y I2\\n@param z I3*/function foo(x,y,z){};\\n\" +\n        \"foo(t,t,t)\\n\");\n  }\n",
        "begin_line": 8594,
        "end_line": 8603,
        "comment": "",
        "child_ranges": [
            "(line 8595,col 5)-(line 8602,col 24)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBadMultipleExtendsClass()",
        "snippet": "  public void testBadMultipleExtendsClass() throws Exception {\n    testTypes(\"/** @constructor */ function base1() {}\\n\"\n        + \"/** @constructor */ function base2() {}\\n\"\n        + \"/** @constructor\\n\"\n        + \"* @extends {base1}\\n\"\n        + \"* @extends {base2}\\n\"\n        + \"*/\\n\"\n        + \"function derived() {}\",\n        \"Bad type annotation. type annotation incompatible \"\n        + \"with other annotations\");\n  }\n",
        "begin_line": 8605,
        "end_line": 8615,
        "comment": "",
        "child_ranges": [
            "(line 8606,col 5)-(line 8614,col 36)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInterfaceExtendsResolution()",
        "snippet": "  public void testInterfaceExtendsResolution() throws Exception {\n    testTypes(\"/** @interface \\n @extends {A} */ function B() {};\\n\" +\n        \"/** @constructor \\n @implements {B} */ function C() {};\\n\" +\n        \"/** @interface */ function A() {};\");\n  }\n",
        "begin_line": 8617,
        "end_line": 8621,
        "comment": "",
        "child_ranges": [
            "(line 8618,col 5)-(line 8620,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testPropertyCanBeDefinedInObject()",
        "snippet": "  public void testPropertyCanBeDefinedInObject() throws Exception {\n    testTypes(\"/** @interface */ function I() {};\" +\n        \"I.prototype.bar = function() {};\" +\n        \"/** @type {Object} */ var foo;\" +\n        \"foo.bar();\");\n  }\n",
        "begin_line": 8623,
        "end_line": 8628,
        "comment": "",
        "child_ranges": [
            "(line 8624,col 5)-(line 8627,col 22)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.checkObjectType(com.google.javascript.rhino.jstype.ObjectType, java.lang.String, com.google.javascript.rhino.jstype.JSType)",
        "snippet": "  private void checkObjectType(ObjectType objectType, String propertyName,\n        JSType expectedType) {\n    assertTrue(\"Expected \" + objectType.getReferenceName() +\n        \" to have property \" +\n        propertyName, objectType.hasProperty(propertyName));\n    assertEquals(\"Expected \" + objectType.getReferenceName() +\n        \"'s property \" +\n        propertyName + \" to have type \" + expectedType,\n        expectedType, objectType.getPropertyType(propertyName));\n  }\n",
        "begin_line": 8630,
        "end_line": 8639,
        "comment": "",
        "child_ranges": [
            "(line 8632,col 5)-(line 8634,col 60)",
            "(line 8635,col 5)-(line 8638,col 64)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testExtendedInterfacePropertiesCompatibility1()",
        "snippet": "  public void testExtendedInterfacePropertiesCompatibility1() throws Exception {\n    testTypes(\n        \"/** @interface */function Int0() {};\" +\n        \"/** @interface */function Int1() {};\" +\n        \"/** @type {number} */\" +\n        \"Int0.prototype.foo;\" +\n        \"/** @type {string} */\" +\n        \"Int1.prototype.foo;\" +\n        \"/** @interface \\n @extends {Int0} \\n @extends {Int1} */\" +\n        \"function Int2() {};\",\n        \"Interface Int2 has a property foo with incompatible types in its \" +\n        \"super interfaces Int0 and Int1\");\n  }\n",
        "begin_line": 8641,
        "end_line": 8653,
        "comment": "",
        "child_ranges": [
            "(line 8642,col 5)-(line 8652,col 42)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testExtendedInterfacePropertiesCompatibility2()",
        "snippet": "  public void testExtendedInterfacePropertiesCompatibility2() throws Exception {\n    testTypes(\n        \"/** @interface */function Int0() {};\" +\n        \"/** @interface */function Int1() {};\" +\n        \"/** @interface */function Int2() {};\" +\n        \"/** @type {number} */\" +\n        \"Int0.prototype.foo;\" +\n        \"/** @type {string} */\" +\n        \"Int1.prototype.foo;\" +\n        \"/** @type {Object} */\" +\n        \"Int2.prototype.foo;\" +\n        \"/** @interface \\n @extends {Int0} \\n @extends {Int1} \\n\" +\n        \"@extends {Int2}*/\" +\n        \"function Int3() {};\",\n        new String[] {\n            \"Interface Int3 has a property foo with incompatible types in \" +\n            \"its super interfaces Int0 and Int1\",\n            \"Interface Int3 has a property foo with incompatible types in \" +\n            \"its super interfaces Int1 and Int2\"\n        });\n  }\n",
        "begin_line": 8655,
        "end_line": 8675,
        "comment": "",
        "child_ranges": [
            "(line 8656,col 5)-(line 8674,col 11)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testExtendedInterfacePropertiesCompatibility3()",
        "snippet": "  public void testExtendedInterfacePropertiesCompatibility3() throws Exception {\n    testTypes(\n        \"/** @interface */function Int0() {};\" +\n        \"/** @interface */function Int1() {};\" +\n        \"/** @type {number} */\" +\n        \"Int0.prototype.foo;\" +\n        \"/** @type {string} */\" +\n        \"Int1.prototype.foo;\" +\n        \"/** @interface \\n @extends {Int1} */ function Int2() {};\" +\n        \"/** @interface \\n @extends {Int0} \\n @extends {Int2} */\" +\n        \"function Int3() {};\",\n        \"Interface Int3 has a property foo with incompatible types in its \" +\n        \"super interfaces Int0 and Int1\");\n  }\n",
        "begin_line": 8677,
        "end_line": 8690,
        "comment": "",
        "child_ranges": [
            "(line 8678,col 5)-(line 8689,col 42)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testExtendedInterfacePropertiesCompatibility4()",
        "snippet": "  public void testExtendedInterfacePropertiesCompatibility4() throws Exception {\n    testTypes(\n        \"/** @interface */function Int0() {};\" +\n        \"/** @interface \\n @extends {Int0} */ function Int1() {};\" +\n        \"/** @type {number} */\" +\n        \"Int0.prototype.foo;\" +\n        \"/** @interface */function Int2() {};\" +\n        \"/** @interface \\n @extends {Int2} */ function Int3() {};\" +\n        \"/** @type {string} */\" +\n        \"Int2.prototype.foo;\" +\n        \"/** @interface \\n @extends {Int1} \\n @extends {Int3} */\" +\n        \"function Int4() {};\",\n        \"Interface Int4 has a property foo with incompatible types in its \" +\n        \"super interfaces Int0 and Int2\");\n  }\n",
        "begin_line": 8692,
        "end_line": 8706,
        "comment": "",
        "child_ranges": [
            "(line 8693,col 5)-(line 8705,col 42)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testExtendedInterfacePropertiesCompatibility5()",
        "snippet": "  public void testExtendedInterfacePropertiesCompatibility5() throws Exception {\n    testTypes(\n        \"/** @interface */function Int0() {};\" +\n        \"/** @interface */function Int1() {};\" +\n        \"/** @type {number} */\" +\n        \"Int0.prototype.foo;\" +\n        \"/** @type {string} */\" +\n        \"Int1.prototype.foo;\" +\n        \"/** @interface \\n @extends {Int1} */ function Int2() {};\" +\n        \"/** @interface \\n @extends {Int0} \\n @extends {Int2} */\" +\n        \"function Int3() {};\" +\n        \"/** @interface */function Int4() {};\" +\n        \"/** @type {number} */\" +\n        \"Int4.prototype.foo;\" +\n        \"/** @interface \\n @extends {Int3} \\n @extends {Int4} */\" +\n        \"function Int5() {};\",\n        new String[] {\n            \"Interface Int3 has a property foo with incompatible types in its\" +\n            \" super interfaces Int0 and Int1\",\n            \"Interface Int5 has a property foo with incompatible types in its\" +\n            \" super interfaces Int1 and Int4\"});\n  }\n",
        "begin_line": 8708,
        "end_line": 8729,
        "comment": "",
        "child_ranges": [
            "(line 8709,col 5)-(line 8728,col 48)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testExtendedInterfacePropertiesCompatibility6()",
        "snippet": "  public void testExtendedInterfacePropertiesCompatibility6() throws Exception {\n    testTypes(\n        \"/** @interface */function Int0() {};\" +\n        \"/** @interface */function Int1() {};\" +\n        \"/** @type {number} */\" +\n        \"Int0.prototype.foo;\" +\n        \"/** @type {string} */\" +\n        \"Int1.prototype.foo;\" +\n        \"/** @interface \\n @extends {Int1} */ function Int2() {};\" +\n        \"/** @interface \\n @extends {Int0} \\n @extends {Int2} */\" +\n        \"function Int3() {};\" +\n        \"/** @interface */function Int4() {};\" +\n        \"/** @type {string} */\" +\n        \"Int4.prototype.foo;\" +\n        \"/** @interface \\n @extends {Int3} \\n @extends {Int4} */\" +\n        \"function Int5() {};\",\n        \"Interface Int3 has a property foo with incompatible types in its\" +\n        \" super interfaces Int0 and Int1\");\n  }\n",
        "begin_line": 8731,
        "end_line": 8749,
        "comment": "",
        "child_ranges": [
            "(line 8732,col 5)-(line 8748,col 43)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testExtendedInterfacePropertiesCompatibility7()",
        "snippet": "  public void testExtendedInterfacePropertiesCompatibility7() throws Exception {\n    testTypes(\n        \"/** @interface */function Int0() {};\" +\n        \"/** @interface */function Int1() {};\" +\n        \"/** @type {number} */\" +\n        \"Int0.prototype.foo;\" +\n        \"/** @type {string} */\" +\n        \"Int1.prototype.foo;\" +\n        \"/** @interface \\n @extends {Int1} */ function Int2() {};\" +\n        \"/** @interface \\n @extends {Int0} \\n @extends {Int2} */\" +\n        \"function Int3() {};\" +\n        \"/** @interface */function Int4() {};\" +\n        \"/** @type {Object} */\" +\n        \"Int4.prototype.foo;\" +\n        \"/** @interface \\n @extends {Int3} \\n @extends {Int4} */\" +\n        \"function Int5() {};\",\n        new String[] {\n            \"Interface Int3 has a property foo with incompatible types in its\" +\n            \" super interfaces Int0 and Int1\",\n            \"Interface Int5 has a property foo with incompatible types in its\" +\n            \" super interfaces Int1 and Int4\"});\n  }\n",
        "begin_line": 8751,
        "end_line": 8772,
        "comment": "",
        "child_ranges": [
            "(line 8752,col 5)-(line 8771,col 48)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testExtendedInterfacePropertiesCompatibility8()",
        "snippet": "  public void testExtendedInterfacePropertiesCompatibility8() throws Exception {\n    testTypes(\n        \"/** @interface */function Int0() {};\" +\n        \"/** @interface */function Int1() {};\" +\n        \"/** @type {number} */\" +\n        \"Int0.prototype.foo;\" +\n        \"/** @type {string} */\" +\n        \"Int1.prototype.bar;\" +\n        \"/** @interface \\n @extends {Int1} */ function Int2() {};\" +\n        \"/** @interface \\n @extends {Int0} \\n @extends {Int2} */\" +\n        \"function Int3() {};\" +\n        \"/** @interface */function Int4() {};\" +\n        \"/** @type {Object} */\" +\n        \"Int4.prototype.foo;\" +\n        \"/** @type {Null} */\" +\n        \"Int4.prototype.bar;\" +\n        \"/** @interface \\n @extends {Int3} \\n @extends {Int4} */\" +\n        \"function Int5() {};\",\n        new String[] {\n            \"Interface Int5 has a property bar with incompatible types in its\" +\n            \" super interfaces Int1 and Int4\",\n            \"Interface Int5 has a property foo with incompatible types in its\" +\n            \" super interfaces Int0 and Int4\"});\n  }\n",
        "begin_line": 8774,
        "end_line": 8797,
        "comment": "",
        "child_ranges": [
            "(line 8775,col 5)-(line 8796,col 48)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypes(java.lang.String)",
        "snippet": "  private void testTypes(String js) throws Exception {\n    testTypes(js, (String) null);\n  }\n",
        "begin_line": 8799,
        "end_line": 8801,
        "comment": "",
        "child_ranges": [
            "(line 8800,col 5)-(line 8800,col 33)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypes(java.lang.String, java.lang.String)",
        "snippet": "  private void testTypes(String js, String description) throws Exception {\n    testTypes(js, description, false);\n  }\n",
        "begin_line": 8803,
        "end_line": 8805,
        "comment": "",
        "child_ranges": [
            "(line 8804,col 5)-(line 8804,col 38)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypes(java.lang.String, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  private void testTypes(String js, DiagnosticType type) throws Exception {\n    testTypes(js, type.format(), false);\n  }\n",
        "begin_line": 8807,
        "end_line": 8809,
        "comment": "",
        "child_ranges": [
            "(line 8808,col 5)-(line 8808,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testClosureTypes(java.lang.String, java.lang.String)",
        "snippet": "  private void testClosureTypes(String js, String description)\n      throws Exception {\n    testClosureTypesMultipleWarnings(js,\n        description == null ? null : Lists.newArrayList(description));\n  }\n",
        "begin_line": 8811,
        "end_line": 8815,
        "comment": "",
        "child_ranges": [
            "(line 8813,col 5)-(line 8814,col 70)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testClosureTypesMultipleWarnings(java.lang.String, java.util.List<java.lang.String>)",
        "snippet": "  private void testClosureTypesMultipleWarnings(\n      String js, List<String> descriptions) throws Exception {\n    Node n = compiler.parseTestCode(js);\n    Node externs = new Node(Token.BLOCK);\n    Node externAndJsRoot = new Node(Token.BLOCK, externs, n);\n    externAndJsRoot.setIsSyntheticBlock(true);\n\n    assertEquals(\"parsing error: \" +\n        Joiner.on(\", \").join(compiler.getErrors()),\n        0, compiler.getErrorCount());\n\n    // For processing goog.addDependency for forward typedefs.\n    new ProcessClosurePrimitives(compiler, CheckLevel.ERROR, true)\n        .process(null, n);\n\n    CodingConvention convention = compiler.getCodingConvention();\n    new TypeCheck(compiler,\n        new ClosureReverseAbstractInterpreter(\n            convention, registry).append(\n                new SemanticReverseAbstractInterpreter(\n                    convention, registry))\n            .getFirst(),\n        registry)\n        .processForTesting(null, n);\n\n    assertEquals(0, compiler.getErrorCount());\n\n    if (descriptions == null) {\n      assertEquals(\n          \"unexpected warning(s) : \" +\n          Joiner.on(\", \").join(compiler.getWarnings()),\n          0, compiler.getWarningCount());\n    } else {\n      assertEquals(\n          \"unexpected warning(s) : \" +\n          Joiner.on(\", \").join(compiler.getWarnings()),\n          descriptions.size(), compiler.getWarningCount());\n      for (int i = 0; i < descriptions.size(); i++) {\n        assertEquals(descriptions.get(i),\n            compiler.getWarnings()[i].description);\n      }\n    }\n  }\n",
        "begin_line": 8817,
        "end_line": 8859,
        "comment": "",
        "child_ranges": [
            "(line 8819,col 5)-(line 8819,col 40)",
            "(line 8820,col 5)-(line 8820,col 41)",
            "(line 8821,col 5)-(line 8821,col 61)",
            "(line 8822,col 5)-(line 8822,col 46)",
            "(line 8824,col 5)-(line 8826,col 37)",
            "(line 8829,col 5)-(line 8830,col 26)",
            "(line 8832,col 5)-(line 8832,col 65)",
            "(line 8833,col 5)-(line 8840,col 36)",
            "(line 8842,col 5)-(line 8842,col 46)",
            "(line 8844,col 5)-(line 8858,col 5)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypes(java.lang.String, java.lang.String, boolean)",
        "snippet": "  void testTypes(String js, String description, boolean isError)\n      throws Exception {\n    testTypes(DEFAULT_EXTERNS, js, description, isError);\n  }\n",
        "begin_line": 8861,
        "end_line": 8864,
        "comment": "",
        "child_ranges": [
            "(line 8863,col 5)-(line 8863,col 57)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypes(java.lang.String, java.lang.String, java.lang.String, boolean)",
        "snippet": "  void testTypes(String externs, String js, String description, boolean isError)\n      throws Exception {\n    Node n = parseAndTypeCheck(externs, js);\n\n    JSError[] errors = compiler.getErrors();\n    if (description != null && isError) {\n      assertTrue(\"expected an error\", errors.length > 0);\n      assertEquals(description, errors[0].description);\n      errors = Arrays.asList(errors).subList(1, errors.length).toArray(\n          new JSError[errors.length - 1]);\n    }\n    if (errors.length > 0) {\n      fail(\"unexpected error(s):\\n\" + Joiner.on(\"\\n\").join(errors));\n    }\n\n    JSError[] warnings = compiler.getWarnings();\n    if (description != null && !isError) {\n      assertTrue(\"expected a warning\", warnings.length > 0);\n      assertEquals(description, warnings[0].description);\n      warnings = Arrays.asList(warnings).subList(1, warnings.length).toArray(\n          new JSError[warnings.length - 1]);\n    }\n    if (warnings.length > 0) {\n      fail(\"unexpected warnings(s):\\n\" + Joiner.on(\"\\n\").join(warnings));\n    }\n  }\n",
        "begin_line": 8866,
        "end_line": 8891,
        "comment": "",
        "child_ranges": [
            "(line 8868,col 5)-(line 8868,col 44)",
            "(line 8870,col 5)-(line 8870,col 44)",
            "(line 8871,col 5)-(line 8876,col 5)",
            "(line 8877,col 5)-(line 8879,col 5)",
            "(line 8881,col 5)-(line 8881,col 48)",
            "(line 8882,col 5)-(line 8887,col 5)",
            "(line 8888,col 5)-(line 8890,col 5)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.parseAndTypeCheck(java.lang.String)",
        "snippet": "  private Node parseAndTypeCheck(String js) {\n    return parseAndTypeCheck(DEFAULT_EXTERNS, js);\n  }\n",
        "begin_line": 8896,
        "end_line": 8898,
        "comment": "\n   * Parses and type checks the JavaScript code.\n   ",
        "child_ranges": [
            "(line 8897,col 5)-(line 8897,col 50)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.parseAndTypeCheck(java.lang.String, java.lang.String)",
        "snippet": "  private Node parseAndTypeCheck(String externs, String js) {\n    return parseAndTypeCheckWithScope(externs, js).root;\n  }\n",
        "begin_line": 8900,
        "end_line": 8902,
        "comment": "",
        "child_ranges": [
            "(line 8901,col 5)-(line 8901,col 56)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.parseAndTypeCheckWithScope(java.lang.String)",
        "snippet": "  private TypeCheckResult parseAndTypeCheckWithScope(String js) {\n    return parseAndTypeCheckWithScope(DEFAULT_EXTERNS, js);\n  }\n",
        "begin_line": 8908,
        "end_line": 8910,
        "comment": "\n   * Parses and type checks the JavaScript code and returns the Scope used\n   * whilst type checking.\n   ",
        "child_ranges": [
            "(line 8909,col 5)-(line 8909,col 59)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.parseAndTypeCheckWithScope(java.lang.String, java.lang.String)",
        "snippet": "  private TypeCheckResult parseAndTypeCheckWithScope(\n      String externs, String js) {\n    compiler.init(\n        Lists.newArrayList(JSSourceFile.fromCode(\"[externs]\", externs)),\n        Lists.newArrayList(JSSourceFile.fromCode(\"[testcode]\", js)),\n        compiler.getOptions());\n\n    Node n = compiler.getInput(\"[testcode]\").getAstRoot(compiler);\n    Node externsNode = compiler.getInput(\"[externs]\").getAstRoot(compiler);\n    Node externAndJsRoot = new Node(Token.BLOCK, externsNode, n);\n    externAndJsRoot.setIsSyntheticBlock(true);\n\n    assertEquals(\"parsing error: \" +\n        Joiner.on(\", \").join(compiler.getErrors()),\n        0, compiler.getErrorCount());\n\n    Scope s = makeTypeCheck().processForTesting(externsNode, n);\n    return new TypeCheckResult(n, s);\n  }\n",
        "begin_line": 8912,
        "end_line": 8930,
        "comment": "",
        "child_ranges": [
            "(line 8914,col 5)-(line 8917,col 31)",
            "(line 8919,col 5)-(line 8919,col 66)",
            "(line 8920,col 5)-(line 8920,col 75)",
            "(line 8921,col 5)-(line 8921,col 65)",
            "(line 8922,col 5)-(line 8922,col 46)",
            "(line 8924,col 5)-(line 8926,col 37)",
            "(line 8928,col 5)-(line 8928,col 64)",
            "(line 8929,col 5)-(line 8929,col 37)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.typeCheck(com.google.javascript.rhino.Node)",
        "snippet": "  private Node typeCheck(Node n) {\n    Node externsNode = new Node(Token.BLOCK);\n    Node externAndJsRoot = new Node(Token.BLOCK, externsNode, n);\n    externAndJsRoot.setIsSyntheticBlock(true);\n\n    makeTypeCheck().processForTesting(null, n);\n    return n;\n  }\n",
        "begin_line": 8932,
        "end_line": 8939,
        "comment": "",
        "child_ranges": [
            "(line 8933,col 5)-(line 8933,col 45)",
            "(line 8934,col 5)-(line 8934,col 65)",
            "(line 8935,col 5)-(line 8935,col 46)",
            "(line 8937,col 5)-(line 8937,col 47)",
            "(line 8938,col 5)-(line 8938,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.makeTypeCheck()",
        "snippet": "  private TypeCheck makeTypeCheck() {\n    return new TypeCheck(\n        compiler,\n        new SemanticReverseAbstractInterpreter(\n            compiler.getCodingConvention(), registry),\n        registry,\n        reportMissingOverrides,\n        CheckLevel.OFF);\n  }\n",
        "begin_line": 8941,
        "end_line": 8949,
        "comment": "",
        "child_ranges": [
            "(line 8942,col 5)-(line 8948,col 24)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypes(java.lang.String, java.lang.String[])",
        "snippet": "  void testTypes(String js, String[] warnings) throws Exception {\n    Node n = compiler.parseTestCode(js);\n    assertEquals(0, compiler.getErrorCount());\n    Node externsNode = new Node(Token.BLOCK);\n    Node externAndJsRoot = new Node(Token.BLOCK, externsNode, n);\n\n    makeTypeCheck().processForTesting(null, n);\n    assertEquals(0, compiler.getErrorCount());\n    if (warnings != null) {\n      assertEquals(warnings.length, compiler.getWarningCount());\n      JSError[] messages = compiler.getWarnings();\n      for (int i = 0; i < warnings.length && i < compiler.getWarningCount();\n           i++) {\n        assertEquals(warnings[i], messages[i].description);\n      }\n    } else {\n      assertEquals(0, compiler.getWarningCount());\n    }\n  }\n",
        "begin_line": 8951,
        "end_line": 8969,
        "comment": "",
        "child_ranges": [
            "(line 8952,col 5)-(line 8952,col 40)",
            "(line 8953,col 5)-(line 8953,col 46)",
            "(line 8954,col 5)-(line 8954,col 45)",
            "(line 8955,col 5)-(line 8955,col 65)",
            "(line 8957,col 5)-(line 8957,col 47)",
            "(line 8958,col 5)-(line 8958,col 46)",
            "(line 8959,col 5)-(line 8968,col 5)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.suppressMissingProperty(java.lang.String...)",
        "snippet": "  String suppressMissingProperty(String ... props) {\n    String result = \"function dummy(x) { \";\n    for (String prop : props) {\n      result += \"x.\" + prop + \" = 3;\";\n    }\n    return result + \"}\";\n  }\n",
        "begin_line": 8971,
        "end_line": 8977,
        "comment": "",
        "child_ranges": [
            "(line 8972,col 5)-(line 8972,col 43)",
            "(line 8973,col 5)-(line 8975,col 5)",
            "(line 8976,col 5)-(line 8976,col 24)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.TypeCheckResult.TypeCheckResult(com.google.javascript.rhino.Node, com.google.javascript.jscomp.Scope)",
        "snippet": "    private TypeCheckResult(Node root, Scope scope) {\n      this.root = root;\n      this.scope = scope;\n    }\n",
        "begin_line": 8983,
        "end_line": 8986,
        "comment": "",
        "child_ranges": [
            "(line 8984,col 7)-(line 8984,col 23)",
            "(line 8985,col 7)-(line 8985,col 25)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTypeTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.LooseTypeCheckTest",
            "com.google.javascript.jscomp.TypeCheckTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTypeTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTypeTestCase.getOptions()",
        "snippet": "  protected CompilerOptions getOptions() {\n    CompilerOptions options = new CompilerOptions();\n    options.setLanguageIn(LanguageMode.ECMASCRIPT5);\n    options.setWarningLevel(\n        DiagnosticGroups.MISSING_PROPERTIES, CheckLevel.WARNING);\n    options.setCodingConvention(getCodingConvention());\n    return options;\n  }\n",
        "begin_line": 61,
        "end_line": 68,
        "comment": "",
        "child_ranges": [
            "(line 62,col 5)-(line 62,col 52)",
            "(line 63,col 5)-(line 63,col 52)",
            "(line 64,col 5)-(line 65,col 65)",
            "(line 66,col 5)-(line 66,col 55)",
            "(line 67,col 5)-(line 67,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTypeTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.LooseTypeCheckTest",
            "com.google.javascript.jscomp.TypeCheckTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTypeTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTypeTestCase.getCodingConvention()",
        "snippet": "  protected CodingConvention getCodingConvention() {\n    return new GoogleCodingConvention();\n  }\n",
        "begin_line": 70,
        "end_line": 72,
        "comment": "",
        "child_ranges": [
            "(line 71,col 5)-(line 71,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTypeTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.LooseTypeCheckTest",
            "com.google.javascript.jscomp.TypeCheckTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTypeTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTypeTestCase.setUp()",
        "snippet": "  @Override\n  protected void setUp() throws Exception {\n    compiler = new Compiler();\n    compiler.initOptions(getOptions());\n    registry = compiler.getTypeRegistry();\n    initTypes();\n  }\n",
        "begin_line": 74,
        "end_line": 80,
        "comment": "",
        "child_ranges": [
            "(line 76,col 5)-(line 76,col 30)",
            "(line 77,col 5)-(line 77,col 39)",
            "(line 78,col 5)-(line 78,col 42)",
            "(line 79,col 5)-(line 79,col 16)"
        ]
    }
]