[
    {
        "name": "Dfp.multiply#1496",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/dfp/Dfp.java",
        "class_name": "org.apache.commons.math3.dfp.Dfp",
        "signature": "org.apache.commons.math3.dfp.Dfp.multiply(org.apache.commons.math3.dfp.Dfp)",
        "snippet": "    public Dfp multiply(final Dfp x) {\n\n        // make sure we don't mix number with different precision\n        if (field.getRadixDigits() != x.field.getRadixDigits()) {\n            field.setIEEEFlagsBits(DfpField.FLAG_INVALID);\n            final Dfp result = newInstance(getZero());\n            result.nans = QNAN;\n            return dotrap(DfpField.FLAG_INVALID, MULTIPLY_TRAP, x, result);\n        }\n\n        Dfp result = newInstance(getZero());\n\n        /* handle special cases */\n        if (nans != FINITE || x.nans != FINITE) {\n            if (isNaN()) {\n                return this;\n            }\n\n            if (x.isNaN()) {\n                return x;\n            }\n\n            if (nans == INFINITE && x.nans == FINITE && x.mant[mant.length-1] != 0) {\n                result = newInstance(this);\n                result.sign = (byte) (sign * x.sign);\n                return result;\n            }\n\n            if (x.nans == INFINITE && nans == FINITE && mant[mant.length-1] != 0) {\n                result = newInstance(x);\n                result.sign = (byte) (sign * x.sign);\n                return result;\n            }\n\n            if (x.nans == INFINITE && nans == INFINITE) {\n                result = newInstance(this);\n                result.sign = (byte) (sign * x.sign);\n                return result;\n            }\n\n            if ( (x.nans == INFINITE && nans == FINITE && mant[mant.length-1] == 0) ||\n                    (nans == INFINITE && x.nans == FINITE && x.mant[mant.length-1] == 0) ) {\n                field.setIEEEFlagsBits(DfpField.FLAG_INVALID);\n                result = newInstance(getZero());\n                result.nans = QNAN;\n                result = dotrap(DfpField.FLAG_INVALID, MULTIPLY_TRAP, x, result);\n                return result;\n            }\n        }\n\n        int[] product = new int[mant.length*2];  // Big enough to hold even the largest result\n\n        for (int i = 0; i < mant.length; i++) {\n            int rh = 0;  // acts as a carry\n            for (int j=0; j<mant.length; j++) {\n                int r = mant[i] * x.mant[j];    // multiply the 2 digits\n                r = r + product[i+j] + rh;  // add to the product digit with carry in\n\n                rh = r / RADIX;\n                product[i+j] = r - rh * RADIX;\n            }\n            product[i+mant.length] = rh;\n        }\n\n        // Find the most sig digit\n        int md = mant.length * 2 - 1;  // default, in case result is zero\n        for (int i = mant.length * 2 - 1; i >= 0; i--) {\n            if (product[i] != 0) {\n                md = i;\n                break;\n            }\n        }\n\n        // Copy the digits into the result\n        for (int i = 0; i < mant.length; i++) {\n            result.mant[mant.length - i - 1] = product[md - i];\n        }\n\n        // Fixup the exponent.\n        result.exp = exp + x.exp + md - 2 * mant.length + 1;\n        result.sign = (byte)((sign == x.sign)?1:-1);\n\n        if (result.mant[mant.length-1] == 0) {\n            // if result is zero, set exp to zero\n            result.exp = 0;\n        }\n\n        final int excp;\n        if (md > (mant.length-1)) {\n            excp = result.round(product[md-mant.length]);\n        } else {\n            excp = result.round(0); // has no effect except to check status\n        }\n\n        if (excp != 0) {\n            result = dotrap(excp, MULTIPLY_TRAP, x, result);\n        }\n\n        return result;\n\n    }\n",
        "begin_line": 1496,
        "end_line": 1596,
        "comment": " Multiply this by x.\n     * @param x multiplicand\n     * @return product of this and x\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 1.0
        },
        "num_failing_tests": 1
    },
    {
        "name": "Dfp.multiplyFast#1611",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/dfp/Dfp.java",
        "class_name": "org.apache.commons.math3.dfp.Dfp",
        "signature": "org.apache.commons.math3.dfp.Dfp.multiplyFast(int)",
        "snippet": "    private Dfp multiplyFast(final int x) {\n        Dfp result = newInstance(this);\n\n        /* handle special cases */\n        if (nans != FINITE) {\n            if (isNaN()) {\n                return this;\n            }\n\n            if (nans == INFINITE && x != 0) {\n                result = newInstance(this);\n                return result;\n            }\n\n            if (nans == INFINITE && x == 0) {\n                field.setIEEEFlagsBits(DfpField.FLAG_INVALID);\n                result = newInstance(getZero());\n                result.nans = QNAN;\n                result = dotrap(DfpField.FLAG_INVALID, MULTIPLY_TRAP, newInstance(getZero()), result);\n                return result;\n            }\n        }\n\n        /* range check x */\n        if (x < 0 || x >= RADIX) {\n            field.setIEEEFlagsBits(DfpField.FLAG_INVALID);\n            result = newInstance(getZero());\n            result.nans = QNAN;\n            result = dotrap(DfpField.FLAG_INVALID, MULTIPLY_TRAP, result, result);\n            return result;\n        }\n\n        int rh = 0;\n        for (int i = 0; i < mant.length; i++) {\n            final int r = mant[i] * x + rh;\n            rh = r / RADIX;\n            result.mant[i] = r - rh * RADIX;\n        }\n\n        int lostdigit = 0;\n        if (rh != 0) {\n            lostdigit = result.mant[0];\n            result.shiftRight();\n            result.mant[mant.length-1] = rh;\n        }\n\n        if (result.mant[mant.length-1] == 0) { // if result is zero, set exp to zero\n            result.exp = 0;\n        }\n\n        final int excp = result.round(lostdigit);\n        if (excp != 0) {\n            result = dotrap(excp, MULTIPLY_TRAP, result, result);\n        }\n\n        return result;\n    }\n",
        "begin_line": 1611,
        "end_line": 1667,
        "comment": " Multiply this by a single digit 0&lt;=x&lt;radix.\n     * There are speed advantages in this special case.\n     * @param x multiplicand\n     * @return product of this and x\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 1.0
        },
        "num_failing_tests": 1
    },
    {
        "name": "Dfp.round#1417",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/dfp/Dfp.java",
        "class_name": "org.apache.commons.math3.dfp.Dfp",
        "signature": "org.apache.commons.math3.dfp.Dfp.round(int)",
        "snippet": "    protected int round(int n) {\n        boolean inc = false;\n        switch (field.getRoundingMode()) {\n            case ROUND_DOWN:\n                inc = false;\n                break;\n\n            case ROUND_UP:\n                inc = n != 0;       // round up if n!=0\n                break;\n\n            case ROUND_HALF_UP:\n                inc = n >= 5000;  // round half up\n                break;\n\n            case ROUND_HALF_DOWN:\n                inc = n > 5000;  // round half down\n                break;\n\n            case ROUND_HALF_EVEN:\n                inc = n > 5000 || (n == 5000 && (mant[0] & 1) == 1);  // round half-even\n                break;\n\n            case ROUND_HALF_ODD:\n                inc = n > 5000 || (n == 5000 && (mant[0] & 1) == 0);  // round half-odd\n                break;\n\n            case ROUND_CEIL:\n                inc = sign == 1 && n != 0;  // round ceil\n                break;\n\n            case ROUND_FLOOR:\n            default:\n                inc = sign == -1 && n != 0;  // round floor\n                break;\n        }\n\n        if (inc) {\n            // increment if necessary\n            int rh = 1;\n            for (int i = 0; i < mant.length; i++) {\n                final int r = mant[i] + rh;\n                rh = r / RADIX;\n                mant[i] = r - rh * RADIX;\n            }\n\n            if (rh != 0) {\n                shiftRight();\n                mant[mant.length-1] = rh;\n            }\n        }\n\n        // check for exceptional cases and raise signals if necessary\n        if (exp < MIN_EXP) {\n            // Gradual Underflow\n            field.setIEEEFlagsBits(DfpField.FLAG_UNDERFLOW);\n            return DfpField.FLAG_UNDERFLOW;\n        }\n\n        if (exp > MAX_EXP) {\n            // Overflow\n            field.setIEEEFlagsBits(DfpField.FLAG_OVERFLOW);\n            return DfpField.FLAG_OVERFLOW;\n        }\n\n        if (n != 0) {\n            // Inexact\n            field.setIEEEFlagsBits(DfpField.FLAG_INEXACT);\n            return DfpField.FLAG_INEXACT;\n        }\n\n        return 0;\n\n    }\n",
        "begin_line": 1417,
        "end_line": 1490,
        "comment": " Round this given the next digit n using the current rounding mode.\n     * @param n ???\n     * @return the IEEE flag if an exception occurred\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 1
    },
    {
        "name": "Dfp.dotrap#2232",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/dfp/Dfp.java",
        "class_name": "org.apache.commons.math3.dfp.Dfp",
        "signature": "org.apache.commons.math3.dfp.Dfp.dotrap(int, java.lang.String, org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp)",
        "snippet": "    public Dfp dotrap(int type, String what, Dfp oper, Dfp result) {\n        Dfp def = result;\n\n        switch (type) {\n            case DfpField.FLAG_INVALID:\n                def = newInstance(getZero());\n                def.sign = result.sign;\n                def.nans = QNAN;\n                break;\n\n            case DfpField.FLAG_DIV_ZERO:\n                if (nans == FINITE && mant[mant.length-1] != 0) {\n                    // normal case, we are finite, non-zero\n                    def = newInstance(getZero());\n                    def.sign = (byte)(sign*oper.sign);\n                    def.nans = INFINITE;\n                }\n\n                if (nans == FINITE && mant[mant.length-1] == 0) {\n                    //  0/0\n                    def = newInstance(getZero());\n                    def.nans = QNAN;\n                }\n\n                if (nans == INFINITE || nans == QNAN) {\n                    def = newInstance(getZero());\n                    def.nans = QNAN;\n                }\n\n                if (nans == INFINITE || nans == SNAN) {\n                    def = newInstance(getZero());\n                    def.nans = QNAN;\n                }\n                break;\n\n            case DfpField.FLAG_UNDERFLOW:\n                if ( (result.exp+mant.length) < MIN_EXP) {\n                    def = newInstance(getZero());\n                    def.sign = result.sign;\n                } else {\n                    def = newInstance(result);  // gradual underflow\n                }\n                result.exp = result.exp + ERR_SCALE;\n                break;\n\n            case DfpField.FLAG_OVERFLOW:\n                result.exp = result.exp - ERR_SCALE;\n                def = newInstance(getZero());\n                def.sign = result.sign;\n                def.nans = INFINITE;\n                break;\n\n            default: def = result; break;\n        }\n\n        return trap(type, what, oper, def, result);\n\n    }\n",
        "begin_line": 2232,
        "end_line": 2289,
        "comment": " Raises a trap.  This does not set the corresponding flag however.\n     *  @param type the trap type\n     *  @param what - name of routine trap occurred in\n     *  @param oper - input operator to function\n     *  @param result - the result computed prior to the trap\n     *  @return The suggested return value from the trap handler\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4472
        },
        "num_failing_tests": 1
    },
    {
        "name": "Dfp.Dfp#334",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/dfp/Dfp.java",
        "class_name": "org.apache.commons.math3.dfp.Dfp",
        "signature": "org.apache.commons.math3.dfp.Dfp.Dfp(org.apache.commons.math3.dfp.DfpField, java.lang.String)",
        "snippet": "    protected Dfp(final DfpField field, final String s) {\n\n        // initialize as if 0\n        mant = new int[field.getRadixDigits()];\n        sign = 1;\n        exp = 0;\n        nans = FINITE;\n        this.field = field;\n\n        boolean decimalFound = false;\n        final int rsize = 4;   // size of radix in decimal digits\n        final int offset = 4;  // Starting offset into Striped\n        final char[] striped = new char[getRadixDigits() * rsize + offset * 2];\n\n        // Check some special cases\n        if (s.equals(POS_INFINITY_STRING)) {\n            sign = (byte) 1;\n            nans = INFINITE;\n            return;\n        }\n\n        if (s.equals(NEG_INFINITY_STRING)) {\n            sign = (byte) -1;\n            nans = INFINITE;\n            return;\n        }\n\n        if (s.equals(NAN_STRING)) {\n            sign = (byte) 1;\n            nans = QNAN;\n            return;\n        }\n\n        // Check for scientific notation\n        int p = s.indexOf(\"e\");\n        if (p == -1) { // try upper case?\n            p = s.indexOf(\"E\");\n        }\n\n        final String fpdecimal;\n        int sciexp = 0;\n        if (p != -1) {\n            // scientific notation\n            fpdecimal = s.substring(0, p);\n            String fpexp = s.substring(p+1);\n            boolean negative = false;\n\n            for (int i=0; i<fpexp.length(); i++)\n            {\n                if (fpexp.charAt(i) == '-')\n                {\n                    negative = true;\n                    continue;\n                }\n                if (fpexp.charAt(i) >= '0' && fpexp.charAt(i) <= '9') {\n                    sciexp = sciexp * 10 + fpexp.charAt(i) - '0';\n                }\n            }\n\n            if (negative) {\n                sciexp = -sciexp;\n            }\n        } else {\n            // normal case\n            fpdecimal = s;\n        }\n\n        // If there is a minus sign in the number then it is negative\n        if (fpdecimal.indexOf(\"-\") !=  -1) {\n            sign = -1;\n        }\n\n        // First off, find all of the leading zeros, trailing zeros, and significant digits\n        p = 0;\n\n        // Move p to first significant digit\n        int decimalPos = 0;\n        for (;;) {\n            if (fpdecimal.charAt(p) >= '1' && fpdecimal.charAt(p) <= '9') {\n                break;\n            }\n\n            if (decimalFound && fpdecimal.charAt(p) == '0') {\n                decimalPos--;\n            }\n\n            if (fpdecimal.charAt(p) == '.') {\n                decimalFound = true;\n            }\n\n            p++;\n\n            if (p == fpdecimal.length()) {\n                break;\n            }\n        }\n\n        // Copy the string onto Stripped\n        int q = offset;\n        striped[0] = '0';\n        striped[1] = '0';\n        striped[2] = '0';\n        striped[3] = '0';\n        int significantDigits=0;\n        for(;;) {\n            if (p == (fpdecimal.length())) {\n                break;\n            }\n\n            // Don't want to run pass the end of the array\n            if (q == mant.length*rsize+offset+1) {\n                break;\n            }\n\n            if (fpdecimal.charAt(p) == '.') {\n                decimalFound = true;\n                decimalPos = significantDigits;\n                p++;\n                continue;\n            }\n\n            if (fpdecimal.charAt(p) < '0' || fpdecimal.charAt(p) > '9') {\n                p++;\n                continue;\n            }\n\n            striped[q] = fpdecimal.charAt(p);\n            q++;\n            p++;\n            significantDigits++;\n        }\n\n\n        // If the decimal point has been found then get rid of trailing zeros.\n        if (decimalFound && q != offset) {\n            for (;;) {\n                q--;\n                if (q == offset) {\n                    break;\n                }\n                if (striped[q] == '0') {\n                    significantDigits--;\n                } else {\n                    break;\n                }\n            }\n        }\n\n        // special case of numbers like \"0.00000\"\n        if (decimalFound && significantDigits == 0) {\n            decimalPos = 0;\n        }\n\n        // Implicit decimal point at end of number if not present\n        if (!decimalFound) {\n            decimalPos = q-offset;\n        }\n\n        // Find the number of significant trailing zeros\n        q = offset;  // set q to point to first sig digit\n        p = significantDigits-1+offset;\n\n        while (p > q) {\n            if (striped[p] != '0') {\n                break;\n            }\n            p--;\n        }\n\n        // Make sure the decimal is on a mod 10000 boundary\n        int i = ((rsize * 100) - decimalPos - sciexp % rsize) % rsize;\n        q -= i;\n        decimalPos += i;\n\n        // Make the mantissa length right by adding zeros at the end if necessary\n        while ((p - q) < (mant.length * rsize)) {\n            for (i = 0; i < rsize; i++) {\n                striped[++p] = '0';\n            }\n        }\n\n        // Ok, now we know how many trailing zeros there are,\n        // and where the least significant digit is\n        for (i = mant.length - 1; i >= 0; i--) {\n            mant[i] = (striped[q]   - '0') * 1000 +\n                      (striped[q+1] - '0') * 100  +\n                      (striped[q+2] - '0') * 10   +\n                      (striped[q+3] - '0');\n            q += 4;\n        }\n\n\n        exp = (decimalPos+sciexp) / rsize;\n\n        if (q < striped.length) {\n            // Is there possible another digit?\n            round((striped[q] - '0')*1000);\n        }\n\n    }\n",
        "begin_line": 334,
        "end_line": 533,
        "comment": " Create an instance from a String representation.\n     * @param field field to which this instance belongs\n     * @param s string representation of the instance\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3536
        },
        "num_failing_tests": 1
    },
    {
        "name": "Dfp.equals#901",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/dfp/Dfp.java",
        "class_name": "org.apache.commons.math3.dfp.Dfp",
        "signature": "org.apache.commons.math3.dfp.Dfp.equals(java.lang.Object)",
        "snippet": "    @Override\n    public boolean equals(final Object other) {\n\n        if (other instanceof Dfp) {\n            final Dfp x = (Dfp) other;\n            if (isNaN() || x.isNaN() || field.getRadixDigits() != x.field.getRadixDigits()) {\n                return false;\n            }\n\n            return compare(this, x) == 0;\n        }\n\n        return false;\n\n    }\n",
        "begin_line": 901,
        "end_line": 915,
        "comment": " Check if instance is equal to x.\n     * @param other object to check instance against\n     * @return true if instance is equal to x and neither are NaN, false otherwise\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3333
        },
        "num_failing_tests": 1
    },
    {
        "name": "Dfp.unequal#930",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/dfp/Dfp.java",
        "class_name": "org.apache.commons.math3.dfp.Dfp",
        "signature": "org.apache.commons.math3.dfp.Dfp.unequal(org.apache.commons.math3.dfp.Dfp)",
        "snippet": "    public boolean unequal(final Dfp x) {\n        if (isNaN() || x.isNaN() || field.getRadixDigits() != x.field.getRadixDigits()) {\n            return false;\n        }\n\n        return greaterThan(x) || lessThan(x);\n    }\n",
        "begin_line": 930,
        "end_line": 936,
        "comment": " Check if instance is not equal to x.\n     * @param x number to check instance against\n     * @return true if instance is not equal to x and neither are NaN, false otherwise\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3333
        },
        "num_failing_tests": 1
    },
    {
        "name": "Dfp.toString#2052",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/dfp/Dfp.java",
        "class_name": "org.apache.commons.math3.dfp.Dfp",
        "signature": "org.apache.commons.math3.dfp.Dfp.toString()",
        "snippet": "    @Override\n    public String toString() {\n        if (nans != FINITE) {\n            // if non-finite exceptional cases\n            if (nans == INFINITE) {\n                return (sign < 0) ? NEG_INFINITY_STRING : POS_INFINITY_STRING;\n            } else {\n                return NAN_STRING;\n            }\n        }\n\n        if (exp > mant.length || exp < -1) {\n            return dfp2sci();\n        }\n\n        return dfp2string();\n\n    }\n",
        "begin_line": 2052,
        "end_line": 2069,
        "comment": " Get a string representation of the instance.\n     * @return string representation of the instance\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3333
        },
        "num_failing_tests": 1
    },
    {
        "name": "Dfp.compare#944",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/dfp/Dfp.java",
        "class_name": "org.apache.commons.math3.dfp.Dfp",
        "signature": "org.apache.commons.math3.dfp.Dfp.compare(org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp)",
        "snippet": "    private static int compare(final Dfp a, final Dfp b) {\n        // Ignore the sign of zero\n        if (a.mant[a.mant.length - 1] == 0 && b.mant[b.mant.length - 1] == 0 &&\n            a.nans == FINITE && b.nans == FINITE) {\n            return 0;\n        }\n\n        if (a.sign != b.sign) {\n            if (a.sign == -1) {\n                return -1;\n            } else {\n                return 1;\n            }\n        }\n\n        // deal with the infinities\n        if (a.nans == INFINITE && b.nans == FINITE) {\n            return a.sign;\n        }\n\n        if (a.nans == FINITE && b.nans == INFINITE) {\n            return -b.sign;\n        }\n\n        if (a.nans == INFINITE && b.nans == INFINITE) {\n            return 0;\n        }\n\n        // Handle special case when a or b is zero, by ignoring the exponents\n        if (b.mant[b.mant.length-1] != 0 && a.mant[b.mant.length-1] != 0) {\n            if (a.exp < b.exp) {\n                return -a.sign;\n            }\n\n            if (a.exp > b.exp) {\n                return a.sign;\n            }\n        }\n\n        // compare the mantissas\n        for (int i = a.mant.length - 1; i >= 0; i--) {\n            if (a.mant[i] > b.mant[i]) {\n                return a.sign;\n            }\n\n            if (a.mant[i] < b.mant[i]) {\n                return -a.sign;\n            }\n        }\n\n        return 0;\n\n    }\n",
        "begin_line": 944,
        "end_line": 996,
        "comment": " Compare two instances.\n     * @param a first instance in comparison\n     * @param b second instance in comparison\n     * @return -1 if a<b, 1 if a>b and 0 if a==b\n     *  Note this method does not properly handle NaNs or numbers with different precision.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3162
        },
        "num_failing_tests": 1
    },
    {
        "name": "Dfp.dfp2string#2155",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/dfp/Dfp.java",
        "class_name": "org.apache.commons.math3.dfp.Dfp",
        "signature": "org.apache.commons.math3.dfp.Dfp.dfp2string()",
        "snippet": "    protected String dfp2string() {\n        char buffer[] = new char[mant.length*4 + 20];\n        int p = 1;\n        int q;\n        int e = exp;\n        boolean pointInserted = false;\n\n        buffer[0] = ' ';\n\n        if (e <= 0) {\n            buffer[p++] = '0';\n            buffer[p++] = '.';\n            pointInserted = true;\n        }\n\n        while (e < 0) {\n            buffer[p++] = '0';\n            buffer[p++] = '0';\n            buffer[p++] = '0';\n            buffer[p++] = '0';\n            e++;\n        }\n\n        for (int i = mant.length - 1; i >= 0; i--) {\n            buffer[p++] = (char) ((mant[i] / 1000) + '0');\n            buffer[p++] = (char) (((mant[i] / 100) % 10) + '0');\n            buffer[p++] = (char) (((mant[i] / 10) % 10) + '0');\n            buffer[p++] = (char) (((mant[i]) % 10) + '0');\n            if (--e == 0) {\n                buffer[p++] = '.';\n                pointInserted = true;\n            }\n        }\n\n        while (e > 0) {\n            buffer[p++] = '0';\n            buffer[p++] = '0';\n            buffer[p++] = '0';\n            buffer[p++] = '0';\n            e--;\n        }\n\n        if (!pointInserted) {\n            // Ensure we have a radix point!\n            buffer[p++] = '.';\n        }\n\n        // Suppress leading zeros\n        q = 1;\n        while (buffer[q] == '0') {\n            q++;\n        }\n        if (buffer[q] == '.') {\n            q--;\n        }\n\n        // Suppress trailing zeros\n        while (buffer[p-1] == '0') {\n            p--;\n        }\n\n        // Insert sign\n        if (sign < 0) {\n            buffer[--q] = '-';\n        }\n\n        return new String(buffer, q, p - q);\n\n    }\n",
        "begin_line": 2155,
        "end_line": 2223,
        "comment": " Convert an instance to a string using normal notation.\n     * @return string representation of the instance in normal notation\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2773
        },
        "num_failing_tests": 1
    },
    {
        "name": "DfpField.getIEEEFlags#283",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/dfp/DfpField.java",
        "class_name": "org.apache.commons.math3.dfp.DfpField",
        "signature": "org.apache.commons.math3.dfp.DfpField.getIEEEFlags()",
        "snippet": "    public int getIEEEFlags() {\n        return ieeeFlags;\n    }\n",
        "begin_line": 283,
        "end_line": 285,
        "comment": " Get the IEEE 854 status flags.\n     * @return IEEE 854 status flags\n     * @see #clearIEEEFlags()\n     * @see #setIEEEFlags(int)\n     * @see #setIEEEFlagsBits(int)\n     * @see #FLAG_INVALID\n     * @see #FLAG_DIV_ZERO\n     * @see #FLAG_OVERFLOW\n     * @see #FLAG_UNDERFLOW\n     * @see #FLAG_INEXACT\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2182
        },
        "num_failing_tests": 1
    },
    {
        "name": "Dfp.multiply#1602",
        "is_bug": true,
        "src_path": "src/main/java/org/apache/commons/math3/dfp/Dfp.java",
        "class_name": "org.apache.commons.math3.dfp.Dfp",
        "signature": "org.apache.commons.math3.dfp.Dfp.multiply(int)",
        "snippet": "    public Dfp multiply(final int x) {\n            return multiplyFast(x);\n    }\n",
        "begin_line": 1602,
        "end_line": 1604,
        "comment": " Multiply this by a single digit x.\n     * @param x multiplicand\n     * @return product of this and x\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1924
        },
        "num_failing_tests": 1
    },
    {
        "name": "DfpField.newDfp#385",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/dfp/DfpField.java",
        "class_name": "org.apache.commons.math3.dfp.DfpField",
        "signature": "org.apache.commons.math3.dfp.DfpField.newDfp(java.lang.String)",
        "snippet": "    public Dfp newDfp(final String s) {\n        return new Dfp(this, s);\n    }\n",
        "begin_line": 385,
        "end_line": 387,
        "comment": " Create a {@link Dfp} given a String representation.\n     * @param s string representation of the instance\n     * @return a new {@link Dfp} parsed from specified string\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1857
        },
        "num_failing_tests": 1
    },
    {
        "name": "DfpField.newDfp#395",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/dfp/DfpField.java",
        "class_name": "org.apache.commons.math3.dfp.DfpField",
        "signature": "org.apache.commons.math3.dfp.DfpField.newDfp(byte, byte)",
        "snippet": "    public Dfp newDfp(final byte sign, final byte nans) {\n        return new Dfp(this, sign, nans);\n    }\n",
        "begin_line": 395,
        "end_line": 397,
        "comment": " Creates a {@link Dfp} with a non-finite value.\n     * @param sign sign of the Dfp to create\n     * @param nans code of the value, must be one of {@link Dfp#INFINITE},\n     * {@link Dfp#SNAN},  {@link Dfp#QNAN}\n     * @return a new {@link Dfp} with a non-finite value\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1826
        },
        "num_failing_tests": 1
    },
    {
        "name": "Dfp.Dfp#541",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/dfp/Dfp.java",
        "class_name": "org.apache.commons.math3.dfp.Dfp",
        "signature": "org.apache.commons.math3.dfp.Dfp.Dfp(org.apache.commons.math3.dfp.DfpField, byte, byte)",
        "snippet": "    protected Dfp(final DfpField field, final byte sign, final byte nans) {\n        this.field = field;\n        this.mant    = new int[field.getRadixDigits()];\n        this.sign    = sign;\n        this.exp     = 0;\n        this.nans    = nans;\n    }\n",
        "begin_line": 541,
        "end_line": 547,
        "comment": " Creates an instance with a non-finite value.\n     * @param field field to which this instance belongs\n     * @param sign sign of the Dfp to create\n     * @param nans code of the value, must be one of {@link #INFINITE},\n     * {@link #SNAN},  {@link #QNAN}\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1826
        },
        "num_failing_tests": 1
    },
    {
        "name": "DfpField.clearIEEEFlags#297",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/dfp/DfpField.java",
        "class_name": "org.apache.commons.math3.dfp.DfpField",
        "signature": "org.apache.commons.math3.dfp.DfpField.clearIEEEFlags()",
        "snippet": "    public void clearIEEEFlags() {\n        ieeeFlags = 0;\n    }\n",
        "begin_line": 297,
        "end_line": 299,
        "comment": " Clears the IEEE 854 status flags.\n     * @see #getIEEEFlags()\n     * @see #setIEEEFlags(int)\n     * @see #setIEEEFlagsBits(int)\n     * @see #FLAG_INVALID\n     * @see #FLAG_DIV_ZERO\n     * @see #FLAG_OVERFLOW\n     * @see #FLAG_UNDERFLOW\n     * @see #FLAG_INEXACT\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1796
        },
        "num_failing_tests": 1
    },
    {
        "name": "Dfp.divide#1673",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/dfp/Dfp.java",
        "class_name": "org.apache.commons.math3.dfp.Dfp",
        "signature": "org.apache.commons.math3.dfp.Dfp.divide(org.apache.commons.math3.dfp.Dfp)",
        "snippet": "    public Dfp divide(Dfp divisor) {\n        int dividend[]; // current status of the dividend\n        int quotient[]; // quotient\n        int remainder[];// remainder\n        int qd;         // current quotient digit we're working with\n        int nsqd;       // number of significant quotient digits we have\n        int trial=0;    // trial quotient digit\n        int minadj;     // minimum adjustment\n        boolean trialgood; // Flag to indicate a good trail digit\n        int md=0;       // most sig digit in result\n        int excp;       // exceptions\n\n        // make sure we don't mix number with different precision\n        if (field.getRadixDigits() != divisor.field.getRadixDigits()) {\n            field.setIEEEFlagsBits(DfpField.FLAG_INVALID);\n            final Dfp result = newInstance(getZero());\n            result.nans = QNAN;\n            return dotrap(DfpField.FLAG_INVALID, DIVIDE_TRAP, divisor, result);\n        }\n\n        Dfp result = newInstance(getZero());\n\n        /* handle special cases */\n        if (nans != FINITE || divisor.nans != FINITE) {\n            if (isNaN()) {\n                return this;\n            }\n\n            if (divisor.isNaN()) {\n                return divisor;\n            }\n\n            if (nans == INFINITE && divisor.nans == FINITE) {\n                result = newInstance(this);\n                result.sign = (byte) (sign * divisor.sign);\n                return result;\n            }\n\n            if (divisor.nans == INFINITE && nans == FINITE) {\n                result = newInstance(getZero());\n                result.sign = (byte) (sign * divisor.sign);\n                return result;\n            }\n\n            if (divisor.nans == INFINITE && nans == INFINITE) {\n                field.setIEEEFlagsBits(DfpField.FLAG_INVALID);\n                result = newInstance(getZero());\n                result.nans = QNAN;\n                result = dotrap(DfpField.FLAG_INVALID, DIVIDE_TRAP, divisor, result);\n                return result;\n            }\n        }\n\n        /* Test for divide by zero */\n        if (divisor.mant[mant.length-1] == 0) {\n            field.setIEEEFlagsBits(DfpField.FLAG_DIV_ZERO);\n            result = newInstance(getZero());\n            result.sign = (byte) (sign * divisor.sign);\n            result.nans = INFINITE;\n            result = dotrap(DfpField.FLAG_DIV_ZERO, DIVIDE_TRAP, divisor, result);\n            return result;\n        }\n\n        dividend = new int[mant.length+1];  // one extra digit needed\n        quotient = new int[mant.length+2];  // two extra digits needed 1 for overflow, 1 for rounding\n        remainder = new int[mant.length+1]; // one extra digit needed\n\n        /* Initialize our most significant digits to zero */\n\n        dividend[mant.length] = 0;\n        quotient[mant.length] = 0;\n        quotient[mant.length+1] = 0;\n        remainder[mant.length] = 0;\n\n        /* copy our mantissa into the dividend, initialize the\n       quotient while we are at it */\n\n        for (int i = 0; i < mant.length; i++) {\n            dividend[i] = mant[i];\n            quotient[i] = 0;\n            remainder[i] = 0;\n        }\n\n        /* outer loop.  Once per quotient digit */\n        nsqd = 0;\n        for (qd = mant.length+1; qd >= 0; qd--) {\n            /* Determine outer limits of our quotient digit */\n\n            // r =  most sig 2 digits of dividend\n            final int divMsb = dividend[mant.length]*RADIX+dividend[mant.length-1];\n            int min = divMsb       / (divisor.mant[mant.length-1]+1);\n            int max = (divMsb + 1) / divisor.mant[mant.length-1];\n\n            trialgood = false;\n            while (!trialgood) {\n                // try the mean\n                trial = (min+max)/2;\n\n                /* Multiply by divisor and store as remainder */\n                int rh = 0;\n                for (int i = 0; i < mant.length + 1; i++) {\n                    int dm = (i<mant.length)?divisor.mant[i]:0;\n                    final int r = (dm * trial) + rh;\n                    rh = r / RADIX;\n                    remainder[i] = r - rh * RADIX;\n                }\n\n                /* subtract the remainder from the dividend */\n                rh = 1;  // carry in to aid the subtraction\n                for (int i = 0; i < mant.length + 1; i++) {\n                    final int r = ((RADIX-1) - remainder[i]) + dividend[i] + rh;\n                    rh = r / RADIX;\n                    remainder[i] = r - rh * RADIX;\n                }\n\n                /* Lets analyze what we have here */\n                if (rh == 0) {\n                    // trial is too big -- negative remainder\n                    max = trial-1;\n                    continue;\n                }\n\n                /* find out how far off the remainder is telling us we are */\n                minadj = (remainder[mant.length] * RADIX)+remainder[mant.length-1];\n                minadj = minadj / (divisor.mant[mant.length-1]+1);\n\n                if (minadj >= 2) {\n                    min = trial+minadj;  // update the minimum\n                    continue;\n                }\n\n                /* May have a good one here, check more thoroughly.  Basically\n           its a good one if it is less than the divisor */\n                trialgood = false;  // assume false\n                for (int i = mant.length - 1; i >= 0; i--) {\n                    if (divisor.mant[i] > remainder[i]) {\n                        trialgood = true;\n                    }\n                    if (divisor.mant[i] < remainder[i]) {\n                        break;\n                    }\n                }\n\n                if (remainder[mant.length] != 0) {\n                    trialgood = false;\n                }\n\n                if (trialgood == false) {\n                    min = trial+1;\n                }\n            }\n\n            /* Great we have a digit! */\n            quotient[qd] = trial;\n            if (trial != 0 || nsqd != 0) {\n                nsqd++;\n            }\n\n            if (field.getRoundingMode() == DfpField.RoundingMode.ROUND_DOWN && nsqd == mant.length) {\n                // We have enough for this mode\n                break;\n            }\n\n            if (nsqd > mant.length) {\n                // We have enough digits\n                break;\n            }\n\n            /* move the remainder into the dividend while left shifting */\n            dividend[0] = 0;\n            for (int i = 0; i < mant.length; i++) {\n                dividend[i + 1] = remainder[i];\n            }\n        }\n\n        /* Find the most sig digit */\n        md = mant.length;  // default\n        for (int i = mant.length + 1; i >= 0; i--) {\n            if (quotient[i] != 0) {\n                md = i;\n                break;\n            }\n        }\n\n        /* Copy the digits into the result */\n        for (int i=0; i<mant.length; i++) {\n            result.mant[mant.length-i-1] = quotient[md-i];\n        }\n\n        /* Fixup the exponent. */\n        result.exp = exp - divisor.exp + md - mant.length;\n        result.sign = (byte) ((sign == divisor.sign) ? 1 : -1);\n\n        if (result.mant[mant.length-1] == 0) { // if result is zero, set exp to zero\n            result.exp = 0;\n        }\n\n        if (md > (mant.length-1)) {\n            excp = result.round(quotient[md-mant.length]);\n        } else {\n            excp = result.round(0);\n        }\n\n        if (excp != 0) {\n            result = dotrap(excp, DIVIDE_TRAP, divisor, result);\n        }\n\n        return result;\n    }\n",
        "begin_line": 1673,
        "end_line": 1881,
        "comment": " Divide this by divisor.\n     * @param divisor divisor\n     * @return quotient of this by divisor\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1796
        },
        "num_failing_tests": 1
    },
    {
        "name": "DfpField.DfpField#176",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/dfp/DfpField.java",
        "class_name": "org.apache.commons.math3.dfp.DfpField",
        "signature": "org.apache.commons.math3.dfp.DfpField.DfpField(int)",
        "snippet": "    public DfpField(final int decimalDigits) {\n        this(decimalDigits, true);\n    }\n",
        "begin_line": 176,
        "end_line": 178,
        "comment": " Create a factory for the specified number of radix digits.\n     * <p>\n     * Note that since the {@link Dfp} class uses 10000 as its radix, each radix\n     * digit is equivalent to 4 decimal digits. This implies that asking for\n     * 13, 14, 15 or 16 decimal digits will really lead to a 4 radix 10000 digits in\n     * all cases.\n     * </p>\n     * @param decimalDigits minimal number of decimal digits.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1111
        },
        "num_failing_tests": 1
    },
    {
        "name": "DfpField.DfpField#191",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/dfp/DfpField.java",
        "class_name": "org.apache.commons.math3.dfp.DfpField",
        "signature": "org.apache.commons.math3.dfp.DfpField.DfpField(int, boolean)",
        "snippet": "    private DfpField(final int decimalDigits, final boolean computeConstants) {\n\n        this.radixDigits = (decimalDigits < 13) ? 4 : (decimalDigits + 3) / 4;\n        this.rMode       = RoundingMode.ROUND_HALF_EVEN;\n        this.ieeeFlags   = 0;\n        this.zero        = new Dfp(this, 0);\n        this.one         = new Dfp(this, 1);\n        this.two         = new Dfp(this, 2);\n\n        if (computeConstants) {\n            // set up transcendental constants\n            synchronized (DfpField.class) {\n\n                // as a heuristic to circumvent Table-Maker's Dilemma, we set the string\n                // representation of the constants to be at least 3 times larger than the\n                // number of decimal digits, also as an attempt to really compute these\n                // constants only once, we set a minimum number of digits\n                computeStringConstants((decimalDigits < 67) ? 200 : (3 * decimalDigits));\n\n                // set up the constants at current field accuracy\n                sqr2           = new Dfp(this, sqr2String);\n                sqr2Split      = split(sqr2String);\n                sqr2Reciprocal = new Dfp(this, sqr2ReciprocalString);\n                sqr3           = new Dfp(this, sqr3String);\n                sqr3Reciprocal = new Dfp(this, sqr3ReciprocalString);\n                pi             = new Dfp(this, piString);\n                piSplit        = split(piString);\n                e              = new Dfp(this, eString);\n                eSplit         = split(eString);\n                ln2            = new Dfp(this, ln2String);\n                ln2Split       = split(ln2String);\n                ln5            = new Dfp(this, ln5String);\n                ln5Split       = split(ln5String);\n                ln10           = new Dfp(this, ln10String);\n\n            }\n        } else {\n            // dummy settings for unused constants\n            sqr2           = null;\n            sqr2Split      = null;\n            sqr2Reciprocal = null;\n            sqr3           = null;\n            sqr3Reciprocal = null;\n            pi             = null;\n            piSplit        = null;\n            e              = null;\n            eSplit         = null;\n            ln2            = null;\n            ln2Split       = null;\n            ln5            = null;\n            ln5Split       = null;\n            ln10           = null;\n        }\n\n    }\n",
        "begin_line": 191,
        "end_line": 245,
        "comment": " Create a factory for the specified number of radix digits.\n     * <p>\n     * Note that since the {@link Dfp} class uses 10000 as its radix, each radix\n     * digit is equivalent to 4 decimal digits. This implies that asking for\n     * 13, 14, 15 or 16 decimal digits will really lead to a 4 radix 10000 digits in\n     * all cases.\n     * </p>\n     * @param decimalDigits minimal number of decimal digits\n     * @param computeConstants if true, the transcendental constants for the given precision\n     * must be computed (setting this flag to false is RESERVED for the internal recursive call)\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1111
        },
        "num_failing_tests": 1
    },
    {
        "name": "DfpField.getRadixDigits#250",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/dfp/DfpField.java",
        "class_name": "org.apache.commons.math3.dfp.DfpField",
        "signature": "org.apache.commons.math3.dfp.DfpField.getRadixDigits()",
        "snippet": "    public int getRadixDigits() {\n        return radixDigits;\n    }\n",
        "begin_line": 250,
        "end_line": 252,
        "comment": " Get the number of radix digits of the {@link Dfp} instances built by this factory.\n     * @return number of radix digits\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1111
        },
        "num_failing_tests": 1
    },
    {
        "name": "DfpField.getRoundingMode#268",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/dfp/DfpField.java",
        "class_name": "org.apache.commons.math3.dfp.DfpField",
        "signature": "org.apache.commons.math3.dfp.DfpField.getRoundingMode()",
        "snippet": "    public RoundingMode getRoundingMode() {\n        return rMode;\n    }\n",
        "begin_line": 268,
        "end_line": 270,
        "comment": " Get the current rounding mode.\n     * @return current rounding mode\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1111
        },
        "num_failing_tests": 1
    },
    {
        "name": "DfpField.setIEEEFlagsBits#330",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/dfp/DfpField.java",
        "class_name": "org.apache.commons.math3.dfp.DfpField",
        "signature": "org.apache.commons.math3.dfp.DfpField.setIEEEFlagsBits(int)",
        "snippet": "    public void setIEEEFlagsBits(final int bits) {\n        ieeeFlags |= bits & (FLAG_INVALID | FLAG_DIV_ZERO | FLAG_OVERFLOW | FLAG_UNDERFLOW | FLAG_INEXACT);\n    }\n",
        "begin_line": 330,
        "end_line": 332,
        "comment": " Sets some bits in the IEEE 854 status flags, without changing the already set bits.\n     * <p>\n     * Calling this method is equivalent to call {@code setIEEEFlags(getIEEEFlags() | bits)}\n     * </p>\n     * @param bits bits to set\n     * @see #getIEEEFlags()\n     * @see #clearIEEEFlags()\n     * @see #setIEEEFlags(int)\n     * @see #FLAG_INVALID\n     * @see #FLAG_DIV_ZERO\n     * @see #FLAG_OVERFLOW\n     * @see #FLAG_UNDERFLOW\n     * @see #FLAG_INEXACT\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1111
        },
        "num_failing_tests": 1
    },
    {
        "name": "DfpField.getZero#402",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/dfp/DfpField.java",
        "class_name": "org.apache.commons.math3.dfp.DfpField",
        "signature": "org.apache.commons.math3.dfp.DfpField.getZero()",
        "snippet": "    public Dfp getZero() {\n        return zero;\n    }\n",
        "begin_line": 402,
        "end_line": 404,
        "comment": " Get the constant 0.\n     * @return a {@link Dfp} with value 0\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1111
        },
        "num_failing_tests": 1
    },
    {
        "name": "DfpField.split#529",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/dfp/DfpField.java",
        "class_name": "org.apache.commons.math3.dfp.DfpField",
        "signature": "org.apache.commons.math3.dfp.DfpField.split(java.lang.String)",
        "snippet": "    private Dfp[] split(final String a) {\n      Dfp result[] = new Dfp[2];\n      boolean leading = true;\n      int sp = 0;\n      int sig = 0;\n\n      char[] buf = new char[a.length()];\n\n      for (int i = 0; i < buf.length; i++) {\n        buf[i] = a.charAt(i);\n\n        if (buf[i] >= '1' && buf[i] <= '9') {\n            leading = false;\n        }\n\n        if (buf[i] == '.') {\n          sig += (400 - sig) % 4;\n          leading = false;\n        }\n\n        if (sig == (radixDigits / 2) * 4) {\n          sp = i;\n          break;\n        }\n\n        if (buf[i] >= '0' && buf[i] <= '9' && !leading) {\n            sig ++;\n        }\n      }\n\n      result[0] = new Dfp(this, new String(buf, 0, sp));\n\n      for (int i = 0; i < buf.length; i++) {\n        buf[i] = a.charAt(i);\n        if (buf[i] >= '0' && buf[i] <= '9' && i < sp) {\n            buf[i] = '0';\n        }\n      }\n\n      result[1] = new Dfp(this, new String(buf));\n\n      return result;\n\n    }\n",
        "begin_line": 529,
        "end_line": 572,
        "comment": " Breaks a string representation up into two {@link Dfp}'s.\n     * The split is such that the sum of them is equivalent to the input string,\n     * but has higher precision than using a single Dfp.\n     * @param a string representation of the number to split\n     * @return an array of two {@link Dfp Dfp} instances which sum equals a\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1111
        },
        "num_failing_tests": 1
    },
    {
        "name": "DfpField.computeStringConstants#577",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/dfp/DfpField.java",
        "class_name": "org.apache.commons.math3.dfp.DfpField",
        "signature": "org.apache.commons.math3.dfp.DfpField.computeStringConstants(int)",
        "snippet": "    private static void computeStringConstants(final int highPrecisionDecimalDigits) {\n        if (sqr2String == null || sqr2String.length() < highPrecisionDecimalDigits - 3) {\n\n            // recompute the string representation of the transcendental constants\n            final DfpField highPrecisionField = new DfpField(highPrecisionDecimalDigits, false);\n            final Dfp highPrecisionOne        = new Dfp(highPrecisionField, 1);\n            final Dfp highPrecisionTwo        = new Dfp(highPrecisionField, 2);\n            final Dfp highPrecisionThree      = new Dfp(highPrecisionField, 3);\n\n            final Dfp highPrecisionSqr2 = highPrecisionTwo.sqrt();\n            sqr2String           = highPrecisionSqr2.toString();\n            sqr2ReciprocalString = highPrecisionOne.divide(highPrecisionSqr2).toString();\n\n            final Dfp highPrecisionSqr3 = highPrecisionThree.sqrt();\n            sqr3String           = highPrecisionSqr3.toString();\n            sqr3ReciprocalString = highPrecisionOne.divide(highPrecisionSqr3).toString();\n\n            piString   = computePi(highPrecisionOne, highPrecisionTwo, highPrecisionThree).toString();\n            eString    = computeExp(highPrecisionOne, highPrecisionOne).toString();\n            ln2String  = computeLn(highPrecisionTwo, highPrecisionOne, highPrecisionTwo).toString();\n            ln5String  = computeLn(new Dfp(highPrecisionField, 5),  highPrecisionOne, highPrecisionTwo).toString();\n            ln10String = computeLn(new Dfp(highPrecisionField, 10), highPrecisionOne, highPrecisionTwo).toString();\n\n        }\n    }\n",
        "begin_line": 577,
        "end_line": 601,
        "comment": " Recompute the high precision string constants.\n     * @param highPrecisionDecimalDigits precision at which the string constants mus be computed\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1111
        },
        "num_failing_tests": 1
    },
    {
        "name": "DfpField.computePi#609",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/dfp/DfpField.java",
        "class_name": "org.apache.commons.math3.dfp.DfpField",
        "signature": "org.apache.commons.math3.dfp.DfpField.computePi(org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp)",
        "snippet": "    private static Dfp computePi(final Dfp one, final Dfp two, final Dfp three) {\n\n        Dfp sqrt2   = two.sqrt();\n        Dfp yk      = sqrt2.subtract(one);\n        Dfp four    = two.add(two);\n        Dfp two2kp3 = two;\n        Dfp ak      = two.multiply(three.subtract(two.multiply(sqrt2)));\n\n        // The formula converges quartically. This means the number of correct\n        // digits is multiplied by 4 at each iteration! Five iterations are\n        // sufficient for about 160 digits, eight iterations give about\n        // 10000 digits (this has been checked) and 20 iterations more than\n        // 160 billions of digits (this has NOT been checked).\n        // So the limit here is considered sufficient for most purposes ...\n        for (int i = 1; i < 20; i++) {\n            final Dfp ykM1 = yk;\n\n            final Dfp y2         = yk.multiply(yk);\n            final Dfp oneMinusY4 = one.subtract(y2.multiply(y2));\n            final Dfp s          = oneMinusY4.sqrt().sqrt();\n            yk = one.subtract(s).divide(one.add(s));\n\n            two2kp3 = two2kp3.multiply(four);\n\n            final Dfp p = one.add(yk);\n            final Dfp p2 = p.multiply(p);\n            ak = ak.multiply(p2.multiply(p2)).subtract(two2kp3.multiply(yk).multiply(one.add(yk).add(yk.multiply(yk))));\n\n            if (yk.equals(ykM1)) {\n                break;\n            }\n        }\n\n        return one.divide(ak);\n\n    }\n",
        "begin_line": 609,
        "end_line": 644,
        "comment": " Compute &pi; using Jonathan and Peter Borwein quartic formula.\n     * @param one constant with value 1 at desired precision\n     * @param two constant with value 2 at desired precision\n     * @param three constant with value 3 at desired precision\n     * @return &pi;\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1111
        },
        "num_failing_tests": 1
    },
    {
        "name": "DfpField.computeExp#651",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/dfp/DfpField.java",
        "class_name": "org.apache.commons.math3.dfp.DfpField",
        "signature": "org.apache.commons.math3.dfp.DfpField.computeExp(org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp)",
        "snippet": "    public static Dfp computeExp(final Dfp a, final Dfp one) {\n\n        Dfp y  = new Dfp(one);\n        Dfp py = new Dfp(one);\n        Dfp f  = new Dfp(one);\n        Dfp fi = new Dfp(one);\n        Dfp x  = new Dfp(one);\n\n        for (int i = 0; i < 10000; i++) {\n            x = x.multiply(a);\n            y = y.add(x.divide(f));\n            fi = fi.add(one);\n            f = f.multiply(fi);\n            if (y.equals(py)) {\n                break;\n            }\n            py = new Dfp(y);\n        }\n\n        return y;\n\n    }\n",
        "begin_line": 651,
        "end_line": 672,
        "comment": " Compute exp(a).\n     * @param a number for which we want the exponential\n     * @param one constant with value 1 at desired precision\n     * @return exp(a)\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1111
        },
        "num_failing_tests": 1
    },
    {
        "name": "DfpField.computeLn#734",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/dfp/DfpField.java",
        "class_name": "org.apache.commons.math3.dfp.DfpField",
        "signature": "org.apache.commons.math3.dfp.DfpField.computeLn(org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp)",
        "snippet": "    public static Dfp computeLn(final Dfp a, final Dfp one, final Dfp two) {\n\n        int den = 1;\n        Dfp x = a.add(new Dfp(a.getField(), -1)).divide(a.add(one));\n\n        Dfp y = new Dfp(x);\n        Dfp num = new Dfp(x);\n        Dfp py = new Dfp(y);\n        for (int i = 0; i < 10000; i++) {\n            num = num.multiply(x);\n            num = num.multiply(x);\n            den = den + 2;\n            Dfp t = num.divide(den);\n            y = y.add(t);\n            if (y.equals(py)) {\n                break;\n            }\n            py = new Dfp(y);\n        }\n\n        return y.multiply(two);\n\n    }\n",
        "begin_line": 734,
        "end_line": 756,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1111
        },
        "num_failing_tests": 1
    },
    {
        "name": "Dfp.trunc#1044",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/dfp/Dfp.java",
        "class_name": "org.apache.commons.math3.dfp.Dfp",
        "signature": "org.apache.commons.math3.dfp.Dfp.trunc(org.apache.commons.math3.dfp.DfpField.RoundingMode)",
        "snippet": "    protected Dfp trunc(final DfpField.RoundingMode rmode) {\n        boolean changed = false;\n\n        if (isNaN()) {\n            return newInstance(this);\n        }\n\n        if (nans == INFINITE) {\n            return newInstance(this);\n        }\n\n        if (mant[mant.length-1] == 0) {\n            // a is zero\n            return newInstance(this);\n        }\n\n        /* If the exponent is less than zero then we can certainly\n         * return zero */\n        if (exp < 0) {\n            field.setIEEEFlagsBits(DfpField.FLAG_INEXACT);\n            Dfp result = newInstance(getZero());\n            result = dotrap(DfpField.FLAG_INEXACT, TRUNC_TRAP, this, result);\n            return result;\n        }\n\n        /* If the exponent is greater than or equal to digits, then it\n         * must already be an integer since there is no precision left\n         * for any fractional part */\n\n        if (exp >= mant.length) {\n            return newInstance(this);\n        }\n\n        /* General case:  create another dfp, result, that contains the\n         * a with the fractional part lopped off.  */\n\n        Dfp result = newInstance(this);\n        for (int i = 0; i < mant.length-result.exp; i++) {\n            changed |= result.mant[i] != 0;\n            result.mant[i] = 0;\n        }\n\n        if (changed) {\n            switch (rmode) {\n                case ROUND_FLOOR:\n                    if (result.sign == -1) {\n                        // then we must increment the mantissa by one\n                        result = result.add(newInstance(-1));\n                    }\n                    break;\n\n                case ROUND_CEIL:\n                    if (result.sign == 1) {\n                        // then we must increment the mantissa by one\n                        result = result.add(getOne());\n                    }\n                    break;\n\n                case ROUND_HALF_EVEN:\n                default:\n                    final Dfp half = newInstance(\"0.5\");\n                    Dfp a = subtract(result);  // difference between this and result\n                    a.sign = 1;            // force positive (take abs)\n                    if (a.greaterThan(half)) {\n                        a = newInstance(getOne());\n                        a.sign = sign;\n                        result = result.add(a);\n                    }\n\n                    /** If exactly equal to 1/2 and odd then increment */\n                    if (a.equals(half) && result.exp > 0 && (result.mant[mant.length-result.exp]&1) != 0) {\n                        a = newInstance(getOne());\n                        a.sign = sign;\n                        result = result.add(a);\n                    }\n                    break;\n            }\n\n            field.setIEEEFlagsBits(DfpField.FLAG_INEXACT);  // signal inexact\n            result = dotrap(DfpField.FLAG_INEXACT, TRUNC_TRAP, this, result);\n            return result;\n        }\n\n        return result;\n    }\n",
        "begin_line": 1044,
        "end_line": 1128,
        "comment": " Does the integer conversions with the specified rounding.\n     * @param rmode rounding mode to use\n     * @return truncated value\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1111
        },
        "num_failing_tests": 1
    },
    {
        "name": "Dfp.Dfp#201",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/dfp/Dfp.java",
        "class_name": "org.apache.commons.math3.dfp.Dfp",
        "signature": "org.apache.commons.math3.dfp.Dfp.Dfp(org.apache.commons.math3.dfp.DfpField, int)",
        "snippet": "    protected Dfp(final DfpField field, int x) {\n        this(field, (long) x);\n    }\n",
        "begin_line": 201,
        "end_line": 203,
        "comment": " Create an instance from an int value.\n     * @param field field to which this instance belongs\n     * @param x value to convert to an instance\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1111
        },
        "num_failing_tests": 1
    },
    {
        "name": "Dfp.Dfp#209",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/dfp/Dfp.java",
        "class_name": "org.apache.commons.math3.dfp.Dfp",
        "signature": "org.apache.commons.math3.dfp.Dfp.Dfp(org.apache.commons.math3.dfp.DfpField, long)",
        "snippet": "    protected Dfp(final DfpField field, long x) {\n\n        // initialize as if 0\n        mant = new int[field.getRadixDigits()];\n        nans = FINITE;\n        this.field = field;\n\n        boolean isLongMin = false;\n        if (x == Long.MIN_VALUE) {\n            // special case for Long.MIN_VALUE (-9223372036854775808)\n            // we must shift it before taking its absolute value\n            isLongMin = true;\n            ++x;\n        }\n\n        // set the sign\n        if (x < 0) {\n            sign = -1;\n            x = -x;\n        } else {\n            sign = 1;\n        }\n\n        exp = 0;\n        while (x != 0) {\n            System.arraycopy(mant, mant.length - exp, mant, mant.length - 1 - exp, exp);\n            mant[mant.length - 1] = (int) (x % RADIX);\n            x /= RADIX;\n            exp++;\n        }\n\n        if (isLongMin) {\n            // remove the shift added for Long.MIN_VALUE\n            // we know in this case that fixing the last digit is sufficient\n            for (int i = 0; i < mant.length - 1; i++) {\n                if (mant[i] != 0) {\n                    mant[i]++;\n                    break;\n                }\n            }\n        }\n    }\n",
        "begin_line": 209,
        "end_line": 250,
        "comment": " Create an instance from a long value.\n     * @param field field to which this instance belongs\n     * @param x value to convert to an instance\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1111
        },
        "num_failing_tests": 1
    },
    {
        "name": "Dfp.Dfp#322",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/dfp/Dfp.java",
        "class_name": "org.apache.commons.math3.dfp.Dfp",
        "signature": "org.apache.commons.math3.dfp.Dfp.Dfp(org.apache.commons.math3.dfp.Dfp)",
        "snippet": "    public Dfp(final Dfp d) {\n        mant  = d.mant.clone();\n        sign  = d.sign;\n        exp   = d.exp;\n        nans  = d.nans;\n        field = d.field;\n    }\n",
        "begin_line": 322,
        "end_line": 328,
        "comment": " Copy constructor.\n     * @param d instance to copy\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1111
        },
        "num_failing_tests": 1
    },
    {
        "name": "Dfp.newInstance#594",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/dfp/Dfp.java",
        "class_name": "org.apache.commons.math3.dfp.Dfp",
        "signature": "org.apache.commons.math3.dfp.Dfp.newInstance(org.apache.commons.math3.dfp.Dfp)",
        "snippet": "    public Dfp newInstance(final Dfp d) {\n\n        // make sure we don't mix number with different precision\n        if (field.getRadixDigits() != d.field.getRadixDigits()) {\n            field.setIEEEFlagsBits(DfpField.FLAG_INVALID);\n            final Dfp result = newInstance(getZero());\n            result.nans = QNAN;\n            return dotrap(DfpField.FLAG_INVALID, NEW_INSTANCE_TRAP, d, result);\n        }\n\n        return new Dfp(d);\n\n    }\n",
        "begin_line": 594,
        "end_line": 606,
        "comment": " Create an instance by copying an existing one.\n     * Use this internally in preference to constructors to facilitate subclasses.\n     * @param d instance to copy\n     * @return a new instance with the same value as d\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1111
        },
        "num_failing_tests": 1
    },
    {
        "name": "Dfp.getField#634",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/dfp/Dfp.java",
        "class_name": "org.apache.commons.math3.dfp.Dfp",
        "signature": "org.apache.commons.math3.dfp.Dfp.getField()",
        "snippet": "    public DfpField getField() {\n        return field;\n    }\n",
        "begin_line": 634,
        "end_line": 636,
        "comment": " Get the {@link org.apache.commons.math3.Field Field} (really a {@link DfpField}) to which the instance belongs.\n     * <p>\n     * The field is linked to the number of digits and acts as a factory\n     * for {@link Dfp} instances.\n     * </p>\n     * @return {@link org.apache.commons.math3.Field Field} (really a {@link DfpField}) to which the instance belongs\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1111
        },
        "num_failing_tests": 1
    },
    {
        "name": "Dfp.getRadixDigits#641",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/dfp/Dfp.java",
        "class_name": "org.apache.commons.math3.dfp.Dfp",
        "signature": "org.apache.commons.math3.dfp.Dfp.getRadixDigits()",
        "snippet": "    public int getRadixDigits() {\n        return field.getRadixDigits();\n    }\n",
        "begin_line": 641,
        "end_line": 643,
        "comment": " Get the number of radix digits of the instance.\n     * @return number of radix digits\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1111
        },
        "num_failing_tests": 1
    },
    {
        "name": "Dfp.getZero#648",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/dfp/Dfp.java",
        "class_name": "org.apache.commons.math3.dfp.Dfp",
        "signature": "org.apache.commons.math3.dfp.Dfp.getZero()",
        "snippet": "    public Dfp getZero() {\n        return field.getZero();\n    }\n",
        "begin_line": 648,
        "end_line": 650,
        "comment": " Get the constant 0.\n     * @return a Dfp with value zero\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1111
        },
        "num_failing_tests": 1
    },
    {
        "name": "Dfp.shiftLeft#668",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/dfp/Dfp.java",
        "class_name": "org.apache.commons.math3.dfp.Dfp",
        "signature": "org.apache.commons.math3.dfp.Dfp.shiftLeft()",
        "snippet": "    protected void shiftLeft() {\n        for (int i = mant.length - 1; i > 0; i--) {\n            mant[i] = mant[i-1];\n        }\n        mant[0] = 0;\n        exp--;\n    }\n",
        "begin_line": 668,
        "end_line": 674,
        "comment": " Shift the mantissa left, and adjust the exponent to compensate.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1111
        },
        "num_failing_tests": 1
    },
    {
        "name": "Dfp.shiftRight#680",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/dfp/Dfp.java",
        "class_name": "org.apache.commons.math3.dfp.Dfp",
        "signature": "org.apache.commons.math3.dfp.Dfp.shiftRight()",
        "snippet": "    protected void shiftRight() {\n        for (int i = 0; i < mant.length - 1; i++) {\n            mant[i] = mant[i+1];\n        }\n        mant[mant.length - 1] = 0;\n        exp++;\n    }\n",
        "begin_line": 680,
        "end_line": 686,
        "comment": " Shift the mantissa right, and adjust the exponent to compensate.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1111
        },
        "num_failing_tests": 1
    },
    {
        "name": "Dfp.align#696",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/dfp/Dfp.java",
        "class_name": "org.apache.commons.math3.dfp.Dfp",
        "signature": "org.apache.commons.math3.dfp.Dfp.align(int)",
        "snippet": "    protected int align(int e) {\n        int lostdigit = 0;\n        boolean inexact = false;\n\n        int diff = exp - e;\n\n        int adiff = diff;\n        if (adiff < 0) {\n            adiff = -adiff;\n        }\n\n        if (diff == 0) {\n            return 0;\n        }\n\n        if (adiff > (mant.length + 1)) {\n            // Special case\n            Arrays.fill(mant, 0);\n            exp = e;\n\n            field.setIEEEFlagsBits(DfpField.FLAG_INEXACT);\n            dotrap(DfpField.FLAG_INEXACT, ALIGN_TRAP, this, this);\n\n            return 0;\n        }\n\n        for (int i = 0; i < adiff; i++) {\n            if (diff < 0) {\n                /* Keep track of loss -- only signal inexact after losing 2 digits.\n                 * the first lost digit is returned to add() and may be incorporated\n                 * into the result.\n                 */\n                if (lostdigit != 0) {\n                    inexact = true;\n                }\n\n                lostdigit = mant[0];\n\n                shiftRight();\n            } else {\n                shiftLeft();\n            }\n        }\n\n        if (inexact) {\n            field.setIEEEFlagsBits(DfpField.FLAG_INEXACT);\n            dotrap(DfpField.FLAG_INEXACT, ALIGN_TRAP, this, this);\n        }\n\n        return lostdigit;\n\n    }\n",
        "begin_line": 696,
        "end_line": 747,
        "comment": " Make our exp equal to the supplied one, this may cause rounding.\n     *  Also causes de-normalized numbers.  These numbers are generally\n     *  dangerous because most routines assume normalized numbers.\n     *  Align doesn't round, so it will return the last digit destroyed\n     *  by shifting right.\n     *  @param e desired exponent\n     *  @return last digit destroyed by shifting right\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1111
        },
        "num_failing_tests": 1
    },
    {
        "name": "Dfp.lessThan#753",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/dfp/Dfp.java",
        "class_name": "org.apache.commons.math3.dfp.Dfp",
        "signature": "org.apache.commons.math3.dfp.Dfp.lessThan(org.apache.commons.math3.dfp.Dfp)",
        "snippet": "    public boolean lessThan(final Dfp x) {\n\n        // make sure we don't mix number with different precision\n        if (field.getRadixDigits() != x.field.getRadixDigits()) {\n            field.setIEEEFlagsBits(DfpField.FLAG_INVALID);\n            final Dfp result = newInstance(getZero());\n            result.nans = QNAN;\n            dotrap(DfpField.FLAG_INVALID, LESS_THAN_TRAP, x, result);\n            return false;\n        }\n\n        /* if a nan is involved, signal invalid and return false */\n        if (isNaN() || x.isNaN()) {\n            field.setIEEEFlagsBits(DfpField.FLAG_INVALID);\n            dotrap(DfpField.FLAG_INVALID, LESS_THAN_TRAP, x, newInstance(getZero()));\n            return false;\n        }\n\n        return compare(this, x) < 0;\n    }\n",
        "begin_line": 753,
        "end_line": 772,
        "comment": " Check if instance is less than x.\n     * @param x number to check instance against\n     * @return true if instance is less than x and neither are NaN, false otherwise\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1111
        },
        "num_failing_tests": 1
    },
    {
        "name": "Dfp.greaterThan#778",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/dfp/Dfp.java",
        "class_name": "org.apache.commons.math3.dfp.Dfp",
        "signature": "org.apache.commons.math3.dfp.Dfp.greaterThan(org.apache.commons.math3.dfp.Dfp)",
        "snippet": "    public boolean greaterThan(final Dfp x) {\n\n        // make sure we don't mix number with different precision\n        if (field.getRadixDigits() != x.field.getRadixDigits()) {\n            field.setIEEEFlagsBits(DfpField.FLAG_INVALID);\n            final Dfp result = newInstance(getZero());\n            result.nans = QNAN;\n            dotrap(DfpField.FLAG_INVALID, GREATER_THAN_TRAP, x, result);\n            return false;\n        }\n\n        /* if a nan is involved, signal invalid and return false */\n        if (isNaN() || x.isNaN()) {\n            field.setIEEEFlagsBits(DfpField.FLAG_INVALID);\n            dotrap(DfpField.FLAG_INVALID, GREATER_THAN_TRAP, x, newInstance(getZero()));\n            return false;\n        }\n\n        return compare(this, x) > 0;\n    }\n",
        "begin_line": 778,
        "end_line": 797,
        "comment": " Check if instance is greater than x.\n     * @param x number to check instance against\n     * @return true if instance is greater than x and neither are NaN, false otherwise\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1111
        },
        "num_failing_tests": 1
    },
    {
        "name": "Dfp.isNaN#878",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/dfp/Dfp.java",
        "class_name": "org.apache.commons.math3.dfp.Dfp",
        "signature": "org.apache.commons.math3.dfp.Dfp.isNaN()",
        "snippet": "    public boolean isNaN() {\n        return (nans == QNAN) || (nans == SNAN);\n    }\n",
        "begin_line": 878,
        "end_line": 880,
        "comment": " Check if instance is not a number.\n     * @return true if instance is not a number\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1111
        },
        "num_failing_tests": 1
    },
    {
        "name": "Dfp.complement#1229",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/dfp/Dfp.java",
        "class_name": "org.apache.commons.math3.dfp.Dfp",
        "signature": "org.apache.commons.math3.dfp.Dfp.complement(int)",
        "snippet": "    protected int complement(int extra) {\n\n        extra = RADIX-extra;\n        for (int i = 0; i < mant.length; i++) {\n            mant[i] = RADIX-mant[i]-1;\n        }\n\n        int rh = extra / RADIX;\n        extra = extra - rh * RADIX;\n        for (int i = 0; i < mant.length; i++) {\n            final int r = mant[i] + rh;\n            rh = r / RADIX;\n            mant[i] = r - rh * RADIX;\n        }\n\n        return extra;\n    }\n",
        "begin_line": 1229,
        "end_line": 1245,
        "comment": " Negate the mantissa of this by computing the complement.\n     *  Leaves the sign bit unchanged, used internally by add.\n     *  Denormalized numbers are handled properly here.\n     *  @param extra ???\n     *  @return ???\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1111
        },
        "num_failing_tests": 1
    },
    {
        "name": "Dfp.add#1251",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/dfp/Dfp.java",
        "class_name": "org.apache.commons.math3.dfp.Dfp",
        "signature": "org.apache.commons.math3.dfp.Dfp.add(org.apache.commons.math3.dfp.Dfp)",
        "snippet": "    public Dfp add(final Dfp x) {\n\n        // make sure we don't mix number with different precision\n        if (field.getRadixDigits() != x.field.getRadixDigits()) {\n            field.setIEEEFlagsBits(DfpField.FLAG_INVALID);\n            final Dfp result = newInstance(getZero());\n            result.nans = QNAN;\n            return dotrap(DfpField.FLAG_INVALID, ADD_TRAP, x, result);\n        }\n\n        /* handle special cases */\n        if (nans != FINITE || x.nans != FINITE) {\n            if (isNaN()) {\n                return this;\n            }\n\n            if (x.isNaN()) {\n                return x;\n            }\n\n            if (nans == INFINITE && x.nans == FINITE) {\n                return this;\n            }\n\n            if (x.nans == INFINITE && nans == FINITE) {\n                return x;\n            }\n\n            if (x.nans == INFINITE && nans == INFINITE && sign == x.sign) {\n                return x;\n            }\n\n            if (x.nans == INFINITE && nans == INFINITE && sign != x.sign) {\n                field.setIEEEFlagsBits(DfpField.FLAG_INVALID);\n                Dfp result = newInstance(getZero());\n                result.nans = QNAN;\n                result = dotrap(DfpField.FLAG_INVALID, ADD_TRAP, x, result);\n                return result;\n            }\n        }\n\n        /* copy this and the arg */\n        Dfp a = newInstance(this);\n        Dfp b = newInstance(x);\n\n        /* initialize the result object */\n        Dfp result = newInstance(getZero());\n\n        /* Make all numbers positive, but remember their sign */\n        final byte asign = a.sign;\n        final byte bsign = b.sign;\n\n        a.sign = 1;\n        b.sign = 1;\n\n        /* The result will be signed like the arg with greatest magnitude */\n        byte rsign = bsign;\n        if (compare(a, b) > 0) {\n            rsign = asign;\n        }\n\n        /* Handle special case when a or b is zero, by setting the exponent\n       of the zero number equal to the other one.  This avoids an alignment\n       which would cause catastropic loss of precision */\n        if (b.mant[mant.length-1] == 0) {\n            b.exp = a.exp;\n        }\n\n        if (a.mant[mant.length-1] == 0) {\n            a.exp = b.exp;\n        }\n\n        /* align number with the smaller exponent */\n        int aextradigit = 0;\n        int bextradigit = 0;\n        if (a.exp < b.exp) {\n            aextradigit = a.align(b.exp);\n        } else {\n            bextradigit = b.align(a.exp);\n        }\n\n        /* complement the smaller of the two if the signs are different */\n        if (asign != bsign) {\n            if (asign == rsign) {\n                bextradigit = b.complement(bextradigit);\n            } else {\n                aextradigit = a.complement(aextradigit);\n            }\n        }\n\n        /* add the mantissas */\n        int rh = 0; /* acts as a carry */\n        for (int i = 0; i < mant.length; i++) {\n            final int r = a.mant[i]+b.mant[i]+rh;\n            rh = r / RADIX;\n            result.mant[i] = r - rh * RADIX;\n        }\n        result.exp = a.exp;\n        result.sign = rsign;\n\n        /* handle overflow -- note, when asign!=bsign an overflow is\n         * normal and should be ignored.  */\n\n        if (rh != 0 && (asign == bsign)) {\n            final int lostdigit = result.mant[0];\n            result.shiftRight();\n            result.mant[mant.length-1] = rh;\n            final int excp = result.round(lostdigit);\n            if (excp != 0) {\n                result = dotrap(excp, ADD_TRAP, x, result);\n            }\n        }\n\n        /* normalize the result */\n        for (int i = 0; i < mant.length; i++) {\n            if (result.mant[mant.length-1] != 0) {\n                break;\n            }\n            result.shiftLeft();\n            if (i == 0) {\n                result.mant[0] = aextradigit+bextradigit;\n                aextradigit = 0;\n                bextradigit = 0;\n            }\n        }\n\n        /* result is zero if after normalization the most sig. digit is zero */\n        if (result.mant[mant.length-1] == 0) {\n            result.exp = 0;\n\n            if (asign != bsign) {\n                // Unless adding 2 negative zeros, sign is positive\n                result.sign = 1;  // Per IEEE 854-1987 Section 6.3\n            }\n        }\n\n        /* Call round to test for over/under flows */\n        final int excp = result.round(aextradigit + bextradigit);\n        if (excp != 0) {\n            result = dotrap(excp, ADD_TRAP, x, result);\n        }\n\n        return result;\n    }\n",
        "begin_line": 1251,
        "end_line": 1394,
        "comment": " Add x to this.\n     * @param x number to add\n     * @return sum of this and x\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1111
        },
        "num_failing_tests": 1
    },
    {
        "name": "Dfp.negate#1399",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/dfp/Dfp.java",
        "class_name": "org.apache.commons.math3.dfp.Dfp",
        "signature": "org.apache.commons.math3.dfp.Dfp.negate()",
        "snippet": "    public Dfp negate() {\n        Dfp result = newInstance(this);\n        result.sign = (byte) - result.sign;\n        return result;\n    }\n",
        "begin_line": 1399,
        "end_line": 1403,
        "comment": " Returns a number that is this number with the sign bit reversed.\n     * @return the opposite of this\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1111
        },
        "num_failing_tests": 1
    },
    {
        "name": "Dfp.subtract#1409",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/dfp/Dfp.java",
        "class_name": "org.apache.commons.math3.dfp.Dfp",
        "signature": "org.apache.commons.math3.dfp.Dfp.subtract(org.apache.commons.math3.dfp.Dfp)",
        "snippet": "    public Dfp subtract(final Dfp x) {\n        return add(x.negate());\n    }\n",
        "begin_line": 1409,
        "end_line": 1411,
        "comment": " Subtract x from this.\n     * @param x number to subtract\n     * @return difference of this and a\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1111
        },
        "num_failing_tests": 1
    },
    {
        "name": "Dfp.divide#1888",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/dfp/Dfp.java",
        "class_name": "org.apache.commons.math3.dfp.Dfp",
        "signature": "org.apache.commons.math3.dfp.Dfp.divide(int)",
        "snippet": "    public Dfp divide(int divisor) {\n\n        // Handle special cases\n        if (nans != FINITE) {\n            if (isNaN()) {\n                return this;\n            }\n\n            if (nans == INFINITE) {\n                return newInstance(this);\n            }\n        }\n\n        // Test for divide by zero\n        if (divisor == 0) {\n            field.setIEEEFlagsBits(DfpField.FLAG_DIV_ZERO);\n            Dfp result = newInstance(getZero());\n            result.sign = sign;\n            result.nans = INFINITE;\n            result = dotrap(DfpField.FLAG_DIV_ZERO, DIVIDE_TRAP, getZero(), result);\n            return result;\n        }\n\n        // range check divisor\n        if (divisor < 0 || divisor >= RADIX) {\n            field.setIEEEFlagsBits(DfpField.FLAG_INVALID);\n            Dfp result = newInstance(getZero());\n            result.nans = QNAN;\n            result = dotrap(DfpField.FLAG_INVALID, DIVIDE_TRAP, result, result);\n            return result;\n        }\n\n        Dfp result = newInstance(this);\n\n        int rl = 0;\n        for (int i = mant.length-1; i >= 0; i--) {\n            final int r = rl*RADIX + result.mant[i];\n            final int rh = r / divisor;\n            rl = r - rh * divisor;\n            result.mant[i] = rh;\n        }\n\n        if (result.mant[mant.length-1] == 0) {\n            // normalize\n            result.shiftLeft();\n            final int r = rl * RADIX;        // compute the next digit and put it in\n            final int rh = r / divisor;\n            rl = r - rh * divisor;\n            result.mant[0] = rh;\n        }\n\n        final int excp = result.round(rl * RADIX / divisor);  // do the rounding\n        if (excp != 0) {\n            result = dotrap(excp, DIVIDE_TRAP, result, result);\n        }\n\n        return result;\n\n    }\n",
        "begin_line": 1888,
        "end_line": 1946,
        "comment": " Divide by a single digit less than radix.\n     *  Special case, so there are speed advantages. 0 &lt;= divisor &lt; radix\n     * @param divisor divisor\n     * @return quotient of this by divisor\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1111
        },
        "num_failing_tests": 1
    },
    {
        "name": "Dfp.sqrt#1956",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/dfp/Dfp.java",
        "class_name": "org.apache.commons.math3.dfp.Dfp",
        "signature": "org.apache.commons.math3.dfp.Dfp.sqrt()",
        "snippet": "    public Dfp sqrt() {\n\n        // check for unusual cases\n        if (nans == FINITE && mant[mant.length-1] == 0) {\n            // if zero\n            return newInstance(this);\n        }\n\n        if (nans != FINITE) {\n            if (nans == INFINITE && sign == 1) {\n                // if positive infinity\n                return newInstance(this);\n            }\n\n            if (nans == QNAN) {\n                return newInstance(this);\n            }\n\n            if (nans == SNAN) {\n                Dfp result;\n\n                field.setIEEEFlagsBits(DfpField.FLAG_INVALID);\n                result = newInstance(this);\n                result = dotrap(DfpField.FLAG_INVALID, SQRT_TRAP, null, result);\n                return result;\n            }\n        }\n\n        if (sign == -1) {\n            // if negative\n            Dfp result;\n\n            field.setIEEEFlagsBits(DfpField.FLAG_INVALID);\n            result = newInstance(this);\n            result.nans = QNAN;\n            result = dotrap(DfpField.FLAG_INVALID, SQRT_TRAP, null, result);\n            return result;\n        }\n\n        Dfp x = newInstance(this);\n\n        /* Lets make a reasonable guess as to the size of the square root */\n        if (x.exp < -1 || x.exp > 1) {\n            x.exp = this.exp / 2;\n        }\n\n        /* Coarsely estimate the mantissa */\n        switch (x.mant[mant.length-1] / 2000) {\n            case 0:\n                x.mant[mant.length-1] = x.mant[mant.length-1]/2+1;\n                break;\n            case 2:\n                x.mant[mant.length-1] = 1500;\n                break;\n            case 3:\n                x.mant[mant.length-1] = 2200;\n                break;\n            default:\n                x.mant[mant.length-1] = 3000;\n        }\n\n        Dfp dx = newInstance(x);\n\n        /* Now that we have the first pass estimate, compute the rest\n       by the formula dx = (y - x*x) / (2x); */\n\n        Dfp px  = getZero();\n        Dfp ppx = getZero();\n        while (x.unequal(px)) {\n            dx = newInstance(x);\n            dx.sign = -1;\n            dx = dx.add(this.divide(x));\n            dx = dx.divide(2);\n            ppx = px;\n            px = x;\n            x = x.add(dx);\n\n            if (x.equals(ppx)) {\n                // alternating between two values\n                break;\n            }\n\n            // if dx is zero, break.  Note testing the most sig digit\n            // is a sufficient test since dx is normalized\n            if (dx.mant[mant.length-1] == 0) {\n                break;\n            }\n        }\n\n        return x;\n\n    }\n",
        "begin_line": 1956,
        "end_line": 2047,
        "comment": " Compute the square root.\n     * @return square root of the instance\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1111
        },
        "num_failing_tests": 1
    },
    {
        "name": "Dfp.trap#2302",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/dfp/Dfp.java",
        "class_name": "org.apache.commons.math3.dfp.Dfp",
        "signature": "org.apache.commons.math3.dfp.Dfp.trap(int, java.lang.String, org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp)",
        "snippet": "    protected Dfp trap(int type, String what, Dfp oper, Dfp def, Dfp result) {\n        return def;\n    }\n",
        "begin_line": 2302,
        "end_line": 2304,
        "comment": " Trap handler.  Subclasses may override this to provide trap\n     *  functionality per IEEE 854-1987.\n     *\n     *  @param type  The exception type - e.g. FLAG_OVERFLOW\n     *  @param what  The name of the routine we were in e.g. divide()\n     *  @param oper  An operand to this function if any\n     *  @param def   The default return value if trap not enabled\n     *  @param result    The result that is specified to be delivered per\n     *                   IEEE 854, if any\n     *  @return the value that should be return by the operation triggering the trap\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1111
        },
        "num_failing_tests": 1
    }
]