[
    {
        "class_name": "org.apache.commons.math3.dfp.DfpTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/dfp/DfpTest.java",
        "signature": "org.apache.commons.math3.dfp.DfpTest.setUp()",
        "snippet": "    @Before\n    public void setUp() {\n        // Some basic setup.  Define some constants and clear the status flags\n        field = new DfpField(20);\n        pinf = field.newDfp(\"1\").divide(field.newDfp(\"0\"));\n        ninf = field.newDfp(\"-1\").divide(field.newDfp(\"0\"));\n        nan = field.newDfp(\"0\").divide(field.newDfp(\"0\"));\n        snan = field.newDfp((byte)1, Dfp.SNAN);\n        qnan = field.newDfp((byte)1, Dfp.QNAN);\n        ninf.getField().clearIEEEFlags();\n    }\n",
        "begin_line": 36,
        "end_line": 46,
        "comment": "",
        "child_ranges": [
            "(line 39,col 9)-(line 39,col 33)",
            "(line 40,col 9)-(line 40,col 59)",
            "(line 41,col 9)-(line 41,col 60)",
            "(line 42,col 9)-(line 42,col 58)",
            "(line 43,col 9)-(line 43,col 47)",
            "(line 44,col 9)-(line 44,col 47)",
            "(line 45,col 9)-(line 45,col 41)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.dfp.DfpTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/dfp/DfpTest.java",
        "signature": "org.apache.commons.math3.dfp.DfpTest.tearDown()",
        "snippet": "    @After\n    public void tearDown() {\n        field = null;\n        pinf    = null;\n        ninf    = null;\n        nan     = null;\n        snan    = null;\n        qnan    = null;\n    }\n",
        "begin_line": 48,
        "end_line": 56,
        "comment": "",
        "child_ranges": [
            "(line 50,col 9)-(line 50,col 21)",
            "(line 51,col 9)-(line 51,col 23)",
            "(line 52,col 9)-(line 52,col 23)",
            "(line 53,col 9)-(line 53,col 23)",
            "(line 54,col 9)-(line 54,col 23)",
            "(line 55,col 9)-(line 55,col 23)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.dfp.DfpTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/dfp/DfpTest.java",
        "signature": "org.apache.commons.math3.dfp.DfpTest.test(org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp, int, java.lang.String)",
        "snippet": "    private void test(Dfp x, Dfp y, int flags, String desc)\n    {\n        boolean b = x.equals(y);\n\n        if (!x.equals(y) && !x.unequal(y))  // NaNs involved\n            b = (x.toString().equals(y.toString()));\n\n        if (x.equals(field.newDfp(\"0\")))  // distinguish +/- zero\n            b = (b && (x.toString().equals(y.toString())));\n\n        b = (b && x.getField().getIEEEFlags() == flags);\n\n        if (!b)\n            Assert.assertTrue(\"assersion failed \"+desc+\" x = \"+x.toString()+\" flags = \"+x.getField().getIEEEFlags(), b);\n\n        x.getField().clearIEEEFlags();\n    }\n",
        "begin_line": 61,
        "end_line": 77,
        "comment": " If the test fail, it prints the desc string",
        "child_ranges": [
            "(line 63,col 9)-(line 63,col 32)",
            "(line 65,col 9)-(line 66,col 52)",
            "(line 68,col 9)-(line 69,col 59)",
            "(line 71,col 9)-(line 71,col 56)",
            "(line 73,col 9)-(line 74,col 120)",
            "(line 76,col 9)-(line 76,col 38)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.dfp.DfpTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/dfp/DfpTest.java",
        "signature": "org.apache.commons.math3.dfp.DfpTest.testByteConstructor()",
        "snippet": "    @Test\n    public void testByteConstructor() {\n        Assert.assertEquals(\"0.\", new Dfp(field, (byte) 0).toString());\n        Assert.assertEquals(\"1.\", new Dfp(field, (byte) 1).toString());\n        Assert.assertEquals(\"-1.\", new Dfp(field, (byte) -1).toString());\n        Assert.assertEquals(\"-128.\", new Dfp(field, Byte.MIN_VALUE).toString());\n        Assert.assertEquals(\"127.\", new Dfp(field, Byte.MAX_VALUE).toString());\n    }\n",
        "begin_line": 79,
        "end_line": 86,
        "comment": "",
        "child_ranges": [
            "(line 81,col 9)-(line 81,col 71)",
            "(line 82,col 9)-(line 82,col 71)",
            "(line 83,col 9)-(line 83,col 73)",
            "(line 84,col 9)-(line 84,col 80)",
            "(line 85,col 9)-(line 85,col 79)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.dfp.DfpTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/dfp/DfpTest.java",
        "signature": "org.apache.commons.math3.dfp.DfpTest.testIntConstructor()",
        "snippet": "    @Test\n    public void testIntConstructor() {\n        Assert.assertEquals(\"0.\", new Dfp(field, 0).toString());\n        Assert.assertEquals(\"1.\", new Dfp(field, 1).toString());\n        Assert.assertEquals(\"-1.\", new Dfp(field, -1).toString());\n        Assert.assertEquals(\"1234567890.\", new Dfp(field, 1234567890).toString());\n        Assert.assertEquals(\"-1234567890.\", new Dfp(field, -1234567890).toString());\n        Assert.assertEquals(\"-2147483648.\", new Dfp(field, Integer.MIN_VALUE).toString());\n        Assert.assertEquals(\"2147483647.\", new Dfp(field, Integer.MAX_VALUE).toString());\n    }\n",
        "begin_line": 88,
        "end_line": 97,
        "comment": "",
        "child_ranges": [
            "(line 90,col 9)-(line 90,col 64)",
            "(line 91,col 9)-(line 91,col 64)",
            "(line 92,col 9)-(line 92,col 66)",
            "(line 93,col 9)-(line 93,col 82)",
            "(line 94,col 9)-(line 94,col 84)",
            "(line 95,col 9)-(line 95,col 90)",
            "(line 96,col 9)-(line 96,col 89)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.dfp.DfpTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/dfp/DfpTest.java",
        "signature": "org.apache.commons.math3.dfp.DfpTest.testLongConstructor()",
        "snippet": "    @Test\n    public void testLongConstructor() {\n        Assert.assertEquals(\"0.\", new Dfp(field, 0l).toString());\n        Assert.assertEquals(\"1.\", new Dfp(field, 1l).toString());\n        Assert.assertEquals(\"-1.\", new Dfp(field, -1l).toString());\n        Assert.assertEquals(\"1234567890.\", new Dfp(field, 1234567890l).toString());\n        Assert.assertEquals(\"-1234567890.\", new Dfp(field, -1234567890l).toString());\n        Assert.assertEquals(\"-9223372036854775808.\", new Dfp(field, Long.MIN_VALUE).toString());\n        Assert.assertEquals(\"9223372036854775807.\", new Dfp(field, Long.MAX_VALUE).toString());\n    }\n",
        "begin_line": 99,
        "end_line": 108,
        "comment": "",
        "child_ranges": [
            "(line 101,col 9)-(line 101,col 65)",
            "(line 102,col 9)-(line 102,col 65)",
            "(line 103,col 9)-(line 103,col 67)",
            "(line 104,col 9)-(line 104,col 83)",
            "(line 105,col 9)-(line 105,col 85)",
            "(line 106,col 9)-(line 106,col 96)",
            "(line 107,col 9)-(line 107,col 95)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.dfp.DfpTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/dfp/DfpTest.java",
        "signature": "org.apache.commons.math3.dfp.DfpTest.testAdd()",
        "snippet": "    @Test\n    public void testAdd()\n    {\n        test(field.newDfp(\"1\").add(field.newDfp(\"1\")),      // Basic tests   1+1 = 2\n             field.newDfp(\"2\"),\n             0, \"Add #1\");\n\n        test(field.newDfp(\"1\").add(field.newDfp(\"-1\")),     // 1 + (-1) = 0\n             field.newDfp(\"0\"),\n             0, \"Add #2\");\n\n        test(field.newDfp(\"-1\").add(field.newDfp(\"1\")),     // (-1) + 1 = 0\n             field.newDfp(\"0\"),\n             0, \"Add #3\");\n\n        test(field.newDfp(\"-1\").add(field.newDfp(\"-1\")),     // (-1) + (-1) = -2\n             field.newDfp(\"-2\"),\n             0, \"Add #4\");\n\n        // rounding mode is round half even\n\n        test(field.newDfp(\"1\").add(field.newDfp(\"1e-16\")),     // rounding on add\n             field.newDfp(\"1.0000000000000001\"),\n             0, \"Add #5\");\n\n        test(field.newDfp(\"1\").add(field.newDfp(\"1e-17\")),     // rounding on add\n             field.newDfp(\"1\"),\n             DfpField.FLAG_INEXACT, \"Add #6\");\n\n        test(field.newDfp(\"0.90999999999999999999\").add(field.newDfp(\"0.1\")),     // rounding on add\n             field.newDfp(\"1.01\"),\n             DfpField.FLAG_INEXACT, \"Add #7\");\n\n        test(field.newDfp(\".10000000000000005000\").add(field.newDfp(\".9\")),     // rounding on add\n             field.newDfp(\"1.\"),\n             DfpField.FLAG_INEXACT, \"Add #8\");\n\n        test(field.newDfp(\".10000000000000015000\").add(field.newDfp(\".9\")),     // rounding on add\n             field.newDfp(\"1.0000000000000002\"),\n             DfpField.FLAG_INEXACT, \"Add #9\");\n\n        test(field.newDfp(\".10000000000000014999\").add(field.newDfp(\".9\")),     // rounding on add\n             field.newDfp(\"1.0000000000000001\"),\n             DfpField.FLAG_INEXACT, \"Add #10\");\n\n        test(field.newDfp(\".10000000000000015001\").add(field.newDfp(\".9\")),     // rounding on add\n             field.newDfp(\"1.0000000000000002\"),\n             DfpField.FLAG_INEXACT, \"Add #11\");\n\n        test(field.newDfp(\".11111111111111111111\").add(field.newDfp(\"11.1111111111111111\")), // rounding on add\n             field.newDfp(\"11.22222222222222222222\"),\n             DfpField.FLAG_INEXACT, \"Add #12\");\n\n        test(field.newDfp(\".11111111111111111111\").add(field.newDfp(\"1111111111111111.1111\")), // rounding on add\n             field.newDfp(\"1111111111111111.2222\"),\n             DfpField.FLAG_INEXACT, \"Add #13\");\n\n        test(field.newDfp(\".11111111111111111111\").add(field.newDfp(\"11111111111111111111\")), // rounding on add\n             field.newDfp(\"11111111111111111111\"),\n             DfpField.FLAG_INEXACT, \"Add #14\");\n\n        test(field.newDfp(\"9.9999999999999999999e131071\").add(field.newDfp(\"-1e131052\")), // overflow on add\n             field.newDfp(\"9.9999999999999999998e131071\"),\n             0, \"Add #15\");\n\n        test(field.newDfp(\"9.9999999999999999999e131071\").add(field.newDfp(\"1e131052\")), // overflow on add\n             pinf,\n             DfpField.FLAG_OVERFLOW, \"Add #16\");\n\n        test(field.newDfp(\"-9.9999999999999999999e131071\").add(field.newDfp(\"-1e131052\")), // overflow on add\n             ninf,\n             DfpField.FLAG_OVERFLOW, \"Add #17\");\n\n        test(field.newDfp(\"-9.9999999999999999999e131071\").add(field.newDfp(\"1e131052\")), // overflow on add\n             field.newDfp(\"-9.9999999999999999998e131071\"),\n             0, \"Add #18\");\n\n        test(field.newDfp(\"1e-131072\").add(field.newDfp(\"1e-131072\")), // underflow on add\n             field.newDfp(\"2e-131072\"),\n             0, \"Add #19\");\n\n        test(field.newDfp(\"1.0000000000000001e-131057\").add(field.newDfp(\"-1e-131057\")), // underflow on add\n             field.newDfp(\"1e-131073\"),\n             DfpField.FLAG_UNDERFLOW, \"Add #20\");\n\n        test(field.newDfp(\"1.1e-131072\").add(field.newDfp(\"-1e-131072\")), // underflow on add\n             field.newDfp(\"1e-131073\"),\n             DfpField.FLAG_UNDERFLOW, \"Add #21\");\n\n        test(field.newDfp(\"1.0000000000000001e-131072\").add(field.newDfp(\"-1e-131072\")), // underflow on add\n             field.newDfp(\"1e-131088\"),\n             DfpField.FLAG_UNDERFLOW, \"Add #22\");\n\n        test(field.newDfp(\"1.0000000000000001e-131078\").add(field.newDfp(\"-1e-131078\")), // underflow on add\n             field.newDfp(\"0\"),\n             DfpField.FLAG_UNDERFLOW, \"Add #23\");\n\n        test(field.newDfp(\"1.0\").add(field.newDfp(\"-1e-20\")), // loss of precision on alignment?\n             field.newDfp(\"0.99999999999999999999\"),\n             0, \"Add #23.1\");\n\n        test(field.newDfp(\"-0.99999999999999999999\").add(field.newDfp(\"1\")), // proper normalization?\n             field.newDfp(\"0.00000000000000000001\"),\n             0, \"Add #23.2\");\n\n        test(field.newDfp(\"1\").add(field.newDfp(\"0\")), // adding zeros\n             field.newDfp(\"1\"),\n             0, \"Add #24\");\n\n        test(field.newDfp(\"0\").add(field.newDfp(\"0\")), // adding zeros\n             field.newDfp(\"0\"),\n             0, \"Add #25\");\n\n        test(field.newDfp(\"-0\").add(field.newDfp(\"0\")), // adding zeros\n             field.newDfp(\"0\"),\n             0, \"Add #26\");\n\n        test(field.newDfp(\"0\").add(field.newDfp(\"-0\")), // adding zeros\n             field.newDfp(\"0\"),\n             0, \"Add #27\");\n\n        test(field.newDfp(\"-0\").add(field.newDfp(\"-0\")), // adding zeros\n             field.newDfp(\"-0\"),\n             0, \"Add #28\");\n\n        test(field.newDfp(\"1e-20\").add(field.newDfp(\"0\")), // adding zeros\n             field.newDfp(\"1e-20\"),\n             0, \"Add #29\");\n\n        test(field.newDfp(\"1e-40\").add(field.newDfp(\"0\")), // adding zeros\n             field.newDfp(\"1e-40\"),\n             0, \"Add #30\");\n\n        test(pinf.add(ninf), // adding infinities\n             nan,\n             DfpField.FLAG_INVALID, \"Add #31\");\n\n        test(ninf.add(pinf), // adding infinities\n             nan,\n             DfpField.FLAG_INVALID, \"Add #32\");\n\n        test(ninf.add(ninf), // adding infinities\n             ninf,\n             0, \"Add #33\");\n\n        test(pinf.add(pinf), // adding infinities\n             pinf,\n             0, \"Add #34\");\n\n        test(pinf.add(field.newDfp(\"0\")), // adding infinities\n             pinf,\n             0, \"Add #35\");\n\n        test(pinf.add(field.newDfp(\"-1e131071\")), // adding infinities\n             pinf,\n             0, \"Add #36\");\n\n        test(pinf.add(field.newDfp(\"1e131071\")), // adding infinities\n             pinf,\n             0, \"Add #37\");\n\n        test(field.newDfp(\"0\").add(pinf), // adding infinities\n             pinf,\n             0, \"Add #38\");\n\n        test(field.newDfp(\"-1e131071\").add(pinf), // adding infinities\n             pinf,\n             0, \"Add #39\");\n\n        test(field.newDfp(\"1e131071\").add(pinf), // adding infinities\n             pinf,\n             0, \"Add #40\");\n\n        test(ninf.add(field.newDfp(\"0\")), // adding infinities\n             ninf,\n             0, \"Add #41\");\n\n        test(ninf.add(field.newDfp(\"-1e131071\")), // adding infinities\n             ninf,\n             0, \"Add #42\");\n\n        test(ninf.add(field.newDfp(\"1e131071\")), // adding infinities\n             ninf,\n             0, \"Add #43\");\n\n        test(field.newDfp(\"0\").add(ninf), // adding infinities\n             ninf,\n             0, \"Add #44\");\n\n        test(field.newDfp(\"-1e131071\").add(ninf), // adding infinities\n             ninf,\n             0, \"Add #45\");\n\n        test(field.newDfp(\"1e131071\").add(ninf), // adding infinities\n             ninf,\n             0, \"Add #46\");\n\n        test(field.newDfp(\"9.9999999999999999999e131071\").add(field.newDfp(\"5e131051\")),  // overflow\n             pinf,\n             DfpField.FLAG_OVERFLOW, \"Add #47\");\n\n        test(field.newDfp(\"9.9999999999999999999e131071\").add(field.newDfp(\"4.9999999999999999999e131051\")),  // overflow\n             field.newDfp(\"9.9999999999999999999e131071\"),\n             DfpField.FLAG_INEXACT, \"Add #48\");\n\n        test(nan.add(field.newDfp(\"1\")),\n             nan,\n             0, \"Add #49\");\n\n        test(field.newDfp(\"1\").add(nan),\n             nan,\n             0, \"Add #50\");\n\n        test(field.newDfp(\"12345678123456781234\").add(field.newDfp(\"0.12345678123456781234\")),\n             field.newDfp(\"12345678123456781234\"),\n             DfpField.FLAG_INEXACT, \"Add #51\");\n\n        test(field.newDfp(\"12345678123456781234\").add(field.newDfp(\"123.45678123456781234\")),\n             field.newDfp(\"12345678123456781357\"),\n             DfpField.FLAG_INEXACT, \"Add #52\");\n\n        test(field.newDfp(\"123.45678123456781234\").add(field.newDfp(\"12345678123456781234\")),\n             field.newDfp(\"12345678123456781357\"),\n             DfpField.FLAG_INEXACT, \"Add #53\");\n\n        test(field.newDfp(\"12345678123456781234\").add(field.newDfp(\".00001234567812345678\")),\n             field.newDfp(\"12345678123456781234\"),\n             DfpField.FLAG_INEXACT, \"Add #54\");\n\n        test(field.newDfp(\"12345678123456781234\").add(field.newDfp(\".00000000123456781234\")),\n             field.newDfp(\"12345678123456781234\"),\n             DfpField.FLAG_INEXACT, \"Add #55\");\n\n        test(field.newDfp(\"-0\").add(field.newDfp(\"-0\")),\n             field.newDfp(\"-0\"),\n             0, \"Add #56\");\n\n        test(field.newDfp(\"0\").add(field.newDfp(\"-0\")),\n             field.newDfp(\"0\"),\n             0, \"Add #57\");\n\n        test(field.newDfp(\"-0\").add(field.newDfp(\"0\")),\n             field.newDfp(\"0\"),\n             0, \"Add #58\");\n\n        test(field.newDfp(\"0\").add(field.newDfp(\"0\")),\n             field.newDfp(\"0\"),\n             0, \"Add #59\");\n    }\n",
        "begin_line": 113,
        "end_line": 361,
        "comment": "\n     *  Test addition\n     ",
        "child_ranges": [
            "(line 116,col 9)-(line 118,col 26)",
            "(line 120,col 9)-(line 122,col 26)",
            "(line 124,col 9)-(line 126,col 26)",
            "(line 128,col 9)-(line 130,col 26)",
            "(line 134,col 9)-(line 136,col 26)",
            "(line 138,col 9)-(line 140,col 46)",
            "(line 142,col 9)-(line 144,col 46)",
            "(line 146,col 9)-(line 148,col 46)",
            "(line 150,col 9)-(line 152,col 46)",
            "(line 154,col 9)-(line 156,col 47)",
            "(line 158,col 9)-(line 160,col 47)",
            "(line 162,col 9)-(line 164,col 47)",
            "(line 166,col 9)-(line 168,col 47)",
            "(line 170,col 9)-(line 172,col 47)",
            "(line 174,col 9)-(line 176,col 27)",
            "(line 178,col 9)-(line 180,col 48)",
            "(line 182,col 9)-(line 184,col 48)",
            "(line 186,col 9)-(line 188,col 27)",
            "(line 190,col 9)-(line 192,col 27)",
            "(line 194,col 9)-(line 196,col 49)",
            "(line 198,col 9)-(line 200,col 49)",
            "(line 202,col 9)-(line 204,col 49)",
            "(line 206,col 9)-(line 208,col 49)",
            "(line 210,col 9)-(line 212,col 29)",
            "(line 214,col 9)-(line 216,col 29)",
            "(line 218,col 9)-(line 220,col 27)",
            "(line 222,col 9)-(line 224,col 27)",
            "(line 226,col 9)-(line 228,col 27)",
            "(line 230,col 9)-(line 232,col 27)",
            "(line 234,col 9)-(line 236,col 27)",
            "(line 238,col 9)-(line 240,col 27)",
            "(line 242,col 9)-(line 244,col 27)",
            "(line 246,col 9)-(line 248,col 47)",
            "(line 250,col 9)-(line 252,col 47)",
            "(line 254,col 9)-(line 256,col 27)",
            "(line 258,col 9)-(line 260,col 27)",
            "(line 262,col 9)-(line 264,col 27)",
            "(line 266,col 9)-(line 268,col 27)",
            "(line 270,col 9)-(line 272,col 27)",
            "(line 274,col 9)-(line 276,col 27)",
            "(line 278,col 9)-(line 280,col 27)",
            "(line 282,col 9)-(line 284,col 27)",
            "(line 286,col 9)-(line 288,col 27)",
            "(line 290,col 9)-(line 292,col 27)",
            "(line 294,col 9)-(line 296,col 27)",
            "(line 298,col 9)-(line 300,col 27)",
            "(line 302,col 9)-(line 304,col 27)",
            "(line 306,col 9)-(line 308,col 27)",
            "(line 310,col 9)-(line 312,col 48)",
            "(line 314,col 9)-(line 316,col 47)",
            "(line 318,col 9)-(line 320,col 27)",
            "(line 322,col 9)-(line 324,col 27)",
            "(line 326,col 9)-(line 328,col 47)",
            "(line 330,col 9)-(line 332,col 47)",
            "(line 334,col 9)-(line 336,col 47)",
            "(line 338,col 9)-(line 340,col 47)",
            "(line 342,col 9)-(line 344,col 47)",
            "(line 346,col 9)-(line 348,col 27)",
            "(line 350,col 9)-(line 352,col 27)",
            "(line 354,col 9)-(line 356,col 27)",
            "(line 358,col 9)-(line 360,col 27)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.dfp.DfpTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/dfp/DfpTest.java",
        "signature": "org.apache.commons.math3.dfp.DfpTest.cmptst(org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp, java.lang.String, boolean, double)",
        "snippet": "    private void cmptst(Dfp a, Dfp b, String op, boolean result, double num)\n    {\n        if (op == \"equal\")\n            if (a.equals(b) != result)\n                Assert.fail(\"assersion failed.  \"+op+\" compare #\"+num);\n\n        if (op == \"unequal\")\n            if (a.unequal(b) != result)\n                Assert.fail(\"assersion failed.  \"+op+\" compare #\"+num);\n\n        if (op == \"lessThan\")\n            if (a.lessThan(b) != result)\n                Assert.fail(\"assersion failed.  \"+op+\" compare #\"+num);\n\n        if (op == \"greaterThan\")\n            if (a.greaterThan(b) != result)\n                Assert.fail(\"assersion failed.  \"+op+\" compare #\"+num);\n    }\n",
        "begin_line": 368,
        "end_line": 385,
        "comment": " utility function to help test comparisons",
        "child_ranges": [
            "(line 370,col 9)-(line 372,col 71)",
            "(line 374,col 9)-(line 376,col 71)",
            "(line 378,col 9)-(line 380,col 71)",
            "(line 382,col 9)-(line 384,col 71)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.dfp.DfpTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/dfp/DfpTest.java",
        "signature": "org.apache.commons.math3.dfp.DfpTest.testCompare()",
        "snippet": "    @Test\n    public void  testCompare()\n    {\n        // test equal() comparison\n        // check zero vs. zero\n        field.clearIEEEFlags();\n\n        cmptst(field.newDfp(\"0\"), field.newDfp(\"0\"), \"equal\", true, 1);         // 0 == 0\n        cmptst(field.newDfp(\"0\"), field.newDfp(\"-0\"), \"equal\", true, 2);        // 0 == -0\n        cmptst(field.newDfp(\"-0\"), field.newDfp(\"-0\"), \"equal\", true, 3);       // -0 == -0\n        cmptst(field.newDfp(\"-0\"), field.newDfp(\"0\"), \"equal\", true, 4);        // -0 == 0\n\n        // check zero vs normal numbers\n\n        cmptst(field.newDfp(\"0\"), field.newDfp(\"1\"), \"equal\", false, 5);         // 0 == 1\n        cmptst(field.newDfp(\"1\"), field.newDfp(\"0\"), \"equal\", false, 6);         // 1 == 0\n        cmptst(field.newDfp(\"-1\"), field.newDfp(\"0\"), \"equal\", false, 7);        // -1 == 0\n        cmptst(field.newDfp(\"0\"), field.newDfp(\"-1\"), \"equal\", false, 8);        // 0 == -1\n        cmptst(field.newDfp(\"0\"), field.newDfp(\"1e-131072\"), \"equal\", false, 9); // 0 == 1e-131072\n        // check flags\n        if (field.getIEEEFlags() != 0)\n            Assert.fail(\"assersion failed.  compare flags = \"+field.getIEEEFlags());\n\n        cmptst(field.newDfp(\"0\"), field.newDfp(\"1e-131078\"), \"equal\", false, 10); // 0 == 1e-131078\n\n        // check flags  -- underflow should be set\n        if (field.getIEEEFlags() != DfpField.FLAG_UNDERFLOW)\n            Assert.fail(\"assersion failed.  compare flags = \"+field.getIEEEFlags());\n\n        field.clearIEEEFlags();\n\n        cmptst(field.newDfp(\"0\"), field.newDfp(\"1e+131071\"), \"equal\", false, 11); // 0 == 1e+131071\n\n        // check zero vs infinities\n\n        cmptst(field.newDfp(\"0\"), pinf, \"equal\", false, 12);    // 0 == pinf\n        cmptst(field.newDfp(\"0\"), ninf, \"equal\", false, 13);    // 0 == ninf\n        cmptst(field.newDfp(\"-0\"), pinf, \"equal\", false, 14);   // -0 == pinf\n        cmptst(field.newDfp(\"-0\"), ninf, \"equal\", false, 15);   // -0 == ninf\n        cmptst(pinf, field.newDfp(\"0\"), \"equal\", false, 16);    // pinf == 0\n        cmptst(ninf, field.newDfp(\"0\"), \"equal\", false, 17);    // ninf == 0\n        cmptst(pinf, field.newDfp(\"-0\"), \"equal\", false, 18);   // pinf == -0\n        cmptst(ninf, field.newDfp(\"-0\"), \"equal\", false, 19);   // ninf == -0\n        cmptst(ninf, pinf, \"equal\", false, 19.10);     // ninf == pinf\n        cmptst(pinf, ninf, \"equal\", false, 19.11);     // pinf == ninf\n        cmptst(pinf, pinf, \"equal\", true, 19.12);     // pinf == pinf\n        cmptst(ninf, ninf, \"equal\", true, 19.13);     // ninf == ninf\n\n        // check some normal numbers\n        cmptst(field.newDfp(\"1\"), field.newDfp(\"1\"), \"equal\", true, 20);   // 1 == 1\n        cmptst(field.newDfp(\"1\"), field.newDfp(\"-1\"), \"equal\", false, 21);   // 1 == -1\n        cmptst(field.newDfp(\"-1\"), field.newDfp(\"-1\"), \"equal\", true, 22);   // -1 == -1\n        cmptst(field.newDfp(\"1\"), field.newDfp(\"1.0000000000000001\"), \"equal\", false, 23);   // 1 == 1.0000000000000001\n\n        // The tests below checks to ensure that comparisons don't set FLAG_INEXACT\n        // 100000 == 1.0000000000000001\n        cmptst(field.newDfp(\"1e20\"), field.newDfp(\"1.0000000000000001\"), \"equal\", false, 24);\n        if (field.getIEEEFlags() != 0)\n            Assert.fail(\"assersion failed.  compare flags = \"+field.getIEEEFlags());\n\n        cmptst(field.newDfp(\"0.000001\"), field.newDfp(\"1e-6\"), \"equal\", true, 25);\n\n        // check some nans -- nans shouldnt equal anything\n\n        cmptst(snan, snan, \"equal\", false, 27);\n        cmptst(qnan, qnan, \"equal\", false, 28);\n        cmptst(snan, qnan, \"equal\", false, 29);\n        cmptst(qnan, snan, \"equal\", false, 30);\n        cmptst(qnan, field.newDfp(\"0\"), \"equal\", false, 31);\n        cmptst(snan, field.newDfp(\"0\"), \"equal\", false, 32);\n        cmptst(field.newDfp(\"0\"), snan, \"equal\", false, 33);\n        cmptst(field.newDfp(\"0\"), qnan, \"equal\", false, 34);\n        cmptst(qnan, pinf, \"equal\", false, 35);\n        cmptst(snan, pinf, \"equal\", false, 36);\n        cmptst(pinf, snan, \"equal\", false, 37);\n        cmptst(pinf, qnan, \"equal\", false, 38);\n        cmptst(qnan, ninf, \"equal\", false, 39);\n        cmptst(snan, ninf, \"equal\", false, 40);\n        cmptst(ninf, snan, \"equal\", false, 41);\n        cmptst(ninf, qnan, \"equal\", false, 42);\n        cmptst(qnan, field.newDfp(\"-1\"), \"equal\", false, 43);\n        cmptst(snan, field.newDfp(\"-1\"), \"equal\", false, 44);\n        cmptst(field.newDfp(\"-1\"), snan, \"equal\", false, 45);\n        cmptst(field.newDfp(\"-1\"), qnan, \"equal\", false, 46);\n        cmptst(qnan, field.newDfp(\"1\"), \"equal\", false, 47);\n        cmptst(snan, field.newDfp(\"1\"), \"equal\", false, 48);\n        cmptst(field.newDfp(\"1\"), snan, \"equal\", false, 49);\n        cmptst(field.newDfp(\"1\"), qnan, \"equal\", false, 50);\n        cmptst(snan.negate(), snan, \"equal\", false, 51);\n        cmptst(qnan.negate(), qnan, \"equal\", false, 52);\n\n        //\n        // Tests for un equal  -- do it all over again\n        //\n\n        cmptst(field.newDfp(\"0\"), field.newDfp(\"0\"), \"unequal\", false, 1);         // 0 == 0\n        cmptst(field.newDfp(\"0\"), field.newDfp(\"-0\"), \"unequal\", false, 2);        // 0 == -0\n        cmptst(field.newDfp(\"-0\"), field.newDfp(\"-0\"), \"unequal\", false, 3);       // -0 == -0\n        cmptst(field.newDfp(\"-0\"), field.newDfp(\"0\"), \"unequal\", false, 4);        // -0 == 0\n\n        // check zero vs normal numbers\n\n        cmptst(field.newDfp(\"0\"), field.newDfp(\"1\"), \"unequal\", true, 5);         // 0 == 1\n        cmptst(field.newDfp(\"1\"), field.newDfp(\"0\"), \"unequal\", true, 6);         // 1 == 0\n        cmptst(field.newDfp(\"-1\"), field.newDfp(\"0\"), \"unequal\", true, 7);        // -1 == 0\n        cmptst(field.newDfp(\"0\"), field.newDfp(\"-1\"), \"unequal\", true, 8);        // 0 == -1\n        cmptst(field.newDfp(\"0\"), field.newDfp(\"1e-131072\"), \"unequal\", true, 9); // 0 == 1e-131072\n        // check flags\n        if (field.getIEEEFlags() != 0)\n            Assert.fail(\"assersion failed.  compare flags = \"+field.getIEEEFlags());\n\n        cmptst(field.newDfp(\"0\"), field.newDfp(\"1e-131078\"), \"unequal\", true, 10); // 0 == 1e-131078\n\n        // check flags  -- underflow should be set\n        if (field.getIEEEFlags() != DfpField.FLAG_UNDERFLOW)\n            Assert.fail(\"assersion failed.  compare flags = \"+field.getIEEEFlags());\n\n        field.clearIEEEFlags();\n\n        cmptst(field.newDfp(\"0\"), field.newDfp(\"1e+131071\"), \"unequal\", true, 11); // 0 == 1e+131071\n\n        // check zero vs infinities\n\n        cmptst(field.newDfp(\"0\"), pinf, \"unequal\", true, 12);    // 0 == pinf\n        cmptst(field.newDfp(\"0\"), ninf, \"unequal\", true, 13);    // 0 == ninf\n        cmptst(field.newDfp(\"-0\"), pinf, \"unequal\", true, 14);   // -0 == pinf\n        cmptst(field.newDfp(\"-0\"), ninf, \"unequal\", true, 15);   // -0 == ninf\n        cmptst(pinf, field.newDfp(\"0\"), \"unequal\", true, 16);    // pinf == 0\n        cmptst(ninf, field.newDfp(\"0\"), \"unequal\", true, 17);    // ninf == 0\n        cmptst(pinf, field.newDfp(\"-0\"), \"unequal\", true, 18);   // pinf == -0\n        cmptst(ninf, field.newDfp(\"-0\"), \"unequal\", true, 19);   // ninf == -0\n        cmptst(ninf, pinf, \"unequal\", true, 19.10);     // ninf == pinf\n        cmptst(pinf, ninf, \"unequal\", true, 19.11);     // pinf == ninf\n        cmptst(pinf, pinf, \"unequal\", false, 19.12);     // pinf == pinf\n        cmptst(ninf, ninf, \"unequal\", false, 19.13);     // ninf == ninf\n\n        // check some normal numbers\n        cmptst(field.newDfp(\"1\"), field.newDfp(\"1\"), \"unequal\", false, 20);   // 1 == 1\n        cmptst(field.newDfp(\"1\"), field.newDfp(\"-1\"), \"unequal\", true, 21);   // 1 == -1\n        cmptst(field.newDfp(\"-1\"), field.newDfp(\"-1\"), \"unequal\", false, 22);   // -1 == -1\n        cmptst(field.newDfp(\"1\"), field.newDfp(\"1.0000000000000001\"), \"unequal\", true, 23);   // 1 == 1.0000000000000001\n\n        // The tests below checks to ensure that comparisons don't set FLAG_INEXACT\n        // 100000 == 1.0000000000000001\n        cmptst(field.newDfp(\"1e20\"), field.newDfp(\"1.0000000000000001\"), \"unequal\", true, 24);\n        if (field.getIEEEFlags() != 0)\n            Assert.fail(\"assersion failed.  compare flags = \"+field.getIEEEFlags());\n\n        cmptst(field.newDfp(\"0.000001\"), field.newDfp(\"1e-6\"), \"unequal\", false, 25);\n\n        // check some nans -- nans shouldnt be unequal to anything\n\n        cmptst(snan, snan, \"unequal\", false, 27);\n        cmptst(qnan, qnan, \"unequal\", false, 28);\n        cmptst(snan, qnan, \"unequal\", false, 29);\n        cmptst(qnan, snan, \"unequal\", false, 30);\n        cmptst(qnan, field.newDfp(\"0\"), \"unequal\", false, 31);\n        cmptst(snan, field.newDfp(\"0\"), \"unequal\", false, 32);\n        cmptst(field.newDfp(\"0\"), snan, \"unequal\", false, 33);\n        cmptst(field.newDfp(\"0\"), qnan, \"unequal\", false, 34);\n        cmptst(qnan, pinf, \"unequal\", false, 35);\n        cmptst(snan, pinf, \"unequal\", false, 36);\n        cmptst(pinf, snan, \"unequal\", false, 37);\n        cmptst(pinf, qnan, \"unequal\", false, 38);\n        cmptst(qnan, ninf, \"unequal\", false, 39);\n        cmptst(snan, ninf, \"unequal\", false, 40);\n        cmptst(ninf, snan, \"unequal\", false, 41);\n        cmptst(ninf, qnan, \"unequal\", false, 42);\n        cmptst(qnan, field.newDfp(\"-1\"), \"unequal\", false, 43);\n        cmptst(snan, field.newDfp(\"-1\"), \"unequal\", false, 44);\n        cmptst(field.newDfp(\"-1\"), snan, \"unequal\", false, 45);\n        cmptst(field.newDfp(\"-1\"), qnan, \"unequal\", false, 46);\n        cmptst(qnan, field.newDfp(\"1\"), \"unequal\", false, 47);\n        cmptst(snan, field.newDfp(\"1\"), \"unequal\", false, 48);\n        cmptst(field.newDfp(\"1\"), snan, \"unequal\", false, 49);\n        cmptst(field.newDfp(\"1\"), qnan, \"unequal\", false, 50);\n        cmptst(snan.negate(), snan, \"unequal\", false, 51);\n        cmptst(qnan.negate(), qnan, \"unequal\", false, 52);\n\n        if (field.getIEEEFlags() != 0)\n            Assert.fail(\"assersion failed.  compare unequal flags = \"+field.getIEEEFlags());\n\n        //\n        // Tests for lessThan  -- do it all over again\n        //\n\n        cmptst(field.newDfp(\"0\"), field.newDfp(\"0\"), \"lessThan\", false, 1);         // 0 < 0\n        cmptst(field.newDfp(\"0\"), field.newDfp(\"-0\"), \"lessThan\", false, 2);        // 0 < -0\n        cmptst(field.newDfp(\"-0\"), field.newDfp(\"-0\"), \"lessThan\", false, 3);       // -0 < -0\n        cmptst(field.newDfp(\"-0\"), field.newDfp(\"0\"), \"lessThan\", false, 4);        // -0 < 0\n\n        // check zero vs normal numbers\n\n        cmptst(field.newDfp(\"0\"), field.newDfp(\"1\"), \"lessThan\", true, 5);         // 0 < 1\n        cmptst(field.newDfp(\"1\"), field.newDfp(\"0\"), \"lessThan\", false, 6);         // 1 < 0\n        cmptst(field.newDfp(\"-1\"), field.newDfp(\"0\"), \"lessThan\", true, 7);        // -1 < 0\n        cmptst(field.newDfp(\"0\"), field.newDfp(\"-1\"), \"lessThan\", false, 8);        // 0 < -1\n        cmptst(field.newDfp(\"0\"), field.newDfp(\"1e-131072\"), \"lessThan\", true, 9); // 0 < 1e-131072\n        // check flags\n        if (field.getIEEEFlags() != 0)\n            Assert.fail(\"assersion failed.  compare flags = \"+field.getIEEEFlags());\n\n        cmptst(field.newDfp(\"0\"), field.newDfp(\"1e-131078\"), \"lessThan\", true, 10); // 0 < 1e-131078\n\n        // check flags  -- underflow should be set\n        if (field.getIEEEFlags() != DfpField.FLAG_UNDERFLOW)\n            Assert.fail(\"assersion failed.  compare flags = \"+field.getIEEEFlags());\n        field.clearIEEEFlags();\n\n        cmptst(field.newDfp(\"0\"), field.newDfp(\"1e+131071\"), \"lessThan\", true, 11); // 0 < 1e+131071\n\n        // check zero vs infinities\n\n        cmptst(field.newDfp(\"0\"), pinf, \"lessThan\", true, 12);    // 0 < pinf\n        cmptst(field.newDfp(\"0\"), ninf, \"lessThan\", false, 13);    // 0 < ninf\n        cmptst(field.newDfp(\"-0\"), pinf, \"lessThan\", true, 14);   // -0 < pinf\n        cmptst(field.newDfp(\"-0\"), ninf, \"lessThan\", false, 15);   // -0 < ninf\n        cmptst(pinf, field.newDfp(\"0\"), \"lessThan\", false, 16);    // pinf < 0\n        cmptst(ninf, field.newDfp(\"0\"), \"lessThan\", true, 17);    // ninf < 0\n        cmptst(pinf, field.newDfp(\"-0\"), \"lessThan\", false, 18);   // pinf < -0\n        cmptst(ninf, field.newDfp(\"-0\"), \"lessThan\", true, 19);   // ninf < -0\n        cmptst(ninf, pinf, \"lessThan\", true, 19.10);     // ninf < pinf\n        cmptst(pinf, ninf, \"lessThan\", false, 19.11);     // pinf < ninf\n        cmptst(pinf, pinf, \"lessThan\", false, 19.12);     // pinf < pinf\n        cmptst(ninf, ninf, \"lessThan\", false, 19.13);     // ninf < ninf\n\n        // check some normal numbers\n        cmptst(field.newDfp(\"1\"), field.newDfp(\"1\"), \"lessThan\", false, 20);   // 1 < 1\n        cmptst(field.newDfp(\"1\"), field.newDfp(\"-1\"), \"lessThan\", false, 21);   // 1 < -1\n        cmptst(field.newDfp(\"-1\"), field.newDfp(\"-1\"), \"lessThan\", false, 22);   // -1 < -1\n        cmptst(field.newDfp(\"1\"), field.newDfp(\"1.0000000000000001\"), \"lessThan\", true, 23);   // 1 < 1.0000000000000001\n\n        // The tests below checks to ensure that comparisons don't set FLAG_INEXACT\n        // 100000 < 1.0000000000000001\n        cmptst(field.newDfp(\"1e20\"), field.newDfp(\"1.0000000000000001\"), \"lessThan\", false, 24);\n        if (field.getIEEEFlags() != 0)\n            Assert.fail(\"assersion failed.  compare flags = \"+field.getIEEEFlags());\n\n        cmptst(field.newDfp(\"0.000001\"), field.newDfp(\"1e-6\"), \"lessThan\", false, 25);\n\n        // check some nans -- nans shouldnt be lessThan to anything\n        cmptst(snan, snan, \"lessThan\", false, 27);\n        cmptst(qnan, qnan, \"lessThan\", false, 28);\n        cmptst(snan, qnan, \"lessThan\", false, 29);\n        cmptst(qnan, snan, \"lessThan\", false, 30);\n        cmptst(qnan, field.newDfp(\"0\"), \"lessThan\", false, 31);\n        cmptst(snan, field.newDfp(\"0\"), \"lessThan\", false, 32);\n        cmptst(field.newDfp(\"0\"), snan, \"lessThan\", false, 33);\n        cmptst(field.newDfp(\"0\"), qnan, \"lessThan\", false, 34);\n        cmptst(qnan, pinf, \"lessThan\", false, 35);\n        cmptst(snan, pinf, \"lessThan\", false, 36);\n        cmptst(pinf, snan, \"lessThan\", false, 37);\n        cmptst(pinf, qnan, \"lessThan\", false, 38);\n        cmptst(qnan, ninf, \"lessThan\", false, 39);\n        cmptst(snan, ninf, \"lessThan\", false, 40);\n        cmptst(ninf, snan, \"lessThan\", false, 41);\n        cmptst(ninf, qnan, \"lessThan\", false, 42);\n        cmptst(qnan, field.newDfp(\"-1\"), \"lessThan\", false, 43);\n        cmptst(snan, field.newDfp(\"-1\"), \"lessThan\", false, 44);\n        cmptst(field.newDfp(\"-1\"), snan, \"lessThan\", false, 45);\n        cmptst(field.newDfp(\"-1\"), qnan, \"lessThan\", false, 46);\n        cmptst(qnan, field.newDfp(\"1\"), \"lessThan\", false, 47);\n        cmptst(snan, field.newDfp(\"1\"), \"lessThan\", false, 48);\n        cmptst(field.newDfp(\"1\"), snan, \"lessThan\", false, 49);\n        cmptst(field.newDfp(\"1\"), qnan, \"lessThan\", false, 50);\n        cmptst(snan.negate(), snan, \"lessThan\", false, 51);\n        cmptst(qnan.negate(), qnan, \"lessThan\", false, 52);\n\n        //lessThan compares with nans should raise FLAG_INVALID\n        if (field.getIEEEFlags() != DfpField.FLAG_INVALID)\n            Assert.fail(\"assersion failed.  compare lessThan flags = \"+field.getIEEEFlags());\n        field.clearIEEEFlags();\n\n        //\n        // Tests for greaterThan  -- do it all over again\n        //\n\n        cmptst(field.newDfp(\"0\"), field.newDfp(\"0\"), \"greaterThan\", false, 1);         // 0 > 0\n        cmptst(field.newDfp(\"0\"), field.newDfp(\"-0\"), \"greaterThan\", false, 2);        // 0 > -0\n        cmptst(field.newDfp(\"-0\"), field.newDfp(\"-0\"), \"greaterThan\", false, 3);       // -0 > -0\n        cmptst(field.newDfp(\"-0\"), field.newDfp(\"0\"), \"greaterThan\", false, 4);        // -0 > 0\n\n        // check zero vs normal numbers\n\n        cmptst(field.newDfp(\"0\"), field.newDfp(\"1\"), \"greaterThan\", false, 5);         // 0 > 1\n        cmptst(field.newDfp(\"1\"), field.newDfp(\"0\"), \"greaterThan\", true, 6);         // 1 > 0\n        cmptst(field.newDfp(\"-1\"), field.newDfp(\"0\"), \"greaterThan\", false, 7);        // -1 > 0\n        cmptst(field.newDfp(\"0\"), field.newDfp(\"-1\"), \"greaterThan\", true, 8);        // 0 > -1\n        cmptst(field.newDfp(\"0\"), field.newDfp(\"1e-131072\"), \"greaterThan\", false, 9); // 0 > 1e-131072\n        // check flags\n        if (field.getIEEEFlags() != 0)\n            Assert.fail(\"assersion failed.  compare flags = \"+field.getIEEEFlags());\n\n        cmptst(field.newDfp(\"0\"), field.newDfp(\"1e-131078\"), \"greaterThan\", false, 10); // 0 > 1e-131078\n\n        // check flags  -- underflow should be set\n        if (field.getIEEEFlags() != DfpField.FLAG_UNDERFLOW)\n            Assert.fail(\"assersion failed.  compare flags = \"+field.getIEEEFlags());\n        field.clearIEEEFlags();\n\n        cmptst(field.newDfp(\"0\"), field.newDfp(\"1e+131071\"), \"greaterThan\", false, 11); // 0 > 1e+131071\n\n        // check zero vs infinities\n\n        cmptst(field.newDfp(\"0\"), pinf, \"greaterThan\", false, 12);    // 0 > pinf\n        cmptst(field.newDfp(\"0\"), ninf, \"greaterThan\", true, 13);    // 0 > ninf\n        cmptst(field.newDfp(\"-0\"), pinf, \"greaterThan\", false, 14);   // -0 > pinf\n        cmptst(field.newDfp(\"-0\"), ninf, \"greaterThan\", true, 15);   // -0 > ninf\n        cmptst(pinf, field.newDfp(\"0\"), \"greaterThan\", true, 16);    // pinf > 0\n        cmptst(ninf, field.newDfp(\"0\"), \"greaterThan\", false, 17);    // ninf > 0\n        cmptst(pinf, field.newDfp(\"-0\"), \"greaterThan\", true, 18);   // pinf > -0\n        cmptst(ninf, field.newDfp(\"-0\"), \"greaterThan\", false, 19);   // ninf > -0\n        cmptst(ninf, pinf, \"greaterThan\", false, 19.10);     // ninf > pinf\n        cmptst(pinf, ninf, \"greaterThan\", true, 19.11);     // pinf > ninf\n        cmptst(pinf, pinf, \"greaterThan\", false, 19.12);     // pinf > pinf\n        cmptst(ninf, ninf, \"greaterThan\", false, 19.13);     // ninf > ninf\n\n        // check some normal numbers\n        cmptst(field.newDfp(\"1\"), field.newDfp(\"1\"), \"greaterThan\", false, 20);   // 1 > 1\n        cmptst(field.newDfp(\"1\"), field.newDfp(\"-1\"), \"greaterThan\", true, 21);   // 1 > -1\n        cmptst(field.newDfp(\"-1\"), field.newDfp(\"-1\"), \"greaterThan\", false, 22);   // -1 > -1\n        cmptst(field.newDfp(\"1\"), field.newDfp(\"1.0000000000000001\"), \"greaterThan\", false, 23);   // 1 > 1.0000000000000001\n\n        // The tests below checks to ensure that comparisons don't set FLAG_INEXACT\n        // 100000 > 1.0000000000000001\n        cmptst(field.newDfp(\"1e20\"), field.newDfp(\"1.0000000000000001\"), \"greaterThan\", true, 24);\n        if (field.getIEEEFlags() != 0)\n            Assert.fail(\"assersion failed.  compare flags = \"+field.getIEEEFlags());\n\n        cmptst(field.newDfp(\"0.000001\"), field.newDfp(\"1e-6\"), \"greaterThan\", false, 25);\n\n        // check some nans -- nans shouldnt be greaterThan to anything\n        cmptst(snan, snan, \"greaterThan\", false, 27);\n        cmptst(qnan, qnan, \"greaterThan\", false, 28);\n        cmptst(snan, qnan, \"greaterThan\", false, 29);\n        cmptst(qnan, snan, \"greaterThan\", false, 30);\n        cmptst(qnan, field.newDfp(\"0\"), \"greaterThan\", false, 31);\n        cmptst(snan, field.newDfp(\"0\"), \"greaterThan\", false, 32);\n        cmptst(field.newDfp(\"0\"), snan, \"greaterThan\", false, 33);\n        cmptst(field.newDfp(\"0\"), qnan, \"greaterThan\", false, 34);\n        cmptst(qnan, pinf, \"greaterThan\", false, 35);\n        cmptst(snan, pinf, \"greaterThan\", false, 36);\n        cmptst(pinf, snan, \"greaterThan\", false, 37);\n        cmptst(pinf, qnan, \"greaterThan\", false, 38);\n        cmptst(qnan, ninf, \"greaterThan\", false, 39);\n        cmptst(snan, ninf, \"greaterThan\", false, 40);\n        cmptst(ninf, snan, \"greaterThan\", false, 41);\n        cmptst(ninf, qnan, \"greaterThan\", false, 42);\n        cmptst(qnan, field.newDfp(\"-1\"), \"greaterThan\", false, 43);\n        cmptst(snan, field.newDfp(\"-1\"), \"greaterThan\", false, 44);\n        cmptst(field.newDfp(\"-1\"), snan, \"greaterThan\", false, 45);\n        cmptst(field.newDfp(\"-1\"), qnan, \"greaterThan\", false, 46);\n        cmptst(qnan, field.newDfp(\"1\"), \"greaterThan\", false, 47);\n        cmptst(snan, field.newDfp(\"1\"), \"greaterThan\", false, 48);\n        cmptst(field.newDfp(\"1\"), snan, \"greaterThan\", false, 49);\n        cmptst(field.newDfp(\"1\"), qnan, \"greaterThan\", false, 50);\n        cmptst(snan.negate(), snan, \"greaterThan\", false, 51);\n        cmptst(qnan.negate(), qnan, \"greaterThan\", false, 52);\n\n        //greaterThan compares with nans should raise FLAG_INVALID\n        if (field.getIEEEFlags() != DfpField.FLAG_INVALID)\n            Assert.fail(\"assersion failed.  compare greaterThan flags = \"+field.getIEEEFlags());\n        field.clearIEEEFlags();\n    }\n",
        "begin_line": 387,
        "end_line": 750,
        "comment": "",
        "child_ranges": [
            "(line 392,col 9)-(line 392,col 31)",
            "(line 394,col 9)-(line 394,col 71)",
            "(line 395,col 9)-(line 395,col 72)",
            "(line 396,col 9)-(line 396,col 73)",
            "(line 397,col 9)-(line 397,col 72)",
            "(line 401,col 9)-(line 401,col 72)",
            "(line 402,col 9)-(line 402,col 72)",
            "(line 403,col 9)-(line 403,col 73)",
            "(line 404,col 9)-(line 404,col 73)",
            "(line 405,col 9)-(line 405,col 80)",
            "(line 407,col 9)-(line 408,col 84)",
            "(line 410,col 9)-(line 410,col 81)",
            "(line 413,col 9)-(line 414,col 84)",
            "(line 416,col 9)-(line 416,col 31)",
            "(line 418,col 9)-(line 418,col 81)",
            "(line 422,col 9)-(line 422,col 60)",
            "(line 423,col 9)-(line 423,col 60)",
            "(line 424,col 9)-(line 424,col 61)",
            "(line 425,col 9)-(line 425,col 61)",
            "(line 426,col 9)-(line 426,col 60)",
            "(line 427,col 9)-(line 427,col 60)",
            "(line 428,col 9)-(line 428,col 61)",
            "(line 429,col 9)-(line 429,col 61)",
            "(line 430,col 9)-(line 430,col 50)",
            "(line 431,col 9)-(line 431,col 50)",
            "(line 432,col 9)-(line 432,col 49)",
            "(line 433,col 9)-(line 433,col 49)",
            "(line 436,col 9)-(line 436,col 72)",
            "(line 437,col 9)-(line 437,col 74)",
            "(line 438,col 9)-(line 438,col 74)",
            "(line 439,col 9)-(line 439,col 90)",
            "(line 443,col 9)-(line 443,col 93)",
            "(line 444,col 9)-(line 445,col 84)",
            "(line 447,col 9)-(line 447,col 82)",
            "(line 451,col 9)-(line 451,col 47)",
            "(line 452,col 9)-(line 452,col 47)",
            "(line 453,col 9)-(line 453,col 47)",
            "(line 454,col 9)-(line 454,col 47)",
            "(line 455,col 9)-(line 455,col 60)",
            "(line 456,col 9)-(line 456,col 60)",
            "(line 457,col 9)-(line 457,col 60)",
            "(line 458,col 9)-(line 458,col 60)",
            "(line 459,col 9)-(line 459,col 47)",
            "(line 460,col 9)-(line 460,col 47)",
            "(line 461,col 9)-(line 461,col 47)",
            "(line 462,col 9)-(line 462,col 47)",
            "(line 463,col 9)-(line 463,col 47)",
            "(line 464,col 9)-(line 464,col 47)",
            "(line 465,col 9)-(line 465,col 47)",
            "(line 466,col 9)-(line 466,col 47)",
            "(line 467,col 9)-(line 467,col 61)",
            "(line 468,col 9)-(line 468,col 61)",
            "(line 469,col 9)-(line 469,col 61)",
            "(line 470,col 9)-(line 470,col 61)",
            "(line 471,col 9)-(line 471,col 60)",
            "(line 472,col 9)-(line 472,col 60)",
            "(line 473,col 9)-(line 473,col 60)",
            "(line 474,col 9)-(line 474,col 60)",
            "(line 475,col 9)-(line 475,col 56)",
            "(line 476,col 9)-(line 476,col 56)",
            "(line 482,col 9)-(line 482,col 74)",
            "(line 483,col 9)-(line 483,col 75)",
            "(line 484,col 9)-(line 484,col 76)",
            "(line 485,col 9)-(line 485,col 75)",
            "(line 489,col 9)-(line 489,col 73)",
            "(line 490,col 9)-(line 490,col 73)",
            "(line 491,col 9)-(line 491,col 74)",
            "(line 492,col 9)-(line 492,col 74)",
            "(line 493,col 9)-(line 493,col 81)",
            "(line 495,col 9)-(line 496,col 84)",
            "(line 498,col 9)-(line 498,col 82)",
            "(line 501,col 9)-(line 502,col 84)",
            "(line 504,col 9)-(line 504,col 31)",
            "(line 506,col 9)-(line 506,col 82)",
            "(line 510,col 9)-(line 510,col 61)",
            "(line 511,col 9)-(line 511,col 61)",
            "(line 512,col 9)-(line 512,col 62)",
            "(line 513,col 9)-(line 513,col 62)",
            "(line 514,col 9)-(line 514,col 61)",
            "(line 515,col 9)-(line 515,col 61)",
            "(line 516,col 9)-(line 516,col 62)",
            "(line 517,col 9)-(line 517,col 62)",
            "(line 518,col 9)-(line 518,col 51)",
            "(line 519,col 9)-(line 519,col 51)",
            "(line 520,col 9)-(line 520,col 52)",
            "(line 521,col 9)-(line 521,col 52)",
            "(line 524,col 9)-(line 524,col 75)",
            "(line 525,col 9)-(line 525,col 75)",
            "(line 526,col 9)-(line 526,col 77)",
            "(line 527,col 9)-(line 527,col 91)",
            "(line 531,col 9)-(line 531,col 94)",
            "(line 532,col 9)-(line 533,col 84)",
            "(line 535,col 9)-(line 535,col 85)",
            "(line 539,col 9)-(line 539,col 49)",
            "(line 540,col 9)-(line 540,col 49)",
            "(line 541,col 9)-(line 541,col 49)",
            "(line 542,col 9)-(line 542,col 49)",
            "(line 543,col 9)-(line 543,col 62)",
            "(line 544,col 9)-(line 544,col 62)",
            "(line 545,col 9)-(line 545,col 62)",
            "(line 546,col 9)-(line 546,col 62)",
            "(line 547,col 9)-(line 547,col 49)",
            "(line 548,col 9)-(line 548,col 49)",
            "(line 549,col 9)-(line 549,col 49)",
            "(line 550,col 9)-(line 550,col 49)",
            "(line 551,col 9)-(line 551,col 49)",
            "(line 552,col 9)-(line 552,col 49)",
            "(line 553,col 9)-(line 553,col 49)",
            "(line 554,col 9)-(line 554,col 49)",
            "(line 555,col 9)-(line 555,col 63)",
            "(line 556,col 9)-(line 556,col 63)",
            "(line 557,col 9)-(line 557,col 63)",
            "(line 558,col 9)-(line 558,col 63)",
            "(line 559,col 9)-(line 559,col 62)",
            "(line 560,col 9)-(line 560,col 62)",
            "(line 561,col 9)-(line 561,col 62)",
            "(line 562,col 9)-(line 562,col 62)",
            "(line 563,col 9)-(line 563,col 58)",
            "(line 564,col 9)-(line 564,col 58)",
            "(line 566,col 9)-(line 567,col 92)",
            "(line 573,col 9)-(line 573,col 75)",
            "(line 574,col 9)-(line 574,col 76)",
            "(line 575,col 9)-(line 575,col 77)",
            "(line 576,col 9)-(line 576,col 76)",
            "(line 580,col 9)-(line 580,col 74)",
            "(line 581,col 9)-(line 581,col 75)",
            "(line 582,col 9)-(line 582,col 75)",
            "(line 583,col 9)-(line 583,col 76)",
            "(line 584,col 9)-(line 584,col 82)",
            "(line 586,col 9)-(line 587,col 84)",
            "(line 589,col 9)-(line 589,col 83)",
            "(line 592,col 9)-(line 593,col 84)",
            "(line 594,col 9)-(line 594,col 31)",
            "(line 596,col 9)-(line 596,col 83)",
            "(line 600,col 9)-(line 600,col 62)",
            "(line 601,col 9)-(line 601,col 63)",
            "(line 602,col 9)-(line 602,col 63)",
            "(line 603,col 9)-(line 603,col 64)",
            "(line 604,col 9)-(line 604,col 63)",
            "(line 605,col 9)-(line 605,col 62)",
            "(line 606,col 9)-(line 606,col 64)",
            "(line 607,col 9)-(line 607,col 63)",
            "(line 608,col 9)-(line 608,col 52)",
            "(line 609,col 9)-(line 609,col 53)",
            "(line 610,col 9)-(line 610,col 53)",
            "(line 611,col 9)-(line 611,col 53)",
            "(line 614,col 9)-(line 614,col 76)",
            "(line 615,col 9)-(line 615,col 77)",
            "(line 616,col 9)-(line 616,col 78)",
            "(line 617,col 9)-(line 617,col 92)",
            "(line 621,col 9)-(line 621,col 96)",
            "(line 622,col 9)-(line 623,col 84)",
            "(line 625,col 9)-(line 625,col 86)",
            "(line 628,col 9)-(line 628,col 50)",
            "(line 629,col 9)-(line 629,col 50)",
            "(line 630,col 9)-(line 630,col 50)",
            "(line 631,col 9)-(line 631,col 50)",
            "(line 632,col 9)-(line 632,col 63)",
            "(line 633,col 9)-(line 633,col 63)",
            "(line 634,col 9)-(line 634,col 63)",
            "(line 635,col 9)-(line 635,col 63)",
            "(line 636,col 9)-(line 636,col 50)",
            "(line 637,col 9)-(line 637,col 50)",
            "(line 638,col 9)-(line 638,col 50)",
            "(line 639,col 9)-(line 639,col 50)",
            "(line 640,col 9)-(line 640,col 50)",
            "(line 641,col 9)-(line 641,col 50)",
            "(line 642,col 9)-(line 642,col 50)",
            "(line 643,col 9)-(line 643,col 50)",
            "(line 644,col 9)-(line 644,col 64)",
            "(line 645,col 9)-(line 645,col 64)",
            "(line 646,col 9)-(line 646,col 64)",
            "(line 647,col 9)-(line 647,col 64)",
            "(line 648,col 9)-(line 648,col 63)",
            "(line 649,col 9)-(line 649,col 63)",
            "(line 650,col 9)-(line 650,col 63)",
            "(line 651,col 9)-(line 651,col 63)",
            "(line 652,col 9)-(line 652,col 59)",
            "(line 653,col 9)-(line 653,col 59)",
            "(line 656,col 9)-(line 657,col 93)",
            "(line 658,col 9)-(line 658,col 31)",
            "(line 664,col 9)-(line 664,col 78)",
            "(line 665,col 9)-(line 665,col 79)",
            "(line 666,col 9)-(line 666,col 80)",
            "(line 667,col 9)-(line 667,col 79)",
            "(line 671,col 9)-(line 671,col 78)",
            "(line 672,col 9)-(line 672,col 77)",
            "(line 673,col 9)-(line 673,col 79)",
            "(line 674,col 9)-(line 674,col 78)",
            "(line 675,col 9)-(line 675,col 86)",
            "(line 677,col 9)-(line 678,col 84)",
            "(line 680,col 9)-(line 680,col 87)",
            "(line 683,col 9)-(line 684,col 84)",
            "(line 685,col 9)-(line 685,col 31)",
            "(line 687,col 9)-(line 687,col 87)",
            "(line 691,col 9)-(line 691,col 66)",
            "(line 692,col 9)-(line 692,col 65)",
            "(line 693,col 9)-(line 693,col 67)",
            "(line 694,col 9)-(line 694,col 66)",
            "(line 695,col 9)-(line 695,col 65)",
            "(line 696,col 9)-(line 696,col 66)",
            "(line 697,col 9)-(line 697,col 66)",
            "(line 698,col 9)-(line 698,col 67)",
            "(line 699,col 9)-(line 699,col 56)",
            "(line 700,col 9)-(line 700,col 55)",
            "(line 701,col 9)-(line 701,col 56)",
            "(line 702,col 9)-(line 702,col 56)",
            "(line 705,col 9)-(line 705,col 79)",
            "(line 706,col 9)-(line 706,col 79)",
            "(line 707,col 9)-(line 707,col 81)",
            "(line 708,col 9)-(line 708,col 96)",
            "(line 712,col 9)-(line 712,col 98)",
            "(line 713,col 9)-(line 714,col 84)",
            "(line 716,col 9)-(line 716,col 89)",
            "(line 719,col 9)-(line 719,col 53)",
            "(line 720,col 9)-(line 720,col 53)",
            "(line 721,col 9)-(line 721,col 53)",
            "(line 722,col 9)-(line 722,col 53)",
            "(line 723,col 9)-(line 723,col 66)",
            "(line 724,col 9)-(line 724,col 66)",
            "(line 725,col 9)-(line 725,col 66)",
            "(line 726,col 9)-(line 726,col 66)",
            "(line 727,col 9)-(line 727,col 53)",
            "(line 728,col 9)-(line 728,col 53)",
            "(line 729,col 9)-(line 729,col 53)",
            "(line 730,col 9)-(line 730,col 53)",
            "(line 731,col 9)-(line 731,col 53)",
            "(line 732,col 9)-(line 732,col 53)",
            "(line 733,col 9)-(line 733,col 53)",
            "(line 734,col 9)-(line 734,col 53)",
            "(line 735,col 9)-(line 735,col 67)",
            "(line 736,col 9)-(line 736,col 67)",
            "(line 737,col 9)-(line 737,col 67)",
            "(line 738,col 9)-(line 738,col 67)",
            "(line 739,col 9)-(line 739,col 66)",
            "(line 740,col 9)-(line 740,col 66)",
            "(line 741,col 9)-(line 741,col 66)",
            "(line 742,col 9)-(line 742,col 66)",
            "(line 743,col 9)-(line 743,col 62)",
            "(line 744,col 9)-(line 744,col 62)",
            "(line 747,col 9)-(line 748,col 96)",
            "(line 749,col 9)-(line 749,col 31)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.dfp.DfpTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/dfp/DfpTest.java",
        "signature": "org.apache.commons.math3.dfp.DfpTest.testMultiply()",
        "snippet": "    @Test\n    public void testMultiply()\n    {\n        test(field.newDfp(\"1\").multiply(field.newDfp(\"1\")),      // Basic tests   1*1 = 1\n             field.newDfp(\"1\"),\n             0, \"Multiply #1\");\n\n        test(field.newDfp(\"1\").multiply(1),             // Basic tests   1*1 = 1\n             field.newDfp(\"1\"),\n             0, \"Multiply #2\");\n\n        test(field.newDfp(\"-1\").multiply(field.newDfp(\"1\")),     // Basic tests   -1*1 = -1\n             field.newDfp(\"-1\"),\n             0, \"Multiply #3\");\n\n        test(field.newDfp(\"-1\").multiply(1),            // Basic tests   -1*1 = -1\n             field.newDfp(\"-1\"),\n             0, \"Multiply #4\");\n\n        // basic tests with integers\n        test(field.newDfp(\"2\").multiply(field.newDfp(\"3\")),\n             field.newDfp(\"6\"),\n             0, \"Multiply #5\");\n\n        test(field.newDfp(\"2\").multiply(3),\n             field.newDfp(\"6\"),\n             0, \"Multiply #6\");\n\n        test(field.newDfp(\"-2\").multiply(field.newDfp(\"3\")),\n             field.newDfp(\"-6\"),\n             0, \"Multiply #7\");\n\n        test(field.newDfp(\"-2\").multiply(3),\n             field.newDfp(\"-6\"),\n             0, \"Multiply #8\");\n\n        test(field.newDfp(\"2\").multiply(field.newDfp(\"-3\")),\n             field.newDfp(\"-6\"),\n             0, \"Multiply #9\");\n\n        test(field.newDfp(\"-2\").multiply(field.newDfp(\"-3\")),\n             field.newDfp(\"6\"),\n             0, \"Multiply #10\");\n\n        //multiply by zero\n\n        test(field.newDfp(\"-2\").multiply(field.newDfp(\"0\")),\n             field.newDfp(\"-0\"),\n             0, \"Multiply #11\");\n\n        test(field.newDfp(\"-2\").multiply(0),\n             field.newDfp(\"-0\"),\n             0, \"Multiply #12\");\n\n        test(field.newDfp(\"2\").multiply(field.newDfp(\"0\")),\n             field.newDfp(\"0\"),\n             0, \"Multiply #13\");\n\n        test(field.newDfp(\"2\").multiply(0),\n             field.newDfp(\"0\"),\n             0, \"Multiply #14\");\n\n        test(field.newDfp(\"2\").multiply(pinf),\n             pinf,\n             0, \"Multiply #15\");\n\n        test(field.newDfp(\"2\").multiply(ninf),\n             ninf,\n             0, \"Multiply #16\");\n\n        test(field.newDfp(\"-2\").multiply(pinf),\n             ninf,\n             0, \"Multiply #17\");\n\n        test(field.newDfp(\"-2\").multiply(ninf),\n             pinf,\n             0, \"Multiply #18\");\n\n        test(ninf.multiply(field.newDfp(\"-2\")),\n             pinf,\n             0, \"Multiply #18.1\");\n\n        test(field.newDfp(\"5e131071\").multiply(2),\n             pinf,\n             DfpField.FLAG_OVERFLOW, \"Multiply #19\");\n\n        test(field.newDfp(\"5e131071\").multiply(field.newDfp(\"1.999999999999999\")),\n             field.newDfp(\"9.9999999999999950000e131071\"),\n             0, \"Multiply #20\");\n\n        test(field.newDfp(\"-5e131071\").multiply(2),\n             ninf,\n             DfpField.FLAG_OVERFLOW, \"Multiply #22\");\n\n        test(field.newDfp(\"-5e131071\").multiply(field.newDfp(\"1.999999999999999\")),\n             field.newDfp(\"-9.9999999999999950000e131071\"),\n             0, \"Multiply #23\");\n\n        test(field.newDfp(\"1e-65539\").multiply(field.newDfp(\"1e-65539\")),\n             field.newDfp(\"1e-131078\"),\n             DfpField.FLAG_UNDERFLOW, \"Multiply #24\");\n\n        test(field.newDfp(\"1\").multiply(nan),\n             nan,\n             0, \"Multiply #25\");\n\n        test(nan.multiply(field.newDfp(\"1\")),\n             nan,\n             0, \"Multiply #26\");\n\n        test(nan.multiply(pinf),\n             nan,\n             0, \"Multiply #27\");\n\n        test(pinf.multiply(nan),\n             nan,\n             0, \"Multiply #27\");\n\n        test(pinf.multiply(field.newDfp(\"0\")),\n             nan,\n             DfpField.FLAG_INVALID, \"Multiply #28\");\n\n        test(field.newDfp(\"0\").multiply(pinf),\n             nan,\n             DfpField.FLAG_INVALID, \"Multiply #29\");\n\n        test(pinf.multiply(pinf),\n             pinf,\n             0, \"Multiply #30\");\n\n        test(ninf.multiply(pinf),\n             ninf,\n             0, \"Multiply #31\");\n\n        test(pinf.multiply(ninf),\n             ninf,\n             0, \"Multiply #32\");\n\n        test(ninf.multiply(ninf),\n             pinf,\n             0, \"Multiply #33\");\n\n        test(pinf.multiply(1),\n             pinf,\n             0, \"Multiply #34\");\n\n        test(pinf.multiply(0),\n             nan,\n             DfpField.FLAG_INVALID, \"Multiply #35\");\n\n        test(nan.multiply(1),\n             nan,\n             0, \"Multiply #36\");\n\n        test(field.newDfp(\"1\").multiply(10000),\n             field.newDfp(\"10000\"),\n             0, \"Multiply #37\");\n\n        test(field.newDfp(\"2\").multiply(1000000),\n             field.newDfp(\"2000000\"),\n             0, \"Multiply #38\");\n\n        test(field.newDfp(\"1\").multiply(-1),\n             field.newDfp(\"-1\"),\n             0, \"Multiply #39\");\n    }\n",
        "begin_line": 755,
        "end_line": 920,
        "comment": "",
        "child_ranges": [
            "(line 758,col 9)-(line 760,col 31)",
            "(line 762,col 9)-(line 764,col 31)",
            "(line 766,col 9)-(line 768,col 31)",
            "(line 770,col 9)-(line 772,col 31)",
            "(line 775,col 9)-(line 777,col 31)",
            "(line 779,col 9)-(line 781,col 31)",
            "(line 783,col 9)-(line 785,col 31)",
            "(line 787,col 9)-(line 789,col 31)",
            "(line 791,col 9)-(line 793,col 31)",
            "(line 795,col 9)-(line 797,col 32)",
            "(line 801,col 9)-(line 803,col 32)",
            "(line 805,col 9)-(line 807,col 32)",
            "(line 809,col 9)-(line 811,col 32)",
            "(line 813,col 9)-(line 815,col 32)",
            "(line 817,col 9)-(line 819,col 32)",
            "(line 821,col 9)-(line 823,col 32)",
            "(line 825,col 9)-(line 827,col 32)",
            "(line 829,col 9)-(line 831,col 32)",
            "(line 833,col 9)-(line 835,col 34)",
            "(line 837,col 9)-(line 839,col 53)",
            "(line 841,col 9)-(line 843,col 32)",
            "(line 845,col 9)-(line 847,col 53)",
            "(line 849,col 9)-(line 851,col 32)",
            "(line 853,col 9)-(line 855,col 54)",
            "(line 857,col 9)-(line 859,col 32)",
            "(line 861,col 9)-(line 863,col 32)",
            "(line 865,col 9)-(line 867,col 32)",
            "(line 869,col 9)-(line 871,col 32)",
            "(line 873,col 9)-(line 875,col 52)",
            "(line 877,col 9)-(line 879,col 52)",
            "(line 881,col 9)-(line 883,col 32)",
            "(line 885,col 9)-(line 887,col 32)",
            "(line 889,col 9)-(line 891,col 32)",
            "(line 893,col 9)-(line 895,col 32)",
            "(line 897,col 9)-(line 899,col 32)",
            "(line 901,col 9)-(line 903,col 52)",
            "(line 905,col 9)-(line 907,col 32)",
            "(line 909,col 9)-(line 911,col 32)",
            "(line 913,col 9)-(line 915,col 32)",
            "(line 917,col 9)-(line 919,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.dfp.DfpTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/dfp/DfpTest.java",
        "signature": "org.apache.commons.math3.dfp.DfpTest.testDivide()",
        "snippet": "    @Test\n    public void testDivide()\n    {\n        test(field.newDfp(\"1\").divide(nan),      // divide by NaN = NaN\n             nan,\n             0, \"Divide #1\");\n\n        test(nan.divide(field.newDfp(\"1\")),      // NaN / number = NaN\n             nan,\n             0, \"Divide #2\");\n\n        test(pinf.divide(field.newDfp(\"1\")),\n             pinf,\n             0, \"Divide #3\");\n\n        test(pinf.divide(field.newDfp(\"-1\")),\n             ninf,\n             0, \"Divide #4\");\n\n        test(pinf.divide(pinf),\n             nan,\n             DfpField.FLAG_INVALID, \"Divide #5\");\n\n        test(ninf.divide(pinf),\n             nan,\n             DfpField.FLAG_INVALID, \"Divide #6\");\n\n        test(pinf.divide(ninf),\n             nan,\n             DfpField.FLAG_INVALID, \"Divide #7\");\n\n        test(ninf.divide(ninf),\n             nan,\n             DfpField.FLAG_INVALID, \"Divide #8\");\n\n        test(field.newDfp(\"0\").divide(field.newDfp(\"0\")),\n             nan,\n             DfpField.FLAG_DIV_ZERO, \"Divide #9\");\n\n        test(field.newDfp(\"1\").divide(field.newDfp(\"0\")),\n             pinf,\n             DfpField.FLAG_DIV_ZERO, \"Divide #10\");\n\n        test(field.newDfp(\"1\").divide(field.newDfp(\"-0\")),\n             ninf,\n             DfpField.FLAG_DIV_ZERO, \"Divide #11\");\n\n        test(field.newDfp(\"-1\").divide(field.newDfp(\"0\")),\n             ninf,\n             DfpField.FLAG_DIV_ZERO, \"Divide #12\");\n\n        test(field.newDfp(\"-1\").divide(field.newDfp(\"-0\")),\n             pinf,\n             DfpField.FLAG_DIV_ZERO, \"Divide #13\");\n\n        test(field.newDfp(\"1\").divide(field.newDfp(\"3\")),\n             field.newDfp(\"0.33333333333333333333\"),\n             DfpField.FLAG_INEXACT, \"Divide #14\");\n\n        test(field.newDfp(\"1\").divide(field.newDfp(\"6\")),\n             field.newDfp(\"0.16666666666666666667\"),\n             DfpField.FLAG_INEXACT, \"Divide #15\");\n\n        test(field.newDfp(\"10\").divide(field.newDfp(\"6\")),\n             field.newDfp(\"1.6666666666666667\"),\n             DfpField.FLAG_INEXACT, \"Divide #16\");\n\n        test(field.newDfp(\"100\").divide(field.newDfp(\"6\")),\n             field.newDfp(\"16.6666666666666667\"),\n             DfpField.FLAG_INEXACT, \"Divide #17\");\n\n        test(field.newDfp(\"1000\").divide(field.newDfp(\"6\")),\n             field.newDfp(\"166.6666666666666667\"),\n             DfpField.FLAG_INEXACT, \"Divide #18\");\n\n        test(field.newDfp(\"10000\").divide(field.newDfp(\"6\")),\n             field.newDfp(\"1666.6666666666666667\"),\n             DfpField.FLAG_INEXACT, \"Divide #19\");\n\n        test(field.newDfp(\"1\").divide(field.newDfp(\"1\")),\n             field.newDfp(\"1\"),\n             0, \"Divide #20\");\n\n        test(field.newDfp(\"1\").divide(field.newDfp(\"-1\")),\n             field.newDfp(\"-1\"),\n             0, \"Divide #21\");\n\n        test(field.newDfp(\"-1\").divide(field.newDfp(\"1\")),\n             field.newDfp(\"-1\"),\n             0, \"Divide #22\");\n\n        test(field.newDfp(\"-1\").divide(field.newDfp(\"-1\")),\n             field.newDfp(\"1\"),\n             0, \"Divide #23\");\n\n        test(field.newDfp(\"1e-65539\").divide(field.newDfp(\"1e65539\")),\n             field.newDfp(\"1e-131078\"),\n             DfpField.FLAG_UNDERFLOW, \"Divide #24\");\n\n        test(field.newDfp(\"1e65539\").divide(field.newDfp(\"1e-65539\")),\n             pinf,\n             DfpField.FLAG_OVERFLOW, \"Divide #24\");\n\n        test(field.newDfp(\"2\").divide(field.newDfp(\"1.5\")),     // test trial-divisor too high\n             field.newDfp(\"1.3333333333333333\"),\n             DfpField.FLAG_INEXACT, \"Divide #25\");\n\n        test(field.newDfp(\"2\").divide(pinf),\n             field.newDfp(\"0\"),\n             0, \"Divide #26\");\n\n        test(field.newDfp(\"2\").divide(ninf),\n             field.newDfp(\"-0\"),\n             0, \"Divide #27\");\n\n        test(field.newDfp(\"0\").divide(field.newDfp(\"1\")),\n             field.newDfp(\"0\"),\n             0, \"Divide #28\");\n    }\n",
        "begin_line": 922,
        "end_line": 1040,
        "comment": "",
        "child_ranges": [
            "(line 925,col 9)-(line 927,col 29)",
            "(line 929,col 9)-(line 931,col 29)",
            "(line 933,col 9)-(line 935,col 29)",
            "(line 937,col 9)-(line 939,col 29)",
            "(line 941,col 9)-(line 943,col 49)",
            "(line 945,col 9)-(line 947,col 49)",
            "(line 949,col 9)-(line 951,col 49)",
            "(line 953,col 9)-(line 955,col 49)",
            "(line 957,col 9)-(line 959,col 50)",
            "(line 961,col 9)-(line 963,col 51)",
            "(line 965,col 9)-(line 967,col 51)",
            "(line 969,col 9)-(line 971,col 51)",
            "(line 973,col 9)-(line 975,col 51)",
            "(line 977,col 9)-(line 979,col 50)",
            "(line 981,col 9)-(line 983,col 50)",
            "(line 985,col 9)-(line 987,col 50)",
            "(line 989,col 9)-(line 991,col 50)",
            "(line 993,col 9)-(line 995,col 50)",
            "(line 997,col 9)-(line 999,col 50)",
            "(line 1001,col 9)-(line 1003,col 30)",
            "(line 1005,col 9)-(line 1007,col 30)",
            "(line 1009,col 9)-(line 1011,col 30)",
            "(line 1013,col 9)-(line 1015,col 30)",
            "(line 1017,col 9)-(line 1019,col 52)",
            "(line 1021,col 9)-(line 1023,col 51)",
            "(line 1025,col 9)-(line 1027,col 50)",
            "(line 1029,col 9)-(line 1031,col 30)",
            "(line 1033,col 9)-(line 1035,col 30)",
            "(line 1037,col 9)-(line 1039,col 30)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.dfp.DfpTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/dfp/DfpTest.java",
        "signature": "org.apache.commons.math3.dfp.DfpTest.testReciprocal()",
        "snippet": "    @Test\n    public void testReciprocal()\n    {\n        test(nan.reciprocal(),\n             nan,\n             0, \"Reciprocal #1\");\n\n        test(field.newDfp(\"0\").reciprocal(),\n             pinf,\n             DfpField.FLAG_DIV_ZERO, \"Reciprocal #2\");\n\n        test(field.newDfp(\"-0\").reciprocal(),\n             ninf,\n             DfpField.FLAG_DIV_ZERO, \"Reciprocal #3\");\n\n        test(field.newDfp(\"3\").reciprocal(),\n             field.newDfp(\"0.33333333333333333333\"),\n             DfpField.FLAG_INEXACT, \"Reciprocal #4\");\n\n        test(field.newDfp(\"6\").reciprocal(),\n             field.newDfp(\"0.16666666666666666667\"),\n             DfpField.FLAG_INEXACT, \"Reciprocal #5\");\n\n        test(field.newDfp(\"1\").reciprocal(),\n             field.newDfp(\"1\"),\n             0, \"Reciprocal #6\");\n\n        test(field.newDfp(\"-1\").reciprocal(),\n             field.newDfp(\"-1\"),\n             0, \"Reciprocal #7\");\n\n        test(pinf.reciprocal(),\n             field.newDfp(\"0\"),\n             0, \"Reciprocal #8\");\n\n        test(ninf.reciprocal(),\n             field.newDfp(\"-0\"),\n             0, \"Reciprocal #9\");\n    }\n",
        "begin_line": 1042,
        "end_line": 1080,
        "comment": "",
        "child_ranges": [
            "(line 1045,col 9)-(line 1047,col 33)",
            "(line 1049,col 9)-(line 1051,col 54)",
            "(line 1053,col 9)-(line 1055,col 54)",
            "(line 1057,col 9)-(line 1059,col 53)",
            "(line 1061,col 9)-(line 1063,col 53)",
            "(line 1065,col 9)-(line 1067,col 33)",
            "(line 1069,col 9)-(line 1071,col 33)",
            "(line 1073,col 9)-(line 1075,col 33)",
            "(line 1077,col 9)-(line 1079,col 33)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.dfp.DfpTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/dfp/DfpTest.java",
        "signature": "org.apache.commons.math3.dfp.DfpTest.testDivideInt()",
        "snippet": "    @Test\n    public void testDivideInt()\n    {\n        test(nan.divide(1),      // NaN / number = NaN\n             nan,\n             0, \"DivideInt #1\");\n\n        test(pinf.divide(1),\n             pinf,\n             0, \"DivideInt #2\");\n\n        test(field.newDfp(\"0\").divide(0),\n             nan,\n             DfpField.FLAG_DIV_ZERO, \"DivideInt #3\");\n\n        test(field.newDfp(\"1\").divide(0),\n             pinf,\n             DfpField.FLAG_DIV_ZERO, \"DivideInt #4\");\n\n        test(field.newDfp(\"-1\").divide(0),\n             ninf,\n             DfpField.FLAG_DIV_ZERO, \"DivideInt #5\");\n\n        test(field.newDfp(\"1\").divide(3),\n             field.newDfp(\"0.33333333333333333333\"),\n             DfpField.FLAG_INEXACT, \"DivideInt #6\");\n\n        test(field.newDfp(\"1\").divide(6),\n             field.newDfp(\"0.16666666666666666667\"),\n             DfpField.FLAG_INEXACT, \"DivideInt #7\");\n\n        test(field.newDfp(\"10\").divide(6),\n             field.newDfp(\"1.6666666666666667\"),\n             DfpField.FLAG_INEXACT, \"DivideInt #8\");\n\n        test(field.newDfp(\"100\").divide(6),\n             field.newDfp(\"16.6666666666666667\"),\n             DfpField.FLAG_INEXACT, \"DivideInt #9\");\n\n        test(field.newDfp(\"1000\").divide(6),\n             field.newDfp(\"166.6666666666666667\"),\n             DfpField.FLAG_INEXACT, \"DivideInt #10\");\n\n        test(field.newDfp(\"10000\").divide(6),\n             field.newDfp(\"1666.6666666666666667\"),\n             DfpField.FLAG_INEXACT, \"DivideInt #20\");\n\n        test(field.newDfp(\"1\").divide(1),\n             field.newDfp(\"1\"),\n             0, \"DivideInt #21\");\n\n        test(field.newDfp(\"1e-131077\").divide(10),\n             field.newDfp(\"1e-131078\"),\n             DfpField.FLAG_UNDERFLOW, \"DivideInt #22\");\n\n        test(field.newDfp(\"0\").divide(1),\n             field.newDfp(\"0\"),\n             0, \"DivideInt #23\");\n\n        test(field.newDfp(\"1\").divide(10000),\n             nan,\n             DfpField.FLAG_INVALID, \"DivideInt #24\");\n\n        test(field.newDfp(\"1\").divide(-1),\n             nan,\n             DfpField.FLAG_INVALID, \"DivideInt #25\");\n    }\n",
        "begin_line": 1082,
        "end_line": 1148,
        "comment": "",
        "child_ranges": [
            "(line 1085,col 9)-(line 1087,col 32)",
            "(line 1089,col 9)-(line 1091,col 32)",
            "(line 1093,col 9)-(line 1095,col 53)",
            "(line 1097,col 9)-(line 1099,col 53)",
            "(line 1101,col 9)-(line 1103,col 53)",
            "(line 1105,col 9)-(line 1107,col 52)",
            "(line 1109,col 9)-(line 1111,col 52)",
            "(line 1113,col 9)-(line 1115,col 52)",
            "(line 1117,col 9)-(line 1119,col 52)",
            "(line 1121,col 9)-(line 1123,col 53)",
            "(line 1125,col 9)-(line 1127,col 53)",
            "(line 1129,col 9)-(line 1131,col 33)",
            "(line 1133,col 9)-(line 1135,col 55)",
            "(line 1137,col 9)-(line 1139,col 33)",
            "(line 1141,col 9)-(line 1143,col 53)",
            "(line 1145,col 9)-(line 1147,col 53)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.dfp.DfpTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/dfp/DfpTest.java",
        "signature": "org.apache.commons.math3.dfp.DfpTest.testNextAfter()",
        "snippet": "    @Test\n    public void testNextAfter()\n    {\n        test(field.newDfp(\"1\").nextAfter(pinf),\n             field.newDfp(\"1.0000000000000001\"),\n             0, \"NextAfter #1\");\n\n        test(field.newDfp(\"1.0000000000000001\").nextAfter(ninf),\n             field.newDfp(\"1\"),\n             0, \"NextAfter #1.5\");\n\n        test(field.newDfp(\"1\").nextAfter(ninf),\n             field.newDfp(\"0.99999999999999999999\"),\n             0, \"NextAfter #2\");\n\n        test(field.newDfp(\"0.99999999999999999999\").nextAfter(field.newDfp(\"2\")),\n             field.newDfp(\"1\"),\n             0, \"NextAfter #3\");\n\n        test(field.newDfp(\"-1\").nextAfter(ninf),\n             field.newDfp(\"-1.0000000000000001\"),\n             0, \"NextAfter #4\");\n\n        test(field.newDfp(\"-1\").nextAfter(pinf),\n             field.newDfp(\"-0.99999999999999999999\"),\n             0, \"NextAfter #5\");\n\n        test(field.newDfp(\"-0.99999999999999999999\").nextAfter(field.newDfp(\"-2\")),\n             field.newDfp(\"-1\"),\n             0, \"NextAfter #6\");\n\n        test(field.newDfp(\"2\").nextAfter(field.newDfp(\"2\")),\n             field.newDfp(\"2\"),\n             0, \"NextAfter #7\");\n\n        test(field.newDfp(\"0\").nextAfter(field.newDfp(\"0\")),\n             field.newDfp(\"0\"),\n             0, \"NextAfter #8\");\n\n        test(field.newDfp(\"-2\").nextAfter(field.newDfp(\"-2\")),\n             field.newDfp(\"-2\"),\n             0, \"NextAfter #9\");\n\n        test(field.newDfp(\"0\").nextAfter(field.newDfp(\"1\")),\n             field.newDfp(\"1e-131092\"),\n             DfpField.FLAG_UNDERFLOW, \"NextAfter #10\");\n\n        test(field.newDfp(\"0\").nextAfter(field.newDfp(\"-1\")),\n             field.newDfp(\"-1e-131092\"),\n             DfpField.FLAG_UNDERFLOW, \"NextAfter #11\");\n\n        test(field.newDfp(\"-1e-131092\").nextAfter(pinf),\n             field.newDfp(\"-0\"),\n             DfpField.FLAG_UNDERFLOW|DfpField.FLAG_INEXACT, \"Next After #12\");\n\n        test(field.newDfp(\"1e-131092\").nextAfter(ninf),\n             field.newDfp(\"0\"),\n             DfpField.FLAG_UNDERFLOW|DfpField.FLAG_INEXACT, \"Next After #13\");\n\n        test(field.newDfp(\"9.9999999999999999999e131078\").nextAfter(pinf),\n             pinf,\n             DfpField.FLAG_OVERFLOW|DfpField.FLAG_INEXACT, \"Next After #14\");\n    }\n",
        "begin_line": 1150,
        "end_line": 1212,
        "comment": "",
        "child_ranges": [
            "(line 1153,col 9)-(line 1155,col 32)",
            "(line 1157,col 9)-(line 1159,col 34)",
            "(line 1161,col 9)-(line 1163,col 32)",
            "(line 1165,col 9)-(line 1167,col 32)",
            "(line 1169,col 9)-(line 1171,col 32)",
            "(line 1173,col 9)-(line 1175,col 32)",
            "(line 1177,col 9)-(line 1179,col 32)",
            "(line 1181,col 9)-(line 1183,col 32)",
            "(line 1185,col 9)-(line 1187,col 32)",
            "(line 1189,col 9)-(line 1191,col 32)",
            "(line 1193,col 9)-(line 1195,col 55)",
            "(line 1197,col 9)-(line 1199,col 55)",
            "(line 1201,col 9)-(line 1203,col 78)",
            "(line 1205,col 9)-(line 1207,col 78)",
            "(line 1209,col 9)-(line 1211,col 77)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.dfp.DfpTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/dfp/DfpTest.java",
        "signature": "org.apache.commons.math3.dfp.DfpTest.testToString()",
        "snippet": "    @Test\n    public void testToString()\n    {\n        Assert.assertEquals(\"toString #1\", \"Infinity\", pinf.toString());\n        Assert.assertEquals(\"toString #2\", \"-Infinity\", ninf.toString());\n        Assert.assertEquals(\"toString #3\", \"NaN\", nan.toString());\n        Assert.assertEquals(\"toString #4\", \"NaN\", field.newDfp((byte) 1, Dfp.QNAN).toString());\n        Assert.assertEquals(\"toString #5\", \"NaN\", field.newDfp((byte) 1, Dfp.SNAN).toString());\n        Assert.assertEquals(\"toString #6\", \"1.2300000000000000e100\", field.newDfp(\"1.23e100\").toString());\n        Assert.assertEquals(\"toString #7\", \"-1.2300000000000000e100\", field.newDfp(\"-1.23e100\").toString());\n        Assert.assertEquals(\"toString #8\", \"12345678.1234\", field.newDfp(\"12345678.1234\").toString());\n        Assert.assertEquals(\"toString #9\", \"0.00001234\", field.newDfp(\"0.00001234\").toString());\n    }\n",
        "begin_line": 1214,
        "end_line": 1226,
        "comment": "",
        "child_ranges": [
            "(line 1217,col 9)-(line 1217,col 72)",
            "(line 1218,col 9)-(line 1218,col 73)",
            "(line 1219,col 9)-(line 1219,col 66)",
            "(line 1220,col 9)-(line 1220,col 95)",
            "(line 1221,col 9)-(line 1221,col 95)",
            "(line 1222,col 9)-(line 1222,col 106)",
            "(line 1223,col 9)-(line 1223,col 108)",
            "(line 1224,col 9)-(line 1224,col 102)",
            "(line 1225,col 9)-(line 1225,col 96)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.dfp.DfpTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/dfp/DfpTest.java",
        "signature": "org.apache.commons.math3.dfp.DfpTest.testRound()",
        "snippet": "    @Test\n    public void testRound()\n    {\n        field.setRoundingMode(DfpField.RoundingMode.ROUND_DOWN);\n\n        // Round down\n        test(field.newDfp(\"12345678901234567890\").add(field.newDfp(\"0.9\")),\n             field.newDfp(\"12345678901234567890\"),\n             DfpField.FLAG_INEXACT, \"Round #1\");\n\n        test(field.newDfp(\"12345678901234567890\").add(field.newDfp(\"0.99999999\")),\n             field.newDfp(\"12345678901234567890\"),\n             DfpField.FLAG_INEXACT, \"Round #2\");\n\n        test(field.newDfp(\"-12345678901234567890\").add(field.newDfp(\"-0.99999999\")),\n             field.newDfp(\"-12345678901234567890\"),\n             DfpField.FLAG_INEXACT, \"Round #3\");\n\n        field.setRoundingMode(DfpField.RoundingMode.ROUND_UP);\n\n        // Round up\n        test(field.newDfp(\"12345678901234567890\").add(field.newDfp(\"0.1\")),\n             field.newDfp(\"12345678901234567891\"),\n             DfpField.FLAG_INEXACT, \"Round #4\");\n\n        test(field.newDfp(\"12345678901234567890\").add(field.newDfp(\"0.0001\")),\n             field.newDfp(\"12345678901234567891\"),\n             DfpField.FLAG_INEXACT, \"Round #5\");\n\n        test(field.newDfp(\"-12345678901234567890\").add(field.newDfp(\"-0.1\")),\n             field.newDfp(\"-12345678901234567891\"),\n             DfpField.FLAG_INEXACT, \"Round #6\");\n\n        test(field.newDfp(\"-12345678901234567890\").add(field.newDfp(\"-0.0001\")),\n             field.newDfp(\"-12345678901234567891\"),\n             DfpField.FLAG_INEXACT, \"Round #7\");\n\n        field.setRoundingMode(DfpField.RoundingMode.ROUND_HALF_UP);\n\n        // Round half up\n        test(field.newDfp(\"12345678901234567890\").add(field.newDfp(\"0.4999\")),\n             field.newDfp(\"12345678901234567890\"),\n             DfpField.FLAG_INEXACT, \"Round #8\");\n\n        test(field.newDfp(\"12345678901234567890\").add(field.newDfp(\"0.5000\")),\n             field.newDfp(\"12345678901234567891\"),\n             DfpField.FLAG_INEXACT, \"Round #9\");\n\n        test(field.newDfp(\"-12345678901234567890\").add(field.newDfp(\"-0.4999\")),\n             field.newDfp(\"-12345678901234567890\"),\n             DfpField.FLAG_INEXACT, \"Round #10\");\n\n        test(field.newDfp(\"-12345678901234567890\").add(field.newDfp(\"-0.5000\")),\n             field.newDfp(\"-12345678901234567891\"),\n             DfpField.FLAG_INEXACT, \"Round #11\");\n\n        field.setRoundingMode(DfpField.RoundingMode.ROUND_HALF_DOWN);\n\n        // Round half down\n        test(field.newDfp(\"12345678901234567890\").add(field.newDfp(\"0.5001\")),\n             field.newDfp(\"12345678901234567891\"),\n             DfpField.FLAG_INEXACT, \"Round #12\");\n\n        test(field.newDfp(\"12345678901234567890\").add(field.newDfp(\"0.5000\")),\n             field.newDfp(\"12345678901234567890\"),\n             DfpField.FLAG_INEXACT, \"Round #13\");\n\n        test(field.newDfp(\"-12345678901234567890\").add(field.newDfp(\"-0.5001\")),\n             field.newDfp(\"-12345678901234567891\"),\n             DfpField.FLAG_INEXACT, \"Round #14\");\n\n        test(field.newDfp(\"-12345678901234567890\").add(field.newDfp(\"-0.5000\")),\n             field.newDfp(\"-12345678901234567890\"),\n             DfpField.FLAG_INEXACT, \"Round #15\");\n\n        field.setRoundingMode(DfpField.RoundingMode.ROUND_HALF_ODD);\n\n        // Round half odd\n        test(field.newDfp(\"12345678901234567890\").add(field.newDfp(\"0.5000\")),\n             field.newDfp(\"12345678901234567891\"),\n             DfpField.FLAG_INEXACT, \"Round #16\");\n\n        test(field.newDfp(\"12345678901234567891\").add(field.newDfp(\"0.5000\")),\n             field.newDfp(\"12345678901234567891\"),\n             DfpField.FLAG_INEXACT, \"Round #17\");\n\n        test(field.newDfp(\"-12345678901234567890\").add(field.newDfp(\"-0.5000\")),\n             field.newDfp(\"-12345678901234567891\"),\n             DfpField.FLAG_INEXACT, \"Round #18\");\n\n        test(field.newDfp(\"-12345678901234567891\").add(field.newDfp(\"-0.5000\")),\n             field.newDfp(\"-12345678901234567891\"),\n             DfpField.FLAG_INEXACT, \"Round #19\");\n\n        field.setRoundingMode(DfpField.RoundingMode.ROUND_CEIL);\n\n        // Round ceil\n        test(field.newDfp(\"12345678901234567890\").add(field.newDfp(\"0.0001\")),\n             field.newDfp(\"12345678901234567891\"),\n             DfpField.FLAG_INEXACT, \"Round #20\");\n\n        test(field.newDfp(\"-12345678901234567890\").add(field.newDfp(\"-0.9999\")),\n             field.newDfp(\"-12345678901234567890\"),\n             DfpField.FLAG_INEXACT, \"Round #21\");\n\n        field.setRoundingMode(DfpField.RoundingMode.ROUND_FLOOR);\n\n        // Round floor\n        test(field.newDfp(\"12345678901234567890\").add(field.newDfp(\"0.9999\")),\n             field.newDfp(\"12345678901234567890\"),\n             DfpField.FLAG_INEXACT, \"Round #22\");\n\n        test(field.newDfp(\"-12345678901234567890\").add(field.newDfp(\"-0.0001\")),\n             field.newDfp(\"-12345678901234567891\"),\n             DfpField.FLAG_INEXACT, \"Round #23\");\n\n        field.setRoundingMode(DfpField.RoundingMode.ROUND_HALF_EVEN);  // reset\n    }\n",
        "begin_line": 1228,
        "end_line": 1345,
        "comment": "",
        "child_ranges": [
            "(line 1231,col 9)-(line 1231,col 64)",
            "(line 1234,col 9)-(line 1236,col 48)",
            "(line 1238,col 9)-(line 1240,col 48)",
            "(line 1242,col 9)-(line 1244,col 48)",
            "(line 1246,col 9)-(line 1246,col 62)",
            "(line 1249,col 9)-(line 1251,col 48)",
            "(line 1253,col 9)-(line 1255,col 48)",
            "(line 1257,col 9)-(line 1259,col 48)",
            "(line 1261,col 9)-(line 1263,col 48)",
            "(line 1265,col 9)-(line 1265,col 67)",
            "(line 1268,col 9)-(line 1270,col 48)",
            "(line 1272,col 9)-(line 1274,col 48)",
            "(line 1276,col 9)-(line 1278,col 49)",
            "(line 1280,col 9)-(line 1282,col 49)",
            "(line 1284,col 9)-(line 1284,col 69)",
            "(line 1287,col 9)-(line 1289,col 49)",
            "(line 1291,col 9)-(line 1293,col 49)",
            "(line 1295,col 9)-(line 1297,col 49)",
            "(line 1299,col 9)-(line 1301,col 49)",
            "(line 1303,col 9)-(line 1303,col 68)",
            "(line 1306,col 9)-(line 1308,col 49)",
            "(line 1310,col 9)-(line 1312,col 49)",
            "(line 1314,col 9)-(line 1316,col 49)",
            "(line 1318,col 9)-(line 1320,col 49)",
            "(line 1322,col 9)-(line 1322,col 64)",
            "(line 1325,col 9)-(line 1327,col 49)",
            "(line 1329,col 9)-(line 1331,col 49)",
            "(line 1333,col 9)-(line 1333,col 65)",
            "(line 1336,col 9)-(line 1338,col 49)",
            "(line 1340,col 9)-(line 1342,col 49)",
            "(line 1344,col 9)-(line 1344,col 69)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.dfp.DfpTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/dfp/DfpTest.java",
        "signature": "org.apache.commons.math3.dfp.DfpTest.testCeil()",
        "snippet": "    @Test\n    public void testCeil()\n    {\n        test(field.newDfp(\"1234.0000000000000001\").ceil(),\n             field.newDfp(\"1235\"),\n             DfpField.FLAG_INEXACT, \"Ceil #1\");\n    }\n",
        "begin_line": 1347,
        "end_line": 1353,
        "comment": "",
        "child_ranges": [
            "(line 1350,col 9)-(line 1352,col 47)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.dfp.DfpTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/dfp/DfpTest.java",
        "signature": "org.apache.commons.math3.dfp.DfpTest.testFloor()",
        "snippet": "    @Test\n    public void testFloor()\n    {\n        test(field.newDfp(\"1234.9999999999999999\").floor(),\n             field.newDfp(\"1234\"),\n             DfpField.FLAG_INEXACT, \"Floor #1\");\n    }\n",
        "begin_line": 1355,
        "end_line": 1361,
        "comment": "",
        "child_ranges": [
            "(line 1358,col 9)-(line 1360,col 48)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.dfp.DfpTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/dfp/DfpTest.java",
        "signature": "org.apache.commons.math3.dfp.DfpTest.testRint()",
        "snippet": "    @Test\n    public void testRint()\n    {\n        test(field.newDfp(\"1234.50000000001\").rint(),\n             field.newDfp(\"1235\"),\n             DfpField.FLAG_INEXACT, \"Rint #1\");\n\n        test(field.newDfp(\"1234.5000\").rint(),\n             field.newDfp(\"1234\"),\n             DfpField.FLAG_INEXACT, \"Rint #2\");\n\n        test(field.newDfp(\"1235.5000\").rint(),\n             field.newDfp(\"1236\"),\n             DfpField.FLAG_INEXACT, \"Rint #3\");\n    }\n",
        "begin_line": 1363,
        "end_line": 1377,
        "comment": "",
        "child_ranges": [
            "(line 1366,col 9)-(line 1368,col 47)",
            "(line 1370,col 9)-(line 1372,col 47)",
            "(line 1374,col 9)-(line 1376,col 47)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.dfp.DfpTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/dfp/DfpTest.java",
        "signature": "org.apache.commons.math3.dfp.DfpTest.testCopySign()",
        "snippet": "    @Test\n    public void testCopySign()\n    {\n        test(Dfp.copysign(field.newDfp(\"1234.\"), field.newDfp(\"-1\")),\n             field.newDfp(\"-1234\"),\n             0, \"CopySign #1\");\n\n        test(Dfp.copysign(field.newDfp(\"-1234.\"), field.newDfp(\"-1\")),\n             field.newDfp(\"-1234\"),\n             0, \"CopySign #2\");\n\n        test(Dfp.copysign(field.newDfp(\"-1234.\"), field.newDfp(\"1\")),\n             field.newDfp(\"1234\"),\n             0, \"CopySign #3\");\n\n        test(Dfp.copysign(field.newDfp(\"1234.\"), field.newDfp(\"1\")),\n             field.newDfp(\"1234\"),\n             0, \"CopySign #4\");\n    }\n",
        "begin_line": 1379,
        "end_line": 1397,
        "comment": "",
        "child_ranges": [
            "(line 1382,col 9)-(line 1384,col 31)",
            "(line 1386,col 9)-(line 1388,col 31)",
            "(line 1390,col 9)-(line 1392,col 31)",
            "(line 1394,col 9)-(line 1396,col 31)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.dfp.DfpTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/dfp/DfpTest.java",
        "signature": "org.apache.commons.math3.dfp.DfpTest.testIntValue()",
        "snippet": "    @Test\n    public void testIntValue()\n    {\n        Assert.assertEquals(\"intValue #1\", 1234, field.newDfp(\"1234\").intValue());\n        Assert.assertEquals(\"intValue #2\", -1234, field.newDfp(\"-1234\").intValue());\n        Assert.assertEquals(\"intValue #3\", 1234, field.newDfp(\"1234.5\").intValue());\n        Assert.assertEquals(\"intValue #4\", 1235, field.newDfp(\"1234.500001\").intValue());\n        Assert.assertEquals(\"intValue #5\", 2147483647, field.newDfp(\"1e1000\").intValue());\n        Assert.assertEquals(\"intValue #6\", -2147483648, field.newDfp(\"-1e1000\").intValue());\n    }\n",
        "begin_line": 1399,
        "end_line": 1408,
        "comment": "",
        "child_ranges": [
            "(line 1402,col 9)-(line 1402,col 82)",
            "(line 1403,col 9)-(line 1403,col 84)",
            "(line 1404,col 9)-(line 1404,col 84)",
            "(line 1405,col 9)-(line 1405,col 89)",
            "(line 1406,col 9)-(line 1406,col 90)",
            "(line 1407,col 9)-(line 1407,col 92)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.dfp.DfpTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/dfp/DfpTest.java",
        "signature": "org.apache.commons.math3.dfp.DfpTest.testLog10K()",
        "snippet": "    @Test\n    public void testLog10K()\n    {\n        Assert.assertEquals(\"log10K #1\", 1, field.newDfp(\"123456\").log10K());\n        Assert.assertEquals(\"log10K #2\", 2, field.newDfp(\"123456789\").log10K());\n        Assert.assertEquals(\"log10K #3\", 0, field.newDfp(\"2\").log10K());\n        Assert.assertEquals(\"log10K #3\", 0, field.newDfp(\"1\").log10K());\n        Assert.assertEquals(\"log10K #4\", -1, field.newDfp(\"0.1\").log10K());\n    }\n",
        "begin_line": 1410,
        "end_line": 1418,
        "comment": "",
        "child_ranges": [
            "(line 1413,col 9)-(line 1413,col 77)",
            "(line 1414,col 9)-(line 1414,col 80)",
            "(line 1415,col 9)-(line 1415,col 72)",
            "(line 1416,col 9)-(line 1416,col 72)",
            "(line 1417,col 9)-(line 1417,col 75)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.dfp.DfpTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/dfp/DfpTest.java",
        "signature": "org.apache.commons.math3.dfp.DfpTest.testPower10K()",
        "snippet": "    @Test\n    public void testPower10K()\n    {\n        Dfp d = field.newDfp();\n\n        test(d.power10K(0), field.newDfp(\"1\"), 0, \"Power10 #1\");\n        test(d.power10K(1), field.newDfp(\"10000\"), 0, \"Power10 #2\");\n        test(d.power10K(2), field.newDfp(\"100000000\"), 0, \"Power10 #3\");\n\n        test(d.power10K(-1), field.newDfp(\"0.0001\"), 0, \"Power10 #4\");\n        test(d.power10K(-2), field.newDfp(\"0.00000001\"), 0, \"Power10 #5\");\n        test(d.power10K(-3), field.newDfp(\"0.000000000001\"), 0, \"Power10 #6\");\n    }\n",
        "begin_line": 1420,
        "end_line": 1432,
        "comment": "",
        "child_ranges": [
            "(line 1423,col 9)-(line 1423,col 31)",
            "(line 1425,col 9)-(line 1425,col 64)",
            "(line 1426,col 9)-(line 1426,col 68)",
            "(line 1427,col 9)-(line 1427,col 72)",
            "(line 1429,col 9)-(line 1429,col 70)",
            "(line 1430,col 9)-(line 1430,col 74)",
            "(line 1431,col 9)-(line 1431,col 78)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.dfp.DfpTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/dfp/DfpTest.java",
        "signature": "org.apache.commons.math3.dfp.DfpTest.testLog10()",
        "snippet": "    @Test\n    public void testLog10()\n    {\n\n        Assert.assertEquals(\"log10 #1\", 1, field.newDfp(\"12\").log10());\n        Assert.assertEquals(\"log10 #2\", 2, field.newDfp(\"123\").log10());\n        Assert.assertEquals(\"log10 #3\", 3, field.newDfp(\"1234\").log10());\n        Assert.assertEquals(\"log10 #4\", 4, field.newDfp(\"12345\").log10());\n        Assert.assertEquals(\"log10 #5\", 5, field.newDfp(\"123456\").log10());\n        Assert.assertEquals(\"log10 #6\", 6, field.newDfp(\"1234567\").log10());\n        Assert.assertEquals(\"log10 #6\", 7, field.newDfp(\"12345678\").log10());\n        Assert.assertEquals(\"log10 #7\", 8, field.newDfp(\"123456789\").log10());\n        Assert.assertEquals(\"log10 #8\", 9, field.newDfp(\"1234567890\").log10());\n        Assert.assertEquals(\"log10 #9\", 10, field.newDfp(\"12345678901\").log10());\n        Assert.assertEquals(\"log10 #10\", 11, field.newDfp(\"123456789012\").log10());\n        Assert.assertEquals(\"log10 #11\", 12, field.newDfp(\"1234567890123\").log10());\n\n        Assert.assertEquals(\"log10 #12\", 0, field.newDfp(\"2\").log10());\n        Assert.assertEquals(\"log10 #13\", 0, field.newDfp(\"1\").log10());\n        Assert.assertEquals(\"log10 #14\", -1, field.newDfp(\"0.12\").log10());\n        Assert.assertEquals(\"log10 #15\", -2, field.newDfp(\"0.012\").log10());\n    }\n",
        "begin_line": 1434,
        "end_line": 1455,
        "comment": "",
        "child_ranges": [
            "(line 1438,col 9)-(line 1438,col 71)",
            "(line 1439,col 9)-(line 1439,col 72)",
            "(line 1440,col 9)-(line 1440,col 73)",
            "(line 1441,col 9)-(line 1441,col 74)",
            "(line 1442,col 9)-(line 1442,col 75)",
            "(line 1443,col 9)-(line 1443,col 76)",
            "(line 1444,col 9)-(line 1444,col 77)",
            "(line 1445,col 9)-(line 1445,col 78)",
            "(line 1446,col 9)-(line 1446,col 79)",
            "(line 1447,col 9)-(line 1447,col 81)",
            "(line 1448,col 9)-(line 1448,col 83)",
            "(line 1449,col 9)-(line 1449,col 84)",
            "(line 1451,col 9)-(line 1451,col 71)",
            "(line 1452,col 9)-(line 1452,col 71)",
            "(line 1453,col 9)-(line 1453,col 75)",
            "(line 1454,col 9)-(line 1454,col 76)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.dfp.DfpTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/dfp/DfpTest.java",
        "signature": "org.apache.commons.math3.dfp.DfpTest.testPower10()",
        "snippet": "    @Test\n    public void testPower10()\n    {\n        Dfp d = field.newDfp();\n\n        test(d.power10(0), field.newDfp(\"1\"), 0, \"Power10 #1\");\n        test(d.power10(1), field.newDfp(\"10\"), 0, \"Power10 #2\");\n        test(d.power10(2), field.newDfp(\"100\"), 0, \"Power10 #3\");\n        test(d.power10(3), field.newDfp(\"1000\"), 0, \"Power10 #4\");\n        test(d.power10(4), field.newDfp(\"10000\"), 0, \"Power10 #5\");\n        test(d.power10(5), field.newDfp(\"100000\"), 0, \"Power10 #6\");\n        test(d.power10(6), field.newDfp(\"1000000\"), 0, \"Power10 #7\");\n        test(d.power10(7), field.newDfp(\"10000000\"), 0, \"Power10 #8\");\n        test(d.power10(8), field.newDfp(\"100000000\"), 0, \"Power10 #9\");\n        test(d.power10(9), field.newDfp(\"1000000000\"), 0, \"Power10 #10\");\n\n        test(d.power10(-1), field.newDfp(\".1\"), 0, \"Power10 #11\");\n        test(d.power10(-2), field.newDfp(\".01\"), 0, \"Power10 #12\");\n        test(d.power10(-3), field.newDfp(\".001\"), 0, \"Power10 #13\");\n        test(d.power10(-4), field.newDfp(\".0001\"), 0, \"Power10 #14\");\n        test(d.power10(-5), field.newDfp(\".00001\"), 0, \"Power10 #15\");\n        test(d.power10(-6), field.newDfp(\".000001\"), 0, \"Power10 #16\");\n        test(d.power10(-7), field.newDfp(\".0000001\"), 0, \"Power10 #17\");\n        test(d.power10(-8), field.newDfp(\".00000001\"), 0, \"Power10 #18\");\n        test(d.power10(-9), field.newDfp(\".000000001\"), 0, \"Power10 #19\");\n        test(d.power10(-10), field.newDfp(\".0000000001\"), 0, \"Power10 #20\");\n    }\n",
        "begin_line": 1457,
        "end_line": 1483,
        "comment": "",
        "child_ranges": [
            "(line 1460,col 9)-(line 1460,col 31)",
            "(line 1462,col 9)-(line 1462,col 63)",
            "(line 1463,col 9)-(line 1463,col 64)",
            "(line 1464,col 9)-(line 1464,col 65)",
            "(line 1465,col 9)-(line 1465,col 66)",
            "(line 1466,col 9)-(line 1466,col 67)",
            "(line 1467,col 9)-(line 1467,col 68)",
            "(line 1468,col 9)-(line 1468,col 69)",
            "(line 1469,col 9)-(line 1469,col 70)",
            "(line 1470,col 9)-(line 1470,col 71)",
            "(line 1471,col 9)-(line 1471,col 73)",
            "(line 1473,col 9)-(line 1473,col 66)",
            "(line 1474,col 9)-(line 1474,col 67)",
            "(line 1475,col 9)-(line 1475,col 68)",
            "(line 1476,col 9)-(line 1476,col 69)",
            "(line 1477,col 9)-(line 1477,col 70)",
            "(line 1478,col 9)-(line 1478,col 71)",
            "(line 1479,col 9)-(line 1479,col 72)",
            "(line 1480,col 9)-(line 1480,col 73)",
            "(line 1481,col 9)-(line 1481,col 74)",
            "(line 1482,col 9)-(line 1482,col 76)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.dfp.DfpTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/dfp/DfpTest.java",
        "signature": "org.apache.commons.math3.dfp.DfpTest.testRemainder()",
        "snippet": "    @Test\n    public void testRemainder()\n    {\n        test(field.newDfp(\"10\").remainder(field.newDfp(\"3\")),\n             field.newDfp(\"1\"),\n             DfpField.FLAG_INEXACT, \"Remainder #1\");\n\n        test(field.newDfp(\"9\").remainder(field.newDfp(\"3\")),\n             field.newDfp(\"0\"),\n             0, \"Remainder #2\");\n\n        test(field.newDfp(\"-9\").remainder(field.newDfp(\"3\")),\n             field.newDfp(\"-0\"),\n             0, \"Remainder #3\");\n    }\n",
        "begin_line": 1485,
        "end_line": 1499,
        "comment": "",
        "child_ranges": [
            "(line 1488,col 9)-(line 1490,col 52)",
            "(line 1492,col 9)-(line 1494,col 32)",
            "(line 1496,col 9)-(line 1498,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.dfp.DfpTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/dfp/DfpTest.java",
        "signature": "org.apache.commons.math3.dfp.DfpTest.testSqrt()",
        "snippet": "    @Test\n    public void testSqrt()\n    {\n        test(field.newDfp(\"0\").sqrt(),\n             field.newDfp(\"0\"),\n             0, \"Sqrt #1\");\n\n        test(field.newDfp(\"-0\").sqrt(),\n             field.newDfp(\"-0\"),\n             0, \"Sqrt #2\");\n\n        test(field.newDfp(\"1\").sqrt(),\n             field.newDfp(\"1\"),\n             0, \"Sqrt #3\");\n\n        test(field.newDfp(\"2\").sqrt(),\n             field.newDfp(\"1.4142135623730950\"),\n             DfpField.FLAG_INEXACT, \"Sqrt #4\");\n\n        test(field.newDfp(\"3\").sqrt(),\n             field.newDfp(\"1.7320508075688773\"),\n             DfpField.FLAG_INEXACT, \"Sqrt #5\");\n\n        test(field.newDfp(\"5\").sqrt(),\n             field.newDfp(\"2.2360679774997897\"),\n             DfpField.FLAG_INEXACT, \"Sqrt #6\");\n\n        test(field.newDfp(\"500\").sqrt(),\n             field.newDfp(\"22.3606797749978970\"),\n             DfpField.FLAG_INEXACT, \"Sqrt #6.2\");\n\n        test(field.newDfp(\"50000\").sqrt(),\n             field.newDfp(\"223.6067977499789696\"),\n             DfpField.FLAG_INEXACT, \"Sqrt #6.3\");\n\n        test(field.newDfp(\"-1\").sqrt(),\n             nan,\n             DfpField.FLAG_INVALID, \"Sqrt #7\");\n\n        test(pinf.sqrt(),\n             pinf,\n             0, \"Sqrt #8\");\n\n        test(field.newDfp((byte) 1, Dfp.QNAN).sqrt(),\n             nan,\n             0, \"Sqrt #9\");\n\n        test(field.newDfp((byte) 1, Dfp.SNAN).sqrt(),\n             nan,\n             DfpField.FLAG_INVALID, \"Sqrt #9\");\n    }\n",
        "begin_line": 1501,
        "end_line": 1551,
        "comment": "",
        "child_ranges": [
            "(line 1504,col 9)-(line 1506,col 27)",
            "(line 1508,col 9)-(line 1510,col 27)",
            "(line 1512,col 9)-(line 1514,col 27)",
            "(line 1516,col 9)-(line 1518,col 47)",
            "(line 1520,col 9)-(line 1522,col 47)",
            "(line 1524,col 9)-(line 1526,col 47)",
            "(line 1528,col 9)-(line 1530,col 49)",
            "(line 1532,col 9)-(line 1534,col 49)",
            "(line 1536,col 9)-(line 1538,col 47)",
            "(line 1540,col 9)-(line 1542,col 27)",
            "(line 1544,col 9)-(line 1546,col 27)",
            "(line 1548,col 9)-(line 1550,col 47)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.dfp.DfpTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/dfp/DfpTest.java",
        "signature": "org.apache.commons.math3.dfp.DfpTest.testIssue567()",
        "snippet": "    @Test\n    public void testIssue567() {\n        DfpField field = new DfpField(100);\n        Assert.assertEquals(0.0, field.getZero().toDouble(), Precision.SAFE_MIN);\n        Assert.assertEquals(0.0, field.newDfp(0.0).toDouble(), Precision.SAFE_MIN);\n        Assert.assertEquals(-1, FastMath.copySign(1, field.newDfp(-0.0).toDouble()), Precision.EPSILON);\n        Assert.assertEquals(+1, FastMath.copySign(1, field.newDfp(+0.0).toDouble()), Precision.EPSILON);\n    }\n",
        "begin_line": 1553,
        "end_line": 1560,
        "comment": "",
        "child_ranges": [
            "(line 1555,col 9)-(line 1555,col 43)",
            "(line 1556,col 9)-(line 1556,col 81)",
            "(line 1557,col 9)-(line 1557,col 83)",
            "(line 1558,col 9)-(line 1558,col 104)",
            "(line 1559,col 9)-(line 1559,col 104)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.dfp.DfpTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/dfp/DfpTest.java",
        "signature": "org.apache.commons.math3.dfp.DfpTest.testIsZero()",
        "snippet": "    @Test\n    public void testIsZero() {\n        Assert.assertTrue(field.getZero().isZero());\n        Assert.assertTrue(field.getZero().negate().isZero());\n        Assert.assertTrue(field.newDfp(+0.0).isZero());\n        Assert.assertTrue(field.newDfp(-0.0).isZero());\n        Assert.assertFalse(field.newDfp(1.0e-90).isZero());\n        Assert.assertFalse(nan.isZero());\n        Assert.assertFalse(nan.negate().isZero());\n        Assert.assertFalse(pinf.isZero());\n        Assert.assertFalse(pinf.negate().isZero());\n        Assert.assertFalse(ninf.isZero());\n        Assert.assertFalse(ninf.negate().isZero());\n    }\n",
        "begin_line": 1562,
        "end_line": 1575,
        "comment": "",
        "child_ranges": [
            "(line 1564,col 9)-(line 1564,col 52)",
            "(line 1565,col 9)-(line 1565,col 61)",
            "(line 1566,col 9)-(line 1566,col 55)",
            "(line 1567,col 9)-(line 1567,col 55)",
            "(line 1568,col 9)-(line 1568,col 59)",
            "(line 1569,col 9)-(line 1569,col 41)",
            "(line 1570,col 9)-(line 1570,col 50)",
            "(line 1571,col 9)-(line 1571,col 42)",
            "(line 1572,col 9)-(line 1572,col 51)",
            "(line 1573,col 9)-(line 1573,col 42)",
            "(line 1574,col 9)-(line 1574,col 51)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.dfp.DfpTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/dfp/DfpTest.java",
        "signature": "org.apache.commons.math3.dfp.DfpTest.testSignPredicates()",
        "snippet": "    @Test\n    public void testSignPredicates() {\n\n        Assert.assertTrue(field.getZero().negativeOrNull());\n        Assert.assertTrue(field.getZero().positiveOrNull());\n        Assert.assertFalse(field.getZero().strictlyNegative());\n        Assert.assertFalse(field.getZero().strictlyPositive());\n\n        Assert.assertTrue(field.getZero().negate().negativeOrNull());\n        Assert.assertTrue(field.getZero().negate().positiveOrNull());\n        Assert.assertFalse(field.getZero().negate().strictlyNegative());\n        Assert.assertFalse(field.getZero().negate().strictlyPositive());\n\n        Assert.assertFalse(field.getOne().negativeOrNull());\n        Assert.assertTrue(field.getOne().positiveOrNull());\n        Assert.assertFalse(field.getOne().strictlyNegative());\n        Assert.assertTrue(field.getOne().strictlyPositive());\n\n        Assert.assertTrue(field.getOne().negate().negativeOrNull());\n        Assert.assertFalse(field.getOne().negate().positiveOrNull());\n        Assert.assertTrue(field.getOne().negate().strictlyNegative());\n        Assert.assertFalse(field.getOne().negate().strictlyPositive());\n\n        Assert.assertFalse(nan.negativeOrNull());\n        Assert.assertFalse(nan.positiveOrNull());\n        Assert.assertFalse(nan.strictlyNegative());\n        Assert.assertFalse(nan.strictlyPositive());\n\n        Assert.assertFalse(nan.negate().negativeOrNull());\n        Assert.assertFalse(nan.negate().positiveOrNull());\n        Assert.assertFalse(nan.negate().strictlyNegative());\n        Assert.assertFalse(nan.negate().strictlyPositive());\n\n        Assert.assertFalse(pinf.negativeOrNull());\n        Assert.assertTrue(pinf.positiveOrNull());\n        Assert.assertFalse(pinf.strictlyNegative());\n        Assert.assertTrue(pinf.strictlyPositive());\n\n        Assert.assertTrue(pinf.negate().negativeOrNull());\n        Assert.assertFalse(pinf.negate().positiveOrNull());\n        Assert.assertTrue(pinf.negate().strictlyNegative());\n        Assert.assertFalse(pinf.negate().strictlyPositive());\n\n        Assert.assertTrue(ninf.negativeOrNull());\n        Assert.assertFalse(ninf.positiveOrNull());\n        Assert.assertTrue(ninf.strictlyNegative());\n        Assert.assertFalse(ninf.strictlyPositive());\n\n        Assert.assertFalse(ninf.negate().negativeOrNull());\n        Assert.assertTrue(ninf.negate().positiveOrNull());\n        Assert.assertFalse(ninf.negate().strictlyNegative());\n        Assert.assertTrue(ninf.negate().strictlyPositive());\n\n    }\n",
        "begin_line": 1577,
        "end_line": 1630,
        "comment": "",
        "child_ranges": [
            "(line 1580,col 9)-(line 1580,col 60)",
            "(line 1581,col 9)-(line 1581,col 60)",
            "(line 1582,col 9)-(line 1582,col 63)",
            "(line 1583,col 9)-(line 1583,col 63)",
            "(line 1585,col 9)-(line 1585,col 69)",
            "(line 1586,col 9)-(line 1586,col 69)",
            "(line 1587,col 9)-(line 1587,col 72)",
            "(line 1588,col 9)-(line 1588,col 72)",
            "(line 1590,col 9)-(line 1590,col 60)",
            "(line 1591,col 9)-(line 1591,col 59)",
            "(line 1592,col 9)-(line 1592,col 62)",
            "(line 1593,col 9)-(line 1593,col 61)",
            "(line 1595,col 9)-(line 1595,col 68)",
            "(line 1596,col 9)-(line 1596,col 69)",
            "(line 1597,col 9)-(line 1597,col 70)",
            "(line 1598,col 9)-(line 1598,col 71)",
            "(line 1600,col 9)-(line 1600,col 49)",
            "(line 1601,col 9)-(line 1601,col 49)",
            "(line 1602,col 9)-(line 1602,col 51)",
            "(line 1603,col 9)-(line 1603,col 51)",
            "(line 1605,col 9)-(line 1605,col 58)",
            "(line 1606,col 9)-(line 1606,col 58)",
            "(line 1607,col 9)-(line 1607,col 60)",
            "(line 1608,col 9)-(line 1608,col 60)",
            "(line 1610,col 9)-(line 1610,col 50)",
            "(line 1611,col 9)-(line 1611,col 49)",
            "(line 1612,col 9)-(line 1612,col 52)",
            "(line 1613,col 9)-(line 1613,col 51)",
            "(line 1615,col 9)-(line 1615,col 58)",
            "(line 1616,col 9)-(line 1616,col 59)",
            "(line 1617,col 9)-(line 1617,col 60)",
            "(line 1618,col 9)-(line 1618,col 61)",
            "(line 1620,col 9)-(line 1620,col 49)",
            "(line 1621,col 9)-(line 1621,col 50)",
            "(line 1622,col 9)-(line 1622,col 51)",
            "(line 1623,col 9)-(line 1623,col 52)",
            "(line 1625,col 9)-(line 1625,col 59)",
            "(line 1626,col 9)-(line 1626,col 58)",
            "(line 1627,col 9)-(line 1627,col 61)",
            "(line 1628,col 9)-(line 1628,col 60)"
        ]
    }
]