[
    {
        "class_name": "com.google.javascript.jscomp.CompilerRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CompilerRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CompilerRunnerTest.setUp()",
        "snippet": "  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    Flags.disableStateCheckingForTest();\n    Flags.resetAllFlagsForTest();\n    lastCompiler = null;\n    useStringComparison = false;\n  }\n",
        "begin_line": 53,
        "end_line": 60,
        "comment": "",
        "child_ranges": [
            "(line 55,col 5)-(line 55,col 18)",
            "(line 56,col 5)-(line 56,col 40)",
            "(line 57,col 5)-(line 57,col 33)",
            "(line 58,col 5)-(line 58,col 24)",
            "(line 59,col 5)-(line 59,col 32)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CompilerRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CompilerRunnerTest.tearDown()",
        "snippet": "  @Override\n  public void tearDown() throws Exception {\n    Flags.resetAllFlagsForTest();\n\n    // NOTE(nicksantos): ANT needs this for some weird reason.\n    AbstractCompilerRunner.FLAG_define.resetForTest();\n    AbstractCompilerRunner.FLAG_jscomp_off.resetForTest();\n    AbstractCompilerRunner.FLAG_jscomp_warning.resetForTest();\n    AbstractCompilerRunner.FLAG_jscomp_error.resetForTest();\n\n    Flags.enableStateCheckingForTest();\n    super.tearDown();\n  }\n",
        "begin_line": 62,
        "end_line": 74,
        "comment": "",
        "child_ranges": [
            "(line 64,col 5)-(line 64,col 33)",
            "(line 67,col 5)-(line 67,col 54)",
            "(line 68,col 5)-(line 68,col 58)",
            "(line 69,col 5)-(line 69,col 62)",
            "(line 70,col 5)-(line 70,col 60)",
            "(line 72,col 5)-(line 72,col 39)",
            "(line 73,col 5)-(line 73,col 21)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CompilerRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CompilerRunnerTest.testTypeCheckingOffByDefault()",
        "snippet": "  public void testTypeCheckingOffByDefault() {}\n",
        "begin_line": 76,
        "end_line": 76,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CompilerRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CompilerRunnerTest.testTypeCheckingOnWithVerbose()",
        "snippet": "  public void testTypeCheckingOnWithVerbose() {\n    CompilerRunner.FLAG_warning_level.setForTest(WarningLevel.VERBOSE);\n    test(\"function f(x) { return x; } f();\", TypeCheck.WRONG_ARGUMENT_COUNT);\n  }\n",
        "begin_line": 83,
        "end_line": 86,
        "comment": "",
        "child_ranges": [
            "(line 84,col 5)-(line 84,col 71)",
            "(line 85,col 5)-(line 85,col 77)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CompilerRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CompilerRunnerTest.testTypeCheckOverride1()",
        "snippet": "  public void testTypeCheckOverride1() {\n    CompilerRunner.FLAG_warning_level.setForTest(WarningLevel.VERBOSE);\n    CompilerRunner.FLAG_jscomp_off.setForTest(\n        Lists.newArrayList(\"checkTypes\"));\n    testSame(\"var x = x || {}; x.f = function() {}; x.f(3);\");\n  }\n",
        "begin_line": 88,
        "end_line": 93,
        "comment": "",
        "child_ranges": [
            "(line 89,col 5)-(line 89,col 71)",
            "(line 90,col 5)-(line 91,col 42)",
            "(line 92,col 5)-(line 92,col 62)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CompilerRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CompilerRunnerTest.testTypeCheckOverride2()",
        "snippet": "  public void testTypeCheckOverride2() {\n    CompilerRunner.FLAG_warning_level.setForTest(WarningLevel.DEFAULT);\n    testSame(\"var x = x || {}; x.f = function() {}; x.f(3);\");\n\n    CompilerRunner.FLAG_jscomp_warning.setForTest(\n        Lists.newArrayList(\"checkTypes\"));\n    test(\"var x = x || {}; x.f = function() {}; x.f(3);\",\n         TypeCheck.WRONG_ARGUMENT_COUNT);\n  }\n",
        "begin_line": 95,
        "end_line": 103,
        "comment": "",
        "child_ranges": [
            "(line 96,col 5)-(line 96,col 71)",
            "(line 97,col 5)-(line 97,col 62)",
            "(line 99,col 5)-(line 100,col 42)",
            "(line 101,col 5)-(line 102,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CompilerRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CompilerRunnerTest.testCheckSymbolsOffForDefault()",
        "snippet": "  public void testCheckSymbolsOffForDefault() {\n    CompilerRunner.FLAG_warning_level.setForTest(WarningLevel.DEFAULT);\n    test(\"x = 3; var y; var y;\", \"x=3; var y;\");\n  }\n",
        "begin_line": 105,
        "end_line": 108,
        "comment": "",
        "child_ranges": [
            "(line 106,col 5)-(line 106,col 71)",
            "(line 107,col 5)-(line 107,col 48)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CompilerRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CompilerRunnerTest.testCheckSymbolsOnForVerbose()",
        "snippet": "  public void testCheckSymbolsOnForVerbose() {\n    CompilerRunner.FLAG_warning_level.setForTest(WarningLevel.VERBOSE);\n    test(\"x = 3;\", VarCheck.UNDEFINED_VAR_ERROR);\n    test(\"var y; var y;\", SyntacticScopeCreator.VAR_MULTIPLY_DECLARED_ERROR);\n  }\n",
        "begin_line": 110,
        "end_line": 114,
        "comment": "",
        "child_ranges": [
            "(line 111,col 5)-(line 111,col 71)",
            "(line 112,col 5)-(line 112,col 49)",
            "(line 113,col 5)-(line 113,col 77)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CompilerRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CompilerRunnerTest.testCheckSymbolsOverrideForVerbose()",
        "snippet": "  public void testCheckSymbolsOverrideForVerbose() {\n    CompilerRunner.FLAG_warning_level.setForTest(WarningLevel.VERBOSE);\n    AbstractCompilerRunner.FLAG_jscomp_off.setForTest(\n        Lists.newArrayList(\"undefinedVars\"));\n    testSame(\"x = 3;\");\n  }\n",
        "begin_line": 116,
        "end_line": 121,
        "comment": "",
        "child_ranges": [
            "(line 117,col 5)-(line 117,col 71)",
            "(line 118,col 5)-(line 119,col 45)",
            "(line 120,col 5)-(line 120,col 23)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CompilerRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CompilerRunnerTest.testCheckUndefinedProperties()",
        "snippet": "  public void testCheckUndefinedProperties() {\n    CompilerRunner.FLAG_warning_level.setForTest(WarningLevel.VERBOSE);\n    AbstractCompilerRunner.FLAG_jscomp_error.setForTest(\n        Lists.newArrayList(\"missingProperties\"));\n    test(\"var x = {}; var y = x.bar;\", TypeCheck.INEXISTENT_PROPERTY);\n  }\n",
        "begin_line": 123,
        "end_line": 128,
        "comment": "",
        "child_ranges": [
            "(line 124,col 5)-(line 124,col 71)",
            "(line 125,col 5)-(line 126,col 49)",
            "(line 127,col 5)-(line 127,col 70)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CompilerRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CompilerRunnerTest.testDuplicateParams()",
        "snippet": "  public void testDuplicateParams() {\n    test(\"function (a, a) {}\", RhinoErrorReporter.DUPLICATE_PARAM);\n    assertTrue(lastCompiler.hasHaltingErrors());\n  }\n",
        "begin_line": 130,
        "end_line": 133,
        "comment": "",
        "child_ranges": [
            "(line 131,col 5)-(line 131,col 67)",
            "(line 132,col 5)-(line 132,col 48)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CompilerRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CompilerRunnerTest.testDefineFlag()",
        "snippet": "  public void testDefineFlag() {\n    AbstractCompilerRunner.FLAG_define.setForTest(\n        Lists.newArrayList(\"FOO\", \"BAR=5\"));\n    test(\"/** @define {boolean} */ var FOO = false;\" +\n         \"/** @define {number} */ var BAR = 3;\",\n         \"var FOO = true, BAR = 5;\");\n  }\n",
        "begin_line": 135,
        "end_line": 141,
        "comment": "",
        "child_ranges": [
            "(line 136,col 5)-(line 137,col 44)",
            "(line 138,col 5)-(line 140,col 37)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CompilerRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CompilerRunnerTest.testScriptStrictModeNoWarning()",
        "snippet": "  public void testScriptStrictModeNoWarning() {\n    test(\"'use strict';\", \"\");\n    test(\"'no use strict';\", CheckSideEffects.USELESS_CODE_ERROR);\n  }\n",
        "begin_line": 143,
        "end_line": 146,
        "comment": "",
        "child_ranges": [
            "(line 144,col 5)-(line 144,col 30)",
            "(line 145,col 5)-(line 145,col 66)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CompilerRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CompilerRunnerTest.testFunctionStrictModeNoWarning()",
        "snippet": "  public void testFunctionStrictModeNoWarning() {\n    test(\"function f() {'use strict';}\", \"function f() {}\");\n    test(\"function f() {'no use strict';}\",\n         CheckSideEffects.USELESS_CODE_ERROR);\n  }\n",
        "begin_line": 148,
        "end_line": 152,
        "comment": "",
        "child_ranges": [
            "(line 149,col 5)-(line 149,col 60)",
            "(line 150,col 5)-(line 151,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CompilerRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CompilerRunnerTest.testQuietMode()",
        "snippet": "  public void testQuietMode() {}\n",
        "begin_line": 154,
        "end_line": 154,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CompilerRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CompilerRunnerTest.testIssue70()",
        "snippet": "  public void testIssue70() {\n    test(\"function foo({}) {}\", RhinoErrorReporter.PARSE_ERROR);\n  }\n",
        "begin_line": 167,
        "end_line": 169,
        "comment": "",
        "child_ranges": [
            "(line 168,col 5)-(line 168,col 64)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CompilerRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CompilerRunnerTest.testIssue81()",
        "snippet": "  public void testIssue81() {}\n",
        "begin_line": 171,
        "end_line": 171,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CompilerRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CompilerRunnerTest.testIssue115()",
        "snippet": "  public void testIssue115() {\n    CompilerRunner.FLAG_compilation_level.setForTest(\n        CompilationLevel.SIMPLE_OPTIMIZATIONS);\n    CompilerRunner.FLAG_warning_level.setForTest(\n        WarningLevel.VERBOSE);\n    test(\"function f() { \" +\n         \"  var arguments = Array.prototype.slice.call(arguments, 0);\" +\n         \"  return arguments[0]; \" +\n         \"}\",\n         \"function f() { \" +\n         \"  arguments = Array.prototype.slice.call(arguments, 0);\" +\n         \"  return arguments[0]; \" +\n         \"}\");\n  }\n",
        "begin_line": 181,
        "end_line": 194,
        "comment": "",
        "child_ranges": [
            "(line 182,col 5)-(line 183,col 47)",
            "(line 184,col 5)-(line 185,col 30)",
            "(line 186,col 5)-(line 193,col 14)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CompilerRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CompilerRunnerTest.testDebugFlag1()",
        "snippet": "  public void testDebugFlag1() {\n    CompilerRunner.FLAG_compilation_level.setForTest(\n        CompilationLevel.SIMPLE_OPTIMIZATIONS);\n    CompilerRunner.FLAG_debug.setForTest(false);\n    testSame(\"function foo(a) {}\");\n  }\n",
        "begin_line": 196,
        "end_line": 201,
        "comment": "",
        "child_ranges": [
            "(line 197,col 5)-(line 198,col 47)",
            "(line 199,col 5)-(line 199,col 48)",
            "(line 200,col 5)-(line 200,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CompilerRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CompilerRunnerTest.testDebugFlag2()",
        "snippet": "  public void testDebugFlag2() {\n    CompilerRunner.FLAG_compilation_level.setForTest(\n        CompilationLevel.SIMPLE_OPTIMIZATIONS);\n    CompilerRunner.FLAG_debug.setForTest(true);\n    test(\"function foo(a) {}\",\n         \"function foo($a$$) {}\");\n  }\n",
        "begin_line": 203,
        "end_line": 209,
        "comment": "",
        "child_ranges": [
            "(line 204,col 5)-(line 205,col 47)",
            "(line 206,col 5)-(line 206,col 47)",
            "(line 207,col 5)-(line 208,col 34)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CompilerRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CompilerRunnerTest.testDebugFlag3()",
        "snippet": "  public void testDebugFlag3() {\n    CompilerRunner.FLAG_compilation_level.setForTest(\n        CompilationLevel.ADVANCED_OPTIMIZATIONS);\n    CompilerRunner.FLAG_warning_level.setForTest(\n        WarningLevel.QUIET);\n    CompilerRunner.FLAG_debug.setForTest(false);\n    test(\"function Foo() {};\" +\n         \"Foo.x = 1;\" +\n         \"function f() {throw new Foo().x;} f();\",\n         \"function a() {};\" +\n         \"throw new a().a;\");\n  }\n",
        "begin_line": 211,
        "end_line": 222,
        "comment": "",
        "child_ranges": [
            "(line 212,col 5)-(line 213,col 49)",
            "(line 214,col 5)-(line 215,col 28)",
            "(line 216,col 5)-(line 216,col 48)",
            "(line 217,col 5)-(line 221,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CompilerRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CompilerRunnerTest.testDebugFlag4()",
        "snippet": "  public void testDebugFlag4() {\n    CompilerRunner.FLAG_compilation_level.setForTest(\n        CompilationLevel.ADVANCED_OPTIMIZATIONS);\n    CompilerRunner.FLAG_warning_level.setForTest(\n        WarningLevel.QUIET);\n    CompilerRunner.FLAG_debug.setForTest(true);\n    test(\"function Foo() {};\" +\n        \"Foo.x = 1;\" +\n        \"function f() {throw new Foo().x;} f();\",\n        \"function $Foo$$() {};\" +\n        \"throw new $Foo$$().$x$;\");\n  }\n",
        "begin_line": 224,
        "end_line": 235,
        "comment": "",
        "child_ranges": [
            "(line 225,col 5)-(line 226,col 49)",
            "(line 227,col 5)-(line 228,col 28)",
            "(line 229,col 5)-(line 229,col 47)",
            "(line 230,col 5)-(line 234,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CompilerRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CompilerRunnerTest.testSame(java.lang.String)",
        "snippet": "  private void testSame(String original) {\n    testSame(new String[] { original });\n  }\n",
        "begin_line": 239,
        "end_line": 241,
        "comment": "",
        "child_ranges": [
            "(line 240,col 5)-(line 240,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CompilerRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CompilerRunnerTest.testSame(java.lang.String[])",
        "snippet": "  private void testSame(String[] original) {\n    test(original, original);\n  }\n",
        "begin_line": 243,
        "end_line": 245,
        "comment": "",
        "child_ranges": [
            "(line 244,col 5)-(line 244,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CompilerRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CompilerRunnerTest.test(java.lang.String, java.lang.String)",
        "snippet": "  private void test(String original, String compiled) {\n    test(new String[] { original }, new String[] { compiled });\n  }\n",
        "begin_line": 247,
        "end_line": 249,
        "comment": "",
        "child_ranges": [
            "(line 248,col 5)-(line 248,col 63)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CompilerRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CompilerRunnerTest.test(java.lang.String[], java.lang.String[])",
        "snippet": "  private void test(String[] original, String[] compiled) {\n    Compiler compiler = compile(original);\n    assertEquals(\"Expected no warnings or errors\\n\" +\n        \"Errors: \\n\" + Joiner.on(\"\\n\").join(compiler.getErrors()) +\n        \"Warnings: \\n\" + Joiner.on(\"\\n\").join(compiler.getWarnings()),\n        0, compiler.getErrors().length + compiler.getWarnings().length);\n\n    Node root = compiler.getRoot().getLastChild();\n    if (useStringComparison) {\n      assertEquals(Joiner.on(\"\").join(compiled), compiler.toSource());\n    } else {\n      Node expectedRoot = parse(compiled);\n      String explanation = expectedRoot.checkTreeEquals(root);\n      assertNull(\"\\nExpected: \" + compiler.toSource(expectedRoot) +\n          \"\\nResult: \" + compiler.toSource(root) +\n          \"\\n\" + explanation, explanation);\n    }\n  }\n",
        "begin_line": 255,
        "end_line": 272,
        "comment": "\n   * Asserts that when compiling with the given compiler options,\n   * {@code original} is transformed into {@code compiled}.\n   ",
        "child_ranges": [
            "(line 256,col 5)-(line 256,col 42)",
            "(line 257,col 5)-(line 260,col 72)",
            "(line 262,col 5)-(line 262,col 50)",
            "(line 263,col 5)-(line 271,col 5)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CompilerRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CompilerRunnerTest.test(java.lang.String, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  private void test(String original, DiagnosticType warning) {\n    test(new String[] { original }, warning);\n  }\n",
        "begin_line": 277,
        "end_line": 279,
        "comment": "\n   * Asserts that when compiling, there is an error or warning.\n   ",
        "child_ranges": [
            "(line 278,col 5)-(line 278,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CompilerRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CompilerRunnerTest.test(java.lang.String[], com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  private void test(String[] original, DiagnosticType warning) {\n    Compiler compiler = compile(original);\n    assertEquals(\"Expected exactly one warning or error \" +\n        \"Errors: \\n\" + Joiner.on(\"\\n\").join(compiler.getErrors()) +\n        \"Warnings: \\n\" + Joiner.on(\"\\n\").join(compiler.getWarnings()),\n        1, compiler.getErrors().length + compiler.getWarnings().length);\n    if (compiler.getErrors().length > 0) {\n      assertEquals(warning, compiler.getErrors()[0].getType());\n    } else {\n      assertEquals(warning, compiler.getWarnings()[0].getType());\n    }\n  }\n",
        "begin_line": 284,
        "end_line": 295,
        "comment": "\n   * Asserts that when compiling, there is an error or warning.\n   ",
        "child_ranges": [
            "(line 285,col 5)-(line 285,col 42)",
            "(line 286,col 5)-(line 289,col 72)",
            "(line 290,col 5)-(line 294,col 5)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CompilerRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CompilerRunnerTest.compile(java.lang.String)",
        "snippet": "  private Compiler compile(String original) {\n    return compile( new String[] { original });\n  }\n",
        "begin_line": 297,
        "end_line": 299,
        "comment": "",
        "child_ranges": [
            "(line 298,col 5)-(line 298,col 47)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CompilerRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CompilerRunnerTest.compile(java.lang.String[])",
        "snippet": "  private Compiler compile(String[] original) {\n    CompilerRunner runner = new CompilerRunner(new String[] {});\n    Compiler compiler = runner.createCompiler();\n    lastCompiler = compiler;\n    JSSourceFile[] inputs = new JSSourceFile[original.length];\n    for (int i = 0; i < original.length; i++) {\n      inputs[i] = JSSourceFile.fromCode(\"input\" + i, original[i]);\n    }\n    CompilerOptions options = runner.createOptions();\n    try {\n      runner.setRunOptions(options);\n    } catch (AbstractCompilerRunner.FlagUsageException e) {\n      fail(\"Unexpected exception \" + e);\n    } catch (IOException e) {\n      assert(false);\n    }\n    compiler.compile(\n        externs, CompilerTestCase.createModuleChain(original), options);\n    return compiler;\n  }\n",
        "begin_line": 301,
        "end_line": 320,
        "comment": "",
        "child_ranges": [
            "(line 302,col 5)-(line 302,col 64)",
            "(line 303,col 5)-(line 303,col 48)",
            "(line 304,col 5)-(line 304,col 28)",
            "(line 305,col 5)-(line 305,col 62)",
            "(line 306,col 5)-(line 308,col 5)",
            "(line 309,col 5)-(line 309,col 53)",
            "(line 310,col 5)-(line 316,col 5)",
            "(line 317,col 5)-(line 318,col 72)",
            "(line 319,col 5)-(line 319,col 20)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CompilerRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CompilerRunnerTest.parse(java.lang.String[])",
        "snippet": "  private Node parse(String[] original) {\n    CompilerRunner runner = new CompilerRunner(new String[] {});\n    Compiler compiler = runner.createCompiler();\n    JSSourceFile[] inputs = new JSSourceFile[original.length];\n    for (int i = 0; i < inputs.length; i++) {\n      inputs[i] = JSSourceFile.fromCode(\"input\" + i, original[i]);\n    }\n    compiler.init(externs, inputs, new CompilerOptions());\n    Node all = compiler.parseInputs();\n    Node n = all.getLastChild();\n    return n;\n  }\n",
        "begin_line": 322,
        "end_line": 333,
        "comment": "",
        "child_ranges": [
            "(line 323,col 5)-(line 323,col 64)",
            "(line 324,col 5)-(line 324,col 48)",
            "(line 325,col 5)-(line 325,col 62)",
            "(line 326,col 5)-(line 328,col 5)",
            "(line 329,col 5)-(line 329,col 58)",
            "(line 330,col 5)-(line 330,col 38)",
            "(line 331,col 5)-(line 331,col 32)",
            "(line 332,col 5)-(line 332,col 13)"
        ]
    }
]