[
    {
        "class_name": "org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java",
        "signature": "org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest.testMissedEndEvent()",
        "snippet": "  @Test\n  public void testMissedEndEvent() {\n      final double   t0     = 1878250320.0000029;\n      final double   tEvent = 1878250379.9999986;\n      final double[] k  = { 1.0e-4, 1.0e-5, 1.0e-6 };\n      FirstOrderDifferentialEquations ode = new FirstOrderDifferentialEquations() {\n\n          public int getDimension() {\n              return k.length;\n          }\n\n          public void computeDerivatives(double t, double[] y, double[] yDot) {\n              for (int i = 0; i < y.length; ++i) {\n                  yDot[i] = k[i] * y[i];\n              }\n          }\n      };\n\n      DormandPrince853Integrator integrator = new DormandPrince853Integrator(0.0, 100.0,\n                                                                             1.0e-10, 1.0e-10);\n\n      double[] y0   = new double[k.length];\n      for (int i = 0; i < y0.length; ++i) {\n          y0[i] = i + 1;\n      }\n      double[] y    = new double[k.length];\n\n      integrator.setInitialStepSize(60.0);\n      double finalT = integrator.integrate(ode, t0, y0, tEvent, y);\n      Assert.assertEquals(tEvent, finalT, 5.0e-6);\n      for (int i = 0; i < y.length; ++i) {\n          Assert.assertEquals(y0[i] * FastMath.exp(k[i] * (finalT - t0)), y[i], 1.0e-9);\n      }\n\n      integrator.setInitialStepSize(60.0);\n      integrator.addEventHandler(new EventHandler() {\n\n          public void init(double t0, double[] y0, double t) {\n          }\n\n          public void resetState(double t, double[] y) {\n          }\n\n          public double g(double t, double[] y) {\n              return t - tEvent;\n          }\n\n          public Action eventOccurred(double t, double[] y, boolean increasing) {\n              Assert.assertEquals(tEvent, t, 5.0e-6);\n              return Action.CONTINUE;\n          }\n      }, Double.POSITIVE_INFINITY, 1.0e-20, 100);\n      finalT = integrator.integrate(ode, t0, y0, tEvent + 120, y);\n      Assert.assertEquals(tEvent + 120, finalT, 5.0e-6);\n      for (int i = 0; i < y.length; ++i) {\n          Assert.assertEquals(y0[i] * FastMath.exp(k[i] * (finalT - t0)), y[i], 1.0e-9);\n      }\n\n  }\n",
        "begin_line": 39,
        "end_line": 97,
        "comment": "",
        "child_ranges": [
            "(line 41,col 7)-(line 41,col 49)",
            "(line 42,col 7)-(line 42,col 49)",
            "(line 43,col 7)-(line 43,col 53)",
            "(line 44,col 7)-(line 55,col 8)",
            "(line 57,col 7)-(line 58,col 95)",
            "(line 60,col 7)-(line 60,col 43)",
            "(line 61,col 7)-(line 63,col 7)",
            "(line 64,col 7)-(line 64,col 43)",
            "(line 66,col 7)-(line 66,col 42)",
            "(line 67,col 7)-(line 67,col 67)",
            "(line 68,col 7)-(line 68,col 50)",
            "(line 69,col 7)-(line 71,col 7)",
            "(line 73,col 7)-(line 73,col 42)",
            "(line 74,col 7)-(line 90,col 49)",
            "(line 91,col 7)-(line 91,col 66)",
            "(line 92,col 7)-(line 92,col 56)",
            "(line 93,col 7)-(line 95,col 7)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java",
        "signature": "org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest.Anonymous-c17b5df7-fcac-43cd-a07f-75c493af0f1b.getDimension()",
        "snippet": "          public int getDimension() {\n              return k.length;\n          }\n",
        "begin_line": 46,
        "end_line": 48,
        "comment": "",
        "child_ranges": [
            "(line 47,col 15)-(line 47,col 30)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java",
        "signature": "org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest.Anonymous-74c488d4-9816-4184-a526-02a06d1a62cc.computeDerivatives(double, double[], double[])",
        "snippet": "          public void computeDerivatives(double t, double[] y, double[] yDot) {\n              for (int i = 0; i < y.length; ++i) {\n                  yDot[i] = k[i] * y[i];\n              }\n          }\n",
        "begin_line": 50,
        "end_line": 54,
        "comment": "",
        "child_ranges": [
            "(line 51,col 15)-(line 53,col 15)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java",
        "signature": "org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest.Anonymous-f9bafb77-6351-45b5-861f-40505b5e365a.init(double, double[], double)",
        "snippet": "          public void init(double t0, double[] y0, double t) {\n          }\n",
        "begin_line": 76,
        "end_line": 77,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java",
        "signature": "org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest.Anonymous-57a0d67d-8eae-40f1-83f8-7a7d169047c8.resetState(double, double[])",
        "snippet": "          public void resetState(double t, double[] y) {\n          }\n",
        "begin_line": 79,
        "end_line": 80,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java",
        "signature": "org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest.Anonymous-e1a4fb24-2705-47ee-8cc8-efe48b4bc295.g(double, double[])",
        "snippet": "          public double g(double t, double[] y) {\n              return t - tEvent;\n          }\n",
        "begin_line": 82,
        "end_line": 84,
        "comment": "",
        "child_ranges": [
            "(line 83,col 15)-(line 83,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java",
        "signature": "org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest.Anonymous-910f844b-f439-4543-9512-de2443674a0f.eventOccurred(double, double[], boolean)",
        "snippet": "          public Action eventOccurred(double t, double[] y, boolean increasing) {\n              Assert.assertEquals(tEvent, t, 5.0e-6);\n              return Action.CONTINUE;\n          }\n",
        "begin_line": 86,
        "end_line": 89,
        "comment": "",
        "child_ranges": [
            "(line 87,col 15)-(line 87,col 53)",
            "(line 88,col 15)-(line 88,col 37)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java",
        "signature": "org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest.testDimensionCheck()",
        "snippet": "  @Test(expected=DimensionMismatchException.class)\n  public void testDimensionCheck() {\n      TestProblem1 pb = new TestProblem1();\n      DormandPrince853Integrator integrator = new DormandPrince853Integrator(0.0, 1.0,\n                                                                             1.0e-10, 1.0e-10);\n      integrator.integrate(pb,\n                           0.0, new double[pb.getDimension()+10],\n                           1.0, new double[pb.getDimension()+10]);\n      Assert.fail(\"an exception should have been thrown\");\n  }\n",
        "begin_line": 99,
        "end_line": 108,
        "comment": "",
        "child_ranges": [
            "(line 101,col 7)-(line 101,col 43)",
            "(line 102,col 7)-(line 103,col 95)",
            "(line 104,col 7)-(line 106,col 66)",
            "(line 107,col 7)-(line 107,col 58)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java",
        "signature": "org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest.testNullIntervalCheck()",
        "snippet": "  @Test(expected=NumberIsTooSmallException.class)\n  public void testNullIntervalCheck() {\n      TestProblem1 pb = new TestProblem1();\n      DormandPrince853Integrator integrator = new DormandPrince853Integrator(0.0, 1.0,\n                                                                             1.0e-10, 1.0e-10);\n      integrator.integrate(pb,\n                           0.0, new double[pb.getDimension()],\n                           0.0, new double[pb.getDimension()]);\n      Assert.fail(\"an exception should have been thrown\");\n  }\n",
        "begin_line": 110,
        "end_line": 119,
        "comment": "",
        "child_ranges": [
            "(line 112,col 7)-(line 112,col 43)",
            "(line 113,col 7)-(line 114,col 95)",
            "(line 115,col 7)-(line 117,col 63)",
            "(line 118,col 7)-(line 118,col 58)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java",
        "signature": "org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest.testMinStep()",
        "snippet": "  @Test(expected=NumberIsTooSmallException.class)\n  public void testMinStep() {\n\n      TestProblem1 pb = new TestProblem1();\n      double minStep = 0.1 * (pb.getFinalTime() - pb.getInitialTime());\n      double maxStep = pb.getFinalTime() - pb.getInitialTime();\n      double[] vecAbsoluteTolerance = { 1.0e-15, 1.0e-16 };\n      double[] vecRelativeTolerance = { 1.0e-15, 1.0e-16 };\n\n      FirstOrderIntegrator integ = new DormandPrince853Integrator(minStep, maxStep,\n                                                                  vecAbsoluteTolerance,\n                                                                  vecRelativeTolerance);\n      TestProblemHandler handler = new TestProblemHandler(pb, integ);\n      integ.addStepHandler(handler);\n      integ.integrate(pb,\n                      pb.getInitialTime(), pb.getInitialState(),\n                      pb.getFinalTime(), new double[pb.getDimension()]);\n      Assert.fail(\"an exception should have been thrown\");\n\n  }\n",
        "begin_line": 121,
        "end_line": 140,
        "comment": "",
        "child_ranges": [
            "(line 124,col 7)-(line 124,col 43)",
            "(line 125,col 7)-(line 125,col 71)",
            "(line 126,col 7)-(line 126,col 63)",
            "(line 127,col 7)-(line 127,col 59)",
            "(line 128,col 7)-(line 128,col 59)",
            "(line 130,col 7)-(line 132,col 88)",
            "(line 133,col 7)-(line 133,col 69)",
            "(line 134,col 7)-(line 134,col 36)",
            "(line 135,col 7)-(line 137,col 72)",
            "(line 138,col 7)-(line 138,col 58)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java",
        "signature": "org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest.testIncreasingTolerance()",
        "snippet": "  @Test\n  public void testIncreasingTolerance()\n    {\n\n    int previousCalls = Integer.MAX_VALUE;\n    AdaptiveStepsizeIntegrator integ =\n        new DormandPrince853Integrator(0, Double.POSITIVE_INFINITY,\n                                       Double.NaN, Double.NaN);\n    for (int i = -12; i < -2; ++i) {\n      TestProblem1 pb = new TestProblem1();\n      double minStep = 0;\n      double maxStep = pb.getFinalTime() - pb.getInitialTime();\n      double scalAbsoluteTolerance = FastMath.pow(10.0, i);\n      double scalRelativeTolerance = 0.01 * scalAbsoluteTolerance;\n      integ.setStepSizeControl(minStep, maxStep, scalAbsoluteTolerance, scalRelativeTolerance);\n\n      TestProblemHandler handler = new TestProblemHandler(pb, integ);\n      integ.addStepHandler(handler);\n      integ.integrate(pb,\n                      pb.getInitialTime(), pb.getInitialState(),\n                      pb.getFinalTime(), new double[pb.getDimension()]);\n\n      // the 1.3 factor is only valid for this test\n      // and has been obtained from trial and error\n      // there is no general relation between local and global errors\n      Assert.assertTrue(handler.getMaximalValueError() < (1.3 * scalAbsoluteTolerance));\n      Assert.assertEquals(0, handler.getMaximalTimeError(), 1.0e-12);\n\n      int calls = pb.getCalls();\n      Assert.assertEquals(integ.getEvaluations(), calls);\n      Assert.assertTrue(calls <= previousCalls);\n      previousCalls = calls;\n\n    }\n\n  }\n",
        "begin_line": 142,
        "end_line": 177,
        "comment": "",
        "child_ranges": [
            "(line 146,col 5)-(line 146,col 42)",
            "(line 147,col 5)-(line 149,col 63)",
            "(line 150,col 5)-(line 175,col 5)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java",
        "signature": "org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest.testTooLargeFirstStep()",
        "snippet": "  @Test\n  public void testTooLargeFirstStep() {\n\n      AdaptiveStepsizeIntegrator integ =\n              new DormandPrince853Integrator(0, Double.POSITIVE_INFINITY, Double.NaN, Double.NaN);\n      final double start = 0.0;\n      final double end   = 0.001;\n      FirstOrderDifferentialEquations equations = new FirstOrderDifferentialEquations() {\n\n          public int getDimension() {\n              return 1;\n          }\n\n          public void computeDerivatives(double t, double[] y, double[] yDot) {\n              Assert.assertTrue(t >= FastMath.nextAfter(start, Double.NEGATIVE_INFINITY));\n              Assert.assertTrue(t <= FastMath.nextAfter(end,   Double.POSITIVE_INFINITY));\n              yDot[0] = -100.0 * y[0];\n          }\n\n      };\n\n      integ.setStepSizeControl(0, 1.0, 1.0e-6, 1.0e-8);\n      integ.integrate(equations, start, new double[] { 1.0 }, end, new double[1]);\n\n  }\n",
        "begin_line": 179,
        "end_line": 203,
        "comment": "",
        "child_ranges": [
            "(line 182,col 7)-(line 183,col 98)",
            "(line 184,col 7)-(line 184,col 31)",
            "(line 185,col 7)-(line 185,col 33)",
            "(line 186,col 7)-(line 198,col 8)",
            "(line 200,col 7)-(line 200,col 55)",
            "(line 201,col 7)-(line 201,col 82)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java",
        "signature": "org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest.Anonymous-f6259746-01ee-4fb2-8ec5-183d3d228509.getDimension()",
        "snippet": "          public int getDimension() {\n              return 1;\n          }\n",
        "begin_line": 188,
        "end_line": 190,
        "comment": "",
        "child_ranges": [
            "(line 189,col 15)-(line 189,col 23)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java",
        "signature": "org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest.Anonymous-51ab1946-c1fa-4127-ab4b-cb6ef9ca1ded.computeDerivatives(double, double[], double[])",
        "snippet": "          public void computeDerivatives(double t, double[] y, double[] yDot) {\n              Assert.assertTrue(t >= FastMath.nextAfter(start, Double.NEGATIVE_INFINITY));\n              Assert.assertTrue(t <= FastMath.nextAfter(end,   Double.POSITIVE_INFINITY));\n              yDot[0] = -100.0 * y[0];\n          }\n",
        "begin_line": 192,
        "end_line": 196,
        "comment": "",
        "child_ranges": [
            "(line 193,col 15)-(line 193,col 90)",
            "(line 194,col 15)-(line 194,col 90)",
            "(line 195,col 15)-(line 195,col 38)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java",
        "signature": "org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest.testBackward()",
        "snippet": "  @Test\n  public void testBackward()\n      {\n\n      TestProblem5 pb = new TestProblem5();\n      double minStep = 0;\n      double maxStep = pb.getFinalTime() - pb.getInitialTime();\n      double scalAbsoluteTolerance = 1.0e-8;\n      double scalRelativeTolerance = 0.01 * scalAbsoluteTolerance;\n\n      FirstOrderIntegrator integ = new DormandPrince853Integrator(minStep, maxStep,\n                                                                  scalAbsoluteTolerance,\n                                                                  scalRelativeTolerance);\n      TestProblemHandler handler = new TestProblemHandler(pb, integ);\n      integ.addStepHandler(handler);\n      integ.integrate(pb, pb.getInitialTime(), pb.getInitialState(),\n                      pb.getFinalTime(), new double[pb.getDimension()]);\n\n      Assert.assertTrue(handler.getLastError() < 1.1e-7);\n      Assert.assertTrue(handler.getMaximalValueError() < 1.1e-7);\n      Assert.assertEquals(0, handler.getMaximalTimeError(), 1.0e-12);\n      Assert.assertEquals(\"Dormand-Prince 8 (5, 3)\", integ.getName());\n  }\n",
        "begin_line": 205,
        "end_line": 227,
        "comment": "",
        "child_ranges": [
            "(line 209,col 7)-(line 209,col 43)",
            "(line 210,col 7)-(line 210,col 25)",
            "(line 211,col 7)-(line 211,col 63)",
            "(line 212,col 7)-(line 212,col 44)",
            "(line 213,col 7)-(line 213,col 66)",
            "(line 215,col 7)-(line 217,col 89)",
            "(line 218,col 7)-(line 218,col 69)",
            "(line 219,col 7)-(line 219,col 36)",
            "(line 220,col 7)-(line 221,col 72)",
            "(line 223,col 7)-(line 223,col 57)",
            "(line 224,col 7)-(line 224,col 65)",
            "(line 225,col 7)-(line 225,col 69)",
            "(line 226,col 7)-(line 226,col 70)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java",
        "signature": "org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest.testEvents()",
        "snippet": "  @Test\n  public void testEvents()\n    {\n\n    TestProblem4 pb = new TestProblem4();\n    double minStep = 0;\n    double maxStep = pb.getFinalTime() - pb.getInitialTime();\n    double scalAbsoluteTolerance = 1.0e-9;\n    double scalRelativeTolerance = 0.01 * scalAbsoluteTolerance;\n\n    FirstOrderIntegrator integ = new DormandPrince853Integrator(minStep, maxStep,\n                                                                scalAbsoluteTolerance,\n                                                                scalRelativeTolerance);\n    TestProblemHandler handler = new TestProblemHandler(pb, integ);\n    integ.addStepHandler(handler);\n    EventHandler[] functions = pb.getEventsHandlers();\n    double convergence = 1.0e-8 * maxStep;\n    for (int l = 0; l < functions.length; ++l) {\n      integ.addEventHandler(functions[l], Double.POSITIVE_INFINITY, convergence, 1000);\n    }\n    Assert.assertEquals(functions.length, integ.getEventHandlers().size());\n    integ.integrate(pb,\n                    pb.getInitialTime(), pb.getInitialState(),\n                    pb.getFinalTime(), new double[pb.getDimension()]);\n\n    Assert.assertEquals(0, handler.getMaximalValueError(), 2.1e-7);\n    Assert.assertEquals(0, handler.getMaximalTimeError(), convergence);\n    Assert.assertEquals(12.0, handler.getLastTime(), convergence);\n    integ.clearEventHandlers();\n    Assert.assertEquals(0, integ.getEventHandlers().size());\n\n  }\n",
        "begin_line": 229,
        "end_line": 260,
        "comment": "",
        "child_ranges": [
            "(line 233,col 5)-(line 233,col 41)",
            "(line 234,col 5)-(line 234,col 23)",
            "(line 235,col 5)-(line 235,col 61)",
            "(line 236,col 5)-(line 236,col 42)",
            "(line 237,col 5)-(line 237,col 64)",
            "(line 239,col 5)-(line 241,col 87)",
            "(line 242,col 5)-(line 242,col 67)",
            "(line 243,col 5)-(line 243,col 34)",
            "(line 244,col 5)-(line 244,col 54)",
            "(line 245,col 5)-(line 245,col 42)",
            "(line 246,col 5)-(line 248,col 5)",
            "(line 249,col 5)-(line 249,col 75)",
            "(line 250,col 5)-(line 252,col 70)",
            "(line 254,col 5)-(line 254,col 67)",
            "(line 255,col 5)-(line 255,col 71)",
            "(line 256,col 5)-(line 256,col 66)",
            "(line 257,col 5)-(line 257,col 31)",
            "(line 258,col 5)-(line 258,col 60)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java",
        "signature": "org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest.testKepler()",
        "snippet": "  @Test\n  public void testKepler()\n    {\n\n    final TestProblem3 pb  = new TestProblem3(0.9);\n    double minStep = 0;\n    double maxStep = pb.getFinalTime() - pb.getInitialTime();\n    double scalAbsoluteTolerance = 1.0e-8;\n    double scalRelativeTolerance = scalAbsoluteTolerance;\n\n    FirstOrderIntegrator integ = new DormandPrince853Integrator(minStep, maxStep,\n                                                                scalAbsoluteTolerance,\n                                                                scalRelativeTolerance);\n    integ.addStepHandler(new KeplerHandler(pb));\n    integ.integrate(pb,\n                    pb.getInitialTime(), pb.getInitialState(),\n                    pb.getFinalTime(), new double[pb.getDimension()]);\n\n    Assert.assertEquals(integ.getEvaluations(), pb.getCalls());\n    Assert.assertTrue(pb.getCalls() < 3300);\n\n  }\n",
        "begin_line": 262,
        "end_line": 283,
        "comment": "",
        "child_ranges": [
            "(line 266,col 5)-(line 266,col 51)",
            "(line 267,col 5)-(line 267,col 23)",
            "(line 268,col 5)-(line 268,col 61)",
            "(line 269,col 5)-(line 269,col 42)",
            "(line 270,col 5)-(line 270,col 57)",
            "(line 272,col 5)-(line 274,col 87)",
            "(line 275,col 5)-(line 275,col 48)",
            "(line 276,col 5)-(line 278,col 70)",
            "(line 280,col 5)-(line 280,col 63)",
            "(line 281,col 5)-(line 281,col 44)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java",
        "signature": "org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest.testVariableSteps()",
        "snippet": "  @Test\n  public void testVariableSteps()\n    {\n\n    final TestProblem3 pb  = new TestProblem3(0.9);\n    double minStep = 0;\n    double maxStep = pb.getFinalTime() - pb.getInitialTime();\n    double scalAbsoluteTolerance = 1.0e-8;\n    double scalRelativeTolerance = scalAbsoluteTolerance;\n\n    FirstOrderIntegrator integ = new DormandPrince853Integrator(minStep, maxStep,\n                                                               scalAbsoluteTolerance,\n                                                               scalRelativeTolerance);\n    integ.addStepHandler(new VariableHandler());\n    double stopTime = integ.integrate(pb,\n                                      pb.getInitialTime(), pb.getInitialState(),\n                                      pb.getFinalTime(), new double[pb.getDimension()]);\n    Assert.assertEquals(pb.getFinalTime(), stopTime, 1.0e-10);\n    Assert.assertEquals(\"Dormand-Prince 8 (5, 3)\", integ.getName());\n  }\n",
        "begin_line": 285,
        "end_line": 304,
        "comment": "",
        "child_ranges": [
            "(line 289,col 5)-(line 289,col 51)",
            "(line 290,col 5)-(line 290,col 23)",
            "(line 291,col 5)-(line 291,col 61)",
            "(line 292,col 5)-(line 292,col 42)",
            "(line 293,col 5)-(line 293,col 57)",
            "(line 295,col 5)-(line 297,col 86)",
            "(line 298,col 5)-(line 298,col 48)",
            "(line 299,col 5)-(line 301,col 88)",
            "(line 302,col 5)-(line 302,col 62)",
            "(line 303,col 5)-(line 303,col 68)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java",
        "signature": "org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest.testUnstableDerivative()",
        "snippet": "  @Test\n  public void testUnstableDerivative()\n  {\n    final StepProblem stepProblem = new StepProblem(0.0, 1.0, 2.0);\n    FirstOrderIntegrator integ =\n      new DormandPrince853Integrator(0.1, 10, 1.0e-12, 0.0);\n    integ.addEventHandler(stepProblem, 1.0, 1.0e-12, 1000);\n    double[] y = { Double.NaN };\n    integ.integrate(stepProblem, 0.0, new double[] { 0.0 }, 10.0, y);\n    Assert.assertEquals(8.0, y[0], 1.0e-12);\n  }\n",
        "begin_line": 306,
        "end_line": 316,
        "comment": "",
        "child_ranges": [
            "(line 309,col 5)-(line 309,col 67)",
            "(line 310,col 5)-(line 311,col 60)",
            "(line 312,col 5)-(line 312,col 59)",
            "(line 313,col 5)-(line 313,col 32)",
            "(line 314,col 5)-(line 314,col 69)",
            "(line 315,col 5)-(line 315,col 44)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java",
        "signature": "KeplerHandler(TestProblem3)",
        "snippet": "    public KeplerHandler(TestProblem3 pb) {\n      this.pb = pb;\n    }\n",
        "begin_line": 319,
        "end_line": 321,
        "comment": "",
        "child_ranges": [
            "(line 320,col 7)-(line 320,col 19)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java",
        "signature": "org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest.KeplerHandler.init(double, double[], double)",
        "snippet": "    public void init(double t0, double[] y0, double t) {\n      nbSteps = 0;\n      maxError = 0;\n    }\n",
        "begin_line": 322,
        "end_line": 325,
        "comment": "",
        "child_ranges": [
            "(line 323,col 7)-(line 323,col 18)",
            "(line 324,col 7)-(line 324,col 19)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java",
        "signature": "org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest.KeplerHandler.handleStep(org.apache.commons.math.ode.sampling.StepInterpolator, boolean)",
        "snippet": "    public void handleStep(StepInterpolator interpolator, boolean isLast) {\n\n      ++nbSteps;\n      for (int a = 1; a < 10; ++a) {\n\n        double prev   = interpolator.getPreviousTime();\n        double curr   = interpolator.getCurrentTime();\n        double interp = ((10 - a) * prev + a * curr) / 10;\n        interpolator.setInterpolatedTime(interp);\n\n        double[] interpolatedY = interpolator.getInterpolatedState ();\n        double[] theoreticalY  = pb.computeTheoreticalState(interpolator.getInterpolatedTime());\n        double dx = interpolatedY[0] - theoreticalY[0];\n        double dy = interpolatedY[1] - theoreticalY[1];\n        double error = dx * dx + dy * dy;\n        if (error > maxError) {\n          maxError = error;\n        }\n      }\n      if (isLast) {\n        Assert.assertTrue(maxError < 2.4e-10);\n        Assert.assertTrue(nbSteps < 150);\n      }\n    }\n",
        "begin_line": 326,
        "end_line": 349,
        "comment": "",
        "child_ranges": [
            "(line 328,col 7)-(line 328,col 16)",
            "(line 329,col 7)-(line 344,col 7)",
            "(line 345,col 7)-(line 348,col 7)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java",
        "signature": "org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest.VariableHandler.VariableHandler()",
        "snippet": "    public VariableHandler() {\n        firstTime = true;\n        minStep = 0;\n        maxStep = 0;\n    }\n",
        "begin_line": 356,
        "end_line": 360,
        "comment": "",
        "child_ranges": [
            "(line 357,col 9)-(line 357,col 25)",
            "(line 358,col 9)-(line 358,col 20)",
            "(line 359,col 9)-(line 359,col 20)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java",
        "signature": "org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest.VariableHandler.init(double, double[], double)",
        "snippet": "    public void init(double t0, double[] y0, double t) {\n      firstTime = true;\n      minStep = 0;\n      maxStep = 0;\n    }\n",
        "begin_line": 361,
        "end_line": 365,
        "comment": "",
        "child_ranges": [
            "(line 362,col 7)-(line 362,col 23)",
            "(line 363,col 7)-(line 363,col 18)",
            "(line 364,col 7)-(line 364,col 18)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java",
        "signature": "org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest.VariableHandler.handleStep(org.apache.commons.math.ode.sampling.StepInterpolator, boolean)",
        "snippet": "    public void handleStep(StepInterpolator interpolator,\n                           boolean isLast) {\n\n      double step = FastMath.abs(interpolator.getCurrentTime()\n                             - interpolator.getPreviousTime());\n      if (firstTime) {\n        minStep   = FastMath.abs(step);\n        maxStep   = minStep;\n        firstTime = false;\n      } else {\n        if (step < minStep) {\n          minStep = step;\n        }\n        if (step > maxStep) {\n          maxStep = step;\n        }\n      }\n\n      if (isLast) {\n        Assert.assertTrue(minStep < (1.0 / 100.0));\n        Assert.assertTrue(maxStep > (1.0 / 2.0));\n      }\n    }\n",
        "begin_line": 366,
        "end_line": 388,
        "comment": "",
        "child_ranges": [
            "(line 369,col 7)-(line 370,col 63)",
            "(line 371,col 7)-(line 382,col 7)",
            "(line 384,col 7)-(line 387,col 7)"
        ]
    }
]