[
    {
        "class_name": "com.google.javascript.jscomp.JSCompilerSourceExcerptProviderTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/JSCompilerSourceExcerptProviderTest.java",
        "signature": "com.google.javascript.jscomp.JSCompilerSourceExcerptProviderTest.setUp()",
        "snippet": "  @Override\n  protected void setUp() throws Exception {\n    JSSourceFile foo = JSSourceFile.fromCode(\"foo\",\n        \"foo:first line\\nfoo:second line\\nfoo:third line\\n\");\n    JSSourceFile bar = JSSourceFile.fromCode(\"bar\",\n        \"bar:first line\\nbar:second line\\nbar:third line\\nbar:fourth line\\n\");\n    JSSourceFile foo2 = JSSourceFile.fromCode(\"foo2\",\n        \"foo2:first line\\nfoo2:second line\\nfoo2:third line\");\n    Compiler compiler = new Compiler();\n    CompilerOptions options = new CompilerOptions();\n    compiler.init(\n        new JSSourceFile[] {}, new JSSourceFile[] {foo, bar, foo2}, options);\n    this.provider = compiler;\n  }\n",
        "begin_line": 26,
        "end_line": 39,
        "comment": "",
        "child_ranges": [
            "(line 28,col 5)-(line 29,col 61)",
            "(line 30,col 5)-(line 31,col 78)",
            "(line 32,col 5)-(line 33,col 62)",
            "(line 34,col 5)-(line 34,col 39)",
            "(line 35,col 5)-(line 35,col 52)",
            "(line 36,col 5)-(line 37,col 77)",
            "(line 38,col 5)-(line 38,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.JSCompilerSourceExcerptProviderTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/JSCompilerSourceExcerptProviderTest.java",
        "signature": "com.google.javascript.jscomp.JSCompilerSourceExcerptProviderTest.testExcerptOneLine()",
        "snippet": "  public void testExcerptOneLine() throws Exception {\n    assertEquals(\"foo:first line\", provider.getSourceLine(\"foo\", 1));\n    assertEquals(\"foo:second line\", provider.getSourceLine(\"foo\", 2));\n    assertEquals(\"foo:third line\", provider.getSourceLine(\"foo\", 3));\n    assertEquals(\"bar:first line\", provider.getSourceLine(\"bar\", 1));\n    assertEquals(\"bar:second line\", provider.getSourceLine(\"bar\", 2));\n    assertEquals(\"bar:third line\", provider.getSourceLine(\"bar\", 3));\n    assertEquals(\"bar:fourth line\", provider.getSourceLine(\"bar\", 4));\n  }\n",
        "begin_line": 41,
        "end_line": 49,
        "comment": "",
        "child_ranges": [
            "(line 42,col 5)-(line 42,col 69)",
            "(line 43,col 5)-(line 43,col 70)",
            "(line 44,col 5)-(line 44,col 69)",
            "(line 45,col 5)-(line 45,col 69)",
            "(line 46,col 5)-(line 46,col 70)",
            "(line 47,col 5)-(line 47,col 69)",
            "(line 48,col 5)-(line 48,col 70)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.JSCompilerSourceExcerptProviderTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/JSCompilerSourceExcerptProviderTest.java",
        "signature": "com.google.javascript.jscomp.JSCompilerSourceExcerptProviderTest.testExcerptLineFromInexistantSource()",
        "snippet": "  public void testExcerptLineFromInexistantSource() throws Exception {\n    assertEquals(null, provider.getSourceLine(\"inexistant\", 1));\n    assertEquals(null, provider.getSourceLine(\"inexistant\", 7));\n    assertEquals(null, provider.getSourceLine(\"inexistant\", 90));\n  }\n",
        "begin_line": 51,
        "end_line": 55,
        "comment": "",
        "child_ranges": [
            "(line 52,col 5)-(line 52,col 64)",
            "(line 53,col 5)-(line 53,col 64)",
            "(line 54,col 5)-(line 54,col 65)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.JSCompilerSourceExcerptProviderTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/JSCompilerSourceExcerptProviderTest.java",
        "signature": "com.google.javascript.jscomp.JSCompilerSourceExcerptProviderTest.testExcerptInexistantLine()",
        "snippet": "  public void testExcerptInexistantLine() throws Exception {\n    assertEquals(null, provider.getSourceLine(\"foo\", 0));\n    assertEquals(null, provider.getSourceLine(\"foo\", 4));\n    assertEquals(null, provider.getSourceLine(\"bar\", 0));\n    assertEquals(null, provider.getSourceLine(\"bar\", 5));\n  }\n",
        "begin_line": 57,
        "end_line": 62,
        "comment": "",
        "child_ranges": [
            "(line 58,col 5)-(line 58,col 57)",
            "(line 59,col 5)-(line 59,col 57)",
            "(line 60,col 5)-(line 60,col 57)",
            "(line 61,col 5)-(line 61,col 57)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.JSCompilerSourceExcerptProviderTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/JSCompilerSourceExcerptProviderTest.java",
        "signature": "com.google.javascript.jscomp.JSCompilerSourceExcerptProviderTest.testExceptNoNewLine()",
        "snippet": "  public void testExceptNoNewLine() throws Exception {\n    assertEquals(\"foo2:first line\", provider.getSourceLine(\"foo2\", 1));\n    assertEquals(\"foo2:second line\", provider.getSourceLine(\"foo2\", 2));\n    assertEquals(\"foo2:third line\", provider.getSourceLine(\"foo2\", 3));\n    assertEquals(null, provider.getSourceLine(\"foo2\", 4));\n  }\n",
        "begin_line": 64,
        "end_line": 69,
        "comment": "",
        "child_ranges": [
            "(line 65,col 5)-(line 65,col 71)",
            "(line 66,col 5)-(line 66,col 72)",
            "(line 67,col 5)-(line 67,col 71)",
            "(line 68,col 5)-(line 68,col 58)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.JSCompilerSourceExcerptProviderTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/JSCompilerSourceExcerptProviderTest.java",
        "signature": "com.google.javascript.jscomp.JSCompilerSourceExcerptProviderTest.testExcerptRegion()",
        "snippet": "  public void testExcerptRegion() throws Exception {\n    assertRegionWellFormed(\"foo\", 1);\n    assertRegionWellFormed(\"foo\", 2);\n    assertRegionWellFormed(\"foo\", 3);\n    assertRegionWellFormed(\"bar\", 1);\n    assertRegionWellFormed(\"bar\", 2);\n    assertRegionWellFormed(\"bar\", 3);\n    assertRegionWellFormed(\"bar\", 4);\n  }\n",
        "begin_line": 71,
        "end_line": 79,
        "comment": "",
        "child_ranges": [
            "(line 72,col 5)-(line 72,col 37)",
            "(line 73,col 5)-(line 73,col 37)",
            "(line 74,col 5)-(line 74,col 37)",
            "(line 75,col 5)-(line 75,col 37)",
            "(line 76,col 5)-(line 76,col 37)",
            "(line 77,col 5)-(line 77,col 37)",
            "(line 78,col 5)-(line 78,col 37)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.JSCompilerSourceExcerptProviderTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/JSCompilerSourceExcerptProviderTest.java",
        "signature": "com.google.javascript.jscomp.JSCompilerSourceExcerptProviderTest.testExcerptRegionFromInexistantSource()",
        "snippet": "  public void testExcerptRegionFromInexistantSource() throws Exception {\n    assertEquals(null, provider.getSourceRegion(\"inexistant\", 0));\n    assertEquals(null, provider.getSourceRegion(\"inexistant\", 6));\n    assertEquals(null, provider.getSourceRegion(\"inexistant\", 90));\n  }\n",
        "begin_line": 81,
        "end_line": 85,
        "comment": "",
        "child_ranges": [
            "(line 82,col 5)-(line 82,col 66)",
            "(line 83,col 5)-(line 83,col 66)",
            "(line 84,col 5)-(line 84,col 67)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.JSCompilerSourceExcerptProviderTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/JSCompilerSourceExcerptProviderTest.java",
        "signature": "com.google.javascript.jscomp.JSCompilerSourceExcerptProviderTest.testExcerptInexistantRegion()",
        "snippet": "  public void testExcerptInexistantRegion() throws Exception {\n    assertEquals(null, provider.getSourceRegion(\"foo\", 0));\n    assertEquals(null, provider.getSourceRegion(\"foo\", 4));\n    assertEquals(null, provider.getSourceRegion(\"bar\", 0));\n    assertEquals(null, provider.getSourceRegion(\"bar\", 5));\n  }\n",
        "begin_line": 87,
        "end_line": 92,
        "comment": "",
        "child_ranges": [
            "(line 88,col 5)-(line 88,col 59)",
            "(line 89,col 5)-(line 89,col 59)",
            "(line 90,col 5)-(line 90,col 59)",
            "(line 91,col 5)-(line 91,col 59)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.JSCompilerSourceExcerptProviderTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/JSCompilerSourceExcerptProviderTest.java",
        "signature": "com.google.javascript.jscomp.JSCompilerSourceExcerptProviderTest.assertRegionWellFormed(java.lang.String, int)",
        "snippet": "  private void assertRegionWellFormed(String sourceName, int lineNumber) {\n    Region region = provider.getSourceRegion(sourceName, lineNumber);\n    assertNotNull(region);\n    String sourceRegion = region.getSourceExcerpt();\n    assertNotNull(sourceRegion);\n    if (lineNumber == 1) {\n      assertEquals(1, region.getBeginningLineNumber());\n    } else {\n      assertTrue(region.getBeginningLineNumber() <= lineNumber);\n    }\n    assertTrue(lineNumber <= region.getEndingLineNumber());\n    assertNotSame(sourceRegion, 0, sourceRegion.length());\n    assertNotSame(sourceRegion, '\\n', sourceRegion.charAt(0));\n    assertNotSame(sourceRegion,\n        '\\n', sourceRegion.charAt(sourceRegion.length() - 1));\n    String line = provider.getSourceLine(sourceName, lineNumber);\n    assertTrue(sourceRegion, sourceRegion.contains(line));\n  }\n",
        "begin_line": 99,
        "end_line": 116,
        "comment": "\n   * Asserts that a region is 'well formed': it must not be an empty and\n   * cannot start or finish by a carriage return. In addition, it must\n   * contain the line whose region we are taking.\n   ",
        "child_ranges": [
            "(line 100,col 5)-(line 100,col 69)",
            "(line 101,col 5)-(line 101,col 26)",
            "(line 102,col 5)-(line 102,col 52)",
            "(line 103,col 5)-(line 103,col 32)",
            "(line 104,col 5)-(line 108,col 5)",
            "(line 109,col 5)-(line 109,col 59)",
            "(line 110,col 5)-(line 110,col 58)",
            "(line 111,col 5)-(line 111,col 62)",
            "(line 112,col 5)-(line 113,col 62)",
            "(line 114,col 5)-(line 114,col 65)",
            "(line 115,col 5)-(line 115,col 58)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.JsMessageExtractorTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/JsMessageExtractorTest.java",
        "signature": "com.google.javascript.jscomp.JsMessageExtractorTest.extractMessages(java.lang.String...)",
        "snippet": "  private Collection<JsMessage> extractMessages(String... js) {\n    try {\n      String sourceCode = Joiner.on(\"\\n\").join(js);\n      return new JsMessageExtractor(null, RELAX)\n          .extractMessages(JSSourceFile.fromCode(\"testcode\", sourceCode));\n    } catch (IOException e) {\n      fail(e.getMessage());\n      return null;\n    }\n  }\n",
        "begin_line": 37,
        "end_line": 46,
        "comment": "",
        "child_ranges": [
            "(line 38,col 5)-(line 45,col 5)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.JsMessageExtractorTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/JsMessageExtractorTest.java",
        "signature": "com.google.javascript.jscomp.JsMessageExtractorTest.extractMessage(java.lang.String...)",
        "snippet": "  private JsMessage extractMessage(String... js) {\n    Collection<JsMessage> messages = extractMessages(js);\n    assertEquals(1, messages.size());\n    return messages.iterator().next();\n  }\n",
        "begin_line": 48,
        "end_line": 52,
        "comment": "",
        "child_ranges": [
            "(line 49,col 5)-(line 49,col 57)",
            "(line 50,col 5)-(line 50,col 37)",
            "(line 51,col 5)-(line 51,col 38)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.JsMessageExtractorTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/JsMessageExtractorTest.java",
        "signature": "com.google.javascript.jscomp.JsMessageExtractorTest.testSyntaxError1()",
        "snippet": "  public void testSyntaxError1() {\n    try {\n      extractMessage(\"if (true) {}}\");\n      fail(\"Expected exception\");\n    } catch (RuntimeException e) {\n      assertTrue(e.getMessage().contains(\"JSCompiler errors\\n\"));\n      assertTrue(e.getMessage().contains(\n          \"testcode:1: ERROR - Parse error. syntax error\\n\"));\n      assertTrue(e.getMessage().contains(\"if (true) {}}\\n\"));\n    }\n  }\n",
        "begin_line": 54,
        "end_line": 64,
        "comment": "",
        "child_ranges": [
            "(line 55,col 5)-(line 63,col 5)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.JsMessageExtractorTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/JsMessageExtractorTest.java",
        "signature": "com.google.javascript.jscomp.JsMessageExtractorTest.testSyntaxError2()",
        "snippet": "  public void testSyntaxError2() {\n    try {\n      extractMessage(\"\", \"if (true) {}}\");\n      fail(\"Expected exception\");\n    } catch (RuntimeException e) {\n      assertTrue(e.getMessage().contains(\"JSCompiler errors\\n\"));\n      assertTrue(e.getMessage().contains(\n          \"testcode:2: ERROR - Parse error. syntax error\\n\"));\n      assertTrue(e.getMessage().contains(\"if (true) {}}\\n\"));\n    }\n  }\n",
        "begin_line": 66,
        "end_line": 76,
        "comment": "",
        "child_ranges": [
            "(line 67,col 5)-(line 75,col 5)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.JsMessageExtractorTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/JsMessageExtractorTest.java",
        "signature": "com.google.javascript.jscomp.JsMessageExtractorTest.testExtractNewStyleMessage1()",
        "snippet": "  public void testExtractNewStyleMessage1() {\n    // A simple message with no description.\n    assertEquals(\n        new JsMessage.Builder(\"MSG_SILLY\")\n            .appendStringPart(\"silly test message\")\n            .build(),\n        extractMessage(\"var MSG_SILLY = goog.getMsg('silly test message');\"));\n  }\n",
        "begin_line": 78,
        "end_line": 85,
        "comment": "",
        "child_ranges": [
            "(line 80,col 5)-(line 84,col 78)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.JsMessageExtractorTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/JsMessageExtractorTest.java",
        "signature": "com.google.javascript.jscomp.JsMessageExtractorTest.testExtractNewStyleMessage2()",
        "snippet": "  public void testExtractNewStyleMessage2() {\n    // A message with placeholders and meta data.\n    assertEquals(\n        new JsMessage.Builder(\"MSG_WELCOME\")\n            .appendStringPart(\"Hi \")\n            .appendPlaceholderReference(\"userName\")\n            .appendStringPart(\"! Welcome to \")\n            .appendPlaceholderReference(\"product\")\n            .appendStringPart(\".\")\n            .setDesc(\"The welcome message.\")\n            .setIsHidden(true)\n            .build(),\n        extractMessage(\n            \"/**\",\n            \" * @desc The welcome\",\n            \" *   message.\",\n            \" *\",\n            \" * @hidden\",\n            \" */\",\n            \"var MSG_WELCOME = goog.getMsg(\",\n            \"    'Hi {$userName}! Welcome to {$product}.',\",\n            \"    {userName: someUserName, product: getProductName()});\"));\n  }\n",
        "begin_line": 87,
        "end_line": 109,
        "comment": "",
        "child_ranges": [
            "(line 89,col 5)-(line 108,col 74)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.JsMessageExtractorTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/JsMessageExtractorTest.java",
        "signature": "com.google.javascript.jscomp.JsMessageExtractorTest.testExtractOldStyleMessage1()",
        "snippet": "  public void testExtractOldStyleMessage1() {\n    // Description before the message.\n    assertEquals(\n        new JsMessage.Builder(\"MSG_SILLY\")\n            .appendStringPart(\"silly test message\")\n            .setDesc(\"Description.\")\n            .build(),\n        extractMessage(\n            \"var MSG_SILLY_HELP = 'Description.';\",\n            \"var MSG_SILLY = 'silly test message';\"));\n  }\n",
        "begin_line": 111,
        "end_line": 121,
        "comment": "",
        "child_ranges": [
            "(line 113,col 5)-(line 120,col 54)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.JsMessageExtractorTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/JsMessageExtractorTest.java",
        "signature": "com.google.javascript.jscomp.JsMessageExtractorTest.testExtractOldStyleMessage2()",
        "snippet": "  public void testExtractOldStyleMessage2() {\n    // Description after the message, broken into parts.\n    assertEquals(\n        new JsMessage.Builder(\"MSG_SILLY\")\n            .appendStringPart(\"silly test message\")\n            .setDesc(\"Description.\")\n            .build(),\n        extractMessage(\n            \"var MSG_SILLY = 'silly test message';\",\n            \"var MSG_SILLY_HELP = 'Descrip' + 'tion.';\"));\n  }\n",
        "begin_line": 123,
        "end_line": 133,
        "comment": "",
        "child_ranges": [
            "(line 125,col 5)-(line 132,col 58)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.JsMessageExtractorTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/JsMessageExtractorTest.java",
        "signature": "com.google.javascript.jscomp.JsMessageExtractorTest.testExtractOldStyleMessage3()",
        "snippet": "  public void testExtractOldStyleMessage3() {\n    // Function-style message with two placeholders and no description.\n    assertEquals(\n        new JsMessage.Builder(\"MSG_SILLY\")\n            .appendPlaceholderReference(\"one\")\n            .appendStringPart(\", \")\n            .appendPlaceholderReference(\"two\")\n            .appendStringPart(\", buckle my shoe\")\n            .build(),\n        extractMessage(\n            \"var MSG_SILLY = function(one, two) {\",\n            \"  return one + ', ' + two + ', buckle my shoe';\",\n            \"};\"));\n  }\n",
        "begin_line": 135,
        "end_line": 148,
        "comment": "",
        "child_ranges": [
            "(line 137,col 5)-(line 147,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.JsMessageExtractorTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/JsMessageExtractorTest.java",
        "signature": "com.google.javascript.jscomp.JsMessageExtractorTest.testExtractMixedMessages()",
        "snippet": "  public void testExtractMixedMessages() {\n    // Several mixed-style messages in succession, one containing newlines.\n    Iterator<JsMessage> msgs = extractMessages(\n        \"var MSG_MONEY = function(amount) {\",\n        \"  return 'You owe $' + amount +\",\n        \"         ' to the credit card company.';\",\n        \"};\",\n        \"var MSG_TIME = goog.getMsg('You need to finish your work in ' +\",\n        \"                           '{$duration} hours.', {'duration': d});\",\n        \"var MSG_NAG = 'Clean your room.\\\\n\\\\nWash your clothes.';\",\n        \"var MSG_NAG_HELP = 'Just some ' +\",\n        \"                   'nags.';\").iterator();\n\n    assertEquals(\n        new JsMessage.Builder(\"MSG_MONEY\")\n            .appendStringPart(\"You owe $\")\n            .appendPlaceholderReference(\"amount\")\n            .appendStringPart(\" to the credit card company.\")\n            .build(),\n        msgs.next());\n    assertEquals(\n        new JsMessage.Builder(\"MSG_TIME\")\n            .appendStringPart(\"You need to finish your work in \")\n            .appendPlaceholderReference(\"duration\")\n            .appendStringPart(\" hours.\")\n            .build(),\n        msgs.next());\n    assertEquals(\n        new JsMessage.Builder(\"MSG_NAG\")\n            .appendStringPart(\"Clean your room.\\n\\nWash your clothes.\")\n            .setDesc(\"Just some nags.\")\n            .build(),\n        msgs.next());\n  }\n",
        "begin_line": 150,
        "end_line": 183,
        "comment": "",
        "child_ranges": [
            "(line 152,col 5)-(line 161,col 50)",
            "(line 163,col 5)-(line 169,col 21)",
            "(line 170,col 5)-(line 176,col 21)",
            "(line 177,col 5)-(line 182,col 21)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.JsMessageExtractorTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/JsMessageExtractorTest.java",
        "signature": "com.google.javascript.jscomp.JsMessageExtractorTest.testDuplicateUnnamedVariables()",
        "snippet": "  public void testDuplicateUnnamedVariables() {\n    // Make sure that duplicate unnamed variables don't get swallowed when using\n    // a Google-specific ID generator.\n    Collection<JsMessage> msgs = extractMessages(\n        \"function a() {\",\n        \"  var MSG_UNNAMED_2 = goog.getMsg('foo');\",\n        \"}\",\n        \"function b() {\",\n        \"  var MSG_UNNAMED_2 = goog.getMsg('bar');\",\n        \"}\");\n\n    assertEquals(2, msgs.size());\n    final Iterator<JsMessage> iter = msgs.iterator();\n    assertEquals(\"foo\", iter.next().toString());\n    assertEquals(\"bar\", iter.next().toString());\n  }\n",
        "begin_line": 185,
        "end_line": 200,
        "comment": "",
        "child_ranges": [
            "(line 188,col 5)-(line 194,col 13)",
            "(line 196,col 5)-(line 196,col 33)",
            "(line 197,col 5)-(line 197,col 53)",
            "(line 198,col 5)-(line 198,col 48)",
            "(line 199,col 5)-(line 199,col 48)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.JsMessageExtractorTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/JsMessageExtractorTest.java",
        "signature": "com.google.javascript.jscomp.JsMessageExtractorTest.testMeaningAnnotation()",
        "snippet": "  public void testMeaningAnnotation() {\n    List<JsMessage> msgs = Lists.newArrayList(\n        extractMessages(\n            \"var MSG_UNNAMED_1 = goog.getMsg('foo');\",\n            \"var MSG_UNNAMED_2 = goog.getMsg('foo');\"));\n    assertEquals(2, msgs.size());\n    assertTrue(msgs.get(0).getId().equals(msgs.get(1).getId()));\n    assertEquals(msgs.get(0), msgs.get(1));\n\n    msgs = Lists.newArrayList(\n        extractMessages(\n            \"var MSG_UNNAMED_1 = goog.getMsg('foo');\",\n            \"/** @meaning bar */ var MSG_UNNAMED_2 = goog.getMsg('foo');\"));\n    assertEquals(2, msgs.size());\n    assertFalse(msgs.get(0).getId().equals(msgs.get(1).getId()));\n  }\n",
        "begin_line": 202,
        "end_line": 217,
        "comment": "",
        "child_ranges": [
            "(line 203,col 5)-(line 206,col 56)",
            "(line 207,col 5)-(line 207,col 33)",
            "(line 208,col 5)-(line 208,col 64)",
            "(line 209,col 5)-(line 209,col 43)",
            "(line 211,col 5)-(line 214,col 76)",
            "(line 215,col 5)-(line 215,col 33)",
            "(line 216,col 5)-(line 216,col 65)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.JsMessageExtractorTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/JsMessageExtractorTest.java",
        "signature": "com.google.javascript.jscomp.JsMessageExtractorTest.assertEquals(com.google.javascript.jscomp.JsMessage, com.google.javascript.jscomp.JsMessage)",
        "snippet": "  private void assertEquals(JsMessage expected, JsMessage actual) {\n    assertEquals(expected.getId(), actual.getId());\n    assertEquals(expected.getKey(), actual.getKey());\n    assertEquals(expected.parts(), actual.parts());\n    assertEquals(expected.placeholders(), actual.placeholders());\n    assertEquals(expected.getDesc(), actual.getDesc());\n    assertEquals(expected.isHidden(), actual.isHidden());\n    assertEquals(expected.getMeaning(), actual.getMeaning());\n  }\n",
        "begin_line": 219,
        "end_line": 227,
        "comment": "",
        "child_ranges": [
            "(line 220,col 5)-(line 220,col 51)",
            "(line 221,col 5)-(line 221,col 53)",
            "(line 222,col 5)-(line 222,col 51)",
            "(line 223,col 5)-(line 223,col 65)",
            "(line 224,col 5)-(line 224,col 55)",
            "(line 225,col 5)-(line 225,col 57)",
            "(line 226,col 5)-(line 226,col 61)"
        ]
    }
]