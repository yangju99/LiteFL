[
    {
        "class_name": "com.google.javascript.jscomp.FoldConstantsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/FoldConstantsTest.java",
        "signature": "com.google.javascript.jscomp.FoldConstantsTest.FoldConstantsTest(boolean)",
        "snippet": "  private FoldConstantsTest(boolean compareAsTree) {\n    super(\"\", compareAsTree);\n  }\n",
        "begin_line": 24,
        "end_line": 26,
        "comment": " TODO(user): Remove this when we no longer need to do string comparison.",
        "child_ranges": [
            "(line 25,col 5)-(line 25,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.FoldConstantsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/FoldConstantsTest.java",
        "signature": "com.google.javascript.jscomp.FoldConstantsTest.FoldConstantsTest()",
        "snippet": "  public FoldConstantsTest() {\n    super();\n  }\n",
        "begin_line": 28,
        "end_line": 30,
        "comment": "",
        "child_ranges": [
            "(line 29,col 5)-(line 29,col 12)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.FoldConstantsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/FoldConstantsTest.java",
        "signature": "com.google.javascript.jscomp.FoldConstantsTest.getProcessor(com.google.javascript.jscomp.Compiler)",
        "snippet": "  @Override\n  public CompilerPass getProcessor(final Compiler compiler) {\n    return new CompilerPass() {\n      public void process(Node externs, Node js) {\n        NodeTraversal.traverse(compiler, js, new FoldConstants(compiler));\n      }\n    };\n  }\n",
        "begin_line": 32,
        "end_line": 39,
        "comment": "",
        "child_ranges": [
            "(line 34,col 5)-(line 38,col 6)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.FoldConstantsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/FoldConstantsTest.java",
        "signature": "com.google.javascript.jscomp.FoldConstantsTest.Anonymous-92a3d568-b7d5-41aa-be90-c73708efaea8.process(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "      public void process(Node externs, Node js) {\n        NodeTraversal.traverse(compiler, js, new FoldConstants(compiler));\n      }\n",
        "begin_line": 35,
        "end_line": 37,
        "comment": "",
        "child_ranges": [
            "(line 36,col 9)-(line 36,col 74)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.FoldConstantsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/FoldConstantsTest.java",
        "signature": "com.google.javascript.jscomp.FoldConstantsTest.getNumRepetitions()",
        "snippet": "  @Override\n  protected int getNumRepetitions() {\n    // Reduce this to 2 if we get better expression evaluators.\n    return 2;\n  }\n",
        "begin_line": 41,
        "end_line": 45,
        "comment": "",
        "child_ranges": [
            "(line 44,col 5)-(line 44,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.FoldConstantsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/FoldConstantsTest.java",
        "signature": "com.google.javascript.jscomp.FoldConstantsTest.foldSame(java.lang.String)",
        "snippet": "  void foldSame(String js) {\n    testSame(js);\n  }\n",
        "begin_line": 47,
        "end_line": 49,
        "comment": "",
        "child_ranges": [
            "(line 48,col 5)-(line 48,col 17)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.FoldConstantsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/FoldConstantsTest.java",
        "signature": "com.google.javascript.jscomp.FoldConstantsTest.fold(java.lang.String, java.lang.String)",
        "snippet": "  void fold(String js, String expected) {\n    test(js, expected);\n  }\n",
        "begin_line": 51,
        "end_line": 53,
        "comment": "",
        "child_ranges": [
            "(line 52,col 5)-(line 52,col 23)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.FoldConstantsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/FoldConstantsTest.java",
        "signature": "com.google.javascript.jscomp.FoldConstantsTest.fold(java.lang.String, java.lang.String, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  void fold(String js, String expected, DiagnosticType warning) {\n    test(js, expected, warning);\n  }\n",
        "begin_line": 55,
        "end_line": 57,
        "comment": "",
        "child_ranges": [
            "(line 56,col 5)-(line 56,col 32)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.FoldConstantsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/FoldConstantsTest.java",
        "signature": "com.google.javascript.jscomp.FoldConstantsTest.assertResultString(java.lang.String, java.lang.String)",
        "snippet": "  void assertResultString(String js, String expected) {\n    FoldConstantsTest scTest = new FoldConstantsTest(false);\n    scTest.test(js, expected);\n  }\n",
        "begin_line": 61,
        "end_line": 64,
        "comment": " test that needs tell us where a folding is constructing an invalid AST.",
        "child_ranges": [
            "(line 62,col 5)-(line 62,col 60)",
            "(line 63,col 5)-(line 63,col 30)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.FoldConstantsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/FoldConstantsTest.java",
        "signature": "com.google.javascript.jscomp.FoldConstantsTest.testFoldBlock()",
        "snippet": "  public void testFoldBlock() {\n    fold(\"{{foo()}}\", \"foo()\");\n    fold(\"{foo();{}}\", \"foo()\");\n    fold(\"{{foo()}{}}\", \"foo()\");\n    fold(\"{{foo()}{bar()}}\", \"foo();bar()\");\n    fold(\"{if(false)foo(); {bar()}}\", \"bar()\");\n    fold(\"{if(false)if(false)if(false)foo(); {bar()}}\", \"bar()\");\n\n    fold(\"{'hi'}\", \"\");\n    fold(\"{x==3}\", \"\");\n    fold(\"{ (function(){x++}) }\", \"\");\n    fold(\"function(){return;}\", \"function(){return;}\");\n    fold(\"function(){return 3;}\", \"function(){return 3}\");\n    fold(\"function(){if(x)return; x=3; return; }\",\n         \"function(){if(x)return; x=3; return; }\");\n    fold(\"{x=3;;;y=2;;;}\", \"x=3;y=2\");\n\n    // Cases to test for empty block.\n    fold(\"while(x()){x}\", \"while(x());\");\n    fold(\"while(x()){x()}\", \"while(x())x()\");\n    fold(\"for(x=0;x<100;x++){x}\", \"for(x=0;x<100;x++);\");\n    fold(\"for(x in y){x}\", \"for(x in y);\");\n  }\n",
        "begin_line": 66,
        "end_line": 88,
        "comment": "",
        "child_ranges": [
            "(line 67,col 5)-(line 67,col 31)",
            "(line 68,col 5)-(line 68,col 32)",
            "(line 69,col 5)-(line 69,col 33)",
            "(line 70,col 5)-(line 70,col 44)",
            "(line 71,col 5)-(line 71,col 47)",
            "(line 72,col 5)-(line 72,col 65)",
            "(line 74,col 5)-(line 74,col 23)",
            "(line 75,col 5)-(line 75,col 23)",
            "(line 76,col 5)-(line 76,col 38)",
            "(line 77,col 5)-(line 77,col 55)",
            "(line 78,col 5)-(line 78,col 58)",
            "(line 79,col 5)-(line 80,col 51)",
            "(line 81,col 5)-(line 81,col 38)",
            "(line 84,col 5)-(line 84,col 41)",
            "(line 85,col 5)-(line 85,col 45)",
            "(line 86,col 5)-(line 86,col 57)",
            "(line 87,col 5)-(line 87,col 43)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.FoldConstantsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/FoldConstantsTest.java",
        "signature": "com.google.javascript.jscomp.FoldConstantsTest.testFoldOneChildBlocks()",
        "snippet": "  public void testFoldOneChildBlocks() {\n    fold(\"function(){if(x)a();x=3}\",\n        \"function(){x&&a();x=3}\");\n    fold(\"function(){if(x){a()}x=3}\",\n        \"function(){x&&a();x=3}\");\n    fold(\"function(){if(x){return 3}}\",\n        \"function(){if(x)return 3}\");\n    fold(\"function(){if(x){a()}}\",\n        \"function(){x&&a()}\");\n    fold(\"function(){if(x){throw 1}}\", \"function(){if(x)throw 1;}\");\n\n    // Try it out with functions\n    fold(\"function(){if(x){foo()}}\", \"function(){x&&foo()}\");\n    fold(\"function(){if(x){foo()}else{bar()}}\",\n         \"function(){x?foo():bar()}\");\n\n    // Try it out with properties and methods\n    fold(\"function(){if(x){a.b=1}}\", \"function(){if(x)a.b=1}\");\n    fold(\"function(){if(x){a.b*=1}}\", \"function(){if(x)a.b*=1}\");\n    fold(\"function(){if(x){a.b+=1}}\", \"function(){if(x)a.b+=1}\");\n    fold(\"function(){if(x){++a.b}}\", \"function(){x&&++a.b}\");\n    fold(\"function(){if(x){a.foo()}}\", \"function(){x&&a.foo()}\");\n\n    // Try it out with throw/catch/finally [which should not change]\n    fold(\"function(){try{foo()}catch(e){bar(e)}finally{baz()}}\",\n         \"function(){try{foo()}catch(e){bar(e)}finally{baz()}}\");\n\n    // Try it out with switch statements\n    fold(\"function(){switch(x){case 1:break}}\",\n         \"function(){switch(x){case 1:break}}\");\n    fold(\"function(){switch(x){default:{break}}}\",\n         \"function(){switch(x){default:break}}\");\n    fold(\"function(){switch(x){default:{break}}}\",\n         \"function(){switch(x){default:break}}\");\n    fold(\"function(){switch(x){default:x;case 1:return 2}}\",\n         \"function(){switch(x){default:case 1:return 2}}\");\n\n    // Do while loops stay in a block if that's where they started\n    fold(\"function(){if(e1){do foo();while(e2)}else foo2()}\",\n         \"function(){if(e1){do foo();while(e2)}else foo2()}\");\n    // Test an obscure case with do and while\n    fold(\"if(x){do{foo()}while(y)}else bar()\",\n         \"if(x){do foo();while(y)}else bar()\");\n\n\n    // Play with nested IFs\n    fold(\"function(){if(x){if(y)foo()}}\",\n         \"function(){x&&y&&foo()}\");\n    fold(\"function(){if(x){if(y)foo();else bar()}}\",\n         \"function(){if(x)y?foo():bar()}\");\n    fold(\"function(){if(x){if(y)foo()}else bar()}\",\n         \"function(){if(x)y&&foo();else bar()}\");\n    fold(\"function(){if(x){if(y)foo();else bar()}else{baz()}}\",\n         \"function(){if(x)y?foo():bar();else baz()}\");\n\n    fold(\"if(e1){while(e2){if(e3){foo()}}}else{bar()}\",\n         \"if(e1)while(e2)e3&&foo();else bar()\");\n\n    fold(\"if(e1){with(e2){if(e3){foo()}}}else{bar()}\",\n         \"if(e1)with(e2)e3&&foo();else bar()\");\n\n    fold(\"if(x){if(y){var x;}}\", \"if(x)if(y)var x\");\n    fold(\"if(x){ if(y){var x;}else{var z;} }\",\n         \"if(x)if(y)var x;else var z\");\n\n    // NOTE - technically we can remove the blocks since both the parent\n    // and child have elses. But we don't since it causes ambiguities in\n    // some cases where not all descendent ifs having elses\n    fold(\"if(x){ if(y){var x;}else{var z;} }else{var w}\",\n         \"if(x)if(y)var x;else var z;else var w\");\n    fold(\"if (x) {var x;}else { if (y) { var y;} }\",\n         \"if(x)var x;else if(y)var y\");\n\n    // Here's some of the ambiguous cases\n    fold(\"if(a){if(b){f1();f2();}else if(c){f3();}}else {if(d){f4();}}\",\n         \"if(a)if(b){f1();f2()}else c&&f3();else d&&f4()\");\n\n    fold(\"function(){foo()}\", \"function(){foo()}\");\n    fold(\"switch(x){case y: foo()}\", \"switch(x){case y:foo()}\");\n    fold(\"try{foo()}catch(ex){bar()}finally{baz()}\",\n         \"try{foo()}catch(ex){bar()}finally{baz()}\");\n\n    // ensure that block folding does not break hook ifs\n    fold(\"if(x){if(true){foo();foo()}else{bar();bar()}}\",\n         \"if(x){foo();foo()}\");\n    fold(\"if(x){if(false){foo();foo()}else{bar();bar()}}\",\n         \"if(x){bar();bar()}\");\n\n    // Cases where the then clause has no side effects.\n    fold(\"if(x()){}\", \"x()\");\n    fold(\"if(x()){} else {x()}\", \"x()||x()\");\n    fold(\"if(x){}\", \"\"); // Even the condition has no side effect.\n    fold(\"if(a()){A()} else if (b()) {} else {C()}\",\n         \"if(a())A();else b()||C()\");\n    fold(\"if(a()){} else if (b()) {} else {C()}\",\n         \"a()||b()||C()\");\n    fold(\"if(a()){A()} else if (b()) {} else if (c()) {} else{D()}\",\n         \"if(a())A();else b()||c()||D()\");\n    fold(\"if(a()){} else if (b()) {} else if (c()) {} else{D()}\",\n         \"a()||b()||c()||D()\");\n    fold(\"if(a()){A()} else if (b()) {} else if (c()) {} else{}\",\n         \"if(a())A();else b()||c()\");\n\n    // Verify that non-global scope works.\n    fold(\"function foo(){if(x()){}}\", \"function foo(){x()}\");\n  }\n",
        "begin_line": 91,
        "end_line": 196,
        "comment": " Check that removing blocks with 1 child works ",
        "child_ranges": [
            "(line 92,col 5)-(line 93,col 34)",
            "(line 94,col 5)-(line 95,col 34)",
            "(line 96,col 5)-(line 97,col 37)",
            "(line 98,col 5)-(line 99,col 30)",
            "(line 100,col 5)-(line 100,col 68)",
            "(line 103,col 5)-(line 103,col 61)",
            "(line 104,col 5)-(line 105,col 38)",
            "(line 108,col 5)-(line 108,col 63)",
            "(line 109,col 5)-(line 109,col 65)",
            "(line 110,col 5)-(line 110,col 65)",
            "(line 111,col 5)-(line 111,col 61)",
            "(line 112,col 5)-(line 112,col 65)",
            "(line 115,col 5)-(line 116,col 65)",
            "(line 119,col 5)-(line 120,col 48)",
            "(line 121,col 5)-(line 122,col 49)",
            "(line 123,col 5)-(line 124,col 49)",
            "(line 125,col 5)-(line 126,col 59)",
            "(line 129,col 5)-(line 130,col 62)",
            "(line 132,col 5)-(line 133,col 47)",
            "(line 137,col 5)-(line 138,col 36)",
            "(line 139,col 5)-(line 140,col 43)",
            "(line 141,col 5)-(line 142,col 49)",
            "(line 143,col 5)-(line 144,col 54)",
            "(line 146,col 5)-(line 147,col 48)",
            "(line 149,col 5)-(line 150,col 47)",
            "(line 152,col 5)-(line 152,col 52)",
            "(line 153,col 5)-(line 154,col 39)",
            "(line 159,col 5)-(line 160,col 50)",
            "(line 161,col 5)-(line 162,col 39)",
            "(line 165,col 5)-(line 166,col 59)",
            "(line 168,col 5)-(line 168,col 51)",
            "(line 169,col 5)-(line 169,col 64)",
            "(line 170,col 5)-(line 171,col 53)",
            "(line 174,col 5)-(line 175,col 31)",
            "(line 176,col 5)-(line 177,col 31)",
            "(line 180,col 5)-(line 180,col 29)",
            "(line 181,col 5)-(line 181,col 45)",
            "(line 182,col 5)-(line 182,col 24)",
            "(line 183,col 5)-(line 184,col 37)",
            "(line 185,col 5)-(line 186,col 26)",
            "(line 187,col 5)-(line 188,col 42)",
            "(line 189,col 5)-(line 190,col 31)",
            "(line 191,col 5)-(line 192,col 37)",
            "(line 195,col 5)-(line 195,col 61)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.FoldConstantsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/FoldConstantsTest.java",
        "signature": "com.google.javascript.jscomp.FoldConstantsTest.testFoldOneChildBlocksStringCompare()",
        "snippet": "  public void testFoldOneChildBlocksStringCompare() {\n    // The expected parse tree has a BLOCK structure around the true branch.\n    assertResultString(\"if(x){if(y){var x;}}else{var z;}\",\n        \"if(x){if(y)var x}else var z\");\n  }\n",
        "begin_line": 198,
        "end_line": 202,
        "comment": "",
        "child_ranges": [
            "(line 200,col 5)-(line 201,col 39)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.FoldConstantsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/FoldConstantsTest.java",
        "signature": "com.google.javascript.jscomp.FoldConstantsTest.testNecessaryDanglingElse()",
        "snippet": "  public void testNecessaryDanglingElse() {\n    // The extra block is added by CodeGenerator. The logic to avoid ambiguous\n    // else clauses used to be in FoldConstants, so the test is here for\n    // legacy reasons.\n    assertResultString(\n        \"if(x)if(y){y();z()}else;else x()\", \"if(x){if(y){y();z()}}else x()\");\n  }\n",
        "begin_line": 205,
        "end_line": 211,
        "comment": " Test a particularly hairy edge case. ",
        "child_ranges": [
            "(line 209,col 5)-(line 210,col 77)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.FoldConstantsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/FoldConstantsTest.java",
        "signature": "com.google.javascript.jscomp.FoldConstantsTest.testFoldBlocksWithManyChildren()",
        "snippet": "  public void testFoldBlocksWithManyChildren() {\n    fold(\"function f() { if (false) {} }\", \"function f(){}\");\n    fold(\"function f() { { if (false) {} if (true) {} {} } }\",\n         \"function f(){}\");\n    fold(\"{var x; var y; var z; function f() { { var a; { var b; } } } }\",\n         \"var x;var y;var z;function f(){var a;var b}\");\n  }\n",
        "begin_line": 214,
        "end_line": 220,
        "comment": " Try to remove spurious blocks with multiple children ",
        "child_ranges": [
            "(line 215,col 5)-(line 215,col 61)",
            "(line 216,col 5)-(line 217,col 27)",
            "(line 218,col 5)-(line 219,col 56)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.FoldConstantsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/FoldConstantsTest.java",
        "signature": "com.google.javascript.jscomp.FoldConstantsTest.testFoldReturns()",
        "snippet": "  public void testFoldReturns() {\n    fold(\"function(){if(x)return 1;else return 2}\",\n         \"function(){return x?1:2}\");\n    fold(\"function(){if(x)return 1+x;else return 2-x}\",\n         \"function(){return x?1+x:2-x}\");\n    fold(\"function(){if(x)return y += 1;else return y += 2}\",\n         \"function(){return x?(y+=1):(y+=2)}\");\n\n    // don't touch cases where either side doesn't return a value\n    foldSame(\"function(){if(x)return;else return 2-x}\");\n    foldSame(\"function(){if(x)return x;else return}\");\n\n    // if-then-else duplicate statement removal handles this case:\n    fold(\"function(){if(x)return;else return}\",\n         \"function(){return}\");\n  }\n",
        "begin_line": 223,
        "end_line": 238,
        "comment": " Try to minimize returns ",
        "child_ranges": [
            "(line 224,col 5)-(line 225,col 37)",
            "(line 226,col 5)-(line 227,col 41)",
            "(line 228,col 5)-(line 229,col 47)",
            "(line 232,col 5)-(line 232,col 56)",
            "(line 233,col 5)-(line 233,col 54)",
            "(line 236,col 5)-(line 237,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.FoldConstantsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/FoldConstantsTest.java",
        "signature": "com.google.javascript.jscomp.FoldConstantsTest.testFoldAssignments()",
        "snippet": "  public void testFoldAssignments() {\n    fold(\"function(){if(x)y=3;else y=4;}\", \"function(){y=x?3:4}\");\n    fold(\"function(){if(x)y=1+a;else y=2+a;}\", \"function(){y=x?1+a:2+a}\");\n\n    // and operation assignments\n    fold(\"function(){if(x)y+=1;else y+=2;}\", \"function(){y+=x?1:2}\");\n    fold(\"function(){if(x)y-=1;else y-=2;}\", \"function(){y-=x?1:2}\");\n    fold(\"function(){if(x)y%=1;else y%=2;}\", \"function(){y%=x?1:2}\");\n    fold(\"function(){if(x)y|=1;else y|=2;}\", \"function(){y|=x?1:2}\");\n\n    // sanity check, don't fold if the 2 ops don't match\n    foldSame(\"function(){if(x)y-=1;else y+=2}\");\n\n    // sanity check, don't fold if the 2 LHS don't match\n    foldSame(\"function(){if(x)y-=1;else z-=1}\");\n\n    // sanity check, don't fold if there are potential effects\n    foldSame(\"function(){if(x)y().a=3;else y().a=4}\");\n  }\n",
        "begin_line": 241,
        "end_line": 259,
        "comment": " Try to minimize assignments ",
        "child_ranges": [
            "(line 242,col 5)-(line 242,col 66)",
            "(line 243,col 5)-(line 243,col 74)",
            "(line 246,col 5)-(line 246,col 69)",
            "(line 247,col 5)-(line 247,col 69)",
            "(line 248,col 5)-(line 248,col 69)",
            "(line 249,col 5)-(line 249,col 69)",
            "(line 252,col 5)-(line 252,col 48)",
            "(line 255,col 5)-(line 255,col 48)",
            "(line 258,col 5)-(line 258,col 54)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.FoldConstantsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/FoldConstantsTest.java",
        "signature": "com.google.javascript.jscomp.FoldConstantsTest.testBug1059649()",
        "snippet": "  public void testBug1059649() {\n    // ensure that folding blocks with a single var node doesn't explode\n    fold(\"if(x){var y=3;}var z=5\", \"if(x)var y=3;var z=5\");\n\n    // With normalization, we no longer have this case.\n    foldSame(\"if(x){var y=3;}else{var y=4;}var z=5\");\n    fold(\"while(x){var y=3;}var z=5\", \"while(x)var y=3;var z=5\");\n    fold(\"for(var i=0;i<10;i++){var y=3;}var z=5\",\n         \"for(var i=0;i<10;i++)var y=3;var z=5\");\n    fold(\"for(var i in x){var y=3;}var z=5\",\n         \"for(var i in x)var y=3;var z=5\");\n    fold(\"do{var y=3;}while(x);var z=5\", \"do var y=3;while(x);var z=5\");\n  }\n",
        "begin_line": 261,
        "end_line": 273,
        "comment": "",
        "child_ranges": [
            "(line 263,col 5)-(line 263,col 59)",
            "(line 266,col 5)-(line 266,col 53)",
            "(line 267,col 5)-(line 267,col 65)",
            "(line 268,col 5)-(line 269,col 49)",
            "(line 270,col 5)-(line 271,col 43)",
            "(line 272,col 5)-(line 272,col 72)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.FoldConstantsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/FoldConstantsTest.java",
        "signature": "com.google.javascript.jscomp.FoldConstantsTest.testUndefinedComparison()",
        "snippet": "  public void testUndefinedComparison() {\n    fold(\"if (0 == 0){ x = 1; } else { x = 2; }\", \"x=1\");\n    fold(\"if (undefined == undefined){ x = 1; } else { x = 2; }\", \"x=1\");\n    fold(\"if (undefined == null){ x = 1; } else { x = 2; }\", \"x=1\");\n    // fold(\"if (undefined == NaN){ x = 1; } else { x = 2; }\", \"x=2\");\n    fold(\"if (undefined == 0){ x = 1; } else { x = 2; }\", \"x=2\");\n    fold(\"if (undefined == 1){ x = 1; } else { x = 2; }\", \"x=2\");\n    fold(\"if (undefined == 'hi'){ x = 1; } else { x = 2; }\", \"x=2\");\n    fold(\"if (undefined == true){ x = 1; } else { x = 2; }\", \"x=2\");\n    fold(\"if (undefined == false){ x = 1; } else { x = 2; }\", \"x=2\");\n    fold(\"if (undefined === undefined){ x = 1; } else { x = 2; }\", \"x=1\");\n    fold(\"if (undefined === null){ x = 1; } else { x = 2; }\", \"x=2\");\n    fold(\"if (undefined === void 0){ x = 1; } else { x = 2; }\", \"x=1\");\n    // foldSame(\"if (undefined === void foo()){ x = 1; } else { x = 2; }\");\n    foldSame(\"x = (undefined == this) ? 1 : 2;\");\n    foldSame(\"x = (undefined == x) ? 1 : 2;\");\n\n    fold(\"if (undefined != undefined){ x = 1; } else { x = 2; }\", \"x=2\");\n    fold(\"if (undefined != null){ x = 1; } else { x = 2; }\", \"x=2\");\n    // fold(\"if (undefined != NaN){ x = 1; } else { x = 2; }\", \"x=1\");\n    fold(\"if (undefined != 0){ x = 1; } else { x = 2; }\", \"x=1\");\n    fold(\"if (undefined != 1){ x = 1; } else { x = 2; }\", \"x=1\");\n    fold(\"if (undefined != 'hi'){ x = 1; } else { x = 2; }\", \"x=1\");\n    fold(\"if (undefined != true){ x = 1; } else { x = 2; }\", \"x=1\");\n    fold(\"if (undefined != false){ x = 1; } else { x = 2; }\", \"x=1\");\n    fold(\"if (undefined !== undefined){ x = 1; } else { x = 2; }\", \"x=2\");\n    fold(\"if (undefined !== null){ x = 1; } else { x = 2; }\", \"x=1\");\n    foldSame(\"x = (undefined != this) ? 1 : 2;\");\n    foldSame(\"x = (undefined != x) ? 1 : 2;\");\n\n    fold(\"if (undefined < undefined){ x = 1; } else { x = 2; }\", \"x=2\");\n    fold(\"if (undefined > undefined){ x = 1; } else { x = 2; }\", \"x=2\");\n    fold(\"if (undefined >= undefined){ x = 1; } else { x = 2; }\", \"x=2\");\n    fold(\"if (undefined <= undefined){ x = 1; } else { x = 2; }\", \"x=2\");\n\n    fold(\"if (0 < undefined){ x = 1; } else { x = 2; }\", \"x=2\");\n    fold(\"if (true > undefined){ x = 1; } else { x = 2; }\", \"x=2\");\n    fold(\"if ('hi' >= undefined){ x = 1; } else { x = 2; }\", \"x=2\");\n    fold(\"if (null <= undefined){ x = 1; } else { x = 2; }\", \"x=2\");\n\n    fold(\"if (undefined < 0){ x = 1; } else { x = 2; }\", \"x=2\");\n    fold(\"if (undefined > true){ x = 1; } else { x = 2; }\", \"x=2\");\n    fold(\"if (undefined >= 'hi'){ x = 1; } else { x = 2; }\", \"x=2\");\n    fold(\"if (undefined <= null){ x = 1; } else { x = 2; }\", \"x=2\");\n\n    fold(\"if (null == undefined){ x = 1; } else { x = 2; }\", \"x=1\");\n    // fold(\"if (NaN == undefined){ x = 1; } else { x = 2; }\", \"x=2\");\n    fold(\"if (0 == undefined){ x = 1; } else { x = 2; }\", \"x=2\");\n    fold(\"if (1 == undefined){ x = 1; } else { x = 2; }\", \"x=2\");\n    fold(\"if ('hi' == undefined){ x = 1; } else { x = 2; }\", \"x=2\");\n    fold(\"if (true == undefined){ x = 1; } else { x = 2; }\", \"x=2\");\n    fold(\"if (false == undefined){ x = 1; } else { x = 2; }\", \"x=2\");\n    fold(\"if (null === undefined){ x = 1; } else { x = 2; }\", \"x=2\");\n    fold(\"if (void 0 === undefined){ x = 1; } else { x = 2; }\", \"x=1\");\n    // foldSame(\"if (void foo() === undefined){ x = 1; } else { x = 2; }\");\n    foldSame(\"x = (this == undefined) ? 1 : 2;\");\n    foldSame(\"x = (x == undefined) ? 1 : 2;\");\n  }\n",
        "begin_line": 275,
        "end_line": 332,
        "comment": "",
        "child_ranges": [
            "(line 276,col 5)-(line 276,col 57)",
            "(line 277,col 5)-(line 277,col 73)",
            "(line 278,col 5)-(line 278,col 68)",
            "(line 280,col 5)-(line 280,col 65)",
            "(line 281,col 5)-(line 281,col 65)",
            "(line 282,col 5)-(line 282,col 68)",
            "(line 283,col 5)-(line 283,col 68)",
            "(line 284,col 5)-(line 284,col 69)",
            "(line 285,col 5)-(line 285,col 74)",
            "(line 286,col 5)-(line 286,col 69)",
            "(line 287,col 5)-(line 287,col 71)",
            "(line 289,col 5)-(line 289,col 49)",
            "(line 290,col 5)-(line 290,col 46)",
            "(line 292,col 5)-(line 292,col 73)",
            "(line 293,col 5)-(line 293,col 68)",
            "(line 295,col 5)-(line 295,col 65)",
            "(line 296,col 5)-(line 296,col 65)",
            "(line 297,col 5)-(line 297,col 68)",
            "(line 298,col 5)-(line 298,col 68)",
            "(line 299,col 5)-(line 299,col 69)",
            "(line 300,col 5)-(line 300,col 74)",
            "(line 301,col 5)-(line 301,col 69)",
            "(line 302,col 5)-(line 302,col 49)",
            "(line 303,col 5)-(line 303,col 46)",
            "(line 305,col 5)-(line 305,col 72)",
            "(line 306,col 5)-(line 306,col 72)",
            "(line 307,col 5)-(line 307,col 73)",
            "(line 308,col 5)-(line 308,col 73)",
            "(line 310,col 5)-(line 310,col 64)",
            "(line 311,col 5)-(line 311,col 67)",
            "(line 312,col 5)-(line 312,col 68)",
            "(line 313,col 5)-(line 313,col 68)",
            "(line 315,col 5)-(line 315,col 64)",
            "(line 316,col 5)-(line 316,col 67)",
            "(line 317,col 5)-(line 317,col 68)",
            "(line 318,col 5)-(line 318,col 68)",
            "(line 320,col 5)-(line 320,col 68)",
            "(line 322,col 5)-(line 322,col 65)",
            "(line 323,col 5)-(line 323,col 65)",
            "(line 324,col 5)-(line 324,col 68)",
            "(line 325,col 5)-(line 325,col 68)",
            "(line 326,col 5)-(line 326,col 69)",
            "(line 327,col 5)-(line 327,col 69)",
            "(line 328,col 5)-(line 328,col 71)",
            "(line 330,col 5)-(line 330,col 49)",
            "(line 331,col 5)-(line 331,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.FoldConstantsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/FoldConstantsTest.java",
        "signature": "com.google.javascript.jscomp.FoldConstantsTest.testHookIf()",
        "snippet": "  public void testHookIf() {\n    fold(\"if (1){ x=1; } else { x = 2;}\", \"x=1\");\n    fold(\"if (false){ x = 1; } else { x = 2; }\", \"x=2\");\n    fold(\"if (undefined){ x = 1; } else { x = 2; }\", \"x=2\");\n    fold(\"if (null){ x = 1; } else { x = 2; }\", \"x=2\");\n    fold(\"if (void 0){ x = 1; } else { x = 2; }\", \"x=2\");\n    // foldSame(\"if (void foo()){ x = 1; } else { x = 2; }\");\n    fold(\"if (false){ x = 1; } else if (true) { x = 3; } else { x = 2; }\",\n         \"x=3\");\n    fold(\"if (false){ x = 1; } else if (cond) { x = 2; } else { x = 3; }\",\n         \"x=cond?2:3\");\n    fold(\"var x = (true) ? 1 : 0\", \"var x=1\");\n    fold(\"var y = (true) ? ((false) ? 12 : (cond ? 1 : 2)) : 13\",\n         \"var y=cond?1:2\");\n    fold(\"if (x){ x = 1; } else if (false) { x = 3; }\", \"if(x)x=1\");\n    fold(\"x?void 0:y()\", \"x||y()\");\n    fold(\"!x?void 0:y()\", \"x&&y()\");\n    foldSame(\"var z=x?void 0:y()\");\n    foldSame(\"z=x?void 0:y()\");\n    foldSame(\"z*=x?void 0:y()\");\n    fold(\"x?y():void 0\", \"x&&y()\");\n    foldSame(\"var z=x?y():void 0\");\n    foldSame(\"(w?x:void 0).y=z\");\n    foldSame(\"(w?x:void 0).y+=z\");\n  }\n",
        "begin_line": 334,
        "end_line": 358,
        "comment": "",
        "child_ranges": [
            "(line 335,col 5)-(line 335,col 49)",
            "(line 336,col 5)-(line 336,col 56)",
            "(line 337,col 5)-(line 337,col 60)",
            "(line 338,col 5)-(line 338,col 55)",
            "(line 339,col 5)-(line 339,col 57)",
            "(line 341,col 5)-(line 342,col 16)",
            "(line 343,col 5)-(line 344,col 23)",
            "(line 345,col 5)-(line 345,col 46)",
            "(line 346,col 5)-(line 347,col 27)",
            "(line 348,col 5)-(line 348,col 68)",
            "(line 349,col 5)-(line 349,col 35)",
            "(line 350,col 5)-(line 350,col 36)",
            "(line 351,col 5)-(line 351,col 35)",
            "(line 352,col 5)-(line 352,col 31)",
            "(line 353,col 5)-(line 353,col 32)",
            "(line 354,col 5)-(line 354,col 35)",
            "(line 355,col 5)-(line 355,col 35)",
            "(line 356,col 5)-(line 356,col 33)",
            "(line 357,col 5)-(line 357,col 34)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.FoldConstantsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/FoldConstantsTest.java",
        "signature": "com.google.javascript.jscomp.FoldConstantsTest.testRemoveDuplicateStatements()",
        "snippet": "  public void testRemoveDuplicateStatements() {\n    fold(\"if (a) { x = 1; x++ } else { x = 2; x++ }\",\n         \"x=(a) ? 1 : 2; x++\");\n    fold(\"if (a) { x = 1; x++; y += 1; z = pi; }\" +\n         \" else  { x = 2; x++; y += 1; z = pi; }\",\n         \"x=(a) ? 1 : 2; x++; y += 1; z = pi;\");\n    fold(\"function z() {\" +\n         \"if (a) { foo(); return true } else { goo(); return true }\" +\n         \"}\",\n         \"function z() {(a) ? foo() : goo(); return true}\");\n    fold(\"function z() {if (a) { foo(); x = true; return true \" +\n         \"} else { goo(); x = true; return true }}\",\n         \"function z() {(a) ? foo() : goo(); x = true; return true}\");\n    fold(\"function z() {if (a) { return true }\" +\n         \"else if (b) { return true }\" +\n         \"else { return true }}\",\n         \"function z() {return true;}\");\n    fold(\"function z() {if (a()) { return true }\" +\n         \"else if (b()) { return true }\" +\n         \"else { return true }}\",\n         \"function z() {if (!a()) { b() } return true;}\");\n    fold(\"function z() {\" +\n         \"  if (a) { bar(); foo(); return true }\" +\n         \"    else { bar(); goo(); return true }\" +\n         \"}\",\n         \"function z() {\" +\n         \"  if (a) { bar(); foo(); }\" +\n         \"    else { bar(); goo(); }\" +\n         \"  return true;\" +\n         \"}\");\n  }\n",
        "begin_line": 360,
        "end_line": 390,
        "comment": "",
        "child_ranges": [
            "(line 361,col 5)-(line 362,col 31)",
            "(line 363,col 5)-(line 365,col 48)",
            "(line 366,col 5)-(line 369,col 60)",
            "(line 370,col 5)-(line 372,col 70)",
            "(line 373,col 5)-(line 376,col 40)",
            "(line 377,col 5)-(line 380,col 58)",
            "(line 381,col 5)-(line 389,col 14)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.FoldConstantsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/FoldConstantsTest.java",
        "signature": "com.google.javascript.jscomp.FoldConstantsTest.testNotCond()",
        "snippet": "  public void testNotCond() {\n    fold(\"function(){if(!x)foo()}\", \"function(){x||foo()}\");\n    fold(\"function(){if(!x)b=1}\", \"function(){x||(b=1)}\");\n    fold(\"if(!x)z=1;else if(y)z=2\", \"if(x){if(y)z=2}else z=1\");\n    foldSame(\"function(){if(!(x=1))a.b=1}\");\n  }\n",
        "begin_line": 392,
        "end_line": 397,
        "comment": "",
        "child_ranges": [
            "(line 393,col 5)-(line 393,col 60)",
            "(line 394,col 5)-(line 394,col 58)",
            "(line 395,col 5)-(line 395,col 63)",
            "(line 396,col 5)-(line 396,col 44)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.FoldConstantsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/FoldConstantsTest.java",
        "signature": "com.google.javascript.jscomp.FoldConstantsTest.testAndParenthesesCount()",
        "snippet": "  public void testAndParenthesesCount() {\n    foldSame(\"function(){if(x||y)a.foo()}\");\n  }\n",
        "begin_line": 399,
        "end_line": 401,
        "comment": "",
        "child_ranges": [
            "(line 400,col 5)-(line 400,col 44)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.FoldConstantsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/FoldConstantsTest.java",
        "signature": "com.google.javascript.jscomp.FoldConstantsTest.testUnaryOps()",
        "snippet": "  public void testUnaryOps() {\n    fold(\"!foo()\", \"foo()\");\n    fold(\"~foo()\", \"foo()\");\n    fold(\"-foo()\", \"foo()\");\n    fold(\"a=!true\", \"a=false\");\n    fold(\"a=!10\", \"a=false\");\n    fold(\"a=!false\", \"a=true\");\n    fold(\"a=!foo()\", \"a=!foo()\");\n    fold(\"a=-0\", \"a=0\");\n    fold(\"a=-Infinity\", \"a=-Infinity\");\n    fold(\"a=-NaN\", \"a=NaN\");\n    fold(\"a=-foo()\", \"a=-foo()\");\n    fold(\"a=~~0\", \"a=0\");\n    fold(\"a=~~10\", \"a=10\");\n    fold(\"a=~-7\", \"a=6\");\n    fold(\"a=~0x100000000\", \"a=~0x100000000\",\n         FoldConstants.BITWISE_OPERAND_OUT_OF_RANGE);\n    fold(\"a=~-0x100000000\", \"a=~-0x100000000\",\n         FoldConstants.BITWISE_OPERAND_OUT_OF_RANGE);\n    fold(\"a=~.5\", \"~.5\", FoldConstants.FRACTIONAL_BITWISE_OPERAND);\n  }\n",
        "begin_line": 403,
        "end_line": 423,
        "comment": "",
        "child_ranges": [
            "(line 404,col 5)-(line 404,col 28)",
            "(line 405,col 5)-(line 405,col 28)",
            "(line 406,col 5)-(line 406,col 28)",
            "(line 407,col 5)-(line 407,col 31)",
            "(line 408,col 5)-(line 408,col 29)",
            "(line 409,col 5)-(line 409,col 31)",
            "(line 410,col 5)-(line 410,col 33)",
            "(line 411,col 5)-(line 411,col 24)",
            "(line 412,col 5)-(line 412,col 39)",
            "(line 413,col 5)-(line 413,col 28)",
            "(line 414,col 5)-(line 414,col 33)",
            "(line 415,col 5)-(line 415,col 25)",
            "(line 416,col 5)-(line 416,col 27)",
            "(line 417,col 5)-(line 417,col 25)",
            "(line 418,col 5)-(line 419,col 53)",
            "(line 420,col 5)-(line 421,col 53)",
            "(line 422,col 5)-(line 422,col 67)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.FoldConstantsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/FoldConstantsTest.java",
        "signature": "com.google.javascript.jscomp.FoldConstantsTest.testUnaryOpsStringCompare()",
        "snippet": "  public void testUnaryOpsStringCompare() {\n    // Negatives are folded into a single number node.\n    assertResultString(\"a=-1\", \"a=-1\");\n    assertResultString(\"a=~0\", \"a=-1\");\n    assertResultString(\"a=~1\", \"a=-2\");\n    assertResultString(\"a=~101\", \"a=-102\");\n  }\n",
        "begin_line": 425,
        "end_line": 431,
        "comment": "",
        "child_ranges": [
            "(line 427,col 5)-(line 427,col 39)",
            "(line 428,col 5)-(line 428,col 39)",
            "(line 429,col 5)-(line 429,col 39)",
            "(line 430,col 5)-(line 430,col 43)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.FoldConstantsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/FoldConstantsTest.java",
        "signature": "com.google.javascript.jscomp.FoldConstantsTest.testFoldLogicalOp()",
        "snippet": "  public void testFoldLogicalOp() {\n    fold(\"x = true && x\", \"x = x\");\n    fold(\"x = false && x\", \"x = false\");\n    fold(\"x = true || x\", \"x = true\");\n    fold(\"x = false || x\", \"x = x\");\n    fold(\"x = 0 && x\", \"x = 0\");\n    fold(\"x = 3 || x\", \"x = 3\");\n    fold(\"x = false || 0\", \"x = 0\");\n\n    fold(\"if(x && true) z()\", \"x&&z()\");\n    fold(\"if(x && false) z()\", \"\");\n    fold(\"if(x || 3) z()\", \"z()\");\n    fold(\"if(x || false) z()\", \"x&&z()\");\n    fold(\"if(x==y && false) z()\", \"\");\n\n    // This would be foldable, but it isn't detected, because 'if' isn't\n    // the parent of 'x || 3'. Cf. FoldConstants.tryFoldAndOr().\n    fold(\"if(y() || x || 3) z()\", \"if(y()||x||1)z()\");\n\n    // surprisingly unfoldable\n    fold(\"a = x && true\", \"a=x&&true\");\n    fold(\"a = x && false\", \"a=x&&false\");\n    fold(\"a = x || 3\", \"a=x||3\");\n    fold(\"a = x || false\", \"a=x||false\");\n    fold(\"a = b ? c : x || false\", \"a=b?c:x||false\");\n    fold(\"a = b ? x || false : c\", \"a=b?x||false:c\");\n    fold(\"a = b ? c : x && true\", \"a=b?c:x&&true\");\n    fold(\"a = b ? x && true : c\", \"a=b?x&&true:c\");\n\n    // foldable, analogous to if().\n    fold(\"a = x || false ? b : c\", \"a=x?b:c\");\n    fold(\"a = x && true ? b : c\", \"a=x?b:c\");\n\n    // TODO(user): fold(\"foo()&&false&&z()\", \"foo()\");\n    fold(\"if(foo() || true) z()\", \"if(foo()||1)z()\");\n\n    fold(\"x = foo() || true || bar()\", \"x = foo()||true\");\n    fold(\"x = foo() || false || bar()\", \"x = foo()||bar()\");\n    fold(\"x = foo() || true && bar()\", \"x = foo()||bar()\");\n    fold(\"x = foo() || false && bar()\", \"x = foo()||false\");\n    fold(\"x = foo() && false && bar()\", \"x = foo()&&false\");\n    fold(\"x = foo() && true && bar()\", \"x = foo()&&bar()\");\n    fold(\"x = foo() && false || bar()\", \"x = foo()&&false||bar()\");\n\n    // Really not foldable, because it would change the type of the\n    // expression if foo() returns something equivalent, but not\n    // identical, to true. Cf. FoldConstants.tryFoldAndOr().\n    fold(\"x = foo() && true || bar()\", \"x = foo()&&true||bar()\");\n    fold(\"foo() && true || bar()\", \"foo()&&1||bar()\");\n  }\n",
        "begin_line": 433,
        "end_line": 482,
        "comment": "",
        "child_ranges": [
            "(line 434,col 5)-(line 434,col 35)",
            "(line 435,col 5)-(line 435,col 40)",
            "(line 436,col 5)-(line 436,col 38)",
            "(line 437,col 5)-(line 437,col 36)",
            "(line 438,col 5)-(line 438,col 32)",
            "(line 439,col 5)-(line 439,col 32)",
            "(line 440,col 5)-(line 440,col 36)",
            "(line 442,col 5)-(line 442,col 40)",
            "(line 443,col 5)-(line 443,col 35)",
            "(line 444,col 5)-(line 444,col 34)",
            "(line 445,col 5)-(line 445,col 41)",
            "(line 446,col 5)-(line 446,col 38)",
            "(line 450,col 5)-(line 450,col 54)",
            "(line 453,col 5)-(line 453,col 39)",
            "(line 454,col 5)-(line 454,col 41)",
            "(line 455,col 5)-(line 455,col 33)",
            "(line 456,col 5)-(line 456,col 41)",
            "(line 457,col 5)-(line 457,col 53)",
            "(line 458,col 5)-(line 458,col 53)",
            "(line 459,col 5)-(line 459,col 51)",
            "(line 460,col 5)-(line 460,col 51)",
            "(line 463,col 5)-(line 463,col 46)",
            "(line 464,col 5)-(line 464,col 45)",
            "(line 467,col 5)-(line 467,col 53)",
            "(line 469,col 5)-(line 469,col 58)",
            "(line 470,col 5)-(line 470,col 60)",
            "(line 471,col 5)-(line 471,col 59)",
            "(line 472,col 5)-(line 472,col 60)",
            "(line 473,col 5)-(line 473,col 60)",
            "(line 474,col 5)-(line 474,col 59)",
            "(line 475,col 5)-(line 475,col 67)",
            "(line 480,col 5)-(line 480,col 65)",
            "(line 481,col 5)-(line 481,col 54)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.FoldConstantsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/FoldConstantsTest.java",
        "signature": "com.google.javascript.jscomp.FoldConstantsTest.testFoldLogicalOpStringCompare()",
        "snippet": "  public void testFoldLogicalOpStringCompare() {\n    // side-effects\n    // There is two way to parse two &&'s and both are correct.\n    assertResultString(\"if(foo() && false) z()\", \"foo()&&0&&z()\");\n  }\n",
        "begin_line": 484,
        "end_line": 488,
        "comment": "",
        "child_ranges": [
            "(line 487,col 5)-(line 487,col 66)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.FoldConstantsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/FoldConstantsTest.java",
        "signature": "com.google.javascript.jscomp.FoldConstantsTest.testFoldBitwiseOp()",
        "snippet": "  public void testFoldBitwiseOp() {\n    fold(\"x = 1 & 1\", \"x = 1\");\n    fold(\"x = 1 & 2\", \"x = 0\");\n    fold(\"x = 3 & 1\", \"x = 1\");\n    fold(\"x = 3 & 3\", \"x = 3\");\n\n    fold(\"x = 1 | 1\", \"x = 1\");\n    fold(\"x = 1 | 2\", \"x = 3\");\n    fold(\"x = 3 | 1\", \"x = 3\");\n    fold(\"x = 3 | 3\", \"x = 3\");\n\n    fold(\"x = -1 & 0\", \"x = 0\");\n    fold(\"x = 0 & -1\", \"x = 0\");\n    fold(\"x = 1 & 4\", \"x = 0\");\n    fold(\"x = 2 & 3\", \"x = 2\");\n\n    // make sure we fold only when we are supposed to -- not when doing so would\n    // lose information or when it is performed on nonsensical arguments.\n    fold(\"x = 1 & 1.1\", \"x = 1&1.1\");\n    fold(\"x = 1.1 & 1\", \"x = 1.1&1\");\n    fold(\"x = 1 & 3000000000\", \"x = 1&3000000000\");\n    fold(\"x = 3000000000 & 1\", \"x = 3000000000&1\");\n\n    // Try some cases with | as well\n    fold(\"x = 1 | 4\", \"x = 5\");\n    fold(\"x = 1 | 3\", \"x = 3\");\n    fold(\"x = 1 | 1.1\", \"x = 1|1.1\");\n    fold(\"x = 1 | 3000000000\", \"x = 1|3000000000\");\n  }\n",
        "begin_line": 490,
        "end_line": 518,
        "comment": "",
        "child_ranges": [
            "(line 491,col 5)-(line 491,col 31)",
            "(line 492,col 5)-(line 492,col 31)",
            "(line 493,col 5)-(line 493,col 31)",
            "(line 494,col 5)-(line 494,col 31)",
            "(line 496,col 5)-(line 496,col 31)",
            "(line 497,col 5)-(line 497,col 31)",
            "(line 498,col 5)-(line 498,col 31)",
            "(line 499,col 5)-(line 499,col 31)",
            "(line 501,col 5)-(line 501,col 32)",
            "(line 502,col 5)-(line 502,col 32)",
            "(line 503,col 5)-(line 503,col 31)",
            "(line 504,col 5)-(line 504,col 31)",
            "(line 508,col 5)-(line 508,col 37)",
            "(line 509,col 5)-(line 509,col 37)",
            "(line 510,col 5)-(line 510,col 51)",
            "(line 511,col 5)-(line 511,col 51)",
            "(line 514,col 5)-(line 514,col 31)",
            "(line 515,col 5)-(line 515,col 31)",
            "(line 516,col 5)-(line 516,col 37)",
            "(line 517,col 5)-(line 517,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.FoldConstantsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/FoldConstantsTest.java",
        "signature": "com.google.javascript.jscomp.FoldConstantsTest.testFoldBitwiseOpStringCompare()",
        "snippet": "  public void testFoldBitwiseOpStringCompare() {\n    assertResultString(\"x = -1 | 0\", \"x=-1\");\n    assertResultString(\"-1 | 0\", \"1\");\n  }\n",
        "begin_line": 520,
        "end_line": 523,
        "comment": "",
        "child_ranges": [
            "(line 521,col 5)-(line 521,col 45)",
            "(line 522,col 5)-(line 522,col 38)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.FoldConstantsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/FoldConstantsTest.java",
        "signature": "com.google.javascript.jscomp.FoldConstantsTest.testFoldBitShifts()",
        "snippet": "  public void testFoldBitShifts() {\n    fold(\"x = 1 << 0\", \"x = 1\");\n    fold(\"x = 1 << 1\", \"x = 2\");\n    fold(\"x = 3 << 1\", \"x = 6\");\n    fold(\"x = 1 << 8\", \"x = 256\");\n\n    fold(\"x = 1 >> 0\", \"x = 1\");\n    fold(\"x = 1 >> 1\", \"x = 0\");\n    fold(\"x = 2 >> 1\", \"x = 1\");\n    fold(\"x = 5 >> 1\", \"x = 2\");\n    fold(\"x = 127 >> 3\", \"x = 15\");\n    fold(\"x = 3 >> 1\", \"x = 1\");\n    fold(\"x = 3 >> 2\", \"x = 0\");\n    fold(\"x = 10 >> 1\", \"x = 5\");\n    fold(\"x = 10 >> 2\", \"x = 2\");\n    fold(\"x = 10 >> 5\", \"x = 0\");\n\n    fold(\"x = 10 >>> 1\", \"x = 5\");\n    fold(\"x = 10 >>> 2\", \"x = 2\");\n    fold(\"x = 10 >>> 5\", \"x = 0\");\n    fold(\"x = -1 >>> 1\", \"x = \" + 0x7fffffff);\n\n    fold(\"3000000000 << 1\", \"3000000000<<1\",\n         FoldConstants.BITWISE_OPERAND_OUT_OF_RANGE);\n    fold(\"1 << 32\", \"1<<32\",\n         FoldConstants.SHIFT_AMOUNT_OUT_OF_BOUNDS);\n    fold(\"1 << -1\", \"1<<32\",\n         FoldConstants.SHIFT_AMOUNT_OUT_OF_BOUNDS);\n    fold(\"3000000000 >> 1\", \"3000000000>>1\",\n         FoldConstants.BITWISE_OPERAND_OUT_OF_RANGE);\n    fold(\"1 >> 32\", \"1>>32\",\n         FoldConstants.SHIFT_AMOUNT_OUT_OF_BOUNDS);\n    fold(\"1.5 << 0\",  \"1.5<<0\",  FoldConstants.FRACTIONAL_BITWISE_OPERAND);\n    fold(\"1 << .5\",   \"1.5<<0\",  FoldConstants.FRACTIONAL_BITWISE_OPERAND);\n    fold(\"1.5 >>> 0\", \"1.5>>>0\", FoldConstants.FRACTIONAL_BITWISE_OPERAND);\n    fold(\"1 >>> .5\",  \"1.5>>>0\", FoldConstants.FRACTIONAL_BITWISE_OPERAND);\n    fold(\"1.5 >> 0\",  \"1.5>>0\",  FoldConstants.FRACTIONAL_BITWISE_OPERAND);\n    fold(\"1 >> .5\",   \"1.5>>0\",  FoldConstants.FRACTIONAL_BITWISE_OPERAND);\n  }\n",
        "begin_line": 525,
        "end_line": 563,
        "comment": "",
        "child_ranges": [
            "(line 526,col 5)-(line 526,col 32)",
            "(line 527,col 5)-(line 527,col 32)",
            "(line 528,col 5)-(line 528,col 32)",
            "(line 529,col 5)-(line 529,col 34)",
            "(line 531,col 5)-(line 531,col 32)",
            "(line 532,col 5)-(line 532,col 32)",
            "(line 533,col 5)-(line 533,col 32)",
            "(line 534,col 5)-(line 534,col 32)",
            "(line 535,col 5)-(line 535,col 35)",
            "(line 536,col 5)-(line 536,col 32)",
            "(line 537,col 5)-(line 537,col 32)",
            "(line 538,col 5)-(line 538,col 33)",
            "(line 539,col 5)-(line 539,col 33)",
            "(line 540,col 5)-(line 540,col 33)",
            "(line 542,col 5)-(line 542,col 34)",
            "(line 543,col 5)-(line 543,col 34)",
            "(line 544,col 5)-(line 544,col 34)",
            "(line 545,col 5)-(line 545,col 46)",
            "(line 547,col 5)-(line 548,col 53)",
            "(line 549,col 5)-(line 550,col 51)",
            "(line 551,col 5)-(line 552,col 51)",
            "(line 553,col 5)-(line 554,col 53)",
            "(line 555,col 5)-(line 556,col 51)",
            "(line 557,col 5)-(line 557,col 75)",
            "(line 558,col 5)-(line 558,col 75)",
            "(line 559,col 5)-(line 559,col 75)",
            "(line 560,col 5)-(line 560,col 75)",
            "(line 561,col 5)-(line 561,col 75)",
            "(line 562,col 5)-(line 562,col 75)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.FoldConstantsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/FoldConstantsTest.java",
        "signature": "com.google.javascript.jscomp.FoldConstantsTest.testFoldBitShiftsStringCompare()",
        "snippet": "  public void testFoldBitShiftsStringCompare() {\n    // Negative numbers.\n    assertResultString(\"x = -1 << 1\", \"x=-2\");\n    assertResultString(\"x = -1 << 8\", \"x=-256\");\n    assertResultString(\"x = -1 >> 1\", \"x=-1\");\n    assertResultString(\"x = -2 >> 1\", \"x=-1\");\n    assertResultString(\"x = -1 >> 0\", \"x=-1\");\n  }\n",
        "begin_line": 565,
        "end_line": 572,
        "comment": "",
        "child_ranges": [
            "(line 567,col 5)-(line 567,col 46)",
            "(line 568,col 5)-(line 568,col 48)",
            "(line 569,col 5)-(line 569,col 46)",
            "(line 570,col 5)-(line 570,col 46)",
            "(line 571,col 5)-(line 571,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.FoldConstantsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/FoldConstantsTest.java",
        "signature": "com.google.javascript.jscomp.FoldConstantsTest.testStringAdd()",
        "snippet": "  public void testStringAdd() {\n    fold(\"x = 'a' + \\\"bc\\\"\", \"x = \\\"abc\\\"\");\n    fold(\"x = 'a' + 5\", \"x = \\\"a5\\\"\");\n    fold(\"x = 5 + 'a'\", \"x = \\\"5a\\\"\");\n    fold(\"x = 'a' + ''\", \"x = \\\"a\\\"\");\n    fold(\"x = \\\"a\\\" + foo()\", \"x = \\\"a\\\"+foo()\");\n    fold(\"x = foo() + 'a' + 'b'\", \"x = foo()+\\\"ab\\\"\");\n    fold(\"x = (foo() + 'a') + 'b'\", \"x = foo()+\\\"ab\\\"\");  // believe it!\n    fold(\"x = foo() + 'a' + 'b' + 'cd' + bar()\", \"x = foo()+\\\"abcd\\\"+bar()\");\n    fold(\"x = foo() + 2 + 'b'\", \"x = foo()+2+\\\"b\\\"\");  // don't fold!\n    fold(\"x = foo() + 'a' + 2\", \"x = foo()+\\\"a2\\\"\");\n    fold(\"x = '' + null\", \"x = \\\"null\\\"\");\n    fold(\"x = true + '' + false\", \"x = \\\"truefalse\\\"\");\n    fold(\"x = '' + []\", \"x = \\\"\\\"+[]\");      // cannot fold (but nice if we can)\n  }\n",
        "begin_line": 574,
        "end_line": 588,
        "comment": "",
        "child_ranges": [
            "(line 575,col 5)-(line 575,col 44)",
            "(line 576,col 5)-(line 576,col 38)",
            "(line 577,col 5)-(line 577,col 38)",
            "(line 578,col 5)-(line 578,col 38)",
            "(line 579,col 5)-(line 579,col 49)",
            "(line 580,col 5)-(line 580,col 54)",
            "(line 581,col 5)-(line 581,col 56)",
            "(line 582,col 5)-(line 582,col 77)",
            "(line 583,col 5)-(line 583,col 53)",
            "(line 584,col 5)-(line 584,col 52)",
            "(line 585,col 5)-(line 585,col 42)",
            "(line 586,col 5)-(line 586,col 55)",
            "(line 587,col 5)-(line 587,col 39)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.FoldConstantsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/FoldConstantsTest.java",
        "signature": "com.google.javascript.jscomp.FoldConstantsTest.testStringIndexOf()",
        "snippet": "  public void testStringIndexOf() {\n    fold(\"x = 'abcdef'.indexOf('b')\", \"x = 1\");\n    fold(\"x = 'abcdefbe'.indexOf('b', 2)\", \"x = 6\");\n    fold(\"x = 'abcdef'.indexOf('bcd')\", \"x = 1\");\n    fold(\"x = 'abcdefsdfasdfbcdassd'.indexOf('bcd', 4)\", \"x = 13\");\n\n    fold(\"x = 'abcdef'.lastIndexOf('b')\", \"x = 1\");\n    fold(\"x = 'abcdefbe'.lastIndexOf('b')\", \"x = 6\");\n    fold(\"x = 'abcdefbe'.lastIndexOf('b', 5)\", \"x = 1\");\n\n    // Both elements must be string. Dont do anything if either one is not\n    // string.\n    fold(\"x = 'abc1def'.indexOf(1)\", \"x = 3\");\n    fold(\"x = 'abcNaNdef'.indexOf(NaN)\", \"x = 3\");\n    fold(\"x = 'abcundefineddef'.indexOf(undefined)\", \"x = 3\");\n    fold(\"x = 'abcnulldef'.indexOf(null)\", \"x = 3\");\n    fold(\"x = 'abctruedef'.indexOf(true)\", \"x = 3\");\n\n\n    // The following testcase fails with JSC_PARSE_ERROR. Hence omitted.\n    // foldSame(\"x = 1.indexOf('bcd');\");\n    foldSame(\"x = NaN.indexOf('bcd')\");\n    foldSame(\"x = undefined.indexOf('bcd')\");\n    foldSame(\"x = null.indexOf('bcd')\");\n    foldSame(\"x = true.indexOf('bcd')\");\n    foldSame(\"x = false.indexOf('bcd')\");\n\n    //Avoid dealing with regex or other types.\n    foldSame(\"x = 'abcdef'.indexOf(/b./)\");\n    foldSame(\"x = 'abcdef'.indexOf({a:2})\");\n    foldSame(\"x = 'abcdef'.indexOf([1,2])\");\n  }\n",
        "begin_line": 590,
        "end_line": 621,
        "comment": "",
        "child_ranges": [
            "(line 591,col 5)-(line 591,col 47)",
            "(line 592,col 5)-(line 592,col 52)",
            "(line 593,col 5)-(line 593,col 49)",
            "(line 594,col 5)-(line 594,col 67)",
            "(line 596,col 5)-(line 596,col 51)",
            "(line 597,col 5)-(line 597,col 53)",
            "(line 598,col 5)-(line 598,col 56)",
            "(line 602,col 5)-(line 602,col 46)",
            "(line 603,col 5)-(line 603,col 50)",
            "(line 604,col 5)-(line 604,col 62)",
            "(line 605,col 5)-(line 605,col 52)",
            "(line 606,col 5)-(line 606,col 52)",
            "(line 611,col 5)-(line 611,col 39)",
            "(line 612,col 5)-(line 612,col 45)",
            "(line 613,col 5)-(line 613,col 40)",
            "(line 614,col 5)-(line 614,col 40)",
            "(line 615,col 5)-(line 615,col 41)",
            "(line 618,col 5)-(line 618,col 43)",
            "(line 619,col 5)-(line 619,col 44)",
            "(line 620,col 5)-(line 620,col 44)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.FoldConstantsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/FoldConstantsTest.java",
        "signature": "com.google.javascript.jscomp.FoldConstantsTest.testStringJoinAdd()",
        "snippet": "  public void testStringJoinAdd() {\n    fold(\"x = ['a', 'b', 'c'].join('')\", \"x = \\\"abc\\\"\");\n    fold(\"x = [].join(',')\", \"x = \\\"\\\"\");\n    fold(\"x = ['a'].join(',')\", \"x = \\\"a\\\"\");\n    fold(\"x = ['a', 'b', 'c'].join(',')\", \"x = \\\"a,b,c\\\"\");\n    fold(\"x = ['a', foo, 'b', 'c'].join(',')\", \"x = [\\\"a\\\",foo,\\\"b,c\\\"].join(\\\",\\\")\");\n    fold(\"x = [foo, 'a', 'b', 'c'].join(',')\", \"x = [foo,\\\"a,b,c\\\"].join(\\\",\\\")\");\n    fold(\"x = ['a', 'b', 'c', foo].join(',')\", \"x = [\\\"a,b,c\\\",foo].join(\\\",\\\")\");\n\n    // Works with numbers\n    fold(\"x = ['a=', 5].join('')\", \"x = \\\"a=5\\\"\");\n    fold(\"x = ['a', '5'].join(7)\", \"x = \\\"a75\\\"\");\n\n    // Works on boolean\n    fold(\"x = ['a=', false].join('')\", \"x = \\\"a=false\\\"\");\n    fold(\"x = ['a', '5'].join(true)\", \"x = \\\"atrue5\\\"\");\n    fold(\"x = ['a', '5'].join(false)\", \"x = \\\"afalse5\\\"\");\n\n    // Only optimize if it's a size win.\n    fold(\"x = ['a', '5', 'c'].join('a very very very long chain')\",\n         \"x = [\\\"a\\\",\\\"5\\\",\\\"c\\\"].join(\\\"a very very very long chain\\\")\");\n    \n    // TODO(user): Its possible to fold this better.\n    foldSame(\"x = ['', foo].join(',')\");\n    foldSame(\"x = ['', foo, ''].join(',')\");\n    \n    fold(\"x = ['', '', foo, ''].join(',')\", \"x = [',', foo, ''].join(',')\");\n    fold(\"x = ['', '', foo, '', ''].join(',')\",\n         \"x = [',', foo, ','].join(',')\");\n    \n    fold(\"x = ['', '', foo, '', '', bar].join(',')\",\n         \"x = [',', foo, ',', bar].join(',')\");\n    \n    fold(\"x = [1,2,3].join('abcdef')\",\n         \"x = '1abcdef2abcdef3'\");\n  }\n",
        "begin_line": 623,
        "end_line": 658,
        "comment": "",
        "child_ranges": [
            "(line 624,col 5)-(line 624,col 56)",
            "(line 625,col 5)-(line 625,col 41)",
            "(line 626,col 5)-(line 626,col 45)",
            "(line 627,col 5)-(line 627,col 59)",
            "(line 628,col 5)-(line 628,col 86)",
            "(line 629,col 5)-(line 629,col 82)",
            "(line 630,col 5)-(line 630,col 82)",
            "(line 633,col 5)-(line 633,col 50)",
            "(line 634,col 5)-(line 634,col 50)",
            "(line 637,col 5)-(line 637,col 58)",
            "(line 638,col 5)-(line 638,col 56)",
            "(line 639,col 5)-(line 639,col 58)",
            "(line 642,col 5)-(line 643,col 74)",
            "(line 646,col 5)-(line 646,col 40)",
            "(line 647,col 5)-(line 647,col 44)",
            "(line 649,col 5)-(line 649,col 76)",
            "(line 650,col 5)-(line 651,col 42)",
            "(line 653,col 5)-(line 654,col 47)",
            "(line 656,col 5)-(line 657,col 34)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.FoldConstantsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/FoldConstantsTest.java",
        "signature": "com.google.javascript.jscomp.FoldConstantsTest.testStringJoinAdd_b1992789()",
        "snippet": "  public void testStringJoinAdd_b1992789() {\n    fold(\"x = ['a'].join('')\", \"x = \\\"a\\\"\");\n    fold(\"x = [foo()].join('')\", \"x = '' + foo()\");\n    fold(\"[foo()].join('')\", \"'' + foo()\");\n  }\n",
        "begin_line": 660,
        "end_line": 664,
        "comment": "",
        "child_ranges": [
            "(line 661,col 5)-(line 661,col 44)",
            "(line 662,col 5)-(line 662,col 51)",
            "(line 663,col 5)-(line 663,col 43)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.FoldConstantsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/FoldConstantsTest.java",
        "signature": "com.google.javascript.jscomp.FoldConstantsTest.testFoldArithmetic()",
        "snippet": "  public void testFoldArithmetic() {\n    fold(\"x = 10 + 20\", \"x = 30\");\n    fold(\"x = 2 / 4\", \"x = 0.5\");\n    fold(\"x = 2.25 * 3\", \"x = 6.75\");\n    fold(\"z = x * y\", \"z = x * y\");\n    fold(\"x = y * 5\", \"x = y * 5\");\n    fold(\"x = 1 / 0\", \"\", FoldConstants.DIVIDE_BY_0_ERROR);\n  }\n",
        "begin_line": 666,
        "end_line": 673,
        "comment": "",
        "child_ranges": [
            "(line 667,col 5)-(line 667,col 34)",
            "(line 668,col 5)-(line 668,col 33)",
            "(line 669,col 5)-(line 669,col 37)",
            "(line 670,col 5)-(line 670,col 35)",
            "(line 671,col 5)-(line 671,col 35)",
            "(line 672,col 5)-(line 672,col 59)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.FoldConstantsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/FoldConstantsTest.java",
        "signature": "com.google.javascript.jscomp.FoldConstantsTest.testFoldArithmeticStringComp()",
        "snippet": "  public void testFoldArithmeticStringComp() {\n    // Negative Numbers.\n    assertResultString(\"x = 10 - 20\", \"x=-10\");\n  }\n",
        "begin_line": 675,
        "end_line": 678,
        "comment": "",
        "child_ranges": [
            "(line 677,col 5)-(line 677,col 47)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.FoldConstantsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/FoldConstantsTest.java",
        "signature": "com.google.javascript.jscomp.FoldConstantsTest.testFoldComparison()",
        "snippet": "  public void testFoldComparison() {\n    fold(\"x = 0 == 0\", \"x = true\");\n    fold(\"x = 1 == 2\", \"x = false\");\n    fold(\"x = 'abc' == 'def'\", \"x = false\");\n    fold(\"x = 'abc' == 'abc'\", \"x = true\");\n    fold(\"x = \\\"\\\" == ''\", \"x = true\");\n    fold(\"x = foo() == bar()\", \"x = foo()==bar()\");\n\n    fold(\"x = 1 != 0\", \"x = true\");\n    fold(\"x = 'abc' != 'def'\", \"x = true\");\n    fold(\"x = 'a' != 'a'\", \"x = false\");\n\n    fold(\"x = 1 < 20\", \"x = true\");\n    fold(\"x = 3 < 3\", \"x = false\");\n    fold(\"x = 10 > 1.0\", \"x = true\");\n    fold(\"x = 10 > 10.25\", \"x = false\");\n    fold(\"x = y == y\", \"x = y==y\");\n    fold(\"x = y < y\", \"x = false\");\n    fold(\"x = y > y\", \"x = false\");\n    fold(\"x = 1 <= 1\", \"x = true\");\n    fold(\"x = 1 <= 0\", \"x = false\");\n    fold(\"x = 0 >= 0\", \"x = true\");\n    fold(\"x = -1 >= 9\", \"x = false\");\n\n    fold(\"x = true == true\", \"x = true\");\n    fold(\"x = true == true\", \"x = true\");\n    fold(\"x = false == null\", \"x = false\");\n    fold(\"x = false == true\", \"x = false\");\n    fold(\"x = true == null\", \"x = false\");\n\n    fold(\"0 == 0\", \"1\");\n    fold(\"1 == 2\", \"0\");\n    fold(\"'abc' == 'def'\", \"0\");\n    fold(\"'abc' == 'abc'\", \"1\");\n    fold(\"\\\"\\\" == ''\", \"1\");\n    fold(\"foo() == bar()\", \"foo()==bar()\");\n\n    fold(\"1 != 0\", \"1\");\n    fold(\"'abc' != 'def'\", \"1\");\n    fold(\"'a' != 'a'\", \"0\");\n\n    fold(\"1 < 20\", \"1\");\n    fold(\"3 < 3\", \"0\");\n    fold(\"10 > 1.0\", \"1\");\n    fold(\"10 > 10.25\", \"0\");\n    fold(\"x == x\", \"x==x\");\n    fold(\"x < x\", \"0\");\n    fold(\"x > x\", \"0\");\n    fold(\"1 <= 1\", \"1\");\n    fold(\"1 <= 0\", \"0\");\n    fold(\"0 >= 0\", \"1\");\n    fold(\"-1 >= 9\", \"0\");\n\n    fold(\"true == true\", \"1\");\n    fold(\"true == true\", \"1\");\n    fold(\"false == null\", \"0\");\n    fold(\"false == true\", \"0\");\n    fold(\"true == null\", \"0\");\n  }\n",
        "begin_line": 680,
        "end_line": 738,
        "comment": "",
        "child_ranges": [
            "(line 681,col 5)-(line 681,col 35)",
            "(line 682,col 5)-(line 682,col 36)",
            "(line 683,col 5)-(line 683,col 44)",
            "(line 684,col 5)-(line 684,col 43)",
            "(line 685,col 5)-(line 685,col 39)",
            "(line 686,col 5)-(line 686,col 51)",
            "(line 688,col 5)-(line 688,col 35)",
            "(line 689,col 5)-(line 689,col 43)",
            "(line 690,col 5)-(line 690,col 40)",
            "(line 692,col 5)-(line 692,col 35)",
            "(line 693,col 5)-(line 693,col 35)",
            "(line 694,col 5)-(line 694,col 37)",
            "(line 695,col 5)-(line 695,col 40)",
            "(line 696,col 5)-(line 696,col 35)",
            "(line 697,col 5)-(line 697,col 35)",
            "(line 698,col 5)-(line 698,col 35)",
            "(line 699,col 5)-(line 699,col 35)",
            "(line 700,col 5)-(line 700,col 36)",
            "(line 701,col 5)-(line 701,col 35)",
            "(line 702,col 5)-(line 702,col 37)",
            "(line 704,col 5)-(line 704,col 41)",
            "(line 705,col 5)-(line 705,col 41)",
            "(line 706,col 5)-(line 706,col 43)",
            "(line 707,col 5)-(line 707,col 43)",
            "(line 708,col 5)-(line 708,col 42)",
            "(line 710,col 5)-(line 710,col 24)",
            "(line 711,col 5)-(line 711,col 24)",
            "(line 712,col 5)-(line 712,col 32)",
            "(line 713,col 5)-(line 713,col 32)",
            "(line 714,col 5)-(line 714,col 28)",
            "(line 715,col 5)-(line 715,col 43)",
            "(line 717,col 5)-(line 717,col 24)",
            "(line 718,col 5)-(line 718,col 32)",
            "(line 719,col 5)-(line 719,col 28)",
            "(line 721,col 5)-(line 721,col 24)",
            "(line 722,col 5)-(line 722,col 23)",
            "(line 723,col 5)-(line 723,col 26)",
            "(line 724,col 5)-(line 724,col 28)",
            "(line 725,col 5)-(line 725,col 27)",
            "(line 726,col 5)-(line 726,col 23)",
            "(line 727,col 5)-(line 727,col 23)",
            "(line 728,col 5)-(line 728,col 24)",
            "(line 729,col 5)-(line 729,col 24)",
            "(line 730,col 5)-(line 730,col 24)",
            "(line 731,col 5)-(line 731,col 25)",
            "(line 733,col 5)-(line 733,col 30)",
            "(line 734,col 5)-(line 734,col 30)",
            "(line 735,col 5)-(line 735,col 31)",
            "(line 736,col 5)-(line 736,col 31)",
            "(line 737,col 5)-(line 737,col 30)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.FoldConstantsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/FoldConstantsTest.java",
        "signature": "com.google.javascript.jscomp.FoldConstantsTest.testFoldNot()",
        "snippet": "  public void testFoldNot() {\n    fold(\"while(!(x==y)){a=b;}\" , \"while(x!=y){a=b;}\");\n    fold(\"while(!(x!=y)){a=b;}\" , \"while(x==y){a=b;}\");\n    fold(\"while(!(x===y)){a=b;}\", \"while(x!==y){a=b;}\");\n    fold(\"while(!(x!==y)){a=b;}\", \"while(x===y){a=b;}\");\n    // Because !(x<NaN) != x>=NaN don't fold < and > cases.\n    foldSame(\"while(!(x>y)){a=b;}\");\n    foldSame(\"while(!(x>=y)){a=b;}\");\n    foldSame(\"while(!(x<y)){a=b;}\");\n    foldSame(\"while(!(x<=y)){a=b;}\");\n    foldSame(\"while(!(x<=NaN)){a=b;}\");\n  }\n",
        "begin_line": 740,
        "end_line": 751,
        "comment": "",
        "child_ranges": [
            "(line 741,col 5)-(line 741,col 55)",
            "(line 742,col 5)-(line 742,col 55)",
            "(line 743,col 5)-(line 743,col 56)",
            "(line 744,col 5)-(line 744,col 56)",
            "(line 746,col 5)-(line 746,col 36)",
            "(line 747,col 5)-(line 747,col 37)",
            "(line 748,col 5)-(line 748,col 36)",
            "(line 749,col 5)-(line 749,col 37)",
            "(line 750,col 5)-(line 750,col 39)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.FoldConstantsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/FoldConstantsTest.java",
        "signature": "com.google.javascript.jscomp.FoldConstantsTest.testFoldGetElem()",
        "snippet": "  public void testFoldGetElem() {\n    fold(\"x = [10, 20][0]\", \"x = 10\");\n    fold(\"x = [10, 20][1]\", \"x = 20\");\n    fold(\"x = [10, 20][0.5]\", \"\", FoldConstants.INVALID_GETELEM_INDEX_ERROR);\n    fold(\"x = [10, 20][-1]\",    \"\", FoldConstants.INDEX_OUT_OF_BOUNDS_ERROR);\n    fold(\"x = [10, 20][2]\",     \"\", FoldConstants.INDEX_OUT_OF_BOUNDS_ERROR);\n  }\n",
        "begin_line": 753,
        "end_line": 759,
        "comment": "",
        "child_ranges": [
            "(line 754,col 5)-(line 754,col 38)",
            "(line 755,col 5)-(line 755,col 38)",
            "(line 756,col 5)-(line 756,col 77)",
            "(line 757,col 5)-(line 757,col 77)",
            "(line 758,col 5)-(line 758,col 77)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.FoldConstantsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/FoldConstantsTest.java",
        "signature": "com.google.javascript.jscomp.FoldConstantsTest.testFoldComplex()",
        "snippet": "  public void testFoldComplex() {\n    fold(\"x = (3 / 1.0) + (1 * 2)\", \"x = 5\");\n    fold(\"x = (1 == 1.0) && foo() && true\", \"x = foo()&&true\");\n    fold(\"x = 'abc' + 5 + 10\", \"x = \\\"abc510\\\"\");\n  }\n",
        "begin_line": 761,
        "end_line": 765,
        "comment": "",
        "child_ranges": [
            "(line 762,col 5)-(line 762,col 45)",
            "(line 763,col 5)-(line 763,col 63)",
            "(line 764,col 5)-(line 764,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.FoldConstantsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/FoldConstantsTest.java",
        "signature": "com.google.javascript.jscomp.FoldConstantsTest.testFoldArrayLength()",
        "snippet": "  public void testFoldArrayLength() {\n    // Can fold\n    fold(\"x = [].length\", \"x = 0\");\n    fold(\"x = [1,2,3].length\", \"x = 3\");\n    fold(\"x = [a,b].length\", \"x = 2\");\n\n    // Cannot fold\n    fold(\"x = [foo(), 0].length\", \"x = [foo(),0].length\");\n    fold(\"x = y.length\", \"x = y.length\");\n  }\n",
        "begin_line": 767,
        "end_line": 776,
        "comment": "",
        "child_ranges": [
            "(line 769,col 5)-(line 769,col 35)",
            "(line 770,col 5)-(line 770,col 40)",
            "(line 771,col 5)-(line 771,col 38)",
            "(line 774,col 5)-(line 774,col 58)",
            "(line 775,col 5)-(line 775,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.FoldConstantsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/FoldConstantsTest.java",
        "signature": "com.google.javascript.jscomp.FoldConstantsTest.testFoldStringLength()",
        "snippet": "  public void testFoldStringLength() {\n    // Can fold basic strings.\n    fold(\"x = ''.length\", \"x = 0\");\n    fold(\"x = '123'.length\", \"x = 3\");\n\n    // Test unicode escapes are accounted for.\n    fold(\"x = '123\\u01dc'.length\", \"x = 4\");\n  }\n",
        "begin_line": 778,
        "end_line": 785,
        "comment": "",
        "child_ranges": [
            "(line 780,col 5)-(line 780,col 35)",
            "(line 781,col 5)-(line 781,col 38)",
            "(line 784,col 5)-(line 784,col 44)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.FoldConstantsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/FoldConstantsTest.java",
        "signature": "com.google.javascript.jscomp.FoldConstantsTest.testFoldRegExpConstructor()",
        "snippet": "  public void testFoldRegExpConstructor() {\n    // Cannot fold\n    // Too few arguments\n    fold(\"x = new RegExp\",                    \"x = new RegExp\");\n    // Empty regexp should not fold to // since that is a line comment in js\n    fold(\"x = new RegExp(\\\"\\\")\",              \"x = new RegExp(\\\"\\\")\");\n    fold(\"x = new RegExp(\\\"\\\", \\\"i\\\")\",       \"x = new RegExp(\\\"\\\",\\\"i\\\")\");\n    // Bogus flags should not fold\n    fold(\"x = new RegExp(\\\"foobar\\\", \\\"bogus\\\")\",\n         \"x = new RegExp(\\\"foobar\\\",\\\"bogus\\\")\",\n         FoldConstants.INVALID_REGULAR_EXPRESSION_FLAGS);\n    // Don't fold if the flags contain 'g'\n    fold(\"x = new RegExp(\\\"foobar\\\", \\\"g\\\")\",\n         \"x = new RegExp(\\\"foobar\\\",\\\"g\\\")\");\n    fold(\"x = new RegExp(\\\"foobar\\\", \\\"ig\\\")\",\n         \"x = new RegExp(\\\"foobar\\\",\\\"ig\\\")\");\n\n    // Can Fold\n    fold(\"x = new RegExp(\\\"foobar\\\")\",        \"x = /foobar/\");\n    fold(\"x = new RegExp(\\\"foobar\\\", \\\"i\\\")\", \"x = /foobar/i\");\n    // Make sure that escaping works\n    fold(\"x = new RegExp(\\\"\\\\\\\\.\\\", \\\"i\\\")\",  \"x = /\\\\./i\");\n    fold(\"x = new RegExp(\\\"/\\\", \\\"\\\")\",       \"x = /\\\\//\");\n    fold(\"x = new RegExp(\\\"///\\\", \\\"\\\")\",     \"x = /\\\\/\\\\/\\\\//\");\n    fold(\"x = new RegExp(\\\"\\\\\\\\\\\\/\\\", \\\"\\\")\", \"x = /\\\\//\");\n    // Don't fold things that crash older versions of Safari and that don't work\n    // as regex literals on recent versions of Safari\n    fold(\"x = new RegExp(\\\"\\\\u2028\\\")\", \"x = new RegExp(\\\"\\\\u2028\\\")\");\n    fold(\"x = new RegExp(\\\"\\\\\\\\\\\\\\\\u2028\\\")\", \"x = /\\\\\\\\u2028/\");\n\n    // Don't fold really long regexp literals, because Opera 9.2's\n    // regexp parser will explode.\n    String longRegexp = \"\";\n    for (int i = 0; i < 200; i++) longRegexp += \"x\";\n    foldSame(\"x = new RegExp(\\\"\" + longRegexp + \"\\\")\");\n  }\n",
        "begin_line": 787,
        "end_line": 822,
        "comment": "",
        "child_ranges": [
            "(line 790,col 5)-(line 790,col 64)",
            "(line 792,col 5)-(line 792,col 70)",
            "(line 793,col 5)-(line 793,col 76)",
            "(line 795,col 5)-(line 797,col 57)",
            "(line 799,col 5)-(line 800,col 45)",
            "(line 801,col 5)-(line 802,col 46)",
            "(line 805,col 5)-(line 805,col 62)",
            "(line 806,col 5)-(line 806,col 63)",
            "(line 808,col 5)-(line 808,col 60)",
            "(line 809,col 5)-(line 809,col 59)",
            "(line 810,col 5)-(line 810,col 65)",
            "(line 811,col 5)-(line 811,col 59)",
            "(line 814,col 5)-(line 814,col 71)",
            "(line 815,col 5)-(line 815,col 65)",
            "(line 819,col 5)-(line 819,col 27)",
            "(line 820,col 5)-(line 820,col 52)",
            "(line 821,col 5)-(line 821,col 55)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.FoldConstantsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/FoldConstantsTest.java",
        "signature": "com.google.javascript.jscomp.FoldConstantsTest.testFoldRegExpConstructorStringCompare()",
        "snippet": "  public void testFoldRegExpConstructorStringCompare() {\n    // Might have something to do with the internal representation of \\n and how\n    // it is used in node comparison.\n    assertResultString(\"x=new RegExp(\\\"\\\\n\\\", \\\"i\\\")\", \"x=/\\\\n/i\");\n  }\n",
        "begin_line": 824,
        "end_line": 828,
        "comment": "",
        "child_ranges": [
            "(line 827,col 5)-(line 827,col 67)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.FoldConstantsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/FoldConstantsTest.java",
        "signature": "com.google.javascript.jscomp.FoldConstantsTest.testFoldTypeof()",
        "snippet": "  public void testFoldTypeof() {\n    fold(\"x = typeof 1\", \"x = \\\"number\\\"\");\n    fold(\"x = typeof 'foo'\", \"x = \\\"string\\\"\");\n    fold(\"x = typeof true\", \"x = \\\"boolean\\\"\");\n    fold(\"x = typeof false\", \"x = \\\"boolean\\\"\");\n    fold(\"x = typeof null\", \"x = \\\"object\\\"\");\n    fold(\"x = typeof undefined\", \"x = \\\"undefined\\\"\");\n    fold(\"x = typeof []\", \"x = \\\"object\\\"\");\n    fold(\"x = typeof [1]\", \"x = \\\"object\\\"\");\n    fold(\"x = typeof [1,[]]\", \"x = \\\"object\\\"\");\n    fold(\"x = typeof {}\", \"x = \\\"object\\\"\");\n\n    foldSame(\"x = typeof[1,[foo()]]\");\n    foldSame(\"x = typeof{bathwater:baby()}\");\n  }\n",
        "begin_line": 830,
        "end_line": 844,
        "comment": "",
        "child_ranges": [
            "(line 831,col 5)-(line 831,col 43)",
            "(line 832,col 5)-(line 832,col 47)",
            "(line 833,col 5)-(line 833,col 47)",
            "(line 834,col 5)-(line 834,col 48)",
            "(line 835,col 5)-(line 835,col 46)",
            "(line 836,col 5)-(line 836,col 54)",
            "(line 837,col 5)-(line 837,col 44)",
            "(line 838,col 5)-(line 838,col 45)",
            "(line 839,col 5)-(line 839,col 48)",
            "(line 840,col 5)-(line 840,col 44)",
            "(line 842,col 5)-(line 842,col 38)",
            "(line 843,col 5)-(line 843,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.FoldConstantsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/FoldConstantsTest.java",
        "signature": "com.google.javascript.jscomp.FoldConstantsTest.testFoldLiteralConstructors()",
        "snippet": "  public void testFoldLiteralConstructors() {\n    // Can fold\n    fold(\"x = new Array\", \"x = []\");\n    fold(\"x = new Array()\", \"x = []\");\n    fold(\"x = new Object\", \"x = ({})\");\n    fold(\"x = new Object()\", \"x = ({})\");\n\n    // Cannot fold, there are arguments\n    fold(\"x = new Array(7)\", \"x = new Array(7)\");\n\n    // Cannot fold, the constructor being used is actually a local function\n    fold(\"x = \" +\n         \"(function(){function Object(){this.x=4};return new Object();})();\",\n         \"x = (function(){function Object(){this.x=4}return new Object})()\");\n  }\n",
        "begin_line": 846,
        "end_line": 860,
        "comment": "",
        "child_ranges": [
            "(line 848,col 5)-(line 848,col 36)",
            "(line 849,col 5)-(line 849,col 38)",
            "(line 850,col 5)-(line 850,col 39)",
            "(line 851,col 5)-(line 851,col 41)",
            "(line 854,col 5)-(line 854,col 49)",
            "(line 857,col 5)-(line 859,col 77)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.FoldConstantsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/FoldConstantsTest.java",
        "signature": "com.google.javascript.jscomp.FoldConstantsTest.testVarLifting()",
        "snippet": "  public void testVarLifting() {\n    fold(\"if(true)var a\", \"var a\");\n    fold(\"if(false)var a\", \"var a\");\n    fold(\"if(true);else var a;\", \"var a\");\n    fold(\"if(false) foo();else var a;\", \"var a\");\n    fold(\"if(true)var a;else;\", \"var a\");\n    fold(\"if(false)var a;else;\", \"var a\");\n    fold(\"if(false)var a,b;\", \"var b; var a\");\n    fold(\"if(false){var a;var a;}\", \"var a\");\n    fold(\"if(false)var a=function(){var b};\", \"var a\");\n    fold(\"if(a)if(false)var a;else var b;\", \"var a;if(a)var b\");\n  }\n",
        "begin_line": 862,
        "end_line": 873,
        "comment": "",
        "child_ranges": [
            "(line 863,col 5)-(line 863,col 35)",
            "(line 864,col 5)-(line 864,col 36)",
            "(line 865,col 5)-(line 865,col 42)",
            "(line 866,col 5)-(line 866,col 49)",
            "(line 867,col 5)-(line 867,col 41)",
            "(line 868,col 5)-(line 868,col 42)",
            "(line 869,col 5)-(line 869,col 46)",
            "(line 870,col 5)-(line 870,col 45)",
            "(line 871,col 5)-(line 871,col 55)",
            "(line 872,col 5)-(line 872,col 64)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.FoldConstantsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/FoldConstantsTest.java",
        "signature": "com.google.javascript.jscomp.FoldConstantsTest.testContainsUnicodeEscape()",
        "snippet": "  public void testContainsUnicodeEscape() throws Exception {\n    assertTrue(!FoldConstants.containsUnicodeEscape(\"\"));\n    assertTrue(!FoldConstants.containsUnicodeEscape(\"foo\"));\n    assertTrue( FoldConstants.containsUnicodeEscape(\"\\u2028\"));\n    assertTrue( FoldConstants.containsUnicodeEscape(\"\\\\u2028\"));\n    assertTrue( FoldConstants.containsUnicodeEscape(\"foo\\\\u2028\"));\n    assertTrue(!FoldConstants.containsUnicodeEscape(\"foo\\\\\\\\u2028\"));\n    assertTrue( FoldConstants.containsUnicodeEscape(\"foo\\\\\\\\u2028bar\\\\u2028\"));\n  }\n",
        "begin_line": 875,
        "end_line": 883,
        "comment": "",
        "child_ranges": [
            "(line 876,col 5)-(line 876,col 57)",
            "(line 877,col 5)-(line 877,col 60)",
            "(line 878,col 5)-(line 878,col 63)",
            "(line 879,col 5)-(line 879,col 64)",
            "(line 880,col 5)-(line 880,col 67)",
            "(line 881,col 5)-(line 881,col 69)",
            "(line 882,col 5)-(line 882,col 79)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.FoldConstantsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/FoldConstantsTest.java",
        "signature": "com.google.javascript.jscomp.FoldConstantsTest.testBug1438784()",
        "snippet": "  public void testBug1438784() throws Exception {\n    fold(\"for(var i=0;i<10;i++)if(x)x.y;\", \"for(var i=0;i<10;i++);\");\n  }\n",
        "begin_line": 885,
        "end_line": 887,
        "comment": "",
        "child_ranges": [
            "(line 886,col 5)-(line 886,col 69)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.FoldConstantsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/FoldConstantsTest.java",
        "signature": "com.google.javascript.jscomp.FoldConstantsTest.testFoldUselessWhile()",
        "snippet": "  public void testFoldUselessWhile() {\n    fold(\"while(false) { foo() }\", \"\");\n    fold(\"while(!true) { foo() }\", \"\");\n    fold(\"while(void 0) { foo() }\", \"\");\n    fold(\"while(undefined) { foo() }\", \"\");\n    fold(\"while(!false) foo() \", \"while(1) foo()\");\n    fold(\"while(true) foo() \", \"while(1) foo() \");\n    fold(\"while(!void 0) foo()\", \"while(1) foo()\");\n    fold(\"while(false) { var a = 0; }\", \"var a\");\n\n    // Make sure it plays nice with minimizing\n    fold(\"while(false) { foo(); continue }\", \"\");\n\n    // Make sure proper empty nodes are inserted.\n    fold(\"if(foo())while(false){foo()}else bar()\", \"foo()||bar()\");\n  }\n",
        "begin_line": 890,
        "end_line": 905,
        "comment": "",
        "child_ranges": [
            "(line 891,col 5)-(line 891,col 39)",
            "(line 892,col 5)-(line 892,col 39)",
            "(line 893,col 5)-(line 893,col 40)",
            "(line 894,col 5)-(line 894,col 43)",
            "(line 895,col 5)-(line 895,col 51)",
            "(line 896,col 5)-(line 896,col 50)",
            "(line 897,col 5)-(line 897,col 51)",
            "(line 898,col 5)-(line 898,col 49)",
            "(line 901,col 5)-(line 901,col 49)",
            "(line 904,col 5)-(line 904,col 67)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.FoldConstantsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/FoldConstantsTest.java",
        "signature": "com.google.javascript.jscomp.FoldConstantsTest.testFoldUselessFor()",
        "snippet": "  public void testFoldUselessFor() {\n    fold(\"for(;false;) { foo() }\", \"\");\n    fold(\"for(;!true;) { foo() }\", \"\");\n    fold(\"for(;void 0;) { foo() }\", \"\");\n    fold(\"for(;undefined;) { foo() }\", \"\");\n    fold(\"for(;!false;) foo() \", \"for(;;) foo()\");\n    fold(\"for(;true;) foo() \", \"for(;;) foo() \");\n    fold(\"for(;1;) foo()\", \"for(;;) foo()\");\n    foldSame(\"for(;;) foo()\");\n    fold(\"for(;!void 0;) foo()\", \"for(;;) foo()\");\n    fold(\"for(;false;) { var a = 0; }\", \"var a\");\n\n    // Make sure it plays nice with minimizing\n    fold(\"for(;false;) { foo(); continue }\", \"\");\n\n    // Make sure proper empty nodes are inserted.\n    fold(\"if(foo())for(;false;){foo()}else bar()\", \"foo()||bar()\");\n  }\n",
        "begin_line": 907,
        "end_line": 924,
        "comment": "",
        "child_ranges": [
            "(line 908,col 5)-(line 908,col 39)",
            "(line 909,col 5)-(line 909,col 39)",
            "(line 910,col 5)-(line 910,col 40)",
            "(line 911,col 5)-(line 911,col 43)",
            "(line 912,col 5)-(line 912,col 50)",
            "(line 913,col 5)-(line 913,col 49)",
            "(line 914,col 5)-(line 914,col 44)",
            "(line 915,col 5)-(line 915,col 30)",
            "(line 916,col 5)-(line 916,col 50)",
            "(line 917,col 5)-(line 917,col 49)",
            "(line 920,col 5)-(line 920,col 49)",
            "(line 923,col 5)-(line 923,col 67)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.FoldConstantsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/FoldConstantsTest.java",
        "signature": "com.google.javascript.jscomp.FoldConstantsTest.testFoldUselessDo()",
        "snippet": "  public void testFoldUselessDo() {\n    fold(\"do { foo() } while(false);\", \"foo()\");\n    fold(\"do { foo() } while(!true);\", \"foo()\");\n    fold(\"do { foo() } while(void 0);\", \"foo()\");\n    fold(\"do { foo() } while(undefined);\", \"foo()\");\n    fold(\"do { foo() } while(!false);\", \"do { foo() } while(1);\");\n    fold(\"do { foo() } while(true);\", \"do { foo() } while(1);\");\n    fold(\"do { foo() } while(!void 0);\", \"do { foo() } while(1);\");\n    fold(\"do { var a = 0; } while(false);\", \"var a=0\");\n\n    // Can't fold with break or continues.\n    foldSame(\"do { foo(); continue; } while(0)\");\n    foldSame(\"do { foo(); break; } while(0)\");\n\n    // Make sure proper empty nodes are inserted.\n    fold(\"if(foo())do {foo()} while(false) else bar()\", \"foo()?foo():bar()\");\n  }\n",
        "begin_line": 926,
        "end_line": 942,
        "comment": "",
        "child_ranges": [
            "(line 927,col 5)-(line 927,col 48)",
            "(line 928,col 5)-(line 928,col 48)",
            "(line 929,col 5)-(line 929,col 49)",
            "(line 930,col 5)-(line 930,col 52)",
            "(line 931,col 5)-(line 931,col 66)",
            "(line 932,col 5)-(line 932,col 64)",
            "(line 933,col 5)-(line 933,col 67)",
            "(line 934,col 5)-(line 934,col 55)",
            "(line 937,col 5)-(line 937,col 49)",
            "(line 938,col 5)-(line 938,col 46)",
            "(line 941,col 5)-(line 941,col 77)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.FoldConstantsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/FoldConstantsTest.java",
        "signature": "com.google.javascript.jscomp.FoldConstantsTest.testMinimizeCondition()",
        "snippet": "  public void testMinimizeCondition() {\n    // This test uses constant folding logic, so is only here for completeness.\n    fold(\"while(!!true) foo()\", \"while(1) foo()\");\n    // These test tryMinimizeCondition\n    fold(\"while(!!x) foo()\", \"while(x) foo()\");\n    fold(\"while(!(!x&&!y)) foo()\", \"while(x||y) foo()\");\n    fold(\"while(x||!!y) foo()\", \"while(x||y) foo()\");\n    fold(\"while(!(!!x&&y)) foo()\", \"while(!(x&&y)) foo()\");\n  }\n",
        "begin_line": 944,
        "end_line": 952,
        "comment": "",
        "child_ranges": [
            "(line 946,col 5)-(line 946,col 50)",
            "(line 948,col 5)-(line 948,col 47)",
            "(line 949,col 5)-(line 949,col 56)",
            "(line 950,col 5)-(line 950,col 53)",
            "(line 951,col 5)-(line 951,col 59)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.FoldConstantsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/FoldConstantsTest.java",
        "signature": "com.google.javascript.jscomp.FoldConstantsTest.testMinimizeCondition_example1()",
        "snippet": "  public void testMinimizeCondition_example1() {\n    // Based on a real failing code sample.\n    fold(\"if(!!(f() > 20)) {foo();foo()}\", \"if(f() > 20){foo();foo()}\");\n  }\n",
        "begin_line": 954,
        "end_line": 957,
        "comment": "",
        "child_ranges": [
            "(line 956,col 5)-(line 956,col 72)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.FoldConstantsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/FoldConstantsTest.java",
        "signature": "com.google.javascript.jscomp.FoldConstantsTest.testMinimizeWhileConstantCondition()",
        "snippet": "  public void testMinimizeWhileConstantCondition() {\n    fold(\"while(true) foo()\", \"while(1) foo()\");\n    fold(\"while(!false) foo()\", \"while(1) foo()\");\n    fold(\"while(202) foo()\", \"while(1) foo()\");\n    fold(\"while(Infinity) foo()\", \"while(1) foo()\");\n    fold(\"while('text') foo()\", \"while(1) foo()\");\n    fold(\"while([]) foo()\", \"while(1) foo()\");\n    fold(\"while({}) foo()\", \"while(1) foo()\");\n    fold(\"while(/./) foo()\", \"while(1) foo()\");\n    fold(\"while(0) foo()\", \"\");\n    fold(\"while(0.0) foo()\", \"\");\n    fold(\"while(NaN) foo()\", \"\");\n    fold(\"while(null) foo()\", \"\");\n    fold(\"while(undefined) foo()\", \"\");\n    fold(\"while('') foo()\", \"\");\n  }\n",
        "begin_line": 959,
        "end_line": 974,
        "comment": "",
        "child_ranges": [
            "(line 960,col 5)-(line 960,col 48)",
            "(line 961,col 5)-(line 961,col 50)",
            "(line 962,col 5)-(line 962,col 47)",
            "(line 963,col 5)-(line 963,col 52)",
            "(line 964,col 5)-(line 964,col 50)",
            "(line 965,col 5)-(line 965,col 46)",
            "(line 966,col 5)-(line 966,col 46)",
            "(line 967,col 5)-(line 967,col 47)",
            "(line 968,col 5)-(line 968,col 31)",
            "(line 969,col 5)-(line 969,col 33)",
            "(line 970,col 5)-(line 970,col 33)",
            "(line 971,col 5)-(line 971,col 34)",
            "(line 972,col 5)-(line 972,col 39)",
            "(line 973,col 5)-(line 973,col 32)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.FoldConstantsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/FoldConstantsTest.java",
        "signature": "com.google.javascript.jscomp.FoldConstantsTest.testMinimizeExpr()",
        "snippet": "  public void testMinimizeExpr() {\n    fold(\"!!true\", \"0\");\n    fold(\"!!x\", \"x\");\n    fold(\"!(!x&&!y)\", \"!x&&!y\");\n    fold(\"x||!!y\", \"x||y\");\n    fold(\"!(!!x&&y)\", \"x&&y\");\n  }\n",
        "begin_line": 976,
        "end_line": 982,
        "comment": "",
        "child_ranges": [
            "(line 977,col 5)-(line 977,col 24)",
            "(line 978,col 5)-(line 978,col 21)",
            "(line 979,col 5)-(line 979,col 32)",
            "(line 980,col 5)-(line 980,col 27)",
            "(line 981,col 5)-(line 981,col 30)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.FoldConstantsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/FoldConstantsTest.java",
        "signature": "com.google.javascript.jscomp.FoldConstantsTest.testBug1509085()",
        "snippet": "  public void testBug1509085() {\n    new FoldConstantsTest() {\n      @Override\n      protected int getNumRepetitions() {\n        return 1;\n      }\n    }.fold(\"x ? x() : void 0\", \"if(x) x();\");\n  }\n",
        "begin_line": 984,
        "end_line": 991,
        "comment": "",
        "child_ranges": [
            "(line 985,col 5)-(line 990,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.FoldConstantsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/FoldConstantsTest.java",
        "signature": "com.google.javascript.jscomp.FoldConstantsTest.Anonymous-1ef5af78-4488-4e89-9017-7b5ad7d43545.getNumRepetitions()",
        "snippet": "      @Override\n      protected int getNumRepetitions() {\n        return 1;\n      }\n",
        "begin_line": 986,
        "end_line": 989,
        "comment": "",
        "child_ranges": [
            "(line 988,col 9)-(line 988,col 17)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.FoldConstantsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/FoldConstantsTest.java",
        "signature": "com.google.javascript.jscomp.FoldConstantsTest.testFoldInstanceOf()",
        "snippet": "  public void testFoldInstanceOf() {\n    // Non object types are never instances of anything.\n    fold(\"64 instanceof Object\", \"0\");\n    fold(\"64 instanceof Number\", \"0\");\n    fold(\"'' instanceof Object\", \"0\");\n    fold(\"'' instanceof String\", \"0\");\n    fold(\"true instanceof Object\", \"0\");\n    fold(\"true instanceof Boolean\", \"0\");\n    fold(\"false instanceof Object\", \"0\");\n    fold(\"null instanceof Object\", \"0\");\n    fold(\"undefined instanceof Object\", \"0\");\n    fold(\"NaN instanceof Object\", \"0\");\n    fold(\"Infinity instanceof Object\", \"0\");\n\n    // Array and object literals are known to be objects.\n    fold(\"[] instanceof Object\", \"1\");\n    fold(\"({}) instanceof Object\", \"1\");\n\n    // These cases is foldable, but no handled currently.\n    foldSame(\"new Foo() instanceof Object\");\n    // These would require type information to fold.\n    foldSame(\"[] instanceof Foo\");\n    foldSame(\"({}) instanceof Foo\");\n  }\n",
        "begin_line": 993,
        "end_line": 1016,
        "comment": "",
        "child_ranges": [
            "(line 995,col 5)-(line 995,col 38)",
            "(line 996,col 5)-(line 996,col 38)",
            "(line 997,col 5)-(line 997,col 38)",
            "(line 998,col 5)-(line 998,col 38)",
            "(line 999,col 5)-(line 999,col 40)",
            "(line 1000,col 5)-(line 1000,col 41)",
            "(line 1001,col 5)-(line 1001,col 41)",
            "(line 1002,col 5)-(line 1002,col 40)",
            "(line 1003,col 5)-(line 1003,col 45)",
            "(line 1004,col 5)-(line 1004,col 39)",
            "(line 1005,col 5)-(line 1005,col 44)",
            "(line 1008,col 5)-(line 1008,col 38)",
            "(line 1009,col 5)-(line 1009,col 40)",
            "(line 1012,col 5)-(line 1012,col 44)",
            "(line 1014,col 5)-(line 1014,col 34)",
            "(line 1015,col 5)-(line 1015,col 36)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.FoldConstantsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/FoldConstantsTest.java",
        "signature": "com.google.javascript.jscomp.FoldConstantsTest.testDivision()",
        "snippet": "  public void testDivision() {\n    // Make sure the 1/3 does not expand to 0.333333\n    fold(\"print(1/3)\", \"print(1/3)\");\n\n    // Decimal form is preferable to fraction form when strings are the\n    // same length.\n    fold(\"print(1/2)\", \"print(0.5)\");\n  }\n",
        "begin_line": 1018,
        "end_line": 1025,
        "comment": "",
        "child_ranges": [
            "(line 1020,col 5)-(line 1020,col 37)",
            "(line 1024,col 5)-(line 1024,col 37)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.FoldConstantsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/FoldConstantsTest.java",
        "signature": "com.google.javascript.jscomp.FoldConstantsTest.testAssignOps()",
        "snippet": "  public void testAssignOps() {\n    fold(\"x=x+y\", \"x+=y\");\n    fold(\"x=x*y\", \"x*=y\");\n    fold(\"x.y=x.y+z\", \"x.y+=z\");\n    foldSame(\"next().x = next().x + 1\");\n  }\n",
        "begin_line": 1027,
        "end_line": 1032,
        "comment": "",
        "child_ranges": [
            "(line 1028,col 5)-(line 1028,col 26)",
            "(line 1029,col 5)-(line 1029,col 26)",
            "(line 1030,col 5)-(line 1030,col 32)",
            "(line 1031,col 5)-(line 1031,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.FoldConstantsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/FoldConstantsTest.java",
        "signature": "com.google.javascript.jscomp.FoldConstantsTest.testFoldConditionalVarDeclaration()",
        "snippet": "  public void testFoldConditionalVarDeclaration() {\n    fold(\"if(x) var y=1;else y=2\", \"var y=x?1:2\");\n    fold(\"if(x) y=1;else var y=2\", \"var y=x?1:2\");\n\n    foldSame(\"if(x) var y = 1; z = 2\");\n    foldSame(\"if(x) y = 1; var z = 2\");\n\n    foldSame(\"if(x) { var y = 1; print(y)} else y = 2 \");\n    foldSame(\"if(x) var y = 1; else {y = 2; print(y)}\");\n  }\n",
        "begin_line": 1034,
        "end_line": 1043,
        "comment": "",
        "child_ranges": [
            "(line 1035,col 5)-(line 1035,col 50)",
            "(line 1036,col 5)-(line 1036,col 50)",
            "(line 1038,col 5)-(line 1038,col 39)",
            "(line 1039,col 5)-(line 1039,col 39)",
            "(line 1041,col 5)-(line 1041,col 57)",
            "(line 1042,col 5)-(line 1042,col 56)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.FoldConstantsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/FoldConstantsTest.java",
        "signature": "com.google.javascript.jscomp.FoldConstantsTest.testFoldReturnResult()",
        "snippet": "  public void testFoldReturnResult() {\n    foldSame(\"function f(){return false;}\");\n    foldSame(\"function f(){return null;}\");\n    fold(\"function f(){return void 0;}\",\n         \"function f(){return}\");\n    foldSame(\"function f(){return void foo();}\");\n    fold(\"function f(){return undefined;}\",\n         \"function f(){return}\");\n    fold(\"function(){if(a()){return undefined;}}\",\n         \"function(){if(a()){return}}\");\n  }\n",
        "begin_line": 1045,
        "end_line": 1055,
        "comment": "",
        "child_ranges": [
            "(line 1046,col 5)-(line 1046,col 44)",
            "(line 1047,col 5)-(line 1047,col 43)",
            "(line 1048,col 5)-(line 1049,col 33)",
            "(line 1050,col 5)-(line 1050,col 49)",
            "(line 1051,col 5)-(line 1052,col 33)",
            "(line 1053,col 5)-(line 1054,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.FoldConstantsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/FoldConstantsTest.java",
        "signature": "com.google.javascript.jscomp.FoldConstantsTest.testBugIssue3()",
        "snippet": "  public void testBugIssue3() {\n    foldSame(\"function foo() {\" +\n             \"  if(sections.length != 1) children[i] = 0;\" +\n             \"  else var selectedid = children[i]\" +\n             \"}\");\n  }\n",
        "begin_line": 1057,
        "end_line": 1062,
        "comment": "",
        "child_ranges": [
            "(line 1058,col 5)-(line 1061,col 18)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.FoldConstantsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/FoldConstantsTest.java",
        "signature": "com.google.javascript.jscomp.FoldConstantsTest.testBugIssue43()",
        "snippet": "  public void testBugIssue43() {\n    foldSame(\"function foo() {\" +\n             \"  if (a) { var b = 1; } else { a.b = 1; }\" +\n             \"}\");\n  }\n",
        "begin_line": 1064,
        "end_line": 1068,
        "comment": "",
        "child_ranges": [
            "(line 1065,col 5)-(line 1067,col 18)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.FoldConstantsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.CompilerTestCase(java.lang.String, boolean)",
        "snippet": "  protected CompilerTestCase(String externs, boolean compareAsTree) {\n    this.externsInputs = new JSSourceFile[] {\n        JSSourceFile.fromCode(\"externs\", externs)\n    };\n    this.compareAsTree = compareAsTree;\n    this.parseTypeInfo = false;\n  }\n",
        "begin_line": 99,
        "end_line": 105,
        "comment": "\n   * Constructs a test.\n   *\n   * @param externs Externs JS as a string\n   * @param compareAsTree True to compare output & expected as a node tree.\n   *     99% of the time you want to compare as a tree. There are a few\n   *     special cases where you don't, like if you want to test the code\n   *     printing of \"unnatural\" syntax trees. For example,\n   *\n   * <pre>\n   * IF\n   *   IF\n   *     STATEMENT\n   * ELSE\n   *   STATEMENT\n   * </pre>\n   ",
        "child_ranges": [
            "(line 100,col 5)-(line 102,col 6)",
            "(line 103,col 5)-(line 103,col 39)",
            "(line 104,col 5)-(line 104,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.FoldConstantsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.CompilerTestCase(java.lang.String)",
        "snippet": "  protected CompilerTestCase(String externs) {\n    this(externs, true);\n  }\n",
        "begin_line": 111,
        "end_line": 113,
        "comment": "\n   * Constructs a test. Uses AST comparison.\n   * @param externs Externs JS as a string\n   ",
        "child_ranges": [
            "(line 112,col 5)-(line 112,col 24)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.FoldConstantsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.CompilerTestCase()",
        "snippet": "  protected CompilerTestCase() {\n    this(\"\", true);\n  }\n",
        "begin_line": 118,
        "end_line": 120,
        "comment": "\n   * Constructs a test. Uses AST comparison and no externs.\n   ",
        "child_ranges": [
            "(line 119,col 5)-(line 119,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.FoldConstantsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.getProcessor(com.google.javascript.jscomp.Compiler)",
        "snippet": "  protected abstract CompilerPass getProcessor(Compiler compiler);\n",
        "begin_line": 128,
        "end_line": 128,
        "comment": "\n   * Gets the compiler pass instance to use for a test.\n   *\n   * @param compiler The compiler\n   * @return The pass to test\n   ",
        "child_ranges": []
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.FoldConstantsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.getOptions()",
        "snippet": "  protected CompilerOptions getOptions() {\n    CompilerOptions options = new CompilerOptions();\n    options.setWarningLevel(\n        DiagnosticGroups.MISSING_PROPERTIES, CheckLevel.WARNING);\n    options.setCodingConvention(getCodingConvention());\n    return options;\n  }\n",
        "begin_line": 137,
        "end_line": 143,
        "comment": "\n   * Gets the compiler options to use for this test. Defaults to do nothing\n   * options.\n   *\n   * This is really only for configuring warnings guards. Use getProcessor\n   * to determine what passes should be run.\n   ",
        "child_ranges": [
            "(line 138,col 5)-(line 138,col 52)",
            "(line 139,col 5)-(line 140,col 65)",
            "(line 141,col 5)-(line 141,col 55)",
            "(line 142,col 5)-(line 142,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.FoldConstantsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.getCodingConvention()",
        "snippet": "  protected CodingConvention getCodingConvention() {\n    return new GoogleCodingConvention();\n  }\n",
        "begin_line": 145,
        "end_line": 147,
        "comment": "",
        "child_ranges": [
            "(line 146,col 5)-(line 146,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.FoldConstantsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.getNumRepetitions()",
        "snippet": "  protected int getNumRepetitions() {\n    // Since most compiler passes should be idempotent, we run each pass twice\n    // by default.\n    return 2;\n  }\n",
        "begin_line": 153,
        "end_line": 157,
        "comment": "\n   * Returns the number of times the pass should be run before results are\n   * verified.\n   ",
        "child_ranges": [
            "(line 156,col 5)-(line 156,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.FoldConstantsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.allowSourcelessWarnings()",
        "snippet": "  void allowSourcelessWarnings() {\n    allowSourcelessWarnings = true;\n  }\n",
        "begin_line": 160,
        "end_line": 162,
        "comment": " Expect warnings without source information. ",
        "child_ranges": [
            "(line 161,col 5)-(line 161,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.FoldConstantsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.getLastCompiler()",
        "snippet": "  Compiler getLastCompiler() {\n    return lastCompiler;\n  }\n",
        "begin_line": 165,
        "end_line": 167,
        "comment": " The most recently used JSComp instance. ",
        "child_ranges": [
            "(line 166,col 5)-(line 166,col 24)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.FoldConstantsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.enableTypeCheck(com.google.javascript.jscomp.CheckLevel)",
        "snippet": "  public void enableTypeCheck(CheckLevel level) {\n    typeCheckEnabled  = true;\n    typeCheckLevel = level;\n  }\n",
        "begin_line": 177,
        "end_line": 180,
        "comment": "\n   * Perform type checking before running the test pass. This will check\n   * for type errors and annotate nodes with type information.\n   *\n   * @param level the level of severity to report for type errors\n   *\n   * @see TypeCheck\n   ",
        "child_ranges": [
            "(line 178,col 5)-(line 178,col 29)",
            "(line 179,col 5)-(line 179,col 27)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.FoldConstantsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.enableLineNumberCheck(boolean)",
        "snippet": "  public void enableLineNumberCheck(boolean newVal) {\n    checkLineNumbers = newVal;\n  }\n",
        "begin_line": 185,
        "end_line": 187,
        "comment": "\n   * Check to make sure that line numbers were preserved.\n   ",
        "child_ranges": [
            "(line 186,col 5)-(line 186,col 30)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.FoldConstantsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.disableTypeCheck()",
        "snippet": "  void disableTypeCheck() {\n    typeCheckEnabled  = false;\n  }\n",
        "begin_line": 194,
        "end_line": 196,
        "comment": "\n   * Do not run type checking before running the test pass.\n   *\n   * @see TypeCheck\n   ",
        "child_ranges": [
            "(line 195,col 5)-(line 195,col 30)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.FoldConstantsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.enableNormalize()",
        "snippet": "  protected void enableNormalize() {\n    normalizeEnabled  = true;\n  }\n",
        "begin_line": 204,
        "end_line": 206,
        "comment": "\n   * Perform AST normalization before running the test pass, and anti-normalize\n   * after running it.\n   *\n   * @see Normalize\n   ",
        "child_ranges": [
            "(line 205,col 5)-(line 205,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.FoldConstantsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.enableMarkNoSideEffects()",
        "snippet": "  void enableMarkNoSideEffects() {\n    markNoSideEffects  = true;\n  }\n",
        "begin_line": 213,
        "end_line": 215,
        "comment": "\n   * Run the MarkSideEffectCalls pass before running the test pass.\n   *\n   * @see MarkNoSideEffectCalls\n   ",
        "child_ranges": [
            "(line 214,col 5)-(line 214,col 30)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.FoldConstantsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.createTypeCheck(com.google.javascript.jscomp.Compiler, com.google.javascript.jscomp.CheckLevel)",
        "snippet": "  private static TypeCheck createTypeCheck(Compiler compiler,\n      CheckLevel level) {\n    ReverseAbstractInterpreter rai =\n        new SemanticReverseAbstractInterpreter(compiler.getCodingConvention(),\n            compiler.getTypeRegistry());\n\n    return new TypeCheck(compiler, rai, compiler.getTypeRegistry(),\n        level, CheckLevel.OFF);\n  }\n",
        "begin_line": 218,
        "end_line": 226,
        "comment": " Returns a newly created TypeCheck. ",
        "child_ranges": [
            "(line 220,col 5)-(line 222,col 40)",
            "(line 224,col 5)-(line 225,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.FoldConstantsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.lang.String, java.lang.String)",
        "snippet": "  public void test(String js, String expected) {\n    test(js, expected, (DiagnosticType) null);\n  }\n",
        "begin_line": 234,
        "end_line": 236,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output.\n   *\n   * @param js Input\n   * @param expected Expected JS output\n   ",
        "child_ranges": [
            "(line 235,col 5)-(line 235,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.FoldConstantsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.lang.String, java.lang.String, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void test(String js, String expected, DiagnosticType error) {\n    test(js, expected, error, null);\n  }\n",
        "begin_line": 246,
        "end_line": 248,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output,\n   * or that an expected error is encountered.\n   *\n   * @param js Input\n   * @param expected Expected output, or null if an error is expected\n   * @param error Expected error, or null if no error is expected\n   ",
        "child_ranges": [
            "(line 247,col 5)-(line 247,col 36)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.FoldConstantsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.lang.String, java.lang.String, com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType, java.lang.String)",
        "snippet": "  public void test(String js, String expected, DiagnosticType error,\n                   DiagnosticType warning, String description) {\n    test(externsInputs, js, expected, error, warning, description);\n  }\n",
        "begin_line": 261,
        "end_line": 264,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output,\n   * or that an expected error is encountered.\n   *\n   * @param js Input\n   * @param expected Expected output, or null if an error is expected\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   * @param description The content of the error expected\n   ",
        "child_ranges": [
            "(line 263,col 5)-(line 263,col 67)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.FoldConstantsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.lang.String, java.lang.String, com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void test(String js, String expected,\n                   DiagnosticType error, DiagnosticType warning) {\n    test(externsInputs, js, expected, error, warning, null);\n  }\n",
        "begin_line": 276,
        "end_line": 279,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output\n   * and (optionally) that an expected warning is issued. Or, if an error is\n   * expected, this method just verifies that the error is encountered.\n   *\n   * @param js Input\n   * @param expected Expected output, or null if an error is expected\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   ",
        "child_ranges": [
            "(line 278,col 5)-(line 278,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.FoldConstantsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.lang.String, java.lang.String, java.lang.String, com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void test(String externs, String js, String expected,\n                   DiagnosticType error, DiagnosticType warning) {\n    test(externs, js, expected, error, warning, null);\n  }\n",
        "begin_line": 292,
        "end_line": 295,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output\n   * and (optionally) that an expected warning is issued. Or, if an error is\n   * expected, this method just verifies that the error is encountered.\n   *\n   * @param externs Externs input\n   * @param js Input\n   * @param expected Expected output, or null if an error is expected\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   ",
        "child_ranges": [
            "(line 294,col 5)-(line 294,col 54)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.FoldConstantsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.lang.String, java.lang.String, java.lang.String, com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType, java.lang.String)",
        "snippet": "  public void test(String externs, String js, String expected,\n                   DiagnosticType error, DiagnosticType warning,\n                   String description) {\n    JSSourceFile[] externsInputs = new JSSourceFile[]{\n        JSSourceFile.fromCode(\"externs\", externs)\n    };\n    test(externsInputs, js, expected, error, warning, description);\n  }\n",
        "begin_line": 311,
        "end_line": 318,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output\n   * and (optionally) that an expected warning is issued. Or, if an error is\n   * expected, this method just verifies that the error is encountered.\n   *\n   * @param externs Externs input\n   * @param js Input\n   * @param expected Expected output, or null if an error is expected\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   * @param description The description of the expected warning,\n   *      or null if no warning is expected or if the warning's description\n   *      should not be examined\n   ",
        "child_ranges": [
            "(line 314,col 5)-(line 316,col 6)",
            "(line 317,col 5)-(line 317,col 67)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.FoldConstantsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(com.google.javascript.jscomp.JSSourceFile[], java.lang.String, java.lang.String, com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType, java.lang.String)",
        "snippet": "  public void test(JSSourceFile[] externs, String js, String expected,\n                   DiagnosticType error,\n                   DiagnosticType warning, String description) {\n    Compiler compiler = createCompiler();\n    lastCompiler = compiler;\n\n    BaseJSTypeTestCase.addNativeProperties(compiler.getTypeRegistry());\n\n    CompilerOptions options = getOptions();\n    // Note that in this context, turning on the checkTypes option won't\n    // actually cause the type check to run.\n    options.checkTypes = parseTypeInfo;\n    compiler.init(externs, new JSSourceFile[] {\n        JSSourceFile.fromCode(\"testcode\", js) }, options);\n    test(compiler, new String[] { expected }, error, warning, description);\n  }\n",
        "begin_line": 334,
        "end_line": 349,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output\n   * and (optionally) that an expected warning is issued. Or, if an error is\n   * expected, this method just verifies that the error is encountered.\n   *\n   * @param externs Externs inputs\n   * @param js Input\n   * @param expected Expected output, or null if an error is expected\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   * @param description The description of the expected warning,\n   *      or null if no warning is expected or if the warning's description\n   *      should not be examined\n   ",
        "child_ranges": [
            "(line 337,col 5)-(line 337,col 41)",
            "(line 338,col 5)-(line 338,col 28)",
            "(line 340,col 5)-(line 340,col 71)",
            "(line 342,col 5)-(line 342,col 43)",
            "(line 345,col 5)-(line 345,col 39)",
            "(line 346,col 5)-(line 347,col 58)",
            "(line 348,col 5)-(line 348,col 75)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.FoldConstantsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.lang.String[], java.lang.String[])",
        "snippet": "  public void test(String[] js, String[] expected) {\n    test(js, expected, null);\n  }\n",
        "begin_line": 357,
        "end_line": 359,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output.\n   *\n   * @param js Inputs\n   * @param expected Expected JS output\n   ",
        "child_ranges": [
            "(line 358,col 5)-(line 358,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.FoldConstantsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.lang.String[], java.lang.String[], com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void test(String[] js, String[] expected, DiagnosticType error) {\n    test(js, expected, error, null);\n  }\n",
        "begin_line": 369,
        "end_line": 371,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output,\n   * or that an expected error is encountered.\n   *\n   * @param js Inputs\n   * @param expected Expected JS output\n   * @param error Expected error, or null if no error is expected\n   ",
        "child_ranges": [
            "(line 370,col 5)-(line 370,col 36)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.FoldConstantsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.lang.String[], java.lang.String[], com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void test(String[] js, String[] expected, DiagnosticType error,\n                   DiagnosticType warning) {\n    test(js, expected, error, warning, null);\n  }\n",
        "begin_line": 383,
        "end_line": 386,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output\n   * and (optionally) that an expected warning is issued. Or, if an error is\n   * expected, this method just verifies that the error is encountered.\n   *\n   * @param js Inputs\n   * @param expected Expected JS output\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   ",
        "child_ranges": [
            "(line 385,col 5)-(line 385,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.FoldConstantsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.lang.String[], java.lang.String[], com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType, java.lang.String)",
        "snippet": "  public void test(String[] js, String[] expected, DiagnosticType error,\n                   DiagnosticType warning, String description) {\n    Compiler compiler = createCompiler();\n    lastCompiler = compiler;\n\n    JSSourceFile[] inputs = new JSSourceFile[js.length];\n    for (int i = 0; i < js.length; i++) {\n      inputs[i] = JSSourceFile.fromCode(\"input\" + i, js[i]);\n    }\n    compiler.init(externsInputs, inputs, getOptions());\n    test(compiler, expected, error, warning, description);\n  }\n",
        "begin_line": 401,
        "end_line": 412,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output\n   * and (optionally) that an expected warning is issued. Or, if an error is\n   * expected, this method just verifies that the error is encountered.\n   *\n   * @param js Inputs\n   * @param expected Expected JS output\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   * @param description The description of the expected warning,\n   *      or null if no warning is expected or if the warning's description\n   *      should not be examined\n   ",
        "child_ranges": [
            "(line 403,col 5)-(line 403,col 41)",
            "(line 404,col 5)-(line 404,col 28)",
            "(line 406,col 5)-(line 406,col 56)",
            "(line 407,col 5)-(line 409,col 5)",
            "(line 410,col 5)-(line 410,col 55)",
            "(line 411,col 5)-(line 411,col 58)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.FoldConstantsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(com.google.javascript.jscomp.JSModule[], java.lang.String[])",
        "snippet": "  public void test(JSModule[] modules, String[] expected) {\n    test(modules, expected, null);\n  }\n",
        "begin_line": 420,
        "end_line": 422,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output.\n   *\n   * @param modules Module inputs\n   * @param expected Expected JS outputs (one per module)\n   ",
        "child_ranges": [
            "(line 421,col 5)-(line 421,col 34)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.FoldConstantsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(com.google.javascript.jscomp.JSModule[], java.lang.String[], com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void test(JSModule[] modules, String[] expected,\n      DiagnosticType error) {\n    test(modules, expected, error, null);\n  }\n",
        "begin_line": 432,
        "end_line": 435,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output,\n   * or that an expected error is encountered.\n   *\n   * @param modules Module inputs\n   * @param expected Expected JS outputs (one per module)\n   * @param error Expected error, or null if no error is expected\n   ",
        "child_ranges": [
            "(line 434,col 5)-(line 434,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.FoldConstantsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(com.google.javascript.jscomp.JSModule[], java.lang.String[], com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void test(JSModule[] modules, String[] expected,\n                   DiagnosticType error, DiagnosticType warning) {\n    Compiler compiler = createCompiler();\n    lastCompiler = compiler;\n\n    compiler.init(externsInputs, modules, getOptions());\n    test(compiler, expected, error, warning);\n  }\n",
        "begin_line": 447,
        "end_line": 454,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output\n   * and (optionally) that an expected warning is issued. Or, if an error is\n   * expected, this method just verifies that the error is encountered.\n   *\n   * @param modules Module inputs\n   * @param expected Expected JS outputs (one per module)\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   ",
        "child_ranges": [
            "(line 449,col 5)-(line 449,col 41)",
            "(line 450,col 5)-(line 450,col 28)",
            "(line 452,col 5)-(line 452,col 56)",
            "(line 453,col 5)-(line 453,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.FoldConstantsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(java.lang.String)",
        "snippet": "  public void testSame(String js) {\n    test(js, js);\n  }\n",
        "begin_line": 461,
        "end_line": 463,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as its input.\n   *\n   * @param js Input and output\n   ",
        "child_ranges": [
            "(line 462,col 5)-(line 462,col 17)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.FoldConstantsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(java.lang.String, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void testSame(String js, DiagnosticType warning) {\n    test(js, js, null, warning);\n  }\n",
        "begin_line": 472,
        "end_line": 474,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as its input\n   * and (optionally) that an expected warning is issued.\n   *\n   * @param js Input and output\n   * @param warning Expected warning, or null if no warning is expected\n   ",
        "child_ranges": [
            "(line 473,col 5)-(line 473,col 32)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.FoldConstantsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(java.lang.String, com.google.javascript.jscomp.DiagnosticType, boolean)",
        "snippet": "  public void testSame(String js, DiagnosticType diag, boolean error) {\n    if (error) {\n      test(js, js, diag);\n    } else {\n      test(js, js, null, diag);\n    }\n  }\n",
        "begin_line": 484,
        "end_line": 490,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as its input\n   * and (optionally) that an expected warning is issued.\n   *\n   * @param js Input and output\n   * @param diag Expected error or warning, or null if none is expected\n   * @param error true if diag is an error, false if it is a warning\n   ",
        "child_ranges": [
            "(line 485,col 5)-(line 489,col 5)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.FoldConstantsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(java.lang.String, java.lang.String, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void testSame(String externs, String js, DiagnosticType warning) {\n    testSame(externs, js, warning, null);\n  }\n",
        "begin_line": 500,
        "end_line": 502,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as its input\n   * and (optionally) that an expected warning is issued.\n   *\n   * @param externs Externs input\n   * @param js Input and output\n   * @param warning Expected warning, or null if no warning is expected\n   ",
        "child_ranges": [
            "(line 501,col 5)-(line 501,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.FoldConstantsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(java.lang.String, java.lang.String, com.google.javascript.jscomp.DiagnosticType, java.lang.String)",
        "snippet": "  public void testSame(String externs, String js, DiagnosticType warning,\n                       String description) {\n    JSSourceFile[] externsInputs = new JSSourceFile[]{\n        JSSourceFile.fromCode(\"externs\", externs)\n    };\n    test(externsInputs, js, js, null, warning, description);\n  }\n",
        "begin_line": 515,
        "end_line": 521,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as its input\n   * and (optionally) that an expected warning and description is issued.\n   *\n   * @param externs Externs input\n   * @param js Input and output\n   * @param warning Expected warning, or null if no warning is expected\n   * @param description The description of the expected warning,\n   *      or null if no warning is expected or if the warning's description\n   *      should not be examined\n   ",
        "child_ranges": [
            "(line 517,col 5)-(line 519,col 6)",
            "(line 520,col 5)-(line 520,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.FoldConstantsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(java.lang.String[])",
        "snippet": "  public void testSame(String[] js) {\n    test(js, js);\n  }\n",
        "begin_line": 528,
        "end_line": 530,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as its input.\n   *\n   * @param js Inputs and outputs\n   ",
        "child_ranges": [
            "(line 529,col 5)-(line 529,col 17)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.FoldConstantsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(java.lang.String[], com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void testSame(String[] js, DiagnosticType error) {\n    test(js, js, error);\n  }\n",
        "begin_line": 539,
        "end_line": 541,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as its input,\n   * and emits the given error.\n   *\n   * @param js Inputs and outputs\n   * @param error Expected error, or null if no error is expected\n   ",
        "child_ranges": [
            "(line 540,col 5)-(line 540,col 24)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.FoldConstantsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(java.lang.String[], com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void testSame(String[] js, DiagnosticType error, DiagnosticType warning) {\n    test(js, js, error, warning);\n  }\n",
        "begin_line": 551,
        "end_line": 553,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as its input,\n   * and emits the given error and warning.\n   *\n   * @param js Inputs and outputs\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   ",
        "child_ranges": [
            "(line 552,col 5)-(line 552,col 33)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.FoldConstantsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(com.google.javascript.jscomp.JSModule[])",
        "snippet": "  public void testSame(JSModule[] modules) {\n    testSame(modules, null);\n  }\n",
        "begin_line": 560,
        "end_line": 562,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as the input.\n   *\n   * @param modules Module inputs\n   ",
        "child_ranges": [
            "(line 561,col 5)-(line 561,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.FoldConstantsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(com.google.javascript.jscomp.JSModule[], com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void testSame(JSModule[] modules, DiagnosticType warning) {\n    try {\n      String[] expected = new String[modules.length];\n      for (int i = 0; i < modules.length; i++) {\n        expected[i] = \"\";\n        for (CompilerInput input : modules[i].getInputs()) {\n          expected[i] += input.getSourceFile().getCode();\n        }\n      }\n      test(modules, expected, null, warning);\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n  }\n",
        "begin_line": 570,
        "end_line": 583,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as the input.\n   *\n   * @param modules Module inputs\n   * @param warning A warning, or null for no expected warning.\n   ",
        "child_ranges": [
            "(line 571,col 5)-(line 582,col 5)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.FoldConstantsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(com.google.javascript.jscomp.Compiler, java.lang.String[], com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  protected void test(Compiler compiler, String[] expected,\n                      DiagnosticType error, DiagnosticType warning) {\n    test(compiler, expected, error, warning, null);\n  }\n",
        "begin_line": 596,
        "end_line": 599,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output\n   * and (optionally) that an expected warning is issued. Or, if an error is\n   * expected, this method just verifies that the error is encountered.\n   *\n   * @param compiler A compiler that has been initialized via\n   *     {@link Compiler#init}\n   * @param expected Expected output, or null if an error is expected\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   ",
        "child_ranges": [
            "(line 598,col 5)-(line 598,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.FoldConstantsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(com.google.javascript.jscomp.Compiler, java.lang.String[], com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType, java.lang.String)",
        "snippet": "  private void test(Compiler compiler, String[] expected,\n                    DiagnosticType error, DiagnosticType warning,\n                    String description) {\n    RecentChange recentChange = new RecentChange();\n    compiler.addChangeHandler(recentChange);\n\n    Node root = compiler.parseInputs();\n    assertTrue(\"Unexpected parse error(s): \" +\n        Joiner.on(\"\\n\").join(compiler.getErrors()), root != null);\n\n    Node externsRoot = root.getFirstChild();\n    Node mainRoot = root.getLastChild();\n\n    // Save the tree for later comparison.\n    Node rootClone = root.cloneTree();\n    Node externsRootClone = rootClone.getFirstChild();\n    Node mainRootClone = rootClone.getLastChild();\n\n    int numRepetitions = getNumRepetitions();\n    ErrorManager[] errorManagers = new ErrorManager[numRepetitions];\n    int aggregateWarningCount = 0;\n    List<JSError> aggregateWarnings = Lists.newArrayList();\n    boolean hasCodeChanged = false;\n\n    assertFalse(\"Code should not change before processing\",\n        recentChange.hasCodeChanged());\n\n    for (int i = 0; i < numRepetitions; ++i) {\n      if (compiler.getErrorCount() == 0) {\n        errorManagers[i] = new BlackHoleErrorManager(compiler);\n\n        // Only run the type checking pass once, if asked.\n        // Running it twice can cause unpredictable behavior because duplicate\n        // objects for the same type are created, and the type system\n        // uses reference equality to compare many types.\n        if (typeCheckEnabled && i == 0) {\n          TypeCheck check = createTypeCheck(compiler, typeCheckLevel);\n          check.processForTesting(externsRoot, mainRoot);\n        }\n\n        // Only run the normalize pass once, if asked.\n        if (normalizeEnabled && i == 0) {\n          Normalize normalize = new Normalize(compiler, false);\n          normalize.process(externsRoot, mainRoot);\n          compiler.setNormalized();\n        }\n\n        if (markNoSideEffects && i == 0) {\n          MarkNoSideEffectCalls mark = new MarkNoSideEffectCalls(compiler);\n          mark.process(externsRoot, mainRoot);\n        }\n\n        recentChange.reset();\n\n        getProcessor(compiler).process(externsRoot, mainRoot);\n        if (checkLineNumbers) {\n          (new LineNumberCheck(compiler)).process(externsRoot, mainRoot);\n        }\n\n        hasCodeChanged = hasCodeChanged || recentChange.hasCodeChanged();\n        aggregateWarningCount += errorManagers[i].getWarningCount();\n        aggregateWarnings.addAll(Lists.newArrayList(compiler.getWarnings()));\n\n        if (normalizeEnabled) {\n          boolean verifyDeclaredConstants = true;\n          new Normalize.VerifyConstants(compiler, verifyDeclaredConstants)\n              .process(externsRoot, mainRoot);\n        }\n      }\n    }\n\n    if (error == null) {\n      assertEquals(\n          \"Unexpected error(s): \" + Joiner.on(\"\\n\").join(compiler.getErrors()),\n          0, compiler.getErrorCount());\n\n      // Verify the symbol table.\n      ErrorManager symbolTableErrorManager =\n          new BlackHoleErrorManager(compiler);\n      Node expectedRoot = parseExpectedJs(expected);\n      expectedRoot.detachFromParent();\n      SymbolTable table = compiler.acquireSymbolTable();\n      table.verify(\n          new Node(Token.BLOCK, externsRoot.cloneTree(), expectedRoot),\n          mainRoot.getParent());\n      table.release();\n\n      JSError[] stErrors = symbolTableErrorManager.getErrors();\n      if (expectedSymbolTableError != null) {\n        assertEquals(\"There should be one error.\", 1, stErrors.length);\n        assertEquals(expectedSymbolTableError, stErrors[0].getType());\n      } else {\n        assertEquals(\"Unexpected symbol table error(s): \" +\n            Joiner.on(\"\\n\").join(stErrors),\n            0, stErrors.length);\n      }\n\n      if (warning == null) {\n        assertEquals(\n            \"Unexpected warning(s): \" + Joiner.on(\"\\n\").join(aggregateWarnings),\n            0, aggregateWarningCount);\n      } else {\n        assertEquals(\"There should be one warning, repeated \" + numRepetitions +\n            \" time(s).\", numRepetitions, aggregateWarningCount);\n        for (int i = 0; i < numRepetitions; ++i) {\n          JSError[] warnings = errorManagers[i].getWarnings();\n          JSError actual = warnings[0];\n          assertEquals(warning, actual.getType());\n\n          // Make sure that source information is always provided.\n          if (!allowSourcelessWarnings) {\n            assertTrue(\"Missing source file name in warning\",\n                actual.sourceName != null && !actual.sourceName.isEmpty());\n            assertTrue(\"Missing line number in warning\",\n                -1 != actual.lineNumber);\n            assertTrue(\"Missing char number in warning\",\n                -1 != actual.getCharno());\n          }\n\n          if (description != null) {\n            assertEquals(description, actual.description);\n          }\n        }\n      }\n\n      if (normalizeEnabled) {\n        Normalize normalize = new Normalize(compiler, false);\n        normalize.process(externsRootClone, mainRootClone);\n      }\n\n      if (mainRootClone.checkTreeEqualsSilent(mainRoot)) {\n        assertFalse(\n            \"compiler.reportCodeChange() was called \" +\n            \"even though nothing changed\",\n            hasCodeChanged);\n      } else {\n        assertTrue(\"compiler.reportCodeChange() should have been called\",\n            hasCodeChanged);\n      }\n\n      if (compareAsTree) {\n        String explanation = expectedRoot.checkTreeEquals(mainRoot);\n        assertNull(\"\\nExpected: \" + compiler.toSource(expectedRoot) +\n            \"\\nResult: \" + compiler.toSource(mainRoot) +\n            \"\\n\" + explanation, explanation);\n      } else if (expected != null) {\n        assertEquals(\n            Joiner.on(\"\").join(expected), compiler.toSource(mainRoot));\n      }\n\n      // Verify normalization is not invalidated.\n      Node normalizeCheckRootClone = root.cloneTree();\n      Node normalizeCheckExternsRootClone = root.getFirstChild();\n      Node normalizeCheckMainRootClone = root.getLastChild();\n      new NodeTypeNormalizer().process(\n          normalizeCheckExternsRootClone, normalizeCheckMainRootClone);\n      String explanation =\n          normalizeCheckMainRootClone.checkTreeEquals(mainRoot);\n      assertNull(\"Node structure normalization invalidated.\\nExpected: \" +\n          compiler.toSource(normalizeCheckMainRootClone) +\n          \"\\nResult: \" + compiler.toSource(mainRoot) +\n          \"\\n\" + explanation, explanation);\n\n      // TODO(johnlenz): enable this for most test cases.\n      // Currently, this invalidates test for while-loops, for-loop\n      // initializers, and other naming.  However, a set of code\n      // (FoldConstants, etc) runs before the Normalize pass, so this can't be\n      // force on everywhere.\n      if (normalizeEnabled) {\n        new Normalize(compiler, true).process(\n            normalizeCheckExternsRootClone, normalizeCheckMainRootClone);\n        explanation =  normalizeCheckMainRootClone.checkTreeEquals(mainRoot);\n        assertNull(\"Normalization invalidated.\\nExpected: \" +\n            compiler.toSource(normalizeCheckMainRootClone) +\n            \"\\nResult: \" + compiler.toSource(mainRoot) +\n            \"\\n\" + explanation, explanation);\n      }\n    } else {\n      String errors = \"\";\n      for (JSError actualError : compiler.getErrors()) {\n        errors += actualError.description + \"\\n\";\n      }\n      assertEquals(\"There should be one error. \" + errors,\n          1, compiler.getErrorCount());\n      assertEquals(errors, error, compiler.getErrors()[0].getType());\n    }\n  }\n",
        "begin_line": 616,
        "end_line": 802,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output\n   * and (optionally) that an expected warning is issued. Or, if an error is\n   * expected, this method just verifies that the error is encountered.\n   *\n   * @param compiler A compiler that has been initialized via\n   *     {@link Compiler#init}\n   * @param expected Expected output, or null if an error is expected\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   * @param description The description of the expected warning,\n   *      or null if no warning is expected or if the warning's description\n   *      should not be examined\n   ",
        "child_ranges": [
            "(line 619,col 5)-(line 619,col 51)",
            "(line 620,col 5)-(line 620,col 44)",
            "(line 622,col 5)-(line 622,col 39)",
            "(line 623,col 5)-(line 624,col 66)",
            "(line 626,col 5)-(line 626,col 44)",
            "(line 627,col 5)-(line 627,col 40)",
            "(line 630,col 5)-(line 630,col 38)",
            "(line 631,col 5)-(line 631,col 54)",
            "(line 632,col 5)-(line 632,col 50)",
            "(line 634,col 5)-(line 634,col 45)",
            "(line 635,col 5)-(line 635,col 68)",
            "(line 636,col 5)-(line 636,col 34)",
            "(line 637,col 5)-(line 637,col 59)",
            "(line 638,col 5)-(line 638,col 35)",
            "(line 640,col 5)-(line 641,col 39)",
            "(line 643,col 5)-(line 685,col 5)",
            "(line 687,col 5)-(line 801,col 5)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.FoldConstantsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.parseExpectedJs(java.lang.String[])",
        "snippet": "  private Node parseExpectedJs(String[] expected) {\n    Compiler compiler = createCompiler();\n    JSSourceFile[] inputs = new JSSourceFile[expected.length];\n    for (int i = 0; i < expected.length; i++) {\n      inputs[i] = JSSourceFile.fromCode(\"expected\" + i, expected[i]);\n    }\n    compiler.init(externsInputs, inputs, getOptions());\n    Node root = compiler.parseInputs();\n    assertTrue(\"Unexpected parse error(s): \" +\n        Joiner.on(\"\\n\").join(compiler.getErrors()), root != null);\n    Node externsRoot = root.getFirstChild();\n    Node mainRoot = externsRoot.getNext();\n    // Only run the normalize pass, if asked.\n    if (normalizeEnabled && !compiler.hasErrors()) {\n      Normalize normalize = new Normalize(compiler, false);\n      normalize.process(externsRoot, mainRoot);\n      compiler.setNormalized();\n    }\n    return mainRoot;\n  }\n",
        "begin_line": 807,
        "end_line": 826,
        "comment": "\n   * Parses expected js inputs and returns the root of the parse tree.\n   ",
        "child_ranges": [
            "(line 808,col 5)-(line 808,col 41)",
            "(line 809,col 5)-(line 809,col 62)",
            "(line 810,col 5)-(line 812,col 5)",
            "(line 813,col 5)-(line 813,col 55)",
            "(line 814,col 5)-(line 814,col 39)",
            "(line 815,col 5)-(line 816,col 66)",
            "(line 817,col 5)-(line 817,col 44)",
            "(line 818,col 5)-(line 818,col 42)",
            "(line 820,col 5)-(line 824,col 5)",
            "(line 825,col 5)-(line 825,col 20)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.FoldConstantsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.parseExpectedJs(java.lang.String)",
        "snippet": "  Node parseExpectedJs(String expected) {\n    return parseExpectedJs(new String[] {expected});\n  }\n",
        "begin_line": 828,
        "end_line": 830,
        "comment": "",
        "child_ranges": [
            "(line 829,col 5)-(line 829,col 52)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.FoldConstantsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.createModuleChain(java.lang.String...)",
        "snippet": "  static JSModule[] createModuleChain(String... inputs) {\n    JSModule[] modules = createModules(inputs);\n    for (int i = 1; i < modules.length; i++) {\n      modules[i].addDependency(modules[i - 1]);\n    }\n    return modules;\n  }\n",
        "begin_line": 836,
        "end_line": 842,
        "comment": "\n   * Generates a list of modules from a list of inputs, such that each module\n   * depends on the module before it.\n   ",
        "child_ranges": [
            "(line 837,col 5)-(line 837,col 47)",
            "(line 838,col 5)-(line 840,col 5)",
            "(line 841,col 5)-(line 841,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.FoldConstantsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.createModuleStar(java.lang.String...)",
        "snippet": "  static JSModule[] createModuleStar(String... inputs) {\n    JSModule[] modules = createModules(inputs);\n    for (int i = 1; i < modules.length; i++) {\n      modules[i].addDependency(modules[0]);\n    }\n    return modules;\n  }\n",
        "begin_line": 848,
        "end_line": 854,
        "comment": "\n   * Generates a list of modules from a list of inputs, such that each module\n   * depends on the first module.\n   ",
        "child_ranges": [
            "(line 849,col 5)-(line 849,col 47)",
            "(line 850,col 5)-(line 852,col 5)",
            "(line 853,col 5)-(line 853,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.FoldConstantsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.createModules(java.lang.String...)",
        "snippet": "  static JSModule[] createModules(String... inputs) {\n    JSModule[] modules = new JSModule[inputs.length];\n    for (int i = 0; i < inputs.length; i++) {\n      JSModule module = modules[i] = new JSModule(\"m\" + i);\n      module.add(JSSourceFile.fromCode(\"i\" + i, inputs[i]));\n    }\n    return modules;\n  }\n",
        "begin_line": 860,
        "end_line": 867,
        "comment": "\n   * Generates a list of modules from a list of inputs. Does not generate any\n   * dependencies between the modules.\n   ",
        "child_ranges": [
            "(line 861,col 5)-(line 861,col 53)",
            "(line 862,col 5)-(line 865,col 5)",
            "(line 866,col 5)-(line 866,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.FoldConstantsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.BlackHoleErrorManager.BlackHoleErrorManager(com.google.javascript.jscomp.Compiler)",
        "snippet": "    private BlackHoleErrorManager(Compiler compiler) {\n      compiler.setErrorManager(this);\n    }\n",
        "begin_line": 870,
        "end_line": 872,
        "comment": "",
        "child_ranges": [
            "(line 871,col 7)-(line 871,col 37)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.FoldConstantsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.BlackHoleErrorManager.println(com.google.javascript.jscomp.CheckLevel, com.google.javascript.jscomp.JSError)",
        "snippet": "    @Override\n    public void println(CheckLevel level, JSError error) {}\n",
        "begin_line": 874,
        "end_line": 875,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.FoldConstantsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.BlackHoleErrorManager.printSummary()",
        "snippet": "    @Override\n    public void printSummary() {}\n",
        "begin_line": 877,
        "end_line": 878,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.FoldConstantsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.createCompiler()",
        "snippet": "  private Compiler createCompiler() {\n    Compiler compiler = new Compiler();\n    return compiler;\n  }\n",
        "begin_line": 881,
        "end_line": 884,
        "comment": "",
        "child_ranges": [
            "(line 882,col 5)-(line 882,col 39)",
            "(line 883,col 5)-(line 883,col 20)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.FoldConstantsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.setExpectedSymbolTableError(com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  protected void setExpectedSymbolTableError(DiagnosticType type) {\n    this.expectedSymbolTableError = type;\n  }\n",
        "begin_line": 886,
        "end_line": 888,
        "comment": "",
        "child_ranges": [
            "(line 887,col 5)-(line 887,col 41)"
        ]
    }
]