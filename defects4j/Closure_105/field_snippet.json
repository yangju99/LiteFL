[
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 1L;",
        "begin_line": 65,
        "end_line": 65,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.LOCAL_BLOCK_PROP",
        "snippet": "    public static final int\n        // Rhino's AST captures data flow. These are the annotations\n        // it used. We've mostly torn them out.\n        LOCAL_BLOCK_PROP  = -3,\n        OBJECT_IDS_PROP   = -2,\n        CATCH_SCOPE_PROP  = -1,\n        LABEL_ID_PROP     =  0,\n\n        TARGET_PROP       =  1,\n        BREAK_PROP        =  2,\n        CONTINUE_PROP     =  3,\n        ENUM_PROP         =  4,\n        FUNCTION_PROP     =  5,\n        TEMP_PROP         =  6,\n        LOCAL_PROP        =  7,\n        CODEOFFSET_PROP   =  8,\n        FIXUPS_PROP       =  9,\n        VARS_PROP         = 10,\n        USES_PROP         = 11,\n        REGEXP_PROP       = 12,\n        CASES_PROP        = 13,\n        DEFAULT_PROP      = 14,\n        CASEARRAY_PROP    = 15,\n        SOURCENAME_PROP   = 16,\n        TYPE_PROP         = 17,\n        SPECIAL_PROP_PROP = 18,\n        LABEL_PROP        = 19,\n        FINALLY_PROP      = 20,\n        LOCALCOUNT_PROP   = 21,\n    /*\n        the following properties are defined and manipulated by the\n        optimizer -\n        TARGETBLOCK_PROP - the block referenced by a branch node\n        VARIABLE_PROP - the variable referenced by a BIND or NAME node\n        LASTUSE_PROP - that variable node is the last reference before\n                        a new def or the end of the block\n        ISNUMBER_PROP - this node generates code on Number children and\n                        delivers a Number result (as opposed to Objects)\n        DIRECTCALL_PROP - this call node should emit code to test the function\n                          object against the known class and call diret if it\n                          matches.\n    */\n\n        TARGETBLOCK_PROP  = 22,\n        VARIABLE_PROP     = 23,\n        LASTUSE_PROP      = 24,\n        ISNUMBER_PROP     = 25,\n        DIRECTCALL_PROP   = 26,\n\n        SPECIALCALL_PROP  = 27,\n        DEBUGSOURCE_PROP  = 28,\n        JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n        VAR_ARGS_NAME     = 29,     // the name node is a variable length\n                                    // argument placeholder. It can never be\n                                    // used in conjunction with JSDOC_INFO_PROP.\n        SKIP_INDEXES_PROP  = 30,    // array of skipped indexes of array literal\n        INCRDECR_PROP      = 31,    // pre or post type of increment/decrement\n        MEMBER_TYPE_PROP   = 32,    // type of element access operation\n        NAME_PROP          = 33,    // property name\n        PARENTHESIZED_PROP = 34,    // expression is parenthesized\n        QUOTED_PROP        = 35,    // set to indicate a quoted object lit key\n        OPT_ARG_NAME       = 36,    // The name node is an optional argument.\n        SYNTHETIC_BLOCK_PROP = 37,  // A synthetic block. Used to make\n                                    // processing simpler, and does not\n                                    // represent a real block in the source.\n        SOURCEFILE_PROP    = 38,    // Contains the path of the source file\n                                    // from which the current node was parsed.\n        EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                    // EMPTY nodes.\n        ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                    // renaming.\n        BRACELESS_TYPE     = 41,    // The type syntax without curly braces.\n        NO_SIDE_EFFECTS_CALL = 42,  // Function or constructor call has no\n                                    // side effects.\n        // Coding convention props\n        IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n        IS_OPTIONAL_PARAM  = 44,    // The parameter is optional.\n        IS_VAR_ARGS_PARAM  = 45,    // The parameter is a var_args.\n        IS_NAMESPACE       = 46,    // The variable creates a namespace.\n        IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                    // probably generated from Java code, and\n                                    // should be resolved to the proper\n                                    // overload if possible.\n        DIRECTIVES         = 48,    // The ES5 directives on this node.\n        DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                    // indirect calls to eval.\n        LAST_PROP          = 49;",
        "begin_line": 67,
        "end_line": 153,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.OBJECT_IDS_PROP",
        "snippet": "    public static final int\n        // Rhino's AST captures data flow. These are the annotations\n        // it used. We've mostly torn them out.\n        LOCAL_BLOCK_PROP  = -3,\n        OBJECT_IDS_PROP   = -2,\n        CATCH_SCOPE_PROP  = -1,\n        LABEL_ID_PROP     =  0,\n\n        TARGET_PROP       =  1,\n        BREAK_PROP        =  2,\n        CONTINUE_PROP     =  3,\n        ENUM_PROP         =  4,\n        FUNCTION_PROP     =  5,\n        TEMP_PROP         =  6,\n        LOCAL_PROP        =  7,\n        CODEOFFSET_PROP   =  8,\n        FIXUPS_PROP       =  9,\n        VARS_PROP         = 10,\n        USES_PROP         = 11,\n        REGEXP_PROP       = 12,\n        CASES_PROP        = 13,\n        DEFAULT_PROP      = 14,\n        CASEARRAY_PROP    = 15,\n        SOURCENAME_PROP   = 16,\n        TYPE_PROP         = 17,\n        SPECIAL_PROP_PROP = 18,\n        LABEL_PROP        = 19,\n        FINALLY_PROP      = 20,\n        LOCALCOUNT_PROP   = 21,\n    /*\n        the following properties are defined and manipulated by the\n        optimizer -\n        TARGETBLOCK_PROP - the block referenced by a branch node\n        VARIABLE_PROP - the variable referenced by a BIND or NAME node\n        LASTUSE_PROP - that variable node is the last reference before\n                        a new def or the end of the block\n        ISNUMBER_PROP - this node generates code on Number children and\n                        delivers a Number result (as opposed to Objects)\n        DIRECTCALL_PROP - this call node should emit code to test the function\n                          object against the known class and call diret if it\n                          matches.\n    */\n\n        TARGETBLOCK_PROP  = 22,\n        VARIABLE_PROP     = 23,\n        LASTUSE_PROP      = 24,\n        ISNUMBER_PROP     = 25,\n        DIRECTCALL_PROP   = 26,\n\n        SPECIALCALL_PROP  = 27,\n        DEBUGSOURCE_PROP  = 28,\n        JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n        VAR_ARGS_NAME     = 29,     // the name node is a variable length\n                                    // argument placeholder. It can never be\n                                    // used in conjunction with JSDOC_INFO_PROP.\n        SKIP_INDEXES_PROP  = 30,    // array of skipped indexes of array literal\n        INCRDECR_PROP      = 31,    // pre or post type of increment/decrement\n        MEMBER_TYPE_PROP   = 32,    // type of element access operation\n        NAME_PROP          = 33,    // property name\n        PARENTHESIZED_PROP = 34,    // expression is parenthesized\n        QUOTED_PROP        = 35,    // set to indicate a quoted object lit key\n        OPT_ARG_NAME       = 36,    // The name node is an optional argument.\n        SYNTHETIC_BLOCK_PROP = 37,  // A synthetic block. Used to make\n                                    // processing simpler, and does not\n                                    // represent a real block in the source.\n        SOURCEFILE_PROP    = 38,    // Contains the path of the source file\n                                    // from which the current node was parsed.\n        EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                    // EMPTY nodes.\n        ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                    // renaming.\n        BRACELESS_TYPE     = 41,    // The type syntax without curly braces.\n        NO_SIDE_EFFECTS_CALL = 42,  // Function or constructor call has no\n                                    // side effects.\n        // Coding convention props\n        IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n        IS_OPTIONAL_PARAM  = 44,    // The parameter is optional.\n        IS_VAR_ARGS_PARAM  = 45,    // The parameter is a var_args.\n        IS_NAMESPACE       = 46,    // The variable creates a namespace.\n        IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                    // probably generated from Java code, and\n                                    // should be resolved to the proper\n                                    // overload if possible.\n        DIRECTIVES         = 48,    // The ES5 directives on this node.\n        DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                    // indirect calls to eval.\n        LAST_PROP          = 49;",
        "begin_line": 67,
        "end_line": 153,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.CATCH_SCOPE_PROP",
        "snippet": "    public static final int\n        // Rhino's AST captures data flow. These are the annotations\n        // it used. We've mostly torn them out.\n        LOCAL_BLOCK_PROP  = -3,\n        OBJECT_IDS_PROP   = -2,\n        CATCH_SCOPE_PROP  = -1,\n        LABEL_ID_PROP     =  0,\n\n        TARGET_PROP       =  1,\n        BREAK_PROP        =  2,\n        CONTINUE_PROP     =  3,\n        ENUM_PROP         =  4,\n        FUNCTION_PROP     =  5,\n        TEMP_PROP         =  6,\n        LOCAL_PROP        =  7,\n        CODEOFFSET_PROP   =  8,\n        FIXUPS_PROP       =  9,\n        VARS_PROP         = 10,\n        USES_PROP         = 11,\n        REGEXP_PROP       = 12,\n        CASES_PROP        = 13,\n        DEFAULT_PROP      = 14,\n        CASEARRAY_PROP    = 15,\n        SOURCENAME_PROP   = 16,\n        TYPE_PROP         = 17,\n        SPECIAL_PROP_PROP = 18,\n        LABEL_PROP        = 19,\n        FINALLY_PROP      = 20,\n        LOCALCOUNT_PROP   = 21,\n    /*\n        the following properties are defined and manipulated by the\n        optimizer -\n        TARGETBLOCK_PROP - the block referenced by a branch node\n        VARIABLE_PROP - the variable referenced by a BIND or NAME node\n        LASTUSE_PROP - that variable node is the last reference before\n                        a new def or the end of the block\n        ISNUMBER_PROP - this node generates code on Number children and\n                        delivers a Number result (as opposed to Objects)\n        DIRECTCALL_PROP - this call node should emit code to test the function\n                          object against the known class and call diret if it\n                          matches.\n    */\n\n        TARGETBLOCK_PROP  = 22,\n        VARIABLE_PROP     = 23,\n        LASTUSE_PROP      = 24,\n        ISNUMBER_PROP     = 25,\n        DIRECTCALL_PROP   = 26,\n\n        SPECIALCALL_PROP  = 27,\n        DEBUGSOURCE_PROP  = 28,\n        JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n        VAR_ARGS_NAME     = 29,     // the name node is a variable length\n                                    // argument placeholder. It can never be\n                                    // used in conjunction with JSDOC_INFO_PROP.\n        SKIP_INDEXES_PROP  = 30,    // array of skipped indexes of array literal\n        INCRDECR_PROP      = 31,    // pre or post type of increment/decrement\n        MEMBER_TYPE_PROP   = 32,    // type of element access operation\n        NAME_PROP          = 33,    // property name\n        PARENTHESIZED_PROP = 34,    // expression is parenthesized\n        QUOTED_PROP        = 35,    // set to indicate a quoted object lit key\n        OPT_ARG_NAME       = 36,    // The name node is an optional argument.\n        SYNTHETIC_BLOCK_PROP = 37,  // A synthetic block. Used to make\n                                    // processing simpler, and does not\n                                    // represent a real block in the source.\n        SOURCEFILE_PROP    = 38,    // Contains the path of the source file\n                                    // from which the current node was parsed.\n        EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                    // EMPTY nodes.\n        ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                    // renaming.\n        BRACELESS_TYPE     = 41,    // The type syntax without curly braces.\n        NO_SIDE_EFFECTS_CALL = 42,  // Function or constructor call has no\n                                    // side effects.\n        // Coding convention props\n        IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n        IS_OPTIONAL_PARAM  = 44,    // The parameter is optional.\n        IS_VAR_ARGS_PARAM  = 45,    // The parameter is a var_args.\n        IS_NAMESPACE       = 46,    // The variable creates a namespace.\n        IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                    // probably generated from Java code, and\n                                    // should be resolved to the proper\n                                    // overload if possible.\n        DIRECTIVES         = 48,    // The ES5 directives on this node.\n        DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                    // indirect calls to eval.\n        LAST_PROP          = 49;",
        "begin_line": 67,
        "end_line": 153,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.LABEL_ID_PROP",
        "snippet": "    public static final int\n        // Rhino's AST captures data flow. These are the annotations\n        // it used. We've mostly torn them out.\n        LOCAL_BLOCK_PROP  = -3,\n        OBJECT_IDS_PROP   = -2,\n        CATCH_SCOPE_PROP  = -1,\n        LABEL_ID_PROP     =  0,\n\n        TARGET_PROP       =  1,\n        BREAK_PROP        =  2,\n        CONTINUE_PROP     =  3,\n        ENUM_PROP         =  4,\n        FUNCTION_PROP     =  5,\n        TEMP_PROP         =  6,\n        LOCAL_PROP        =  7,\n        CODEOFFSET_PROP   =  8,\n        FIXUPS_PROP       =  9,\n        VARS_PROP         = 10,\n        USES_PROP         = 11,\n        REGEXP_PROP       = 12,\n        CASES_PROP        = 13,\n        DEFAULT_PROP      = 14,\n        CASEARRAY_PROP    = 15,\n        SOURCENAME_PROP   = 16,\n        TYPE_PROP         = 17,\n        SPECIAL_PROP_PROP = 18,\n        LABEL_PROP        = 19,\n        FINALLY_PROP      = 20,\n        LOCALCOUNT_PROP   = 21,\n    /*\n        the following properties are defined and manipulated by the\n        optimizer -\n        TARGETBLOCK_PROP - the block referenced by a branch node\n        VARIABLE_PROP - the variable referenced by a BIND or NAME node\n        LASTUSE_PROP - that variable node is the last reference before\n                        a new def or the end of the block\n        ISNUMBER_PROP - this node generates code on Number children and\n                        delivers a Number result (as opposed to Objects)\n        DIRECTCALL_PROP - this call node should emit code to test the function\n                          object against the known class and call diret if it\n                          matches.\n    */\n\n        TARGETBLOCK_PROP  = 22,\n        VARIABLE_PROP     = 23,\n        LASTUSE_PROP      = 24,\n        ISNUMBER_PROP     = 25,\n        DIRECTCALL_PROP   = 26,\n\n        SPECIALCALL_PROP  = 27,\n        DEBUGSOURCE_PROP  = 28,\n        JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n        VAR_ARGS_NAME     = 29,     // the name node is a variable length\n                                    // argument placeholder. It can never be\n                                    // used in conjunction with JSDOC_INFO_PROP.\n        SKIP_INDEXES_PROP  = 30,    // array of skipped indexes of array literal\n        INCRDECR_PROP      = 31,    // pre or post type of increment/decrement\n        MEMBER_TYPE_PROP   = 32,    // type of element access operation\n        NAME_PROP          = 33,    // property name\n        PARENTHESIZED_PROP = 34,    // expression is parenthesized\n        QUOTED_PROP        = 35,    // set to indicate a quoted object lit key\n        OPT_ARG_NAME       = 36,    // The name node is an optional argument.\n        SYNTHETIC_BLOCK_PROP = 37,  // A synthetic block. Used to make\n                                    // processing simpler, and does not\n                                    // represent a real block in the source.\n        SOURCEFILE_PROP    = 38,    // Contains the path of the source file\n                                    // from which the current node was parsed.\n        EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                    // EMPTY nodes.\n        ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                    // renaming.\n        BRACELESS_TYPE     = 41,    // The type syntax without curly braces.\n        NO_SIDE_EFFECTS_CALL = 42,  // Function or constructor call has no\n                                    // side effects.\n        // Coding convention props\n        IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n        IS_OPTIONAL_PARAM  = 44,    // The parameter is optional.\n        IS_VAR_ARGS_PARAM  = 45,    // The parameter is a var_args.\n        IS_NAMESPACE       = 46,    // The variable creates a namespace.\n        IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                    // probably generated from Java code, and\n                                    // should be resolved to the proper\n                                    // overload if possible.\n        DIRECTIVES         = 48,    // The ES5 directives on this node.\n        DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                    // indirect calls to eval.\n        LAST_PROP          = 49;",
        "begin_line": 67,
        "end_line": 153,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.TARGET_PROP",
        "snippet": "    public static final int\n        // Rhino's AST captures data flow. These are the annotations\n        // it used. We've mostly torn them out.\n        LOCAL_BLOCK_PROP  = -3,\n        OBJECT_IDS_PROP   = -2,\n        CATCH_SCOPE_PROP  = -1,\n        LABEL_ID_PROP     =  0,\n\n        TARGET_PROP       =  1,\n        BREAK_PROP        =  2,\n        CONTINUE_PROP     =  3,\n        ENUM_PROP         =  4,\n        FUNCTION_PROP     =  5,\n        TEMP_PROP         =  6,\n        LOCAL_PROP        =  7,\n        CODEOFFSET_PROP   =  8,\n        FIXUPS_PROP       =  9,\n        VARS_PROP         = 10,\n        USES_PROP         = 11,\n        REGEXP_PROP       = 12,\n        CASES_PROP        = 13,\n        DEFAULT_PROP      = 14,\n        CASEARRAY_PROP    = 15,\n        SOURCENAME_PROP   = 16,\n        TYPE_PROP         = 17,\n        SPECIAL_PROP_PROP = 18,\n        LABEL_PROP        = 19,\n        FINALLY_PROP      = 20,\n        LOCALCOUNT_PROP   = 21,\n    /*\n        the following properties are defined and manipulated by the\n        optimizer -\n        TARGETBLOCK_PROP - the block referenced by a branch node\n        VARIABLE_PROP - the variable referenced by a BIND or NAME node\n        LASTUSE_PROP - that variable node is the last reference before\n                        a new def or the end of the block\n        ISNUMBER_PROP - this node generates code on Number children and\n                        delivers a Number result (as opposed to Objects)\n        DIRECTCALL_PROP - this call node should emit code to test the function\n                          object against the known class and call diret if it\n                          matches.\n    */\n\n        TARGETBLOCK_PROP  = 22,\n        VARIABLE_PROP     = 23,\n        LASTUSE_PROP      = 24,\n        ISNUMBER_PROP     = 25,\n        DIRECTCALL_PROP   = 26,\n\n        SPECIALCALL_PROP  = 27,\n        DEBUGSOURCE_PROP  = 28,\n        JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n        VAR_ARGS_NAME     = 29,     // the name node is a variable length\n                                    // argument placeholder. It can never be\n                                    // used in conjunction with JSDOC_INFO_PROP.\n        SKIP_INDEXES_PROP  = 30,    // array of skipped indexes of array literal\n        INCRDECR_PROP      = 31,    // pre or post type of increment/decrement\n        MEMBER_TYPE_PROP   = 32,    // type of element access operation\n        NAME_PROP          = 33,    // property name\n        PARENTHESIZED_PROP = 34,    // expression is parenthesized\n        QUOTED_PROP        = 35,    // set to indicate a quoted object lit key\n        OPT_ARG_NAME       = 36,    // The name node is an optional argument.\n        SYNTHETIC_BLOCK_PROP = 37,  // A synthetic block. Used to make\n                                    // processing simpler, and does not\n                                    // represent a real block in the source.\n        SOURCEFILE_PROP    = 38,    // Contains the path of the source file\n                                    // from which the current node was parsed.\n        EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                    // EMPTY nodes.\n        ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                    // renaming.\n        BRACELESS_TYPE     = 41,    // The type syntax without curly braces.\n        NO_SIDE_EFFECTS_CALL = 42,  // Function or constructor call has no\n                                    // side effects.\n        // Coding convention props\n        IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n        IS_OPTIONAL_PARAM  = 44,    // The parameter is optional.\n        IS_VAR_ARGS_PARAM  = 45,    // The parameter is a var_args.\n        IS_NAMESPACE       = 46,    // The variable creates a namespace.\n        IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                    // probably generated from Java code, and\n                                    // should be resolved to the proper\n                                    // overload if possible.\n        DIRECTIVES         = 48,    // The ES5 directives on this node.\n        DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                    // indirect calls to eval.\n        LAST_PROP          = 49;",
        "begin_line": 67,
        "end_line": 153,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.BREAK_PROP",
        "snippet": "    public static final int\n        // Rhino's AST captures data flow. These are the annotations\n        // it used. We've mostly torn them out.\n        LOCAL_BLOCK_PROP  = -3,\n        OBJECT_IDS_PROP   = -2,\n        CATCH_SCOPE_PROP  = -1,\n        LABEL_ID_PROP     =  0,\n\n        TARGET_PROP       =  1,\n        BREAK_PROP        =  2,\n        CONTINUE_PROP     =  3,\n        ENUM_PROP         =  4,\n        FUNCTION_PROP     =  5,\n        TEMP_PROP         =  6,\n        LOCAL_PROP        =  7,\n        CODEOFFSET_PROP   =  8,\n        FIXUPS_PROP       =  9,\n        VARS_PROP         = 10,\n        USES_PROP         = 11,\n        REGEXP_PROP       = 12,\n        CASES_PROP        = 13,\n        DEFAULT_PROP      = 14,\n        CASEARRAY_PROP    = 15,\n        SOURCENAME_PROP   = 16,\n        TYPE_PROP         = 17,\n        SPECIAL_PROP_PROP = 18,\n        LABEL_PROP        = 19,\n        FINALLY_PROP      = 20,\n        LOCALCOUNT_PROP   = 21,\n    /*\n        the following properties are defined and manipulated by the\n        optimizer -\n        TARGETBLOCK_PROP - the block referenced by a branch node\n        VARIABLE_PROP - the variable referenced by a BIND or NAME node\n        LASTUSE_PROP - that variable node is the last reference before\n                        a new def or the end of the block\n        ISNUMBER_PROP - this node generates code on Number children and\n                        delivers a Number result (as opposed to Objects)\n        DIRECTCALL_PROP - this call node should emit code to test the function\n                          object against the known class and call diret if it\n                          matches.\n    */\n\n        TARGETBLOCK_PROP  = 22,\n        VARIABLE_PROP     = 23,\n        LASTUSE_PROP      = 24,\n        ISNUMBER_PROP     = 25,\n        DIRECTCALL_PROP   = 26,\n\n        SPECIALCALL_PROP  = 27,\n        DEBUGSOURCE_PROP  = 28,\n        JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n        VAR_ARGS_NAME     = 29,     // the name node is a variable length\n                                    // argument placeholder. It can never be\n                                    // used in conjunction with JSDOC_INFO_PROP.\n        SKIP_INDEXES_PROP  = 30,    // array of skipped indexes of array literal\n        INCRDECR_PROP      = 31,    // pre or post type of increment/decrement\n        MEMBER_TYPE_PROP   = 32,    // type of element access operation\n        NAME_PROP          = 33,    // property name\n        PARENTHESIZED_PROP = 34,    // expression is parenthesized\n        QUOTED_PROP        = 35,    // set to indicate a quoted object lit key\n        OPT_ARG_NAME       = 36,    // The name node is an optional argument.\n        SYNTHETIC_BLOCK_PROP = 37,  // A synthetic block. Used to make\n                                    // processing simpler, and does not\n                                    // represent a real block in the source.\n        SOURCEFILE_PROP    = 38,    // Contains the path of the source file\n                                    // from which the current node was parsed.\n        EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                    // EMPTY nodes.\n        ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                    // renaming.\n        BRACELESS_TYPE     = 41,    // The type syntax without curly braces.\n        NO_SIDE_EFFECTS_CALL = 42,  // Function or constructor call has no\n                                    // side effects.\n        // Coding convention props\n        IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n        IS_OPTIONAL_PARAM  = 44,    // The parameter is optional.\n        IS_VAR_ARGS_PARAM  = 45,    // The parameter is a var_args.\n        IS_NAMESPACE       = 46,    // The variable creates a namespace.\n        IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                    // probably generated from Java code, and\n                                    // should be resolved to the proper\n                                    // overload if possible.\n        DIRECTIVES         = 48,    // The ES5 directives on this node.\n        DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                    // indirect calls to eval.\n        LAST_PROP          = 49;",
        "begin_line": 67,
        "end_line": 153,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.CONTINUE_PROP",
        "snippet": "    public static final int\n        // Rhino's AST captures data flow. These are the annotations\n        // it used. We've mostly torn them out.\n        LOCAL_BLOCK_PROP  = -3,\n        OBJECT_IDS_PROP   = -2,\n        CATCH_SCOPE_PROP  = -1,\n        LABEL_ID_PROP     =  0,\n\n        TARGET_PROP       =  1,\n        BREAK_PROP        =  2,\n        CONTINUE_PROP     =  3,\n        ENUM_PROP         =  4,\n        FUNCTION_PROP     =  5,\n        TEMP_PROP         =  6,\n        LOCAL_PROP        =  7,\n        CODEOFFSET_PROP   =  8,\n        FIXUPS_PROP       =  9,\n        VARS_PROP         = 10,\n        USES_PROP         = 11,\n        REGEXP_PROP       = 12,\n        CASES_PROP        = 13,\n        DEFAULT_PROP      = 14,\n        CASEARRAY_PROP    = 15,\n        SOURCENAME_PROP   = 16,\n        TYPE_PROP         = 17,\n        SPECIAL_PROP_PROP = 18,\n        LABEL_PROP        = 19,\n        FINALLY_PROP      = 20,\n        LOCALCOUNT_PROP   = 21,\n    /*\n        the following properties are defined and manipulated by the\n        optimizer -\n        TARGETBLOCK_PROP - the block referenced by a branch node\n        VARIABLE_PROP - the variable referenced by a BIND or NAME node\n        LASTUSE_PROP - that variable node is the last reference before\n                        a new def or the end of the block\n        ISNUMBER_PROP - this node generates code on Number children and\n                        delivers a Number result (as opposed to Objects)\n        DIRECTCALL_PROP - this call node should emit code to test the function\n                          object against the known class and call diret if it\n                          matches.\n    */\n\n        TARGETBLOCK_PROP  = 22,\n        VARIABLE_PROP     = 23,\n        LASTUSE_PROP      = 24,\n        ISNUMBER_PROP     = 25,\n        DIRECTCALL_PROP   = 26,\n\n        SPECIALCALL_PROP  = 27,\n        DEBUGSOURCE_PROP  = 28,\n        JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n        VAR_ARGS_NAME     = 29,     // the name node is a variable length\n                                    // argument placeholder. It can never be\n                                    // used in conjunction with JSDOC_INFO_PROP.\n        SKIP_INDEXES_PROP  = 30,    // array of skipped indexes of array literal\n        INCRDECR_PROP      = 31,    // pre or post type of increment/decrement\n        MEMBER_TYPE_PROP   = 32,    // type of element access operation\n        NAME_PROP          = 33,    // property name\n        PARENTHESIZED_PROP = 34,    // expression is parenthesized\n        QUOTED_PROP        = 35,    // set to indicate a quoted object lit key\n        OPT_ARG_NAME       = 36,    // The name node is an optional argument.\n        SYNTHETIC_BLOCK_PROP = 37,  // A synthetic block. Used to make\n                                    // processing simpler, and does not\n                                    // represent a real block in the source.\n        SOURCEFILE_PROP    = 38,    // Contains the path of the source file\n                                    // from which the current node was parsed.\n        EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                    // EMPTY nodes.\n        ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                    // renaming.\n        BRACELESS_TYPE     = 41,    // The type syntax without curly braces.\n        NO_SIDE_EFFECTS_CALL = 42,  // Function or constructor call has no\n                                    // side effects.\n        // Coding convention props\n        IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n        IS_OPTIONAL_PARAM  = 44,    // The parameter is optional.\n        IS_VAR_ARGS_PARAM  = 45,    // The parameter is a var_args.\n        IS_NAMESPACE       = 46,    // The variable creates a namespace.\n        IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                    // probably generated from Java code, and\n                                    // should be resolved to the proper\n                                    // overload if possible.\n        DIRECTIVES         = 48,    // The ES5 directives on this node.\n        DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                    // indirect calls to eval.\n        LAST_PROP          = 49;",
        "begin_line": 67,
        "end_line": 153,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.ENUM_PROP",
        "snippet": "    public static final int\n        // Rhino's AST captures data flow. These are the annotations\n        // it used. We've mostly torn them out.\n        LOCAL_BLOCK_PROP  = -3,\n        OBJECT_IDS_PROP   = -2,\n        CATCH_SCOPE_PROP  = -1,\n        LABEL_ID_PROP     =  0,\n\n        TARGET_PROP       =  1,\n        BREAK_PROP        =  2,\n        CONTINUE_PROP     =  3,\n        ENUM_PROP         =  4,\n        FUNCTION_PROP     =  5,\n        TEMP_PROP         =  6,\n        LOCAL_PROP        =  7,\n        CODEOFFSET_PROP   =  8,\n        FIXUPS_PROP       =  9,\n        VARS_PROP         = 10,\n        USES_PROP         = 11,\n        REGEXP_PROP       = 12,\n        CASES_PROP        = 13,\n        DEFAULT_PROP      = 14,\n        CASEARRAY_PROP    = 15,\n        SOURCENAME_PROP   = 16,\n        TYPE_PROP         = 17,\n        SPECIAL_PROP_PROP = 18,\n        LABEL_PROP        = 19,\n        FINALLY_PROP      = 20,\n        LOCALCOUNT_PROP   = 21,\n    /*\n        the following properties are defined and manipulated by the\n        optimizer -\n        TARGETBLOCK_PROP - the block referenced by a branch node\n        VARIABLE_PROP - the variable referenced by a BIND or NAME node\n        LASTUSE_PROP - that variable node is the last reference before\n                        a new def or the end of the block\n        ISNUMBER_PROP - this node generates code on Number children and\n                        delivers a Number result (as opposed to Objects)\n        DIRECTCALL_PROP - this call node should emit code to test the function\n                          object against the known class and call diret if it\n                          matches.\n    */\n\n        TARGETBLOCK_PROP  = 22,\n        VARIABLE_PROP     = 23,\n        LASTUSE_PROP      = 24,\n        ISNUMBER_PROP     = 25,\n        DIRECTCALL_PROP   = 26,\n\n        SPECIALCALL_PROP  = 27,\n        DEBUGSOURCE_PROP  = 28,\n        JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n        VAR_ARGS_NAME     = 29,     // the name node is a variable length\n                                    // argument placeholder. It can never be\n                                    // used in conjunction with JSDOC_INFO_PROP.\n        SKIP_INDEXES_PROP  = 30,    // array of skipped indexes of array literal\n        INCRDECR_PROP      = 31,    // pre or post type of increment/decrement\n        MEMBER_TYPE_PROP   = 32,    // type of element access operation\n        NAME_PROP          = 33,    // property name\n        PARENTHESIZED_PROP = 34,    // expression is parenthesized\n        QUOTED_PROP        = 35,    // set to indicate a quoted object lit key\n        OPT_ARG_NAME       = 36,    // The name node is an optional argument.\n        SYNTHETIC_BLOCK_PROP = 37,  // A synthetic block. Used to make\n                                    // processing simpler, and does not\n                                    // represent a real block in the source.\n        SOURCEFILE_PROP    = 38,    // Contains the path of the source file\n                                    // from which the current node was parsed.\n        EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                    // EMPTY nodes.\n        ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                    // renaming.\n        BRACELESS_TYPE     = 41,    // The type syntax without curly braces.\n        NO_SIDE_EFFECTS_CALL = 42,  // Function or constructor call has no\n                                    // side effects.\n        // Coding convention props\n        IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n        IS_OPTIONAL_PARAM  = 44,    // The parameter is optional.\n        IS_VAR_ARGS_PARAM  = 45,    // The parameter is a var_args.\n        IS_NAMESPACE       = 46,    // The variable creates a namespace.\n        IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                    // probably generated from Java code, and\n                                    // should be resolved to the proper\n                                    // overload if possible.\n        DIRECTIVES         = 48,    // The ES5 directives on this node.\n        DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                    // indirect calls to eval.\n        LAST_PROP          = 49;",
        "begin_line": 67,
        "end_line": 153,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.FUNCTION_PROP",
        "snippet": "    public static final int\n        // Rhino's AST captures data flow. These are the annotations\n        // it used. We've mostly torn them out.\n        LOCAL_BLOCK_PROP  = -3,\n        OBJECT_IDS_PROP   = -2,\n        CATCH_SCOPE_PROP  = -1,\n        LABEL_ID_PROP     =  0,\n\n        TARGET_PROP       =  1,\n        BREAK_PROP        =  2,\n        CONTINUE_PROP     =  3,\n        ENUM_PROP         =  4,\n        FUNCTION_PROP     =  5,\n        TEMP_PROP         =  6,\n        LOCAL_PROP        =  7,\n        CODEOFFSET_PROP   =  8,\n        FIXUPS_PROP       =  9,\n        VARS_PROP         = 10,\n        USES_PROP         = 11,\n        REGEXP_PROP       = 12,\n        CASES_PROP        = 13,\n        DEFAULT_PROP      = 14,\n        CASEARRAY_PROP    = 15,\n        SOURCENAME_PROP   = 16,\n        TYPE_PROP         = 17,\n        SPECIAL_PROP_PROP = 18,\n        LABEL_PROP        = 19,\n        FINALLY_PROP      = 20,\n        LOCALCOUNT_PROP   = 21,\n    /*\n        the following properties are defined and manipulated by the\n        optimizer -\n        TARGETBLOCK_PROP - the block referenced by a branch node\n        VARIABLE_PROP - the variable referenced by a BIND or NAME node\n        LASTUSE_PROP - that variable node is the last reference before\n                        a new def or the end of the block\n        ISNUMBER_PROP - this node generates code on Number children and\n                        delivers a Number result (as opposed to Objects)\n        DIRECTCALL_PROP - this call node should emit code to test the function\n                          object against the known class and call diret if it\n                          matches.\n    */\n\n        TARGETBLOCK_PROP  = 22,\n        VARIABLE_PROP     = 23,\n        LASTUSE_PROP      = 24,\n        ISNUMBER_PROP     = 25,\n        DIRECTCALL_PROP   = 26,\n\n        SPECIALCALL_PROP  = 27,\n        DEBUGSOURCE_PROP  = 28,\n        JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n        VAR_ARGS_NAME     = 29,     // the name node is a variable length\n                                    // argument placeholder. It can never be\n                                    // used in conjunction with JSDOC_INFO_PROP.\n        SKIP_INDEXES_PROP  = 30,    // array of skipped indexes of array literal\n        INCRDECR_PROP      = 31,    // pre or post type of increment/decrement\n        MEMBER_TYPE_PROP   = 32,    // type of element access operation\n        NAME_PROP          = 33,    // property name\n        PARENTHESIZED_PROP = 34,    // expression is parenthesized\n        QUOTED_PROP        = 35,    // set to indicate a quoted object lit key\n        OPT_ARG_NAME       = 36,    // The name node is an optional argument.\n        SYNTHETIC_BLOCK_PROP = 37,  // A synthetic block. Used to make\n                                    // processing simpler, and does not\n                                    // represent a real block in the source.\n        SOURCEFILE_PROP    = 38,    // Contains the path of the source file\n                                    // from which the current node was parsed.\n        EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                    // EMPTY nodes.\n        ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                    // renaming.\n        BRACELESS_TYPE     = 41,    // The type syntax without curly braces.\n        NO_SIDE_EFFECTS_CALL = 42,  // Function or constructor call has no\n                                    // side effects.\n        // Coding convention props\n        IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n        IS_OPTIONAL_PARAM  = 44,    // The parameter is optional.\n        IS_VAR_ARGS_PARAM  = 45,    // The parameter is a var_args.\n        IS_NAMESPACE       = 46,    // The variable creates a namespace.\n        IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                    // probably generated from Java code, and\n                                    // should be resolved to the proper\n                                    // overload if possible.\n        DIRECTIVES         = 48,    // The ES5 directives on this node.\n        DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                    // indirect calls to eval.\n        LAST_PROP          = 49;",
        "begin_line": 67,
        "end_line": 153,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.TEMP_PROP",
        "snippet": "    public static final int\n        // Rhino's AST captures data flow. These are the annotations\n        // it used. We've mostly torn them out.\n        LOCAL_BLOCK_PROP  = -3,\n        OBJECT_IDS_PROP   = -2,\n        CATCH_SCOPE_PROP  = -1,\n        LABEL_ID_PROP     =  0,\n\n        TARGET_PROP       =  1,\n        BREAK_PROP        =  2,\n        CONTINUE_PROP     =  3,\n        ENUM_PROP         =  4,\n        FUNCTION_PROP     =  5,\n        TEMP_PROP         =  6,\n        LOCAL_PROP        =  7,\n        CODEOFFSET_PROP   =  8,\n        FIXUPS_PROP       =  9,\n        VARS_PROP         = 10,\n        USES_PROP         = 11,\n        REGEXP_PROP       = 12,\n        CASES_PROP        = 13,\n        DEFAULT_PROP      = 14,\n        CASEARRAY_PROP    = 15,\n        SOURCENAME_PROP   = 16,\n        TYPE_PROP         = 17,\n        SPECIAL_PROP_PROP = 18,\n        LABEL_PROP        = 19,\n        FINALLY_PROP      = 20,\n        LOCALCOUNT_PROP   = 21,\n    /*\n        the following properties are defined and manipulated by the\n        optimizer -\n        TARGETBLOCK_PROP - the block referenced by a branch node\n        VARIABLE_PROP - the variable referenced by a BIND or NAME node\n        LASTUSE_PROP - that variable node is the last reference before\n                        a new def or the end of the block\n        ISNUMBER_PROP - this node generates code on Number children and\n                        delivers a Number result (as opposed to Objects)\n        DIRECTCALL_PROP - this call node should emit code to test the function\n                          object against the known class and call diret if it\n                          matches.\n    */\n\n        TARGETBLOCK_PROP  = 22,\n        VARIABLE_PROP     = 23,\n        LASTUSE_PROP      = 24,\n        ISNUMBER_PROP     = 25,\n        DIRECTCALL_PROP   = 26,\n\n        SPECIALCALL_PROP  = 27,\n        DEBUGSOURCE_PROP  = 28,\n        JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n        VAR_ARGS_NAME     = 29,     // the name node is a variable length\n                                    // argument placeholder. It can never be\n                                    // used in conjunction with JSDOC_INFO_PROP.\n        SKIP_INDEXES_PROP  = 30,    // array of skipped indexes of array literal\n        INCRDECR_PROP      = 31,    // pre or post type of increment/decrement\n        MEMBER_TYPE_PROP   = 32,    // type of element access operation\n        NAME_PROP          = 33,    // property name\n        PARENTHESIZED_PROP = 34,    // expression is parenthesized\n        QUOTED_PROP        = 35,    // set to indicate a quoted object lit key\n        OPT_ARG_NAME       = 36,    // The name node is an optional argument.\n        SYNTHETIC_BLOCK_PROP = 37,  // A synthetic block. Used to make\n                                    // processing simpler, and does not\n                                    // represent a real block in the source.\n        SOURCEFILE_PROP    = 38,    // Contains the path of the source file\n                                    // from which the current node was parsed.\n        EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                    // EMPTY nodes.\n        ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                    // renaming.\n        BRACELESS_TYPE     = 41,    // The type syntax without curly braces.\n        NO_SIDE_EFFECTS_CALL = 42,  // Function or constructor call has no\n                                    // side effects.\n        // Coding convention props\n        IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n        IS_OPTIONAL_PARAM  = 44,    // The parameter is optional.\n        IS_VAR_ARGS_PARAM  = 45,    // The parameter is a var_args.\n        IS_NAMESPACE       = 46,    // The variable creates a namespace.\n        IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                    // probably generated from Java code, and\n                                    // should be resolved to the proper\n                                    // overload if possible.\n        DIRECTIVES         = 48,    // The ES5 directives on this node.\n        DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                    // indirect calls to eval.\n        LAST_PROP          = 49;",
        "begin_line": 67,
        "end_line": 153,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.LOCAL_PROP",
        "snippet": "    public static final int\n        // Rhino's AST captures data flow. These are the annotations\n        // it used. We've mostly torn them out.\n        LOCAL_BLOCK_PROP  = -3,\n        OBJECT_IDS_PROP   = -2,\n        CATCH_SCOPE_PROP  = -1,\n        LABEL_ID_PROP     =  0,\n\n        TARGET_PROP       =  1,\n        BREAK_PROP        =  2,\n        CONTINUE_PROP     =  3,\n        ENUM_PROP         =  4,\n        FUNCTION_PROP     =  5,\n        TEMP_PROP         =  6,\n        LOCAL_PROP        =  7,\n        CODEOFFSET_PROP   =  8,\n        FIXUPS_PROP       =  9,\n        VARS_PROP         = 10,\n        USES_PROP         = 11,\n        REGEXP_PROP       = 12,\n        CASES_PROP        = 13,\n        DEFAULT_PROP      = 14,\n        CASEARRAY_PROP    = 15,\n        SOURCENAME_PROP   = 16,\n        TYPE_PROP         = 17,\n        SPECIAL_PROP_PROP = 18,\n        LABEL_PROP        = 19,\n        FINALLY_PROP      = 20,\n        LOCALCOUNT_PROP   = 21,\n    /*\n        the following properties are defined and manipulated by the\n        optimizer -\n        TARGETBLOCK_PROP - the block referenced by a branch node\n        VARIABLE_PROP - the variable referenced by a BIND or NAME node\n        LASTUSE_PROP - that variable node is the last reference before\n                        a new def or the end of the block\n        ISNUMBER_PROP - this node generates code on Number children and\n                        delivers a Number result (as opposed to Objects)\n        DIRECTCALL_PROP - this call node should emit code to test the function\n                          object against the known class and call diret if it\n                          matches.\n    */\n\n        TARGETBLOCK_PROP  = 22,\n        VARIABLE_PROP     = 23,\n        LASTUSE_PROP      = 24,\n        ISNUMBER_PROP     = 25,\n        DIRECTCALL_PROP   = 26,\n\n        SPECIALCALL_PROP  = 27,\n        DEBUGSOURCE_PROP  = 28,\n        JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n        VAR_ARGS_NAME     = 29,     // the name node is a variable length\n                                    // argument placeholder. It can never be\n                                    // used in conjunction with JSDOC_INFO_PROP.\n        SKIP_INDEXES_PROP  = 30,    // array of skipped indexes of array literal\n        INCRDECR_PROP      = 31,    // pre or post type of increment/decrement\n        MEMBER_TYPE_PROP   = 32,    // type of element access operation\n        NAME_PROP          = 33,    // property name\n        PARENTHESIZED_PROP = 34,    // expression is parenthesized\n        QUOTED_PROP        = 35,    // set to indicate a quoted object lit key\n        OPT_ARG_NAME       = 36,    // The name node is an optional argument.\n        SYNTHETIC_BLOCK_PROP = 37,  // A synthetic block. Used to make\n                                    // processing simpler, and does not\n                                    // represent a real block in the source.\n        SOURCEFILE_PROP    = 38,    // Contains the path of the source file\n                                    // from which the current node was parsed.\n        EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                    // EMPTY nodes.\n        ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                    // renaming.\n        BRACELESS_TYPE     = 41,    // The type syntax without curly braces.\n        NO_SIDE_EFFECTS_CALL = 42,  // Function or constructor call has no\n                                    // side effects.\n        // Coding convention props\n        IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n        IS_OPTIONAL_PARAM  = 44,    // The parameter is optional.\n        IS_VAR_ARGS_PARAM  = 45,    // The parameter is a var_args.\n        IS_NAMESPACE       = 46,    // The variable creates a namespace.\n        IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                    // probably generated from Java code, and\n                                    // should be resolved to the proper\n                                    // overload if possible.\n        DIRECTIVES         = 48,    // The ES5 directives on this node.\n        DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                    // indirect calls to eval.\n        LAST_PROP          = 49;",
        "begin_line": 67,
        "end_line": 153,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.CODEOFFSET_PROP",
        "snippet": "    public static final int\n        // Rhino's AST captures data flow. These are the annotations\n        // it used. We've mostly torn them out.\n        LOCAL_BLOCK_PROP  = -3,\n        OBJECT_IDS_PROP   = -2,\n        CATCH_SCOPE_PROP  = -1,\n        LABEL_ID_PROP     =  0,\n\n        TARGET_PROP       =  1,\n        BREAK_PROP        =  2,\n        CONTINUE_PROP     =  3,\n        ENUM_PROP         =  4,\n        FUNCTION_PROP     =  5,\n        TEMP_PROP         =  6,\n        LOCAL_PROP        =  7,\n        CODEOFFSET_PROP   =  8,\n        FIXUPS_PROP       =  9,\n        VARS_PROP         = 10,\n        USES_PROP         = 11,\n        REGEXP_PROP       = 12,\n        CASES_PROP        = 13,\n        DEFAULT_PROP      = 14,\n        CASEARRAY_PROP    = 15,\n        SOURCENAME_PROP   = 16,\n        TYPE_PROP         = 17,\n        SPECIAL_PROP_PROP = 18,\n        LABEL_PROP        = 19,\n        FINALLY_PROP      = 20,\n        LOCALCOUNT_PROP   = 21,\n    /*\n        the following properties are defined and manipulated by the\n        optimizer -\n        TARGETBLOCK_PROP - the block referenced by a branch node\n        VARIABLE_PROP - the variable referenced by a BIND or NAME node\n        LASTUSE_PROP - that variable node is the last reference before\n                        a new def or the end of the block\n        ISNUMBER_PROP - this node generates code on Number children and\n                        delivers a Number result (as opposed to Objects)\n        DIRECTCALL_PROP - this call node should emit code to test the function\n                          object against the known class and call diret if it\n                          matches.\n    */\n\n        TARGETBLOCK_PROP  = 22,\n        VARIABLE_PROP     = 23,\n        LASTUSE_PROP      = 24,\n        ISNUMBER_PROP     = 25,\n        DIRECTCALL_PROP   = 26,\n\n        SPECIALCALL_PROP  = 27,\n        DEBUGSOURCE_PROP  = 28,\n        JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n        VAR_ARGS_NAME     = 29,     // the name node is a variable length\n                                    // argument placeholder. It can never be\n                                    // used in conjunction with JSDOC_INFO_PROP.\n        SKIP_INDEXES_PROP  = 30,    // array of skipped indexes of array literal\n        INCRDECR_PROP      = 31,    // pre or post type of increment/decrement\n        MEMBER_TYPE_PROP   = 32,    // type of element access operation\n        NAME_PROP          = 33,    // property name\n        PARENTHESIZED_PROP = 34,    // expression is parenthesized\n        QUOTED_PROP        = 35,    // set to indicate a quoted object lit key\n        OPT_ARG_NAME       = 36,    // The name node is an optional argument.\n        SYNTHETIC_BLOCK_PROP = 37,  // A synthetic block. Used to make\n                                    // processing simpler, and does not\n                                    // represent a real block in the source.\n        SOURCEFILE_PROP    = 38,    // Contains the path of the source file\n                                    // from which the current node was parsed.\n        EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                    // EMPTY nodes.\n        ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                    // renaming.\n        BRACELESS_TYPE     = 41,    // The type syntax without curly braces.\n        NO_SIDE_EFFECTS_CALL = 42,  // Function or constructor call has no\n                                    // side effects.\n        // Coding convention props\n        IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n        IS_OPTIONAL_PARAM  = 44,    // The parameter is optional.\n        IS_VAR_ARGS_PARAM  = 45,    // The parameter is a var_args.\n        IS_NAMESPACE       = 46,    // The variable creates a namespace.\n        IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                    // probably generated from Java code, and\n                                    // should be resolved to the proper\n                                    // overload if possible.\n        DIRECTIVES         = 48,    // The ES5 directives on this node.\n        DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                    // indirect calls to eval.\n        LAST_PROP          = 49;",
        "begin_line": 67,
        "end_line": 153,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.FIXUPS_PROP",
        "snippet": "    public static final int\n        // Rhino's AST captures data flow. These are the annotations\n        // it used. We've mostly torn them out.\n        LOCAL_BLOCK_PROP  = -3,\n        OBJECT_IDS_PROP   = -2,\n        CATCH_SCOPE_PROP  = -1,\n        LABEL_ID_PROP     =  0,\n\n        TARGET_PROP       =  1,\n        BREAK_PROP        =  2,\n        CONTINUE_PROP     =  3,\n        ENUM_PROP         =  4,\n        FUNCTION_PROP     =  5,\n        TEMP_PROP         =  6,\n        LOCAL_PROP        =  7,\n        CODEOFFSET_PROP   =  8,\n        FIXUPS_PROP       =  9,\n        VARS_PROP         = 10,\n        USES_PROP         = 11,\n        REGEXP_PROP       = 12,\n        CASES_PROP        = 13,\n        DEFAULT_PROP      = 14,\n        CASEARRAY_PROP    = 15,\n        SOURCENAME_PROP   = 16,\n        TYPE_PROP         = 17,\n        SPECIAL_PROP_PROP = 18,\n        LABEL_PROP        = 19,\n        FINALLY_PROP      = 20,\n        LOCALCOUNT_PROP   = 21,\n    /*\n        the following properties are defined and manipulated by the\n        optimizer -\n        TARGETBLOCK_PROP - the block referenced by a branch node\n        VARIABLE_PROP - the variable referenced by a BIND or NAME node\n        LASTUSE_PROP - that variable node is the last reference before\n                        a new def or the end of the block\n        ISNUMBER_PROP - this node generates code on Number children and\n                        delivers a Number result (as opposed to Objects)\n        DIRECTCALL_PROP - this call node should emit code to test the function\n                          object against the known class and call diret if it\n                          matches.\n    */\n\n        TARGETBLOCK_PROP  = 22,\n        VARIABLE_PROP     = 23,\n        LASTUSE_PROP      = 24,\n        ISNUMBER_PROP     = 25,\n        DIRECTCALL_PROP   = 26,\n\n        SPECIALCALL_PROP  = 27,\n        DEBUGSOURCE_PROP  = 28,\n        JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n        VAR_ARGS_NAME     = 29,     // the name node is a variable length\n                                    // argument placeholder. It can never be\n                                    // used in conjunction with JSDOC_INFO_PROP.\n        SKIP_INDEXES_PROP  = 30,    // array of skipped indexes of array literal\n        INCRDECR_PROP      = 31,    // pre or post type of increment/decrement\n        MEMBER_TYPE_PROP   = 32,    // type of element access operation\n        NAME_PROP          = 33,    // property name\n        PARENTHESIZED_PROP = 34,    // expression is parenthesized\n        QUOTED_PROP        = 35,    // set to indicate a quoted object lit key\n        OPT_ARG_NAME       = 36,    // The name node is an optional argument.\n        SYNTHETIC_BLOCK_PROP = 37,  // A synthetic block. Used to make\n                                    // processing simpler, and does not\n                                    // represent a real block in the source.\n        SOURCEFILE_PROP    = 38,    // Contains the path of the source file\n                                    // from which the current node was parsed.\n        EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                    // EMPTY nodes.\n        ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                    // renaming.\n        BRACELESS_TYPE     = 41,    // The type syntax without curly braces.\n        NO_SIDE_EFFECTS_CALL = 42,  // Function or constructor call has no\n                                    // side effects.\n        // Coding convention props\n        IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n        IS_OPTIONAL_PARAM  = 44,    // The parameter is optional.\n        IS_VAR_ARGS_PARAM  = 45,    // The parameter is a var_args.\n        IS_NAMESPACE       = 46,    // The variable creates a namespace.\n        IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                    // probably generated from Java code, and\n                                    // should be resolved to the proper\n                                    // overload if possible.\n        DIRECTIVES         = 48,    // The ES5 directives on this node.\n        DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                    // indirect calls to eval.\n        LAST_PROP          = 49;",
        "begin_line": 67,
        "end_line": 153,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.VARS_PROP",
        "snippet": "    public static final int\n        // Rhino's AST captures data flow. These are the annotations\n        // it used. We've mostly torn them out.\n        LOCAL_BLOCK_PROP  = -3,\n        OBJECT_IDS_PROP   = -2,\n        CATCH_SCOPE_PROP  = -1,\n        LABEL_ID_PROP     =  0,\n\n        TARGET_PROP       =  1,\n        BREAK_PROP        =  2,\n        CONTINUE_PROP     =  3,\n        ENUM_PROP         =  4,\n        FUNCTION_PROP     =  5,\n        TEMP_PROP         =  6,\n        LOCAL_PROP        =  7,\n        CODEOFFSET_PROP   =  8,\n        FIXUPS_PROP       =  9,\n        VARS_PROP         = 10,\n        USES_PROP         = 11,\n        REGEXP_PROP       = 12,\n        CASES_PROP        = 13,\n        DEFAULT_PROP      = 14,\n        CASEARRAY_PROP    = 15,\n        SOURCENAME_PROP   = 16,\n        TYPE_PROP         = 17,\n        SPECIAL_PROP_PROP = 18,\n        LABEL_PROP        = 19,\n        FINALLY_PROP      = 20,\n        LOCALCOUNT_PROP   = 21,\n    /*\n        the following properties are defined and manipulated by the\n        optimizer -\n        TARGETBLOCK_PROP - the block referenced by a branch node\n        VARIABLE_PROP - the variable referenced by a BIND or NAME node\n        LASTUSE_PROP - that variable node is the last reference before\n                        a new def or the end of the block\n        ISNUMBER_PROP - this node generates code on Number children and\n                        delivers a Number result (as opposed to Objects)\n        DIRECTCALL_PROP - this call node should emit code to test the function\n                          object against the known class and call diret if it\n                          matches.\n    */\n\n        TARGETBLOCK_PROP  = 22,\n        VARIABLE_PROP     = 23,\n        LASTUSE_PROP      = 24,\n        ISNUMBER_PROP     = 25,\n        DIRECTCALL_PROP   = 26,\n\n        SPECIALCALL_PROP  = 27,\n        DEBUGSOURCE_PROP  = 28,\n        JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n        VAR_ARGS_NAME     = 29,     // the name node is a variable length\n                                    // argument placeholder. It can never be\n                                    // used in conjunction with JSDOC_INFO_PROP.\n        SKIP_INDEXES_PROP  = 30,    // array of skipped indexes of array literal\n        INCRDECR_PROP      = 31,    // pre or post type of increment/decrement\n        MEMBER_TYPE_PROP   = 32,    // type of element access operation\n        NAME_PROP          = 33,    // property name\n        PARENTHESIZED_PROP = 34,    // expression is parenthesized\n        QUOTED_PROP        = 35,    // set to indicate a quoted object lit key\n        OPT_ARG_NAME       = 36,    // The name node is an optional argument.\n        SYNTHETIC_BLOCK_PROP = 37,  // A synthetic block. Used to make\n                                    // processing simpler, and does not\n                                    // represent a real block in the source.\n        SOURCEFILE_PROP    = 38,    // Contains the path of the source file\n                                    // from which the current node was parsed.\n        EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                    // EMPTY nodes.\n        ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                    // renaming.\n        BRACELESS_TYPE     = 41,    // The type syntax without curly braces.\n        NO_SIDE_EFFECTS_CALL = 42,  // Function or constructor call has no\n                                    // side effects.\n        // Coding convention props\n        IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n        IS_OPTIONAL_PARAM  = 44,    // The parameter is optional.\n        IS_VAR_ARGS_PARAM  = 45,    // The parameter is a var_args.\n        IS_NAMESPACE       = 46,    // The variable creates a namespace.\n        IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                    // probably generated from Java code, and\n                                    // should be resolved to the proper\n                                    // overload if possible.\n        DIRECTIVES         = 48,    // The ES5 directives on this node.\n        DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                    // indirect calls to eval.\n        LAST_PROP          = 49;",
        "begin_line": 67,
        "end_line": 153,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.USES_PROP",
        "snippet": "    public static final int\n        // Rhino's AST captures data flow. These are the annotations\n        // it used. We've mostly torn them out.\n        LOCAL_BLOCK_PROP  = -3,\n        OBJECT_IDS_PROP   = -2,\n        CATCH_SCOPE_PROP  = -1,\n        LABEL_ID_PROP     =  0,\n\n        TARGET_PROP       =  1,\n        BREAK_PROP        =  2,\n        CONTINUE_PROP     =  3,\n        ENUM_PROP         =  4,\n        FUNCTION_PROP     =  5,\n        TEMP_PROP         =  6,\n        LOCAL_PROP        =  7,\n        CODEOFFSET_PROP   =  8,\n        FIXUPS_PROP       =  9,\n        VARS_PROP         = 10,\n        USES_PROP         = 11,\n        REGEXP_PROP       = 12,\n        CASES_PROP        = 13,\n        DEFAULT_PROP      = 14,\n        CASEARRAY_PROP    = 15,\n        SOURCENAME_PROP   = 16,\n        TYPE_PROP         = 17,\n        SPECIAL_PROP_PROP = 18,\n        LABEL_PROP        = 19,\n        FINALLY_PROP      = 20,\n        LOCALCOUNT_PROP   = 21,\n    /*\n        the following properties are defined and manipulated by the\n        optimizer -\n        TARGETBLOCK_PROP - the block referenced by a branch node\n        VARIABLE_PROP - the variable referenced by a BIND or NAME node\n        LASTUSE_PROP - that variable node is the last reference before\n                        a new def or the end of the block\n        ISNUMBER_PROP - this node generates code on Number children and\n                        delivers a Number result (as opposed to Objects)\n        DIRECTCALL_PROP - this call node should emit code to test the function\n                          object against the known class and call diret if it\n                          matches.\n    */\n\n        TARGETBLOCK_PROP  = 22,\n        VARIABLE_PROP     = 23,\n        LASTUSE_PROP      = 24,\n        ISNUMBER_PROP     = 25,\n        DIRECTCALL_PROP   = 26,\n\n        SPECIALCALL_PROP  = 27,\n        DEBUGSOURCE_PROP  = 28,\n        JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n        VAR_ARGS_NAME     = 29,     // the name node is a variable length\n                                    // argument placeholder. It can never be\n                                    // used in conjunction with JSDOC_INFO_PROP.\n        SKIP_INDEXES_PROP  = 30,    // array of skipped indexes of array literal\n        INCRDECR_PROP      = 31,    // pre or post type of increment/decrement\n        MEMBER_TYPE_PROP   = 32,    // type of element access operation\n        NAME_PROP          = 33,    // property name\n        PARENTHESIZED_PROP = 34,    // expression is parenthesized\n        QUOTED_PROP        = 35,    // set to indicate a quoted object lit key\n        OPT_ARG_NAME       = 36,    // The name node is an optional argument.\n        SYNTHETIC_BLOCK_PROP = 37,  // A synthetic block. Used to make\n                                    // processing simpler, and does not\n                                    // represent a real block in the source.\n        SOURCEFILE_PROP    = 38,    // Contains the path of the source file\n                                    // from which the current node was parsed.\n        EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                    // EMPTY nodes.\n        ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                    // renaming.\n        BRACELESS_TYPE     = 41,    // The type syntax without curly braces.\n        NO_SIDE_EFFECTS_CALL = 42,  // Function or constructor call has no\n                                    // side effects.\n        // Coding convention props\n        IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n        IS_OPTIONAL_PARAM  = 44,    // The parameter is optional.\n        IS_VAR_ARGS_PARAM  = 45,    // The parameter is a var_args.\n        IS_NAMESPACE       = 46,    // The variable creates a namespace.\n        IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                    // probably generated from Java code, and\n                                    // should be resolved to the proper\n                                    // overload if possible.\n        DIRECTIVES         = 48,    // The ES5 directives on this node.\n        DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                    // indirect calls to eval.\n        LAST_PROP          = 49;",
        "begin_line": 67,
        "end_line": 153,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.REGEXP_PROP",
        "snippet": "    public static final int\n        // Rhino's AST captures data flow. These are the annotations\n        // it used. We've mostly torn them out.\n        LOCAL_BLOCK_PROP  = -3,\n        OBJECT_IDS_PROP   = -2,\n        CATCH_SCOPE_PROP  = -1,\n        LABEL_ID_PROP     =  0,\n\n        TARGET_PROP       =  1,\n        BREAK_PROP        =  2,\n        CONTINUE_PROP     =  3,\n        ENUM_PROP         =  4,\n        FUNCTION_PROP     =  5,\n        TEMP_PROP         =  6,\n        LOCAL_PROP        =  7,\n        CODEOFFSET_PROP   =  8,\n        FIXUPS_PROP       =  9,\n        VARS_PROP         = 10,\n        USES_PROP         = 11,\n        REGEXP_PROP       = 12,\n        CASES_PROP        = 13,\n        DEFAULT_PROP      = 14,\n        CASEARRAY_PROP    = 15,\n        SOURCENAME_PROP   = 16,\n        TYPE_PROP         = 17,\n        SPECIAL_PROP_PROP = 18,\n        LABEL_PROP        = 19,\n        FINALLY_PROP      = 20,\n        LOCALCOUNT_PROP   = 21,\n    /*\n        the following properties are defined and manipulated by the\n        optimizer -\n        TARGETBLOCK_PROP - the block referenced by a branch node\n        VARIABLE_PROP - the variable referenced by a BIND or NAME node\n        LASTUSE_PROP - that variable node is the last reference before\n                        a new def or the end of the block\n        ISNUMBER_PROP - this node generates code on Number children and\n                        delivers a Number result (as opposed to Objects)\n        DIRECTCALL_PROP - this call node should emit code to test the function\n                          object against the known class and call diret if it\n                          matches.\n    */\n\n        TARGETBLOCK_PROP  = 22,\n        VARIABLE_PROP     = 23,\n        LASTUSE_PROP      = 24,\n        ISNUMBER_PROP     = 25,\n        DIRECTCALL_PROP   = 26,\n\n        SPECIALCALL_PROP  = 27,\n        DEBUGSOURCE_PROP  = 28,\n        JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n        VAR_ARGS_NAME     = 29,     // the name node is a variable length\n                                    // argument placeholder. It can never be\n                                    // used in conjunction with JSDOC_INFO_PROP.\n        SKIP_INDEXES_PROP  = 30,    // array of skipped indexes of array literal\n        INCRDECR_PROP      = 31,    // pre or post type of increment/decrement\n        MEMBER_TYPE_PROP   = 32,    // type of element access operation\n        NAME_PROP          = 33,    // property name\n        PARENTHESIZED_PROP = 34,    // expression is parenthesized\n        QUOTED_PROP        = 35,    // set to indicate a quoted object lit key\n        OPT_ARG_NAME       = 36,    // The name node is an optional argument.\n        SYNTHETIC_BLOCK_PROP = 37,  // A synthetic block. Used to make\n                                    // processing simpler, and does not\n                                    // represent a real block in the source.\n        SOURCEFILE_PROP    = 38,    // Contains the path of the source file\n                                    // from which the current node was parsed.\n        EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                    // EMPTY nodes.\n        ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                    // renaming.\n        BRACELESS_TYPE     = 41,    // The type syntax without curly braces.\n        NO_SIDE_EFFECTS_CALL = 42,  // Function or constructor call has no\n                                    // side effects.\n        // Coding convention props\n        IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n        IS_OPTIONAL_PARAM  = 44,    // The parameter is optional.\n        IS_VAR_ARGS_PARAM  = 45,    // The parameter is a var_args.\n        IS_NAMESPACE       = 46,    // The variable creates a namespace.\n        IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                    // probably generated from Java code, and\n                                    // should be resolved to the proper\n                                    // overload if possible.\n        DIRECTIVES         = 48,    // The ES5 directives on this node.\n        DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                    // indirect calls to eval.\n        LAST_PROP          = 49;",
        "begin_line": 67,
        "end_line": 153,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.CASES_PROP",
        "snippet": "    public static final int\n        // Rhino's AST captures data flow. These are the annotations\n        // it used. We've mostly torn them out.\n        LOCAL_BLOCK_PROP  = -3,\n        OBJECT_IDS_PROP   = -2,\n        CATCH_SCOPE_PROP  = -1,\n        LABEL_ID_PROP     =  0,\n\n        TARGET_PROP       =  1,\n        BREAK_PROP        =  2,\n        CONTINUE_PROP     =  3,\n        ENUM_PROP         =  4,\n        FUNCTION_PROP     =  5,\n        TEMP_PROP         =  6,\n        LOCAL_PROP        =  7,\n        CODEOFFSET_PROP   =  8,\n        FIXUPS_PROP       =  9,\n        VARS_PROP         = 10,\n        USES_PROP         = 11,\n        REGEXP_PROP       = 12,\n        CASES_PROP        = 13,\n        DEFAULT_PROP      = 14,\n        CASEARRAY_PROP    = 15,\n        SOURCENAME_PROP   = 16,\n        TYPE_PROP         = 17,\n        SPECIAL_PROP_PROP = 18,\n        LABEL_PROP        = 19,\n        FINALLY_PROP      = 20,\n        LOCALCOUNT_PROP   = 21,\n    /*\n        the following properties are defined and manipulated by the\n        optimizer -\n        TARGETBLOCK_PROP - the block referenced by a branch node\n        VARIABLE_PROP - the variable referenced by a BIND or NAME node\n        LASTUSE_PROP - that variable node is the last reference before\n                        a new def or the end of the block\n        ISNUMBER_PROP - this node generates code on Number children and\n                        delivers a Number result (as opposed to Objects)\n        DIRECTCALL_PROP - this call node should emit code to test the function\n                          object against the known class and call diret if it\n                          matches.\n    */\n\n        TARGETBLOCK_PROP  = 22,\n        VARIABLE_PROP     = 23,\n        LASTUSE_PROP      = 24,\n        ISNUMBER_PROP     = 25,\n        DIRECTCALL_PROP   = 26,\n\n        SPECIALCALL_PROP  = 27,\n        DEBUGSOURCE_PROP  = 28,\n        JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n        VAR_ARGS_NAME     = 29,     // the name node is a variable length\n                                    // argument placeholder. It can never be\n                                    // used in conjunction with JSDOC_INFO_PROP.\n        SKIP_INDEXES_PROP  = 30,    // array of skipped indexes of array literal\n        INCRDECR_PROP      = 31,    // pre or post type of increment/decrement\n        MEMBER_TYPE_PROP   = 32,    // type of element access operation\n        NAME_PROP          = 33,    // property name\n        PARENTHESIZED_PROP = 34,    // expression is parenthesized\n        QUOTED_PROP        = 35,    // set to indicate a quoted object lit key\n        OPT_ARG_NAME       = 36,    // The name node is an optional argument.\n        SYNTHETIC_BLOCK_PROP = 37,  // A synthetic block. Used to make\n                                    // processing simpler, and does not\n                                    // represent a real block in the source.\n        SOURCEFILE_PROP    = 38,    // Contains the path of the source file\n                                    // from which the current node was parsed.\n        EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                    // EMPTY nodes.\n        ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                    // renaming.\n        BRACELESS_TYPE     = 41,    // The type syntax without curly braces.\n        NO_SIDE_EFFECTS_CALL = 42,  // Function or constructor call has no\n                                    // side effects.\n        // Coding convention props\n        IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n        IS_OPTIONAL_PARAM  = 44,    // The parameter is optional.\n        IS_VAR_ARGS_PARAM  = 45,    // The parameter is a var_args.\n        IS_NAMESPACE       = 46,    // The variable creates a namespace.\n        IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                    // probably generated from Java code, and\n                                    // should be resolved to the proper\n                                    // overload if possible.\n        DIRECTIVES         = 48,    // The ES5 directives on this node.\n        DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                    // indirect calls to eval.\n        LAST_PROP          = 49;",
        "begin_line": 67,
        "end_line": 153,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.DEFAULT_PROP",
        "snippet": "    public static final int\n        // Rhino's AST captures data flow. These are the annotations\n        // it used. We've mostly torn them out.\n        LOCAL_BLOCK_PROP  = -3,\n        OBJECT_IDS_PROP   = -2,\n        CATCH_SCOPE_PROP  = -1,\n        LABEL_ID_PROP     =  0,\n\n        TARGET_PROP       =  1,\n        BREAK_PROP        =  2,\n        CONTINUE_PROP     =  3,\n        ENUM_PROP         =  4,\n        FUNCTION_PROP     =  5,\n        TEMP_PROP         =  6,\n        LOCAL_PROP        =  7,\n        CODEOFFSET_PROP   =  8,\n        FIXUPS_PROP       =  9,\n        VARS_PROP         = 10,\n        USES_PROP         = 11,\n        REGEXP_PROP       = 12,\n        CASES_PROP        = 13,\n        DEFAULT_PROP      = 14,\n        CASEARRAY_PROP    = 15,\n        SOURCENAME_PROP   = 16,\n        TYPE_PROP         = 17,\n        SPECIAL_PROP_PROP = 18,\n        LABEL_PROP        = 19,\n        FINALLY_PROP      = 20,\n        LOCALCOUNT_PROP   = 21,\n    /*\n        the following properties are defined and manipulated by the\n        optimizer -\n        TARGETBLOCK_PROP - the block referenced by a branch node\n        VARIABLE_PROP - the variable referenced by a BIND or NAME node\n        LASTUSE_PROP - that variable node is the last reference before\n                        a new def or the end of the block\n        ISNUMBER_PROP - this node generates code on Number children and\n                        delivers a Number result (as opposed to Objects)\n        DIRECTCALL_PROP - this call node should emit code to test the function\n                          object against the known class and call diret if it\n                          matches.\n    */\n\n        TARGETBLOCK_PROP  = 22,\n        VARIABLE_PROP     = 23,\n        LASTUSE_PROP      = 24,\n        ISNUMBER_PROP     = 25,\n        DIRECTCALL_PROP   = 26,\n\n        SPECIALCALL_PROP  = 27,\n        DEBUGSOURCE_PROP  = 28,\n        JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n        VAR_ARGS_NAME     = 29,     // the name node is a variable length\n                                    // argument placeholder. It can never be\n                                    // used in conjunction with JSDOC_INFO_PROP.\n        SKIP_INDEXES_PROP  = 30,    // array of skipped indexes of array literal\n        INCRDECR_PROP      = 31,    // pre or post type of increment/decrement\n        MEMBER_TYPE_PROP   = 32,    // type of element access operation\n        NAME_PROP          = 33,    // property name\n        PARENTHESIZED_PROP = 34,    // expression is parenthesized\n        QUOTED_PROP        = 35,    // set to indicate a quoted object lit key\n        OPT_ARG_NAME       = 36,    // The name node is an optional argument.\n        SYNTHETIC_BLOCK_PROP = 37,  // A synthetic block. Used to make\n                                    // processing simpler, and does not\n                                    // represent a real block in the source.\n        SOURCEFILE_PROP    = 38,    // Contains the path of the source file\n                                    // from which the current node was parsed.\n        EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                    // EMPTY nodes.\n        ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                    // renaming.\n        BRACELESS_TYPE     = 41,    // The type syntax without curly braces.\n        NO_SIDE_EFFECTS_CALL = 42,  // Function or constructor call has no\n                                    // side effects.\n        // Coding convention props\n        IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n        IS_OPTIONAL_PARAM  = 44,    // The parameter is optional.\n        IS_VAR_ARGS_PARAM  = 45,    // The parameter is a var_args.\n        IS_NAMESPACE       = 46,    // The variable creates a namespace.\n        IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                    // probably generated from Java code, and\n                                    // should be resolved to the proper\n                                    // overload if possible.\n        DIRECTIVES         = 48,    // The ES5 directives on this node.\n        DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                    // indirect calls to eval.\n        LAST_PROP          = 49;",
        "begin_line": 67,
        "end_line": 153,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.CASEARRAY_PROP",
        "snippet": "    public static final int\n        // Rhino's AST captures data flow. These are the annotations\n        // it used. We've mostly torn them out.\n        LOCAL_BLOCK_PROP  = -3,\n        OBJECT_IDS_PROP   = -2,\n        CATCH_SCOPE_PROP  = -1,\n        LABEL_ID_PROP     =  0,\n\n        TARGET_PROP       =  1,\n        BREAK_PROP        =  2,\n        CONTINUE_PROP     =  3,\n        ENUM_PROP         =  4,\n        FUNCTION_PROP     =  5,\n        TEMP_PROP         =  6,\n        LOCAL_PROP        =  7,\n        CODEOFFSET_PROP   =  8,\n        FIXUPS_PROP       =  9,\n        VARS_PROP         = 10,\n        USES_PROP         = 11,\n        REGEXP_PROP       = 12,\n        CASES_PROP        = 13,\n        DEFAULT_PROP      = 14,\n        CASEARRAY_PROP    = 15,\n        SOURCENAME_PROP   = 16,\n        TYPE_PROP         = 17,\n        SPECIAL_PROP_PROP = 18,\n        LABEL_PROP        = 19,\n        FINALLY_PROP      = 20,\n        LOCALCOUNT_PROP   = 21,\n    /*\n        the following properties are defined and manipulated by the\n        optimizer -\n        TARGETBLOCK_PROP - the block referenced by a branch node\n        VARIABLE_PROP - the variable referenced by a BIND or NAME node\n        LASTUSE_PROP - that variable node is the last reference before\n                        a new def or the end of the block\n        ISNUMBER_PROP - this node generates code on Number children and\n                        delivers a Number result (as opposed to Objects)\n        DIRECTCALL_PROP - this call node should emit code to test the function\n                          object against the known class and call diret if it\n                          matches.\n    */\n\n        TARGETBLOCK_PROP  = 22,\n        VARIABLE_PROP     = 23,\n        LASTUSE_PROP      = 24,\n        ISNUMBER_PROP     = 25,\n        DIRECTCALL_PROP   = 26,\n\n        SPECIALCALL_PROP  = 27,\n        DEBUGSOURCE_PROP  = 28,\n        JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n        VAR_ARGS_NAME     = 29,     // the name node is a variable length\n                                    // argument placeholder. It can never be\n                                    // used in conjunction with JSDOC_INFO_PROP.\n        SKIP_INDEXES_PROP  = 30,    // array of skipped indexes of array literal\n        INCRDECR_PROP      = 31,    // pre or post type of increment/decrement\n        MEMBER_TYPE_PROP   = 32,    // type of element access operation\n        NAME_PROP          = 33,    // property name\n        PARENTHESIZED_PROP = 34,    // expression is parenthesized\n        QUOTED_PROP        = 35,    // set to indicate a quoted object lit key\n        OPT_ARG_NAME       = 36,    // The name node is an optional argument.\n        SYNTHETIC_BLOCK_PROP = 37,  // A synthetic block. Used to make\n                                    // processing simpler, and does not\n                                    // represent a real block in the source.\n        SOURCEFILE_PROP    = 38,    // Contains the path of the source file\n                                    // from which the current node was parsed.\n        EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                    // EMPTY nodes.\n        ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                    // renaming.\n        BRACELESS_TYPE     = 41,    // The type syntax without curly braces.\n        NO_SIDE_EFFECTS_CALL = 42,  // Function or constructor call has no\n                                    // side effects.\n        // Coding convention props\n        IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n        IS_OPTIONAL_PARAM  = 44,    // The parameter is optional.\n        IS_VAR_ARGS_PARAM  = 45,    // The parameter is a var_args.\n        IS_NAMESPACE       = 46,    // The variable creates a namespace.\n        IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                    // probably generated from Java code, and\n                                    // should be resolved to the proper\n                                    // overload if possible.\n        DIRECTIVES         = 48,    // The ES5 directives on this node.\n        DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                    // indirect calls to eval.\n        LAST_PROP          = 49;",
        "begin_line": 67,
        "end_line": 153,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.SOURCENAME_PROP",
        "snippet": "    public static final int\n        // Rhino's AST captures data flow. These are the annotations\n        // it used. We've mostly torn them out.\n        LOCAL_BLOCK_PROP  = -3,\n        OBJECT_IDS_PROP   = -2,\n        CATCH_SCOPE_PROP  = -1,\n        LABEL_ID_PROP     =  0,\n\n        TARGET_PROP       =  1,\n        BREAK_PROP        =  2,\n        CONTINUE_PROP     =  3,\n        ENUM_PROP         =  4,\n        FUNCTION_PROP     =  5,\n        TEMP_PROP         =  6,\n        LOCAL_PROP        =  7,\n        CODEOFFSET_PROP   =  8,\n        FIXUPS_PROP       =  9,\n        VARS_PROP         = 10,\n        USES_PROP         = 11,\n        REGEXP_PROP       = 12,\n        CASES_PROP        = 13,\n        DEFAULT_PROP      = 14,\n        CASEARRAY_PROP    = 15,\n        SOURCENAME_PROP   = 16,\n        TYPE_PROP         = 17,\n        SPECIAL_PROP_PROP = 18,\n        LABEL_PROP        = 19,\n        FINALLY_PROP      = 20,\n        LOCALCOUNT_PROP   = 21,\n    /*\n        the following properties are defined and manipulated by the\n        optimizer -\n        TARGETBLOCK_PROP - the block referenced by a branch node\n        VARIABLE_PROP - the variable referenced by a BIND or NAME node\n        LASTUSE_PROP - that variable node is the last reference before\n                        a new def or the end of the block\n        ISNUMBER_PROP - this node generates code on Number children and\n                        delivers a Number result (as opposed to Objects)\n        DIRECTCALL_PROP - this call node should emit code to test the function\n                          object against the known class and call diret if it\n                          matches.\n    */\n\n        TARGETBLOCK_PROP  = 22,\n        VARIABLE_PROP     = 23,\n        LASTUSE_PROP      = 24,\n        ISNUMBER_PROP     = 25,\n        DIRECTCALL_PROP   = 26,\n\n        SPECIALCALL_PROP  = 27,\n        DEBUGSOURCE_PROP  = 28,\n        JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n        VAR_ARGS_NAME     = 29,     // the name node is a variable length\n                                    // argument placeholder. It can never be\n                                    // used in conjunction with JSDOC_INFO_PROP.\n        SKIP_INDEXES_PROP  = 30,    // array of skipped indexes of array literal\n        INCRDECR_PROP      = 31,    // pre or post type of increment/decrement\n        MEMBER_TYPE_PROP   = 32,    // type of element access operation\n        NAME_PROP          = 33,    // property name\n        PARENTHESIZED_PROP = 34,    // expression is parenthesized\n        QUOTED_PROP        = 35,    // set to indicate a quoted object lit key\n        OPT_ARG_NAME       = 36,    // The name node is an optional argument.\n        SYNTHETIC_BLOCK_PROP = 37,  // A synthetic block. Used to make\n                                    // processing simpler, and does not\n                                    // represent a real block in the source.\n        SOURCEFILE_PROP    = 38,    // Contains the path of the source file\n                                    // from which the current node was parsed.\n        EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                    // EMPTY nodes.\n        ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                    // renaming.\n        BRACELESS_TYPE     = 41,    // The type syntax without curly braces.\n        NO_SIDE_EFFECTS_CALL = 42,  // Function or constructor call has no\n                                    // side effects.\n        // Coding convention props\n        IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n        IS_OPTIONAL_PARAM  = 44,    // The parameter is optional.\n        IS_VAR_ARGS_PARAM  = 45,    // The parameter is a var_args.\n        IS_NAMESPACE       = 46,    // The variable creates a namespace.\n        IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                    // probably generated from Java code, and\n                                    // should be resolved to the proper\n                                    // overload if possible.\n        DIRECTIVES         = 48,    // The ES5 directives on this node.\n        DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                    // indirect calls to eval.\n        LAST_PROP          = 49;",
        "begin_line": 67,
        "end_line": 153,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.TYPE_PROP",
        "snippet": "    public static final int\n        // Rhino's AST captures data flow. These are the annotations\n        // it used. We've mostly torn them out.\n        LOCAL_BLOCK_PROP  = -3,\n        OBJECT_IDS_PROP   = -2,\n        CATCH_SCOPE_PROP  = -1,\n        LABEL_ID_PROP     =  0,\n\n        TARGET_PROP       =  1,\n        BREAK_PROP        =  2,\n        CONTINUE_PROP     =  3,\n        ENUM_PROP         =  4,\n        FUNCTION_PROP     =  5,\n        TEMP_PROP         =  6,\n        LOCAL_PROP        =  7,\n        CODEOFFSET_PROP   =  8,\n        FIXUPS_PROP       =  9,\n        VARS_PROP         = 10,\n        USES_PROP         = 11,\n        REGEXP_PROP       = 12,\n        CASES_PROP        = 13,\n        DEFAULT_PROP      = 14,\n        CASEARRAY_PROP    = 15,\n        SOURCENAME_PROP   = 16,\n        TYPE_PROP         = 17,\n        SPECIAL_PROP_PROP = 18,\n        LABEL_PROP        = 19,\n        FINALLY_PROP      = 20,\n        LOCALCOUNT_PROP   = 21,\n    /*\n        the following properties are defined and manipulated by the\n        optimizer -\n        TARGETBLOCK_PROP - the block referenced by a branch node\n        VARIABLE_PROP - the variable referenced by a BIND or NAME node\n        LASTUSE_PROP - that variable node is the last reference before\n                        a new def or the end of the block\n        ISNUMBER_PROP - this node generates code on Number children and\n                        delivers a Number result (as opposed to Objects)\n        DIRECTCALL_PROP - this call node should emit code to test the function\n                          object against the known class and call diret if it\n                          matches.\n    */\n\n        TARGETBLOCK_PROP  = 22,\n        VARIABLE_PROP     = 23,\n        LASTUSE_PROP      = 24,\n        ISNUMBER_PROP     = 25,\n        DIRECTCALL_PROP   = 26,\n\n        SPECIALCALL_PROP  = 27,\n        DEBUGSOURCE_PROP  = 28,\n        JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n        VAR_ARGS_NAME     = 29,     // the name node is a variable length\n                                    // argument placeholder. It can never be\n                                    // used in conjunction with JSDOC_INFO_PROP.\n        SKIP_INDEXES_PROP  = 30,    // array of skipped indexes of array literal\n        INCRDECR_PROP      = 31,    // pre or post type of increment/decrement\n        MEMBER_TYPE_PROP   = 32,    // type of element access operation\n        NAME_PROP          = 33,    // property name\n        PARENTHESIZED_PROP = 34,    // expression is parenthesized\n        QUOTED_PROP        = 35,    // set to indicate a quoted object lit key\n        OPT_ARG_NAME       = 36,    // The name node is an optional argument.\n        SYNTHETIC_BLOCK_PROP = 37,  // A synthetic block. Used to make\n                                    // processing simpler, and does not\n                                    // represent a real block in the source.\n        SOURCEFILE_PROP    = 38,    // Contains the path of the source file\n                                    // from which the current node was parsed.\n        EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                    // EMPTY nodes.\n        ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                    // renaming.\n        BRACELESS_TYPE     = 41,    // The type syntax without curly braces.\n        NO_SIDE_EFFECTS_CALL = 42,  // Function or constructor call has no\n                                    // side effects.\n        // Coding convention props\n        IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n        IS_OPTIONAL_PARAM  = 44,    // The parameter is optional.\n        IS_VAR_ARGS_PARAM  = 45,    // The parameter is a var_args.\n        IS_NAMESPACE       = 46,    // The variable creates a namespace.\n        IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                    // probably generated from Java code, and\n                                    // should be resolved to the proper\n                                    // overload if possible.\n        DIRECTIVES         = 48,    // The ES5 directives on this node.\n        DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                    // indirect calls to eval.\n        LAST_PROP          = 49;",
        "begin_line": 67,
        "end_line": 153,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.SPECIAL_PROP_PROP",
        "snippet": "    public static final int\n        // Rhino's AST captures data flow. These are the annotations\n        // it used. We've mostly torn them out.\n        LOCAL_BLOCK_PROP  = -3,\n        OBJECT_IDS_PROP   = -2,\n        CATCH_SCOPE_PROP  = -1,\n        LABEL_ID_PROP     =  0,\n\n        TARGET_PROP       =  1,\n        BREAK_PROP        =  2,\n        CONTINUE_PROP     =  3,\n        ENUM_PROP         =  4,\n        FUNCTION_PROP     =  5,\n        TEMP_PROP         =  6,\n        LOCAL_PROP        =  7,\n        CODEOFFSET_PROP   =  8,\n        FIXUPS_PROP       =  9,\n        VARS_PROP         = 10,\n        USES_PROP         = 11,\n        REGEXP_PROP       = 12,\n        CASES_PROP        = 13,\n        DEFAULT_PROP      = 14,\n        CASEARRAY_PROP    = 15,\n        SOURCENAME_PROP   = 16,\n        TYPE_PROP         = 17,\n        SPECIAL_PROP_PROP = 18,\n        LABEL_PROP        = 19,\n        FINALLY_PROP      = 20,\n        LOCALCOUNT_PROP   = 21,\n    /*\n        the following properties are defined and manipulated by the\n        optimizer -\n        TARGETBLOCK_PROP - the block referenced by a branch node\n        VARIABLE_PROP - the variable referenced by a BIND or NAME node\n        LASTUSE_PROP - that variable node is the last reference before\n                        a new def or the end of the block\n        ISNUMBER_PROP - this node generates code on Number children and\n                        delivers a Number result (as opposed to Objects)\n        DIRECTCALL_PROP - this call node should emit code to test the function\n                          object against the known class and call diret if it\n                          matches.\n    */\n\n        TARGETBLOCK_PROP  = 22,\n        VARIABLE_PROP     = 23,\n        LASTUSE_PROP      = 24,\n        ISNUMBER_PROP     = 25,\n        DIRECTCALL_PROP   = 26,\n\n        SPECIALCALL_PROP  = 27,\n        DEBUGSOURCE_PROP  = 28,\n        JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n        VAR_ARGS_NAME     = 29,     // the name node is a variable length\n                                    // argument placeholder. It can never be\n                                    // used in conjunction with JSDOC_INFO_PROP.\n        SKIP_INDEXES_PROP  = 30,    // array of skipped indexes of array literal\n        INCRDECR_PROP      = 31,    // pre or post type of increment/decrement\n        MEMBER_TYPE_PROP   = 32,    // type of element access operation\n        NAME_PROP          = 33,    // property name\n        PARENTHESIZED_PROP = 34,    // expression is parenthesized\n        QUOTED_PROP        = 35,    // set to indicate a quoted object lit key\n        OPT_ARG_NAME       = 36,    // The name node is an optional argument.\n        SYNTHETIC_BLOCK_PROP = 37,  // A synthetic block. Used to make\n                                    // processing simpler, and does not\n                                    // represent a real block in the source.\n        SOURCEFILE_PROP    = 38,    // Contains the path of the source file\n                                    // from which the current node was parsed.\n        EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                    // EMPTY nodes.\n        ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                    // renaming.\n        BRACELESS_TYPE     = 41,    // The type syntax without curly braces.\n        NO_SIDE_EFFECTS_CALL = 42,  // Function or constructor call has no\n                                    // side effects.\n        // Coding convention props\n        IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n        IS_OPTIONAL_PARAM  = 44,    // The parameter is optional.\n        IS_VAR_ARGS_PARAM  = 45,    // The parameter is a var_args.\n        IS_NAMESPACE       = 46,    // The variable creates a namespace.\n        IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                    // probably generated from Java code, and\n                                    // should be resolved to the proper\n                                    // overload if possible.\n        DIRECTIVES         = 48,    // The ES5 directives on this node.\n        DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                    // indirect calls to eval.\n        LAST_PROP          = 49;",
        "begin_line": 67,
        "end_line": 153,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.LABEL_PROP",
        "snippet": "    public static final int\n        // Rhino's AST captures data flow. These are the annotations\n        // it used. We've mostly torn them out.\n        LOCAL_BLOCK_PROP  = -3,\n        OBJECT_IDS_PROP   = -2,\n        CATCH_SCOPE_PROP  = -1,\n        LABEL_ID_PROP     =  0,\n\n        TARGET_PROP       =  1,\n        BREAK_PROP        =  2,\n        CONTINUE_PROP     =  3,\n        ENUM_PROP         =  4,\n        FUNCTION_PROP     =  5,\n        TEMP_PROP         =  6,\n        LOCAL_PROP        =  7,\n        CODEOFFSET_PROP   =  8,\n        FIXUPS_PROP       =  9,\n        VARS_PROP         = 10,\n        USES_PROP         = 11,\n        REGEXP_PROP       = 12,\n        CASES_PROP        = 13,\n        DEFAULT_PROP      = 14,\n        CASEARRAY_PROP    = 15,\n        SOURCENAME_PROP   = 16,\n        TYPE_PROP         = 17,\n        SPECIAL_PROP_PROP = 18,\n        LABEL_PROP        = 19,\n        FINALLY_PROP      = 20,\n        LOCALCOUNT_PROP   = 21,\n    /*\n        the following properties are defined and manipulated by the\n        optimizer -\n        TARGETBLOCK_PROP - the block referenced by a branch node\n        VARIABLE_PROP - the variable referenced by a BIND or NAME node\n        LASTUSE_PROP - that variable node is the last reference before\n                        a new def or the end of the block\n        ISNUMBER_PROP - this node generates code on Number children and\n                        delivers a Number result (as opposed to Objects)\n        DIRECTCALL_PROP - this call node should emit code to test the function\n                          object against the known class and call diret if it\n                          matches.\n    */\n\n        TARGETBLOCK_PROP  = 22,\n        VARIABLE_PROP     = 23,\n        LASTUSE_PROP      = 24,\n        ISNUMBER_PROP     = 25,\n        DIRECTCALL_PROP   = 26,\n\n        SPECIALCALL_PROP  = 27,\n        DEBUGSOURCE_PROP  = 28,\n        JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n        VAR_ARGS_NAME     = 29,     // the name node is a variable length\n                                    // argument placeholder. It can never be\n                                    // used in conjunction with JSDOC_INFO_PROP.\n        SKIP_INDEXES_PROP  = 30,    // array of skipped indexes of array literal\n        INCRDECR_PROP      = 31,    // pre or post type of increment/decrement\n        MEMBER_TYPE_PROP   = 32,    // type of element access operation\n        NAME_PROP          = 33,    // property name\n        PARENTHESIZED_PROP = 34,    // expression is parenthesized\n        QUOTED_PROP        = 35,    // set to indicate a quoted object lit key\n        OPT_ARG_NAME       = 36,    // The name node is an optional argument.\n        SYNTHETIC_BLOCK_PROP = 37,  // A synthetic block. Used to make\n                                    // processing simpler, and does not\n                                    // represent a real block in the source.\n        SOURCEFILE_PROP    = 38,    // Contains the path of the source file\n                                    // from which the current node was parsed.\n        EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                    // EMPTY nodes.\n        ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                    // renaming.\n        BRACELESS_TYPE     = 41,    // The type syntax without curly braces.\n        NO_SIDE_EFFECTS_CALL = 42,  // Function or constructor call has no\n                                    // side effects.\n        // Coding convention props\n        IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n        IS_OPTIONAL_PARAM  = 44,    // The parameter is optional.\n        IS_VAR_ARGS_PARAM  = 45,    // The parameter is a var_args.\n        IS_NAMESPACE       = 46,    // The variable creates a namespace.\n        IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                    // probably generated from Java code, and\n                                    // should be resolved to the proper\n                                    // overload if possible.\n        DIRECTIVES         = 48,    // The ES5 directives on this node.\n        DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                    // indirect calls to eval.\n        LAST_PROP          = 49;",
        "begin_line": 67,
        "end_line": 153,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.FINALLY_PROP",
        "snippet": "    public static final int\n        // Rhino's AST captures data flow. These are the annotations\n        // it used. We've mostly torn them out.\n        LOCAL_BLOCK_PROP  = -3,\n        OBJECT_IDS_PROP   = -2,\n        CATCH_SCOPE_PROP  = -1,\n        LABEL_ID_PROP     =  0,\n\n        TARGET_PROP       =  1,\n        BREAK_PROP        =  2,\n        CONTINUE_PROP     =  3,\n        ENUM_PROP         =  4,\n        FUNCTION_PROP     =  5,\n        TEMP_PROP         =  6,\n        LOCAL_PROP        =  7,\n        CODEOFFSET_PROP   =  8,\n        FIXUPS_PROP       =  9,\n        VARS_PROP         = 10,\n        USES_PROP         = 11,\n        REGEXP_PROP       = 12,\n        CASES_PROP        = 13,\n        DEFAULT_PROP      = 14,\n        CASEARRAY_PROP    = 15,\n        SOURCENAME_PROP   = 16,\n        TYPE_PROP         = 17,\n        SPECIAL_PROP_PROP = 18,\n        LABEL_PROP        = 19,\n        FINALLY_PROP      = 20,\n        LOCALCOUNT_PROP   = 21,\n    /*\n        the following properties are defined and manipulated by the\n        optimizer -\n        TARGETBLOCK_PROP - the block referenced by a branch node\n        VARIABLE_PROP - the variable referenced by a BIND or NAME node\n        LASTUSE_PROP - that variable node is the last reference before\n                        a new def or the end of the block\n        ISNUMBER_PROP - this node generates code on Number children and\n                        delivers a Number result (as opposed to Objects)\n        DIRECTCALL_PROP - this call node should emit code to test the function\n                          object against the known class and call diret if it\n                          matches.\n    */\n\n        TARGETBLOCK_PROP  = 22,\n        VARIABLE_PROP     = 23,\n        LASTUSE_PROP      = 24,\n        ISNUMBER_PROP     = 25,\n        DIRECTCALL_PROP   = 26,\n\n        SPECIALCALL_PROP  = 27,\n        DEBUGSOURCE_PROP  = 28,\n        JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n        VAR_ARGS_NAME     = 29,     // the name node is a variable length\n                                    // argument placeholder. It can never be\n                                    // used in conjunction with JSDOC_INFO_PROP.\n        SKIP_INDEXES_PROP  = 30,    // array of skipped indexes of array literal\n        INCRDECR_PROP      = 31,    // pre or post type of increment/decrement\n        MEMBER_TYPE_PROP   = 32,    // type of element access operation\n        NAME_PROP          = 33,    // property name\n        PARENTHESIZED_PROP = 34,    // expression is parenthesized\n        QUOTED_PROP        = 35,    // set to indicate a quoted object lit key\n        OPT_ARG_NAME       = 36,    // The name node is an optional argument.\n        SYNTHETIC_BLOCK_PROP = 37,  // A synthetic block. Used to make\n                                    // processing simpler, and does not\n                                    // represent a real block in the source.\n        SOURCEFILE_PROP    = 38,    // Contains the path of the source file\n                                    // from which the current node was parsed.\n        EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                    // EMPTY nodes.\n        ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                    // renaming.\n        BRACELESS_TYPE     = 41,    // The type syntax without curly braces.\n        NO_SIDE_EFFECTS_CALL = 42,  // Function or constructor call has no\n                                    // side effects.\n        // Coding convention props\n        IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n        IS_OPTIONAL_PARAM  = 44,    // The parameter is optional.\n        IS_VAR_ARGS_PARAM  = 45,    // The parameter is a var_args.\n        IS_NAMESPACE       = 46,    // The variable creates a namespace.\n        IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                    // probably generated from Java code, and\n                                    // should be resolved to the proper\n                                    // overload if possible.\n        DIRECTIVES         = 48,    // The ES5 directives on this node.\n        DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                    // indirect calls to eval.\n        LAST_PROP          = 49;",
        "begin_line": 67,
        "end_line": 153,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.LOCALCOUNT_PROP",
        "snippet": "    public static final int\n        // Rhino's AST captures data flow. These are the annotations\n        // it used. We've mostly torn them out.\n        LOCAL_BLOCK_PROP  = -3,\n        OBJECT_IDS_PROP   = -2,\n        CATCH_SCOPE_PROP  = -1,\n        LABEL_ID_PROP     =  0,\n\n        TARGET_PROP       =  1,\n        BREAK_PROP        =  2,\n        CONTINUE_PROP     =  3,\n        ENUM_PROP         =  4,\n        FUNCTION_PROP     =  5,\n        TEMP_PROP         =  6,\n        LOCAL_PROP        =  7,\n        CODEOFFSET_PROP   =  8,\n        FIXUPS_PROP       =  9,\n        VARS_PROP         = 10,\n        USES_PROP         = 11,\n        REGEXP_PROP       = 12,\n        CASES_PROP        = 13,\n        DEFAULT_PROP      = 14,\n        CASEARRAY_PROP    = 15,\n        SOURCENAME_PROP   = 16,\n        TYPE_PROP         = 17,\n        SPECIAL_PROP_PROP = 18,\n        LABEL_PROP        = 19,\n        FINALLY_PROP      = 20,\n        LOCALCOUNT_PROP   = 21,\n    /*\n        the following properties are defined and manipulated by the\n        optimizer -\n        TARGETBLOCK_PROP - the block referenced by a branch node\n        VARIABLE_PROP - the variable referenced by a BIND or NAME node\n        LASTUSE_PROP - that variable node is the last reference before\n                        a new def or the end of the block\n        ISNUMBER_PROP - this node generates code on Number children and\n                        delivers a Number result (as opposed to Objects)\n        DIRECTCALL_PROP - this call node should emit code to test the function\n                          object against the known class and call diret if it\n                          matches.\n    */\n\n        TARGETBLOCK_PROP  = 22,\n        VARIABLE_PROP     = 23,\n        LASTUSE_PROP      = 24,\n        ISNUMBER_PROP     = 25,\n        DIRECTCALL_PROP   = 26,\n\n        SPECIALCALL_PROP  = 27,\n        DEBUGSOURCE_PROP  = 28,\n        JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n        VAR_ARGS_NAME     = 29,     // the name node is a variable length\n                                    // argument placeholder. It can never be\n                                    // used in conjunction with JSDOC_INFO_PROP.\n        SKIP_INDEXES_PROP  = 30,    // array of skipped indexes of array literal\n        INCRDECR_PROP      = 31,    // pre or post type of increment/decrement\n        MEMBER_TYPE_PROP   = 32,    // type of element access operation\n        NAME_PROP          = 33,    // property name\n        PARENTHESIZED_PROP = 34,    // expression is parenthesized\n        QUOTED_PROP        = 35,    // set to indicate a quoted object lit key\n        OPT_ARG_NAME       = 36,    // The name node is an optional argument.\n        SYNTHETIC_BLOCK_PROP = 37,  // A synthetic block. Used to make\n                                    // processing simpler, and does not\n                                    // represent a real block in the source.\n        SOURCEFILE_PROP    = 38,    // Contains the path of the source file\n                                    // from which the current node was parsed.\n        EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                    // EMPTY nodes.\n        ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                    // renaming.\n        BRACELESS_TYPE     = 41,    // The type syntax without curly braces.\n        NO_SIDE_EFFECTS_CALL = 42,  // Function or constructor call has no\n                                    // side effects.\n        // Coding convention props\n        IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n        IS_OPTIONAL_PARAM  = 44,    // The parameter is optional.\n        IS_VAR_ARGS_PARAM  = 45,    // The parameter is a var_args.\n        IS_NAMESPACE       = 46,    // The variable creates a namespace.\n        IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                    // probably generated from Java code, and\n                                    // should be resolved to the proper\n                                    // overload if possible.\n        DIRECTIVES         = 48,    // The ES5 directives on this node.\n        DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                    // indirect calls to eval.\n        LAST_PROP          = 49;",
        "begin_line": 67,
        "end_line": 153,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.TARGETBLOCK_PROP",
        "snippet": "    public static final int\n        // Rhino's AST captures data flow. These are the annotations\n        // it used. We've mostly torn them out.\n        LOCAL_BLOCK_PROP  = -3,\n        OBJECT_IDS_PROP   = -2,\n        CATCH_SCOPE_PROP  = -1,\n        LABEL_ID_PROP     =  0,\n\n        TARGET_PROP       =  1,\n        BREAK_PROP        =  2,\n        CONTINUE_PROP     =  3,\n        ENUM_PROP         =  4,\n        FUNCTION_PROP     =  5,\n        TEMP_PROP         =  6,\n        LOCAL_PROP        =  7,\n        CODEOFFSET_PROP   =  8,\n        FIXUPS_PROP       =  9,\n        VARS_PROP         = 10,\n        USES_PROP         = 11,\n        REGEXP_PROP       = 12,\n        CASES_PROP        = 13,\n        DEFAULT_PROP      = 14,\n        CASEARRAY_PROP    = 15,\n        SOURCENAME_PROP   = 16,\n        TYPE_PROP         = 17,\n        SPECIAL_PROP_PROP = 18,\n        LABEL_PROP        = 19,\n        FINALLY_PROP      = 20,\n        LOCALCOUNT_PROP   = 21,\n    /*\n        the following properties are defined and manipulated by the\n        optimizer -\n        TARGETBLOCK_PROP - the block referenced by a branch node\n        VARIABLE_PROP - the variable referenced by a BIND or NAME node\n        LASTUSE_PROP - that variable node is the last reference before\n                        a new def or the end of the block\n        ISNUMBER_PROP - this node generates code on Number children and\n                        delivers a Number result (as opposed to Objects)\n        DIRECTCALL_PROP - this call node should emit code to test the function\n                          object against the known class and call diret if it\n                          matches.\n    */\n\n        TARGETBLOCK_PROP  = 22,\n        VARIABLE_PROP     = 23,\n        LASTUSE_PROP      = 24,\n        ISNUMBER_PROP     = 25,\n        DIRECTCALL_PROP   = 26,\n\n        SPECIALCALL_PROP  = 27,\n        DEBUGSOURCE_PROP  = 28,\n        JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n        VAR_ARGS_NAME     = 29,     // the name node is a variable length\n                                    // argument placeholder. It can never be\n                                    // used in conjunction with JSDOC_INFO_PROP.\n        SKIP_INDEXES_PROP  = 30,    // array of skipped indexes of array literal\n        INCRDECR_PROP      = 31,    // pre or post type of increment/decrement\n        MEMBER_TYPE_PROP   = 32,    // type of element access operation\n        NAME_PROP          = 33,    // property name\n        PARENTHESIZED_PROP = 34,    // expression is parenthesized\n        QUOTED_PROP        = 35,    // set to indicate a quoted object lit key\n        OPT_ARG_NAME       = 36,    // The name node is an optional argument.\n        SYNTHETIC_BLOCK_PROP = 37,  // A synthetic block. Used to make\n                                    // processing simpler, and does not\n                                    // represent a real block in the source.\n        SOURCEFILE_PROP    = 38,    // Contains the path of the source file\n                                    // from which the current node was parsed.\n        EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                    // EMPTY nodes.\n        ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                    // renaming.\n        BRACELESS_TYPE     = 41,    // The type syntax without curly braces.\n        NO_SIDE_EFFECTS_CALL = 42,  // Function or constructor call has no\n                                    // side effects.\n        // Coding convention props\n        IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n        IS_OPTIONAL_PARAM  = 44,    // The parameter is optional.\n        IS_VAR_ARGS_PARAM  = 45,    // The parameter is a var_args.\n        IS_NAMESPACE       = 46,    // The variable creates a namespace.\n        IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                    // probably generated from Java code, and\n                                    // should be resolved to the proper\n                                    // overload if possible.\n        DIRECTIVES         = 48,    // The ES5 directives on this node.\n        DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                    // indirect calls to eval.\n        LAST_PROP          = 49;",
        "begin_line": 67,
        "end_line": 153,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.VARIABLE_PROP",
        "snippet": "    public static final int\n        // Rhino's AST captures data flow. These are the annotations\n        // it used. We've mostly torn them out.\n        LOCAL_BLOCK_PROP  = -3,\n        OBJECT_IDS_PROP   = -2,\n        CATCH_SCOPE_PROP  = -1,\n        LABEL_ID_PROP     =  0,\n\n        TARGET_PROP       =  1,\n        BREAK_PROP        =  2,\n        CONTINUE_PROP     =  3,\n        ENUM_PROP         =  4,\n        FUNCTION_PROP     =  5,\n        TEMP_PROP         =  6,\n        LOCAL_PROP        =  7,\n        CODEOFFSET_PROP   =  8,\n        FIXUPS_PROP       =  9,\n        VARS_PROP         = 10,\n        USES_PROP         = 11,\n        REGEXP_PROP       = 12,\n        CASES_PROP        = 13,\n        DEFAULT_PROP      = 14,\n        CASEARRAY_PROP    = 15,\n        SOURCENAME_PROP   = 16,\n        TYPE_PROP         = 17,\n        SPECIAL_PROP_PROP = 18,\n        LABEL_PROP        = 19,\n        FINALLY_PROP      = 20,\n        LOCALCOUNT_PROP   = 21,\n    /*\n        the following properties are defined and manipulated by the\n        optimizer -\n        TARGETBLOCK_PROP - the block referenced by a branch node\n        VARIABLE_PROP - the variable referenced by a BIND or NAME node\n        LASTUSE_PROP - that variable node is the last reference before\n                        a new def or the end of the block\n        ISNUMBER_PROP - this node generates code on Number children and\n                        delivers a Number result (as opposed to Objects)\n        DIRECTCALL_PROP - this call node should emit code to test the function\n                          object against the known class and call diret if it\n                          matches.\n    */\n\n        TARGETBLOCK_PROP  = 22,\n        VARIABLE_PROP     = 23,\n        LASTUSE_PROP      = 24,\n        ISNUMBER_PROP     = 25,\n        DIRECTCALL_PROP   = 26,\n\n        SPECIALCALL_PROP  = 27,\n        DEBUGSOURCE_PROP  = 28,\n        JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n        VAR_ARGS_NAME     = 29,     // the name node is a variable length\n                                    // argument placeholder. It can never be\n                                    // used in conjunction with JSDOC_INFO_PROP.\n        SKIP_INDEXES_PROP  = 30,    // array of skipped indexes of array literal\n        INCRDECR_PROP      = 31,    // pre or post type of increment/decrement\n        MEMBER_TYPE_PROP   = 32,    // type of element access operation\n        NAME_PROP          = 33,    // property name\n        PARENTHESIZED_PROP = 34,    // expression is parenthesized\n        QUOTED_PROP        = 35,    // set to indicate a quoted object lit key\n        OPT_ARG_NAME       = 36,    // The name node is an optional argument.\n        SYNTHETIC_BLOCK_PROP = 37,  // A synthetic block. Used to make\n                                    // processing simpler, and does not\n                                    // represent a real block in the source.\n        SOURCEFILE_PROP    = 38,    // Contains the path of the source file\n                                    // from which the current node was parsed.\n        EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                    // EMPTY nodes.\n        ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                    // renaming.\n        BRACELESS_TYPE     = 41,    // The type syntax without curly braces.\n        NO_SIDE_EFFECTS_CALL = 42,  // Function or constructor call has no\n                                    // side effects.\n        // Coding convention props\n        IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n        IS_OPTIONAL_PARAM  = 44,    // The parameter is optional.\n        IS_VAR_ARGS_PARAM  = 45,    // The parameter is a var_args.\n        IS_NAMESPACE       = 46,    // The variable creates a namespace.\n        IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                    // probably generated from Java code, and\n                                    // should be resolved to the proper\n                                    // overload if possible.\n        DIRECTIVES         = 48,    // The ES5 directives on this node.\n        DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                    // indirect calls to eval.\n        LAST_PROP          = 49;",
        "begin_line": 67,
        "end_line": 153,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.LASTUSE_PROP",
        "snippet": "    public static final int\n        // Rhino's AST captures data flow. These are the annotations\n        // it used. We've mostly torn them out.\n        LOCAL_BLOCK_PROP  = -3,\n        OBJECT_IDS_PROP   = -2,\n        CATCH_SCOPE_PROP  = -1,\n        LABEL_ID_PROP     =  0,\n\n        TARGET_PROP       =  1,\n        BREAK_PROP        =  2,\n        CONTINUE_PROP     =  3,\n        ENUM_PROP         =  4,\n        FUNCTION_PROP     =  5,\n        TEMP_PROP         =  6,\n        LOCAL_PROP        =  7,\n        CODEOFFSET_PROP   =  8,\n        FIXUPS_PROP       =  9,\n        VARS_PROP         = 10,\n        USES_PROP         = 11,\n        REGEXP_PROP       = 12,\n        CASES_PROP        = 13,\n        DEFAULT_PROP      = 14,\n        CASEARRAY_PROP    = 15,\n        SOURCENAME_PROP   = 16,\n        TYPE_PROP         = 17,\n        SPECIAL_PROP_PROP = 18,\n        LABEL_PROP        = 19,\n        FINALLY_PROP      = 20,\n        LOCALCOUNT_PROP   = 21,\n    /*\n        the following properties are defined and manipulated by the\n        optimizer -\n        TARGETBLOCK_PROP - the block referenced by a branch node\n        VARIABLE_PROP - the variable referenced by a BIND or NAME node\n        LASTUSE_PROP - that variable node is the last reference before\n                        a new def or the end of the block\n        ISNUMBER_PROP - this node generates code on Number children and\n                        delivers a Number result (as opposed to Objects)\n        DIRECTCALL_PROP - this call node should emit code to test the function\n                          object against the known class and call diret if it\n                          matches.\n    */\n\n        TARGETBLOCK_PROP  = 22,\n        VARIABLE_PROP     = 23,\n        LASTUSE_PROP      = 24,\n        ISNUMBER_PROP     = 25,\n        DIRECTCALL_PROP   = 26,\n\n        SPECIALCALL_PROP  = 27,\n        DEBUGSOURCE_PROP  = 28,\n        JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n        VAR_ARGS_NAME     = 29,     // the name node is a variable length\n                                    // argument placeholder. It can never be\n                                    // used in conjunction with JSDOC_INFO_PROP.\n        SKIP_INDEXES_PROP  = 30,    // array of skipped indexes of array literal\n        INCRDECR_PROP      = 31,    // pre or post type of increment/decrement\n        MEMBER_TYPE_PROP   = 32,    // type of element access operation\n        NAME_PROP          = 33,    // property name\n        PARENTHESIZED_PROP = 34,    // expression is parenthesized\n        QUOTED_PROP        = 35,    // set to indicate a quoted object lit key\n        OPT_ARG_NAME       = 36,    // The name node is an optional argument.\n        SYNTHETIC_BLOCK_PROP = 37,  // A synthetic block. Used to make\n                                    // processing simpler, and does not\n                                    // represent a real block in the source.\n        SOURCEFILE_PROP    = 38,    // Contains the path of the source file\n                                    // from which the current node was parsed.\n        EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                    // EMPTY nodes.\n        ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                    // renaming.\n        BRACELESS_TYPE     = 41,    // The type syntax without curly braces.\n        NO_SIDE_EFFECTS_CALL = 42,  // Function or constructor call has no\n                                    // side effects.\n        // Coding convention props\n        IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n        IS_OPTIONAL_PARAM  = 44,    // The parameter is optional.\n        IS_VAR_ARGS_PARAM  = 45,    // The parameter is a var_args.\n        IS_NAMESPACE       = 46,    // The variable creates a namespace.\n        IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                    // probably generated from Java code, and\n                                    // should be resolved to the proper\n                                    // overload if possible.\n        DIRECTIVES         = 48,    // The ES5 directives on this node.\n        DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                    // indirect calls to eval.\n        LAST_PROP          = 49;",
        "begin_line": 67,
        "end_line": 153,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.ISNUMBER_PROP",
        "snippet": "    public static final int\n        // Rhino's AST captures data flow. These are the annotations\n        // it used. We've mostly torn them out.\n        LOCAL_BLOCK_PROP  = -3,\n        OBJECT_IDS_PROP   = -2,\n        CATCH_SCOPE_PROP  = -1,\n        LABEL_ID_PROP     =  0,\n\n        TARGET_PROP       =  1,\n        BREAK_PROP        =  2,\n        CONTINUE_PROP     =  3,\n        ENUM_PROP         =  4,\n        FUNCTION_PROP     =  5,\n        TEMP_PROP         =  6,\n        LOCAL_PROP        =  7,\n        CODEOFFSET_PROP   =  8,\n        FIXUPS_PROP       =  9,\n        VARS_PROP         = 10,\n        USES_PROP         = 11,\n        REGEXP_PROP       = 12,\n        CASES_PROP        = 13,\n        DEFAULT_PROP      = 14,\n        CASEARRAY_PROP    = 15,\n        SOURCENAME_PROP   = 16,\n        TYPE_PROP         = 17,\n        SPECIAL_PROP_PROP = 18,\n        LABEL_PROP        = 19,\n        FINALLY_PROP      = 20,\n        LOCALCOUNT_PROP   = 21,\n    /*\n        the following properties are defined and manipulated by the\n        optimizer -\n        TARGETBLOCK_PROP - the block referenced by a branch node\n        VARIABLE_PROP - the variable referenced by a BIND or NAME node\n        LASTUSE_PROP - that variable node is the last reference before\n                        a new def or the end of the block\n        ISNUMBER_PROP - this node generates code on Number children and\n                        delivers a Number result (as opposed to Objects)\n        DIRECTCALL_PROP - this call node should emit code to test the function\n                          object against the known class and call diret if it\n                          matches.\n    */\n\n        TARGETBLOCK_PROP  = 22,\n        VARIABLE_PROP     = 23,\n        LASTUSE_PROP      = 24,\n        ISNUMBER_PROP     = 25,\n        DIRECTCALL_PROP   = 26,\n\n        SPECIALCALL_PROP  = 27,\n        DEBUGSOURCE_PROP  = 28,\n        JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n        VAR_ARGS_NAME     = 29,     // the name node is a variable length\n                                    // argument placeholder. It can never be\n                                    // used in conjunction with JSDOC_INFO_PROP.\n        SKIP_INDEXES_PROP  = 30,    // array of skipped indexes of array literal\n        INCRDECR_PROP      = 31,    // pre or post type of increment/decrement\n        MEMBER_TYPE_PROP   = 32,    // type of element access operation\n        NAME_PROP          = 33,    // property name\n        PARENTHESIZED_PROP = 34,    // expression is parenthesized\n        QUOTED_PROP        = 35,    // set to indicate a quoted object lit key\n        OPT_ARG_NAME       = 36,    // The name node is an optional argument.\n        SYNTHETIC_BLOCK_PROP = 37,  // A synthetic block. Used to make\n                                    // processing simpler, and does not\n                                    // represent a real block in the source.\n        SOURCEFILE_PROP    = 38,    // Contains the path of the source file\n                                    // from which the current node was parsed.\n        EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                    // EMPTY nodes.\n        ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                    // renaming.\n        BRACELESS_TYPE     = 41,    // The type syntax without curly braces.\n        NO_SIDE_EFFECTS_CALL = 42,  // Function or constructor call has no\n                                    // side effects.\n        // Coding convention props\n        IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n        IS_OPTIONAL_PARAM  = 44,    // The parameter is optional.\n        IS_VAR_ARGS_PARAM  = 45,    // The parameter is a var_args.\n        IS_NAMESPACE       = 46,    // The variable creates a namespace.\n        IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                    // probably generated from Java code, and\n                                    // should be resolved to the proper\n                                    // overload if possible.\n        DIRECTIVES         = 48,    // The ES5 directives on this node.\n        DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                    // indirect calls to eval.\n        LAST_PROP          = 49;",
        "begin_line": 67,
        "end_line": 153,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.DIRECTCALL_PROP",
        "snippet": "    public static final int\n        // Rhino's AST captures data flow. These are the annotations\n        // it used. We've mostly torn them out.\n        LOCAL_BLOCK_PROP  = -3,\n        OBJECT_IDS_PROP   = -2,\n        CATCH_SCOPE_PROP  = -1,\n        LABEL_ID_PROP     =  0,\n\n        TARGET_PROP       =  1,\n        BREAK_PROP        =  2,\n        CONTINUE_PROP     =  3,\n        ENUM_PROP         =  4,\n        FUNCTION_PROP     =  5,\n        TEMP_PROP         =  6,\n        LOCAL_PROP        =  7,\n        CODEOFFSET_PROP   =  8,\n        FIXUPS_PROP       =  9,\n        VARS_PROP         = 10,\n        USES_PROP         = 11,\n        REGEXP_PROP       = 12,\n        CASES_PROP        = 13,\n        DEFAULT_PROP      = 14,\n        CASEARRAY_PROP    = 15,\n        SOURCENAME_PROP   = 16,\n        TYPE_PROP         = 17,\n        SPECIAL_PROP_PROP = 18,\n        LABEL_PROP        = 19,\n        FINALLY_PROP      = 20,\n        LOCALCOUNT_PROP   = 21,\n    /*\n        the following properties are defined and manipulated by the\n        optimizer -\n        TARGETBLOCK_PROP - the block referenced by a branch node\n        VARIABLE_PROP - the variable referenced by a BIND or NAME node\n        LASTUSE_PROP - that variable node is the last reference before\n                        a new def or the end of the block\n        ISNUMBER_PROP - this node generates code on Number children and\n                        delivers a Number result (as opposed to Objects)\n        DIRECTCALL_PROP - this call node should emit code to test the function\n                          object against the known class and call diret if it\n                          matches.\n    */\n\n        TARGETBLOCK_PROP  = 22,\n        VARIABLE_PROP     = 23,\n        LASTUSE_PROP      = 24,\n        ISNUMBER_PROP     = 25,\n        DIRECTCALL_PROP   = 26,\n\n        SPECIALCALL_PROP  = 27,\n        DEBUGSOURCE_PROP  = 28,\n        JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n        VAR_ARGS_NAME     = 29,     // the name node is a variable length\n                                    // argument placeholder. It can never be\n                                    // used in conjunction with JSDOC_INFO_PROP.\n        SKIP_INDEXES_PROP  = 30,    // array of skipped indexes of array literal\n        INCRDECR_PROP      = 31,    // pre or post type of increment/decrement\n        MEMBER_TYPE_PROP   = 32,    // type of element access operation\n        NAME_PROP          = 33,    // property name\n        PARENTHESIZED_PROP = 34,    // expression is parenthesized\n        QUOTED_PROP        = 35,    // set to indicate a quoted object lit key\n        OPT_ARG_NAME       = 36,    // The name node is an optional argument.\n        SYNTHETIC_BLOCK_PROP = 37,  // A synthetic block. Used to make\n                                    // processing simpler, and does not\n                                    // represent a real block in the source.\n        SOURCEFILE_PROP    = 38,    // Contains the path of the source file\n                                    // from which the current node was parsed.\n        EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                    // EMPTY nodes.\n        ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                    // renaming.\n        BRACELESS_TYPE     = 41,    // The type syntax without curly braces.\n        NO_SIDE_EFFECTS_CALL = 42,  // Function or constructor call has no\n                                    // side effects.\n        // Coding convention props\n        IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n        IS_OPTIONAL_PARAM  = 44,    // The parameter is optional.\n        IS_VAR_ARGS_PARAM  = 45,    // The parameter is a var_args.\n        IS_NAMESPACE       = 46,    // The variable creates a namespace.\n        IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                    // probably generated from Java code, and\n                                    // should be resolved to the proper\n                                    // overload if possible.\n        DIRECTIVES         = 48,    // The ES5 directives on this node.\n        DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                    // indirect calls to eval.\n        LAST_PROP          = 49;",
        "begin_line": 67,
        "end_line": 153,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.SPECIALCALL_PROP",
        "snippet": "    public static final int\n        // Rhino's AST captures data flow. These are the annotations\n        // it used. We've mostly torn them out.\n        LOCAL_BLOCK_PROP  = -3,\n        OBJECT_IDS_PROP   = -2,\n        CATCH_SCOPE_PROP  = -1,\n        LABEL_ID_PROP     =  0,\n\n        TARGET_PROP       =  1,\n        BREAK_PROP        =  2,\n        CONTINUE_PROP     =  3,\n        ENUM_PROP         =  4,\n        FUNCTION_PROP     =  5,\n        TEMP_PROP         =  6,\n        LOCAL_PROP        =  7,\n        CODEOFFSET_PROP   =  8,\n        FIXUPS_PROP       =  9,\n        VARS_PROP         = 10,\n        USES_PROP         = 11,\n        REGEXP_PROP       = 12,\n        CASES_PROP        = 13,\n        DEFAULT_PROP      = 14,\n        CASEARRAY_PROP    = 15,\n        SOURCENAME_PROP   = 16,\n        TYPE_PROP         = 17,\n        SPECIAL_PROP_PROP = 18,\n        LABEL_PROP        = 19,\n        FINALLY_PROP      = 20,\n        LOCALCOUNT_PROP   = 21,\n    /*\n        the following properties are defined and manipulated by the\n        optimizer -\n        TARGETBLOCK_PROP - the block referenced by a branch node\n        VARIABLE_PROP - the variable referenced by a BIND or NAME node\n        LASTUSE_PROP - that variable node is the last reference before\n                        a new def or the end of the block\n        ISNUMBER_PROP - this node generates code on Number children and\n                        delivers a Number result (as opposed to Objects)\n        DIRECTCALL_PROP - this call node should emit code to test the function\n                          object against the known class and call diret if it\n                          matches.\n    */\n\n        TARGETBLOCK_PROP  = 22,\n        VARIABLE_PROP     = 23,\n        LASTUSE_PROP      = 24,\n        ISNUMBER_PROP     = 25,\n        DIRECTCALL_PROP   = 26,\n\n        SPECIALCALL_PROP  = 27,\n        DEBUGSOURCE_PROP  = 28,\n        JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n        VAR_ARGS_NAME     = 29,     // the name node is a variable length\n                                    // argument placeholder. It can never be\n                                    // used in conjunction with JSDOC_INFO_PROP.\n        SKIP_INDEXES_PROP  = 30,    // array of skipped indexes of array literal\n        INCRDECR_PROP      = 31,    // pre or post type of increment/decrement\n        MEMBER_TYPE_PROP   = 32,    // type of element access operation\n        NAME_PROP          = 33,    // property name\n        PARENTHESIZED_PROP = 34,    // expression is parenthesized\n        QUOTED_PROP        = 35,    // set to indicate a quoted object lit key\n        OPT_ARG_NAME       = 36,    // The name node is an optional argument.\n        SYNTHETIC_BLOCK_PROP = 37,  // A synthetic block. Used to make\n                                    // processing simpler, and does not\n                                    // represent a real block in the source.\n        SOURCEFILE_PROP    = 38,    // Contains the path of the source file\n                                    // from which the current node was parsed.\n        EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                    // EMPTY nodes.\n        ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                    // renaming.\n        BRACELESS_TYPE     = 41,    // The type syntax without curly braces.\n        NO_SIDE_EFFECTS_CALL = 42,  // Function or constructor call has no\n                                    // side effects.\n        // Coding convention props\n        IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n        IS_OPTIONAL_PARAM  = 44,    // The parameter is optional.\n        IS_VAR_ARGS_PARAM  = 45,    // The parameter is a var_args.\n        IS_NAMESPACE       = 46,    // The variable creates a namespace.\n        IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                    // probably generated from Java code, and\n                                    // should be resolved to the proper\n                                    // overload if possible.\n        DIRECTIVES         = 48,    // The ES5 directives on this node.\n        DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                    // indirect calls to eval.\n        LAST_PROP          = 49;",
        "begin_line": 67,
        "end_line": 153,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.DEBUGSOURCE_PROP",
        "snippet": "    public static final int\n        // Rhino's AST captures data flow. These are the annotations\n        // it used. We've mostly torn them out.\n        LOCAL_BLOCK_PROP  = -3,\n        OBJECT_IDS_PROP   = -2,\n        CATCH_SCOPE_PROP  = -1,\n        LABEL_ID_PROP     =  0,\n\n        TARGET_PROP       =  1,\n        BREAK_PROP        =  2,\n        CONTINUE_PROP     =  3,\n        ENUM_PROP         =  4,\n        FUNCTION_PROP     =  5,\n        TEMP_PROP         =  6,\n        LOCAL_PROP        =  7,\n        CODEOFFSET_PROP   =  8,\n        FIXUPS_PROP       =  9,\n        VARS_PROP         = 10,\n        USES_PROP         = 11,\n        REGEXP_PROP       = 12,\n        CASES_PROP        = 13,\n        DEFAULT_PROP      = 14,\n        CASEARRAY_PROP    = 15,\n        SOURCENAME_PROP   = 16,\n        TYPE_PROP         = 17,\n        SPECIAL_PROP_PROP = 18,\n        LABEL_PROP        = 19,\n        FINALLY_PROP      = 20,\n        LOCALCOUNT_PROP   = 21,\n    /*\n        the following properties are defined and manipulated by the\n        optimizer -\n        TARGETBLOCK_PROP - the block referenced by a branch node\n        VARIABLE_PROP - the variable referenced by a BIND or NAME node\n        LASTUSE_PROP - that variable node is the last reference before\n                        a new def or the end of the block\n        ISNUMBER_PROP - this node generates code on Number children and\n                        delivers a Number result (as opposed to Objects)\n        DIRECTCALL_PROP - this call node should emit code to test the function\n                          object against the known class and call diret if it\n                          matches.\n    */\n\n        TARGETBLOCK_PROP  = 22,\n        VARIABLE_PROP     = 23,\n        LASTUSE_PROP      = 24,\n        ISNUMBER_PROP     = 25,\n        DIRECTCALL_PROP   = 26,\n\n        SPECIALCALL_PROP  = 27,\n        DEBUGSOURCE_PROP  = 28,\n        JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n        VAR_ARGS_NAME     = 29,     // the name node is a variable length\n                                    // argument placeholder. It can never be\n                                    // used in conjunction with JSDOC_INFO_PROP.\n        SKIP_INDEXES_PROP  = 30,    // array of skipped indexes of array literal\n        INCRDECR_PROP      = 31,    // pre or post type of increment/decrement\n        MEMBER_TYPE_PROP   = 32,    // type of element access operation\n        NAME_PROP          = 33,    // property name\n        PARENTHESIZED_PROP = 34,    // expression is parenthesized\n        QUOTED_PROP        = 35,    // set to indicate a quoted object lit key\n        OPT_ARG_NAME       = 36,    // The name node is an optional argument.\n        SYNTHETIC_BLOCK_PROP = 37,  // A synthetic block. Used to make\n                                    // processing simpler, and does not\n                                    // represent a real block in the source.\n        SOURCEFILE_PROP    = 38,    // Contains the path of the source file\n                                    // from which the current node was parsed.\n        EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                    // EMPTY nodes.\n        ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                    // renaming.\n        BRACELESS_TYPE     = 41,    // The type syntax without curly braces.\n        NO_SIDE_EFFECTS_CALL = 42,  // Function or constructor call has no\n                                    // side effects.\n        // Coding convention props\n        IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n        IS_OPTIONAL_PARAM  = 44,    // The parameter is optional.\n        IS_VAR_ARGS_PARAM  = 45,    // The parameter is a var_args.\n        IS_NAMESPACE       = 46,    // The variable creates a namespace.\n        IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                    // probably generated from Java code, and\n                                    // should be resolved to the proper\n                                    // overload if possible.\n        DIRECTIVES         = 48,    // The ES5 directives on this node.\n        DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                    // indirect calls to eval.\n        LAST_PROP          = 49;",
        "begin_line": 67,
        "end_line": 153,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.JSDOC_INFO_PROP",
        "snippet": "    public static final int\n        // Rhino's AST captures data flow. These are the annotations\n        // it used. We've mostly torn them out.\n        LOCAL_BLOCK_PROP  = -3,\n        OBJECT_IDS_PROP   = -2,\n        CATCH_SCOPE_PROP  = -1,\n        LABEL_ID_PROP     =  0,\n\n        TARGET_PROP       =  1,\n        BREAK_PROP        =  2,\n        CONTINUE_PROP     =  3,\n        ENUM_PROP         =  4,\n        FUNCTION_PROP     =  5,\n        TEMP_PROP         =  6,\n        LOCAL_PROP        =  7,\n        CODEOFFSET_PROP   =  8,\n        FIXUPS_PROP       =  9,\n        VARS_PROP         = 10,\n        USES_PROP         = 11,\n        REGEXP_PROP       = 12,\n        CASES_PROP        = 13,\n        DEFAULT_PROP      = 14,\n        CASEARRAY_PROP    = 15,\n        SOURCENAME_PROP   = 16,\n        TYPE_PROP         = 17,\n        SPECIAL_PROP_PROP = 18,\n        LABEL_PROP        = 19,\n        FINALLY_PROP      = 20,\n        LOCALCOUNT_PROP   = 21,\n    /*\n        the following properties are defined and manipulated by the\n        optimizer -\n        TARGETBLOCK_PROP - the block referenced by a branch node\n        VARIABLE_PROP - the variable referenced by a BIND or NAME node\n        LASTUSE_PROP - that variable node is the last reference before\n                        a new def or the end of the block\n        ISNUMBER_PROP - this node generates code on Number children and\n                        delivers a Number result (as opposed to Objects)\n        DIRECTCALL_PROP - this call node should emit code to test the function\n                          object against the known class and call diret if it\n                          matches.\n    */\n\n        TARGETBLOCK_PROP  = 22,\n        VARIABLE_PROP     = 23,\n        LASTUSE_PROP      = 24,\n        ISNUMBER_PROP     = 25,\n        DIRECTCALL_PROP   = 26,\n\n        SPECIALCALL_PROP  = 27,\n        DEBUGSOURCE_PROP  = 28,\n        JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n        VAR_ARGS_NAME     = 29,     // the name node is a variable length\n                                    // argument placeholder. It can never be\n                                    // used in conjunction with JSDOC_INFO_PROP.\n        SKIP_INDEXES_PROP  = 30,    // array of skipped indexes of array literal\n        INCRDECR_PROP      = 31,    // pre or post type of increment/decrement\n        MEMBER_TYPE_PROP   = 32,    // type of element access operation\n        NAME_PROP          = 33,    // property name\n        PARENTHESIZED_PROP = 34,    // expression is parenthesized\n        QUOTED_PROP        = 35,    // set to indicate a quoted object lit key\n        OPT_ARG_NAME       = 36,    // The name node is an optional argument.\n        SYNTHETIC_BLOCK_PROP = 37,  // A synthetic block. Used to make\n                                    // processing simpler, and does not\n                                    // represent a real block in the source.\n        SOURCEFILE_PROP    = 38,    // Contains the path of the source file\n                                    // from which the current node was parsed.\n        EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                    // EMPTY nodes.\n        ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                    // renaming.\n        BRACELESS_TYPE     = 41,    // The type syntax without curly braces.\n        NO_SIDE_EFFECTS_CALL = 42,  // Function or constructor call has no\n                                    // side effects.\n        // Coding convention props\n        IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n        IS_OPTIONAL_PARAM  = 44,    // The parameter is optional.\n        IS_VAR_ARGS_PARAM  = 45,    // The parameter is a var_args.\n        IS_NAMESPACE       = 46,    // The variable creates a namespace.\n        IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                    // probably generated from Java code, and\n                                    // should be resolved to the proper\n                                    // overload if possible.\n        DIRECTIVES         = 48,    // The ES5 directives on this node.\n        DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                    // indirect calls to eval.\n        LAST_PROP          = 49;",
        "begin_line": 67,
        "end_line": 153,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.VAR_ARGS_NAME",
        "snippet": "    public static final int\n        // Rhino's AST captures data flow. These are the annotations\n        // it used. We've mostly torn them out.\n        LOCAL_BLOCK_PROP  = -3,\n        OBJECT_IDS_PROP   = -2,\n        CATCH_SCOPE_PROP  = -1,\n        LABEL_ID_PROP     =  0,\n\n        TARGET_PROP       =  1,\n        BREAK_PROP        =  2,\n        CONTINUE_PROP     =  3,\n        ENUM_PROP         =  4,\n        FUNCTION_PROP     =  5,\n        TEMP_PROP         =  6,\n        LOCAL_PROP        =  7,\n        CODEOFFSET_PROP   =  8,\n        FIXUPS_PROP       =  9,\n        VARS_PROP         = 10,\n        USES_PROP         = 11,\n        REGEXP_PROP       = 12,\n        CASES_PROP        = 13,\n        DEFAULT_PROP      = 14,\n        CASEARRAY_PROP    = 15,\n        SOURCENAME_PROP   = 16,\n        TYPE_PROP         = 17,\n        SPECIAL_PROP_PROP = 18,\n        LABEL_PROP        = 19,\n        FINALLY_PROP      = 20,\n        LOCALCOUNT_PROP   = 21,\n    /*\n        the following properties are defined and manipulated by the\n        optimizer -\n        TARGETBLOCK_PROP - the block referenced by a branch node\n        VARIABLE_PROP - the variable referenced by a BIND or NAME node\n        LASTUSE_PROP - that variable node is the last reference before\n                        a new def or the end of the block\n        ISNUMBER_PROP - this node generates code on Number children and\n                        delivers a Number result (as opposed to Objects)\n        DIRECTCALL_PROP - this call node should emit code to test the function\n                          object against the known class and call diret if it\n                          matches.\n    */\n\n        TARGETBLOCK_PROP  = 22,\n        VARIABLE_PROP     = 23,\n        LASTUSE_PROP      = 24,\n        ISNUMBER_PROP     = 25,\n        DIRECTCALL_PROP   = 26,\n\n        SPECIALCALL_PROP  = 27,\n        DEBUGSOURCE_PROP  = 28,\n        JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n        VAR_ARGS_NAME     = 29,     // the name node is a variable length\n                                    // argument placeholder. It can never be\n                                    // used in conjunction with JSDOC_INFO_PROP.\n        SKIP_INDEXES_PROP  = 30,    // array of skipped indexes of array literal\n        INCRDECR_PROP      = 31,    // pre or post type of increment/decrement\n        MEMBER_TYPE_PROP   = 32,    // type of element access operation\n        NAME_PROP          = 33,    // property name\n        PARENTHESIZED_PROP = 34,    // expression is parenthesized\n        QUOTED_PROP        = 35,    // set to indicate a quoted object lit key\n        OPT_ARG_NAME       = 36,    // The name node is an optional argument.\n        SYNTHETIC_BLOCK_PROP = 37,  // A synthetic block. Used to make\n                                    // processing simpler, and does not\n                                    // represent a real block in the source.\n        SOURCEFILE_PROP    = 38,    // Contains the path of the source file\n                                    // from which the current node was parsed.\n        EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                    // EMPTY nodes.\n        ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                    // renaming.\n        BRACELESS_TYPE     = 41,    // The type syntax without curly braces.\n        NO_SIDE_EFFECTS_CALL = 42,  // Function or constructor call has no\n                                    // side effects.\n        // Coding convention props\n        IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n        IS_OPTIONAL_PARAM  = 44,    // The parameter is optional.\n        IS_VAR_ARGS_PARAM  = 45,    // The parameter is a var_args.\n        IS_NAMESPACE       = 46,    // The variable creates a namespace.\n        IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                    // probably generated from Java code, and\n                                    // should be resolved to the proper\n                                    // overload if possible.\n        DIRECTIVES         = 48,    // The ES5 directives on this node.\n        DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                    // indirect calls to eval.\n        LAST_PROP          = 49;",
        "begin_line": 67,
        "end_line": 153,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.SKIP_INDEXES_PROP",
        "snippet": "    public static final int\n        // Rhino's AST captures data flow. These are the annotations\n        // it used. We've mostly torn them out.\n        LOCAL_BLOCK_PROP  = -3,\n        OBJECT_IDS_PROP   = -2,\n        CATCH_SCOPE_PROP  = -1,\n        LABEL_ID_PROP     =  0,\n\n        TARGET_PROP       =  1,\n        BREAK_PROP        =  2,\n        CONTINUE_PROP     =  3,\n        ENUM_PROP         =  4,\n        FUNCTION_PROP     =  5,\n        TEMP_PROP         =  6,\n        LOCAL_PROP        =  7,\n        CODEOFFSET_PROP   =  8,\n        FIXUPS_PROP       =  9,\n        VARS_PROP         = 10,\n        USES_PROP         = 11,\n        REGEXP_PROP       = 12,\n        CASES_PROP        = 13,\n        DEFAULT_PROP      = 14,\n        CASEARRAY_PROP    = 15,\n        SOURCENAME_PROP   = 16,\n        TYPE_PROP         = 17,\n        SPECIAL_PROP_PROP = 18,\n        LABEL_PROP        = 19,\n        FINALLY_PROP      = 20,\n        LOCALCOUNT_PROP   = 21,\n    /*\n        the following properties are defined and manipulated by the\n        optimizer -\n        TARGETBLOCK_PROP - the block referenced by a branch node\n        VARIABLE_PROP - the variable referenced by a BIND or NAME node\n        LASTUSE_PROP - that variable node is the last reference before\n                        a new def or the end of the block\n        ISNUMBER_PROP - this node generates code on Number children and\n                        delivers a Number result (as opposed to Objects)\n        DIRECTCALL_PROP - this call node should emit code to test the function\n                          object against the known class and call diret if it\n                          matches.\n    */\n\n        TARGETBLOCK_PROP  = 22,\n        VARIABLE_PROP     = 23,\n        LASTUSE_PROP      = 24,\n        ISNUMBER_PROP     = 25,\n        DIRECTCALL_PROP   = 26,\n\n        SPECIALCALL_PROP  = 27,\n        DEBUGSOURCE_PROP  = 28,\n        JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n        VAR_ARGS_NAME     = 29,     // the name node is a variable length\n                                    // argument placeholder. It can never be\n                                    // used in conjunction with JSDOC_INFO_PROP.\n        SKIP_INDEXES_PROP  = 30,    // array of skipped indexes of array literal\n        INCRDECR_PROP      = 31,    // pre or post type of increment/decrement\n        MEMBER_TYPE_PROP   = 32,    // type of element access operation\n        NAME_PROP          = 33,    // property name\n        PARENTHESIZED_PROP = 34,    // expression is parenthesized\n        QUOTED_PROP        = 35,    // set to indicate a quoted object lit key\n        OPT_ARG_NAME       = 36,    // The name node is an optional argument.\n        SYNTHETIC_BLOCK_PROP = 37,  // A synthetic block. Used to make\n                                    // processing simpler, and does not\n                                    // represent a real block in the source.\n        SOURCEFILE_PROP    = 38,    // Contains the path of the source file\n                                    // from which the current node was parsed.\n        EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                    // EMPTY nodes.\n        ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                    // renaming.\n        BRACELESS_TYPE     = 41,    // The type syntax without curly braces.\n        NO_SIDE_EFFECTS_CALL = 42,  // Function or constructor call has no\n                                    // side effects.\n        // Coding convention props\n        IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n        IS_OPTIONAL_PARAM  = 44,    // The parameter is optional.\n        IS_VAR_ARGS_PARAM  = 45,    // The parameter is a var_args.\n        IS_NAMESPACE       = 46,    // The variable creates a namespace.\n        IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                    // probably generated from Java code, and\n                                    // should be resolved to the proper\n                                    // overload if possible.\n        DIRECTIVES         = 48,    // The ES5 directives on this node.\n        DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                    // indirect calls to eval.\n        LAST_PROP          = 49;",
        "begin_line": 67,
        "end_line": 153,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.INCRDECR_PROP",
        "snippet": "    public static final int\n        // Rhino's AST captures data flow. These are the annotations\n        // it used. We've mostly torn them out.\n        LOCAL_BLOCK_PROP  = -3,\n        OBJECT_IDS_PROP   = -2,\n        CATCH_SCOPE_PROP  = -1,\n        LABEL_ID_PROP     =  0,\n\n        TARGET_PROP       =  1,\n        BREAK_PROP        =  2,\n        CONTINUE_PROP     =  3,\n        ENUM_PROP         =  4,\n        FUNCTION_PROP     =  5,\n        TEMP_PROP         =  6,\n        LOCAL_PROP        =  7,\n        CODEOFFSET_PROP   =  8,\n        FIXUPS_PROP       =  9,\n        VARS_PROP         = 10,\n        USES_PROP         = 11,\n        REGEXP_PROP       = 12,\n        CASES_PROP        = 13,\n        DEFAULT_PROP      = 14,\n        CASEARRAY_PROP    = 15,\n        SOURCENAME_PROP   = 16,\n        TYPE_PROP         = 17,\n        SPECIAL_PROP_PROP = 18,\n        LABEL_PROP        = 19,\n        FINALLY_PROP      = 20,\n        LOCALCOUNT_PROP   = 21,\n    /*\n        the following properties are defined and manipulated by the\n        optimizer -\n        TARGETBLOCK_PROP - the block referenced by a branch node\n        VARIABLE_PROP - the variable referenced by a BIND or NAME node\n        LASTUSE_PROP - that variable node is the last reference before\n                        a new def or the end of the block\n        ISNUMBER_PROP - this node generates code on Number children and\n                        delivers a Number result (as opposed to Objects)\n        DIRECTCALL_PROP - this call node should emit code to test the function\n                          object against the known class and call diret if it\n                          matches.\n    */\n\n        TARGETBLOCK_PROP  = 22,\n        VARIABLE_PROP     = 23,\n        LASTUSE_PROP      = 24,\n        ISNUMBER_PROP     = 25,\n        DIRECTCALL_PROP   = 26,\n\n        SPECIALCALL_PROP  = 27,\n        DEBUGSOURCE_PROP  = 28,\n        JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n        VAR_ARGS_NAME     = 29,     // the name node is a variable length\n                                    // argument placeholder. It can never be\n                                    // used in conjunction with JSDOC_INFO_PROP.\n        SKIP_INDEXES_PROP  = 30,    // array of skipped indexes of array literal\n        INCRDECR_PROP      = 31,    // pre or post type of increment/decrement\n        MEMBER_TYPE_PROP   = 32,    // type of element access operation\n        NAME_PROP          = 33,    // property name\n        PARENTHESIZED_PROP = 34,    // expression is parenthesized\n        QUOTED_PROP        = 35,    // set to indicate a quoted object lit key\n        OPT_ARG_NAME       = 36,    // The name node is an optional argument.\n        SYNTHETIC_BLOCK_PROP = 37,  // A synthetic block. Used to make\n                                    // processing simpler, and does not\n                                    // represent a real block in the source.\n        SOURCEFILE_PROP    = 38,    // Contains the path of the source file\n                                    // from which the current node was parsed.\n        EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                    // EMPTY nodes.\n        ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                    // renaming.\n        BRACELESS_TYPE     = 41,    // The type syntax without curly braces.\n        NO_SIDE_EFFECTS_CALL = 42,  // Function or constructor call has no\n                                    // side effects.\n        // Coding convention props\n        IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n        IS_OPTIONAL_PARAM  = 44,    // The parameter is optional.\n        IS_VAR_ARGS_PARAM  = 45,    // The parameter is a var_args.\n        IS_NAMESPACE       = 46,    // The variable creates a namespace.\n        IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                    // probably generated from Java code, and\n                                    // should be resolved to the proper\n                                    // overload if possible.\n        DIRECTIVES         = 48,    // The ES5 directives on this node.\n        DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                    // indirect calls to eval.\n        LAST_PROP          = 49;",
        "begin_line": 67,
        "end_line": 153,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.MEMBER_TYPE_PROP",
        "snippet": "    public static final int\n        // Rhino's AST captures data flow. These are the annotations\n        // it used. We've mostly torn them out.\n        LOCAL_BLOCK_PROP  = -3,\n        OBJECT_IDS_PROP   = -2,\n        CATCH_SCOPE_PROP  = -1,\n        LABEL_ID_PROP     =  0,\n\n        TARGET_PROP       =  1,\n        BREAK_PROP        =  2,\n        CONTINUE_PROP     =  3,\n        ENUM_PROP         =  4,\n        FUNCTION_PROP     =  5,\n        TEMP_PROP         =  6,\n        LOCAL_PROP        =  7,\n        CODEOFFSET_PROP   =  8,\n        FIXUPS_PROP       =  9,\n        VARS_PROP         = 10,\n        USES_PROP         = 11,\n        REGEXP_PROP       = 12,\n        CASES_PROP        = 13,\n        DEFAULT_PROP      = 14,\n        CASEARRAY_PROP    = 15,\n        SOURCENAME_PROP   = 16,\n        TYPE_PROP         = 17,\n        SPECIAL_PROP_PROP = 18,\n        LABEL_PROP        = 19,\n        FINALLY_PROP      = 20,\n        LOCALCOUNT_PROP   = 21,\n    /*\n        the following properties are defined and manipulated by the\n        optimizer -\n        TARGETBLOCK_PROP - the block referenced by a branch node\n        VARIABLE_PROP - the variable referenced by a BIND or NAME node\n        LASTUSE_PROP - that variable node is the last reference before\n                        a new def or the end of the block\n        ISNUMBER_PROP - this node generates code on Number children and\n                        delivers a Number result (as opposed to Objects)\n        DIRECTCALL_PROP - this call node should emit code to test the function\n                          object against the known class and call diret if it\n                          matches.\n    */\n\n        TARGETBLOCK_PROP  = 22,\n        VARIABLE_PROP     = 23,\n        LASTUSE_PROP      = 24,\n        ISNUMBER_PROP     = 25,\n        DIRECTCALL_PROP   = 26,\n\n        SPECIALCALL_PROP  = 27,\n        DEBUGSOURCE_PROP  = 28,\n        JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n        VAR_ARGS_NAME     = 29,     // the name node is a variable length\n                                    // argument placeholder. It can never be\n                                    // used in conjunction with JSDOC_INFO_PROP.\n        SKIP_INDEXES_PROP  = 30,    // array of skipped indexes of array literal\n        INCRDECR_PROP      = 31,    // pre or post type of increment/decrement\n        MEMBER_TYPE_PROP   = 32,    // type of element access operation\n        NAME_PROP          = 33,    // property name\n        PARENTHESIZED_PROP = 34,    // expression is parenthesized\n        QUOTED_PROP        = 35,    // set to indicate a quoted object lit key\n        OPT_ARG_NAME       = 36,    // The name node is an optional argument.\n        SYNTHETIC_BLOCK_PROP = 37,  // A synthetic block. Used to make\n                                    // processing simpler, and does not\n                                    // represent a real block in the source.\n        SOURCEFILE_PROP    = 38,    // Contains the path of the source file\n                                    // from which the current node was parsed.\n        EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                    // EMPTY nodes.\n        ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                    // renaming.\n        BRACELESS_TYPE     = 41,    // The type syntax without curly braces.\n        NO_SIDE_EFFECTS_CALL = 42,  // Function or constructor call has no\n                                    // side effects.\n        // Coding convention props\n        IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n        IS_OPTIONAL_PARAM  = 44,    // The parameter is optional.\n        IS_VAR_ARGS_PARAM  = 45,    // The parameter is a var_args.\n        IS_NAMESPACE       = 46,    // The variable creates a namespace.\n        IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                    // probably generated from Java code, and\n                                    // should be resolved to the proper\n                                    // overload if possible.\n        DIRECTIVES         = 48,    // The ES5 directives on this node.\n        DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                    // indirect calls to eval.\n        LAST_PROP          = 49;",
        "begin_line": 67,
        "end_line": 153,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.NAME_PROP",
        "snippet": "    public static final int\n        // Rhino's AST captures data flow. These are the annotations\n        // it used. We've mostly torn them out.\n        LOCAL_BLOCK_PROP  = -3,\n        OBJECT_IDS_PROP   = -2,\n        CATCH_SCOPE_PROP  = -1,\n        LABEL_ID_PROP     =  0,\n\n        TARGET_PROP       =  1,\n        BREAK_PROP        =  2,\n        CONTINUE_PROP     =  3,\n        ENUM_PROP         =  4,\n        FUNCTION_PROP     =  5,\n        TEMP_PROP         =  6,\n        LOCAL_PROP        =  7,\n        CODEOFFSET_PROP   =  8,\n        FIXUPS_PROP       =  9,\n        VARS_PROP         = 10,\n        USES_PROP         = 11,\n        REGEXP_PROP       = 12,\n        CASES_PROP        = 13,\n        DEFAULT_PROP      = 14,\n        CASEARRAY_PROP    = 15,\n        SOURCENAME_PROP   = 16,\n        TYPE_PROP         = 17,\n        SPECIAL_PROP_PROP = 18,\n        LABEL_PROP        = 19,\n        FINALLY_PROP      = 20,\n        LOCALCOUNT_PROP   = 21,\n    /*\n        the following properties are defined and manipulated by the\n        optimizer -\n        TARGETBLOCK_PROP - the block referenced by a branch node\n        VARIABLE_PROP - the variable referenced by a BIND or NAME node\n        LASTUSE_PROP - that variable node is the last reference before\n                        a new def or the end of the block\n        ISNUMBER_PROP - this node generates code on Number children and\n                        delivers a Number result (as opposed to Objects)\n        DIRECTCALL_PROP - this call node should emit code to test the function\n                          object against the known class and call diret if it\n                          matches.\n    */\n\n        TARGETBLOCK_PROP  = 22,\n        VARIABLE_PROP     = 23,\n        LASTUSE_PROP      = 24,\n        ISNUMBER_PROP     = 25,\n        DIRECTCALL_PROP   = 26,\n\n        SPECIALCALL_PROP  = 27,\n        DEBUGSOURCE_PROP  = 28,\n        JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n        VAR_ARGS_NAME     = 29,     // the name node is a variable length\n                                    // argument placeholder. It can never be\n                                    // used in conjunction with JSDOC_INFO_PROP.\n        SKIP_INDEXES_PROP  = 30,    // array of skipped indexes of array literal\n        INCRDECR_PROP      = 31,    // pre or post type of increment/decrement\n        MEMBER_TYPE_PROP   = 32,    // type of element access operation\n        NAME_PROP          = 33,    // property name\n        PARENTHESIZED_PROP = 34,    // expression is parenthesized\n        QUOTED_PROP        = 35,    // set to indicate a quoted object lit key\n        OPT_ARG_NAME       = 36,    // The name node is an optional argument.\n        SYNTHETIC_BLOCK_PROP = 37,  // A synthetic block. Used to make\n                                    // processing simpler, and does not\n                                    // represent a real block in the source.\n        SOURCEFILE_PROP    = 38,    // Contains the path of the source file\n                                    // from which the current node was parsed.\n        EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                    // EMPTY nodes.\n        ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                    // renaming.\n        BRACELESS_TYPE     = 41,    // The type syntax without curly braces.\n        NO_SIDE_EFFECTS_CALL = 42,  // Function or constructor call has no\n                                    // side effects.\n        // Coding convention props\n        IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n        IS_OPTIONAL_PARAM  = 44,    // The parameter is optional.\n        IS_VAR_ARGS_PARAM  = 45,    // The parameter is a var_args.\n        IS_NAMESPACE       = 46,    // The variable creates a namespace.\n        IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                    // probably generated from Java code, and\n                                    // should be resolved to the proper\n                                    // overload if possible.\n        DIRECTIVES         = 48,    // The ES5 directives on this node.\n        DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                    // indirect calls to eval.\n        LAST_PROP          = 49;",
        "begin_line": 67,
        "end_line": 153,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.PARENTHESIZED_PROP",
        "snippet": "    public static final int\n        // Rhino's AST captures data flow. These are the annotations\n        // it used. We've mostly torn them out.\n        LOCAL_BLOCK_PROP  = -3,\n        OBJECT_IDS_PROP   = -2,\n        CATCH_SCOPE_PROP  = -1,\n        LABEL_ID_PROP     =  0,\n\n        TARGET_PROP       =  1,\n        BREAK_PROP        =  2,\n        CONTINUE_PROP     =  3,\n        ENUM_PROP         =  4,\n        FUNCTION_PROP     =  5,\n        TEMP_PROP         =  6,\n        LOCAL_PROP        =  7,\n        CODEOFFSET_PROP   =  8,\n        FIXUPS_PROP       =  9,\n        VARS_PROP         = 10,\n        USES_PROP         = 11,\n        REGEXP_PROP       = 12,\n        CASES_PROP        = 13,\n        DEFAULT_PROP      = 14,\n        CASEARRAY_PROP    = 15,\n        SOURCENAME_PROP   = 16,\n        TYPE_PROP         = 17,\n        SPECIAL_PROP_PROP = 18,\n        LABEL_PROP        = 19,\n        FINALLY_PROP      = 20,\n        LOCALCOUNT_PROP   = 21,\n    /*\n        the following properties are defined and manipulated by the\n        optimizer -\n        TARGETBLOCK_PROP - the block referenced by a branch node\n        VARIABLE_PROP - the variable referenced by a BIND or NAME node\n        LASTUSE_PROP - that variable node is the last reference before\n                        a new def or the end of the block\n        ISNUMBER_PROP - this node generates code on Number children and\n                        delivers a Number result (as opposed to Objects)\n        DIRECTCALL_PROP - this call node should emit code to test the function\n                          object against the known class and call diret if it\n                          matches.\n    */\n\n        TARGETBLOCK_PROP  = 22,\n        VARIABLE_PROP     = 23,\n        LASTUSE_PROP      = 24,\n        ISNUMBER_PROP     = 25,\n        DIRECTCALL_PROP   = 26,\n\n        SPECIALCALL_PROP  = 27,\n        DEBUGSOURCE_PROP  = 28,\n        JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n        VAR_ARGS_NAME     = 29,     // the name node is a variable length\n                                    // argument placeholder. It can never be\n                                    // used in conjunction with JSDOC_INFO_PROP.\n        SKIP_INDEXES_PROP  = 30,    // array of skipped indexes of array literal\n        INCRDECR_PROP      = 31,    // pre or post type of increment/decrement\n        MEMBER_TYPE_PROP   = 32,    // type of element access operation\n        NAME_PROP          = 33,    // property name\n        PARENTHESIZED_PROP = 34,    // expression is parenthesized\n        QUOTED_PROP        = 35,    // set to indicate a quoted object lit key\n        OPT_ARG_NAME       = 36,    // The name node is an optional argument.\n        SYNTHETIC_BLOCK_PROP = 37,  // A synthetic block. Used to make\n                                    // processing simpler, and does not\n                                    // represent a real block in the source.\n        SOURCEFILE_PROP    = 38,    // Contains the path of the source file\n                                    // from which the current node was parsed.\n        EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                    // EMPTY nodes.\n        ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                    // renaming.\n        BRACELESS_TYPE     = 41,    // The type syntax without curly braces.\n        NO_SIDE_EFFECTS_CALL = 42,  // Function or constructor call has no\n                                    // side effects.\n        // Coding convention props\n        IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n        IS_OPTIONAL_PARAM  = 44,    // The parameter is optional.\n        IS_VAR_ARGS_PARAM  = 45,    // The parameter is a var_args.\n        IS_NAMESPACE       = 46,    // The variable creates a namespace.\n        IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                    // probably generated from Java code, and\n                                    // should be resolved to the proper\n                                    // overload if possible.\n        DIRECTIVES         = 48,    // The ES5 directives on this node.\n        DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                    // indirect calls to eval.\n        LAST_PROP          = 49;",
        "begin_line": 67,
        "end_line": 153,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.QUOTED_PROP",
        "snippet": "    public static final int\n        // Rhino's AST captures data flow. These are the annotations\n        // it used. We've mostly torn them out.\n        LOCAL_BLOCK_PROP  = -3,\n        OBJECT_IDS_PROP   = -2,\n        CATCH_SCOPE_PROP  = -1,\n        LABEL_ID_PROP     =  0,\n\n        TARGET_PROP       =  1,\n        BREAK_PROP        =  2,\n        CONTINUE_PROP     =  3,\n        ENUM_PROP         =  4,\n        FUNCTION_PROP     =  5,\n        TEMP_PROP         =  6,\n        LOCAL_PROP        =  7,\n        CODEOFFSET_PROP   =  8,\n        FIXUPS_PROP       =  9,\n        VARS_PROP         = 10,\n        USES_PROP         = 11,\n        REGEXP_PROP       = 12,\n        CASES_PROP        = 13,\n        DEFAULT_PROP      = 14,\n        CASEARRAY_PROP    = 15,\n        SOURCENAME_PROP   = 16,\n        TYPE_PROP         = 17,\n        SPECIAL_PROP_PROP = 18,\n        LABEL_PROP        = 19,\n        FINALLY_PROP      = 20,\n        LOCALCOUNT_PROP   = 21,\n    /*\n        the following properties are defined and manipulated by the\n        optimizer -\n        TARGETBLOCK_PROP - the block referenced by a branch node\n        VARIABLE_PROP - the variable referenced by a BIND or NAME node\n        LASTUSE_PROP - that variable node is the last reference before\n                        a new def or the end of the block\n        ISNUMBER_PROP - this node generates code on Number children and\n                        delivers a Number result (as opposed to Objects)\n        DIRECTCALL_PROP - this call node should emit code to test the function\n                          object against the known class and call diret if it\n                          matches.\n    */\n\n        TARGETBLOCK_PROP  = 22,\n        VARIABLE_PROP     = 23,\n        LASTUSE_PROP      = 24,\n        ISNUMBER_PROP     = 25,\n        DIRECTCALL_PROP   = 26,\n\n        SPECIALCALL_PROP  = 27,\n        DEBUGSOURCE_PROP  = 28,\n        JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n        VAR_ARGS_NAME     = 29,     // the name node is a variable length\n                                    // argument placeholder. It can never be\n                                    // used in conjunction with JSDOC_INFO_PROP.\n        SKIP_INDEXES_PROP  = 30,    // array of skipped indexes of array literal\n        INCRDECR_PROP      = 31,    // pre or post type of increment/decrement\n        MEMBER_TYPE_PROP   = 32,    // type of element access operation\n        NAME_PROP          = 33,    // property name\n        PARENTHESIZED_PROP = 34,    // expression is parenthesized\n        QUOTED_PROP        = 35,    // set to indicate a quoted object lit key\n        OPT_ARG_NAME       = 36,    // The name node is an optional argument.\n        SYNTHETIC_BLOCK_PROP = 37,  // A synthetic block. Used to make\n                                    // processing simpler, and does not\n                                    // represent a real block in the source.\n        SOURCEFILE_PROP    = 38,    // Contains the path of the source file\n                                    // from which the current node was parsed.\n        EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                    // EMPTY nodes.\n        ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                    // renaming.\n        BRACELESS_TYPE     = 41,    // The type syntax without curly braces.\n        NO_SIDE_EFFECTS_CALL = 42,  // Function or constructor call has no\n                                    // side effects.\n        // Coding convention props\n        IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n        IS_OPTIONAL_PARAM  = 44,    // The parameter is optional.\n        IS_VAR_ARGS_PARAM  = 45,    // The parameter is a var_args.\n        IS_NAMESPACE       = 46,    // The variable creates a namespace.\n        IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                    // probably generated from Java code, and\n                                    // should be resolved to the proper\n                                    // overload if possible.\n        DIRECTIVES         = 48,    // The ES5 directives on this node.\n        DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                    // indirect calls to eval.\n        LAST_PROP          = 49;",
        "begin_line": 67,
        "end_line": 153,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.OPT_ARG_NAME",
        "snippet": "    public static final int\n        // Rhino's AST captures data flow. These are the annotations\n        // it used. We've mostly torn them out.\n        LOCAL_BLOCK_PROP  = -3,\n        OBJECT_IDS_PROP   = -2,\n        CATCH_SCOPE_PROP  = -1,\n        LABEL_ID_PROP     =  0,\n\n        TARGET_PROP       =  1,\n        BREAK_PROP        =  2,\n        CONTINUE_PROP     =  3,\n        ENUM_PROP         =  4,\n        FUNCTION_PROP     =  5,\n        TEMP_PROP         =  6,\n        LOCAL_PROP        =  7,\n        CODEOFFSET_PROP   =  8,\n        FIXUPS_PROP       =  9,\n        VARS_PROP         = 10,\n        USES_PROP         = 11,\n        REGEXP_PROP       = 12,\n        CASES_PROP        = 13,\n        DEFAULT_PROP      = 14,\n        CASEARRAY_PROP    = 15,\n        SOURCENAME_PROP   = 16,\n        TYPE_PROP         = 17,\n        SPECIAL_PROP_PROP = 18,\n        LABEL_PROP        = 19,\n        FINALLY_PROP      = 20,\n        LOCALCOUNT_PROP   = 21,\n    /*\n        the following properties are defined and manipulated by the\n        optimizer -\n        TARGETBLOCK_PROP - the block referenced by a branch node\n        VARIABLE_PROP - the variable referenced by a BIND or NAME node\n        LASTUSE_PROP - that variable node is the last reference before\n                        a new def or the end of the block\n        ISNUMBER_PROP - this node generates code on Number children and\n                        delivers a Number result (as opposed to Objects)\n        DIRECTCALL_PROP - this call node should emit code to test the function\n                          object against the known class and call diret if it\n                          matches.\n    */\n\n        TARGETBLOCK_PROP  = 22,\n        VARIABLE_PROP     = 23,\n        LASTUSE_PROP      = 24,\n        ISNUMBER_PROP     = 25,\n        DIRECTCALL_PROP   = 26,\n\n        SPECIALCALL_PROP  = 27,\n        DEBUGSOURCE_PROP  = 28,\n        JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n        VAR_ARGS_NAME     = 29,     // the name node is a variable length\n                                    // argument placeholder. It can never be\n                                    // used in conjunction with JSDOC_INFO_PROP.\n        SKIP_INDEXES_PROP  = 30,    // array of skipped indexes of array literal\n        INCRDECR_PROP      = 31,    // pre or post type of increment/decrement\n        MEMBER_TYPE_PROP   = 32,    // type of element access operation\n        NAME_PROP          = 33,    // property name\n        PARENTHESIZED_PROP = 34,    // expression is parenthesized\n        QUOTED_PROP        = 35,    // set to indicate a quoted object lit key\n        OPT_ARG_NAME       = 36,    // The name node is an optional argument.\n        SYNTHETIC_BLOCK_PROP = 37,  // A synthetic block. Used to make\n                                    // processing simpler, and does not\n                                    // represent a real block in the source.\n        SOURCEFILE_PROP    = 38,    // Contains the path of the source file\n                                    // from which the current node was parsed.\n        EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                    // EMPTY nodes.\n        ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                    // renaming.\n        BRACELESS_TYPE     = 41,    // The type syntax without curly braces.\n        NO_SIDE_EFFECTS_CALL = 42,  // Function or constructor call has no\n                                    // side effects.\n        // Coding convention props\n        IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n        IS_OPTIONAL_PARAM  = 44,    // The parameter is optional.\n        IS_VAR_ARGS_PARAM  = 45,    // The parameter is a var_args.\n        IS_NAMESPACE       = 46,    // The variable creates a namespace.\n        IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                    // probably generated from Java code, and\n                                    // should be resolved to the proper\n                                    // overload if possible.\n        DIRECTIVES         = 48,    // The ES5 directives on this node.\n        DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                    // indirect calls to eval.\n        LAST_PROP          = 49;",
        "begin_line": 67,
        "end_line": 153,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP",
        "snippet": "    public static final int\n        // Rhino's AST captures data flow. These are the annotations\n        // it used. We've mostly torn them out.\n        LOCAL_BLOCK_PROP  = -3,\n        OBJECT_IDS_PROP   = -2,\n        CATCH_SCOPE_PROP  = -1,\n        LABEL_ID_PROP     =  0,\n\n        TARGET_PROP       =  1,\n        BREAK_PROP        =  2,\n        CONTINUE_PROP     =  3,\n        ENUM_PROP         =  4,\n        FUNCTION_PROP     =  5,\n        TEMP_PROP         =  6,\n        LOCAL_PROP        =  7,\n        CODEOFFSET_PROP   =  8,\n        FIXUPS_PROP       =  9,\n        VARS_PROP         = 10,\n        USES_PROP         = 11,\n        REGEXP_PROP       = 12,\n        CASES_PROP        = 13,\n        DEFAULT_PROP      = 14,\n        CASEARRAY_PROP    = 15,\n        SOURCENAME_PROP   = 16,\n        TYPE_PROP         = 17,\n        SPECIAL_PROP_PROP = 18,\n        LABEL_PROP        = 19,\n        FINALLY_PROP      = 20,\n        LOCALCOUNT_PROP   = 21,\n    /*\n        the following properties are defined and manipulated by the\n        optimizer -\n        TARGETBLOCK_PROP - the block referenced by a branch node\n        VARIABLE_PROP - the variable referenced by a BIND or NAME node\n        LASTUSE_PROP - that variable node is the last reference before\n                        a new def or the end of the block\n        ISNUMBER_PROP - this node generates code on Number children and\n                        delivers a Number result (as opposed to Objects)\n        DIRECTCALL_PROP - this call node should emit code to test the function\n                          object against the known class and call diret if it\n                          matches.\n    */\n\n        TARGETBLOCK_PROP  = 22,\n        VARIABLE_PROP     = 23,\n        LASTUSE_PROP      = 24,\n        ISNUMBER_PROP     = 25,\n        DIRECTCALL_PROP   = 26,\n\n        SPECIALCALL_PROP  = 27,\n        DEBUGSOURCE_PROP  = 28,\n        JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n        VAR_ARGS_NAME     = 29,     // the name node is a variable length\n                                    // argument placeholder. It can never be\n                                    // used in conjunction with JSDOC_INFO_PROP.\n        SKIP_INDEXES_PROP  = 30,    // array of skipped indexes of array literal\n        INCRDECR_PROP      = 31,    // pre or post type of increment/decrement\n        MEMBER_TYPE_PROP   = 32,    // type of element access operation\n        NAME_PROP          = 33,    // property name\n        PARENTHESIZED_PROP = 34,    // expression is parenthesized\n        QUOTED_PROP        = 35,    // set to indicate a quoted object lit key\n        OPT_ARG_NAME       = 36,    // The name node is an optional argument.\n        SYNTHETIC_BLOCK_PROP = 37,  // A synthetic block. Used to make\n                                    // processing simpler, and does not\n                                    // represent a real block in the source.\n        SOURCEFILE_PROP    = 38,    // Contains the path of the source file\n                                    // from which the current node was parsed.\n        EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                    // EMPTY nodes.\n        ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                    // renaming.\n        BRACELESS_TYPE     = 41,    // The type syntax without curly braces.\n        NO_SIDE_EFFECTS_CALL = 42,  // Function or constructor call has no\n                                    // side effects.\n        // Coding convention props\n        IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n        IS_OPTIONAL_PARAM  = 44,    // The parameter is optional.\n        IS_VAR_ARGS_PARAM  = 45,    // The parameter is a var_args.\n        IS_NAMESPACE       = 46,    // The variable creates a namespace.\n        IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                    // probably generated from Java code, and\n                                    // should be resolved to the proper\n                                    // overload if possible.\n        DIRECTIVES         = 48,    // The ES5 directives on this node.\n        DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                    // indirect calls to eval.\n        LAST_PROP          = 49;",
        "begin_line": 67,
        "end_line": 153,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.SOURCEFILE_PROP",
        "snippet": "    public static final int\n        // Rhino's AST captures data flow. These are the annotations\n        // it used. We've mostly torn them out.\n        LOCAL_BLOCK_PROP  = -3,\n        OBJECT_IDS_PROP   = -2,\n        CATCH_SCOPE_PROP  = -1,\n        LABEL_ID_PROP     =  0,\n\n        TARGET_PROP       =  1,\n        BREAK_PROP        =  2,\n        CONTINUE_PROP     =  3,\n        ENUM_PROP         =  4,\n        FUNCTION_PROP     =  5,\n        TEMP_PROP         =  6,\n        LOCAL_PROP        =  7,\n        CODEOFFSET_PROP   =  8,\n        FIXUPS_PROP       =  9,\n        VARS_PROP         = 10,\n        USES_PROP         = 11,\n        REGEXP_PROP       = 12,\n        CASES_PROP        = 13,\n        DEFAULT_PROP      = 14,\n        CASEARRAY_PROP    = 15,\n        SOURCENAME_PROP   = 16,\n        TYPE_PROP         = 17,\n        SPECIAL_PROP_PROP = 18,\n        LABEL_PROP        = 19,\n        FINALLY_PROP      = 20,\n        LOCALCOUNT_PROP   = 21,\n    /*\n        the following properties are defined and manipulated by the\n        optimizer -\n        TARGETBLOCK_PROP - the block referenced by a branch node\n        VARIABLE_PROP - the variable referenced by a BIND or NAME node\n        LASTUSE_PROP - that variable node is the last reference before\n                        a new def or the end of the block\n        ISNUMBER_PROP - this node generates code on Number children and\n                        delivers a Number result (as opposed to Objects)\n        DIRECTCALL_PROP - this call node should emit code to test the function\n                          object against the known class and call diret if it\n                          matches.\n    */\n\n        TARGETBLOCK_PROP  = 22,\n        VARIABLE_PROP     = 23,\n        LASTUSE_PROP      = 24,\n        ISNUMBER_PROP     = 25,\n        DIRECTCALL_PROP   = 26,\n\n        SPECIALCALL_PROP  = 27,\n        DEBUGSOURCE_PROP  = 28,\n        JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n        VAR_ARGS_NAME     = 29,     // the name node is a variable length\n                                    // argument placeholder. It can never be\n                                    // used in conjunction with JSDOC_INFO_PROP.\n        SKIP_INDEXES_PROP  = 30,    // array of skipped indexes of array literal\n        INCRDECR_PROP      = 31,    // pre or post type of increment/decrement\n        MEMBER_TYPE_PROP   = 32,    // type of element access operation\n        NAME_PROP          = 33,    // property name\n        PARENTHESIZED_PROP = 34,    // expression is parenthesized\n        QUOTED_PROP        = 35,    // set to indicate a quoted object lit key\n        OPT_ARG_NAME       = 36,    // The name node is an optional argument.\n        SYNTHETIC_BLOCK_PROP = 37,  // A synthetic block. Used to make\n                                    // processing simpler, and does not\n                                    // represent a real block in the source.\n        SOURCEFILE_PROP    = 38,    // Contains the path of the source file\n                                    // from which the current node was parsed.\n        EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                    // EMPTY nodes.\n        ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                    // renaming.\n        BRACELESS_TYPE     = 41,    // The type syntax without curly braces.\n        NO_SIDE_EFFECTS_CALL = 42,  // Function or constructor call has no\n                                    // side effects.\n        // Coding convention props\n        IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n        IS_OPTIONAL_PARAM  = 44,    // The parameter is optional.\n        IS_VAR_ARGS_PARAM  = 45,    // The parameter is a var_args.\n        IS_NAMESPACE       = 46,    // The variable creates a namespace.\n        IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                    // probably generated from Java code, and\n                                    // should be resolved to the proper\n                                    // overload if possible.\n        DIRECTIVES         = 48,    // The ES5 directives on this node.\n        DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                    // indirect calls to eval.\n        LAST_PROP          = 49;",
        "begin_line": 67,
        "end_line": 153,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.EMPTY_BLOCK",
        "snippet": "    public static final int\n        // Rhino's AST captures data flow. These are the annotations\n        // it used. We've mostly torn them out.\n        LOCAL_BLOCK_PROP  = -3,\n        OBJECT_IDS_PROP   = -2,\n        CATCH_SCOPE_PROP  = -1,\n        LABEL_ID_PROP     =  0,\n\n        TARGET_PROP       =  1,\n        BREAK_PROP        =  2,\n        CONTINUE_PROP     =  3,\n        ENUM_PROP         =  4,\n        FUNCTION_PROP     =  5,\n        TEMP_PROP         =  6,\n        LOCAL_PROP        =  7,\n        CODEOFFSET_PROP   =  8,\n        FIXUPS_PROP       =  9,\n        VARS_PROP         = 10,\n        USES_PROP         = 11,\n        REGEXP_PROP       = 12,\n        CASES_PROP        = 13,\n        DEFAULT_PROP      = 14,\n        CASEARRAY_PROP    = 15,\n        SOURCENAME_PROP   = 16,\n        TYPE_PROP         = 17,\n        SPECIAL_PROP_PROP = 18,\n        LABEL_PROP        = 19,\n        FINALLY_PROP      = 20,\n        LOCALCOUNT_PROP   = 21,\n    /*\n        the following properties are defined and manipulated by the\n        optimizer -\n        TARGETBLOCK_PROP - the block referenced by a branch node\n        VARIABLE_PROP - the variable referenced by a BIND or NAME node\n        LASTUSE_PROP - that variable node is the last reference before\n                        a new def or the end of the block\n        ISNUMBER_PROP - this node generates code on Number children and\n                        delivers a Number result (as opposed to Objects)\n        DIRECTCALL_PROP - this call node should emit code to test the function\n                          object against the known class and call diret if it\n                          matches.\n    */\n\n        TARGETBLOCK_PROP  = 22,\n        VARIABLE_PROP     = 23,\n        LASTUSE_PROP      = 24,\n        ISNUMBER_PROP     = 25,\n        DIRECTCALL_PROP   = 26,\n\n        SPECIALCALL_PROP  = 27,\n        DEBUGSOURCE_PROP  = 28,\n        JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n        VAR_ARGS_NAME     = 29,     // the name node is a variable length\n                                    // argument placeholder. It can never be\n                                    // used in conjunction with JSDOC_INFO_PROP.\n        SKIP_INDEXES_PROP  = 30,    // array of skipped indexes of array literal\n        INCRDECR_PROP      = 31,    // pre or post type of increment/decrement\n        MEMBER_TYPE_PROP   = 32,    // type of element access operation\n        NAME_PROP          = 33,    // property name\n        PARENTHESIZED_PROP = 34,    // expression is parenthesized\n        QUOTED_PROP        = 35,    // set to indicate a quoted object lit key\n        OPT_ARG_NAME       = 36,    // The name node is an optional argument.\n        SYNTHETIC_BLOCK_PROP = 37,  // A synthetic block. Used to make\n                                    // processing simpler, and does not\n                                    // represent a real block in the source.\n        SOURCEFILE_PROP    = 38,    // Contains the path of the source file\n                                    // from which the current node was parsed.\n        EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                    // EMPTY nodes.\n        ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                    // renaming.\n        BRACELESS_TYPE     = 41,    // The type syntax without curly braces.\n        NO_SIDE_EFFECTS_CALL = 42,  // Function or constructor call has no\n                                    // side effects.\n        // Coding convention props\n        IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n        IS_OPTIONAL_PARAM  = 44,    // The parameter is optional.\n        IS_VAR_ARGS_PARAM  = 45,    // The parameter is a var_args.\n        IS_NAMESPACE       = 46,    // The variable creates a namespace.\n        IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                    // probably generated from Java code, and\n                                    // should be resolved to the proper\n                                    // overload if possible.\n        DIRECTIVES         = 48,    // The ES5 directives on this node.\n        DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                    // indirect calls to eval.\n        LAST_PROP          = 49;",
        "begin_line": 67,
        "end_line": 153,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.ORIGINALNAME_PROP",
        "snippet": "    public static final int\n        // Rhino's AST captures data flow. These are the annotations\n        // it used. We've mostly torn them out.\n        LOCAL_BLOCK_PROP  = -3,\n        OBJECT_IDS_PROP   = -2,\n        CATCH_SCOPE_PROP  = -1,\n        LABEL_ID_PROP     =  0,\n\n        TARGET_PROP       =  1,\n        BREAK_PROP        =  2,\n        CONTINUE_PROP     =  3,\n        ENUM_PROP         =  4,\n        FUNCTION_PROP     =  5,\n        TEMP_PROP         =  6,\n        LOCAL_PROP        =  7,\n        CODEOFFSET_PROP   =  8,\n        FIXUPS_PROP       =  9,\n        VARS_PROP         = 10,\n        USES_PROP         = 11,\n        REGEXP_PROP       = 12,\n        CASES_PROP        = 13,\n        DEFAULT_PROP      = 14,\n        CASEARRAY_PROP    = 15,\n        SOURCENAME_PROP   = 16,\n        TYPE_PROP         = 17,\n        SPECIAL_PROP_PROP = 18,\n        LABEL_PROP        = 19,\n        FINALLY_PROP      = 20,\n        LOCALCOUNT_PROP   = 21,\n    /*\n        the following properties are defined and manipulated by the\n        optimizer -\n        TARGETBLOCK_PROP - the block referenced by a branch node\n        VARIABLE_PROP - the variable referenced by a BIND or NAME node\n        LASTUSE_PROP - that variable node is the last reference before\n                        a new def or the end of the block\n        ISNUMBER_PROP - this node generates code on Number children and\n                        delivers a Number result (as opposed to Objects)\n        DIRECTCALL_PROP - this call node should emit code to test the function\n                          object against the known class and call diret if it\n                          matches.\n    */\n\n        TARGETBLOCK_PROP  = 22,\n        VARIABLE_PROP     = 23,\n        LASTUSE_PROP      = 24,\n        ISNUMBER_PROP     = 25,\n        DIRECTCALL_PROP   = 26,\n\n        SPECIALCALL_PROP  = 27,\n        DEBUGSOURCE_PROP  = 28,\n        JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n        VAR_ARGS_NAME     = 29,     // the name node is a variable length\n                                    // argument placeholder. It can never be\n                                    // used in conjunction with JSDOC_INFO_PROP.\n        SKIP_INDEXES_PROP  = 30,    // array of skipped indexes of array literal\n        INCRDECR_PROP      = 31,    // pre or post type of increment/decrement\n        MEMBER_TYPE_PROP   = 32,    // type of element access operation\n        NAME_PROP          = 33,    // property name\n        PARENTHESIZED_PROP = 34,    // expression is parenthesized\n        QUOTED_PROP        = 35,    // set to indicate a quoted object lit key\n        OPT_ARG_NAME       = 36,    // The name node is an optional argument.\n        SYNTHETIC_BLOCK_PROP = 37,  // A synthetic block. Used to make\n                                    // processing simpler, and does not\n                                    // represent a real block in the source.\n        SOURCEFILE_PROP    = 38,    // Contains the path of the source file\n                                    // from which the current node was parsed.\n        EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                    // EMPTY nodes.\n        ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                    // renaming.\n        BRACELESS_TYPE     = 41,    // The type syntax without curly braces.\n        NO_SIDE_EFFECTS_CALL = 42,  // Function or constructor call has no\n                                    // side effects.\n        // Coding convention props\n        IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n        IS_OPTIONAL_PARAM  = 44,    // The parameter is optional.\n        IS_VAR_ARGS_PARAM  = 45,    // The parameter is a var_args.\n        IS_NAMESPACE       = 46,    // The variable creates a namespace.\n        IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                    // probably generated from Java code, and\n                                    // should be resolved to the proper\n                                    // overload if possible.\n        DIRECTIVES         = 48,    // The ES5 directives on this node.\n        DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                    // indirect calls to eval.\n        LAST_PROP          = 49;",
        "begin_line": 67,
        "end_line": 153,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.BRACELESS_TYPE",
        "snippet": "    public static final int\n        // Rhino's AST captures data flow. These are the annotations\n        // it used. We've mostly torn them out.\n        LOCAL_BLOCK_PROP  = -3,\n        OBJECT_IDS_PROP   = -2,\n        CATCH_SCOPE_PROP  = -1,\n        LABEL_ID_PROP     =  0,\n\n        TARGET_PROP       =  1,\n        BREAK_PROP        =  2,\n        CONTINUE_PROP     =  3,\n        ENUM_PROP         =  4,\n        FUNCTION_PROP     =  5,\n        TEMP_PROP         =  6,\n        LOCAL_PROP        =  7,\n        CODEOFFSET_PROP   =  8,\n        FIXUPS_PROP       =  9,\n        VARS_PROP         = 10,\n        USES_PROP         = 11,\n        REGEXP_PROP       = 12,\n        CASES_PROP        = 13,\n        DEFAULT_PROP      = 14,\n        CASEARRAY_PROP    = 15,\n        SOURCENAME_PROP   = 16,\n        TYPE_PROP         = 17,\n        SPECIAL_PROP_PROP = 18,\n        LABEL_PROP        = 19,\n        FINALLY_PROP      = 20,\n        LOCALCOUNT_PROP   = 21,\n    /*\n        the following properties are defined and manipulated by the\n        optimizer -\n        TARGETBLOCK_PROP - the block referenced by a branch node\n        VARIABLE_PROP - the variable referenced by a BIND or NAME node\n        LASTUSE_PROP - that variable node is the last reference before\n                        a new def or the end of the block\n        ISNUMBER_PROP - this node generates code on Number children and\n                        delivers a Number result (as opposed to Objects)\n        DIRECTCALL_PROP - this call node should emit code to test the function\n                          object against the known class and call diret if it\n                          matches.\n    */\n\n        TARGETBLOCK_PROP  = 22,\n        VARIABLE_PROP     = 23,\n        LASTUSE_PROP      = 24,\n        ISNUMBER_PROP     = 25,\n        DIRECTCALL_PROP   = 26,\n\n        SPECIALCALL_PROP  = 27,\n        DEBUGSOURCE_PROP  = 28,\n        JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n        VAR_ARGS_NAME     = 29,     // the name node is a variable length\n                                    // argument placeholder. It can never be\n                                    // used in conjunction with JSDOC_INFO_PROP.\n        SKIP_INDEXES_PROP  = 30,    // array of skipped indexes of array literal\n        INCRDECR_PROP      = 31,    // pre or post type of increment/decrement\n        MEMBER_TYPE_PROP   = 32,    // type of element access operation\n        NAME_PROP          = 33,    // property name\n        PARENTHESIZED_PROP = 34,    // expression is parenthesized\n        QUOTED_PROP        = 35,    // set to indicate a quoted object lit key\n        OPT_ARG_NAME       = 36,    // The name node is an optional argument.\n        SYNTHETIC_BLOCK_PROP = 37,  // A synthetic block. Used to make\n                                    // processing simpler, and does not\n                                    // represent a real block in the source.\n        SOURCEFILE_PROP    = 38,    // Contains the path of the source file\n                                    // from which the current node was parsed.\n        EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                    // EMPTY nodes.\n        ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                    // renaming.\n        BRACELESS_TYPE     = 41,    // The type syntax without curly braces.\n        NO_SIDE_EFFECTS_CALL = 42,  // Function or constructor call has no\n                                    // side effects.\n        // Coding convention props\n        IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n        IS_OPTIONAL_PARAM  = 44,    // The parameter is optional.\n        IS_VAR_ARGS_PARAM  = 45,    // The parameter is a var_args.\n        IS_NAMESPACE       = 46,    // The variable creates a namespace.\n        IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                    // probably generated from Java code, and\n                                    // should be resolved to the proper\n                                    // overload if possible.\n        DIRECTIVES         = 48,    // The ES5 directives on this node.\n        DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                    // indirect calls to eval.\n        LAST_PROP          = 49;",
        "begin_line": 67,
        "end_line": 153,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.NO_SIDE_EFFECTS_CALL",
        "snippet": "    public static final int\n        // Rhino's AST captures data flow. These are the annotations\n        // it used. We've mostly torn them out.\n        LOCAL_BLOCK_PROP  = -3,\n        OBJECT_IDS_PROP   = -2,\n        CATCH_SCOPE_PROP  = -1,\n        LABEL_ID_PROP     =  0,\n\n        TARGET_PROP       =  1,\n        BREAK_PROP        =  2,\n        CONTINUE_PROP     =  3,\n        ENUM_PROP         =  4,\n        FUNCTION_PROP     =  5,\n        TEMP_PROP         =  6,\n        LOCAL_PROP        =  7,\n        CODEOFFSET_PROP   =  8,\n        FIXUPS_PROP       =  9,\n        VARS_PROP         = 10,\n        USES_PROP         = 11,\n        REGEXP_PROP       = 12,\n        CASES_PROP        = 13,\n        DEFAULT_PROP      = 14,\n        CASEARRAY_PROP    = 15,\n        SOURCENAME_PROP   = 16,\n        TYPE_PROP         = 17,\n        SPECIAL_PROP_PROP = 18,\n        LABEL_PROP        = 19,\n        FINALLY_PROP      = 20,\n        LOCALCOUNT_PROP   = 21,\n    /*\n        the following properties are defined and manipulated by the\n        optimizer -\n        TARGETBLOCK_PROP - the block referenced by a branch node\n        VARIABLE_PROP - the variable referenced by a BIND or NAME node\n        LASTUSE_PROP - that variable node is the last reference before\n                        a new def or the end of the block\n        ISNUMBER_PROP - this node generates code on Number children and\n                        delivers a Number result (as opposed to Objects)\n        DIRECTCALL_PROP - this call node should emit code to test the function\n                          object against the known class and call diret if it\n                          matches.\n    */\n\n        TARGETBLOCK_PROP  = 22,\n        VARIABLE_PROP     = 23,\n        LASTUSE_PROP      = 24,\n        ISNUMBER_PROP     = 25,\n        DIRECTCALL_PROP   = 26,\n\n        SPECIALCALL_PROP  = 27,\n        DEBUGSOURCE_PROP  = 28,\n        JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n        VAR_ARGS_NAME     = 29,     // the name node is a variable length\n                                    // argument placeholder. It can never be\n                                    // used in conjunction with JSDOC_INFO_PROP.\n        SKIP_INDEXES_PROP  = 30,    // array of skipped indexes of array literal\n        INCRDECR_PROP      = 31,    // pre or post type of increment/decrement\n        MEMBER_TYPE_PROP   = 32,    // type of element access operation\n        NAME_PROP          = 33,    // property name\n        PARENTHESIZED_PROP = 34,    // expression is parenthesized\n        QUOTED_PROP        = 35,    // set to indicate a quoted object lit key\n        OPT_ARG_NAME       = 36,    // The name node is an optional argument.\n        SYNTHETIC_BLOCK_PROP = 37,  // A synthetic block. Used to make\n                                    // processing simpler, and does not\n                                    // represent a real block in the source.\n        SOURCEFILE_PROP    = 38,    // Contains the path of the source file\n                                    // from which the current node was parsed.\n        EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                    // EMPTY nodes.\n        ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                    // renaming.\n        BRACELESS_TYPE     = 41,    // The type syntax without curly braces.\n        NO_SIDE_EFFECTS_CALL = 42,  // Function or constructor call has no\n                                    // side effects.\n        // Coding convention props\n        IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n        IS_OPTIONAL_PARAM  = 44,    // The parameter is optional.\n        IS_VAR_ARGS_PARAM  = 45,    // The parameter is a var_args.\n        IS_NAMESPACE       = 46,    // The variable creates a namespace.\n        IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                    // probably generated from Java code, and\n                                    // should be resolved to the proper\n                                    // overload if possible.\n        DIRECTIVES         = 48,    // The ES5 directives on this node.\n        DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                    // indirect calls to eval.\n        LAST_PROP          = 49;",
        "begin_line": 67,
        "end_line": 153,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.IS_CONSTANT_NAME",
        "snippet": "    public static final int\n        // Rhino's AST captures data flow. These are the annotations\n        // it used. We've mostly torn them out.\n        LOCAL_BLOCK_PROP  = -3,\n        OBJECT_IDS_PROP   = -2,\n        CATCH_SCOPE_PROP  = -1,\n        LABEL_ID_PROP     =  0,\n\n        TARGET_PROP       =  1,\n        BREAK_PROP        =  2,\n        CONTINUE_PROP     =  3,\n        ENUM_PROP         =  4,\n        FUNCTION_PROP     =  5,\n        TEMP_PROP         =  6,\n        LOCAL_PROP        =  7,\n        CODEOFFSET_PROP   =  8,\n        FIXUPS_PROP       =  9,\n        VARS_PROP         = 10,\n        USES_PROP         = 11,\n        REGEXP_PROP       = 12,\n        CASES_PROP        = 13,\n        DEFAULT_PROP      = 14,\n        CASEARRAY_PROP    = 15,\n        SOURCENAME_PROP   = 16,\n        TYPE_PROP         = 17,\n        SPECIAL_PROP_PROP = 18,\n        LABEL_PROP        = 19,\n        FINALLY_PROP      = 20,\n        LOCALCOUNT_PROP   = 21,\n    /*\n        the following properties are defined and manipulated by the\n        optimizer -\n        TARGETBLOCK_PROP - the block referenced by a branch node\n        VARIABLE_PROP - the variable referenced by a BIND or NAME node\n        LASTUSE_PROP - that variable node is the last reference before\n                        a new def or the end of the block\n        ISNUMBER_PROP - this node generates code on Number children and\n                        delivers a Number result (as opposed to Objects)\n        DIRECTCALL_PROP - this call node should emit code to test the function\n                          object against the known class and call diret if it\n                          matches.\n    */\n\n        TARGETBLOCK_PROP  = 22,\n        VARIABLE_PROP     = 23,\n        LASTUSE_PROP      = 24,\n        ISNUMBER_PROP     = 25,\n        DIRECTCALL_PROP   = 26,\n\n        SPECIALCALL_PROP  = 27,\n        DEBUGSOURCE_PROP  = 28,\n        JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n        VAR_ARGS_NAME     = 29,     // the name node is a variable length\n                                    // argument placeholder. It can never be\n                                    // used in conjunction with JSDOC_INFO_PROP.\n        SKIP_INDEXES_PROP  = 30,    // array of skipped indexes of array literal\n        INCRDECR_PROP      = 31,    // pre or post type of increment/decrement\n        MEMBER_TYPE_PROP   = 32,    // type of element access operation\n        NAME_PROP          = 33,    // property name\n        PARENTHESIZED_PROP = 34,    // expression is parenthesized\n        QUOTED_PROP        = 35,    // set to indicate a quoted object lit key\n        OPT_ARG_NAME       = 36,    // The name node is an optional argument.\n        SYNTHETIC_BLOCK_PROP = 37,  // A synthetic block. Used to make\n                                    // processing simpler, and does not\n                                    // represent a real block in the source.\n        SOURCEFILE_PROP    = 38,    // Contains the path of the source file\n                                    // from which the current node was parsed.\n        EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                    // EMPTY nodes.\n        ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                    // renaming.\n        BRACELESS_TYPE     = 41,    // The type syntax without curly braces.\n        NO_SIDE_EFFECTS_CALL = 42,  // Function or constructor call has no\n                                    // side effects.\n        // Coding convention props\n        IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n        IS_OPTIONAL_PARAM  = 44,    // The parameter is optional.\n        IS_VAR_ARGS_PARAM  = 45,    // The parameter is a var_args.\n        IS_NAMESPACE       = 46,    // The variable creates a namespace.\n        IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                    // probably generated from Java code, and\n                                    // should be resolved to the proper\n                                    // overload if possible.\n        DIRECTIVES         = 48,    // The ES5 directives on this node.\n        DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                    // indirect calls to eval.\n        LAST_PROP          = 49;",
        "begin_line": 67,
        "end_line": 153,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.IS_OPTIONAL_PARAM",
        "snippet": "    public static final int\n        // Rhino's AST captures data flow. These are the annotations\n        // it used. We've mostly torn them out.\n        LOCAL_BLOCK_PROP  = -3,\n        OBJECT_IDS_PROP   = -2,\n        CATCH_SCOPE_PROP  = -1,\n        LABEL_ID_PROP     =  0,\n\n        TARGET_PROP       =  1,\n        BREAK_PROP        =  2,\n        CONTINUE_PROP     =  3,\n        ENUM_PROP         =  4,\n        FUNCTION_PROP     =  5,\n        TEMP_PROP         =  6,\n        LOCAL_PROP        =  7,\n        CODEOFFSET_PROP   =  8,\n        FIXUPS_PROP       =  9,\n        VARS_PROP         = 10,\n        USES_PROP         = 11,\n        REGEXP_PROP       = 12,\n        CASES_PROP        = 13,\n        DEFAULT_PROP      = 14,\n        CASEARRAY_PROP    = 15,\n        SOURCENAME_PROP   = 16,\n        TYPE_PROP         = 17,\n        SPECIAL_PROP_PROP = 18,\n        LABEL_PROP        = 19,\n        FINALLY_PROP      = 20,\n        LOCALCOUNT_PROP   = 21,\n    /*\n        the following properties are defined and manipulated by the\n        optimizer -\n        TARGETBLOCK_PROP - the block referenced by a branch node\n        VARIABLE_PROP - the variable referenced by a BIND or NAME node\n        LASTUSE_PROP - that variable node is the last reference before\n                        a new def or the end of the block\n        ISNUMBER_PROP - this node generates code on Number children and\n                        delivers a Number result (as opposed to Objects)\n        DIRECTCALL_PROP - this call node should emit code to test the function\n                          object against the known class and call diret if it\n                          matches.\n    */\n\n        TARGETBLOCK_PROP  = 22,\n        VARIABLE_PROP     = 23,\n        LASTUSE_PROP      = 24,\n        ISNUMBER_PROP     = 25,\n        DIRECTCALL_PROP   = 26,\n\n        SPECIALCALL_PROP  = 27,\n        DEBUGSOURCE_PROP  = 28,\n        JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n        VAR_ARGS_NAME     = 29,     // the name node is a variable length\n                                    // argument placeholder. It can never be\n                                    // used in conjunction with JSDOC_INFO_PROP.\n        SKIP_INDEXES_PROP  = 30,    // array of skipped indexes of array literal\n        INCRDECR_PROP      = 31,    // pre or post type of increment/decrement\n        MEMBER_TYPE_PROP   = 32,    // type of element access operation\n        NAME_PROP          = 33,    // property name\n        PARENTHESIZED_PROP = 34,    // expression is parenthesized\n        QUOTED_PROP        = 35,    // set to indicate a quoted object lit key\n        OPT_ARG_NAME       = 36,    // The name node is an optional argument.\n        SYNTHETIC_BLOCK_PROP = 37,  // A synthetic block. Used to make\n                                    // processing simpler, and does not\n                                    // represent a real block in the source.\n        SOURCEFILE_PROP    = 38,    // Contains the path of the source file\n                                    // from which the current node was parsed.\n        EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                    // EMPTY nodes.\n        ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                    // renaming.\n        BRACELESS_TYPE     = 41,    // The type syntax without curly braces.\n        NO_SIDE_EFFECTS_CALL = 42,  // Function or constructor call has no\n                                    // side effects.\n        // Coding convention props\n        IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n        IS_OPTIONAL_PARAM  = 44,    // The parameter is optional.\n        IS_VAR_ARGS_PARAM  = 45,    // The parameter is a var_args.\n        IS_NAMESPACE       = 46,    // The variable creates a namespace.\n        IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                    // probably generated from Java code, and\n                                    // should be resolved to the proper\n                                    // overload if possible.\n        DIRECTIVES         = 48,    // The ES5 directives on this node.\n        DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                    // indirect calls to eval.\n        LAST_PROP          = 49;",
        "begin_line": 67,
        "end_line": 153,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.IS_VAR_ARGS_PARAM",
        "snippet": "    public static final int\n        // Rhino's AST captures data flow. These are the annotations\n        // it used. We've mostly torn them out.\n        LOCAL_BLOCK_PROP  = -3,\n        OBJECT_IDS_PROP   = -2,\n        CATCH_SCOPE_PROP  = -1,\n        LABEL_ID_PROP     =  0,\n\n        TARGET_PROP       =  1,\n        BREAK_PROP        =  2,\n        CONTINUE_PROP     =  3,\n        ENUM_PROP         =  4,\n        FUNCTION_PROP     =  5,\n        TEMP_PROP         =  6,\n        LOCAL_PROP        =  7,\n        CODEOFFSET_PROP   =  8,\n        FIXUPS_PROP       =  9,\n        VARS_PROP         = 10,\n        USES_PROP         = 11,\n        REGEXP_PROP       = 12,\n        CASES_PROP        = 13,\n        DEFAULT_PROP      = 14,\n        CASEARRAY_PROP    = 15,\n        SOURCENAME_PROP   = 16,\n        TYPE_PROP         = 17,\n        SPECIAL_PROP_PROP = 18,\n        LABEL_PROP        = 19,\n        FINALLY_PROP      = 20,\n        LOCALCOUNT_PROP   = 21,\n    /*\n        the following properties are defined and manipulated by the\n        optimizer -\n        TARGETBLOCK_PROP - the block referenced by a branch node\n        VARIABLE_PROP - the variable referenced by a BIND or NAME node\n        LASTUSE_PROP - that variable node is the last reference before\n                        a new def or the end of the block\n        ISNUMBER_PROP - this node generates code on Number children and\n                        delivers a Number result (as opposed to Objects)\n        DIRECTCALL_PROP - this call node should emit code to test the function\n                          object against the known class and call diret if it\n                          matches.\n    */\n\n        TARGETBLOCK_PROP  = 22,\n        VARIABLE_PROP     = 23,\n        LASTUSE_PROP      = 24,\n        ISNUMBER_PROP     = 25,\n        DIRECTCALL_PROP   = 26,\n\n        SPECIALCALL_PROP  = 27,\n        DEBUGSOURCE_PROP  = 28,\n        JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n        VAR_ARGS_NAME     = 29,     // the name node is a variable length\n                                    // argument placeholder. It can never be\n                                    // used in conjunction with JSDOC_INFO_PROP.\n        SKIP_INDEXES_PROP  = 30,    // array of skipped indexes of array literal\n        INCRDECR_PROP      = 31,    // pre or post type of increment/decrement\n        MEMBER_TYPE_PROP   = 32,    // type of element access operation\n        NAME_PROP          = 33,    // property name\n        PARENTHESIZED_PROP = 34,    // expression is parenthesized\n        QUOTED_PROP        = 35,    // set to indicate a quoted object lit key\n        OPT_ARG_NAME       = 36,    // The name node is an optional argument.\n        SYNTHETIC_BLOCK_PROP = 37,  // A synthetic block. Used to make\n                                    // processing simpler, and does not\n                                    // represent a real block in the source.\n        SOURCEFILE_PROP    = 38,    // Contains the path of the source file\n                                    // from which the current node was parsed.\n        EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                    // EMPTY nodes.\n        ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                    // renaming.\n        BRACELESS_TYPE     = 41,    // The type syntax without curly braces.\n        NO_SIDE_EFFECTS_CALL = 42,  // Function or constructor call has no\n                                    // side effects.\n        // Coding convention props\n        IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n        IS_OPTIONAL_PARAM  = 44,    // The parameter is optional.\n        IS_VAR_ARGS_PARAM  = 45,    // The parameter is a var_args.\n        IS_NAMESPACE       = 46,    // The variable creates a namespace.\n        IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                    // probably generated from Java code, and\n                                    // should be resolved to the proper\n                                    // overload if possible.\n        DIRECTIVES         = 48,    // The ES5 directives on this node.\n        DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                    // indirect calls to eval.\n        LAST_PROP          = 49;",
        "begin_line": 67,
        "end_line": 153,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.IS_NAMESPACE",
        "snippet": "    public static final int\n        // Rhino's AST captures data flow. These are the annotations\n        // it used. We've mostly torn them out.\n        LOCAL_BLOCK_PROP  = -3,\n        OBJECT_IDS_PROP   = -2,\n        CATCH_SCOPE_PROP  = -1,\n        LABEL_ID_PROP     =  0,\n\n        TARGET_PROP       =  1,\n        BREAK_PROP        =  2,\n        CONTINUE_PROP     =  3,\n        ENUM_PROP         =  4,\n        FUNCTION_PROP     =  5,\n        TEMP_PROP         =  6,\n        LOCAL_PROP        =  7,\n        CODEOFFSET_PROP   =  8,\n        FIXUPS_PROP       =  9,\n        VARS_PROP         = 10,\n        USES_PROP         = 11,\n        REGEXP_PROP       = 12,\n        CASES_PROP        = 13,\n        DEFAULT_PROP      = 14,\n        CASEARRAY_PROP    = 15,\n        SOURCENAME_PROP   = 16,\n        TYPE_PROP         = 17,\n        SPECIAL_PROP_PROP = 18,\n        LABEL_PROP        = 19,\n        FINALLY_PROP      = 20,\n        LOCALCOUNT_PROP   = 21,\n    /*\n        the following properties are defined and manipulated by the\n        optimizer -\n        TARGETBLOCK_PROP - the block referenced by a branch node\n        VARIABLE_PROP - the variable referenced by a BIND or NAME node\n        LASTUSE_PROP - that variable node is the last reference before\n                        a new def or the end of the block\n        ISNUMBER_PROP - this node generates code on Number children and\n                        delivers a Number result (as opposed to Objects)\n        DIRECTCALL_PROP - this call node should emit code to test the function\n                          object against the known class and call diret if it\n                          matches.\n    */\n\n        TARGETBLOCK_PROP  = 22,\n        VARIABLE_PROP     = 23,\n        LASTUSE_PROP      = 24,\n        ISNUMBER_PROP     = 25,\n        DIRECTCALL_PROP   = 26,\n\n        SPECIALCALL_PROP  = 27,\n        DEBUGSOURCE_PROP  = 28,\n        JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n        VAR_ARGS_NAME     = 29,     // the name node is a variable length\n                                    // argument placeholder. It can never be\n                                    // used in conjunction with JSDOC_INFO_PROP.\n        SKIP_INDEXES_PROP  = 30,    // array of skipped indexes of array literal\n        INCRDECR_PROP      = 31,    // pre or post type of increment/decrement\n        MEMBER_TYPE_PROP   = 32,    // type of element access operation\n        NAME_PROP          = 33,    // property name\n        PARENTHESIZED_PROP = 34,    // expression is parenthesized\n        QUOTED_PROP        = 35,    // set to indicate a quoted object lit key\n        OPT_ARG_NAME       = 36,    // The name node is an optional argument.\n        SYNTHETIC_BLOCK_PROP = 37,  // A synthetic block. Used to make\n                                    // processing simpler, and does not\n                                    // represent a real block in the source.\n        SOURCEFILE_PROP    = 38,    // Contains the path of the source file\n                                    // from which the current node was parsed.\n        EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                    // EMPTY nodes.\n        ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                    // renaming.\n        BRACELESS_TYPE     = 41,    // The type syntax without curly braces.\n        NO_SIDE_EFFECTS_CALL = 42,  // Function or constructor call has no\n                                    // side effects.\n        // Coding convention props\n        IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n        IS_OPTIONAL_PARAM  = 44,    // The parameter is optional.\n        IS_VAR_ARGS_PARAM  = 45,    // The parameter is a var_args.\n        IS_NAMESPACE       = 46,    // The variable creates a namespace.\n        IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                    // probably generated from Java code, and\n                                    // should be resolved to the proper\n                                    // overload if possible.\n        DIRECTIVES         = 48,    // The ES5 directives on this node.\n        DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                    // indirect calls to eval.\n        LAST_PROP          = 49;",
        "begin_line": 67,
        "end_line": 153,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.IS_DISPATCHER",
        "snippet": "    public static final int\n        // Rhino's AST captures data flow. These are the annotations\n        // it used. We've mostly torn them out.\n        LOCAL_BLOCK_PROP  = -3,\n        OBJECT_IDS_PROP   = -2,\n        CATCH_SCOPE_PROP  = -1,\n        LABEL_ID_PROP     =  0,\n\n        TARGET_PROP       =  1,\n        BREAK_PROP        =  2,\n        CONTINUE_PROP     =  3,\n        ENUM_PROP         =  4,\n        FUNCTION_PROP     =  5,\n        TEMP_PROP         =  6,\n        LOCAL_PROP        =  7,\n        CODEOFFSET_PROP   =  8,\n        FIXUPS_PROP       =  9,\n        VARS_PROP         = 10,\n        USES_PROP         = 11,\n        REGEXP_PROP       = 12,\n        CASES_PROP        = 13,\n        DEFAULT_PROP      = 14,\n        CASEARRAY_PROP    = 15,\n        SOURCENAME_PROP   = 16,\n        TYPE_PROP         = 17,\n        SPECIAL_PROP_PROP = 18,\n        LABEL_PROP        = 19,\n        FINALLY_PROP      = 20,\n        LOCALCOUNT_PROP   = 21,\n    /*\n        the following properties are defined and manipulated by the\n        optimizer -\n        TARGETBLOCK_PROP - the block referenced by a branch node\n        VARIABLE_PROP - the variable referenced by a BIND or NAME node\n        LASTUSE_PROP - that variable node is the last reference before\n                        a new def or the end of the block\n        ISNUMBER_PROP - this node generates code on Number children and\n                        delivers a Number result (as opposed to Objects)\n        DIRECTCALL_PROP - this call node should emit code to test the function\n                          object against the known class and call diret if it\n                          matches.\n    */\n\n        TARGETBLOCK_PROP  = 22,\n        VARIABLE_PROP     = 23,\n        LASTUSE_PROP      = 24,\n        ISNUMBER_PROP     = 25,\n        DIRECTCALL_PROP   = 26,\n\n        SPECIALCALL_PROP  = 27,\n        DEBUGSOURCE_PROP  = 28,\n        JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n        VAR_ARGS_NAME     = 29,     // the name node is a variable length\n                                    // argument placeholder. It can never be\n                                    // used in conjunction with JSDOC_INFO_PROP.\n        SKIP_INDEXES_PROP  = 30,    // array of skipped indexes of array literal\n        INCRDECR_PROP      = 31,    // pre or post type of increment/decrement\n        MEMBER_TYPE_PROP   = 32,    // type of element access operation\n        NAME_PROP          = 33,    // property name\n        PARENTHESIZED_PROP = 34,    // expression is parenthesized\n        QUOTED_PROP        = 35,    // set to indicate a quoted object lit key\n        OPT_ARG_NAME       = 36,    // The name node is an optional argument.\n        SYNTHETIC_BLOCK_PROP = 37,  // A synthetic block. Used to make\n                                    // processing simpler, and does not\n                                    // represent a real block in the source.\n        SOURCEFILE_PROP    = 38,    // Contains the path of the source file\n                                    // from which the current node was parsed.\n        EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                    // EMPTY nodes.\n        ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                    // renaming.\n        BRACELESS_TYPE     = 41,    // The type syntax without curly braces.\n        NO_SIDE_EFFECTS_CALL = 42,  // Function or constructor call has no\n                                    // side effects.\n        // Coding convention props\n        IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n        IS_OPTIONAL_PARAM  = 44,    // The parameter is optional.\n        IS_VAR_ARGS_PARAM  = 45,    // The parameter is a var_args.\n        IS_NAMESPACE       = 46,    // The variable creates a namespace.\n        IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                    // probably generated from Java code, and\n                                    // should be resolved to the proper\n                                    // overload if possible.\n        DIRECTIVES         = 48,    // The ES5 directives on this node.\n        DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                    // indirect calls to eval.\n        LAST_PROP          = 49;",
        "begin_line": 67,
        "end_line": 153,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.DIRECTIVES",
        "snippet": "    public static final int\n        // Rhino's AST captures data flow. These are the annotations\n        // it used. We've mostly torn them out.\n        LOCAL_BLOCK_PROP  = -3,\n        OBJECT_IDS_PROP   = -2,\n        CATCH_SCOPE_PROP  = -1,\n        LABEL_ID_PROP     =  0,\n\n        TARGET_PROP       =  1,\n        BREAK_PROP        =  2,\n        CONTINUE_PROP     =  3,\n        ENUM_PROP         =  4,\n        FUNCTION_PROP     =  5,\n        TEMP_PROP         =  6,\n        LOCAL_PROP        =  7,\n        CODEOFFSET_PROP   =  8,\n        FIXUPS_PROP       =  9,\n        VARS_PROP         = 10,\n        USES_PROP         = 11,\n        REGEXP_PROP       = 12,\n        CASES_PROP        = 13,\n        DEFAULT_PROP      = 14,\n        CASEARRAY_PROP    = 15,\n        SOURCENAME_PROP   = 16,\n        TYPE_PROP         = 17,\n        SPECIAL_PROP_PROP = 18,\n        LABEL_PROP        = 19,\n        FINALLY_PROP      = 20,\n        LOCALCOUNT_PROP   = 21,\n    /*\n        the following properties are defined and manipulated by the\n        optimizer -\n        TARGETBLOCK_PROP - the block referenced by a branch node\n        VARIABLE_PROP - the variable referenced by a BIND or NAME node\n        LASTUSE_PROP - that variable node is the last reference before\n                        a new def or the end of the block\n        ISNUMBER_PROP - this node generates code on Number children and\n                        delivers a Number result (as opposed to Objects)\n        DIRECTCALL_PROP - this call node should emit code to test the function\n                          object against the known class and call diret if it\n                          matches.\n    */\n\n        TARGETBLOCK_PROP  = 22,\n        VARIABLE_PROP     = 23,\n        LASTUSE_PROP      = 24,\n        ISNUMBER_PROP     = 25,\n        DIRECTCALL_PROP   = 26,\n\n        SPECIALCALL_PROP  = 27,\n        DEBUGSOURCE_PROP  = 28,\n        JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n        VAR_ARGS_NAME     = 29,     // the name node is a variable length\n                                    // argument placeholder. It can never be\n                                    // used in conjunction with JSDOC_INFO_PROP.\n        SKIP_INDEXES_PROP  = 30,    // array of skipped indexes of array literal\n        INCRDECR_PROP      = 31,    // pre or post type of increment/decrement\n        MEMBER_TYPE_PROP   = 32,    // type of element access operation\n        NAME_PROP          = 33,    // property name\n        PARENTHESIZED_PROP = 34,    // expression is parenthesized\n        QUOTED_PROP        = 35,    // set to indicate a quoted object lit key\n        OPT_ARG_NAME       = 36,    // The name node is an optional argument.\n        SYNTHETIC_BLOCK_PROP = 37,  // A synthetic block. Used to make\n                                    // processing simpler, and does not\n                                    // represent a real block in the source.\n        SOURCEFILE_PROP    = 38,    // Contains the path of the source file\n                                    // from which the current node was parsed.\n        EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                    // EMPTY nodes.\n        ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                    // renaming.\n        BRACELESS_TYPE     = 41,    // The type syntax without curly braces.\n        NO_SIDE_EFFECTS_CALL = 42,  // Function or constructor call has no\n                                    // side effects.\n        // Coding convention props\n        IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n        IS_OPTIONAL_PARAM  = 44,    // The parameter is optional.\n        IS_VAR_ARGS_PARAM  = 45,    // The parameter is a var_args.\n        IS_NAMESPACE       = 46,    // The variable creates a namespace.\n        IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                    // probably generated from Java code, and\n                                    // should be resolved to the proper\n                                    // overload if possible.\n        DIRECTIVES         = 48,    // The ES5 directives on this node.\n        DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                    // indirect calls to eval.\n        LAST_PROP          = 49;",
        "begin_line": 67,
        "end_line": 153,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.DIRECT_EVAL",
        "snippet": "    public static final int\n        // Rhino's AST captures data flow. These are the annotations\n        // it used. We've mostly torn them out.\n        LOCAL_BLOCK_PROP  = -3,\n        OBJECT_IDS_PROP   = -2,\n        CATCH_SCOPE_PROP  = -1,\n        LABEL_ID_PROP     =  0,\n\n        TARGET_PROP       =  1,\n        BREAK_PROP        =  2,\n        CONTINUE_PROP     =  3,\n        ENUM_PROP         =  4,\n        FUNCTION_PROP     =  5,\n        TEMP_PROP         =  6,\n        LOCAL_PROP        =  7,\n        CODEOFFSET_PROP   =  8,\n        FIXUPS_PROP       =  9,\n        VARS_PROP         = 10,\n        USES_PROP         = 11,\n        REGEXP_PROP       = 12,\n        CASES_PROP        = 13,\n        DEFAULT_PROP      = 14,\n        CASEARRAY_PROP    = 15,\n        SOURCENAME_PROP   = 16,\n        TYPE_PROP         = 17,\n        SPECIAL_PROP_PROP = 18,\n        LABEL_PROP        = 19,\n        FINALLY_PROP      = 20,\n        LOCALCOUNT_PROP   = 21,\n    /*\n        the following properties are defined and manipulated by the\n        optimizer -\n        TARGETBLOCK_PROP - the block referenced by a branch node\n        VARIABLE_PROP - the variable referenced by a BIND or NAME node\n        LASTUSE_PROP - that variable node is the last reference before\n                        a new def or the end of the block\n        ISNUMBER_PROP - this node generates code on Number children and\n                        delivers a Number result (as opposed to Objects)\n        DIRECTCALL_PROP - this call node should emit code to test the function\n                          object against the known class and call diret if it\n                          matches.\n    */\n\n        TARGETBLOCK_PROP  = 22,\n        VARIABLE_PROP     = 23,\n        LASTUSE_PROP      = 24,\n        ISNUMBER_PROP     = 25,\n        DIRECTCALL_PROP   = 26,\n\n        SPECIALCALL_PROP  = 27,\n        DEBUGSOURCE_PROP  = 28,\n        JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n        VAR_ARGS_NAME     = 29,     // the name node is a variable length\n                                    // argument placeholder. It can never be\n                                    // used in conjunction with JSDOC_INFO_PROP.\n        SKIP_INDEXES_PROP  = 30,    // array of skipped indexes of array literal\n        INCRDECR_PROP      = 31,    // pre or post type of increment/decrement\n        MEMBER_TYPE_PROP   = 32,    // type of element access operation\n        NAME_PROP          = 33,    // property name\n        PARENTHESIZED_PROP = 34,    // expression is parenthesized\n        QUOTED_PROP        = 35,    // set to indicate a quoted object lit key\n        OPT_ARG_NAME       = 36,    // The name node is an optional argument.\n        SYNTHETIC_BLOCK_PROP = 37,  // A synthetic block. Used to make\n                                    // processing simpler, and does not\n                                    // represent a real block in the source.\n        SOURCEFILE_PROP    = 38,    // Contains the path of the source file\n                                    // from which the current node was parsed.\n        EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                    // EMPTY nodes.\n        ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                    // renaming.\n        BRACELESS_TYPE     = 41,    // The type syntax without curly braces.\n        NO_SIDE_EFFECTS_CALL = 42,  // Function or constructor call has no\n                                    // side effects.\n        // Coding convention props\n        IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n        IS_OPTIONAL_PARAM  = 44,    // The parameter is optional.\n        IS_VAR_ARGS_PARAM  = 45,    // The parameter is a var_args.\n        IS_NAMESPACE       = 46,    // The variable creates a namespace.\n        IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                    // probably generated from Java code, and\n                                    // should be resolved to the proper\n                                    // overload if possible.\n        DIRECTIVES         = 48,    // The ES5 directives on this node.\n        DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                    // indirect calls to eval.\n        LAST_PROP          = 49;",
        "begin_line": 67,
        "end_line": 153,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.LAST_PROP",
        "snippet": "    public static final int\n        // Rhino's AST captures data flow. These are the annotations\n        // it used. We've mostly torn them out.\n        LOCAL_BLOCK_PROP  = -3,\n        OBJECT_IDS_PROP   = -2,\n        CATCH_SCOPE_PROP  = -1,\n        LABEL_ID_PROP     =  0,\n\n        TARGET_PROP       =  1,\n        BREAK_PROP        =  2,\n        CONTINUE_PROP     =  3,\n        ENUM_PROP         =  4,\n        FUNCTION_PROP     =  5,\n        TEMP_PROP         =  6,\n        LOCAL_PROP        =  7,\n        CODEOFFSET_PROP   =  8,\n        FIXUPS_PROP       =  9,\n        VARS_PROP         = 10,\n        USES_PROP         = 11,\n        REGEXP_PROP       = 12,\n        CASES_PROP        = 13,\n        DEFAULT_PROP      = 14,\n        CASEARRAY_PROP    = 15,\n        SOURCENAME_PROP   = 16,\n        TYPE_PROP         = 17,\n        SPECIAL_PROP_PROP = 18,\n        LABEL_PROP        = 19,\n        FINALLY_PROP      = 20,\n        LOCALCOUNT_PROP   = 21,\n    /*\n        the following properties are defined and manipulated by the\n        optimizer -\n        TARGETBLOCK_PROP - the block referenced by a branch node\n        VARIABLE_PROP - the variable referenced by a BIND or NAME node\n        LASTUSE_PROP - that variable node is the last reference before\n                        a new def or the end of the block\n        ISNUMBER_PROP - this node generates code on Number children and\n                        delivers a Number result (as opposed to Objects)\n        DIRECTCALL_PROP - this call node should emit code to test the function\n                          object against the known class and call diret if it\n                          matches.\n    */\n\n        TARGETBLOCK_PROP  = 22,\n        VARIABLE_PROP     = 23,\n        LASTUSE_PROP      = 24,\n        ISNUMBER_PROP     = 25,\n        DIRECTCALL_PROP   = 26,\n\n        SPECIALCALL_PROP  = 27,\n        DEBUGSOURCE_PROP  = 28,\n        JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n        VAR_ARGS_NAME     = 29,     // the name node is a variable length\n                                    // argument placeholder. It can never be\n                                    // used in conjunction with JSDOC_INFO_PROP.\n        SKIP_INDEXES_PROP  = 30,    // array of skipped indexes of array literal\n        INCRDECR_PROP      = 31,    // pre or post type of increment/decrement\n        MEMBER_TYPE_PROP   = 32,    // type of element access operation\n        NAME_PROP          = 33,    // property name\n        PARENTHESIZED_PROP = 34,    // expression is parenthesized\n        QUOTED_PROP        = 35,    // set to indicate a quoted object lit key\n        OPT_ARG_NAME       = 36,    // The name node is an optional argument.\n        SYNTHETIC_BLOCK_PROP = 37,  // A synthetic block. Used to make\n                                    // processing simpler, and does not\n                                    // represent a real block in the source.\n        SOURCEFILE_PROP    = 38,    // Contains the path of the source file\n                                    // from which the current node was parsed.\n        EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                    // EMPTY nodes.\n        ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                    // renaming.\n        BRACELESS_TYPE     = 41,    // The type syntax without curly braces.\n        NO_SIDE_EFFECTS_CALL = 42,  // Function or constructor call has no\n                                    // side effects.\n        // Coding convention props\n        IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n        IS_OPTIONAL_PARAM  = 44,    // The parameter is optional.\n        IS_VAR_ARGS_PARAM  = 45,    // The parameter is a var_args.\n        IS_NAMESPACE       = 46,    // The variable creates a namespace.\n        IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                    // probably generated from Java code, and\n                                    // should be resolved to the proper\n                                    // overload if possible.\n        DIRECTIVES         = 48,    // The ES5 directives on this node.\n        DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                    // indirect calls to eval.\n        LAST_PROP          = 49;",
        "begin_line": 67,
        "end_line": 153,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.BOTH",
        "snippet": "    public static final int\n        BOTH = 0,\n        LEFT = 1,\n        RIGHT = 2;",
        "begin_line": 157,
        "end_line": 160,
        "comment": " which of the children are Number types"
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.LEFT",
        "snippet": "    public static final int\n        BOTH = 0,\n        LEFT = 1,\n        RIGHT = 2;",
        "begin_line": 157,
        "end_line": 160,
        "comment": " which of the children are Number types"
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.RIGHT",
        "snippet": "    public static final int\n        BOTH = 0,\n        LEFT = 1,\n        RIGHT = 2;",
        "begin_line": 157,
        "end_line": 160,
        "comment": " which of the children are Number types"
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.NON_SPECIALCALL",
        "snippet": "    public static final int    // values for SPECIALCALL_PROP\n        NON_SPECIALCALL  = 0,\n        SPECIALCALL_EVAL = 1,\n        SPECIALCALL_WITH = 2;",
        "begin_line": 162,
        "end_line": 165,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.SPECIALCALL_EVAL",
        "snippet": "    public static final int    // values for SPECIALCALL_PROP\n        NON_SPECIALCALL  = 0,\n        SPECIALCALL_EVAL = 1,\n        SPECIALCALL_WITH = 2;",
        "begin_line": 162,
        "end_line": 165,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.SPECIALCALL_WITH",
        "snippet": "    public static final int    // values for SPECIALCALL_PROP\n        NON_SPECIALCALL  = 0,\n        SPECIALCALL_EVAL = 1,\n        SPECIALCALL_WITH = 2;",
        "begin_line": 162,
        "end_line": 165,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.DECR_FLAG",
        "snippet": "    public static final int   // flags for INCRDECR_PROP\n        DECR_FLAG = 0x1,\n        POST_FLAG = 0x2;",
        "begin_line": 167,
        "end_line": 169,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.POST_FLAG",
        "snippet": "    public static final int   // flags for INCRDECR_PROP\n        DECR_FLAG = 0x1,\n        POST_FLAG = 0x2;",
        "begin_line": 167,
        "end_line": 169,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.PROPERTY_FLAG",
        "snippet": "    public static final int   // flags for MEMBER_TYPE_PROP\n        PROPERTY_FLAG    = 0x1, // property access: element is valid name\n        ATTRIBUTE_FLAG   = 0x2, // x.@y or x..@y\n        DESCENDANTS_FLAG = 0x4; // x..y or x..@i",
        "begin_line": 171,
        "end_line": 174,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.ATTRIBUTE_FLAG",
        "snippet": "    public static final int   // flags for MEMBER_TYPE_PROP\n        PROPERTY_FLAG    = 0x1, // property access: element is valid name\n        ATTRIBUTE_FLAG   = 0x2, // x.@y or x..@y\n        DESCENDANTS_FLAG = 0x4; // x..y or x..@i",
        "begin_line": 171,
        "end_line": 174,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.DESCENDANTS_FLAG",
        "snippet": "    public static final int   // flags for MEMBER_TYPE_PROP\n        PROPERTY_FLAG    = 0x1, // property access: element is valid name\n        ATTRIBUTE_FLAG   = 0x2, // x.@y or x..@y\n        DESCENDANTS_FLAG = 0x4; // x..y or x..@i",
        "begin_line": 171,
        "end_line": 174,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.NumberNode",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.NumberNode.serialVersionUID",
        "snippet": "        private static final long serialVersionUID = 1L;",
        "begin_line": 245,
        "end_line": 245,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.NumberNode",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.NumberNode.number",
        "snippet": "        private double number;",
        "begin_line": 270,
        "end_line": 270,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.StringNode",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.StringNode.serialVersionUID",
        "snippet": "        private static final long serialVersionUID = 1L;",
        "begin_line": 275,
        "end_line": 275,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.StringNode",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.StringNode.str",
        "snippet": "        private String str;",
        "begin_line": 332,
        "end_line": 332,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.PropListItem",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.PropListItem.serialVersionUID",
        "snippet": "        private static final long serialVersionUID = 1L;",
        "begin_line": 337,
        "end_line": 337,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.PropListItem",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.PropListItem.next",
        "snippet": "        PropListItem next;",
        "begin_line": 339,
        "end_line": 339,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.PropListItem",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.PropListItem.type",
        "snippet": "        int type;",
        "begin_line": 340,
        "end_line": 340,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.PropListItem",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.PropListItem.intValue",
        "snippet": "        int intValue;",
        "begin_line": 341,
        "end_line": 341,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.PropListItem",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.PropListItem.objectValue",
        "snippet": "        Object objectValue;",
        "begin_line": 342,
        "end_line": 342,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.type",
        "snippet": "    int type;              // type of the node; Token.NAME for example",
        "begin_line": 1039,
        "end_line": 1039,
        "comment": " type of the node; Token.NAME for example"
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.next",
        "snippet": "    Node next;             // next sibling",
        "begin_line": 1040,
        "end_line": 1040,
        "comment": " next sibling"
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.first",
        "snippet": "    private Node first;    // first element of a linked list of children",
        "begin_line": 1041,
        "end_line": 1041,
        "comment": " first element of a linked list of children"
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.last",
        "snippet": "    private Node last;     // last element of a linked list of children",
        "begin_line": 1042,
        "end_line": 1042,
        "comment": " last element of a linked list of children"
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.propListHead",
        "snippet": "    private PropListItem propListHead;",
        "begin_line": 1050,
        "end_line": 1050,
        "comment": "\n     * Linked list of properties. Since vast majority of nodes would have\n     * no more then 2 properties, linked list saves memory and provides\n     * fast lookup. If this does not holds, propListHead can be replaced\n     * by UintMap.\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.COLUMN_BITS",
        "snippet": "    public static final int COLUMN_BITS = 12;",
        "begin_line": 1060,
        "end_line": 1060,
        "comment": "\n     * COLUMN_BITS represents how many of the lower-order bits of\n     * sourcePosition are reserved for storing the column number.\n     * Bits above these store the line number.\n     * This gives us decent position information for everything except\n     * files already passed through a minimizer, where lines might\n     * be longer than 4096 characters.\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER",
        "snippet": "    public static final int MAX_COLUMN_NUMBER = (1 << COLUMN_BITS) - 1;",
        "begin_line": 1067,
        "end_line": 1067,
        "comment": "\n     * MAX_COLUMN_NUMBER represents the maximum column number that can\n     * be represented.  JSCompiler's modifications to Rhino cause all\n     * tokens located beyond the maximum column to MAX_COLUMN_NUMBER.\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.COLUMN_MASK",
        "snippet": "    public static final int COLUMN_MASK = MAX_COLUMN_NUMBER;",
        "begin_line": 1074,
        "end_line": 1074,
        "comment": "\n     * COLUMN_MASK stores a value where bits storing the column number\n     * are set, and bits storing the line are not set.  It's handy for\n     * separating column number from line number.\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.sourcePosition",
        "snippet": "    private int sourcePosition;",
        "begin_line": 1082,
        "end_line": 1082,
        "comment": "\n     * Source position of this node. The position is encoded with the\n     * column number in the low 12 bits of the integer, and the line\n     * number in the rest.  Create some handy constants so we can change this\n     * size if we want.\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.jsType",
        "snippet": "    private JSType jsType;",
        "begin_line": 1084,
        "end_line": 1084,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.parent",
        "snippet": "    private Node parent;",
        "begin_line": 1086,
        "end_line": 1086,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.SiblingNodeIterable",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.SiblingNodeIterable.start",
        "snippet": "        private final Node start;",
        "begin_line": 1182,
        "end_line": 1182,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.SiblingNodeIterable",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.SiblingNodeIterable.current",
        "snippet": "        private Node current;",
        "begin_line": 1183,
        "end_line": 1183,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.SiblingNodeIterable",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.SiblingNodeIterable.used",
        "snippet": "        private boolean used;",
        "begin_line": 1184,
        "end_line": 1184,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.AncestorIterable",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.AncestorIterable.cur",
        "snippet": "      private Node cur;",
        "begin_line": 1258,
        "end_line": 1258,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.NodeMismatch",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.NodeMismatch.nodeA",
        "snippet": "      final Node nodeA;",
        "begin_line": 2040,
        "end_line": 2040,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.NodeMismatch",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.NodeMismatch.nodeB",
        "snippet": "      final Node nodeB;",
        "begin_line": 2041,
        "end_line": 2041,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.options_",
        "snippet": "  CompilerOptions options_ = createDefaultOptions();",
        "begin_line": 62,
        "end_line": 62,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.passes",
        "snippet": "  private PassConfig passes = null;",
        "begin_line": 64,
        "end_line": 64,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.externs_",
        "snippet": "  private CompilerInput[] externs_;",
        "begin_line": 67,
        "end_line": 67,
        "comment": " The externs inputs"
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.modules_",
        "snippet": "  private JSModule[] modules_;",
        "begin_line": 70,
        "end_line": 70,
        "comment": " The JS source modules"
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.moduleGraph_",
        "snippet": "  private JSModuleGraph moduleGraph_;",
        "begin_line": 73,
        "end_line": 73,
        "comment": " The graph of the JS source modules"
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.inputs_",
        "snippet": "  private CompilerInput[] inputs_;",
        "begin_line": 76,
        "end_line": 76,
        "comment": " The JS source inputs"
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.errorManager",
        "snippet": "  private ErrorManager errorManager;",
        "begin_line": 79,
        "end_line": 79,
        "comment": " error manager to which error management is delegated"
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.symbolTable",
        "snippet": "  private SymbolTable symbolTable = null;",
        "begin_line": 82,
        "end_line": 82,
        "comment": " Cached data structures."
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.externsRoot",
        "snippet": "  Node externsRoot;",
        "begin_line": 85,
        "end_line": 85,
        "comment": " Parse tree root nodes"
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.jsRoot",
        "snippet": "  Node jsRoot;",
        "begin_line": 86,
        "end_line": 86,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.externAndJsRoot",
        "snippet": "  Node externAndJsRoot;",
        "begin_line": 87,
        "end_line": 87,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.inputsByName_",
        "snippet": "  private Map<String, CompilerInput> inputsByName_;",
        "begin_line": 89,
        "end_line": 89,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.sourceMap_",
        "snippet": "  private SourceMap sourceMap_;",
        "begin_line": 92,
        "end_line": 92,
        "comment": " The source code map "
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.externExports_",
        "snippet": "  private String externExports_ = null;",
        "begin_line": 95,
        "end_line": 95,
        "comment": " The externs created from the exports.  "
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.uniqueNameId",
        "snippet": "  private int uniqueNameId = 0;",
        "begin_line": 101,
        "end_line": 101,
        "comment": "\n   * Ids for function inlining so that each declared name remains\n   * unique.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.normalized",
        "snippet": "  private boolean normalized = false;",
        "begin_line": 107,
        "end_line": 107,
        "comment": "\n   * Whether the optional \"normalization\" pass has been run.  Passes that\n   * depend on the assumptions made there should check this value.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.useThreads",
        "snippet": "  private boolean useThreads = true;",
        "begin_line": 110,
        "end_line": 110,
        "comment": " Whether to use threads. "
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.functionInformationMap_",
        "snippet": "  private FunctionInformationMap functionInformationMap_;",
        "begin_line": 113,
        "end_line": 113,
        "comment": " The function information map "
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.debugLog_",
        "snippet": "  private final StringBuilder debugLog_ = new StringBuilder();",
        "begin_line": 116,
        "end_line": 116,
        "comment": " Debugging information "
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.defaultCodingConvention",
        "snippet": "  CodingConvention defaultCodingConvention = new GoogleCodingConvention();",
        "begin_line": 119,
        "end_line": 119,
        "comment": " Detects Google-specific coding conventions. "
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.typeRegistry",
        "snippet": "  private JSTypeRegistry typeRegistry;",
        "begin_line": 121,
        "end_line": 121,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.abstractInterpreter",
        "snippet": "  private ReverseAbstractInterpreter abstractInterpreter;",
        "begin_line": 123,
        "end_line": 123,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.typeValidator",
        "snippet": "  private final TypeValidator typeValidator;",
        "begin_line": 124,
        "end_line": 124,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.tracker",
        "snippet": "  public PerformanceTracker tracker;",
        "begin_line": 126,
        "end_line": 126,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.oldErrorReporter",
        "snippet": "  private final com.google.javascript.rhino.ErrorReporter oldErrorReporter =\n      RhinoErrorReporter.forOldRhino(this);",
        "begin_line": 129,
        "end_line": 130,
        "comment": " The oldErrorReporter exists so we can get errors from the JSTypeRegistry."
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.defaultErrorReporter",
        "snippet": "  private final ErrorReporter defaultErrorReporter =\n      RhinoErrorReporter.forNewRhino(this);",
        "begin_line": 133,
        "end_line": 134,
        "comment": " This error reporter gets the messages from the current Rhino parser."
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.OPTIMIZE_LOOP_ERROR",
        "snippet": "  public static final DiagnosticType OPTIMIZE_LOOP_ERROR = DiagnosticType.error(\n      \"JSC_OPTIMIZE_LOOP_ERROR\",\n      \"Exceeded max number of optimization iterations: {0}\");",
        "begin_line": 137,
        "end_line": 139,
        "comment": " Error strings used for reporting JSErrors "
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.MOTION_ITERATIONS_ERROR",
        "snippet": "  public static final DiagnosticType MOTION_ITERATIONS_ERROR =\n      DiagnosticType.error(\"JSC_OPTIMIZE_LOOP_ERROR\",\n          \"Exceeded max number of code motion iterations: {0}\");",
        "begin_line": 140,
        "end_line": 142,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.COMPILER_STACK_SIZE",
        "snippet": "  private static final long COMPILER_STACK_SIZE = 1048576L;",
        "begin_line": 144,
        "end_line": 144,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.logger_",
        "snippet": "  private static final Logger logger_ =\n      Logger.getLogger(\"com.google.javascript.jscomp\");",
        "begin_line": 152,
        "end_line": 153,
        "comment": "\n   * Logger for the whole com.google.javascript.jscomp domain -\n   * setting configuration for this logger affects all loggers\n   *  in other classes within the compiler.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.MODULE_DEPENDENCY_ERROR",
        "snippet": "  static final DiagnosticType MODULE_DEPENDENCY_ERROR =\n      DiagnosticType.error(\"JSC_MODULE_DEPENDENCY_ERROR\",\n          \"Bad dependency: {0} -> {1}. \"\n              + \"Modules must be listed in dependency order.\");",
        "begin_line": 233,
        "end_line": 236,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.EMPTY_MODULE_LIST_ERROR",
        "snippet": "  private static final DiagnosticType EMPTY_MODULE_LIST_ERROR =\n      DiagnosticType.error(\"JSC_EMPTY_MODULE_LIST_ERROR\",\n          \"At least one module must be provided\");",
        "begin_line": 285,
        "end_line": 287,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.EMPTY_ROOT_MODULE_ERROR",
        "snippet": "  private static final DiagnosticType EMPTY_ROOT_MODULE_ERROR =\n      DiagnosticType.error(\"JSC_EMPTY_ROOT_MODULE_ERROR\",\n          \"Root module '{0}' must contain at least one source code input\");",
        "begin_line": 289,
        "end_line": 291,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.DUPLICATE_INPUT_IN_MODULES",
        "snippet": "  static final DiagnosticType DUPLICATE_INPUT_IN_MODULES =\n      DiagnosticType.error(\"JSC_DUPLICATE_INPUT_IN_MODULES_ERROR\",\n          \"Two modules cannot contain the same input, but module {0} and {1} \"\n              + \"both include \\\"{2}\\\"\");",
        "begin_line": 306,
        "end_line": 309,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.DUPLICATE_INPUT",
        "snippet": "  static final DiagnosticType DUPLICATE_INPUT =\n      DiagnosticType.error(\"JSC_DUPLICATE_INPUT\", \"Duplicate input: {0}\");",
        "begin_line": 350,
        "end_line": 351,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.DUPLICATE_EXTERN_INPUT",
        "snippet": "  static final DiagnosticType DUPLICATE_EXTERN_INPUT =\n      DiagnosticType.error(\"JSC_DUPLICATE_EXTERN_INPUT\",\n          \"Duplicate extern input: {0}\");",
        "begin_line": 352,
        "end_line": 354,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.sanityCheck",
        "snippet": "  private final PassFactory sanityCheck =\n      new PassFactory(\"sanityCheck\", false) {\n    @Override\n    protected CompilerPass createInternal(AbstractCompiler compiler) {\n      return new SanityCheck(compiler);\n    }\n  };",
        "begin_line": 654,
        "end_line": 660,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.currentTracer",
        "snippet": "  private Tracer currentTracer = null;",
        "begin_line": 713,
        "end_line": 713,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.currentPassName",
        "snippet": "  private String currentPassName = null;",
        "begin_line": 714,
        "end_line": 714,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CodeBuilder",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.CodeBuilder.sb",
        "snippet": "    private final StringBuilder sb = new StringBuilder();",
        "begin_line": 1237,
        "end_line": 1237,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CodeBuilder",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.CodeBuilder.lineCount",
        "snippet": "    private int lineCount = 0;",
        "begin_line": 1238,
        "end_line": 1238,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.recentChange",
        "snippet": "  protected final CodeChangeHandler.RecentChange recentChange =\n      new CodeChangeHandler.RecentChange();",
        "begin_line": 1380,
        "end_line": 1381,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.codeChangeHandlers",
        "snippet": "  private final List<CodeChangeHandler> codeChangeHandlers =\n      Lists.<CodeChangeHandler>newArrayList();",
        "begin_line": 1382,
        "end_line": 1383,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.IntermediateState",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.IntermediateState.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 1L;",
        "begin_line": 1613,
        "end_line": 1613,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.IntermediateState",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.IntermediateState.externsRoot",
        "snippet": "    Node externsRoot;",
        "begin_line": 1615,
        "end_line": 1615,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.IntermediateState",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.IntermediateState.jsRoot",
        "snippet": "    private Node jsRoot;",
        "begin_line": 1616,
        "end_line": 1616,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.IntermediateState",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.IntermediateState.externs",
        "snippet": "    private CompilerInput[] externs;",
        "begin_line": 1617,
        "end_line": 1617,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.IntermediateState",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.IntermediateState.inputs",
        "snippet": "    private CompilerInput[] inputs;",
        "begin_line": 1618,
        "end_line": 1618,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.IntermediateState",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.IntermediateState.modules",
        "snippet": "    private JSModule[] modules;",
        "begin_line": 1619,
        "end_line": 1619,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.IntermediateState",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.IntermediateState.passConfigState",
        "snippet": "    private PassConfig.State passConfigState;",
        "begin_line": 1620,
        "end_line": 1620,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.IntermediateState",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.IntermediateState.typeRegistry",
        "snippet": "    private JSTypeRegistry typeRegistry;",
        "begin_line": 1621,
        "end_line": 1621,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.IntermediateState",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.IntermediateState.normalized",
        "snippet": "    private boolean normalized;",
        "begin_line": 1622,
        "end_line": 1622,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "signature": "com.google.javascript.rhino.jstype.JSType.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 1L;",
        "begin_line": 72,
        "end_line": 72,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "signature": "com.google.javascript.rhino.jstype.JSType.resolved",
        "snippet": "  private boolean resolved = false;",
        "begin_line": 74,
        "end_line": 74,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "signature": "com.google.javascript.rhino.jstype.JSType.resolveResult",
        "snippet": "  private JSType resolveResult = null;",
        "begin_line": 75,
        "end_line": 75,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "signature": "com.google.javascript.rhino.jstype.JSType.UNKNOWN_NAME",
        "snippet": "  public static final String UNKNOWN_NAME =\n      \"Unknown class name\";",
        "begin_line": 77,
        "end_line": 78,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "signature": "com.google.javascript.rhino.jstype.JSType.NOT_A_CLASS",
        "snippet": "  public static final String NOT_A_CLASS =\n      \"Not declared as a constructor\";",
        "begin_line": 80,
        "end_line": 81,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "signature": "com.google.javascript.rhino.jstype.JSType.NOT_A_TYPE",
        "snippet": "  public static final String NOT_A_TYPE =\n      \"Not declared as a type name\";",
        "begin_line": 83,
        "end_line": 84,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "signature": "com.google.javascript.rhino.jstype.JSType.EMPTY_TYPE_COMPONENT",
        "snippet": "  public static final String EMPTY_TYPE_COMPONENT =\n      \"Named type with empty name component\";",
        "begin_line": 86,
        "end_line": 87,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "signature": "com.google.javascript.rhino.jstype.JSType.ALPHA",
        "snippet": "  static final Comparator<JSType> ALPHA = new Comparator<JSType>() {\n    public int compare(JSType t1, JSType t2) {\n      return t1.toString().compareTo(t2.toString());\n    }\n  };",
        "begin_line": 94,
        "end_line": 98,
        "comment": "\n   * Total ordering on types based on their textual representation.\n   * This is used to have a deterministic output of the toString\n   * method of the union type since this output is used in tests.\n   "
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "signature": "com.google.javascript.rhino.jstype.JSType.ENUMDECL",
        "snippet": "  public static final int ENUMDECL = 1;",
        "begin_line": 101,
        "end_line": 101,
        "comment": " A flag set on enum definition tree nodes"
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "signature": "com.google.javascript.rhino.jstype.JSType.NOT_ENUMDECL",
        "snippet": "  public static final int NOT_ENUMDECL = 0;",
        "begin_line": 102,
        "end_line": 102,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "signature": "com.google.javascript.rhino.jstype.JSType.registry",
        "snippet": "  final JSTypeRegistry registry;",
        "begin_line": 104,
        "end_line": 104,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.TypePair",
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "signature": "com.google.javascript.rhino.jstype.TypePair.typeA",
        "snippet": "    public final JSType typeA;",
        "begin_line": 896,
        "end_line": 896,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.TypePair",
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "signature": "com.google.javascript.rhino.jstype.TypePair.typeB",
        "snippet": "    public final JSType typeB;",
        "begin_line": 897,
        "end_line": 897,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.ScriptOrFnNode",
        "src_path": "src/com/google/javascript/rhino/ScriptOrFnNode.java",
        "signature": "com.google.javascript.rhino.ScriptOrFnNode.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 1L;",
        "begin_line": 44,
        "end_line": 44,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.ScriptOrFnNode",
        "src_path": "src/com/google/javascript/rhino/ScriptOrFnNode.java",
        "signature": "com.google.javascript.rhino.ScriptOrFnNode.NO_DUPLICATE",
        "snippet": "    public static final int NO_DUPLICATE = 1;",
        "begin_line": 172,
        "end_line": 172,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.ScriptOrFnNode",
        "src_path": "src/com/google/javascript/rhino/ScriptOrFnNode.java",
        "signature": "com.google.javascript.rhino.ScriptOrFnNode.DUPLICATE_VAR",
        "snippet": "    public static final int DUPLICATE_VAR = 0;",
        "begin_line": 173,
        "end_line": 173,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.ScriptOrFnNode",
        "src_path": "src/com/google/javascript/rhino/ScriptOrFnNode.java",
        "signature": "com.google.javascript.rhino.ScriptOrFnNode.DUPLICATE_PARAMETER",
        "snippet": "    public static final int DUPLICATE_PARAMETER = -1;",
        "begin_line": 174,
        "end_line": 174,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.ScriptOrFnNode",
        "src_path": "src/com/google/javascript/rhino/ScriptOrFnNode.java",
        "signature": "com.google.javascript.rhino.ScriptOrFnNode.DUPLICATE_CONST",
        "snippet": "    public static final int DUPLICATE_CONST = -2;",
        "begin_line": 175,
        "end_line": 175,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.ScriptOrFnNode",
        "src_path": "src/com/google/javascript/rhino/ScriptOrFnNode.java",
        "signature": "com.google.javascript.rhino.ScriptOrFnNode.encodedSourceStart",
        "snippet": "    private int encodedSourceStart;",
        "begin_line": 247,
        "end_line": 247,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.ScriptOrFnNode",
        "src_path": "src/com/google/javascript/rhino/ScriptOrFnNode.java",
        "signature": "com.google.javascript.rhino.ScriptOrFnNode.encodedSourceEnd",
        "snippet": "    private int encodedSourceEnd;",
        "begin_line": 248,
        "end_line": 248,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.ScriptOrFnNode",
        "src_path": "src/com/google/javascript/rhino/ScriptOrFnNode.java",
        "signature": "com.google.javascript.rhino.ScriptOrFnNode.sourceName",
        "snippet": "    private String sourceName;",
        "begin_line": 249,
        "end_line": 249,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.ScriptOrFnNode",
        "src_path": "src/com/google/javascript/rhino/ScriptOrFnNode.java",
        "signature": "com.google.javascript.rhino.ScriptOrFnNode.baseLineno",
        "snippet": "    private int baseLineno = -1;",
        "begin_line": 250,
        "end_line": 250,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.ScriptOrFnNode",
        "src_path": "src/com/google/javascript/rhino/ScriptOrFnNode.java",
        "signature": "com.google.javascript.rhino.ScriptOrFnNode.endLineno",
        "snippet": "    private int endLineno = -1;",
        "begin_line": 251,
        "end_line": 251,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.ScriptOrFnNode",
        "src_path": "src/com/google/javascript/rhino/ScriptOrFnNode.java",
        "signature": "com.google.javascript.rhino.ScriptOrFnNode.functions",
        "snippet": "    private ObjArray functions;",
        "begin_line": 253,
        "end_line": 253,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.ScriptOrFnNode",
        "src_path": "src/com/google/javascript/rhino/ScriptOrFnNode.java",
        "signature": "com.google.javascript.rhino.ScriptOrFnNode.regexps",
        "snippet": "    private ObjArray regexps;",
        "begin_line": 255,
        "end_line": 255,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.ScriptOrFnNode",
        "src_path": "src/com/google/javascript/rhino/ScriptOrFnNode.java",
        "signature": "com.google.javascript.rhino.ScriptOrFnNode.itsVariables",
        "snippet": "    private ObjArray itsVariables = new ObjArray();",
        "begin_line": 258,
        "end_line": 258,
        "comment": " a list of the formal parameters and local variables"
    },
    {
        "class_name": "com.google.javascript.rhino.ScriptOrFnNode",
        "src_path": "src/com/google/javascript/rhino/ScriptOrFnNode.java",
        "signature": "com.google.javascript.rhino.ScriptOrFnNode.itsConst",
        "snippet": "    private ObjArray itsConst = new ObjArray();",
        "begin_line": 259,
        "end_line": 259,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.ScriptOrFnNode",
        "src_path": "src/com/google/javascript/rhino/ScriptOrFnNode.java",
        "signature": "com.google.javascript.rhino.ScriptOrFnNode.itsVariableNames",
        "snippet": "    private ObjToIntMap itsVariableNames = new ObjToIntMap(11);",
        "begin_line": 262,
        "end_line": 262,
        "comment": " mapping from name to index in list"
    },
    {
        "class_name": "com.google.javascript.rhino.ScriptOrFnNode",
        "src_path": "src/com/google/javascript/rhino/ScriptOrFnNode.java",
        "signature": "com.google.javascript.rhino.ScriptOrFnNode.varStart",
        "snippet": "    private int varStart;               // index in list of first variable",
        "begin_line": 264,
        "end_line": 264,
        "comment": " index in list of first variable"
    },
    {
        "class_name": "com.google.javascript.rhino.ScriptOrFnNode",
        "src_path": "src/com/google/javascript/rhino/ScriptOrFnNode.java",
        "signature": "com.google.javascript.rhino.ScriptOrFnNode.compilerData",
        "snippet": "    private Object compilerData;",
        "begin_line": 266,
        "end_line": 266,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.NullType",
        "src_path": "src/com/google/javascript/rhino/jstype/NullType.java",
        "signature": "com.google.javascript.rhino.jstype.NullType.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 1L;",
        "begin_line": 52,
        "end_line": 52,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeTraversal",
        "src_path": "src/com/google/javascript/jscomp/NodeTraversal.java",
        "signature": "com.google.javascript.jscomp.NodeTraversal.compiler",
        "snippet": "  private final AbstractCompiler compiler;",
        "begin_line": 41,
        "end_line": 41,
        "comment": " Package protected for tests"
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeTraversal",
        "src_path": "src/com/google/javascript/jscomp/NodeTraversal.java",
        "signature": "com.google.javascript.jscomp.NodeTraversal.callback",
        "snippet": "  private final Callback callback;",
        "begin_line": 42,
        "end_line": 42,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeTraversal",
        "src_path": "src/com/google/javascript/jscomp/NodeTraversal.java",
        "signature": "com.google.javascript.jscomp.NodeTraversal.curNode",
        "snippet": "  private Node curNode;",
        "begin_line": 45,
        "end_line": 45,
        "comment": " Contains the current node"
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeTraversal",
        "src_path": "src/com/google/javascript/jscomp/NodeTraversal.java",
        "signature": "com.google.javascript.jscomp.NodeTraversal.NODE_TRAVERSAL_ERROR",
        "snippet": "  public static final DiagnosticType NODE_TRAVERSAL_ERROR =\n      DiagnosticType.error(\"JSC_NODE_TRAVERSAL_ERROR\", \"{0}\");",
        "begin_line": 47,
        "end_line": 48,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeTraversal",
        "src_path": "src/com/google/javascript/jscomp/NodeTraversal.java",
        "signature": "com.google.javascript.jscomp.NodeTraversal.scopes",
        "snippet": "  private final Deque<Scope> scopes = new ArrayDeque<Scope>();",
        "begin_line": 55,
        "end_line": 55,
        "comment": "\n   * Stack containing the Scopes that have been created. The Scope objects\n   * are lazily created; so the {@code scopeRoots} stack contains the\n   * Nodes for all Scopes that have not been created yet.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeTraversal",
        "src_path": "src/com/google/javascript/jscomp/NodeTraversal.java",
        "signature": "com.google.javascript.jscomp.NodeTraversal.scopeRoots",
        "snippet": "  private final Deque<Node> scopeRoots = new ArrayDeque<Node>();",
        "begin_line": 61,
        "end_line": 61,
        "comment": "\n   * A stack of scope roots. All scopes that have not been created\n   * are represented in this Deque.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeTraversal",
        "src_path": "src/com/google/javascript/jscomp/NodeTraversal.java",
        "signature": "com.google.javascript.jscomp.NodeTraversal.cfgs",
        "snippet": "  Deque<ControlFlowGraph<Node>> cfgs = new LinkedList<ControlFlowGraph<Node>>();",
        "begin_line": 70,
        "end_line": 70,
        "comment": "\n   * Stack of control flow graphs (CFG). There is one CFG per scope. CFGs\n   * are lazily populated: elements are {@code null} until requested by\n   * {@link #getControlFlowGraph()}. Note that {@link ArrayDeque} does not allow\n   * {@code null} elements, so {@link LinkedList} is used instead.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeTraversal",
        "src_path": "src/com/google/javascript/jscomp/NodeTraversal.java",
        "signature": "com.google.javascript.jscomp.NodeTraversal.sourceName",
        "snippet": "  private String sourceName;",
        "begin_line": 73,
        "end_line": 73,
        "comment": " The current source file name "
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeTraversal",
        "src_path": "src/com/google/javascript/jscomp/NodeTraversal.java",
        "signature": "com.google.javascript.jscomp.NodeTraversal.scopeCreator",
        "snippet": "  private ScopeCreator scopeCreator;",
        "begin_line": 76,
        "end_line": 76,
        "comment": " The scope creator "
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeTraversal",
        "src_path": "src/com/google/javascript/jscomp/NodeTraversal.java",
        "signature": "com.google.javascript.jscomp.NodeTraversal.scopeCallback",
        "snippet": "  private ScopedCallback scopeCallback;",
        "begin_line": 79,
        "end_line": 79,
        "comment": " Possible callback for scope entry and exist *"
    },
    {
        "class_name": "com.google.javascript.jscomp.AbstractNodeTypePruningCallback",
        "src_path": "src/com/google/javascript/jscomp/NodeTraversal.java",
        "signature": "com.google.javascript.jscomp.AbstractNodeTypePruningCallback.nodeTypes",
        "snippet": "    private final Set<Integer> nodeTypes;",
        "begin_line": 168,
        "end_line": 168,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.AbstractNodeTypePruningCallback",
        "src_path": "src/com/google/javascript/jscomp/NodeTraversal.java",
        "signature": "com.google.javascript.jscomp.AbstractNodeTypePruningCallback.include",
        "snippet": "    private final boolean include;",
        "begin_line": 169,
        "end_line": 169,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeTraversal",
        "src_path": "src/com/google/javascript/jscomp/NodeTraversal.java",
        "signature": "com.google.javascript.jscomp.NodeTraversal.MISSING_SOURCE",
        "snippet": "  private static final String MISSING_SOURCE = \"[source unknown]\";",
        "begin_line": 288,
        "end_line": 288,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.StringType",
        "src_path": "src/com/google/javascript/rhino/jstype/StringType.java",
        "signature": "com.google.javascript.rhino.jstype.StringType.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 1L;",
        "begin_line": 51,
        "end_line": 51,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.NoObjectType",
        "src_path": "src/com/google/javascript/rhino/jstype/NoObjectType.java",
        "signature": "com.google.javascript.rhino.jstype.NoObjectType.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 1L;",
        "begin_line": 67,
        "end_line": 67,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.NoObjectType",
        "src_path": "src/com/google/javascript/rhino/jstype/NoObjectType.java",
        "signature": "com.google.javascript.rhino.jstype.NoObjectType.leastSupertypeVisitor",
        "snippet": "  private final Visitor<JSType> leastSupertypeVisitor =\n      new LeastSupertypeVisitor();",
        "begin_line": 72,
        "end_line": 73,
        "comment": "\n   * Visitor for {@link NoObjectType#getLeastSupertype(JSType)}.\n   "
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.LeastSupertypeVisitor",
        "src_path": "src/com/google/javascript/rhino/jstype/NoObjectType.java",
        "signature": "com.google.javascript.rhino.jstype.LeastSupertypeVisitor.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 1L;",
        "begin_line": 76,
        "end_line": 76,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.NoObjectType",
        "src_path": "src/com/google/javascript/rhino/jstype/NoObjectType.java",
        "signature": "com.google.javascript.rhino.jstype.NoObjectType.greatestSubtypeVisitor",
        "snippet": "  private final Visitor<JSType> greatestSubtypeVisitor =\n      new GreatestSupertypeVisitor();",
        "begin_line": 143,
        "end_line": 144,
        "comment": "\n   * Visitor for {@link NoObjectType#getGreatestSubtype(JSType)}.\n   "
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.GreatestSupertypeVisitor",
        "src_path": "src/com/google/javascript/rhino/jstype/NoObjectType.java",
        "signature": "com.google.javascript.rhino.jstype.GreatestSupertypeVisitor.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 1L;",
        "begin_line": 148,
        "end_line": 148,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.JSSourceFile",
        "src_path": "src/com/google/javascript/jscomp/JSSourceFile.java",
        "signature": "com.google.javascript.jscomp.JSSourceFile.referenced",
        "snippet": "  private SourceFile referenced;",
        "begin_line": 69,
        "end_line": 69,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeTypeNormalizer",
        "src_path": "src/com/google/javascript/jscomp/NodeTypeNormalizer.java",
        "signature": "com.google.javascript.jscomp.NodeTypeNormalizer.assertOnChange",
        "snippet": "  private final boolean assertOnChange;",
        "begin_line": 29,
        "end_line": 29,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserRunner",
        "src_path": "src/com/google/javascript/jscomp/parsing/ParserRunner.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserRunner.configResource",
        "snippet": "  private static final String configResource =\n      \"com.google.javascript.jscomp.parsing.ParserConfig\";",
        "begin_line": 37,
        "end_line": 38,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserRunner",
        "src_path": "src/com/google/javascript/jscomp/parsing/ParserRunner.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserRunner.annotationNames",
        "snippet": "  private static Set<String> annotationNames = null;",
        "begin_line": 40,
        "end_line": 40,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DiagnosticGroups",
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroups.java",
        "signature": "com.google.javascript.jscomp.DiagnosticGroups.groupsByName",
        "snippet": "  private final static Map<String, DiagnosticGroup> groupsByName =\n      Maps.newHashMap();",
        "begin_line": 33,
        "end_line": 34,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DiagnosticGroups",
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroups.java",
        "signature": "com.google.javascript.jscomp.DiagnosticGroups.DIAGNOSTIC_GROUP_NAMES",
        "snippet": "  static final String DIAGNOSTIC_GROUP_NAMES = \"accessControls, checkVars, \" +\n      \"checkTypes, deprecated, fileoverviewTags, invalidCasts, \" +\n      \"missingProperties, nonStandardJsDocs, strictModuleDepCheck, \" +\n      \"undefinedVars, unknownDefines, visibility\";",
        "begin_line": 50,
        "end_line": 53,
        "comment": " be listed on the command-line as an available option."
    },
    {
        "class_name": "com.google.javascript.jscomp.DiagnosticGroups",
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroups.java",
        "signature": "com.google.javascript.jscomp.DiagnosticGroups.DEPRECATED",
        "snippet": "  public static DiagnosticGroup DEPRECATED = DiagnosticGroups\n      .registerGroup(\"deprecated\",\n          new DiagnosticGroup(\n              CheckAccessControls.DEPRECATED_NAME,\n              CheckAccessControls.DEPRECATED_NAME_REASON,\n              CheckAccessControls.DEPRECATED_PROP,\n              CheckAccessControls.DEPRECATED_PROP_REASON,\n              CheckAccessControls.DEPRECATED_CLASS,\n              CheckAccessControls.DEPRECATED_CLASS_REASON));",
        "begin_line": 55,
        "end_line": 63,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DiagnosticGroups",
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroups.java",
        "signature": "com.google.javascript.jscomp.DiagnosticGroups.VISIBILITY",
        "snippet": "  public static DiagnosticGroup VISIBILITY = DiagnosticGroups\n      .registerGroup(\"visibility\",\n          new DiagnosticGroup(\n              CheckAccessControls.BAD_PRIVATE_GLOBAL_ACCESS,\n              CheckAccessControls.BAD_PRIVATE_PROPERTY_ACCESS,\n              CheckAccessControls.BAD_PROTECTED_PROPERTY_ACCESS,\n              CheckAccessControls.PRIVATE_OVERRIDE,\n              CheckAccessControls.VISIBILITY_MISMATCH));",
        "begin_line": 65,
        "end_line": 72,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DiagnosticGroups",
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroups.java",
        "signature": "com.google.javascript.jscomp.DiagnosticGroups.NON_STANDARD_JSDOC",
        "snippet": "  public static DiagnosticGroup NON_STANDARD_JSDOC =\n    DiagnosticGroups.registerGroup(\"nonStandardJsDocs\",\n          new DiagnosticGroup(RhinoErrorReporter.BAD_JSDOC_ANNOTATION));",
        "begin_line": 74,
        "end_line": 76,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DiagnosticGroups",
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroups.java",
        "signature": "com.google.javascript.jscomp.DiagnosticGroups.ACCESS_CONTROLS",
        "snippet": "  public static DiagnosticGroup ACCESS_CONTROLS =\n      DiagnosticGroups.registerGroup(\"accessControls\",\n          new DiagnosticGroup(DEPRECATED, VISIBILITY));",
        "begin_line": 78,
        "end_line": 80,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DiagnosticGroups",
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroups.java",
        "signature": "com.google.javascript.jscomp.DiagnosticGroups.INVALID_CASTS",
        "snippet": "  public static DiagnosticGroup INVALID_CASTS = DiagnosticGroups\n      .registerGroup(\"invalidCasts\",\n          new DiagnosticGroup(TypeValidator.INVALID_CAST));",
        "begin_line": 82,
        "end_line": 84,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DiagnosticGroups",
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroups.java",
        "signature": "com.google.javascript.jscomp.DiagnosticGroups.FILEOVERVIEW_JSDOC",
        "snippet": "  public static DiagnosticGroup FILEOVERVIEW_JSDOC =\n    DiagnosticGroups.registerGroup(\"fileoverviewTags\",\n          new DiagnosticGroup(RhinoErrorReporter.EXTRA_FILEOVERVIEW));",
        "begin_line": 86,
        "end_line": 88,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DiagnosticGroups",
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroups.java",
        "signature": "com.google.javascript.jscomp.DiagnosticGroups.STRICT_MODULE_DEP_CHECK",
        "snippet": "  public static DiagnosticGroup STRICT_MODULE_DEP_CHECK =\n    DiagnosticGroups.registerGroup(\"strictModuleDepCheck\",\n          new DiagnosticGroup(VarCheck.STRICT_MODULE_DEP_ERROR,\n                              CheckGlobalNames.STRICT_MODULE_DEP_QNAME));",
        "begin_line": 90,
        "end_line": 93,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DiagnosticGroups",
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroups.java",
        "signature": "com.google.javascript.jscomp.DiagnosticGroups.UNKNOWN_DEFINES",
        "snippet": "  public static DiagnosticGroup UNKNOWN_DEFINES =\n    DiagnosticGroups.registerGroup(\"unknownDefines\",\n          new DiagnosticGroup(ProcessDefines.UNKNOWN_DEFINE_WARNING));",
        "begin_line": 95,
        "end_line": 97,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DiagnosticGroups",
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroups.java",
        "signature": "com.google.javascript.jscomp.DiagnosticGroups.MISSING_PROPERTIES",
        "snippet": "  public static DiagnosticGroup MISSING_PROPERTIES =\n    DiagnosticGroups.registerGroup(\"missingProperties\",\n          new DiagnosticGroup(TypeCheck.INEXISTENT_PROPERTY));",
        "begin_line": 99,
        "end_line": 101,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DiagnosticGroups",
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroups.java",
        "signature": "com.google.javascript.jscomp.DiagnosticGroups.UNDEFINED_VARIABLES",
        "snippet": "  public static DiagnosticGroup UNDEFINED_VARIABLES =\n      DiagnosticGroups.registerGroup(\"undefinedVars\",\n          new DiagnosticGroup(VarCheck.UNDEFINED_VAR_ERROR));",
        "begin_line": 103,
        "end_line": 105,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DiagnosticGroups",
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroups.java",
        "signature": "com.google.javascript.jscomp.DiagnosticGroups.CHECK_VARIABLES",
        "snippet": "  public static DiagnosticGroup CHECK_VARIABLES =\n      DiagnosticGroups.registerGroup(\"checkVars\",\n          new DiagnosticGroup(\n              VarCheck.UNDEFINED_VAR_ERROR,\n              SyntacticScopeCreator.VAR_MULTIPLY_DECLARED_ERROR));",
        "begin_line": 107,
        "end_line": 111,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DiagnosticGroups",
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroups.java",
        "signature": "com.google.javascript.jscomp.DiagnosticGroups.CHECK_TYPES",
        "snippet": "  public static DiagnosticGroup CHECK_TYPES =\n      DiagnosticGroups.registerGroup(\"checkTypes\",\n          new DiagnosticGroup(\n              TypeValidator.ALL_DIAGNOSTICS,\n              TypeCheck.ALL_DIAGNOSTICS));",
        "begin_line": 113,
        "end_line": 117,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.AnonymousFunctionNamingPolicy",
        "src_path": "src/com/google/javascript/jscomp/AnonymousFunctionNamingPolicy.java",
        "signature": "com.google.javascript.jscomp.AnonymousFunctionNamingPolicy.reservedCharacters",
        "snippet": "  private final char[] reservedCharacters;",
        "begin_line": 45,
        "end_line": 45,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.UnknownType",
        "src_path": "src/com/google/javascript/rhino/jstype/UnknownType.java",
        "signature": "com.google.javascript.rhino.jstype.UnknownType.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 1L;",
        "begin_line": 54,
        "end_line": 54,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.UnknownType",
        "src_path": "src/com/google/javascript/rhino/jstype/UnknownType.java",
        "signature": "com.google.javascript.rhino.jstype.UnknownType.isChecked",
        "snippet": "  private final boolean isChecked;",
        "begin_line": 57,
        "end_line": 57,
        "comment": " See the explanation of checked unknown types in JSTypeNative."
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.printTrees",
        "snippet": "    public static final boolean printTrees = true;",
        "begin_line": 60,
        "end_line": 60,
        "comment": " debug flags"
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.printICode",
        "snippet": "    static final boolean printICode = false;",
        "begin_line": 61,
        "end_line": 61,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.printNames",
        "snippet": "    static final boolean printNames = printTrees || printICode;",
        "begin_line": 62,
        "end_line": 62,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.ERROR",
        "snippet": "    public final static int\n    // start enum\n        ERROR          = -1, // well-known as the only code < EOF\n        EOF            = 0,  // end of file token - (not EOF_CHAR)\n        EOL            = 1,  // end of line\n\n        // Interpreter reuses the following as bytecodes\n        FIRST_BYTECODE_TOKEN    = 2,\n\n        ENTERWITH      = 2,\n        LEAVEWITH      = 3,\n        RETURN         = 4,\n        GOTO           = 5,\n        IFEQ           = 6,\n        IFNE           = 7,\n        SETNAME        = 8,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        SETPROP        = 34,\n        GETELEM        = 35,\n        SETELEM        = 36,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        BINDNAME       = 48,\n        THROW          = 49,\n        RETHROW        = 50, // rethrow caught execetion: catch (e if ) use it\n        IN             = 51,\n        INSTANCEOF     = 52,\n        LOCAL_LOAD     = 53,\n        GETVAR         = 54,\n        SETVAR         = 55,\n        CATCH_SCOPE    = 56,\n        ENUM_INIT_KEYS = 57,\n        ENUM_INIT_VALUES = 58,\n        ENUM_NEXT      = 59,\n        ENUM_ID        = 60,\n        THISFN         = 61,\n        RETURN_RESULT  = 62, // to return prevoisly stored return result\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n        GET_REF        = 65, // *reference\n        SET_REF        = 66, // *reference    = something\n        DEL_REF        = 67, // delete reference\n        REF_CALL       = 68, // f(args)    = something or f(args)++\n        REF_SPECIAL    = 69, // reference for special properties like __proto\n\n        // For XML support:\n        DEFAULTNAMESPACE = 70, // default xml namespace =\n        ESCXMLATTR     = 71,\n        ESCXMLTEXT     = 72,\n        REF_MEMBER     = 73, // Reference for x.@y, x..y etc.\n        REF_NS_MEMBER  = 74, // Reference for x.ns::y, x..ns::y etc.\n        REF_NAME       = 75, // Reference for @y, @[y] etc.\n        REF_NS_NAME    = 76; // Reference for ns::y, @ns::y@[y] etc.",
        "begin_line": 69,
        "end_line": 154,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.EOF",
        "snippet": "    public final static int\n    // start enum\n        ERROR          = -1, // well-known as the only code < EOF\n        EOF            = 0,  // end of file token - (not EOF_CHAR)\n        EOL            = 1,  // end of line\n\n        // Interpreter reuses the following as bytecodes\n        FIRST_BYTECODE_TOKEN    = 2,\n\n        ENTERWITH      = 2,\n        LEAVEWITH      = 3,\n        RETURN         = 4,\n        GOTO           = 5,\n        IFEQ           = 6,\n        IFNE           = 7,\n        SETNAME        = 8,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        SETPROP        = 34,\n        GETELEM        = 35,\n        SETELEM        = 36,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        BINDNAME       = 48,\n        THROW          = 49,\n        RETHROW        = 50, // rethrow caught execetion: catch (e if ) use it\n        IN             = 51,\n        INSTANCEOF     = 52,\n        LOCAL_LOAD     = 53,\n        GETVAR         = 54,\n        SETVAR         = 55,\n        CATCH_SCOPE    = 56,\n        ENUM_INIT_KEYS = 57,\n        ENUM_INIT_VALUES = 58,\n        ENUM_NEXT      = 59,\n        ENUM_ID        = 60,\n        THISFN         = 61,\n        RETURN_RESULT  = 62, // to return prevoisly stored return result\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n        GET_REF        = 65, // *reference\n        SET_REF        = 66, // *reference    = something\n        DEL_REF        = 67, // delete reference\n        REF_CALL       = 68, // f(args)    = something or f(args)++\n        REF_SPECIAL    = 69, // reference for special properties like __proto\n\n        // For XML support:\n        DEFAULTNAMESPACE = 70, // default xml namespace =\n        ESCXMLATTR     = 71,\n        ESCXMLTEXT     = 72,\n        REF_MEMBER     = 73, // Reference for x.@y, x..y etc.\n        REF_NS_MEMBER  = 74, // Reference for x.ns::y, x..ns::y etc.\n        REF_NAME       = 75, // Reference for @y, @[y] etc.\n        REF_NS_NAME    = 76; // Reference for ns::y, @ns::y@[y] etc.",
        "begin_line": 69,
        "end_line": 154,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.EOL",
        "snippet": "    public final static int\n    // start enum\n        ERROR          = -1, // well-known as the only code < EOF\n        EOF            = 0,  // end of file token - (not EOF_CHAR)\n        EOL            = 1,  // end of line\n\n        // Interpreter reuses the following as bytecodes\n        FIRST_BYTECODE_TOKEN    = 2,\n\n        ENTERWITH      = 2,\n        LEAVEWITH      = 3,\n        RETURN         = 4,\n        GOTO           = 5,\n        IFEQ           = 6,\n        IFNE           = 7,\n        SETNAME        = 8,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        SETPROP        = 34,\n        GETELEM        = 35,\n        SETELEM        = 36,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        BINDNAME       = 48,\n        THROW          = 49,\n        RETHROW        = 50, // rethrow caught execetion: catch (e if ) use it\n        IN             = 51,\n        INSTANCEOF     = 52,\n        LOCAL_LOAD     = 53,\n        GETVAR         = 54,\n        SETVAR         = 55,\n        CATCH_SCOPE    = 56,\n        ENUM_INIT_KEYS = 57,\n        ENUM_INIT_VALUES = 58,\n        ENUM_NEXT      = 59,\n        ENUM_ID        = 60,\n        THISFN         = 61,\n        RETURN_RESULT  = 62, // to return prevoisly stored return result\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n        GET_REF        = 65, // *reference\n        SET_REF        = 66, // *reference    = something\n        DEL_REF        = 67, // delete reference\n        REF_CALL       = 68, // f(args)    = something or f(args)++\n        REF_SPECIAL    = 69, // reference for special properties like __proto\n\n        // For XML support:\n        DEFAULTNAMESPACE = 70, // default xml namespace =\n        ESCXMLATTR     = 71,\n        ESCXMLTEXT     = 72,\n        REF_MEMBER     = 73, // Reference for x.@y, x..y etc.\n        REF_NS_MEMBER  = 74, // Reference for x.ns::y, x..ns::y etc.\n        REF_NAME       = 75, // Reference for @y, @[y] etc.\n        REF_NS_NAME    = 76; // Reference for ns::y, @ns::y@[y] etc.",
        "begin_line": 69,
        "end_line": 154,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.FIRST_BYTECODE_TOKEN",
        "snippet": "    public final static int\n    // start enum\n        ERROR          = -1, // well-known as the only code < EOF\n        EOF            = 0,  // end of file token - (not EOF_CHAR)\n        EOL            = 1,  // end of line\n\n        // Interpreter reuses the following as bytecodes\n        FIRST_BYTECODE_TOKEN    = 2,\n\n        ENTERWITH      = 2,\n        LEAVEWITH      = 3,\n        RETURN         = 4,\n        GOTO           = 5,\n        IFEQ           = 6,\n        IFNE           = 7,\n        SETNAME        = 8,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        SETPROP        = 34,\n        GETELEM        = 35,\n        SETELEM        = 36,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        BINDNAME       = 48,\n        THROW          = 49,\n        RETHROW        = 50, // rethrow caught execetion: catch (e if ) use it\n        IN             = 51,\n        INSTANCEOF     = 52,\n        LOCAL_LOAD     = 53,\n        GETVAR         = 54,\n        SETVAR         = 55,\n        CATCH_SCOPE    = 56,\n        ENUM_INIT_KEYS = 57,\n        ENUM_INIT_VALUES = 58,\n        ENUM_NEXT      = 59,\n        ENUM_ID        = 60,\n        THISFN         = 61,\n        RETURN_RESULT  = 62, // to return prevoisly stored return result\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n        GET_REF        = 65, // *reference\n        SET_REF        = 66, // *reference    = something\n        DEL_REF        = 67, // delete reference\n        REF_CALL       = 68, // f(args)    = something or f(args)++\n        REF_SPECIAL    = 69, // reference for special properties like __proto\n\n        // For XML support:\n        DEFAULTNAMESPACE = 70, // default xml namespace =\n        ESCXMLATTR     = 71,\n        ESCXMLTEXT     = 72,\n        REF_MEMBER     = 73, // Reference for x.@y, x..y etc.\n        REF_NS_MEMBER  = 74, // Reference for x.ns::y, x..ns::y etc.\n        REF_NAME       = 75, // Reference for @y, @[y] etc.\n        REF_NS_NAME    = 76; // Reference for ns::y, @ns::y@[y] etc.",
        "begin_line": 69,
        "end_line": 154,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.ENTERWITH",
        "snippet": "    public final static int\n    // start enum\n        ERROR          = -1, // well-known as the only code < EOF\n        EOF            = 0,  // end of file token - (not EOF_CHAR)\n        EOL            = 1,  // end of line\n\n        // Interpreter reuses the following as bytecodes\n        FIRST_BYTECODE_TOKEN    = 2,\n\n        ENTERWITH      = 2,\n        LEAVEWITH      = 3,\n        RETURN         = 4,\n        GOTO           = 5,\n        IFEQ           = 6,\n        IFNE           = 7,\n        SETNAME        = 8,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        SETPROP        = 34,\n        GETELEM        = 35,\n        SETELEM        = 36,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        BINDNAME       = 48,\n        THROW          = 49,\n        RETHROW        = 50, // rethrow caught execetion: catch (e if ) use it\n        IN             = 51,\n        INSTANCEOF     = 52,\n        LOCAL_LOAD     = 53,\n        GETVAR         = 54,\n        SETVAR         = 55,\n        CATCH_SCOPE    = 56,\n        ENUM_INIT_KEYS = 57,\n        ENUM_INIT_VALUES = 58,\n        ENUM_NEXT      = 59,\n        ENUM_ID        = 60,\n        THISFN         = 61,\n        RETURN_RESULT  = 62, // to return prevoisly stored return result\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n        GET_REF        = 65, // *reference\n        SET_REF        = 66, // *reference    = something\n        DEL_REF        = 67, // delete reference\n        REF_CALL       = 68, // f(args)    = something or f(args)++\n        REF_SPECIAL    = 69, // reference for special properties like __proto\n\n        // For XML support:\n        DEFAULTNAMESPACE = 70, // default xml namespace =\n        ESCXMLATTR     = 71,\n        ESCXMLTEXT     = 72,\n        REF_MEMBER     = 73, // Reference for x.@y, x..y etc.\n        REF_NS_MEMBER  = 74, // Reference for x.ns::y, x..ns::y etc.\n        REF_NAME       = 75, // Reference for @y, @[y] etc.\n        REF_NS_NAME    = 76; // Reference for ns::y, @ns::y@[y] etc.",
        "begin_line": 69,
        "end_line": 154,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.LEAVEWITH",
        "snippet": "    public final static int\n    // start enum\n        ERROR          = -1, // well-known as the only code < EOF\n        EOF            = 0,  // end of file token - (not EOF_CHAR)\n        EOL            = 1,  // end of line\n\n        // Interpreter reuses the following as bytecodes\n        FIRST_BYTECODE_TOKEN    = 2,\n\n        ENTERWITH      = 2,\n        LEAVEWITH      = 3,\n        RETURN         = 4,\n        GOTO           = 5,\n        IFEQ           = 6,\n        IFNE           = 7,\n        SETNAME        = 8,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        SETPROP        = 34,\n        GETELEM        = 35,\n        SETELEM        = 36,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        BINDNAME       = 48,\n        THROW          = 49,\n        RETHROW        = 50, // rethrow caught execetion: catch (e if ) use it\n        IN             = 51,\n        INSTANCEOF     = 52,\n        LOCAL_LOAD     = 53,\n        GETVAR         = 54,\n        SETVAR         = 55,\n        CATCH_SCOPE    = 56,\n        ENUM_INIT_KEYS = 57,\n        ENUM_INIT_VALUES = 58,\n        ENUM_NEXT      = 59,\n        ENUM_ID        = 60,\n        THISFN         = 61,\n        RETURN_RESULT  = 62, // to return prevoisly stored return result\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n        GET_REF        = 65, // *reference\n        SET_REF        = 66, // *reference    = something\n        DEL_REF        = 67, // delete reference\n        REF_CALL       = 68, // f(args)    = something or f(args)++\n        REF_SPECIAL    = 69, // reference for special properties like __proto\n\n        // For XML support:\n        DEFAULTNAMESPACE = 70, // default xml namespace =\n        ESCXMLATTR     = 71,\n        ESCXMLTEXT     = 72,\n        REF_MEMBER     = 73, // Reference for x.@y, x..y etc.\n        REF_NS_MEMBER  = 74, // Reference for x.ns::y, x..ns::y etc.\n        REF_NAME       = 75, // Reference for @y, @[y] etc.\n        REF_NS_NAME    = 76; // Reference for ns::y, @ns::y@[y] etc.",
        "begin_line": 69,
        "end_line": 154,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.RETURN",
        "snippet": "    public final static int\n    // start enum\n        ERROR          = -1, // well-known as the only code < EOF\n        EOF            = 0,  // end of file token - (not EOF_CHAR)\n        EOL            = 1,  // end of line\n\n        // Interpreter reuses the following as bytecodes\n        FIRST_BYTECODE_TOKEN    = 2,\n\n        ENTERWITH      = 2,\n        LEAVEWITH      = 3,\n        RETURN         = 4,\n        GOTO           = 5,\n        IFEQ           = 6,\n        IFNE           = 7,\n        SETNAME        = 8,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        SETPROP        = 34,\n        GETELEM        = 35,\n        SETELEM        = 36,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        BINDNAME       = 48,\n        THROW          = 49,\n        RETHROW        = 50, // rethrow caught execetion: catch (e if ) use it\n        IN             = 51,\n        INSTANCEOF     = 52,\n        LOCAL_LOAD     = 53,\n        GETVAR         = 54,\n        SETVAR         = 55,\n        CATCH_SCOPE    = 56,\n        ENUM_INIT_KEYS = 57,\n        ENUM_INIT_VALUES = 58,\n        ENUM_NEXT      = 59,\n        ENUM_ID        = 60,\n        THISFN         = 61,\n        RETURN_RESULT  = 62, // to return prevoisly stored return result\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n        GET_REF        = 65, // *reference\n        SET_REF        = 66, // *reference    = something\n        DEL_REF        = 67, // delete reference\n        REF_CALL       = 68, // f(args)    = something or f(args)++\n        REF_SPECIAL    = 69, // reference for special properties like __proto\n\n        // For XML support:\n        DEFAULTNAMESPACE = 70, // default xml namespace =\n        ESCXMLATTR     = 71,\n        ESCXMLTEXT     = 72,\n        REF_MEMBER     = 73, // Reference for x.@y, x..y etc.\n        REF_NS_MEMBER  = 74, // Reference for x.ns::y, x..ns::y etc.\n        REF_NAME       = 75, // Reference for @y, @[y] etc.\n        REF_NS_NAME    = 76; // Reference for ns::y, @ns::y@[y] etc.",
        "begin_line": 69,
        "end_line": 154,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.GOTO",
        "snippet": "    public final static int\n    // start enum\n        ERROR          = -1, // well-known as the only code < EOF\n        EOF            = 0,  // end of file token - (not EOF_CHAR)\n        EOL            = 1,  // end of line\n\n        // Interpreter reuses the following as bytecodes\n        FIRST_BYTECODE_TOKEN    = 2,\n\n        ENTERWITH      = 2,\n        LEAVEWITH      = 3,\n        RETURN         = 4,\n        GOTO           = 5,\n        IFEQ           = 6,\n        IFNE           = 7,\n        SETNAME        = 8,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        SETPROP        = 34,\n        GETELEM        = 35,\n        SETELEM        = 36,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        BINDNAME       = 48,\n        THROW          = 49,\n        RETHROW        = 50, // rethrow caught execetion: catch (e if ) use it\n        IN             = 51,\n        INSTANCEOF     = 52,\n        LOCAL_LOAD     = 53,\n        GETVAR         = 54,\n        SETVAR         = 55,\n        CATCH_SCOPE    = 56,\n        ENUM_INIT_KEYS = 57,\n        ENUM_INIT_VALUES = 58,\n        ENUM_NEXT      = 59,\n        ENUM_ID        = 60,\n        THISFN         = 61,\n        RETURN_RESULT  = 62, // to return prevoisly stored return result\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n        GET_REF        = 65, // *reference\n        SET_REF        = 66, // *reference    = something\n        DEL_REF        = 67, // delete reference\n        REF_CALL       = 68, // f(args)    = something or f(args)++\n        REF_SPECIAL    = 69, // reference for special properties like __proto\n\n        // For XML support:\n        DEFAULTNAMESPACE = 70, // default xml namespace =\n        ESCXMLATTR     = 71,\n        ESCXMLTEXT     = 72,\n        REF_MEMBER     = 73, // Reference for x.@y, x..y etc.\n        REF_NS_MEMBER  = 74, // Reference for x.ns::y, x..ns::y etc.\n        REF_NAME       = 75, // Reference for @y, @[y] etc.\n        REF_NS_NAME    = 76; // Reference for ns::y, @ns::y@[y] etc.",
        "begin_line": 69,
        "end_line": 154,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.IFEQ",
        "snippet": "    public final static int\n    // start enum\n        ERROR          = -1, // well-known as the only code < EOF\n        EOF            = 0,  // end of file token - (not EOF_CHAR)\n        EOL            = 1,  // end of line\n\n        // Interpreter reuses the following as bytecodes\n        FIRST_BYTECODE_TOKEN    = 2,\n\n        ENTERWITH      = 2,\n        LEAVEWITH      = 3,\n        RETURN         = 4,\n        GOTO           = 5,\n        IFEQ           = 6,\n        IFNE           = 7,\n        SETNAME        = 8,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        SETPROP        = 34,\n        GETELEM        = 35,\n        SETELEM        = 36,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        BINDNAME       = 48,\n        THROW          = 49,\n        RETHROW        = 50, // rethrow caught execetion: catch (e if ) use it\n        IN             = 51,\n        INSTANCEOF     = 52,\n        LOCAL_LOAD     = 53,\n        GETVAR         = 54,\n        SETVAR         = 55,\n        CATCH_SCOPE    = 56,\n        ENUM_INIT_KEYS = 57,\n        ENUM_INIT_VALUES = 58,\n        ENUM_NEXT      = 59,\n        ENUM_ID        = 60,\n        THISFN         = 61,\n        RETURN_RESULT  = 62, // to return prevoisly stored return result\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n        GET_REF        = 65, // *reference\n        SET_REF        = 66, // *reference    = something\n        DEL_REF        = 67, // delete reference\n        REF_CALL       = 68, // f(args)    = something or f(args)++\n        REF_SPECIAL    = 69, // reference for special properties like __proto\n\n        // For XML support:\n        DEFAULTNAMESPACE = 70, // default xml namespace =\n        ESCXMLATTR     = 71,\n        ESCXMLTEXT     = 72,\n        REF_MEMBER     = 73, // Reference for x.@y, x..y etc.\n        REF_NS_MEMBER  = 74, // Reference for x.ns::y, x..ns::y etc.\n        REF_NAME       = 75, // Reference for @y, @[y] etc.\n        REF_NS_NAME    = 76; // Reference for ns::y, @ns::y@[y] etc.",
        "begin_line": 69,
        "end_line": 154,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.IFNE",
        "snippet": "    public final static int\n    // start enum\n        ERROR          = -1, // well-known as the only code < EOF\n        EOF            = 0,  // end of file token - (not EOF_CHAR)\n        EOL            = 1,  // end of line\n\n        // Interpreter reuses the following as bytecodes\n        FIRST_BYTECODE_TOKEN    = 2,\n\n        ENTERWITH      = 2,\n        LEAVEWITH      = 3,\n        RETURN         = 4,\n        GOTO           = 5,\n        IFEQ           = 6,\n        IFNE           = 7,\n        SETNAME        = 8,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        SETPROP        = 34,\n        GETELEM        = 35,\n        SETELEM        = 36,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        BINDNAME       = 48,\n        THROW          = 49,\n        RETHROW        = 50, // rethrow caught execetion: catch (e if ) use it\n        IN             = 51,\n        INSTANCEOF     = 52,\n        LOCAL_LOAD     = 53,\n        GETVAR         = 54,\n        SETVAR         = 55,\n        CATCH_SCOPE    = 56,\n        ENUM_INIT_KEYS = 57,\n        ENUM_INIT_VALUES = 58,\n        ENUM_NEXT      = 59,\n        ENUM_ID        = 60,\n        THISFN         = 61,\n        RETURN_RESULT  = 62, // to return prevoisly stored return result\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n        GET_REF        = 65, // *reference\n        SET_REF        = 66, // *reference    = something\n        DEL_REF        = 67, // delete reference\n        REF_CALL       = 68, // f(args)    = something or f(args)++\n        REF_SPECIAL    = 69, // reference for special properties like __proto\n\n        // For XML support:\n        DEFAULTNAMESPACE = 70, // default xml namespace =\n        ESCXMLATTR     = 71,\n        ESCXMLTEXT     = 72,\n        REF_MEMBER     = 73, // Reference for x.@y, x..y etc.\n        REF_NS_MEMBER  = 74, // Reference for x.ns::y, x..ns::y etc.\n        REF_NAME       = 75, // Reference for @y, @[y] etc.\n        REF_NS_NAME    = 76; // Reference for ns::y, @ns::y@[y] etc.",
        "begin_line": 69,
        "end_line": 154,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.SETNAME",
        "snippet": "    public final static int\n    // start enum\n        ERROR          = -1, // well-known as the only code < EOF\n        EOF            = 0,  // end of file token - (not EOF_CHAR)\n        EOL            = 1,  // end of line\n\n        // Interpreter reuses the following as bytecodes\n        FIRST_BYTECODE_TOKEN    = 2,\n\n        ENTERWITH      = 2,\n        LEAVEWITH      = 3,\n        RETURN         = 4,\n        GOTO           = 5,\n        IFEQ           = 6,\n        IFNE           = 7,\n        SETNAME        = 8,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        SETPROP        = 34,\n        GETELEM        = 35,\n        SETELEM        = 36,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        BINDNAME       = 48,\n        THROW          = 49,\n        RETHROW        = 50, // rethrow caught execetion: catch (e if ) use it\n        IN             = 51,\n        INSTANCEOF     = 52,\n        LOCAL_LOAD     = 53,\n        GETVAR         = 54,\n        SETVAR         = 55,\n        CATCH_SCOPE    = 56,\n        ENUM_INIT_KEYS = 57,\n        ENUM_INIT_VALUES = 58,\n        ENUM_NEXT      = 59,\n        ENUM_ID        = 60,\n        THISFN         = 61,\n        RETURN_RESULT  = 62, // to return prevoisly stored return result\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n        GET_REF        = 65, // *reference\n        SET_REF        = 66, // *reference    = something\n        DEL_REF        = 67, // delete reference\n        REF_CALL       = 68, // f(args)    = something or f(args)++\n        REF_SPECIAL    = 69, // reference for special properties like __proto\n\n        // For XML support:\n        DEFAULTNAMESPACE = 70, // default xml namespace =\n        ESCXMLATTR     = 71,\n        ESCXMLTEXT     = 72,\n        REF_MEMBER     = 73, // Reference for x.@y, x..y etc.\n        REF_NS_MEMBER  = 74, // Reference for x.ns::y, x..ns::y etc.\n        REF_NAME       = 75, // Reference for @y, @[y] etc.\n        REF_NS_NAME    = 76; // Reference for ns::y, @ns::y@[y] etc.",
        "begin_line": 69,
        "end_line": 154,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.BITOR",
        "snippet": "    public final static int\n    // start enum\n        ERROR          = -1, // well-known as the only code < EOF\n        EOF            = 0,  // end of file token - (not EOF_CHAR)\n        EOL            = 1,  // end of line\n\n        // Interpreter reuses the following as bytecodes\n        FIRST_BYTECODE_TOKEN    = 2,\n\n        ENTERWITH      = 2,\n        LEAVEWITH      = 3,\n        RETURN         = 4,\n        GOTO           = 5,\n        IFEQ           = 6,\n        IFNE           = 7,\n        SETNAME        = 8,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        SETPROP        = 34,\n        GETELEM        = 35,\n        SETELEM        = 36,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        BINDNAME       = 48,\n        THROW          = 49,\n        RETHROW        = 50, // rethrow caught execetion: catch (e if ) use it\n        IN             = 51,\n        INSTANCEOF     = 52,\n        LOCAL_LOAD     = 53,\n        GETVAR         = 54,\n        SETVAR         = 55,\n        CATCH_SCOPE    = 56,\n        ENUM_INIT_KEYS = 57,\n        ENUM_INIT_VALUES = 58,\n        ENUM_NEXT      = 59,\n        ENUM_ID        = 60,\n        THISFN         = 61,\n        RETURN_RESULT  = 62, // to return prevoisly stored return result\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n        GET_REF        = 65, // *reference\n        SET_REF        = 66, // *reference    = something\n        DEL_REF        = 67, // delete reference\n        REF_CALL       = 68, // f(args)    = something or f(args)++\n        REF_SPECIAL    = 69, // reference for special properties like __proto\n\n        // For XML support:\n        DEFAULTNAMESPACE = 70, // default xml namespace =\n        ESCXMLATTR     = 71,\n        ESCXMLTEXT     = 72,\n        REF_MEMBER     = 73, // Reference for x.@y, x..y etc.\n        REF_NS_MEMBER  = 74, // Reference for x.ns::y, x..ns::y etc.\n        REF_NAME       = 75, // Reference for @y, @[y] etc.\n        REF_NS_NAME    = 76; // Reference for ns::y, @ns::y@[y] etc.",
        "begin_line": 69,
        "end_line": 154,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.BITXOR",
        "snippet": "    public final static int\n    // start enum\n        ERROR          = -1, // well-known as the only code < EOF\n        EOF            = 0,  // end of file token - (not EOF_CHAR)\n        EOL            = 1,  // end of line\n\n        // Interpreter reuses the following as bytecodes\n        FIRST_BYTECODE_TOKEN    = 2,\n\n        ENTERWITH      = 2,\n        LEAVEWITH      = 3,\n        RETURN         = 4,\n        GOTO           = 5,\n        IFEQ           = 6,\n        IFNE           = 7,\n        SETNAME        = 8,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        SETPROP        = 34,\n        GETELEM        = 35,\n        SETELEM        = 36,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        BINDNAME       = 48,\n        THROW          = 49,\n        RETHROW        = 50, // rethrow caught execetion: catch (e if ) use it\n        IN             = 51,\n        INSTANCEOF     = 52,\n        LOCAL_LOAD     = 53,\n        GETVAR         = 54,\n        SETVAR         = 55,\n        CATCH_SCOPE    = 56,\n        ENUM_INIT_KEYS = 57,\n        ENUM_INIT_VALUES = 58,\n        ENUM_NEXT      = 59,\n        ENUM_ID        = 60,\n        THISFN         = 61,\n        RETURN_RESULT  = 62, // to return prevoisly stored return result\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n        GET_REF        = 65, // *reference\n        SET_REF        = 66, // *reference    = something\n        DEL_REF        = 67, // delete reference\n        REF_CALL       = 68, // f(args)    = something or f(args)++\n        REF_SPECIAL    = 69, // reference for special properties like __proto\n\n        // For XML support:\n        DEFAULTNAMESPACE = 70, // default xml namespace =\n        ESCXMLATTR     = 71,\n        ESCXMLTEXT     = 72,\n        REF_MEMBER     = 73, // Reference for x.@y, x..y etc.\n        REF_NS_MEMBER  = 74, // Reference for x.ns::y, x..ns::y etc.\n        REF_NAME       = 75, // Reference for @y, @[y] etc.\n        REF_NS_NAME    = 76; // Reference for ns::y, @ns::y@[y] etc.",
        "begin_line": 69,
        "end_line": 154,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.BITAND",
        "snippet": "    public final static int\n    // start enum\n        ERROR          = -1, // well-known as the only code < EOF\n        EOF            = 0,  // end of file token - (not EOF_CHAR)\n        EOL            = 1,  // end of line\n\n        // Interpreter reuses the following as bytecodes\n        FIRST_BYTECODE_TOKEN    = 2,\n\n        ENTERWITH      = 2,\n        LEAVEWITH      = 3,\n        RETURN         = 4,\n        GOTO           = 5,\n        IFEQ           = 6,\n        IFNE           = 7,\n        SETNAME        = 8,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        SETPROP        = 34,\n        GETELEM        = 35,\n        SETELEM        = 36,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        BINDNAME       = 48,\n        THROW          = 49,\n        RETHROW        = 50, // rethrow caught execetion: catch (e if ) use it\n        IN             = 51,\n        INSTANCEOF     = 52,\n        LOCAL_LOAD     = 53,\n        GETVAR         = 54,\n        SETVAR         = 55,\n        CATCH_SCOPE    = 56,\n        ENUM_INIT_KEYS = 57,\n        ENUM_INIT_VALUES = 58,\n        ENUM_NEXT      = 59,\n        ENUM_ID        = 60,\n        THISFN         = 61,\n        RETURN_RESULT  = 62, // to return prevoisly stored return result\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n        GET_REF        = 65, // *reference\n        SET_REF        = 66, // *reference    = something\n        DEL_REF        = 67, // delete reference\n        REF_CALL       = 68, // f(args)    = something or f(args)++\n        REF_SPECIAL    = 69, // reference for special properties like __proto\n\n        // For XML support:\n        DEFAULTNAMESPACE = 70, // default xml namespace =\n        ESCXMLATTR     = 71,\n        ESCXMLTEXT     = 72,\n        REF_MEMBER     = 73, // Reference for x.@y, x..y etc.\n        REF_NS_MEMBER  = 74, // Reference for x.ns::y, x..ns::y etc.\n        REF_NAME       = 75, // Reference for @y, @[y] etc.\n        REF_NS_NAME    = 76; // Reference for ns::y, @ns::y@[y] etc.",
        "begin_line": 69,
        "end_line": 154,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.EQ",
        "snippet": "    public final static int\n    // start enum\n        ERROR          = -1, // well-known as the only code < EOF\n        EOF            = 0,  // end of file token - (not EOF_CHAR)\n        EOL            = 1,  // end of line\n\n        // Interpreter reuses the following as bytecodes\n        FIRST_BYTECODE_TOKEN    = 2,\n\n        ENTERWITH      = 2,\n        LEAVEWITH      = 3,\n        RETURN         = 4,\n        GOTO           = 5,\n        IFEQ           = 6,\n        IFNE           = 7,\n        SETNAME        = 8,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        SETPROP        = 34,\n        GETELEM        = 35,\n        SETELEM        = 36,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        BINDNAME       = 48,\n        THROW          = 49,\n        RETHROW        = 50, // rethrow caught execetion: catch (e if ) use it\n        IN             = 51,\n        INSTANCEOF     = 52,\n        LOCAL_LOAD     = 53,\n        GETVAR         = 54,\n        SETVAR         = 55,\n        CATCH_SCOPE    = 56,\n        ENUM_INIT_KEYS = 57,\n        ENUM_INIT_VALUES = 58,\n        ENUM_NEXT      = 59,\n        ENUM_ID        = 60,\n        THISFN         = 61,\n        RETURN_RESULT  = 62, // to return prevoisly stored return result\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n        GET_REF        = 65, // *reference\n        SET_REF        = 66, // *reference    = something\n        DEL_REF        = 67, // delete reference\n        REF_CALL       = 68, // f(args)    = something or f(args)++\n        REF_SPECIAL    = 69, // reference for special properties like __proto\n\n        // For XML support:\n        DEFAULTNAMESPACE = 70, // default xml namespace =\n        ESCXMLATTR     = 71,\n        ESCXMLTEXT     = 72,\n        REF_MEMBER     = 73, // Reference for x.@y, x..y etc.\n        REF_NS_MEMBER  = 74, // Reference for x.ns::y, x..ns::y etc.\n        REF_NAME       = 75, // Reference for @y, @[y] etc.\n        REF_NS_NAME    = 76; // Reference for ns::y, @ns::y@[y] etc.",
        "begin_line": 69,
        "end_line": 154,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.NE",
        "snippet": "    public final static int\n    // start enum\n        ERROR          = -1, // well-known as the only code < EOF\n        EOF            = 0,  // end of file token - (not EOF_CHAR)\n        EOL            = 1,  // end of line\n\n        // Interpreter reuses the following as bytecodes\n        FIRST_BYTECODE_TOKEN    = 2,\n\n        ENTERWITH      = 2,\n        LEAVEWITH      = 3,\n        RETURN         = 4,\n        GOTO           = 5,\n        IFEQ           = 6,\n        IFNE           = 7,\n        SETNAME        = 8,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        SETPROP        = 34,\n        GETELEM        = 35,\n        SETELEM        = 36,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        BINDNAME       = 48,\n        THROW          = 49,\n        RETHROW        = 50, // rethrow caught execetion: catch (e if ) use it\n        IN             = 51,\n        INSTANCEOF     = 52,\n        LOCAL_LOAD     = 53,\n        GETVAR         = 54,\n        SETVAR         = 55,\n        CATCH_SCOPE    = 56,\n        ENUM_INIT_KEYS = 57,\n        ENUM_INIT_VALUES = 58,\n        ENUM_NEXT      = 59,\n        ENUM_ID        = 60,\n        THISFN         = 61,\n        RETURN_RESULT  = 62, // to return prevoisly stored return result\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n        GET_REF        = 65, // *reference\n        SET_REF        = 66, // *reference    = something\n        DEL_REF        = 67, // delete reference\n        REF_CALL       = 68, // f(args)    = something or f(args)++\n        REF_SPECIAL    = 69, // reference for special properties like __proto\n\n        // For XML support:\n        DEFAULTNAMESPACE = 70, // default xml namespace =\n        ESCXMLATTR     = 71,\n        ESCXMLTEXT     = 72,\n        REF_MEMBER     = 73, // Reference for x.@y, x..y etc.\n        REF_NS_MEMBER  = 74, // Reference for x.ns::y, x..ns::y etc.\n        REF_NAME       = 75, // Reference for @y, @[y] etc.\n        REF_NS_NAME    = 76; // Reference for ns::y, @ns::y@[y] etc.",
        "begin_line": 69,
        "end_line": 154,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.LT",
        "snippet": "    public final static int\n    // start enum\n        ERROR          = -1, // well-known as the only code < EOF\n        EOF            = 0,  // end of file token - (not EOF_CHAR)\n        EOL            = 1,  // end of line\n\n        // Interpreter reuses the following as bytecodes\n        FIRST_BYTECODE_TOKEN    = 2,\n\n        ENTERWITH      = 2,\n        LEAVEWITH      = 3,\n        RETURN         = 4,\n        GOTO           = 5,\n        IFEQ           = 6,\n        IFNE           = 7,\n        SETNAME        = 8,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        SETPROP        = 34,\n        GETELEM        = 35,\n        SETELEM        = 36,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        BINDNAME       = 48,\n        THROW          = 49,\n        RETHROW        = 50, // rethrow caught execetion: catch (e if ) use it\n        IN             = 51,\n        INSTANCEOF     = 52,\n        LOCAL_LOAD     = 53,\n        GETVAR         = 54,\n        SETVAR         = 55,\n        CATCH_SCOPE    = 56,\n        ENUM_INIT_KEYS = 57,\n        ENUM_INIT_VALUES = 58,\n        ENUM_NEXT      = 59,\n        ENUM_ID        = 60,\n        THISFN         = 61,\n        RETURN_RESULT  = 62, // to return prevoisly stored return result\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n        GET_REF        = 65, // *reference\n        SET_REF        = 66, // *reference    = something\n        DEL_REF        = 67, // delete reference\n        REF_CALL       = 68, // f(args)    = something or f(args)++\n        REF_SPECIAL    = 69, // reference for special properties like __proto\n\n        // For XML support:\n        DEFAULTNAMESPACE = 70, // default xml namespace =\n        ESCXMLATTR     = 71,\n        ESCXMLTEXT     = 72,\n        REF_MEMBER     = 73, // Reference for x.@y, x..y etc.\n        REF_NS_MEMBER  = 74, // Reference for x.ns::y, x..ns::y etc.\n        REF_NAME       = 75, // Reference for @y, @[y] etc.\n        REF_NS_NAME    = 76; // Reference for ns::y, @ns::y@[y] etc.",
        "begin_line": 69,
        "end_line": 154,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.LE",
        "snippet": "    public final static int\n    // start enum\n        ERROR          = -1, // well-known as the only code < EOF\n        EOF            = 0,  // end of file token - (not EOF_CHAR)\n        EOL            = 1,  // end of line\n\n        // Interpreter reuses the following as bytecodes\n        FIRST_BYTECODE_TOKEN    = 2,\n\n        ENTERWITH      = 2,\n        LEAVEWITH      = 3,\n        RETURN         = 4,\n        GOTO           = 5,\n        IFEQ           = 6,\n        IFNE           = 7,\n        SETNAME        = 8,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        SETPROP        = 34,\n        GETELEM        = 35,\n        SETELEM        = 36,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        BINDNAME       = 48,\n        THROW          = 49,\n        RETHROW        = 50, // rethrow caught execetion: catch (e if ) use it\n        IN             = 51,\n        INSTANCEOF     = 52,\n        LOCAL_LOAD     = 53,\n        GETVAR         = 54,\n        SETVAR         = 55,\n        CATCH_SCOPE    = 56,\n        ENUM_INIT_KEYS = 57,\n        ENUM_INIT_VALUES = 58,\n        ENUM_NEXT      = 59,\n        ENUM_ID        = 60,\n        THISFN         = 61,\n        RETURN_RESULT  = 62, // to return prevoisly stored return result\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n        GET_REF        = 65, // *reference\n        SET_REF        = 66, // *reference    = something\n        DEL_REF        = 67, // delete reference\n        REF_CALL       = 68, // f(args)    = something or f(args)++\n        REF_SPECIAL    = 69, // reference for special properties like __proto\n\n        // For XML support:\n        DEFAULTNAMESPACE = 70, // default xml namespace =\n        ESCXMLATTR     = 71,\n        ESCXMLTEXT     = 72,\n        REF_MEMBER     = 73, // Reference for x.@y, x..y etc.\n        REF_NS_MEMBER  = 74, // Reference for x.ns::y, x..ns::y etc.\n        REF_NAME       = 75, // Reference for @y, @[y] etc.\n        REF_NS_NAME    = 76; // Reference for ns::y, @ns::y@[y] etc.",
        "begin_line": 69,
        "end_line": 154,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.GT",
        "snippet": "    public final static int\n    // start enum\n        ERROR          = -1, // well-known as the only code < EOF\n        EOF            = 0,  // end of file token - (not EOF_CHAR)\n        EOL            = 1,  // end of line\n\n        // Interpreter reuses the following as bytecodes\n        FIRST_BYTECODE_TOKEN    = 2,\n\n        ENTERWITH      = 2,\n        LEAVEWITH      = 3,\n        RETURN         = 4,\n        GOTO           = 5,\n        IFEQ           = 6,\n        IFNE           = 7,\n        SETNAME        = 8,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        SETPROP        = 34,\n        GETELEM        = 35,\n        SETELEM        = 36,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        BINDNAME       = 48,\n        THROW          = 49,\n        RETHROW        = 50, // rethrow caught execetion: catch (e if ) use it\n        IN             = 51,\n        INSTANCEOF     = 52,\n        LOCAL_LOAD     = 53,\n        GETVAR         = 54,\n        SETVAR         = 55,\n        CATCH_SCOPE    = 56,\n        ENUM_INIT_KEYS = 57,\n        ENUM_INIT_VALUES = 58,\n        ENUM_NEXT      = 59,\n        ENUM_ID        = 60,\n        THISFN         = 61,\n        RETURN_RESULT  = 62, // to return prevoisly stored return result\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n        GET_REF        = 65, // *reference\n        SET_REF        = 66, // *reference    = something\n        DEL_REF        = 67, // delete reference\n        REF_CALL       = 68, // f(args)    = something or f(args)++\n        REF_SPECIAL    = 69, // reference for special properties like __proto\n\n        // For XML support:\n        DEFAULTNAMESPACE = 70, // default xml namespace =\n        ESCXMLATTR     = 71,\n        ESCXMLTEXT     = 72,\n        REF_MEMBER     = 73, // Reference for x.@y, x..y etc.\n        REF_NS_MEMBER  = 74, // Reference for x.ns::y, x..ns::y etc.\n        REF_NAME       = 75, // Reference for @y, @[y] etc.\n        REF_NS_NAME    = 76; // Reference for ns::y, @ns::y@[y] etc.",
        "begin_line": 69,
        "end_line": 154,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.GE",
        "snippet": "    public final static int\n    // start enum\n        ERROR          = -1, // well-known as the only code < EOF\n        EOF            = 0,  // end of file token - (not EOF_CHAR)\n        EOL            = 1,  // end of line\n\n        // Interpreter reuses the following as bytecodes\n        FIRST_BYTECODE_TOKEN    = 2,\n\n        ENTERWITH      = 2,\n        LEAVEWITH      = 3,\n        RETURN         = 4,\n        GOTO           = 5,\n        IFEQ           = 6,\n        IFNE           = 7,\n        SETNAME        = 8,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        SETPROP        = 34,\n        GETELEM        = 35,\n        SETELEM        = 36,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        BINDNAME       = 48,\n        THROW          = 49,\n        RETHROW        = 50, // rethrow caught execetion: catch (e if ) use it\n        IN             = 51,\n        INSTANCEOF     = 52,\n        LOCAL_LOAD     = 53,\n        GETVAR         = 54,\n        SETVAR         = 55,\n        CATCH_SCOPE    = 56,\n        ENUM_INIT_KEYS = 57,\n        ENUM_INIT_VALUES = 58,\n        ENUM_NEXT      = 59,\n        ENUM_ID        = 60,\n        THISFN         = 61,\n        RETURN_RESULT  = 62, // to return prevoisly stored return result\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n        GET_REF        = 65, // *reference\n        SET_REF        = 66, // *reference    = something\n        DEL_REF        = 67, // delete reference\n        REF_CALL       = 68, // f(args)    = something or f(args)++\n        REF_SPECIAL    = 69, // reference for special properties like __proto\n\n        // For XML support:\n        DEFAULTNAMESPACE = 70, // default xml namespace =\n        ESCXMLATTR     = 71,\n        ESCXMLTEXT     = 72,\n        REF_MEMBER     = 73, // Reference for x.@y, x..y etc.\n        REF_NS_MEMBER  = 74, // Reference for x.ns::y, x..ns::y etc.\n        REF_NAME       = 75, // Reference for @y, @[y] etc.\n        REF_NS_NAME    = 76; // Reference for ns::y, @ns::y@[y] etc.",
        "begin_line": 69,
        "end_line": 154,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.LSH",
        "snippet": "    public final static int\n    // start enum\n        ERROR          = -1, // well-known as the only code < EOF\n        EOF            = 0,  // end of file token - (not EOF_CHAR)\n        EOL            = 1,  // end of line\n\n        // Interpreter reuses the following as bytecodes\n        FIRST_BYTECODE_TOKEN    = 2,\n\n        ENTERWITH      = 2,\n        LEAVEWITH      = 3,\n        RETURN         = 4,\n        GOTO           = 5,\n        IFEQ           = 6,\n        IFNE           = 7,\n        SETNAME        = 8,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        SETPROP        = 34,\n        GETELEM        = 35,\n        SETELEM        = 36,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        BINDNAME       = 48,\n        THROW          = 49,\n        RETHROW        = 50, // rethrow caught execetion: catch (e if ) use it\n        IN             = 51,\n        INSTANCEOF     = 52,\n        LOCAL_LOAD     = 53,\n        GETVAR         = 54,\n        SETVAR         = 55,\n        CATCH_SCOPE    = 56,\n        ENUM_INIT_KEYS = 57,\n        ENUM_INIT_VALUES = 58,\n        ENUM_NEXT      = 59,\n        ENUM_ID        = 60,\n        THISFN         = 61,\n        RETURN_RESULT  = 62, // to return prevoisly stored return result\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n        GET_REF        = 65, // *reference\n        SET_REF        = 66, // *reference    = something\n        DEL_REF        = 67, // delete reference\n        REF_CALL       = 68, // f(args)    = something or f(args)++\n        REF_SPECIAL    = 69, // reference for special properties like __proto\n\n        // For XML support:\n        DEFAULTNAMESPACE = 70, // default xml namespace =\n        ESCXMLATTR     = 71,\n        ESCXMLTEXT     = 72,\n        REF_MEMBER     = 73, // Reference for x.@y, x..y etc.\n        REF_NS_MEMBER  = 74, // Reference for x.ns::y, x..ns::y etc.\n        REF_NAME       = 75, // Reference for @y, @[y] etc.\n        REF_NS_NAME    = 76; // Reference for ns::y, @ns::y@[y] etc.",
        "begin_line": 69,
        "end_line": 154,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.RSH",
        "snippet": "    public final static int\n    // start enum\n        ERROR          = -1, // well-known as the only code < EOF\n        EOF            = 0,  // end of file token - (not EOF_CHAR)\n        EOL            = 1,  // end of line\n\n        // Interpreter reuses the following as bytecodes\n        FIRST_BYTECODE_TOKEN    = 2,\n\n        ENTERWITH      = 2,\n        LEAVEWITH      = 3,\n        RETURN         = 4,\n        GOTO           = 5,\n        IFEQ           = 6,\n        IFNE           = 7,\n        SETNAME        = 8,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        SETPROP        = 34,\n        GETELEM        = 35,\n        SETELEM        = 36,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        BINDNAME       = 48,\n        THROW          = 49,\n        RETHROW        = 50, // rethrow caught execetion: catch (e if ) use it\n        IN             = 51,\n        INSTANCEOF     = 52,\n        LOCAL_LOAD     = 53,\n        GETVAR         = 54,\n        SETVAR         = 55,\n        CATCH_SCOPE    = 56,\n        ENUM_INIT_KEYS = 57,\n        ENUM_INIT_VALUES = 58,\n        ENUM_NEXT      = 59,\n        ENUM_ID        = 60,\n        THISFN         = 61,\n        RETURN_RESULT  = 62, // to return prevoisly stored return result\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n        GET_REF        = 65, // *reference\n        SET_REF        = 66, // *reference    = something\n        DEL_REF        = 67, // delete reference\n        REF_CALL       = 68, // f(args)    = something or f(args)++\n        REF_SPECIAL    = 69, // reference for special properties like __proto\n\n        // For XML support:\n        DEFAULTNAMESPACE = 70, // default xml namespace =\n        ESCXMLATTR     = 71,\n        ESCXMLTEXT     = 72,\n        REF_MEMBER     = 73, // Reference for x.@y, x..y etc.\n        REF_NS_MEMBER  = 74, // Reference for x.ns::y, x..ns::y etc.\n        REF_NAME       = 75, // Reference for @y, @[y] etc.\n        REF_NS_NAME    = 76; // Reference for ns::y, @ns::y@[y] etc.",
        "begin_line": 69,
        "end_line": 154,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.URSH",
        "snippet": "    public final static int\n    // start enum\n        ERROR          = -1, // well-known as the only code < EOF\n        EOF            = 0,  // end of file token - (not EOF_CHAR)\n        EOL            = 1,  // end of line\n\n        // Interpreter reuses the following as bytecodes\n        FIRST_BYTECODE_TOKEN    = 2,\n\n        ENTERWITH      = 2,\n        LEAVEWITH      = 3,\n        RETURN         = 4,\n        GOTO           = 5,\n        IFEQ           = 6,\n        IFNE           = 7,\n        SETNAME        = 8,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        SETPROP        = 34,\n        GETELEM        = 35,\n        SETELEM        = 36,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        BINDNAME       = 48,\n        THROW          = 49,\n        RETHROW        = 50, // rethrow caught execetion: catch (e if ) use it\n        IN             = 51,\n        INSTANCEOF     = 52,\n        LOCAL_LOAD     = 53,\n        GETVAR         = 54,\n        SETVAR         = 55,\n        CATCH_SCOPE    = 56,\n        ENUM_INIT_KEYS = 57,\n        ENUM_INIT_VALUES = 58,\n        ENUM_NEXT      = 59,\n        ENUM_ID        = 60,\n        THISFN         = 61,\n        RETURN_RESULT  = 62, // to return prevoisly stored return result\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n        GET_REF        = 65, // *reference\n        SET_REF        = 66, // *reference    = something\n        DEL_REF        = 67, // delete reference\n        REF_CALL       = 68, // f(args)    = something or f(args)++\n        REF_SPECIAL    = 69, // reference for special properties like __proto\n\n        // For XML support:\n        DEFAULTNAMESPACE = 70, // default xml namespace =\n        ESCXMLATTR     = 71,\n        ESCXMLTEXT     = 72,\n        REF_MEMBER     = 73, // Reference for x.@y, x..y etc.\n        REF_NS_MEMBER  = 74, // Reference for x.ns::y, x..ns::y etc.\n        REF_NAME       = 75, // Reference for @y, @[y] etc.\n        REF_NS_NAME    = 76; // Reference for ns::y, @ns::y@[y] etc.",
        "begin_line": 69,
        "end_line": 154,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.ADD",
        "snippet": "    public final static int\n    // start enum\n        ERROR          = -1, // well-known as the only code < EOF\n        EOF            = 0,  // end of file token - (not EOF_CHAR)\n        EOL            = 1,  // end of line\n\n        // Interpreter reuses the following as bytecodes\n        FIRST_BYTECODE_TOKEN    = 2,\n\n        ENTERWITH      = 2,\n        LEAVEWITH      = 3,\n        RETURN         = 4,\n        GOTO           = 5,\n        IFEQ           = 6,\n        IFNE           = 7,\n        SETNAME        = 8,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        SETPROP        = 34,\n        GETELEM        = 35,\n        SETELEM        = 36,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        BINDNAME       = 48,\n        THROW          = 49,\n        RETHROW        = 50, // rethrow caught execetion: catch (e if ) use it\n        IN             = 51,\n        INSTANCEOF     = 52,\n        LOCAL_LOAD     = 53,\n        GETVAR         = 54,\n        SETVAR         = 55,\n        CATCH_SCOPE    = 56,\n        ENUM_INIT_KEYS = 57,\n        ENUM_INIT_VALUES = 58,\n        ENUM_NEXT      = 59,\n        ENUM_ID        = 60,\n        THISFN         = 61,\n        RETURN_RESULT  = 62, // to return prevoisly stored return result\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n        GET_REF        = 65, // *reference\n        SET_REF        = 66, // *reference    = something\n        DEL_REF        = 67, // delete reference\n        REF_CALL       = 68, // f(args)    = something or f(args)++\n        REF_SPECIAL    = 69, // reference for special properties like __proto\n\n        // For XML support:\n        DEFAULTNAMESPACE = 70, // default xml namespace =\n        ESCXMLATTR     = 71,\n        ESCXMLTEXT     = 72,\n        REF_MEMBER     = 73, // Reference for x.@y, x..y etc.\n        REF_NS_MEMBER  = 74, // Reference for x.ns::y, x..ns::y etc.\n        REF_NAME       = 75, // Reference for @y, @[y] etc.\n        REF_NS_NAME    = 76; // Reference for ns::y, @ns::y@[y] etc.",
        "begin_line": 69,
        "end_line": 154,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.SUB",
        "snippet": "    public final static int\n    // start enum\n        ERROR          = -1, // well-known as the only code < EOF\n        EOF            = 0,  // end of file token - (not EOF_CHAR)\n        EOL            = 1,  // end of line\n\n        // Interpreter reuses the following as bytecodes\n        FIRST_BYTECODE_TOKEN    = 2,\n\n        ENTERWITH      = 2,\n        LEAVEWITH      = 3,\n        RETURN         = 4,\n        GOTO           = 5,\n        IFEQ           = 6,\n        IFNE           = 7,\n        SETNAME        = 8,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        SETPROP        = 34,\n        GETELEM        = 35,\n        SETELEM        = 36,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        BINDNAME       = 48,\n        THROW          = 49,\n        RETHROW        = 50, // rethrow caught execetion: catch (e if ) use it\n        IN             = 51,\n        INSTANCEOF     = 52,\n        LOCAL_LOAD     = 53,\n        GETVAR         = 54,\n        SETVAR         = 55,\n        CATCH_SCOPE    = 56,\n        ENUM_INIT_KEYS = 57,\n        ENUM_INIT_VALUES = 58,\n        ENUM_NEXT      = 59,\n        ENUM_ID        = 60,\n        THISFN         = 61,\n        RETURN_RESULT  = 62, // to return prevoisly stored return result\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n        GET_REF        = 65, // *reference\n        SET_REF        = 66, // *reference    = something\n        DEL_REF        = 67, // delete reference\n        REF_CALL       = 68, // f(args)    = something or f(args)++\n        REF_SPECIAL    = 69, // reference for special properties like __proto\n\n        // For XML support:\n        DEFAULTNAMESPACE = 70, // default xml namespace =\n        ESCXMLATTR     = 71,\n        ESCXMLTEXT     = 72,\n        REF_MEMBER     = 73, // Reference for x.@y, x..y etc.\n        REF_NS_MEMBER  = 74, // Reference for x.ns::y, x..ns::y etc.\n        REF_NAME       = 75, // Reference for @y, @[y] etc.\n        REF_NS_NAME    = 76; // Reference for ns::y, @ns::y@[y] etc.",
        "begin_line": 69,
        "end_line": 154,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.MUL",
        "snippet": "    public final static int\n    // start enum\n        ERROR          = -1, // well-known as the only code < EOF\n        EOF            = 0,  // end of file token - (not EOF_CHAR)\n        EOL            = 1,  // end of line\n\n        // Interpreter reuses the following as bytecodes\n        FIRST_BYTECODE_TOKEN    = 2,\n\n        ENTERWITH      = 2,\n        LEAVEWITH      = 3,\n        RETURN         = 4,\n        GOTO           = 5,\n        IFEQ           = 6,\n        IFNE           = 7,\n        SETNAME        = 8,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        SETPROP        = 34,\n        GETELEM        = 35,\n        SETELEM        = 36,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        BINDNAME       = 48,\n        THROW          = 49,\n        RETHROW        = 50, // rethrow caught execetion: catch (e if ) use it\n        IN             = 51,\n        INSTANCEOF     = 52,\n        LOCAL_LOAD     = 53,\n        GETVAR         = 54,\n        SETVAR         = 55,\n        CATCH_SCOPE    = 56,\n        ENUM_INIT_KEYS = 57,\n        ENUM_INIT_VALUES = 58,\n        ENUM_NEXT      = 59,\n        ENUM_ID        = 60,\n        THISFN         = 61,\n        RETURN_RESULT  = 62, // to return prevoisly stored return result\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n        GET_REF        = 65, // *reference\n        SET_REF        = 66, // *reference    = something\n        DEL_REF        = 67, // delete reference\n        REF_CALL       = 68, // f(args)    = something or f(args)++\n        REF_SPECIAL    = 69, // reference for special properties like __proto\n\n        // For XML support:\n        DEFAULTNAMESPACE = 70, // default xml namespace =\n        ESCXMLATTR     = 71,\n        ESCXMLTEXT     = 72,\n        REF_MEMBER     = 73, // Reference for x.@y, x..y etc.\n        REF_NS_MEMBER  = 74, // Reference for x.ns::y, x..ns::y etc.\n        REF_NAME       = 75, // Reference for @y, @[y] etc.\n        REF_NS_NAME    = 76; // Reference for ns::y, @ns::y@[y] etc.",
        "begin_line": 69,
        "end_line": 154,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.DIV",
        "snippet": "    public final static int\n    // start enum\n        ERROR          = -1, // well-known as the only code < EOF\n        EOF            = 0,  // end of file token - (not EOF_CHAR)\n        EOL            = 1,  // end of line\n\n        // Interpreter reuses the following as bytecodes\n        FIRST_BYTECODE_TOKEN    = 2,\n\n        ENTERWITH      = 2,\n        LEAVEWITH      = 3,\n        RETURN         = 4,\n        GOTO           = 5,\n        IFEQ           = 6,\n        IFNE           = 7,\n        SETNAME        = 8,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        SETPROP        = 34,\n        GETELEM        = 35,\n        SETELEM        = 36,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        BINDNAME       = 48,\n        THROW          = 49,\n        RETHROW        = 50, // rethrow caught execetion: catch (e if ) use it\n        IN             = 51,\n        INSTANCEOF     = 52,\n        LOCAL_LOAD     = 53,\n        GETVAR         = 54,\n        SETVAR         = 55,\n        CATCH_SCOPE    = 56,\n        ENUM_INIT_KEYS = 57,\n        ENUM_INIT_VALUES = 58,\n        ENUM_NEXT      = 59,\n        ENUM_ID        = 60,\n        THISFN         = 61,\n        RETURN_RESULT  = 62, // to return prevoisly stored return result\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n        GET_REF        = 65, // *reference\n        SET_REF        = 66, // *reference    = something\n        DEL_REF        = 67, // delete reference\n        REF_CALL       = 68, // f(args)    = something or f(args)++\n        REF_SPECIAL    = 69, // reference for special properties like __proto\n\n        // For XML support:\n        DEFAULTNAMESPACE = 70, // default xml namespace =\n        ESCXMLATTR     = 71,\n        ESCXMLTEXT     = 72,\n        REF_MEMBER     = 73, // Reference for x.@y, x..y etc.\n        REF_NS_MEMBER  = 74, // Reference for x.ns::y, x..ns::y etc.\n        REF_NAME       = 75, // Reference for @y, @[y] etc.\n        REF_NS_NAME    = 76; // Reference for ns::y, @ns::y@[y] etc.",
        "begin_line": 69,
        "end_line": 154,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.MOD",
        "snippet": "    public final static int\n    // start enum\n        ERROR          = -1, // well-known as the only code < EOF\n        EOF            = 0,  // end of file token - (not EOF_CHAR)\n        EOL            = 1,  // end of line\n\n        // Interpreter reuses the following as bytecodes\n        FIRST_BYTECODE_TOKEN    = 2,\n\n        ENTERWITH      = 2,\n        LEAVEWITH      = 3,\n        RETURN         = 4,\n        GOTO           = 5,\n        IFEQ           = 6,\n        IFNE           = 7,\n        SETNAME        = 8,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        SETPROP        = 34,\n        GETELEM        = 35,\n        SETELEM        = 36,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        BINDNAME       = 48,\n        THROW          = 49,\n        RETHROW        = 50, // rethrow caught execetion: catch (e if ) use it\n        IN             = 51,\n        INSTANCEOF     = 52,\n        LOCAL_LOAD     = 53,\n        GETVAR         = 54,\n        SETVAR         = 55,\n        CATCH_SCOPE    = 56,\n        ENUM_INIT_KEYS = 57,\n        ENUM_INIT_VALUES = 58,\n        ENUM_NEXT      = 59,\n        ENUM_ID        = 60,\n        THISFN         = 61,\n        RETURN_RESULT  = 62, // to return prevoisly stored return result\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n        GET_REF        = 65, // *reference\n        SET_REF        = 66, // *reference    = something\n        DEL_REF        = 67, // delete reference\n        REF_CALL       = 68, // f(args)    = something or f(args)++\n        REF_SPECIAL    = 69, // reference for special properties like __proto\n\n        // For XML support:\n        DEFAULTNAMESPACE = 70, // default xml namespace =\n        ESCXMLATTR     = 71,\n        ESCXMLTEXT     = 72,\n        REF_MEMBER     = 73, // Reference for x.@y, x..y etc.\n        REF_NS_MEMBER  = 74, // Reference for x.ns::y, x..ns::y etc.\n        REF_NAME       = 75, // Reference for @y, @[y] etc.\n        REF_NS_NAME    = 76; // Reference for ns::y, @ns::y@[y] etc.",
        "begin_line": 69,
        "end_line": 154,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.NOT",
        "snippet": "    public final static int\n    // start enum\n        ERROR          = -1, // well-known as the only code < EOF\n        EOF            = 0,  // end of file token - (not EOF_CHAR)\n        EOL            = 1,  // end of line\n\n        // Interpreter reuses the following as bytecodes\n        FIRST_BYTECODE_TOKEN    = 2,\n\n        ENTERWITH      = 2,\n        LEAVEWITH      = 3,\n        RETURN         = 4,\n        GOTO           = 5,\n        IFEQ           = 6,\n        IFNE           = 7,\n        SETNAME        = 8,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        SETPROP        = 34,\n        GETELEM        = 35,\n        SETELEM        = 36,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        BINDNAME       = 48,\n        THROW          = 49,\n        RETHROW        = 50, // rethrow caught execetion: catch (e if ) use it\n        IN             = 51,\n        INSTANCEOF     = 52,\n        LOCAL_LOAD     = 53,\n        GETVAR         = 54,\n        SETVAR         = 55,\n        CATCH_SCOPE    = 56,\n        ENUM_INIT_KEYS = 57,\n        ENUM_INIT_VALUES = 58,\n        ENUM_NEXT      = 59,\n        ENUM_ID        = 60,\n        THISFN         = 61,\n        RETURN_RESULT  = 62, // to return prevoisly stored return result\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n        GET_REF        = 65, // *reference\n        SET_REF        = 66, // *reference    = something\n        DEL_REF        = 67, // delete reference\n        REF_CALL       = 68, // f(args)    = something or f(args)++\n        REF_SPECIAL    = 69, // reference for special properties like __proto\n\n        // For XML support:\n        DEFAULTNAMESPACE = 70, // default xml namespace =\n        ESCXMLATTR     = 71,\n        ESCXMLTEXT     = 72,\n        REF_MEMBER     = 73, // Reference for x.@y, x..y etc.\n        REF_NS_MEMBER  = 74, // Reference for x.ns::y, x..ns::y etc.\n        REF_NAME       = 75, // Reference for @y, @[y] etc.\n        REF_NS_NAME    = 76; // Reference for ns::y, @ns::y@[y] etc.",
        "begin_line": 69,
        "end_line": 154,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.BITNOT",
        "snippet": "    public final static int\n    // start enum\n        ERROR          = -1, // well-known as the only code < EOF\n        EOF            = 0,  // end of file token - (not EOF_CHAR)\n        EOL            = 1,  // end of line\n\n        // Interpreter reuses the following as bytecodes\n        FIRST_BYTECODE_TOKEN    = 2,\n\n        ENTERWITH      = 2,\n        LEAVEWITH      = 3,\n        RETURN         = 4,\n        GOTO           = 5,\n        IFEQ           = 6,\n        IFNE           = 7,\n        SETNAME        = 8,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        SETPROP        = 34,\n        GETELEM        = 35,\n        SETELEM        = 36,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        BINDNAME       = 48,\n        THROW          = 49,\n        RETHROW        = 50, // rethrow caught execetion: catch (e if ) use it\n        IN             = 51,\n        INSTANCEOF     = 52,\n        LOCAL_LOAD     = 53,\n        GETVAR         = 54,\n        SETVAR         = 55,\n        CATCH_SCOPE    = 56,\n        ENUM_INIT_KEYS = 57,\n        ENUM_INIT_VALUES = 58,\n        ENUM_NEXT      = 59,\n        ENUM_ID        = 60,\n        THISFN         = 61,\n        RETURN_RESULT  = 62, // to return prevoisly stored return result\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n        GET_REF        = 65, // *reference\n        SET_REF        = 66, // *reference    = something\n        DEL_REF        = 67, // delete reference\n        REF_CALL       = 68, // f(args)    = something or f(args)++\n        REF_SPECIAL    = 69, // reference for special properties like __proto\n\n        // For XML support:\n        DEFAULTNAMESPACE = 70, // default xml namespace =\n        ESCXMLATTR     = 71,\n        ESCXMLTEXT     = 72,\n        REF_MEMBER     = 73, // Reference for x.@y, x..y etc.\n        REF_NS_MEMBER  = 74, // Reference for x.ns::y, x..ns::y etc.\n        REF_NAME       = 75, // Reference for @y, @[y] etc.\n        REF_NS_NAME    = 76; // Reference for ns::y, @ns::y@[y] etc.",
        "begin_line": 69,
        "end_line": 154,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.POS",
        "snippet": "    public final static int\n    // start enum\n        ERROR          = -1, // well-known as the only code < EOF\n        EOF            = 0,  // end of file token - (not EOF_CHAR)\n        EOL            = 1,  // end of line\n\n        // Interpreter reuses the following as bytecodes\n        FIRST_BYTECODE_TOKEN    = 2,\n\n        ENTERWITH      = 2,\n        LEAVEWITH      = 3,\n        RETURN         = 4,\n        GOTO           = 5,\n        IFEQ           = 6,\n        IFNE           = 7,\n        SETNAME        = 8,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        SETPROP        = 34,\n        GETELEM        = 35,\n        SETELEM        = 36,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        BINDNAME       = 48,\n        THROW          = 49,\n        RETHROW        = 50, // rethrow caught execetion: catch (e if ) use it\n        IN             = 51,\n        INSTANCEOF     = 52,\n        LOCAL_LOAD     = 53,\n        GETVAR         = 54,\n        SETVAR         = 55,\n        CATCH_SCOPE    = 56,\n        ENUM_INIT_KEYS = 57,\n        ENUM_INIT_VALUES = 58,\n        ENUM_NEXT      = 59,\n        ENUM_ID        = 60,\n        THISFN         = 61,\n        RETURN_RESULT  = 62, // to return prevoisly stored return result\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n        GET_REF        = 65, // *reference\n        SET_REF        = 66, // *reference    = something\n        DEL_REF        = 67, // delete reference\n        REF_CALL       = 68, // f(args)    = something or f(args)++\n        REF_SPECIAL    = 69, // reference for special properties like __proto\n\n        // For XML support:\n        DEFAULTNAMESPACE = 70, // default xml namespace =\n        ESCXMLATTR     = 71,\n        ESCXMLTEXT     = 72,\n        REF_MEMBER     = 73, // Reference for x.@y, x..y etc.\n        REF_NS_MEMBER  = 74, // Reference for x.ns::y, x..ns::y etc.\n        REF_NAME       = 75, // Reference for @y, @[y] etc.\n        REF_NS_NAME    = 76; // Reference for ns::y, @ns::y@[y] etc.",
        "begin_line": 69,
        "end_line": 154,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.NEG",
        "snippet": "    public final static int\n    // start enum\n        ERROR          = -1, // well-known as the only code < EOF\n        EOF            = 0,  // end of file token - (not EOF_CHAR)\n        EOL            = 1,  // end of line\n\n        // Interpreter reuses the following as bytecodes\n        FIRST_BYTECODE_TOKEN    = 2,\n\n        ENTERWITH      = 2,\n        LEAVEWITH      = 3,\n        RETURN         = 4,\n        GOTO           = 5,\n        IFEQ           = 6,\n        IFNE           = 7,\n        SETNAME        = 8,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        SETPROP        = 34,\n        GETELEM        = 35,\n        SETELEM        = 36,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        BINDNAME       = 48,\n        THROW          = 49,\n        RETHROW        = 50, // rethrow caught execetion: catch (e if ) use it\n        IN             = 51,\n        INSTANCEOF     = 52,\n        LOCAL_LOAD     = 53,\n        GETVAR         = 54,\n        SETVAR         = 55,\n        CATCH_SCOPE    = 56,\n        ENUM_INIT_KEYS = 57,\n        ENUM_INIT_VALUES = 58,\n        ENUM_NEXT      = 59,\n        ENUM_ID        = 60,\n        THISFN         = 61,\n        RETURN_RESULT  = 62, // to return prevoisly stored return result\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n        GET_REF        = 65, // *reference\n        SET_REF        = 66, // *reference    = something\n        DEL_REF        = 67, // delete reference\n        REF_CALL       = 68, // f(args)    = something or f(args)++\n        REF_SPECIAL    = 69, // reference for special properties like __proto\n\n        // For XML support:\n        DEFAULTNAMESPACE = 70, // default xml namespace =\n        ESCXMLATTR     = 71,\n        ESCXMLTEXT     = 72,\n        REF_MEMBER     = 73, // Reference for x.@y, x..y etc.\n        REF_NS_MEMBER  = 74, // Reference for x.ns::y, x..ns::y etc.\n        REF_NAME       = 75, // Reference for @y, @[y] etc.\n        REF_NS_NAME    = 76; // Reference for ns::y, @ns::y@[y] etc.",
        "begin_line": 69,
        "end_line": 154,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.NEW",
        "snippet": "    public final static int\n    // start enum\n        ERROR          = -1, // well-known as the only code < EOF\n        EOF            = 0,  // end of file token - (not EOF_CHAR)\n        EOL            = 1,  // end of line\n\n        // Interpreter reuses the following as bytecodes\n        FIRST_BYTECODE_TOKEN    = 2,\n\n        ENTERWITH      = 2,\n        LEAVEWITH      = 3,\n        RETURN         = 4,\n        GOTO           = 5,\n        IFEQ           = 6,\n        IFNE           = 7,\n        SETNAME        = 8,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        SETPROP        = 34,\n        GETELEM        = 35,\n        SETELEM        = 36,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        BINDNAME       = 48,\n        THROW          = 49,\n        RETHROW        = 50, // rethrow caught execetion: catch (e if ) use it\n        IN             = 51,\n        INSTANCEOF     = 52,\n        LOCAL_LOAD     = 53,\n        GETVAR         = 54,\n        SETVAR         = 55,\n        CATCH_SCOPE    = 56,\n        ENUM_INIT_KEYS = 57,\n        ENUM_INIT_VALUES = 58,\n        ENUM_NEXT      = 59,\n        ENUM_ID        = 60,\n        THISFN         = 61,\n        RETURN_RESULT  = 62, // to return prevoisly stored return result\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n        GET_REF        = 65, // *reference\n        SET_REF        = 66, // *reference    = something\n        DEL_REF        = 67, // delete reference\n        REF_CALL       = 68, // f(args)    = something or f(args)++\n        REF_SPECIAL    = 69, // reference for special properties like __proto\n\n        // For XML support:\n        DEFAULTNAMESPACE = 70, // default xml namespace =\n        ESCXMLATTR     = 71,\n        ESCXMLTEXT     = 72,\n        REF_MEMBER     = 73, // Reference for x.@y, x..y etc.\n        REF_NS_MEMBER  = 74, // Reference for x.ns::y, x..ns::y etc.\n        REF_NAME       = 75, // Reference for @y, @[y] etc.\n        REF_NS_NAME    = 76; // Reference for ns::y, @ns::y@[y] etc.",
        "begin_line": 69,
        "end_line": 154,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.DELPROP",
        "snippet": "    public final static int\n    // start enum\n        ERROR          = -1, // well-known as the only code < EOF\n        EOF            = 0,  // end of file token - (not EOF_CHAR)\n        EOL            = 1,  // end of line\n\n        // Interpreter reuses the following as bytecodes\n        FIRST_BYTECODE_TOKEN    = 2,\n\n        ENTERWITH      = 2,\n        LEAVEWITH      = 3,\n        RETURN         = 4,\n        GOTO           = 5,\n        IFEQ           = 6,\n        IFNE           = 7,\n        SETNAME        = 8,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        SETPROP        = 34,\n        GETELEM        = 35,\n        SETELEM        = 36,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        BINDNAME       = 48,\n        THROW          = 49,\n        RETHROW        = 50, // rethrow caught execetion: catch (e if ) use it\n        IN             = 51,\n        INSTANCEOF     = 52,\n        LOCAL_LOAD     = 53,\n        GETVAR         = 54,\n        SETVAR         = 55,\n        CATCH_SCOPE    = 56,\n        ENUM_INIT_KEYS = 57,\n        ENUM_INIT_VALUES = 58,\n        ENUM_NEXT      = 59,\n        ENUM_ID        = 60,\n        THISFN         = 61,\n        RETURN_RESULT  = 62, // to return prevoisly stored return result\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n        GET_REF        = 65, // *reference\n        SET_REF        = 66, // *reference    = something\n        DEL_REF        = 67, // delete reference\n        REF_CALL       = 68, // f(args)    = something or f(args)++\n        REF_SPECIAL    = 69, // reference for special properties like __proto\n\n        // For XML support:\n        DEFAULTNAMESPACE = 70, // default xml namespace =\n        ESCXMLATTR     = 71,\n        ESCXMLTEXT     = 72,\n        REF_MEMBER     = 73, // Reference for x.@y, x..y etc.\n        REF_NS_MEMBER  = 74, // Reference for x.ns::y, x..ns::y etc.\n        REF_NAME       = 75, // Reference for @y, @[y] etc.\n        REF_NS_NAME    = 76; // Reference for ns::y, @ns::y@[y] etc.",
        "begin_line": 69,
        "end_line": 154,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.TYPEOF",
        "snippet": "    public final static int\n    // start enum\n        ERROR          = -1, // well-known as the only code < EOF\n        EOF            = 0,  // end of file token - (not EOF_CHAR)\n        EOL            = 1,  // end of line\n\n        // Interpreter reuses the following as bytecodes\n        FIRST_BYTECODE_TOKEN    = 2,\n\n        ENTERWITH      = 2,\n        LEAVEWITH      = 3,\n        RETURN         = 4,\n        GOTO           = 5,\n        IFEQ           = 6,\n        IFNE           = 7,\n        SETNAME        = 8,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        SETPROP        = 34,\n        GETELEM        = 35,\n        SETELEM        = 36,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        BINDNAME       = 48,\n        THROW          = 49,\n        RETHROW        = 50, // rethrow caught execetion: catch (e if ) use it\n        IN             = 51,\n        INSTANCEOF     = 52,\n        LOCAL_LOAD     = 53,\n        GETVAR         = 54,\n        SETVAR         = 55,\n        CATCH_SCOPE    = 56,\n        ENUM_INIT_KEYS = 57,\n        ENUM_INIT_VALUES = 58,\n        ENUM_NEXT      = 59,\n        ENUM_ID        = 60,\n        THISFN         = 61,\n        RETURN_RESULT  = 62, // to return prevoisly stored return result\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n        GET_REF        = 65, // *reference\n        SET_REF        = 66, // *reference    = something\n        DEL_REF        = 67, // delete reference\n        REF_CALL       = 68, // f(args)    = something or f(args)++\n        REF_SPECIAL    = 69, // reference for special properties like __proto\n\n        // For XML support:\n        DEFAULTNAMESPACE = 70, // default xml namespace =\n        ESCXMLATTR     = 71,\n        ESCXMLTEXT     = 72,\n        REF_MEMBER     = 73, // Reference for x.@y, x..y etc.\n        REF_NS_MEMBER  = 74, // Reference for x.ns::y, x..ns::y etc.\n        REF_NAME       = 75, // Reference for @y, @[y] etc.\n        REF_NS_NAME    = 76; // Reference for ns::y, @ns::y@[y] etc.",
        "begin_line": 69,
        "end_line": 154,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.GETPROP",
        "snippet": "    public final static int\n    // start enum\n        ERROR          = -1, // well-known as the only code < EOF\n        EOF            = 0,  // end of file token - (not EOF_CHAR)\n        EOL            = 1,  // end of line\n\n        // Interpreter reuses the following as bytecodes\n        FIRST_BYTECODE_TOKEN    = 2,\n\n        ENTERWITH      = 2,\n        LEAVEWITH      = 3,\n        RETURN         = 4,\n        GOTO           = 5,\n        IFEQ           = 6,\n        IFNE           = 7,\n        SETNAME        = 8,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        SETPROP        = 34,\n        GETELEM        = 35,\n        SETELEM        = 36,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        BINDNAME       = 48,\n        THROW          = 49,\n        RETHROW        = 50, // rethrow caught execetion: catch (e if ) use it\n        IN             = 51,\n        INSTANCEOF     = 52,\n        LOCAL_LOAD     = 53,\n        GETVAR         = 54,\n        SETVAR         = 55,\n        CATCH_SCOPE    = 56,\n        ENUM_INIT_KEYS = 57,\n        ENUM_INIT_VALUES = 58,\n        ENUM_NEXT      = 59,\n        ENUM_ID        = 60,\n        THISFN         = 61,\n        RETURN_RESULT  = 62, // to return prevoisly stored return result\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n        GET_REF        = 65, // *reference\n        SET_REF        = 66, // *reference    = something\n        DEL_REF        = 67, // delete reference\n        REF_CALL       = 68, // f(args)    = something or f(args)++\n        REF_SPECIAL    = 69, // reference for special properties like __proto\n\n        // For XML support:\n        DEFAULTNAMESPACE = 70, // default xml namespace =\n        ESCXMLATTR     = 71,\n        ESCXMLTEXT     = 72,\n        REF_MEMBER     = 73, // Reference for x.@y, x..y etc.\n        REF_NS_MEMBER  = 74, // Reference for x.ns::y, x..ns::y etc.\n        REF_NAME       = 75, // Reference for @y, @[y] etc.\n        REF_NS_NAME    = 76; // Reference for ns::y, @ns::y@[y] etc.",
        "begin_line": 69,
        "end_line": 154,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.SETPROP",
        "snippet": "    public final static int\n    // start enum\n        ERROR          = -1, // well-known as the only code < EOF\n        EOF            = 0,  // end of file token - (not EOF_CHAR)\n        EOL            = 1,  // end of line\n\n        // Interpreter reuses the following as bytecodes\n        FIRST_BYTECODE_TOKEN    = 2,\n\n        ENTERWITH      = 2,\n        LEAVEWITH      = 3,\n        RETURN         = 4,\n        GOTO           = 5,\n        IFEQ           = 6,\n        IFNE           = 7,\n        SETNAME        = 8,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        SETPROP        = 34,\n        GETELEM        = 35,\n        SETELEM        = 36,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        BINDNAME       = 48,\n        THROW          = 49,\n        RETHROW        = 50, // rethrow caught execetion: catch (e if ) use it\n        IN             = 51,\n        INSTANCEOF     = 52,\n        LOCAL_LOAD     = 53,\n        GETVAR         = 54,\n        SETVAR         = 55,\n        CATCH_SCOPE    = 56,\n        ENUM_INIT_KEYS = 57,\n        ENUM_INIT_VALUES = 58,\n        ENUM_NEXT      = 59,\n        ENUM_ID        = 60,\n        THISFN         = 61,\n        RETURN_RESULT  = 62, // to return prevoisly stored return result\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n        GET_REF        = 65, // *reference\n        SET_REF        = 66, // *reference    = something\n        DEL_REF        = 67, // delete reference\n        REF_CALL       = 68, // f(args)    = something or f(args)++\n        REF_SPECIAL    = 69, // reference for special properties like __proto\n\n        // For XML support:\n        DEFAULTNAMESPACE = 70, // default xml namespace =\n        ESCXMLATTR     = 71,\n        ESCXMLTEXT     = 72,\n        REF_MEMBER     = 73, // Reference for x.@y, x..y etc.\n        REF_NS_MEMBER  = 74, // Reference for x.ns::y, x..ns::y etc.\n        REF_NAME       = 75, // Reference for @y, @[y] etc.\n        REF_NS_NAME    = 76; // Reference for ns::y, @ns::y@[y] etc.",
        "begin_line": 69,
        "end_line": 154,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.GETELEM",
        "snippet": "    public final static int\n    // start enum\n        ERROR          = -1, // well-known as the only code < EOF\n        EOF            = 0,  // end of file token - (not EOF_CHAR)\n        EOL            = 1,  // end of line\n\n        // Interpreter reuses the following as bytecodes\n        FIRST_BYTECODE_TOKEN    = 2,\n\n        ENTERWITH      = 2,\n        LEAVEWITH      = 3,\n        RETURN         = 4,\n        GOTO           = 5,\n        IFEQ           = 6,\n        IFNE           = 7,\n        SETNAME        = 8,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        SETPROP        = 34,\n        GETELEM        = 35,\n        SETELEM        = 36,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        BINDNAME       = 48,\n        THROW          = 49,\n        RETHROW        = 50, // rethrow caught execetion: catch (e if ) use it\n        IN             = 51,\n        INSTANCEOF     = 52,\n        LOCAL_LOAD     = 53,\n        GETVAR         = 54,\n        SETVAR         = 55,\n        CATCH_SCOPE    = 56,\n        ENUM_INIT_KEYS = 57,\n        ENUM_INIT_VALUES = 58,\n        ENUM_NEXT      = 59,\n        ENUM_ID        = 60,\n        THISFN         = 61,\n        RETURN_RESULT  = 62, // to return prevoisly stored return result\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n        GET_REF        = 65, // *reference\n        SET_REF        = 66, // *reference    = something\n        DEL_REF        = 67, // delete reference\n        REF_CALL       = 68, // f(args)    = something or f(args)++\n        REF_SPECIAL    = 69, // reference for special properties like __proto\n\n        // For XML support:\n        DEFAULTNAMESPACE = 70, // default xml namespace =\n        ESCXMLATTR     = 71,\n        ESCXMLTEXT     = 72,\n        REF_MEMBER     = 73, // Reference for x.@y, x..y etc.\n        REF_NS_MEMBER  = 74, // Reference for x.ns::y, x..ns::y etc.\n        REF_NAME       = 75, // Reference for @y, @[y] etc.\n        REF_NS_NAME    = 76; // Reference for ns::y, @ns::y@[y] etc.",
        "begin_line": 69,
        "end_line": 154,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.SETELEM",
        "snippet": "    public final static int\n    // start enum\n        ERROR          = -1, // well-known as the only code < EOF\n        EOF            = 0,  // end of file token - (not EOF_CHAR)\n        EOL            = 1,  // end of line\n\n        // Interpreter reuses the following as bytecodes\n        FIRST_BYTECODE_TOKEN    = 2,\n\n        ENTERWITH      = 2,\n        LEAVEWITH      = 3,\n        RETURN         = 4,\n        GOTO           = 5,\n        IFEQ           = 6,\n        IFNE           = 7,\n        SETNAME        = 8,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        SETPROP        = 34,\n        GETELEM        = 35,\n        SETELEM        = 36,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        BINDNAME       = 48,\n        THROW          = 49,\n        RETHROW        = 50, // rethrow caught execetion: catch (e if ) use it\n        IN             = 51,\n        INSTANCEOF     = 52,\n        LOCAL_LOAD     = 53,\n        GETVAR         = 54,\n        SETVAR         = 55,\n        CATCH_SCOPE    = 56,\n        ENUM_INIT_KEYS = 57,\n        ENUM_INIT_VALUES = 58,\n        ENUM_NEXT      = 59,\n        ENUM_ID        = 60,\n        THISFN         = 61,\n        RETURN_RESULT  = 62, // to return prevoisly stored return result\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n        GET_REF        = 65, // *reference\n        SET_REF        = 66, // *reference    = something\n        DEL_REF        = 67, // delete reference\n        REF_CALL       = 68, // f(args)    = something or f(args)++\n        REF_SPECIAL    = 69, // reference for special properties like __proto\n\n        // For XML support:\n        DEFAULTNAMESPACE = 70, // default xml namespace =\n        ESCXMLATTR     = 71,\n        ESCXMLTEXT     = 72,\n        REF_MEMBER     = 73, // Reference for x.@y, x..y etc.\n        REF_NS_MEMBER  = 74, // Reference for x.ns::y, x..ns::y etc.\n        REF_NAME       = 75, // Reference for @y, @[y] etc.\n        REF_NS_NAME    = 76; // Reference for ns::y, @ns::y@[y] etc.",
        "begin_line": 69,
        "end_line": 154,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.CALL",
        "snippet": "    public final static int\n    // start enum\n        ERROR          = -1, // well-known as the only code < EOF\n        EOF            = 0,  // end of file token - (not EOF_CHAR)\n        EOL            = 1,  // end of line\n\n        // Interpreter reuses the following as bytecodes\n        FIRST_BYTECODE_TOKEN    = 2,\n\n        ENTERWITH      = 2,\n        LEAVEWITH      = 3,\n        RETURN         = 4,\n        GOTO           = 5,\n        IFEQ           = 6,\n        IFNE           = 7,\n        SETNAME        = 8,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        SETPROP        = 34,\n        GETELEM        = 35,\n        SETELEM        = 36,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        BINDNAME       = 48,\n        THROW          = 49,\n        RETHROW        = 50, // rethrow caught execetion: catch (e if ) use it\n        IN             = 51,\n        INSTANCEOF     = 52,\n        LOCAL_LOAD     = 53,\n        GETVAR         = 54,\n        SETVAR         = 55,\n        CATCH_SCOPE    = 56,\n        ENUM_INIT_KEYS = 57,\n        ENUM_INIT_VALUES = 58,\n        ENUM_NEXT      = 59,\n        ENUM_ID        = 60,\n        THISFN         = 61,\n        RETURN_RESULT  = 62, // to return prevoisly stored return result\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n        GET_REF        = 65, // *reference\n        SET_REF        = 66, // *reference    = something\n        DEL_REF        = 67, // delete reference\n        REF_CALL       = 68, // f(args)    = something or f(args)++\n        REF_SPECIAL    = 69, // reference for special properties like __proto\n\n        // For XML support:\n        DEFAULTNAMESPACE = 70, // default xml namespace =\n        ESCXMLATTR     = 71,\n        ESCXMLTEXT     = 72,\n        REF_MEMBER     = 73, // Reference for x.@y, x..y etc.\n        REF_NS_MEMBER  = 74, // Reference for x.ns::y, x..ns::y etc.\n        REF_NAME       = 75, // Reference for @y, @[y] etc.\n        REF_NS_NAME    = 76; // Reference for ns::y, @ns::y@[y] etc.",
        "begin_line": 69,
        "end_line": 154,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.NAME",
        "snippet": "    public final static int\n    // start enum\n        ERROR          = -1, // well-known as the only code < EOF\n        EOF            = 0,  // end of file token - (not EOF_CHAR)\n        EOL            = 1,  // end of line\n\n        // Interpreter reuses the following as bytecodes\n        FIRST_BYTECODE_TOKEN    = 2,\n\n        ENTERWITH      = 2,\n        LEAVEWITH      = 3,\n        RETURN         = 4,\n        GOTO           = 5,\n        IFEQ           = 6,\n        IFNE           = 7,\n        SETNAME        = 8,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        SETPROP        = 34,\n        GETELEM        = 35,\n        SETELEM        = 36,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        BINDNAME       = 48,\n        THROW          = 49,\n        RETHROW        = 50, // rethrow caught execetion: catch (e if ) use it\n        IN             = 51,\n        INSTANCEOF     = 52,\n        LOCAL_LOAD     = 53,\n        GETVAR         = 54,\n        SETVAR         = 55,\n        CATCH_SCOPE    = 56,\n        ENUM_INIT_KEYS = 57,\n        ENUM_INIT_VALUES = 58,\n        ENUM_NEXT      = 59,\n        ENUM_ID        = 60,\n        THISFN         = 61,\n        RETURN_RESULT  = 62, // to return prevoisly stored return result\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n        GET_REF        = 65, // *reference\n        SET_REF        = 66, // *reference    = something\n        DEL_REF        = 67, // delete reference\n        REF_CALL       = 68, // f(args)    = something or f(args)++\n        REF_SPECIAL    = 69, // reference for special properties like __proto\n\n        // For XML support:\n        DEFAULTNAMESPACE = 70, // default xml namespace =\n        ESCXMLATTR     = 71,\n        ESCXMLTEXT     = 72,\n        REF_MEMBER     = 73, // Reference for x.@y, x..y etc.\n        REF_NS_MEMBER  = 74, // Reference for x.ns::y, x..ns::y etc.\n        REF_NAME       = 75, // Reference for @y, @[y] etc.\n        REF_NS_NAME    = 76; // Reference for ns::y, @ns::y@[y] etc.",
        "begin_line": 69,
        "end_line": 154,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.NUMBER",
        "snippet": "    public final static int\n    // start enum\n        ERROR          = -1, // well-known as the only code < EOF\n        EOF            = 0,  // end of file token - (not EOF_CHAR)\n        EOL            = 1,  // end of line\n\n        // Interpreter reuses the following as bytecodes\n        FIRST_BYTECODE_TOKEN    = 2,\n\n        ENTERWITH      = 2,\n        LEAVEWITH      = 3,\n        RETURN         = 4,\n        GOTO           = 5,\n        IFEQ           = 6,\n        IFNE           = 7,\n        SETNAME        = 8,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        SETPROP        = 34,\n        GETELEM        = 35,\n        SETELEM        = 36,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        BINDNAME       = 48,\n        THROW          = 49,\n        RETHROW        = 50, // rethrow caught execetion: catch (e if ) use it\n        IN             = 51,\n        INSTANCEOF     = 52,\n        LOCAL_LOAD     = 53,\n        GETVAR         = 54,\n        SETVAR         = 55,\n        CATCH_SCOPE    = 56,\n        ENUM_INIT_KEYS = 57,\n        ENUM_INIT_VALUES = 58,\n        ENUM_NEXT      = 59,\n        ENUM_ID        = 60,\n        THISFN         = 61,\n        RETURN_RESULT  = 62, // to return prevoisly stored return result\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n        GET_REF        = 65, // *reference\n        SET_REF        = 66, // *reference    = something\n        DEL_REF        = 67, // delete reference\n        REF_CALL       = 68, // f(args)    = something or f(args)++\n        REF_SPECIAL    = 69, // reference for special properties like __proto\n\n        // For XML support:\n        DEFAULTNAMESPACE = 70, // default xml namespace =\n        ESCXMLATTR     = 71,\n        ESCXMLTEXT     = 72,\n        REF_MEMBER     = 73, // Reference for x.@y, x..y etc.\n        REF_NS_MEMBER  = 74, // Reference for x.ns::y, x..ns::y etc.\n        REF_NAME       = 75, // Reference for @y, @[y] etc.\n        REF_NS_NAME    = 76; // Reference for ns::y, @ns::y@[y] etc.",
        "begin_line": 69,
        "end_line": 154,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.STRING",
        "snippet": "    public final static int\n    // start enum\n        ERROR          = -1, // well-known as the only code < EOF\n        EOF            = 0,  // end of file token - (not EOF_CHAR)\n        EOL            = 1,  // end of line\n\n        // Interpreter reuses the following as bytecodes\n        FIRST_BYTECODE_TOKEN    = 2,\n\n        ENTERWITH      = 2,\n        LEAVEWITH      = 3,\n        RETURN         = 4,\n        GOTO           = 5,\n        IFEQ           = 6,\n        IFNE           = 7,\n        SETNAME        = 8,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        SETPROP        = 34,\n        GETELEM        = 35,\n        SETELEM        = 36,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        BINDNAME       = 48,\n        THROW          = 49,\n        RETHROW        = 50, // rethrow caught execetion: catch (e if ) use it\n        IN             = 51,\n        INSTANCEOF     = 52,\n        LOCAL_LOAD     = 53,\n        GETVAR         = 54,\n        SETVAR         = 55,\n        CATCH_SCOPE    = 56,\n        ENUM_INIT_KEYS = 57,\n        ENUM_INIT_VALUES = 58,\n        ENUM_NEXT      = 59,\n        ENUM_ID        = 60,\n        THISFN         = 61,\n        RETURN_RESULT  = 62, // to return prevoisly stored return result\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n        GET_REF        = 65, // *reference\n        SET_REF        = 66, // *reference    = something\n        DEL_REF        = 67, // delete reference\n        REF_CALL       = 68, // f(args)    = something or f(args)++\n        REF_SPECIAL    = 69, // reference for special properties like __proto\n\n        // For XML support:\n        DEFAULTNAMESPACE = 70, // default xml namespace =\n        ESCXMLATTR     = 71,\n        ESCXMLTEXT     = 72,\n        REF_MEMBER     = 73, // Reference for x.@y, x..y etc.\n        REF_NS_MEMBER  = 74, // Reference for x.ns::y, x..ns::y etc.\n        REF_NAME       = 75, // Reference for @y, @[y] etc.\n        REF_NS_NAME    = 76; // Reference for ns::y, @ns::y@[y] etc.",
        "begin_line": 69,
        "end_line": 154,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.NULL",
        "snippet": "    public final static int\n    // start enum\n        ERROR          = -1, // well-known as the only code < EOF\n        EOF            = 0,  // end of file token - (not EOF_CHAR)\n        EOL            = 1,  // end of line\n\n        // Interpreter reuses the following as bytecodes\n        FIRST_BYTECODE_TOKEN    = 2,\n\n        ENTERWITH      = 2,\n        LEAVEWITH      = 3,\n        RETURN         = 4,\n        GOTO           = 5,\n        IFEQ           = 6,\n        IFNE           = 7,\n        SETNAME        = 8,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        SETPROP        = 34,\n        GETELEM        = 35,\n        SETELEM        = 36,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        BINDNAME       = 48,\n        THROW          = 49,\n        RETHROW        = 50, // rethrow caught execetion: catch (e if ) use it\n        IN             = 51,\n        INSTANCEOF     = 52,\n        LOCAL_LOAD     = 53,\n        GETVAR         = 54,\n        SETVAR         = 55,\n        CATCH_SCOPE    = 56,\n        ENUM_INIT_KEYS = 57,\n        ENUM_INIT_VALUES = 58,\n        ENUM_NEXT      = 59,\n        ENUM_ID        = 60,\n        THISFN         = 61,\n        RETURN_RESULT  = 62, // to return prevoisly stored return result\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n        GET_REF        = 65, // *reference\n        SET_REF        = 66, // *reference    = something\n        DEL_REF        = 67, // delete reference\n        REF_CALL       = 68, // f(args)    = something or f(args)++\n        REF_SPECIAL    = 69, // reference for special properties like __proto\n\n        // For XML support:\n        DEFAULTNAMESPACE = 70, // default xml namespace =\n        ESCXMLATTR     = 71,\n        ESCXMLTEXT     = 72,\n        REF_MEMBER     = 73, // Reference for x.@y, x..y etc.\n        REF_NS_MEMBER  = 74, // Reference for x.ns::y, x..ns::y etc.\n        REF_NAME       = 75, // Reference for @y, @[y] etc.\n        REF_NS_NAME    = 76; // Reference for ns::y, @ns::y@[y] etc.",
        "begin_line": 69,
        "end_line": 154,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.THIS",
        "snippet": "    public final static int\n    // start enum\n        ERROR          = -1, // well-known as the only code < EOF\n        EOF            = 0,  // end of file token - (not EOF_CHAR)\n        EOL            = 1,  // end of line\n\n        // Interpreter reuses the following as bytecodes\n        FIRST_BYTECODE_TOKEN    = 2,\n\n        ENTERWITH      = 2,\n        LEAVEWITH      = 3,\n        RETURN         = 4,\n        GOTO           = 5,\n        IFEQ           = 6,\n        IFNE           = 7,\n        SETNAME        = 8,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        SETPROP        = 34,\n        GETELEM        = 35,\n        SETELEM        = 36,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        BINDNAME       = 48,\n        THROW          = 49,\n        RETHROW        = 50, // rethrow caught execetion: catch (e if ) use it\n        IN             = 51,\n        INSTANCEOF     = 52,\n        LOCAL_LOAD     = 53,\n        GETVAR         = 54,\n        SETVAR         = 55,\n        CATCH_SCOPE    = 56,\n        ENUM_INIT_KEYS = 57,\n        ENUM_INIT_VALUES = 58,\n        ENUM_NEXT      = 59,\n        ENUM_ID        = 60,\n        THISFN         = 61,\n        RETURN_RESULT  = 62, // to return prevoisly stored return result\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n        GET_REF        = 65, // *reference\n        SET_REF        = 66, // *reference    = something\n        DEL_REF        = 67, // delete reference\n        REF_CALL       = 68, // f(args)    = something or f(args)++\n        REF_SPECIAL    = 69, // reference for special properties like __proto\n\n        // For XML support:\n        DEFAULTNAMESPACE = 70, // default xml namespace =\n        ESCXMLATTR     = 71,\n        ESCXMLTEXT     = 72,\n        REF_MEMBER     = 73, // Reference for x.@y, x..y etc.\n        REF_NS_MEMBER  = 74, // Reference for x.ns::y, x..ns::y etc.\n        REF_NAME       = 75, // Reference for @y, @[y] etc.\n        REF_NS_NAME    = 76; // Reference for ns::y, @ns::y@[y] etc.",
        "begin_line": 69,
        "end_line": 154,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.FALSE",
        "snippet": "    public final static int\n    // start enum\n        ERROR          = -1, // well-known as the only code < EOF\n        EOF            = 0,  // end of file token - (not EOF_CHAR)\n        EOL            = 1,  // end of line\n\n        // Interpreter reuses the following as bytecodes\n        FIRST_BYTECODE_TOKEN    = 2,\n\n        ENTERWITH      = 2,\n        LEAVEWITH      = 3,\n        RETURN         = 4,\n        GOTO           = 5,\n        IFEQ           = 6,\n        IFNE           = 7,\n        SETNAME        = 8,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        SETPROP        = 34,\n        GETELEM        = 35,\n        SETELEM        = 36,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        BINDNAME       = 48,\n        THROW          = 49,\n        RETHROW        = 50, // rethrow caught execetion: catch (e if ) use it\n        IN             = 51,\n        INSTANCEOF     = 52,\n        LOCAL_LOAD     = 53,\n        GETVAR         = 54,\n        SETVAR         = 55,\n        CATCH_SCOPE    = 56,\n        ENUM_INIT_KEYS = 57,\n        ENUM_INIT_VALUES = 58,\n        ENUM_NEXT      = 59,\n        ENUM_ID        = 60,\n        THISFN         = 61,\n        RETURN_RESULT  = 62, // to return prevoisly stored return result\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n        GET_REF        = 65, // *reference\n        SET_REF        = 66, // *reference    = something\n        DEL_REF        = 67, // delete reference\n        REF_CALL       = 68, // f(args)    = something or f(args)++\n        REF_SPECIAL    = 69, // reference for special properties like __proto\n\n        // For XML support:\n        DEFAULTNAMESPACE = 70, // default xml namespace =\n        ESCXMLATTR     = 71,\n        ESCXMLTEXT     = 72,\n        REF_MEMBER     = 73, // Reference for x.@y, x..y etc.\n        REF_NS_MEMBER  = 74, // Reference for x.ns::y, x..ns::y etc.\n        REF_NAME       = 75, // Reference for @y, @[y] etc.\n        REF_NS_NAME    = 76; // Reference for ns::y, @ns::y@[y] etc.",
        "begin_line": 69,
        "end_line": 154,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.TRUE",
        "snippet": "    public final static int\n    // start enum\n        ERROR          = -1, // well-known as the only code < EOF\n        EOF            = 0,  // end of file token - (not EOF_CHAR)\n        EOL            = 1,  // end of line\n\n        // Interpreter reuses the following as bytecodes\n        FIRST_BYTECODE_TOKEN    = 2,\n\n        ENTERWITH      = 2,\n        LEAVEWITH      = 3,\n        RETURN         = 4,\n        GOTO           = 5,\n        IFEQ           = 6,\n        IFNE           = 7,\n        SETNAME        = 8,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        SETPROP        = 34,\n        GETELEM        = 35,\n        SETELEM        = 36,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        BINDNAME       = 48,\n        THROW          = 49,\n        RETHROW        = 50, // rethrow caught execetion: catch (e if ) use it\n        IN             = 51,\n        INSTANCEOF     = 52,\n        LOCAL_LOAD     = 53,\n        GETVAR         = 54,\n        SETVAR         = 55,\n        CATCH_SCOPE    = 56,\n        ENUM_INIT_KEYS = 57,\n        ENUM_INIT_VALUES = 58,\n        ENUM_NEXT      = 59,\n        ENUM_ID        = 60,\n        THISFN         = 61,\n        RETURN_RESULT  = 62, // to return prevoisly stored return result\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n        GET_REF        = 65, // *reference\n        SET_REF        = 66, // *reference    = something\n        DEL_REF        = 67, // delete reference\n        REF_CALL       = 68, // f(args)    = something or f(args)++\n        REF_SPECIAL    = 69, // reference for special properties like __proto\n\n        // For XML support:\n        DEFAULTNAMESPACE = 70, // default xml namespace =\n        ESCXMLATTR     = 71,\n        ESCXMLTEXT     = 72,\n        REF_MEMBER     = 73, // Reference for x.@y, x..y etc.\n        REF_NS_MEMBER  = 74, // Reference for x.ns::y, x..ns::y etc.\n        REF_NAME       = 75, // Reference for @y, @[y] etc.\n        REF_NS_NAME    = 76; // Reference for ns::y, @ns::y@[y] etc.",
        "begin_line": 69,
        "end_line": 154,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.SHEQ",
        "snippet": "    public final static int\n    // start enum\n        ERROR          = -1, // well-known as the only code < EOF\n        EOF            = 0,  // end of file token - (not EOF_CHAR)\n        EOL            = 1,  // end of line\n\n        // Interpreter reuses the following as bytecodes\n        FIRST_BYTECODE_TOKEN    = 2,\n\n        ENTERWITH      = 2,\n        LEAVEWITH      = 3,\n        RETURN         = 4,\n        GOTO           = 5,\n        IFEQ           = 6,\n        IFNE           = 7,\n        SETNAME        = 8,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        SETPROP        = 34,\n        GETELEM        = 35,\n        SETELEM        = 36,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        BINDNAME       = 48,\n        THROW          = 49,\n        RETHROW        = 50, // rethrow caught execetion: catch (e if ) use it\n        IN             = 51,\n        INSTANCEOF     = 52,\n        LOCAL_LOAD     = 53,\n        GETVAR         = 54,\n        SETVAR         = 55,\n        CATCH_SCOPE    = 56,\n        ENUM_INIT_KEYS = 57,\n        ENUM_INIT_VALUES = 58,\n        ENUM_NEXT      = 59,\n        ENUM_ID        = 60,\n        THISFN         = 61,\n        RETURN_RESULT  = 62, // to return prevoisly stored return result\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n        GET_REF        = 65, // *reference\n        SET_REF        = 66, // *reference    = something\n        DEL_REF        = 67, // delete reference\n        REF_CALL       = 68, // f(args)    = something or f(args)++\n        REF_SPECIAL    = 69, // reference for special properties like __proto\n\n        // For XML support:\n        DEFAULTNAMESPACE = 70, // default xml namespace =\n        ESCXMLATTR     = 71,\n        ESCXMLTEXT     = 72,\n        REF_MEMBER     = 73, // Reference for x.@y, x..y etc.\n        REF_NS_MEMBER  = 74, // Reference for x.ns::y, x..ns::y etc.\n        REF_NAME       = 75, // Reference for @y, @[y] etc.\n        REF_NS_NAME    = 76; // Reference for ns::y, @ns::y@[y] etc.",
        "begin_line": 69,
        "end_line": 154,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.SHNE",
        "snippet": "    public final static int\n    // start enum\n        ERROR          = -1, // well-known as the only code < EOF\n        EOF            = 0,  // end of file token - (not EOF_CHAR)\n        EOL            = 1,  // end of line\n\n        // Interpreter reuses the following as bytecodes\n        FIRST_BYTECODE_TOKEN    = 2,\n\n        ENTERWITH      = 2,\n        LEAVEWITH      = 3,\n        RETURN         = 4,\n        GOTO           = 5,\n        IFEQ           = 6,\n        IFNE           = 7,\n        SETNAME        = 8,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        SETPROP        = 34,\n        GETELEM        = 35,\n        SETELEM        = 36,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        BINDNAME       = 48,\n        THROW          = 49,\n        RETHROW        = 50, // rethrow caught execetion: catch (e if ) use it\n        IN             = 51,\n        INSTANCEOF     = 52,\n        LOCAL_LOAD     = 53,\n        GETVAR         = 54,\n        SETVAR         = 55,\n        CATCH_SCOPE    = 56,\n        ENUM_INIT_KEYS = 57,\n        ENUM_INIT_VALUES = 58,\n        ENUM_NEXT      = 59,\n        ENUM_ID        = 60,\n        THISFN         = 61,\n        RETURN_RESULT  = 62, // to return prevoisly stored return result\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n        GET_REF        = 65, // *reference\n        SET_REF        = 66, // *reference    = something\n        DEL_REF        = 67, // delete reference\n        REF_CALL       = 68, // f(args)    = something or f(args)++\n        REF_SPECIAL    = 69, // reference for special properties like __proto\n\n        // For XML support:\n        DEFAULTNAMESPACE = 70, // default xml namespace =\n        ESCXMLATTR     = 71,\n        ESCXMLTEXT     = 72,\n        REF_MEMBER     = 73, // Reference for x.@y, x..y etc.\n        REF_NS_MEMBER  = 74, // Reference for x.ns::y, x..ns::y etc.\n        REF_NAME       = 75, // Reference for @y, @[y] etc.\n        REF_NS_NAME    = 76; // Reference for ns::y, @ns::y@[y] etc.",
        "begin_line": 69,
        "end_line": 154,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.REGEXP",
        "snippet": "    public final static int\n    // start enum\n        ERROR          = -1, // well-known as the only code < EOF\n        EOF            = 0,  // end of file token - (not EOF_CHAR)\n        EOL            = 1,  // end of line\n\n        // Interpreter reuses the following as bytecodes\n        FIRST_BYTECODE_TOKEN    = 2,\n\n        ENTERWITH      = 2,\n        LEAVEWITH      = 3,\n        RETURN         = 4,\n        GOTO           = 5,\n        IFEQ           = 6,\n        IFNE           = 7,\n        SETNAME        = 8,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        SETPROP        = 34,\n        GETELEM        = 35,\n        SETELEM        = 36,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        BINDNAME       = 48,\n        THROW          = 49,\n        RETHROW        = 50, // rethrow caught execetion: catch (e if ) use it\n        IN             = 51,\n        INSTANCEOF     = 52,\n        LOCAL_LOAD     = 53,\n        GETVAR         = 54,\n        SETVAR         = 55,\n        CATCH_SCOPE    = 56,\n        ENUM_INIT_KEYS = 57,\n        ENUM_INIT_VALUES = 58,\n        ENUM_NEXT      = 59,\n        ENUM_ID        = 60,\n        THISFN         = 61,\n        RETURN_RESULT  = 62, // to return prevoisly stored return result\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n        GET_REF        = 65, // *reference\n        SET_REF        = 66, // *reference    = something\n        DEL_REF        = 67, // delete reference\n        REF_CALL       = 68, // f(args)    = something or f(args)++\n        REF_SPECIAL    = 69, // reference for special properties like __proto\n\n        // For XML support:\n        DEFAULTNAMESPACE = 70, // default xml namespace =\n        ESCXMLATTR     = 71,\n        ESCXMLTEXT     = 72,\n        REF_MEMBER     = 73, // Reference for x.@y, x..y etc.\n        REF_NS_MEMBER  = 74, // Reference for x.ns::y, x..ns::y etc.\n        REF_NAME       = 75, // Reference for @y, @[y] etc.\n        REF_NS_NAME    = 76; // Reference for ns::y, @ns::y@[y] etc.",
        "begin_line": 69,
        "end_line": 154,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.BINDNAME",
        "snippet": "    public final static int\n    // start enum\n        ERROR          = -1, // well-known as the only code < EOF\n        EOF            = 0,  // end of file token - (not EOF_CHAR)\n        EOL            = 1,  // end of line\n\n        // Interpreter reuses the following as bytecodes\n        FIRST_BYTECODE_TOKEN    = 2,\n\n        ENTERWITH      = 2,\n        LEAVEWITH      = 3,\n        RETURN         = 4,\n        GOTO           = 5,\n        IFEQ           = 6,\n        IFNE           = 7,\n        SETNAME        = 8,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        SETPROP        = 34,\n        GETELEM        = 35,\n        SETELEM        = 36,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        BINDNAME       = 48,\n        THROW          = 49,\n        RETHROW        = 50, // rethrow caught execetion: catch (e if ) use it\n        IN             = 51,\n        INSTANCEOF     = 52,\n        LOCAL_LOAD     = 53,\n        GETVAR         = 54,\n        SETVAR         = 55,\n        CATCH_SCOPE    = 56,\n        ENUM_INIT_KEYS = 57,\n        ENUM_INIT_VALUES = 58,\n        ENUM_NEXT      = 59,\n        ENUM_ID        = 60,\n        THISFN         = 61,\n        RETURN_RESULT  = 62, // to return prevoisly stored return result\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n        GET_REF        = 65, // *reference\n        SET_REF        = 66, // *reference    = something\n        DEL_REF        = 67, // delete reference\n        REF_CALL       = 68, // f(args)    = something or f(args)++\n        REF_SPECIAL    = 69, // reference for special properties like __proto\n\n        // For XML support:\n        DEFAULTNAMESPACE = 70, // default xml namespace =\n        ESCXMLATTR     = 71,\n        ESCXMLTEXT     = 72,\n        REF_MEMBER     = 73, // Reference for x.@y, x..y etc.\n        REF_NS_MEMBER  = 74, // Reference for x.ns::y, x..ns::y etc.\n        REF_NAME       = 75, // Reference for @y, @[y] etc.\n        REF_NS_NAME    = 76; // Reference for ns::y, @ns::y@[y] etc.",
        "begin_line": 69,
        "end_line": 154,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.THROW",
        "snippet": "    public final static int\n    // start enum\n        ERROR          = -1, // well-known as the only code < EOF\n        EOF            = 0,  // end of file token - (not EOF_CHAR)\n        EOL            = 1,  // end of line\n\n        // Interpreter reuses the following as bytecodes\n        FIRST_BYTECODE_TOKEN    = 2,\n\n        ENTERWITH      = 2,\n        LEAVEWITH      = 3,\n        RETURN         = 4,\n        GOTO           = 5,\n        IFEQ           = 6,\n        IFNE           = 7,\n        SETNAME        = 8,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        SETPROP        = 34,\n        GETELEM        = 35,\n        SETELEM        = 36,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        BINDNAME       = 48,\n        THROW          = 49,\n        RETHROW        = 50, // rethrow caught execetion: catch (e if ) use it\n        IN             = 51,\n        INSTANCEOF     = 52,\n        LOCAL_LOAD     = 53,\n        GETVAR         = 54,\n        SETVAR         = 55,\n        CATCH_SCOPE    = 56,\n        ENUM_INIT_KEYS = 57,\n        ENUM_INIT_VALUES = 58,\n        ENUM_NEXT      = 59,\n        ENUM_ID        = 60,\n        THISFN         = 61,\n        RETURN_RESULT  = 62, // to return prevoisly stored return result\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n        GET_REF        = 65, // *reference\n        SET_REF        = 66, // *reference    = something\n        DEL_REF        = 67, // delete reference\n        REF_CALL       = 68, // f(args)    = something or f(args)++\n        REF_SPECIAL    = 69, // reference for special properties like __proto\n\n        // For XML support:\n        DEFAULTNAMESPACE = 70, // default xml namespace =\n        ESCXMLATTR     = 71,\n        ESCXMLTEXT     = 72,\n        REF_MEMBER     = 73, // Reference for x.@y, x..y etc.\n        REF_NS_MEMBER  = 74, // Reference for x.ns::y, x..ns::y etc.\n        REF_NAME       = 75, // Reference for @y, @[y] etc.\n        REF_NS_NAME    = 76; // Reference for ns::y, @ns::y@[y] etc.",
        "begin_line": 69,
        "end_line": 154,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.RETHROW",
        "snippet": "    public final static int\n    // start enum\n        ERROR          = -1, // well-known as the only code < EOF\n        EOF            = 0,  // end of file token - (not EOF_CHAR)\n        EOL            = 1,  // end of line\n\n        // Interpreter reuses the following as bytecodes\n        FIRST_BYTECODE_TOKEN    = 2,\n\n        ENTERWITH      = 2,\n        LEAVEWITH      = 3,\n        RETURN         = 4,\n        GOTO           = 5,\n        IFEQ           = 6,\n        IFNE           = 7,\n        SETNAME        = 8,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        SETPROP        = 34,\n        GETELEM        = 35,\n        SETELEM        = 36,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        BINDNAME       = 48,\n        THROW          = 49,\n        RETHROW        = 50, // rethrow caught execetion: catch (e if ) use it\n        IN             = 51,\n        INSTANCEOF     = 52,\n        LOCAL_LOAD     = 53,\n        GETVAR         = 54,\n        SETVAR         = 55,\n        CATCH_SCOPE    = 56,\n        ENUM_INIT_KEYS = 57,\n        ENUM_INIT_VALUES = 58,\n        ENUM_NEXT      = 59,\n        ENUM_ID        = 60,\n        THISFN         = 61,\n        RETURN_RESULT  = 62, // to return prevoisly stored return result\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n        GET_REF        = 65, // *reference\n        SET_REF        = 66, // *reference    = something\n        DEL_REF        = 67, // delete reference\n        REF_CALL       = 68, // f(args)    = something or f(args)++\n        REF_SPECIAL    = 69, // reference for special properties like __proto\n\n        // For XML support:\n        DEFAULTNAMESPACE = 70, // default xml namespace =\n        ESCXMLATTR     = 71,\n        ESCXMLTEXT     = 72,\n        REF_MEMBER     = 73, // Reference for x.@y, x..y etc.\n        REF_NS_MEMBER  = 74, // Reference for x.ns::y, x..ns::y etc.\n        REF_NAME       = 75, // Reference for @y, @[y] etc.\n        REF_NS_NAME    = 76; // Reference for ns::y, @ns::y@[y] etc.",
        "begin_line": 69,
        "end_line": 154,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.IN",
        "snippet": "    public final static int\n    // start enum\n        ERROR          = -1, // well-known as the only code < EOF\n        EOF            = 0,  // end of file token - (not EOF_CHAR)\n        EOL            = 1,  // end of line\n\n        // Interpreter reuses the following as bytecodes\n        FIRST_BYTECODE_TOKEN    = 2,\n\n        ENTERWITH      = 2,\n        LEAVEWITH      = 3,\n        RETURN         = 4,\n        GOTO           = 5,\n        IFEQ           = 6,\n        IFNE           = 7,\n        SETNAME        = 8,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        SETPROP        = 34,\n        GETELEM        = 35,\n        SETELEM        = 36,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        BINDNAME       = 48,\n        THROW          = 49,\n        RETHROW        = 50, // rethrow caught execetion: catch (e if ) use it\n        IN             = 51,\n        INSTANCEOF     = 52,\n        LOCAL_LOAD     = 53,\n        GETVAR         = 54,\n        SETVAR         = 55,\n        CATCH_SCOPE    = 56,\n        ENUM_INIT_KEYS = 57,\n        ENUM_INIT_VALUES = 58,\n        ENUM_NEXT      = 59,\n        ENUM_ID        = 60,\n        THISFN         = 61,\n        RETURN_RESULT  = 62, // to return prevoisly stored return result\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n        GET_REF        = 65, // *reference\n        SET_REF        = 66, // *reference    = something\n        DEL_REF        = 67, // delete reference\n        REF_CALL       = 68, // f(args)    = something or f(args)++\n        REF_SPECIAL    = 69, // reference for special properties like __proto\n\n        // For XML support:\n        DEFAULTNAMESPACE = 70, // default xml namespace =\n        ESCXMLATTR     = 71,\n        ESCXMLTEXT     = 72,\n        REF_MEMBER     = 73, // Reference for x.@y, x..y etc.\n        REF_NS_MEMBER  = 74, // Reference for x.ns::y, x..ns::y etc.\n        REF_NAME       = 75, // Reference for @y, @[y] etc.\n        REF_NS_NAME    = 76; // Reference for ns::y, @ns::y@[y] etc.",
        "begin_line": 69,
        "end_line": 154,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.INSTANCEOF",
        "snippet": "    public final static int\n    // start enum\n        ERROR          = -1, // well-known as the only code < EOF\n        EOF            = 0,  // end of file token - (not EOF_CHAR)\n        EOL            = 1,  // end of line\n\n        // Interpreter reuses the following as bytecodes\n        FIRST_BYTECODE_TOKEN    = 2,\n\n        ENTERWITH      = 2,\n        LEAVEWITH      = 3,\n        RETURN         = 4,\n        GOTO           = 5,\n        IFEQ           = 6,\n        IFNE           = 7,\n        SETNAME        = 8,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        SETPROP        = 34,\n        GETELEM        = 35,\n        SETELEM        = 36,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        BINDNAME       = 48,\n        THROW          = 49,\n        RETHROW        = 50, // rethrow caught execetion: catch (e if ) use it\n        IN             = 51,\n        INSTANCEOF     = 52,\n        LOCAL_LOAD     = 53,\n        GETVAR         = 54,\n        SETVAR         = 55,\n        CATCH_SCOPE    = 56,\n        ENUM_INIT_KEYS = 57,\n        ENUM_INIT_VALUES = 58,\n        ENUM_NEXT      = 59,\n        ENUM_ID        = 60,\n        THISFN         = 61,\n        RETURN_RESULT  = 62, // to return prevoisly stored return result\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n        GET_REF        = 65, // *reference\n        SET_REF        = 66, // *reference    = something\n        DEL_REF        = 67, // delete reference\n        REF_CALL       = 68, // f(args)    = something or f(args)++\n        REF_SPECIAL    = 69, // reference for special properties like __proto\n\n        // For XML support:\n        DEFAULTNAMESPACE = 70, // default xml namespace =\n        ESCXMLATTR     = 71,\n        ESCXMLTEXT     = 72,\n        REF_MEMBER     = 73, // Reference for x.@y, x..y etc.\n        REF_NS_MEMBER  = 74, // Reference for x.ns::y, x..ns::y etc.\n        REF_NAME       = 75, // Reference for @y, @[y] etc.\n        REF_NS_NAME    = 76; // Reference for ns::y, @ns::y@[y] etc.",
        "begin_line": 69,
        "end_line": 154,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.LOCAL_LOAD",
        "snippet": "    public final static int\n    // start enum\n        ERROR          = -1, // well-known as the only code < EOF\n        EOF            = 0,  // end of file token - (not EOF_CHAR)\n        EOL            = 1,  // end of line\n\n        // Interpreter reuses the following as bytecodes\n        FIRST_BYTECODE_TOKEN    = 2,\n\n        ENTERWITH      = 2,\n        LEAVEWITH      = 3,\n        RETURN         = 4,\n        GOTO           = 5,\n        IFEQ           = 6,\n        IFNE           = 7,\n        SETNAME        = 8,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        SETPROP        = 34,\n        GETELEM        = 35,\n        SETELEM        = 36,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        BINDNAME       = 48,\n        THROW          = 49,\n        RETHROW        = 50, // rethrow caught execetion: catch (e if ) use it\n        IN             = 51,\n        INSTANCEOF     = 52,\n        LOCAL_LOAD     = 53,\n        GETVAR         = 54,\n        SETVAR         = 55,\n        CATCH_SCOPE    = 56,\n        ENUM_INIT_KEYS = 57,\n        ENUM_INIT_VALUES = 58,\n        ENUM_NEXT      = 59,\n        ENUM_ID        = 60,\n        THISFN         = 61,\n        RETURN_RESULT  = 62, // to return prevoisly stored return result\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n        GET_REF        = 65, // *reference\n        SET_REF        = 66, // *reference    = something\n        DEL_REF        = 67, // delete reference\n        REF_CALL       = 68, // f(args)    = something or f(args)++\n        REF_SPECIAL    = 69, // reference for special properties like __proto\n\n        // For XML support:\n        DEFAULTNAMESPACE = 70, // default xml namespace =\n        ESCXMLATTR     = 71,\n        ESCXMLTEXT     = 72,\n        REF_MEMBER     = 73, // Reference for x.@y, x..y etc.\n        REF_NS_MEMBER  = 74, // Reference for x.ns::y, x..ns::y etc.\n        REF_NAME       = 75, // Reference for @y, @[y] etc.\n        REF_NS_NAME    = 76; // Reference for ns::y, @ns::y@[y] etc.",
        "begin_line": 69,
        "end_line": 154,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.GETVAR",
        "snippet": "    public final static int\n    // start enum\n        ERROR          = -1, // well-known as the only code < EOF\n        EOF            = 0,  // end of file token - (not EOF_CHAR)\n        EOL            = 1,  // end of line\n\n        // Interpreter reuses the following as bytecodes\n        FIRST_BYTECODE_TOKEN    = 2,\n\n        ENTERWITH      = 2,\n        LEAVEWITH      = 3,\n        RETURN         = 4,\n        GOTO           = 5,\n        IFEQ           = 6,\n        IFNE           = 7,\n        SETNAME        = 8,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        SETPROP        = 34,\n        GETELEM        = 35,\n        SETELEM        = 36,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        BINDNAME       = 48,\n        THROW          = 49,\n        RETHROW        = 50, // rethrow caught execetion: catch (e if ) use it\n        IN             = 51,\n        INSTANCEOF     = 52,\n        LOCAL_LOAD     = 53,\n        GETVAR         = 54,\n        SETVAR         = 55,\n        CATCH_SCOPE    = 56,\n        ENUM_INIT_KEYS = 57,\n        ENUM_INIT_VALUES = 58,\n        ENUM_NEXT      = 59,\n        ENUM_ID        = 60,\n        THISFN         = 61,\n        RETURN_RESULT  = 62, // to return prevoisly stored return result\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n        GET_REF        = 65, // *reference\n        SET_REF        = 66, // *reference    = something\n        DEL_REF        = 67, // delete reference\n        REF_CALL       = 68, // f(args)    = something or f(args)++\n        REF_SPECIAL    = 69, // reference for special properties like __proto\n\n        // For XML support:\n        DEFAULTNAMESPACE = 70, // default xml namespace =\n        ESCXMLATTR     = 71,\n        ESCXMLTEXT     = 72,\n        REF_MEMBER     = 73, // Reference for x.@y, x..y etc.\n        REF_NS_MEMBER  = 74, // Reference for x.ns::y, x..ns::y etc.\n        REF_NAME       = 75, // Reference for @y, @[y] etc.\n        REF_NS_NAME    = 76; // Reference for ns::y, @ns::y@[y] etc.",
        "begin_line": 69,
        "end_line": 154,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.SETVAR",
        "snippet": "    public final static int\n    // start enum\n        ERROR          = -1, // well-known as the only code < EOF\n        EOF            = 0,  // end of file token - (not EOF_CHAR)\n        EOL            = 1,  // end of line\n\n        // Interpreter reuses the following as bytecodes\n        FIRST_BYTECODE_TOKEN    = 2,\n\n        ENTERWITH      = 2,\n        LEAVEWITH      = 3,\n        RETURN         = 4,\n        GOTO           = 5,\n        IFEQ           = 6,\n        IFNE           = 7,\n        SETNAME        = 8,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        SETPROP        = 34,\n        GETELEM        = 35,\n        SETELEM        = 36,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        BINDNAME       = 48,\n        THROW          = 49,\n        RETHROW        = 50, // rethrow caught execetion: catch (e if ) use it\n        IN             = 51,\n        INSTANCEOF     = 52,\n        LOCAL_LOAD     = 53,\n        GETVAR         = 54,\n        SETVAR         = 55,\n        CATCH_SCOPE    = 56,\n        ENUM_INIT_KEYS = 57,\n        ENUM_INIT_VALUES = 58,\n        ENUM_NEXT      = 59,\n        ENUM_ID        = 60,\n        THISFN         = 61,\n        RETURN_RESULT  = 62, // to return prevoisly stored return result\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n        GET_REF        = 65, // *reference\n        SET_REF        = 66, // *reference    = something\n        DEL_REF        = 67, // delete reference\n        REF_CALL       = 68, // f(args)    = something or f(args)++\n        REF_SPECIAL    = 69, // reference for special properties like __proto\n\n        // For XML support:\n        DEFAULTNAMESPACE = 70, // default xml namespace =\n        ESCXMLATTR     = 71,\n        ESCXMLTEXT     = 72,\n        REF_MEMBER     = 73, // Reference for x.@y, x..y etc.\n        REF_NS_MEMBER  = 74, // Reference for x.ns::y, x..ns::y etc.\n        REF_NAME       = 75, // Reference for @y, @[y] etc.\n        REF_NS_NAME    = 76; // Reference for ns::y, @ns::y@[y] etc.",
        "begin_line": 69,
        "end_line": 154,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.CATCH_SCOPE",
        "snippet": "    public final static int\n    // start enum\n        ERROR          = -1, // well-known as the only code < EOF\n        EOF            = 0,  // end of file token - (not EOF_CHAR)\n        EOL            = 1,  // end of line\n\n        // Interpreter reuses the following as bytecodes\n        FIRST_BYTECODE_TOKEN    = 2,\n\n        ENTERWITH      = 2,\n        LEAVEWITH      = 3,\n        RETURN         = 4,\n        GOTO           = 5,\n        IFEQ           = 6,\n        IFNE           = 7,\n        SETNAME        = 8,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        SETPROP        = 34,\n        GETELEM        = 35,\n        SETELEM        = 36,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        BINDNAME       = 48,\n        THROW          = 49,\n        RETHROW        = 50, // rethrow caught execetion: catch (e if ) use it\n        IN             = 51,\n        INSTANCEOF     = 52,\n        LOCAL_LOAD     = 53,\n        GETVAR         = 54,\n        SETVAR         = 55,\n        CATCH_SCOPE    = 56,\n        ENUM_INIT_KEYS = 57,\n        ENUM_INIT_VALUES = 58,\n        ENUM_NEXT      = 59,\n        ENUM_ID        = 60,\n        THISFN         = 61,\n        RETURN_RESULT  = 62, // to return prevoisly stored return result\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n        GET_REF        = 65, // *reference\n        SET_REF        = 66, // *reference    = something\n        DEL_REF        = 67, // delete reference\n        REF_CALL       = 68, // f(args)    = something or f(args)++\n        REF_SPECIAL    = 69, // reference for special properties like __proto\n\n        // For XML support:\n        DEFAULTNAMESPACE = 70, // default xml namespace =\n        ESCXMLATTR     = 71,\n        ESCXMLTEXT     = 72,\n        REF_MEMBER     = 73, // Reference for x.@y, x..y etc.\n        REF_NS_MEMBER  = 74, // Reference for x.ns::y, x..ns::y etc.\n        REF_NAME       = 75, // Reference for @y, @[y] etc.\n        REF_NS_NAME    = 76; // Reference for ns::y, @ns::y@[y] etc.",
        "begin_line": 69,
        "end_line": 154,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.ENUM_INIT_KEYS",
        "snippet": "    public final static int\n    // start enum\n        ERROR          = -1, // well-known as the only code < EOF\n        EOF            = 0,  // end of file token - (not EOF_CHAR)\n        EOL            = 1,  // end of line\n\n        // Interpreter reuses the following as bytecodes\n        FIRST_BYTECODE_TOKEN    = 2,\n\n        ENTERWITH      = 2,\n        LEAVEWITH      = 3,\n        RETURN         = 4,\n        GOTO           = 5,\n        IFEQ           = 6,\n        IFNE           = 7,\n        SETNAME        = 8,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        SETPROP        = 34,\n        GETELEM        = 35,\n        SETELEM        = 36,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        BINDNAME       = 48,\n        THROW          = 49,\n        RETHROW        = 50, // rethrow caught execetion: catch (e if ) use it\n        IN             = 51,\n        INSTANCEOF     = 52,\n        LOCAL_LOAD     = 53,\n        GETVAR         = 54,\n        SETVAR         = 55,\n        CATCH_SCOPE    = 56,\n        ENUM_INIT_KEYS = 57,\n        ENUM_INIT_VALUES = 58,\n        ENUM_NEXT      = 59,\n        ENUM_ID        = 60,\n        THISFN         = 61,\n        RETURN_RESULT  = 62, // to return prevoisly stored return result\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n        GET_REF        = 65, // *reference\n        SET_REF        = 66, // *reference    = something\n        DEL_REF        = 67, // delete reference\n        REF_CALL       = 68, // f(args)    = something or f(args)++\n        REF_SPECIAL    = 69, // reference for special properties like __proto\n\n        // For XML support:\n        DEFAULTNAMESPACE = 70, // default xml namespace =\n        ESCXMLATTR     = 71,\n        ESCXMLTEXT     = 72,\n        REF_MEMBER     = 73, // Reference for x.@y, x..y etc.\n        REF_NS_MEMBER  = 74, // Reference for x.ns::y, x..ns::y etc.\n        REF_NAME       = 75, // Reference for @y, @[y] etc.\n        REF_NS_NAME    = 76; // Reference for ns::y, @ns::y@[y] etc.",
        "begin_line": 69,
        "end_line": 154,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.ENUM_INIT_VALUES",
        "snippet": "    public final static int\n    // start enum\n        ERROR          = -1, // well-known as the only code < EOF\n        EOF            = 0,  // end of file token - (not EOF_CHAR)\n        EOL            = 1,  // end of line\n\n        // Interpreter reuses the following as bytecodes\n        FIRST_BYTECODE_TOKEN    = 2,\n\n        ENTERWITH      = 2,\n        LEAVEWITH      = 3,\n        RETURN         = 4,\n        GOTO           = 5,\n        IFEQ           = 6,\n        IFNE           = 7,\n        SETNAME        = 8,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        SETPROP        = 34,\n        GETELEM        = 35,\n        SETELEM        = 36,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        BINDNAME       = 48,\n        THROW          = 49,\n        RETHROW        = 50, // rethrow caught execetion: catch (e if ) use it\n        IN             = 51,\n        INSTANCEOF     = 52,\n        LOCAL_LOAD     = 53,\n        GETVAR         = 54,\n        SETVAR         = 55,\n        CATCH_SCOPE    = 56,\n        ENUM_INIT_KEYS = 57,\n        ENUM_INIT_VALUES = 58,\n        ENUM_NEXT      = 59,\n        ENUM_ID        = 60,\n        THISFN         = 61,\n        RETURN_RESULT  = 62, // to return prevoisly stored return result\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n        GET_REF        = 65, // *reference\n        SET_REF        = 66, // *reference    = something\n        DEL_REF        = 67, // delete reference\n        REF_CALL       = 68, // f(args)    = something or f(args)++\n        REF_SPECIAL    = 69, // reference for special properties like __proto\n\n        // For XML support:\n        DEFAULTNAMESPACE = 70, // default xml namespace =\n        ESCXMLATTR     = 71,\n        ESCXMLTEXT     = 72,\n        REF_MEMBER     = 73, // Reference for x.@y, x..y etc.\n        REF_NS_MEMBER  = 74, // Reference for x.ns::y, x..ns::y etc.\n        REF_NAME       = 75, // Reference for @y, @[y] etc.\n        REF_NS_NAME    = 76; // Reference for ns::y, @ns::y@[y] etc.",
        "begin_line": 69,
        "end_line": 154,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.ENUM_NEXT",
        "snippet": "    public final static int\n    // start enum\n        ERROR          = -1, // well-known as the only code < EOF\n        EOF            = 0,  // end of file token - (not EOF_CHAR)\n        EOL            = 1,  // end of line\n\n        // Interpreter reuses the following as bytecodes\n        FIRST_BYTECODE_TOKEN    = 2,\n\n        ENTERWITH      = 2,\n        LEAVEWITH      = 3,\n        RETURN         = 4,\n        GOTO           = 5,\n        IFEQ           = 6,\n        IFNE           = 7,\n        SETNAME        = 8,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        SETPROP        = 34,\n        GETELEM        = 35,\n        SETELEM        = 36,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        BINDNAME       = 48,\n        THROW          = 49,\n        RETHROW        = 50, // rethrow caught execetion: catch (e if ) use it\n        IN             = 51,\n        INSTANCEOF     = 52,\n        LOCAL_LOAD     = 53,\n        GETVAR         = 54,\n        SETVAR         = 55,\n        CATCH_SCOPE    = 56,\n        ENUM_INIT_KEYS = 57,\n        ENUM_INIT_VALUES = 58,\n        ENUM_NEXT      = 59,\n        ENUM_ID        = 60,\n        THISFN         = 61,\n        RETURN_RESULT  = 62, // to return prevoisly stored return result\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n        GET_REF        = 65, // *reference\n        SET_REF        = 66, // *reference    = something\n        DEL_REF        = 67, // delete reference\n        REF_CALL       = 68, // f(args)    = something or f(args)++\n        REF_SPECIAL    = 69, // reference for special properties like __proto\n\n        // For XML support:\n        DEFAULTNAMESPACE = 70, // default xml namespace =\n        ESCXMLATTR     = 71,\n        ESCXMLTEXT     = 72,\n        REF_MEMBER     = 73, // Reference for x.@y, x..y etc.\n        REF_NS_MEMBER  = 74, // Reference for x.ns::y, x..ns::y etc.\n        REF_NAME       = 75, // Reference for @y, @[y] etc.\n        REF_NS_NAME    = 76; // Reference for ns::y, @ns::y@[y] etc.",
        "begin_line": 69,
        "end_line": 154,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.ENUM_ID",
        "snippet": "    public final static int\n    // start enum\n        ERROR          = -1, // well-known as the only code < EOF\n        EOF            = 0,  // end of file token - (not EOF_CHAR)\n        EOL            = 1,  // end of line\n\n        // Interpreter reuses the following as bytecodes\n        FIRST_BYTECODE_TOKEN    = 2,\n\n        ENTERWITH      = 2,\n        LEAVEWITH      = 3,\n        RETURN         = 4,\n        GOTO           = 5,\n        IFEQ           = 6,\n        IFNE           = 7,\n        SETNAME        = 8,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        SETPROP        = 34,\n        GETELEM        = 35,\n        SETELEM        = 36,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        BINDNAME       = 48,\n        THROW          = 49,\n        RETHROW        = 50, // rethrow caught execetion: catch (e if ) use it\n        IN             = 51,\n        INSTANCEOF     = 52,\n        LOCAL_LOAD     = 53,\n        GETVAR         = 54,\n        SETVAR         = 55,\n        CATCH_SCOPE    = 56,\n        ENUM_INIT_KEYS = 57,\n        ENUM_INIT_VALUES = 58,\n        ENUM_NEXT      = 59,\n        ENUM_ID        = 60,\n        THISFN         = 61,\n        RETURN_RESULT  = 62, // to return prevoisly stored return result\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n        GET_REF        = 65, // *reference\n        SET_REF        = 66, // *reference    = something\n        DEL_REF        = 67, // delete reference\n        REF_CALL       = 68, // f(args)    = something or f(args)++\n        REF_SPECIAL    = 69, // reference for special properties like __proto\n\n        // For XML support:\n        DEFAULTNAMESPACE = 70, // default xml namespace =\n        ESCXMLATTR     = 71,\n        ESCXMLTEXT     = 72,\n        REF_MEMBER     = 73, // Reference for x.@y, x..y etc.\n        REF_NS_MEMBER  = 74, // Reference for x.ns::y, x..ns::y etc.\n        REF_NAME       = 75, // Reference for @y, @[y] etc.\n        REF_NS_NAME    = 76; // Reference for ns::y, @ns::y@[y] etc.",
        "begin_line": 69,
        "end_line": 154,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.THISFN",
        "snippet": "    public final static int\n    // start enum\n        ERROR          = -1, // well-known as the only code < EOF\n        EOF            = 0,  // end of file token - (not EOF_CHAR)\n        EOL            = 1,  // end of line\n\n        // Interpreter reuses the following as bytecodes\n        FIRST_BYTECODE_TOKEN    = 2,\n\n        ENTERWITH      = 2,\n        LEAVEWITH      = 3,\n        RETURN         = 4,\n        GOTO           = 5,\n        IFEQ           = 6,\n        IFNE           = 7,\n        SETNAME        = 8,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        SETPROP        = 34,\n        GETELEM        = 35,\n        SETELEM        = 36,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        BINDNAME       = 48,\n        THROW          = 49,\n        RETHROW        = 50, // rethrow caught execetion: catch (e if ) use it\n        IN             = 51,\n        INSTANCEOF     = 52,\n        LOCAL_LOAD     = 53,\n        GETVAR         = 54,\n        SETVAR         = 55,\n        CATCH_SCOPE    = 56,\n        ENUM_INIT_KEYS = 57,\n        ENUM_INIT_VALUES = 58,\n        ENUM_NEXT      = 59,\n        ENUM_ID        = 60,\n        THISFN         = 61,\n        RETURN_RESULT  = 62, // to return prevoisly stored return result\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n        GET_REF        = 65, // *reference\n        SET_REF        = 66, // *reference    = something\n        DEL_REF        = 67, // delete reference\n        REF_CALL       = 68, // f(args)    = something or f(args)++\n        REF_SPECIAL    = 69, // reference for special properties like __proto\n\n        // For XML support:\n        DEFAULTNAMESPACE = 70, // default xml namespace =\n        ESCXMLATTR     = 71,\n        ESCXMLTEXT     = 72,\n        REF_MEMBER     = 73, // Reference for x.@y, x..y etc.\n        REF_NS_MEMBER  = 74, // Reference for x.ns::y, x..ns::y etc.\n        REF_NAME       = 75, // Reference for @y, @[y] etc.\n        REF_NS_NAME    = 76; // Reference for ns::y, @ns::y@[y] etc.",
        "begin_line": 69,
        "end_line": 154,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.RETURN_RESULT",
        "snippet": "    public final static int\n    // start enum\n        ERROR          = -1, // well-known as the only code < EOF\n        EOF            = 0,  // end of file token - (not EOF_CHAR)\n        EOL            = 1,  // end of line\n\n        // Interpreter reuses the following as bytecodes\n        FIRST_BYTECODE_TOKEN    = 2,\n\n        ENTERWITH      = 2,\n        LEAVEWITH      = 3,\n        RETURN         = 4,\n        GOTO           = 5,\n        IFEQ           = 6,\n        IFNE           = 7,\n        SETNAME        = 8,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        SETPROP        = 34,\n        GETELEM        = 35,\n        SETELEM        = 36,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        BINDNAME       = 48,\n        THROW          = 49,\n        RETHROW        = 50, // rethrow caught execetion: catch (e if ) use it\n        IN             = 51,\n        INSTANCEOF     = 52,\n        LOCAL_LOAD     = 53,\n        GETVAR         = 54,\n        SETVAR         = 55,\n        CATCH_SCOPE    = 56,\n        ENUM_INIT_KEYS = 57,\n        ENUM_INIT_VALUES = 58,\n        ENUM_NEXT      = 59,\n        ENUM_ID        = 60,\n        THISFN         = 61,\n        RETURN_RESULT  = 62, // to return prevoisly stored return result\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n        GET_REF        = 65, // *reference\n        SET_REF        = 66, // *reference    = something\n        DEL_REF        = 67, // delete reference\n        REF_CALL       = 68, // f(args)    = something or f(args)++\n        REF_SPECIAL    = 69, // reference for special properties like __proto\n\n        // For XML support:\n        DEFAULTNAMESPACE = 70, // default xml namespace =\n        ESCXMLATTR     = 71,\n        ESCXMLTEXT     = 72,\n        REF_MEMBER     = 73, // Reference for x.@y, x..y etc.\n        REF_NS_MEMBER  = 74, // Reference for x.ns::y, x..ns::y etc.\n        REF_NAME       = 75, // Reference for @y, @[y] etc.\n        REF_NS_NAME    = 76; // Reference for ns::y, @ns::y@[y] etc.",
        "begin_line": 69,
        "end_line": 154,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.ARRAYLIT",
        "snippet": "    public final static int\n    // start enum\n        ERROR          = -1, // well-known as the only code < EOF\n        EOF            = 0,  // end of file token - (not EOF_CHAR)\n        EOL            = 1,  // end of line\n\n        // Interpreter reuses the following as bytecodes\n        FIRST_BYTECODE_TOKEN    = 2,\n\n        ENTERWITH      = 2,\n        LEAVEWITH      = 3,\n        RETURN         = 4,\n        GOTO           = 5,\n        IFEQ           = 6,\n        IFNE           = 7,\n        SETNAME        = 8,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        SETPROP        = 34,\n        GETELEM        = 35,\n        SETELEM        = 36,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        BINDNAME       = 48,\n        THROW          = 49,\n        RETHROW        = 50, // rethrow caught execetion: catch (e if ) use it\n        IN             = 51,\n        INSTANCEOF     = 52,\n        LOCAL_LOAD     = 53,\n        GETVAR         = 54,\n        SETVAR         = 55,\n        CATCH_SCOPE    = 56,\n        ENUM_INIT_KEYS = 57,\n        ENUM_INIT_VALUES = 58,\n        ENUM_NEXT      = 59,\n        ENUM_ID        = 60,\n        THISFN         = 61,\n        RETURN_RESULT  = 62, // to return prevoisly stored return result\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n        GET_REF        = 65, // *reference\n        SET_REF        = 66, // *reference    = something\n        DEL_REF        = 67, // delete reference\n        REF_CALL       = 68, // f(args)    = something or f(args)++\n        REF_SPECIAL    = 69, // reference for special properties like __proto\n\n        // For XML support:\n        DEFAULTNAMESPACE = 70, // default xml namespace =\n        ESCXMLATTR     = 71,\n        ESCXMLTEXT     = 72,\n        REF_MEMBER     = 73, // Reference for x.@y, x..y etc.\n        REF_NS_MEMBER  = 74, // Reference for x.ns::y, x..ns::y etc.\n        REF_NAME       = 75, // Reference for @y, @[y] etc.\n        REF_NS_NAME    = 76; // Reference for ns::y, @ns::y@[y] etc.",
        "begin_line": 69,
        "end_line": 154,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.OBJECTLIT",
        "snippet": "    public final static int\n    // start enum\n        ERROR          = -1, // well-known as the only code < EOF\n        EOF            = 0,  // end of file token - (not EOF_CHAR)\n        EOL            = 1,  // end of line\n\n        // Interpreter reuses the following as bytecodes\n        FIRST_BYTECODE_TOKEN    = 2,\n\n        ENTERWITH      = 2,\n        LEAVEWITH      = 3,\n        RETURN         = 4,\n        GOTO           = 5,\n        IFEQ           = 6,\n        IFNE           = 7,\n        SETNAME        = 8,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        SETPROP        = 34,\n        GETELEM        = 35,\n        SETELEM        = 36,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        BINDNAME       = 48,\n        THROW          = 49,\n        RETHROW        = 50, // rethrow caught execetion: catch (e if ) use it\n        IN             = 51,\n        INSTANCEOF     = 52,\n        LOCAL_LOAD     = 53,\n        GETVAR         = 54,\n        SETVAR         = 55,\n        CATCH_SCOPE    = 56,\n        ENUM_INIT_KEYS = 57,\n        ENUM_INIT_VALUES = 58,\n        ENUM_NEXT      = 59,\n        ENUM_ID        = 60,\n        THISFN         = 61,\n        RETURN_RESULT  = 62, // to return prevoisly stored return result\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n        GET_REF        = 65, // *reference\n        SET_REF        = 66, // *reference    = something\n        DEL_REF        = 67, // delete reference\n        REF_CALL       = 68, // f(args)    = something or f(args)++\n        REF_SPECIAL    = 69, // reference for special properties like __proto\n\n        // For XML support:\n        DEFAULTNAMESPACE = 70, // default xml namespace =\n        ESCXMLATTR     = 71,\n        ESCXMLTEXT     = 72,\n        REF_MEMBER     = 73, // Reference for x.@y, x..y etc.\n        REF_NS_MEMBER  = 74, // Reference for x.ns::y, x..ns::y etc.\n        REF_NAME       = 75, // Reference for @y, @[y] etc.\n        REF_NS_NAME    = 76; // Reference for ns::y, @ns::y@[y] etc.",
        "begin_line": 69,
        "end_line": 154,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.GET_REF",
        "snippet": "    public final static int\n    // start enum\n        ERROR          = -1, // well-known as the only code < EOF\n        EOF            = 0,  // end of file token - (not EOF_CHAR)\n        EOL            = 1,  // end of line\n\n        // Interpreter reuses the following as bytecodes\n        FIRST_BYTECODE_TOKEN    = 2,\n\n        ENTERWITH      = 2,\n        LEAVEWITH      = 3,\n        RETURN         = 4,\n        GOTO           = 5,\n        IFEQ           = 6,\n        IFNE           = 7,\n        SETNAME        = 8,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        SETPROP        = 34,\n        GETELEM        = 35,\n        SETELEM        = 36,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        BINDNAME       = 48,\n        THROW          = 49,\n        RETHROW        = 50, // rethrow caught execetion: catch (e if ) use it\n        IN             = 51,\n        INSTANCEOF     = 52,\n        LOCAL_LOAD     = 53,\n        GETVAR         = 54,\n        SETVAR         = 55,\n        CATCH_SCOPE    = 56,\n        ENUM_INIT_KEYS = 57,\n        ENUM_INIT_VALUES = 58,\n        ENUM_NEXT      = 59,\n        ENUM_ID        = 60,\n        THISFN         = 61,\n        RETURN_RESULT  = 62, // to return prevoisly stored return result\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n        GET_REF        = 65, // *reference\n        SET_REF        = 66, // *reference    = something\n        DEL_REF        = 67, // delete reference\n        REF_CALL       = 68, // f(args)    = something or f(args)++\n        REF_SPECIAL    = 69, // reference for special properties like __proto\n\n        // For XML support:\n        DEFAULTNAMESPACE = 70, // default xml namespace =\n        ESCXMLATTR     = 71,\n        ESCXMLTEXT     = 72,\n        REF_MEMBER     = 73, // Reference for x.@y, x..y etc.\n        REF_NS_MEMBER  = 74, // Reference for x.ns::y, x..ns::y etc.\n        REF_NAME       = 75, // Reference for @y, @[y] etc.\n        REF_NS_NAME    = 76; // Reference for ns::y, @ns::y@[y] etc.",
        "begin_line": 69,
        "end_line": 154,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.SET_REF",
        "snippet": "    public final static int\n    // start enum\n        ERROR          = -1, // well-known as the only code < EOF\n        EOF            = 0,  // end of file token - (not EOF_CHAR)\n        EOL            = 1,  // end of line\n\n        // Interpreter reuses the following as bytecodes\n        FIRST_BYTECODE_TOKEN    = 2,\n\n        ENTERWITH      = 2,\n        LEAVEWITH      = 3,\n        RETURN         = 4,\n        GOTO           = 5,\n        IFEQ           = 6,\n        IFNE           = 7,\n        SETNAME        = 8,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        SETPROP        = 34,\n        GETELEM        = 35,\n        SETELEM        = 36,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        BINDNAME       = 48,\n        THROW          = 49,\n        RETHROW        = 50, // rethrow caught execetion: catch (e if ) use it\n        IN             = 51,\n        INSTANCEOF     = 52,\n        LOCAL_LOAD     = 53,\n        GETVAR         = 54,\n        SETVAR         = 55,\n        CATCH_SCOPE    = 56,\n        ENUM_INIT_KEYS = 57,\n        ENUM_INIT_VALUES = 58,\n        ENUM_NEXT      = 59,\n        ENUM_ID        = 60,\n        THISFN         = 61,\n        RETURN_RESULT  = 62, // to return prevoisly stored return result\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n        GET_REF        = 65, // *reference\n        SET_REF        = 66, // *reference    = something\n        DEL_REF        = 67, // delete reference\n        REF_CALL       = 68, // f(args)    = something or f(args)++\n        REF_SPECIAL    = 69, // reference for special properties like __proto\n\n        // For XML support:\n        DEFAULTNAMESPACE = 70, // default xml namespace =\n        ESCXMLATTR     = 71,\n        ESCXMLTEXT     = 72,\n        REF_MEMBER     = 73, // Reference for x.@y, x..y etc.\n        REF_NS_MEMBER  = 74, // Reference for x.ns::y, x..ns::y etc.\n        REF_NAME       = 75, // Reference for @y, @[y] etc.\n        REF_NS_NAME    = 76; // Reference for ns::y, @ns::y@[y] etc.",
        "begin_line": 69,
        "end_line": 154,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.DEL_REF",
        "snippet": "    public final static int\n    // start enum\n        ERROR          = -1, // well-known as the only code < EOF\n        EOF            = 0,  // end of file token - (not EOF_CHAR)\n        EOL            = 1,  // end of line\n\n        // Interpreter reuses the following as bytecodes\n        FIRST_BYTECODE_TOKEN    = 2,\n\n        ENTERWITH      = 2,\n        LEAVEWITH      = 3,\n        RETURN         = 4,\n        GOTO           = 5,\n        IFEQ           = 6,\n        IFNE           = 7,\n        SETNAME        = 8,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        SETPROP        = 34,\n        GETELEM        = 35,\n        SETELEM        = 36,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        BINDNAME       = 48,\n        THROW          = 49,\n        RETHROW        = 50, // rethrow caught execetion: catch (e if ) use it\n        IN             = 51,\n        INSTANCEOF     = 52,\n        LOCAL_LOAD     = 53,\n        GETVAR         = 54,\n        SETVAR         = 55,\n        CATCH_SCOPE    = 56,\n        ENUM_INIT_KEYS = 57,\n        ENUM_INIT_VALUES = 58,\n        ENUM_NEXT      = 59,\n        ENUM_ID        = 60,\n        THISFN         = 61,\n        RETURN_RESULT  = 62, // to return prevoisly stored return result\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n        GET_REF        = 65, // *reference\n        SET_REF        = 66, // *reference    = something\n        DEL_REF        = 67, // delete reference\n        REF_CALL       = 68, // f(args)    = something or f(args)++\n        REF_SPECIAL    = 69, // reference for special properties like __proto\n\n        // For XML support:\n        DEFAULTNAMESPACE = 70, // default xml namespace =\n        ESCXMLATTR     = 71,\n        ESCXMLTEXT     = 72,\n        REF_MEMBER     = 73, // Reference for x.@y, x..y etc.\n        REF_NS_MEMBER  = 74, // Reference for x.ns::y, x..ns::y etc.\n        REF_NAME       = 75, // Reference for @y, @[y] etc.\n        REF_NS_NAME    = 76; // Reference for ns::y, @ns::y@[y] etc.",
        "begin_line": 69,
        "end_line": 154,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.REF_CALL",
        "snippet": "    public final static int\n    // start enum\n        ERROR          = -1, // well-known as the only code < EOF\n        EOF            = 0,  // end of file token - (not EOF_CHAR)\n        EOL            = 1,  // end of line\n\n        // Interpreter reuses the following as bytecodes\n        FIRST_BYTECODE_TOKEN    = 2,\n\n        ENTERWITH      = 2,\n        LEAVEWITH      = 3,\n        RETURN         = 4,\n        GOTO           = 5,\n        IFEQ           = 6,\n        IFNE           = 7,\n        SETNAME        = 8,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        SETPROP        = 34,\n        GETELEM        = 35,\n        SETELEM        = 36,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        BINDNAME       = 48,\n        THROW          = 49,\n        RETHROW        = 50, // rethrow caught execetion: catch (e if ) use it\n        IN             = 51,\n        INSTANCEOF     = 52,\n        LOCAL_LOAD     = 53,\n        GETVAR         = 54,\n        SETVAR         = 55,\n        CATCH_SCOPE    = 56,\n        ENUM_INIT_KEYS = 57,\n        ENUM_INIT_VALUES = 58,\n        ENUM_NEXT      = 59,\n        ENUM_ID        = 60,\n        THISFN         = 61,\n        RETURN_RESULT  = 62, // to return prevoisly stored return result\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n        GET_REF        = 65, // *reference\n        SET_REF        = 66, // *reference    = something\n        DEL_REF        = 67, // delete reference\n        REF_CALL       = 68, // f(args)    = something or f(args)++\n        REF_SPECIAL    = 69, // reference for special properties like __proto\n\n        // For XML support:\n        DEFAULTNAMESPACE = 70, // default xml namespace =\n        ESCXMLATTR     = 71,\n        ESCXMLTEXT     = 72,\n        REF_MEMBER     = 73, // Reference for x.@y, x..y etc.\n        REF_NS_MEMBER  = 74, // Reference for x.ns::y, x..ns::y etc.\n        REF_NAME       = 75, // Reference for @y, @[y] etc.\n        REF_NS_NAME    = 76; // Reference for ns::y, @ns::y@[y] etc.",
        "begin_line": 69,
        "end_line": 154,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.REF_SPECIAL",
        "snippet": "    public final static int\n    // start enum\n        ERROR          = -1, // well-known as the only code < EOF\n        EOF            = 0,  // end of file token - (not EOF_CHAR)\n        EOL            = 1,  // end of line\n\n        // Interpreter reuses the following as bytecodes\n        FIRST_BYTECODE_TOKEN    = 2,\n\n        ENTERWITH      = 2,\n        LEAVEWITH      = 3,\n        RETURN         = 4,\n        GOTO           = 5,\n        IFEQ           = 6,\n        IFNE           = 7,\n        SETNAME        = 8,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        SETPROP        = 34,\n        GETELEM        = 35,\n        SETELEM        = 36,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        BINDNAME       = 48,\n        THROW          = 49,\n        RETHROW        = 50, // rethrow caught execetion: catch (e if ) use it\n        IN             = 51,\n        INSTANCEOF     = 52,\n        LOCAL_LOAD     = 53,\n        GETVAR         = 54,\n        SETVAR         = 55,\n        CATCH_SCOPE    = 56,\n        ENUM_INIT_KEYS = 57,\n        ENUM_INIT_VALUES = 58,\n        ENUM_NEXT      = 59,\n        ENUM_ID        = 60,\n        THISFN         = 61,\n        RETURN_RESULT  = 62, // to return prevoisly stored return result\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n        GET_REF        = 65, // *reference\n        SET_REF        = 66, // *reference    = something\n        DEL_REF        = 67, // delete reference\n        REF_CALL       = 68, // f(args)    = something or f(args)++\n        REF_SPECIAL    = 69, // reference for special properties like __proto\n\n        // For XML support:\n        DEFAULTNAMESPACE = 70, // default xml namespace =\n        ESCXMLATTR     = 71,\n        ESCXMLTEXT     = 72,\n        REF_MEMBER     = 73, // Reference for x.@y, x..y etc.\n        REF_NS_MEMBER  = 74, // Reference for x.ns::y, x..ns::y etc.\n        REF_NAME       = 75, // Reference for @y, @[y] etc.\n        REF_NS_NAME    = 76; // Reference for ns::y, @ns::y@[y] etc.",
        "begin_line": 69,
        "end_line": 154,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.DEFAULTNAMESPACE",
        "snippet": "    public final static int\n    // start enum\n        ERROR          = -1, // well-known as the only code < EOF\n        EOF            = 0,  // end of file token - (not EOF_CHAR)\n        EOL            = 1,  // end of line\n\n        // Interpreter reuses the following as bytecodes\n        FIRST_BYTECODE_TOKEN    = 2,\n\n        ENTERWITH      = 2,\n        LEAVEWITH      = 3,\n        RETURN         = 4,\n        GOTO           = 5,\n        IFEQ           = 6,\n        IFNE           = 7,\n        SETNAME        = 8,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        SETPROP        = 34,\n        GETELEM        = 35,\n        SETELEM        = 36,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        BINDNAME       = 48,\n        THROW          = 49,\n        RETHROW        = 50, // rethrow caught execetion: catch (e if ) use it\n        IN             = 51,\n        INSTANCEOF     = 52,\n        LOCAL_LOAD     = 53,\n        GETVAR         = 54,\n        SETVAR         = 55,\n        CATCH_SCOPE    = 56,\n        ENUM_INIT_KEYS = 57,\n        ENUM_INIT_VALUES = 58,\n        ENUM_NEXT      = 59,\n        ENUM_ID        = 60,\n        THISFN         = 61,\n        RETURN_RESULT  = 62, // to return prevoisly stored return result\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n        GET_REF        = 65, // *reference\n        SET_REF        = 66, // *reference    = something\n        DEL_REF        = 67, // delete reference\n        REF_CALL       = 68, // f(args)    = something or f(args)++\n        REF_SPECIAL    = 69, // reference for special properties like __proto\n\n        // For XML support:\n        DEFAULTNAMESPACE = 70, // default xml namespace =\n        ESCXMLATTR     = 71,\n        ESCXMLTEXT     = 72,\n        REF_MEMBER     = 73, // Reference for x.@y, x..y etc.\n        REF_NS_MEMBER  = 74, // Reference for x.ns::y, x..ns::y etc.\n        REF_NAME       = 75, // Reference for @y, @[y] etc.\n        REF_NS_NAME    = 76; // Reference for ns::y, @ns::y@[y] etc.",
        "begin_line": 69,
        "end_line": 154,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.ESCXMLATTR",
        "snippet": "    public final static int\n    // start enum\n        ERROR          = -1, // well-known as the only code < EOF\n        EOF            = 0,  // end of file token - (not EOF_CHAR)\n        EOL            = 1,  // end of line\n\n        // Interpreter reuses the following as bytecodes\n        FIRST_BYTECODE_TOKEN    = 2,\n\n        ENTERWITH      = 2,\n        LEAVEWITH      = 3,\n        RETURN         = 4,\n        GOTO           = 5,\n        IFEQ           = 6,\n        IFNE           = 7,\n        SETNAME        = 8,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        SETPROP        = 34,\n        GETELEM        = 35,\n        SETELEM        = 36,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        BINDNAME       = 48,\n        THROW          = 49,\n        RETHROW        = 50, // rethrow caught execetion: catch (e if ) use it\n        IN             = 51,\n        INSTANCEOF     = 52,\n        LOCAL_LOAD     = 53,\n        GETVAR         = 54,\n        SETVAR         = 55,\n        CATCH_SCOPE    = 56,\n        ENUM_INIT_KEYS = 57,\n        ENUM_INIT_VALUES = 58,\n        ENUM_NEXT      = 59,\n        ENUM_ID        = 60,\n        THISFN         = 61,\n        RETURN_RESULT  = 62, // to return prevoisly stored return result\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n        GET_REF        = 65, // *reference\n        SET_REF        = 66, // *reference    = something\n        DEL_REF        = 67, // delete reference\n        REF_CALL       = 68, // f(args)    = something or f(args)++\n        REF_SPECIAL    = 69, // reference for special properties like __proto\n\n        // For XML support:\n        DEFAULTNAMESPACE = 70, // default xml namespace =\n        ESCXMLATTR     = 71,\n        ESCXMLTEXT     = 72,\n        REF_MEMBER     = 73, // Reference for x.@y, x..y etc.\n        REF_NS_MEMBER  = 74, // Reference for x.ns::y, x..ns::y etc.\n        REF_NAME       = 75, // Reference for @y, @[y] etc.\n        REF_NS_NAME    = 76; // Reference for ns::y, @ns::y@[y] etc.",
        "begin_line": 69,
        "end_line": 154,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.ESCXMLTEXT",
        "snippet": "    public final static int\n    // start enum\n        ERROR          = -1, // well-known as the only code < EOF\n        EOF            = 0,  // end of file token - (not EOF_CHAR)\n        EOL            = 1,  // end of line\n\n        // Interpreter reuses the following as bytecodes\n        FIRST_BYTECODE_TOKEN    = 2,\n\n        ENTERWITH      = 2,\n        LEAVEWITH      = 3,\n        RETURN         = 4,\n        GOTO           = 5,\n        IFEQ           = 6,\n        IFNE           = 7,\n        SETNAME        = 8,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        SETPROP        = 34,\n        GETELEM        = 35,\n        SETELEM        = 36,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        BINDNAME       = 48,\n        THROW          = 49,\n        RETHROW        = 50, // rethrow caught execetion: catch (e if ) use it\n        IN             = 51,\n        INSTANCEOF     = 52,\n        LOCAL_LOAD     = 53,\n        GETVAR         = 54,\n        SETVAR         = 55,\n        CATCH_SCOPE    = 56,\n        ENUM_INIT_KEYS = 57,\n        ENUM_INIT_VALUES = 58,\n        ENUM_NEXT      = 59,\n        ENUM_ID        = 60,\n        THISFN         = 61,\n        RETURN_RESULT  = 62, // to return prevoisly stored return result\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n        GET_REF        = 65, // *reference\n        SET_REF        = 66, // *reference    = something\n        DEL_REF        = 67, // delete reference\n        REF_CALL       = 68, // f(args)    = something or f(args)++\n        REF_SPECIAL    = 69, // reference for special properties like __proto\n\n        // For XML support:\n        DEFAULTNAMESPACE = 70, // default xml namespace =\n        ESCXMLATTR     = 71,\n        ESCXMLTEXT     = 72,\n        REF_MEMBER     = 73, // Reference for x.@y, x..y etc.\n        REF_NS_MEMBER  = 74, // Reference for x.ns::y, x..ns::y etc.\n        REF_NAME       = 75, // Reference for @y, @[y] etc.\n        REF_NS_NAME    = 76; // Reference for ns::y, @ns::y@[y] etc.",
        "begin_line": 69,
        "end_line": 154,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.REF_MEMBER",
        "snippet": "    public final static int\n    // start enum\n        ERROR          = -1, // well-known as the only code < EOF\n        EOF            = 0,  // end of file token - (not EOF_CHAR)\n        EOL            = 1,  // end of line\n\n        // Interpreter reuses the following as bytecodes\n        FIRST_BYTECODE_TOKEN    = 2,\n\n        ENTERWITH      = 2,\n        LEAVEWITH      = 3,\n        RETURN         = 4,\n        GOTO           = 5,\n        IFEQ           = 6,\n        IFNE           = 7,\n        SETNAME        = 8,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        SETPROP        = 34,\n        GETELEM        = 35,\n        SETELEM        = 36,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        BINDNAME       = 48,\n        THROW          = 49,\n        RETHROW        = 50, // rethrow caught execetion: catch (e if ) use it\n        IN             = 51,\n        INSTANCEOF     = 52,\n        LOCAL_LOAD     = 53,\n        GETVAR         = 54,\n        SETVAR         = 55,\n        CATCH_SCOPE    = 56,\n        ENUM_INIT_KEYS = 57,\n        ENUM_INIT_VALUES = 58,\n        ENUM_NEXT      = 59,\n        ENUM_ID        = 60,\n        THISFN         = 61,\n        RETURN_RESULT  = 62, // to return prevoisly stored return result\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n        GET_REF        = 65, // *reference\n        SET_REF        = 66, // *reference    = something\n        DEL_REF        = 67, // delete reference\n        REF_CALL       = 68, // f(args)    = something or f(args)++\n        REF_SPECIAL    = 69, // reference for special properties like __proto\n\n        // For XML support:\n        DEFAULTNAMESPACE = 70, // default xml namespace =\n        ESCXMLATTR     = 71,\n        ESCXMLTEXT     = 72,\n        REF_MEMBER     = 73, // Reference for x.@y, x..y etc.\n        REF_NS_MEMBER  = 74, // Reference for x.ns::y, x..ns::y etc.\n        REF_NAME       = 75, // Reference for @y, @[y] etc.\n        REF_NS_NAME    = 76; // Reference for ns::y, @ns::y@[y] etc.",
        "begin_line": 69,
        "end_line": 154,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.REF_NS_MEMBER",
        "snippet": "    public final static int\n    // start enum\n        ERROR          = -1, // well-known as the only code < EOF\n        EOF            = 0,  // end of file token - (not EOF_CHAR)\n        EOL            = 1,  // end of line\n\n        // Interpreter reuses the following as bytecodes\n        FIRST_BYTECODE_TOKEN    = 2,\n\n        ENTERWITH      = 2,\n        LEAVEWITH      = 3,\n        RETURN         = 4,\n        GOTO           = 5,\n        IFEQ           = 6,\n        IFNE           = 7,\n        SETNAME        = 8,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        SETPROP        = 34,\n        GETELEM        = 35,\n        SETELEM        = 36,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        BINDNAME       = 48,\n        THROW          = 49,\n        RETHROW        = 50, // rethrow caught execetion: catch (e if ) use it\n        IN             = 51,\n        INSTANCEOF     = 52,\n        LOCAL_LOAD     = 53,\n        GETVAR         = 54,\n        SETVAR         = 55,\n        CATCH_SCOPE    = 56,\n        ENUM_INIT_KEYS = 57,\n        ENUM_INIT_VALUES = 58,\n        ENUM_NEXT      = 59,\n        ENUM_ID        = 60,\n        THISFN         = 61,\n        RETURN_RESULT  = 62, // to return prevoisly stored return result\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n        GET_REF        = 65, // *reference\n        SET_REF        = 66, // *reference    = something\n        DEL_REF        = 67, // delete reference\n        REF_CALL       = 68, // f(args)    = something or f(args)++\n        REF_SPECIAL    = 69, // reference for special properties like __proto\n\n        // For XML support:\n        DEFAULTNAMESPACE = 70, // default xml namespace =\n        ESCXMLATTR     = 71,\n        ESCXMLTEXT     = 72,\n        REF_MEMBER     = 73, // Reference for x.@y, x..y etc.\n        REF_NS_MEMBER  = 74, // Reference for x.ns::y, x..ns::y etc.\n        REF_NAME       = 75, // Reference for @y, @[y] etc.\n        REF_NS_NAME    = 76; // Reference for ns::y, @ns::y@[y] etc.",
        "begin_line": 69,
        "end_line": 154,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.REF_NAME",
        "snippet": "    public final static int\n    // start enum\n        ERROR          = -1, // well-known as the only code < EOF\n        EOF            = 0,  // end of file token - (not EOF_CHAR)\n        EOL            = 1,  // end of line\n\n        // Interpreter reuses the following as bytecodes\n        FIRST_BYTECODE_TOKEN    = 2,\n\n        ENTERWITH      = 2,\n        LEAVEWITH      = 3,\n        RETURN         = 4,\n        GOTO           = 5,\n        IFEQ           = 6,\n        IFNE           = 7,\n        SETNAME        = 8,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        SETPROP        = 34,\n        GETELEM        = 35,\n        SETELEM        = 36,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        BINDNAME       = 48,\n        THROW          = 49,\n        RETHROW        = 50, // rethrow caught execetion: catch (e if ) use it\n        IN             = 51,\n        INSTANCEOF     = 52,\n        LOCAL_LOAD     = 53,\n        GETVAR         = 54,\n        SETVAR         = 55,\n        CATCH_SCOPE    = 56,\n        ENUM_INIT_KEYS = 57,\n        ENUM_INIT_VALUES = 58,\n        ENUM_NEXT      = 59,\n        ENUM_ID        = 60,\n        THISFN         = 61,\n        RETURN_RESULT  = 62, // to return prevoisly stored return result\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n        GET_REF        = 65, // *reference\n        SET_REF        = 66, // *reference    = something\n        DEL_REF        = 67, // delete reference\n        REF_CALL       = 68, // f(args)    = something or f(args)++\n        REF_SPECIAL    = 69, // reference for special properties like __proto\n\n        // For XML support:\n        DEFAULTNAMESPACE = 70, // default xml namespace =\n        ESCXMLATTR     = 71,\n        ESCXMLTEXT     = 72,\n        REF_MEMBER     = 73, // Reference for x.@y, x..y etc.\n        REF_NS_MEMBER  = 74, // Reference for x.ns::y, x..ns::y etc.\n        REF_NAME       = 75, // Reference for @y, @[y] etc.\n        REF_NS_NAME    = 76; // Reference for ns::y, @ns::y@[y] etc.",
        "begin_line": 69,
        "end_line": 154,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.REF_NS_NAME",
        "snippet": "    public final static int\n    // start enum\n        ERROR          = -1, // well-known as the only code < EOF\n        EOF            = 0,  // end of file token - (not EOF_CHAR)\n        EOL            = 1,  // end of line\n\n        // Interpreter reuses the following as bytecodes\n        FIRST_BYTECODE_TOKEN    = 2,\n\n        ENTERWITH      = 2,\n        LEAVEWITH      = 3,\n        RETURN         = 4,\n        GOTO           = 5,\n        IFEQ           = 6,\n        IFNE           = 7,\n        SETNAME        = 8,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        SETPROP        = 34,\n        GETELEM        = 35,\n        SETELEM        = 36,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        BINDNAME       = 48,\n        THROW          = 49,\n        RETHROW        = 50, // rethrow caught execetion: catch (e if ) use it\n        IN             = 51,\n        INSTANCEOF     = 52,\n        LOCAL_LOAD     = 53,\n        GETVAR         = 54,\n        SETVAR         = 55,\n        CATCH_SCOPE    = 56,\n        ENUM_INIT_KEYS = 57,\n        ENUM_INIT_VALUES = 58,\n        ENUM_NEXT      = 59,\n        ENUM_ID        = 60,\n        THISFN         = 61,\n        RETURN_RESULT  = 62, // to return prevoisly stored return result\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n        GET_REF        = 65, // *reference\n        SET_REF        = 66, // *reference    = something\n        DEL_REF        = 67, // delete reference\n        REF_CALL       = 68, // f(args)    = something or f(args)++\n        REF_SPECIAL    = 69, // reference for special properties like __proto\n\n        // For XML support:\n        DEFAULTNAMESPACE = 70, // default xml namespace =\n        ESCXMLATTR     = 71,\n        ESCXMLTEXT     = 72,\n        REF_MEMBER     = 73, // Reference for x.@y, x..y etc.\n        REF_NS_MEMBER  = 74, // Reference for x.ns::y, x..ns::y etc.\n        REF_NAME       = 75, // Reference for @y, @[y] etc.\n        REF_NS_NAME    = 76; // Reference for ns::y, @ns::y@[y] etc.",
        "begin_line": 69,
        "end_line": 154,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.LAST_BYTECODE_TOKEN",
        "snippet": "    public final static int\n        LAST_BYTECODE_TOKEN    = REF_NS_NAME,\n\n        TRY            = 77,\n        SEMI           = 78,  // semicolon\n        LB             = 79,  // left and right brackets\n        RB             = 80,\n        LC             = 81,  // left and right curlies (braces)\n        RC             = 82,\n        LP             = 83,  // left and right parentheses\n        RP             = 84,\n        COMMA          = 85,  // comma operator\n\n        ASSIGN         = 86,  // simple assignment  (=)\n        ASSIGN_BITOR   = 87,  // |=\n        ASSIGN_BITXOR  = 88,  // ^=\n        ASSIGN_BITAND  = 89,  // |=\n        ASSIGN_LSH     = 90,  // <<=\n        ASSIGN_RSH     = 91,  // >>=\n        ASSIGN_URSH    = 92,  // >>>=\n        ASSIGN_ADD     = 93,  // +=\n        ASSIGN_SUB     = 94,  // -=\n        ASSIGN_MUL     = 95,  // *=\n        ASSIGN_DIV     = 96,  // /=\n        ASSIGN_MOD     = 97;  // %=",
        "begin_line": 157,
        "end_line": 181,
        "comment": " End of interpreter bytecodes"
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.TRY",
        "snippet": "    public final static int\n        LAST_BYTECODE_TOKEN    = REF_NS_NAME,\n\n        TRY            = 77,\n        SEMI           = 78,  // semicolon\n        LB             = 79,  // left and right brackets\n        RB             = 80,\n        LC             = 81,  // left and right curlies (braces)\n        RC             = 82,\n        LP             = 83,  // left and right parentheses\n        RP             = 84,\n        COMMA          = 85,  // comma operator\n\n        ASSIGN         = 86,  // simple assignment  (=)\n        ASSIGN_BITOR   = 87,  // |=\n        ASSIGN_BITXOR  = 88,  // ^=\n        ASSIGN_BITAND  = 89,  // |=\n        ASSIGN_LSH     = 90,  // <<=\n        ASSIGN_RSH     = 91,  // >>=\n        ASSIGN_URSH    = 92,  // >>>=\n        ASSIGN_ADD     = 93,  // +=\n        ASSIGN_SUB     = 94,  // -=\n        ASSIGN_MUL     = 95,  // *=\n        ASSIGN_DIV     = 96,  // /=\n        ASSIGN_MOD     = 97;  // %=",
        "begin_line": 157,
        "end_line": 181,
        "comment": " End of interpreter bytecodes"
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.SEMI",
        "snippet": "    public final static int\n        LAST_BYTECODE_TOKEN    = REF_NS_NAME,\n\n        TRY            = 77,\n        SEMI           = 78,  // semicolon\n        LB             = 79,  // left and right brackets\n        RB             = 80,\n        LC             = 81,  // left and right curlies (braces)\n        RC             = 82,\n        LP             = 83,  // left and right parentheses\n        RP             = 84,\n        COMMA          = 85,  // comma operator\n\n        ASSIGN         = 86,  // simple assignment  (=)\n        ASSIGN_BITOR   = 87,  // |=\n        ASSIGN_BITXOR  = 88,  // ^=\n        ASSIGN_BITAND  = 89,  // |=\n        ASSIGN_LSH     = 90,  // <<=\n        ASSIGN_RSH     = 91,  // >>=\n        ASSIGN_URSH    = 92,  // >>>=\n        ASSIGN_ADD     = 93,  // +=\n        ASSIGN_SUB     = 94,  // -=\n        ASSIGN_MUL     = 95,  // *=\n        ASSIGN_DIV     = 96,  // /=\n        ASSIGN_MOD     = 97;  // %=",
        "begin_line": 157,
        "end_line": 181,
        "comment": " End of interpreter bytecodes"
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.LB",
        "snippet": "    public final static int\n        LAST_BYTECODE_TOKEN    = REF_NS_NAME,\n\n        TRY            = 77,\n        SEMI           = 78,  // semicolon\n        LB             = 79,  // left and right brackets\n        RB             = 80,\n        LC             = 81,  // left and right curlies (braces)\n        RC             = 82,\n        LP             = 83,  // left and right parentheses\n        RP             = 84,\n        COMMA          = 85,  // comma operator\n\n        ASSIGN         = 86,  // simple assignment  (=)\n        ASSIGN_BITOR   = 87,  // |=\n        ASSIGN_BITXOR  = 88,  // ^=\n        ASSIGN_BITAND  = 89,  // |=\n        ASSIGN_LSH     = 90,  // <<=\n        ASSIGN_RSH     = 91,  // >>=\n        ASSIGN_URSH    = 92,  // >>>=\n        ASSIGN_ADD     = 93,  // +=\n        ASSIGN_SUB     = 94,  // -=\n        ASSIGN_MUL     = 95,  // *=\n        ASSIGN_DIV     = 96,  // /=\n        ASSIGN_MOD     = 97;  // %=",
        "begin_line": 157,
        "end_line": 181,
        "comment": " End of interpreter bytecodes"
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.RB",
        "snippet": "    public final static int\n        LAST_BYTECODE_TOKEN    = REF_NS_NAME,\n\n        TRY            = 77,\n        SEMI           = 78,  // semicolon\n        LB             = 79,  // left and right brackets\n        RB             = 80,\n        LC             = 81,  // left and right curlies (braces)\n        RC             = 82,\n        LP             = 83,  // left and right parentheses\n        RP             = 84,\n        COMMA          = 85,  // comma operator\n\n        ASSIGN         = 86,  // simple assignment  (=)\n        ASSIGN_BITOR   = 87,  // |=\n        ASSIGN_BITXOR  = 88,  // ^=\n        ASSIGN_BITAND  = 89,  // |=\n        ASSIGN_LSH     = 90,  // <<=\n        ASSIGN_RSH     = 91,  // >>=\n        ASSIGN_URSH    = 92,  // >>>=\n        ASSIGN_ADD     = 93,  // +=\n        ASSIGN_SUB     = 94,  // -=\n        ASSIGN_MUL     = 95,  // *=\n        ASSIGN_DIV     = 96,  // /=\n        ASSIGN_MOD     = 97;  // %=",
        "begin_line": 157,
        "end_line": 181,
        "comment": " End of interpreter bytecodes"
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.LC",
        "snippet": "    public final static int\n        LAST_BYTECODE_TOKEN    = REF_NS_NAME,\n\n        TRY            = 77,\n        SEMI           = 78,  // semicolon\n        LB             = 79,  // left and right brackets\n        RB             = 80,\n        LC             = 81,  // left and right curlies (braces)\n        RC             = 82,\n        LP             = 83,  // left and right parentheses\n        RP             = 84,\n        COMMA          = 85,  // comma operator\n\n        ASSIGN         = 86,  // simple assignment  (=)\n        ASSIGN_BITOR   = 87,  // |=\n        ASSIGN_BITXOR  = 88,  // ^=\n        ASSIGN_BITAND  = 89,  // |=\n        ASSIGN_LSH     = 90,  // <<=\n        ASSIGN_RSH     = 91,  // >>=\n        ASSIGN_URSH    = 92,  // >>>=\n        ASSIGN_ADD     = 93,  // +=\n        ASSIGN_SUB     = 94,  // -=\n        ASSIGN_MUL     = 95,  // *=\n        ASSIGN_DIV     = 96,  // /=\n        ASSIGN_MOD     = 97;  // %=",
        "begin_line": 157,
        "end_line": 181,
        "comment": " End of interpreter bytecodes"
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.RC",
        "snippet": "    public final static int\n        LAST_BYTECODE_TOKEN    = REF_NS_NAME,\n\n        TRY            = 77,\n        SEMI           = 78,  // semicolon\n        LB             = 79,  // left and right brackets\n        RB             = 80,\n        LC             = 81,  // left and right curlies (braces)\n        RC             = 82,\n        LP             = 83,  // left and right parentheses\n        RP             = 84,\n        COMMA          = 85,  // comma operator\n\n        ASSIGN         = 86,  // simple assignment  (=)\n        ASSIGN_BITOR   = 87,  // |=\n        ASSIGN_BITXOR  = 88,  // ^=\n        ASSIGN_BITAND  = 89,  // |=\n        ASSIGN_LSH     = 90,  // <<=\n        ASSIGN_RSH     = 91,  // >>=\n        ASSIGN_URSH    = 92,  // >>>=\n        ASSIGN_ADD     = 93,  // +=\n        ASSIGN_SUB     = 94,  // -=\n        ASSIGN_MUL     = 95,  // *=\n        ASSIGN_DIV     = 96,  // /=\n        ASSIGN_MOD     = 97;  // %=",
        "begin_line": 157,
        "end_line": 181,
        "comment": " End of interpreter bytecodes"
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.LP",
        "snippet": "    public final static int\n        LAST_BYTECODE_TOKEN    = REF_NS_NAME,\n\n        TRY            = 77,\n        SEMI           = 78,  // semicolon\n        LB             = 79,  // left and right brackets\n        RB             = 80,\n        LC             = 81,  // left and right curlies (braces)\n        RC             = 82,\n        LP             = 83,  // left and right parentheses\n        RP             = 84,\n        COMMA          = 85,  // comma operator\n\n        ASSIGN         = 86,  // simple assignment  (=)\n        ASSIGN_BITOR   = 87,  // |=\n        ASSIGN_BITXOR  = 88,  // ^=\n        ASSIGN_BITAND  = 89,  // |=\n        ASSIGN_LSH     = 90,  // <<=\n        ASSIGN_RSH     = 91,  // >>=\n        ASSIGN_URSH    = 92,  // >>>=\n        ASSIGN_ADD     = 93,  // +=\n        ASSIGN_SUB     = 94,  // -=\n        ASSIGN_MUL     = 95,  // *=\n        ASSIGN_DIV     = 96,  // /=\n        ASSIGN_MOD     = 97;  // %=",
        "begin_line": 157,
        "end_line": 181,
        "comment": " End of interpreter bytecodes"
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.RP",
        "snippet": "    public final static int\n        LAST_BYTECODE_TOKEN    = REF_NS_NAME,\n\n        TRY            = 77,\n        SEMI           = 78,  // semicolon\n        LB             = 79,  // left and right brackets\n        RB             = 80,\n        LC             = 81,  // left and right curlies (braces)\n        RC             = 82,\n        LP             = 83,  // left and right parentheses\n        RP             = 84,\n        COMMA          = 85,  // comma operator\n\n        ASSIGN         = 86,  // simple assignment  (=)\n        ASSIGN_BITOR   = 87,  // |=\n        ASSIGN_BITXOR  = 88,  // ^=\n        ASSIGN_BITAND  = 89,  // |=\n        ASSIGN_LSH     = 90,  // <<=\n        ASSIGN_RSH     = 91,  // >>=\n        ASSIGN_URSH    = 92,  // >>>=\n        ASSIGN_ADD     = 93,  // +=\n        ASSIGN_SUB     = 94,  // -=\n        ASSIGN_MUL     = 95,  // *=\n        ASSIGN_DIV     = 96,  // /=\n        ASSIGN_MOD     = 97;  // %=",
        "begin_line": 157,
        "end_line": 181,
        "comment": " End of interpreter bytecodes"
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.COMMA",
        "snippet": "    public final static int\n        LAST_BYTECODE_TOKEN    = REF_NS_NAME,\n\n        TRY            = 77,\n        SEMI           = 78,  // semicolon\n        LB             = 79,  // left and right brackets\n        RB             = 80,\n        LC             = 81,  // left and right curlies (braces)\n        RC             = 82,\n        LP             = 83,  // left and right parentheses\n        RP             = 84,\n        COMMA          = 85,  // comma operator\n\n        ASSIGN         = 86,  // simple assignment  (=)\n        ASSIGN_BITOR   = 87,  // |=\n        ASSIGN_BITXOR  = 88,  // ^=\n        ASSIGN_BITAND  = 89,  // |=\n        ASSIGN_LSH     = 90,  // <<=\n        ASSIGN_RSH     = 91,  // >>=\n        ASSIGN_URSH    = 92,  // >>>=\n        ASSIGN_ADD     = 93,  // +=\n        ASSIGN_SUB     = 94,  // -=\n        ASSIGN_MUL     = 95,  // *=\n        ASSIGN_DIV     = 96,  // /=\n        ASSIGN_MOD     = 97;  // %=",
        "begin_line": 157,
        "end_line": 181,
        "comment": " End of interpreter bytecodes"
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.ASSIGN",
        "snippet": "    public final static int\n        LAST_BYTECODE_TOKEN    = REF_NS_NAME,\n\n        TRY            = 77,\n        SEMI           = 78,  // semicolon\n        LB             = 79,  // left and right brackets\n        RB             = 80,\n        LC             = 81,  // left and right curlies (braces)\n        RC             = 82,\n        LP             = 83,  // left and right parentheses\n        RP             = 84,\n        COMMA          = 85,  // comma operator\n\n        ASSIGN         = 86,  // simple assignment  (=)\n        ASSIGN_BITOR   = 87,  // |=\n        ASSIGN_BITXOR  = 88,  // ^=\n        ASSIGN_BITAND  = 89,  // |=\n        ASSIGN_LSH     = 90,  // <<=\n        ASSIGN_RSH     = 91,  // >>=\n        ASSIGN_URSH    = 92,  // >>>=\n        ASSIGN_ADD     = 93,  // +=\n        ASSIGN_SUB     = 94,  // -=\n        ASSIGN_MUL     = 95,  // *=\n        ASSIGN_DIV     = 96,  // /=\n        ASSIGN_MOD     = 97;  // %=",
        "begin_line": 157,
        "end_line": 181,
        "comment": " End of interpreter bytecodes"
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.ASSIGN_BITOR",
        "snippet": "    public final static int\n        LAST_BYTECODE_TOKEN    = REF_NS_NAME,\n\n        TRY            = 77,\n        SEMI           = 78,  // semicolon\n        LB             = 79,  // left and right brackets\n        RB             = 80,\n        LC             = 81,  // left and right curlies (braces)\n        RC             = 82,\n        LP             = 83,  // left and right parentheses\n        RP             = 84,\n        COMMA          = 85,  // comma operator\n\n        ASSIGN         = 86,  // simple assignment  (=)\n        ASSIGN_BITOR   = 87,  // |=\n        ASSIGN_BITXOR  = 88,  // ^=\n        ASSIGN_BITAND  = 89,  // |=\n        ASSIGN_LSH     = 90,  // <<=\n        ASSIGN_RSH     = 91,  // >>=\n        ASSIGN_URSH    = 92,  // >>>=\n        ASSIGN_ADD     = 93,  // +=\n        ASSIGN_SUB     = 94,  // -=\n        ASSIGN_MUL     = 95,  // *=\n        ASSIGN_DIV     = 96,  // /=\n        ASSIGN_MOD     = 97;  // %=",
        "begin_line": 157,
        "end_line": 181,
        "comment": " End of interpreter bytecodes"
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.ASSIGN_BITXOR",
        "snippet": "    public final static int\n        LAST_BYTECODE_TOKEN    = REF_NS_NAME,\n\n        TRY            = 77,\n        SEMI           = 78,  // semicolon\n        LB             = 79,  // left and right brackets\n        RB             = 80,\n        LC             = 81,  // left and right curlies (braces)\n        RC             = 82,\n        LP             = 83,  // left and right parentheses\n        RP             = 84,\n        COMMA          = 85,  // comma operator\n\n        ASSIGN         = 86,  // simple assignment  (=)\n        ASSIGN_BITOR   = 87,  // |=\n        ASSIGN_BITXOR  = 88,  // ^=\n        ASSIGN_BITAND  = 89,  // |=\n        ASSIGN_LSH     = 90,  // <<=\n        ASSIGN_RSH     = 91,  // >>=\n        ASSIGN_URSH    = 92,  // >>>=\n        ASSIGN_ADD     = 93,  // +=\n        ASSIGN_SUB     = 94,  // -=\n        ASSIGN_MUL     = 95,  // *=\n        ASSIGN_DIV     = 96,  // /=\n        ASSIGN_MOD     = 97;  // %=",
        "begin_line": 157,
        "end_line": 181,
        "comment": " End of interpreter bytecodes"
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.ASSIGN_BITAND",
        "snippet": "    public final static int\n        LAST_BYTECODE_TOKEN    = REF_NS_NAME,\n\n        TRY            = 77,\n        SEMI           = 78,  // semicolon\n        LB             = 79,  // left and right brackets\n        RB             = 80,\n        LC             = 81,  // left and right curlies (braces)\n        RC             = 82,\n        LP             = 83,  // left and right parentheses\n        RP             = 84,\n        COMMA          = 85,  // comma operator\n\n        ASSIGN         = 86,  // simple assignment  (=)\n        ASSIGN_BITOR   = 87,  // |=\n        ASSIGN_BITXOR  = 88,  // ^=\n        ASSIGN_BITAND  = 89,  // |=\n        ASSIGN_LSH     = 90,  // <<=\n        ASSIGN_RSH     = 91,  // >>=\n        ASSIGN_URSH    = 92,  // >>>=\n        ASSIGN_ADD     = 93,  // +=\n        ASSIGN_SUB     = 94,  // -=\n        ASSIGN_MUL     = 95,  // *=\n        ASSIGN_DIV     = 96,  // /=\n        ASSIGN_MOD     = 97;  // %=",
        "begin_line": 157,
        "end_line": 181,
        "comment": " End of interpreter bytecodes"
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.ASSIGN_LSH",
        "snippet": "    public final static int\n        LAST_BYTECODE_TOKEN    = REF_NS_NAME,\n\n        TRY            = 77,\n        SEMI           = 78,  // semicolon\n        LB             = 79,  // left and right brackets\n        RB             = 80,\n        LC             = 81,  // left and right curlies (braces)\n        RC             = 82,\n        LP             = 83,  // left and right parentheses\n        RP             = 84,\n        COMMA          = 85,  // comma operator\n\n        ASSIGN         = 86,  // simple assignment  (=)\n        ASSIGN_BITOR   = 87,  // |=\n        ASSIGN_BITXOR  = 88,  // ^=\n        ASSIGN_BITAND  = 89,  // |=\n        ASSIGN_LSH     = 90,  // <<=\n        ASSIGN_RSH     = 91,  // >>=\n        ASSIGN_URSH    = 92,  // >>>=\n        ASSIGN_ADD     = 93,  // +=\n        ASSIGN_SUB     = 94,  // -=\n        ASSIGN_MUL     = 95,  // *=\n        ASSIGN_DIV     = 96,  // /=\n        ASSIGN_MOD     = 97;  // %=",
        "begin_line": 157,
        "end_line": 181,
        "comment": " End of interpreter bytecodes"
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.ASSIGN_RSH",
        "snippet": "    public final static int\n        LAST_BYTECODE_TOKEN    = REF_NS_NAME,\n\n        TRY            = 77,\n        SEMI           = 78,  // semicolon\n        LB             = 79,  // left and right brackets\n        RB             = 80,\n        LC             = 81,  // left and right curlies (braces)\n        RC             = 82,\n        LP             = 83,  // left and right parentheses\n        RP             = 84,\n        COMMA          = 85,  // comma operator\n\n        ASSIGN         = 86,  // simple assignment  (=)\n        ASSIGN_BITOR   = 87,  // |=\n        ASSIGN_BITXOR  = 88,  // ^=\n        ASSIGN_BITAND  = 89,  // |=\n        ASSIGN_LSH     = 90,  // <<=\n        ASSIGN_RSH     = 91,  // >>=\n        ASSIGN_URSH    = 92,  // >>>=\n        ASSIGN_ADD     = 93,  // +=\n        ASSIGN_SUB     = 94,  // -=\n        ASSIGN_MUL     = 95,  // *=\n        ASSIGN_DIV     = 96,  // /=\n        ASSIGN_MOD     = 97;  // %=",
        "begin_line": 157,
        "end_line": 181,
        "comment": " End of interpreter bytecodes"
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.ASSIGN_URSH",
        "snippet": "    public final static int\n        LAST_BYTECODE_TOKEN    = REF_NS_NAME,\n\n        TRY            = 77,\n        SEMI           = 78,  // semicolon\n        LB             = 79,  // left and right brackets\n        RB             = 80,\n        LC             = 81,  // left and right curlies (braces)\n        RC             = 82,\n        LP             = 83,  // left and right parentheses\n        RP             = 84,\n        COMMA          = 85,  // comma operator\n\n        ASSIGN         = 86,  // simple assignment  (=)\n        ASSIGN_BITOR   = 87,  // |=\n        ASSIGN_BITXOR  = 88,  // ^=\n        ASSIGN_BITAND  = 89,  // |=\n        ASSIGN_LSH     = 90,  // <<=\n        ASSIGN_RSH     = 91,  // >>=\n        ASSIGN_URSH    = 92,  // >>>=\n        ASSIGN_ADD     = 93,  // +=\n        ASSIGN_SUB     = 94,  // -=\n        ASSIGN_MUL     = 95,  // *=\n        ASSIGN_DIV     = 96,  // /=\n        ASSIGN_MOD     = 97;  // %=",
        "begin_line": 157,
        "end_line": 181,
        "comment": " End of interpreter bytecodes"
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.ASSIGN_ADD",
        "snippet": "    public final static int\n        LAST_BYTECODE_TOKEN    = REF_NS_NAME,\n\n        TRY            = 77,\n        SEMI           = 78,  // semicolon\n        LB             = 79,  // left and right brackets\n        RB             = 80,\n        LC             = 81,  // left and right curlies (braces)\n        RC             = 82,\n        LP             = 83,  // left and right parentheses\n        RP             = 84,\n        COMMA          = 85,  // comma operator\n\n        ASSIGN         = 86,  // simple assignment  (=)\n        ASSIGN_BITOR   = 87,  // |=\n        ASSIGN_BITXOR  = 88,  // ^=\n        ASSIGN_BITAND  = 89,  // |=\n        ASSIGN_LSH     = 90,  // <<=\n        ASSIGN_RSH     = 91,  // >>=\n        ASSIGN_URSH    = 92,  // >>>=\n        ASSIGN_ADD     = 93,  // +=\n        ASSIGN_SUB     = 94,  // -=\n        ASSIGN_MUL     = 95,  // *=\n        ASSIGN_DIV     = 96,  // /=\n        ASSIGN_MOD     = 97;  // %=",
        "begin_line": 157,
        "end_line": 181,
        "comment": " End of interpreter bytecodes"
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.ASSIGN_SUB",
        "snippet": "    public final static int\n        LAST_BYTECODE_TOKEN    = REF_NS_NAME,\n\n        TRY            = 77,\n        SEMI           = 78,  // semicolon\n        LB             = 79,  // left and right brackets\n        RB             = 80,\n        LC             = 81,  // left and right curlies (braces)\n        RC             = 82,\n        LP             = 83,  // left and right parentheses\n        RP             = 84,\n        COMMA          = 85,  // comma operator\n\n        ASSIGN         = 86,  // simple assignment  (=)\n        ASSIGN_BITOR   = 87,  // |=\n        ASSIGN_BITXOR  = 88,  // ^=\n        ASSIGN_BITAND  = 89,  // |=\n        ASSIGN_LSH     = 90,  // <<=\n        ASSIGN_RSH     = 91,  // >>=\n        ASSIGN_URSH    = 92,  // >>>=\n        ASSIGN_ADD     = 93,  // +=\n        ASSIGN_SUB     = 94,  // -=\n        ASSIGN_MUL     = 95,  // *=\n        ASSIGN_DIV     = 96,  // /=\n        ASSIGN_MOD     = 97;  // %=",
        "begin_line": 157,
        "end_line": 181,
        "comment": " End of interpreter bytecodes"
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.ASSIGN_MUL",
        "snippet": "    public final static int\n        LAST_BYTECODE_TOKEN    = REF_NS_NAME,\n\n        TRY            = 77,\n        SEMI           = 78,  // semicolon\n        LB             = 79,  // left and right brackets\n        RB             = 80,\n        LC             = 81,  // left and right curlies (braces)\n        RC             = 82,\n        LP             = 83,  // left and right parentheses\n        RP             = 84,\n        COMMA          = 85,  // comma operator\n\n        ASSIGN         = 86,  // simple assignment  (=)\n        ASSIGN_BITOR   = 87,  // |=\n        ASSIGN_BITXOR  = 88,  // ^=\n        ASSIGN_BITAND  = 89,  // |=\n        ASSIGN_LSH     = 90,  // <<=\n        ASSIGN_RSH     = 91,  // >>=\n        ASSIGN_URSH    = 92,  // >>>=\n        ASSIGN_ADD     = 93,  // +=\n        ASSIGN_SUB     = 94,  // -=\n        ASSIGN_MUL     = 95,  // *=\n        ASSIGN_DIV     = 96,  // /=\n        ASSIGN_MOD     = 97;  // %=",
        "begin_line": 157,
        "end_line": 181,
        "comment": " End of interpreter bytecodes"
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.ASSIGN_DIV",
        "snippet": "    public final static int\n        LAST_BYTECODE_TOKEN    = REF_NS_NAME,\n\n        TRY            = 77,\n        SEMI           = 78,  // semicolon\n        LB             = 79,  // left and right brackets\n        RB             = 80,\n        LC             = 81,  // left and right curlies (braces)\n        RC             = 82,\n        LP             = 83,  // left and right parentheses\n        RP             = 84,\n        COMMA          = 85,  // comma operator\n\n        ASSIGN         = 86,  // simple assignment  (=)\n        ASSIGN_BITOR   = 87,  // |=\n        ASSIGN_BITXOR  = 88,  // ^=\n        ASSIGN_BITAND  = 89,  // |=\n        ASSIGN_LSH     = 90,  // <<=\n        ASSIGN_RSH     = 91,  // >>=\n        ASSIGN_URSH    = 92,  // >>>=\n        ASSIGN_ADD     = 93,  // +=\n        ASSIGN_SUB     = 94,  // -=\n        ASSIGN_MUL     = 95,  // *=\n        ASSIGN_DIV     = 96,  // /=\n        ASSIGN_MOD     = 97;  // %=",
        "begin_line": 157,
        "end_line": 181,
        "comment": " End of interpreter bytecodes"
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.ASSIGN_MOD",
        "snippet": "    public final static int\n        LAST_BYTECODE_TOKEN    = REF_NS_NAME,\n\n        TRY            = 77,\n        SEMI           = 78,  // semicolon\n        LB             = 79,  // left and right brackets\n        RB             = 80,\n        LC             = 81,  // left and right curlies (braces)\n        RC             = 82,\n        LP             = 83,  // left and right parentheses\n        RP             = 84,\n        COMMA          = 85,  // comma operator\n\n        ASSIGN         = 86,  // simple assignment  (=)\n        ASSIGN_BITOR   = 87,  // |=\n        ASSIGN_BITXOR  = 88,  // ^=\n        ASSIGN_BITAND  = 89,  // |=\n        ASSIGN_LSH     = 90,  // <<=\n        ASSIGN_RSH     = 91,  // >>=\n        ASSIGN_URSH    = 92,  // >>>=\n        ASSIGN_ADD     = 93,  // +=\n        ASSIGN_SUB     = 94,  // -=\n        ASSIGN_MUL     = 95,  // *=\n        ASSIGN_DIV     = 96,  // /=\n        ASSIGN_MOD     = 97;  // %=",
        "begin_line": 157,
        "end_line": 181,
        "comment": " End of interpreter bytecodes"
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.FIRST_ASSIGN",
        "snippet": "    public final static int\n        FIRST_ASSIGN   = ASSIGN,\n        LAST_ASSIGN    = ASSIGN_MOD,\n\n        HOOK           = 98, // conditional (?:)\n        COLON          = 99,\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment/decrement (++ --)\n        DEC            = 103,\n        DOT            = 104, // member operator (.)\n        FUNCTION       = 105, // function keyword\n        EXPORT         = 106, // export keyword\n        IMPORT         = 107, // import keyword\n        IF             = 108, // if keyword\n        ELSE           = 109, // else keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT        = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        FINALLY        = 121, // finally keyword\n        VOID           = 122, // void keyword\n        RESERVED       = 123, // reserved keywords\n\n        EMPTY          = 124,\n\n        /* types used for the parse tree - these never get returned\n         * by the scanner.\n         */\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        TARGET         = 127,\n        LOOP           = 128,\n        EXPR_VOID      = 129, // expression statement in functions\n        EXPR_RESULT    = 130, // expression statement in scripts\n        JSR            = 131,\n        SCRIPT         = 132, // top-level node for entire script\n        TYPEOFNAME     = 133, // for typeof(simple-name)\n        USE_STACK      = 134,\n        SETPROP_OP     = 135, // x.y op= something\n        SETELEM_OP     = 136, // x[y] op= something\n        LOCAL_BLOCK    = 137,\n        SET_REF_OP     = 138, // *reference op= something\n\n        // For XML support:\n        DOTDOT         = 139,  // member operator (..)\n        COLONCOLON     = 140,  // namespace::name\n        XML            = 141,  // XML type\n        DOTQUERY       = 142,  // .() -- e.g., x.emps.emp.(name == \"terry\")\n        XMLATTR        = 143,  // @\n        XMLEND         = 144,\n\n        // Optimizer-only-tokens\n        TO_OBJECT      = 145,\n        TO_DOUBLE      = 146,\n\n        GET            = 147,  // JS 1.5 get pseudo keyword\n        SET            = 148,  // JS 1.5 set pseudo keyword\n\n        CONST          = 149,  // JS 1.5 const keyword\n        SETCONST       = 150,\n        SETCONSTVAR    = 151,\n        DEBUGGER       = 152,\n        LAST_TOKEN     = 152,\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307;",
        "begin_line": 183,
        "end_line": 264,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.LAST_ASSIGN",
        "snippet": "    public final static int\n        FIRST_ASSIGN   = ASSIGN,\n        LAST_ASSIGN    = ASSIGN_MOD,\n\n        HOOK           = 98, // conditional (?:)\n        COLON          = 99,\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment/decrement (++ --)\n        DEC            = 103,\n        DOT            = 104, // member operator (.)\n        FUNCTION       = 105, // function keyword\n        EXPORT         = 106, // export keyword\n        IMPORT         = 107, // import keyword\n        IF             = 108, // if keyword\n        ELSE           = 109, // else keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT        = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        FINALLY        = 121, // finally keyword\n        VOID           = 122, // void keyword\n        RESERVED       = 123, // reserved keywords\n\n        EMPTY          = 124,\n\n        /* types used for the parse tree - these never get returned\n         * by the scanner.\n         */\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        TARGET         = 127,\n        LOOP           = 128,\n        EXPR_VOID      = 129, // expression statement in functions\n        EXPR_RESULT    = 130, // expression statement in scripts\n        JSR            = 131,\n        SCRIPT         = 132, // top-level node for entire script\n        TYPEOFNAME     = 133, // for typeof(simple-name)\n        USE_STACK      = 134,\n        SETPROP_OP     = 135, // x.y op= something\n        SETELEM_OP     = 136, // x[y] op= something\n        LOCAL_BLOCK    = 137,\n        SET_REF_OP     = 138, // *reference op= something\n\n        // For XML support:\n        DOTDOT         = 139,  // member operator (..)\n        COLONCOLON     = 140,  // namespace::name\n        XML            = 141,  // XML type\n        DOTQUERY       = 142,  // .() -- e.g., x.emps.emp.(name == \"terry\")\n        XMLATTR        = 143,  // @\n        XMLEND         = 144,\n\n        // Optimizer-only-tokens\n        TO_OBJECT      = 145,\n        TO_DOUBLE      = 146,\n\n        GET            = 147,  // JS 1.5 get pseudo keyword\n        SET            = 148,  // JS 1.5 set pseudo keyword\n\n        CONST          = 149,  // JS 1.5 const keyword\n        SETCONST       = 150,\n        SETCONSTVAR    = 151,\n        DEBUGGER       = 152,\n        LAST_TOKEN     = 152,\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307;",
        "begin_line": 183,
        "end_line": 264,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.HOOK",
        "snippet": "    public final static int\n        FIRST_ASSIGN   = ASSIGN,\n        LAST_ASSIGN    = ASSIGN_MOD,\n\n        HOOK           = 98, // conditional (?:)\n        COLON          = 99,\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment/decrement (++ --)\n        DEC            = 103,\n        DOT            = 104, // member operator (.)\n        FUNCTION       = 105, // function keyword\n        EXPORT         = 106, // export keyword\n        IMPORT         = 107, // import keyword\n        IF             = 108, // if keyword\n        ELSE           = 109, // else keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT        = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        FINALLY        = 121, // finally keyword\n        VOID           = 122, // void keyword\n        RESERVED       = 123, // reserved keywords\n\n        EMPTY          = 124,\n\n        /* types used for the parse tree - these never get returned\n         * by the scanner.\n         */\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        TARGET         = 127,\n        LOOP           = 128,\n        EXPR_VOID      = 129, // expression statement in functions\n        EXPR_RESULT    = 130, // expression statement in scripts\n        JSR            = 131,\n        SCRIPT         = 132, // top-level node for entire script\n        TYPEOFNAME     = 133, // for typeof(simple-name)\n        USE_STACK      = 134,\n        SETPROP_OP     = 135, // x.y op= something\n        SETELEM_OP     = 136, // x[y] op= something\n        LOCAL_BLOCK    = 137,\n        SET_REF_OP     = 138, // *reference op= something\n\n        // For XML support:\n        DOTDOT         = 139,  // member operator (..)\n        COLONCOLON     = 140,  // namespace::name\n        XML            = 141,  // XML type\n        DOTQUERY       = 142,  // .() -- e.g., x.emps.emp.(name == \"terry\")\n        XMLATTR        = 143,  // @\n        XMLEND         = 144,\n\n        // Optimizer-only-tokens\n        TO_OBJECT      = 145,\n        TO_DOUBLE      = 146,\n\n        GET            = 147,  // JS 1.5 get pseudo keyword\n        SET            = 148,  // JS 1.5 set pseudo keyword\n\n        CONST          = 149,  // JS 1.5 const keyword\n        SETCONST       = 150,\n        SETCONSTVAR    = 151,\n        DEBUGGER       = 152,\n        LAST_TOKEN     = 152,\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307;",
        "begin_line": 183,
        "end_line": 264,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.COLON",
        "snippet": "    public final static int\n        FIRST_ASSIGN   = ASSIGN,\n        LAST_ASSIGN    = ASSIGN_MOD,\n\n        HOOK           = 98, // conditional (?:)\n        COLON          = 99,\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment/decrement (++ --)\n        DEC            = 103,\n        DOT            = 104, // member operator (.)\n        FUNCTION       = 105, // function keyword\n        EXPORT         = 106, // export keyword\n        IMPORT         = 107, // import keyword\n        IF             = 108, // if keyword\n        ELSE           = 109, // else keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT        = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        FINALLY        = 121, // finally keyword\n        VOID           = 122, // void keyword\n        RESERVED       = 123, // reserved keywords\n\n        EMPTY          = 124,\n\n        /* types used for the parse tree - these never get returned\n         * by the scanner.\n         */\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        TARGET         = 127,\n        LOOP           = 128,\n        EXPR_VOID      = 129, // expression statement in functions\n        EXPR_RESULT    = 130, // expression statement in scripts\n        JSR            = 131,\n        SCRIPT         = 132, // top-level node for entire script\n        TYPEOFNAME     = 133, // for typeof(simple-name)\n        USE_STACK      = 134,\n        SETPROP_OP     = 135, // x.y op= something\n        SETELEM_OP     = 136, // x[y] op= something\n        LOCAL_BLOCK    = 137,\n        SET_REF_OP     = 138, // *reference op= something\n\n        // For XML support:\n        DOTDOT         = 139,  // member operator (..)\n        COLONCOLON     = 140,  // namespace::name\n        XML            = 141,  // XML type\n        DOTQUERY       = 142,  // .() -- e.g., x.emps.emp.(name == \"terry\")\n        XMLATTR        = 143,  // @\n        XMLEND         = 144,\n\n        // Optimizer-only-tokens\n        TO_OBJECT      = 145,\n        TO_DOUBLE      = 146,\n\n        GET            = 147,  // JS 1.5 get pseudo keyword\n        SET            = 148,  // JS 1.5 set pseudo keyword\n\n        CONST          = 149,  // JS 1.5 const keyword\n        SETCONST       = 150,\n        SETCONSTVAR    = 151,\n        DEBUGGER       = 152,\n        LAST_TOKEN     = 152,\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307;",
        "begin_line": 183,
        "end_line": 264,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.OR",
        "snippet": "    public final static int\n        FIRST_ASSIGN   = ASSIGN,\n        LAST_ASSIGN    = ASSIGN_MOD,\n\n        HOOK           = 98, // conditional (?:)\n        COLON          = 99,\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment/decrement (++ --)\n        DEC            = 103,\n        DOT            = 104, // member operator (.)\n        FUNCTION       = 105, // function keyword\n        EXPORT         = 106, // export keyword\n        IMPORT         = 107, // import keyword\n        IF             = 108, // if keyword\n        ELSE           = 109, // else keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT        = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        FINALLY        = 121, // finally keyword\n        VOID           = 122, // void keyword\n        RESERVED       = 123, // reserved keywords\n\n        EMPTY          = 124,\n\n        /* types used for the parse tree - these never get returned\n         * by the scanner.\n         */\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        TARGET         = 127,\n        LOOP           = 128,\n        EXPR_VOID      = 129, // expression statement in functions\n        EXPR_RESULT    = 130, // expression statement in scripts\n        JSR            = 131,\n        SCRIPT         = 132, // top-level node for entire script\n        TYPEOFNAME     = 133, // for typeof(simple-name)\n        USE_STACK      = 134,\n        SETPROP_OP     = 135, // x.y op= something\n        SETELEM_OP     = 136, // x[y] op= something\n        LOCAL_BLOCK    = 137,\n        SET_REF_OP     = 138, // *reference op= something\n\n        // For XML support:\n        DOTDOT         = 139,  // member operator (..)\n        COLONCOLON     = 140,  // namespace::name\n        XML            = 141,  // XML type\n        DOTQUERY       = 142,  // .() -- e.g., x.emps.emp.(name == \"terry\")\n        XMLATTR        = 143,  // @\n        XMLEND         = 144,\n\n        // Optimizer-only-tokens\n        TO_OBJECT      = 145,\n        TO_DOUBLE      = 146,\n\n        GET            = 147,  // JS 1.5 get pseudo keyword\n        SET            = 148,  // JS 1.5 set pseudo keyword\n\n        CONST          = 149,  // JS 1.5 const keyword\n        SETCONST       = 150,\n        SETCONSTVAR    = 151,\n        DEBUGGER       = 152,\n        LAST_TOKEN     = 152,\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307;",
        "begin_line": 183,
        "end_line": 264,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.AND",
        "snippet": "    public final static int\n        FIRST_ASSIGN   = ASSIGN,\n        LAST_ASSIGN    = ASSIGN_MOD,\n\n        HOOK           = 98, // conditional (?:)\n        COLON          = 99,\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment/decrement (++ --)\n        DEC            = 103,\n        DOT            = 104, // member operator (.)\n        FUNCTION       = 105, // function keyword\n        EXPORT         = 106, // export keyword\n        IMPORT         = 107, // import keyword\n        IF             = 108, // if keyword\n        ELSE           = 109, // else keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT        = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        FINALLY        = 121, // finally keyword\n        VOID           = 122, // void keyword\n        RESERVED       = 123, // reserved keywords\n\n        EMPTY          = 124,\n\n        /* types used for the parse tree - these never get returned\n         * by the scanner.\n         */\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        TARGET         = 127,\n        LOOP           = 128,\n        EXPR_VOID      = 129, // expression statement in functions\n        EXPR_RESULT    = 130, // expression statement in scripts\n        JSR            = 131,\n        SCRIPT         = 132, // top-level node for entire script\n        TYPEOFNAME     = 133, // for typeof(simple-name)\n        USE_STACK      = 134,\n        SETPROP_OP     = 135, // x.y op= something\n        SETELEM_OP     = 136, // x[y] op= something\n        LOCAL_BLOCK    = 137,\n        SET_REF_OP     = 138, // *reference op= something\n\n        // For XML support:\n        DOTDOT         = 139,  // member operator (..)\n        COLONCOLON     = 140,  // namespace::name\n        XML            = 141,  // XML type\n        DOTQUERY       = 142,  // .() -- e.g., x.emps.emp.(name == \"terry\")\n        XMLATTR        = 143,  // @\n        XMLEND         = 144,\n\n        // Optimizer-only-tokens\n        TO_OBJECT      = 145,\n        TO_DOUBLE      = 146,\n\n        GET            = 147,  // JS 1.5 get pseudo keyword\n        SET            = 148,  // JS 1.5 set pseudo keyword\n\n        CONST          = 149,  // JS 1.5 const keyword\n        SETCONST       = 150,\n        SETCONSTVAR    = 151,\n        DEBUGGER       = 152,\n        LAST_TOKEN     = 152,\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307;",
        "begin_line": 183,
        "end_line": 264,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.INC",
        "snippet": "    public final static int\n        FIRST_ASSIGN   = ASSIGN,\n        LAST_ASSIGN    = ASSIGN_MOD,\n\n        HOOK           = 98, // conditional (?:)\n        COLON          = 99,\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment/decrement (++ --)\n        DEC            = 103,\n        DOT            = 104, // member operator (.)\n        FUNCTION       = 105, // function keyword\n        EXPORT         = 106, // export keyword\n        IMPORT         = 107, // import keyword\n        IF             = 108, // if keyword\n        ELSE           = 109, // else keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT        = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        FINALLY        = 121, // finally keyword\n        VOID           = 122, // void keyword\n        RESERVED       = 123, // reserved keywords\n\n        EMPTY          = 124,\n\n        /* types used for the parse tree - these never get returned\n         * by the scanner.\n         */\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        TARGET         = 127,\n        LOOP           = 128,\n        EXPR_VOID      = 129, // expression statement in functions\n        EXPR_RESULT    = 130, // expression statement in scripts\n        JSR            = 131,\n        SCRIPT         = 132, // top-level node for entire script\n        TYPEOFNAME     = 133, // for typeof(simple-name)\n        USE_STACK      = 134,\n        SETPROP_OP     = 135, // x.y op= something\n        SETELEM_OP     = 136, // x[y] op= something\n        LOCAL_BLOCK    = 137,\n        SET_REF_OP     = 138, // *reference op= something\n\n        // For XML support:\n        DOTDOT         = 139,  // member operator (..)\n        COLONCOLON     = 140,  // namespace::name\n        XML            = 141,  // XML type\n        DOTQUERY       = 142,  // .() -- e.g., x.emps.emp.(name == \"terry\")\n        XMLATTR        = 143,  // @\n        XMLEND         = 144,\n\n        // Optimizer-only-tokens\n        TO_OBJECT      = 145,\n        TO_DOUBLE      = 146,\n\n        GET            = 147,  // JS 1.5 get pseudo keyword\n        SET            = 148,  // JS 1.5 set pseudo keyword\n\n        CONST          = 149,  // JS 1.5 const keyword\n        SETCONST       = 150,\n        SETCONSTVAR    = 151,\n        DEBUGGER       = 152,\n        LAST_TOKEN     = 152,\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307;",
        "begin_line": 183,
        "end_line": 264,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.DEC",
        "snippet": "    public final static int\n        FIRST_ASSIGN   = ASSIGN,\n        LAST_ASSIGN    = ASSIGN_MOD,\n\n        HOOK           = 98, // conditional (?:)\n        COLON          = 99,\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment/decrement (++ --)\n        DEC            = 103,\n        DOT            = 104, // member operator (.)\n        FUNCTION       = 105, // function keyword\n        EXPORT         = 106, // export keyword\n        IMPORT         = 107, // import keyword\n        IF             = 108, // if keyword\n        ELSE           = 109, // else keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT        = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        FINALLY        = 121, // finally keyword\n        VOID           = 122, // void keyword\n        RESERVED       = 123, // reserved keywords\n\n        EMPTY          = 124,\n\n        /* types used for the parse tree - these never get returned\n         * by the scanner.\n         */\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        TARGET         = 127,\n        LOOP           = 128,\n        EXPR_VOID      = 129, // expression statement in functions\n        EXPR_RESULT    = 130, // expression statement in scripts\n        JSR            = 131,\n        SCRIPT         = 132, // top-level node for entire script\n        TYPEOFNAME     = 133, // for typeof(simple-name)\n        USE_STACK      = 134,\n        SETPROP_OP     = 135, // x.y op= something\n        SETELEM_OP     = 136, // x[y] op= something\n        LOCAL_BLOCK    = 137,\n        SET_REF_OP     = 138, // *reference op= something\n\n        // For XML support:\n        DOTDOT         = 139,  // member operator (..)\n        COLONCOLON     = 140,  // namespace::name\n        XML            = 141,  // XML type\n        DOTQUERY       = 142,  // .() -- e.g., x.emps.emp.(name == \"terry\")\n        XMLATTR        = 143,  // @\n        XMLEND         = 144,\n\n        // Optimizer-only-tokens\n        TO_OBJECT      = 145,\n        TO_DOUBLE      = 146,\n\n        GET            = 147,  // JS 1.5 get pseudo keyword\n        SET            = 148,  // JS 1.5 set pseudo keyword\n\n        CONST          = 149,  // JS 1.5 const keyword\n        SETCONST       = 150,\n        SETCONSTVAR    = 151,\n        DEBUGGER       = 152,\n        LAST_TOKEN     = 152,\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307;",
        "begin_line": 183,
        "end_line": 264,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.DOT",
        "snippet": "    public final static int\n        FIRST_ASSIGN   = ASSIGN,\n        LAST_ASSIGN    = ASSIGN_MOD,\n\n        HOOK           = 98, // conditional (?:)\n        COLON          = 99,\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment/decrement (++ --)\n        DEC            = 103,\n        DOT            = 104, // member operator (.)\n        FUNCTION       = 105, // function keyword\n        EXPORT         = 106, // export keyword\n        IMPORT         = 107, // import keyword\n        IF             = 108, // if keyword\n        ELSE           = 109, // else keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT        = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        FINALLY        = 121, // finally keyword\n        VOID           = 122, // void keyword\n        RESERVED       = 123, // reserved keywords\n\n        EMPTY          = 124,\n\n        /* types used for the parse tree - these never get returned\n         * by the scanner.\n         */\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        TARGET         = 127,\n        LOOP           = 128,\n        EXPR_VOID      = 129, // expression statement in functions\n        EXPR_RESULT    = 130, // expression statement in scripts\n        JSR            = 131,\n        SCRIPT         = 132, // top-level node for entire script\n        TYPEOFNAME     = 133, // for typeof(simple-name)\n        USE_STACK      = 134,\n        SETPROP_OP     = 135, // x.y op= something\n        SETELEM_OP     = 136, // x[y] op= something\n        LOCAL_BLOCK    = 137,\n        SET_REF_OP     = 138, // *reference op= something\n\n        // For XML support:\n        DOTDOT         = 139,  // member operator (..)\n        COLONCOLON     = 140,  // namespace::name\n        XML            = 141,  // XML type\n        DOTQUERY       = 142,  // .() -- e.g., x.emps.emp.(name == \"terry\")\n        XMLATTR        = 143,  // @\n        XMLEND         = 144,\n\n        // Optimizer-only-tokens\n        TO_OBJECT      = 145,\n        TO_DOUBLE      = 146,\n\n        GET            = 147,  // JS 1.5 get pseudo keyword\n        SET            = 148,  // JS 1.5 set pseudo keyword\n\n        CONST          = 149,  // JS 1.5 const keyword\n        SETCONST       = 150,\n        SETCONSTVAR    = 151,\n        DEBUGGER       = 152,\n        LAST_TOKEN     = 152,\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307;",
        "begin_line": 183,
        "end_line": 264,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.FUNCTION",
        "snippet": "    public final static int\n        FIRST_ASSIGN   = ASSIGN,\n        LAST_ASSIGN    = ASSIGN_MOD,\n\n        HOOK           = 98, // conditional (?:)\n        COLON          = 99,\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment/decrement (++ --)\n        DEC            = 103,\n        DOT            = 104, // member operator (.)\n        FUNCTION       = 105, // function keyword\n        EXPORT         = 106, // export keyword\n        IMPORT         = 107, // import keyword\n        IF             = 108, // if keyword\n        ELSE           = 109, // else keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT        = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        FINALLY        = 121, // finally keyword\n        VOID           = 122, // void keyword\n        RESERVED       = 123, // reserved keywords\n\n        EMPTY          = 124,\n\n        /* types used for the parse tree - these never get returned\n         * by the scanner.\n         */\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        TARGET         = 127,\n        LOOP           = 128,\n        EXPR_VOID      = 129, // expression statement in functions\n        EXPR_RESULT    = 130, // expression statement in scripts\n        JSR            = 131,\n        SCRIPT         = 132, // top-level node for entire script\n        TYPEOFNAME     = 133, // for typeof(simple-name)\n        USE_STACK      = 134,\n        SETPROP_OP     = 135, // x.y op= something\n        SETELEM_OP     = 136, // x[y] op= something\n        LOCAL_BLOCK    = 137,\n        SET_REF_OP     = 138, // *reference op= something\n\n        // For XML support:\n        DOTDOT         = 139,  // member operator (..)\n        COLONCOLON     = 140,  // namespace::name\n        XML            = 141,  // XML type\n        DOTQUERY       = 142,  // .() -- e.g., x.emps.emp.(name == \"terry\")\n        XMLATTR        = 143,  // @\n        XMLEND         = 144,\n\n        // Optimizer-only-tokens\n        TO_OBJECT      = 145,\n        TO_DOUBLE      = 146,\n\n        GET            = 147,  // JS 1.5 get pseudo keyword\n        SET            = 148,  // JS 1.5 set pseudo keyword\n\n        CONST          = 149,  // JS 1.5 const keyword\n        SETCONST       = 150,\n        SETCONSTVAR    = 151,\n        DEBUGGER       = 152,\n        LAST_TOKEN     = 152,\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307;",
        "begin_line": 183,
        "end_line": 264,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.EXPORT",
        "snippet": "    public final static int\n        FIRST_ASSIGN   = ASSIGN,\n        LAST_ASSIGN    = ASSIGN_MOD,\n\n        HOOK           = 98, // conditional (?:)\n        COLON          = 99,\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment/decrement (++ --)\n        DEC            = 103,\n        DOT            = 104, // member operator (.)\n        FUNCTION       = 105, // function keyword\n        EXPORT         = 106, // export keyword\n        IMPORT         = 107, // import keyword\n        IF             = 108, // if keyword\n        ELSE           = 109, // else keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT        = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        FINALLY        = 121, // finally keyword\n        VOID           = 122, // void keyword\n        RESERVED       = 123, // reserved keywords\n\n        EMPTY          = 124,\n\n        /* types used for the parse tree - these never get returned\n         * by the scanner.\n         */\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        TARGET         = 127,\n        LOOP           = 128,\n        EXPR_VOID      = 129, // expression statement in functions\n        EXPR_RESULT    = 130, // expression statement in scripts\n        JSR            = 131,\n        SCRIPT         = 132, // top-level node for entire script\n        TYPEOFNAME     = 133, // for typeof(simple-name)\n        USE_STACK      = 134,\n        SETPROP_OP     = 135, // x.y op= something\n        SETELEM_OP     = 136, // x[y] op= something\n        LOCAL_BLOCK    = 137,\n        SET_REF_OP     = 138, // *reference op= something\n\n        // For XML support:\n        DOTDOT         = 139,  // member operator (..)\n        COLONCOLON     = 140,  // namespace::name\n        XML            = 141,  // XML type\n        DOTQUERY       = 142,  // .() -- e.g., x.emps.emp.(name == \"terry\")\n        XMLATTR        = 143,  // @\n        XMLEND         = 144,\n\n        // Optimizer-only-tokens\n        TO_OBJECT      = 145,\n        TO_DOUBLE      = 146,\n\n        GET            = 147,  // JS 1.5 get pseudo keyword\n        SET            = 148,  // JS 1.5 set pseudo keyword\n\n        CONST          = 149,  // JS 1.5 const keyword\n        SETCONST       = 150,\n        SETCONSTVAR    = 151,\n        DEBUGGER       = 152,\n        LAST_TOKEN     = 152,\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307;",
        "begin_line": 183,
        "end_line": 264,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.IMPORT",
        "snippet": "    public final static int\n        FIRST_ASSIGN   = ASSIGN,\n        LAST_ASSIGN    = ASSIGN_MOD,\n\n        HOOK           = 98, // conditional (?:)\n        COLON          = 99,\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment/decrement (++ --)\n        DEC            = 103,\n        DOT            = 104, // member operator (.)\n        FUNCTION       = 105, // function keyword\n        EXPORT         = 106, // export keyword\n        IMPORT         = 107, // import keyword\n        IF             = 108, // if keyword\n        ELSE           = 109, // else keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT        = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        FINALLY        = 121, // finally keyword\n        VOID           = 122, // void keyword\n        RESERVED       = 123, // reserved keywords\n\n        EMPTY          = 124,\n\n        /* types used for the parse tree - these never get returned\n         * by the scanner.\n         */\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        TARGET         = 127,\n        LOOP           = 128,\n        EXPR_VOID      = 129, // expression statement in functions\n        EXPR_RESULT    = 130, // expression statement in scripts\n        JSR            = 131,\n        SCRIPT         = 132, // top-level node for entire script\n        TYPEOFNAME     = 133, // for typeof(simple-name)\n        USE_STACK      = 134,\n        SETPROP_OP     = 135, // x.y op= something\n        SETELEM_OP     = 136, // x[y] op= something\n        LOCAL_BLOCK    = 137,\n        SET_REF_OP     = 138, // *reference op= something\n\n        // For XML support:\n        DOTDOT         = 139,  // member operator (..)\n        COLONCOLON     = 140,  // namespace::name\n        XML            = 141,  // XML type\n        DOTQUERY       = 142,  // .() -- e.g., x.emps.emp.(name == \"terry\")\n        XMLATTR        = 143,  // @\n        XMLEND         = 144,\n\n        // Optimizer-only-tokens\n        TO_OBJECT      = 145,\n        TO_DOUBLE      = 146,\n\n        GET            = 147,  // JS 1.5 get pseudo keyword\n        SET            = 148,  // JS 1.5 set pseudo keyword\n\n        CONST          = 149,  // JS 1.5 const keyword\n        SETCONST       = 150,\n        SETCONSTVAR    = 151,\n        DEBUGGER       = 152,\n        LAST_TOKEN     = 152,\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307;",
        "begin_line": 183,
        "end_line": 264,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.IF",
        "snippet": "    public final static int\n        FIRST_ASSIGN   = ASSIGN,\n        LAST_ASSIGN    = ASSIGN_MOD,\n\n        HOOK           = 98, // conditional (?:)\n        COLON          = 99,\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment/decrement (++ --)\n        DEC            = 103,\n        DOT            = 104, // member operator (.)\n        FUNCTION       = 105, // function keyword\n        EXPORT         = 106, // export keyword\n        IMPORT         = 107, // import keyword\n        IF             = 108, // if keyword\n        ELSE           = 109, // else keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT        = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        FINALLY        = 121, // finally keyword\n        VOID           = 122, // void keyword\n        RESERVED       = 123, // reserved keywords\n\n        EMPTY          = 124,\n\n        /* types used for the parse tree - these never get returned\n         * by the scanner.\n         */\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        TARGET         = 127,\n        LOOP           = 128,\n        EXPR_VOID      = 129, // expression statement in functions\n        EXPR_RESULT    = 130, // expression statement in scripts\n        JSR            = 131,\n        SCRIPT         = 132, // top-level node for entire script\n        TYPEOFNAME     = 133, // for typeof(simple-name)\n        USE_STACK      = 134,\n        SETPROP_OP     = 135, // x.y op= something\n        SETELEM_OP     = 136, // x[y] op= something\n        LOCAL_BLOCK    = 137,\n        SET_REF_OP     = 138, // *reference op= something\n\n        // For XML support:\n        DOTDOT         = 139,  // member operator (..)\n        COLONCOLON     = 140,  // namespace::name\n        XML            = 141,  // XML type\n        DOTQUERY       = 142,  // .() -- e.g., x.emps.emp.(name == \"terry\")\n        XMLATTR        = 143,  // @\n        XMLEND         = 144,\n\n        // Optimizer-only-tokens\n        TO_OBJECT      = 145,\n        TO_DOUBLE      = 146,\n\n        GET            = 147,  // JS 1.5 get pseudo keyword\n        SET            = 148,  // JS 1.5 set pseudo keyword\n\n        CONST          = 149,  // JS 1.5 const keyword\n        SETCONST       = 150,\n        SETCONSTVAR    = 151,\n        DEBUGGER       = 152,\n        LAST_TOKEN     = 152,\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307;",
        "begin_line": 183,
        "end_line": 264,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.ELSE",
        "snippet": "    public final static int\n        FIRST_ASSIGN   = ASSIGN,\n        LAST_ASSIGN    = ASSIGN_MOD,\n\n        HOOK           = 98, // conditional (?:)\n        COLON          = 99,\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment/decrement (++ --)\n        DEC            = 103,\n        DOT            = 104, // member operator (.)\n        FUNCTION       = 105, // function keyword\n        EXPORT         = 106, // export keyword\n        IMPORT         = 107, // import keyword\n        IF             = 108, // if keyword\n        ELSE           = 109, // else keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT        = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        FINALLY        = 121, // finally keyword\n        VOID           = 122, // void keyword\n        RESERVED       = 123, // reserved keywords\n\n        EMPTY          = 124,\n\n        /* types used for the parse tree - these never get returned\n         * by the scanner.\n         */\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        TARGET         = 127,\n        LOOP           = 128,\n        EXPR_VOID      = 129, // expression statement in functions\n        EXPR_RESULT    = 130, // expression statement in scripts\n        JSR            = 131,\n        SCRIPT         = 132, // top-level node for entire script\n        TYPEOFNAME     = 133, // for typeof(simple-name)\n        USE_STACK      = 134,\n        SETPROP_OP     = 135, // x.y op= something\n        SETELEM_OP     = 136, // x[y] op= something\n        LOCAL_BLOCK    = 137,\n        SET_REF_OP     = 138, // *reference op= something\n\n        // For XML support:\n        DOTDOT         = 139,  // member operator (..)\n        COLONCOLON     = 140,  // namespace::name\n        XML            = 141,  // XML type\n        DOTQUERY       = 142,  // .() -- e.g., x.emps.emp.(name == \"terry\")\n        XMLATTR        = 143,  // @\n        XMLEND         = 144,\n\n        // Optimizer-only-tokens\n        TO_OBJECT      = 145,\n        TO_DOUBLE      = 146,\n\n        GET            = 147,  // JS 1.5 get pseudo keyword\n        SET            = 148,  // JS 1.5 set pseudo keyword\n\n        CONST          = 149,  // JS 1.5 const keyword\n        SETCONST       = 150,\n        SETCONSTVAR    = 151,\n        DEBUGGER       = 152,\n        LAST_TOKEN     = 152,\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307;",
        "begin_line": 183,
        "end_line": 264,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.SWITCH",
        "snippet": "    public final static int\n        FIRST_ASSIGN   = ASSIGN,\n        LAST_ASSIGN    = ASSIGN_MOD,\n\n        HOOK           = 98, // conditional (?:)\n        COLON          = 99,\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment/decrement (++ --)\n        DEC            = 103,\n        DOT            = 104, // member operator (.)\n        FUNCTION       = 105, // function keyword\n        EXPORT         = 106, // export keyword\n        IMPORT         = 107, // import keyword\n        IF             = 108, // if keyword\n        ELSE           = 109, // else keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT        = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        FINALLY        = 121, // finally keyword\n        VOID           = 122, // void keyword\n        RESERVED       = 123, // reserved keywords\n\n        EMPTY          = 124,\n\n        /* types used for the parse tree - these never get returned\n         * by the scanner.\n         */\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        TARGET         = 127,\n        LOOP           = 128,\n        EXPR_VOID      = 129, // expression statement in functions\n        EXPR_RESULT    = 130, // expression statement in scripts\n        JSR            = 131,\n        SCRIPT         = 132, // top-level node for entire script\n        TYPEOFNAME     = 133, // for typeof(simple-name)\n        USE_STACK      = 134,\n        SETPROP_OP     = 135, // x.y op= something\n        SETELEM_OP     = 136, // x[y] op= something\n        LOCAL_BLOCK    = 137,\n        SET_REF_OP     = 138, // *reference op= something\n\n        // For XML support:\n        DOTDOT         = 139,  // member operator (..)\n        COLONCOLON     = 140,  // namespace::name\n        XML            = 141,  // XML type\n        DOTQUERY       = 142,  // .() -- e.g., x.emps.emp.(name == \"terry\")\n        XMLATTR        = 143,  // @\n        XMLEND         = 144,\n\n        // Optimizer-only-tokens\n        TO_OBJECT      = 145,\n        TO_DOUBLE      = 146,\n\n        GET            = 147,  // JS 1.5 get pseudo keyword\n        SET            = 148,  // JS 1.5 set pseudo keyword\n\n        CONST          = 149,  // JS 1.5 const keyword\n        SETCONST       = 150,\n        SETCONSTVAR    = 151,\n        DEBUGGER       = 152,\n        LAST_TOKEN     = 152,\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307;",
        "begin_line": 183,
        "end_line": 264,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.CASE",
        "snippet": "    public final static int\n        FIRST_ASSIGN   = ASSIGN,\n        LAST_ASSIGN    = ASSIGN_MOD,\n\n        HOOK           = 98, // conditional (?:)\n        COLON          = 99,\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment/decrement (++ --)\n        DEC            = 103,\n        DOT            = 104, // member operator (.)\n        FUNCTION       = 105, // function keyword\n        EXPORT         = 106, // export keyword\n        IMPORT         = 107, // import keyword\n        IF             = 108, // if keyword\n        ELSE           = 109, // else keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT        = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        FINALLY        = 121, // finally keyword\n        VOID           = 122, // void keyword\n        RESERVED       = 123, // reserved keywords\n\n        EMPTY          = 124,\n\n        /* types used for the parse tree - these never get returned\n         * by the scanner.\n         */\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        TARGET         = 127,\n        LOOP           = 128,\n        EXPR_VOID      = 129, // expression statement in functions\n        EXPR_RESULT    = 130, // expression statement in scripts\n        JSR            = 131,\n        SCRIPT         = 132, // top-level node for entire script\n        TYPEOFNAME     = 133, // for typeof(simple-name)\n        USE_STACK      = 134,\n        SETPROP_OP     = 135, // x.y op= something\n        SETELEM_OP     = 136, // x[y] op= something\n        LOCAL_BLOCK    = 137,\n        SET_REF_OP     = 138, // *reference op= something\n\n        // For XML support:\n        DOTDOT         = 139,  // member operator (..)\n        COLONCOLON     = 140,  // namespace::name\n        XML            = 141,  // XML type\n        DOTQUERY       = 142,  // .() -- e.g., x.emps.emp.(name == \"terry\")\n        XMLATTR        = 143,  // @\n        XMLEND         = 144,\n\n        // Optimizer-only-tokens\n        TO_OBJECT      = 145,\n        TO_DOUBLE      = 146,\n\n        GET            = 147,  // JS 1.5 get pseudo keyword\n        SET            = 148,  // JS 1.5 set pseudo keyword\n\n        CONST          = 149,  // JS 1.5 const keyword\n        SETCONST       = 150,\n        SETCONSTVAR    = 151,\n        DEBUGGER       = 152,\n        LAST_TOKEN     = 152,\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307;",
        "begin_line": 183,
        "end_line": 264,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.DEFAULT",
        "snippet": "    public final static int\n        FIRST_ASSIGN   = ASSIGN,\n        LAST_ASSIGN    = ASSIGN_MOD,\n\n        HOOK           = 98, // conditional (?:)\n        COLON          = 99,\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment/decrement (++ --)\n        DEC            = 103,\n        DOT            = 104, // member operator (.)\n        FUNCTION       = 105, // function keyword\n        EXPORT         = 106, // export keyword\n        IMPORT         = 107, // import keyword\n        IF             = 108, // if keyword\n        ELSE           = 109, // else keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT        = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        FINALLY        = 121, // finally keyword\n        VOID           = 122, // void keyword\n        RESERVED       = 123, // reserved keywords\n\n        EMPTY          = 124,\n\n        /* types used for the parse tree - these never get returned\n         * by the scanner.\n         */\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        TARGET         = 127,\n        LOOP           = 128,\n        EXPR_VOID      = 129, // expression statement in functions\n        EXPR_RESULT    = 130, // expression statement in scripts\n        JSR            = 131,\n        SCRIPT         = 132, // top-level node for entire script\n        TYPEOFNAME     = 133, // for typeof(simple-name)\n        USE_STACK      = 134,\n        SETPROP_OP     = 135, // x.y op= something\n        SETELEM_OP     = 136, // x[y] op= something\n        LOCAL_BLOCK    = 137,\n        SET_REF_OP     = 138, // *reference op= something\n\n        // For XML support:\n        DOTDOT         = 139,  // member operator (..)\n        COLONCOLON     = 140,  // namespace::name\n        XML            = 141,  // XML type\n        DOTQUERY       = 142,  // .() -- e.g., x.emps.emp.(name == \"terry\")\n        XMLATTR        = 143,  // @\n        XMLEND         = 144,\n\n        // Optimizer-only-tokens\n        TO_OBJECT      = 145,\n        TO_DOUBLE      = 146,\n\n        GET            = 147,  // JS 1.5 get pseudo keyword\n        SET            = 148,  // JS 1.5 set pseudo keyword\n\n        CONST          = 149,  // JS 1.5 const keyword\n        SETCONST       = 150,\n        SETCONSTVAR    = 151,\n        DEBUGGER       = 152,\n        LAST_TOKEN     = 152,\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307;",
        "begin_line": 183,
        "end_line": 264,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.WHILE",
        "snippet": "    public final static int\n        FIRST_ASSIGN   = ASSIGN,\n        LAST_ASSIGN    = ASSIGN_MOD,\n\n        HOOK           = 98, // conditional (?:)\n        COLON          = 99,\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment/decrement (++ --)\n        DEC            = 103,\n        DOT            = 104, // member operator (.)\n        FUNCTION       = 105, // function keyword\n        EXPORT         = 106, // export keyword\n        IMPORT         = 107, // import keyword\n        IF             = 108, // if keyword\n        ELSE           = 109, // else keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT        = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        FINALLY        = 121, // finally keyword\n        VOID           = 122, // void keyword\n        RESERVED       = 123, // reserved keywords\n\n        EMPTY          = 124,\n\n        /* types used for the parse tree - these never get returned\n         * by the scanner.\n         */\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        TARGET         = 127,\n        LOOP           = 128,\n        EXPR_VOID      = 129, // expression statement in functions\n        EXPR_RESULT    = 130, // expression statement in scripts\n        JSR            = 131,\n        SCRIPT         = 132, // top-level node for entire script\n        TYPEOFNAME     = 133, // for typeof(simple-name)\n        USE_STACK      = 134,\n        SETPROP_OP     = 135, // x.y op= something\n        SETELEM_OP     = 136, // x[y] op= something\n        LOCAL_BLOCK    = 137,\n        SET_REF_OP     = 138, // *reference op= something\n\n        // For XML support:\n        DOTDOT         = 139,  // member operator (..)\n        COLONCOLON     = 140,  // namespace::name\n        XML            = 141,  // XML type\n        DOTQUERY       = 142,  // .() -- e.g., x.emps.emp.(name == \"terry\")\n        XMLATTR        = 143,  // @\n        XMLEND         = 144,\n\n        // Optimizer-only-tokens\n        TO_OBJECT      = 145,\n        TO_DOUBLE      = 146,\n\n        GET            = 147,  // JS 1.5 get pseudo keyword\n        SET            = 148,  // JS 1.5 set pseudo keyword\n\n        CONST          = 149,  // JS 1.5 const keyword\n        SETCONST       = 150,\n        SETCONSTVAR    = 151,\n        DEBUGGER       = 152,\n        LAST_TOKEN     = 152,\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307;",
        "begin_line": 183,
        "end_line": 264,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.DO",
        "snippet": "    public final static int\n        FIRST_ASSIGN   = ASSIGN,\n        LAST_ASSIGN    = ASSIGN_MOD,\n\n        HOOK           = 98, // conditional (?:)\n        COLON          = 99,\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment/decrement (++ --)\n        DEC            = 103,\n        DOT            = 104, // member operator (.)\n        FUNCTION       = 105, // function keyword\n        EXPORT         = 106, // export keyword\n        IMPORT         = 107, // import keyword\n        IF             = 108, // if keyword\n        ELSE           = 109, // else keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT        = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        FINALLY        = 121, // finally keyword\n        VOID           = 122, // void keyword\n        RESERVED       = 123, // reserved keywords\n\n        EMPTY          = 124,\n\n        /* types used for the parse tree - these never get returned\n         * by the scanner.\n         */\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        TARGET         = 127,\n        LOOP           = 128,\n        EXPR_VOID      = 129, // expression statement in functions\n        EXPR_RESULT    = 130, // expression statement in scripts\n        JSR            = 131,\n        SCRIPT         = 132, // top-level node for entire script\n        TYPEOFNAME     = 133, // for typeof(simple-name)\n        USE_STACK      = 134,\n        SETPROP_OP     = 135, // x.y op= something\n        SETELEM_OP     = 136, // x[y] op= something\n        LOCAL_BLOCK    = 137,\n        SET_REF_OP     = 138, // *reference op= something\n\n        // For XML support:\n        DOTDOT         = 139,  // member operator (..)\n        COLONCOLON     = 140,  // namespace::name\n        XML            = 141,  // XML type\n        DOTQUERY       = 142,  // .() -- e.g., x.emps.emp.(name == \"terry\")\n        XMLATTR        = 143,  // @\n        XMLEND         = 144,\n\n        // Optimizer-only-tokens\n        TO_OBJECT      = 145,\n        TO_DOUBLE      = 146,\n\n        GET            = 147,  // JS 1.5 get pseudo keyword\n        SET            = 148,  // JS 1.5 set pseudo keyword\n\n        CONST          = 149,  // JS 1.5 const keyword\n        SETCONST       = 150,\n        SETCONSTVAR    = 151,\n        DEBUGGER       = 152,\n        LAST_TOKEN     = 152,\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307;",
        "begin_line": 183,
        "end_line": 264,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.FOR",
        "snippet": "    public final static int\n        FIRST_ASSIGN   = ASSIGN,\n        LAST_ASSIGN    = ASSIGN_MOD,\n\n        HOOK           = 98, // conditional (?:)\n        COLON          = 99,\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment/decrement (++ --)\n        DEC            = 103,\n        DOT            = 104, // member operator (.)\n        FUNCTION       = 105, // function keyword\n        EXPORT         = 106, // export keyword\n        IMPORT         = 107, // import keyword\n        IF             = 108, // if keyword\n        ELSE           = 109, // else keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT        = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        FINALLY        = 121, // finally keyword\n        VOID           = 122, // void keyword\n        RESERVED       = 123, // reserved keywords\n\n        EMPTY          = 124,\n\n        /* types used for the parse tree - these never get returned\n         * by the scanner.\n         */\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        TARGET         = 127,\n        LOOP           = 128,\n        EXPR_VOID      = 129, // expression statement in functions\n        EXPR_RESULT    = 130, // expression statement in scripts\n        JSR            = 131,\n        SCRIPT         = 132, // top-level node for entire script\n        TYPEOFNAME     = 133, // for typeof(simple-name)\n        USE_STACK      = 134,\n        SETPROP_OP     = 135, // x.y op= something\n        SETELEM_OP     = 136, // x[y] op= something\n        LOCAL_BLOCK    = 137,\n        SET_REF_OP     = 138, // *reference op= something\n\n        // For XML support:\n        DOTDOT         = 139,  // member operator (..)\n        COLONCOLON     = 140,  // namespace::name\n        XML            = 141,  // XML type\n        DOTQUERY       = 142,  // .() -- e.g., x.emps.emp.(name == \"terry\")\n        XMLATTR        = 143,  // @\n        XMLEND         = 144,\n\n        // Optimizer-only-tokens\n        TO_OBJECT      = 145,\n        TO_DOUBLE      = 146,\n\n        GET            = 147,  // JS 1.5 get pseudo keyword\n        SET            = 148,  // JS 1.5 set pseudo keyword\n\n        CONST          = 149,  // JS 1.5 const keyword\n        SETCONST       = 150,\n        SETCONSTVAR    = 151,\n        DEBUGGER       = 152,\n        LAST_TOKEN     = 152,\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307;",
        "begin_line": 183,
        "end_line": 264,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.BREAK",
        "snippet": "    public final static int\n        FIRST_ASSIGN   = ASSIGN,\n        LAST_ASSIGN    = ASSIGN_MOD,\n\n        HOOK           = 98, // conditional (?:)\n        COLON          = 99,\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment/decrement (++ --)\n        DEC            = 103,\n        DOT            = 104, // member operator (.)\n        FUNCTION       = 105, // function keyword\n        EXPORT         = 106, // export keyword\n        IMPORT         = 107, // import keyword\n        IF             = 108, // if keyword\n        ELSE           = 109, // else keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT        = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        FINALLY        = 121, // finally keyword\n        VOID           = 122, // void keyword\n        RESERVED       = 123, // reserved keywords\n\n        EMPTY          = 124,\n\n        /* types used for the parse tree - these never get returned\n         * by the scanner.\n         */\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        TARGET         = 127,\n        LOOP           = 128,\n        EXPR_VOID      = 129, // expression statement in functions\n        EXPR_RESULT    = 130, // expression statement in scripts\n        JSR            = 131,\n        SCRIPT         = 132, // top-level node for entire script\n        TYPEOFNAME     = 133, // for typeof(simple-name)\n        USE_STACK      = 134,\n        SETPROP_OP     = 135, // x.y op= something\n        SETELEM_OP     = 136, // x[y] op= something\n        LOCAL_BLOCK    = 137,\n        SET_REF_OP     = 138, // *reference op= something\n\n        // For XML support:\n        DOTDOT         = 139,  // member operator (..)\n        COLONCOLON     = 140,  // namespace::name\n        XML            = 141,  // XML type\n        DOTQUERY       = 142,  // .() -- e.g., x.emps.emp.(name == \"terry\")\n        XMLATTR        = 143,  // @\n        XMLEND         = 144,\n\n        // Optimizer-only-tokens\n        TO_OBJECT      = 145,\n        TO_DOUBLE      = 146,\n\n        GET            = 147,  // JS 1.5 get pseudo keyword\n        SET            = 148,  // JS 1.5 set pseudo keyword\n\n        CONST          = 149,  // JS 1.5 const keyword\n        SETCONST       = 150,\n        SETCONSTVAR    = 151,\n        DEBUGGER       = 152,\n        LAST_TOKEN     = 152,\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307;",
        "begin_line": 183,
        "end_line": 264,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.CONTINUE",
        "snippet": "    public final static int\n        FIRST_ASSIGN   = ASSIGN,\n        LAST_ASSIGN    = ASSIGN_MOD,\n\n        HOOK           = 98, // conditional (?:)\n        COLON          = 99,\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment/decrement (++ --)\n        DEC            = 103,\n        DOT            = 104, // member operator (.)\n        FUNCTION       = 105, // function keyword\n        EXPORT         = 106, // export keyword\n        IMPORT         = 107, // import keyword\n        IF             = 108, // if keyword\n        ELSE           = 109, // else keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT        = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        FINALLY        = 121, // finally keyword\n        VOID           = 122, // void keyword\n        RESERVED       = 123, // reserved keywords\n\n        EMPTY          = 124,\n\n        /* types used for the parse tree - these never get returned\n         * by the scanner.\n         */\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        TARGET         = 127,\n        LOOP           = 128,\n        EXPR_VOID      = 129, // expression statement in functions\n        EXPR_RESULT    = 130, // expression statement in scripts\n        JSR            = 131,\n        SCRIPT         = 132, // top-level node for entire script\n        TYPEOFNAME     = 133, // for typeof(simple-name)\n        USE_STACK      = 134,\n        SETPROP_OP     = 135, // x.y op= something\n        SETELEM_OP     = 136, // x[y] op= something\n        LOCAL_BLOCK    = 137,\n        SET_REF_OP     = 138, // *reference op= something\n\n        // For XML support:\n        DOTDOT         = 139,  // member operator (..)\n        COLONCOLON     = 140,  // namespace::name\n        XML            = 141,  // XML type\n        DOTQUERY       = 142,  // .() -- e.g., x.emps.emp.(name == \"terry\")\n        XMLATTR        = 143,  // @\n        XMLEND         = 144,\n\n        // Optimizer-only-tokens\n        TO_OBJECT      = 145,\n        TO_DOUBLE      = 146,\n\n        GET            = 147,  // JS 1.5 get pseudo keyword\n        SET            = 148,  // JS 1.5 set pseudo keyword\n\n        CONST          = 149,  // JS 1.5 const keyword\n        SETCONST       = 150,\n        SETCONSTVAR    = 151,\n        DEBUGGER       = 152,\n        LAST_TOKEN     = 152,\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307;",
        "begin_line": 183,
        "end_line": 264,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.VAR",
        "snippet": "    public final static int\n        FIRST_ASSIGN   = ASSIGN,\n        LAST_ASSIGN    = ASSIGN_MOD,\n\n        HOOK           = 98, // conditional (?:)\n        COLON          = 99,\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment/decrement (++ --)\n        DEC            = 103,\n        DOT            = 104, // member operator (.)\n        FUNCTION       = 105, // function keyword\n        EXPORT         = 106, // export keyword\n        IMPORT         = 107, // import keyword\n        IF             = 108, // if keyword\n        ELSE           = 109, // else keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT        = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        FINALLY        = 121, // finally keyword\n        VOID           = 122, // void keyword\n        RESERVED       = 123, // reserved keywords\n\n        EMPTY          = 124,\n\n        /* types used for the parse tree - these never get returned\n         * by the scanner.\n         */\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        TARGET         = 127,\n        LOOP           = 128,\n        EXPR_VOID      = 129, // expression statement in functions\n        EXPR_RESULT    = 130, // expression statement in scripts\n        JSR            = 131,\n        SCRIPT         = 132, // top-level node for entire script\n        TYPEOFNAME     = 133, // for typeof(simple-name)\n        USE_STACK      = 134,\n        SETPROP_OP     = 135, // x.y op= something\n        SETELEM_OP     = 136, // x[y] op= something\n        LOCAL_BLOCK    = 137,\n        SET_REF_OP     = 138, // *reference op= something\n\n        // For XML support:\n        DOTDOT         = 139,  // member operator (..)\n        COLONCOLON     = 140,  // namespace::name\n        XML            = 141,  // XML type\n        DOTQUERY       = 142,  // .() -- e.g., x.emps.emp.(name == \"terry\")\n        XMLATTR        = 143,  // @\n        XMLEND         = 144,\n\n        // Optimizer-only-tokens\n        TO_OBJECT      = 145,\n        TO_DOUBLE      = 146,\n\n        GET            = 147,  // JS 1.5 get pseudo keyword\n        SET            = 148,  // JS 1.5 set pseudo keyword\n\n        CONST          = 149,  // JS 1.5 const keyword\n        SETCONST       = 150,\n        SETCONSTVAR    = 151,\n        DEBUGGER       = 152,\n        LAST_TOKEN     = 152,\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307;",
        "begin_line": 183,
        "end_line": 264,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.WITH",
        "snippet": "    public final static int\n        FIRST_ASSIGN   = ASSIGN,\n        LAST_ASSIGN    = ASSIGN_MOD,\n\n        HOOK           = 98, // conditional (?:)\n        COLON          = 99,\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment/decrement (++ --)\n        DEC            = 103,\n        DOT            = 104, // member operator (.)\n        FUNCTION       = 105, // function keyword\n        EXPORT         = 106, // export keyword\n        IMPORT         = 107, // import keyword\n        IF             = 108, // if keyword\n        ELSE           = 109, // else keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT        = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        FINALLY        = 121, // finally keyword\n        VOID           = 122, // void keyword\n        RESERVED       = 123, // reserved keywords\n\n        EMPTY          = 124,\n\n        /* types used for the parse tree - these never get returned\n         * by the scanner.\n         */\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        TARGET         = 127,\n        LOOP           = 128,\n        EXPR_VOID      = 129, // expression statement in functions\n        EXPR_RESULT    = 130, // expression statement in scripts\n        JSR            = 131,\n        SCRIPT         = 132, // top-level node for entire script\n        TYPEOFNAME     = 133, // for typeof(simple-name)\n        USE_STACK      = 134,\n        SETPROP_OP     = 135, // x.y op= something\n        SETELEM_OP     = 136, // x[y] op= something\n        LOCAL_BLOCK    = 137,\n        SET_REF_OP     = 138, // *reference op= something\n\n        // For XML support:\n        DOTDOT         = 139,  // member operator (..)\n        COLONCOLON     = 140,  // namespace::name\n        XML            = 141,  // XML type\n        DOTQUERY       = 142,  // .() -- e.g., x.emps.emp.(name == \"terry\")\n        XMLATTR        = 143,  // @\n        XMLEND         = 144,\n\n        // Optimizer-only-tokens\n        TO_OBJECT      = 145,\n        TO_DOUBLE      = 146,\n\n        GET            = 147,  // JS 1.5 get pseudo keyword\n        SET            = 148,  // JS 1.5 set pseudo keyword\n\n        CONST          = 149,  // JS 1.5 const keyword\n        SETCONST       = 150,\n        SETCONSTVAR    = 151,\n        DEBUGGER       = 152,\n        LAST_TOKEN     = 152,\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307;",
        "begin_line": 183,
        "end_line": 264,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.CATCH",
        "snippet": "    public final static int\n        FIRST_ASSIGN   = ASSIGN,\n        LAST_ASSIGN    = ASSIGN_MOD,\n\n        HOOK           = 98, // conditional (?:)\n        COLON          = 99,\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment/decrement (++ --)\n        DEC            = 103,\n        DOT            = 104, // member operator (.)\n        FUNCTION       = 105, // function keyword\n        EXPORT         = 106, // export keyword\n        IMPORT         = 107, // import keyword\n        IF             = 108, // if keyword\n        ELSE           = 109, // else keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT        = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        FINALLY        = 121, // finally keyword\n        VOID           = 122, // void keyword\n        RESERVED       = 123, // reserved keywords\n\n        EMPTY          = 124,\n\n        /* types used for the parse tree - these never get returned\n         * by the scanner.\n         */\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        TARGET         = 127,\n        LOOP           = 128,\n        EXPR_VOID      = 129, // expression statement in functions\n        EXPR_RESULT    = 130, // expression statement in scripts\n        JSR            = 131,\n        SCRIPT         = 132, // top-level node for entire script\n        TYPEOFNAME     = 133, // for typeof(simple-name)\n        USE_STACK      = 134,\n        SETPROP_OP     = 135, // x.y op= something\n        SETELEM_OP     = 136, // x[y] op= something\n        LOCAL_BLOCK    = 137,\n        SET_REF_OP     = 138, // *reference op= something\n\n        // For XML support:\n        DOTDOT         = 139,  // member operator (..)\n        COLONCOLON     = 140,  // namespace::name\n        XML            = 141,  // XML type\n        DOTQUERY       = 142,  // .() -- e.g., x.emps.emp.(name == \"terry\")\n        XMLATTR        = 143,  // @\n        XMLEND         = 144,\n\n        // Optimizer-only-tokens\n        TO_OBJECT      = 145,\n        TO_DOUBLE      = 146,\n\n        GET            = 147,  // JS 1.5 get pseudo keyword\n        SET            = 148,  // JS 1.5 set pseudo keyword\n\n        CONST          = 149,  // JS 1.5 const keyword\n        SETCONST       = 150,\n        SETCONSTVAR    = 151,\n        DEBUGGER       = 152,\n        LAST_TOKEN     = 152,\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307;",
        "begin_line": 183,
        "end_line": 264,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.FINALLY",
        "snippet": "    public final static int\n        FIRST_ASSIGN   = ASSIGN,\n        LAST_ASSIGN    = ASSIGN_MOD,\n\n        HOOK           = 98, // conditional (?:)\n        COLON          = 99,\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment/decrement (++ --)\n        DEC            = 103,\n        DOT            = 104, // member operator (.)\n        FUNCTION       = 105, // function keyword\n        EXPORT         = 106, // export keyword\n        IMPORT         = 107, // import keyword\n        IF             = 108, // if keyword\n        ELSE           = 109, // else keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT        = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        FINALLY        = 121, // finally keyword\n        VOID           = 122, // void keyword\n        RESERVED       = 123, // reserved keywords\n\n        EMPTY          = 124,\n\n        /* types used for the parse tree - these never get returned\n         * by the scanner.\n         */\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        TARGET         = 127,\n        LOOP           = 128,\n        EXPR_VOID      = 129, // expression statement in functions\n        EXPR_RESULT    = 130, // expression statement in scripts\n        JSR            = 131,\n        SCRIPT         = 132, // top-level node for entire script\n        TYPEOFNAME     = 133, // for typeof(simple-name)\n        USE_STACK      = 134,\n        SETPROP_OP     = 135, // x.y op= something\n        SETELEM_OP     = 136, // x[y] op= something\n        LOCAL_BLOCK    = 137,\n        SET_REF_OP     = 138, // *reference op= something\n\n        // For XML support:\n        DOTDOT         = 139,  // member operator (..)\n        COLONCOLON     = 140,  // namespace::name\n        XML            = 141,  // XML type\n        DOTQUERY       = 142,  // .() -- e.g., x.emps.emp.(name == \"terry\")\n        XMLATTR        = 143,  // @\n        XMLEND         = 144,\n\n        // Optimizer-only-tokens\n        TO_OBJECT      = 145,\n        TO_DOUBLE      = 146,\n\n        GET            = 147,  // JS 1.5 get pseudo keyword\n        SET            = 148,  // JS 1.5 set pseudo keyword\n\n        CONST          = 149,  // JS 1.5 const keyword\n        SETCONST       = 150,\n        SETCONSTVAR    = 151,\n        DEBUGGER       = 152,\n        LAST_TOKEN     = 152,\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307;",
        "begin_line": 183,
        "end_line": 264,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.VOID",
        "snippet": "    public final static int\n        FIRST_ASSIGN   = ASSIGN,\n        LAST_ASSIGN    = ASSIGN_MOD,\n\n        HOOK           = 98, // conditional (?:)\n        COLON          = 99,\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment/decrement (++ --)\n        DEC            = 103,\n        DOT            = 104, // member operator (.)\n        FUNCTION       = 105, // function keyword\n        EXPORT         = 106, // export keyword\n        IMPORT         = 107, // import keyword\n        IF             = 108, // if keyword\n        ELSE           = 109, // else keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT        = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        FINALLY        = 121, // finally keyword\n        VOID           = 122, // void keyword\n        RESERVED       = 123, // reserved keywords\n\n        EMPTY          = 124,\n\n        /* types used for the parse tree - these never get returned\n         * by the scanner.\n         */\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        TARGET         = 127,\n        LOOP           = 128,\n        EXPR_VOID      = 129, // expression statement in functions\n        EXPR_RESULT    = 130, // expression statement in scripts\n        JSR            = 131,\n        SCRIPT         = 132, // top-level node for entire script\n        TYPEOFNAME     = 133, // for typeof(simple-name)\n        USE_STACK      = 134,\n        SETPROP_OP     = 135, // x.y op= something\n        SETELEM_OP     = 136, // x[y] op= something\n        LOCAL_BLOCK    = 137,\n        SET_REF_OP     = 138, // *reference op= something\n\n        // For XML support:\n        DOTDOT         = 139,  // member operator (..)\n        COLONCOLON     = 140,  // namespace::name\n        XML            = 141,  // XML type\n        DOTQUERY       = 142,  // .() -- e.g., x.emps.emp.(name == \"terry\")\n        XMLATTR        = 143,  // @\n        XMLEND         = 144,\n\n        // Optimizer-only-tokens\n        TO_OBJECT      = 145,\n        TO_DOUBLE      = 146,\n\n        GET            = 147,  // JS 1.5 get pseudo keyword\n        SET            = 148,  // JS 1.5 set pseudo keyword\n\n        CONST          = 149,  // JS 1.5 const keyword\n        SETCONST       = 150,\n        SETCONSTVAR    = 151,\n        DEBUGGER       = 152,\n        LAST_TOKEN     = 152,\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307;",
        "begin_line": 183,
        "end_line": 264,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.RESERVED",
        "snippet": "    public final static int\n        FIRST_ASSIGN   = ASSIGN,\n        LAST_ASSIGN    = ASSIGN_MOD,\n\n        HOOK           = 98, // conditional (?:)\n        COLON          = 99,\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment/decrement (++ --)\n        DEC            = 103,\n        DOT            = 104, // member operator (.)\n        FUNCTION       = 105, // function keyword\n        EXPORT         = 106, // export keyword\n        IMPORT         = 107, // import keyword\n        IF             = 108, // if keyword\n        ELSE           = 109, // else keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT        = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        FINALLY        = 121, // finally keyword\n        VOID           = 122, // void keyword\n        RESERVED       = 123, // reserved keywords\n\n        EMPTY          = 124,\n\n        /* types used for the parse tree - these never get returned\n         * by the scanner.\n         */\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        TARGET         = 127,\n        LOOP           = 128,\n        EXPR_VOID      = 129, // expression statement in functions\n        EXPR_RESULT    = 130, // expression statement in scripts\n        JSR            = 131,\n        SCRIPT         = 132, // top-level node for entire script\n        TYPEOFNAME     = 133, // for typeof(simple-name)\n        USE_STACK      = 134,\n        SETPROP_OP     = 135, // x.y op= something\n        SETELEM_OP     = 136, // x[y] op= something\n        LOCAL_BLOCK    = 137,\n        SET_REF_OP     = 138, // *reference op= something\n\n        // For XML support:\n        DOTDOT         = 139,  // member operator (..)\n        COLONCOLON     = 140,  // namespace::name\n        XML            = 141,  // XML type\n        DOTQUERY       = 142,  // .() -- e.g., x.emps.emp.(name == \"terry\")\n        XMLATTR        = 143,  // @\n        XMLEND         = 144,\n\n        // Optimizer-only-tokens\n        TO_OBJECT      = 145,\n        TO_DOUBLE      = 146,\n\n        GET            = 147,  // JS 1.5 get pseudo keyword\n        SET            = 148,  // JS 1.5 set pseudo keyword\n\n        CONST          = 149,  // JS 1.5 const keyword\n        SETCONST       = 150,\n        SETCONSTVAR    = 151,\n        DEBUGGER       = 152,\n        LAST_TOKEN     = 152,\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307;",
        "begin_line": 183,
        "end_line": 264,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.EMPTY",
        "snippet": "    public final static int\n        FIRST_ASSIGN   = ASSIGN,\n        LAST_ASSIGN    = ASSIGN_MOD,\n\n        HOOK           = 98, // conditional (?:)\n        COLON          = 99,\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment/decrement (++ --)\n        DEC            = 103,\n        DOT            = 104, // member operator (.)\n        FUNCTION       = 105, // function keyword\n        EXPORT         = 106, // export keyword\n        IMPORT         = 107, // import keyword\n        IF             = 108, // if keyword\n        ELSE           = 109, // else keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT        = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        FINALLY        = 121, // finally keyword\n        VOID           = 122, // void keyword\n        RESERVED       = 123, // reserved keywords\n\n        EMPTY          = 124,\n\n        /* types used for the parse tree - these never get returned\n         * by the scanner.\n         */\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        TARGET         = 127,\n        LOOP           = 128,\n        EXPR_VOID      = 129, // expression statement in functions\n        EXPR_RESULT    = 130, // expression statement in scripts\n        JSR            = 131,\n        SCRIPT         = 132, // top-level node for entire script\n        TYPEOFNAME     = 133, // for typeof(simple-name)\n        USE_STACK      = 134,\n        SETPROP_OP     = 135, // x.y op= something\n        SETELEM_OP     = 136, // x[y] op= something\n        LOCAL_BLOCK    = 137,\n        SET_REF_OP     = 138, // *reference op= something\n\n        // For XML support:\n        DOTDOT         = 139,  // member operator (..)\n        COLONCOLON     = 140,  // namespace::name\n        XML            = 141,  // XML type\n        DOTQUERY       = 142,  // .() -- e.g., x.emps.emp.(name == \"terry\")\n        XMLATTR        = 143,  // @\n        XMLEND         = 144,\n\n        // Optimizer-only-tokens\n        TO_OBJECT      = 145,\n        TO_DOUBLE      = 146,\n\n        GET            = 147,  // JS 1.5 get pseudo keyword\n        SET            = 148,  // JS 1.5 set pseudo keyword\n\n        CONST          = 149,  // JS 1.5 const keyword\n        SETCONST       = 150,\n        SETCONSTVAR    = 151,\n        DEBUGGER       = 152,\n        LAST_TOKEN     = 152,\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307;",
        "begin_line": 183,
        "end_line": 264,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.BLOCK",
        "snippet": "    public final static int\n        FIRST_ASSIGN   = ASSIGN,\n        LAST_ASSIGN    = ASSIGN_MOD,\n\n        HOOK           = 98, // conditional (?:)\n        COLON          = 99,\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment/decrement (++ --)\n        DEC            = 103,\n        DOT            = 104, // member operator (.)\n        FUNCTION       = 105, // function keyword\n        EXPORT         = 106, // export keyword\n        IMPORT         = 107, // import keyword\n        IF             = 108, // if keyword\n        ELSE           = 109, // else keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT        = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        FINALLY        = 121, // finally keyword\n        VOID           = 122, // void keyword\n        RESERVED       = 123, // reserved keywords\n\n        EMPTY          = 124,\n\n        /* types used for the parse tree - these never get returned\n         * by the scanner.\n         */\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        TARGET         = 127,\n        LOOP           = 128,\n        EXPR_VOID      = 129, // expression statement in functions\n        EXPR_RESULT    = 130, // expression statement in scripts\n        JSR            = 131,\n        SCRIPT         = 132, // top-level node for entire script\n        TYPEOFNAME     = 133, // for typeof(simple-name)\n        USE_STACK      = 134,\n        SETPROP_OP     = 135, // x.y op= something\n        SETELEM_OP     = 136, // x[y] op= something\n        LOCAL_BLOCK    = 137,\n        SET_REF_OP     = 138, // *reference op= something\n\n        // For XML support:\n        DOTDOT         = 139,  // member operator (..)\n        COLONCOLON     = 140,  // namespace::name\n        XML            = 141,  // XML type\n        DOTQUERY       = 142,  // .() -- e.g., x.emps.emp.(name == \"terry\")\n        XMLATTR        = 143,  // @\n        XMLEND         = 144,\n\n        // Optimizer-only-tokens\n        TO_OBJECT      = 145,\n        TO_DOUBLE      = 146,\n\n        GET            = 147,  // JS 1.5 get pseudo keyword\n        SET            = 148,  // JS 1.5 set pseudo keyword\n\n        CONST          = 149,  // JS 1.5 const keyword\n        SETCONST       = 150,\n        SETCONSTVAR    = 151,\n        DEBUGGER       = 152,\n        LAST_TOKEN     = 152,\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307;",
        "begin_line": 183,
        "end_line": 264,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.LABEL",
        "snippet": "    public final static int\n        FIRST_ASSIGN   = ASSIGN,\n        LAST_ASSIGN    = ASSIGN_MOD,\n\n        HOOK           = 98, // conditional (?:)\n        COLON          = 99,\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment/decrement (++ --)\n        DEC            = 103,\n        DOT            = 104, // member operator (.)\n        FUNCTION       = 105, // function keyword\n        EXPORT         = 106, // export keyword\n        IMPORT         = 107, // import keyword\n        IF             = 108, // if keyword\n        ELSE           = 109, // else keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT        = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        FINALLY        = 121, // finally keyword\n        VOID           = 122, // void keyword\n        RESERVED       = 123, // reserved keywords\n\n        EMPTY          = 124,\n\n        /* types used for the parse tree - these never get returned\n         * by the scanner.\n         */\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        TARGET         = 127,\n        LOOP           = 128,\n        EXPR_VOID      = 129, // expression statement in functions\n        EXPR_RESULT    = 130, // expression statement in scripts\n        JSR            = 131,\n        SCRIPT         = 132, // top-level node for entire script\n        TYPEOFNAME     = 133, // for typeof(simple-name)\n        USE_STACK      = 134,\n        SETPROP_OP     = 135, // x.y op= something\n        SETELEM_OP     = 136, // x[y] op= something\n        LOCAL_BLOCK    = 137,\n        SET_REF_OP     = 138, // *reference op= something\n\n        // For XML support:\n        DOTDOT         = 139,  // member operator (..)\n        COLONCOLON     = 140,  // namespace::name\n        XML            = 141,  // XML type\n        DOTQUERY       = 142,  // .() -- e.g., x.emps.emp.(name == \"terry\")\n        XMLATTR        = 143,  // @\n        XMLEND         = 144,\n\n        // Optimizer-only-tokens\n        TO_OBJECT      = 145,\n        TO_DOUBLE      = 146,\n\n        GET            = 147,  // JS 1.5 get pseudo keyword\n        SET            = 148,  // JS 1.5 set pseudo keyword\n\n        CONST          = 149,  // JS 1.5 const keyword\n        SETCONST       = 150,\n        SETCONSTVAR    = 151,\n        DEBUGGER       = 152,\n        LAST_TOKEN     = 152,\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307;",
        "begin_line": 183,
        "end_line": 264,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.TARGET",
        "snippet": "    public final static int\n        FIRST_ASSIGN   = ASSIGN,\n        LAST_ASSIGN    = ASSIGN_MOD,\n\n        HOOK           = 98, // conditional (?:)\n        COLON          = 99,\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment/decrement (++ --)\n        DEC            = 103,\n        DOT            = 104, // member operator (.)\n        FUNCTION       = 105, // function keyword\n        EXPORT         = 106, // export keyword\n        IMPORT         = 107, // import keyword\n        IF             = 108, // if keyword\n        ELSE           = 109, // else keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT        = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        FINALLY        = 121, // finally keyword\n        VOID           = 122, // void keyword\n        RESERVED       = 123, // reserved keywords\n\n        EMPTY          = 124,\n\n        /* types used for the parse tree - these never get returned\n         * by the scanner.\n         */\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        TARGET         = 127,\n        LOOP           = 128,\n        EXPR_VOID      = 129, // expression statement in functions\n        EXPR_RESULT    = 130, // expression statement in scripts\n        JSR            = 131,\n        SCRIPT         = 132, // top-level node for entire script\n        TYPEOFNAME     = 133, // for typeof(simple-name)\n        USE_STACK      = 134,\n        SETPROP_OP     = 135, // x.y op= something\n        SETELEM_OP     = 136, // x[y] op= something\n        LOCAL_BLOCK    = 137,\n        SET_REF_OP     = 138, // *reference op= something\n\n        // For XML support:\n        DOTDOT         = 139,  // member operator (..)\n        COLONCOLON     = 140,  // namespace::name\n        XML            = 141,  // XML type\n        DOTQUERY       = 142,  // .() -- e.g., x.emps.emp.(name == \"terry\")\n        XMLATTR        = 143,  // @\n        XMLEND         = 144,\n\n        // Optimizer-only-tokens\n        TO_OBJECT      = 145,\n        TO_DOUBLE      = 146,\n\n        GET            = 147,  // JS 1.5 get pseudo keyword\n        SET            = 148,  // JS 1.5 set pseudo keyword\n\n        CONST          = 149,  // JS 1.5 const keyword\n        SETCONST       = 150,\n        SETCONSTVAR    = 151,\n        DEBUGGER       = 152,\n        LAST_TOKEN     = 152,\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307;",
        "begin_line": 183,
        "end_line": 264,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.LOOP",
        "snippet": "    public final static int\n        FIRST_ASSIGN   = ASSIGN,\n        LAST_ASSIGN    = ASSIGN_MOD,\n\n        HOOK           = 98, // conditional (?:)\n        COLON          = 99,\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment/decrement (++ --)\n        DEC            = 103,\n        DOT            = 104, // member operator (.)\n        FUNCTION       = 105, // function keyword\n        EXPORT         = 106, // export keyword\n        IMPORT         = 107, // import keyword\n        IF             = 108, // if keyword\n        ELSE           = 109, // else keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT        = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        FINALLY        = 121, // finally keyword\n        VOID           = 122, // void keyword\n        RESERVED       = 123, // reserved keywords\n\n        EMPTY          = 124,\n\n        /* types used for the parse tree - these never get returned\n         * by the scanner.\n         */\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        TARGET         = 127,\n        LOOP           = 128,\n        EXPR_VOID      = 129, // expression statement in functions\n        EXPR_RESULT    = 130, // expression statement in scripts\n        JSR            = 131,\n        SCRIPT         = 132, // top-level node for entire script\n        TYPEOFNAME     = 133, // for typeof(simple-name)\n        USE_STACK      = 134,\n        SETPROP_OP     = 135, // x.y op= something\n        SETELEM_OP     = 136, // x[y] op= something\n        LOCAL_BLOCK    = 137,\n        SET_REF_OP     = 138, // *reference op= something\n\n        // For XML support:\n        DOTDOT         = 139,  // member operator (..)\n        COLONCOLON     = 140,  // namespace::name\n        XML            = 141,  // XML type\n        DOTQUERY       = 142,  // .() -- e.g., x.emps.emp.(name == \"terry\")\n        XMLATTR        = 143,  // @\n        XMLEND         = 144,\n\n        // Optimizer-only-tokens\n        TO_OBJECT      = 145,\n        TO_DOUBLE      = 146,\n\n        GET            = 147,  // JS 1.5 get pseudo keyword\n        SET            = 148,  // JS 1.5 set pseudo keyword\n\n        CONST          = 149,  // JS 1.5 const keyword\n        SETCONST       = 150,\n        SETCONSTVAR    = 151,\n        DEBUGGER       = 152,\n        LAST_TOKEN     = 152,\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307;",
        "begin_line": 183,
        "end_line": 264,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.EXPR_VOID",
        "snippet": "    public final static int\n        FIRST_ASSIGN   = ASSIGN,\n        LAST_ASSIGN    = ASSIGN_MOD,\n\n        HOOK           = 98, // conditional (?:)\n        COLON          = 99,\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment/decrement (++ --)\n        DEC            = 103,\n        DOT            = 104, // member operator (.)\n        FUNCTION       = 105, // function keyword\n        EXPORT         = 106, // export keyword\n        IMPORT         = 107, // import keyword\n        IF             = 108, // if keyword\n        ELSE           = 109, // else keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT        = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        FINALLY        = 121, // finally keyword\n        VOID           = 122, // void keyword\n        RESERVED       = 123, // reserved keywords\n\n        EMPTY          = 124,\n\n        /* types used for the parse tree - these never get returned\n         * by the scanner.\n         */\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        TARGET         = 127,\n        LOOP           = 128,\n        EXPR_VOID      = 129, // expression statement in functions\n        EXPR_RESULT    = 130, // expression statement in scripts\n        JSR            = 131,\n        SCRIPT         = 132, // top-level node for entire script\n        TYPEOFNAME     = 133, // for typeof(simple-name)\n        USE_STACK      = 134,\n        SETPROP_OP     = 135, // x.y op= something\n        SETELEM_OP     = 136, // x[y] op= something\n        LOCAL_BLOCK    = 137,\n        SET_REF_OP     = 138, // *reference op= something\n\n        // For XML support:\n        DOTDOT         = 139,  // member operator (..)\n        COLONCOLON     = 140,  // namespace::name\n        XML            = 141,  // XML type\n        DOTQUERY       = 142,  // .() -- e.g., x.emps.emp.(name == \"terry\")\n        XMLATTR        = 143,  // @\n        XMLEND         = 144,\n\n        // Optimizer-only-tokens\n        TO_OBJECT      = 145,\n        TO_DOUBLE      = 146,\n\n        GET            = 147,  // JS 1.5 get pseudo keyword\n        SET            = 148,  // JS 1.5 set pseudo keyword\n\n        CONST          = 149,  // JS 1.5 const keyword\n        SETCONST       = 150,\n        SETCONSTVAR    = 151,\n        DEBUGGER       = 152,\n        LAST_TOKEN     = 152,\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307;",
        "begin_line": 183,
        "end_line": 264,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.EXPR_RESULT",
        "snippet": "    public final static int\n        FIRST_ASSIGN   = ASSIGN,\n        LAST_ASSIGN    = ASSIGN_MOD,\n\n        HOOK           = 98, // conditional (?:)\n        COLON          = 99,\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment/decrement (++ --)\n        DEC            = 103,\n        DOT            = 104, // member operator (.)\n        FUNCTION       = 105, // function keyword\n        EXPORT         = 106, // export keyword\n        IMPORT         = 107, // import keyword\n        IF             = 108, // if keyword\n        ELSE           = 109, // else keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT        = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        FINALLY        = 121, // finally keyword\n        VOID           = 122, // void keyword\n        RESERVED       = 123, // reserved keywords\n\n        EMPTY          = 124,\n\n        /* types used for the parse tree - these never get returned\n         * by the scanner.\n         */\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        TARGET         = 127,\n        LOOP           = 128,\n        EXPR_VOID      = 129, // expression statement in functions\n        EXPR_RESULT    = 130, // expression statement in scripts\n        JSR            = 131,\n        SCRIPT         = 132, // top-level node for entire script\n        TYPEOFNAME     = 133, // for typeof(simple-name)\n        USE_STACK      = 134,\n        SETPROP_OP     = 135, // x.y op= something\n        SETELEM_OP     = 136, // x[y] op= something\n        LOCAL_BLOCK    = 137,\n        SET_REF_OP     = 138, // *reference op= something\n\n        // For XML support:\n        DOTDOT         = 139,  // member operator (..)\n        COLONCOLON     = 140,  // namespace::name\n        XML            = 141,  // XML type\n        DOTQUERY       = 142,  // .() -- e.g., x.emps.emp.(name == \"terry\")\n        XMLATTR        = 143,  // @\n        XMLEND         = 144,\n\n        // Optimizer-only-tokens\n        TO_OBJECT      = 145,\n        TO_DOUBLE      = 146,\n\n        GET            = 147,  // JS 1.5 get pseudo keyword\n        SET            = 148,  // JS 1.5 set pseudo keyword\n\n        CONST          = 149,  // JS 1.5 const keyword\n        SETCONST       = 150,\n        SETCONSTVAR    = 151,\n        DEBUGGER       = 152,\n        LAST_TOKEN     = 152,\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307;",
        "begin_line": 183,
        "end_line": 264,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.JSR",
        "snippet": "    public final static int\n        FIRST_ASSIGN   = ASSIGN,\n        LAST_ASSIGN    = ASSIGN_MOD,\n\n        HOOK           = 98, // conditional (?:)\n        COLON          = 99,\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment/decrement (++ --)\n        DEC            = 103,\n        DOT            = 104, // member operator (.)\n        FUNCTION       = 105, // function keyword\n        EXPORT         = 106, // export keyword\n        IMPORT         = 107, // import keyword\n        IF             = 108, // if keyword\n        ELSE           = 109, // else keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT        = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        FINALLY        = 121, // finally keyword\n        VOID           = 122, // void keyword\n        RESERVED       = 123, // reserved keywords\n\n        EMPTY          = 124,\n\n        /* types used for the parse tree - these never get returned\n         * by the scanner.\n         */\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        TARGET         = 127,\n        LOOP           = 128,\n        EXPR_VOID      = 129, // expression statement in functions\n        EXPR_RESULT    = 130, // expression statement in scripts\n        JSR            = 131,\n        SCRIPT         = 132, // top-level node for entire script\n        TYPEOFNAME     = 133, // for typeof(simple-name)\n        USE_STACK      = 134,\n        SETPROP_OP     = 135, // x.y op= something\n        SETELEM_OP     = 136, // x[y] op= something\n        LOCAL_BLOCK    = 137,\n        SET_REF_OP     = 138, // *reference op= something\n\n        // For XML support:\n        DOTDOT         = 139,  // member operator (..)\n        COLONCOLON     = 140,  // namespace::name\n        XML            = 141,  // XML type\n        DOTQUERY       = 142,  // .() -- e.g., x.emps.emp.(name == \"terry\")\n        XMLATTR        = 143,  // @\n        XMLEND         = 144,\n\n        // Optimizer-only-tokens\n        TO_OBJECT      = 145,\n        TO_DOUBLE      = 146,\n\n        GET            = 147,  // JS 1.5 get pseudo keyword\n        SET            = 148,  // JS 1.5 set pseudo keyword\n\n        CONST          = 149,  // JS 1.5 const keyword\n        SETCONST       = 150,\n        SETCONSTVAR    = 151,\n        DEBUGGER       = 152,\n        LAST_TOKEN     = 152,\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307;",
        "begin_line": 183,
        "end_line": 264,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.SCRIPT",
        "snippet": "    public final static int\n        FIRST_ASSIGN   = ASSIGN,\n        LAST_ASSIGN    = ASSIGN_MOD,\n\n        HOOK           = 98, // conditional (?:)\n        COLON          = 99,\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment/decrement (++ --)\n        DEC            = 103,\n        DOT            = 104, // member operator (.)\n        FUNCTION       = 105, // function keyword\n        EXPORT         = 106, // export keyword\n        IMPORT         = 107, // import keyword\n        IF             = 108, // if keyword\n        ELSE           = 109, // else keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT        = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        FINALLY        = 121, // finally keyword\n        VOID           = 122, // void keyword\n        RESERVED       = 123, // reserved keywords\n\n        EMPTY          = 124,\n\n        /* types used for the parse tree - these never get returned\n         * by the scanner.\n         */\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        TARGET         = 127,\n        LOOP           = 128,\n        EXPR_VOID      = 129, // expression statement in functions\n        EXPR_RESULT    = 130, // expression statement in scripts\n        JSR            = 131,\n        SCRIPT         = 132, // top-level node for entire script\n        TYPEOFNAME     = 133, // for typeof(simple-name)\n        USE_STACK      = 134,\n        SETPROP_OP     = 135, // x.y op= something\n        SETELEM_OP     = 136, // x[y] op= something\n        LOCAL_BLOCK    = 137,\n        SET_REF_OP     = 138, // *reference op= something\n\n        // For XML support:\n        DOTDOT         = 139,  // member operator (..)\n        COLONCOLON     = 140,  // namespace::name\n        XML            = 141,  // XML type\n        DOTQUERY       = 142,  // .() -- e.g., x.emps.emp.(name == \"terry\")\n        XMLATTR        = 143,  // @\n        XMLEND         = 144,\n\n        // Optimizer-only-tokens\n        TO_OBJECT      = 145,\n        TO_DOUBLE      = 146,\n\n        GET            = 147,  // JS 1.5 get pseudo keyword\n        SET            = 148,  // JS 1.5 set pseudo keyword\n\n        CONST          = 149,  // JS 1.5 const keyword\n        SETCONST       = 150,\n        SETCONSTVAR    = 151,\n        DEBUGGER       = 152,\n        LAST_TOKEN     = 152,\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307;",
        "begin_line": 183,
        "end_line": 264,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.TYPEOFNAME",
        "snippet": "    public final static int\n        FIRST_ASSIGN   = ASSIGN,\n        LAST_ASSIGN    = ASSIGN_MOD,\n\n        HOOK           = 98, // conditional (?:)\n        COLON          = 99,\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment/decrement (++ --)\n        DEC            = 103,\n        DOT            = 104, // member operator (.)\n        FUNCTION       = 105, // function keyword\n        EXPORT         = 106, // export keyword\n        IMPORT         = 107, // import keyword\n        IF             = 108, // if keyword\n        ELSE           = 109, // else keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT        = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        FINALLY        = 121, // finally keyword\n        VOID           = 122, // void keyword\n        RESERVED       = 123, // reserved keywords\n\n        EMPTY          = 124,\n\n        /* types used for the parse tree - these never get returned\n         * by the scanner.\n         */\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        TARGET         = 127,\n        LOOP           = 128,\n        EXPR_VOID      = 129, // expression statement in functions\n        EXPR_RESULT    = 130, // expression statement in scripts\n        JSR            = 131,\n        SCRIPT         = 132, // top-level node for entire script\n        TYPEOFNAME     = 133, // for typeof(simple-name)\n        USE_STACK      = 134,\n        SETPROP_OP     = 135, // x.y op= something\n        SETELEM_OP     = 136, // x[y] op= something\n        LOCAL_BLOCK    = 137,\n        SET_REF_OP     = 138, // *reference op= something\n\n        // For XML support:\n        DOTDOT         = 139,  // member operator (..)\n        COLONCOLON     = 140,  // namespace::name\n        XML            = 141,  // XML type\n        DOTQUERY       = 142,  // .() -- e.g., x.emps.emp.(name == \"terry\")\n        XMLATTR        = 143,  // @\n        XMLEND         = 144,\n\n        // Optimizer-only-tokens\n        TO_OBJECT      = 145,\n        TO_DOUBLE      = 146,\n\n        GET            = 147,  // JS 1.5 get pseudo keyword\n        SET            = 148,  // JS 1.5 set pseudo keyword\n\n        CONST          = 149,  // JS 1.5 const keyword\n        SETCONST       = 150,\n        SETCONSTVAR    = 151,\n        DEBUGGER       = 152,\n        LAST_TOKEN     = 152,\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307;",
        "begin_line": 183,
        "end_line": 264,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.USE_STACK",
        "snippet": "    public final static int\n        FIRST_ASSIGN   = ASSIGN,\n        LAST_ASSIGN    = ASSIGN_MOD,\n\n        HOOK           = 98, // conditional (?:)\n        COLON          = 99,\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment/decrement (++ --)\n        DEC            = 103,\n        DOT            = 104, // member operator (.)\n        FUNCTION       = 105, // function keyword\n        EXPORT         = 106, // export keyword\n        IMPORT         = 107, // import keyword\n        IF             = 108, // if keyword\n        ELSE           = 109, // else keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT        = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        FINALLY        = 121, // finally keyword\n        VOID           = 122, // void keyword\n        RESERVED       = 123, // reserved keywords\n\n        EMPTY          = 124,\n\n        /* types used for the parse tree - these never get returned\n         * by the scanner.\n         */\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        TARGET         = 127,\n        LOOP           = 128,\n        EXPR_VOID      = 129, // expression statement in functions\n        EXPR_RESULT    = 130, // expression statement in scripts\n        JSR            = 131,\n        SCRIPT         = 132, // top-level node for entire script\n        TYPEOFNAME     = 133, // for typeof(simple-name)\n        USE_STACK      = 134,\n        SETPROP_OP     = 135, // x.y op= something\n        SETELEM_OP     = 136, // x[y] op= something\n        LOCAL_BLOCK    = 137,\n        SET_REF_OP     = 138, // *reference op= something\n\n        // For XML support:\n        DOTDOT         = 139,  // member operator (..)\n        COLONCOLON     = 140,  // namespace::name\n        XML            = 141,  // XML type\n        DOTQUERY       = 142,  // .() -- e.g., x.emps.emp.(name == \"terry\")\n        XMLATTR        = 143,  // @\n        XMLEND         = 144,\n\n        // Optimizer-only-tokens\n        TO_OBJECT      = 145,\n        TO_DOUBLE      = 146,\n\n        GET            = 147,  // JS 1.5 get pseudo keyword\n        SET            = 148,  // JS 1.5 set pseudo keyword\n\n        CONST          = 149,  // JS 1.5 const keyword\n        SETCONST       = 150,\n        SETCONSTVAR    = 151,\n        DEBUGGER       = 152,\n        LAST_TOKEN     = 152,\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307;",
        "begin_line": 183,
        "end_line": 264,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.SETPROP_OP",
        "snippet": "    public final static int\n        FIRST_ASSIGN   = ASSIGN,\n        LAST_ASSIGN    = ASSIGN_MOD,\n\n        HOOK           = 98, // conditional (?:)\n        COLON          = 99,\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment/decrement (++ --)\n        DEC            = 103,\n        DOT            = 104, // member operator (.)\n        FUNCTION       = 105, // function keyword\n        EXPORT         = 106, // export keyword\n        IMPORT         = 107, // import keyword\n        IF             = 108, // if keyword\n        ELSE           = 109, // else keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT        = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        FINALLY        = 121, // finally keyword\n        VOID           = 122, // void keyword\n        RESERVED       = 123, // reserved keywords\n\n        EMPTY          = 124,\n\n        /* types used for the parse tree - these never get returned\n         * by the scanner.\n         */\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        TARGET         = 127,\n        LOOP           = 128,\n        EXPR_VOID      = 129, // expression statement in functions\n        EXPR_RESULT    = 130, // expression statement in scripts\n        JSR            = 131,\n        SCRIPT         = 132, // top-level node for entire script\n        TYPEOFNAME     = 133, // for typeof(simple-name)\n        USE_STACK      = 134,\n        SETPROP_OP     = 135, // x.y op= something\n        SETELEM_OP     = 136, // x[y] op= something\n        LOCAL_BLOCK    = 137,\n        SET_REF_OP     = 138, // *reference op= something\n\n        // For XML support:\n        DOTDOT         = 139,  // member operator (..)\n        COLONCOLON     = 140,  // namespace::name\n        XML            = 141,  // XML type\n        DOTQUERY       = 142,  // .() -- e.g., x.emps.emp.(name == \"terry\")\n        XMLATTR        = 143,  // @\n        XMLEND         = 144,\n\n        // Optimizer-only-tokens\n        TO_OBJECT      = 145,\n        TO_DOUBLE      = 146,\n\n        GET            = 147,  // JS 1.5 get pseudo keyword\n        SET            = 148,  // JS 1.5 set pseudo keyword\n\n        CONST          = 149,  // JS 1.5 const keyword\n        SETCONST       = 150,\n        SETCONSTVAR    = 151,\n        DEBUGGER       = 152,\n        LAST_TOKEN     = 152,\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307;",
        "begin_line": 183,
        "end_line": 264,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.SETELEM_OP",
        "snippet": "    public final static int\n        FIRST_ASSIGN   = ASSIGN,\n        LAST_ASSIGN    = ASSIGN_MOD,\n\n        HOOK           = 98, // conditional (?:)\n        COLON          = 99,\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment/decrement (++ --)\n        DEC            = 103,\n        DOT            = 104, // member operator (.)\n        FUNCTION       = 105, // function keyword\n        EXPORT         = 106, // export keyword\n        IMPORT         = 107, // import keyword\n        IF             = 108, // if keyword\n        ELSE           = 109, // else keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT        = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        FINALLY        = 121, // finally keyword\n        VOID           = 122, // void keyword\n        RESERVED       = 123, // reserved keywords\n\n        EMPTY          = 124,\n\n        /* types used for the parse tree - these never get returned\n         * by the scanner.\n         */\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        TARGET         = 127,\n        LOOP           = 128,\n        EXPR_VOID      = 129, // expression statement in functions\n        EXPR_RESULT    = 130, // expression statement in scripts\n        JSR            = 131,\n        SCRIPT         = 132, // top-level node for entire script\n        TYPEOFNAME     = 133, // for typeof(simple-name)\n        USE_STACK      = 134,\n        SETPROP_OP     = 135, // x.y op= something\n        SETELEM_OP     = 136, // x[y] op= something\n        LOCAL_BLOCK    = 137,\n        SET_REF_OP     = 138, // *reference op= something\n\n        // For XML support:\n        DOTDOT         = 139,  // member operator (..)\n        COLONCOLON     = 140,  // namespace::name\n        XML            = 141,  // XML type\n        DOTQUERY       = 142,  // .() -- e.g., x.emps.emp.(name == \"terry\")\n        XMLATTR        = 143,  // @\n        XMLEND         = 144,\n\n        // Optimizer-only-tokens\n        TO_OBJECT      = 145,\n        TO_DOUBLE      = 146,\n\n        GET            = 147,  // JS 1.5 get pseudo keyword\n        SET            = 148,  // JS 1.5 set pseudo keyword\n\n        CONST          = 149,  // JS 1.5 const keyword\n        SETCONST       = 150,\n        SETCONSTVAR    = 151,\n        DEBUGGER       = 152,\n        LAST_TOKEN     = 152,\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307;",
        "begin_line": 183,
        "end_line": 264,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.LOCAL_BLOCK",
        "snippet": "    public final static int\n        FIRST_ASSIGN   = ASSIGN,\n        LAST_ASSIGN    = ASSIGN_MOD,\n\n        HOOK           = 98, // conditional (?:)\n        COLON          = 99,\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment/decrement (++ --)\n        DEC            = 103,\n        DOT            = 104, // member operator (.)\n        FUNCTION       = 105, // function keyword\n        EXPORT         = 106, // export keyword\n        IMPORT         = 107, // import keyword\n        IF             = 108, // if keyword\n        ELSE           = 109, // else keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT        = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        FINALLY        = 121, // finally keyword\n        VOID           = 122, // void keyword\n        RESERVED       = 123, // reserved keywords\n\n        EMPTY          = 124,\n\n        /* types used for the parse tree - these never get returned\n         * by the scanner.\n         */\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        TARGET         = 127,\n        LOOP           = 128,\n        EXPR_VOID      = 129, // expression statement in functions\n        EXPR_RESULT    = 130, // expression statement in scripts\n        JSR            = 131,\n        SCRIPT         = 132, // top-level node for entire script\n        TYPEOFNAME     = 133, // for typeof(simple-name)\n        USE_STACK      = 134,\n        SETPROP_OP     = 135, // x.y op= something\n        SETELEM_OP     = 136, // x[y] op= something\n        LOCAL_BLOCK    = 137,\n        SET_REF_OP     = 138, // *reference op= something\n\n        // For XML support:\n        DOTDOT         = 139,  // member operator (..)\n        COLONCOLON     = 140,  // namespace::name\n        XML            = 141,  // XML type\n        DOTQUERY       = 142,  // .() -- e.g., x.emps.emp.(name == \"terry\")\n        XMLATTR        = 143,  // @\n        XMLEND         = 144,\n\n        // Optimizer-only-tokens\n        TO_OBJECT      = 145,\n        TO_DOUBLE      = 146,\n\n        GET            = 147,  // JS 1.5 get pseudo keyword\n        SET            = 148,  // JS 1.5 set pseudo keyword\n\n        CONST          = 149,  // JS 1.5 const keyword\n        SETCONST       = 150,\n        SETCONSTVAR    = 151,\n        DEBUGGER       = 152,\n        LAST_TOKEN     = 152,\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307;",
        "begin_line": 183,
        "end_line": 264,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.SET_REF_OP",
        "snippet": "    public final static int\n        FIRST_ASSIGN   = ASSIGN,\n        LAST_ASSIGN    = ASSIGN_MOD,\n\n        HOOK           = 98, // conditional (?:)\n        COLON          = 99,\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment/decrement (++ --)\n        DEC            = 103,\n        DOT            = 104, // member operator (.)\n        FUNCTION       = 105, // function keyword\n        EXPORT         = 106, // export keyword\n        IMPORT         = 107, // import keyword\n        IF             = 108, // if keyword\n        ELSE           = 109, // else keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT        = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        FINALLY        = 121, // finally keyword\n        VOID           = 122, // void keyword\n        RESERVED       = 123, // reserved keywords\n\n        EMPTY          = 124,\n\n        /* types used for the parse tree - these never get returned\n         * by the scanner.\n         */\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        TARGET         = 127,\n        LOOP           = 128,\n        EXPR_VOID      = 129, // expression statement in functions\n        EXPR_RESULT    = 130, // expression statement in scripts\n        JSR            = 131,\n        SCRIPT         = 132, // top-level node for entire script\n        TYPEOFNAME     = 133, // for typeof(simple-name)\n        USE_STACK      = 134,\n        SETPROP_OP     = 135, // x.y op= something\n        SETELEM_OP     = 136, // x[y] op= something\n        LOCAL_BLOCK    = 137,\n        SET_REF_OP     = 138, // *reference op= something\n\n        // For XML support:\n        DOTDOT         = 139,  // member operator (..)\n        COLONCOLON     = 140,  // namespace::name\n        XML            = 141,  // XML type\n        DOTQUERY       = 142,  // .() -- e.g., x.emps.emp.(name == \"terry\")\n        XMLATTR        = 143,  // @\n        XMLEND         = 144,\n\n        // Optimizer-only-tokens\n        TO_OBJECT      = 145,\n        TO_DOUBLE      = 146,\n\n        GET            = 147,  // JS 1.5 get pseudo keyword\n        SET            = 148,  // JS 1.5 set pseudo keyword\n\n        CONST          = 149,  // JS 1.5 const keyword\n        SETCONST       = 150,\n        SETCONSTVAR    = 151,\n        DEBUGGER       = 152,\n        LAST_TOKEN     = 152,\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307;",
        "begin_line": 183,
        "end_line": 264,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.DOTDOT",
        "snippet": "    public final static int\n        FIRST_ASSIGN   = ASSIGN,\n        LAST_ASSIGN    = ASSIGN_MOD,\n\n        HOOK           = 98, // conditional (?:)\n        COLON          = 99,\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment/decrement (++ --)\n        DEC            = 103,\n        DOT            = 104, // member operator (.)\n        FUNCTION       = 105, // function keyword\n        EXPORT         = 106, // export keyword\n        IMPORT         = 107, // import keyword\n        IF             = 108, // if keyword\n        ELSE           = 109, // else keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT        = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        FINALLY        = 121, // finally keyword\n        VOID           = 122, // void keyword\n        RESERVED       = 123, // reserved keywords\n\n        EMPTY          = 124,\n\n        /* types used for the parse tree - these never get returned\n         * by the scanner.\n         */\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        TARGET         = 127,\n        LOOP           = 128,\n        EXPR_VOID      = 129, // expression statement in functions\n        EXPR_RESULT    = 130, // expression statement in scripts\n        JSR            = 131,\n        SCRIPT         = 132, // top-level node for entire script\n        TYPEOFNAME     = 133, // for typeof(simple-name)\n        USE_STACK      = 134,\n        SETPROP_OP     = 135, // x.y op= something\n        SETELEM_OP     = 136, // x[y] op= something\n        LOCAL_BLOCK    = 137,\n        SET_REF_OP     = 138, // *reference op= something\n\n        // For XML support:\n        DOTDOT         = 139,  // member operator (..)\n        COLONCOLON     = 140,  // namespace::name\n        XML            = 141,  // XML type\n        DOTQUERY       = 142,  // .() -- e.g., x.emps.emp.(name == \"terry\")\n        XMLATTR        = 143,  // @\n        XMLEND         = 144,\n\n        // Optimizer-only-tokens\n        TO_OBJECT      = 145,\n        TO_DOUBLE      = 146,\n\n        GET            = 147,  // JS 1.5 get pseudo keyword\n        SET            = 148,  // JS 1.5 set pseudo keyword\n\n        CONST          = 149,  // JS 1.5 const keyword\n        SETCONST       = 150,\n        SETCONSTVAR    = 151,\n        DEBUGGER       = 152,\n        LAST_TOKEN     = 152,\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307;",
        "begin_line": 183,
        "end_line": 264,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.COLONCOLON",
        "snippet": "    public final static int\n        FIRST_ASSIGN   = ASSIGN,\n        LAST_ASSIGN    = ASSIGN_MOD,\n\n        HOOK           = 98, // conditional (?:)\n        COLON          = 99,\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment/decrement (++ --)\n        DEC            = 103,\n        DOT            = 104, // member operator (.)\n        FUNCTION       = 105, // function keyword\n        EXPORT         = 106, // export keyword\n        IMPORT         = 107, // import keyword\n        IF             = 108, // if keyword\n        ELSE           = 109, // else keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT        = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        FINALLY        = 121, // finally keyword\n        VOID           = 122, // void keyword\n        RESERVED       = 123, // reserved keywords\n\n        EMPTY          = 124,\n\n        /* types used for the parse tree - these never get returned\n         * by the scanner.\n         */\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        TARGET         = 127,\n        LOOP           = 128,\n        EXPR_VOID      = 129, // expression statement in functions\n        EXPR_RESULT    = 130, // expression statement in scripts\n        JSR            = 131,\n        SCRIPT         = 132, // top-level node for entire script\n        TYPEOFNAME     = 133, // for typeof(simple-name)\n        USE_STACK      = 134,\n        SETPROP_OP     = 135, // x.y op= something\n        SETELEM_OP     = 136, // x[y] op= something\n        LOCAL_BLOCK    = 137,\n        SET_REF_OP     = 138, // *reference op= something\n\n        // For XML support:\n        DOTDOT         = 139,  // member operator (..)\n        COLONCOLON     = 140,  // namespace::name\n        XML            = 141,  // XML type\n        DOTQUERY       = 142,  // .() -- e.g., x.emps.emp.(name == \"terry\")\n        XMLATTR        = 143,  // @\n        XMLEND         = 144,\n\n        // Optimizer-only-tokens\n        TO_OBJECT      = 145,\n        TO_DOUBLE      = 146,\n\n        GET            = 147,  // JS 1.5 get pseudo keyword\n        SET            = 148,  // JS 1.5 set pseudo keyword\n\n        CONST          = 149,  // JS 1.5 const keyword\n        SETCONST       = 150,\n        SETCONSTVAR    = 151,\n        DEBUGGER       = 152,\n        LAST_TOKEN     = 152,\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307;",
        "begin_line": 183,
        "end_line": 264,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.XML",
        "snippet": "    public final static int\n        FIRST_ASSIGN   = ASSIGN,\n        LAST_ASSIGN    = ASSIGN_MOD,\n\n        HOOK           = 98, // conditional (?:)\n        COLON          = 99,\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment/decrement (++ --)\n        DEC            = 103,\n        DOT            = 104, // member operator (.)\n        FUNCTION       = 105, // function keyword\n        EXPORT         = 106, // export keyword\n        IMPORT         = 107, // import keyword\n        IF             = 108, // if keyword\n        ELSE           = 109, // else keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT        = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        FINALLY        = 121, // finally keyword\n        VOID           = 122, // void keyword\n        RESERVED       = 123, // reserved keywords\n\n        EMPTY          = 124,\n\n        /* types used for the parse tree - these never get returned\n         * by the scanner.\n         */\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        TARGET         = 127,\n        LOOP           = 128,\n        EXPR_VOID      = 129, // expression statement in functions\n        EXPR_RESULT    = 130, // expression statement in scripts\n        JSR            = 131,\n        SCRIPT         = 132, // top-level node for entire script\n        TYPEOFNAME     = 133, // for typeof(simple-name)\n        USE_STACK      = 134,\n        SETPROP_OP     = 135, // x.y op= something\n        SETELEM_OP     = 136, // x[y] op= something\n        LOCAL_BLOCK    = 137,\n        SET_REF_OP     = 138, // *reference op= something\n\n        // For XML support:\n        DOTDOT         = 139,  // member operator (..)\n        COLONCOLON     = 140,  // namespace::name\n        XML            = 141,  // XML type\n        DOTQUERY       = 142,  // .() -- e.g., x.emps.emp.(name == \"terry\")\n        XMLATTR        = 143,  // @\n        XMLEND         = 144,\n\n        // Optimizer-only-tokens\n        TO_OBJECT      = 145,\n        TO_DOUBLE      = 146,\n\n        GET            = 147,  // JS 1.5 get pseudo keyword\n        SET            = 148,  // JS 1.5 set pseudo keyword\n\n        CONST          = 149,  // JS 1.5 const keyword\n        SETCONST       = 150,\n        SETCONSTVAR    = 151,\n        DEBUGGER       = 152,\n        LAST_TOKEN     = 152,\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307;",
        "begin_line": 183,
        "end_line": 264,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.DOTQUERY",
        "snippet": "    public final static int\n        FIRST_ASSIGN   = ASSIGN,\n        LAST_ASSIGN    = ASSIGN_MOD,\n\n        HOOK           = 98, // conditional (?:)\n        COLON          = 99,\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment/decrement (++ --)\n        DEC            = 103,\n        DOT            = 104, // member operator (.)\n        FUNCTION       = 105, // function keyword\n        EXPORT         = 106, // export keyword\n        IMPORT         = 107, // import keyword\n        IF             = 108, // if keyword\n        ELSE           = 109, // else keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT        = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        FINALLY        = 121, // finally keyword\n        VOID           = 122, // void keyword\n        RESERVED       = 123, // reserved keywords\n\n        EMPTY          = 124,\n\n        /* types used for the parse tree - these never get returned\n         * by the scanner.\n         */\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        TARGET         = 127,\n        LOOP           = 128,\n        EXPR_VOID      = 129, // expression statement in functions\n        EXPR_RESULT    = 130, // expression statement in scripts\n        JSR            = 131,\n        SCRIPT         = 132, // top-level node for entire script\n        TYPEOFNAME     = 133, // for typeof(simple-name)\n        USE_STACK      = 134,\n        SETPROP_OP     = 135, // x.y op= something\n        SETELEM_OP     = 136, // x[y] op= something\n        LOCAL_BLOCK    = 137,\n        SET_REF_OP     = 138, // *reference op= something\n\n        // For XML support:\n        DOTDOT         = 139,  // member operator (..)\n        COLONCOLON     = 140,  // namespace::name\n        XML            = 141,  // XML type\n        DOTQUERY       = 142,  // .() -- e.g., x.emps.emp.(name == \"terry\")\n        XMLATTR        = 143,  // @\n        XMLEND         = 144,\n\n        // Optimizer-only-tokens\n        TO_OBJECT      = 145,\n        TO_DOUBLE      = 146,\n\n        GET            = 147,  // JS 1.5 get pseudo keyword\n        SET            = 148,  // JS 1.5 set pseudo keyword\n\n        CONST          = 149,  // JS 1.5 const keyword\n        SETCONST       = 150,\n        SETCONSTVAR    = 151,\n        DEBUGGER       = 152,\n        LAST_TOKEN     = 152,\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307;",
        "begin_line": 183,
        "end_line": 264,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.XMLATTR",
        "snippet": "    public final static int\n        FIRST_ASSIGN   = ASSIGN,\n        LAST_ASSIGN    = ASSIGN_MOD,\n\n        HOOK           = 98, // conditional (?:)\n        COLON          = 99,\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment/decrement (++ --)\n        DEC            = 103,\n        DOT            = 104, // member operator (.)\n        FUNCTION       = 105, // function keyword\n        EXPORT         = 106, // export keyword\n        IMPORT         = 107, // import keyword\n        IF             = 108, // if keyword\n        ELSE           = 109, // else keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT        = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        FINALLY        = 121, // finally keyword\n        VOID           = 122, // void keyword\n        RESERVED       = 123, // reserved keywords\n\n        EMPTY          = 124,\n\n        /* types used for the parse tree - these never get returned\n         * by the scanner.\n         */\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        TARGET         = 127,\n        LOOP           = 128,\n        EXPR_VOID      = 129, // expression statement in functions\n        EXPR_RESULT    = 130, // expression statement in scripts\n        JSR            = 131,\n        SCRIPT         = 132, // top-level node for entire script\n        TYPEOFNAME     = 133, // for typeof(simple-name)\n        USE_STACK      = 134,\n        SETPROP_OP     = 135, // x.y op= something\n        SETELEM_OP     = 136, // x[y] op= something\n        LOCAL_BLOCK    = 137,\n        SET_REF_OP     = 138, // *reference op= something\n\n        // For XML support:\n        DOTDOT         = 139,  // member operator (..)\n        COLONCOLON     = 140,  // namespace::name\n        XML            = 141,  // XML type\n        DOTQUERY       = 142,  // .() -- e.g., x.emps.emp.(name == \"terry\")\n        XMLATTR        = 143,  // @\n        XMLEND         = 144,\n\n        // Optimizer-only-tokens\n        TO_OBJECT      = 145,\n        TO_DOUBLE      = 146,\n\n        GET            = 147,  // JS 1.5 get pseudo keyword\n        SET            = 148,  // JS 1.5 set pseudo keyword\n\n        CONST          = 149,  // JS 1.5 const keyword\n        SETCONST       = 150,\n        SETCONSTVAR    = 151,\n        DEBUGGER       = 152,\n        LAST_TOKEN     = 152,\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307;",
        "begin_line": 183,
        "end_line": 264,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.XMLEND",
        "snippet": "    public final static int\n        FIRST_ASSIGN   = ASSIGN,\n        LAST_ASSIGN    = ASSIGN_MOD,\n\n        HOOK           = 98, // conditional (?:)\n        COLON          = 99,\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment/decrement (++ --)\n        DEC            = 103,\n        DOT            = 104, // member operator (.)\n        FUNCTION       = 105, // function keyword\n        EXPORT         = 106, // export keyword\n        IMPORT         = 107, // import keyword\n        IF             = 108, // if keyword\n        ELSE           = 109, // else keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT        = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        FINALLY        = 121, // finally keyword\n        VOID           = 122, // void keyword\n        RESERVED       = 123, // reserved keywords\n\n        EMPTY          = 124,\n\n        /* types used for the parse tree - these never get returned\n         * by the scanner.\n         */\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        TARGET         = 127,\n        LOOP           = 128,\n        EXPR_VOID      = 129, // expression statement in functions\n        EXPR_RESULT    = 130, // expression statement in scripts\n        JSR            = 131,\n        SCRIPT         = 132, // top-level node for entire script\n        TYPEOFNAME     = 133, // for typeof(simple-name)\n        USE_STACK      = 134,\n        SETPROP_OP     = 135, // x.y op= something\n        SETELEM_OP     = 136, // x[y] op= something\n        LOCAL_BLOCK    = 137,\n        SET_REF_OP     = 138, // *reference op= something\n\n        // For XML support:\n        DOTDOT         = 139,  // member operator (..)\n        COLONCOLON     = 140,  // namespace::name\n        XML            = 141,  // XML type\n        DOTQUERY       = 142,  // .() -- e.g., x.emps.emp.(name == \"terry\")\n        XMLATTR        = 143,  // @\n        XMLEND         = 144,\n\n        // Optimizer-only-tokens\n        TO_OBJECT      = 145,\n        TO_DOUBLE      = 146,\n\n        GET            = 147,  // JS 1.5 get pseudo keyword\n        SET            = 148,  // JS 1.5 set pseudo keyword\n\n        CONST          = 149,  // JS 1.5 const keyword\n        SETCONST       = 150,\n        SETCONSTVAR    = 151,\n        DEBUGGER       = 152,\n        LAST_TOKEN     = 152,\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307;",
        "begin_line": 183,
        "end_line": 264,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.TO_OBJECT",
        "snippet": "    public final static int\n        FIRST_ASSIGN   = ASSIGN,\n        LAST_ASSIGN    = ASSIGN_MOD,\n\n        HOOK           = 98, // conditional (?:)\n        COLON          = 99,\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment/decrement (++ --)\n        DEC            = 103,\n        DOT            = 104, // member operator (.)\n        FUNCTION       = 105, // function keyword\n        EXPORT         = 106, // export keyword\n        IMPORT         = 107, // import keyword\n        IF             = 108, // if keyword\n        ELSE           = 109, // else keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT        = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        FINALLY        = 121, // finally keyword\n        VOID           = 122, // void keyword\n        RESERVED       = 123, // reserved keywords\n\n        EMPTY          = 124,\n\n        /* types used for the parse tree - these never get returned\n         * by the scanner.\n         */\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        TARGET         = 127,\n        LOOP           = 128,\n        EXPR_VOID      = 129, // expression statement in functions\n        EXPR_RESULT    = 130, // expression statement in scripts\n        JSR            = 131,\n        SCRIPT         = 132, // top-level node for entire script\n        TYPEOFNAME     = 133, // for typeof(simple-name)\n        USE_STACK      = 134,\n        SETPROP_OP     = 135, // x.y op= something\n        SETELEM_OP     = 136, // x[y] op= something\n        LOCAL_BLOCK    = 137,\n        SET_REF_OP     = 138, // *reference op= something\n\n        // For XML support:\n        DOTDOT         = 139,  // member operator (..)\n        COLONCOLON     = 140,  // namespace::name\n        XML            = 141,  // XML type\n        DOTQUERY       = 142,  // .() -- e.g., x.emps.emp.(name == \"terry\")\n        XMLATTR        = 143,  // @\n        XMLEND         = 144,\n\n        // Optimizer-only-tokens\n        TO_OBJECT      = 145,\n        TO_DOUBLE      = 146,\n\n        GET            = 147,  // JS 1.5 get pseudo keyword\n        SET            = 148,  // JS 1.5 set pseudo keyword\n\n        CONST          = 149,  // JS 1.5 const keyword\n        SETCONST       = 150,\n        SETCONSTVAR    = 151,\n        DEBUGGER       = 152,\n        LAST_TOKEN     = 152,\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307;",
        "begin_line": 183,
        "end_line": 264,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.TO_DOUBLE",
        "snippet": "    public final static int\n        FIRST_ASSIGN   = ASSIGN,\n        LAST_ASSIGN    = ASSIGN_MOD,\n\n        HOOK           = 98, // conditional (?:)\n        COLON          = 99,\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment/decrement (++ --)\n        DEC            = 103,\n        DOT            = 104, // member operator (.)\n        FUNCTION       = 105, // function keyword\n        EXPORT         = 106, // export keyword\n        IMPORT         = 107, // import keyword\n        IF             = 108, // if keyword\n        ELSE           = 109, // else keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT        = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        FINALLY        = 121, // finally keyword\n        VOID           = 122, // void keyword\n        RESERVED       = 123, // reserved keywords\n\n        EMPTY          = 124,\n\n        /* types used for the parse tree - these never get returned\n         * by the scanner.\n         */\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        TARGET         = 127,\n        LOOP           = 128,\n        EXPR_VOID      = 129, // expression statement in functions\n        EXPR_RESULT    = 130, // expression statement in scripts\n        JSR            = 131,\n        SCRIPT         = 132, // top-level node for entire script\n        TYPEOFNAME     = 133, // for typeof(simple-name)\n        USE_STACK      = 134,\n        SETPROP_OP     = 135, // x.y op= something\n        SETELEM_OP     = 136, // x[y] op= something\n        LOCAL_BLOCK    = 137,\n        SET_REF_OP     = 138, // *reference op= something\n\n        // For XML support:\n        DOTDOT         = 139,  // member operator (..)\n        COLONCOLON     = 140,  // namespace::name\n        XML            = 141,  // XML type\n        DOTQUERY       = 142,  // .() -- e.g., x.emps.emp.(name == \"terry\")\n        XMLATTR        = 143,  // @\n        XMLEND         = 144,\n\n        // Optimizer-only-tokens\n        TO_OBJECT      = 145,\n        TO_DOUBLE      = 146,\n\n        GET            = 147,  // JS 1.5 get pseudo keyword\n        SET            = 148,  // JS 1.5 set pseudo keyword\n\n        CONST          = 149,  // JS 1.5 const keyword\n        SETCONST       = 150,\n        SETCONSTVAR    = 151,\n        DEBUGGER       = 152,\n        LAST_TOKEN     = 152,\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307;",
        "begin_line": 183,
        "end_line": 264,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.GET",
        "snippet": "    public final static int\n        FIRST_ASSIGN   = ASSIGN,\n        LAST_ASSIGN    = ASSIGN_MOD,\n\n        HOOK           = 98, // conditional (?:)\n        COLON          = 99,\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment/decrement (++ --)\n        DEC            = 103,\n        DOT            = 104, // member operator (.)\n        FUNCTION       = 105, // function keyword\n        EXPORT         = 106, // export keyword\n        IMPORT         = 107, // import keyword\n        IF             = 108, // if keyword\n        ELSE           = 109, // else keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT        = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        FINALLY        = 121, // finally keyword\n        VOID           = 122, // void keyword\n        RESERVED       = 123, // reserved keywords\n\n        EMPTY          = 124,\n\n        /* types used for the parse tree - these never get returned\n         * by the scanner.\n         */\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        TARGET         = 127,\n        LOOP           = 128,\n        EXPR_VOID      = 129, // expression statement in functions\n        EXPR_RESULT    = 130, // expression statement in scripts\n        JSR            = 131,\n        SCRIPT         = 132, // top-level node for entire script\n        TYPEOFNAME     = 133, // for typeof(simple-name)\n        USE_STACK      = 134,\n        SETPROP_OP     = 135, // x.y op= something\n        SETELEM_OP     = 136, // x[y] op= something\n        LOCAL_BLOCK    = 137,\n        SET_REF_OP     = 138, // *reference op= something\n\n        // For XML support:\n        DOTDOT         = 139,  // member operator (..)\n        COLONCOLON     = 140,  // namespace::name\n        XML            = 141,  // XML type\n        DOTQUERY       = 142,  // .() -- e.g., x.emps.emp.(name == \"terry\")\n        XMLATTR        = 143,  // @\n        XMLEND         = 144,\n\n        // Optimizer-only-tokens\n        TO_OBJECT      = 145,\n        TO_DOUBLE      = 146,\n\n        GET            = 147,  // JS 1.5 get pseudo keyword\n        SET            = 148,  // JS 1.5 set pseudo keyword\n\n        CONST          = 149,  // JS 1.5 const keyword\n        SETCONST       = 150,\n        SETCONSTVAR    = 151,\n        DEBUGGER       = 152,\n        LAST_TOKEN     = 152,\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307;",
        "begin_line": 183,
        "end_line": 264,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.SET",
        "snippet": "    public final static int\n        FIRST_ASSIGN   = ASSIGN,\n        LAST_ASSIGN    = ASSIGN_MOD,\n\n        HOOK           = 98, // conditional (?:)\n        COLON          = 99,\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment/decrement (++ --)\n        DEC            = 103,\n        DOT            = 104, // member operator (.)\n        FUNCTION       = 105, // function keyword\n        EXPORT         = 106, // export keyword\n        IMPORT         = 107, // import keyword\n        IF             = 108, // if keyword\n        ELSE           = 109, // else keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT        = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        FINALLY        = 121, // finally keyword\n        VOID           = 122, // void keyword\n        RESERVED       = 123, // reserved keywords\n\n        EMPTY          = 124,\n\n        /* types used for the parse tree - these never get returned\n         * by the scanner.\n         */\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        TARGET         = 127,\n        LOOP           = 128,\n        EXPR_VOID      = 129, // expression statement in functions\n        EXPR_RESULT    = 130, // expression statement in scripts\n        JSR            = 131,\n        SCRIPT         = 132, // top-level node for entire script\n        TYPEOFNAME     = 133, // for typeof(simple-name)\n        USE_STACK      = 134,\n        SETPROP_OP     = 135, // x.y op= something\n        SETELEM_OP     = 136, // x[y] op= something\n        LOCAL_BLOCK    = 137,\n        SET_REF_OP     = 138, // *reference op= something\n\n        // For XML support:\n        DOTDOT         = 139,  // member operator (..)\n        COLONCOLON     = 140,  // namespace::name\n        XML            = 141,  // XML type\n        DOTQUERY       = 142,  // .() -- e.g., x.emps.emp.(name == \"terry\")\n        XMLATTR        = 143,  // @\n        XMLEND         = 144,\n\n        // Optimizer-only-tokens\n        TO_OBJECT      = 145,\n        TO_DOUBLE      = 146,\n\n        GET            = 147,  // JS 1.5 get pseudo keyword\n        SET            = 148,  // JS 1.5 set pseudo keyword\n\n        CONST          = 149,  // JS 1.5 const keyword\n        SETCONST       = 150,\n        SETCONSTVAR    = 151,\n        DEBUGGER       = 152,\n        LAST_TOKEN     = 152,\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307;",
        "begin_line": 183,
        "end_line": 264,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.CONST",
        "snippet": "    public final static int\n        FIRST_ASSIGN   = ASSIGN,\n        LAST_ASSIGN    = ASSIGN_MOD,\n\n        HOOK           = 98, // conditional (?:)\n        COLON          = 99,\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment/decrement (++ --)\n        DEC            = 103,\n        DOT            = 104, // member operator (.)\n        FUNCTION       = 105, // function keyword\n        EXPORT         = 106, // export keyword\n        IMPORT         = 107, // import keyword\n        IF             = 108, // if keyword\n        ELSE           = 109, // else keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT        = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        FINALLY        = 121, // finally keyword\n        VOID           = 122, // void keyword\n        RESERVED       = 123, // reserved keywords\n\n        EMPTY          = 124,\n\n        /* types used for the parse tree - these never get returned\n         * by the scanner.\n         */\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        TARGET         = 127,\n        LOOP           = 128,\n        EXPR_VOID      = 129, // expression statement in functions\n        EXPR_RESULT    = 130, // expression statement in scripts\n        JSR            = 131,\n        SCRIPT         = 132, // top-level node for entire script\n        TYPEOFNAME     = 133, // for typeof(simple-name)\n        USE_STACK      = 134,\n        SETPROP_OP     = 135, // x.y op= something\n        SETELEM_OP     = 136, // x[y] op= something\n        LOCAL_BLOCK    = 137,\n        SET_REF_OP     = 138, // *reference op= something\n\n        // For XML support:\n        DOTDOT         = 139,  // member operator (..)\n        COLONCOLON     = 140,  // namespace::name\n        XML            = 141,  // XML type\n        DOTQUERY       = 142,  // .() -- e.g., x.emps.emp.(name == \"terry\")\n        XMLATTR        = 143,  // @\n        XMLEND         = 144,\n\n        // Optimizer-only-tokens\n        TO_OBJECT      = 145,\n        TO_DOUBLE      = 146,\n\n        GET            = 147,  // JS 1.5 get pseudo keyword\n        SET            = 148,  // JS 1.5 set pseudo keyword\n\n        CONST          = 149,  // JS 1.5 const keyword\n        SETCONST       = 150,\n        SETCONSTVAR    = 151,\n        DEBUGGER       = 152,\n        LAST_TOKEN     = 152,\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307;",
        "begin_line": 183,
        "end_line": 264,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.SETCONST",
        "snippet": "    public final static int\n        FIRST_ASSIGN   = ASSIGN,\n        LAST_ASSIGN    = ASSIGN_MOD,\n\n        HOOK           = 98, // conditional (?:)\n        COLON          = 99,\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment/decrement (++ --)\n        DEC            = 103,\n        DOT            = 104, // member operator (.)\n        FUNCTION       = 105, // function keyword\n        EXPORT         = 106, // export keyword\n        IMPORT         = 107, // import keyword\n        IF             = 108, // if keyword\n        ELSE           = 109, // else keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT        = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        FINALLY        = 121, // finally keyword\n        VOID           = 122, // void keyword\n        RESERVED       = 123, // reserved keywords\n\n        EMPTY          = 124,\n\n        /* types used for the parse tree - these never get returned\n         * by the scanner.\n         */\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        TARGET         = 127,\n        LOOP           = 128,\n        EXPR_VOID      = 129, // expression statement in functions\n        EXPR_RESULT    = 130, // expression statement in scripts\n        JSR            = 131,\n        SCRIPT         = 132, // top-level node for entire script\n        TYPEOFNAME     = 133, // for typeof(simple-name)\n        USE_STACK      = 134,\n        SETPROP_OP     = 135, // x.y op= something\n        SETELEM_OP     = 136, // x[y] op= something\n        LOCAL_BLOCK    = 137,\n        SET_REF_OP     = 138, // *reference op= something\n\n        // For XML support:\n        DOTDOT         = 139,  // member operator (..)\n        COLONCOLON     = 140,  // namespace::name\n        XML            = 141,  // XML type\n        DOTQUERY       = 142,  // .() -- e.g., x.emps.emp.(name == \"terry\")\n        XMLATTR        = 143,  // @\n        XMLEND         = 144,\n\n        // Optimizer-only-tokens\n        TO_OBJECT      = 145,\n        TO_DOUBLE      = 146,\n\n        GET            = 147,  // JS 1.5 get pseudo keyword\n        SET            = 148,  // JS 1.5 set pseudo keyword\n\n        CONST          = 149,  // JS 1.5 const keyword\n        SETCONST       = 150,\n        SETCONSTVAR    = 151,\n        DEBUGGER       = 152,\n        LAST_TOKEN     = 152,\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307;",
        "begin_line": 183,
        "end_line": 264,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.SETCONSTVAR",
        "snippet": "    public final static int\n        FIRST_ASSIGN   = ASSIGN,\n        LAST_ASSIGN    = ASSIGN_MOD,\n\n        HOOK           = 98, // conditional (?:)\n        COLON          = 99,\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment/decrement (++ --)\n        DEC            = 103,\n        DOT            = 104, // member operator (.)\n        FUNCTION       = 105, // function keyword\n        EXPORT         = 106, // export keyword\n        IMPORT         = 107, // import keyword\n        IF             = 108, // if keyword\n        ELSE           = 109, // else keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT        = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        FINALLY        = 121, // finally keyword\n        VOID           = 122, // void keyword\n        RESERVED       = 123, // reserved keywords\n\n        EMPTY          = 124,\n\n        /* types used for the parse tree - these never get returned\n         * by the scanner.\n         */\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        TARGET         = 127,\n        LOOP           = 128,\n        EXPR_VOID      = 129, // expression statement in functions\n        EXPR_RESULT    = 130, // expression statement in scripts\n        JSR            = 131,\n        SCRIPT         = 132, // top-level node for entire script\n        TYPEOFNAME     = 133, // for typeof(simple-name)\n        USE_STACK      = 134,\n        SETPROP_OP     = 135, // x.y op= something\n        SETELEM_OP     = 136, // x[y] op= something\n        LOCAL_BLOCK    = 137,\n        SET_REF_OP     = 138, // *reference op= something\n\n        // For XML support:\n        DOTDOT         = 139,  // member operator (..)\n        COLONCOLON     = 140,  // namespace::name\n        XML            = 141,  // XML type\n        DOTQUERY       = 142,  // .() -- e.g., x.emps.emp.(name == \"terry\")\n        XMLATTR        = 143,  // @\n        XMLEND         = 144,\n\n        // Optimizer-only-tokens\n        TO_OBJECT      = 145,\n        TO_DOUBLE      = 146,\n\n        GET            = 147,  // JS 1.5 get pseudo keyword\n        SET            = 148,  // JS 1.5 set pseudo keyword\n\n        CONST          = 149,  // JS 1.5 const keyword\n        SETCONST       = 150,\n        SETCONSTVAR    = 151,\n        DEBUGGER       = 152,\n        LAST_TOKEN     = 152,\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307;",
        "begin_line": 183,
        "end_line": 264,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.DEBUGGER",
        "snippet": "    public final static int\n        FIRST_ASSIGN   = ASSIGN,\n        LAST_ASSIGN    = ASSIGN_MOD,\n\n        HOOK           = 98, // conditional (?:)\n        COLON          = 99,\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment/decrement (++ --)\n        DEC            = 103,\n        DOT            = 104, // member operator (.)\n        FUNCTION       = 105, // function keyword\n        EXPORT         = 106, // export keyword\n        IMPORT         = 107, // import keyword\n        IF             = 108, // if keyword\n        ELSE           = 109, // else keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT        = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        FINALLY        = 121, // finally keyword\n        VOID           = 122, // void keyword\n        RESERVED       = 123, // reserved keywords\n\n        EMPTY          = 124,\n\n        /* types used for the parse tree - these never get returned\n         * by the scanner.\n         */\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        TARGET         = 127,\n        LOOP           = 128,\n        EXPR_VOID      = 129, // expression statement in functions\n        EXPR_RESULT    = 130, // expression statement in scripts\n        JSR            = 131,\n        SCRIPT         = 132, // top-level node for entire script\n        TYPEOFNAME     = 133, // for typeof(simple-name)\n        USE_STACK      = 134,\n        SETPROP_OP     = 135, // x.y op= something\n        SETELEM_OP     = 136, // x[y] op= something\n        LOCAL_BLOCK    = 137,\n        SET_REF_OP     = 138, // *reference op= something\n\n        // For XML support:\n        DOTDOT         = 139,  // member operator (..)\n        COLONCOLON     = 140,  // namespace::name\n        XML            = 141,  // XML type\n        DOTQUERY       = 142,  // .() -- e.g., x.emps.emp.(name == \"terry\")\n        XMLATTR        = 143,  // @\n        XMLEND         = 144,\n\n        // Optimizer-only-tokens\n        TO_OBJECT      = 145,\n        TO_DOUBLE      = 146,\n\n        GET            = 147,  // JS 1.5 get pseudo keyword\n        SET            = 148,  // JS 1.5 set pseudo keyword\n\n        CONST          = 149,  // JS 1.5 const keyword\n        SETCONST       = 150,\n        SETCONSTVAR    = 151,\n        DEBUGGER       = 152,\n        LAST_TOKEN     = 152,\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307;",
        "begin_line": 183,
        "end_line": 264,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.LAST_TOKEN",
        "snippet": "    public final static int\n        FIRST_ASSIGN   = ASSIGN,\n        LAST_ASSIGN    = ASSIGN_MOD,\n\n        HOOK           = 98, // conditional (?:)\n        COLON          = 99,\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment/decrement (++ --)\n        DEC            = 103,\n        DOT            = 104, // member operator (.)\n        FUNCTION       = 105, // function keyword\n        EXPORT         = 106, // export keyword\n        IMPORT         = 107, // import keyword\n        IF             = 108, // if keyword\n        ELSE           = 109, // else keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT        = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        FINALLY        = 121, // finally keyword\n        VOID           = 122, // void keyword\n        RESERVED       = 123, // reserved keywords\n\n        EMPTY          = 124,\n\n        /* types used for the parse tree - these never get returned\n         * by the scanner.\n         */\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        TARGET         = 127,\n        LOOP           = 128,\n        EXPR_VOID      = 129, // expression statement in functions\n        EXPR_RESULT    = 130, // expression statement in scripts\n        JSR            = 131,\n        SCRIPT         = 132, // top-level node for entire script\n        TYPEOFNAME     = 133, // for typeof(simple-name)\n        USE_STACK      = 134,\n        SETPROP_OP     = 135, // x.y op= something\n        SETELEM_OP     = 136, // x[y] op= something\n        LOCAL_BLOCK    = 137,\n        SET_REF_OP     = 138, // *reference op= something\n\n        // For XML support:\n        DOTDOT         = 139,  // member operator (..)\n        COLONCOLON     = 140,  // namespace::name\n        XML            = 141,  // XML type\n        DOTQUERY       = 142,  // .() -- e.g., x.emps.emp.(name == \"terry\")\n        XMLATTR        = 143,  // @\n        XMLEND         = 144,\n\n        // Optimizer-only-tokens\n        TO_OBJECT      = 145,\n        TO_DOUBLE      = 146,\n\n        GET            = 147,  // JS 1.5 get pseudo keyword\n        SET            = 148,  // JS 1.5 set pseudo keyword\n\n        CONST          = 149,  // JS 1.5 const keyword\n        SETCONST       = 150,\n        SETCONSTVAR    = 151,\n        DEBUGGER       = 152,\n        LAST_TOKEN     = 152,\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307;",
        "begin_line": 183,
        "end_line": 264,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.ANNOTATION",
        "snippet": "    public final static int\n        FIRST_ASSIGN   = ASSIGN,\n        LAST_ASSIGN    = ASSIGN_MOD,\n\n        HOOK           = 98, // conditional (?:)\n        COLON          = 99,\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment/decrement (++ --)\n        DEC            = 103,\n        DOT            = 104, // member operator (.)\n        FUNCTION       = 105, // function keyword\n        EXPORT         = 106, // export keyword\n        IMPORT         = 107, // import keyword\n        IF             = 108, // if keyword\n        ELSE           = 109, // else keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT        = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        FINALLY        = 121, // finally keyword\n        VOID           = 122, // void keyword\n        RESERVED       = 123, // reserved keywords\n\n        EMPTY          = 124,\n\n        /* types used for the parse tree - these never get returned\n         * by the scanner.\n         */\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        TARGET         = 127,\n        LOOP           = 128,\n        EXPR_VOID      = 129, // expression statement in functions\n        EXPR_RESULT    = 130, // expression statement in scripts\n        JSR            = 131,\n        SCRIPT         = 132, // top-level node for entire script\n        TYPEOFNAME     = 133, // for typeof(simple-name)\n        USE_STACK      = 134,\n        SETPROP_OP     = 135, // x.y op= something\n        SETELEM_OP     = 136, // x[y] op= something\n        LOCAL_BLOCK    = 137,\n        SET_REF_OP     = 138, // *reference op= something\n\n        // For XML support:\n        DOTDOT         = 139,  // member operator (..)\n        COLONCOLON     = 140,  // namespace::name\n        XML            = 141,  // XML type\n        DOTQUERY       = 142,  // .() -- e.g., x.emps.emp.(name == \"terry\")\n        XMLATTR        = 143,  // @\n        XMLEND         = 144,\n\n        // Optimizer-only-tokens\n        TO_OBJECT      = 145,\n        TO_DOUBLE      = 146,\n\n        GET            = 147,  // JS 1.5 get pseudo keyword\n        SET            = 148,  // JS 1.5 set pseudo keyword\n\n        CONST          = 149,  // JS 1.5 const keyword\n        SETCONST       = 150,\n        SETCONSTVAR    = 151,\n        DEBUGGER       = 152,\n        LAST_TOKEN     = 152,\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307;",
        "begin_line": 183,
        "end_line": 264,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.PIPE",
        "snippet": "    public final static int\n        FIRST_ASSIGN   = ASSIGN,\n        LAST_ASSIGN    = ASSIGN_MOD,\n\n        HOOK           = 98, // conditional (?:)\n        COLON          = 99,\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment/decrement (++ --)\n        DEC            = 103,\n        DOT            = 104, // member operator (.)\n        FUNCTION       = 105, // function keyword\n        EXPORT         = 106, // export keyword\n        IMPORT         = 107, // import keyword\n        IF             = 108, // if keyword\n        ELSE           = 109, // else keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT        = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        FINALLY        = 121, // finally keyword\n        VOID           = 122, // void keyword\n        RESERVED       = 123, // reserved keywords\n\n        EMPTY          = 124,\n\n        /* types used for the parse tree - these never get returned\n         * by the scanner.\n         */\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        TARGET         = 127,\n        LOOP           = 128,\n        EXPR_VOID      = 129, // expression statement in functions\n        EXPR_RESULT    = 130, // expression statement in scripts\n        JSR            = 131,\n        SCRIPT         = 132, // top-level node for entire script\n        TYPEOFNAME     = 133, // for typeof(simple-name)\n        USE_STACK      = 134,\n        SETPROP_OP     = 135, // x.y op= something\n        SETELEM_OP     = 136, // x[y] op= something\n        LOCAL_BLOCK    = 137,\n        SET_REF_OP     = 138, // *reference op= something\n\n        // For XML support:\n        DOTDOT         = 139,  // member operator (..)\n        COLONCOLON     = 140,  // namespace::name\n        XML            = 141,  // XML type\n        DOTQUERY       = 142,  // .() -- e.g., x.emps.emp.(name == \"terry\")\n        XMLATTR        = 143,  // @\n        XMLEND         = 144,\n\n        // Optimizer-only-tokens\n        TO_OBJECT      = 145,\n        TO_DOUBLE      = 146,\n\n        GET            = 147,  // JS 1.5 get pseudo keyword\n        SET            = 148,  // JS 1.5 set pseudo keyword\n\n        CONST          = 149,  // JS 1.5 const keyword\n        SETCONST       = 150,\n        SETCONSTVAR    = 151,\n        DEBUGGER       = 152,\n        LAST_TOKEN     = 152,\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307;",
        "begin_line": 183,
        "end_line": 264,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.STAR",
        "snippet": "    public final static int\n        FIRST_ASSIGN   = ASSIGN,\n        LAST_ASSIGN    = ASSIGN_MOD,\n\n        HOOK           = 98, // conditional (?:)\n        COLON          = 99,\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment/decrement (++ --)\n        DEC            = 103,\n        DOT            = 104, // member operator (.)\n        FUNCTION       = 105, // function keyword\n        EXPORT         = 106, // export keyword\n        IMPORT         = 107, // import keyword\n        IF             = 108, // if keyword\n        ELSE           = 109, // else keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT        = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        FINALLY        = 121, // finally keyword\n        VOID           = 122, // void keyword\n        RESERVED       = 123, // reserved keywords\n\n        EMPTY          = 124,\n\n        /* types used for the parse tree - these never get returned\n         * by the scanner.\n         */\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        TARGET         = 127,\n        LOOP           = 128,\n        EXPR_VOID      = 129, // expression statement in functions\n        EXPR_RESULT    = 130, // expression statement in scripts\n        JSR            = 131,\n        SCRIPT         = 132, // top-level node for entire script\n        TYPEOFNAME     = 133, // for typeof(simple-name)\n        USE_STACK      = 134,\n        SETPROP_OP     = 135, // x.y op= something\n        SETELEM_OP     = 136, // x[y] op= something\n        LOCAL_BLOCK    = 137,\n        SET_REF_OP     = 138, // *reference op= something\n\n        // For XML support:\n        DOTDOT         = 139,  // member operator (..)\n        COLONCOLON     = 140,  // namespace::name\n        XML            = 141,  // XML type\n        DOTQUERY       = 142,  // .() -- e.g., x.emps.emp.(name == \"terry\")\n        XMLATTR        = 143,  // @\n        XMLEND         = 144,\n\n        // Optimizer-only-tokens\n        TO_OBJECT      = 145,\n        TO_DOUBLE      = 146,\n\n        GET            = 147,  // JS 1.5 get pseudo keyword\n        SET            = 148,  // JS 1.5 set pseudo keyword\n\n        CONST          = 149,  // JS 1.5 const keyword\n        SETCONST       = 150,\n        SETCONSTVAR    = 151,\n        DEBUGGER       = 152,\n        LAST_TOKEN     = 152,\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307;",
        "begin_line": 183,
        "end_line": 264,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.EOC",
        "snippet": "    public final static int\n        FIRST_ASSIGN   = ASSIGN,\n        LAST_ASSIGN    = ASSIGN_MOD,\n\n        HOOK           = 98, // conditional (?:)\n        COLON          = 99,\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment/decrement (++ --)\n        DEC            = 103,\n        DOT            = 104, // member operator (.)\n        FUNCTION       = 105, // function keyword\n        EXPORT         = 106, // export keyword\n        IMPORT         = 107, // import keyword\n        IF             = 108, // if keyword\n        ELSE           = 109, // else keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT        = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        FINALLY        = 121, // finally keyword\n        VOID           = 122, // void keyword\n        RESERVED       = 123, // reserved keywords\n\n        EMPTY          = 124,\n\n        /* types used for the parse tree - these never get returned\n         * by the scanner.\n         */\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        TARGET         = 127,\n        LOOP           = 128,\n        EXPR_VOID      = 129, // expression statement in functions\n        EXPR_RESULT    = 130, // expression statement in scripts\n        JSR            = 131,\n        SCRIPT         = 132, // top-level node for entire script\n        TYPEOFNAME     = 133, // for typeof(simple-name)\n        USE_STACK      = 134,\n        SETPROP_OP     = 135, // x.y op= something\n        SETELEM_OP     = 136, // x[y] op= something\n        LOCAL_BLOCK    = 137,\n        SET_REF_OP     = 138, // *reference op= something\n\n        // For XML support:\n        DOTDOT         = 139,  // member operator (..)\n        COLONCOLON     = 140,  // namespace::name\n        XML            = 141,  // XML type\n        DOTQUERY       = 142,  // .() -- e.g., x.emps.emp.(name == \"terry\")\n        XMLATTR        = 143,  // @\n        XMLEND         = 144,\n\n        // Optimizer-only-tokens\n        TO_OBJECT      = 145,\n        TO_DOUBLE      = 146,\n\n        GET            = 147,  // JS 1.5 get pseudo keyword\n        SET            = 148,  // JS 1.5 set pseudo keyword\n\n        CONST          = 149,  // JS 1.5 const keyword\n        SETCONST       = 150,\n        SETCONSTVAR    = 151,\n        DEBUGGER       = 152,\n        LAST_TOKEN     = 152,\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307;",
        "begin_line": 183,
        "end_line": 264,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.QMARK",
        "snippet": "    public final static int\n        FIRST_ASSIGN   = ASSIGN,\n        LAST_ASSIGN    = ASSIGN_MOD,\n\n        HOOK           = 98, // conditional (?:)\n        COLON          = 99,\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment/decrement (++ --)\n        DEC            = 103,\n        DOT            = 104, // member operator (.)\n        FUNCTION       = 105, // function keyword\n        EXPORT         = 106, // export keyword\n        IMPORT         = 107, // import keyword\n        IF             = 108, // if keyword\n        ELSE           = 109, // else keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT        = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        FINALLY        = 121, // finally keyword\n        VOID           = 122, // void keyword\n        RESERVED       = 123, // reserved keywords\n\n        EMPTY          = 124,\n\n        /* types used for the parse tree - these never get returned\n         * by the scanner.\n         */\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        TARGET         = 127,\n        LOOP           = 128,\n        EXPR_VOID      = 129, // expression statement in functions\n        EXPR_RESULT    = 130, // expression statement in scripts\n        JSR            = 131,\n        SCRIPT         = 132, // top-level node for entire script\n        TYPEOFNAME     = 133, // for typeof(simple-name)\n        USE_STACK      = 134,\n        SETPROP_OP     = 135, // x.y op= something\n        SETELEM_OP     = 136, // x[y] op= something\n        LOCAL_BLOCK    = 137,\n        SET_REF_OP     = 138, // *reference op= something\n\n        // For XML support:\n        DOTDOT         = 139,  // member operator (..)\n        COLONCOLON     = 140,  // namespace::name\n        XML            = 141,  // XML type\n        DOTQUERY       = 142,  // .() -- e.g., x.emps.emp.(name == \"terry\")\n        XMLATTR        = 143,  // @\n        XMLEND         = 144,\n\n        // Optimizer-only-tokens\n        TO_OBJECT      = 145,\n        TO_DOUBLE      = 146,\n\n        GET            = 147,  // JS 1.5 get pseudo keyword\n        SET            = 148,  // JS 1.5 set pseudo keyword\n\n        CONST          = 149,  // JS 1.5 const keyword\n        SETCONST       = 150,\n        SETCONSTVAR    = 151,\n        DEBUGGER       = 152,\n        LAST_TOKEN     = 152,\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307;",
        "begin_line": 183,
        "end_line": 264,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.ELLIPSIS",
        "snippet": "    public final static int\n        FIRST_ASSIGN   = ASSIGN,\n        LAST_ASSIGN    = ASSIGN_MOD,\n\n        HOOK           = 98, // conditional (?:)\n        COLON          = 99,\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment/decrement (++ --)\n        DEC            = 103,\n        DOT            = 104, // member operator (.)\n        FUNCTION       = 105, // function keyword\n        EXPORT         = 106, // export keyword\n        IMPORT         = 107, // import keyword\n        IF             = 108, // if keyword\n        ELSE           = 109, // else keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT        = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        FINALLY        = 121, // finally keyword\n        VOID           = 122, // void keyword\n        RESERVED       = 123, // reserved keywords\n\n        EMPTY          = 124,\n\n        /* types used for the parse tree - these never get returned\n         * by the scanner.\n         */\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        TARGET         = 127,\n        LOOP           = 128,\n        EXPR_VOID      = 129, // expression statement in functions\n        EXPR_RESULT    = 130, // expression statement in scripts\n        JSR            = 131,\n        SCRIPT         = 132, // top-level node for entire script\n        TYPEOFNAME     = 133, // for typeof(simple-name)\n        USE_STACK      = 134,\n        SETPROP_OP     = 135, // x.y op= something\n        SETELEM_OP     = 136, // x[y] op= something\n        LOCAL_BLOCK    = 137,\n        SET_REF_OP     = 138, // *reference op= something\n\n        // For XML support:\n        DOTDOT         = 139,  // member operator (..)\n        COLONCOLON     = 140,  // namespace::name\n        XML            = 141,  // XML type\n        DOTQUERY       = 142,  // .() -- e.g., x.emps.emp.(name == \"terry\")\n        XMLATTR        = 143,  // @\n        XMLEND         = 144,\n\n        // Optimizer-only-tokens\n        TO_OBJECT      = 145,\n        TO_DOUBLE      = 146,\n\n        GET            = 147,  // JS 1.5 get pseudo keyword\n        SET            = 148,  // JS 1.5 set pseudo keyword\n\n        CONST          = 149,  // JS 1.5 const keyword\n        SETCONST       = 150,\n        SETCONSTVAR    = 151,\n        DEBUGGER       = 152,\n        LAST_TOKEN     = 152,\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307;",
        "begin_line": 183,
        "end_line": 264,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.BANG",
        "snippet": "    public final static int\n        FIRST_ASSIGN   = ASSIGN,\n        LAST_ASSIGN    = ASSIGN_MOD,\n\n        HOOK           = 98, // conditional (?:)\n        COLON          = 99,\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment/decrement (++ --)\n        DEC            = 103,\n        DOT            = 104, // member operator (.)\n        FUNCTION       = 105, // function keyword\n        EXPORT         = 106, // export keyword\n        IMPORT         = 107, // import keyword\n        IF             = 108, // if keyword\n        ELSE           = 109, // else keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT        = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        FINALLY        = 121, // finally keyword\n        VOID           = 122, // void keyword\n        RESERVED       = 123, // reserved keywords\n\n        EMPTY          = 124,\n\n        /* types used for the parse tree - these never get returned\n         * by the scanner.\n         */\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        TARGET         = 127,\n        LOOP           = 128,\n        EXPR_VOID      = 129, // expression statement in functions\n        EXPR_RESULT    = 130, // expression statement in scripts\n        JSR            = 131,\n        SCRIPT         = 132, // top-level node for entire script\n        TYPEOFNAME     = 133, // for typeof(simple-name)\n        USE_STACK      = 134,\n        SETPROP_OP     = 135, // x.y op= something\n        SETELEM_OP     = 136, // x[y] op= something\n        LOCAL_BLOCK    = 137,\n        SET_REF_OP     = 138, // *reference op= something\n\n        // For XML support:\n        DOTDOT         = 139,  // member operator (..)\n        COLONCOLON     = 140,  // namespace::name\n        XML            = 141,  // XML type\n        DOTQUERY       = 142,  // .() -- e.g., x.emps.emp.(name == \"terry\")\n        XMLATTR        = 143,  // @\n        XMLEND         = 144,\n\n        // Optimizer-only-tokens\n        TO_OBJECT      = 145,\n        TO_DOUBLE      = 146,\n\n        GET            = 147,  // JS 1.5 get pseudo keyword\n        SET            = 148,  // JS 1.5 set pseudo keyword\n\n        CONST          = 149,  // JS 1.5 const keyword\n        SETCONST       = 150,\n        SETCONSTVAR    = 151,\n        DEBUGGER       = 152,\n        LAST_TOKEN     = 152,\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307;",
        "begin_line": 183,
        "end_line": 264,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.EQUALS",
        "snippet": "    public final static int\n        FIRST_ASSIGN   = ASSIGN,\n        LAST_ASSIGN    = ASSIGN_MOD,\n\n        HOOK           = 98, // conditional (?:)\n        COLON          = 99,\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment/decrement (++ --)\n        DEC            = 103,\n        DOT            = 104, // member operator (.)\n        FUNCTION       = 105, // function keyword\n        EXPORT         = 106, // export keyword\n        IMPORT         = 107, // import keyword\n        IF             = 108, // if keyword\n        ELSE           = 109, // else keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT        = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        FINALLY        = 121, // finally keyword\n        VOID           = 122, // void keyword\n        RESERVED       = 123, // reserved keywords\n\n        EMPTY          = 124,\n\n        /* types used for the parse tree - these never get returned\n         * by the scanner.\n         */\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        TARGET         = 127,\n        LOOP           = 128,\n        EXPR_VOID      = 129, // expression statement in functions\n        EXPR_RESULT    = 130, // expression statement in scripts\n        JSR            = 131,\n        SCRIPT         = 132, // top-level node for entire script\n        TYPEOFNAME     = 133, // for typeof(simple-name)\n        USE_STACK      = 134,\n        SETPROP_OP     = 135, // x.y op= something\n        SETELEM_OP     = 136, // x[y] op= something\n        LOCAL_BLOCK    = 137,\n        SET_REF_OP     = 138, // *reference op= something\n\n        // For XML support:\n        DOTDOT         = 139,  // member operator (..)\n        COLONCOLON     = 140,  // namespace::name\n        XML            = 141,  // XML type\n        DOTQUERY       = 142,  // .() -- e.g., x.emps.emp.(name == \"terry\")\n        XMLATTR        = 143,  // @\n        XMLEND         = 144,\n\n        // Optimizer-only-tokens\n        TO_OBJECT      = 145,\n        TO_DOUBLE      = 146,\n\n        GET            = 147,  // JS 1.5 get pseudo keyword\n        SET            = 148,  // JS 1.5 set pseudo keyword\n\n        CONST          = 149,  // JS 1.5 const keyword\n        SETCONST       = 150,\n        SETCONSTVAR    = 151,\n        DEBUGGER       = 152,\n        LAST_TOKEN     = 152,\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307;",
        "begin_line": 183,
        "end_line": 264,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.ObjToIntMap",
        "src_path": "src/com/google/javascript/rhino/ObjToIntMap.java",
        "signature": "com.google.javascript.rhino.ObjToIntMap.serialVersionUID",
        "snippet": "    static final long serialVersionUID = -1542220580748809402L;",
        "begin_line": 58,
        "end_line": 58,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Iterator",
        "src_path": "src/com/google/javascript/rhino/ObjToIntMap.java",
        "signature": "com.google.javascript.rhino.Iterator.master",
        "snippet": "        ObjToIntMap master;",
        "begin_line": 117,
        "end_line": 117,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Iterator",
        "src_path": "src/com/google/javascript/rhino/ObjToIntMap.java",
        "signature": "com.google.javascript.rhino.Iterator.cursor",
        "snippet": "        private int cursor;",
        "begin_line": 118,
        "end_line": 118,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Iterator",
        "src_path": "src/com/google/javascript/rhino/ObjToIntMap.java",
        "signature": "com.google.javascript.rhino.Iterator.remaining",
        "snippet": "        private int remaining;",
        "begin_line": 119,
        "end_line": 119,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Iterator",
        "src_path": "src/com/google/javascript/rhino/ObjToIntMap.java",
        "signature": "com.google.javascript.rhino.Iterator.keys",
        "snippet": "        private Object[] keys;",
        "begin_line": 120,
        "end_line": 120,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Iterator",
        "src_path": "src/com/google/javascript/rhino/ObjToIntMap.java",
        "signature": "com.google.javascript.rhino.Iterator.values",
        "snippet": "        private int[] values;",
        "begin_line": 121,
        "end_line": 121,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.ObjToIntMap",
        "src_path": "src/com/google/javascript/rhino/ObjToIntMap.java",
        "signature": "com.google.javascript.rhino.ObjToIntMap.A",
        "snippet": "    private static final int A = 0x9e3779b9;",
        "begin_line": 464,
        "end_line": 464,
        "comment": " See Knuth etc."
    },
    {
        "class_name": "com.google.javascript.rhino.ObjToIntMap",
        "src_path": "src/com/google/javascript/rhino/ObjToIntMap.java",
        "signature": "com.google.javascript.rhino.ObjToIntMap.DELETED",
        "snippet": "    private static final Object DELETED = new Object();",
        "begin_line": 466,
        "end_line": 466,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.ObjToIntMap",
        "src_path": "src/com/google/javascript/rhino/ObjToIntMap.java",
        "signature": "com.google.javascript.rhino.ObjToIntMap.keys",
        "snippet": "    private transient Object[] keys;",
        "begin_line": 473,
        "end_line": 473,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.ObjToIntMap",
        "src_path": "src/com/google/javascript/rhino/ObjToIntMap.java",
        "signature": "com.google.javascript.rhino.ObjToIntMap.values",
        "snippet": "    private transient int[] values;",
        "begin_line": 474,
        "end_line": 474,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.ObjToIntMap",
        "src_path": "src/com/google/javascript/rhino/ObjToIntMap.java",
        "signature": "com.google.javascript.rhino.ObjToIntMap.power",
        "snippet": "    private int power;",
        "begin_line": 476,
        "end_line": 476,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.ObjToIntMap",
        "src_path": "src/com/google/javascript/rhino/ObjToIntMap.java",
        "signature": "com.google.javascript.rhino.ObjToIntMap.keyCount",
        "snippet": "    private int keyCount;",
        "begin_line": 477,
        "end_line": 477,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.ObjToIntMap",
        "src_path": "src/com/google/javascript/rhino/ObjToIntMap.java",
        "signature": "com.google.javascript.rhino.ObjToIntMap.occupiedCount",
        "snippet": "    private transient int occupiedCount; // == keyCount + deleted_count",
        "begin_line": 478,
        "end_line": 478,
        "comment": " == keyCount + deleted_count"
    },
    {
        "class_name": "com.google.javascript.rhino.ObjToIntMap",
        "src_path": "src/com/google/javascript/rhino/ObjToIntMap.java",
        "signature": "com.google.javascript.rhino.ObjToIntMap.check",
        "snippet": "    private static final boolean check = false;",
        "begin_line": 481,
        "end_line": 481,
        "comment": " If true, enables consitency checks"
    },
    {
        "class_name": "com.google.javascript.jscomp.PassFactory",
        "src_path": "src/com/google/javascript/jscomp/PassFactory.java",
        "signature": "com.google.javascript.jscomp.PassFactory.name",
        "snippet": "  private final String name;",
        "begin_line": 33,
        "end_line": 33,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.PassFactory",
        "src_path": "src/com/google/javascript/jscomp/PassFactory.java",
        "signature": "com.google.javascript.jscomp.PassFactory.isOneTimePass",
        "snippet": "  private final boolean isOneTimePass;",
        "begin_line": 34,
        "end_line": 34,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.PassFactory",
        "src_path": "src/com/google/javascript/jscomp/PassFactory.java",
        "signature": "com.google.javascript.jscomp.PassFactory.isCreated",
        "snippet": "  private boolean isCreated = false;",
        "begin_line": 35,
        "end_line": 35,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.LoggerErrorManager",
        "src_path": "src/com/google/javascript/jscomp/LoggerErrorManager.java",
        "signature": "com.google.javascript.jscomp.LoggerErrorManager.formatter",
        "snippet": "  private final MessageFormatter formatter;",
        "begin_line": 32,
        "end_line": 32,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.LoggerErrorManager",
        "src_path": "src/com/google/javascript/jscomp/LoggerErrorManager.java",
        "signature": "com.google.javascript.jscomp.LoggerErrorManager.logger",
        "snippet": "  private final Logger logger;",
        "begin_line": 33,
        "end_line": 33,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.FunctionType",
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
        "signature": "com.google.javascript.rhino.jstype.FunctionType.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 1L;",
        "begin_line": 69,
        "end_line": 69,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.FunctionType",
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
        "signature": "com.google.javascript.rhino.jstype.FunctionType.call",
        "snippet": "  private ArrowType call;",
        "begin_line": 80,
        "end_line": 80,
        "comment": "\n   * {@code [[Call]]} property.\n   "
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.FunctionType",
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
        "signature": "com.google.javascript.rhino.jstype.FunctionType.prototype",
        "snippet": "  private FunctionPrototypeType prototype;",
        "begin_line": 89,
        "end_line": 89,
        "comment": "\n   * The {@code prototype} property. This field is lazily initialized by\n   * {@code #getPrototype()}. The most important reason for lazily\n   * initializing this field is that there are cycles in the native types\n   * graph, so some prototypes must temporarily be {@code null} during\n   * the construction of the graph.\n   "
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.FunctionType",
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
        "signature": "com.google.javascript.rhino.jstype.FunctionType.kind",
        "snippet": "  private final Kind kind;",
        "begin_line": 95,
        "end_line": 95,
        "comment": "\n   * Whether a function is a constructor, an interface, or just an ordinary\n   * function.\n   "
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.FunctionType",
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
        "signature": "com.google.javascript.rhino.jstype.FunctionType.typeOfThis",
        "snippet": "  private ObjectType typeOfThis;",
        "begin_line": 100,
        "end_line": 100,
        "comment": "\n   * The type of {@code this} in the scope of this function.\n   "
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.FunctionType",
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
        "signature": "com.google.javascript.rhino.jstype.FunctionType.source",
        "snippet": "  private Node source;",
        "begin_line": 105,
        "end_line": 105,
        "comment": "\n   * The function node which this type represents. It may be {@code null}.\n   "
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.FunctionType",
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
        "signature": "com.google.javascript.rhino.jstype.FunctionType.implementedInterfaces",
        "snippet": "  private List<ObjectType> implementedInterfaces = ImmutableList.of();",
        "begin_line": 111,
        "end_line": 111,
        "comment": "\n   * The interfaces directly implemented by this function.\n   * It is only relevant for constructors. May not be {@code null}.\n   "
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.FunctionType",
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
        "signature": "com.google.javascript.rhino.jstype.FunctionType.subTypes",
        "snippet": "  private List<FunctionType> subTypes;",
        "begin_line": 117,
        "end_line": 117,
        "comment": "\n   * The types which are subtypes of this function. It is only relevant for\n   * constructors and may be {@code null}.\n   "
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.FunctionType",
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
        "signature": "com.google.javascript.rhino.jstype.FunctionType.templateTypeName",
        "snippet": "  private String templateTypeName;",
        "begin_line": 122,
        "end_line": 122,
        "comment": "\n   * The template type name. May be {@code null}.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.SymbolTable",
        "src_path": "src/com/google/javascript/jscomp/SymbolTable.java",
        "signature": "com.google.javascript.jscomp.SymbolTable.MISSING_VARIABLE",
        "snippet": "  static final DiagnosticType MISSING_VARIABLE =\n      DiagnosticType.error(\n          \"JSC_MISSING_VARIABLE\",\n          \"Missing variable name: {0}\");",
        "begin_line": 46,
        "end_line": 49,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.SymbolTable",
        "src_path": "src/com/google/javascript/jscomp/SymbolTable.java",
        "signature": "com.google.javascript.jscomp.SymbolTable.MOVED_VARIABLE",
        "snippet": "  static final DiagnosticType MOVED_VARIABLE =\n      DiagnosticType.error(\n          \"JSC_MOVED_VARIABLE\",\n          \"Moved variable name: {0}\");",
        "begin_line": 51,
        "end_line": 54,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.SymbolTable",
        "src_path": "src/com/google/javascript/jscomp/SymbolTable.java",
        "signature": "com.google.javascript.jscomp.SymbolTable.VARIABLE_COUNT_MISMATCH",
        "snippet": "  static final DiagnosticType VARIABLE_COUNT_MISMATCH =\n      DiagnosticType.error(\n          \"JSC_VARIABLE_COUNT_MISMATCH\",\n          \"Variable count does not match.\" +\n          \"\\nCached : {0}\\nActual : {1}\");",
        "begin_line": 56,
        "end_line": 60,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.SymbolTable",
        "src_path": "src/com/google/javascript/jscomp/SymbolTable.java",
        "signature": "com.google.javascript.jscomp.SymbolTable.SCOPE_MISMATCH",
        "snippet": "  static final DiagnosticType SCOPE_MISMATCH =\n      DiagnosticType.error(\n          \"JSC_SCOPE_MISMATCH\",\n          \"Scope roots used with the symbol table do not match.\" +\n          \"\\nExpected : {0}\\nActual : {1}\");",
        "begin_line": 62,
        "end_line": 66,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.SymbolTable",
        "src_path": "src/com/google/javascript/jscomp/SymbolTable.java",
        "signature": "com.google.javascript.jscomp.SymbolTable.compiler",
        "snippet": "  private final AbstractCompiler compiler;",
        "begin_line": 68,
        "end_line": 68,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.SymbolTable",
        "src_path": "src/com/google/javascript/jscomp/SymbolTable.java",
        "signature": "com.google.javascript.jscomp.SymbolTable.scopeCreator",
        "snippet": "  private final ScopeCreator scopeCreator;",
        "begin_line": 69,
        "end_line": 69,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.SymbolTable",
        "src_path": "src/com/google/javascript/jscomp/SymbolTable.java",
        "signature": "com.google.javascript.jscomp.SymbolTable.locked",
        "snippet": "  private boolean locked = false;",
        "begin_line": 73,
        "end_line": 73,
        "comment": " at a time."
    },
    {
        "class_name": "com.google.javascript.jscomp.SymbolTable",
        "src_path": "src/com/google/javascript/jscomp/SymbolTable.java",
        "signature": "com.google.javascript.jscomp.SymbolTable.cache",
        "snippet": "  private MemoizedData cache = null;",
        "begin_line": 77,
        "end_line": 77,
        "comment": " symbol table."
    },
    {
        "class_name": "com.google.javascript.jscomp.MemoizedData",
        "src_path": "src/com/google/javascript/jscomp/SymbolTable.java",
        "signature": "com.google.javascript.jscomp.MemoizedData.scopes",
        "snippet": "    private Map<Node, Scope> scopes = Maps.newHashMap();",
        "begin_line": 140,
        "end_line": 140,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.VerifyingCallback",
        "src_path": "src/com/google/javascript/jscomp/SymbolTable.java",
        "signature": "com.google.javascript.jscomp.VerifyingCallback.expectedScopes",
        "snippet": "    private final List<Scope> expectedScopes = Lists.newArrayList();",
        "begin_line": 163,
        "end_line": 163,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.VerifyingCallback",
        "src_path": "src/com/google/javascript/jscomp/SymbolTable.java",
        "signature": "com.google.javascript.jscomp.VerifyingCallback.actualScopes",
        "snippet": "    private final List<Scope> actualScopes = Lists.newArrayList();",
        "begin_line": 164,
        "end_line": 164,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.VerifyingCallback",
        "src_path": "src/com/google/javascript/jscomp/SymbolTable.java",
        "signature": "com.google.javascript.jscomp.VerifyingCallback.collectingExpected",
        "snippet": "    private boolean collectingExpected = true;",
        "begin_line": 165,
        "end_line": 165,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.VerifyingCallback",
        "src_path": "src/com/google/javascript/jscomp/SymbolTable.java",
        "signature": "com.google.javascript.jscomp.VerifyingCallback.actualRoot",
        "snippet": "    private final Node actualRoot;",
        "begin_line": 166,
        "end_line": 166,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.VerifyingCallback",
        "src_path": "src/com/google/javascript/jscomp/SymbolTable.java",
        "signature": "com.google.javascript.jscomp.VerifyingCallback.expectedRoot",
        "snippet": "    private final Node expectedRoot;",
        "begin_line": 167,
        "end_line": 167,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.PrototypeObjectType",
        "src_path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
        "signature": "com.google.javascript.rhino.jstype.PrototypeObjectType.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 1L;",
        "begin_line": 70,
        "end_line": 70,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.PrototypeObjectType",
        "src_path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
        "signature": "com.google.javascript.rhino.jstype.PrototypeObjectType.className",
        "snippet": "  private final String className;",
        "begin_line": 72,
        "end_line": 72,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.PrototypeObjectType",
        "src_path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
        "signature": "com.google.javascript.rhino.jstype.PrototypeObjectType.properties",
        "snippet": "  private final Map<String, Property> properties;",
        "begin_line": 73,
        "end_line": 73,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.PrototypeObjectType",
        "src_path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
        "signature": "com.google.javascript.rhino.jstype.PrototypeObjectType.implicitPrototype",
        "snippet": "  private ObjectType implicitPrototype;",
        "begin_line": 74,
        "end_line": 74,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.PrototypeObjectType",
        "src_path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
        "signature": "com.google.javascript.rhino.jstype.PrototypeObjectType.nativeType",
        "snippet": "  private final boolean nativeType;",
        "begin_line": 75,
        "end_line": 75,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.Property",
        "src_path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
        "signature": "com.google.javascript.rhino.jstype.Property.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 1L;",
        "begin_line": 418,
        "end_line": 418,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.Property",
        "src_path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
        "signature": "com.google.javascript.rhino.jstype.Property.type",
        "snippet": "    private JSType type;",
        "begin_line": 423,
        "end_line": 423,
        "comment": "\n     * Property's type.\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.Property",
        "src_path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
        "signature": "com.google.javascript.rhino.jstype.Property.inferred",
        "snippet": "    private final boolean inferred;",
        "begin_line": 428,
        "end_line": 428,
        "comment": "\n     * Whether the property's type is inferred.\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.Property",
        "src_path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
        "signature": "com.google.javascript.rhino.jstype.Property.inExterns",
        "snippet": "    private final boolean inExterns;",
        "begin_line": 433,
        "end_line": 433,
        "comment": "\n     * Whether the property is defined in the externs.\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.Property",
        "src_path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
        "signature": "com.google.javascript.rhino.jstype.Property.docInfo",
        "snippet": "    private JSDocInfo docInfo = null;",
        "begin_line": 436,
        "end_line": 436,
        "comment": "  The JSDocInfo for this property. "
    },
    {
        "class_name": "com.google.javascript.jscomp.RecentChange",
        "src_path": "src/com/google/javascript/jscomp/CodeChangeHandler.java",
        "signature": "com.google.javascript.jscomp.RecentChange.hasChanged",
        "snippet": "    private boolean hasChanged = false;",
        "begin_line": 36,
        "end_line": 36,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.FoldConstants",
        "src_path": "src/com/google/javascript/jscomp/FoldConstants.java",
        "signature": "com.google.javascript.jscomp.FoldConstants.DIVIDE_BY_0_ERROR",
        "snippet": "  static final DiagnosticType DIVIDE_BY_0_ERROR = DiagnosticType.error(\n      \"JSC_DIVIDE_BY_0_ERROR\",\n      \"Divide by 0\");",
        "begin_line": 40,
        "end_line": 42,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.FoldConstants",
        "src_path": "src/com/google/javascript/jscomp/FoldConstants.java",
        "signature": "com.google.javascript.jscomp.FoldConstants.INVALID_GETELEM_INDEX_ERROR",
        "snippet": "  static final DiagnosticType INVALID_GETELEM_INDEX_ERROR =\n      DiagnosticType.error(\n          \"JSC_INVALID_GETELEM_INDEX_ERROR\",\n          \"Array index not integer: {0}\");",
        "begin_line": 44,
        "end_line": 47,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.FoldConstants",
        "src_path": "src/com/google/javascript/jscomp/FoldConstants.java",
        "signature": "com.google.javascript.jscomp.FoldConstants.INDEX_OUT_OF_BOUNDS_ERROR",
        "snippet": "  static final DiagnosticType INDEX_OUT_OF_BOUNDS_ERROR =\n      DiagnosticType.error(\n          \"JSC_INDEX_OUT_OF_BOUNDS_ERROR\",\n          \"Array index out of bounds: {0}\");",
        "begin_line": 49,
        "end_line": 52,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.FoldConstants",
        "src_path": "src/com/google/javascript/jscomp/FoldConstants.java",
        "signature": "com.google.javascript.jscomp.FoldConstants.NEGATING_A_NON_NUMBER_ERROR",
        "snippet": "  static final DiagnosticType NEGATING_A_NON_NUMBER_ERROR =\n      DiagnosticType.error(\n          \"JSC_NEGATING_A_NON_NUMBER_ERROR\",\n          \"Can't negate non-numeric value: {0}\");",
        "begin_line": 54,
        "end_line": 57,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.FoldConstants",
        "src_path": "src/com/google/javascript/jscomp/FoldConstants.java",
        "signature": "com.google.javascript.jscomp.FoldConstants.INVALID_REGULAR_EXPRESSION_FLAGS",
        "snippet": "  static final DiagnosticType INVALID_REGULAR_EXPRESSION_FLAGS =\n      DiagnosticType.error(\n          \"JSC_INVALID_REGULAR_EXPRESSION_FLAGS\",\n          \"Invalid flags to RegExp constructor: {0}\");",
        "begin_line": 59,
        "end_line": 62,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.FoldConstants",
        "src_path": "src/com/google/javascript/jscomp/FoldConstants.java",
        "signature": "com.google.javascript.jscomp.FoldConstants.BITWISE_OPERAND_OUT_OF_RANGE",
        "snippet": "  static final DiagnosticType BITWISE_OPERAND_OUT_OF_RANGE =\n      DiagnosticType.error(\n          \"JSC_BITWISE_OPERAND_OUT_OF_RANGE\",\n          \"Operand out of range, bitwise operation will lose information: {0}\");",
        "begin_line": 64,
        "end_line": 67,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.FoldConstants",
        "src_path": "src/com/google/javascript/jscomp/FoldConstants.java",
        "signature": "com.google.javascript.jscomp.FoldConstants.SHIFT_AMOUNT_OUT_OF_BOUNDS",
        "snippet": "  static final DiagnosticType SHIFT_AMOUNT_OUT_OF_BOUNDS = DiagnosticType.error(\n      \"JSC_SHIFT_AMOUNT_OUT_OF_BOUNDS\",\n      \"Shift amount out of bounds: {0}\");",
        "begin_line": 69,
        "end_line": 71,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.FoldConstants",
        "src_path": "src/com/google/javascript/jscomp/FoldConstants.java",
        "signature": "com.google.javascript.jscomp.FoldConstants.FRACTIONAL_BITWISE_OPERAND",
        "snippet": "  static final DiagnosticType FRACTIONAL_BITWISE_OPERAND = DiagnosticType.error(\n      \"JSC_FRACTIONAL_BITWISE_OPERAND\",\n      \"Fractional bitwise operand: {0}\");",
        "begin_line": 73,
        "end_line": 75,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.FoldConstants",
        "src_path": "src/com/google/javascript/jscomp/FoldConstants.java",
        "signature": "com.google.javascript.jscomp.FoldConstants.AND_PRECEDENCE",
        "snippet": "  private static final int AND_PRECEDENCE = NodeUtil.precedence(Token.AND);",
        "begin_line": 77,
        "end_line": 77,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.FoldConstants",
        "src_path": "src/com/google/javascript/jscomp/FoldConstants.java",
        "signature": "com.google.javascript.jscomp.FoldConstants.OR_PRECEDENCE",
        "snippet": "  private static final int OR_PRECEDENCE = NodeUtil.precedence(Token.OR);",
        "begin_line": 78,
        "end_line": 78,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.FoldConstants",
        "src_path": "src/com/google/javascript/jscomp/FoldConstants.java",
        "signature": "com.google.javascript.jscomp.FoldConstants.compiler",
        "snippet": "  private final AbstractCompiler compiler;",
        "begin_line": 80,
        "end_line": 80,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.FoldConstants",
        "src_path": "src/com/google/javascript/jscomp/FoldConstants.java",
        "signature": "com.google.javascript.jscomp.FoldConstants.REGEXP_FLAGS_RE",
        "snippet": "  private static final Pattern REGEXP_FLAGS_RE = Pattern.compile(\"^[gmi]*$\");",
        "begin_line": 1681,
        "end_line": 1681,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DiagnosticGroup",
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroup.java",
        "signature": "com.google.javascript.jscomp.DiagnosticGroup.types",
        "snippet": "  private final Set<DiagnosticType> types;",
        "begin_line": 36,
        "end_line": 36,
        "comment": " The set of types represented by this group, hashed by key."
    },
    {
        "class_name": "com.google.javascript.jscomp.DiagnosticGroup",
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroup.java",
        "signature": "com.google.javascript.jscomp.DiagnosticGroup.singletons",
        "snippet": "  private static final Map<DiagnosticType, DiagnosticGroup> singletons =\n      Maps.newHashMap();",
        "begin_line": 53,
        "end_line": 54,
        "comment": " DiagnosticGroups with only a single DiagnosticType."
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.FunctionPrototypeType",
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionPrototypeType.java",
        "signature": "com.google.javascript.rhino.jstype.FunctionPrototypeType.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 1L;",
        "begin_line": 53,
        "end_line": 53,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.FunctionPrototypeType",
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionPrototypeType.java",
        "signature": "com.google.javascript.rhino.jstype.FunctionPrototypeType.ownerFunction",
        "snippet": "  private final FunctionType ownerFunction;",
        "begin_line": 55,
        "end_line": 55,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.NoType",
        "src_path": "src/com/google/javascript/rhino/jstype/NoType.java",
        "signature": "com.google.javascript.rhino.jstype.NoType.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 1L;",
        "begin_line": 63,
        "end_line": 63,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.Config",
        "src_path": "src/com/google/javascript/jscomp/parsing/Config.java",
        "signature": "com.google.javascript.jscomp.parsing.Config.registry",
        "snippet": "  final JSTypeRegistry registry;",
        "begin_line": 34,
        "end_line": 34,
        "comment": "\n   * Central registry for type info.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.Config",
        "src_path": "src/com/google/javascript/jscomp/parsing/Config.java",
        "signature": "com.google.javascript.jscomp.parsing.Config.parseJsDocDocumentation",
        "snippet": "  final boolean parseJsDocDocumentation;",
        "begin_line": 39,
        "end_line": 39,
        "comment": "\n   * Whether to parse the descriptions of jsdoc comments.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.Config",
        "src_path": "src/com/google/javascript/jscomp/parsing/Config.java",
        "signature": "com.google.javascript.jscomp.parsing.Config.annotationWhitelist",
        "snippet": "  final Set<String> annotationWhitelist;",
        "begin_line": 45,
        "end_line": 45,
        "comment": "\n   * JSDoc annotations that should not be warned about, even if\n   * the parser doesn't know what to do with them otherwise.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.CodeGenerator",
        "src_path": "src/com/google/javascript/jscomp/CodeGenerator.java",
        "signature": "com.google.javascript.jscomp.CodeGenerator.HEX_CHARS",
        "snippet": "  private static final char[] HEX_CHARS\n      = { '0', '1', '2', '3', '4', '5', '6', '7',\n          '8', '9', 'a', 'b', 'c', 'd', 'e', 'f' };",
        "begin_line": 38,
        "end_line": 40,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CodeGenerator",
        "src_path": "src/com/google/javascript/jscomp/CodeGenerator.java",
        "signature": "com.google.javascript.jscomp.CodeGenerator.cc",
        "snippet": "  private final CodeConsumer cc;",
        "begin_line": 42,
        "end_line": 42,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CodeGenerator",
        "src_path": "src/com/google/javascript/jscomp/CodeGenerator.java",
        "signature": "com.google.javascript.jscomp.CodeGenerator.outputCharsetEncoder",
        "snippet": "  private final CharsetEncoder outputCharsetEncoder;",
        "begin_line": 44,
        "end_line": 44,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CodeGenerator",
        "src_path": "src/com/google/javascript/jscomp/CodeGenerator.java",
        "signature": "com.google.javascript.jscomp.CodeGenerator.validation",
        "snippet": "  private final boolean validation;",
        "begin_line": 49,
        "end_line": 49,
        "comment": " properly normalize the AST (JsMinimizer)."
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineCostEstimator",
        "src_path": "src/com/google/javascript/jscomp/InlineCostEstimator.java",
        "signature": "com.google.javascript.jscomp.InlineCostEstimator.ESTIMATED_IDENTIFIER",
        "snippet": "  private static final String ESTIMATED_IDENTIFIER = \"ab\";",
        "begin_line": 30,
        "end_line": 30,
        "comment": " For now simply assume identifiers are 2 characters."
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineCostEstimator",
        "src_path": "src/com/google/javascript/jscomp/InlineCostEstimator.java",
        "signature": "com.google.javascript.jscomp.InlineCostEstimator.ESTIMATED_IDENTIFIER_COST",
        "snippet": "  static final int ESTIMATED_IDENTIFIER_COST = ESTIMATED_IDENTIFIER.length();",
        "begin_line": 31,
        "end_line": 31,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CompiledSizeEstimator",
        "src_path": "src/com/google/javascript/jscomp/InlineCostEstimator.java",
        "signature": "com.google.javascript.jscomp.CompiledSizeEstimator.maxCost",
        "snippet": "    private int maxCost;",
        "begin_line": 57,
        "end_line": 57,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CompiledSizeEstimator",
        "src_path": "src/com/google/javascript/jscomp/InlineCostEstimator.java",
        "signature": "com.google.javascript.jscomp.CompiledSizeEstimator.cost",
        "snippet": "    private int cost = 0;",
        "begin_line": 58,
        "end_line": 58,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CompiledSizeEstimator",
        "src_path": "src/com/google/javascript/jscomp/InlineCostEstimator.java",
        "signature": "com.google.javascript.jscomp.CompiledSizeEstimator.last",
        "snippet": "    private char last = '\\0';",
        "begin_line": 59,
        "end_line": 59,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CompiledSizeEstimator",
        "src_path": "src/com/google/javascript/jscomp/InlineCostEstimator.java",
        "signature": "com.google.javascript.jscomp.CompiledSizeEstimator.continueProcessing",
        "snippet": "    private boolean continueProcessing = true;",
        "begin_line": 60,
        "end_line": 60,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.InstanceObjectType",
        "src_path": "src/com/google/javascript/rhino/jstype/InstanceObjectType.java",
        "signature": "com.google.javascript.rhino.jstype.InstanceObjectType.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 1L;",
        "begin_line": 55,
        "end_line": 55,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.InstanceObjectType",
        "src_path": "src/com/google/javascript/rhino/jstype/InstanceObjectType.java",
        "signature": "com.google.javascript.rhino.jstype.InstanceObjectType.constructor",
        "snippet": "  private final FunctionType constructor;",
        "begin_line": 57,
        "end_line": 57,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.UnionTypeBuilder",
        "src_path": "src/com/google/javascript/rhino/jstype/UnionTypeBuilder.java",
        "signature": "com.google.javascript.rhino.jstype.UnionTypeBuilder.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 1L;",
        "begin_line": 62,
        "end_line": 62,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.UnionTypeBuilder",
        "src_path": "src/com/google/javascript/rhino/jstype/UnionTypeBuilder.java",
        "signature": "com.google.javascript.rhino.jstype.UnionTypeBuilder.MAX_UNION_SIZE",
        "snippet": "  private static final int MAX_UNION_SIZE = 20;",
        "begin_line": 66,
        "end_line": 66,
        "comment": " then we should just give up and admit that we have no clue."
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.UnionTypeBuilder",
        "src_path": "src/com/google/javascript/rhino/jstype/UnionTypeBuilder.java",
        "signature": "com.google.javascript.rhino.jstype.UnionTypeBuilder.registry",
        "snippet": "  private final JSTypeRegistry registry;",
        "begin_line": 68,
        "end_line": 68,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.UnionTypeBuilder",
        "src_path": "src/com/google/javascript/rhino/jstype/UnionTypeBuilder.java",
        "signature": "com.google.javascript.rhino.jstype.UnionTypeBuilder.alternates",
        "snippet": "  private final List<JSType> alternates = Lists.newArrayList();",
        "begin_line": 69,
        "end_line": 69,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.UnionTypeBuilder",
        "src_path": "src/com/google/javascript/rhino/jstype/UnionTypeBuilder.java",
        "signature": "com.google.javascript.rhino.jstype.UnionTypeBuilder.isAllType",
        "snippet": "  private boolean isAllType = false;",
        "begin_line": 70,
        "end_line": 70,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.UnionTypeBuilder",
        "src_path": "src/com/google/javascript/rhino/jstype/UnionTypeBuilder.java",
        "signature": "com.google.javascript.rhino.jstype.UnionTypeBuilder.isNativeUnknownType",
        "snippet": "  private boolean isNativeUnknownType = false;",
        "begin_line": 71,
        "end_line": 71,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.UnionTypeBuilder",
        "src_path": "src/com/google/javascript/rhino/jstype/UnionTypeBuilder.java",
        "signature": "com.google.javascript.rhino.jstype.UnionTypeBuilder.areAllUnknownsChecked",
        "snippet": "  private boolean areAllUnknownsChecked = true;",
        "begin_line": 72,
        "end_line": 72,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.UnionTypeBuilder",
        "src_path": "src/com/google/javascript/rhino/jstype/UnionTypeBuilder.java",
        "signature": "com.google.javascript.rhino.jstype.UnionTypeBuilder.result",
        "snippet": "  private JSType result = null;",
        "begin_line": 75,
        "end_line": 75,
        "comment": " Memoize the result, in case build() is called multiple times."
    },
    {
        "class_name": "com.google.javascript.rhino.Context",
        "src_path": "src/com/google/javascript/rhino/Context.java",
        "signature": "com.google.javascript.rhino.Context.VERSION_UNKNOWN",
        "snippet": "    public static final int VERSION_UNKNOWN =   -1;",
        "begin_line": 80,
        "end_line": 80,
        "comment": "\n     * The unknown version.\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.Context",
        "src_path": "src/com/google/javascript/rhino/Context.java",
        "signature": "com.google.javascript.rhino.Context.VERSION_DEFAULT",
        "snippet": "    public static final int VERSION_DEFAULT =    0;",
        "begin_line": 85,
        "end_line": 85,
        "comment": "\n     * The default version.\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.Context",
        "src_path": "src/com/google/javascript/rhino/Context.java",
        "signature": "com.google.javascript.rhino.Context.VERSION_1_0",
        "snippet": "    public static final int VERSION_1_0 =      100;",
        "begin_line": 90,
        "end_line": 90,
        "comment": "\n     * JavaScript 1.0\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.Context",
        "src_path": "src/com/google/javascript/rhino/Context.java",
        "signature": "com.google.javascript.rhino.Context.VERSION_1_1",
        "snippet": "    public static final int VERSION_1_1 =      110;",
        "begin_line": 95,
        "end_line": 95,
        "comment": "\n     * JavaScript 1.1\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.Context",
        "src_path": "src/com/google/javascript/rhino/Context.java",
        "signature": "com.google.javascript.rhino.Context.VERSION_1_2",
        "snippet": "    public static final int VERSION_1_2 =      120;",
        "begin_line": 100,
        "end_line": 100,
        "comment": "\n     * JavaScript 1.2\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.Context",
        "src_path": "src/com/google/javascript/rhino/Context.java",
        "signature": "com.google.javascript.rhino.Context.VERSION_1_3",
        "snippet": "    public static final int VERSION_1_3 =      130;",
        "begin_line": 105,
        "end_line": 105,
        "comment": "\n     * JavaScript 1.3\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.Context",
        "src_path": "src/com/google/javascript/rhino/Context.java",
        "signature": "com.google.javascript.rhino.Context.VERSION_1_4",
        "snippet": "    public static final int VERSION_1_4 =      140;",
        "begin_line": 110,
        "end_line": 110,
        "comment": "\n     * JavaScript 1.4\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.Context",
        "src_path": "src/com/google/javascript/rhino/Context.java",
        "signature": "com.google.javascript.rhino.Context.VERSION_1_5",
        "snippet": "    public static final int VERSION_1_5 =      150;",
        "begin_line": 115,
        "end_line": 115,
        "comment": "\n     * JavaScript 1.5\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.Context",
        "src_path": "src/com/google/javascript/rhino/Context.java",
        "signature": "com.google.javascript.rhino.Context.VERSION_1_6",
        "snippet": "    public static final int VERSION_1_6 =      160;",
        "begin_line": 120,
        "end_line": 120,
        "comment": "\n     * JavaScript 1.5\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.Context",
        "src_path": "src/com/google/javascript/rhino/Context.java",
        "signature": "com.google.javascript.rhino.Context.FEATURE_NON_ECMA_GET_YEAR",
        "snippet": "    public static final int FEATURE_NON_ECMA_GET_YEAR = 1;",
        "begin_line": 129,
        "end_line": 129,
        "comment": "\n     * Controls behaviour of <tt>Date.prototype.getYear()</tt>.\n     * If <tt>hasFeature(FEATURE_NON_ECMA_GET_YEAR)</tt> returns true,\n     * Date.prototype.getYear subtructs 1900 only if 1900 <= date < 2000.\n     * The default behavior of {@link #hasFeature(int)} is always to subtruct\n     * 1900 as rquired by ECMAScript B.2.4.\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.Context",
        "src_path": "src/com/google/javascript/rhino/Context.java",
        "signature": "com.google.javascript.rhino.Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME",
        "snippet": "    public static final int FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME = 2;",
        "begin_line": 140,
        "end_line": 140,
        "comment": "\n     * Control if member expression as function name extension is available.\n     * If <tt>hasFeature(FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME)</tt> returns\n     * true, allow <tt>function memberExpression(args) { body }</tt> to be\n     * syntax sugar for <tt>memberExpression = function(args) { body }</tt>,\n     * when memberExpression is not a simple identifier.\n     * See ECMAScript-262, section 11.2 for definition of memberExpression.\n     * By default {@link #hasFeature(int)} returns false.\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.Context",
        "src_path": "src/com/google/javascript/rhino/Context.java",
        "signature": "com.google.javascript.rhino.Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER",
        "snippet": "    public static final int FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER = 3;",
        "begin_line": 150,
        "end_line": 150,
        "comment": "\n     * Control if reserved keywords are treated as identifiers.\n     * If <tt>hasFeature(RESERVED_KEYWORD_AS_IDENTIFIER)</tt> returns true,\n     * treat future reserved keyword (see  Ecma-262, section 7.5.3) as ordinary\n     * identifiers but warn about this usage.\n     *\n     * By default {@link #hasFeature(int)} returns false.\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.Context",
        "src_path": "src/com/google/javascript/rhino/Context.java",
        "signature": "com.google.javascript.rhino.Context.FEATURE_TO_STRING_AS_SOURCE",
        "snippet": "    public static final int FEATURE_TO_STRING_AS_SOURCE = 4;",
        "begin_line": 163,
        "end_line": 163,
        "comment": "\n     * Control if <tt>toString()</tt> should returns the same result\n     * as  <tt>toSource()</tt> when applied to objects and arrays.\n     * If <tt>hasFeature(FEATURE_TO_STRING_AS_SOURCE)</tt> returns true,\n     * calling <tt>toString()</tt> on JS objects gives the same result as\n     * calling <tt>toSource()</tt>. That is it returns JS source with code\n     * to create an object with all enumeratable fields of the original object.\n     * <p>\n     * By default {@link #hasFeature(int)} returns true only if\n     * the current JS version is set to {@link #VERSION_1_2}.\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.Context",
        "src_path": "src/com/google/javascript/rhino/Context.java",
        "signature": "com.google.javascript.rhino.Context.FEATURE_PARENT_PROTO_PROPRTIES",
        "snippet": "    public static final int FEATURE_PARENT_PROTO_PROPRTIES = 5;",
        "begin_line": 181,
        "end_line": 181,
        "comment": "\n     * Control if properties <tt>__proto__</tt> and <tt>__parent__</tt>\n     * are treated specially.\n     * If <tt>hasFeature(FEATURE_PARENT_PROTO_PROPRTIES)</tt> returns true,\n     * treat <tt>__parent__</tt> and <tt>__proto__</tt> as special properties.\n     * <p>\n     * The properties allow to query and set scope and prototype chains for the\n     * objects. The special meaning of the properties is available\n     * only when they are used as the right hand side of the dot operator.\n     * For example, while <tt>x.__proto__ = y</tt> changes the prototype\n     * chain of the object <tt>x</tt> to point to <tt>y</tt>,\n     * <tt>x[\"__proto__\"] = y</tt> simply assigns a new value to the property\n     * <tt>__proto__</tt> in <tt>x</tt> even when the feature is on.\n     *\n     * By default {@link #hasFeature(int)} returns true.\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.Context",
        "src_path": "src/com/google/javascript/rhino/Context.java",
        "signature": "com.google.javascript.rhino.Context.FEATURE_E4X",
        "snippet": "    public static final int FEATURE_E4X = 6;",
        "begin_line": 192,
        "end_line": 192,
        "comment": "\n     * Control if support for E4X(ECMAScript for XML) extension is available.\n     * If hasFeature(FEATURE_E4X) returns true, the XML syntax is available.\n     * <p>\n     * By default {@link #hasFeature(int)} returns true if\n     * the current JS version is set to {@link #VERSION_DEFAULT}\n     * or is greater then {@link #VERSION_1_6}.\n     * @since 1.6 Release 1\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.Context",
        "src_path": "src/com/google/javascript/rhino/Context.java",
        "signature": "com.google.javascript.rhino.Context.FEATURE_DYNAMIC_SCOPE",
        "snippet": "    public static final int FEATURE_DYNAMIC_SCOPE = 7;",
        "begin_line": 209,
        "end_line": 209,
        "comment": "\n     * Control if dynamic scope should be used for name access.\n     * If hasFeature(FEATURE_DYNAMIC_SCOPE) returns true, then the name lookup\n     * during name resolution will use the top scope of the script or function\n     * which is at the top of JS execution stack instead of the top scope of the\n     * script or function from the current stack frame if the top scope of\n     * the top stack frame contains the top scope of the current stack frame\n     * on its prototype chain.\n     * <p>\n     * This is useful to define shared scope containing functions that can\n     * be called from scripts and functions using private scopes.\n     * <p>\n     * By default {@link #hasFeature(int)} returns false.\n     * @since 1.6 Release 1\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.Context",
        "src_path": "src/com/google/javascript/rhino/Context.java",
        "signature": "com.google.javascript.rhino.Context.FEATURE_STRICT_VARS",
        "snippet": "    public static final int FEATURE_STRICT_VARS = 8;",
        "begin_line": 221,
        "end_line": 221,
        "comment": "\n     * Control if strict variable mode is enabled.\n     * When the feature is on Rhino reports runtime errors if assignment\n     * to a global variable that does not exist is executed. When the feature\n     * is off such assignments creates new variable in the global scope  as\n     * required by ECMA 262.\n     * <p>\n     * By default {@link #hasFeature(int)} returns false.\n     * @since 1.6 Release 1\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.Context",
        "src_path": "src/com/google/javascript/rhino/Context.java",
        "signature": "com.google.javascript.rhino.Context.FEATURE_STRICT_EVAL",
        "snippet": "    public static final int FEATURE_STRICT_EVAL = 9;",
        "begin_line": 233,
        "end_line": 233,
        "comment": "\n     * Control if strict eval mode is enabled.\n     * When the feature is on Rhino reports runtime errors if non-string\n     * argument is passed to the eval function. When the feature is off\n     * eval simply return non-string argument as is without performing any\n     * evaluation as required by ECMA 262.\n     * <p>\n     * By default {@link #hasFeature(int)} returns false.\n     * @since 1.6 Release 1\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.Context",
        "src_path": "src/com/google/javascript/rhino/Context.java",
        "signature": "com.google.javascript.rhino.Context.FEATURE_LOCATION_INFORMATION_IN_ERROR",
        "snippet": "    public static final int FEATURE_LOCATION_INFORMATION_IN_ERROR = 10;",
        "begin_line": 250,
        "end_line": 250,
        "comment": "\n     * When the feature is on Rhino will add a \"fileName\" and \"lineNumber\"\n     * properties to Error objects automatically. When the feature is off, you\n     * have to explicitly pass them as the second and third argument to the\n     * Error constructor. Note that neither behaviour is fully ECMA 262\n     * compliant (as 262 doesn't specify a three-arg constructor), but keeping\n     * the feature off results in Error objects that don't have\n     * additional non-ECMA properties when constructed using the ECMA-defined\n     * single-arg constructor and is thus desirable if a stricter ECMA\n     * compliance is desired, specifically adherence to the point 15.11.5. of\n     * the standard.\n     * <p>\n     * By default {@link #hasFeature(int)} returns false.\n     * @since 1.6 Release 6\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.Context",
        "src_path": "src/com/google/javascript/rhino/Context.java",
        "signature": "com.google.javascript.rhino.Context.FEATURE_STRICT_MODE",
        "snippet": "    public static final int FEATURE_STRICT_MODE = 11;",
        "begin_line": 261,
        "end_line": 261,
        "comment": "\n     * Controls whether JS 1.5 'strict mode' is enabled.\n     * When the feature is on, Rhino reports more than a dozen different\n     * warnings.  When the feature is off, these warnings are not generated.\n     * FEATURE_STRICT_MODE implies FEATURE_STRICT_VARS and FEATURE_STRICT_EVAL.\n     * <p>\n     * By default {@link #hasFeature(int)} returns false.\n     * @since 1.6 Release 6\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.Context",
        "src_path": "src/com/google/javascript/rhino/Context.java",
        "signature": "com.google.javascript.rhino.Context.FEATURE_WARNING_AS_ERROR",
        "snippet": "    public static final int FEATURE_WARNING_AS_ERROR = 12;",
        "begin_line": 267,
        "end_line": 267,
        "comment": "\n     * Controls whether a warning should be treated as an error.\n     * @since 1.6 Release 6\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.Context",
        "src_path": "src/com/google/javascript/rhino/Context.java",
        "signature": "com.google.javascript.rhino.Context.languageVersionProperty",
        "snippet": "    public static final String languageVersionProperty = \"language version\";",
        "begin_line": 269,
        "end_line": 269,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Context",
        "src_path": "src/com/google/javascript/rhino/Context.java",
        "signature": "com.google.javascript.rhino.Context.errorReporterProperty",
        "snippet": "    public static final String errorReporterProperty   = \"error reporter\";",
        "begin_line": 270,
        "end_line": 270,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Context",
        "src_path": "src/com/google/javascript/rhino/Context.java",
        "signature": "com.google.javascript.rhino.Context.emptyArgs",
        "snippet": "    public static final Object[] emptyArgs = ScriptRuntime.emptyArgs;",
        "begin_line": 275,
        "end_line": 275,
        "comment": "\n     * Convinient value to use as zero-length array of objects.\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.Context",
        "src_path": "src/com/google/javascript/rhino/Context.java",
        "signature": "com.google.javascript.rhino.Context.threadContexts",
        "snippet": "    private static ThreadLocal<Context> threadContexts\n        = new ThreadLocal<Context>();",
        "begin_line": 409,
        "end_line": 410,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Context",
        "src_path": "src/com/google/javascript/rhino/Context.java",
        "signature": "com.google.javascript.rhino.Context.implementationVersion",
        "snippet": "    private static String implementationVersion;",
        "begin_line": 1156,
        "end_line": 1156,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Context",
        "src_path": "src/com/google/javascript/rhino/Context.java",
        "signature": "com.google.javascript.rhino.Context.sealKey",
        "snippet": "    private Object sealKey;",
        "begin_line": 1159,
        "end_line": 1159,
        "comment": "     private boolean sealed;"
    },
    {
        "class_name": "com.google.javascript.rhino.Context",
        "src_path": "src/com/google/javascript/rhino/Context.java",
        "signature": "com.google.javascript.rhino.Context.iterating",
        "snippet": "    ObjToIntMap iterating;",
        "begin_line": 1164,
        "end_line": 1164,
        "comment": " Use ObjToIntMap instead of java.util.HashSet for JDK 1.1 compatibility"
    },
    {
        "class_name": "com.google.javascript.rhino.Context",
        "src_path": "src/com/google/javascript/rhino/Context.java",
        "signature": "com.google.javascript.rhino.Context.interpreterSecurityDomain",
        "snippet": "    Object interpreterSecurityDomain;",
        "begin_line": 1166,
        "end_line": 1166,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Context",
        "src_path": "src/com/google/javascript/rhino/Context.java",
        "signature": "com.google.javascript.rhino.Context.version",
        "snippet": "    int version;",
        "begin_line": 1168,
        "end_line": 1168,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Context",
        "src_path": "src/com/google/javascript/rhino/Context.java",
        "signature": "com.google.javascript.rhino.Context.errorReporter",
        "snippet": "    private ErrorReporter errorReporter;",
        "begin_line": 1170,
        "end_line": 1170,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Context",
        "src_path": "src/com/google/javascript/rhino/Context.java",
        "signature": "com.google.javascript.rhino.Context.locale",
        "snippet": "    private Locale locale;",
        "begin_line": 1171,
        "end_line": 1171,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Context",
        "src_path": "src/com/google/javascript/rhino/Context.java",
        "signature": "com.google.javascript.rhino.Context.generatingDebug",
        "snippet": "    private boolean generatingDebug;",
        "begin_line": 1172,
        "end_line": 1172,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Context",
        "src_path": "src/com/google/javascript/rhino/Context.java",
        "signature": "com.google.javascript.rhino.Context.generatingDebugChanged",
        "snippet": "    private boolean generatingDebugChanged;",
        "begin_line": 1173,
        "end_line": 1173,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Context",
        "src_path": "src/com/google/javascript/rhino/Context.java",
        "signature": "com.google.javascript.rhino.Context.generatingSource",
        "snippet": "    private boolean generatingSource=true;",
        "begin_line": 1174,
        "end_line": 1174,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Context",
        "src_path": "src/com/google/javascript/rhino/Context.java",
        "signature": "com.google.javascript.rhino.Context.compileFunctionsWithDynamicScopeFlag",
        "snippet": "    boolean compileFunctionsWithDynamicScopeFlag;",
        "begin_line": 1175,
        "end_line": 1175,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Context",
        "src_path": "src/com/google/javascript/rhino/Context.java",
        "signature": "com.google.javascript.rhino.Context.useDynamicScope",
        "snippet": "    boolean useDynamicScope;",
        "begin_line": 1176,
        "end_line": 1176,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Context",
        "src_path": "src/com/google/javascript/rhino/Context.java",
        "signature": "com.google.javascript.rhino.Context.debuggerData",
        "snippet": "    private Object debuggerData;",
        "begin_line": 1177,
        "end_line": 1177,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Context",
        "src_path": "src/com/google/javascript/rhino/Context.java",
        "signature": "com.google.javascript.rhino.Context.enterCount",
        "snippet": "    private int enterCount;",
        "begin_line": 1178,
        "end_line": 1178,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Context",
        "src_path": "src/com/google/javascript/rhino/Context.java",
        "signature": "com.google.javascript.rhino.Context.optimizationLevel",
        "snippet": "    private int optimizationLevel;",
        "begin_line": 1179,
        "end_line": 1179,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Context",
        "src_path": "src/com/google/javascript/rhino/Context.java",
        "signature": "com.google.javascript.rhino.Context.propertyListeners",
        "snippet": "    private Object propertyListeners;",
        "begin_line": 1180,
        "end_line": 1180,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Context",
        "src_path": "src/com/google/javascript/rhino/Context.java",
        "signature": "com.google.javascript.rhino.Context.hashtable",
        "snippet": "    private Hashtable<Object, Object> hashtable;",
        "begin_line": 1181,
        "end_line": 1181,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Context",
        "src_path": "src/com/google/javascript/rhino/Context.java",
        "signature": "com.google.javascript.rhino.Context.activationNames",
        "snippet": "    Hashtable<Object, Object> activationNames;",
        "begin_line": 1187,
        "end_line": 1187,
        "comment": "\n     * This is the list of names of objects forcing the creation of\n     * function activation records.\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.Context",
        "src_path": "src/com/google/javascript/rhino/Context.java",
        "signature": "com.google.javascript.rhino.Context.lastInterpreterFrame",
        "snippet": "    Object lastInterpreterFrame;",
        "begin_line": 1190,
        "end_line": 1190,
        "comment": " For the interpreter to store the last frame for error reports etc."
    },
    {
        "class_name": "com.google.javascript.rhino.Context",
        "src_path": "src/com/google/javascript/rhino/Context.java",
        "signature": "com.google.javascript.rhino.Context.previousInterpreterInvocations",
        "snippet": "    ObjArray previousInterpreterInvocations;",
        "begin_line": 1194,
        "end_line": 1194,
        "comment": " interpreter invocations"
    },
    {
        "class_name": "com.google.javascript.rhino.Context",
        "src_path": "src/com/google/javascript/rhino/Context.java",
        "signature": "com.google.javascript.rhino.Context.instructionCount",
        "snippet": "    int instructionCount;",
        "begin_line": 1197,
        "end_line": 1197,
        "comment": " For instruction counting (interpreter only)"
    },
    {
        "class_name": "com.google.javascript.rhino.Context",
        "src_path": "src/com/google/javascript/rhino/Context.java",
        "signature": "com.google.javascript.rhino.Context.instructionThreshold",
        "snippet": "    int instructionThreshold;",
        "begin_line": 1198,
        "end_line": 1198,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Context",
        "src_path": "src/com/google/javascript/rhino/Context.java",
        "signature": "com.google.javascript.rhino.Context.scratchIndex",
        "snippet": "    int scratchIndex;",
        "begin_line": 1201,
        "end_line": 1201,
        "comment": " It can be used to return the second index-like result from function"
    },
    {
        "class_name": "com.google.javascript.rhino.Context",
        "src_path": "src/com/google/javascript/rhino/Context.java",
        "signature": "com.google.javascript.rhino.Context.scratchUint32",
        "snippet": "    long scratchUint32;",
        "begin_line": 1204,
        "end_line": 1204,
        "comment": " It can be used to return the second uint32 result from function"
    },
    {
        "class_name": "com.google.javascript.jscomp.RhinoErrorReporter",
        "src_path": "src/com/google/javascript/jscomp/RhinoErrorReporter.java",
        "signature": "com.google.javascript.jscomp.RhinoErrorReporter.PARSE_ERROR",
        "snippet": "  static final DiagnosticType PARSE_ERROR =\n      DiagnosticType.error(\"JSC_PARSE_ERROR\", \"Parse error. {0}\");",
        "begin_line": 35,
        "end_line": 36,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.RhinoErrorReporter",
        "src_path": "src/com/google/javascript/jscomp/RhinoErrorReporter.java",
        "signature": "com.google.javascript.jscomp.RhinoErrorReporter.EXTRA_FILEOVERVIEW",
        "snippet": "  static final DiagnosticType EXTRA_FILEOVERVIEW =\n      DiagnosticType.warning(\"JSC_EXTRA_FILEOVERVIEW\", \"Parse error. {0}\");",
        "begin_line": 40,
        "end_line": 41,
        "comment": " warnings API."
    },
    {
        "class_name": "com.google.javascript.jscomp.RhinoErrorReporter",
        "src_path": "src/com/google/javascript/jscomp/RhinoErrorReporter.java",
        "signature": "com.google.javascript.jscomp.RhinoErrorReporter.TRAILING_COMMA",
        "snippet": "  static final DiagnosticType TRAILING_COMMA =\n      DiagnosticType.error(\"JSC_TRAILING_COMMA\", \"Parse error. {0}\");",
        "begin_line": 43,
        "end_line": 44,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.RhinoErrorReporter",
        "src_path": "src/com/google/javascript/jscomp/RhinoErrorReporter.java",
        "signature": "com.google.javascript.jscomp.RhinoErrorReporter.DUPLICATE_PARAM",
        "snippet": "  static final DiagnosticType DUPLICATE_PARAM =\n      DiagnosticType.error(\"JSC_DUPLICATE_PARAM\", \"Parse error. {0}\");",
        "begin_line": 46,
        "end_line": 47,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.RhinoErrorReporter",
        "src_path": "src/com/google/javascript/jscomp/RhinoErrorReporter.java",
        "signature": "com.google.javascript.jscomp.RhinoErrorReporter.BAD_JSDOC_ANNOTATION",
        "snippet": "  static final DiagnosticType BAD_JSDOC_ANNOTATION =\n    DiagnosticType.warning(\"JSC_BAD_JSDOC_ANNOTATION\", \"Parse error. {0}\");",
        "begin_line": 49,
        "end_line": 50,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.RhinoErrorReporter",
        "src_path": "src/com/google/javascript/jscomp/RhinoErrorReporter.java",
        "signature": "com.google.javascript.jscomp.RhinoErrorReporter.typeMap",
        "snippet": "  private final Map<String, DiagnosticType> typeMap;",
        "begin_line": 53,
        "end_line": 53,
        "comment": " A map of Rhino messages to their DiagnosticType."
    },
    {
        "class_name": "com.google.javascript.jscomp.RhinoErrorReporter",
        "src_path": "src/com/google/javascript/jscomp/RhinoErrorReporter.java",
        "signature": "com.google.javascript.jscomp.RhinoErrorReporter.compiler",
        "snippet": "  private final AbstractCompiler compiler;",
        "begin_line": 55,
        "end_line": 55,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.VoidType",
        "src_path": "src/com/google/javascript/rhino/jstype/VoidType.java",
        "signature": "com.google.javascript.rhino.jstype.VoidType.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 1L;",
        "begin_line": 52,
        "end_line": 52,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 7L;",
        "begin_line": 37,
        "end_line": 37,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.ideMode",
        "snippet": "  public boolean ideMode;",
        "begin_line": 51,
        "end_line": 51,
        "comment": "\n   * Configures the compiler for use as an IDE backend.  In this mode:\n   * <ul>\n   *  <li>No optimization passes will run.</li>\n   *  <li>The last time custom passes are invoked is\n   *      {@link CustomPassExecutionTime#BEFORE_OPTIMIZATIONS}</li>\n   *  <li>The compiler will always try to process all inputs fully, even\n   *      if it encounters errors.</li>\n   *  <li>The compiler may record more information than is strictly\n   *      needed for codegen.</li>\n   * </ul>\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.skipAllPasses",
        "snippet": "  boolean skipAllPasses;",
        "begin_line": 56,
        "end_line": 56,
        "comment": "\n   * Configures the compiler to skip as many passes as possible.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.nameAnonymousFunctionsOnly",
        "snippet": "  boolean nameAnonymousFunctionsOnly;",
        "begin_line": 61,
        "end_line": 61,
        "comment": "\n   * If true, name anonymous functions only. All others passes will be skipped.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.devMode",
        "snippet": "  DevMode devMode;",
        "begin_line": 67,
        "end_line": 67,
        "comment": "\n   * Configures the compiler to run expensive sanity checks after\n   * every pass. Only intended for internal development.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.checkSymbols",
        "snippet": "  public boolean checkSymbols;",
        "begin_line": 74,
        "end_line": 74,
        "comment": " Checks that all symbols are defined "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.checkShadowVars",
        "snippet": "  public CheckLevel checkShadowVars;",
        "begin_line": 80,
        "end_line": 80,
        "comment": "\n   * Checks that all variables with the @noshadow attribute are\n   * never shadowed.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.aggressiveVarCheck",
        "snippet": "  public CheckLevel aggressiveVarCheck;",
        "begin_line": 83,
        "end_line": 83,
        "comment": " Checks for suspicious variable definitions and undefined variables "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.checkFunctions",
        "snippet": "  public CheckLevel checkFunctions;",
        "begin_line": 86,
        "end_line": 86,
        "comment": " Checks function arity "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.checkMethods",
        "snippet": "  public CheckLevel checkMethods;",
        "begin_line": 89,
        "end_line": 89,
        "comment": " Checks method arity "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.checkDuplicateMessages",
        "snippet": "  public boolean checkDuplicateMessages;",
        "begin_line": 92,
        "end_line": 92,
        "comment": " Makes sure no duplicate messages "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.allowLegacyJsMessages",
        "snippet": "  public boolean allowLegacyJsMessages;",
        "begin_line": 95,
        "end_line": 95,
        "comment": " Allows old deprecated js message style "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.strictMessageReplacement",
        "snippet": "  public boolean strictMessageReplacement;",
        "begin_line": 101,
        "end_line": 101,
        "comment": "\n   * Whether we should throw an exception in case if the message absent from a\n   * bundle.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.checkSuspiciousCode",
        "snippet": "  public boolean checkSuspiciousCode;",
        "begin_line": 104,
        "end_line": 104,
        "comment": " Checks for suspicious statements that have no effect "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.checkControlStructures",
        "snippet": "  public boolean checkControlStructures;",
        "begin_line": 107,
        "end_line": 107,
        "comment": " Checks for invalid control structures "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.checkUndefinedProperties",
        "snippet": "  public CheckLevel checkUndefinedProperties;",
        "begin_line": 110,
        "end_line": 110,
        "comment": " Checks for non-extern properties that are read but never set. "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.checkUnusedPropertiesEarly",
        "snippet": "  public boolean checkUnusedPropertiesEarly;",
        "begin_line": 119,
        "end_line": 119,
        "comment": "\n   * Checks for non-extern properties that are written but never read.\n   * This check occurs after the first constant-based dead code removal pass,\n   * but before the main optimization loop.  This is noisy if you are\n   * including libraries with methods that you don't use, so it is off by\n   * default.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.checkTypes",
        "snippet": "  public boolean checkTypes;",
        "begin_line": 122,
        "end_line": 122,
        "comment": " Checks types on expressions "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.tightenTypes",
        "snippet": "  public boolean tightenTypes;",
        "begin_line": 125,
        "end_line": 125,
        "comment": " Tightens types based on a global analysis. "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.inferTypesInGlobalScope",
        "snippet": "  public boolean inferTypesInGlobalScope;",
        "begin_line": 130,
        "end_line": 130,
        "comment": " Runs a flow sensitive type inference in the global scope "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.checkTypedPropertyCalls",
        "snippet": "  public boolean checkTypedPropertyCalls;",
        "begin_line": 133,
        "end_line": 133,
        "comment": " Checks for inexistant property calls "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.reportMissingOverride",
        "snippet": "  public CheckLevel reportMissingOverride;",
        "begin_line": 139,
        "end_line": 139,
        "comment": "\n   * Flags a warning if a property is missing the @override annotation, but it\n   * overrides a base class property.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.reportUnknownTypes",
        "snippet": "  public CheckLevel reportUnknownTypes;",
        "begin_line": 142,
        "end_line": 142,
        "comment": " Flags a warning for every node whose type could not be determined. "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.checkRequires",
        "snippet": "  public CheckLevel checkRequires;",
        "begin_line": 145,
        "end_line": 145,
        "comment": " Checks for missing goog.require() calls *"
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.checkProvides",
        "snippet": "  public CheckLevel checkProvides;",
        "begin_line": 148,
        "end_line": 148,
        "comment": " Checks for missing goog.provides() calls *"
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.checkGlobalNamesLevel",
        "snippet": "  public CheckLevel checkGlobalNamesLevel;",
        "begin_line": 154,
        "end_line": 154,
        "comment": "\n   * Checks the integrity of references to qualified global names.\n   * (e.g. \"a.b\")\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.brokenClosureRequiresLevel",
        "snippet": "  public CheckLevel brokenClosureRequiresLevel;",
        "begin_line": 157,
        "end_line": 157,
        "comment": " Sets the check level for bad Closure require calls. "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.checkGlobalThisLevel",
        "snippet": "  public CheckLevel checkGlobalThisLevel;",
        "begin_line": 164,
        "end_line": 164,
        "comment": "\n   * Checks for certain uses of the {@code this} keyword that are considered\n   * unsafe because they are likely to reference the global {@code this}\n   * object unintentionally.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.checkMissingGetCssNameLevel",
        "snippet": "  public CheckLevel checkMissingGetCssNameLevel;",
        "begin_line": 170,
        "end_line": 170,
        "comment": "\n   * Checks that certain string literals only appear in strings used as\n   * goog.getCssName arguments.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.checkMissingGetCssNameBlacklist",
        "snippet": "  public String checkMissingGetCssNameBlacklist;",
        "begin_line": 175,
        "end_line": 175,
        "comment": "\n   * Regex of string literals that may only appear in goog.getCssName arguments.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.checkEs5Strict",
        "snippet": "  public boolean checkEs5Strict;",
        "begin_line": 178,
        "end_line": 178,
        "comment": " Checks that the synctactic restrictions of ES5 strict mode are met. "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.checkCaja",
        "snippet": "  public boolean checkCaja;",
        "begin_line": 181,
        "end_line": 181,
        "comment": " Checks that the synctactic restrictions of Caja are met. "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.foldConstants",
        "snippet": "  public boolean foldConstants;",
        "begin_line": 188,
        "end_line": 188,
        "comment": " Folds constants (e.g. (2 + 3) to 5) "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.removeConstantExpressions",
        "snippet": "  public boolean removeConstantExpressions;",
        "begin_line": 190,
        "end_line": 190,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.deadAssignmentElimination",
        "snippet": "  public boolean deadAssignmentElimination;",
        "begin_line": 192,
        "end_line": 192,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.inlineConstantVars",
        "snippet": "  public boolean inlineConstantVars;",
        "begin_line": 195,
        "end_line": 195,
        "comment": " Inlines constants (symbols that are all CAPS) "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.inlineFunctions",
        "snippet": "  public boolean inlineFunctions;",
        "begin_line": 198,
        "end_line": 198,
        "comment": " Inlines short functions "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.decomposeExpressions",
        "snippet": "  public boolean decomposeExpressions;",
        "begin_line": 201,
        "end_line": 201,
        "comment": " Enhanced function inlining "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.inlineAnonymousFunctionExpressions",
        "snippet": "  public boolean inlineAnonymousFunctionExpressions;",
        "begin_line": 204,
        "end_line": 204,
        "comment": " Enhanced function inlining "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.inlineLocalFunctions",
        "snippet": "  public boolean inlineLocalFunctions;",
        "begin_line": 207,
        "end_line": 207,
        "comment": " Enhanced function inlining "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.crossModuleCodeMotion",
        "snippet": "  public boolean crossModuleCodeMotion;",
        "begin_line": 210,
        "end_line": 210,
        "comment": " Move code to a deeper module "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.coalesceVariableNames",
        "snippet": "  public boolean coalesceVariableNames;",
        "begin_line": 213,
        "end_line": 213,
        "comment": " Merge two variables together as one. "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.crossModuleMethodMotion",
        "snippet": "  public boolean crossModuleMethodMotion;",
        "begin_line": 216,
        "end_line": 216,
        "comment": " Move methds to a deeper module "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.inlineGetters",
        "snippet": "  public boolean inlineGetters;",
        "begin_line": 219,
        "end_line": 219,
        "comment": " Inlines trivial getters "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.inlineVariables",
        "snippet": "  public boolean inlineVariables;",
        "begin_line": 222,
        "end_line": 222,
        "comment": " Inlines variables "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.inlineLocalVariables",
        "snippet": "  public boolean inlineLocalVariables;",
        "begin_line": 225,
        "end_line": 225,
        "comment": " Inlines variables "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.flowSensitiveInlineVariables",
        "snippet": "  public boolean flowSensitiveInlineVariables;",
        "begin_line": 229,
        "end_line": 229,
        "comment": " Remove this."
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.smartNameRemoval",
        "snippet": "  public boolean smartNameRemoval;",
        "begin_line": 232,
        "end_line": 232,
        "comment": " Removes code associated with unused global names "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.removeDeadCode",
        "snippet": "  public boolean removeDeadCode;",
        "begin_line": 235,
        "end_line": 235,
        "comment": " Removes code that will never execute "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.checkUnreachableCode",
        "snippet": "  public CheckLevel checkUnreachableCode;",
        "begin_line": 238,
        "end_line": 238,
        "comment": " Checks for unreachable code "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.checkMissingReturn",
        "snippet": "  public CheckLevel checkMissingReturn;",
        "begin_line": 241,
        "end_line": 241,
        "comment": " Checks for missing return statements "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.extractPrototypeMemberDeclarations",
        "snippet": "  public boolean extractPrototypeMemberDeclarations;",
        "begin_line": 244,
        "end_line": 244,
        "comment": " Extracts common prototype member declarations "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.removeEmptyFunctions",
        "snippet": "  public boolean removeEmptyFunctions;",
        "begin_line": 247,
        "end_line": 247,
        "comment": " Removes functions that have no body "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.removeUnusedPrototypeProperties",
        "snippet": "  public boolean removeUnusedPrototypeProperties;",
        "begin_line": 250,
        "end_line": 250,
        "comment": " Removes unused member prototypes "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.removeUnusedPrototypePropertiesInExterns",
        "snippet": "  public boolean removeUnusedPrototypePropertiesInExterns;",
        "begin_line": 253,
        "end_line": 253,
        "comment": " Tells AnalyzePrototypeProperties it can remove externed props. "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.removeUnusedVars",
        "snippet": "  public boolean removeUnusedVars;",
        "begin_line": 256,
        "end_line": 256,
        "comment": " Removes unused variables "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.removeUnusedVarsInGlobalScope",
        "snippet": "  public boolean removeUnusedVarsInGlobalScope;",
        "begin_line": 259,
        "end_line": 259,
        "comment": " Removes unused variables in global scope. "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.aliasExternals",
        "snippet": "  public boolean aliasExternals;",
        "begin_line": 262,
        "end_line": 262,
        "comment": " Adds variable aliases for externals to reduce code size "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.aliasableGlobals",
        "snippet": "  public String aliasableGlobals;",
        "begin_line": 268,
        "end_line": 268,
        "comment": "\n   * If set to a non-empty string, then during an alias externals pass only\n   * externals with these names will be considered for aliasing.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.unaliasableGlobals",
        "snippet": "  public String unaliasableGlobals;",
        "begin_line": 274,
        "end_line": 274,
        "comment": "\n   * Additional globals that can not be aliased since they may be undefined or\n   * can cause errors.  Comma separated list of symbols.  e.g. \"foo,bar\"\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.collapseVariableDeclarations",
        "snippet": "  public boolean collapseVariableDeclarations;",
        "begin_line": 277,
        "end_line": 277,
        "comment": " Collapses multiple variable declarations into one "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.collapseAnonymousFunctions",
        "snippet": "  public boolean collapseAnonymousFunctions;",
        "begin_line": 283,
        "end_line": 283,
        "comment": "\n   * Collapses anonymous function declarations into named function\n   * declarations\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.aliasableStrings",
        "snippet": "  public Set<String> aliasableStrings;",
        "begin_line": 290,
        "end_line": 290,
        "comment": "\n   * If set to a non-empty set, those strings literals will be aliased to a\n   * single global instance per string, to avoid creating more objects than\n   * necessary.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.aliasStringsBlacklist",
        "snippet": "  public String aliasStringsBlacklist;",
        "begin_line": 297,
        "end_line": 297,
        "comment": "\n   * A blacklist in the form of a regular expression to block strings that\n   * contains certain words from being aliased.\n   * If the value is the empty string, no words are blacklisted.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.aliasAllStrings",
        "snippet": "  public boolean aliasAllStrings;",
        "begin_line": 304,
        "end_line": 304,
        "comment": "\n   * Aliases all string literals to global instances, to avoid creating more\n   * objects than necessary (if true, overrides any set of strings passed in\n   * to aliasableStrings)\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.outputJsStringUsage",
        "snippet": "  boolean outputJsStringUsage;",
        "begin_line": 307,
        "end_line": 307,
        "comment": " Print string usage as part of the compilation log. "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.convertToDottedProperties",
        "snippet": "  public boolean convertToDottedProperties;",
        "begin_line": 310,
        "end_line": 310,
        "comment": " Converts quoted property accesses to dot syntax (a['b'] -> a.b) "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.rewriteFunctionExpressions",
        "snippet": "  public boolean rewriteFunctionExpressions;",
        "begin_line": 313,
        "end_line": 313,
        "comment": " Reduces the size of common function expressions. "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.optimizeParameters",
        "snippet": "  public boolean optimizeParameters;",
        "begin_line": 318,
        "end_line": 318,
        "comment": "\n   * Remove unused and constant parameters.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.optimizeArgumentsArray",
        "snippet": "  public boolean optimizeArgumentsArray;",
        "begin_line": 323,
        "end_line": 323,
        "comment": "\n   * Provide formal names for elements of arguments array.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.chainCalls",
        "snippet": "  boolean chainCalls;",
        "begin_line": 326,
        "end_line": 326,
        "comment": " Chains calls to functions that return this. "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.variableRenaming",
        "snippet": "  public VariableRenamingPolicy variableRenaming;",
        "begin_line": 333,
        "end_line": 333,
        "comment": " Controls which variables get renamed. "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.propertyRenaming",
        "snippet": "  public PropertyRenamingPolicy propertyRenaming;",
        "begin_line": 336,
        "end_line": 336,
        "comment": " Controls which properties get renamed. "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.labelRenaming",
        "snippet": "  public boolean labelRenaming;",
        "begin_line": 339,
        "end_line": 339,
        "comment": " Controls label renaming. "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.reserveRawExports",
        "snippet": "  public boolean reserveRawExports;",
        "begin_line": 342,
        "end_line": 342,
        "comment": " Reserve property names on the global this object. "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.generatePseudoNames",
        "snippet": "  public boolean generatePseudoNames;",
        "begin_line": 347,
        "end_line": 347,
        "comment": "\n   * Generate pseudo names for variables and properties for debugging purposes.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.renamePrefix",
        "snippet": "  public String renamePrefix;",
        "begin_line": 350,
        "end_line": 350,
        "comment": " Specifies a prefix for all globals "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.aliasKeywords",
        "snippet": "  public boolean aliasKeywords;",
        "begin_line": 353,
        "end_line": 353,
        "comment": " Aliases true, false, and null to variables with shorter names. "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.collapseProperties",
        "snippet": "  public boolean collapseProperties;",
        "begin_line": 356,
        "end_line": 356,
        "comment": " Flattens multi-level property names (e.g. a$b = x) "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.collapsePropertiesOnExternTypes",
        "snippet": "  boolean collapsePropertiesOnExternTypes;",
        "begin_line": 359,
        "end_line": 359,
        "comment": " Flattens multi-level property names on extern types (e.g. String$f = x) "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.devirtualizePrototypeMethods",
        "snippet": "  public boolean devirtualizePrototypeMethods;",
        "begin_line": 365,
        "end_line": 365,
        "comment": "\n   * Devirtualize prototype method by rewriting them to be static calls that\n   * take the this pointer as their first argument\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.computeFunctionSideEffects",
        "snippet": "  public boolean computeFunctionSideEffects;",
        "begin_line": 371,
        "end_line": 371,
        "comment": "\n   * Use @nosideeffects annotations, function bodies and name graph\n   * to determine if calls have side effects.  Requires --check_types.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.debugFunctionSideEffectsPath",
        "snippet": "  public String debugFunctionSideEffectsPath;",
        "begin_line": 376,
        "end_line": 376,
        "comment": "\n   * Where to save debug report for compute function side effects.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.disambiguateProperties",
        "snippet": "  public boolean disambiguateProperties;",
        "begin_line": 382,
        "end_line": 382,
        "comment": "\n   * Rename properties to disambiguate between unrelated fields based on\n   * type information.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.ambiguateProperties",
        "snippet": "  public boolean ambiguateProperties;",
        "begin_line": 385,
        "end_line": 385,
        "comment": " Rename unrelated properties to the same name to reduce code size. "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.anonymousFunctionNaming",
        "snippet": "  public AnonymousFunctionNamingPolicy anonymousFunctionNaming;",
        "begin_line": 388,
        "end_line": 388,
        "comment": " Give anonymous functions names for easier debugging "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.inputVariableMapSerialized",
        "snippet": "  public byte[] inputVariableMapSerialized;",
        "begin_line": 391,
        "end_line": 391,
        "comment": " Serialized input variable renaming map. "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.inputPropertyMapSerialized",
        "snippet": "  public byte[] inputPropertyMapSerialized;",
        "begin_line": 394,
        "end_line": 394,
        "comment": " Serialized input property renaming map. "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.exportTestFunctions",
        "snippet": "  public boolean exportTestFunctions;",
        "begin_line": 397,
        "end_line": 397,
        "comment": " Whether to export test functions. "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.codingConvention",
        "snippet": "  private CodingConvention codingConvention;",
        "begin_line": 404,
        "end_line": 404,
        "comment": " A CodingConvention to use during the compile. "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.instrumentForCoverage",
        "snippet": "  public boolean instrumentForCoverage;",
        "begin_line": 407,
        "end_line": 407,
        "comment": " Instrument code for the purpose of collecting coverage data. "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.instrumentForCoverageOnly",
        "snippet": "  public boolean instrumentForCoverageOnly;",
        "begin_line": 413,
        "end_line": 413,
        "comment": "\n   * Instrument code for the purpose of collecting coverage data - restrict to\n   * coverage pass only, and skip all other passes.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.ignoreCajaProperties",
        "snippet": "  public boolean ignoreCajaProperties;",
        "begin_line": 416,
        "end_line": 416,
        "comment": " Add code to skip properties that Caja adds to Object.prototype "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.syntheticBlockStartMarker",
        "snippet": "  public String syntheticBlockStartMarker;",
        "begin_line": 418,
        "end_line": 418,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.syntheticBlockEndMarker",
        "snippet": "  public String syntheticBlockEndMarker;",
        "begin_line": 420,
        "end_line": 420,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.locale",
        "snippet": "  public String locale;",
        "begin_line": 423,
        "end_line": 423,
        "comment": " Compiling locale "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.markAsCompiled",
        "snippet": "  public boolean markAsCompiled;",
        "begin_line": 426,
        "end_line": 426,
        "comment": " Sets the special \"COMPILED\" value to true "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.removeTryCatchFinally",
        "snippet": "  public boolean removeTryCatchFinally;",
        "begin_line": 429,
        "end_line": 429,
        "comment": " Removes try...catch...finally blocks for easier debugging "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.closurePass",
        "snippet": "  public boolean closurePass;",
        "begin_line": 432,
        "end_line": 432,
        "comment": " Processes goog.provide() and goog.require() calls "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.rewriteNewDateGoogNow",
        "snippet": "  boolean rewriteNewDateGoogNow;",
        "begin_line": 435,
        "end_line": 435,
        "comment": " Rewrite new Date(goog.now()) to new Date().  "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.removeAbstractMethods",
        "snippet": "  boolean removeAbstractMethods;",
        "begin_line": 438,
        "end_line": 438,
        "comment": " Remove goog.abstractMethod assignments. "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.gatherCssNames",
        "snippet": "  public boolean gatherCssNames;",
        "begin_line": 441,
        "end_line": 441,
        "comment": " Gather CSS names (requires closurePass) "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.stripTypes",
        "snippet": "  public Set<String> stripTypes;",
        "begin_line": 444,
        "end_line": 444,
        "comment": " Names of types to strip "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.stripNameSuffixes",
        "snippet": "  public Set<String> stripNameSuffixes;",
        "begin_line": 447,
        "end_line": 447,
        "comment": " Name suffixes that determine which variables and properties to strip "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.stripNamePrefixes",
        "snippet": "  public Set<String> stripNamePrefixes;",
        "begin_line": 450,
        "end_line": 450,
        "comment": " Name prefixes that determine which variables and properties to strip "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.stripTypePrefixes",
        "snippet": "  public Set<String> stripTypePrefixes;",
        "begin_line": 453,
        "end_line": 453,
        "comment": " Qualified type name prefixes that determine which types to strip "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.customPasses",
        "snippet": "  public transient\n      Multimap<CustomPassExecutionTime, CompilerPass> customPasses;",
        "begin_line": 456,
        "end_line": 457,
        "comment": " Custom passes "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.markNoSideEffectCalls",
        "snippet": "  public boolean markNoSideEffectCalls;",
        "begin_line": 460,
        "end_line": 460,
        "comment": " Mark no side effect calls "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.defineReplacements",
        "snippet": "  private Map<String, Object> defineReplacements;",
        "begin_line": 463,
        "end_line": 463,
        "comment": " Replacements for @defines. Will be Boolean, Numbers, or Strings "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.moveFunctionDeclarations",
        "snippet": "  public boolean moveFunctionDeclarations;",
        "begin_line": 466,
        "end_line": 466,
        "comment": " Move top level function declarations to the top "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.instrumentationTemplate",
        "snippet": "  public String instrumentationTemplate;",
        "begin_line": 469,
        "end_line": 469,
        "comment": " Instrumentation template to use "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.appNameStr",
        "snippet": "  public String appNameStr;",
        "begin_line": 475,
        "end_line": 475,
        "comment": "\n   * App identifier string for use by the instrumentation template's\n   * app_name_setter\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.recordFunctionInformation",
        "snippet": "  public boolean recordFunctionInformation;",
        "begin_line": 478,
        "end_line": 478,
        "comment": " Record function information "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.generateExports",
        "snippet": "  public boolean generateExports;",
        "begin_line": 480,
        "end_line": 480,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.cssRenamingMap",
        "snippet": "  public CssRenamingMap cssRenamingMap;",
        "begin_line": 483,
        "end_line": 483,
        "comment": " Map used in the renaming of CSS class names. "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.processObjectPropertyString",
        "snippet": "  boolean processObjectPropertyString;",
        "begin_line": 486,
        "end_line": 486,
        "comment": " Process instances of goog.testing.ObjectPropertyString. "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.idGenerators",
        "snippet": "  Set<String> idGenerators;",
        "begin_line": 489,
        "end_line": 489,
        "comment": " Id generators to replace. "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.prettyPrint",
        "snippet": "  public boolean prettyPrint;",
        "begin_line": 496,
        "end_line": 496,
        "comment": " Output in pretty indented format "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.lineBreak",
        "snippet": "  public boolean lineBreak;",
        "begin_line": 499,
        "end_line": 499,
        "comment": " Line break the output a bit more aggressively "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.printInputDelimiter",
        "snippet": "  public boolean printInputDelimiter;",
        "begin_line": 502,
        "end_line": 502,
        "comment": " Prints a separator comment before each js script "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.inputDelimiter",
        "snippet": "  public String inputDelimiter = \"// Input %num%\";",
        "begin_line": 505,
        "end_line": 505,
        "comment": " The string to use as the separator for printInputDelimiter "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.reportPath",
        "snippet": "  public String reportPath;",
        "begin_line": 508,
        "end_line": 508,
        "comment": " Where to save a report of global name usage "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.tracer",
        "snippet": "  public TracerMode tracer;",
        "begin_line": 510,
        "end_line": 510,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.colorizeErrorOutput",
        "snippet": "  private boolean colorizeErrorOutput;",
        "begin_line": 512,
        "end_line": 512,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.errorFormat",
        "snippet": "  public ErrorFormat errorFormat;",
        "begin_line": 514,
        "end_line": 514,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.jsOutputFile",
        "snippet": "  public String jsOutputFile;",
        "begin_line": 516,
        "end_line": 516,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.warningsGuard",
        "snippet": "  private transient ComposeWarningsGuard warningsGuard;",
        "begin_line": 518,
        "end_line": 518,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.externExportsPath",
        "snippet": "  String externExportsPath;",
        "begin_line": 525,
        "end_line": 525,
        "comment": " The output path for the created externs file. "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.nameReferenceReportPath",
        "snippet": "  public String nameReferenceReportPath;",
        "begin_line": 528,
        "end_line": 528,
        "comment": " Where to save a cross-reference report from the name reference graph "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.nameReferenceGraphPath",
        "snippet": "  public String nameReferenceGraphPath;",
        "begin_line": 531,
        "end_line": 531,
        "comment": " Where to save the name reference graph "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.sourceMapOutputPath",
        "snippet": "  public String sourceMapOutputPath;",
        "begin_line": 538,
        "end_line": 538,
        "comment": " The output path for the source map. "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.outputCharset",
        "snippet": "  public Charset outputCharset;",
        "begin_line": 543,
        "end_line": 543,
        "comment": "\n   * Charset to use when generating code.  If null, then output ASCII.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.LightweightMessageFormatter",
        "src_path": "src/com/google/javascript/jscomp/LightweightMessageFormatter.java",
        "signature": "com.google.javascript.jscomp.LightweightMessageFormatter.excerpt",
        "snippet": "  private SourceExcerpt excerpt;",
        "begin_line": 32,
        "end_line": 32,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.LightweightMessageFormatter",
        "src_path": "src/com/google/javascript/jscomp/LightweightMessageFormatter.java",
        "signature": "com.google.javascript.jscomp.LightweightMessageFormatter.excerptFormatter",
        "snippet": "  private static final ExcerptFormatter excerptFormatter =\n      new LineNumberingFormatter();",
        "begin_line": 33,
        "end_line": 34,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.AbstractMessageFormatter",
        "src_path": "src/com/google/javascript/jscomp/AbstractMessageFormatter.java",
        "signature": "com.google.javascript.jscomp.AbstractMessageFormatter.source",
        "snippet": "  private final SourceExcerptProvider source;",
        "begin_line": 30,
        "end_line": 30,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.AbstractMessageFormatter",
        "src_path": "src/com/google/javascript/jscomp/AbstractMessageFormatter.java",
        "signature": "com.google.javascript.jscomp.AbstractMessageFormatter.colorize",
        "snippet": "  private boolean colorize;",
        "begin_line": 31,
        "end_line": 31,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.AbstractMessageFormatter",
        "src_path": "src/com/google/javascript/jscomp/AbstractMessageFormatter.java",
        "signature": "com.google.javascript.jscomp.AbstractMessageFormatter.SUPPORTED_COLOR_TERMINALS",
        "snippet": "  private static final Set<String> SUPPORTED_COLOR_TERMINALS =\n      ImmutableSet.of(\"xterm\",\n                      \"xterm-color\",\n                      \"xterm-256color\",\n                      \"screen-bce\");",
        "begin_line": 48,
        "end_line": 52,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.AbstractMessageFormatter",
        "src_path": "src/com/google/javascript/jscomp/AbstractMessageFormatter.java",
        "signature": "com.google.javascript.jscomp.AbstractMessageFormatter.controlCharacter",
        "snippet": "    private final String controlCharacter;",
        "begin_line": 63,
        "end_line": 63,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.SourceFile",
        "src_path": "src/com/google/javascript/jscomp/SourceFile.java",
        "signature": "com.google.javascript.jscomp.SourceFile.SOURCE_EXCERPT_REGION_LENGTH",
        "snippet": "  private static final int SOURCE_EXCERPT_REGION_LENGTH = 5;",
        "begin_line": 52,
        "end_line": 52,
        "comment": "\n   * Number of lines in the region returned by {@link #getRegion(int)}.\n   * This length must be odd.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.SourceFile",
        "src_path": "src/com/google/javascript/jscomp/SourceFile.java",
        "signature": "com.google.javascript.jscomp.SourceFile.fileName",
        "snippet": "  private final String fileName;",
        "begin_line": 54,
        "end_line": 54,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.SourceFile",
        "src_path": "src/com/google/javascript/jscomp/SourceFile.java",
        "signature": "com.google.javascript.jscomp.SourceFile.lastOffset",
        "snippet": "  private int lastOffset;",
        "begin_line": 59,
        "end_line": 59,
        "comment": " than starting at the beginning of the file."
    },
    {
        "class_name": "com.google.javascript.jscomp.SourceFile",
        "src_path": "src/com/google/javascript/jscomp/SourceFile.java",
        "signature": "com.google.javascript.jscomp.SourceFile.lastLine",
        "snippet": "  private int lastLine;",
        "begin_line": 60,
        "end_line": 60,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.SourceFile",
        "src_path": "src/com/google/javascript/jscomp/SourceFile.java",
        "signature": "com.google.javascript.jscomp.SourceFile.code",
        "snippet": "  private String code = null;",
        "begin_line": 62,
        "end_line": 62,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Generated",
        "src_path": "src/com/google/javascript/jscomp/SourceFile.java",
        "signature": "com.google.javascript.jscomp.Generated.generator",
        "snippet": "    private final Generator generator;",
        "begin_line": 264,
        "end_line": 264,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.OnDisk",
        "src_path": "src/com/google/javascript/jscomp/SourceFile.java",
        "signature": "com.google.javascript.jscomp.OnDisk.file",
        "snippet": "    private final File file;",
        "begin_line": 297,
        "end_line": 297,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.OnDisk",
        "src_path": "src/com/google/javascript/jscomp/SourceFile.java",
        "signature": "com.google.javascript.jscomp.OnDisk.inputCharset",
        "snippet": "    protected String inputCharset = Charsets.UTF_8.name();",
        "begin_line": 302,
        "end_line": 302,
        "comment": " Default input file format for JSCompiler has always been UTF_8."
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.UnionType",
        "src_path": "src/com/google/javascript/rhino/jstype/UnionType.java",
        "signature": "com.google.javascript.rhino.jstype.UnionType.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 1L;",
        "begin_line": 67,
        "end_line": 67,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.UnionType",
        "src_path": "src/com/google/javascript/rhino/jstype/UnionType.java",
        "signature": "com.google.javascript.rhino.jstype.UnionType.alternates",
        "snippet": "  Set<JSType> alternates;",
        "begin_line": 69,
        "end_line": 69,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.BooleanType",
        "src_path": "src/com/google/javascript/rhino/jstype/BooleanType.java",
        "signature": "com.google.javascript.rhino.jstype.BooleanType.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 1L;",
        "begin_line": 51,
        "end_line": 51,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.TMP_JSDOC_PROP",
        "snippet": "  private static int TMP_JSDOC_PROP = Node.LAST_PROP + 1;",
        "begin_line": 85,
        "end_line": 85,
        "comment": "\n   * Property used to temporarily store the JsDoc string in a node for later\n   * transforming into a proper JSDocInfo.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.sourceString",
        "snippet": "  private final String sourceString;",
        "begin_line": 87,
        "end_line": 87,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.sourceName",
        "snippet": "  private final String sourceName;",
        "begin_line": 88,
        "end_line": 88,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.config",
        "snippet": "  private final Config config;",
        "begin_line": 89,
        "end_line": 89,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.registry",
        "snippet": "  private final JSTypeRegistry registry;",
        "begin_line": 90,
        "end_line": 90,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.errorReporter",
        "snippet": "  private final ErrorReporter errorReporter;",
        "begin_line": 91,
        "end_line": 91,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.transformDispatcher",
        "snippet": "  private final TransformDispatcher transformDispatcher;",
        "begin_line": 92,
        "end_line": 92,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.ALLOWED_DIRECTIVES",
        "snippet": "  private final Set<String> ALLOWED_DIRECTIVES = Sets.newHashSet(\"use strict\");",
        "begin_line": 95,
        "end_line": 95,
        "comment": " non-static for thread safety"
    },
    {
        "class_name": "com.google.javascript.jscomp.ComposeWarningsGuard",
        "src_path": "src/com/google/javascript/jscomp/ComposeWarningsGuard.java",
        "signature": "com.google.javascript.jscomp.ComposeWarningsGuard.guards",
        "snippet": "  private final List<WarningsGuard> guards;",
        "begin_line": 37,
        "end_line": 37,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ComposeWarningsGuard",
        "src_path": "src/com/google/javascript/jscomp/ComposeWarningsGuard.java",
        "signature": "com.google.javascript.jscomp.ComposeWarningsGuard.guardComparator",
        "snippet": "  private static final Comparator<WarningsGuard> guardComparator =\n      new Comparator<WarningsGuard>() {\n    @Override\n    public int compare(WarningsGuard a, WarningsGuard b) {\n      return a.getPriority() - b.getPriority();\n    }\n  };",
        "begin_line": 38,
        "end_line": 44,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.FunctionParamBuilder",
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionParamBuilder.java",
        "signature": "com.google.javascript.rhino.jstype.FunctionParamBuilder.registry",
        "snippet": "  private final JSTypeRegistry registry;",
        "begin_line": 51,
        "end_line": 51,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.FunctionParamBuilder",
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionParamBuilder.java",
        "signature": "com.google.javascript.rhino.jstype.FunctionParamBuilder.root",
        "snippet": "  private final Node root = new Node(Token.LP);",
        "begin_line": 52,
        "end_line": 52,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.GoogleCodingConvention",
        "src_path": "src/com/google/javascript/jscomp/GoogleCodingConvention.java",
        "signature": "com.google.javascript.jscomp.GoogleCodingConvention.OPTIONAL_ARG_PREFIX",
        "snippet": "  private static final String OPTIONAL_ARG_PREFIX = \"opt_\";",
        "begin_line": 34,
        "end_line": 34,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.GoogleCodingConvention",
        "src_path": "src/com/google/javascript/jscomp/GoogleCodingConvention.java",
        "signature": "com.google.javascript.jscomp.GoogleCodingConvention.VAR_ARGS_NAME",
        "snippet": "  private static final String VAR_ARGS_NAME = \"var_args\";",
        "begin_line": 36,
        "end_line": 36,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.GoogleCodingConvention",
        "src_path": "src/com/google/javascript/jscomp/GoogleCodingConvention.java",
        "signature": "com.google.javascript.jscomp.GoogleCodingConvention.ENUM_KEY_PATTERN",
        "snippet": "  private static final Pattern ENUM_KEY_PATTERN =\n    Pattern.compile(\"[A-Z0-9][A-Z0-9_]*\");",
        "begin_line": 38,
        "end_line": 39,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CodingConventionAnnotator",
        "src_path": "src/com/google/javascript/jscomp/CodingConventionAnnotator.java",
        "signature": "com.google.javascript.jscomp.CodingConventionAnnotator.convention",
        "snippet": "  private CodingConvention convention;",
        "begin_line": 37,
        "end_line": 37,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CodingConventionAnnotator",
        "src_path": "src/com/google/javascript/jscomp/CodingConventionAnnotator.java",
        "signature": "com.google.javascript.jscomp.CodingConventionAnnotator.compiler",
        "snippet": "  private AbstractCompiler compiler;",
        "begin_line": 38,
        "end_line": 38,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DiagnosticType",
        "src_path": "src/com/google/javascript/jscomp/DiagnosticType.java",
        "signature": "com.google.javascript.jscomp.DiagnosticType.key",
        "snippet": "  public final String key;",
        "begin_line": 32,
        "end_line": 32,
        "comment": "\n   * The error type. Used as the BugPattern and BugInstance types by\n   * BugBot's XML\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.DiagnosticType",
        "src_path": "src/com/google/javascript/jscomp/DiagnosticType.java",
        "signature": "com.google.javascript.jscomp.DiagnosticType.format",
        "snippet": "  public final MessageFormat format;",
        "begin_line": 35,
        "end_line": 35,
        "comment": " The default way to format errors "
    },
    {
        "class_name": "com.google.javascript.jscomp.DiagnosticType",
        "src_path": "src/com/google/javascript/jscomp/DiagnosticType.java",
        "signature": "com.google.javascript.jscomp.DiagnosticType.defaultLevel",
        "snippet": "  public final CheckLevel defaultLevel;",
        "begin_line": 38,
        "end_line": 38,
        "comment": " Default level "
    },
    {
        "class_name": "com.google.javascript.jscomp.DiagnosticType",
        "src_path": "src/com/google/javascript/jscomp/DiagnosticType.java",
        "signature": "com.google.javascript.jscomp.DiagnosticType.level",
        "snippet": "  public CheckLevel level;",
        "begin_line": 41,
        "end_line": 41,
        "comment": " Reporting level, initially the defaultLevel but may be changed. "
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.ArrowType",
        "src_path": "src/com/google/javascript/rhino/jstype/ArrowType.java",
        "signature": "com.google.javascript.rhino.jstype.ArrowType.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 1L;",
        "begin_line": 54,
        "end_line": 54,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.ArrowType",
        "src_path": "src/com/google/javascript/rhino/jstype/ArrowType.java",
        "signature": "com.google.javascript.rhino.jstype.ArrowType.parameters",
        "snippet": "  final Node parameters;",
        "begin_line": 56,
        "end_line": 56,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.ArrowType",
        "src_path": "src/com/google/javascript/rhino/jstype/ArrowType.java",
        "signature": "com.google.javascript.rhino.jstype.ArrowType.returnType",
        "snippet": "  JSType returnType;",
        "begin_line": 57,
        "end_line": 57,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.SyntacticScopeCreator",
        "src_path": "src/com/google/javascript/jscomp/SyntacticScopeCreator.java",
        "signature": "com.google.javascript.jscomp.SyntacticScopeCreator.compiler",
        "snippet": "  private final AbstractCompiler compiler;",
        "begin_line": 35,
        "end_line": 35,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.SyntacticScopeCreator",
        "src_path": "src/com/google/javascript/jscomp/SyntacticScopeCreator.java",
        "signature": "com.google.javascript.jscomp.SyntacticScopeCreator.scope",
        "snippet": "  private Scope scope;",
        "begin_line": 36,
        "end_line": 36,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.SyntacticScopeCreator",
        "src_path": "src/com/google/javascript/jscomp/SyntacticScopeCreator.java",
        "signature": "com.google.javascript.jscomp.SyntacticScopeCreator.sourceName",
        "snippet": "  private String sourceName;",
        "begin_line": 37,
        "end_line": 37,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.SyntacticScopeCreator",
        "src_path": "src/com/google/javascript/jscomp/SyntacticScopeCreator.java",
        "signature": "com.google.javascript.jscomp.SyntacticScopeCreator.redeclarationHandler",
        "snippet": "  private final RedeclarationHandler redeclarationHandler;",
        "begin_line": 38,
        "end_line": 38,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.SyntacticScopeCreator",
        "src_path": "src/com/google/javascript/jscomp/SyntacticScopeCreator.java",
        "signature": "com.google.javascript.jscomp.SyntacticScopeCreator.VAR_MULTIPLY_DECLARED_ERROR",
        "snippet": "  public static final DiagnosticType VAR_MULTIPLY_DECLARED_ERROR =\n      DiagnosticType.error(\n          \"JSC_VAR_MULTIPLY_DECLARED_ERROR\",\n          \"Variable {0} first declared in {1}\");",
        "begin_line": 40,
        "end_line": 43,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.JsAst",
        "src_path": "src/com/google/javascript/jscomp/JsAst.java",
        "signature": "com.google.javascript.jscomp.JsAst.logger_",
        "snippet": "  private static final Logger logger_ = Logger.getLogger(JsAst.class.getName());",
        "begin_line": 36,
        "end_line": 36,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.JsAst",
        "src_path": "src/com/google/javascript/jscomp/JsAst.java",
        "signature": "com.google.javascript.jscomp.JsAst.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 1L;",
        "begin_line": 37,
        "end_line": 37,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.JsAst",
        "src_path": "src/com/google/javascript/jscomp/JsAst.java",
        "signature": "com.google.javascript.jscomp.JsAst.sourceFile",
        "snippet": "  private transient SourceFile sourceFile;",
        "begin_line": 39,
        "end_line": 39,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.JsAst",
        "src_path": "src/com/google/javascript/jscomp/JsAst.java",
        "signature": "com.google.javascript.jscomp.JsAst.fileName",
        "snippet": "  private String fileName;",
        "begin_line": 40,
        "end_line": 40,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.JsAst",
        "src_path": "src/com/google/javascript/jscomp/JsAst.java",
        "signature": "com.google.javascript.jscomp.JsAst.root",
        "snippet": "  private Node root;",
        "begin_line": 41,
        "end_line": 41,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.ObjectType",
        "src_path": "src/com/google/javascript/rhino/jstype/ObjectType.java",
        "signature": "com.google.javascript.rhino.jstype.ObjectType.visited",
        "snippet": "  private boolean visited;",
        "begin_line": 84,
        "end_line": 84,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.ObjectType",
        "src_path": "src/com/google/javascript/rhino/jstype/ObjectType.java",
        "signature": "com.google.javascript.rhino.jstype.ObjectType.docInfo",
        "snippet": "  private JSDocInfo docInfo = null;",
        "begin_line": 85,
        "end_line": 85,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.ObjectType",
        "src_path": "src/com/google/javascript/rhino/jstype/ObjectType.java",
        "signature": "com.google.javascript.rhino.jstype.ObjectType.unknown",
        "snippet": "  private boolean unknown = true;",
        "begin_line": 86,
        "end_line": 86,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "signature": "com.google.javascript.jscomp.NodeUtil.CONSTRUCTORS_WITHOUT_SIDE_EFFECTS",
        "snippet": "  private static final Set<String> CONSTRUCTORS_WITHOUT_SIDE_EFFECTS =\n      new HashSet<String>(Arrays.asList(\n        \"Array\",\n        \"Date\",\n        \"Error\",\n        \"Object\",\n        \"RegExp\",\n        \"XMLHttpRequest\"));",
        "begin_line": 49,
        "end_line": 56,
        "comment": " the set of builtin constructors that don't have side effects. "
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "signature": "com.google.javascript.jscomp.NodeUtil.CONSTANT_MARKER",
        "snippet": "  public static final String CONSTANT_MARKER = \"$$constant\";",
        "begin_line": 58,
        "end_line": 58,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.VarCollector",
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "signature": "com.google.javascript.jscomp.VarCollector.vars",
        "snippet": "    final Map<String, Node> vars = Maps.newLinkedHashMap();",
        "begin_line": 1633,
        "end_line": 1633,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.MatchNameNode",
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "signature": "com.google.javascript.jscomp.MatchNameNode.name",
        "snippet": "    final String name;",
        "begin_line": 1731,
        "end_line": 1731,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.MatchNodeType",
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "signature": "com.google.javascript.jscomp.MatchNodeType.type",
        "snippet": "    final int type;",
        "begin_line": 1747,
        "end_line": 1747,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.ScriptRuntime",
        "src_path": "src/com/google/javascript/rhino/ScriptRuntime.java",
        "signature": "com.google.javascript.rhino.ScriptRuntime.NaN",
        "snippet": "    public static final double\n        NaN = Double.longBitsToDouble(0x7ff8000000000000L);",
        "begin_line": 82,
        "end_line": 83,
        "comment": " So we use ScriptRuntime.NaN instead of Double.NaN."
    },
    {
        "class_name": "com.google.javascript.rhino.ScriptRuntime",
        "src_path": "src/com/google/javascript/rhino/ScriptRuntime.java",
        "signature": "com.google.javascript.rhino.ScriptRuntime.negativeZero",
        "snippet": "    public static final double\n        negativeZero = Double.longBitsToDouble(0x8000000000000000L);",
        "begin_line": 86,
        "end_line": 87,
        "comment": " A similar problem exists for negative zero."
    },
    {
        "class_name": "com.google.javascript.rhino.ScriptRuntime",
        "src_path": "src/com/google/javascript/rhino/ScriptRuntime.java",
        "signature": "com.google.javascript.rhino.ScriptRuntime.NaNobj",
        "snippet": "    public static final Double NaNobj = new Double(NaN);",
        "begin_line": 89,
        "end_line": 89,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.ScriptRuntime",
        "src_path": "src/com/google/javascript/rhino/ScriptRuntime.java",
        "signature": "com.google.javascript.rhino.ScriptRuntime.emptyArgs",
        "snippet": "    public static final Object[] emptyArgs = new Object[0];",
        "begin_line": 609,
        "end_line": 609,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.ScriptRuntime",
        "src_path": "src/com/google/javascript/rhino/ScriptRuntime.java",
        "signature": "com.google.javascript.rhino.ScriptRuntime.emptyStrings",
        "snippet": "    public static final String[] emptyStrings = new String[0];",
        "begin_line": 610,
        "end_line": 610,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.BasicErrorManager",
        "src_path": "src/com/google/javascript/jscomp/BasicErrorManager.java",
        "signature": "com.google.javascript.jscomp.BasicErrorManager.messages",
        "snippet": "  private final SortedSet<ErrorWithLevel> messages =\n      Sets.newTreeSet(new LeveledJSErrorComparator());",
        "begin_line": 40,
        "end_line": 41,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.BasicErrorManager",
        "src_path": "src/com/google/javascript/jscomp/BasicErrorManager.java",
        "signature": "com.google.javascript.jscomp.BasicErrorManager.errorCount",
        "snippet": "  private int errorCount = 0;",
        "begin_line": 42,
        "end_line": 42,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.BasicErrorManager",
        "src_path": "src/com/google/javascript/jscomp/BasicErrorManager.java",
        "signature": "com.google.javascript.jscomp.BasicErrorManager.warningCount",
        "snippet": "  private int warningCount = 0;",
        "begin_line": 43,
        "end_line": 43,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.BasicErrorManager",
        "src_path": "src/com/google/javascript/jscomp/BasicErrorManager.java",
        "signature": "com.google.javascript.jscomp.BasicErrorManager.typedPercent",
        "snippet": "  private double typedPercent = 0.0;",
        "begin_line": 44,
        "end_line": 44,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.LeveledJSErrorComparator",
        "src_path": "src/com/google/javascript/jscomp/BasicErrorManager.java",
        "signature": "com.google.javascript.jscomp.LeveledJSErrorComparator.P1_LT_P2",
        "snippet": "    private static final int P1_LT_P2 = -1;",
        "begin_line": 119,
        "end_line": 119,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.LeveledJSErrorComparator",
        "src_path": "src/com/google/javascript/jscomp/BasicErrorManager.java",
        "signature": "com.google.javascript.jscomp.LeveledJSErrorComparator.P1_GT_P2",
        "snippet": "    private static final int P1_GT_P2 = 1;",
        "begin_line": 120,
        "end_line": 120,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ErrorWithLevel",
        "src_path": "src/com/google/javascript/jscomp/BasicErrorManager.java",
        "signature": "com.google.javascript.jscomp.ErrorWithLevel.error",
        "snippet": "    final JSError error;",
        "begin_line": 176,
        "end_line": 176,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ErrorWithLevel",
        "src_path": "src/com/google/javascript/jscomp/BasicErrorManager.java",
        "signature": "com.google.javascript.jscomp.ErrorWithLevel.level",
        "snippet": "    final CheckLevel level;",
        "begin_line": 177,
        "end_line": 177,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.AllType",
        "src_path": "src/com/google/javascript/rhino/jstype/AllType.java",
        "signature": "com.google.javascript.rhino.jstype.AllType.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 1L;",
        "begin_line": 52,
        "end_line": 52,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerInput",
        "src_path": "src/com/google/javascript/jscomp/CompilerInput.java",
        "signature": "com.google.javascript.jscomp.CompilerInput.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 1L;",
        "begin_line": 41,
        "end_line": 41,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerInput",
        "src_path": "src/com/google/javascript/jscomp/CompilerInput.java",
        "signature": "com.google.javascript.jscomp.CompilerInput.module",
        "snippet": "  private JSModule module;",
        "begin_line": 42,
        "end_line": 42,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerInput",
        "src_path": "src/com/google/javascript/jscomp/CompilerInput.java",
        "signature": "com.google.javascript.jscomp.CompilerInput.isExtern",
        "snippet": "  private final boolean isExtern;",
        "begin_line": 43,
        "end_line": 43,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerInput",
        "src_path": "src/com/google/javascript/jscomp/CompilerInput.java",
        "signature": "com.google.javascript.jscomp.CompilerInput.ast",
        "snippet": "  private final SourceAst ast;",
        "begin_line": 44,
        "end_line": 44,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerInput",
        "src_path": "src/com/google/javascript/jscomp/CompilerInput.java",
        "signature": "com.google.javascript.jscomp.CompilerInput.name",
        "snippet": "  final private String name;",
        "begin_line": 45,
        "end_line": 45,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerInput",
        "src_path": "src/com/google/javascript/jscomp/CompilerInput.java",
        "signature": "com.google.javascript.jscomp.CompilerInput.provides",
        "snippet": "  private final Set<String> provides = Sets.newHashSet();",
        "begin_line": 46,
        "end_line": 46,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerInput",
        "src_path": "src/com/google/javascript/jscomp/CompilerInput.java",
        "signature": "com.google.javascript.jscomp.CompilerInput.requires",
        "snippet": "  private final Set<String> requires = Sets.newHashSet();",
        "begin_line": 47,
        "end_line": 47,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DepsFinder",
        "src_path": "src/com/google/javascript/jscomp/CompilerInput.java",
        "signature": "com.google.javascript.jscomp.DepsFinder.findRequire",
        "snippet": "    private boolean findRequire;",
        "begin_line": 128,
        "end_line": 128,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DepsFinder",
        "src_path": "src/com/google/javascript/jscomp/CompilerInput.java",
        "signature": "com.google.javascript.jscomp.DepsFinder.types",
        "snippet": "    private List<String> types;",
        "begin_line": 129,
        "end_line": 129,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DepsFinder",
        "src_path": "src/com/google/javascript/jscomp/CompilerInput.java",
        "signature": "com.google.javascript.jscomp.DepsFinder.codingConvention",
        "snippet": "    private CodingConvention codingConvention;",
        "begin_line": 130,
        "end_line": 130,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.ErrorFunctionType",
        "src_path": "src/com/google/javascript/rhino/jstype/ErrorFunctionType.java",
        "signature": "com.google.javascript.rhino.jstype.ErrorFunctionType.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 1L;",
        "begin_line": 50,
        "end_line": 50,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.ObjArray",
        "src_path": "src/com/google/javascript/rhino/ObjArray.java",
        "signature": "com.google.javascript.rhino.ObjArray.serialVersionUID",
        "snippet": "    static final long serialVersionUID = 4174889037736658296L;",
        "begin_line": 52,
        "end_line": 52,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.ObjArray",
        "src_path": "src/com/google/javascript/rhino/ObjArray.java",
        "signature": "com.google.javascript.rhino.ObjArray.size",
        "snippet": "    private int size;",
        "begin_line": 387,
        "end_line": 387,
        "comment": " Number of data elements"
    },
    {
        "class_name": "com.google.javascript.rhino.ObjArray",
        "src_path": "src/com/google/javascript/rhino/ObjArray.java",
        "signature": "com.google.javascript.rhino.ObjArray.FIELDS_STORE_SIZE",
        "snippet": "    private static final int FIELDS_STORE_SIZE = 5;",
        "begin_line": 391,
        "end_line": 391,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.ObjArray",
        "src_path": "src/com/google/javascript/rhino/ObjArray.java",
        "signature": "com.google.javascript.rhino.ObjArray.f0",
        "snippet": "    private transient Object f0, f1, f2, f3, f4;",
        "begin_line": 392,
        "end_line": 392,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.ObjArray",
        "src_path": "src/com/google/javascript/rhino/ObjArray.java",
        "signature": "com.google.javascript.rhino.ObjArray.f1",
        "snippet": "    private transient Object f0, f1, f2, f3, f4;",
        "begin_line": 392,
        "end_line": 392,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.ObjArray",
        "src_path": "src/com/google/javascript/rhino/ObjArray.java",
        "signature": "com.google.javascript.rhino.ObjArray.f2",
        "snippet": "    private transient Object f0, f1, f2, f3, f4;",
        "begin_line": 392,
        "end_line": 392,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.ObjArray",
        "src_path": "src/com/google/javascript/rhino/ObjArray.java",
        "signature": "com.google.javascript.rhino.ObjArray.f3",
        "snippet": "    private transient Object f0, f1, f2, f3, f4;",
        "begin_line": 392,
        "end_line": 392,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.ObjArray",
        "src_path": "src/com/google/javascript/rhino/ObjArray.java",
        "signature": "com.google.javascript.rhino.ObjArray.f4",
        "snippet": "    private transient Object f0, f1, f2, f3, f4;",
        "begin_line": 392,
        "end_line": 392,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.ObjArray",
        "src_path": "src/com/google/javascript/rhino/ObjArray.java",
        "signature": "com.google.javascript.rhino.ObjArray.data",
        "snippet": "    private transient Object[] data;",
        "begin_line": 393,
        "end_line": 393,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CodePrinter",
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "signature": "com.google.javascript.jscomp.CodePrinter.DEFAULT_LINE_LENGTH_THRESHOLD",
        "snippet": "  static final int DEFAULT_LINE_LENGTH_THRESHOLD = 500;",
        "begin_line": 36,
        "end_line": 36,
        "comment": " The number of characters after which we insert a line break in the code"
    },
    {
        "class_name": "com.google.javascript.jscomp.MappedCodePrinter",
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "signature": "com.google.javascript.jscomp.MappedCodePrinter.mappings",
        "snippet": "    final private Stack<Mapping> mappings;",
        "begin_line": 53,
        "end_line": 53,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.MappedCodePrinter",
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "signature": "com.google.javascript.jscomp.MappedCodePrinter.allMappings",
        "snippet": "    final private List<Mapping> allMappings;",
        "begin_line": 54,
        "end_line": 54,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.MappedCodePrinter",
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "signature": "com.google.javascript.jscomp.MappedCodePrinter.createSrcMap",
        "snippet": "    final private boolean createSrcMap;",
        "begin_line": 55,
        "end_line": 55,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Mapping",
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "signature": "com.google.javascript.jscomp.Mapping.node",
        "snippet": "      Node node;",
        "begin_line": 73,
        "end_line": 73,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Mapping",
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "signature": "com.google.javascript.jscomp.Mapping.start",
        "snippet": "      Position start;",
        "begin_line": 74,
        "end_line": 74,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Mapping",
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "signature": "com.google.javascript.jscomp.Mapping.end",
        "snippet": "      Position end;",
        "begin_line": 75,
        "end_line": 75,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.PrettyCodePrinter",
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "signature": "com.google.javascript.jscomp.PrettyCodePrinter.INDENT",
        "snippet": "    static final String INDENT = \"  \";",
        "begin_line": 196,
        "end_line": 196,
        "comment": " The number of characters after which we insert a line break in the code"
    },
    {
        "class_name": "com.google.javascript.jscomp.PrettyCodePrinter",
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "signature": "com.google.javascript.jscomp.PrettyCodePrinter.code",
        "snippet": "    private final StringBuilder code = new StringBuilder(1024);",
        "begin_line": 198,
        "end_line": 198,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.PrettyCodePrinter",
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "signature": "com.google.javascript.jscomp.PrettyCodePrinter.lineLengthThreshold",
        "snippet": "    private final int lineLengthThreshold;",
        "begin_line": 199,
        "end_line": 199,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.PrettyCodePrinter",
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "signature": "com.google.javascript.jscomp.PrettyCodePrinter.indent",
        "snippet": "    private int indent = 0;",
        "begin_line": 200,
        "end_line": 200,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.PrettyCodePrinter",
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "signature": "com.google.javascript.jscomp.PrettyCodePrinter.lineLength",
        "snippet": "    private int lineLength = 0;",
        "begin_line": 201,
        "end_line": 201,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.PrettyCodePrinter",
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "signature": "com.google.javascript.jscomp.PrettyCodePrinter.lineIndex",
        "snippet": "    private int lineIndex = 0;",
        "begin_line": 202,
        "end_line": 202,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CompactCodePrinter",
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "signature": "com.google.javascript.jscomp.CompactCodePrinter.code",
        "snippet": "    private final StringBuilder code = new StringBuilder(1024);",
        "begin_line": 358,
        "end_line": 358,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CompactCodePrinter",
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "signature": "com.google.javascript.jscomp.CompactCodePrinter.lineBreak",
        "snippet": "    private final boolean lineBreak;",
        "begin_line": 360,
        "end_line": 360,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CompactCodePrinter",
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "signature": "com.google.javascript.jscomp.CompactCodePrinter.lineLengthThreshold",
        "snippet": "    private final int lineLengthThreshold;",
        "begin_line": 361,
        "end_line": 361,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CompactCodePrinter",
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "signature": "com.google.javascript.jscomp.CompactCodePrinter.lineIndex",
        "snippet": "    private int lineIndex = 0;",
        "begin_line": 363,
        "end_line": 363,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CompactCodePrinter",
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "signature": "com.google.javascript.jscomp.CompactCodePrinter.lineLength",
        "snippet": "    private int lineLength = 0;",
        "begin_line": 364,
        "end_line": 364,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CompactCodePrinter",
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "signature": "com.google.javascript.jscomp.CompactCodePrinter.lineStartPosition",
        "snippet": "    private int lineStartPosition = 0;",
        "begin_line": 365,
        "end_line": 365,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CompactCodePrinter",
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "signature": "com.google.javascript.jscomp.CompactCodePrinter.preferredBreakPosition",
        "snippet": "    private int preferredBreakPosition = 0;",
        "begin_line": 366,
        "end_line": 366,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Builder",
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "signature": "com.google.javascript.jscomp.Builder.root",
        "snippet": "    private final Node root;",
        "begin_line": 479,
        "end_line": 479,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Builder",
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "signature": "com.google.javascript.jscomp.Builder.prettyPrint",
        "snippet": "    private boolean prettyPrint = false;",
        "begin_line": 480,
        "end_line": 480,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Builder",
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "signature": "com.google.javascript.jscomp.Builder.lineBreak",
        "snippet": "    private boolean lineBreak = false;",
        "begin_line": 481,
        "end_line": 481,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Builder",
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "signature": "com.google.javascript.jscomp.Builder.outputTypes",
        "snippet": "    private boolean outputTypes = false;",
        "begin_line": 482,
        "end_line": 482,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Builder",
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "signature": "com.google.javascript.jscomp.Builder.lineLengthThreshold",
        "snippet": "    private int lineLengthThreshold = DEFAULT_LINE_LENGTH_THRESHOLD;",
        "begin_line": 483,
        "end_line": 483,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Builder",
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "signature": "com.google.javascript.jscomp.Builder.sourceMap",
        "snippet": "    private SourceMap sourceMap = null;",
        "begin_line": 484,
        "end_line": 484,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Builder",
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "signature": "com.google.javascript.jscomp.Builder.outputCharset",
        "snippet": "    private Charset outputCharset = null;",
        "begin_line": 487,
        "end_line": 487,
        "comment": " then just output ASCII."
    },
    {
        "class_name": "com.google.javascript.jscomp.Builder",
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "signature": "com.google.javascript.jscomp.Builder.validation",
        "snippet": "    private boolean validation = true;",
        "begin_line": 488,
        "end_line": 488,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeValidator",
        "src_path": "src/com/google/javascript/jscomp/TypeValidator.java",
        "signature": "com.google.javascript.jscomp.TypeValidator.compiler",
        "snippet": "  private final AbstractCompiler compiler;",
        "begin_line": 59,
        "end_line": 59,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeValidator",
        "src_path": "src/com/google/javascript/jscomp/TypeValidator.java",
        "signature": "com.google.javascript.jscomp.TypeValidator.typeRegistry",
        "snippet": "  private final JSTypeRegistry typeRegistry;",
        "begin_line": 60,
        "end_line": 60,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeValidator",
        "src_path": "src/com/google/javascript/jscomp/TypeValidator.java",
        "signature": "com.google.javascript.jscomp.TypeValidator.allValueTypes",
        "snippet": "  private final JSType allValueTypes;",
        "begin_line": 61,
        "end_line": 61,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeValidator",
        "src_path": "src/com/google/javascript/jscomp/TypeValidator.java",
        "signature": "com.google.javascript.jscomp.TypeValidator.mismatches",
        "snippet": "  private final List<TypeMismatch> mismatches = Lists.newArrayList();",
        "begin_line": 66,
        "end_line": 66,
        "comment": " allowed, that doesn't mean we should invalidate all Cakes."
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeValidator",
        "src_path": "src/com/google/javascript/jscomp/TypeValidator.java",
        "signature": "com.google.javascript.jscomp.TypeValidator.FOUND_REQUIRED",
        "snippet": "  private static final String FOUND_REQUIRED =\n      \"{0}\\n\" +\n      \"found   : {1}\\n\" +\n      \"required: {2}\";",
        "begin_line": 69,
        "end_line": 72,
        "comment": " User warnings"
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeValidator",
        "src_path": "src/com/google/javascript/jscomp/TypeValidator.java",
        "signature": "com.google.javascript.jscomp.TypeValidator.INVALID_CAST",
        "snippet": "  static final DiagnosticType INVALID_CAST =\n      DiagnosticType.warning(\"JSC_INVALID_CAST\",\n          \"invalid cast - must be a subtype or supertype\\n\" +\n          \"from: {0}\\n\" +\n          \"to  : {1}\");",
        "begin_line": 74,
        "end_line": 78,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeValidator",
        "src_path": "src/com/google/javascript/jscomp/TypeValidator.java",
        "signature": "com.google.javascript.jscomp.TypeValidator.TYPE_MISMATCH_WARNING",
        "snippet": "  static final DiagnosticType TYPE_MISMATCH_WARNING =\n      DiagnosticType.warning(\n          \"JSC_TYPE_MISMATCH\",\n          \"{0}\");",
        "begin_line": 80,
        "end_line": 83,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeValidator",
        "src_path": "src/com/google/javascript/jscomp/TypeValidator.java",
        "signature": "com.google.javascript.jscomp.TypeValidator.MISSING_EXTENDS_TAG_WARNING",
        "snippet": "  static final DiagnosticType MISSING_EXTENDS_TAG_WARNING =\n      DiagnosticType.warning(\n          \"JSC_MISSING_EXTENDS_TAG\",\n          \"Missing @extends tag on type {0}\");",
        "begin_line": 85,
        "end_line": 88,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeValidator",
        "src_path": "src/com/google/javascript/jscomp/TypeValidator.java",
        "signature": "com.google.javascript.jscomp.TypeValidator.DUP_VAR_DECLARATION",
        "snippet": "  static final DiagnosticType DUP_VAR_DECLARATION =\n      DiagnosticType.warning(\"JSC_DUP_VAR_DECLARATION\",\n          \"variable {0} redefined with type {1}, \" +\n          \"original definition at {2}:{3} with type {4}\");",
        "begin_line": 90,
        "end_line": 93,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeValidator",
        "src_path": "src/com/google/javascript/jscomp/TypeValidator.java",
        "signature": "com.google.javascript.jscomp.TypeValidator.HIDDEN_PROPERTY_MISMATCH",
        "snippet": "  static final DiagnosticType HIDDEN_PROPERTY_MISMATCH =\n      DiagnosticType.warning(\"JSC_HIDDEN_PROPERTY_MISMATCH\",\n          \"mismatch of the {0} property type and the type \" +\n          \"of the property it overrides from superclass {1}\\n\" +\n          \"original: {2}\\n\" +\n          \"override: {3}\");",
        "begin_line": 95,
        "end_line": 100,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeValidator",
        "src_path": "src/com/google/javascript/jscomp/TypeValidator.java",
        "signature": "com.google.javascript.jscomp.TypeValidator.INTERFACE_METHOD_NOT_IMPLEMENTED",
        "snippet": "  static final DiagnosticType INTERFACE_METHOD_NOT_IMPLEMENTED =\n      DiagnosticType.warning(\n          \"JSC_INTERFACE_METHOD_NOT_IMPLEMENTED\",\n          \"property {0} on interface {1} is not implemented by type {2}\");",
        "begin_line": 102,
        "end_line": 105,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeValidator",
        "src_path": "src/com/google/javascript/jscomp/TypeValidator.java",
        "signature": "com.google.javascript.jscomp.TypeValidator.ALL_DIAGNOSTICS",
        "snippet": "  static final DiagnosticGroup ALL_DIAGNOSTICS = new DiagnosticGroup(\n      INVALID_CAST,\n      TYPE_MISMATCH_WARNING,\n      MISSING_EXTENDS_TAG_WARNING,\n      DUP_VAR_DECLARATION,\n      HIDDEN_PROPERTY_MISMATCH,\n      INTERFACE_METHOD_NOT_IMPLEMENTED);",
        "begin_line": 107,
        "end_line": 113,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeMismatch",
        "src_path": "src/com/google/javascript/jscomp/TypeValidator.java",
        "signature": "com.google.javascript.jscomp.TypeMismatch.typeA",
        "snippet": "    final JSType typeA;",
        "begin_line": 679,
        "end_line": 679,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeMismatch",
        "src_path": "src/com/google/javascript/jscomp/TypeValidator.java",
        "signature": "com.google.javascript.jscomp.TypeMismatch.typeB",
        "snippet": "    final JSType typeB;",
        "begin_line": 680,
        "end_line": 680,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DiagnosticGroupWarningsGuard",
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroupWarningsGuard.java",
        "signature": "com.google.javascript.jscomp.DiagnosticGroupWarningsGuard.group",
        "snippet": "  private final DiagnosticGroup group;",
        "begin_line": 27,
        "end_line": 27,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DiagnosticGroupWarningsGuard",
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroupWarningsGuard.java",
        "signature": "com.google.javascript.jscomp.DiagnosticGroupWarningsGuard.level",
        "snippet": "  private final CheckLevel level;",
        "begin_line": 28,
        "end_line": 28,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CodeConsumer",
        "src_path": "src/com/google/javascript/jscomp/CodeConsumer.java",
        "signature": "com.google.javascript.jscomp.CodeConsumer.statementNeedsEnded",
        "snippet": "  boolean statementNeedsEnded = false;",
        "begin_line": 33,
        "end_line": 33,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CodeConsumer",
        "src_path": "src/com/google/javascript/jscomp/CodeConsumer.java",
        "signature": "com.google.javascript.jscomp.CodeConsumer.statementStarted",
        "snippet": "  boolean statementStarted = false;",
        "begin_line": 34,
        "end_line": 34,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CodeConsumer",
        "src_path": "src/com/google/javascript/jscomp/CodeConsumer.java",
        "signature": "com.google.javascript.jscomp.CodeConsumer.sawFunction",
        "snippet": "  boolean sawFunction = false;",
        "begin_line": 35,
        "end_line": 35,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 1L;",
        "begin_line": 73,
        "end_line": 73,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.reporter",
        "snippet": "  private final transient ErrorReporter reporter;",
        "begin_line": 80,
        "end_line": 80,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.nativeTypes",
        "snippet": "  private final JSType[] nativeTypes;",
        "begin_line": 85,
        "end_line": 85,
        "comment": " CPU time on bounds checking inside get()."
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.namesToTypes",
        "snippet": "  private final Map<String, JSType> namesToTypes;",
        "begin_line": 87,
        "end_line": 87,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.namespaces",
        "snippet": "  private final Set<String> namespaces = new HashSet<String>();",
        "begin_line": 90,
        "end_line": 90,
        "comment": " Set of namespaces in which types (or other namespaces) exist."
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.enumTypeNames",
        "snippet": "  private final Set<String> enumTypeNames = new HashSet<String>();",
        "begin_line": 105,
        "end_line": 105,
        "comment": " nullable or not."
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.forwardDeclaredTypes",
        "snippet": "  private final Set<String> forwardDeclaredTypes = new HashSet<String>();",
        "begin_line": 110,
        "end_line": 110,
        "comment": " try to type-check them at all."
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.typesIndexedByProperty",
        "snippet": "  private final Map<String, Set<ObjectType>> typesIndexedByProperty =\n      Maps.newHashMap();",
        "begin_line": 114,
        "end_line": 115,
        "comment": " declared."
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.greatestSubtypeByProperty",
        "snippet": "  private final Map<String, JSType> greatestSubtypeByProperty =\n      Maps.newHashMap();",
        "begin_line": 120,
        "end_line": 121,
        "comment": " typesIndexedByProperty."
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.interfaceToImplementors",
        "snippet": "  private final Multimap<String, FunctionType> interfaceToImplementors =\n      HashMultimap.create();",
        "begin_line": 124,
        "end_line": 125,
        "comment": " A map from interface name to types that implement it."
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.unresolvedNamedTypes",
        "snippet": "  private final Multimap<StaticScope<JSType>, NamedType> unresolvedNamedTypes =\n      ArrayListMultimap.create();",
        "begin_line": 128,
        "end_line": 129,
        "comment": " All the unresolved named types."
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.resolvedNamedTypes",
        "snippet": "  private final Multimap<StaticScope<JSType>, NamedType> resolvedNamedTypes =\n      ArrayListMultimap.create();",
        "begin_line": 132,
        "end_line": 133,
        "comment": " All the resolved named types."
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.lastGeneration",
        "snippet": "  private boolean lastGeneration = true;",
        "begin_line": 136,
        "end_line": 136,
        "comment": " NamedType warns about unresolved types in the last generation."
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.templateTypeName",
        "snippet": "  private String templateTypeName;",
        "begin_line": 139,
        "end_line": 139,
        "comment": " The template type name."
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.templateType",
        "snippet": "  private TemplateType templateType;",
        "begin_line": 142,
        "end_line": 142,
        "comment": " The template type."
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.serialVersionUID",
        "snippet": "        private static final long serialVersionUID = 1L;",
        "begin_line": 235,
        "end_line": 235,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.serialVersionUID",
        "snippet": "        private static final long serialVersionUID = 1L;",
        "begin_line": 358,
        "end_line": 358,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.serialVersionUID",
        "snippet": "          private static final long serialVersionUID = 1L;",
        "begin_line": 434,
        "end_line": 434,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.NumberType",
        "src_path": "src/com/google/javascript/rhino/jstype/NumberType.java",
        "signature": "com.google.javascript.rhino.jstype.NumberType.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 1L;",
        "begin_line": 51,
        "end_line": 51,
        "comment": ""
    }
]