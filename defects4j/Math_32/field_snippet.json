[
    {
        "class_name": "org.apache.commons.math3.geometry.euclidean.threed.RotationTransform",
        "src_path": "src/main/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet.java",
        "signature": "org.apache.commons.math3.geometry.euclidean.threed.RotationTransform.center",
        "snippet": "        private Vector3D   center;",
        "begin_line": 305,
        "end_line": 305,
        "comment": " Center point of the rotation. "
    },
    {
        "class_name": "org.apache.commons.math3.geometry.euclidean.threed.RotationTransform",
        "src_path": "src/main/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet.java",
        "signature": "org.apache.commons.math3.geometry.euclidean.threed.RotationTransform.rotation",
        "snippet": "        private Rotation   rotation;",
        "begin_line": 308,
        "end_line": 308,
        "comment": " Vectorial rotation. "
    },
    {
        "class_name": "org.apache.commons.math3.geometry.euclidean.threed.RotationTransform",
        "src_path": "src/main/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet.java",
        "signature": "org.apache.commons.math3.geometry.euclidean.threed.RotationTransform.cachedOriginal",
        "snippet": "        private Plane cachedOriginal;",
        "begin_line": 311,
        "end_line": 311,
        "comment": " Cached original hyperplane. "
    },
    {
        "class_name": "org.apache.commons.math3.geometry.euclidean.threed.RotationTransform",
        "src_path": "src/main/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet.java",
        "signature": "org.apache.commons.math3.geometry.euclidean.threed.RotationTransform.cachedTransform",
        "snippet": "        private Transform<Euclidean2D, Euclidean1D>  cachedTransform;",
        "begin_line": 314,
        "end_line": 314,
        "comment": " Cached 2D transform valid inside the cached original hyperplane. "
    },
    {
        "class_name": "org.apache.commons.math3.geometry.euclidean.threed.TranslationTransform",
        "src_path": "src/main/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet.java",
        "signature": "org.apache.commons.math3.geometry.euclidean.threed.TranslationTransform.translation",
        "snippet": "        private Vector3D   translation;",
        "begin_line": 378,
        "end_line": 378,
        "comment": " Translation vector. "
    },
    {
        "class_name": "org.apache.commons.math3.geometry.euclidean.threed.TranslationTransform",
        "src_path": "src/main/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet.java",
        "signature": "org.apache.commons.math3.geometry.euclidean.threed.TranslationTransform.cachedOriginal",
        "snippet": "        private Plane cachedOriginal;",
        "begin_line": 381,
        "end_line": 381,
        "comment": " Cached original hyperplane. "
    },
    {
        "class_name": "org.apache.commons.math3.geometry.euclidean.threed.TranslationTransform",
        "src_path": "src/main/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet.java",
        "signature": "org.apache.commons.math3.geometry.euclidean.threed.TranslationTransform.cachedTransform",
        "snippet": "        private Transform<Euclidean2D, Euclidean1D>  cachedTransform;",
        "begin_line": 384,
        "end_line": 384,
        "comment": " Cached 2D transform valid inside the cached original hyperplane. "
    },
    {
        "class_name": "org.apache.commons.math3.geometry.partitioning.AbstractRegion",
        "src_path": "src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractRegion.java",
        "signature": "org.apache.commons.math3.geometry.partitioning.AbstractRegion.tree",
        "snippet": "    private BSPTree<S> tree;",
        "begin_line": 40,
        "end_line": 40,
        "comment": " Inside/Outside BSP tree. "
    },
    {
        "class_name": "org.apache.commons.math3.geometry.partitioning.AbstractRegion",
        "src_path": "src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractRegion.java",
        "signature": "org.apache.commons.math3.geometry.partitioning.AbstractRegion.size",
        "snippet": "    private double size;",
        "begin_line": 43,
        "end_line": 43,
        "comment": " Size of the instance. "
    },
    {
        "class_name": "org.apache.commons.math3.geometry.partitioning.AbstractRegion",
        "src_path": "src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractRegion.java",
        "signature": "org.apache.commons.math3.geometry.partitioning.AbstractRegion.barycenter",
        "snippet": "    private Vector<S> barycenter;",
        "begin_line": 46,
        "end_line": 46,
        "comment": " Barycenter. "
    },
    {
        "class_name": "org.apache.commons.math3.geometry.partitioning.Sides",
        "src_path": "src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractRegion.java",
        "signature": "org.apache.commons.math3.geometry.partitioning.Sides.plusFound",
        "snippet": "        private boolean plusFound;",
        "begin_line": 517,
        "end_line": 517,
        "comment": " Indicator of inside leaf nodes found on the plus side. "
    },
    {
        "class_name": "org.apache.commons.math3.geometry.partitioning.Sides",
        "src_path": "src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractRegion.java",
        "signature": "org.apache.commons.math3.geometry.partitioning.Sides.minusFound",
        "snippet": "        private boolean minusFound;",
        "begin_line": 520,
        "end_line": 520,
        "comment": " Indicator of inside leaf nodes found on the plus side. "
    },
    {
        "class_name": "org.apache.commons.math3.geometry.partitioning.BSPTree",
        "src_path": "src/main/java/org/apache/commons/math3/geometry/partitioning/BSPTree.java",
        "signature": "org.apache.commons.math3.geometry.partitioning.BSPTree.cut",
        "snippet": "    private SubHyperplane<S> cut;",
        "begin_line": 66,
        "end_line": 66,
        "comment": " Cut sub-hyperplane. "
    },
    {
        "class_name": "org.apache.commons.math3.geometry.partitioning.BSPTree",
        "src_path": "src/main/java/org/apache/commons/math3/geometry/partitioning/BSPTree.java",
        "signature": "org.apache.commons.math3.geometry.partitioning.BSPTree.plus",
        "snippet": "    private BSPTree<S> plus;",
        "begin_line": 69,
        "end_line": 69,
        "comment": " Tree at the plus side of the cut hyperplane. "
    },
    {
        "class_name": "org.apache.commons.math3.geometry.partitioning.BSPTree",
        "src_path": "src/main/java/org/apache/commons/math3/geometry/partitioning/BSPTree.java",
        "signature": "org.apache.commons.math3.geometry.partitioning.BSPTree.minus",
        "snippet": "    private BSPTree<S> minus;",
        "begin_line": 72,
        "end_line": 72,
        "comment": " Tree at the minus side of the cut hyperplane. "
    },
    {
        "class_name": "org.apache.commons.math3.geometry.partitioning.BSPTree",
        "src_path": "src/main/java/org/apache/commons/math3/geometry/partitioning/BSPTree.java",
        "signature": "org.apache.commons.math3.geometry.partitioning.BSPTree.parent",
        "snippet": "    private BSPTree<S> parent;",
        "begin_line": 75,
        "end_line": 75,
        "comment": " Parent tree. "
    },
    {
        "class_name": "org.apache.commons.math3.geometry.partitioning.BSPTree",
        "src_path": "src/main/java/org/apache/commons/math3/geometry/partitioning/BSPTree.java",
        "signature": "org.apache.commons.math3.geometry.partitioning.BSPTree.attribute",
        "snippet": "    private Object attribute;",
        "begin_line": 78,
        "end_line": 78,
        "comment": " Application-defined attribute. "
    },
    {
        "class_name": "org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple",
        "src_path": "src/main/java/org/apache/commons/math3/geometry/partitioning/utilities/OrderedTuple.java",
        "signature": "org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple.SIGN_MASK",
        "snippet": "    private static final long SIGN_MASK     = 0x8000000000000000L;",
        "begin_line": 97,
        "end_line": 97,
        "comment": " Sign bit mask. "
    },
    {
        "class_name": "org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple",
        "src_path": "src/main/java/org/apache/commons/math3/geometry/partitioning/utilities/OrderedTuple.java",
        "signature": "org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple.EXPONENT_MASK",
        "snippet": "    private static final long EXPONENT_MASK = 0x7ff0000000000000L;",
        "begin_line": 100,
        "end_line": 100,
        "comment": " Exponent bits mask. "
    },
    {
        "class_name": "org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple",
        "src_path": "src/main/java/org/apache/commons/math3/geometry/partitioning/utilities/OrderedTuple.java",
        "signature": "org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple.MANTISSA_MASK",
        "snippet": "    private static final long MANTISSA_MASK = 0x000fffffffffffffL;",
        "begin_line": 103,
        "end_line": 103,
        "comment": " Mantissa bits mask. "
    },
    {
        "class_name": "org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple",
        "src_path": "src/main/java/org/apache/commons/math3/geometry/partitioning/utilities/OrderedTuple.java",
        "signature": "org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple.IMPLICIT_ONE",
        "snippet": "    private static final long IMPLICIT_ONE  = 0x0010000000000000L;",
        "begin_line": 106,
        "end_line": 106,
        "comment": " Implicit MSB for normalized numbers. "
    },
    {
        "class_name": "org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple",
        "src_path": "src/main/java/org/apache/commons/math3/geometry/partitioning/utilities/OrderedTuple.java",
        "signature": "org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple.components",
        "snippet": "    private double[] components;",
        "begin_line": 109,
        "end_line": 109,
        "comment": " Double components of the T-uple. "
    },
    {
        "class_name": "org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple",
        "src_path": "src/main/java/org/apache/commons/math3/geometry/partitioning/utilities/OrderedTuple.java",
        "signature": "org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple.offset",
        "snippet": "    private int offset;",
        "begin_line": 112,
        "end_line": 112,
        "comment": " Offset scale. "
    },
    {
        "class_name": "org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple",
        "src_path": "src/main/java/org/apache/commons/math3/geometry/partitioning/utilities/OrderedTuple.java",
        "signature": "org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple.lsb",
        "snippet": "    private int lsb;",
        "begin_line": 115,
        "end_line": 115,
        "comment": " Least Significant Bit scale. "
    },
    {
        "class_name": "org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple",
        "src_path": "src/main/java/org/apache/commons/math3/geometry/partitioning/utilities/OrderedTuple.java",
        "signature": "org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple.encoding",
        "snippet": "    private long[] encoding;",
        "begin_line": 118,
        "end_line": 118,
        "comment": " Ordering encoding of the double components. "
    },
    {
        "class_name": "org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple",
        "src_path": "src/main/java/org/apache/commons/math3/geometry/partitioning/utilities/OrderedTuple.java",
        "signature": "org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple.posInf",
        "snippet": "    private boolean posInf;",
        "begin_line": 121,
        "end_line": 121,
        "comment": " Positive infinity marker. "
    },
    {
        "class_name": "org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple",
        "src_path": "src/main/java/org/apache/commons/math3/geometry/partitioning/utilities/OrderedTuple.java",
        "signature": "org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple.negInf",
        "snippet": "    private boolean negInf;",
        "begin_line": 124,
        "end_line": 124,
        "comment": " Negative infinity marker. "
    },
    {
        "class_name": "org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple",
        "src_path": "src/main/java/org/apache/commons/math3/geometry/partitioning/utilities/OrderedTuple.java",
        "signature": "org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple.nan",
        "snippet": "    private boolean nan;",
        "begin_line": 127,
        "end_line": 127,
        "comment": " Not A Number marker. "
    },
    {
        "class_name": "org.apache.commons.math3.util.MathArrays",
        "src_path": "src/main/java/org/apache/commons/math3/util/MathArrays.java",
        "signature": "org.apache.commons.math3.util.MathArrays.SPLIT_FACTOR",
        "snippet": "    private static final int SPLIT_FACTOR = 0x8000001;",
        "begin_line": 41,
        "end_line": 41,
        "comment": " Factor used for splitting double numbers: n = 2^27 + 1 (i.e. {@value}). "
    },
    {
        "class_name": "org.apache.commons.math3.geometry.euclidean.oned.Vector1D",
        "src_path": "src/main/java/org/apache/commons/math3/geometry/euclidean/oned/Vector1D.java",
        "signature": "org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ZERO",
        "snippet": "    public static final Vector1D ZERO = new Vector1D(0.0);",
        "begin_line": 36,
        "end_line": 36,
        "comment": " Origin (coordinates: 0). "
    },
    {
        "class_name": "org.apache.commons.math3.geometry.euclidean.oned.Vector1D",
        "src_path": "src/main/java/org/apache/commons/math3/geometry/euclidean/oned/Vector1D.java",
        "signature": "org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ONE",
        "snippet": "    public static final Vector1D ONE  = new Vector1D(1.0);",
        "begin_line": 39,
        "end_line": 39,
        "comment": " Unit (coordinates: 1). "
    },
    {
        "class_name": "org.apache.commons.math3.geometry.euclidean.oned.Vector1D",
        "src_path": "src/main/java/org/apache/commons/math3/geometry/euclidean/oned/Vector1D.java",
        "signature": "org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN",
        "snippet": "    public static final Vector1D NaN = new Vector1D(Double.NaN);",
        "begin_line": 43,
        "end_line": 43,
        "comment": " A vector with all coordinates set to NaN. "
    },
    {
        "class_name": "org.apache.commons.math3.geometry.euclidean.oned.Vector1D",
        "src_path": "src/main/java/org/apache/commons/math3/geometry/euclidean/oned/Vector1D.java",
        "signature": "org.apache.commons.math3.geometry.euclidean.oned.Vector1D.POSITIVE_INFINITY",
        "snippet": "    public static final Vector1D POSITIVE_INFINITY =\n        new Vector1D(Double.POSITIVE_INFINITY);",
        "begin_line": 47,
        "end_line": 48,
        "comment": " A vector with all coordinates set to positive infinity. "
    },
    {
        "class_name": "org.apache.commons.math3.geometry.euclidean.oned.Vector1D",
        "src_path": "src/main/java/org/apache/commons/math3/geometry/euclidean/oned/Vector1D.java",
        "signature": "org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NEGATIVE_INFINITY",
        "snippet": "    public static final Vector1D NEGATIVE_INFINITY =\n        new Vector1D(Double.NEGATIVE_INFINITY);",
        "begin_line": 51,
        "end_line": 52,
        "comment": " A vector with all coordinates set to negative infinity. "
    },
    {
        "class_name": "org.apache.commons.math3.geometry.euclidean.oned.Vector1D",
        "src_path": "src/main/java/org/apache/commons/math3/geometry/euclidean/oned/Vector1D.java",
        "signature": "org.apache.commons.math3.geometry.euclidean.oned.Vector1D.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 7556674948671647925L;",
        "begin_line": 55,
        "end_line": 55,
        "comment": " Serializable UID. "
    },
    {
        "class_name": "org.apache.commons.math3.geometry.euclidean.oned.Vector1D",
        "src_path": "src/main/java/org/apache/commons/math3/geometry/euclidean/oned/Vector1D.java",
        "signature": "org.apache.commons.math3.geometry.euclidean.oned.Vector1D.x",
        "snippet": "    private final double x;",
        "begin_line": 58,
        "end_line": 58,
        "comment": " Abscissa. "
    },
    {
        "class_name": "org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet",
        "src_path": "src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java",
        "signature": "org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.vertices",
        "snippet": "    private Vector2D[][] vertices;",
        "begin_line": 45,
        "end_line": 45,
        "comment": " Vertices organized as boundary loops. "
    },
    {
        "class_name": "org.apache.commons.math3.geometry.euclidean.twod.ComparableSegment",
        "src_path": "src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java",
        "signature": "org.apache.commons.math3.geometry.euclidean.twod.ComparableSegment.sortingKey",
        "snippet": "        private OrderedTuple sortingKey;",
        "begin_line": 356,
        "end_line": 356,
        "comment": " Sorting key. "
    },
    {
        "class_name": "org.apache.commons.math3.geometry.euclidean.twod.SegmentsBuilder",
        "src_path": "src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java",
        "signature": "org.apache.commons.math3.geometry.euclidean.twod.SegmentsBuilder.sorted",
        "snippet": "        private AVLTree<ComparableSegment> sorted;",
        "begin_line": 414,
        "end_line": 414,
        "comment": " Sorted segments. "
    },
    {
        "class_name": "org.apache.commons.math3.geometry.euclidean.twod.Segment",
        "src_path": "src/main/java/org/apache/commons/math3/geometry/euclidean/twod/Segment.java",
        "signature": "org.apache.commons.math3.geometry.euclidean.twod.Segment.start",
        "snippet": "    private final Vector2D start;",
        "begin_line": 27,
        "end_line": 27,
        "comment": " Start point of the segment. "
    },
    {
        "class_name": "org.apache.commons.math3.geometry.euclidean.twod.Segment",
        "src_path": "src/main/java/org/apache/commons/math3/geometry/euclidean/twod/Segment.java",
        "signature": "org.apache.commons.math3.geometry.euclidean.twod.Segment.end",
        "snippet": "    private final Vector2D end;",
        "begin_line": 30,
        "end_line": 30,
        "comment": " End point of the segments. "
    },
    {
        "class_name": "org.apache.commons.math3.geometry.euclidean.twod.Segment",
        "src_path": "src/main/java/org/apache/commons/math3/geometry/euclidean/twod/Segment.java",
        "signature": "org.apache.commons.math3.geometry.euclidean.twod.Segment.line",
        "snippet": "    private final Line     line;",
        "begin_line": 33,
        "end_line": 33,
        "comment": " Line containing the segment. "
    },
    {
        "class_name": "org.apache.commons.math3.util.MathUtils",
        "src_path": "src/main/java/org/apache/commons/math3/util/MathUtils.java",
        "signature": "org.apache.commons.math3.util.MathUtils.TWO_PI",
        "snippet": "    public static final double TWO_PI = 2 * FastMath.PI;",
        "begin_line": 42,
        "end_line": 42,
        "comment": "\n     * 2 &pi;.\n     * @since 2.1\n     "
    },
    {
        "class_name": "org.apache.commons.math3.util.FastMath",
        "src_path": "src/main/java/org/apache/commons/math3/util/FastMath.java",
        "signature": "org.apache.commons.math3.util.FastMath.PI",
        "snippet": "    public static final double PI = 105414357.0 / 33554432.0 + 1.984187159361080883e-9;",
        "begin_line": 83,
        "end_line": 83,
        "comment": " Archimede's constant PI, ratio of circle circumference to diameter. "
    },
    {
        "class_name": "org.apache.commons.math3.util.FastMath",
        "src_path": "src/main/java/org/apache/commons/math3/util/FastMath.java",
        "signature": "org.apache.commons.math3.util.FastMath.E",
        "snippet": "    public static final double E = 2850325.0 / 1048576.0 + 8.254840070411028747e-8;",
        "begin_line": 86,
        "end_line": 86,
        "comment": " Napier's constant e, base of the natural logarithm. "
    },
    {
        "class_name": "org.apache.commons.math3.util.FastMath",
        "src_path": "src/main/java/org/apache/commons/math3/util/FastMath.java",
        "signature": "org.apache.commons.math3.util.FastMath.EXP_INT_TABLE_MAX_INDEX",
        "snippet": "    static final int EXP_INT_TABLE_MAX_INDEX = 750;",
        "begin_line": 89,
        "end_line": 89,
        "comment": " Index of exp(0) in the array of integer exponentials. "
    },
    {
        "class_name": "org.apache.commons.math3.util.FastMath",
        "src_path": "src/main/java/org/apache/commons/math3/util/FastMath.java",
        "signature": "org.apache.commons.math3.util.FastMath.EXP_INT_TABLE_LEN",
        "snippet": "    static final int EXP_INT_TABLE_LEN = EXP_INT_TABLE_MAX_INDEX * 2;",
        "begin_line": 91,
        "end_line": 91,
        "comment": " Length of the array of integer exponentials. "
    },
    {
        "class_name": "org.apache.commons.math3.util.FastMath",
        "src_path": "src/main/java/org/apache/commons/math3/util/FastMath.java",
        "signature": "org.apache.commons.math3.util.FastMath.LN_MANT_LEN",
        "snippet": "    static final int LN_MANT_LEN = 1024;",
        "begin_line": 93,
        "end_line": 93,
        "comment": " Logarithm table length. "
    },
    {
        "class_name": "org.apache.commons.math3.util.FastMath",
        "src_path": "src/main/java/org/apache/commons/math3/util/FastMath.java",
        "signature": "org.apache.commons.math3.util.FastMath.EXP_FRAC_TABLE_LEN",
        "snippet": "    static final int EXP_FRAC_TABLE_LEN = 1025; // 0, 1/1024, ... 1024/1024",
        "begin_line": 95,
        "end_line": 95,
        "comment": " 0, 1/1024, ... 1024/1024"
    },
    {
        "class_name": "org.apache.commons.math3.util.FastMath",
        "src_path": "src/main/java/org/apache/commons/math3/util/FastMath.java",
        "signature": "org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME",
        "snippet": "    private static final boolean RECOMPUTE_TABLES_AT_RUNTIME = false;",
        "begin_line": 104,
        "end_line": 104,
        "comment": " Indicator for tables initialization.\n     * <p>\n     * This compile-time constant should be set to true only if one explicitly\n     * wants to compute the tables at class loading time instead of using the\n     * already computed ones provided as literal arrays below.\n     * </p>\n     "
    },
    {
        "class_name": "org.apache.commons.math3.util.FastMath",
        "src_path": "src/main/java/org/apache/commons/math3/util/FastMath.java",
        "signature": "org.apache.commons.math3.util.FastMath.LN_2_A",
        "snippet": "    private static final double LN_2_A = 0.693147063255310059;",
        "begin_line": 107,
        "end_line": 107,
        "comment": " log(2) (high bits). "
    },
    {
        "class_name": "org.apache.commons.math3.util.FastMath",
        "src_path": "src/main/java/org/apache/commons/math3/util/FastMath.java",
        "signature": "org.apache.commons.math3.util.FastMath.LN_2_B",
        "snippet": "    private static final double LN_2_B = 1.17304635250823482e-7;",
        "begin_line": 110,
        "end_line": 110,
        "comment": " log(2) (low bits). "
    },
    {
        "class_name": "org.apache.commons.math3.util.FastMath",
        "src_path": "src/main/java/org/apache/commons/math3/util/FastMath.java",
        "signature": "org.apache.commons.math3.util.FastMath.LN_QUICK_COEF",
        "snippet": "    private static final double LN_QUICK_COEF[][] = {\n        {1.0, 5.669184079525E-24},\n        {-0.25, -0.25},\n        {0.3333333134651184, 1.986821492305628E-8},\n        {-0.25, -6.663542893624021E-14},\n        {0.19999998807907104, 1.1921056801463227E-8},\n        {-0.1666666567325592, -7.800414592973399E-9},\n        {0.1428571343421936, 5.650007086920087E-9},\n        {-0.12502530217170715, -7.44321345601866E-11},\n        {0.11113807559013367, 9.219544613762692E-9},\n    };",
        "begin_line": 113,
        "end_line": 123,
        "comment": " Coefficients for log, when input 0.99 < x < 1.01. "
    },
    {
        "class_name": "org.apache.commons.math3.util.FastMath",
        "src_path": "src/main/java/org/apache/commons/math3/util/FastMath.java",
        "signature": "org.apache.commons.math3.util.FastMath.LN_HI_PREC_COEF",
        "snippet": "    private static final double LN_HI_PREC_COEF[][] = {\n        {1.0, -6.032174644509064E-23},\n        {-0.25, -0.25},\n        {0.3333333134651184, 1.9868161777724352E-8},\n        {-0.2499999701976776, -2.957007209750105E-8},\n        {0.19999954104423523, 1.5830993332061267E-10},\n        {-0.16624879837036133, -2.6033824355191673E-8}\n    };",
        "begin_line": 126,
        "end_line": 133,
        "comment": " Coefficients for log in the range of 1.0 < x < 1.0 + 2^-10. "
    },
    {
        "class_name": "org.apache.commons.math3.util.FastMath",
        "src_path": "src/main/java/org/apache/commons/math3/util/FastMath.java",
        "signature": "org.apache.commons.math3.util.FastMath.SINE_TABLE_LEN",
        "snippet": "    private static final int SINE_TABLE_LEN = 14;",
        "begin_line": 136,
        "end_line": 136,
        "comment": " Sine, Cosine, Tangent tables are for 0, 1/8, 2/8, ... 13/8 = PI/2 approx. "
    },
    {
        "class_name": "org.apache.commons.math3.util.FastMath",
        "src_path": "src/main/java/org/apache/commons/math3/util/FastMath.java",
        "signature": "org.apache.commons.math3.util.FastMath.SINE_TABLE_A",
        "snippet": "    private static final double SINE_TABLE_A[] =\n        {\n        +0.0d,\n        +0.1246747374534607d,\n        +0.24740394949913025d,\n        +0.366272509098053d,\n        +0.4794255495071411d,\n        +0.5850973129272461d,\n        +0.6816387176513672d,\n        +0.7675435543060303d,\n        +0.8414709568023682d,\n        +0.902267575263977d,\n        +0.9489846229553223d,\n        +0.9808930158615112d,\n        +0.9974949359893799d,\n        +0.9985313415527344d,\n    };",
        "begin_line": 139,
        "end_line": 155,
        "comment": " Sine table (high bits). "
    },
    {
        "class_name": "org.apache.commons.math3.util.FastMath",
        "src_path": "src/main/java/org/apache/commons/math3/util/FastMath.java",
        "signature": "org.apache.commons.math3.util.FastMath.SINE_TABLE_B",
        "snippet": "    private static final double SINE_TABLE_B[] =\n        {\n        +0.0d,\n        -4.068233003401932E-9d,\n        +9.755392680573412E-9d,\n        +1.9987994582857286E-8d,\n        -1.0902938113007961E-8d,\n        -3.9986783938944604E-8d,\n        +4.23719669792332E-8d,\n        -5.207000323380292E-8d,\n        +2.800552834259E-8d,\n        +1.883511811213715E-8d,\n        -3.5997360512765566E-9d,\n        +4.116164446561962E-8d,\n        +5.0614674548127384E-8d,\n        -1.0129027912496858E-9d,\n    };",
        "begin_line": 158,
        "end_line": 174,
        "comment": " Sine table (low bits). "
    },
    {
        "class_name": "org.apache.commons.math3.util.FastMath",
        "src_path": "src/main/java/org/apache/commons/math3/util/FastMath.java",
        "signature": "org.apache.commons.math3.util.FastMath.COSINE_TABLE_A",
        "snippet": "    private static final double COSINE_TABLE_A[] =\n        {\n        +1.0d,\n        +0.9921976327896118d,\n        +0.9689123630523682d,\n        +0.9305076599121094d,\n        +0.8775825500488281d,\n        +0.8109631538391113d,\n        +0.7316888570785522d,\n        +0.6409968137741089d,\n        +0.5403022766113281d,\n        +0.4311765432357788d,\n        +0.3153223395347595d,\n        +0.19454771280288696d,\n        +0.07073719799518585d,\n        -0.05417713522911072d,\n    };",
        "begin_line": 177,
        "end_line": 193,
        "comment": " Cosine table (high bits). "
    },
    {
        "class_name": "org.apache.commons.math3.util.FastMath",
        "src_path": "src/main/java/org/apache/commons/math3/util/FastMath.java",
        "signature": "org.apache.commons.math3.util.FastMath.COSINE_TABLE_B",
        "snippet": "    private static final double COSINE_TABLE_B[] =\n        {\n        +0.0d,\n        +3.4439717236742845E-8d,\n        +5.865827662008209E-8d,\n        -3.7999795083850525E-8d,\n        +1.184154459111628E-8d,\n        -3.43338934259355E-8d,\n        +1.1795268640216787E-8d,\n        +4.438921624363781E-8d,\n        +2.925681159240093E-8d,\n        -2.6437112632041807E-8d,\n        +2.2860509143963117E-8d,\n        -4.813899778443457E-9d,\n        +3.6725170580355583E-9d,\n        +2.0217439756338078E-10d,\n    };",
        "begin_line": 196,
        "end_line": 212,
        "comment": " Cosine table (low bits). "
    },
    {
        "class_name": "org.apache.commons.math3.util.FastMath",
        "src_path": "src/main/java/org/apache/commons/math3/util/FastMath.java",
        "signature": "org.apache.commons.math3.util.FastMath.TANGENT_TABLE_A",
        "snippet": "    private static final double TANGENT_TABLE_A[] =\n        {\n        +0.0d,\n        +0.1256551444530487d,\n        +0.25534194707870483d,\n        +0.3936265707015991d,\n        +0.5463024377822876d,\n        +0.7214844226837158d,\n        +0.9315965175628662d,\n        +1.1974215507507324d,\n        +1.5574076175689697d,\n        +2.092571258544922d,\n        +3.0095696449279785d,\n        +5.041914939880371d,\n        +14.101419448852539d,\n        -18.430862426757812d,\n    };",
        "begin_line": 216,
        "end_line": 232,
        "comment": " Tangent table, used by atan() (high bits). "
    },
    {
        "class_name": "org.apache.commons.math3.util.FastMath",
        "src_path": "src/main/java/org/apache/commons/math3/util/FastMath.java",
        "signature": "org.apache.commons.math3.util.FastMath.TANGENT_TABLE_B",
        "snippet": "    private static final double TANGENT_TABLE_B[] =\n        {\n        +0.0d,\n        -7.877917738262007E-9d,\n        -2.5857668567479893E-8d,\n        +5.2240336371356666E-9d,\n        +5.206150291559893E-8d,\n        +1.8307188599677033E-8d,\n        -5.7618793749770706E-8d,\n        +7.848361555046424E-8d,\n        +1.0708593250394448E-7d,\n        +1.7827257129423813E-8d,\n        +2.893485277253286E-8d,\n        +3.1660099222737955E-7d,\n        +4.983191803254889E-7d,\n        -3.356118100840571E-7d,\n    };",
        "begin_line": 235,
        "end_line": 251,
        "comment": " Tangent table, used by atan() (low bits). "
    },
    {
        "class_name": "org.apache.commons.math3.util.FastMath",
        "src_path": "src/main/java/org/apache/commons/math3/util/FastMath.java",
        "signature": "org.apache.commons.math3.util.FastMath.RECIP_2PI",
        "snippet": "    private static final long RECIP_2PI[] = new long[] {\n        (0x28be60dbL << 32) | 0x9391054aL,\n        (0x7f09d5f4L << 32) | 0x7d4d3770L,\n        (0x36d8a566L << 32) | 0x4f10e410L,\n        (0x7f9458eaL << 32) | 0xf7aef158L,\n        (0x6dc91b8eL << 32) | 0x909374b8L,\n        (0x01924bbaL << 32) | 0x82746487L,\n        (0x3f877ac7L << 32) | 0x2c4a69cfL,\n        (0xba208d7dL << 32) | 0x4baed121L,\n        (0x3a671c09L << 32) | 0xad17df90L,\n        (0x4e64758eL << 32) | 0x60d4ce7dL,\n        (0x272117e2L << 32) | 0xef7e4a0eL,\n        (0xc7fe25ffL << 32) | 0xf7816603L,\n        (0xfbcbc462L << 32) | 0xd6829b47L,\n        (0xdb4d9fb3L << 32) | 0xc9f2c26dL,\n        (0xd3d18fd9L << 32) | 0xa797fa8bL,\n        (0x5d49eeb1L << 32) | 0xfaf97c5eL,\n        (0xcf41ce7dL << 32) | 0xe294a4baL,\n         0x9afed7ecL << 32  };",
        "begin_line": 254,
        "end_line": 272,
        "comment": " Bits of 1/(2*pi), need for reducePayneHanek(). "
    },
    {
        "class_name": "org.apache.commons.math3.util.FastMath",
        "src_path": "src/main/java/org/apache/commons/math3/util/FastMath.java",
        "signature": "org.apache.commons.math3.util.FastMath.PI_O_4_BITS",
        "snippet": "    private static final long PI_O_4_BITS[] = new long[] {\n        (0xc90fdaa2L << 32) | 0x2168c234L,\n        (0xc4c6628bL << 32) | 0x80dc1cd1L };",
        "begin_line": 275,
        "end_line": 277,
        "comment": " Bits of pi/4, need for reducePayneHanek(). "
    },
    {
        "class_name": "org.apache.commons.math3.util.FastMath",
        "src_path": "src/main/java/org/apache/commons/math3/util/FastMath.java",
        "signature": "org.apache.commons.math3.util.FastMath.EIGHTHS",
        "snippet": "    private static final double EIGHTHS[] = {0, 0.125, 0.25, 0.375, 0.5, 0.625, 0.75, 0.875, 1.0, 1.125, 1.25, 1.375, 1.5, 1.625};",
        "begin_line": 283,
        "end_line": 283,
        "comment": " Eighths.\n     * This is used by sinQ, because its faster to do a table lookup than\n     * a multiply in this time-critical routine\n     "
    },
    {
        "class_name": "org.apache.commons.math3.util.FastMath",
        "src_path": "src/main/java/org/apache/commons/math3/util/FastMath.java",
        "signature": "org.apache.commons.math3.util.FastMath.CBRTTWO",
        "snippet": "    private static final double CBRTTWO[] = { 0.6299605249474366,\n                                            0.7937005259840998,\n                                            1.0,\n                                            1.2599210498948732,\n                                            1.5874010519681994 };",
        "begin_line": 286,
        "end_line": 290,
        "comment": " Table of 2^((n+2)/3) "
    },
    {
        "class_name": "org.apache.commons.math3.util.FastMath",
        "src_path": "src/main/java/org/apache/commons/math3/util/FastMath.java",
        "signature": "org.apache.commons.math3.util.FastMath.HEX_40000000",
        "snippet": "    private static final long HEX_40000000 = 0x40000000L; // 1073741824L",
        "begin_line": 303,
        "end_line": 303,
        "comment": " 1073741824L"
    },
    {
        "class_name": "org.apache.commons.math3.util.FastMath",
        "src_path": "src/main/java/org/apache/commons/math3/util/FastMath.java",
        "signature": "org.apache.commons.math3.util.FastMath.MASK_30BITS",
        "snippet": "    private static final long MASK_30BITS = -1L - (HEX_40000000 -1); // 0xFFFFFFFFC0000000L;",
        "begin_line": 306,
        "end_line": 306,
        "comment": " 0xFFFFFFFFC0000000L;"
    },
    {
        "class_name": "org.apache.commons.math3.util.FastMath",
        "src_path": "src/main/java/org/apache/commons/math3/util/FastMath.java",
        "signature": "org.apache.commons.math3.util.FastMath.TWO_POWER_52",
        "snippet": "    private static final double TWO_POWER_52 = 4503599627370496.0;",
        "begin_line": 309,
        "end_line": 309,
        "comment": " 2^52 - double numbers this large must be integral (no fraction) or NaN or Infinite "
    },
    {
        "class_name": "org.apache.commons.math3.util.FastMath",
        "src_path": "src/main/java/org/apache/commons/math3/util/FastMath.java",
        "signature": "org.apache.commons.math3.util.FastMath.F_1_3",
        "snippet": "    private static final double F_1_3 = 1d / 3d;",
        "begin_line": 312,
        "end_line": 312,
        "comment": " Constant: {@value}. "
    },
    {
        "class_name": "org.apache.commons.math3.util.FastMath",
        "src_path": "src/main/java/org/apache/commons/math3/util/FastMath.java",
        "signature": "org.apache.commons.math3.util.FastMath.F_1_5",
        "snippet": "    private static final double F_1_5 = 1d / 5d;",
        "begin_line": 314,
        "end_line": 314,
        "comment": " Constant: {@value}. "
    },
    {
        "class_name": "org.apache.commons.math3.util.FastMath",
        "src_path": "src/main/java/org/apache/commons/math3/util/FastMath.java",
        "signature": "org.apache.commons.math3.util.FastMath.F_1_7",
        "snippet": "    private static final double F_1_7 = 1d / 7d;",
        "begin_line": 316,
        "end_line": 316,
        "comment": " Constant: {@value}. "
    },
    {
        "class_name": "org.apache.commons.math3.util.FastMath",
        "src_path": "src/main/java/org/apache/commons/math3/util/FastMath.java",
        "signature": "org.apache.commons.math3.util.FastMath.F_1_9",
        "snippet": "    private static final double F_1_9 = 1d / 9d;",
        "begin_line": 318,
        "end_line": 318,
        "comment": " Constant: {@value}. "
    },
    {
        "class_name": "org.apache.commons.math3.util.FastMath",
        "src_path": "src/main/java/org/apache/commons/math3/util/FastMath.java",
        "signature": "org.apache.commons.math3.util.FastMath.F_1_11",
        "snippet": "    private static final double F_1_11 = 1d / 11d;",
        "begin_line": 320,
        "end_line": 320,
        "comment": " Constant: {@value}. "
    },
    {
        "class_name": "org.apache.commons.math3.util.FastMath",
        "src_path": "src/main/java/org/apache/commons/math3/util/FastMath.java",
        "signature": "org.apache.commons.math3.util.FastMath.F_1_13",
        "snippet": "    private static final double F_1_13 = 1d / 13d;",
        "begin_line": 322,
        "end_line": 322,
        "comment": " Constant: {@value}. "
    },
    {
        "class_name": "org.apache.commons.math3.util.FastMath",
        "src_path": "src/main/java/org/apache/commons/math3/util/FastMath.java",
        "signature": "org.apache.commons.math3.util.FastMath.F_1_15",
        "snippet": "    private static final double F_1_15 = 1d / 15d;",
        "begin_line": 324,
        "end_line": 324,
        "comment": " Constant: {@value}. "
    },
    {
        "class_name": "org.apache.commons.math3.util.FastMath",
        "src_path": "src/main/java/org/apache/commons/math3/util/FastMath.java",
        "signature": "org.apache.commons.math3.util.FastMath.F_1_17",
        "snippet": "    private static final double F_1_17 = 1d / 17d;",
        "begin_line": 326,
        "end_line": 326,
        "comment": " Constant: {@value}. "
    },
    {
        "class_name": "org.apache.commons.math3.util.FastMath",
        "src_path": "src/main/java/org/apache/commons/math3/util/FastMath.java",
        "signature": "org.apache.commons.math3.util.FastMath.F_3_4",
        "snippet": "    private static final double F_3_4 = 3d / 4d;",
        "begin_line": 328,
        "end_line": 328,
        "comment": " Constant: {@value}. "
    },
    {
        "class_name": "org.apache.commons.math3.util.FastMath",
        "src_path": "src/main/java/org/apache/commons/math3/util/FastMath.java",
        "signature": "org.apache.commons.math3.util.FastMath.F_15_16",
        "snippet": "    private static final double F_15_16 = 15d / 16d;",
        "begin_line": 330,
        "end_line": 330,
        "comment": " Constant: {@value}. "
    },
    {
        "class_name": "org.apache.commons.math3.util.FastMath",
        "src_path": "src/main/java/org/apache/commons/math3/util/FastMath.java",
        "signature": "org.apache.commons.math3.util.FastMath.F_13_14",
        "snippet": "    private static final double F_13_14 = 13d / 14d;",
        "begin_line": 332,
        "end_line": 332,
        "comment": " Constant: {@value}. "
    },
    {
        "class_name": "org.apache.commons.math3.util.FastMath",
        "src_path": "src/main/java/org/apache/commons/math3/util/FastMath.java",
        "signature": "org.apache.commons.math3.util.FastMath.F_11_12",
        "snippet": "    private static final double F_11_12 = 11d / 12d;",
        "begin_line": 334,
        "end_line": 334,
        "comment": " Constant: {@value}. "
    },
    {
        "class_name": "org.apache.commons.math3.util.FastMath",
        "src_path": "src/main/java/org/apache/commons/math3/util/FastMath.java",
        "signature": "org.apache.commons.math3.util.FastMath.F_9_10",
        "snippet": "    private static final double F_9_10 = 9d / 10d;",
        "begin_line": 336,
        "end_line": 336,
        "comment": " Constant: {@value}. "
    },
    {
        "class_name": "org.apache.commons.math3.util.FastMath",
        "src_path": "src/main/java/org/apache/commons/math3/util/FastMath.java",
        "signature": "org.apache.commons.math3.util.FastMath.F_7_8",
        "snippet": "    private static final double F_7_8 = 7d / 8d;",
        "begin_line": 338,
        "end_line": 338,
        "comment": " Constant: {@value}. "
    },
    {
        "class_name": "org.apache.commons.math3.util.FastMath",
        "src_path": "src/main/java/org/apache/commons/math3/util/FastMath.java",
        "signature": "org.apache.commons.math3.util.FastMath.F_5_6",
        "snippet": "    private static final double F_5_6 = 5d / 6d;",
        "begin_line": 340,
        "end_line": 340,
        "comment": " Constant: {@value}. "
    },
    {
        "class_name": "org.apache.commons.math3.util.FastMath",
        "src_path": "src/main/java/org/apache/commons/math3/util/FastMath.java",
        "signature": "org.apache.commons.math3.util.FastMath.F_1_2",
        "snippet": "    private static final double F_1_2 = 1d / 2d;",
        "begin_line": 342,
        "end_line": 342,
        "comment": " Constant: {@value}. "
    },
    {
        "class_name": "org.apache.commons.math3.util.FastMath",
        "src_path": "src/main/java/org/apache/commons/math3/util/FastMath.java",
        "signature": "org.apache.commons.math3.util.FastMath.F_1_4",
        "snippet": "    private static final double F_1_4 = 1d / 4d;",
        "begin_line": 344,
        "end_line": 344,
        "comment": " Constant: {@value}. "
    },
    {
        "class_name": "org.apache.commons.math3.util.ExpIntTable",
        "src_path": "src/main/java/org/apache/commons/math3/util/FastMath.java",
        "signature": "org.apache.commons.math3.util.ExpIntTable.EXP_INT_TABLE_A",
        "snippet": "        private static final double[] EXP_INT_TABLE_A;",
        "begin_line": 3712,
        "end_line": 3712,
        "comment": " Exponential evaluated at integer values,\n         * exp(x) =  expIntTableA[x + EXP_INT_TABLE_MAX_INDEX] + expIntTableB[x+EXP_INT_TABLE_MAX_INDEX].\n         "
    },
    {
        "class_name": "org.apache.commons.math3.util.ExpIntTable",
        "src_path": "src/main/java/org/apache/commons/math3/util/FastMath.java",
        "signature": "org.apache.commons.math3.util.ExpIntTable.EXP_INT_TABLE_B",
        "snippet": "        private static final double[] EXP_INT_TABLE_B;",
        "begin_line": 3716,
        "end_line": 3716,
        "comment": " Exponential evaluated at integer values,\n         * exp(x) =  expIntTableA[x + EXP_INT_TABLE_MAX_INDEX] + expIntTableB[x+EXP_INT_TABLE_MAX_INDEX]\n         "
    },
    {
        "class_name": "org.apache.commons.math3.util.ExpFracTable",
        "src_path": "src/main/java/org/apache/commons/math3/util/FastMath.java",
        "signature": "org.apache.commons.math3.util.ExpFracTable.EXP_FRAC_TABLE_A",
        "snippet": "        private static final double[] EXP_FRAC_TABLE_A;",
        "begin_line": 3752,
        "end_line": 3752,
        "comment": " Exponential over the range of 0 - 1 in increments of 2^-10\n         * exp(x/1024) =  expFracTableA[x] + expFracTableB[x].\n         * 1024 = 2^10\n         "
    },
    {
        "class_name": "org.apache.commons.math3.util.ExpFracTable",
        "src_path": "src/main/java/org/apache/commons/math3/util/FastMath.java",
        "signature": "org.apache.commons.math3.util.ExpFracTable.EXP_FRAC_TABLE_B",
        "snippet": "        private static final double[] EXP_FRAC_TABLE_B;",
        "begin_line": 3756,
        "end_line": 3756,
        "comment": " Exponential over the range of 0 - 1 in increments of 2^-10\n         * exp(x/1024) =  expFracTableA[x] + expFracTableB[x].\n         "
    },
    {
        "class_name": "org.apache.commons.math3.util.lnMant",
        "src_path": "src/main/java/org/apache/commons/math3/util/FastMath.java",
        "signature": "org.apache.commons.math3.util.lnMant.LN_MANT",
        "snippet": "        private static final double[][] LN_MANT;",
        "begin_line": 3782,
        "end_line": 3782,
        "comment": " Extended precision logarithm table over the range 1 - 2 in increments of 2^-10. "
    },
    {
        "class_name": "org.apache.commons.math3.geometry.euclidean.threed.Line",
        "src_path": "src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java",
        "signature": "org.apache.commons.math3.geometry.euclidean.threed.Line.direction",
        "snippet": "    private Vector3D direction;",
        "begin_line": 44,
        "end_line": 44,
        "comment": " Line direction. "
    },
    {
        "class_name": "org.apache.commons.math3.geometry.euclidean.threed.Line",
        "src_path": "src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java",
        "signature": "org.apache.commons.math3.geometry.euclidean.threed.Line.zero",
        "snippet": "    private Vector3D zero;",
        "begin_line": 47,
        "end_line": 47,
        "comment": " Line point closest to the origin. "
    },
    {
        "class_name": "org.apache.commons.math3.geometry.partitioning.SplitSubHyperplane",
        "src_path": "src/main/java/org/apache/commons/math3/geometry/partitioning/SubHyperplane.java",
        "signature": "org.apache.commons.math3.geometry.partitioning.SplitSubHyperplane.plus",
        "snippet": "        private final SubHyperplane<U> plus;",
        "begin_line": 92,
        "end_line": 92,
        "comment": " Part of the sub-hyperplane on the plus side of the splitting hyperplane. "
    },
    {
        "class_name": "org.apache.commons.math3.geometry.partitioning.SplitSubHyperplane",
        "src_path": "src/main/java/org/apache/commons/math3/geometry/partitioning/SubHyperplane.java",
        "signature": "org.apache.commons.math3.geometry.partitioning.SplitSubHyperplane.minus",
        "snippet": "        private final SubHyperplane<U> minus;",
        "begin_line": 95,
        "end_line": 95,
        "comment": " Part of the sub-hyperplane on the minus side of the splitting hyperplane. "
    },
    {
        "class_name": "org.apache.commons.math3.geometry.partitioning.Characterization",
        "src_path": "src/main/java/org/apache/commons/math3/geometry/partitioning/Characterization.java",
        "signature": "org.apache.commons.math3.geometry.partitioning.Characterization.in",
        "snippet": "    private SubHyperplane<S> in;",
        "begin_line": 29,
        "end_line": 29,
        "comment": " Parts of the sub-hyperplane that have inside cells on the tested side. "
    },
    {
        "class_name": "org.apache.commons.math3.geometry.partitioning.Characterization",
        "src_path": "src/main/java/org/apache/commons/math3/geometry/partitioning/Characterization.java",
        "signature": "org.apache.commons.math3.geometry.partitioning.Characterization.out",
        "snippet": "    private SubHyperplane<S> out;",
        "begin_line": 32,
        "end_line": 32,
        "comment": " Parts of the sub-hyperplane that have outside cells on the tested side. "
    },
    {
        "class_name": "org.apache.commons.math3.geometry.partitioning.RegionFactory",
        "src_path": "src/main/java/org/apache/commons/math3/geometry/partitioning/RegionFactory.java",
        "signature": "org.apache.commons.math3.geometry.partitioning.RegionFactory.nodeCleaner",
        "snippet": "    private final NodesCleaner nodeCleaner;",
        "begin_line": 31,
        "end_line": 31,
        "comment": " Visitor removing internal nodes attributes. "
    },
    {
        "class_name": "org.apache.commons.math3.geometry.euclidean.threed.Plane",
        "src_path": "src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java",
        "signature": "org.apache.commons.math3.geometry.euclidean.threed.Plane.originOffset",
        "snippet": "    private double originOffset;",
        "begin_line": 37,
        "end_line": 37,
        "comment": " Offset of the origin with respect to the plane. "
    },
    {
        "class_name": "org.apache.commons.math3.geometry.euclidean.threed.Plane",
        "src_path": "src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java",
        "signature": "org.apache.commons.math3.geometry.euclidean.threed.Plane.origin",
        "snippet": "    private Vector3D origin;",
        "begin_line": 40,
        "end_line": 40,
        "comment": " Origin of the plane frame. "
    },
    {
        "class_name": "org.apache.commons.math3.geometry.euclidean.threed.Plane",
        "src_path": "src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java",
        "signature": "org.apache.commons.math3.geometry.euclidean.threed.Plane.u",
        "snippet": "    private Vector3D u;",
        "begin_line": 43,
        "end_line": 43,
        "comment": " First vector of the plane frame (in plane). "
    },
    {
        "class_name": "org.apache.commons.math3.geometry.euclidean.threed.Plane",
        "src_path": "src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java",
        "signature": "org.apache.commons.math3.geometry.euclidean.threed.Plane.v",
        "snippet": "    private Vector3D v;",
        "begin_line": 46,
        "end_line": 46,
        "comment": " Second vector of the plane frame (in plane). "
    },
    {
        "class_name": "org.apache.commons.math3.geometry.euclidean.threed.Plane",
        "src_path": "src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java",
        "signature": "org.apache.commons.math3.geometry.euclidean.threed.Plane.w",
        "snippet": "    private Vector3D w;",
        "begin_line": 49,
        "end_line": 49,
        "comment": " Third vector of the plane frame (plane normal). "
    },
    {
        "class_name": "org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane",
        "src_path": "src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractSubHyperplane.java",
        "signature": "org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane.hyperplane",
        "snippet": "    private final Hyperplane<S> hyperplane;",
        "begin_line": 41,
        "end_line": 41,
        "comment": " Underlying hyperplane. "
    },
    {
        "class_name": "org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane",
        "src_path": "src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractSubHyperplane.java",
        "signature": "org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane.remainingRegion",
        "snippet": "    private final Region<T> remainingRegion;",
        "begin_line": 44,
        "end_line": 44,
        "comment": " Remaining region of the hyperplane. "
    },
    {
        "class_name": "org.apache.commons.math3.geometry.euclidean.oned.OrientedPoint",
        "src_path": "src/main/java/org/apache/commons/math3/geometry/euclidean/oned/OrientedPoint.java",
        "signature": "org.apache.commons.math3.geometry.euclidean.oned.OrientedPoint.location",
        "snippet": "    private Vector1D location;",
        "begin_line": 32,
        "end_line": 32,
        "comment": " Vector location. "
    },
    {
        "class_name": "org.apache.commons.math3.geometry.euclidean.oned.OrientedPoint",
        "src_path": "src/main/java/org/apache/commons/math3/geometry/euclidean/oned/OrientedPoint.java",
        "signature": "org.apache.commons.math3.geometry.euclidean.oned.OrientedPoint.direct",
        "snippet": "    private boolean direct;",
        "begin_line": 35,
        "end_line": 35,
        "comment": " Orientation. "
    },
    {
        "class_name": "org.apache.commons.math3.geometry.partitioning.utilities.AVLTree",
        "src_path": "src/main/java/org/apache/commons/math3/geometry/partitioning/utilities/AVLTree.java",
        "signature": "org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.top",
        "snippet": "    private Node top;",
        "begin_line": 50,
        "end_line": 50,
        "comment": " Top level node. "
    },
    {
        "class_name": "org.apache.commons.math3.geometry.partitioning.utilities.Node",
        "src_path": "src/main/java/org/apache/commons/math3/geometry/partitioning/utilities/AVLTree.java",
        "signature": "org.apache.commons.math3.geometry.partitioning.utilities.Node.element",
        "snippet": "        private T element;",
        "begin_line": 227,
        "end_line": 227,
        "comment": " Element contained in the current node. "
    },
    {
        "class_name": "org.apache.commons.math3.geometry.partitioning.utilities.Node",
        "src_path": "src/main/java/org/apache/commons/math3/geometry/partitioning/utilities/AVLTree.java",
        "signature": "org.apache.commons.math3.geometry.partitioning.utilities.Node.left",
        "snippet": "        private Node left;",
        "begin_line": 230,
        "end_line": 230,
        "comment": " Left sub-tree. "
    },
    {
        "class_name": "org.apache.commons.math3.geometry.partitioning.utilities.Node",
        "src_path": "src/main/java/org/apache/commons/math3/geometry/partitioning/utilities/AVLTree.java",
        "signature": "org.apache.commons.math3.geometry.partitioning.utilities.Node.right",
        "snippet": "        private Node right;",
        "begin_line": 233,
        "end_line": 233,
        "comment": " Right sub-tree. "
    },
    {
        "class_name": "org.apache.commons.math3.geometry.partitioning.utilities.Node",
        "src_path": "src/main/java/org/apache/commons/math3/geometry/partitioning/utilities/AVLTree.java",
        "signature": "org.apache.commons.math3.geometry.partitioning.utilities.Node.parent",
        "snippet": "        private Node parent;",
        "begin_line": 236,
        "end_line": 236,
        "comment": " Parent tree. "
    },
    {
        "class_name": "org.apache.commons.math3.geometry.partitioning.utilities.Node",
        "src_path": "src/main/java/org/apache/commons/math3/geometry/partitioning/utilities/AVLTree.java",
        "signature": "org.apache.commons.math3.geometry.partitioning.utilities.Node.skew",
        "snippet": "        private Skew skew;",
        "begin_line": 239,
        "end_line": 239,
        "comment": " Skew factor. "
    },
    {
        "class_name": "org.apache.commons.math3.geometry.euclidean.threed.Vector3D",
        "src_path": "src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3D.java",
        "signature": "org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO",
        "snippet": "    public static final Vector3D ZERO   = new Vector3D(0, 0, 0);",
        "begin_line": 41,
        "end_line": 41,
        "comment": " Null vector (coordinates: 0, 0, 0). "
    },
    {
        "class_name": "org.apache.commons.math3.geometry.euclidean.threed.Vector3D",
        "src_path": "src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3D.java",
        "signature": "org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I",
        "snippet": "    public static final Vector3D PLUS_I = new Vector3D(1, 0, 0);",
        "begin_line": 44,
        "end_line": 44,
        "comment": " First canonical vector (coordinates: 1, 0, 0). "
    },
    {
        "class_name": "org.apache.commons.math3.geometry.euclidean.threed.Vector3D",
        "src_path": "src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3D.java",
        "signature": "org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I",
        "snippet": "    public static final Vector3D MINUS_I = new Vector3D(-1, 0, 0);",
        "begin_line": 47,
        "end_line": 47,
        "comment": " Opposite of the first canonical vector (coordinates: -1, 0, 0). "
    },
    {
        "class_name": "org.apache.commons.math3.geometry.euclidean.threed.Vector3D",
        "src_path": "src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3D.java",
        "signature": "org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J",
        "snippet": "    public static final Vector3D PLUS_J = new Vector3D(0, 1, 0);",
        "begin_line": 50,
        "end_line": 50,
        "comment": " Second canonical vector (coordinates: 0, 1, 0). "
    },
    {
        "class_name": "org.apache.commons.math3.geometry.euclidean.threed.Vector3D",
        "src_path": "src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3D.java",
        "signature": "org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J",
        "snippet": "    public static final Vector3D MINUS_J = new Vector3D(0, -1, 0);",
        "begin_line": 53,
        "end_line": 53,
        "comment": " Opposite of the second canonical vector (coordinates: 0, -1, 0). "
    },
    {
        "class_name": "org.apache.commons.math3.geometry.euclidean.threed.Vector3D",
        "src_path": "src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3D.java",
        "signature": "org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K",
        "snippet": "    public static final Vector3D PLUS_K = new Vector3D(0, 0, 1);",
        "begin_line": 56,
        "end_line": 56,
        "comment": " Third canonical vector (coordinates: 0, 0, 1). "
    },
    {
        "class_name": "org.apache.commons.math3.geometry.euclidean.threed.Vector3D",
        "src_path": "src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3D.java",
        "signature": "org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K",
        "snippet": "    public static final Vector3D MINUS_K = new Vector3D(0, 0, -1);",
        "begin_line": 59,
        "end_line": 59,
        "comment": " Opposite of the third canonical vector (coordinates: 0, 0, -1).  "
    },
    {
        "class_name": "org.apache.commons.math3.geometry.euclidean.threed.Vector3D",
        "src_path": "src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3D.java",
        "signature": "org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN",
        "snippet": "    public static final Vector3D NaN = new Vector3D(Double.NaN, Double.NaN, Double.NaN);",
        "begin_line": 63,
        "end_line": 63,
        "comment": " A vector with all coordinates set to NaN. "
    },
    {
        "class_name": "org.apache.commons.math3.geometry.euclidean.threed.Vector3D",
        "src_path": "src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3D.java",
        "signature": "org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY",
        "snippet": "    public static final Vector3D POSITIVE_INFINITY =\n        new Vector3D(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);",
        "begin_line": 67,
        "end_line": 68,
        "comment": " A vector with all coordinates set to positive infinity. "
    },
    {
        "class_name": "org.apache.commons.math3.geometry.euclidean.threed.Vector3D",
        "src_path": "src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3D.java",
        "signature": "org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY",
        "snippet": "    public static final Vector3D NEGATIVE_INFINITY =\n        new Vector3D(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY);",
        "begin_line": 71,
        "end_line": 72,
        "comment": " A vector with all coordinates set to negative infinity. "
    },
    {
        "class_name": "org.apache.commons.math3.geometry.euclidean.threed.Vector3D",
        "src_path": "src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3D.java",
        "signature": "org.apache.commons.math3.geometry.euclidean.threed.Vector3D.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 1313493323784566947L;",
        "begin_line": 75,
        "end_line": 75,
        "comment": " Serializable version identifier. "
    },
    {
        "class_name": "org.apache.commons.math3.geometry.euclidean.threed.Vector3D",
        "src_path": "src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3D.java",
        "signature": "org.apache.commons.math3.geometry.euclidean.threed.Vector3D.x",
        "snippet": "    private final double x;",
        "begin_line": 78,
        "end_line": 78,
        "comment": " Abscissa. "
    },
    {
        "class_name": "org.apache.commons.math3.geometry.euclidean.threed.Vector3D",
        "src_path": "src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3D.java",
        "signature": "org.apache.commons.math3.geometry.euclidean.threed.Vector3D.y",
        "snippet": "    private final double y;",
        "begin_line": 81,
        "end_line": 81,
        "comment": " Ordinate. "
    },
    {
        "class_name": "org.apache.commons.math3.geometry.euclidean.threed.Vector3D",
        "src_path": "src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3D.java",
        "signature": "org.apache.commons.math3.geometry.euclidean.threed.Vector3D.z",
        "snippet": "    private final double z;",
        "begin_line": 84,
        "end_line": 84,
        "comment": " Height. "
    },
    {
        "class_name": "org.apache.commons.math3.geometry.euclidean.oned.Interval",
        "src_path": "src/main/java/org/apache/commons/math3/geometry/euclidean/oned/Interval.java",
        "signature": "org.apache.commons.math3.geometry.euclidean.oned.Interval.lower",
        "snippet": "    private final double lower;",
        "begin_line": 28,
        "end_line": 28,
        "comment": " The lower bound of the interval. "
    },
    {
        "class_name": "org.apache.commons.math3.geometry.euclidean.oned.Interval",
        "src_path": "src/main/java/org/apache/commons/math3/geometry/euclidean/oned/Interval.java",
        "signature": "org.apache.commons.math3.geometry.euclidean.oned.Interval.upper",
        "snippet": "    private final double upper;",
        "begin_line": 31,
        "end_line": 31,
        "comment": " The upper bound of the interval. "
    },
    {
        "class_name": "org.apache.commons.math3.geometry.partitioning.BoundaryAttribute",
        "src_path": "src/main/java/org/apache/commons/math3/geometry/partitioning/BoundaryAttribute.java",
        "signature": "org.apache.commons.math3.geometry.partitioning.BoundaryAttribute.plusOutside",
        "snippet": "    private final SubHyperplane<S> plusOutside;",
        "begin_line": 40,
        "end_line": 40,
        "comment": " Part of the node cut sub-hyperplane that belongs to the\n     * boundary and has the outside of the region on the plus side of\n     * its underlying hyperplane (may be null).\n     "
    },
    {
        "class_name": "org.apache.commons.math3.geometry.partitioning.BoundaryAttribute",
        "src_path": "src/main/java/org/apache/commons/math3/geometry/partitioning/BoundaryAttribute.java",
        "signature": "org.apache.commons.math3.geometry.partitioning.BoundaryAttribute.plusInside",
        "snippet": "    private final SubHyperplane<S> plusInside;",
        "begin_line": 46,
        "end_line": 46,
        "comment": " Part of the node cut sub-hyperplane that belongs to the\n     * boundary and has the inside of the region on the plus side of\n     * its underlying hyperplane (may be null).\n     "
    },
    {
        "class_name": "org.apache.commons.math3.geometry.euclidean.twod.Line",
        "src_path": "src/main/java/org/apache/commons/math3/geometry/euclidean/twod/Line.java",
        "signature": "org.apache.commons.math3.geometry.euclidean.twod.Line.angle",
        "snippet": "    private double angle;",
        "begin_line": 65,
        "end_line": 65,
        "comment": " Angle with respect to the abscissa axis. "
    },
    {
        "class_name": "org.apache.commons.math3.geometry.euclidean.twod.Line",
        "src_path": "src/main/java/org/apache/commons/math3/geometry/euclidean/twod/Line.java",
        "signature": "org.apache.commons.math3.geometry.euclidean.twod.Line.cos",
        "snippet": "    private double cos;",
        "begin_line": 68,
        "end_line": 68,
        "comment": " Cosine of the line angle. "
    },
    {
        "class_name": "org.apache.commons.math3.geometry.euclidean.twod.Line",
        "src_path": "src/main/java/org/apache/commons/math3/geometry/euclidean/twod/Line.java",
        "signature": "org.apache.commons.math3.geometry.euclidean.twod.Line.sin",
        "snippet": "    private double sin;",
        "begin_line": 71,
        "end_line": 71,
        "comment": " Sine of the line angle. "
    },
    {
        "class_name": "org.apache.commons.math3.geometry.euclidean.twod.Line",
        "src_path": "src/main/java/org/apache/commons/math3/geometry/euclidean/twod/Line.java",
        "signature": "org.apache.commons.math3.geometry.euclidean.twod.Line.originOffset",
        "snippet": "    private double originOffset;",
        "begin_line": 74,
        "end_line": 74,
        "comment": " Offset of the frame origin. "
    },
    {
        "class_name": "org.apache.commons.math3.geometry.euclidean.twod.LineTransform",
        "src_path": "src/main/java/org/apache/commons/math3/geometry/euclidean/twod/Line.java",
        "signature": "org.apache.commons.math3.geometry.euclidean.twod.LineTransform.cXX",
        "snippet": "        private double cXX;",
        "begin_line": 340,
        "end_line": 340,
        "comment": " CHECKSTYLE: stop JavadocVariable check"
    },
    {
        "class_name": "org.apache.commons.math3.geometry.euclidean.twod.LineTransform",
        "src_path": "src/main/java/org/apache/commons/math3/geometry/euclidean/twod/Line.java",
        "signature": "org.apache.commons.math3.geometry.euclidean.twod.LineTransform.cXY",
        "snippet": "        private double cXY;",
        "begin_line": 341,
        "end_line": 341,
        "comment": ""
    },
    {
        "class_name": "org.apache.commons.math3.geometry.euclidean.twod.LineTransform",
        "src_path": "src/main/java/org/apache/commons/math3/geometry/euclidean/twod/Line.java",
        "signature": "org.apache.commons.math3.geometry.euclidean.twod.LineTransform.cX1",
        "snippet": "        private double cX1;",
        "begin_line": 342,
        "end_line": 342,
        "comment": ""
    },
    {
        "class_name": "org.apache.commons.math3.geometry.euclidean.twod.LineTransform",
        "src_path": "src/main/java/org/apache/commons/math3/geometry/euclidean/twod/Line.java",
        "signature": "org.apache.commons.math3.geometry.euclidean.twod.LineTransform.cYX",
        "snippet": "        private double cYX;",
        "begin_line": 343,
        "end_line": 343,
        "comment": ""
    },
    {
        "class_name": "org.apache.commons.math3.geometry.euclidean.twod.LineTransform",
        "src_path": "src/main/java/org/apache/commons/math3/geometry/euclidean/twod/Line.java",
        "signature": "org.apache.commons.math3.geometry.euclidean.twod.LineTransform.cYY",
        "snippet": "        private double cYY;",
        "begin_line": 344,
        "end_line": 344,
        "comment": ""
    },
    {
        "class_name": "org.apache.commons.math3.geometry.euclidean.twod.LineTransform",
        "src_path": "src/main/java/org/apache/commons/math3/geometry/euclidean/twod/Line.java",
        "signature": "org.apache.commons.math3.geometry.euclidean.twod.LineTransform.cY1",
        "snippet": "        private double cY1;",
        "begin_line": 345,
        "end_line": 345,
        "comment": ""
    },
    {
        "class_name": "org.apache.commons.math3.geometry.euclidean.twod.LineTransform",
        "src_path": "src/main/java/org/apache/commons/math3/geometry/euclidean/twod/Line.java",
        "signature": "org.apache.commons.math3.geometry.euclidean.twod.LineTransform.c1Y",
        "snippet": "        private double c1Y;",
        "begin_line": 347,
        "end_line": 347,
        "comment": ""
    },
    {
        "class_name": "org.apache.commons.math3.geometry.euclidean.twod.LineTransform",
        "src_path": "src/main/java/org/apache/commons/math3/geometry/euclidean/twod/Line.java",
        "signature": "org.apache.commons.math3.geometry.euclidean.twod.LineTransform.c1X",
        "snippet": "        private double c1X;",
        "begin_line": 348,
        "end_line": 348,
        "comment": ""
    },
    {
        "class_name": "org.apache.commons.math3.geometry.euclidean.twod.LineTransform",
        "src_path": "src/main/java/org/apache/commons/math3/geometry/euclidean/twod/Line.java",
        "signature": "org.apache.commons.math3.geometry.euclidean.twod.LineTransform.c11",
        "snippet": "        private double c11;",
        "begin_line": 349,
        "end_line": 349,
        "comment": ""
    },
    {
        "class_name": "org.apache.commons.math3.geometry.euclidean.twod.Vector2D",
        "src_path": "src/main/java/org/apache/commons/math3/geometry/euclidean/twod/Vector2D.java",
        "signature": "org.apache.commons.math3.geometry.euclidean.twod.Vector2D.ZERO",
        "snippet": "    public static final Vector2D ZERO   = new Vector2D(0, 0);",
        "begin_line": 37,
        "end_line": 37,
        "comment": " Origin (coordinates: 0, 0). "
    },
    {
        "class_name": "org.apache.commons.math3.geometry.euclidean.twod.Vector2D",
        "src_path": "src/main/java/org/apache/commons/math3/geometry/euclidean/twod/Vector2D.java",
        "signature": "org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NaN",
        "snippet": "    public static final Vector2D NaN = new Vector2D(Double.NaN, Double.NaN);",
        "begin_line": 41,
        "end_line": 41,
        "comment": " A vector with all coordinates set to NaN. "
    },
    {
        "class_name": "org.apache.commons.math3.geometry.euclidean.twod.Vector2D",
        "src_path": "src/main/java/org/apache/commons/math3/geometry/euclidean/twod/Vector2D.java",
        "signature": "org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY",
        "snippet": "    public static final Vector2D POSITIVE_INFINITY =\n        new Vector2D(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);",
        "begin_line": 45,
        "end_line": 46,
        "comment": " A vector with all coordinates set to positive infinity. "
    },
    {
        "class_name": "org.apache.commons.math3.geometry.euclidean.twod.Vector2D",
        "src_path": "src/main/java/org/apache/commons/math3/geometry/euclidean/twod/Vector2D.java",
        "signature": "org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NEGATIVE_INFINITY",
        "snippet": "    public static final Vector2D NEGATIVE_INFINITY =\n        new Vector2D(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY);",
        "begin_line": 49,
        "end_line": 50,
        "comment": " A vector with all coordinates set to negative infinity. "
    },
    {
        "class_name": "org.apache.commons.math3.geometry.euclidean.twod.Vector2D",
        "src_path": "src/main/java/org/apache/commons/math3/geometry/euclidean/twod/Vector2D.java",
        "signature": "org.apache.commons.math3.geometry.euclidean.twod.Vector2D.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 266938651998679754L;",
        "begin_line": 53,
        "end_line": 53,
        "comment": " Serializable UID. "
    },
    {
        "class_name": "org.apache.commons.math3.geometry.euclidean.twod.Vector2D",
        "src_path": "src/main/java/org/apache/commons/math3/geometry/euclidean/twod/Vector2D.java",
        "signature": "org.apache.commons.math3.geometry.euclidean.twod.Vector2D.x",
        "snippet": "    private final double x;",
        "begin_line": 56,
        "end_line": 56,
        "comment": " Abscissa. "
    },
    {
        "class_name": "org.apache.commons.math3.geometry.euclidean.twod.Vector2D",
        "src_path": "src/main/java/org/apache/commons/math3/geometry/euclidean/twod/Vector2D.java",
        "signature": "org.apache.commons.math3.geometry.euclidean.twod.Vector2D.y",
        "snippet": "    private final double y;",
        "begin_line": 59,
        "end_line": 59,
        "comment": " Ordinate. "
    }
]