[
    {
        "class_name": "org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSetTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSetTest.java",
        "signature": "org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSetTest.testBox()",
        "snippet": "    @Test\n    public void testBox() {\n        PolyhedronsSet tree = new PolyhedronsSet(0, 1, 0, 1, 0, 1);\n        Assert.assertEquals(1.0, tree.getSize(), 1.0e-10);\n        Assert.assertEquals(6.0, tree.getBoundarySize(), 1.0e-10);\n        Vector3D barycenter = (Vector3D) tree.getBarycenter();\n        Assert.assertEquals(0.5, barycenter.getX(), 1.0e-10);\n        Assert.assertEquals(0.5, barycenter.getY(), 1.0e-10);\n        Assert.assertEquals(0.5, barycenter.getZ(), 1.0e-10);\n        for (double x = -0.25; x < 1.25; x += 0.1) {\n            boolean xOK = (x >= 0.0) && (x <= 1.0);\n            for (double y = -0.25; y < 1.25; y += 0.1) {\n                boolean yOK = (y >= 0.0) && (y <= 1.0);\n                for (double z = -0.25; z < 1.25; z += 0.1) {\n                    boolean zOK = (z >= 0.0) && (z <= 1.0);\n                    Region.Location expected =\n                        (xOK && yOK && zOK) ? Region.Location.INSIDE : Region.Location.OUTSIDE;\n                    Assert.assertEquals(expected, tree.checkPoint(new Vector3D(x, y, z)));\n                }\n            }\n        }\n        checkPoints(Region.Location.BOUNDARY, tree, new Vector3D[] {\n            new Vector3D(0.0, 0.5, 0.5),\n            new Vector3D(1.0, 0.5, 0.5),\n            new Vector3D(0.5, 0.0, 0.5),\n            new Vector3D(0.5, 1.0, 0.5),\n            new Vector3D(0.5, 0.5, 0.0),\n            new Vector3D(0.5, 0.5, 1.0)\n        });\n        checkPoints(Region.Location.OUTSIDE, tree, new Vector3D[] {\n            new Vector3D(0.0, 1.2, 1.2),\n            new Vector3D(1.0, 1.2, 1.2),\n            new Vector3D(1.2, 0.0, 1.2),\n            new Vector3D(1.2, 1.0, 1.2),\n            new Vector3D(1.2, 1.2, 0.0),\n            new Vector3D(1.2, 1.2, 1.0)\n        });\n    }\n",
        "begin_line": 37,
        "end_line": 74,
        "comment": "",
        "child_ranges": [
            "(line 39,col 9)-(line 39,col 67)",
            "(line 40,col 9)-(line 40,col 58)",
            "(line 41,col 9)-(line 41,col 66)",
            "(line 42,col 9)-(line 42,col 62)",
            "(line 43,col 9)-(line 43,col 61)",
            "(line 44,col 9)-(line 44,col 61)",
            "(line 45,col 9)-(line 45,col 61)",
            "(line 46,col 9)-(line 57,col 9)",
            "(line 58,col 9)-(line 65,col 11)",
            "(line 66,col 9)-(line 73,col 11)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSetTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSetTest.java",
        "signature": "org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSetTest.testTetrahedron()",
        "snippet": "    @Test\n    public void testTetrahedron() {\n        Vector3D vertex1 = new Vector3D(1, 2, 3);\n        Vector3D vertex2 = new Vector3D(2, 2, 4);\n        Vector3D vertex3 = new Vector3D(2, 3, 3);\n        Vector3D vertex4 = new Vector3D(1, 3, 4);\n        @SuppressWarnings(\"unchecked\")\n        PolyhedronsSet tree =\n            (PolyhedronsSet) new RegionFactory<Euclidean3D>().buildConvex(\n                new Plane(vertex3, vertex2, vertex1),\n                new Plane(vertex2, vertex3, vertex4),\n                new Plane(vertex4, vertex3, vertex1),\n                new Plane(vertex1, vertex2, vertex4));\n        Assert.assertEquals(1.0 / 3.0, tree.getSize(), 1.0e-10);\n        Assert.assertEquals(2.0 * FastMath.sqrt(3.0), tree.getBoundarySize(), 1.0e-10);\n        Vector3D barycenter = (Vector3D) tree.getBarycenter();\n        Assert.assertEquals(1.5, barycenter.getX(), 1.0e-10);\n        Assert.assertEquals(2.5, barycenter.getY(), 1.0e-10);\n        Assert.assertEquals(3.5, barycenter.getZ(), 1.0e-10);\n        double third = 1.0 / 3.0;\n        checkPoints(Region.Location.BOUNDARY, tree, new Vector3D[] {\n            vertex1, vertex2, vertex3, vertex4,\n            new Vector3D(third, vertex1, third, vertex2, third, vertex3),\n            new Vector3D(third, vertex2, third, vertex3, third, vertex4),\n            new Vector3D(third, vertex3, third, vertex4, third, vertex1),\n            new Vector3D(third, vertex4, third, vertex1, third, vertex2)\n        });\n        checkPoints(Region.Location.OUTSIDE, tree, new Vector3D[] {\n            new Vector3D(1, 2, 4),\n            new Vector3D(2, 2, 3),\n            new Vector3D(2, 3, 4),\n            new Vector3D(1, 3, 3)\n        });\n    }\n",
        "begin_line": 76,
        "end_line": 109,
        "comment": "",
        "child_ranges": [
            "(line 78,col 9)-(line 78,col 49)",
            "(line 79,col 9)-(line 79,col 49)",
            "(line 80,col 9)-(line 80,col 49)",
            "(line 81,col 9)-(line 81,col 49)",
            "(line 82,col 9)-(line 88,col 54)",
            "(line 89,col 9)-(line 89,col 64)",
            "(line 90,col 9)-(line 90,col 87)",
            "(line 91,col 9)-(line 91,col 62)",
            "(line 92,col 9)-(line 92,col 61)",
            "(line 93,col 9)-(line 93,col 61)",
            "(line 94,col 9)-(line 94,col 61)",
            "(line 95,col 9)-(line 95,col 33)",
            "(line 96,col 9)-(line 102,col 11)",
            "(line 103,col 9)-(line 108,col 11)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSetTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSetTest.java",
        "signature": "org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSetTest.testIsometry()",
        "snippet": "    @Test\n    public void testIsometry() {\n        Vector3D vertex1 = new Vector3D(1.1, 2.2, 3.3);\n        Vector3D vertex2 = new Vector3D(2.0, 2.4, 4.2);\n        Vector3D vertex3 = new Vector3D(2.8, 3.3, 3.7);\n        Vector3D vertex4 = new Vector3D(1.0, 3.6, 4.5);\n        @SuppressWarnings(\"unchecked\")\n        PolyhedronsSet tree =\n            (PolyhedronsSet) new RegionFactory<Euclidean3D>().buildConvex(\n                new Plane(vertex3, vertex2, vertex1),\n                new Plane(vertex2, vertex3, vertex4),\n                new Plane(vertex4, vertex3, vertex1),\n                new Plane(vertex1, vertex2, vertex4));\n        Vector3D barycenter = (Vector3D) tree.getBarycenter();\n        Vector3D s = new Vector3D(10.2, 4.3, -6.7);\n        Vector3D c = new Vector3D(-0.2, 2.1, -3.2);\n        Rotation r = new Rotation(new Vector3D(6.2, -4.4, 2.1), 0.12);\n\n        tree = tree.rotate(c, r).translate(s);\n\n        Vector3D newB =\n            new Vector3D(1.0, s,\n                         1.0, c,\n                         1.0, r.applyTo(barycenter.subtract(c)));\n        Assert.assertEquals(0.0,\n                            newB.subtract(tree.getBarycenter()).getNorm(),\n                            1.0e-10);\n\n        final Vector3D[] expectedV = new Vector3D[] {\n            new Vector3D(1.0, s,\n                         1.0, c,\n                         1.0, r.applyTo(vertex1.subtract(c))),\n                         new Vector3D(1.0, s,\n                                      1.0, c,\n                                      1.0, r.applyTo(vertex2.subtract(c))),\n                                      new Vector3D(1.0, s,\n                                                   1.0, c,\n                                                   1.0, r.applyTo(vertex3.subtract(c))),\n                                                   new Vector3D(1.0, s,\n                                                                1.0, c,\n                                                                1.0, r.applyTo(vertex4.subtract(c)))\n        };\n        tree.getTree(true).visit(new BSPTreeVisitor<Euclidean3D>() {\n\n            public Order visitOrder(BSPTree<Euclidean3D> node) {\n                return Order.MINUS_SUB_PLUS;\n            }\n\n            public void visitInternalNode(BSPTree<Euclidean3D> node) {\n                @SuppressWarnings(\"unchecked\")\n                BoundaryAttribute<Euclidean3D> attribute =\n                    (BoundaryAttribute<Euclidean3D>) node.getAttribute();\n                if (attribute.getPlusOutside() != null) {\n                    checkFacet((SubPlane) attribute.getPlusOutside());\n                }\n                if (attribute.getPlusInside() != null) {\n                    checkFacet((SubPlane) attribute.getPlusInside());\n                }\n            }\n\n            public void visitLeafNode(BSPTree<Euclidean3D> node) {\n            }\n\n            private void checkFacet(SubPlane facet) {\n                Plane plane = (Plane) facet.getHyperplane();\n                Vector2D[][] vertices =\n                    ((PolygonsSet) facet.getRemainingRegion()).getVertices();\n                Assert.assertEquals(1, vertices.length);\n                for (int i = 0; i < vertices[0].length; ++i) {\n                    Vector3D v = plane.toSpace(vertices[0][i]);\n                    double d = Double.POSITIVE_INFINITY;\n                    for (int k = 0; k < expectedV.length; ++k) {\n                        d = FastMath.min(d, v.subtract(expectedV[k]).getNorm());\n                    }\n                    Assert.assertEquals(0, d, 1.0e-10);\n                }\n            }\n\n        });\n\n    }\n",
        "begin_line": 111,
        "end_line": 191,
        "comment": "",
        "child_ranges": [
            "(line 113,col 9)-(line 113,col 55)",
            "(line 114,col 9)-(line 114,col 55)",
            "(line 115,col 9)-(line 115,col 55)",
            "(line 116,col 9)-(line 116,col 55)",
            "(line 117,col 9)-(line 123,col 54)",
            "(line 124,col 9)-(line 124,col 62)",
            "(line 125,col 9)-(line 125,col 51)",
            "(line 126,col 9)-(line 126,col 51)",
            "(line 127,col 9)-(line 127,col 70)",
            "(line 129,col 9)-(line 129,col 46)",
            "(line 131,col 9)-(line 134,col 65)",
            "(line 135,col 9)-(line 137,col 37)",
            "(line 139,col 9)-(line 152,col 10)",
            "(line 153,col 9)-(line 189,col 11)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSetTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSetTest.java",
        "signature": "org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSetTest.Anonymous-57f42587-b370-4f90-9dc9-68fe6b9a67a3.visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>)",
        "snippet": "            public Order visitOrder(BSPTree<Euclidean3D> node) {\n                return Order.MINUS_SUB_PLUS;\n            }\n",
        "begin_line": 155,
        "end_line": 157,
        "comment": "",
        "child_ranges": [
            "(line 156,col 17)-(line 156,col 44)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSetTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSetTest.java",
        "signature": "org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSetTest.Anonymous-62ac5261-751f-4d4a-9927-59339134da84.visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>)",
        "snippet": "            public void visitInternalNode(BSPTree<Euclidean3D> node) {\n                @SuppressWarnings(\"unchecked\")\n                BoundaryAttribute<Euclidean3D> attribute =\n                    (BoundaryAttribute<Euclidean3D>) node.getAttribute();\n                if (attribute.getPlusOutside() != null) {\n                    checkFacet((SubPlane) attribute.getPlusOutside());\n                }\n                if (attribute.getPlusInside() != null) {\n                    checkFacet((SubPlane) attribute.getPlusInside());\n                }\n            }\n",
        "begin_line": 159,
        "end_line": 169,
        "comment": "",
        "child_ranges": [
            "(line 160,col 17)-(line 162,col 73)",
            "(line 163,col 17)-(line 165,col 17)",
            "(line 166,col 17)-(line 168,col 17)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSetTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSetTest.java",
        "signature": "org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSetTest.Anonymous-63a9f4c8-0a1b-4cad-9b88-35bc9c58fddd.visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>)",
        "snippet": "            public void visitLeafNode(BSPTree<Euclidean3D> node) {\n            }\n",
        "begin_line": 171,
        "end_line": 172,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSetTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSetTest.java",
        "signature": "org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSetTest.Anonymous-480227ab-f43b-41e4-812b-4586e9127a4c.checkFacet(org.apache.commons.math3.geometry.euclidean.threed.SubPlane)",
        "snippet": "            private void checkFacet(SubPlane facet) {\n                Plane plane = (Plane) facet.getHyperplane();\n                Vector2D[][] vertices =\n                    ((PolygonsSet) facet.getRemainingRegion()).getVertices();\n                Assert.assertEquals(1, vertices.length);\n                for (int i = 0; i < vertices[0].length; ++i) {\n                    Vector3D v = plane.toSpace(vertices[0][i]);\n                    double d = Double.POSITIVE_INFINITY;\n                    for (int k = 0; k < expectedV.length; ++k) {\n                        d = FastMath.min(d, v.subtract(expectedV[k]).getNorm());\n                    }\n                    Assert.assertEquals(0, d, 1.0e-10);\n                }\n            }\n",
        "begin_line": 174,
        "end_line": 187,
        "comment": "",
        "child_ranges": [
            "(line 175,col 17)-(line 175,col 60)",
            "(line 176,col 17)-(line 177,col 77)",
            "(line 178,col 17)-(line 178,col 56)",
            "(line 179,col 17)-(line 186,col 17)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSetTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSetTest.java",
        "signature": "org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSetTest.testBuildBox()",
        "snippet": "    @Test\n    public void testBuildBox() {\n        double x = 1.0;\n        double y = 2.0;\n        double z = 3.0;\n        double w = 0.1;\n        double l = 1.0;\n        PolyhedronsSet tree =\n            new PolyhedronsSet(x - l, x + l, y - w, y + w, z - w, z + w);\n        Vector3D barycenter = (Vector3D) tree.getBarycenter();\n        Assert.assertEquals(x, barycenter.getX(), 1.0e-10);\n        Assert.assertEquals(y, barycenter.getY(), 1.0e-10);\n        Assert.assertEquals(z, barycenter.getZ(), 1.0e-10);\n        Assert.assertEquals(8 * l * w * w, tree.getSize(), 1.0e-10);\n        Assert.assertEquals(8 * w * (2 * l + w), tree.getBoundarySize(), 1.0e-10);\n    }\n",
        "begin_line": 193,
        "end_line": 208,
        "comment": "",
        "child_ranges": [
            "(line 195,col 9)-(line 195,col 23)",
            "(line 196,col 9)-(line 196,col 23)",
            "(line 197,col 9)-(line 197,col 23)",
            "(line 198,col 9)-(line 198,col 23)",
            "(line 199,col 9)-(line 199,col 23)",
            "(line 200,col 9)-(line 201,col 73)",
            "(line 202,col 9)-(line 202,col 62)",
            "(line 203,col 9)-(line 203,col 59)",
            "(line 204,col 9)-(line 204,col 59)",
            "(line 205,col 9)-(line 205,col 59)",
            "(line 206,col 9)-(line 206,col 68)",
            "(line 207,col 9)-(line 207,col 82)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSetTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSetTest.java",
        "signature": "org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSetTest.testCross()",
        "snippet": "    @Test\n    public void testCross() {\n\n        double x = 1.0;\n        double y = 2.0;\n        double z = 3.0;\n        double w = 0.1;\n        double l = 1.0;\n        PolyhedronsSet xBeam =\n            new PolyhedronsSet(x - l, x + l, y - w, y + w, z - w, z + w);\n        PolyhedronsSet yBeam =\n            new PolyhedronsSet(x - w, x + w, y - l, y + l, z - w, z + w);\n        PolyhedronsSet zBeam =\n            new PolyhedronsSet(x - w, x + w, y - w, y + w, z - l, z + l);\n        RegionFactory<Euclidean3D> factory = new RegionFactory<Euclidean3D>();\n        PolyhedronsSet tree = (PolyhedronsSet) factory.union(xBeam, factory.union(yBeam, zBeam));\n        Vector3D barycenter = (Vector3D) tree.getBarycenter();\n\n        Assert.assertEquals(x, barycenter.getX(), 1.0e-10);\n        Assert.assertEquals(y, barycenter.getY(), 1.0e-10);\n        Assert.assertEquals(z, barycenter.getZ(), 1.0e-10);\n        Assert.assertEquals(8 * w * w * (3 * l - 2 * w), tree.getSize(), 1.0e-10);\n        Assert.assertEquals(24 * w * (2 * l - w), tree.getBoundarySize(), 1.0e-10);\n\n    }\n",
        "begin_line": 210,
        "end_line": 234,
        "comment": "",
        "child_ranges": [
            "(line 213,col 9)-(line 213,col 23)",
            "(line 214,col 9)-(line 214,col 23)",
            "(line 215,col 9)-(line 215,col 23)",
            "(line 216,col 9)-(line 216,col 23)",
            "(line 217,col 9)-(line 217,col 23)",
            "(line 218,col 9)-(line 219,col 73)",
            "(line 220,col 9)-(line 221,col 73)",
            "(line 222,col 9)-(line 223,col 73)",
            "(line 224,col 9)-(line 224,col 78)",
            "(line 225,col 9)-(line 225,col 97)",
            "(line 226,col 9)-(line 226,col 62)",
            "(line 228,col 9)-(line 228,col 59)",
            "(line 229,col 9)-(line 229,col 59)",
            "(line 230,col 9)-(line 230,col 59)",
            "(line 231,col 9)-(line 231,col 82)",
            "(line 232,col 9)-(line 232,col 83)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSetTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSetTest.java",
        "signature": "org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSetTest.testIssue780()",
        "snippet": "    @Test\n    public void testIssue780() {\n        float[] coords = {\n            1.000000f, -1.000000f, -1.000000f, \n            1.000000f, -1.000000f, 1.000000f, \n            -1.000000f, -1.000000f, 1.000000f, \n            -1.000000f, -1.000000f, -1.000000f, \n            1.000000f, 1.000000f, -1f, \n            0.999999f, 1.000000f, 1.000000f,   // 1.000000f, 1.000000f, 1.000000f, \n            -1.000000f, 1.000000f, 1.000000f, \n            -1.000000f, 1.000000f, -1.000000f};\n        int[] indices = {\n            0, 1, 2, 0, 2, 3, \n            4, 7, 6, 4, 6, 5, \n            0, 4, 5, 0, 5, 1, \n            1, 5, 6, 1, 6, 2, \n            2, 6, 7, 2, 7, 3, \n            4, 0, 3, 4, 3, 7};\n        ArrayList<SubHyperplane<Euclidean3D>> subHyperplaneList = new ArrayList<SubHyperplane<Euclidean3D>>();\n        for (int idx = 0; idx < indices.length; idx += 3) {\n            int idxA = indices[idx] * 3;\n            int idxB = indices[idx + 1] * 3;\n            int idxC = indices[idx + 2] * 3;\n            Vector3D v_1 = new Vector3D(coords[idxA], coords[idxA + 1], coords[idxA + 2]);\n            Vector3D v_2 = new Vector3D(coords[idxB], coords[idxB + 1], coords[idxB + 2]);\n            Vector3D v_3 = new Vector3D(coords[idxC], coords[idxC + 1], coords[idxC + 2]);\n            Vector3D[] vertices = {v_1, v_2, v_3};\n            Plane polyPlane = new Plane(v_1, v_2, v_3);\n            ArrayList<SubHyperplane<Euclidean2D>> lines = new ArrayList<SubHyperplane<Euclidean2D>>();\n\n            Vector2D[] projPts = new Vector2D[vertices.length];\n            for (int ptIdx = 0; ptIdx < projPts.length; ptIdx++) {\n                projPts[ptIdx] = polyPlane.toSubSpace(vertices[ptIdx]);\n            }\n\n            SubLine lineInPlane = null;\n            for (int ptIdx = 0; ptIdx < projPts.length; ptIdx++) {\n                lineInPlane = new SubLine(projPts[ptIdx], projPts[(ptIdx + 1) % projPts.length]);\n                lines.add(lineInPlane);\n            }\n            Region<Euclidean2D> polyRegion = new PolygonsSet(lines);\n            SubPlane polygon = new SubPlane(polyPlane, polyRegion);\n            subHyperplaneList.add(polygon);\n        }\n        PolyhedronsSet polyhedronsSet = new PolyhedronsSet(subHyperplaneList);\n        Assert.assertEquals( 8.0, polyhedronsSet.getSize(), 3.0e-6);\n        Assert.assertEquals(24.0, polyhedronsSet.getBoundarySize(), 5.0e-6);\n    }\n",
        "begin_line": 236,
        "end_line": 283,
        "comment": "",
        "child_ranges": [
            "(line 238,col 9)-(line 246,col 47)",
            "(line 247,col 9)-(line 253,col 30)",
            "(line 254,col 9)-(line 254,col 110)",
            "(line 255,col 9)-(line 279,col 9)",
            "(line 280,col 9)-(line 280,col 78)",
            "(line 281,col 9)-(line 281,col 68)",
            "(line 282,col 9)-(line 282,col 76)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSetTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSetTest.java",
        "signature": "org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSetTest.checkPoints(org.apache.commons.math3.geometry.partitioning.Region.Location, org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet, org.apache.commons.math3.geometry.euclidean.threed.Vector3D[])",
        "snippet": "    private void checkPoints(Region.Location expected, PolyhedronsSet tree, Vector3D[] points) {\n        for (int i = 0; i < points.length; ++i) {\n            Assert.assertEquals(expected, tree.checkPoint(points[i]));\n        }\n    }\n",
        "begin_line": 285,
        "end_line": 289,
        "comment": "",
        "child_ranges": [
            "(line 286,col 9)-(line 288,col 9)"
        ]
    }
]