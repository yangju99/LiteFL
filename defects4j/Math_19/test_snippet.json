[
    {
        "class_name": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java",
        "signature": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.testInitOutofbounds1()",
        "snippet": "    @Test(expected = NumberIsTooLargeException.class)\n    public void testInitOutofbounds1() {\n        double[] startPoint = point(DIM,3);\n        double[] insigma = null;\n        double[][] boundaries = boundaries(DIM,-1,2);\n        PointValuePair expected =\n            new PointValuePair(point(DIM,1.0),0.0);\n        doTest(new Rosen(), startPoint, insigma, boundaries,\n                GoalType.MINIMIZE, LAMBDA, true, 0, 1e-13,\n                1e-13, 1e-6, 100000, expected);\n    }\n",
        "begin_line": 49,
        "end_line": 59,
        "comment": "",
        "child_ranges": [
            "(line 51,col 9)-(line 51,col 43)",
            "(line 52,col 9)-(line 52,col 32)",
            "(line 53,col 9)-(line 53,col 53)",
            "(line 54,col 9)-(line 55,col 51)",
            "(line 56,col 9)-(line 58,col 47)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java",
        "signature": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.testInitOutofbounds2()",
        "snippet": "    @Test(expected = NumberIsTooSmallException.class)\n    public void testInitOutofbounds2() {\n        double[] startPoint = point(DIM, -2);\n        double[] insigma = null;\n        double[][] boundaries = boundaries(DIM,-1,2);\n        PointValuePair expected =\n            new PointValuePair(point(DIM,1.0),0.0);\n        doTest(new Rosen(), startPoint, insigma, boundaries,\n                GoalType.MINIMIZE, LAMBDA, true, 0, 1e-13,\n                1e-13, 1e-6, 100000, expected);\n    }\n",
        "begin_line": 60,
        "end_line": 70,
        "comment": "",
        "child_ranges": [
            "(line 62,col 9)-(line 62,col 45)",
            "(line 63,col 9)-(line 63,col 32)",
            "(line 64,col 9)-(line 64,col 53)",
            "(line 65,col 9)-(line 66,col 51)",
            "(line 67,col 9)-(line 69,col 47)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java",
        "signature": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.testBoundariesDimensionMismatch()",
        "snippet": "    @Test(expected = DimensionMismatchException.class)\n    public void testBoundariesDimensionMismatch() {\n        double[] startPoint = point(DIM,0.5);\n        double[] insigma = null;\n        double[][] boundaries = boundaries(DIM+1,-1,2);\n        PointValuePair expected =\n            new PointValuePair(point(DIM,1.0),0.0);\n        doTest(new Rosen(), startPoint, insigma, boundaries,\n                GoalType.MINIMIZE, LAMBDA, true, 0, 1e-13,\n                1e-13, 1e-6, 100000, expected);\n    }\n",
        "begin_line": 72,
        "end_line": 82,
        "comment": "",
        "child_ranges": [
            "(line 74,col 9)-(line 74,col 45)",
            "(line 75,col 9)-(line 75,col 32)",
            "(line 76,col 9)-(line 76,col 55)",
            "(line 77,col 9)-(line 78,col 51)",
            "(line 79,col 9)-(line 81,col 47)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java",
        "signature": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.testUnsupportedBoundaries1()",
        "snippet": "    @Test(expected = MathUnsupportedOperationException.class)\n    public void testUnsupportedBoundaries1() {\n        double[] startPoint = point(DIM,0.5);\n        double[] insigma = null;\n        double[][] boundaries = boundaries(DIM,-1, Double.POSITIVE_INFINITY);\n        PointValuePair expected =\n            new PointValuePair(point(DIM,1.0),0.0);\n        doTest(new Rosen(), startPoint, insigma, boundaries,\n                GoalType.MINIMIZE, LAMBDA, true, 0, 1e-13,\n                1e-13, 1e-6, 100000, expected);\n    }\n",
        "begin_line": 84,
        "end_line": 94,
        "comment": "",
        "child_ranges": [
            "(line 86,col 9)-(line 86,col 45)",
            "(line 87,col 9)-(line 87,col 32)",
            "(line 88,col 9)-(line 88,col 77)",
            "(line 89,col 9)-(line 90,col 51)",
            "(line 91,col 9)-(line 93,col 47)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java",
        "signature": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.testUnsupportedBoundaries2()",
        "snippet": "    @Test(expected = MathUnsupportedOperationException.class)\n    public void testUnsupportedBoundaries2() {\n        double[] startPoint = point(DIM, 0.5);\n        double[] insigma = null;\n        final double[] lB = new double[] { -1, -1, -1, -1, -1, Double.NEGATIVE_INFINITY, -1, -1, -1, -1, -1, -1, -1 };\n        final double[] uB = new double[] { 2, 2, 2, Double.POSITIVE_INFINITY, 2, 2, 2, 2, 2, 2, 2, 2, 2 };\n        double[][] boundaries = new double[2][];\n        boundaries[0] = lB;\n        boundaries[1] = uB;\n        PointValuePair expected =\n            new PointValuePair(point(DIM,1.0),0.0);\n        doTest(new Rosen(), startPoint, insigma, boundaries,\n                GoalType.MINIMIZE, LAMBDA, true, 0, 1e-13,\n                1e-13, 1e-6, 100000, expected);\n    }\n",
        "begin_line": 96,
        "end_line": 110,
        "comment": "",
        "child_ranges": [
            "(line 98,col 9)-(line 98,col 46)",
            "(line 99,col 9)-(line 99,col 32)",
            "(line 100,col 9)-(line 100,col 118)",
            "(line 101,col 9)-(line 101,col 106)",
            "(line 102,col 9)-(line 102,col 48)",
            "(line 103,col 9)-(line 103,col 27)",
            "(line 104,col 9)-(line 104,col 27)",
            "(line 105,col 9)-(line 106,col 51)",
            "(line 107,col 9)-(line 109,col 47)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java",
        "signature": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.testInputSigmaNegative()",
        "snippet": "    @Test(expected = NotPositiveException.class)\n    public void testInputSigmaNegative() {\n        double[] startPoint = point(DIM,0.5);\n        double[] insigma = point(DIM,-0.5);\n        double[][] boundaries = null;\n        PointValuePair expected =\n            new PointValuePair(point(DIM,1.0),0.0);\n        doTest(new Rosen(), startPoint, insigma, boundaries,\n                GoalType.MINIMIZE, LAMBDA, true, 0, 1e-13,\n                1e-13, 1e-6, 100000, expected);\n    }\n",
        "begin_line": 112,
        "end_line": 122,
        "comment": "",
        "child_ranges": [
            "(line 114,col 9)-(line 114,col 45)",
            "(line 115,col 9)-(line 115,col 43)",
            "(line 116,col 9)-(line 116,col 37)",
            "(line 117,col 9)-(line 118,col 51)",
            "(line 119,col 9)-(line 121,col 47)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java",
        "signature": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.testInputSigmaOutOfRange()",
        "snippet": "    @Test(expected = OutOfRangeException.class)\n    public void testInputSigmaOutOfRange() {\n        double[] startPoint = point(DIM,0.5);\n        double[] insigma = point(DIM, 1.1);\n        double[][] boundaries = boundaries(DIM,-0.5,0.5);\n        PointValuePair expected =\n            new PointValuePair(point(DIM,1.0),0.0);\n        doTest(new Rosen(), startPoint, insigma, boundaries,\n                GoalType.MINIMIZE, LAMBDA, true, 0, 1e-13,\n                1e-13, 1e-6, 100000, expected);\n    }\n",
        "begin_line": 124,
        "end_line": 134,
        "comment": "",
        "child_ranges": [
            "(line 126,col 9)-(line 126,col 45)",
            "(line 127,col 9)-(line 127,col 43)",
            "(line 128,col 9)-(line 128,col 57)",
            "(line 129,col 9)-(line 130,col 51)",
            "(line 131,col 9)-(line 133,col 47)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java",
        "signature": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.testInputSigmaDimensionMismatch()",
        "snippet": "    @Test(expected = DimensionMismatchException.class)\n    public void testInputSigmaDimensionMismatch() {\n        double[] startPoint = point(DIM,0.5);\n        double[] insigma = point(DIM+1,-0.5);\n        double[][] boundaries = null;\n        PointValuePair expected =\n            new PointValuePair(point(DIM,1.0),0.0);\n        doTest(new Rosen(), startPoint, insigma, boundaries,\n                GoalType.MINIMIZE, LAMBDA, true, 0, 1e-13,\n                1e-13, 1e-6, 100000, expected);\n    }\n",
        "begin_line": 136,
        "end_line": 146,
        "comment": "",
        "child_ranges": [
            "(line 138,col 9)-(line 138,col 45)",
            "(line 139,col 9)-(line 139,col 45)",
            "(line 140,col 9)-(line 140,col 37)",
            "(line 141,col 9)-(line 142,col 51)",
            "(line 143,col 9)-(line 145,col 47)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java",
        "signature": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.testRosen()",
        "snippet": "    @Test\n    @Retry(3)\n    public void testRosen() {\n        double[] startPoint = point(DIM,0.1);\n        double[] insigma = point(DIM,0.1);\n        double[][] boundaries = null;\n        PointValuePair expected =\n            new PointValuePair(point(DIM,1.0),0.0);\n        doTest(new Rosen(), startPoint, insigma, boundaries,\n                GoalType.MINIMIZE, LAMBDA, true, 0, 1e-13,\n                1e-13, 1e-6, 100000, expected);\n        doTest(new Rosen(), startPoint, insigma, boundaries,\n                GoalType.MINIMIZE, LAMBDA, false, 0, 1e-13,\n                1e-13, 1e-6, 100000, expected);\n    }\n",
        "begin_line": 148,
        "end_line": 162,
        "comment": "",
        "child_ranges": [
            "(line 151,col 9)-(line 151,col 45)",
            "(line 152,col 9)-(line 152,col 42)",
            "(line 153,col 9)-(line 153,col 37)",
            "(line 154,col 9)-(line 155,col 51)",
            "(line 156,col 9)-(line 158,col 47)",
            "(line 159,col 9)-(line 161,col 47)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java",
        "signature": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.testMaximize()",
        "snippet": "    @Test\n    @Retry(3)\n    public void testMaximize() {}\n",
        "begin_line": 164,
        "end_line": 166,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java",
        "signature": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.testEllipse()",
        "snippet": "    @Test\n    public void testEllipse() {\n        double[] startPoint = point(DIM,1.0);\n        double[] insigma = point(DIM,0.1);\n        double[][] boundaries = null;\n        PointValuePair expected =\n            new PointValuePair(point(DIM,0.0),0.0);\n        doTest(new Elli(), startPoint, insigma, boundaries,\n                GoalType.MINIMIZE, LAMBDA, true, 0, 1e-13,\n                1e-13, 1e-6, 100000, expected);\n        doTest(new Elli(), startPoint, insigma, boundaries,\n                GoalType.MINIMIZE, LAMBDA, false, 0, 1e-13,\n                1e-13, 1e-6, 100000, expected);\n    }\n",
        "begin_line": 187,
        "end_line": 200,
        "comment": "",
        "child_ranges": [
            "(line 189,col 9)-(line 189,col 45)",
            "(line 190,col 9)-(line 190,col 42)",
            "(line 191,col 9)-(line 191,col 37)",
            "(line 192,col 9)-(line 193,col 51)",
            "(line 194,col 9)-(line 196,col 47)",
            "(line 197,col 9)-(line 199,col 47)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java",
        "signature": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.testElliRotated()",
        "snippet": "    @Test\n    public void testElliRotated() {\n        double[] startPoint = point(DIM,1.0);\n        double[] insigma = point(DIM,0.1);\n        double[][] boundaries = null;\n        PointValuePair expected =\n            new PointValuePair(point(DIM,0.0),0.0);\n        doTest(new ElliRotated(), startPoint, insigma, boundaries,\n                GoalType.MINIMIZE, LAMBDA, true, 0, 1e-13,\n                1e-13, 1e-6, 100000, expected);\n        doTest(new ElliRotated(), startPoint, insigma, boundaries,\n                GoalType.MINIMIZE, LAMBDA, false, 0, 1e-13,\n                1e-13, 1e-6, 100000, expected);\n    }\n",
        "begin_line": 202,
        "end_line": 215,
        "comment": "",
        "child_ranges": [
            "(line 204,col 9)-(line 204,col 45)",
            "(line 205,col 9)-(line 205,col 42)",
            "(line 206,col 9)-(line 206,col 37)",
            "(line 207,col 9)-(line 208,col 51)",
            "(line 209,col 9)-(line 211,col 47)",
            "(line 212,col 9)-(line 214,col 47)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java",
        "signature": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.testCigar()",
        "snippet": "    @Test\n    public void testCigar() {\n        double[] startPoint = point(DIM,1.0);\n        double[] insigma = point(DIM,0.1);\n        double[][] boundaries = null;\n        PointValuePair expected =\n            new PointValuePair(point(DIM,0.0),0.0);\n        doTest(new Cigar(), startPoint, insigma, boundaries,\n                GoalType.MINIMIZE, LAMBDA, true, 0, 1e-13,\n                1e-13, 1e-6, 200000, expected);\n        doTest(new Cigar(), startPoint, insigma, boundaries,\n                GoalType.MINIMIZE, LAMBDA, false, 0, 1e-13,\n                1e-13, 1e-6, 100000, expected);\n    }\n",
        "begin_line": 217,
        "end_line": 230,
        "comment": "",
        "child_ranges": [
            "(line 219,col 9)-(line 219,col 45)",
            "(line 220,col 9)-(line 220,col 42)",
            "(line 221,col 9)-(line 221,col 37)",
            "(line 222,col 9)-(line 223,col 51)",
            "(line 224,col 9)-(line 226,col 47)",
            "(line 227,col 9)-(line 229,col 47)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java",
        "signature": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.testTwoAxes()",
        "snippet": "    @Test\n    public void testTwoAxes() {\n        double[] startPoint = point(DIM,1.0);\n        double[] insigma = point(DIM,0.1);\n        double[][] boundaries = null;\n        PointValuePair expected =\n            new PointValuePair(point(DIM,0.0),0.0);\n        doTest(new TwoAxes(), startPoint, insigma, boundaries,\n                GoalType.MINIMIZE, 2*LAMBDA, true, 0, 1e-13,\n                1e-13, 1e-6, 200000, expected);\n        doTest(new TwoAxes(), startPoint, insigma, boundaries,\n                GoalType.MINIMIZE, 2*LAMBDA, false, 0, 1e-13,\n                1e-8, 1e-3, 200000, expected);\n    }\n",
        "begin_line": 232,
        "end_line": 245,
        "comment": "",
        "child_ranges": [
            "(line 234,col 9)-(line 234,col 45)",
            "(line 235,col 9)-(line 235,col 42)",
            "(line 236,col 9)-(line 236,col 37)",
            "(line 237,col 9)-(line 238,col 51)",
            "(line 239,col 9)-(line 241,col 47)",
            "(line 242,col 9)-(line 244,col 46)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java",
        "signature": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.testCigTab()",
        "snippet": "    @Test\n    public void testCigTab() {}\n",
        "begin_line": 247,
        "end_line": 248,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java",
        "signature": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.testSphere()",
        "snippet": "    @Test\n    public void testSphere() {\n        double[] startPoint = point(DIM,1.0);\n        double[] insigma = point(DIM,0.1);\n        double[][] boundaries = null;\n        PointValuePair expected =\n            new PointValuePair(point(DIM,0.0),0.0);\n        doTest(new Sphere(), startPoint, insigma, boundaries,\n                GoalType.MINIMIZE, LAMBDA, true, 0, 1e-13,\n                1e-13, 1e-6, 100000, expected);\n        doTest(new Sphere(), startPoint, insigma, boundaries,\n                GoalType.MINIMIZE, LAMBDA, false, 0, 1e-13,\n                1e-13, 1e-6, 100000, expected);\n    }\n",
        "begin_line": 265,
        "end_line": 278,
        "comment": "",
        "child_ranges": [
            "(line 267,col 9)-(line 267,col 45)",
            "(line 268,col 9)-(line 268,col 42)",
            "(line 269,col 9)-(line 269,col 37)",
            "(line 270,col 9)-(line 271,col 51)",
            "(line 272,col 9)-(line 274,col 47)",
            "(line 275,col 9)-(line 277,col 47)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java",
        "signature": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.testTablet()",
        "snippet": "    @Test\n    public void testTablet() {\n        double[] startPoint = point(DIM,1.0);\n        double[] insigma = point(DIM,0.1);\n        double[][] boundaries = null;\n        PointValuePair expected =\n            new PointValuePair(point(DIM,0.0),0.0);\n        doTest(new Tablet(), startPoint, insigma, boundaries,\n                GoalType.MINIMIZE, LAMBDA, true, 0, 1e-13,\n                1e-13, 1e-6, 100000, expected);\n        doTest(new Tablet(), startPoint, insigma, boundaries,\n                GoalType.MINIMIZE, LAMBDA, false, 0, 1e-13,\n                1e-13, 1e-6, 100000, expected);\n    }\n",
        "begin_line": 280,
        "end_line": 293,
        "comment": "",
        "child_ranges": [
            "(line 282,col 9)-(line 282,col 45)",
            "(line 283,col 9)-(line 283,col 42)",
            "(line 284,col 9)-(line 284,col 37)",
            "(line 285,col 9)-(line 286,col 51)",
            "(line 287,col 9)-(line 289,col 47)",
            "(line 290,col 9)-(line 292,col 47)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java",
        "signature": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.testDiffPow()",
        "snippet": "    @Test\n    public void testDiffPow() {\n        double[] startPoint = point(DIM,1.0);\n        double[] insigma = point(DIM,0.1);\n        double[][] boundaries = null;\n        PointValuePair expected =\n            new PointValuePair(point(DIM,0.0),0.0);\n        doTest(new DiffPow(), startPoint, insigma, boundaries,\n                GoalType.MINIMIZE, 10, true, 0, 1e-13,\n                1e-8, 1e-1, 100000, expected);\n        doTest(new DiffPow(), startPoint, insigma, boundaries,\n                GoalType.MINIMIZE, 10, false, 0, 1e-13,\n                1e-8, 2e-1, 100000, expected);\n    }\n",
        "begin_line": 295,
        "end_line": 308,
        "comment": "",
        "child_ranges": [
            "(line 297,col 9)-(line 297,col 45)",
            "(line 298,col 9)-(line 298,col 42)",
            "(line 299,col 9)-(line 299,col 37)",
            "(line 300,col 9)-(line 301,col 51)",
            "(line 302,col 9)-(line 304,col 46)",
            "(line 305,col 9)-(line 307,col 46)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java",
        "signature": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.testSsDiffPow()",
        "snippet": "    @Test\n    public void testSsDiffPow() {\n        double[] startPoint = point(DIM,1.0);\n        double[] insigma = point(DIM,0.1);\n        double[][] boundaries = null;\n        PointValuePair expected =\n            new PointValuePair(point(DIM,0.0),0.0);\n        doTest(new SsDiffPow(), startPoint, insigma, boundaries,\n                GoalType.MINIMIZE, 10, true, 0, 1e-13,\n                1e-4, 1e-1, 200000, expected);\n        doTest(new SsDiffPow(), startPoint, insigma, boundaries,\n                GoalType.MINIMIZE, 10, false, 0, 1e-13,\n                1e-4, 1e-1, 200000, expected);\n    }\n",
        "begin_line": 310,
        "end_line": 323,
        "comment": "",
        "child_ranges": [
            "(line 312,col 9)-(line 312,col 45)",
            "(line 313,col 9)-(line 313,col 42)",
            "(line 314,col 9)-(line 314,col 37)",
            "(line 315,col 9)-(line 316,col 51)",
            "(line 317,col 9)-(line 319,col 46)",
            "(line 320,col 9)-(line 322,col 46)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java",
        "signature": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.testAckley()",
        "snippet": "    @Test\n    public void testAckley() {\n        double[] startPoint = point(DIM,1.0);\n        double[] insigma = point(DIM,1.0);\n        double[][] boundaries = null;\n        PointValuePair expected =\n            new PointValuePair(point(DIM,0.0),0.0);\n        doTest(new Ackley(), startPoint, insigma, boundaries,\n                GoalType.MINIMIZE, 2*LAMBDA, true, 0, 1e-13,\n                1e-9, 1e-5, 100000, expected);\n        doTest(new Ackley(), startPoint, insigma, boundaries,\n                GoalType.MINIMIZE, 2*LAMBDA, false, 0, 1e-13,\n                1e-9, 1e-5, 100000, expected);\n    }\n",
        "begin_line": 325,
        "end_line": 338,
        "comment": "",
        "child_ranges": [
            "(line 327,col 9)-(line 327,col 45)",
            "(line 328,col 9)-(line 328,col 42)",
            "(line 329,col 9)-(line 329,col 37)",
            "(line 330,col 9)-(line 331,col 51)",
            "(line 332,col 9)-(line 334,col 46)",
            "(line 335,col 9)-(line 337,col 46)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java",
        "signature": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.testRastrigin()",
        "snippet": "    @Test\n    public void testRastrigin() {\n        double[] startPoint = point(DIM,0.1);\n        double[] insigma = point(DIM,0.1);\n        double[][] boundaries = null;\n        PointValuePair expected =\n            new PointValuePair(point(DIM,0.0),0.0);\n        doTest(new Rastrigin(), startPoint, insigma, boundaries,\n                GoalType.MINIMIZE, (int)(200*Math.sqrt(DIM)), true, 0, 1e-13,\n                1e-13, 1e-6, 200000, expected);\n        doTest(new Rastrigin(), startPoint, insigma, boundaries,\n                GoalType.MINIMIZE, (int)(200*Math.sqrt(DIM)), false, 0, 1e-13,\n                1e-13, 1e-6, 200000, expected);\n    }\n",
        "begin_line": 340,
        "end_line": 353,
        "comment": "",
        "child_ranges": [
            "(line 342,col 9)-(line 342,col 45)",
            "(line 343,col 9)-(line 343,col 42)",
            "(line 344,col 9)-(line 344,col 37)",
            "(line 345,col 9)-(line 346,col 51)",
            "(line 347,col 9)-(line 349,col 47)",
            "(line 350,col 9)-(line 352,col 47)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java",
        "signature": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.testConstrainedRosen()",
        "snippet": "    @Test\n    public void testConstrainedRosen() {\n        double[] startPoint = point(DIM,0.1);\n        double[] insigma = point(DIM,0.1);\n        double[][] boundaries = boundaries(DIM,-1,2);\n        PointValuePair expected =\n            new PointValuePair(point(DIM,1.0),0.0);\n        doTest(new Rosen(), startPoint, insigma, boundaries,\n                GoalType.MINIMIZE, 2*LAMBDA, true, 0, 1e-13,\n                1e-13, 1e-6, 100000, expected);\n        doTest(new Rosen(), startPoint, insigma, boundaries,\n                GoalType.MINIMIZE, 2*LAMBDA, false, 0, 1e-13,\n                1e-13, 1e-6, 100000, expected);\n    }\n",
        "begin_line": 355,
        "end_line": 368,
        "comment": "",
        "child_ranges": [
            "(line 357,col 9)-(line 357,col 45)",
            "(line 358,col 9)-(line 358,col 42)",
            "(line 359,col 9)-(line 359,col 53)",
            "(line 360,col 9)-(line 361,col 51)",
            "(line 362,col 9)-(line 364,col 47)",
            "(line 365,col 9)-(line 367,col 47)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java",
        "signature": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.testDiagonalRosen()",
        "snippet": "    @Test\n    public void testDiagonalRosen() {}\n",
        "begin_line": 370,
        "end_line": 371,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java",
        "signature": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.testMath864()",
        "snippet": "    @Test\n    public void testMath864() {\n        final CMAESOptimizer optimizer = new CMAESOptimizer();\n        final MultivariateFunction fitnessFunction = new MultivariateFunction() {\n                public double value(double[] parameters) {\n                    final double target = 1;\n                    final double error = target - parameters[0];\n                    return error * error;\n                }\n            };\n\n        final double[] start = { 0 };\n        final double[] lower = { -1e6 };\n        final double[] upper = { 0.5 };\n        final double[] result = optimizer.optimize(10000, fitnessFunction, GoalType.MINIMIZE,\n                                                   start, lower, upper).getPoint();\n        Assert.assertTrue(\"Out of bounds (\" + result[0] + \" > \" + upper[0] + \")\",\n                          result[0] <= upper[0]);\n    }\n",
        "begin_line": 385,
        "end_line": 403,
        "comment": "",
        "child_ranges": [
            "(line 387,col 9)-(line 387,col 62)",
            "(line 388,col 9)-(line 394,col 14)",
            "(line 396,col 9)-(line 396,col 37)",
            "(line 397,col 9)-(line 397,col 40)",
            "(line 398,col 9)-(line 398,col 39)",
            "(line 399,col 9)-(line 400,col 83)",
            "(line 401,col 9)-(line 402,col 49)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java",
        "signature": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.Anonymous-ba9f00ed-3784-4520-ba5c-99481f6c3966.value(double[])",
        "snippet": "                public double value(double[] parameters) {\n                    final double target = 1;\n                    final double error = target - parameters[0];\n                    return error * error;\n                }\n",
        "begin_line": 389,
        "end_line": 393,
        "comment": "",
        "child_ranges": [
            "(line 390,col 21)-(line 390,col 44)",
            "(line 391,col 21)-(line 391,col 64)",
            "(line 392,col 21)-(line 392,col 41)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java",
        "signature": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.testBoundaryRangeTooLarge()",
        "snippet": "    @Test(expected=NumberIsTooLargeException.class)\n    public void testBoundaryRangeTooLarge() {\n        final CMAESOptimizer optimizer = new CMAESOptimizer();\n        final MultivariateFunction fitnessFunction = new MultivariateFunction() {\n                public double value(double[] parameters) {\n                    if (Double.isNaN(parameters[0])) {\n                        throw new MathIllegalStateException();\n                    }\n                    final double target = 1;\n                    final double error = target - parameters[0];\n                    return error * error;\n                }\n            };\n\n        final double[] start = { 0 };\n\n        // The difference between upper and lower bounds is used to used\n        // normalize the variables: In case of overflow, NaN is produced.\n        final double max = Double.MAX_VALUE / 2;\n        final double tooLarge = FastMath.nextUp(max);\n        final double[] lower = { -tooLarge };\n        final double[] upper = { tooLarge };\n        final double[] result = optimizer.optimize(10000, fitnessFunction, GoalType.MINIMIZE,\n                                                   start, lower, upper).getPoint();\n    }\n",
        "begin_line": 408,
        "end_line": 432,
        "comment": "\n     * Cf. MATH-865\n     ",
        "child_ranges": [
            "(line 410,col 9)-(line 410,col 62)",
            "(line 411,col 9)-(line 420,col 14)",
            "(line 422,col 9)-(line 422,col 37)",
            "(line 426,col 9)-(line 426,col 48)",
            "(line 427,col 9)-(line 427,col 53)",
            "(line 428,col 9)-(line 428,col 45)",
            "(line 429,col 9)-(line 429,col 44)",
            "(line 430,col 9)-(line 431,col 83)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java",
        "signature": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.Anonymous-fd60cd1f-8a36-422b-a9c7-266db4ecdbbe.value(double[])",
        "snippet": "                public double value(double[] parameters) {\n                    if (Double.isNaN(parameters[0])) {\n                        throw new MathIllegalStateException();\n                    }\n                    final double target = 1;\n                    final double error = target - parameters[0];\n                    return error * error;\n                }\n",
        "begin_line": 412,
        "end_line": 419,
        "comment": "",
        "child_ranges": [
            "(line 413,col 21)-(line 415,col 21)",
            "(line 416,col 21)-(line 416,col 44)",
            "(line 417,col 21)-(line 417,col 64)",
            "(line 418,col 21)-(line 418,col 41)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java",
        "signature": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.doTest(org.apache.commons.math3.analysis.MultivariateFunction, double[], double[], double[][], org.apache.commons.math3.optimization.GoalType, int, boolean, int, double, double, double, int, org.apache.commons.math3.optimization.PointValuePair)",
        "snippet": "    private void doTest(MultivariateFunction func,\n            double[] startPoint,\n            double[] inSigma,\n            double[][] boundaries,\n            GoalType goal,\n            int lambda,\n            boolean isActive,\n            int diagonalOnly, \n            double stopValue,\n            double fTol,\n            double pointTol,\n            int maxEvaluations,\n            PointValuePair expected) {\n        int dim = startPoint.length;\n        // test diagonalOnly = 0 - slow but normally fewer feval#\n        CMAESOptimizer optim = new CMAESOptimizer( lambda, inSigma, 30000,\n                                                   stopValue, isActive, diagonalOnly,\n                                                   0, new MersenneTwister(), false);\n        final double[] lB = boundaries == null ? null : boundaries[0];\n        final double[] uB = boundaries == null ? null : boundaries[1];\n        PointValuePair result = optim.optimize(maxEvaluations, func, goal, startPoint, lB, uB);\n        Assert.assertEquals(expected.getValue(),\n                result.getValue(), fTol);\n        for (int i = 0; i < dim; i++) {\n            Assert.assertEquals(expected.getPoint()[i],\n                    result.getPoint()[i], pointTol);\n        }\n    }\n",
        "begin_line": 449,
        "end_line": 476,
        "comment": "\n     * @param func Function to optimize.\n     * @param startPoint Starting point.\n     * @param inSigma Individual input sigma.\n     * @param boundaries Upper / lower point limit.\n     * @param goal Minimization or maximization.\n     * @param lambda Population size used for offspring.\n     * @param isActive Covariance update mechanism.\n     * @param diagonalOnly Simplified covariance update.\n     * @param stopValue Termination criteria for optimization.\n     * @param fTol Tolerance relative error on the objective function.\n     * @param pointTol Tolerance for checking that the optimum is correct.\n     * @param maxEvaluations Maximum number of evaluations.\n     * @param expected Expected point / value.\n     ",
        "child_ranges": [
            "(line 462,col 9)-(line 462,col 36)",
            "(line 464,col 9)-(line 466,col 84)",
            "(line 467,col 9)-(line 467,col 70)",
            "(line 468,col 9)-(line 468,col 70)",
            "(line 469,col 9)-(line 469,col 95)",
            "(line 470,col 9)-(line 471,col 41)",
            "(line 472,col 9)-(line 475,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java",
        "signature": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.point(int, double)",
        "snippet": "    private static double[] point(int n, double value) {\n        double[] ds = new double[n];\n        Arrays.fill(ds, value);\n        return ds;\n    }\n",
        "begin_line": 478,
        "end_line": 482,
        "comment": "",
        "child_ranges": [
            "(line 479,col 9)-(line 479,col 36)",
            "(line 480,col 9)-(line 480,col 31)",
            "(line 481,col 9)-(line 481,col 18)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java",
        "signature": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.boundaries(int, double, double)",
        "snippet": "    private static double[][] boundaries(int dim,\n            double lower, double upper) {\n        double[][] boundaries = new double[2][dim];\n        for (int i = 0; i < dim; i++)\n            boundaries[0][i] = lower;\n        for (int i = 0; i < dim; i++)\n            boundaries[1][i] = upper;\n        return boundaries;\n    }\n",
        "begin_line": 484,
        "end_line": 492,
        "comment": "",
        "child_ranges": [
            "(line 486,col 9)-(line 486,col 51)",
            "(line 487,col 9)-(line 488,col 37)",
            "(line 489,col 9)-(line 490,col 37)",
            "(line 491,col 9)-(line 491,col 26)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java",
        "signature": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.Sphere.value(double[])",
        "snippet": "        public double value(double[] x) {\n            double f = 0;\n            for (int i = 0; i < x.length; ++i)\n                f += x[i] * x[i];\n            return f;\n        }\n",
        "begin_line": 496,
        "end_line": 501,
        "comment": "",
        "child_ranges": [
            "(line 497,col 13)-(line 497,col 25)",
            "(line 498,col 13)-(line 499,col 33)",
            "(line 500,col 13)-(line 500,col 21)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java",
        "signature": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.Cigar.Cigar()",
        "snippet": "        Cigar() {\n            this(1e3);\n        }\n",
        "begin_line": 507,
        "end_line": 509,
        "comment": "",
        "child_ranges": [
            "(line 508,col 13)-(line 508,col 22)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java",
        "signature": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.Cigar.Cigar(double)",
        "snippet": "        Cigar(double axisratio) {\n            factor = axisratio * axisratio;\n        }\n",
        "begin_line": 511,
        "end_line": 513,
        "comment": "",
        "child_ranges": [
            "(line 512,col 13)-(line 512,col 43)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java",
        "signature": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.Cigar.value(double[])",
        "snippet": "        public double value(double[] x) {\n            double f = x[0] * x[0];\n            for (int i = 1; i < x.length; ++i)\n                f += factor * x[i] * x[i];\n            return f;\n        }\n",
        "begin_line": 515,
        "end_line": 520,
        "comment": "",
        "child_ranges": [
            "(line 516,col 13)-(line 516,col 35)",
            "(line 517,col 13)-(line 518,col 42)",
            "(line 519,col 13)-(line 519,col 21)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java",
        "signature": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.Tablet.Tablet()",
        "snippet": "        Tablet() {\n            this(1e3);\n        }\n",
        "begin_line": 526,
        "end_line": 528,
        "comment": "",
        "child_ranges": [
            "(line 527,col 13)-(line 527,col 22)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java",
        "signature": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.Tablet.Tablet(double)",
        "snippet": "        Tablet(double axisratio) {\n            factor = axisratio * axisratio;\n        }\n",
        "begin_line": 530,
        "end_line": 532,
        "comment": "",
        "child_ranges": [
            "(line 531,col 13)-(line 531,col 43)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java",
        "signature": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.Tablet.value(double[])",
        "snippet": "        public double value(double[] x) {\n            double f = factor * x[0] * x[0];\n            for (int i = 1; i < x.length; ++i)\n                f += x[i] * x[i];\n            return f;\n        }\n",
        "begin_line": 534,
        "end_line": 539,
        "comment": "",
        "child_ranges": [
            "(line 535,col 13)-(line 535,col 44)",
            "(line 536,col 13)-(line 537,col 33)",
            "(line 538,col 13)-(line 538,col 21)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java",
        "signature": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.CigTab.CigTab()",
        "snippet": "        CigTab() {\n            this(1e4);\n        }\n",
        "begin_line": 545,
        "end_line": 547,
        "comment": "",
        "child_ranges": [
            "(line 546,col 13)-(line 546,col 22)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java",
        "signature": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.CigTab.CigTab(double)",
        "snippet": "        CigTab(double axisratio) {\n            factor = axisratio;\n        }\n",
        "begin_line": 549,
        "end_line": 551,
        "comment": "",
        "child_ranges": [
            "(line 550,col 13)-(line 550,col 31)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java",
        "signature": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.CigTab.value(double[])",
        "snippet": "        public double value(double[] x) {\n            int end = x.length - 1;\n            double f = x[0] * x[0] / factor + factor * x[end] * x[end];\n            for (int i = 1; i < end; ++i)\n                f += x[i] * x[i];\n            return f;\n        }\n",
        "begin_line": 553,
        "end_line": 559,
        "comment": "",
        "child_ranges": [
            "(line 554,col 13)-(line 554,col 35)",
            "(line 555,col 13)-(line 555,col 71)",
            "(line 556,col 13)-(line 557,col 33)",
            "(line 558,col 13)-(line 558,col 21)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java",
        "signature": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.TwoAxes.TwoAxes()",
        "snippet": "        TwoAxes() {\n            this(1e6);\n        }\n",
        "begin_line": 566,
        "end_line": 568,
        "comment": "",
        "child_ranges": [
            "(line 567,col 13)-(line 567,col 22)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java",
        "signature": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.TwoAxes.TwoAxes(double)",
        "snippet": "        TwoAxes(double axisratio) {\n            factor = axisratio * axisratio;\n        }\n",
        "begin_line": 570,
        "end_line": 572,
        "comment": "",
        "child_ranges": [
            "(line 571,col 13)-(line 571,col 43)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java",
        "signature": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.TwoAxes.value(double[])",
        "snippet": "        public double value(double[] x) {\n            double f = 0;\n            for (int i = 0; i < x.length; ++i)\n                f += (i < x.length / 2 ? factor : 1) * x[i] * x[i];\n            return f;\n        }\n",
        "begin_line": 574,
        "end_line": 579,
        "comment": "",
        "child_ranges": [
            "(line 575,col 13)-(line 575,col 25)",
            "(line 576,col 13)-(line 577,col 67)",
            "(line 578,col 13)-(line 578,col 21)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java",
        "signature": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.ElliRotated.ElliRotated()",
        "snippet": "        ElliRotated() {\n            this(1e3);\n        }\n",
        "begin_line": 586,
        "end_line": 588,
        "comment": "",
        "child_ranges": [
            "(line 587,col 13)-(line 587,col 22)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java",
        "signature": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.ElliRotated.ElliRotated(double)",
        "snippet": "        ElliRotated(double axisratio) {\n            factor = axisratio * axisratio;\n        }\n",
        "begin_line": 590,
        "end_line": 592,
        "comment": "",
        "child_ranges": [
            "(line 591,col 13)-(line 591,col 43)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java",
        "signature": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.ElliRotated.value(double[])",
        "snippet": "        public double value(double[] x) {\n            double f = 0;\n            x = B.Rotate(x);\n            for (int i = 0; i < x.length; ++i)\n                f += Math.pow(factor, i / (x.length - 1.)) * x[i] * x[i];\n            return f;\n        }\n",
        "begin_line": 594,
        "end_line": 600,
        "comment": "",
        "child_ranges": [
            "(line 595,col 13)-(line 595,col 25)",
            "(line 596,col 13)-(line 596,col 28)",
            "(line 597,col 13)-(line 598,col 73)",
            "(line 599,col 13)-(line 599,col 21)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java",
        "signature": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.Elli.Elli()",
        "snippet": "        Elli() {\n            this(1e3);\n        }\n",
        "begin_line": 607,
        "end_line": 609,
        "comment": "",
        "child_ranges": [
            "(line 608,col 13)-(line 608,col 22)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java",
        "signature": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.Elli.Elli(double)",
        "snippet": "        Elli(double axisratio) {\n            factor = axisratio * axisratio;\n        }\n",
        "begin_line": 611,
        "end_line": 613,
        "comment": "",
        "child_ranges": [
            "(line 612,col 13)-(line 612,col 43)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java",
        "signature": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.Elli.value(double[])",
        "snippet": "        public double value(double[] x) {\n            double f = 0;\n            for (int i = 0; i < x.length; ++i)\n                f += Math.pow(factor, i / (x.length - 1.)) * x[i] * x[i];\n            return f;\n        }\n",
        "begin_line": 615,
        "end_line": 620,
        "comment": "",
        "child_ranges": [
            "(line 616,col 13)-(line 616,col 25)",
            "(line 617,col 13)-(line 618,col 73)",
            "(line 619,col 13)-(line 619,col 21)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java",
        "signature": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.MinusElli.value(double[])",
        "snippet": "        public double value(double[] x) {\n            return 1.0-(new Elli().value(x));\n        }\n",
        "begin_line": 625,
        "end_line": 627,
        "comment": "",
        "child_ranges": [
            "(line 626,col 13)-(line 626,col 45)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java",
        "signature": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.DiffPow.value(double[])",
        "snippet": "        public double value(double[] x) {\n            double f = 0;\n            for (int i = 0; i < x.length; ++i)\n                f += Math.pow(Math.abs(x[i]), 2. + 10 * (double) i\n                        / (x.length - 1.));\n            return f;\n        }\n",
        "begin_line": 632,
        "end_line": 638,
        "comment": "",
        "child_ranges": [
            "(line 633,col 13)-(line 633,col 25)",
            "(line 634,col 13)-(line 636,col 43)",
            "(line 637,col 13)-(line 637,col 21)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java",
        "signature": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.SsDiffPow.value(double[])",
        "snippet": "        public double value(double[] x) {\n            double f = Math.pow(new DiffPow().value(x), 0.25);\n            return f;\n        }\n",
        "begin_line": 643,
        "end_line": 646,
        "comment": "",
        "child_ranges": [
            "(line 644,col 13)-(line 644,col 62)",
            "(line 645,col 13)-(line 645,col 21)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java",
        "signature": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.Rosen.value(double[])",
        "snippet": "        public double value(double[] x) {\n            double f = 0;\n            for (int i = 0; i < x.length - 1; ++i)\n                f += 1e2 * (x[i] * x[i] - x[i + 1]) * (x[i] * x[i] - x[i + 1])\n                + (x[i] - 1.) * (x[i] - 1.);\n            return f;\n        }\n",
        "begin_line": 651,
        "end_line": 657,
        "comment": "",
        "child_ranges": [
            "(line 652,col 13)-(line 652,col 25)",
            "(line 653,col 13)-(line 655,col 44)",
            "(line 656,col 13)-(line 656,col 21)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java",
        "signature": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.Ackley.Ackley(double)",
        "snippet": "        Ackley(double axra) {\n            axisratio = axra;\n        }\n",
        "begin_line": 663,
        "end_line": 665,
        "comment": "",
        "child_ranges": [
            "(line 664,col 13)-(line 664,col 29)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java",
        "signature": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.Ackley.Ackley()",
        "snippet": "        public Ackley() {\n            this(1);\n        }\n",
        "begin_line": 667,
        "end_line": 669,
        "comment": "",
        "child_ranges": [
            "(line 668,col 13)-(line 668,col 20)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java",
        "signature": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.Ackley.value(double[])",
        "snippet": "        public double value(double[] x) {\n            double f = 0;\n            double res2 = 0;\n            double fac = 0;\n            for (int i = 0; i < x.length; ++i) {\n                fac = Math.pow(axisratio, (i - 1.) / (x.length - 1.));\n                f += fac * fac * x[i] * x[i];\n                res2 += Math.cos(2. * Math.PI * fac * x[i]);\n            }\n            f = (20. - 20. * Math.exp(-0.2 * Math.sqrt(f / x.length))\n                    + Math.exp(1.) - Math.exp(res2 / x.length));\n            return f;\n        }\n",
        "begin_line": 671,
        "end_line": 683,
        "comment": "",
        "child_ranges": [
            "(line 672,col 13)-(line 672,col 25)",
            "(line 673,col 13)-(line 673,col 28)",
            "(line 674,col 13)-(line 674,col 27)",
            "(line 675,col 13)-(line 679,col 13)",
            "(line 680,col 13)-(line 681,col 64)",
            "(line 682,col 13)-(line 682,col 21)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java",
        "signature": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.Rastrigin.Rastrigin()",
        "snippet": "        Rastrigin() {\n            this(1, 10);\n        }\n",
        "begin_line": 691,
        "end_line": 693,
        "comment": "",
        "child_ranges": [
            "(line 692,col 13)-(line 692,col 24)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java",
        "signature": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.Rastrigin.Rastrigin(double, double)",
        "snippet": "        Rastrigin(double axisratio, double amplitude) {\n            this.axisratio = axisratio;\n            this.amplitude = amplitude;\n        }\n",
        "begin_line": 695,
        "end_line": 698,
        "comment": "",
        "child_ranges": [
            "(line 696,col 13)-(line 696,col 39)",
            "(line 697,col 13)-(line 697,col 39)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java",
        "signature": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.Rastrigin.value(double[])",
        "snippet": "        public double value(double[] x) {\n            double f = 0;\n            double fac;\n            for (int i = 0; i < x.length; ++i) {\n                fac = Math.pow(axisratio, (i - 1.) / (x.length - 1.));\n                if (i == 0 && x[i] < 0)\n                    fac *= 1.;\n                f += fac * fac * x[i] * x[i] + amplitude\n                * (1. - Math.cos(2. * Math.PI * fac * x[i]));\n            }\n            return f;\n        }\n",
        "begin_line": 700,
        "end_line": 711,
        "comment": "",
        "child_ranges": [
            "(line 701,col 13)-(line 701,col 25)",
            "(line 702,col 13)-(line 702,col 23)",
            "(line 703,col 13)-(line 709,col 13)",
            "(line 710,col 13)-(line 710,col 21)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java",
        "signature": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.Basis.Rotate(double[])",
        "snippet": "        double[] Rotate(double[] x) {\n            GenBasis(x.length);\n            double[] y = new double[x.length];\n            for (int i = 0; i < x.length; ++i) {\n                y[i] = 0;\n                for (int j = 0; j < x.length; ++j)\n                    y[i] += basis[i][j] * x[j];\n            }\n            return y;\n        }\n",
        "begin_line": 718,
        "end_line": 727,
        "comment": "",
        "child_ranges": [
            "(line 719,col 13)-(line 719,col 31)",
            "(line 720,col 13)-(line 720,col 46)",
            "(line 721,col 13)-(line 725,col 13)",
            "(line 726,col 13)-(line 726,col 21)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java",
        "signature": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.Basis.GenBasis(int)",
        "snippet": "        void GenBasis(int DIM) {\n            if (basis != null ? basis.length == DIM : false)\n                return;\n\n            double sp;\n            int i, j, k;\n\n            /* generate orthogonal basis */\n            basis = new double[DIM][DIM];\n            for (i = 0; i < DIM; ++i) {\n                /* sample components gaussian */\n                for (j = 0; j < DIM; ++j)\n                    basis[i][j] = rand.nextGaussian();\n                /* substract projection of previous vectors */\n                for (j = i - 1; j >= 0; --j) {\n                    for (sp = 0., k = 0; k < DIM; ++k)\n                        sp += basis[i][k] * basis[j][k]; /* scalar product */\n                    for (k = 0; k < DIM; ++k)\n                        basis[i][k] -= sp * basis[j][k]; /* substract */\n                }\n                /* normalize */\n                for (sp = 0., k = 0; k < DIM; ++k)\n                    sp += basis[i][k] * basis[i][k]; /* squared norm */\n                for (k = 0; k < DIM; ++k)\n                    basis[i][k] /= Math.sqrt(sp);\n            }\n        }\n",
        "begin_line": 729,
        "end_line": 755,
        "comment": "",
        "child_ranges": [
            "(line 730,col 13)-(line 731,col 23)",
            "(line 733,col 13)-(line 733,col 22)",
            "(line 734,col 13)-(line 734,col 24)",
            "(line 737,col 13)-(line 737,col 41)",
            "(line 738,col 13)-(line 754,col 13)"
        ]
    }
]