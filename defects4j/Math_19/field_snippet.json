[
    {
        "class_name": "org.apache.commons.math3.util.FastMath",
        "src_path": "src/main/java/org/apache/commons/math3/util/FastMath.java",
        "signature": "org.apache.commons.math3.util.FastMath.PI",
        "snippet": "    public static final double PI = 105414357.0 / 33554432.0 + 1.984187159361080883e-9;",
        "begin_line": 83,
        "end_line": 83,
        "comment": " Archimede's constant PI, ratio of circle circumference to diameter. "
    },
    {
        "class_name": "org.apache.commons.math3.util.FastMath",
        "src_path": "src/main/java/org/apache/commons/math3/util/FastMath.java",
        "signature": "org.apache.commons.math3.util.FastMath.E",
        "snippet": "    public static final double E = 2850325.0 / 1048576.0 + 8.254840070411028747e-8;",
        "begin_line": 86,
        "end_line": 86,
        "comment": " Napier's constant e, base of the natural logarithm. "
    },
    {
        "class_name": "org.apache.commons.math3.util.FastMath",
        "src_path": "src/main/java/org/apache/commons/math3/util/FastMath.java",
        "signature": "org.apache.commons.math3.util.FastMath.EXP_INT_TABLE_MAX_INDEX",
        "snippet": "    static final int EXP_INT_TABLE_MAX_INDEX = 750;",
        "begin_line": 89,
        "end_line": 89,
        "comment": " Index of exp(0) in the array of integer exponentials. "
    },
    {
        "class_name": "org.apache.commons.math3.util.FastMath",
        "src_path": "src/main/java/org/apache/commons/math3/util/FastMath.java",
        "signature": "org.apache.commons.math3.util.FastMath.EXP_INT_TABLE_LEN",
        "snippet": "    static final int EXP_INT_TABLE_LEN = EXP_INT_TABLE_MAX_INDEX * 2;",
        "begin_line": 91,
        "end_line": 91,
        "comment": " Length of the array of integer exponentials. "
    },
    {
        "class_name": "org.apache.commons.math3.util.FastMath",
        "src_path": "src/main/java/org/apache/commons/math3/util/FastMath.java",
        "signature": "org.apache.commons.math3.util.FastMath.LN_MANT_LEN",
        "snippet": "    static final int LN_MANT_LEN = 1024;",
        "begin_line": 93,
        "end_line": 93,
        "comment": " Logarithm table length. "
    },
    {
        "class_name": "org.apache.commons.math3.util.FastMath",
        "src_path": "src/main/java/org/apache/commons/math3/util/FastMath.java",
        "signature": "org.apache.commons.math3.util.FastMath.EXP_FRAC_TABLE_LEN",
        "snippet": "    static final int EXP_FRAC_TABLE_LEN = 1025; // 0, 1/1024, ... 1024/1024",
        "begin_line": 95,
        "end_line": 95,
        "comment": " 0, 1/1024, ... 1024/1024"
    },
    {
        "class_name": "org.apache.commons.math3.util.FastMath",
        "src_path": "src/main/java/org/apache/commons/math3/util/FastMath.java",
        "signature": "org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME",
        "snippet": "    private static final boolean RECOMPUTE_TABLES_AT_RUNTIME = false;",
        "begin_line": 104,
        "end_line": 104,
        "comment": " Indicator for tables initialization.\n     * <p>\n     * This compile-time constant should be set to true only if one explicitly\n     * wants to compute the tables at class loading time instead of using the\n     * already computed ones provided as literal arrays below.\n     * </p>\n     "
    },
    {
        "class_name": "org.apache.commons.math3.util.FastMath",
        "src_path": "src/main/java/org/apache/commons/math3/util/FastMath.java",
        "signature": "org.apache.commons.math3.util.FastMath.LN_2_A",
        "snippet": "    private static final double LN_2_A = 0.693147063255310059;",
        "begin_line": 107,
        "end_line": 107,
        "comment": " log(2) (high bits). "
    },
    {
        "class_name": "org.apache.commons.math3.util.FastMath",
        "src_path": "src/main/java/org/apache/commons/math3/util/FastMath.java",
        "signature": "org.apache.commons.math3.util.FastMath.LN_2_B",
        "snippet": "    private static final double LN_2_B = 1.17304635250823482e-7;",
        "begin_line": 110,
        "end_line": 110,
        "comment": " log(2) (low bits). "
    },
    {
        "class_name": "org.apache.commons.math3.util.FastMath",
        "src_path": "src/main/java/org/apache/commons/math3/util/FastMath.java",
        "signature": "org.apache.commons.math3.util.FastMath.LN_QUICK_COEF",
        "snippet": "    private static final double LN_QUICK_COEF[][] = {\n        {1.0, 5.669184079525E-24},\n        {-0.25, -0.25},\n        {0.3333333134651184, 1.986821492305628E-8},\n        {-0.25, -6.663542893624021E-14},\n        {0.19999998807907104, 1.1921056801463227E-8},\n        {-0.1666666567325592, -7.800414592973399E-9},\n        {0.1428571343421936, 5.650007086920087E-9},\n        {-0.12502530217170715, -7.44321345601866E-11},\n        {0.11113807559013367, 9.219544613762692E-9},\n    };",
        "begin_line": 113,
        "end_line": 123,
        "comment": " Coefficients for log, when input 0.99 < x < 1.01. "
    },
    {
        "class_name": "org.apache.commons.math3.util.FastMath",
        "src_path": "src/main/java/org/apache/commons/math3/util/FastMath.java",
        "signature": "org.apache.commons.math3.util.FastMath.LN_HI_PREC_COEF",
        "snippet": "    private static final double LN_HI_PREC_COEF[][] = {\n        {1.0, -6.032174644509064E-23},\n        {-0.25, -0.25},\n        {0.3333333134651184, 1.9868161777724352E-8},\n        {-0.2499999701976776, -2.957007209750105E-8},\n        {0.19999954104423523, 1.5830993332061267E-10},\n        {-0.16624879837036133, -2.6033824355191673E-8}\n    };",
        "begin_line": 126,
        "end_line": 133,
        "comment": " Coefficients for log in the range of 1.0 < x < 1.0 + 2^-10. "
    },
    {
        "class_name": "org.apache.commons.math3.util.FastMath",
        "src_path": "src/main/java/org/apache/commons/math3/util/FastMath.java",
        "signature": "org.apache.commons.math3.util.FastMath.SINE_TABLE_LEN",
        "snippet": "    private static final int SINE_TABLE_LEN = 14;",
        "begin_line": 136,
        "end_line": 136,
        "comment": " Sine, Cosine, Tangent tables are for 0, 1/8, 2/8, ... 13/8 = PI/2 approx. "
    },
    {
        "class_name": "org.apache.commons.math3.util.FastMath",
        "src_path": "src/main/java/org/apache/commons/math3/util/FastMath.java",
        "signature": "org.apache.commons.math3.util.FastMath.SINE_TABLE_A",
        "snippet": "    private static final double SINE_TABLE_A[] =\n        {\n        +0.0d,\n        +0.1246747374534607d,\n        +0.24740394949913025d,\n        +0.366272509098053d,\n        +0.4794255495071411d,\n        +0.5850973129272461d,\n        +0.6816387176513672d,\n        +0.7675435543060303d,\n        +0.8414709568023682d,\n        +0.902267575263977d,\n        +0.9489846229553223d,\n        +0.9808930158615112d,\n        +0.9974949359893799d,\n        +0.9985313415527344d,\n    };",
        "begin_line": 139,
        "end_line": 155,
        "comment": " Sine table (high bits). "
    },
    {
        "class_name": "org.apache.commons.math3.util.FastMath",
        "src_path": "src/main/java/org/apache/commons/math3/util/FastMath.java",
        "signature": "org.apache.commons.math3.util.FastMath.SINE_TABLE_B",
        "snippet": "    private static final double SINE_TABLE_B[] =\n        {\n        +0.0d,\n        -4.068233003401932E-9d,\n        +9.755392680573412E-9d,\n        +1.9987994582857286E-8d,\n        -1.0902938113007961E-8d,\n        -3.9986783938944604E-8d,\n        +4.23719669792332E-8d,\n        -5.207000323380292E-8d,\n        +2.800552834259E-8d,\n        +1.883511811213715E-8d,\n        -3.5997360512765566E-9d,\n        +4.116164446561962E-8d,\n        +5.0614674548127384E-8d,\n        -1.0129027912496858E-9d,\n    };",
        "begin_line": 158,
        "end_line": 174,
        "comment": " Sine table (low bits). "
    },
    {
        "class_name": "org.apache.commons.math3.util.FastMath",
        "src_path": "src/main/java/org/apache/commons/math3/util/FastMath.java",
        "signature": "org.apache.commons.math3.util.FastMath.COSINE_TABLE_A",
        "snippet": "    private static final double COSINE_TABLE_A[] =\n        {\n        +1.0d,\n        +0.9921976327896118d,\n        +0.9689123630523682d,\n        +0.9305076599121094d,\n        +0.8775825500488281d,\n        +0.8109631538391113d,\n        +0.7316888570785522d,\n        +0.6409968137741089d,\n        +0.5403022766113281d,\n        +0.4311765432357788d,\n        +0.3153223395347595d,\n        +0.19454771280288696d,\n        +0.07073719799518585d,\n        -0.05417713522911072d,\n    };",
        "begin_line": 177,
        "end_line": 193,
        "comment": " Cosine table (high bits). "
    },
    {
        "class_name": "org.apache.commons.math3.util.FastMath",
        "src_path": "src/main/java/org/apache/commons/math3/util/FastMath.java",
        "signature": "org.apache.commons.math3.util.FastMath.COSINE_TABLE_B",
        "snippet": "    private static final double COSINE_TABLE_B[] =\n        {\n        +0.0d,\n        +3.4439717236742845E-8d,\n        +5.865827662008209E-8d,\n        -3.7999795083850525E-8d,\n        +1.184154459111628E-8d,\n        -3.43338934259355E-8d,\n        +1.1795268640216787E-8d,\n        +4.438921624363781E-8d,\n        +2.925681159240093E-8d,\n        -2.6437112632041807E-8d,\n        +2.2860509143963117E-8d,\n        -4.813899778443457E-9d,\n        +3.6725170580355583E-9d,\n        +2.0217439756338078E-10d,\n    };",
        "begin_line": 196,
        "end_line": 212,
        "comment": " Cosine table (low bits). "
    },
    {
        "class_name": "org.apache.commons.math3.util.FastMath",
        "src_path": "src/main/java/org/apache/commons/math3/util/FastMath.java",
        "signature": "org.apache.commons.math3.util.FastMath.TANGENT_TABLE_A",
        "snippet": "    private static final double TANGENT_TABLE_A[] =\n        {\n        +0.0d,\n        +0.1256551444530487d,\n        +0.25534194707870483d,\n        +0.3936265707015991d,\n        +0.5463024377822876d,\n        +0.7214844226837158d,\n        +0.9315965175628662d,\n        +1.1974215507507324d,\n        +1.5574076175689697d,\n        +2.092571258544922d,\n        +3.0095696449279785d,\n        +5.041914939880371d,\n        +14.101419448852539d,\n        -18.430862426757812d,\n    };",
        "begin_line": 216,
        "end_line": 232,
        "comment": " Tangent table, used by atan() (high bits). "
    },
    {
        "class_name": "org.apache.commons.math3.util.FastMath",
        "src_path": "src/main/java/org/apache/commons/math3/util/FastMath.java",
        "signature": "org.apache.commons.math3.util.FastMath.TANGENT_TABLE_B",
        "snippet": "    private static final double TANGENT_TABLE_B[] =\n        {\n        +0.0d,\n        -7.877917738262007E-9d,\n        -2.5857668567479893E-8d,\n        +5.2240336371356666E-9d,\n        +5.206150291559893E-8d,\n        +1.8307188599677033E-8d,\n        -5.7618793749770706E-8d,\n        +7.848361555046424E-8d,\n        +1.0708593250394448E-7d,\n        +1.7827257129423813E-8d,\n        +2.893485277253286E-8d,\n        +3.1660099222737955E-7d,\n        +4.983191803254889E-7d,\n        -3.356118100840571E-7d,\n    };",
        "begin_line": 235,
        "end_line": 251,
        "comment": " Tangent table, used by atan() (low bits). "
    },
    {
        "class_name": "org.apache.commons.math3.util.FastMath",
        "src_path": "src/main/java/org/apache/commons/math3/util/FastMath.java",
        "signature": "org.apache.commons.math3.util.FastMath.RECIP_2PI",
        "snippet": "    private static final long RECIP_2PI[] = new long[] {\n        (0x28be60dbL << 32) | 0x9391054aL,\n        (0x7f09d5f4L << 32) | 0x7d4d3770L,\n        (0x36d8a566L << 32) | 0x4f10e410L,\n        (0x7f9458eaL << 32) | 0xf7aef158L,\n        (0x6dc91b8eL << 32) | 0x909374b8L,\n        (0x01924bbaL << 32) | 0x82746487L,\n        (0x3f877ac7L << 32) | 0x2c4a69cfL,\n        (0xba208d7dL << 32) | 0x4baed121L,\n        (0x3a671c09L << 32) | 0xad17df90L,\n        (0x4e64758eL << 32) | 0x60d4ce7dL,\n        (0x272117e2L << 32) | 0xef7e4a0eL,\n        (0xc7fe25ffL << 32) | 0xf7816603L,\n        (0xfbcbc462L << 32) | 0xd6829b47L,\n        (0xdb4d9fb3L << 32) | 0xc9f2c26dL,\n        (0xd3d18fd9L << 32) | 0xa797fa8bL,\n        (0x5d49eeb1L << 32) | 0xfaf97c5eL,\n        (0xcf41ce7dL << 32) | 0xe294a4baL,\n         0x9afed7ecL << 32  };",
        "begin_line": 254,
        "end_line": 272,
        "comment": " Bits of 1/(2*pi), need for reducePayneHanek(). "
    },
    {
        "class_name": "org.apache.commons.math3.util.FastMath",
        "src_path": "src/main/java/org/apache/commons/math3/util/FastMath.java",
        "signature": "org.apache.commons.math3.util.FastMath.PI_O_4_BITS",
        "snippet": "    private static final long PI_O_4_BITS[] = new long[] {\n        (0xc90fdaa2L << 32) | 0x2168c234L,\n        (0xc4c6628bL << 32) | 0x80dc1cd1L };",
        "begin_line": 275,
        "end_line": 277,
        "comment": " Bits of pi/4, need for reducePayneHanek(). "
    },
    {
        "class_name": "org.apache.commons.math3.util.FastMath",
        "src_path": "src/main/java/org/apache/commons/math3/util/FastMath.java",
        "signature": "org.apache.commons.math3.util.FastMath.EIGHTHS",
        "snippet": "    private static final double EIGHTHS[] = {0, 0.125, 0.25, 0.375, 0.5, 0.625, 0.75, 0.875, 1.0, 1.125, 1.25, 1.375, 1.5, 1.625};",
        "begin_line": 283,
        "end_line": 283,
        "comment": " Eighths.\n     * This is used by sinQ, because its faster to do a table lookup than\n     * a multiply in this time-critical routine\n     "
    },
    {
        "class_name": "org.apache.commons.math3.util.FastMath",
        "src_path": "src/main/java/org/apache/commons/math3/util/FastMath.java",
        "signature": "org.apache.commons.math3.util.FastMath.CBRTTWO",
        "snippet": "    private static final double CBRTTWO[] = { 0.6299605249474366,\n                                            0.7937005259840998,\n                                            1.0,\n                                            1.2599210498948732,\n                                            1.5874010519681994 };",
        "begin_line": 286,
        "end_line": 290,
        "comment": " Table of 2^((n+2)/3) "
    },
    {
        "class_name": "org.apache.commons.math3.util.FastMath",
        "src_path": "src/main/java/org/apache/commons/math3/util/FastMath.java",
        "signature": "org.apache.commons.math3.util.FastMath.HEX_40000000",
        "snippet": "    private static final long HEX_40000000 = 0x40000000L; // 1073741824L",
        "begin_line": 303,
        "end_line": 303,
        "comment": " 1073741824L"
    },
    {
        "class_name": "org.apache.commons.math3.util.FastMath",
        "src_path": "src/main/java/org/apache/commons/math3/util/FastMath.java",
        "signature": "org.apache.commons.math3.util.FastMath.MASK_30BITS",
        "snippet": "    private static final long MASK_30BITS = -1L - (HEX_40000000 -1); // 0xFFFFFFFFC0000000L;",
        "begin_line": 306,
        "end_line": 306,
        "comment": " 0xFFFFFFFFC0000000L;"
    },
    {
        "class_name": "org.apache.commons.math3.util.FastMath",
        "src_path": "src/main/java/org/apache/commons/math3/util/FastMath.java",
        "signature": "org.apache.commons.math3.util.FastMath.TWO_POWER_52",
        "snippet": "    private static final double TWO_POWER_52 = 4503599627370496.0;",
        "begin_line": 309,
        "end_line": 309,
        "comment": " 2^52 - double numbers this large must be integral (no fraction) or NaN or Infinite "
    },
    {
        "class_name": "org.apache.commons.math3.util.FastMath",
        "src_path": "src/main/java/org/apache/commons/math3/util/FastMath.java",
        "signature": "org.apache.commons.math3.util.FastMath.F_1_3",
        "snippet": "    private static final double F_1_3 = 1d / 3d;",
        "begin_line": 312,
        "end_line": 312,
        "comment": " Constant: {@value}. "
    },
    {
        "class_name": "org.apache.commons.math3.util.FastMath",
        "src_path": "src/main/java/org/apache/commons/math3/util/FastMath.java",
        "signature": "org.apache.commons.math3.util.FastMath.F_1_5",
        "snippet": "    private static final double F_1_5 = 1d / 5d;",
        "begin_line": 314,
        "end_line": 314,
        "comment": " Constant: {@value}. "
    },
    {
        "class_name": "org.apache.commons.math3.util.FastMath",
        "src_path": "src/main/java/org/apache/commons/math3/util/FastMath.java",
        "signature": "org.apache.commons.math3.util.FastMath.F_1_7",
        "snippet": "    private static final double F_1_7 = 1d / 7d;",
        "begin_line": 316,
        "end_line": 316,
        "comment": " Constant: {@value}. "
    },
    {
        "class_name": "org.apache.commons.math3.util.FastMath",
        "src_path": "src/main/java/org/apache/commons/math3/util/FastMath.java",
        "signature": "org.apache.commons.math3.util.FastMath.F_1_9",
        "snippet": "    private static final double F_1_9 = 1d / 9d;",
        "begin_line": 318,
        "end_line": 318,
        "comment": " Constant: {@value}. "
    },
    {
        "class_name": "org.apache.commons.math3.util.FastMath",
        "src_path": "src/main/java/org/apache/commons/math3/util/FastMath.java",
        "signature": "org.apache.commons.math3.util.FastMath.F_1_11",
        "snippet": "    private static final double F_1_11 = 1d / 11d;",
        "begin_line": 320,
        "end_line": 320,
        "comment": " Constant: {@value}. "
    },
    {
        "class_name": "org.apache.commons.math3.util.FastMath",
        "src_path": "src/main/java/org/apache/commons/math3/util/FastMath.java",
        "signature": "org.apache.commons.math3.util.FastMath.F_1_13",
        "snippet": "    private static final double F_1_13 = 1d / 13d;",
        "begin_line": 322,
        "end_line": 322,
        "comment": " Constant: {@value}. "
    },
    {
        "class_name": "org.apache.commons.math3.util.FastMath",
        "src_path": "src/main/java/org/apache/commons/math3/util/FastMath.java",
        "signature": "org.apache.commons.math3.util.FastMath.F_1_15",
        "snippet": "    private static final double F_1_15 = 1d / 15d;",
        "begin_line": 324,
        "end_line": 324,
        "comment": " Constant: {@value}. "
    },
    {
        "class_name": "org.apache.commons.math3.util.FastMath",
        "src_path": "src/main/java/org/apache/commons/math3/util/FastMath.java",
        "signature": "org.apache.commons.math3.util.FastMath.F_1_17",
        "snippet": "    private static final double F_1_17 = 1d / 17d;",
        "begin_line": 326,
        "end_line": 326,
        "comment": " Constant: {@value}. "
    },
    {
        "class_name": "org.apache.commons.math3.util.FastMath",
        "src_path": "src/main/java/org/apache/commons/math3/util/FastMath.java",
        "signature": "org.apache.commons.math3.util.FastMath.F_3_4",
        "snippet": "    private static final double F_3_4 = 3d / 4d;",
        "begin_line": 328,
        "end_line": 328,
        "comment": " Constant: {@value}. "
    },
    {
        "class_name": "org.apache.commons.math3.util.FastMath",
        "src_path": "src/main/java/org/apache/commons/math3/util/FastMath.java",
        "signature": "org.apache.commons.math3.util.FastMath.F_15_16",
        "snippet": "    private static final double F_15_16 = 15d / 16d;",
        "begin_line": 330,
        "end_line": 330,
        "comment": " Constant: {@value}. "
    },
    {
        "class_name": "org.apache.commons.math3.util.FastMath",
        "src_path": "src/main/java/org/apache/commons/math3/util/FastMath.java",
        "signature": "org.apache.commons.math3.util.FastMath.F_13_14",
        "snippet": "    private static final double F_13_14 = 13d / 14d;",
        "begin_line": 332,
        "end_line": 332,
        "comment": " Constant: {@value}. "
    },
    {
        "class_name": "org.apache.commons.math3.util.FastMath",
        "src_path": "src/main/java/org/apache/commons/math3/util/FastMath.java",
        "signature": "org.apache.commons.math3.util.FastMath.F_11_12",
        "snippet": "    private static final double F_11_12 = 11d / 12d;",
        "begin_line": 334,
        "end_line": 334,
        "comment": " Constant: {@value}. "
    },
    {
        "class_name": "org.apache.commons.math3.util.FastMath",
        "src_path": "src/main/java/org/apache/commons/math3/util/FastMath.java",
        "signature": "org.apache.commons.math3.util.FastMath.F_9_10",
        "snippet": "    private static final double F_9_10 = 9d / 10d;",
        "begin_line": 336,
        "end_line": 336,
        "comment": " Constant: {@value}. "
    },
    {
        "class_name": "org.apache.commons.math3.util.FastMath",
        "src_path": "src/main/java/org/apache/commons/math3/util/FastMath.java",
        "signature": "org.apache.commons.math3.util.FastMath.F_7_8",
        "snippet": "    private static final double F_7_8 = 7d / 8d;",
        "begin_line": 338,
        "end_line": 338,
        "comment": " Constant: {@value}. "
    },
    {
        "class_name": "org.apache.commons.math3.util.FastMath",
        "src_path": "src/main/java/org/apache/commons/math3/util/FastMath.java",
        "signature": "org.apache.commons.math3.util.FastMath.F_5_6",
        "snippet": "    private static final double F_5_6 = 5d / 6d;",
        "begin_line": 340,
        "end_line": 340,
        "comment": " Constant: {@value}. "
    },
    {
        "class_name": "org.apache.commons.math3.util.FastMath",
        "src_path": "src/main/java/org/apache/commons/math3/util/FastMath.java",
        "signature": "org.apache.commons.math3.util.FastMath.F_1_2",
        "snippet": "    private static final double F_1_2 = 1d / 2d;",
        "begin_line": 342,
        "end_line": 342,
        "comment": " Constant: {@value}. "
    },
    {
        "class_name": "org.apache.commons.math3.util.FastMath",
        "src_path": "src/main/java/org/apache/commons/math3/util/FastMath.java",
        "signature": "org.apache.commons.math3.util.FastMath.F_1_4",
        "snippet": "    private static final double F_1_4 = 1d / 4d;",
        "begin_line": 344,
        "end_line": 344,
        "comment": " Constant: {@value}. "
    },
    {
        "class_name": "org.apache.commons.math3.util.ExpIntTable",
        "src_path": "src/main/java/org/apache/commons/math3/util/FastMath.java",
        "signature": "org.apache.commons.math3.util.ExpIntTable.EXP_INT_TABLE_A",
        "snippet": "        private static final double[] EXP_INT_TABLE_A;",
        "begin_line": 3684,
        "end_line": 3684,
        "comment": " Exponential evaluated at integer values,\n         * exp(x) =  expIntTableA[x + EXP_INT_TABLE_MAX_INDEX] + expIntTableB[x+EXP_INT_TABLE_MAX_INDEX].\n         "
    },
    {
        "class_name": "org.apache.commons.math3.util.ExpIntTable",
        "src_path": "src/main/java/org/apache/commons/math3/util/FastMath.java",
        "signature": "org.apache.commons.math3.util.ExpIntTable.EXP_INT_TABLE_B",
        "snippet": "        private static final double[] EXP_INT_TABLE_B;",
        "begin_line": 3688,
        "end_line": 3688,
        "comment": " Exponential evaluated at integer values,\n         * exp(x) =  expIntTableA[x + EXP_INT_TABLE_MAX_INDEX] + expIntTableB[x+EXP_INT_TABLE_MAX_INDEX]\n         "
    },
    {
        "class_name": "org.apache.commons.math3.util.ExpFracTable",
        "src_path": "src/main/java/org/apache/commons/math3/util/FastMath.java",
        "signature": "org.apache.commons.math3.util.ExpFracTable.EXP_FRAC_TABLE_A",
        "snippet": "        private static final double[] EXP_FRAC_TABLE_A;",
        "begin_line": 3724,
        "end_line": 3724,
        "comment": " Exponential over the range of 0 - 1 in increments of 2^-10\n         * exp(x/1024) =  expFracTableA[x] + expFracTableB[x].\n         * 1024 = 2^10\n         "
    },
    {
        "class_name": "org.apache.commons.math3.util.ExpFracTable",
        "src_path": "src/main/java/org/apache/commons/math3/util/FastMath.java",
        "signature": "org.apache.commons.math3.util.ExpFracTable.EXP_FRAC_TABLE_B",
        "snippet": "        private static final double[] EXP_FRAC_TABLE_B;",
        "begin_line": 3728,
        "end_line": 3728,
        "comment": " Exponential over the range of 0 - 1 in increments of 2^-10\n         * exp(x/1024) =  expFracTableA[x] + expFracTableB[x].\n         "
    },
    {
        "class_name": "org.apache.commons.math3.util.lnMant",
        "src_path": "src/main/java/org/apache/commons/math3/util/FastMath.java",
        "signature": "org.apache.commons.math3.util.lnMant.LN_MANT",
        "snippet": "        private static final double[][] LN_MANT;",
        "begin_line": 3754,
        "end_line": 3754,
        "comment": " Extended precision logarithm table over the range 1 - 2 in increments of 2^-10. "
    },
    {
        "class_name": "org.apache.commons.math3.util.CodyWaite",
        "src_path": "src/main/java/org/apache/commons/math3/util/FastMath.java",
        "signature": "org.apache.commons.math3.util.CodyWaite.finalK",
        "snippet": "        private final int finalK;",
        "begin_line": 3774,
        "end_line": 3774,
        "comment": " k "
    },
    {
        "class_name": "org.apache.commons.math3.util.CodyWaite",
        "src_path": "src/main/java/org/apache/commons/math3/util/FastMath.java",
        "signature": "org.apache.commons.math3.util.CodyWaite.finalRemA",
        "snippet": "        private final double finalRemA;",
        "begin_line": 3776,
        "end_line": 3776,
        "comment": " remA "
    },
    {
        "class_name": "org.apache.commons.math3.util.CodyWaite",
        "src_path": "src/main/java/org/apache/commons/math3/util/FastMath.java",
        "signature": "org.apache.commons.math3.util.CodyWaite.finalRemB",
        "snippet": "        private final double finalRemB;",
        "begin_line": 3778,
        "end_line": 3778,
        "comment": " remB "
    },
    {
        "class_name": "org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer",
        "src_path": "src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateOptimizer.java",
        "signature": "org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer.evaluations",
        "snippet": "    protected final Incrementor evaluations = new Incrementor();",
        "begin_line": 44,
        "end_line": 44,
        "comment": " Evaluations counter. "
    },
    {
        "class_name": "org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer",
        "src_path": "src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateOptimizer.java",
        "signature": "org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer.checker",
        "snippet": "    private ConvergenceChecker<PointValuePair> checker;",
        "begin_line": 46,
        "end_line": 46,
        "comment": " Convergence checker. "
    },
    {
        "class_name": "org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer",
        "src_path": "src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateOptimizer.java",
        "signature": "org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer.goal",
        "snippet": "    private GoalType goal;",
        "begin_line": 48,
        "end_line": 48,
        "comment": " Type of optimization. "
    },
    {
        "class_name": "org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer",
        "src_path": "src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateOptimizer.java",
        "signature": "org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer.start",
        "snippet": "    private double[] start;",
        "begin_line": 50,
        "end_line": 50,
        "comment": " Initial guess. "
    },
    {
        "class_name": "org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer",
        "src_path": "src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateOptimizer.java",
        "signature": "org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer.function",
        "snippet": "    private MultivariateFunction function;",
        "begin_line": 52,
        "end_line": 52,
        "comment": " Objective function. "
    },
    {
        "class_name": "org.apache.commons.math3.random.MersenneTwister",
        "src_path": "src/main/java/org/apache/commons/math3/random/MersenneTwister.java",
        "signature": "org.apache.commons.math3.random.MersenneTwister.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 8661194735290153518L;",
        "begin_line": 85,
        "end_line": 85,
        "comment": " Serializable version identifier. "
    },
    {
        "class_name": "org.apache.commons.math3.random.MersenneTwister",
        "src_path": "src/main/java/org/apache/commons/math3/random/MersenneTwister.java",
        "signature": "org.apache.commons.math3.random.MersenneTwister.N",
        "snippet": "    private static final int   N     = 624;",
        "begin_line": 88,
        "end_line": 88,
        "comment": " Size of the bytes pool. "
    },
    {
        "class_name": "org.apache.commons.math3.random.MersenneTwister",
        "src_path": "src/main/java/org/apache/commons/math3/random/MersenneTwister.java",
        "signature": "org.apache.commons.math3.random.MersenneTwister.M",
        "snippet": "    private static final int   M     = 397;",
        "begin_line": 91,
        "end_line": 91,
        "comment": " Period second parameter. "
    },
    {
        "class_name": "org.apache.commons.math3.random.MersenneTwister",
        "src_path": "src/main/java/org/apache/commons/math3/random/MersenneTwister.java",
        "signature": "org.apache.commons.math3.random.MersenneTwister.MAG01",
        "snippet": "    private static final int[] MAG01 = { 0x0, 0x9908b0df };",
        "begin_line": 94,
        "end_line": 94,
        "comment": " X * MATRIX_A for X = {0, 1}. "
    },
    {
        "class_name": "org.apache.commons.math3.random.MersenneTwister",
        "src_path": "src/main/java/org/apache/commons/math3/random/MersenneTwister.java",
        "signature": "org.apache.commons.math3.random.MersenneTwister.mt",
        "snippet": "    private int[] mt;",
        "begin_line": 97,
        "end_line": 97,
        "comment": " Bytes pool. "
    },
    {
        "class_name": "org.apache.commons.math3.random.MersenneTwister",
        "src_path": "src/main/java/org/apache/commons/math3/random/MersenneTwister.java",
        "signature": "org.apache.commons.math3.random.MersenneTwister.mti",
        "snippet": "    private int   mti;",
        "begin_line": 100,
        "end_line": 100,
        "comment": " Current index in the bytes pool. "
    },
    {
        "class_name": "org.apache.commons.math3.util.Incrementor",
        "src_path": "src/main/java/org/apache/commons/math3/util/Incrementor.java",
        "signature": "org.apache.commons.math3.util.Incrementor.maximalCount",
        "snippet": "    private int maximalCount;",
        "begin_line": 37,
        "end_line": 37,
        "comment": "\n     * Upper limit for the counter.\n     "
    },
    {
        "class_name": "org.apache.commons.math3.util.Incrementor",
        "src_path": "src/main/java/org/apache/commons/math3/util/Incrementor.java",
        "signature": "org.apache.commons.math3.util.Incrementor.count",
        "snippet": "    private int count = 0;",
        "begin_line": 41,
        "end_line": 41,
        "comment": "\n     * Current count.\n     "
    },
    {
        "class_name": "org.apache.commons.math3.util.Incrementor",
        "src_path": "src/main/java/org/apache/commons/math3/util/Incrementor.java",
        "signature": "org.apache.commons.math3.util.Incrementor.maxCountCallback",
        "snippet": "    private final MaxCountExceededCallback maxCountCallback;",
        "begin_line": 45,
        "end_line": 45,
        "comment": "\n     * Function called at counter exhaustion.\n     "
    },
    {
        "class_name": "org.apache.commons.math3.random.BitsStreamGenerator",
        "src_path": "src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java",
        "signature": "org.apache.commons.math3.random.BitsStreamGenerator.nextGaussian",
        "snippet": "    private double nextGaussian;",
        "begin_line": 31,
        "end_line": 31,
        "comment": " Next gaussian. "
    },
    {
        "class_name": "org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateSimpleBoundsOptimizer",
        "src_path": "src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer.java",
        "signature": "org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateSimpleBoundsOptimizer.lowerBound",
        "snippet": "    private double[] lowerBound;",
        "begin_line": 47,
        "end_line": 47,
        "comment": " Lower bounds. "
    },
    {
        "class_name": "org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateSimpleBoundsOptimizer",
        "src_path": "src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer.java",
        "signature": "org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateSimpleBoundsOptimizer.upperBound",
        "snippet": "    private double[] upperBound;",
        "begin_line": 49,
        "end_line": 49,
        "comment": " Upper bounds. "
    },
    {
        "class_name": "org.apache.commons.math3.exception.util.ExceptionContext",
        "src_path": "src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java",
        "signature": "org.apache.commons.math3.exception.util.ExceptionContext.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -6024911025449780478L;",
        "begin_line": 41,
        "end_line": 41,
        "comment": " Serializable version Id. "
    },
    {
        "class_name": "org.apache.commons.math3.exception.util.ExceptionContext",
        "src_path": "src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java",
        "signature": "org.apache.commons.math3.exception.util.ExceptionContext.throwable",
        "snippet": "    private Throwable throwable;",
        "begin_line": 45,
        "end_line": 45,
        "comment": "\n     * The throwable to which this context refers to.\n     "
    },
    {
        "class_name": "org.apache.commons.math3.exception.util.ExceptionContext",
        "src_path": "src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java",
        "signature": "org.apache.commons.math3.exception.util.ExceptionContext.msgPatterns",
        "snippet": "    private List<Localizable> msgPatterns;",
        "begin_line": 49,
        "end_line": 49,
        "comment": "\n     * Various informations that enrich the informative message.\n     "
    },
    {
        "class_name": "org.apache.commons.math3.exception.util.ExceptionContext",
        "src_path": "src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java",
        "signature": "org.apache.commons.math3.exception.util.ExceptionContext.msgArguments",
        "snippet": "    private List<Object[]> msgArguments;",
        "begin_line": 55,
        "end_line": 55,
        "comment": "\n     * Various informations that enrich the informative message.\n     * The arguments will replace the corresponding place-holders in\n     * {@link #msgPatterns}.\n     "
    },
    {
        "class_name": "org.apache.commons.math3.exception.util.ExceptionContext",
        "src_path": "src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java",
        "signature": "org.apache.commons.math3.exception.util.ExceptionContext.context",
        "snippet": "    private Map<String, Object> context;",
        "begin_line": 59,
        "end_line": 59,
        "comment": "\n     * Arbitrary context information.\n     "
    },
    {
        "class_name": "org.apache.commons.math3.exception.MathIllegalStateException",
        "src_path": "src/main/java/org/apache/commons/math3/exception/MathIllegalStateException.java",
        "signature": "org.apache.commons.math3.exception.MathIllegalStateException.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -6024911025449780478L;",
        "begin_line": 34,
        "end_line": 34,
        "comment": " Serializable version Id. "
    },
    {
        "class_name": "org.apache.commons.math3.exception.MathIllegalStateException",
        "src_path": "src/main/java/org/apache/commons/math3/exception/MathIllegalStateException.java",
        "signature": "org.apache.commons.math3.exception.MathIllegalStateException.context",
        "snippet": "    private final ExceptionContext context;",
        "begin_line": 36,
        "end_line": 36,
        "comment": " Context. "
    },
    {
        "class_name": "org.apache.commons.math3.optimization.AbstractConvergenceChecker",
        "src_path": "src/main/java/org/apache/commons/math3/optimization/AbstractConvergenceChecker.java",
        "signature": "org.apache.commons.math3.optimization.AbstractConvergenceChecker.DEFAULT_RELATIVE_THRESHOLD",
        "snippet": "    @Deprecated\n    private static final double DEFAULT_RELATIVE_THRESHOLD = 100 * Precision.EPSILON;",
        "begin_line": 37,
        "end_line": 38,
        "comment": "\n     * Default relative threshold.\n     * @deprecated in 3.1 (to be removed in 4.0) because this value is too small\n     * to be useful as a default (cf. MATH-798).\n     "
    },
    {
        "class_name": "org.apache.commons.math3.optimization.AbstractConvergenceChecker",
        "src_path": "src/main/java/org/apache/commons/math3/optimization/AbstractConvergenceChecker.java",
        "signature": "org.apache.commons.math3.optimization.AbstractConvergenceChecker.DEFAULT_ABSOLUTE_THRESHOLD",
        "snippet": "    @Deprecated\n    private static final double DEFAULT_ABSOLUTE_THRESHOLD = 100 * Precision.SAFE_MIN;",
        "begin_line": 44,
        "end_line": 45,
        "comment": "\n     * Default absolute threshold.\n     * @deprecated in 3.1 (to be removed in 4.0) because this value is too small\n     * to be useful as a default (cf. MATH-798).\n     "
    },
    {
        "class_name": "org.apache.commons.math3.optimization.AbstractConvergenceChecker",
        "src_path": "src/main/java/org/apache/commons/math3/optimization/AbstractConvergenceChecker.java",
        "signature": "org.apache.commons.math3.optimization.AbstractConvergenceChecker.relativeThreshold",
        "snippet": "    private final double relativeThreshold;",
        "begin_line": 49,
        "end_line": 49,
        "comment": "\n     * Relative tolerance threshold.\n     "
    },
    {
        "class_name": "org.apache.commons.math3.optimization.AbstractConvergenceChecker",
        "src_path": "src/main/java/org/apache/commons/math3/optimization/AbstractConvergenceChecker.java",
        "signature": "org.apache.commons.math3.optimization.AbstractConvergenceChecker.absoluteThreshold",
        "snippet": "    private final double absoluteThreshold;",
        "begin_line": 53,
        "end_line": 53,
        "comment": "\n     * Absolute tolerance threshold.\n     "
    },
    {
        "class_name": "org.apache.commons.math3.exception.util.LocalizedFormats",
        "src_path": "src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java",
        "signature": "org.apache.commons.math3.exception.util.LocalizedFormats.sourceFormat",
        "snippet": "    private final String sourceFormat;",
        "begin_line": 362,
        "end_line": 362,
        "comment": " Source English format. "
    },
    {
        "class_name": "org.apache.commons.math3.optimization.direct.CMAESOptimizer",
        "src_path": "src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java",
        "signature": "org.apache.commons.math3.optimization.direct.CMAESOptimizer.DEFAULT_CHECKFEASABLECOUNT",
        "snippet": "    public static final int DEFAULT_CHECKFEASABLECOUNT = 0;",
        "begin_line": 95,
        "end_line": 95,
        "comment": " Default value for {@link #checkFeasableCount}: {@value}. "
    },
    {
        "class_name": "org.apache.commons.math3.optimization.direct.CMAESOptimizer",
        "src_path": "src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java",
        "signature": "org.apache.commons.math3.optimization.direct.CMAESOptimizer.DEFAULT_STOPFITNESS",
        "snippet": "    public static final double DEFAULT_STOPFITNESS = 0;",
        "begin_line": 97,
        "end_line": 97,
        "comment": " Default value for {@link #stopFitness}: {@value}. "
    },
    {
        "class_name": "org.apache.commons.math3.optimization.direct.CMAESOptimizer",
        "src_path": "src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java",
        "signature": "org.apache.commons.math3.optimization.direct.CMAESOptimizer.DEFAULT_ISACTIVECMA",
        "snippet": "    public static final boolean DEFAULT_ISACTIVECMA = true;",
        "begin_line": 99,
        "end_line": 99,
        "comment": " Default value for {@link #isActiveCMA}: {@value}. "
    },
    {
        "class_name": "org.apache.commons.math3.optimization.direct.CMAESOptimizer",
        "src_path": "src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java",
        "signature": "org.apache.commons.math3.optimization.direct.CMAESOptimizer.DEFAULT_MAXITERATIONS",
        "snippet": "    public static final int DEFAULT_MAXITERATIONS = 30000;",
        "begin_line": 101,
        "end_line": 101,
        "comment": " Default value for {@link #maxIterations}: {@value}. "
    },
    {
        "class_name": "org.apache.commons.math3.optimization.direct.CMAESOptimizer",
        "src_path": "src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java",
        "signature": "org.apache.commons.math3.optimization.direct.CMAESOptimizer.DEFAULT_DIAGONALONLY",
        "snippet": "    public static final int DEFAULT_DIAGONALONLY = 0;",
        "begin_line": 103,
        "end_line": 103,
        "comment": " Default value for {@link #diagonalOnly}: {@value}. "
    },
    {
        "class_name": "org.apache.commons.math3.optimization.direct.CMAESOptimizer",
        "src_path": "src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java",
        "signature": "org.apache.commons.math3.optimization.direct.CMAESOptimizer.DEFAULT_RANDOMGENERATOR",
        "snippet": "    public static final RandomGenerator DEFAULT_RANDOMGENERATOR = new MersenneTwister();",
        "begin_line": 105,
        "end_line": 105,
        "comment": " Default value for {@link #random}. "
    },
    {
        "class_name": "org.apache.commons.math3.optimization.direct.CMAESOptimizer",
        "src_path": "src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java",
        "signature": "org.apache.commons.math3.optimization.direct.CMAESOptimizer.lambda",
        "snippet": "    private int lambda; // population size",
        "begin_line": 115,
        "end_line": 115,
        "comment": " population size"
    },
    {
        "class_name": "org.apache.commons.math3.optimization.direct.CMAESOptimizer",
        "src_path": "src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java",
        "signature": "org.apache.commons.math3.optimization.direct.CMAESOptimizer.isActiveCMA",
        "snippet": "    private boolean isActiveCMA;",
        "begin_line": 123,
        "end_line": 123,
        "comment": "\n     * Covariance update mechanism, default is active CMA. isActiveCMA = true\n     * turns on \"active CMA\" with a negative update of the covariance matrix and\n     * checks for positive definiteness. OPTS.CMA.active = 2 does not check for\n     * pos. def. and is numerically faster. Active CMA usually speeds up the\n     * adaptation.\n     "
    },
    {
        "class_name": "org.apache.commons.math3.optimization.direct.CMAESOptimizer",
        "src_path": "src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java",
        "signature": "org.apache.commons.math3.optimization.direct.CMAESOptimizer.checkFeasableCount",
        "snippet": "    private int checkFeasableCount;",
        "begin_line": 129,
        "end_line": 129,
        "comment": "\n     * Determines how often a new random offspring is generated in case it is\n     * not feasible / beyond the defined limits, default is 0. Only relevant if\n     * boundaries != null.\n     "
    },
    {
        "class_name": "org.apache.commons.math3.optimization.direct.CMAESOptimizer",
        "src_path": "src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java",
        "signature": "org.apache.commons.math3.optimization.direct.CMAESOptimizer.boundaries",
        "snippet": "    private double[][] boundaries;",
        "begin_line": 134,
        "end_line": 134,
        "comment": "\n     * Lower and upper boundaries of the objective variables. boundaries == null\n     * means no boundaries.\n     "
    },
    {
        "class_name": "org.apache.commons.math3.optimization.direct.CMAESOptimizer",
        "src_path": "src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java",
        "signature": "org.apache.commons.math3.optimization.direct.CMAESOptimizer.inputSigma",
        "snippet": "    private double[] inputSigma;",
        "begin_line": 140,
        "end_line": 140,
        "comment": "\n     * Individual sigma values - initial search volume. inputSigma determines\n     * the initial coordinate wise standard deviations for the search. Setting\n     * SIGMA one third of the initial search region is appropriate.\n     "
    },
    {
        "class_name": "org.apache.commons.math3.optimization.direct.CMAESOptimizer",
        "src_path": "src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java",
        "signature": "org.apache.commons.math3.optimization.direct.CMAESOptimizer.dimension",
        "snippet": "    private int dimension;",
        "begin_line": 142,
        "end_line": 142,
        "comment": " Number of objective variables/problem dimension "
    },
    {
        "class_name": "org.apache.commons.math3.optimization.direct.CMAESOptimizer",
        "src_path": "src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java",
        "signature": "org.apache.commons.math3.optimization.direct.CMAESOptimizer.diagonalOnly",
        "snippet": "    private int diagonalOnly = 0;",
        "begin_line": 151,
        "end_line": 151,
        "comment": "\n     * Defines the number of initial iterations, where the covariance matrix\n     * remains diagonal and the algorithm has internally linear time complexity.\n     * diagonalOnly = 1 means keeping the covariance matrix always diagonal and\n     * this setting also exhibits linear space complexity. This can be\n     * particularly useful for dimension > 100.\n     * @see <a href=\"http://hal.archives-ouvertes.fr/inria-00287367/en\">A Simple Modification in CMA-ES</a>\n     "
    },
    {
        "class_name": "org.apache.commons.math3.optimization.direct.CMAESOptimizer",
        "src_path": "src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java",
        "signature": "org.apache.commons.math3.optimization.direct.CMAESOptimizer.isMinimize",
        "snippet": "    private boolean isMinimize = true;",
        "begin_line": 153,
        "end_line": 153,
        "comment": " Number of objective variables/problem dimension "
    },
    {
        "class_name": "org.apache.commons.math3.optimization.direct.CMAESOptimizer",
        "src_path": "src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java",
        "signature": "org.apache.commons.math3.optimization.direct.CMAESOptimizer.generateStatistics",
        "snippet": "    private boolean generateStatistics = false;",
        "begin_line": 155,
        "end_line": 155,
        "comment": " Indicates whether statistic data is collected. "
    },
    {
        "class_name": "org.apache.commons.math3.optimization.direct.CMAESOptimizer",
        "src_path": "src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java",
        "signature": "org.apache.commons.math3.optimization.direct.CMAESOptimizer.maxIterations",
        "snippet": "    private int maxIterations;",
        "begin_line": 159,
        "end_line": 159,
        "comment": " Maximal number of iterations allowed. "
    },
    {
        "class_name": "org.apache.commons.math3.optimization.direct.CMAESOptimizer",
        "src_path": "src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java",
        "signature": "org.apache.commons.math3.optimization.direct.CMAESOptimizer.stopFitness",
        "snippet": "    private double stopFitness;",
        "begin_line": 161,
        "end_line": 161,
        "comment": " Limit for fitness value. "
    },
    {
        "class_name": "org.apache.commons.math3.optimization.direct.CMAESOptimizer",
        "src_path": "src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java",
        "signature": "org.apache.commons.math3.optimization.direct.CMAESOptimizer.stopTolUpX",
        "snippet": "    private double stopTolUpX;",
        "begin_line": 163,
        "end_line": 163,
        "comment": " Stop if x-changes larger stopTolUpX. "
    },
    {
        "class_name": "org.apache.commons.math3.optimization.direct.CMAESOptimizer",
        "src_path": "src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java",
        "signature": "org.apache.commons.math3.optimization.direct.CMAESOptimizer.stopTolX",
        "snippet": "    private double stopTolX;",
        "begin_line": 165,
        "end_line": 165,
        "comment": " Stop if x-change smaller stopTolX. "
    },
    {
        "class_name": "org.apache.commons.math3.optimization.direct.CMAESOptimizer",
        "src_path": "src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java",
        "signature": "org.apache.commons.math3.optimization.direct.CMAESOptimizer.stopTolFun",
        "snippet": "    private double stopTolFun;",
        "begin_line": 167,
        "end_line": 167,
        "comment": " Stop if fun-changes smaller stopTolFun. "
    },
    {
        "class_name": "org.apache.commons.math3.optimization.direct.CMAESOptimizer",
        "src_path": "src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java",
        "signature": "org.apache.commons.math3.optimization.direct.CMAESOptimizer.stopTolHistFun",
        "snippet": "    private double stopTolHistFun;",
        "begin_line": 169,
        "end_line": 169,
        "comment": " Stop if back fun-changes smaller stopTolHistFun. "
    },
    {
        "class_name": "org.apache.commons.math3.optimization.direct.CMAESOptimizer",
        "src_path": "src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java",
        "signature": "org.apache.commons.math3.optimization.direct.CMAESOptimizer.mu",
        "snippet": "    private int mu; //",
        "begin_line": 173,
        "end_line": 173,
        "comment": ""
    },
    {
        "class_name": "org.apache.commons.math3.optimization.direct.CMAESOptimizer",
        "src_path": "src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java",
        "signature": "org.apache.commons.math3.optimization.direct.CMAESOptimizer.logMu2",
        "snippet": "    private double logMu2;",
        "begin_line": 175,
        "end_line": 175,
        "comment": " log(mu + 0.5), stored for efficiency. "
    },
    {
        "class_name": "org.apache.commons.math3.optimization.direct.CMAESOptimizer",
        "src_path": "src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java",
        "signature": "org.apache.commons.math3.optimization.direct.CMAESOptimizer.weights",
        "snippet": "    private RealMatrix weights;",
        "begin_line": 177,
        "end_line": 177,
        "comment": " Array for weighted recombination. "
    },
    {
        "class_name": "org.apache.commons.math3.optimization.direct.CMAESOptimizer",
        "src_path": "src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java",
        "signature": "org.apache.commons.math3.optimization.direct.CMAESOptimizer.mueff",
        "snippet": "    private double mueff; //",
        "begin_line": 179,
        "end_line": 179,
        "comment": ""
    },
    {
        "class_name": "org.apache.commons.math3.optimization.direct.CMAESOptimizer",
        "src_path": "src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java",
        "signature": "org.apache.commons.math3.optimization.direct.CMAESOptimizer.sigma",
        "snippet": "    private double sigma;",
        "begin_line": 183,
        "end_line": 183,
        "comment": " Overall standard deviation - search volume. "
    },
    {
        "class_name": "org.apache.commons.math3.optimization.direct.CMAESOptimizer",
        "src_path": "src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java",
        "signature": "org.apache.commons.math3.optimization.direct.CMAESOptimizer.cc",
        "snippet": "    private double cc;",
        "begin_line": 185,
        "end_line": 185,
        "comment": " Cumulation constant. "
    },
    {
        "class_name": "org.apache.commons.math3.optimization.direct.CMAESOptimizer",
        "src_path": "src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java",
        "signature": "org.apache.commons.math3.optimization.direct.CMAESOptimizer.cs",
        "snippet": "    private double cs;",
        "begin_line": 187,
        "end_line": 187,
        "comment": " Cumulation constant for step-size. "
    },
    {
        "class_name": "org.apache.commons.math3.optimization.direct.CMAESOptimizer",
        "src_path": "src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java",
        "signature": "org.apache.commons.math3.optimization.direct.CMAESOptimizer.damps",
        "snippet": "    private double damps;",
        "begin_line": 189,
        "end_line": 189,
        "comment": " Damping for step-size. "
    },
    {
        "class_name": "org.apache.commons.math3.optimization.direct.CMAESOptimizer",
        "src_path": "src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java",
        "signature": "org.apache.commons.math3.optimization.direct.CMAESOptimizer.ccov1",
        "snippet": "    private double ccov1;",
        "begin_line": 191,
        "end_line": 191,
        "comment": " Learning rate for rank-one update. "
    },
    {
        "class_name": "org.apache.commons.math3.optimization.direct.CMAESOptimizer",
        "src_path": "src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java",
        "signature": "org.apache.commons.math3.optimization.direct.CMAESOptimizer.ccovmu",
        "snippet": "    private double ccovmu;",
        "begin_line": 193,
        "end_line": 193,
        "comment": " Learning rate for rank-mu update' "
    },
    {
        "class_name": "org.apache.commons.math3.optimization.direct.CMAESOptimizer",
        "src_path": "src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java",
        "signature": "org.apache.commons.math3.optimization.direct.CMAESOptimizer.chiN",
        "snippet": "    private double chiN;",
        "begin_line": 195,
        "end_line": 195,
        "comment": " Expectation of ||N(0,I)|| == norm(randn(N,1)). "
    },
    {
        "class_name": "org.apache.commons.math3.optimization.direct.CMAESOptimizer",
        "src_path": "src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java",
        "signature": "org.apache.commons.math3.optimization.direct.CMAESOptimizer.ccov1Sep",
        "snippet": "    private double ccov1Sep;",
        "begin_line": 197,
        "end_line": 197,
        "comment": " Learning rate for rank-one update - diagonalOnly "
    },
    {
        "class_name": "org.apache.commons.math3.optimization.direct.CMAESOptimizer",
        "src_path": "src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java",
        "signature": "org.apache.commons.math3.optimization.direct.CMAESOptimizer.ccovmuSep",
        "snippet": "    private double ccovmuSep;",
        "begin_line": 199,
        "end_line": 199,
        "comment": " Learning rate for rank-mu update - diagonalOnly "
    },
    {
        "class_name": "org.apache.commons.math3.optimization.direct.CMAESOptimizer",
        "src_path": "src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java",
        "signature": "org.apache.commons.math3.optimization.direct.CMAESOptimizer.xmean",
        "snippet": "    private RealMatrix xmean;",
        "begin_line": 203,
        "end_line": 203,
        "comment": " Objective variables. "
    },
    {
        "class_name": "org.apache.commons.math3.optimization.direct.CMAESOptimizer",
        "src_path": "src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java",
        "signature": "org.apache.commons.math3.optimization.direct.CMAESOptimizer.pc",
        "snippet": "    private RealMatrix pc;",
        "begin_line": 205,
        "end_line": 205,
        "comment": " Evolution path. "
    },
    {
        "class_name": "org.apache.commons.math3.optimization.direct.CMAESOptimizer",
        "src_path": "src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java",
        "signature": "org.apache.commons.math3.optimization.direct.CMAESOptimizer.ps",
        "snippet": "    private RealMatrix ps;",
        "begin_line": 207,
        "end_line": 207,
        "comment": " Evolution path for sigma. "
    },
    {
        "class_name": "org.apache.commons.math3.optimization.direct.CMAESOptimizer",
        "src_path": "src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java",
        "signature": "org.apache.commons.math3.optimization.direct.CMAESOptimizer.normps",
        "snippet": "    private double normps;",
        "begin_line": 209,
        "end_line": 209,
        "comment": " Norm of ps, stored for efficiency. "
    },
    {
        "class_name": "org.apache.commons.math3.optimization.direct.CMAESOptimizer",
        "src_path": "src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java",
        "signature": "org.apache.commons.math3.optimization.direct.CMAESOptimizer.B",
        "snippet": "    private RealMatrix B;",
        "begin_line": 211,
        "end_line": 211,
        "comment": " Coordinate system. "
    },
    {
        "class_name": "org.apache.commons.math3.optimization.direct.CMAESOptimizer",
        "src_path": "src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java",
        "signature": "org.apache.commons.math3.optimization.direct.CMAESOptimizer.D",
        "snippet": "    private RealMatrix D;",
        "begin_line": 213,
        "end_line": 213,
        "comment": " Scaling. "
    },
    {
        "class_name": "org.apache.commons.math3.optimization.direct.CMAESOptimizer",
        "src_path": "src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java",
        "signature": "org.apache.commons.math3.optimization.direct.CMAESOptimizer.BD",
        "snippet": "    private RealMatrix BD;",
        "begin_line": 215,
        "end_line": 215,
        "comment": " B*D, stored for efficiency. "
    },
    {
        "class_name": "org.apache.commons.math3.optimization.direct.CMAESOptimizer",
        "src_path": "src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java",
        "signature": "org.apache.commons.math3.optimization.direct.CMAESOptimizer.diagD",
        "snippet": "    private RealMatrix diagD;",
        "begin_line": 217,
        "end_line": 217,
        "comment": " Diagonal of sqrt(D), stored for efficiency. "
    },
    {
        "class_name": "org.apache.commons.math3.optimization.direct.CMAESOptimizer",
        "src_path": "src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java",
        "signature": "org.apache.commons.math3.optimization.direct.CMAESOptimizer.C",
        "snippet": "    private RealMatrix C;",
        "begin_line": 219,
        "end_line": 219,
        "comment": " Covariance matrix. "
    },
    {
        "class_name": "org.apache.commons.math3.optimization.direct.CMAESOptimizer",
        "src_path": "src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java",
        "signature": "org.apache.commons.math3.optimization.direct.CMAESOptimizer.diagC",
        "snippet": "    private RealMatrix diagC;",
        "begin_line": 221,
        "end_line": 221,
        "comment": " Diagonal of C, used for diagonalOnly. "
    },
    {
        "class_name": "org.apache.commons.math3.optimization.direct.CMAESOptimizer",
        "src_path": "src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java",
        "signature": "org.apache.commons.math3.optimization.direct.CMAESOptimizer.iterations",
        "snippet": "    private int iterations;",
        "begin_line": 223,
        "end_line": 223,
        "comment": " Number of iterations already performed. "
    },
    {
        "class_name": "org.apache.commons.math3.optimization.direct.CMAESOptimizer",
        "src_path": "src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java",
        "signature": "org.apache.commons.math3.optimization.direct.CMAESOptimizer.fitnessHistory",
        "snippet": "    private double[] fitnessHistory;",
        "begin_line": 226,
        "end_line": 226,
        "comment": " History queue of best values. "
    },
    {
        "class_name": "org.apache.commons.math3.optimization.direct.CMAESOptimizer",
        "src_path": "src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java",
        "signature": "org.apache.commons.math3.optimization.direct.CMAESOptimizer.historySize",
        "snippet": "    private int historySize;",
        "begin_line": 228,
        "end_line": 228,
        "comment": " Size of history queue of best values. "
    },
    {
        "class_name": "org.apache.commons.math3.optimization.direct.CMAESOptimizer",
        "src_path": "src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java",
        "signature": "org.apache.commons.math3.optimization.direct.CMAESOptimizer.random",
        "snippet": "    private RandomGenerator random;",
        "begin_line": 231,
        "end_line": 231,
        "comment": " Random generator. "
    },
    {
        "class_name": "org.apache.commons.math3.optimization.direct.CMAESOptimizer",
        "src_path": "src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java",
        "signature": "org.apache.commons.math3.optimization.direct.CMAESOptimizer.statisticsSigmaHistory",
        "snippet": "    private List<Double> statisticsSigmaHistory = new ArrayList<Double>();",
        "begin_line": 234,
        "end_line": 234,
        "comment": " History of sigma values. "
    },
    {
        "class_name": "org.apache.commons.math3.optimization.direct.CMAESOptimizer",
        "src_path": "src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java",
        "signature": "org.apache.commons.math3.optimization.direct.CMAESOptimizer.statisticsMeanHistory",
        "snippet": "    private List<RealMatrix> statisticsMeanHistory = new ArrayList<RealMatrix>();",
        "begin_line": 236,
        "end_line": 236,
        "comment": " History of mean matrix. "
    },
    {
        "class_name": "org.apache.commons.math3.optimization.direct.CMAESOptimizer",
        "src_path": "src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java",
        "signature": "org.apache.commons.math3.optimization.direct.CMAESOptimizer.statisticsFitnessHistory",
        "snippet": "    private List<Double> statisticsFitnessHistory = new ArrayList<Double>();",
        "begin_line": 238,
        "end_line": 238,
        "comment": " History of fitness values. "
    },
    {
        "class_name": "org.apache.commons.math3.optimization.direct.CMAESOptimizer",
        "src_path": "src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java",
        "signature": "org.apache.commons.math3.optimization.direct.CMAESOptimizer.statisticsDHistory",
        "snippet": "    private List<RealMatrix> statisticsDHistory = new ArrayList<RealMatrix>();",
        "begin_line": 240,
        "end_line": 240,
        "comment": " History of D matrix. "
    },
    {
        "class_name": "org.apache.commons.math3.optimization.direct.DoubleIndex",
        "src_path": "src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java",
        "signature": "org.apache.commons.math3.optimization.direct.DoubleIndex.value",
        "snippet": "        private double value;",
        "begin_line": 844,
        "end_line": 844,
        "comment": " Value to compare. "
    },
    {
        "class_name": "org.apache.commons.math3.optimization.direct.DoubleIndex",
        "src_path": "src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java",
        "signature": "org.apache.commons.math3.optimization.direct.DoubleIndex.index",
        "snippet": "        private int index;",
        "begin_line": 846,
        "end_line": 846,
        "comment": " Index into sorted array. "
    },
    {
        "class_name": "org.apache.commons.math3.optimization.direct.FitnessFunction",
        "src_path": "src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java",
        "signature": "org.apache.commons.math3.optimization.direct.FitnessFunction.valueRange",
        "snippet": "        private double valueRange;",
        "begin_line": 894,
        "end_line": 894,
        "comment": " Determines the penalty for boundary violations "
    },
    {
        "class_name": "org.apache.commons.math3.optimization.direct.FitnessFunction",
        "src_path": "src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java",
        "signature": "org.apache.commons.math3.optimization.direct.FitnessFunction.isRepairMode",
        "snippet": "        private boolean isRepairMode;",
        "begin_line": 899,
        "end_line": 899,
        "comment": "\n         * Flag indicating whether the objective variables are forced into their\n         * bounds if defined\n         "
    }
]