[
    {
        "class_name": "org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java",
        "signature": "org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest.testWrongVariableIndex()",
        "snippet": "    @Test(expected=NumberIsTooLargeException.class)\n    public void testWrongVariableIndex() {\n        new DerivativeStructure(3, 1, 3, 1.0);\n    }\n",
        "begin_line": 37,
        "end_line": 40,
        "comment": "",
        "child_ranges": [
            "(line 39,col 9)-(line 39,col 46)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java",
        "signature": "org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest.testMissingOrders()",
        "snippet": "    @Test(expected=DimensionMismatchException.class)\n    public void testMissingOrders() {\n        new DerivativeStructure(3, 1, 0, 1.0).getPartialDerivative(0, 1);\n    }\n",
        "begin_line": 42,
        "end_line": 45,
        "comment": "",
        "child_ranges": [
            "(line 44,col 9)-(line 44,col 73)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java",
        "signature": "org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest.testTooLargeOrder()",
        "snippet": "    @Test(expected=NumberIsTooLargeException.class)\n    public void testTooLargeOrder() {\n        new DerivativeStructure(3, 1, 0, 1.0).getPartialDerivative(1, 1, 2);\n    }\n",
        "begin_line": 47,
        "end_line": 50,
        "comment": "",
        "child_ranges": [
            "(line 49,col 9)-(line 49,col 76)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java",
        "signature": "org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest.testVariableWithoutDerivative0()",
        "snippet": "    @Test\n    public void testVariableWithoutDerivative0() {\n        DerivativeStructure v = new DerivativeStructure(1, 0, 0, 1.0);\n        Assert.assertEquals(1.0, v.getValue(), 1.0e-15);\n    }\n",
        "begin_line": 52,
        "end_line": 56,
        "comment": "",
        "child_ranges": [
            "(line 54,col 9)-(line 54,col 70)",
            "(line 55,col 9)-(line 55,col 56)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java",
        "signature": "org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest.testVariableWithoutDerivative1()",
        "snippet": "    @Test(expected=NumberIsTooLargeException.class)\n    public void testVariableWithoutDerivative1() {\n        DerivativeStructure v = new DerivativeStructure(1, 0, 0, 1.0);\n        Assert.assertEquals(1.0, v.getPartialDerivative(1), 1.0e-15);\n    }\n",
        "begin_line": 58,
        "end_line": 62,
        "comment": "",
        "child_ranges": [
            "(line 60,col 9)-(line 60,col 70)",
            "(line 61,col 9)-(line 61,col 69)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java",
        "signature": "org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest.testVariable()",
        "snippet": "    @Test\n    public void testVariable() {\n        for (int maxOrder = 1; maxOrder < 5; ++maxOrder) {\n            checkF0F1(new DerivativeStructure(3, maxOrder, 0, 1.0),\n                      1.0, 1.0, 0.0, 0.0);\n            checkF0F1(new DerivativeStructure(3, maxOrder, 1, 2.0),\n                      2.0, 0.0, 1.0, 0.0);\n            checkF0F1(new DerivativeStructure(3, maxOrder, 2, 3.0),\n                      3.0, 0.0, 0.0, 1.0);\n        }\n    }\n",
        "begin_line": 64,
        "end_line": 74,
        "comment": "",
        "child_ranges": [
            "(line 66,col 9)-(line 73,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java",
        "signature": "org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest.testConstant()",
        "snippet": "    @Test\n    public void testConstant() {\n        for (int maxOrder = 1; maxOrder < 5; ++maxOrder) {\n            checkF0F1(new DerivativeStructure(3, maxOrder, FastMath.PI),\n                      FastMath.PI, 0.0, 0.0, 0.0);\n        }\n    }\n",
        "begin_line": 76,
        "end_line": 82,
        "comment": "",
        "child_ranges": [
            "(line 78,col 9)-(line 81,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java",
        "signature": "org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest.testPrimitiveAdd()",
        "snippet": "    @Test\n    public void testPrimitiveAdd() {\n        for (int maxOrder = 1; maxOrder < 5; ++maxOrder) {\n            checkF0F1(new DerivativeStructure(3, maxOrder, 0, 1.0).add(5), 6.0, 1.0, 0.0, 0.0);\n            checkF0F1(new DerivativeStructure(3, maxOrder, 1, 2.0).add(5), 7.0, 0.0, 1.0, 0.0);\n            checkF0F1(new DerivativeStructure(3, maxOrder, 2, 3.0).add(5), 8.0, 0.0, 0.0, 1.0);\n        }\n    }\n",
        "begin_line": 84,
        "end_line": 91,
        "comment": "",
        "child_ranges": [
            "(line 86,col 9)-(line 90,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java",
        "signature": "org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest.testAdd()",
        "snippet": "    @Test\n    public void testAdd() {\n        for (int maxOrder = 1; maxOrder < 5; ++maxOrder) {\n            DerivativeStructure x = new DerivativeStructure(3, maxOrder, 0, 1.0);\n            DerivativeStructure y = new DerivativeStructure(3, maxOrder, 1, 2.0);\n            DerivativeStructure z = new DerivativeStructure(3, maxOrder, 2, 3.0);\n            DerivativeStructure xyz = x.add(y.add(z));\n            checkF0F1(xyz, x.getValue() + y.getValue() + z.getValue(), 1.0, 1.0, 1.0);\n        }\n    }\n",
        "begin_line": 93,
        "end_line": 102,
        "comment": "",
        "child_ranges": [
            "(line 95,col 9)-(line 101,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java",
        "signature": "org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest.testPrimitiveSubtract()",
        "snippet": "    @Test\n    public void testPrimitiveSubtract() {\n        for (int maxOrder = 1; maxOrder < 5; ++maxOrder) {\n            checkF0F1(new DerivativeStructure(3, maxOrder, 0, 1.0).subtract(5), -4.0, 1.0, 0.0, 0.0);\n            checkF0F1(new DerivativeStructure(3, maxOrder, 1, 2.0).subtract(5), -3.0, 0.0, 1.0, 0.0);\n            checkF0F1(new DerivativeStructure(3, maxOrder, 2, 3.0).subtract(5), -2.0, 0.0, 0.0, 1.0);\n        }\n    }\n",
        "begin_line": 104,
        "end_line": 111,
        "comment": "",
        "child_ranges": [
            "(line 106,col 9)-(line 110,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java",
        "signature": "org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest.testSubtract()",
        "snippet": "    @Test\n    public void testSubtract() {\n        for (int maxOrder = 1; maxOrder < 5; ++maxOrder) {\n            DerivativeStructure x = new DerivativeStructure(3, maxOrder, 0, 1.0);\n            DerivativeStructure y = new DerivativeStructure(3, maxOrder, 1, 2.0);\n            DerivativeStructure z = new DerivativeStructure(3, maxOrder, 2, 3.0);\n            DerivativeStructure xyz = x.subtract(y.subtract(z));\n            checkF0F1(xyz, x.getValue() - (y.getValue() - z.getValue()), 1.0, -1.0, 1.0);\n        }\n    }\n",
        "begin_line": 113,
        "end_line": 122,
        "comment": "",
        "child_ranges": [
            "(line 115,col 9)-(line 121,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java",
        "signature": "org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest.testPrimitiveMultiply()",
        "snippet": "    @Test\n    public void testPrimitiveMultiply() {\n        for (int maxOrder = 1; maxOrder < 5; ++maxOrder) {\n            checkF0F1(new DerivativeStructure(3, maxOrder, 0, 1.0).multiply(5),  5.0, 5.0, 0.0, 0.0);\n            checkF0F1(new DerivativeStructure(3, maxOrder, 1, 2.0).multiply(5), 10.0, 0.0, 5.0, 0.0);\n            checkF0F1(new DerivativeStructure(3, maxOrder, 2, 3.0).multiply(5), 15.0, 0.0, 0.0, 5.0);\n        }\n    }\n",
        "begin_line": 124,
        "end_line": 131,
        "comment": "",
        "child_ranges": [
            "(line 126,col 9)-(line 130,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java",
        "signature": "org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest.testMultiply()",
        "snippet": "    @Test\n    public void testMultiply() {\n        for (int maxOrder = 1; maxOrder < 5; ++maxOrder) {\n            DerivativeStructure x = new DerivativeStructure(3, maxOrder, 0, 1.0);\n            DerivativeStructure y = new DerivativeStructure(3, maxOrder, 1, 2.0);\n            DerivativeStructure z = new DerivativeStructure(3, maxOrder, 2, 3.0);\n            DerivativeStructure xyz = x.multiply(y.multiply(z));\n            for (int i = 0; i <= maxOrder; ++i) {\n                for (int j = 0; j <= maxOrder; ++j) {\n                    for (int k = 0; k <= maxOrder; ++k) {\n                        if (i + j + k <= maxOrder) {\n                            Assert.assertEquals((i == 0 ? x.getValue() : (i == 1 ? 1.0 : 0.0)) *\n                                                (j == 0 ? y.getValue() : (j == 1 ? 1.0 : 0.0)) *\n                                                (k == 0 ? z.getValue() : (k == 1 ? 1.0 : 0.0)),\n                                                xyz.getPartialDerivative(i, j, k),\n                                                1.0e-15);\n                        }\n                    }\n                }\n            }\n        }\n    }\n",
        "begin_line": 133,
        "end_line": 154,
        "comment": "",
        "child_ranges": [
            "(line 135,col 9)-(line 153,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java",
        "signature": "org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest.testNegate()",
        "snippet": "    @Test\n    public void testNegate() {\n        for (int maxOrder = 1; maxOrder < 5; ++maxOrder) {\n            checkF0F1(new DerivativeStructure(3, maxOrder, 0, 1.0).negate(), -1.0, -1.0, 0.0, 0.0);\n            checkF0F1(new DerivativeStructure(3, maxOrder, 1, 2.0).negate(), -2.0, 0.0, -1.0, 0.0);\n            checkF0F1(new DerivativeStructure(3, maxOrder, 2, 3.0).negate(), -3.0, 0.0, 0.0, -1.0);\n        }\n    }\n",
        "begin_line": 156,
        "end_line": 163,
        "comment": "",
        "child_ranges": [
            "(line 158,col 9)-(line 162,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java",
        "signature": "org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest.testReciprocal()",
        "snippet": "    @Test\n    public void testReciprocal() {\n        for (double x = 0.1; x < 1.2; x += 0.1) {\n            DerivativeStructure r = new DerivativeStructure(1, 6, 0, x).reciprocal();\n            Assert.assertEquals(1 / x, r.getValue(), 1.0e-15);\n            for (int i = 1; i < r.getOrder(); ++i) {\n                double expected = ArithmeticUtils.pow(-1, i) * ArithmeticUtils.factorial(i) /\n                                  FastMath.pow(x, i + 1);\n                Assert.assertEquals(expected, r.getPartialDerivative(i), 1.0e-15 * FastMath.abs(expected));\n            }\n        }\n    }\n",
        "begin_line": 165,
        "end_line": 176,
        "comment": "",
        "child_ranges": [
            "(line 167,col 9)-(line 175,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java",
        "signature": "org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest.testPow()",
        "snippet": "    @Test\n    public void testPow() {\n        for (int maxOrder = 1; maxOrder < 5; ++maxOrder) {\n            for (int n = 0; n < 10; ++n) {\n\n                DerivativeStructure x = new DerivativeStructure(3, maxOrder, 0, 1.0);\n                DerivativeStructure y = new DerivativeStructure(3, maxOrder, 1, 2.0);\n                DerivativeStructure z = new DerivativeStructure(3, maxOrder, 2, 3.0);\n                List<DerivativeStructure> list = Arrays.asList(x, y, z,\n                                                               x.add(y).add(z),\n                                                               x.multiply(y).multiply(z));\n\n                if (n == 0) {\n                    for (DerivativeStructure ds : list) {\n                        checkEquals(ds.getField().getOne(), ds.pow(n), 1.0e-15);\n                    }\n                } else if (n == 1) {\n                    for (DerivativeStructure ds : list) {\n                        checkEquals(ds, ds.pow(n), 1.0e-15);\n                    }\n                } else {\n                    for (DerivativeStructure ds : list) {\n                        DerivativeStructure p = ds.getField().getOne();\n                        for (int i = 0; i < n; ++i) {\n                            p = p.multiply(ds);\n                        }\n                        checkEquals(p, ds.pow(n), 1.0e-15);\n                    }\n                }\n            }\n        }\n    }\n",
        "begin_line": 178,
        "end_line": 209,
        "comment": "",
        "child_ranges": [
            "(line 180,col 9)-(line 208,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java",
        "signature": "org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest.testExpression()",
        "snippet": "    @Test\n    public void testExpression() {\n        double epsilon = 2.5e-13;\n        for (double x = 0; x < 2; x += 0.2) {\n            DerivativeStructure dsX = new DerivativeStructure(3, 5, 0, x);\n            for (double y = 0; y < 2; y += 0.2) {\n                DerivativeStructure dsY = new DerivativeStructure(3, 5, 1, y);\n                for (double z = 0; z >- 2; z -= 0.2) {\n                    DerivativeStructure dsZ = new DerivativeStructure(3, 5, 2, z);\n\n                    // f(x, y, z) = x + 5 x y - 2 z + (8 z x - y)^3\n                    DerivativeStructure ds =\n                            new DerivativeStructure(1, dsX,\n                                                    5, dsX.multiply(dsY),\n                                                    -2, dsZ,\n                                                    1, new DerivativeStructure(8, dsZ.multiply(dsX),\n                                                                               -1, dsY).pow(3));\n                    DerivativeStructure dsOther =\n                            new DerivativeStructure(1, dsX,\n                                                    5, dsX.multiply(dsY),\n                                                    -2, dsZ).add(new DerivativeStructure(8, dsZ.multiply(dsX),\n                                                                                         -1, dsY).pow(3));\n                    double f = x + 5 * x * y - 2 * z + FastMath.pow(8 * z * x - y, 3);\n                    Assert.assertEquals(f, ds.getValue(),\n                                        FastMath.abs(epsilon * f));\n                    Assert.assertEquals(f, dsOther.getValue(),\n                                        FastMath.abs(epsilon * f));\n\n                    // df/dx = 1 + 5 y + 24 (8 z x - y)^2 z\n                    double dfdx = 1 + 5 * y + 24 * z * FastMath.pow(8 * z * x - y, 2);\n                    Assert.assertEquals(dfdx, ds.getPartialDerivative(1, 0, 0),\n                                        FastMath.abs(epsilon * dfdx));\n                    Assert.assertEquals(dfdx, dsOther.getPartialDerivative(1, 0, 0),\n                                        FastMath.abs(epsilon * dfdx));\n\n                    // df/dxdy = 5 + 48 z*(y - 8 z x)\n                    double dfdxdy = 5 + 48 * z * (y - 8 * z * x);\n                    Assert.assertEquals(dfdxdy, ds.getPartialDerivative(1, 1, 0),\n                                        FastMath.abs(epsilon * dfdxdy));\n                    Assert.assertEquals(dfdxdy, dsOther.getPartialDerivative(1, 1, 0),\n                                        FastMath.abs(epsilon * dfdxdy));\n\n                    // df/dxdydz = 48 (y - 16 z x)\n                    double dfdxdydz = 48 * (y - 16 * z * x);\n                    Assert.assertEquals(dfdxdydz, ds.getPartialDerivative(1, 1, 1),\n                                        FastMath.abs(epsilon * dfdxdydz));\n                    Assert.assertEquals(dfdxdydz, dsOther.getPartialDerivative(1, 1, 1),\n                                        FastMath.abs(epsilon * dfdxdydz));\n\n                }\n                \n            }\n        }\n    }\n",
        "begin_line": 211,
        "end_line": 264,
        "comment": "",
        "child_ranges": [
            "(line 213,col 9)-(line 213,col 33)",
            "(line 214,col 9)-(line 263,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java",
        "signature": "org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest.testCompositionOneVariableX()",
        "snippet": "    @Test\n    public void testCompositionOneVariableX() {\n        double epsilon = 1.0e-13;\n        for (int maxOrder = 0; maxOrder < 5; ++maxOrder) {\n            for (double x = 0.1; x < 1.2; x += 0.1) {\n                DerivativeStructure dsX = new DerivativeStructure(1, maxOrder, 0, x);\n                for (double y = 0.1; y < 1.2; y += 0.1) {\n                    DerivativeStructure dsY = new DerivativeStructure(1, maxOrder, y);\n                    DerivativeStructure f = dsX.divide(dsY).sqrt();\n                    double f0 = FastMath.sqrt(x / y);\n                    Assert.assertEquals(f0, f.getValue(), FastMath.abs(epsilon * f0));\n                    if (f.getOrder() > 0) {\n                        double f1 = 1 / (2 * FastMath.sqrt(x * y));\n                        Assert.assertEquals(f1, f.getPartialDerivative(1), FastMath.abs(epsilon * f1));\n                        if (f.getOrder() > 1) {\n                            double f2 = -f1 / (2 * x); \n                            Assert.assertEquals(f2, f.getPartialDerivative(2), FastMath.abs(epsilon * f2));\n                            if (f.getOrder() > 2) {\n                                double f3 = (f0 + x / (2 * y * f0)) / (4 * x * x * x); \n                                Assert.assertEquals(f3, f.getPartialDerivative(3), FastMath.abs(epsilon * f3));\n                            }\n                        }\n                    }\n                }\n            }\n        }        \n    }\n",
        "begin_line": 266,
        "end_line": 292,
        "comment": "",
        "child_ranges": [
            "(line 268,col 9)-(line 268,col 33)",
            "(line 269,col 9)-(line 291,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java",
        "signature": "org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest.testTrigo()",
        "snippet": "    @Test\n    public void testTrigo() {\n        double epsilon = 2.0e-12;\n        for (int maxOrder = 0; maxOrder < 5; ++maxOrder) {\n            for (double x = 0.1; x < 1.2; x += 0.1) {\n                DerivativeStructure dsX = new DerivativeStructure(3, maxOrder, 0, x);\n                for (double y = 0.1; y < 1.2; y += 0.1) {\n                    DerivativeStructure dsY = new DerivativeStructure(3, maxOrder, 1, y);\n                    for (double z = 0.1; z < 1.2; z += 0.1) {\n                        DerivativeStructure dsZ = new DerivativeStructure(3, maxOrder, 2, z);\n                        DerivativeStructure f = dsX.divide(dsY.cos().add(dsZ.tan())).sin();\n                        double a = FastMath.cos(y) + FastMath.tan(z);\n                        double f0 = FastMath.sin(x / a);\n                        Assert.assertEquals(f0, f.getValue(), FastMath.abs(epsilon * f0));\n                        if (f.getOrder() > 0) {\n                            double dfdx = FastMath.cos(x / a) / a;\n                            Assert.assertEquals(dfdx, f.getPartialDerivative(1, 0, 0), FastMath.abs(epsilon * dfdx));\n                            double dfdy =  x * FastMath.sin(y) * dfdx / a;\n                            Assert.assertEquals(dfdy, f.getPartialDerivative(0, 1, 0), FastMath.abs(epsilon * dfdy));\n                            double cz = FastMath.cos(z);\n                            double cz2 = cz * cz;\n                            double dfdz = -x * dfdx / (a * cz2);\n                            Assert.assertEquals(dfdz, f.getPartialDerivative(0, 0, 1), FastMath.abs(epsilon * dfdz));\n                            if (f.getOrder() > 1) {\n                                double df2dx2 = -(f0 / (a * a));\n                                Assert.assertEquals(df2dx2, f.getPartialDerivative(2, 0, 0), FastMath.abs(epsilon * df2dx2));\n                                double df2dy2 = x * FastMath.cos(y) * dfdx / a -\n                                                x * x * FastMath.sin(y) * FastMath.sin(y) * f0 / (a * a * a * a) +\n                                                2 * FastMath.sin(y) * dfdy / a;\n                                Assert.assertEquals(df2dy2, f.getPartialDerivative(0, 2, 0), FastMath.abs(epsilon * df2dy2));\n                                double c4 = cz2 * cz2;\n                                double df2dz2 = x * (2 * a * (1 - a * cz * FastMath.sin(z)) * dfdx - x * f0 / a ) / (a * a * a * c4);\n                                Assert.assertEquals(df2dz2, f.getPartialDerivative(0, 0, 2), FastMath.abs(epsilon * df2dz2));\n                                double df2dxdy = dfdy / x  - x * FastMath.sin(y) * f0 / (a * a * a);\n                                Assert.assertEquals(df2dxdy, f.getPartialDerivative(1, 1, 0), FastMath.abs(epsilon * df2dxdy));\n                            }\n                        }\n                    }\n                }\n            }        \n        }\n    }\n",
        "begin_line": 294,
        "end_line": 335,
        "comment": "",
        "child_ranges": [
            "(line 296,col 9)-(line 296,col 33)",
            "(line 297,col 9)-(line 334,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java",
        "signature": "org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest.testSqrtDefinition()",
        "snippet": "    @Test\n    public void testSqrtDefinition() {\n        double[] epsilon = new double[] { 5.0e-16, 5.0e-16, 2.0e-15, 5.0e-14, 2.0e-12 };\n        for (int maxOrder = 0; maxOrder < 5; ++maxOrder) {\n            for (double x = 0.1; x < 1.2; x += 0.001) {\n                DerivativeStructure dsX = new DerivativeStructure(1, maxOrder, 0, x);\n                DerivativeStructure sqrt1 = dsX.pow(0.5);\n                DerivativeStructure sqrt2 = dsX.sqrt();\n                DerivativeStructure zero = sqrt1.subtract(sqrt2);\n                for (int n = 0; n <= maxOrder; ++n) {\n                    Assert.assertEquals(0, zero.getPartialDerivative(n), epsilon[n]);\n                }\n            }\n        }\n    }\n",
        "begin_line": 337,
        "end_line": 351,
        "comment": "",
        "child_ranges": [
            "(line 339,col 9)-(line 339,col 88)",
            "(line 340,col 9)-(line 350,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java",
        "signature": "org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest.testRootNSingularity()",
        "snippet": "    @Test\n    public void testRootNSingularity() {\n        for (int n = 2; n < 10; ++n) {\n            for (int maxOrder = 0; maxOrder < 12; ++maxOrder) {\n                DerivativeStructure dsZero = new DerivativeStructure(1, maxOrder, 0, 0.0);\n                DerivativeStructure rootN  = dsZero.rootN(n);\n                Assert.assertEquals(0.0, rootN.getValue(), 1.0e-20);\n                if (maxOrder > 0) {\n                    Assert.assertTrue(Double.isInfinite(rootN.getPartialDerivative(1)));\n                    Assert.assertTrue(rootN.getPartialDerivative(1) > 0);\n                    for (int order = 2; order <= maxOrder; ++order) {\n                        // the following checks shows a LIMITATION of the current implementation\n                        // we have no way to tell dsZero is a pure linear variable x = 0\n                        // we only say: \"dsZero is a structure with value = 0.0,\n                        // first derivative = 1.0, second and higher derivatives = 0.0\".\n                        // Function composition rule for second derivatives is:\n                        // d2[f(g(x))]/dx2 = f''(g(x)) * [g'(x)]^2 + f'(g(x)) * g''(x)\n                        // when function f is the nth root and x = 0 we have:\n                        // f(0) = 0, f'(0) = +infinity, f''(0) = -infinity (and higher\n                        // derivatives keep switching between +infinity and -infinity)\n                        // so given that in our case dsZero represents g, we have g(x) = 0,\n                        // g'(x) = 1 and g''(x) = 0\n                        // applying the composition rules gives:\n                        // d2[f(g(x))]/dx2 = f''(g(x)) * [g'(x)]^2 + f'(g(x)) * g''(x)\n                        //                 = -infinity * 1^2 + +infinity * 0\n                        //                 = -infinity + NaN\n                        //                 = NaN\n                        // if we knew dsZero is really the x variable and not the identity\n                        // function applied to x, we would not have computed f'(g(x)) * g''(x)\n                        // and we would have found that the result was -infinity and not NaN\n                        Assert.assertTrue(Double.isNaN(rootN.getPartialDerivative(order)));\n                    }\n                }\n\n                // the following shows that the limitation explained above is NOT a bug...\n                // if we set up the higher order derivatives for g appropriately, we do\n                // compute the higher order derivatives of the composition correctly\n                double[] gDerivatives = new double[ 1 + maxOrder];\n                gDerivatives[0] = 0.0;\n                for (int k = 1; k <= maxOrder; ++k) {\n                    gDerivatives[k] = FastMath.pow(-1.0, k + 1);\n                }\n                DerivativeStructure correctRoot = new DerivativeStructure(1, maxOrder, gDerivatives).rootN(n);\n                Assert.assertEquals(0.0, correctRoot.getValue(), 1.0e-20);\n                if (maxOrder > 0) {\n                    Assert.assertTrue(Double.isInfinite(correctRoot.getPartialDerivative(1)));\n                    Assert.assertTrue(correctRoot.getPartialDerivative(1) > 0);\n                    for (int order = 2; order <= maxOrder; ++order) {\n                        Assert.assertTrue(Double.isInfinite(correctRoot.getPartialDerivative(order)));\n                        if ((order % 2) == 0) {\n                            Assert.assertTrue(correctRoot.getPartialDerivative(order) < 0);\n                        } else {\n                            Assert.assertTrue(correctRoot.getPartialDerivative(order) > 0);\n                        }\n                    }\n                }\n\n            }\n\n        }\n\n    }\n",
        "begin_line": 353,
        "end_line": 414,
        "comment": "",
        "child_ranges": [
            "(line 355,col 9)-(line 412,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java",
        "signature": "org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest.testSqrtPow2()",
        "snippet": "    @Test\n    public void testSqrtPow2() {\n        double[] epsilon = new double[] { 1.0e-16, 3.0e-16, 2.0e-15, 6.0e-14, 6.0e-12 };\n        for (int maxOrder = 0; maxOrder < 5; ++maxOrder) {\n            for (double x = 0.1; x < 1.2; x += 0.001) {\n                DerivativeStructure dsX = new DerivativeStructure(1, maxOrder, 0, x);\n                DerivativeStructure rebuiltX = dsX.multiply(dsX).sqrt();\n                DerivativeStructure zero = rebuiltX.subtract(dsX);\n                for (int n = 0; n <= maxOrder; ++n) {\n                    Assert.assertEquals(0.0, zero.getPartialDerivative(n), epsilon[n]);\n                }\n            }\n        }\n    }\n",
        "begin_line": 416,
        "end_line": 429,
        "comment": "",
        "child_ranges": [
            "(line 418,col 9)-(line 418,col 88)",
            "(line 419,col 9)-(line 428,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java",
        "signature": "org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest.testCbrtDefinition()",
        "snippet": "    @Test\n    public void testCbrtDefinition() {\n        double[] epsilon = new double[] { 4.0e-16, 9.0e-16, 6.0e-15, 2.0e-13, 4.0e-12 };\n        for (int maxOrder = 0; maxOrder < 5; ++maxOrder) {\n            for (double x = 0.1; x < 1.2; x += 0.001) {\n                DerivativeStructure dsX = new DerivativeStructure(1, maxOrder, 0, x);\n                DerivativeStructure cbrt1 = dsX.pow(1.0 / 3.0);\n                DerivativeStructure cbrt2 = dsX.cbrt();\n                DerivativeStructure zero = cbrt1.subtract(cbrt2);\n                for (int n = 0; n <= maxOrder; ++n) {\n                    Assert.assertEquals(0, zero.getPartialDerivative(n), epsilon[n]);\n                }\n            }\n        }\n    }\n",
        "begin_line": 431,
        "end_line": 445,
        "comment": "",
        "child_ranges": [
            "(line 433,col 9)-(line 433,col 88)",
            "(line 434,col 9)-(line 444,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java",
        "signature": "org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest.testCbrtPow3()",
        "snippet": "    @Test\n    public void testCbrtPow3() {\n        double[] epsilon = new double[] { 1.0e-16, 5.0e-16, 8.0e-15, 3.0e-13, 4.0e-11 };\n        for (int maxOrder = 0; maxOrder < 5; ++maxOrder) {\n            for (double x = 0.1; x < 1.2; x += 0.001) {\n                DerivativeStructure dsX = new DerivativeStructure(1, maxOrder, 0, x);\n                DerivativeStructure rebuiltX = dsX.multiply(dsX.multiply(dsX)).cbrt();\n                DerivativeStructure zero = rebuiltX.subtract(dsX);\n                for (int n = 0; n <= maxOrder; ++n) {\n                    Assert.assertEquals(0.0, zero.getPartialDerivative(n), epsilon[n]);\n                }\n            }\n        }\n    }\n",
        "begin_line": 447,
        "end_line": 460,
        "comment": "",
        "child_ranges": [
            "(line 449,col 9)-(line 449,col 88)",
            "(line 450,col 9)-(line 459,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java",
        "signature": "org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest.testPowReciprocalPow()",
        "snippet": "    @Test\n    public void testPowReciprocalPow() {\n        double[] epsilon = new double[] { 2.0e-15, 2.0e-14, 3.0e-13, 8.0e-12, 3.0e-10 };\n        for (int maxOrder = 0; maxOrder < 5; ++maxOrder) {\n            for (double x = 0.1; x < 1.2; x += 0.01) {\n                DerivativeStructure dsX = new DerivativeStructure(2, maxOrder, 0, x);\n                for (double y = 0.1; y < 1.2; y += 0.01) {\n                    DerivativeStructure dsY = new DerivativeStructure(2, maxOrder, 1, y);\n                    DerivativeStructure rebuiltX = dsX.pow(dsY).pow(dsY.reciprocal());\n                    DerivativeStructure zero = rebuiltX.subtract(dsX);\n                    for (int n = 0; n <= maxOrder; ++n) {\n                        for (int m = 0; m <= maxOrder; ++m) {\n                            if (n + m <= maxOrder) {\n                                Assert.assertEquals(0.0, zero.getPartialDerivative(n, m), epsilon[n + m]);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n",
        "begin_line": 462,
        "end_line": 482,
        "comment": "",
        "child_ranges": [
            "(line 464,col 9)-(line 464,col 88)",
            "(line 465,col 9)-(line 481,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java",
        "signature": "org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest.testHypotDefinition()",
        "snippet": "    @Test\n    public void testHypotDefinition() {\n        double epsilon = 1.0e-20;\n        for (int maxOrder = 0; maxOrder < 5; ++maxOrder) {\n            for (double x = -1.7; x < 2; x += 0.2) {\n                DerivativeStructure dsX = new DerivativeStructure(2, maxOrder, 0, x);\n                for (double y = -1.7; y < 2; y += 0.2) {\n                    DerivativeStructure dsY = new DerivativeStructure(2, maxOrder, 1, y);\n                    DerivativeStructure hypot = DerivativeStructure.hypot(dsY, dsX);\n                    DerivativeStructure ref = dsX.multiply(dsX).add(dsY.multiply(dsY)).sqrt();\n                    DerivativeStructure zero = hypot.subtract(ref);\n                    for (int n = 0; n <= maxOrder; ++n) {\n                        for (int m = 0; m <= maxOrder; ++m) {\n                            if (n + m <= maxOrder) {\n                                Assert.assertEquals(0, zero.getPartialDerivative(n, m), epsilon);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n",
        "begin_line": 484,
        "end_line": 505,
        "comment": "",
        "child_ranges": [
            "(line 486,col 9)-(line 486,col 33)",
            "(line 487,col 9)-(line 504,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java",
        "signature": "org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest.testHypotNoOverflow()",
        "snippet": "    @Test\n    public void testHypotNoOverflow() {\n\n        DerivativeStructure dsX = new DerivativeStructure(2, 5, 0, +3.0e250);\n        DerivativeStructure dsY = new DerivativeStructure(2, 5, 1, -4.0e250);\n        DerivativeStructure hypot = DerivativeStructure.hypot(dsX, dsY);\n        Assert.assertEquals(5.0e250, hypot.getValue(), 1.0e235);\n        Assert.assertEquals(dsX.getValue() / hypot.getValue(), hypot.getPartialDerivative(1, 0), 1.0e-10);\n        Assert.assertEquals(dsY.getValue() / hypot.getValue(), hypot.getPartialDerivative(0, 1), 1.0e-10);\n\n        DerivativeStructure sqrt  = dsX.multiply(dsX).add(dsY.multiply(dsY)).sqrt();\n        Assert.assertTrue(Double.isInfinite(sqrt.getValue()));\n\n    }\n",
        "begin_line": 507,
        "end_line": 520,
        "comment": "",
        "child_ranges": [
            "(line 510,col 9)-(line 510,col 77)",
            "(line 511,col 9)-(line 511,col 77)",
            "(line 512,col 9)-(line 512,col 72)",
            "(line 513,col 9)-(line 513,col 64)",
            "(line 514,col 9)-(line 514,col 106)",
            "(line 515,col 9)-(line 515,col 106)",
            "(line 517,col 9)-(line 517,col 84)",
            "(line 518,col 9)-(line 518,col 62)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java",
        "signature": "org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest.testPrimitiveRemainder()",
        "snippet": "    @Test\n    public void testPrimitiveRemainder() {\n        double epsilon = 1.0e-15;\n        for (int maxOrder = 0; maxOrder < 5; ++maxOrder) {\n            for (double x = -1.7; x < 2; x += 0.2) {\n                DerivativeStructure dsX = new DerivativeStructure(2, maxOrder, 0, x);\n                for (double y = -1.7; y < 2; y += 0.2) {\n                    DerivativeStructure remainder = dsX.remainder(y);\n                    DerivativeStructure ref = dsX.subtract(x - (x % y));\n                    DerivativeStructure zero = remainder.subtract(ref);\n                    for (int n = 0; n <= maxOrder; ++n) {\n                        for (int m = 0; m <= maxOrder; ++m) {\n                            if (n + m <= maxOrder) {\n                                Assert.assertEquals(0, zero.getPartialDerivative(n, m), epsilon);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n",
        "begin_line": 522,
        "end_line": 542,
        "comment": "",
        "child_ranges": [
            "(line 524,col 9)-(line 524,col 33)",
            "(line 525,col 9)-(line 541,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java",
        "signature": "org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest.testRemainder()",
        "snippet": "    @Test\n    public void testRemainder() {\n        double epsilon = 1.0e-15;\n        for (int maxOrder = 0; maxOrder < 5; ++maxOrder) {\n            for (double x = -1.7; x < 2; x += 0.2) {\n                DerivativeStructure dsX = new DerivativeStructure(2, maxOrder, 0, x);\n                for (double y = -1.7; y < 2; y += 0.2) {\n                    DerivativeStructure dsY = new DerivativeStructure(2, maxOrder, 1, y);\n                    DerivativeStructure remainder = dsX.remainder(dsY);\n                    DerivativeStructure ref = dsX.subtract(dsY.multiply((x - (x % y)) / y));\n                    DerivativeStructure zero = remainder.subtract(ref);\n                    for (int n = 0; n <= maxOrder; ++n) {\n                        for (int m = 0; m <= maxOrder; ++m) {\n                            if (n + m <= maxOrder) {\n                                Assert.assertEquals(0, zero.getPartialDerivative(n, m), epsilon);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n",
        "begin_line": 544,
        "end_line": 565,
        "comment": "",
        "child_ranges": [
            "(line 546,col 9)-(line 546,col 33)",
            "(line 547,col 9)-(line 564,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java",
        "signature": "org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest.testExp()",
        "snippet": "    @Test\n    public void testExp() {\n        double[] epsilon = new double[] { 1.0e-16, 1.0e-16, 1.0e-16, 1.0e-16, 1.0e-16 };\n        for (int maxOrder = 0; maxOrder < 5; ++maxOrder) {\n            for (double x = 0.1; x < 1.2; x += 0.001) {\n                double refExp = FastMath.exp(x);\n                DerivativeStructure exp = new DerivativeStructure(1, maxOrder, 0, x).exp();\n                for (int n = 0; n <= maxOrder; ++n) {\n                    Assert.assertEquals(refExp, exp.getPartialDerivative(n), epsilon[n]);\n                }\n            }\n        }\n    }\n",
        "begin_line": 567,
        "end_line": 579,
        "comment": "",
        "child_ranges": [
            "(line 569,col 9)-(line 569,col 88)",
            "(line 570,col 9)-(line 578,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java",
        "signature": "org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest.testExpm1Definition()",
        "snippet": "    @Test\n    public void testExpm1Definition() {\n        double epsilon = 3.0e-16;\n        for (int maxOrder = 0; maxOrder < 5; ++maxOrder) {\n            for (double x = 0.1; x < 1.2; x += 0.001) {\n                DerivativeStructure dsX = new DerivativeStructure(1, maxOrder, 0, x);\n                DerivativeStructure expm11 = dsX.expm1();\n                DerivativeStructure expm12 = dsX.exp().subtract(dsX.getField().getOne());\n                DerivativeStructure zero = expm11.subtract(expm12);\n                for (int n = 0; n <= maxOrder; ++n) {\n                    Assert.assertEquals(0, zero.getPartialDerivative(n), epsilon);\n                }\n            }\n        }\n    }\n",
        "begin_line": 581,
        "end_line": 595,
        "comment": "",
        "child_ranges": [
            "(line 583,col 9)-(line 583,col 33)",
            "(line 584,col 9)-(line 594,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java",
        "signature": "org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest.testLog()",
        "snippet": "    @Test\n    public void testLog() {\n        double[] epsilon = new double[] { 1.0e-16, 1.0e-16, 3.0e-14, 7.0e-13, 3.0e-11 };\n        for (int maxOrder = 0; maxOrder < 5; ++maxOrder) {\n            for (double x = 0.1; x < 1.2; x += 0.001) {\n                DerivativeStructure log = new DerivativeStructure(1, maxOrder, 0, x).log();\n                Assert.assertEquals(FastMath.log(x), log.getValue(), epsilon[0]);\n                for (int n = 1; n <= maxOrder; ++n) {\n                    double refDer = -ArithmeticUtils.factorial(n - 1) / FastMath.pow(-x, n);\n                    Assert.assertEquals(refDer, log.getPartialDerivative(n), epsilon[n]);\n                }\n            }\n        }\n    }\n",
        "begin_line": 597,
        "end_line": 610,
        "comment": "",
        "child_ranges": [
            "(line 599,col 9)-(line 599,col 88)",
            "(line 600,col 9)-(line 609,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java",
        "signature": "org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest.testLog1pDefinition()",
        "snippet": "    @Test\n    public void testLog1pDefinition() {\n        double epsilon = 3.0e-16;\n        for (int maxOrder = 0; maxOrder < 5; ++maxOrder) {\n            for (double x = 0.1; x < 1.2; x += 0.001) {\n                DerivativeStructure dsX = new DerivativeStructure(1, maxOrder, 0, x);\n                DerivativeStructure log1p1 = dsX.log1p();\n                DerivativeStructure log1p2 = dsX.add(dsX.getField().getOne()).log();\n                DerivativeStructure zero = log1p1.subtract(log1p2);\n                for (int n = 0; n <= maxOrder; ++n) {\n                    Assert.assertEquals(0, zero.getPartialDerivative(n), epsilon);\n                }\n            }\n        }\n    }\n",
        "begin_line": 612,
        "end_line": 626,
        "comment": "",
        "child_ranges": [
            "(line 614,col 9)-(line 614,col 33)",
            "(line 615,col 9)-(line 625,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java",
        "signature": "org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest.testLog10Definition()",
        "snippet": "    @Test\n    public void testLog10Definition() {\n        double[] epsilon = new double[] { 3.0e-16, 3.0e-16, 8.0e-15, 3.0e-13, 8.0e-12 };\n        for (int maxOrder = 0; maxOrder < 5; ++maxOrder) {\n            for (double x = 0.1; x < 1.2; x += 0.001) {\n                DerivativeStructure dsX = new DerivativeStructure(1, maxOrder, 0, x);\n                DerivativeStructure log101 = dsX.log10();\n                DerivativeStructure log102 = dsX.log().divide(FastMath.log(10.0));\n                DerivativeStructure zero = log101.subtract(log102);\n                for (int n = 0; n <= maxOrder; ++n) {\n                    Assert.assertEquals(0, zero.getPartialDerivative(n), epsilon[n]);\n                }\n            }\n        }\n    }\n",
        "begin_line": 628,
        "end_line": 642,
        "comment": "",
        "child_ranges": [
            "(line 630,col 9)-(line 630,col 88)",
            "(line 631,col 9)-(line 641,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java",
        "signature": "org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest.testLogExp()",
        "snippet": "    @Test\n    public void testLogExp() {\n        double[] epsilon = new double[] { 2.0e-16, 2.0e-16, 3.0e-16, 2.0e-15, 6.0e-15 };\n        for (int maxOrder = 0; maxOrder < 5; ++maxOrder) {\n            for (double x = 0.1; x < 1.2; x += 0.001) {\n                DerivativeStructure dsX = new DerivativeStructure(1, maxOrder, 0, x);\n                DerivativeStructure rebuiltX = dsX.exp().log();\n                DerivativeStructure zero = rebuiltX.subtract(dsX);\n                for (int n = 0; n <= maxOrder; ++n) {\n                    Assert.assertEquals(0.0, zero.getPartialDerivative(n), epsilon[n]);\n                }\n            }\n        }\n    }\n",
        "begin_line": 644,
        "end_line": 657,
        "comment": "",
        "child_ranges": [
            "(line 646,col 9)-(line 646,col 88)",
            "(line 647,col 9)-(line 656,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java",
        "signature": "org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest.testLog1pExpm1()",
        "snippet": "    @Test\n    public void testLog1pExpm1() {\n        double[] epsilon = new double[] { 6.0e-17, 3.0e-16, 5.0e-16, 9.0e-16, 6.0e-15 };\n        for (int maxOrder = 0; maxOrder < 5; ++maxOrder) {\n            for (double x = 0.1; x < 1.2; x += 0.001) {\n                DerivativeStructure dsX = new DerivativeStructure(1, maxOrder, 0, x);\n                DerivativeStructure rebuiltX = dsX.expm1().log1p();\n                DerivativeStructure zero = rebuiltX.subtract(dsX);\n                for (int n = 0; n <= maxOrder; ++n) {\n                    Assert.assertEquals(0.0, zero.getPartialDerivative(n), epsilon[n]);\n                }\n            }\n        }\n    }\n",
        "begin_line": 659,
        "end_line": 672,
        "comment": "",
        "child_ranges": [
            "(line 661,col 9)-(line 661,col 88)",
            "(line 662,col 9)-(line 671,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java",
        "signature": "org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest.testLog10Power()",
        "snippet": "    @Test\n    public void testLog10Power() {\n        double[] epsilon = new double[] { 3.0e-16, 3.0e-16, 9.0e-16, 6.0e-15, 6.0e-14 };\n        for (int maxOrder = 0; maxOrder < 5; ++maxOrder) {\n            for (double x = 0.1; x < 1.2; x += 0.001) {\n                DerivativeStructure dsX = new DerivativeStructure(1, maxOrder, 0, x);\n                DerivativeStructure rebuiltX = new DerivativeStructure(1, maxOrder, 10.0).pow(dsX).log10();\n                DerivativeStructure zero = rebuiltX.subtract(dsX);\n                for (int n = 0; n <= maxOrder; ++n) {\n                    Assert.assertEquals(0, zero.getPartialDerivative(n), epsilon[n]);\n                }\n            }\n        }\n    }\n",
        "begin_line": 674,
        "end_line": 687,
        "comment": "",
        "child_ranges": [
            "(line 676,col 9)-(line 676,col 88)",
            "(line 677,col 9)-(line 686,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java",
        "signature": "org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest.testSinCos()",
        "snippet": "    @Test\n    public void testSinCos() {\n        double epsilon = 5.0e-16;\n        for (int maxOrder = 0; maxOrder < 6; ++maxOrder) {\n            for (double x = 0.1; x < 1.2; x += 0.001) {\n                DerivativeStructure dsX = new DerivativeStructure(1, maxOrder, 0, x);\n                DerivativeStructure sin = dsX.sin();\n                DerivativeStructure cos = dsX.cos();\n                double s = FastMath.sin(x);\n                double c = FastMath.cos(x);\n                for (int n = 0; n <= maxOrder; ++n) {\n                    switch (n % 4) {\n                    case 0 :\n                        Assert.assertEquals( s, sin.getPartialDerivative(n), epsilon);\n                        Assert.assertEquals( c, cos.getPartialDerivative(n), epsilon);\n                        break;\n                    case 1 :\n                        Assert.assertEquals( c, sin.getPartialDerivative(n), epsilon);\n                        Assert.assertEquals(-s, cos.getPartialDerivative(n), epsilon);\n                        break;\n                    case 2 :\n                        Assert.assertEquals(-s, sin.getPartialDerivative(n), epsilon);\n                        Assert.assertEquals(-c, cos.getPartialDerivative(n), epsilon);\n                        break;\n                    default :\n                        Assert.assertEquals(-c, sin.getPartialDerivative(n), epsilon);\n                        Assert.assertEquals( s, cos.getPartialDerivative(n), epsilon);\n                        break;\n                    }\n                }\n            }\n        }\n    }\n",
        "begin_line": 689,
        "end_line": 721,
        "comment": "",
        "child_ranges": [
            "(line 691,col 9)-(line 691,col 33)",
            "(line 692,col 9)-(line 720,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java",
        "signature": "org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest.testSinAsin()",
        "snippet": "    @Test\n    public void testSinAsin() {\n        double[] epsilon = new double[] { 3.0e-16, 5.0e-16, 3.0e-15, 2.0e-14, 4.0e-13 };\n        for (int maxOrder = 0; maxOrder < 5; ++maxOrder) {\n            for (double x = 0.1; x < 1.2; x += 0.001) {\n                DerivativeStructure dsX = new DerivativeStructure(1, maxOrder, 0, x);\n                DerivativeStructure rebuiltX = dsX.sin().asin();\n                DerivativeStructure zero = rebuiltX.subtract(dsX);\n                for (int n = 0; n <= maxOrder; ++n) {\n                    Assert.assertEquals(0.0, zero.getPartialDerivative(n), epsilon[n]);\n                }\n            }\n        }\n    }\n",
        "begin_line": 723,
        "end_line": 736,
        "comment": "",
        "child_ranges": [
            "(line 725,col 9)-(line 725,col 88)",
            "(line 726,col 9)-(line 735,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java",
        "signature": "org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest.testCosAcos()",
        "snippet": "    @Test\n    public void testCosAcos() {\n        double[] epsilon = new double[] { 6.0e-16, 6.0e-15, 2.0e-13, 4.0e-12, 2.0e-10 };\n        for (int maxOrder = 0; maxOrder < 5; ++maxOrder) {\n            for (double x = 0.1; x < 1.2; x += 0.001) {\n                DerivativeStructure dsX = new DerivativeStructure(1, maxOrder, 0, x);\n                DerivativeStructure rebuiltX = dsX.cos().acos();\n                DerivativeStructure zero = rebuiltX.subtract(dsX);\n                for (int n = 0; n <= maxOrder; ++n) {\n                    Assert.assertEquals(0.0, zero.getPartialDerivative(n), epsilon[n]);\n                }\n            }\n        }\n    }\n",
        "begin_line": 738,
        "end_line": 751,
        "comment": "",
        "child_ranges": [
            "(line 740,col 9)-(line 740,col 88)",
            "(line 741,col 9)-(line 750,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java",
        "signature": "org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest.testTanAtan()",
        "snippet": "    @Test\n    public void testTanAtan() {\n        double[] epsilon = new double[] { 6.0e-17, 2.0e-16, 2.0e-15, 4.0e-14, 2.0e-12 };\n        for (int maxOrder = 0; maxOrder < 5; ++maxOrder) {\n            for (double x = 0.1; x < 1.2; x += 0.001) {\n                DerivativeStructure dsX = new DerivativeStructure(1, maxOrder, 0, x);\n                DerivativeStructure rebuiltX = dsX.tan().atan();\n                DerivativeStructure zero = rebuiltX.subtract(dsX);\n                for (int n = 0; n <= maxOrder; ++n) {\n                    Assert.assertEquals(0.0, zero.getPartialDerivative(n), epsilon[n]);\n                }\n            }\n        }\n    }\n",
        "begin_line": 753,
        "end_line": 766,
        "comment": "",
        "child_ranges": [
            "(line 755,col 9)-(line 755,col 88)",
            "(line 756,col 9)-(line 765,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java",
        "signature": "org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest.testTangentDefinition()",
        "snippet": "    @Test\n    public void testTangentDefinition() {\n        double[] epsilon = new double[] { 5.0e-16, 2.0e-15, 3.0e-14, 5.0e-13, 2.0e-11 };\n        for (int maxOrder = 0; maxOrder < 5; ++maxOrder) {\n            for (double x = 0.1; x < 1.2; x += 0.001) {\n                DerivativeStructure dsX = new DerivativeStructure(1, maxOrder, 0, x);\n                DerivativeStructure tan1 = dsX.sin().divide(dsX.cos());\n                DerivativeStructure tan2 = dsX.tan();\n                DerivativeStructure zero = tan1.subtract(tan2);\n                for (int n = 0; n <= maxOrder; ++n) {\n                    Assert.assertEquals(0, zero.getPartialDerivative(n), epsilon[n]);\n                }\n            }\n        }\n    }\n",
        "begin_line": 768,
        "end_line": 782,
        "comment": "",
        "child_ranges": [
            "(line 770,col 9)-(line 770,col 88)",
            "(line 771,col 9)-(line 781,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java",
        "signature": "org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest.testAtan2()",
        "snippet": "    @Test\n    public void testAtan2() {\n        double[] epsilon = new double[] { 5.0e-16, 3.0e-15, 2.2e-14, 1.0e-12, 8.0e-11 };\n        for (int maxOrder = 0; maxOrder < 5; ++maxOrder) {\n            for (double x = -1.7; x < 2; x += 0.2) {\n                DerivativeStructure dsX = new DerivativeStructure(2, maxOrder, 0, x);\n                for (double y = -1.7; y < 2; y += 0.2) {\n                    DerivativeStructure dsY = new DerivativeStructure(2, maxOrder, 1, y);\n                    DerivativeStructure atan2 = DerivativeStructure.atan2(dsY, dsX);\n                    DerivativeStructure ref = dsY.divide(dsX).atan();\n                    if (x < 0) {\n                        ref = (y < 0) ? ref.subtract(FastMath.PI) : ref.add(FastMath.PI);\n                    }\n                    DerivativeStructure zero = atan2.subtract(ref);\n                    for (int n = 0; n <= maxOrder; ++n) {\n                        for (int m = 0; m <= maxOrder; ++m) {\n                            if (n + m <= maxOrder) {\n                                Assert.assertEquals(0, zero.getPartialDerivative(n, m), epsilon[n + m]);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n",
        "begin_line": 784,
        "end_line": 808,
        "comment": "",
        "child_ranges": [
            "(line 786,col 9)-(line 786,col 88)",
            "(line 787,col 9)-(line 807,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java",
        "signature": "org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest.testAtan2SpecialCases()",
        "snippet": "    @Test\n    public void testAtan2SpecialCases() {\n\n        DerivativeStructure pp =\n                DerivativeStructure.atan2(new DerivativeStructure(2, 2, 1, +0.0),\n                                          new DerivativeStructure(2, 2, 1, +0.0));\n        Assert.assertEquals(0, pp.getValue(), 1.0e-15);\n        Assert.assertEquals(+1, FastMath.copySign(1, pp.getValue()), 1.0e-15);\n\n        DerivativeStructure pn =\n                DerivativeStructure.atan2(new DerivativeStructure(2, 2, 1, +0.0),\n                                          new DerivativeStructure(2, 2, 1, -0.0));\n        Assert.assertEquals(FastMath.PI, pn.getValue(), 1.0e-15);\n\n        DerivativeStructure np =\n                DerivativeStructure.atan2(new DerivativeStructure(2, 2, 1, -0.0),\n                                          new DerivativeStructure(2, 2, 1, +0.0));\n        Assert.assertEquals(0, np.getValue(), 1.0e-15);\n        Assert.assertEquals(-1, FastMath.copySign(1, np.getValue()), 1.0e-15);\n\n        DerivativeStructure nn =\n                DerivativeStructure.atan2(new DerivativeStructure(2, 2, 1, -0.0),\n                                          new DerivativeStructure(2, 2, 1, -0.0));\n        Assert.assertEquals(-FastMath.PI, nn.getValue(), 1.0e-15);\n\n    }\n",
        "begin_line": 810,
        "end_line": 835,
        "comment": "",
        "child_ranges": [
            "(line 813,col 9)-(line 815,col 82)",
            "(line 816,col 9)-(line 816,col 55)",
            "(line 817,col 9)-(line 817,col 78)",
            "(line 819,col 9)-(line 821,col 82)",
            "(line 822,col 9)-(line 822,col 65)",
            "(line 824,col 9)-(line 826,col 82)",
            "(line 827,col 9)-(line 827,col 55)",
            "(line 828,col 9)-(line 828,col 78)",
            "(line 830,col 9)-(line 832,col 82)",
            "(line 833,col 9)-(line 833,col 66)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java",
        "signature": "org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest.testSinhDefinition()",
        "snippet": "    @Test\n    public void testSinhDefinition() {\n        double[] epsilon = new double[] { 3.0e-16, 3.0e-16, 5.0e-16, 2.0e-15, 6.0e-15 };\n        for (int maxOrder = 0; maxOrder < 5; ++maxOrder) {\n            for (double x = 0.1; x < 1.2; x += 0.001) {\n                DerivativeStructure dsX = new DerivativeStructure(1, maxOrder, 0, x);\n                DerivativeStructure sinh1 = dsX.exp().subtract(dsX.exp().reciprocal()).multiply(0.5);\n                DerivativeStructure sinh2 = dsX.sinh();\n                DerivativeStructure zero = sinh1.subtract(sinh2);\n                for (int n = 0; n <= maxOrder; ++n) {\n                    Assert.assertEquals(0, zero.getPartialDerivative(n), epsilon[n]);\n                }\n            }\n        }\n    }\n",
        "begin_line": 837,
        "end_line": 851,
        "comment": "",
        "child_ranges": [
            "(line 839,col 9)-(line 839,col 88)",
            "(line 840,col 9)-(line 850,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java",
        "signature": "org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest.testCoshDefinition()",
        "snippet": "    @Test\n    public void testCoshDefinition() {\n        double[] epsilon = new double[] { 3.0e-16, 3.0e-16, 5.0e-16, 2.0e-15, 6.0e-15 };\n        for (int maxOrder = 0; maxOrder < 5; ++maxOrder) {\n            for (double x = 0.1; x < 1.2; x += 0.001) {\n                DerivativeStructure dsX = new DerivativeStructure(1, maxOrder, 0, x);\n                DerivativeStructure cosh1 = dsX.exp().add(dsX.exp().reciprocal()).multiply(0.5);\n                DerivativeStructure cosh2 = dsX.cosh();\n                DerivativeStructure zero = cosh1.subtract(cosh2);\n                for (int n = 0; n <= maxOrder; ++n) {\n                    Assert.assertEquals(0, zero.getPartialDerivative(n), epsilon[n]);\n                }\n            }\n        }\n    }\n",
        "begin_line": 853,
        "end_line": 867,
        "comment": "",
        "child_ranges": [
            "(line 855,col 9)-(line 855,col 88)",
            "(line 856,col 9)-(line 866,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java",
        "signature": "org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest.testTanhDefinition()",
        "snippet": "    @Test\n    public void testTanhDefinition() {\n        double[] epsilon = new double[] { 3.0e-16, 5.0e-16, 7.0e-16, 3.0e-15, 2.0e-14 };\n        for (int maxOrder = 0; maxOrder < 5; ++maxOrder) {\n            for (double x = 0.1; x < 1.2; x += 0.001) {\n                DerivativeStructure dsX = new DerivativeStructure(1, maxOrder, 0, x);\n                DerivativeStructure tanh1 = dsX.exp().subtract(dsX.exp().reciprocal()).divide(dsX.exp().add(dsX.exp().reciprocal()));\n                DerivativeStructure tanh2 = dsX.tanh();\n                DerivativeStructure zero = tanh1.subtract(tanh2);\n                for (int n = 0; n <= maxOrder; ++n) {\n                    Assert.assertEquals(0, zero.getPartialDerivative(n), epsilon[n]);\n                }\n            }\n        }\n    }\n",
        "begin_line": 869,
        "end_line": 883,
        "comment": "",
        "child_ranges": [
            "(line 871,col 9)-(line 871,col 88)",
            "(line 872,col 9)-(line 882,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java",
        "signature": "org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest.testSinhAsinh()",
        "snippet": "    @Test\n    public void testSinhAsinh() {\n        double[] epsilon = new double[] { 3.0e-16, 3.0e-16, 4.0e-16, 7.0e-16, 3.0e-15, 8.0e-15 };\n        for (int maxOrder = 0; maxOrder < 6; ++maxOrder) {\n            for (double x = 0.1; x < 1.2; x += 0.001) {\n                DerivativeStructure dsX = new DerivativeStructure(1, maxOrder, 0, x);\n                DerivativeStructure rebuiltX = dsX.sinh().asinh();\n                DerivativeStructure zero = rebuiltX.subtract(dsX);\n                for (int n = 0; n <= maxOrder; ++n) {\n                    Assert.assertEquals(0.0, zero.getPartialDerivative(n), epsilon[n]);\n                }\n            }\n        }\n    }\n",
        "begin_line": 885,
        "end_line": 898,
        "comment": "",
        "child_ranges": [
            "(line 887,col 9)-(line 887,col 97)",
            "(line 888,col 9)-(line 897,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java",
        "signature": "org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest.testCoshAcosh()",
        "snippet": "    @Test\n    public void testCoshAcosh() {\n        double[] epsilon = new double[] { 2.0e-15, 1.0e-14, 2.0e-13, 6.0e-12, 3.0e-10, 2.0e-8 };\n        for (int maxOrder = 0; maxOrder < 6; ++maxOrder) {\n            for (double x = 0.1; x < 1.2; x += 0.001) {\n                DerivativeStructure dsX = new DerivativeStructure(1, maxOrder, 0, x);\n                DerivativeStructure rebuiltX = dsX.cosh().acosh();\n                DerivativeStructure zero = rebuiltX.subtract(dsX);\n                for (int n = 0; n <= maxOrder; ++n) {\n                    Assert.assertEquals(0.0, zero.getPartialDerivative(n), epsilon[n]);\n                }\n            }\n        }\n    }\n",
        "begin_line": 900,
        "end_line": 913,
        "comment": "",
        "child_ranges": [
            "(line 902,col 9)-(line 902,col 96)",
            "(line 903,col 9)-(line 912,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java",
        "signature": "org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest.testTanhAtanh()",
        "snippet": "    @Test\n    public void testTanhAtanh() {\n        double[] epsilon = new double[] { 3.0e-16, 2.0e-16, 7.0e-16, 4.0e-15, 3.0e-14, 4.0e-13 };\n        for (int maxOrder = 0; maxOrder < 6; ++maxOrder) {\n            for (double x = 0.1; x < 1.2; x += 0.001) {\n                DerivativeStructure dsX = new DerivativeStructure(1, maxOrder, 0, x);\n                DerivativeStructure rebuiltX = dsX.tanh().atanh();\n                DerivativeStructure zero = rebuiltX.subtract(dsX);\n                for (int n = 0; n <= maxOrder; ++n) {\n                    Assert.assertEquals(0.0, zero.getPartialDerivative(n), epsilon[n]);\n                }\n            }\n        }\n    }\n",
        "begin_line": 915,
        "end_line": 928,
        "comment": "",
        "child_ranges": [
            "(line 917,col 9)-(line 917,col 97)",
            "(line 918,col 9)-(line 927,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java",
        "signature": "org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest.testCompositionOneVariableY()",
        "snippet": "    @Test\n    public void testCompositionOneVariableY() {\n        double epsilon = 1.0e-13;\n        for (int maxOrder = 0; maxOrder < 5; ++maxOrder) {\n            for (double x = 0.1; x < 1.2; x += 0.1) {\n                DerivativeStructure dsX = new DerivativeStructure(1, maxOrder, x);\n                for (double y = 0.1; y < 1.2; y += 0.1) {\n                    DerivativeStructure dsY = new DerivativeStructure(1, maxOrder, 0, y);\n                    DerivativeStructure f = dsX.divide(dsY).sqrt();\n                    double f0 = FastMath.sqrt(x / y);\n                    Assert.assertEquals(f0, f.getValue(), FastMath.abs(epsilon * f0));\n                    if (f.getOrder() > 0) {\n                        double f1 = -x / (2 * y * y * f0);\n                        Assert.assertEquals(f1, f.getPartialDerivative(1), FastMath.abs(epsilon * f1));\n                        if (f.getOrder() > 1) {\n                            double f2 = (f0 - x / (4 * y * f0)) / (y * y); \n                            Assert.assertEquals(f2, f.getPartialDerivative(2), FastMath.abs(epsilon * f2));\n                            if (f.getOrder() > 2) {\n                                double f3 = (x / (8 * y * f0) - 2 * f0) / (y * y * y); \n                                Assert.assertEquals(f3, f.getPartialDerivative(3), FastMath.abs(epsilon * f3));\n                            }\n                        }\n                    }\n                }\n            }\n        }        \n    }\n",
        "begin_line": 930,
        "end_line": 956,
        "comment": "",
        "child_ranges": [
            "(line 932,col 9)-(line 932,col 33)",
            "(line 933,col 9)-(line 955,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java",
        "signature": "org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest.testTaylorPolynomial()",
        "snippet": "    @Test\n    public void testTaylorPolynomial() {\n        for (double x = 0; x < 1.2; x += 0.1) {\n            DerivativeStructure dsX = new DerivativeStructure(3, 4, 0, x);\n            for (double y = 0; y < 1.2; y += 0.2) {\n                DerivativeStructure dsY = new DerivativeStructure(3, 4, 1, y);\n                for (double z = 0; z < 1.2; z += 0.2) {\n                    DerivativeStructure dsZ = new DerivativeStructure(3, 4, 2, z);\n                    DerivativeStructure f = dsX.multiply(dsY).add(dsZ).multiply(dsX).multiply(dsY);\n                    for (double dx = -0.2; dx < 0.2; dx += 0.2) {\n                        for (double dy = -0.2; dy < 0.2; dy += 0.1) {\n                            for (double dz = -0.2; dz < 0.2; dz += 0.1) {\n                                double ref = (x + dx) * (y + dy) * ((x + dx) * (y + dy) + (z + dz));\n                                Assert.assertEquals(ref, f.taylor(dx, dy, dz), 2.0e-15);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n",
        "begin_line": 958,
        "end_line": 978,
        "comment": "",
        "child_ranges": [
            "(line 960,col 9)-(line 977,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java",
        "signature": "org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest.testTaylorAtan2()",
        "snippet": "    @Test\n    public void testTaylorAtan2() {\n        double[] expected = new double[] { 0.214, 0.0241, 0.00422, 6.48e-4, 8.04e-5 };\n        double x0 =  0.1;\n        double y0 = -0.3;\n        for (int maxOrder = 0; maxOrder < 5; ++maxOrder) {\n            DerivativeStructure dsX   = new DerivativeStructure(2, maxOrder, 0, x0);\n            DerivativeStructure dsY   = new DerivativeStructure(2, maxOrder, 1, y0);\n            DerivativeStructure atan2 = DerivativeStructure.atan2(dsY, dsX);\n            double maxError = 0;\n            for (double dx = -0.05; dx < 0.05; dx += 0.001) {\n                for (double dy = -0.05; dy < 0.05; dy += 0.001) {\n                    double ref = FastMath.atan2(y0 + dy, x0 + dx);\n                    maxError = FastMath.max(maxError, FastMath.abs(ref - atan2.taylor(dx, dy)));\n                }\n            }\n            Assert.assertEquals(0.0, expected[maxOrder] - maxError, 0.01 * expected[maxOrder]);\n        }\n    }\n",
        "begin_line": 980,
        "end_line": 998,
        "comment": "",
        "child_ranges": [
            "(line 982,col 9)-(line 982,col 86)",
            "(line 983,col 9)-(line 983,col 25)",
            "(line 984,col 9)-(line 984,col 25)",
            "(line 985,col 9)-(line 997,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java",
        "signature": "org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest.testAbs()",
        "snippet": "    @Test\n    public void testAbs() {\n\n        DerivativeStructure minusOne = new DerivativeStructure(1, 1, 0, -1.0);\n        Assert.assertEquals(+1.0, minusOne.abs().getPartialDerivative(0), 1.0e-15);\n        Assert.assertEquals(-1.0, minusOne.abs().getPartialDerivative(1), 1.0e-15);\n\n        DerivativeStructure plusOne = new DerivativeStructure(1, 1, 0, +1.0);\n        Assert.assertEquals(+1.0, plusOne.abs().getPartialDerivative(0), 1.0e-15);\n        Assert.assertEquals(+1.0, plusOne.abs().getPartialDerivative(1), 1.0e-15);\n\n        DerivativeStructure minusZero = new DerivativeStructure(1, 1, 0, -0.0);\n        Assert.assertEquals(+0.0, minusZero.abs().getPartialDerivative(0), 1.0e-15);\n        Assert.assertEquals(-1.0, minusZero.abs().getPartialDerivative(1), 1.0e-15);\n\n        DerivativeStructure plusZero = new DerivativeStructure(1, 1, 0, +0.0);\n        Assert.assertEquals(+0.0, plusZero.abs().getPartialDerivative(0), 1.0e-15);\n        Assert.assertEquals(+1.0, plusZero.abs().getPartialDerivative(1), 1.0e-15);\n\n    }\n",
        "begin_line": 1000,
        "end_line": 1019,
        "comment": "",
        "child_ranges": [
            "(line 1003,col 9)-(line 1003,col 78)",
            "(line 1004,col 9)-(line 1004,col 83)",
            "(line 1005,col 9)-(line 1005,col 83)",
            "(line 1007,col 9)-(line 1007,col 77)",
            "(line 1008,col 9)-(line 1008,col 82)",
            "(line 1009,col 9)-(line 1009,col 82)",
            "(line 1011,col 9)-(line 1011,col 79)",
            "(line 1012,col 9)-(line 1012,col 84)",
            "(line 1013,col 9)-(line 1013,col 84)",
            "(line 1015,col 9)-(line 1015,col 78)",
            "(line 1016,col 9)-(line 1016,col 83)",
            "(line 1017,col 9)-(line 1017,col 83)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java",
        "signature": "org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest.testSignum()",
        "snippet": "    @Test\n    public void testSignum() {\n\n        DerivativeStructure minusOne = new DerivativeStructure(1, 1, 0, -1.0);\n        Assert.assertEquals(-1.0, minusOne.signum().getPartialDerivative(0), 1.0e-15);\n        Assert.assertEquals( 0.0, minusOne.signum().getPartialDerivative(1), 1.0e-15);\n\n        DerivativeStructure plusOne = new DerivativeStructure(1, 1, 0, +1.0);\n        Assert.assertEquals(+1.0, plusOne.signum().getPartialDerivative(0), 1.0e-15);\n        Assert.assertEquals( 0.0, plusOne.signum().getPartialDerivative(1), 1.0e-15);\n\n        DerivativeStructure minusZero = new DerivativeStructure(1, 1, 0, -0.0);\n        Assert.assertEquals(-0.0, minusZero.signum().getPartialDerivative(0), 1.0e-15);\n        Assert.assertTrue(Double.doubleToLongBits(minusZero.signum().getValue()) < 0);\n        Assert.assertEquals( 0.0, minusZero.signum().getPartialDerivative(1), 1.0e-15);\n\n        DerivativeStructure plusZero = new DerivativeStructure(1, 1, 0, +0.0);\n        Assert.assertEquals(+0.0, plusZero.signum().getPartialDerivative(0), 1.0e-15);\n        Assert.assertTrue(Double.doubleToLongBits(plusZero.signum().getValue()) == 0);\n        Assert.assertEquals( 0.0, plusZero.signum().getPartialDerivative(1), 1.0e-15);\n\n    }\n",
        "begin_line": 1021,
        "end_line": 1042,
        "comment": "",
        "child_ranges": [
            "(line 1024,col 9)-(line 1024,col 78)",
            "(line 1025,col 9)-(line 1025,col 86)",
            "(line 1026,col 9)-(line 1026,col 86)",
            "(line 1028,col 9)-(line 1028,col 77)",
            "(line 1029,col 9)-(line 1029,col 85)",
            "(line 1030,col 9)-(line 1030,col 85)",
            "(line 1032,col 9)-(line 1032,col 79)",
            "(line 1033,col 9)-(line 1033,col 87)",
            "(line 1034,col 9)-(line 1034,col 86)",
            "(line 1035,col 9)-(line 1035,col 87)",
            "(line 1037,col 9)-(line 1037,col 78)",
            "(line 1038,col 9)-(line 1038,col 86)",
            "(line 1039,col 9)-(line 1039,col 86)",
            "(line 1040,col 9)-(line 1040,col 86)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java",
        "signature": "org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest.testCeilFloorRintLong()",
        "snippet": "    @Test\n    public void testCeilFloorRintLong() {\n\n        DerivativeStructure x = new DerivativeStructure(1, 1, 0, -1.5);\n        Assert.assertEquals(-1.5, x.getPartialDerivative(0), 1.0e-15);\n        Assert.assertEquals(+1.0, x.getPartialDerivative(1), 1.0e-15);\n        Assert.assertEquals(-1.0, x.ceil().getPartialDerivative(0), 1.0e-15);\n        Assert.assertEquals(+0.0, x.ceil().getPartialDerivative(1), 1.0e-15);\n        Assert.assertEquals(-2.0, x.floor().getPartialDerivative(0), 1.0e-15);\n        Assert.assertEquals(+0.0, x.floor().getPartialDerivative(1), 1.0e-15);\n        Assert.assertEquals(-2.0, x.rint().getPartialDerivative(0), 1.0e-15);\n        Assert.assertEquals(+0.0, x.rint().getPartialDerivative(1), 1.0e-15);\n        Assert.assertEquals(-2.0, x.subtract(x.getField().getOne()).rint().getPartialDerivative(0), 1.0e-15);\n        Assert.assertEquals(-1l, x.round());\n\n    }\n",
        "begin_line": 1044,
        "end_line": 1059,
        "comment": "",
        "child_ranges": [
            "(line 1047,col 9)-(line 1047,col 71)",
            "(line 1048,col 9)-(line 1048,col 70)",
            "(line 1049,col 9)-(line 1049,col 70)",
            "(line 1050,col 9)-(line 1050,col 77)",
            "(line 1051,col 9)-(line 1051,col 77)",
            "(line 1052,col 9)-(line 1052,col 78)",
            "(line 1053,col 9)-(line 1053,col 78)",
            "(line 1054,col 9)-(line 1054,col 77)",
            "(line 1055,col 9)-(line 1055,col 77)",
            "(line 1056,col 9)-(line 1056,col 109)",
            "(line 1057,col 9)-(line 1057,col 44)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java",
        "signature": "org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest.testCopySign()",
        "snippet": "    @Test\n    public void testCopySign() {\n        DerivativeStructure minusOne = new DerivativeStructure(1, 1, 0, -1.0);\n        Assert.assertEquals(+1.0, minusOne.copySign(+1.0).getPartialDerivative(0), 1.0e-15);\n        Assert.assertEquals(-1.0, minusOne.copySign(+1.0).getPartialDerivative(1), 1.0e-15);\n        Assert.assertEquals(-1.0, minusOne.copySign(-1.0).getPartialDerivative(0), 1.0e-15);\n        Assert.assertEquals(+1.0, minusOne.copySign(-1.0).getPartialDerivative(1), 1.0e-15);\n        Assert.assertEquals(+1.0, minusOne.copySign(+0.0).getPartialDerivative(0), 1.0e-15);\n        Assert.assertEquals(-1.0, minusOne.copySign(+0.0).getPartialDerivative(1), 1.0e-15);\n        Assert.assertEquals(-1.0, minusOne.copySign(-0.0).getPartialDerivative(0), 1.0e-15);\n        Assert.assertEquals(+1.0, minusOne.copySign(-0.0).getPartialDerivative(1), 1.0e-15);\n        Assert.assertEquals(+1.0, minusOne.copySign(Double.NaN).getPartialDerivative(0), 1.0e-15);\n        Assert.assertEquals(-1.0, minusOne.copySign(Double.NaN).getPartialDerivative(1), 1.0e-15);\n    }\n",
        "begin_line": 1061,
        "end_line": 1074,
        "comment": "",
        "child_ranges": [
            "(line 1063,col 9)-(line 1063,col 78)",
            "(line 1064,col 9)-(line 1064,col 92)",
            "(line 1065,col 9)-(line 1065,col 92)",
            "(line 1066,col 9)-(line 1066,col 92)",
            "(line 1067,col 9)-(line 1067,col 92)",
            "(line 1068,col 9)-(line 1068,col 92)",
            "(line 1069,col 9)-(line 1069,col 92)",
            "(line 1070,col 9)-(line 1070,col 92)",
            "(line 1071,col 9)-(line 1071,col 92)",
            "(line 1072,col 9)-(line 1072,col 98)",
            "(line 1073,col 9)-(line 1073,col 98)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java",
        "signature": "org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest.testToDegreesDefinition()",
        "snippet": "    @Test\n    public void testToDegreesDefinition() {\n        double epsilon = 3.0e-16;\n        for (int maxOrder = 0; maxOrder < 6; ++maxOrder) {\n            for (double x = 0.1; x < 1.2; x += 0.001) {\n                DerivativeStructure dsX = new DerivativeStructure(1, maxOrder, 0, x);\n                Assert.assertEquals(FastMath.toDegrees(x), dsX.toDegrees().getValue(), epsilon);\n                for (int n = 1; n <= maxOrder; ++n) {\n                    if (n == 1) {\n                        Assert.assertEquals(180 / FastMath.PI, dsX.toDegrees().getPartialDerivative(1), epsilon);\n                    } else {\n                        Assert.assertEquals(0.0, dsX.toDegrees().getPartialDerivative(n), epsilon);\n                    }\n                }\n            }\n        }\n    }\n",
        "begin_line": 1076,
        "end_line": 1092,
        "comment": "",
        "child_ranges": [
            "(line 1078,col 9)-(line 1078,col 33)",
            "(line 1079,col 9)-(line 1091,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java",
        "signature": "org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest.testToRadiansDefinition()",
        "snippet": "    @Test\n    public void testToRadiansDefinition() {\n        double epsilon = 3.0e-16;\n        for (int maxOrder = 0; maxOrder < 6; ++maxOrder) {\n            for (double x = 0.1; x < 1.2; x += 0.001) {\n                DerivativeStructure dsX = new DerivativeStructure(1, maxOrder, 0, x);\n                Assert.assertEquals(FastMath.toRadians(x), dsX.toRadians().getValue(), epsilon);\n                for (int n = 1; n <= maxOrder; ++n) {\n                    if (n == 1) {\n                        Assert.assertEquals(FastMath.PI / 180, dsX.toRadians().getPartialDerivative(1), epsilon);\n                    } else {\n                        Assert.assertEquals(0.0, dsX.toRadians().getPartialDerivative(n), epsilon);\n                    }\n                }\n            }\n        }\n    }\n",
        "begin_line": 1094,
        "end_line": 1110,
        "comment": "",
        "child_ranges": [
            "(line 1096,col 9)-(line 1096,col 33)",
            "(line 1097,col 9)-(line 1109,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java",
        "signature": "org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest.testDegRad()",
        "snippet": "    @Test\n    public void testDegRad() {\n        double epsilon = 3.0e-16;\n        for (int maxOrder = 0; maxOrder < 6; ++maxOrder) {\n            for (double x = 0.1; x < 1.2; x += 0.001) {\n                DerivativeStructure dsX = new DerivativeStructure(1, maxOrder, 0, x);\n                DerivativeStructure rebuiltX = dsX.toDegrees().toRadians();\n                DerivativeStructure zero = rebuiltX.subtract(dsX);\n                for (int n = 0; n <= maxOrder; ++n) {\n                    Assert.assertEquals(0.0, zero.getPartialDerivative(n), epsilon);\n                }\n            }\n        }\n    }\n",
        "begin_line": 1112,
        "end_line": 1125,
        "comment": "",
        "child_ranges": [
            "(line 1114,col 9)-(line 1114,col 33)",
            "(line 1115,col 9)-(line 1124,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java",
        "signature": "org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest.testComposeMismatchedDimensions()",
        "snippet": "    @Test(expected=DimensionMismatchException.class)\n    public void testComposeMismatchedDimensions() {\n        new DerivativeStructure(1, 3, 0, 1.2).compose(new double[3]);\n    }\n",
        "begin_line": 1127,
        "end_line": 1130,
        "comment": "",
        "child_ranges": [
            "(line 1129,col 9)-(line 1129,col 69)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java",
        "signature": "org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest.testCompose()",
        "snippet": "    @Test\n    public void testCompose() {\n        double[] epsilon = new double[] { 1.0e-20, 5.0e-14, 2.0e-13, 3.0e-13, 2.0e-13, 1.0e-20 };\n        PolynomialFunction poly =\n                new PolynomialFunction(new double[] { 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 });\n        for (int maxOrder = 0; maxOrder < 6; ++maxOrder) {\n            PolynomialFunction[] p = new PolynomialFunction[maxOrder + 1];\n            p[0] = poly;\n            for (int i = 1; i <= maxOrder; ++i) {\n                p[i] = p[i - 1].polynomialDerivative();\n            }\n            for (double x = 0.1; x < 1.2; x += 0.001) {\n                DerivativeStructure dsX = new DerivativeStructure(1, maxOrder, 0, x);\n                DerivativeStructure dsY1 = dsX.getField().getZero();\n                for (int i = poly.degree(); i >= 0; --i) {\n                    dsY1 = dsY1.multiply(dsX).add(poly.getCoefficients()[i]);\n                }\n                double[] f = new double[maxOrder + 1];\n                for (int i = 0; i < f.length; ++i) {\n                    f[i] = p[i].value(x);\n                }\n                DerivativeStructure dsY2 = dsX.compose(f);\n                DerivativeStructure zero = dsY1.subtract(dsY2);\n                for (int n = 0; n <= maxOrder; ++n) {\n                    Assert.assertEquals(0.0, zero.getPartialDerivative(n), epsilon[n]);\n                }\n            }\n        }\n    }\n",
        "begin_line": 1132,
        "end_line": 1160,
        "comment": "",
        "child_ranges": [
            "(line 1134,col 9)-(line 1134,col 97)",
            "(line 1135,col 9)-(line 1136,col 86)",
            "(line 1137,col 9)-(line 1159,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java",
        "signature": "org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest.testField()",
        "snippet": "    @Test\n    public void testField() {\n        for (int maxOrder = 1; maxOrder < 5; ++maxOrder) {\n            DerivativeStructure x = new DerivativeStructure(3, maxOrder, 0, 1.0);\n            checkF0F1(x.getField().getZero(), 0.0, 0.0, 0.0, 0.0);\n            checkF0F1(x.getField().getOne(), 1.0, 0.0, 0.0, 0.0);\n            Assert.assertEquals(maxOrder, x.getField().getZero().getOrder());\n            Assert.assertEquals(3, x.getField().getZero().getFreeParameters());\n            Assert.assertEquals(DerivativeStructure.class, x.getField().getRuntimeClass());\n        }\n    }\n",
        "begin_line": 1162,
        "end_line": 1172,
        "comment": "",
        "child_ranges": [
            "(line 1164,col 9)-(line 1171,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java",
        "signature": "org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest.testOneParameterConstructor()",
        "snippet": "    @Test\n    public void testOneParameterConstructor() {\n        double x = 1.2;\n        double cos = FastMath.cos(x);\n        double sin = FastMath.sin(x);\n        DerivativeStructure yRef = new DerivativeStructure(1, 4, 0, x).cos();\n        try {\n            new DerivativeStructure(1, 4, 0.0, 0.0);\n            Assert.fail(\"an exception should have been thrown\");\n        } catch (DimensionMismatchException dme) {\n            // expected\n        } catch (Exception e) {\n            Assert.fail(\"wrong exceptionc caught \" + e.getClass().getName());\n        }\n        double[] derivatives = new double[] { cos, -sin, -cos, sin, cos };\n        DerivativeStructure y = new DerivativeStructure(1,  4, derivatives);\n        checkEquals(yRef, y, 1.0e-15);\n        TestUtils.assertEquals(derivatives, y.getAllDerivatives(), 1.0e-15);\n    }\n",
        "begin_line": 1174,
        "end_line": 1192,
        "comment": "",
        "child_ranges": [
            "(line 1176,col 9)-(line 1176,col 23)",
            "(line 1177,col 9)-(line 1177,col 37)",
            "(line 1178,col 9)-(line 1178,col 37)",
            "(line 1179,col 9)-(line 1179,col 77)",
            "(line 1180,col 9)-(line 1187,col 9)",
            "(line 1188,col 9)-(line 1188,col 74)",
            "(line 1189,col 9)-(line 1189,col 76)",
            "(line 1190,col 9)-(line 1190,col 38)",
            "(line 1191,col 9)-(line 1191,col 76)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java",
        "signature": "org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest.testOneOrderConstructor()",
        "snippet": "    @Test\n    public void testOneOrderConstructor() {\n        double x =  1.2;\n        double y =  2.4;\n        double z = 12.5;\n        DerivativeStructure xRef = new DerivativeStructure(3, 1, 0, x);\n        DerivativeStructure yRef = new DerivativeStructure(3, 1, 1, y);\n        DerivativeStructure zRef = new DerivativeStructure(3, 1, 2, z);\n        try {\n            new DerivativeStructure(3, 1, x + y - z, 1.0, 1.0);\n            Assert.fail(\"an exception should have been thrown\");\n        } catch (DimensionMismatchException dme) {\n            // expected\n        } catch (Exception e) {\n            Assert.fail(\"wrong exceptionc caught \" + e.getClass().getName());\n        }\n        double[] derivatives = new double[] { x + y - z, 1.0, 1.0, -1.0 };\n        DerivativeStructure t = new DerivativeStructure(3, 1, derivatives);\n        checkEquals(xRef.add(yRef.subtract(zRef)), t, 1.0e-15);\n        TestUtils.assertEquals(derivatives, xRef.add(yRef.subtract(zRef)).getAllDerivatives(), 1.0e-15);\n    }\n",
        "begin_line": 1194,
        "end_line": 1214,
        "comment": "",
        "child_ranges": [
            "(line 1196,col 9)-(line 1196,col 24)",
            "(line 1197,col 9)-(line 1197,col 24)",
            "(line 1198,col 9)-(line 1198,col 24)",
            "(line 1199,col 9)-(line 1199,col 71)",
            "(line 1200,col 9)-(line 1200,col 71)",
            "(line 1201,col 9)-(line 1201,col 71)",
            "(line 1202,col 9)-(line 1209,col 9)",
            "(line 1210,col 9)-(line 1210,col 74)",
            "(line 1211,col 9)-(line 1211,col 75)",
            "(line 1212,col 9)-(line 1212,col 63)",
            "(line 1213,col 9)-(line 1213,col 104)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java",
        "signature": "org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest.testSerialization()",
        "snippet": "    @Test\n    public void testSerialization() {\n        DerivativeStructure a = new DerivativeStructure(3, 2, 0, 1.3);\n        DerivativeStructure b = (DerivativeStructure) TestUtils.serializeAndRecover(a);\n        Assert.assertEquals(a.getFreeParameters(), b.getFreeParameters());\n        Assert.assertEquals(a.getOrder(), b.getOrder());\n        checkEquals(a, b, 1.0e-15);\n    }\n",
        "begin_line": 1216,
        "end_line": 1223,
        "comment": "",
        "child_ranges": [
            "(line 1218,col 9)-(line 1218,col 70)",
            "(line 1219,col 9)-(line 1219,col 87)",
            "(line 1220,col 9)-(line 1220,col 74)",
            "(line 1221,col 9)-(line 1221,col 56)",
            "(line 1222,col 9)-(line 1222,col 35)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java",
        "signature": "org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest.checkF0F1(org.apache.commons.math3.analysis.differentiation.DerivativeStructure, double, double...)",
        "snippet": "    private void checkF0F1(DerivativeStructure ds, double value, double...derivatives) {\n\n        // check dimension\n        Assert.assertEquals(derivatives.length, ds.getFreeParameters());\n\n        // check value, directly and also as 0th order derivative\n        Assert.assertEquals(value, ds.getValue(), 1.0e-15);\n        Assert.assertEquals(value, ds.getPartialDerivative(new int[ds.getFreeParameters()]), 1.0e-15);\n\n        // check first order derivatives\n        for (int i = 0; i < derivatives.length; ++i) {\n            int[] orders = new int[derivatives.length];\n            orders[i] = 1;\n            Assert.assertEquals(derivatives[i], ds.getPartialDerivative(orders), 1.0e-15);\n        }\n\n    }\n",
        "begin_line": 1225,
        "end_line": 1241,
        "comment": "",
        "child_ranges": [
            "(line 1228,col 9)-(line 1228,col 72)",
            "(line 1231,col 9)-(line 1231,col 59)",
            "(line 1232,col 9)-(line 1232,col 102)",
            "(line 1235,col 9)-(line 1239,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java",
        "signature": "org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest.checkEquals(org.apache.commons.math3.analysis.differentiation.DerivativeStructure, org.apache.commons.math3.analysis.differentiation.DerivativeStructure, double)",
        "snippet": "    private void checkEquals(DerivativeStructure ds1, DerivativeStructure ds2, double epsilon) {\n\n        // check dimension\n        Assert.assertEquals(ds1.getFreeParameters(), ds2.getFreeParameters());\n        Assert.assertEquals(ds1.getOrder(), ds2.getOrder());\n\n        int[] derivatives = new int[ds1.getFreeParameters()];\n        int sum = 0;\n        while (true) {\n\n            if (sum <= ds1.getOrder()) {\n                Assert.assertEquals(ds1.getPartialDerivative(derivatives),\n                                    ds2.getPartialDerivative(derivatives),\n                                    epsilon);\n            }\n\n            boolean increment = true;\n            sum = 0;\n            for (int i = derivatives.length - 1; i >= 0; --i) {\n                if (increment) {\n                    if (derivatives[i] == ds1.getOrder()) {\n                        derivatives[i] = 0;\n                    } else {\n                        derivatives[i]++;\n                        increment = false;\n                    }\n                }\n                sum += derivatives[i];\n            }\n            if (increment) {\n                return;\n            }\n\n        }\n\n    }\n",
        "begin_line": 1243,
        "end_line": 1278,
        "comment": "",
        "child_ranges": [
            "(line 1246,col 9)-(line 1246,col 78)",
            "(line 1247,col 9)-(line 1247,col 60)",
            "(line 1249,col 9)-(line 1249,col 61)",
            "(line 1250,col 9)-(line 1250,col 20)",
            "(line 1251,col 9)-(line 1276,col 9)"
        ]
    }
]