[
    {
        "class_name": "org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java",
        "signature": "org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest.LevenbergMarquardtOptimizerTest(java.lang.String)",
        "snippet": "    public LevenbergMarquardtOptimizerTest(String name) {\n        super(name);\n    }\n",
        "begin_line": 102,
        "end_line": 104,
        "comment": "",
        "child_ranges": [
            "(line 103,col 9)-(line 103,col 20)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java",
        "signature": "org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest.testTrivial()",
        "snippet": "    public void testTrivial() throws FunctionEvaluationException, OptimizationException {\n        LinearProblem problem =\n            new LinearProblem(new double[][] { { 2 } }, new double[] { 3 });\n        LevenbergMarquardtOptimizer optimizer = new LevenbergMarquardtOptimizer();\n        VectorialPointValuePair optimum =\n            optimizer.optimize(problem, problem.target, new double[] { 1 }, new double[] { 0 });\n        assertEquals(0, optimizer.getRMS(), 1.0e-10);\n        try {\n            optimizer.guessParametersErrors();\n            fail(\"an exception should have been thrown\");\n        } catch (OptimizationException ee) {\n            // expected behavior\n        } catch (Exception e) {\n            fail(\"wrong exception caught\");\n        }\n        assertEquals(1.5, optimum.getPoint()[0], 1.0e-10);\n        assertEquals(3.0, optimum.getValue()[0], 1.0e-10);\n    }\n",
        "begin_line": 106,
        "end_line": 123,
        "comment": "",
        "child_ranges": [
            "(line 107,col 9)-(line 108,col 76)",
            "(line 109,col 9)-(line 109,col 82)",
            "(line 110,col 9)-(line 111,col 96)",
            "(line 112,col 9)-(line 112,col 53)",
            "(line 113,col 9)-(line 120,col 9)",
            "(line 121,col 9)-(line 121,col 58)",
            "(line 122,col 9)-(line 122,col 58)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java",
        "signature": "org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest.testQRColumnsPermutation()",
        "snippet": "    public void testQRColumnsPermutation() throws FunctionEvaluationException, OptimizationException {\n\n        LinearProblem problem =\n            new LinearProblem(new double[][] { { 1.0, -1.0 }, { 0.0, 2.0 }, { 1.0, -2.0 } },\n                              new double[] { 4.0, 6.0, 1.0 });\n\n        LevenbergMarquardtOptimizer optimizer = new LevenbergMarquardtOptimizer();\n        VectorialPointValuePair optimum =\n            optimizer.optimize(problem, problem.target, new double[] { 1, 1, 1 }, new double[] { 0, 0 });\n        assertEquals(0, optimizer.getRMS(), 1.0e-10);\n        assertEquals(7.0, optimum.getPoint()[0], 1.0e-10);\n        assertEquals(3.0, optimum.getPoint()[1], 1.0e-10);\n        assertEquals(4.0, optimum.getValue()[0], 1.0e-10);\n        assertEquals(6.0, optimum.getValue()[1], 1.0e-10);\n        assertEquals(1.0, optimum.getValue()[2], 1.0e-10);\n\n    }\n",
        "begin_line": 125,
        "end_line": 141,
        "comment": "",
        "child_ranges": [
            "(line 127,col 9)-(line 129,col 62)",
            "(line 131,col 9)-(line 131,col 82)",
            "(line 132,col 9)-(line 133,col 105)",
            "(line 134,col 9)-(line 134,col 53)",
            "(line 135,col 9)-(line 135,col 58)",
            "(line 136,col 9)-(line 136,col 58)",
            "(line 137,col 9)-(line 137,col 58)",
            "(line 138,col 9)-(line 138,col 58)",
            "(line 139,col 9)-(line 139,col 58)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java",
        "signature": "org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest.testNoDependency()",
        "snippet": "    public void testNoDependency() throws FunctionEvaluationException, OptimizationException {\n        LinearProblem problem = new LinearProblem(new double[][] {\n                { 2, 0, 0, 0, 0, 0 },\n                { 0, 2, 0, 0, 0, 0 },\n                { 0, 0, 2, 0, 0, 0 },\n                { 0, 0, 0, 2, 0, 0 },\n                { 0, 0, 0, 0, 2, 0 },\n                { 0, 0, 0, 0, 0, 2 }\n        }, new double[] { 0.0, 1.1, 2.2, 3.3, 4.4, 5.5 });\n        LevenbergMarquardtOptimizer optimizer = new LevenbergMarquardtOptimizer();\n        VectorialPointValuePair optimum =\n            optimizer.optimize(problem, problem.target, new double[] { 1, 1, 1, 1, 1, 1 },\n                               new double[] { 0, 0, 0, 0, 0, 0 });\n        assertEquals(0, optimizer.getRMS(), 1.0e-10);\n        for (int i = 0; i < problem.target.length; ++i) {\n            assertEquals(0.55 * i, optimum.getPoint()[i], 1.0e-10);\n        }\n    }\n",
        "begin_line": 143,
        "end_line": 160,
        "comment": "",
        "child_ranges": [
            "(line 144,col 9)-(line 151,col 58)",
            "(line 152,col 9)-(line 152,col 82)",
            "(line 153,col 9)-(line 155,col 66)",
            "(line 156,col 9)-(line 156,col 53)",
            "(line 157,col 9)-(line 159,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java",
        "signature": "org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest.testOneSet()",
        "snippet": "    public void testOneSet() throws FunctionEvaluationException, OptimizationException {\n\n        LinearProblem problem = new LinearProblem(new double[][] {\n                {  1,  0, 0 },\n                { -1,  1, 0 },\n                {  0, -1, 1 }\n        }, new double[] { 1, 1, 1});\n        LevenbergMarquardtOptimizer optimizer = new LevenbergMarquardtOptimizer();\n        VectorialPointValuePair optimum =\n            optimizer.optimize(problem, problem.target, new double[] { 1, 1, 1 }, new double[] { 0, 0, 0 });\n        assertEquals(0, optimizer.getRMS(), 1.0e-10);\n        assertEquals(1.0, optimum.getPoint()[0], 1.0e-10);\n        assertEquals(2.0, optimum.getPoint()[1], 1.0e-10);\n        assertEquals(3.0, optimum.getPoint()[2], 1.0e-10);\n\n    }\n",
        "begin_line": 162,
        "end_line": 177,
        "comment": "",
        "child_ranges": [
            "(line 164,col 9)-(line 168,col 36)",
            "(line 169,col 9)-(line 169,col 82)",
            "(line 170,col 9)-(line 171,col 108)",
            "(line 172,col 9)-(line 172,col 53)",
            "(line 173,col 9)-(line 173,col 58)",
            "(line 174,col 9)-(line 174,col 58)",
            "(line 175,col 9)-(line 175,col 58)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java",
        "signature": "org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest.testTwoSets()",
        "snippet": "    public void testTwoSets() throws FunctionEvaluationException, OptimizationException {\n        double epsilon = 1.0e-7;\n        LinearProblem problem = new LinearProblem(new double[][] {\n                {  2,  1,   0,  4,       0, 0 },\n                { -4, -2,   3, -7,       0, 0 },\n                {  4,  1,  -2,  8,       0, 0 },\n                {  0, -3, -12, -1,       0, 0 },\n                {  0,  0,   0,  0, epsilon, 1 },\n                {  0,  0,   0,  0,       1, 1 }\n        }, new double[] { 2, -9, 2, 2, 1 + epsilon * epsilon, 2});\n\n        LevenbergMarquardtOptimizer optimizer = new LevenbergMarquardtOptimizer();\n        VectorialPointValuePair optimum =\n            optimizer.optimize(problem, problem.target, new double[] { 1, 1, 1, 1, 1, 1 },\n                               new double[] { 0, 0, 0, 0, 0, 0 });\n        assertEquals(0, optimizer.getRMS(), 1.0e-10);\n        assertEquals( 3.0, optimum.getPoint()[0], 1.0e-10);\n        assertEquals( 4.0, optimum.getPoint()[1], 1.0e-10);\n        assertEquals(-1.0, optimum.getPoint()[2], 1.0e-10);\n        assertEquals(-2.0, optimum.getPoint()[3], 1.0e-10);\n        assertEquals( 1.0 + epsilon, optimum.getPoint()[4], 1.0e-10);\n        assertEquals( 1.0 - epsilon, optimum.getPoint()[5], 1.0e-10);\n\n    }\n",
        "begin_line": 179,
        "end_line": 202,
        "comment": "",
        "child_ranges": [
            "(line 180,col 9)-(line 180,col 32)",
            "(line 181,col 9)-(line 188,col 66)",
            "(line 190,col 9)-(line 190,col 82)",
            "(line 191,col 9)-(line 193,col 66)",
            "(line 194,col 9)-(line 194,col 53)",
            "(line 195,col 9)-(line 195,col 59)",
            "(line 196,col 9)-(line 196,col 59)",
            "(line 197,col 9)-(line 197,col 59)",
            "(line 198,col 9)-(line 198,col 59)",
            "(line 199,col 9)-(line 199,col 69)",
            "(line 200,col 9)-(line 200,col 69)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java",
        "signature": "org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest.testNonInversible()",
        "snippet": "    public void testNonInversible() throws FunctionEvaluationException, OptimizationException {\n\n        LinearProblem problem = new LinearProblem(new double[][] {\n                {  1, 2, -3 },\n                {  2, 1,  3 },\n                { -3, 0, -9 }\n        }, new double[] { 1, 1, 1 });\n\n        LevenbergMarquardtOptimizer optimizer = new LevenbergMarquardtOptimizer();\n        optimizer.optimize(problem, problem.target, new double[] { 1, 1, 1 }, new double[] { 0, 0, 0 });\n        assertTrue(Math.sqrt(problem.target.length) * optimizer.getRMS() > 0.6);\n        try {\n            optimizer.getCovariances();\n            fail(\"an exception should have been thrown\");\n        } catch (OptimizationException ee) {\n            // expected behavior\n        } catch (Exception e) {\n            fail(\"wrong exception caught\");\n        }\n\n    }\n",
        "begin_line": 204,
        "end_line": 224,
        "comment": "",
        "child_ranges": [
            "(line 206,col 9)-(line 210,col 37)",
            "(line 212,col 9)-(line 212,col 82)",
            "(line 213,col 9)-(line 213,col 104)",
            "(line 214,col 9)-(line 214,col 80)",
            "(line 215,col 9)-(line 222,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java",
        "signature": "org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest.testIllConditioned()",
        "snippet": "    public void testIllConditioned() throws FunctionEvaluationException, OptimizationException {\n        LinearProblem problem1 = new LinearProblem(new double[][] {\n                { 10.0, 7.0,  8.0,  7.0 },\n                {  7.0, 5.0,  6.0,  5.0 },\n                {  8.0, 6.0, 10.0,  9.0 },\n                {  7.0, 5.0,  9.0, 10.0 }\n        }, new double[] { 32, 23, 33, 31 });\n        LevenbergMarquardtOptimizer optimizer = new LevenbergMarquardtOptimizer();\n        VectorialPointValuePair optimum1 =\n            optimizer.optimize(problem1, problem1.target, new double[] { 1, 1, 1, 1 },\n                               new double[] { 0, 1, 2, 3 });\n        assertEquals(0, optimizer.getRMS(), 1.0e-10);\n        assertEquals(1.0, optimum1.getPoint()[0], 1.0e-10);\n        assertEquals(1.0, optimum1.getPoint()[1], 1.0e-10);\n        assertEquals(1.0, optimum1.getPoint()[2], 1.0e-10);\n        assertEquals(1.0, optimum1.getPoint()[3], 1.0e-10);\n\n        LinearProblem problem2 = new LinearProblem(new double[][] {\n                { 10.00, 7.00, 8.10, 7.20 },\n                {  7.08, 5.04, 6.00, 5.00 },\n                {  8.00, 5.98, 9.89, 9.00 },\n                {  6.99, 4.99, 9.00, 9.98 }\n        }, new double[] { 32, 23, 33, 31 });\n        VectorialPointValuePair optimum2 =\n            optimizer.optimize(problem2, problem2.target, new double[] { 1, 1, 1, 1 },\n                               new double[] { 0, 1, 2, 3 });\n        assertEquals(0, optimizer.getRMS(), 1.0e-10);\n        assertEquals(-81.0, optimum2.getPoint()[0], 1.0e-8);\n        assertEquals(137.0, optimum2.getPoint()[1], 1.0e-8);\n        assertEquals(-34.0, optimum2.getPoint()[2], 1.0e-8);\n        assertEquals( 22.0, optimum2.getPoint()[3], 1.0e-8);\n\n    }\n",
        "begin_line": 226,
        "end_line": 258,
        "comment": "",
        "child_ranges": [
            "(line 227,col 9)-(line 232,col 44)",
            "(line 233,col 9)-(line 233,col 82)",
            "(line 234,col 9)-(line 236,col 60)",
            "(line 237,col 9)-(line 237,col 53)",
            "(line 238,col 9)-(line 238,col 59)",
            "(line 239,col 9)-(line 239,col 59)",
            "(line 240,col 9)-(line 240,col 59)",
            "(line 241,col 9)-(line 241,col 59)",
            "(line 243,col 9)-(line 248,col 44)",
            "(line 249,col 9)-(line 251,col 60)",
            "(line 252,col 9)-(line 252,col 53)",
            "(line 253,col 9)-(line 253,col 60)",
            "(line 254,col 9)-(line 254,col 60)",
            "(line 255,col 9)-(line 255,col 60)",
            "(line 256,col 9)-(line 256,col 60)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java",
        "signature": "org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest.testMoreEstimatedParametersSimple()",
        "snippet": "    public void testMoreEstimatedParametersSimple() throws FunctionEvaluationException, OptimizationException {\n\n        LinearProblem problem = new LinearProblem(new double[][] {\n                { 3.0, 2.0,  0.0, 0.0 },\n                { 0.0, 1.0, -1.0, 1.0 },\n                { 2.0, 0.0,  1.0, 0.0 }\n        }, new double[] { 7.0, 3.0, 5.0 });\n\n        LevenbergMarquardtOptimizer optimizer = new LevenbergMarquardtOptimizer();\n        optimizer.optimize(problem, problem.target, new double[] { 1, 1, 1 },\n                new double[] { 7, 6, 5, 4 });\n        assertEquals(0, optimizer.getRMS(), 1.0e-10);\n\n    }\n",
        "begin_line": 260,
        "end_line": 273,
        "comment": "",
        "child_ranges": [
            "(line 262,col 9)-(line 266,col 43)",
            "(line 268,col 9)-(line 268,col 82)",
            "(line 269,col 9)-(line 270,col 45)",
            "(line 271,col 9)-(line 271,col 53)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java",
        "signature": "org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest.testMoreEstimatedParametersUnsorted()",
        "snippet": "    public void testMoreEstimatedParametersUnsorted() throws FunctionEvaluationException, OptimizationException {\n        LinearProblem problem = new LinearProblem(new double[][] {\n                { 1.0, 1.0,  0.0,  0.0, 0.0,  0.0 },\n                { 0.0, 0.0,  1.0,  1.0, 1.0,  0.0 },\n                { 0.0, 0.0,  0.0,  0.0, 1.0, -1.0 },\n                { 0.0, 0.0, -1.0,  1.0, 0.0,  1.0 },\n                { 0.0, 0.0,  0.0, -1.0, 1.0,  0.0 }\n       }, new double[] { 3.0, 12.0, -1.0, 7.0, 1.0 });\n\n        LevenbergMarquardtOptimizer optimizer = new LevenbergMarquardtOptimizer();\n        VectorialPointValuePair optimum =\n            optimizer.optimize(problem, problem.target, new double[] { 1, 1, 1, 1, 1 },\n                               new double[] { 2, 2, 2, 2, 2, 2 });\n        assertEquals(0, optimizer.getRMS(), 1.0e-10);\n        assertEquals(3.0, optimum.getPointRef()[2], 1.0e-10);\n        assertEquals(4.0, optimum.getPointRef()[3], 1.0e-10);\n        assertEquals(5.0, optimum.getPointRef()[4], 1.0e-10);\n        assertEquals(6.0, optimum.getPointRef()[5], 1.0e-10);\n\n    }\n",
        "begin_line": 275,
        "end_line": 294,
        "comment": "",
        "child_ranges": [
            "(line 276,col 9)-(line 282,col 54)",
            "(line 284,col 9)-(line 284,col 82)",
            "(line 285,col 9)-(line 287,col 66)",
            "(line 288,col 9)-(line 288,col 53)",
            "(line 289,col 9)-(line 289,col 61)",
            "(line 290,col 9)-(line 290,col 61)",
            "(line 291,col 9)-(line 291,col 61)",
            "(line 292,col 9)-(line 292,col 61)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java",
        "signature": "org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest.testRedundantEquations()",
        "snippet": "    public void testRedundantEquations() throws FunctionEvaluationException, OptimizationException {\n        LinearProblem problem = new LinearProblem(new double[][] {\n                { 1.0,  1.0 },\n                { 1.0, -1.0 },\n                { 1.0,  3.0 }\n        }, new double[] { 3.0, 1.0, 5.0 });\n\n        LevenbergMarquardtOptimizer optimizer = new LevenbergMarquardtOptimizer();\n        VectorialPointValuePair optimum =\n            optimizer.optimize(problem, problem.target, new double[] { 1, 1, 1 },\n                               new double[] { 1, 1 });\n        assertEquals(0, optimizer.getRMS(), 1.0e-10);\n        assertEquals(2.0, optimum.getPointRef()[0], 1.0e-10);\n        assertEquals(1.0, optimum.getPointRef()[1], 1.0e-10);\n\n    }\n",
        "begin_line": 296,
        "end_line": 311,
        "comment": "",
        "child_ranges": [
            "(line 297,col 9)-(line 301,col 43)",
            "(line 303,col 9)-(line 303,col 82)",
            "(line 304,col 9)-(line 306,col 54)",
            "(line 307,col 9)-(line 307,col 53)",
            "(line 308,col 9)-(line 308,col 61)",
            "(line 309,col 9)-(line 309,col 61)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java",
        "signature": "org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest.testInconsistentEquations()",
        "snippet": "    public void testInconsistentEquations() throws FunctionEvaluationException, OptimizationException {\n        LinearProblem problem = new LinearProblem(new double[][] {\n                { 1.0,  1.0 },\n                { 1.0, -1.0 },\n                { 1.0,  3.0 }\n        }, new double[] { 3.0, 1.0, 4.0 });\n\n        LevenbergMarquardtOptimizer optimizer = new LevenbergMarquardtOptimizer();\n        optimizer.optimize(problem, problem.target, new double[] { 1, 1, 1 }, new double[] { 1, 1 });\n        assertTrue(optimizer.getRMS() > 0.1);\n\n    }\n",
        "begin_line": 313,
        "end_line": 324,
        "comment": "",
        "child_ranges": [
            "(line 314,col 9)-(line 318,col 43)",
            "(line 320,col 9)-(line 320,col 82)",
            "(line 321,col 9)-(line 321,col 101)",
            "(line 322,col 9)-(line 322,col 45)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java",
        "signature": "org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest.testInconsistentSizes()",
        "snippet": "    public void testInconsistentSizes() throws FunctionEvaluationException, OptimizationException {\n        LinearProblem problem =\n            new LinearProblem(new double[][] { { 1, 0 }, { 0, 1 } }, new double[] { -1, 1 });\n        LevenbergMarquardtOptimizer optimizer = new LevenbergMarquardtOptimizer();\n\n        VectorialPointValuePair optimum =\n            optimizer.optimize(problem, problem.target, new double[] { 1, 1 }, new double[] { 0, 0 });\n        assertEquals(0, optimizer.getRMS(), 1.0e-10);\n        assertEquals(-1, optimum.getPoint()[0], 1.0e-10);\n        assertEquals(+1, optimum.getPoint()[1], 1.0e-10);\n\n        try {\n            optimizer.optimize(problem, problem.target,\n                               new double[] { 1 },\n                               new double[] { 0, 0 });\n            fail(\"an exception should have been thrown\");\n        } catch (OptimizationException oe) {\n            // expected behavior\n        } catch (Exception e) {\n            fail(\"wrong exception caught\");\n        }\n\n        try {\n            optimizer.optimize(problem, new double[] { 1 },\n                               new double[] { 1 },\n                               new double[] { 0, 0 });\n            fail(\"an exception should have been thrown\");\n        } catch (FunctionEvaluationException oe) {\n            // expected behavior\n        } catch (Exception e) {\n            fail(\"wrong exception caught\");\n        }\n\n    }\n",
        "begin_line": 326,
        "end_line": 359,
        "comment": "",
        "child_ranges": [
            "(line 327,col 9)-(line 328,col 93)",
            "(line 329,col 9)-(line 329,col 82)",
            "(line 331,col 9)-(line 332,col 102)",
            "(line 333,col 9)-(line 333,col 53)",
            "(line 334,col 9)-(line 334,col 57)",
            "(line 335,col 9)-(line 335,col 57)",
            "(line 337,col 9)-(line 346,col 9)",
            "(line 348,col 9)-(line 357,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java",
        "signature": "org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest.testControlParameters()",
        "snippet": "    public void testControlParameters() {\n        Circle circle = new Circle();\n        circle.addPoint( 30.0,  68.0);\n        circle.addPoint( 50.0,  -6.0);\n        circle.addPoint(110.0, -20.0);\n        circle.addPoint( 35.0,  15.0);\n        circle.addPoint( 45.0,  97.0);\n        checkEstimate(circle, 0.1, 10, 1.0e-14, 1.0e-16, 1.0e-10, false);\n        checkEstimate(circle, 0.1, 10, 1.0e-15, 1.0e-17, 1.0e-10, true);\n        checkEstimate(circle, 0.1,  5, 1.0e-15, 1.0e-16, 1.0e-10, true);\n        circle.addPoint(300, -300);\n        checkEstimate(circle, 0.1, 20, 1.0e-18, 1.0e-16, 1.0e-10, true);\n    }\n",
        "begin_line": 361,
        "end_line": 373,
        "comment": "",
        "child_ranges": [
            "(line 362,col 9)-(line 362,col 37)",
            "(line 363,col 9)-(line 363,col 38)",
            "(line 364,col 9)-(line 364,col 38)",
            "(line 365,col 9)-(line 365,col 38)",
            "(line 366,col 9)-(line 366,col 38)",
            "(line 367,col 9)-(line 367,col 38)",
            "(line 368,col 9)-(line 368,col 73)",
            "(line 369,col 9)-(line 369,col 72)",
            "(line 370,col 9)-(line 370,col 72)",
            "(line 371,col 9)-(line 371,col 35)",
            "(line 372,col 9)-(line 372,col 72)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java",
        "signature": "org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest.checkEstimate(org.apache.commons.math.analysis.DifferentiableMultivariateVectorialFunction, double, int, double, double, double, boolean)",
        "snippet": "    private void checkEstimate(DifferentiableMultivariateVectorialFunction problem,\n                               double initialStepBoundFactor, int maxCostEval,\n                               double costRelativeTolerance, double parRelativeTolerance,\n                               double orthoTolerance, boolean shouldFail) {\n        try {\n            LevenbergMarquardtOptimizer optimizer = new LevenbergMarquardtOptimizer();\n            optimizer.setInitialStepBoundFactor(initialStepBoundFactor);\n            optimizer.setMaxIterations(maxCostEval);\n            optimizer.setCostRelativeTolerance(costRelativeTolerance);\n            optimizer.setParRelativeTolerance(parRelativeTolerance);\n            optimizer.setOrthoTolerance(orthoTolerance);\n            optimizer.optimize(problem, new double[] { 0, 0, 0, 0, 0 }, new double[] { 1, 1, 1, 1, 1 },\n                               new double[] { 98.680, 47.345 });\n            assertTrue(! shouldFail);\n        } catch (OptimizationException ee) {\n            assertTrue(shouldFail);\n        } catch (FunctionEvaluationException ee) {\n            assertTrue(shouldFail);\n        } catch (Exception e) {\n            fail(\"wrong exception type caught\");\n        }\n    }\n",
        "begin_line": 375,
        "end_line": 396,
        "comment": "",
        "child_ranges": [
            "(line 379,col 9)-(line 395,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java",
        "signature": "org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest.testCircleFitting()",
        "snippet": "    public void testCircleFitting() throws FunctionEvaluationException, OptimizationException {\n        Circle circle = new Circle();\n        circle.addPoint( 30.0,  68.0);\n        circle.addPoint( 50.0,  -6.0);\n        circle.addPoint(110.0, -20.0);\n        circle.addPoint( 35.0,  15.0);\n        circle.addPoint( 45.0,  97.0);\n        LevenbergMarquardtOptimizer optimizer = new LevenbergMarquardtOptimizer();\n        VectorialPointValuePair optimum =\n            optimizer.optimize(circle, new double[] { 0, 0, 0, 0, 0 }, new double[] { 1, 1, 1, 1, 1 },\n                               new double[] { 98.680, 47.345 });\n        assertTrue(optimizer.getEvaluations() < 10);\n        assertTrue(optimizer.getJacobianEvaluations() < 10);\n        double rms = optimizer.getRMS();\n        assertEquals(1.768262623567235,  Math.sqrt(circle.getN()) * rms,  1.0e-10);\n        Point2D.Double center = new Point2D.Double(optimum.getPointRef()[0], optimum.getPointRef()[1]);\n        assertEquals(69.96016176931406, circle.getRadius(center), 1.0e-10);\n        assertEquals(96.07590211815305, center.x,      1.0e-10);\n        assertEquals(48.13516790438953, center.y,      1.0e-10);\n        double[][] cov = optimizer.getCovariances();\n        assertEquals(1.839, cov[0][0], 0.001);\n        assertEquals(0.731, cov[0][1], 0.001);\n        assertEquals(cov[0][1], cov[1][0], 1.0e-14);\n        assertEquals(0.786, cov[1][1], 0.001);\n        double[] errors = optimizer.guessParametersErrors();\n        assertEquals(1.384, errors[0], 0.001);\n        assertEquals(0.905, errors[1], 0.001);\n\n        // add perfect measurements and check errors are reduced\n        double  r = circle.getRadius(center);\n        for (double d= 0; d < 2 * Math.PI; d += 0.01) {\n            circle.addPoint(center.x + r * Math.cos(d), center.y + r * Math.sin(d));\n        }\n        double[] target = new double[circle.getN()];\n        Arrays.fill(target, 0.0);\n        double[] weights = new double[circle.getN()];\n        Arrays.fill(weights, 2.0);\n        optimizer.optimize(circle, target, weights, new double[] { 98.680, 47.345 });\n        cov = optimizer.getCovariances();\n        assertEquals(0.0016, cov[0][0], 0.001);\n        assertEquals(3.2e-7, cov[0][1], 1.0e-9);\n        assertEquals(cov[0][1], cov[1][0], 1.0e-14);\n        assertEquals(0.0016, cov[1][1], 0.001);\n        errors = optimizer.guessParametersErrors();\n        assertEquals(0.004, errors[0], 0.001);\n        assertEquals(0.004, errors[1], 0.001);\n\n    }\n",
        "begin_line": 398,
        "end_line": 445,
        "comment": "",
        "child_ranges": [
            "(line 399,col 9)-(line 399,col 37)",
            "(line 400,col 9)-(line 400,col 38)",
            "(line 401,col 9)-(line 401,col 38)",
            "(line 402,col 9)-(line 402,col 38)",
            "(line 403,col 9)-(line 403,col 38)",
            "(line 404,col 9)-(line 404,col 38)",
            "(line 405,col 9)-(line 405,col 82)",
            "(line 406,col 9)-(line 408,col 64)",
            "(line 409,col 9)-(line 409,col 52)",
            "(line 410,col 9)-(line 410,col 60)",
            "(line 411,col 9)-(line 411,col 40)",
            "(line 412,col 9)-(line 412,col 83)",
            "(line 413,col 9)-(line 413,col 103)",
            "(line 414,col 9)-(line 414,col 75)",
            "(line 415,col 9)-(line 415,col 64)",
            "(line 416,col 9)-(line 416,col 64)",
            "(line 417,col 9)-(line 417,col 52)",
            "(line 418,col 9)-(line 418,col 46)",
            "(line 419,col 9)-(line 419,col 46)",
            "(line 420,col 9)-(line 420,col 52)",
            "(line 421,col 9)-(line 421,col 46)",
            "(line 422,col 9)-(line 422,col 60)",
            "(line 423,col 9)-(line 423,col 46)",
            "(line 424,col 9)-(line 424,col 46)",
            "(line 427,col 9)-(line 427,col 45)",
            "(line 428,col 9)-(line 430,col 9)",
            "(line 431,col 9)-(line 431,col 52)",
            "(line 432,col 9)-(line 432,col 33)",
            "(line 433,col 9)-(line 433,col 53)",
            "(line 434,col 9)-(line 434,col 34)",
            "(line 435,col 9)-(line 435,col 85)",
            "(line 436,col 9)-(line 436,col 41)",
            "(line 437,col 9)-(line 437,col 47)",
            "(line 438,col 9)-(line 438,col 48)",
            "(line 439,col 9)-(line 439,col 52)",
            "(line 440,col 9)-(line 440,col 47)",
            "(line 441,col 9)-(line 441,col 51)",
            "(line 442,col 9)-(line 442,col 46)",
            "(line 443,col 9)-(line 443,col 46)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java",
        "signature": "org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest.testCircleFittingBadInit()",
        "snippet": "    public void testCircleFittingBadInit() throws FunctionEvaluationException, OptimizationException {\n        Circle circle = new Circle();\n        double[][] points = new double[][] {\n                {-0.312967,  0.072366}, {-0.339248,  0.132965}, {-0.379780,  0.202724},\n                {-0.390426,  0.260487}, {-0.361212,  0.328325}, {-0.346039,  0.392619},\n                {-0.280579,  0.444306}, {-0.216035,  0.470009}, {-0.149127,  0.493832},\n                {-0.075133,  0.483271}, {-0.007759,  0.452680}, { 0.060071,  0.410235},\n                { 0.103037,  0.341076}, { 0.118438,  0.273884}, { 0.131293,  0.192201},\n                { 0.115869,  0.129797}, { 0.072223,  0.058396}, { 0.022884,  0.000718},\n                {-0.053355, -0.020405}, {-0.123584, -0.032451}, {-0.216248, -0.032862},\n                {-0.278592, -0.005008}, {-0.337655,  0.056658}, {-0.385899,  0.112526},\n                {-0.405517,  0.186957}, {-0.415374,  0.262071}, {-0.387482,  0.343398},\n                {-0.347322,  0.397943}, {-0.287623,  0.458425}, {-0.223502,  0.475513},\n                {-0.135352,  0.478186}, {-0.061221,  0.483371}, { 0.003711,  0.422737},\n                { 0.065054,  0.375830}, { 0.108108,  0.297099}, { 0.123882,  0.222850},\n                { 0.117729,  0.134382}, { 0.085195,  0.056820}, { 0.029800, -0.019138},\n                {-0.027520, -0.072374}, {-0.102268, -0.091555}, {-0.200299, -0.106578},\n                {-0.292731, -0.091473}, {-0.356288, -0.051108}, {-0.420561,  0.014926},\n                {-0.471036,  0.074716}, {-0.488638,  0.182508}, {-0.485990,  0.254068},\n                {-0.463943,  0.338438}, {-0.406453,  0.404704}, {-0.334287,  0.466119},\n                {-0.254244,  0.503188}, {-0.161548,  0.495769}, {-0.075733,  0.495560},\n                { 0.001375,  0.434937}, { 0.082787,  0.385806}, { 0.115490,  0.323807},\n                { 0.141089,  0.223450}, { 0.138693,  0.131703}, { 0.126415,  0.049174},\n                { 0.066518, -0.010217}, {-0.005184, -0.070647}, {-0.080985, -0.103635},\n                {-0.177377, -0.116887}, {-0.260628, -0.100258}, {-0.335756, -0.056251},\n                {-0.405195, -0.000895}, {-0.444937,  0.085456}, {-0.484357,  0.175597},\n                {-0.472453,  0.248681}, {-0.438580,  0.347463}, {-0.402304,  0.422428},\n                {-0.326777,  0.479438}, {-0.247797,  0.505581}, {-0.152676,  0.519380},\n                {-0.071754,  0.516264}, { 0.015942,  0.472802}, { 0.076608,  0.419077},\n                { 0.127673,  0.330264}, { 0.159951,  0.262150}, { 0.153530,  0.172681},\n                { 0.140653,  0.089229}, { 0.078666,  0.024981}, { 0.023807, -0.037022},\n                {-0.048837, -0.077056}, {-0.127729, -0.075338}, {-0.221271, -0.067526}\n        };\n        double[] target = new double[points.length];\n        Arrays.fill(target, 0.0);\n        double[] weights = new double[points.length];\n        Arrays.fill(weights, 2.0);\n        for (int i = 0; i < points.length; ++i) {\n            circle.addPoint(points[i][0], points[i][1]);\n        }\n        LevenbergMarquardtOptimizer optimizer = new LevenbergMarquardtOptimizer();\n        optimizer.setConvergenceChecker(new SimpleVectorialValueChecker(1.0e-8, 1.0e-8));\n        VectorialPointValuePair optimum =\n            optimizer.optimize(circle, target, weights, new double[] { -12, -12 });\n        Point2D.Double center = new Point2D.Double(optimum.getPointRef()[0], optimum.getPointRef()[1]);\n        assertTrue(optimizer.getEvaluations() < 25);\n        assertTrue(optimizer.getJacobianEvaluations() < 20);\n        assertEquals( 0.043, optimizer.getRMS(), 1.0e-3);\n        assertEquals( 0.292235,  circle.getRadius(center), 1.0e-6);\n        assertEquals(-0.151738,  center.x,      1.0e-6);\n        assertEquals( 0.2075001, center.y,      1.0e-6);\n    }\n",
        "begin_line": 447,
        "end_line": 498,
        "comment": "",
        "child_ranges": [
            "(line 448,col 9)-(line 448,col 37)",
            "(line 449,col 9)-(line 479,col 10)",
            "(line 480,col 9)-(line 480,col 52)",
            "(line 481,col 9)-(line 481,col 33)",
            "(line 482,col 9)-(line 482,col 53)",
            "(line 483,col 9)-(line 483,col 34)",
            "(line 484,col 9)-(line 486,col 9)",
            "(line 487,col 9)-(line 487,col 82)",
            "(line 488,col 9)-(line 488,col 89)",
            "(line 489,col 9)-(line 490,col 83)",
            "(line 491,col 9)-(line 491,col 103)",
            "(line 492,col 9)-(line 492,col 52)",
            "(line 493,col 9)-(line 493,col 60)",
            "(line 494,col 9)-(line 494,col 57)",
            "(line 495,col 9)-(line 495,col 67)",
            "(line 496,col 9)-(line 496,col 56)",
            "(line 497,col 9)-(line 497,col 56)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java",
        "signature": "org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest.testMath199()",
        "snippet": "    public void testMath199() throws FunctionEvaluationException {\n        try {\n            QuadraticProblem problem = new QuadraticProblem();\n            problem.addPoint (0, -3.182591015485607);\n            problem.addPoint (1, -2.5581184967730577);\n            problem.addPoint (2, -2.1488478161387325);\n            problem.addPoint (3, -1.9122489313410047);\n            problem.addPoint (4, 1.7785661310051026);\n            LevenbergMarquardtOptimizer optimizer = new LevenbergMarquardtOptimizer();\n            optimizer.setQRRankingThreshold(0);\n            optimizer.optimize(problem,\n                               new double[] { 0, 0, 0, 0, 0 },\n                               new double[] { 0.0, 4.4e-323, 1.0, 4.4e-323, 0.0 },\n                               new double[] { 0, 0, 0 });\n            fail(\"an exception should have been thrown\");\n        } catch (OptimizationException ee) {\n            // expected behavior\n        }\n\n    }\n",
        "begin_line": 500,
        "end_line": 519,
        "comment": "",
        "child_ranges": [
            "(line 501,col 9)-(line 517,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java",
        "signature": "org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest.LinearProblem.LinearProblem(double[][], double[])",
        "snippet": "        public LinearProblem(double[][] factors, double[] target) {\n            this.factors = new BlockRealMatrix(factors);\n            this.target  = target;\n        }\n",
        "begin_line": 526,
        "end_line": 529,
        "comment": "",
        "child_ranges": [
            "(line 527,col 13)-(line 527,col 56)",
            "(line 528,col 13)-(line 528,col 34)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java",
        "signature": "org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest.LinearProblem.value(double[])",
        "snippet": "        public double[] value(double[] variables) {\n            return factors.operate(variables);\n        }\n",
        "begin_line": 531,
        "end_line": 533,
        "comment": "",
        "child_ranges": [
            "(line 532,col 13)-(line 532,col 46)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java",
        "signature": "org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest.LinearProblem.jacobian()",
        "snippet": "        public MultivariateMatrixFunction jacobian() {\n            return new MultivariateMatrixFunction() {\n                private static final long serialVersionUID = 556396458721526234L;\n                public double[][] value(double[] point) {\n                    return factors.getData();\n                }\n            };\n        }\n",
        "begin_line": 535,
        "end_line": 542,
        "comment": "",
        "child_ranges": [
            "(line 536,col 13)-(line 541,col 14)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java",
        "signature": "org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest.LinearProblem.Anonymous-39b7949f-7781-49ae-aebe-06f1287b9aad.value(double[])",
        "snippet": "                public double[][] value(double[] point) {\n                    return factors.getData();\n                }\n",
        "begin_line": 538,
        "end_line": 540,
        "comment": "",
        "child_ranges": [
            "(line 539,col 21)-(line 539,col 45)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java",
        "signature": "org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest.Circle.Circle()",
        "snippet": "        public Circle() {\n            points  = new ArrayList<Point2D.Double>();\n        }\n",
        "begin_line": 552,
        "end_line": 554,
        "comment": "",
        "child_ranges": [
            "(line 553,col 13)-(line 553,col 54)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java",
        "signature": "org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest.Circle.addPoint(double, double)",
        "snippet": "        public void addPoint(double px, double py) {\n            points.add(new Point2D.Double(px, py));\n        }\n",
        "begin_line": 556,
        "end_line": 558,
        "comment": "",
        "child_ranges": [
            "(line 557,col 13)-(line 557,col 51)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java",
        "signature": "org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest.Circle.getN()",
        "snippet": "        public int getN() {\n            return points.size();\n        }\n",
        "begin_line": 560,
        "end_line": 562,
        "comment": "",
        "child_ranges": [
            "(line 561,col 13)-(line 561,col 33)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java",
        "signature": "org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest.Circle.getRadius(java.awt.geom.Point2D.Double)",
        "snippet": "        public double getRadius(Point2D.Double center) {\n            double r = 0;\n            for (Point2D.Double point : points) {\n                r += point.distance(center);\n            }\n            return r / points.size();\n        }\n",
        "begin_line": 564,
        "end_line": 570,
        "comment": "",
        "child_ranges": [
            "(line 565,col 13)-(line 565,col 25)",
            "(line 566,col 13)-(line 568,col 13)",
            "(line 569,col 13)-(line 569,col 37)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java",
        "signature": "org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest.Circle.jacobian(double[])",
        "snippet": "        private double[][] jacobian(double[] point) {\n\n            int n = points.size();\n            Point2D.Double center = new Point2D.Double(point[0], point[1]);\n\n            // gradient of the optimal radius\n            double dRdX = 0;\n            double dRdY = 0;\n            for (Point2D.Double pk : points) {\n                double dk = pk.distance(center);\n                dRdX += (center.x - pk.x) / dk;\n                dRdY += (center.y - pk.y) / dk;\n            }\n            dRdX /= n;\n            dRdY /= n;\n\n            // jacobian of the radius residuals\n            double[][] jacobian = new double[n][2];\n            for (int i = 0; i < n; ++i) {\n                Point2D.Double pi = points.get(i);\n                double di   = pi.distance(center);\n                jacobian[i][0] = (center.x - pi.x) / di - dRdX;\n                jacobian[i][1] = (center.y - pi.y) / di - dRdY;\n            }\n\n            return jacobian;\n\n        }\n",
        "begin_line": 572,
        "end_line": 599,
        "comment": "",
        "child_ranges": [
            "(line 574,col 13)-(line 574,col 34)",
            "(line 575,col 13)-(line 575,col 75)",
            "(line 578,col 13)-(line 578,col 28)",
            "(line 579,col 13)-(line 579,col 28)",
            "(line 580,col 13)-(line 584,col 13)",
            "(line 585,col 13)-(line 585,col 22)",
            "(line 586,col 13)-(line 586,col 22)",
            "(line 589,col 13)-(line 589,col 51)",
            "(line 590,col 13)-(line 595,col 13)",
            "(line 597,col 13)-(line 597,col 28)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java",
        "signature": "org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest.Circle.value(double[])",
        "snippet": "        public double[] value(double[] variables)\n        throws FunctionEvaluationException, IllegalArgumentException {\n\n            Point2D.Double center = new Point2D.Double(variables[0], variables[1]);\n            double radius = getRadius(center);\n\n            double[] residuals = new double[points.size()];\n            for (int i = 0; i < residuals.length; ++i) {\n                residuals[i] = points.get(i).distance(center) - radius;\n            }\n\n            return residuals;\n\n        }\n",
        "begin_line": 601,
        "end_line": 614,
        "comment": "",
        "child_ranges": [
            "(line 604,col 13)-(line 604,col 83)",
            "(line 605,col 13)-(line 605,col 46)",
            "(line 607,col 13)-(line 607,col 59)",
            "(line 608,col 13)-(line 610,col 13)",
            "(line 612,col 13)-(line 612,col 29)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java",
        "signature": "org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest.Circle.jacobian()",
        "snippet": "        public MultivariateMatrixFunction jacobian() {\n            return new MultivariateMatrixFunction() {\n                private static final long serialVersionUID = -4340046230875165095L;\n                public double[][] value(double[] point) {\n                    return jacobian(point);\n                }\n            };\n        }\n",
        "begin_line": 616,
        "end_line": 623,
        "comment": "",
        "child_ranges": [
            "(line 617,col 13)-(line 622,col 14)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java",
        "signature": "org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest.Circle.Anonymous-3d01ba05-b417-40e1-ba96-559609271a2c.value(double[])",
        "snippet": "                public double[][] value(double[] point) {\n                    return jacobian(point);\n                }\n",
        "begin_line": 619,
        "end_line": 621,
        "comment": "",
        "child_ranges": [
            "(line 620,col 21)-(line 620,col 43)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java",
        "signature": "org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest.QuadraticProblem.QuadraticProblem()",
        "snippet": "        public QuadraticProblem() {\n            x = new ArrayList<Double>();\n            y = new ArrayList<Double>();\n        }\n",
        "begin_line": 633,
        "end_line": 636,
        "comment": "",
        "child_ranges": [
            "(line 634,col 13)-(line 634,col 40)",
            "(line 635,col 13)-(line 635,col 40)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java",
        "signature": "org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest.QuadraticProblem.addPoint(double, double)",
        "snippet": "        public void addPoint(double x, double y) {\n            this.x.add(x);\n            this.y.add(y);\n        }\n",
        "begin_line": 638,
        "end_line": 641,
        "comment": "",
        "child_ranges": [
            "(line 639,col 13)-(line 639,col 26)",
            "(line 640,col 13)-(line 640,col 26)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java",
        "signature": "org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest.QuadraticProblem.jacobian(double[])",
        "snippet": "        private double[][] jacobian(double[] variables) {\n            double[][] jacobian = new double[x.size()][3];\n            for (int i = 0; i < jacobian.length; ++i) {\n                jacobian[i][0] = x.get(i) * x.get(i);\n                jacobian[i][1] = x.get(i);\n                jacobian[i][2] = 1.0;\n            }\n            return jacobian;\n        }\n",
        "begin_line": 643,
        "end_line": 651,
        "comment": "",
        "child_ranges": [
            "(line 644,col 13)-(line 644,col 58)",
            "(line 645,col 13)-(line 649,col 13)",
            "(line 650,col 13)-(line 650,col 28)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java",
        "signature": "org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest.QuadraticProblem.value(double[])",
        "snippet": "        public double[] value(double[] variables) {\n            double[] values = new double[x.size()];\n            for (int i = 0; i < values.length; ++i) {\n                values[i] = (variables[0] * x.get(i) + variables[1]) * x.get(i) + variables[2];\n            }\n            return values;\n        }\n",
        "begin_line": 653,
        "end_line": 659,
        "comment": "",
        "child_ranges": [
            "(line 654,col 13)-(line 654,col 51)",
            "(line 655,col 13)-(line 657,col 13)",
            "(line 658,col 13)-(line 658,col 26)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java",
        "signature": "org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest.QuadraticProblem.jacobian()",
        "snippet": "        public MultivariateMatrixFunction jacobian() {\n            return new MultivariateMatrixFunction() {\n                private static final long serialVersionUID = -8673650298627399464L;\n                public double[][] value(double[] point) {\n                    return jacobian(point);\n                }\n            };\n        }\n",
        "begin_line": 661,
        "end_line": 668,
        "comment": "",
        "child_ranges": [
            "(line 662,col 13)-(line 667,col 14)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java",
        "signature": "org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest.QuadraticProblem.Anonymous-65092fb6-bd2e-4926-8bac-d20d477ae95f.value(double[])",
        "snippet": "                public double[][] value(double[] point) {\n                    return jacobian(point);\n                }\n",
        "begin_line": 664,
        "end_line": 666,
        "comment": "",
        "child_ranges": [
            "(line 665,col 21)-(line 665,col 43)"
        ]
    }
]