[
    {
        "class_name": "org.apache.commons.math.fraction.FractionFormatTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/fraction/FractionFormatTest.java",
        "signature": "org.apache.commons.math.fraction.FractionFormatTest.getLocale()",
        "snippet": "    protected Locale getLocale() {\n        return Locale.getDefault();\n    }\n",
        "begin_line": 30,
        "end_line": 32,
        "comment": "",
        "child_ranges": [
            "(line 31,col 9)-(line 31,col 35)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.fraction.FractionFormatTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/fraction/FractionFormatTest.java",
        "signature": "org.apache.commons.math.fraction.FractionFormatTest.setUp()",
        "snippet": "    protected void setUp() throws Exception {\n        properFormat = FractionFormat.getProperInstance(getLocale());\n        improperFormat = FractionFormat.getImproperInstance(getLocale());\n    }\n",
        "begin_line": 34,
        "end_line": 37,
        "comment": "",
        "child_ranges": [
            "(line 35,col 9)-(line 35,col 69)",
            "(line 36,col 9)-(line 36,col 73)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.fraction.FractionFormatTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/fraction/FractionFormatTest.java",
        "signature": "org.apache.commons.math.fraction.FractionFormatTest.testFormat()",
        "snippet": "    public void testFormat() {\n        Fraction c = new Fraction(1, 2);\n        String expected = \"1 / 2\";\n        \n        String actual = properFormat.format(c); \n        assertEquals(expected, actual);\n\n        actual = improperFormat.format(c);\n        assertEquals(expected, actual);\n    }\n",
        "begin_line": 39,
        "end_line": 48,
        "comment": "",
        "child_ranges": [
            "(line 40,col 9)-(line 40,col 40)",
            "(line 41,col 9)-(line 41,col 34)",
            "(line 43,col 9)-(line 43,col 47)",
            "(line 44,col 9)-(line 44,col 39)",
            "(line 46,col 9)-(line 46,col 42)",
            "(line 47,col 9)-(line 47,col 39)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.fraction.FractionFormatTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/fraction/FractionFormatTest.java",
        "signature": "org.apache.commons.math.fraction.FractionFormatTest.testFormatNegative()",
        "snippet": "    public void testFormatNegative() {\n        Fraction c = new Fraction(-1, 2);\n        String expected = \"-1 / 2\";\n\n        String actual = properFormat.format(c); \n        assertEquals(expected, actual);\n\n        actual = improperFormat.format(c); \n        assertEquals(expected, actual);\n    }\n",
        "begin_line": 50,
        "end_line": 59,
        "comment": "",
        "child_ranges": [
            "(line 51,col 9)-(line 51,col 41)",
            "(line 52,col 9)-(line 52,col 35)",
            "(line 54,col 9)-(line 54,col 47)",
            "(line 55,col 9)-(line 55,col 39)",
            "(line 57,col 9)-(line 57,col 42)",
            "(line 58,col 9)-(line 58,col 39)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.fraction.FractionFormatTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/fraction/FractionFormatTest.java",
        "signature": "org.apache.commons.math.fraction.FractionFormatTest.testFormatZero()",
        "snippet": "    public void testFormatZero() {\n        Fraction c = new Fraction(0, 1);\n        String expected = \"0 / 1\";\n\n        String actual = properFormat.format(c); \n        assertEquals(expected, actual);\n\n        actual = improperFormat.format(c); \n        assertEquals(expected, actual);\n    }\n",
        "begin_line": 61,
        "end_line": 70,
        "comment": "",
        "child_ranges": [
            "(line 62,col 9)-(line 62,col 40)",
            "(line 63,col 9)-(line 63,col 34)",
            "(line 65,col 9)-(line 65,col 47)",
            "(line 66,col 9)-(line 66,col 39)",
            "(line 68,col 9)-(line 68,col 42)",
            "(line 69,col 9)-(line 69,col 39)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.fraction.FractionFormatTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/fraction/FractionFormatTest.java",
        "signature": "org.apache.commons.math.fraction.FractionFormatTest.testFormatImproper()",
        "snippet": "    public void testFormatImproper() {\n        Fraction c = new Fraction(5, 3);\n\n        String actual = properFormat.format(c); \n        assertEquals(\"1 2 / 3\", actual);\n\n        actual = improperFormat.format(c); \n        assertEquals(\"5 / 3\", actual);\n    }\n",
        "begin_line": 72,
        "end_line": 80,
        "comment": "",
        "child_ranges": [
            "(line 73,col 9)-(line 73,col 40)",
            "(line 75,col 9)-(line 75,col 47)",
            "(line 76,col 9)-(line 76,col 40)",
            "(line 78,col 9)-(line 78,col 42)",
            "(line 79,col 9)-(line 79,col 38)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.fraction.FractionFormatTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/fraction/FractionFormatTest.java",
        "signature": "org.apache.commons.math.fraction.FractionFormatTest.testFormatImproperNegative()",
        "snippet": "    public void testFormatImproperNegative() {\n        Fraction c = new Fraction(-5, 3);\n\n        String actual = properFormat.format(c); \n        assertEquals(\"-1 2 / 3\", actual);\n\n        actual = improperFormat.format(c); \n        assertEquals(\"-5 / 3\", actual);\n    }\n",
        "begin_line": 82,
        "end_line": 90,
        "comment": "",
        "child_ranges": [
            "(line 83,col 9)-(line 83,col 41)",
            "(line 85,col 9)-(line 85,col 47)",
            "(line 86,col 9)-(line 86,col 41)",
            "(line 88,col 9)-(line 88,col 42)",
            "(line 89,col 9)-(line 89,col 39)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.fraction.FractionFormatTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/fraction/FractionFormatTest.java",
        "signature": "org.apache.commons.math.fraction.FractionFormatTest.testParse()",
        "snippet": "    public void testParse() {\n        String source = \"1 / 2\";\n\n        try {\n            Fraction c = properFormat.parse(source);\n            assertNotNull(c);\n            assertEquals(1, c.getNumerator());\n            assertEquals(2, c.getDenominator());\n            \n            c = improperFormat.parse(source);\n            assertNotNull(c);\n            assertEquals(1, c.getNumerator());\n            assertEquals(2, c.getDenominator());\n        } catch (ParseException ex) {\n            fail(ex.getMessage());\n        }\n    }\n",
        "begin_line": 92,
        "end_line": 108,
        "comment": "",
        "child_ranges": [
            "(line 93,col 9)-(line 93,col 32)",
            "(line 95,col 9)-(line 107,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.fraction.FractionFormatTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/fraction/FractionFormatTest.java",
        "signature": "org.apache.commons.math.fraction.FractionFormatTest.testParseInteger()",
        "snippet": "    public void testParseInteger() {\n\t\tString source = \"10\";\n    \ttry {\n            Fraction c = properFormat.parse(source);\n            assertNotNull(c);\n            assertEquals(10, c.getNumerator());\n            assertEquals(1, c.getDenominator());\n        } catch (ParseException ex) {\n            fail(ex.getMessage());\n        }\n    \ttry {\n            Fraction c = improperFormat.parse(source);\n            assertNotNull(c);\n            assertEquals(10, c.getNumerator());\n            assertEquals(1, c.getDenominator());\n        } catch (ParseException ex) {\n            fail(ex.getMessage());\n        }\n    }\n",
        "begin_line": 110,
        "end_line": 128,
        "comment": "",
        "child_ranges": [
            "(line 111,col 3)-(line 111,col 23)",
            "(line 112,col 6)-(line 119,col 9)",
            "(line 120,col 6)-(line 127,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.fraction.FractionFormatTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/fraction/FractionFormatTest.java",
        "signature": "org.apache.commons.math.fraction.FractionFormatTest.testParseInvalid()",
        "snippet": "    public void testParseInvalid() {\n\t\tString source = \"a\";\n        String msg = \"should not be able to parse '10 / a'.\";\n    \ttry {\n            properFormat.parse(source);\n\t\t\tfail(msg);\n        } catch (ParseException ex) {\n        \t// success\n        }\n    \ttry {\n            improperFormat.parse(source);\n\t\t\tfail(msg);\n        } catch (ParseException ex) {\n        \t// success\n        }\n    }\n",
        "begin_line": 130,
        "end_line": 145,
        "comment": "",
        "child_ranges": [
            "(line 131,col 3)-(line 131,col 22)",
            "(line 132,col 9)-(line 132,col 61)",
            "(line 133,col 6)-(line 138,col 9)",
            "(line 139,col 6)-(line 144,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.fraction.FractionFormatTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/fraction/FractionFormatTest.java",
        "signature": "org.apache.commons.math.fraction.FractionFormatTest.testParseInvalidDenominator()",
        "snippet": "    public void testParseInvalidDenominator() {\n\t\tString source = \"10 / a\";\n        String msg = \"should not be able to parse '10 / a'.\";\n    \ttry {\n            properFormat.parse(source);\n\t\t\tfail(msg);\n        } catch (ParseException ex) {\n        \t// success\n        }\n    \ttry {\n            improperFormat.parse(source);\n\t\t\tfail(msg);\n        } catch (ParseException ex) {\n        \t// success\n        }\n    }\n",
        "begin_line": 147,
        "end_line": 162,
        "comment": "",
        "child_ranges": [
            "(line 148,col 3)-(line 148,col 27)",
            "(line 149,col 9)-(line 149,col 61)",
            "(line 150,col 6)-(line 155,col 9)",
            "(line 156,col 6)-(line 161,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.fraction.FractionFormatTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/fraction/FractionFormatTest.java",
        "signature": "org.apache.commons.math.fraction.FractionFormatTest.testParseNegative()",
        "snippet": "    public void testParseNegative() {\n\n        try {\n            String source = \"-1 / 2\";\n            Fraction c = properFormat.parse(source);\n            assertNotNull(c);\n            assertEquals(-1, c.getNumerator());\n            assertEquals(2, c.getDenominator());\n            \n            c = improperFormat.parse(source);\n            assertNotNull(c);\n            assertEquals(-1, c.getNumerator());\n            assertEquals(2, c.getDenominator());\n\n            source = \"1 / -2\";\n            c = properFormat.parse(source);\n            assertNotNull(c);\n            assertEquals(-1, c.getNumerator());\n            assertEquals(2, c.getDenominator());\n            \n            c = improperFormat.parse(source);\n            assertNotNull(c);\n            assertEquals(-1, c.getNumerator());\n            assertEquals(2, c.getDenominator());\n        } catch (ParseException ex) {\n            fail(ex.getMessage());\n        }\n    }\n",
        "begin_line": 164,
        "end_line": 191,
        "comment": "",
        "child_ranges": [
            "(line 166,col 9)-(line 190,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.fraction.FractionFormatTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/fraction/FractionFormatTest.java",
        "signature": "org.apache.commons.math.fraction.FractionFormatTest.testParseProper()",
        "snippet": "    public void testParseProper() {\n        String source = \"1 2 / 3\";\n\n        try {\n            Fraction c = properFormat.parse(source);\n            assertNotNull(c);\n            assertEquals(5, c.getNumerator());\n            assertEquals(3, c.getDenominator());\n        } catch (ParseException ex) {\n            fail(ex.getMessage());\n        }\n        \n        try {\n            improperFormat.parse(source);\n            fail(\"invalid improper fraction.\");\n        } catch (ParseException ex) {\n            // success\n        }\n    }\n",
        "begin_line": 193,
        "end_line": 211,
        "comment": "",
        "child_ranges": [
            "(line 194,col 9)-(line 194,col 34)",
            "(line 196,col 9)-(line 203,col 9)",
            "(line 205,col 9)-(line 210,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.fraction.FractionFormatTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/fraction/FractionFormatTest.java",
        "signature": "org.apache.commons.math.fraction.FractionFormatTest.testParseProperNegative()",
        "snippet": "    public void testParseProperNegative() {\n        String source = \"-1 2 / 3\";\n        try {\n            Fraction c = properFormat.parse(source);\n            assertNotNull(c);\n            assertEquals(-5, c.getNumerator());\n            assertEquals(3, c.getDenominator());\n        } catch (ParseException ex) {\n            fail(ex.getMessage());\n        }\n        \n        try {\n            improperFormat.parse(source);\n            fail(\"invalid improper fraction.\");\n        } catch (ParseException ex) {\n            // success\n        }\n    }\n",
        "begin_line": 213,
        "end_line": 230,
        "comment": "",
        "child_ranges": [
            "(line 214,col 9)-(line 214,col 35)",
            "(line 215,col 9)-(line 222,col 9)",
            "(line 224,col 9)-(line 229,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.fraction.FractionFormatTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/fraction/FractionFormatTest.java",
        "signature": "org.apache.commons.math.fraction.FractionFormatTest.testParseProperInvalidMinus()",
        "snippet": "    public void testParseProperInvalidMinus() {\n        String source = \"2 -2 / 3\";\n        try {\n            Fraction c = properFormat.parse(source);\n            fail(\"invalid minus in improper fraction.\");\n        } catch (ParseException ex) {\n            // expected\n        }\n        source = \"2 2 / -3\";\n        try {\n            Fraction c = properFormat.parse(source);\n            fail(\"invalid minus in improper fraction.\");\n        } catch (ParseException ex) {\n            // expected\n        }\n    }\n",
        "begin_line": 232,
        "end_line": 247,
        "comment": "",
        "child_ranges": [
            "(line 233,col 9)-(line 233,col 35)",
            "(line 234,col 9)-(line 239,col 9)",
            "(line 240,col 9)-(line 240,col 28)",
            "(line 241,col 9)-(line 246,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.fraction.FractionFormatTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/fraction/FractionFormatTest.java",
        "signature": "org.apache.commons.math.fraction.FractionFormatTest.testNumeratorFormat()",
        "snippet": "    public void testNumeratorFormat() {\n    \tNumberFormat old = properFormat.getNumeratorFormat();\n        NumberFormat nf = NumberFormat.getInstance();\n        nf.setParseIntegerOnly(true);\n    \tproperFormat.setNumeratorFormat(nf);\n    \tassertEquals(nf, properFormat.getNumeratorFormat());\n    \tproperFormat.setNumeratorFormat(old);\n\n    \told = improperFormat.getNumeratorFormat();\n        nf = NumberFormat.getInstance();\n        nf.setParseIntegerOnly(true);\n    \timproperFormat.setNumeratorFormat(nf);\n    \tassertEquals(nf, improperFormat.getNumeratorFormat());\n    \timproperFormat.setNumeratorFormat(old);\n    }\n",
        "begin_line": 249,
        "end_line": 263,
        "comment": "",
        "child_ranges": [
            "(line 250,col 6)-(line 250,col 58)",
            "(line 251,col 9)-(line 251,col 53)",
            "(line 252,col 9)-(line 252,col 37)",
            "(line 253,col 6)-(line 253,col 41)",
            "(line 254,col 6)-(line 254,col 57)",
            "(line 255,col 6)-(line 255,col 42)",
            "(line 257,col 6)-(line 257,col 47)",
            "(line 258,col 9)-(line 258,col 40)",
            "(line 259,col 9)-(line 259,col 37)",
            "(line 260,col 6)-(line 260,col 43)",
            "(line 261,col 6)-(line 261,col 59)",
            "(line 262,col 6)-(line 262,col 44)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.fraction.FractionFormatTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/fraction/FractionFormatTest.java",
        "signature": "org.apache.commons.math.fraction.FractionFormatTest.testDenominatorFormat()",
        "snippet": "    public void testDenominatorFormat() {\n    \tNumberFormat old = properFormat.getDenominatorFormat();\n        NumberFormat nf = NumberFormat.getInstance();\n        nf.setParseIntegerOnly(true);\n    \tproperFormat.setDenominatorFormat(nf);\n    \tassertEquals(nf, properFormat.getDenominatorFormat());\n    \tproperFormat.setDenominatorFormat(old);\n\n    \told = improperFormat.getDenominatorFormat();\n        nf = NumberFormat.getInstance();\n        nf.setParseIntegerOnly(true);\n    \timproperFormat.setDenominatorFormat(nf);\n    \tassertEquals(nf, improperFormat.getDenominatorFormat());\n    \timproperFormat.setDenominatorFormat(old);\n    }\n",
        "begin_line": 265,
        "end_line": 279,
        "comment": "",
        "child_ranges": [
            "(line 266,col 6)-(line 266,col 60)",
            "(line 267,col 9)-(line 267,col 53)",
            "(line 268,col 9)-(line 268,col 37)",
            "(line 269,col 6)-(line 269,col 43)",
            "(line 270,col 6)-(line 270,col 59)",
            "(line 271,col 6)-(line 271,col 44)",
            "(line 273,col 6)-(line 273,col 49)",
            "(line 274,col 9)-(line 274,col 40)",
            "(line 275,col 9)-(line 275,col 37)",
            "(line 276,col 6)-(line 276,col 45)",
            "(line 277,col 6)-(line 277,col 61)",
            "(line 278,col 6)-(line 278,col 46)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.fraction.FractionFormatTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/fraction/FractionFormatTest.java",
        "signature": "org.apache.commons.math.fraction.FractionFormatTest.testWholeFormat()",
        "snippet": "    public void testWholeFormat() {\n    \tProperFractionFormat format = (ProperFractionFormat)properFormat;\n    \t\n    \tNumberFormat old = format.getWholeFormat();\n        NumberFormat nf = NumberFormat.getInstance();\n        nf.setParseIntegerOnly(true);\n    \tformat.setWholeFormat(nf);\n    \tassertEquals(nf, format.getWholeFormat());\n    \tformat.setWholeFormat(old);\n    }\n",
        "begin_line": 281,
        "end_line": 290,
        "comment": "",
        "child_ranges": [
            "(line 282,col 6)-(line 282,col 70)",
            "(line 284,col 6)-(line 284,col 48)",
            "(line 285,col 9)-(line 285,col 53)",
            "(line 286,col 9)-(line 286,col 37)",
            "(line 287,col 6)-(line 287,col 31)",
            "(line 288,col 6)-(line 288,col 47)",
            "(line 289,col 6)-(line 289,col 32)"
        ]
    }
]