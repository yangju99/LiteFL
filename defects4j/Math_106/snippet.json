[
    {
        "name": "ProperFractionFormat.parse#130",
        "is_bug": true,
        "src_path": "src/java/org/apache/commons/math/fraction/ProperFractionFormat.java",
        "class_name": "org.apache.commons.math.fraction.ProperFractionFormat",
        "signature": "org.apache.commons.math.fraction.ProperFractionFormat.parse(java.lang.String, java.text.ParsePosition)",
        "snippet": "    public Fraction parse(String source, ParsePosition pos) {\n        // try to parse improper fraction\n        Fraction ret = super.parse(source, pos);\n        if (ret != null) {\n            return ret;\n        }\n        \n        int initialIndex = pos.getIndex();\n\n        // parse whitespace\n        parseAndIgnoreWhitespace(source, pos);\n\n        // parse whole\n        Number whole = getWholeFormat().parse(source, pos);\n        if (whole == null) {\n            // invalid integer number\n            // set index back to initial, error index should already be set\n            // character examined.\n            pos.setIndex(initialIndex);\n            return null;\n        }\n\n        // parse whitespace\n        parseAndIgnoreWhitespace(source, pos);\n        \n        // parse numerator\n        Number num = getNumeratorFormat().parse(source, pos);\n        if (num == null) {\n            // invalid integer number\n            // set index back to initial, error index should already be set\n            // character examined.\n            pos.setIndex(initialIndex);\n            return null;\n        }\n        \n            // minus signs should be leading, invalid expression\n\n        // parse '/'\n        int startIndex = pos.getIndex();\n        char c = parseNextCharacter(source, pos);\n        switch (c) {\n        case 0 :\n            // no '/'\n            // return num as a fraction\n            return new Fraction(num.intValue(), 1);\n        case '/' :\n            // found '/', continue parsing denominator\n            break;\n        default :\n            // invalid '/'\n            // set index back to initial, error index should be the last\n            // character examined.\n            pos.setIndex(initialIndex);\n            pos.setErrorIndex(startIndex);\n            return null;\n        }\n\n        // parse whitespace\n        parseAndIgnoreWhitespace(source, pos);\n\n        // parse denominator\n        Number den = getDenominatorFormat().parse(source, pos);\n        if (den == null) {\n            // invalid integer number\n            // set index back to initial, error index should already be set\n            // character examined.\n            pos.setIndex(initialIndex);\n            return null;\n        }\n        \n            // minus signs must be leading, invalid\n\n        int w = whole.intValue();\n        int n = num.intValue();\n        int d = den.intValue();\n        return new Fraction(((Math.abs(w) * d) + n) * MathUtils.sign(w), d);\n    }\n",
        "begin_line": 130,
        "end_line": 206,
        "comment": "\r\n     * Parses a string to produce a {@link Fraction} object.  This method\r\n     * expects the string to be formatted as a proper fraction.\r\n     * <p>\r\n     * Minus signs are only allowed in the whole number part - i.e.,\r\n     * \"-3 1/2\" is legitimate and denotes -7/2, but \"-3 -1/2\" is invalid and\r\n     * will result in a <code>ParseException</code>.\r\n     * \r\n     * @param source the string to parse\r\n     * @param pos input/ouput parsing parameter.\r\n     * @return the parsed {@link Fraction} object.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5773
        },
        "num_failing_tests": 1
    },
    {
        "name": "FractionFormat.parse#259",
        "is_bug": false,
        "src_path": "src/java/org/apache/commons/math/fraction/FractionFormat.java",
        "class_name": "org.apache.commons.math.fraction.FractionFormat",
        "signature": "org.apache.commons.math.fraction.FractionFormat.parse(java.lang.String, java.text.ParsePosition)",
        "snippet": "    public Fraction parse(String source, ParsePosition pos) {\n        int initialIndex = pos.getIndex();\n\n        // parse whitespace\n        parseAndIgnoreWhitespace(source, pos);\n\n        // parse numerator\n        Number num = getNumeratorFormat().parse(source, pos);\n        if (num == null) {\n            // invalid integer number\n            // set index back to initial, error index should already be set\n            // character examined.\n            pos.setIndex(initialIndex);\n            return null;\n        }\n\n        // parse '/'\n        int startIndex = pos.getIndex();\n        char c = parseNextCharacter(source, pos);\n        switch (c) {\n        case 0 :\n            // no '/'\n            // return num as a fraction\n            return new Fraction(num.intValue(), 1);\n        case '/' :\n            // found '/', continue parsing denominator\n            break;\n        default :\n            // invalid '/'\n            // set index back to initial, error index should be the last\n            // character examined.\n            pos.setIndex(initialIndex);\n            pos.setErrorIndex(startIndex);\n            return null;\n        }\n\n        // parse whitespace\n        parseAndIgnoreWhitespace(source, pos);\n\n        // parse denominator\n        Number den = getDenominatorFormat().parse(source, pos);\n        if (den == null) {\n            // invalid integer number\n            // set index back to initial, error index should already be set\n            // character examined.\n            pos.setIndex(initialIndex);\n            return null;\n        }\n\n        return new Fraction(num.intValue(), den.intValue());\n    }\n",
        "begin_line": 259,
        "end_line": 309,
        "comment": "\r\n     * Parses a string to produce a {@link Fraction} object.  This method\r\n     * expects the string to be formatted as an improper fraction.  \r\n     * @param source the string to parse\r\n     * @param pos input/ouput parsing parameter.\r\n     * @return the parsed {@link Fraction} object.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5773
        },
        "num_failing_tests": 1
    },
    {
        "name": "FractionFormat.parse#242",
        "is_bug": false,
        "src_path": "src/java/org/apache/commons/math/fraction/FractionFormat.java",
        "class_name": "org.apache.commons.math.fraction.FractionFormat",
        "signature": "org.apache.commons.math.fraction.FractionFormat.parse(java.lang.String)",
        "snippet": "    public Fraction parse(String source) throws ParseException {\n        ParsePosition parsePosition = new ParsePosition(0);\n        Fraction result = parse(source, parsePosition);\n        if (parsePosition.getIndex() == 0) {\n            throw new ParseException(\"Unparseable fraction number: \\\"\" +\n                source + \"\\\"\", parsePosition.getErrorIndex());\n        }\n        return result;\n    }\n",
        "begin_line": 242,
        "end_line": 250,
        "comment": "\r\n     * Parses a string to produce a {@link Fraction} object.\r\n     * @param source the string to parse\r\n     * @return the parsed {@link Fraction} object.\r\n     * @exception ParseException if the beginning of the specified string\r\n     *            cannot be parsed.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4082
        },
        "num_failing_tests": 1
    },
    {
        "name": "FractionFormat.parseNextCharacter#369",
        "is_bug": false,
        "src_path": "src/java/org/apache/commons/math/fraction/FractionFormat.java",
        "class_name": "org.apache.commons.math.fraction.FractionFormat",
        "signature": "org.apache.commons.math.fraction.FractionFormat.parseNextCharacter(java.lang.String, java.text.ParsePosition)",
        "snippet": "    protected static char parseNextCharacter(String source, ParsePosition pos) {\n         int index = pos.getIndex();\n         int n = source.length();\n         char ret = 0;\n\n         if (index < n) {\n             char c;\n             do {\n                 c = source.charAt(index++);\n             } while (Character.isWhitespace(c) && index < n);\n             pos.setIndex(index);\n         \n             if (index < n) {\n                 ret = c;\n             }\n         }\n         \n         return ret;\n    }\n",
        "begin_line": 369,
        "end_line": 387,
        "comment": "\r\n     * Parses <code>source</code> until a non-whitespace character is found.\r\n     * @param source the string to parse\r\n     * @param pos input/ouput parsing parameter.\r\n     * @return the first non-whitespace character.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.378
        },
        "num_failing_tests": 1
    },
    {
        "name": "ProperFractionFormat.getWholeFormat#114",
        "is_bug": false,
        "src_path": "src/java/org/apache/commons/math/fraction/ProperFractionFormat.java",
        "class_name": "org.apache.commons.math.fraction.ProperFractionFormat",
        "signature": "org.apache.commons.math.fraction.ProperFractionFormat.getWholeFormat()",
        "snippet": "    public NumberFormat getWholeFormat() {\n        return wholeFormat;\n    }\n",
        "begin_line": 114,
        "end_line": 116,
        "comment": "\r\n     * Access the whole format.\r\n     * @return the whole format.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3536
        },
        "num_failing_tests": 1
    },
    {
        "name": "FractionFormat.parseAndIgnoreWhitespace#356",
        "is_bug": false,
        "src_path": "src/java/org/apache/commons/math/fraction/FractionFormat.java",
        "class_name": "org.apache.commons.math.fraction.FractionFormat",
        "signature": "org.apache.commons.math.fraction.FractionFormat.parseAndIgnoreWhitespace(java.lang.String, java.text.ParsePosition)",
        "snippet": "    protected static void parseAndIgnoreWhitespace(\n        String source, ParsePosition pos)\n    {\n        parseNextCharacter(source, pos);\n        pos.setIndex(pos.getIndex() - 1);\n    }\n",
        "begin_line": 356,
        "end_line": 361,
        "comment": "\r\n     * Parses <code>source</code> until a non-whitespace character is found.\r\n     * @param source the string to parse\r\n     * @param pos input/ouput parsing parameter.  On output, <code>pos</code>\r\n     *        holds the index of the next non-whitespace character.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3536
        },
        "num_failing_tests": 1
    },
    {
        "name": "FractionFormat.getDenominatorFormat#223",
        "is_bug": false,
        "src_path": "src/java/org/apache/commons/math/fraction/FractionFormat.java",
        "class_name": "org.apache.commons.math.fraction.FractionFormat",
        "signature": "org.apache.commons.math.fraction.FractionFormat.getDenominatorFormat()",
        "snippet": "    public NumberFormat getDenominatorFormat() {\n        return denominatorFormat;\n    }\n",
        "begin_line": 223,
        "end_line": 225,
        "comment": "\r\n     * Access the denominator format.\r\n     * @return the denominator format.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2887
        },
        "num_failing_tests": 1
    },
    {
        "name": "FractionFormat.getNumeratorFormat#231",
        "is_bug": false,
        "src_path": "src/java/org/apache/commons/math/fraction/FractionFormat.java",
        "class_name": "org.apache.commons.math.fraction.FractionFormat",
        "signature": "org.apache.commons.math.fraction.FractionFormat.getNumeratorFormat()",
        "snippet": "    public NumberFormat getNumeratorFormat() {\n        return numeratorFormat;\n    }\n",
        "begin_line": 231,
        "end_line": 233,
        "comment": "\r\n     * Access the numerator format.\r\n     * @return the numerator format.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2673
        },
        "num_failing_tests": 1
    },
    {
        "name": "ProperFractionFormat.ProperFractionFormat#57",
        "is_bug": false,
        "src_path": "src/java/org/apache/commons/math/fraction/ProperFractionFormat.java",
        "class_name": "org.apache.commons.math.fraction.ProperFractionFormat",
        "signature": "org.apache.commons.math.fraction.ProperFractionFormat.ProperFractionFormat(java.text.NumberFormat)",
        "snippet": "    public ProperFractionFormat(NumberFormat format) {\n        this(format, (NumberFormat)format.clone(), (NumberFormat)format.clone());\n    }\n",
        "begin_line": 57,
        "end_line": 59,
        "comment": "\r\n     * Create a proper formatting instance with a custom number format for the\r\n     * whole, numerator, and denominator.\r\n     * @param format the custom format for the whole, numerator, and\r\n     *        denominator.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.25
        },
        "num_failing_tests": 1
    },
    {
        "name": "ProperFractionFormat.ProperFractionFormat#68",
        "is_bug": false,
        "src_path": "src/java/org/apache/commons/math/fraction/ProperFractionFormat.java",
        "class_name": "org.apache.commons.math.fraction.ProperFractionFormat",
        "signature": "org.apache.commons.math.fraction.ProperFractionFormat.ProperFractionFormat(java.text.NumberFormat, java.text.NumberFormat, java.text.NumberFormat)",
        "snippet": "    public ProperFractionFormat(NumberFormat wholeFormat,\n            NumberFormat numeratorFormat,\n            NumberFormat denominatorFormat)\n    {\n        super(numeratorFormat, denominatorFormat);\n        setWholeFormat(wholeFormat);\n    }\n",
        "begin_line": 68,
        "end_line": 74,
        "comment": "\r\n     * Create a proper formatting instance with a custom number format for each\r\n     * of the whole, numerator, and denominator.\r\n     * @param wholeFormat the custom format for the whole.\r\n     * @param numeratorFormat the custom format for the numerator.\r\n     * @param denominatorFormat the custom format for the denominator.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.25
        },
        "num_failing_tests": 1
    },
    {
        "name": "ProperFractionFormat.setWholeFormat#214",
        "is_bug": false,
        "src_path": "src/java/org/apache/commons/math/fraction/ProperFractionFormat.java",
        "class_name": "org.apache.commons.math.fraction.ProperFractionFormat",
        "signature": "org.apache.commons.math.fraction.ProperFractionFormat.setWholeFormat(java.text.NumberFormat)",
        "snippet": "    public void setWholeFormat(NumberFormat format) {\n        if (format == null) {\n            throw new IllegalArgumentException(\n                \"whole format can not be null.\");\n        }\n        this.wholeFormat = format;\n    }\n",
        "begin_line": 214,
        "end_line": 220,
        "comment": "\r\n     * Modify the whole format.\r\n     * @param format The new whole format value.\r\n     * @throws IllegalArgumentException if <code>format</code> is\r\n     *         <code>null</code>.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.25
        },
        "num_failing_tests": 1
    },
    {
        "name": "FractionFormat.FractionFormat#61",
        "is_bug": false,
        "src_path": "src/java/org/apache/commons/math/fraction/FractionFormat.java",
        "class_name": "org.apache.commons.math.fraction.FractionFormat",
        "signature": "org.apache.commons.math.fraction.FractionFormat.FractionFormat(java.text.NumberFormat)",
        "snippet": "    public FractionFormat(NumberFormat format) {\n        this(format, (NumberFormat)format.clone());\n    }\n",
        "begin_line": 61,
        "end_line": 63,
        "comment": "\r\n     * Create an improper formatting instance with a custom number format for\r\n     * both the numerator and denominator.\r\n     * @param format the custom format for both the numerator and denominator.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.25
        },
        "num_failing_tests": 1
    },
    {
        "name": "FractionFormat.FractionFormat#71",
        "is_bug": false,
        "src_path": "src/java/org/apache/commons/math/fraction/FractionFormat.java",
        "class_name": "org.apache.commons.math.fraction.FractionFormat",
        "signature": "org.apache.commons.math.fraction.FractionFormat.FractionFormat(java.text.NumberFormat, java.text.NumberFormat)",
        "snippet": "    public FractionFormat(NumberFormat numeratorFormat,\n            NumberFormat denominatorFormat)\n    {\n        super();\n        this.numeratorFormat = numeratorFormat;\n        this.denominatorFormat = denominatorFormat;\n    }\n",
        "begin_line": 71,
        "end_line": 77,
        "comment": "\r\n     * Create an improper formatting instance with a custom number format for\r\n     * the numerator and a custom number format for the denominator.\r\n     * @param numeratorFormat the custom format for the numerator.\r\n     * @param denominatorFormat the custom format for the denominator.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.25
        },
        "num_failing_tests": 1
    },
    {
        "name": "FractionFormat.getImproperInstance#112",
        "is_bug": false,
        "src_path": "src/java/org/apache/commons/math/fraction/FractionFormat.java",
        "class_name": "org.apache.commons.math.fraction.FractionFormat",
        "signature": "org.apache.commons.math.fraction.FractionFormat.getImproperInstance(java.util.Locale)",
        "snippet": "    public static FractionFormat getImproperInstance(Locale locale) {\n        NumberFormat f = getDefaultNumberFormat(locale);\n        return new FractionFormat(f);\n    }\n",
        "begin_line": 112,
        "end_line": 115,
        "comment": "\r\n     * Returns the default complex format for the given locale.\r\n     * @param locale the specific locale used by the format.\r\n     * @return the complex format specific to the given locale.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.25
        },
        "num_failing_tests": 1
    },
    {
        "name": "FractionFormat.getProperInstance#130",
        "is_bug": false,
        "src_path": "src/java/org/apache/commons/math/fraction/FractionFormat.java",
        "class_name": "org.apache.commons.math.fraction.FractionFormat",
        "signature": "org.apache.commons.math.fraction.FractionFormat.getProperInstance(java.util.Locale)",
        "snippet": "    public static FractionFormat getProperInstance(Locale locale) {\n        NumberFormat f = getDefaultNumberFormat(locale);\n        return new ProperFractionFormat(f);\n    }\n",
        "begin_line": 130,
        "end_line": 133,
        "comment": "\r\n     * Returns the default complex format for the given locale.\r\n     * @param locale the specific locale used by the format.\r\n     * @return the complex format specific to the given locale.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.25
        },
        "num_failing_tests": 1
    },
    {
        "name": "FractionFormat.getDefaultNumberFormat#152",
        "is_bug": false,
        "src_path": "src/java/org/apache/commons/math/fraction/FractionFormat.java",
        "class_name": "org.apache.commons.math.fraction.FractionFormat",
        "signature": "org.apache.commons.math.fraction.FractionFormat.getDefaultNumberFormat(java.util.Locale)",
        "snippet": "    private static NumberFormat getDefaultNumberFormat(Locale locale) {\n        NumberFormat nf = NumberFormat.getNumberInstance(locale);\n        nf.setMaximumFractionDigits(0);\n        nf.setParseIntegerOnly(true);\n        return nf;\n    }\n",
        "begin_line": 152,
        "end_line": 157,
        "comment": "\r\n     * Create a default number format.  The default number format is based on\r\n     * {@link NumberFormat#getNumberInstance(java.util.Locale)} with the only\r\n     * customizing is the maximum number of fraction digits, which is set to 0.  \r\n     * @param locale the specific locale used by the format.\r\n     * @return the default number format specific to the given locale.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.25
        },
        "num_failing_tests": 1
    }
]