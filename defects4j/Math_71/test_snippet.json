[
    {
        "class_name": "org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java",
        "signature": "org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest.ClassicalRungeKuttaIntegratorTest(java.lang.String)",
        "snippet": "  public ClassicalRungeKuttaIntegratorTest(String name) {\n    super(name);\n  }\n",
        "begin_line": 40,
        "end_line": 42,
        "comment": "",
        "child_ranges": [
            "(line 41,col 5)-(line 41,col 16)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java",
        "signature": "org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest.testMissedEndEvent()",
        "snippet": "  public void testMissedEndEvent() throws IntegratorException, DerivativeException {\n      final double   t0     = 1878250320.0000029;\n      final double   tEvent = 1878250379.9999986;\n      final double[] k      = { 1.0e-4, 1.0e-5, 1.0e-6 };\n      FirstOrderDifferentialEquations ode = new FirstOrderDifferentialEquations() {\n\n          public int getDimension() {\n              return k.length;\n          }\n\n          public void computeDerivatives(double t, double[] y, double[] yDot) {\n              for (int i = 0; i < y.length; ++i) {\n                  yDot[i] = k[i] * y[i];\n              }\n          }\n      };\n\n      ClassicalRungeKuttaIntegrator integrator = new ClassicalRungeKuttaIntegrator(60.0);\n\n      double[] y0   = new double[k.length];\n      for (int i = 0; i < y0.length; ++i) {\n          y0[i] = i + 1;\n      }\n      double[] y    = new double[k.length];\n\n      double finalT = integrator.integrate(ode, t0, y0, tEvent, y);\n      Assert.assertEquals(tEvent, finalT, 5.0e-6);\n      for (int i = 0; i < y.length; ++i) {\n          Assert.assertEquals(y0[i] * Math.exp(k[i] * (finalT - t0)), y[i], 1.0e-9);\n      }\n\n      integrator.addEventHandler(new EventHandler() {\n\n          public void resetState(double t, double[] y) {\n          }\n\n          public double g(double t, double[] y) {\n              return t - tEvent;\n          }\n\n          public int eventOccurred(double t, double[] y, boolean increasing) {\n              Assert.assertEquals(tEvent, t, 5.0e-6);\n              return CONTINUE;\n          }\n      }, Double.POSITIVE_INFINITY, 1.0e-20, 100);\n      finalT = integrator.integrate(ode, t0, y0, tEvent + 120, y);\n      Assert.assertEquals(tEvent + 120, finalT, 5.0e-6);\n      for (int i = 0; i < y.length; ++i) {\n          Assert.assertEquals(y0[i] * Math.exp(k[i] * (finalT - t0)), y[i], 1.0e-9);\n      }\n\n  }\n",
        "begin_line": 44,
        "end_line": 95,
        "comment": "",
        "child_ranges": [
            "(line 45,col 7)-(line 45,col 49)",
            "(line 46,col 7)-(line 46,col 49)",
            "(line 47,col 7)-(line 47,col 57)",
            "(line 48,col 7)-(line 59,col 8)",
            "(line 61,col 7)-(line 61,col 89)",
            "(line 63,col 7)-(line 63,col 43)",
            "(line 64,col 7)-(line 66,col 7)",
            "(line 67,col 7)-(line 67,col 43)",
            "(line 69,col 7)-(line 69,col 67)",
            "(line 70,col 7)-(line 70,col 50)",
            "(line 71,col 7)-(line 73,col 7)",
            "(line 75,col 7)-(line 88,col 49)",
            "(line 89,col 7)-(line 89,col 66)",
            "(line 90,col 7)-(line 90,col 56)",
            "(line 91,col 7)-(line 93,col 7)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java",
        "signature": "org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest.Anonymous-a84b5b77-1d7e-40c4-8feb-ecc78b633970.getDimension()",
        "snippet": "          public int getDimension() {\n              return k.length;\n          }\n",
        "begin_line": 50,
        "end_line": 52,
        "comment": "",
        "child_ranges": [
            "(line 51,col 15)-(line 51,col 30)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java",
        "signature": "org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest.Anonymous-8bbe9974-d998-428e-999f-a14881fb244a.computeDerivatives(double, double[], double[])",
        "snippet": "          public void computeDerivatives(double t, double[] y, double[] yDot) {\n              for (int i = 0; i < y.length; ++i) {\n                  yDot[i] = k[i] * y[i];\n              }\n          }\n",
        "begin_line": 54,
        "end_line": 58,
        "comment": "",
        "child_ranges": [
            "(line 55,col 15)-(line 57,col 15)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java",
        "signature": "org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest.Anonymous-43c00a6f-943c-4076-a627-36018530a8bd.resetState(double, double[])",
        "snippet": "          public void resetState(double t, double[] y) {\n          }\n",
        "begin_line": 77,
        "end_line": 78,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java",
        "signature": "org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest.Anonymous-34cf6777-5023-49cf-960a-2de97d7a0dc2.g(double, double[])",
        "snippet": "          public double g(double t, double[] y) {\n              return t - tEvent;\n          }\n",
        "begin_line": 80,
        "end_line": 82,
        "comment": "",
        "child_ranges": [
            "(line 81,col 15)-(line 81,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java",
        "signature": "org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest.Anonymous-44b9231e-b56a-421a-9a09-61b177b5d271.eventOccurred(double, double[], boolean)",
        "snippet": "          public int eventOccurred(double t, double[] y, boolean increasing) {\n              Assert.assertEquals(tEvent, t, 5.0e-6);\n              return CONTINUE;\n          }\n",
        "begin_line": 84,
        "end_line": 87,
        "comment": "",
        "child_ranges": [
            "(line 85,col 15)-(line 85,col 53)",
            "(line 86,col 15)-(line 86,col 30)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java",
        "signature": "org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest.testSanityChecks()",
        "snippet": "  public void testSanityChecks() {\n    try  {\n      TestProblem1 pb = new TestProblem1();\n      new ClassicalRungeKuttaIntegrator(0.01).integrate(pb,\n                                                        0.0, new double[pb.getDimension()+10],\n                                                        1.0, new double[pb.getDimension()]);\n        fail(\"an exception should have been thrown\");\n    } catch(DerivativeException de) {\n      fail(\"wrong exception caught\");\n    } catch(IntegratorException ie) {\n    }\n    try  {\n        TestProblem1 pb = new TestProblem1();\n        new ClassicalRungeKuttaIntegrator(0.01).integrate(pb,\n                                                          0.0, new double[pb.getDimension()],\n                                                          1.0, new double[pb.getDimension()+10]);\n          fail(\"an exception should have been thrown\");\n      } catch(DerivativeException de) {\n        fail(\"wrong exception caught\");\n      } catch(IntegratorException ie) {\n      }\n    try  {\n      TestProblem1 pb = new TestProblem1();\n      new ClassicalRungeKuttaIntegrator(0.01).integrate(pb,\n                                                        0.0, new double[pb.getDimension()],\n                                                        0.0, new double[pb.getDimension()]);\n        fail(\"an exception should have been thrown\");\n    } catch(DerivativeException de) {\n      fail(\"wrong exception caught\");\n    } catch(IntegratorException ie) {\n    }\n  }\n",
        "begin_line": 97,
        "end_line": 128,
        "comment": "",
        "child_ranges": [
            "(line 98,col 5)-(line 107,col 5)",
            "(line 108,col 5)-(line 117,col 7)",
            "(line 118,col 5)-(line 127,col 5)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java",
        "signature": "org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest.testDecreasingSteps()",
        "snippet": "  public void testDecreasingSteps()\n    throws DerivativeException, IntegratorException  {\n\n    TestProblemAbstract[] problems = TestProblemFactory.getProblems();\n    for (int k = 0; k < problems.length; ++k) {\n\n      double previousError = Double.NaN;\n      for (int i = 4; i < 10; ++i) {\n\n        TestProblemAbstract pb = problems[k].copy();\n        double step = (pb.getFinalTime() - pb.getInitialTime()) * Math.pow(2.0, -i);\n\n        FirstOrderIntegrator integ = new ClassicalRungeKuttaIntegrator(step);\n        TestProblemHandler handler = new TestProblemHandler(pb, integ);\n        integ.addStepHandler(handler);\n        EventHandler[] functions = pb.getEventsHandlers();\n        for (int l = 0; l < functions.length; ++l) {\n          integ.addEventHandler(functions[l],\n                                     Double.POSITIVE_INFINITY, 1.0e-6 * step, 1000);\n        }\n        assertEquals(functions.length, integ.getEventHandlers().size());\n        double stopTime = integ.integrate(pb, pb.getInitialTime(), pb.getInitialState(),\n                                          pb.getFinalTime(), new double[pb.getDimension()]);\n        if (functions.length == 0) {\n            assertEquals(pb.getFinalTime(), stopTime, 1.0e-10);\n        }\n\n        double error = handler.getMaximalValueError();\n        if (i > 4) {\n          assertTrue(error < Math.abs(previousError));\n        }\n        previousError = error;\n        assertEquals(0, handler.getMaximalTimeError(), 1.0e-12);\n        integ.clearEventHandlers();\n        assertEquals(0, integ.getEventHandlers().size());\n      }\n\n    }\n\n  }\n",
        "begin_line": 130,
        "end_line": 169,
        "comment": "",
        "child_ranges": [
            "(line 133,col 5)-(line 133,col 70)",
            "(line 134,col 5)-(line 167,col 5)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java",
        "signature": "org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest.testSmallStep()",
        "snippet": "  public void testSmallStep()\n    throws DerivativeException, IntegratorException {\n\n    TestProblem1 pb = new TestProblem1();\n    double step = (pb.getFinalTime() - pb.getInitialTime()) * 0.001;\n\n    FirstOrderIntegrator integ = new ClassicalRungeKuttaIntegrator(step);\n    TestProblemHandler handler = new TestProblemHandler(pb, integ);\n    integ.addStepHandler(handler);\n    integ.integrate(pb, pb.getInitialTime(), pb.getInitialState(),\n                    pb.getFinalTime(), new double[pb.getDimension()]);\n\n    assertTrue(handler.getLastError() < 2.0e-13);\n    assertTrue(handler.getMaximalValueError() < 4.0e-12);\n    assertEquals(0, handler.getMaximalTimeError(), 1.0e-12);\n    assertEquals(\"classical Runge-Kutta\", integ.getName());\n  }\n",
        "begin_line": 171,
        "end_line": 187,
        "comment": "",
        "child_ranges": [
            "(line 174,col 5)-(line 174,col 41)",
            "(line 175,col 5)-(line 175,col 68)",
            "(line 177,col 5)-(line 177,col 73)",
            "(line 178,col 5)-(line 178,col 67)",
            "(line 179,col 5)-(line 179,col 34)",
            "(line 180,col 5)-(line 181,col 70)",
            "(line 183,col 5)-(line 183,col 49)",
            "(line 184,col 5)-(line 184,col 57)",
            "(line 185,col 5)-(line 185,col 60)",
            "(line 186,col 5)-(line 186,col 59)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java",
        "signature": "org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest.testBigStep()",
        "snippet": "  public void testBigStep()\n    throws DerivativeException, IntegratorException {\n\n    TestProblem1 pb = new TestProblem1();\n    double step = (pb.getFinalTime() - pb.getInitialTime()) * 0.2;\n\n    FirstOrderIntegrator integ = new ClassicalRungeKuttaIntegrator(step);\n    TestProblemHandler handler = new TestProblemHandler(pb, integ);\n    integ.addStepHandler(handler);\n    integ.integrate(pb, pb.getInitialTime(), pb.getInitialState(),\n                    pb.getFinalTime(), new double[pb.getDimension()]);\n\n    assertTrue(handler.getLastError() > 0.0004);\n    assertTrue(handler.getMaximalValueError() > 0.005);\n    assertEquals(0, handler.getMaximalTimeError(), 1.0e-12);\n\n  }\n",
        "begin_line": 189,
        "end_line": 205,
        "comment": "",
        "child_ranges": [
            "(line 192,col 5)-(line 192,col 41)",
            "(line 193,col 5)-(line 193,col 66)",
            "(line 195,col 5)-(line 195,col 73)",
            "(line 196,col 5)-(line 196,col 67)",
            "(line 197,col 5)-(line 197,col 34)",
            "(line 198,col 5)-(line 199,col 70)",
            "(line 201,col 5)-(line 201,col 48)",
            "(line 202,col 5)-(line 202,col 55)",
            "(line 203,col 5)-(line 203,col 60)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java",
        "signature": "org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest.testBackward()",
        "snippet": "  public void testBackward()\n    throws DerivativeException, IntegratorException {\n\n    TestProblem5 pb = new TestProblem5();\n    double step = Math.abs(pb.getFinalTime() - pb.getInitialTime()) * 0.001;\n\n    FirstOrderIntegrator integ = new ClassicalRungeKuttaIntegrator(step);\n    TestProblemHandler handler = new TestProblemHandler(pb, integ);\n    integ.addStepHandler(handler);\n    integ.integrate(pb, pb.getInitialTime(), pb.getInitialState(),\n                    pb.getFinalTime(), new double[pb.getDimension()]);\n\n    assertTrue(handler.getLastError() < 5.0e-10);\n    assertTrue(handler.getMaximalValueError() < 7.0e-10);\n    assertEquals(0, handler.getMaximalTimeError(), 1.0e-12);\n    assertEquals(\"classical Runge-Kutta\", integ.getName());\n  }\n",
        "begin_line": 207,
        "end_line": 223,
        "comment": "",
        "child_ranges": [
            "(line 210,col 5)-(line 210,col 41)",
            "(line 211,col 5)-(line 211,col 76)",
            "(line 213,col 5)-(line 213,col 73)",
            "(line 214,col 5)-(line 214,col 67)",
            "(line 215,col 5)-(line 215,col 34)",
            "(line 216,col 5)-(line 217,col 70)",
            "(line 219,col 5)-(line 219,col 49)",
            "(line 220,col 5)-(line 220,col 57)",
            "(line 221,col 5)-(line 221,col 60)",
            "(line 222,col 5)-(line 222,col 59)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java",
        "signature": "org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest.testKepler()",
        "snippet": "  public void testKepler()\n    throws DerivativeException, IntegratorException {\n\n    final TestProblem3 pb  = new TestProblem3(0.9);\n    double step = (pb.getFinalTime() - pb.getInitialTime()) * 0.0003;\n\n    FirstOrderIntegrator integ = new ClassicalRungeKuttaIntegrator(step);\n    integ.addStepHandler(new KeplerHandler(pb));\n    integ.integrate(pb,\n                    pb.getInitialTime(), pb.getInitialState(),\n                    pb.getFinalTime(), new double[pb.getDimension()]);\n  }\n",
        "begin_line": 225,
        "end_line": 236,
        "comment": "",
        "child_ranges": [
            "(line 228,col 5)-(line 228,col 51)",
            "(line 229,col 5)-(line 229,col 69)",
            "(line 231,col 5)-(line 231,col 73)",
            "(line 232,col 5)-(line 232,col 48)",
            "(line 233,col 5)-(line 235,col 70)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java",
        "signature": "KeplerHandler(TestProblem3)",
        "snippet": "    public KeplerHandler(TestProblem3 pb) {\n      this.pb = pb;\n      reset();\n    }\n",
        "begin_line": 239,
        "end_line": 242,
        "comment": "",
        "child_ranges": [
            "(line 240,col 7)-(line 240,col 19)",
            "(line 241,col 7)-(line 241,col 14)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java",
        "signature": "org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest.KeplerHandler.requiresDenseOutput()",
        "snippet": "    public boolean requiresDenseOutput() {\n      return false;\n    }\n",
        "begin_line": 243,
        "end_line": 245,
        "comment": "",
        "child_ranges": [
            "(line 244,col 7)-(line 244,col 19)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java",
        "signature": "org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest.KeplerHandler.reset()",
        "snippet": "    public void reset() {\n      maxError = 0;\n    }\n",
        "begin_line": 246,
        "end_line": 248,
        "comment": "",
        "child_ranges": [
            "(line 247,col 7)-(line 247,col 19)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java",
        "signature": "org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest.KeplerHandler.handleStep(org.apache.commons.math.ode.sampling.StepInterpolator, boolean)",
        "snippet": "    public void handleStep(StepInterpolator interpolator,\n                           boolean isLast) throws DerivativeException {\n\n      double[] interpolatedY = interpolator.getInterpolatedState ();\n      double[] theoreticalY  = pb.computeTheoreticalState(interpolator.getCurrentTime());\n      double dx = interpolatedY[0] - theoreticalY[0];\n      double dy = interpolatedY[1] - theoreticalY[1];\n      double error = dx * dx + dy * dy;\n      if (error > maxError) {\n        maxError = error;\n      }\n      if (isLast) {\n        // even with more than 1000 evaluations per period,\n        // RK4 is not able to integrate such an eccentric\n        // orbit with a good accuracy\n        assertTrue(maxError > 0.005);\n      }\n    }\n",
        "begin_line": 249,
        "end_line": 266,
        "comment": "",
        "child_ranges": [
            "(line 252,col 7)-(line 252,col 68)",
            "(line 253,col 7)-(line 253,col 89)",
            "(line 254,col 7)-(line 254,col 53)",
            "(line 255,col 7)-(line 255,col 53)",
            "(line 256,col 7)-(line 256,col 39)",
            "(line 257,col 7)-(line 259,col 7)",
            "(line 260,col 7)-(line 265,col 7)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java",
        "signature": "org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest.testStepSize()",
        "snippet": "  public void testStepSize()\n    throws DerivativeException, IntegratorException {\n      final double step = 1.23456;\n      FirstOrderIntegrator integ = new ClassicalRungeKuttaIntegrator(step);\n      integ.addStepHandler(new StepHandler() {\n          public void handleStep(StepInterpolator interpolator, boolean isLast) {\n              if (! isLast) {\n                  assertEquals(step,\n                               interpolator.getCurrentTime() - interpolator.getPreviousTime(),\n                               1.0e-12);\n              }\n          }\n          public boolean requiresDenseOutput() {\n              return false;\n          }\n          public void reset() {\n          }\n      });\n      integ.integrate(new FirstOrderDifferentialEquations() {\n          private static final long serialVersionUID = 0L;\n          public void computeDerivatives(double t, double[] y, double[] dot) {\n              dot[0] = 1.0;\n          }\n          public int getDimension() {\n              return 1;\n          }\n      }, 0.0, new double[] { 0.0 }, 5.0, new double[1]);\n  }\n",
        "begin_line": 271,
        "end_line": 298,
        "comment": "",
        "child_ranges": [
            "(line 273,col 7)-(line 273,col 34)",
            "(line 274,col 7)-(line 274,col 75)",
            "(line 275,col 7)-(line 288,col 9)",
            "(line 289,col 7)-(line 297,col 56)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java",
        "signature": "org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest.Anonymous-ed882d7f-7f55-4bcd-9315-3e15962adc22.handleStep(org.apache.commons.math.ode.sampling.StepInterpolator, boolean)",
        "snippet": "          public void handleStep(StepInterpolator interpolator, boolean isLast) {\n              if (! isLast) {\n                  assertEquals(step,\n                               interpolator.getCurrentTime() - interpolator.getPreviousTime(),\n                               1.0e-12);\n              }\n          }\n",
        "begin_line": 276,
        "end_line": 282,
        "comment": "",
        "child_ranges": [
            "(line 277,col 15)-(line 281,col 15)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java",
        "signature": "org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest.Anonymous-41beb9ba-f76a-4f5b-a19a-30c3a32bc804.requiresDenseOutput()",
        "snippet": "          public boolean requiresDenseOutput() {\n              return false;\n          }\n",
        "begin_line": 283,
        "end_line": 285,
        "comment": "",
        "child_ranges": [
            "(line 284,col 15)-(line 284,col 27)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java",
        "signature": "org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest.Anonymous-efece876-61ed-4e70-894e-cb8dff737e71.reset()",
        "snippet": "          public void reset() {\n          }\n",
        "begin_line": 286,
        "end_line": 287,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java",
        "signature": "org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest.Anonymous-88b81297-385d-4fd7-969e-beb7aedf0ac3.computeDerivatives(double, double[], double[])",
        "snippet": "          public void computeDerivatives(double t, double[] y, double[] dot) {\n              dot[0] = 1.0;\n          }\n",
        "begin_line": 291,
        "end_line": 293,
        "comment": "",
        "child_ranges": [
            "(line 292,col 15)-(line 292,col 27)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java",
        "signature": "org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest.Anonymous-23728dc3-aff3-4e32-b78f-5a3e4a2fedd3.getDimension()",
        "snippet": "          public int getDimension() {\n              return 1;\n          }\n",
        "begin_line": 294,
        "end_line": 296,
        "comment": "",
        "child_ranges": [
            "(line 295,col 15)-(line 295,col 23)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java",
        "signature": "org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest.DormandPrince853IntegratorTest(java.lang.String)",
        "snippet": "  public DormandPrince853IntegratorTest(String name) {\n    super(name);\n  }\n",
        "begin_line": 40,
        "end_line": 42,
        "comment": "",
        "child_ranges": [
            "(line 41,col 5)-(line 41,col 16)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java",
        "signature": "org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest.testMissedEndEvent()",
        "snippet": "  public void testMissedEndEvent() throws IntegratorException, DerivativeException {\n      final double   t0     = 1878250320.0000029;\n      final double   tEvent = 1878250379.9999986;\n      final double[] k  = { 1.0e-4, 1.0e-5, 1.0e-6 };\n      FirstOrderDifferentialEquations ode = new FirstOrderDifferentialEquations() {\n\n          public int getDimension() {\n              return k.length;\n          }\n\n          public void computeDerivatives(double t, double[] y, double[] yDot) {\n              for (int i = 0; i < y.length; ++i) {\n                  yDot[i] = k[i] * y[i];\n              }\n          }\n      };\n\n      DormandPrince853Integrator integrator = new DormandPrince853Integrator(0.0, 100.0,\n                                                                             1.0e-10, 1.0e-10);\n\n      double[] y0   = new double[k.length];\n      for (int i = 0; i < y0.length; ++i) {\n          y0[i] = i + 1;\n      }\n      double[] y    = new double[k.length];\n\n      integrator.setInitialStepSize(60.0);\n      double finalT = integrator.integrate(ode, t0, y0, tEvent, y);\n      Assert.assertEquals(tEvent, finalT, 5.0e-6);\n      for (int i = 0; i < y.length; ++i) {\n          Assert.assertEquals(y0[i] * Math.exp(k[i] * (finalT - t0)), y[i], 1.0e-9);\n      }\n\n      integrator.setInitialStepSize(60.0);\n      integrator.addEventHandler(new EventHandler() {\n\n          public void resetState(double t, double[] y) {\n          }\n\n          public double g(double t, double[] y) {\n              return t - tEvent;\n          }\n\n          public int eventOccurred(double t, double[] y, boolean increasing) {\n              Assert.assertEquals(tEvent, t, 5.0e-6);\n              return CONTINUE;\n          }\n      }, Double.POSITIVE_INFINITY, 1.0e-20, 100);\n      finalT = integrator.integrate(ode, t0, y0, tEvent + 120, y);\n      Assert.assertEquals(tEvent + 120, finalT, 5.0e-6);\n      for (int i = 0; i < y.length; ++i) {\n          Assert.assertEquals(y0[i] * Math.exp(k[i] * (finalT - t0)), y[i], 1.0e-9);\n      }\n\n  }\n",
        "begin_line": 44,
        "end_line": 98,
        "comment": "",
        "child_ranges": [
            "(line 45,col 7)-(line 45,col 49)",
            "(line 46,col 7)-(line 46,col 49)",
            "(line 47,col 7)-(line 47,col 53)",
            "(line 48,col 7)-(line 59,col 8)",
            "(line 61,col 7)-(line 62,col 95)",
            "(line 64,col 7)-(line 64,col 43)",
            "(line 65,col 7)-(line 67,col 7)",
            "(line 68,col 7)-(line 68,col 43)",
            "(line 70,col 7)-(line 70,col 42)",
            "(line 71,col 7)-(line 71,col 67)",
            "(line 72,col 7)-(line 72,col 50)",
            "(line 73,col 7)-(line 75,col 7)",
            "(line 77,col 7)-(line 77,col 42)",
            "(line 78,col 7)-(line 91,col 49)",
            "(line 92,col 7)-(line 92,col 66)",
            "(line 93,col 7)-(line 93,col 56)",
            "(line 94,col 7)-(line 96,col 7)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java",
        "signature": "org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest.Anonymous-24e9cbbe-3ac2-44ad-a782-e1ae8c1a8454.getDimension()",
        "snippet": "          public int getDimension() {\n              return k.length;\n          }\n",
        "begin_line": 50,
        "end_line": 52,
        "comment": "",
        "child_ranges": [
            "(line 51,col 15)-(line 51,col 30)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java",
        "signature": "org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest.Anonymous-90e3084c-12b4-4e31-b594-dee6b2ed1a46.computeDerivatives(double, double[], double[])",
        "snippet": "          public void computeDerivatives(double t, double[] y, double[] yDot) {\n              for (int i = 0; i < y.length; ++i) {\n                  yDot[i] = k[i] * y[i];\n              }\n          }\n",
        "begin_line": 54,
        "end_line": 58,
        "comment": "",
        "child_ranges": [
            "(line 55,col 15)-(line 57,col 15)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java",
        "signature": "org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest.Anonymous-03f28ef0-d165-409f-ab68-e6e16f7f0924.resetState(double, double[])",
        "snippet": "          public void resetState(double t, double[] y) {\n          }\n",
        "begin_line": 80,
        "end_line": 81,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java",
        "signature": "org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest.Anonymous-62629ade-0252-4fd6-9dfd-5b52e51a8157.g(double, double[])",
        "snippet": "          public double g(double t, double[] y) {\n              return t - tEvent;\n          }\n",
        "begin_line": 83,
        "end_line": 85,
        "comment": "",
        "child_ranges": [
            "(line 84,col 15)-(line 84,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java",
        "signature": "org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest.Anonymous-4250b00d-4a6f-446d-9356-fe10ccb0240d.eventOccurred(double, double[], boolean)",
        "snippet": "          public int eventOccurred(double t, double[] y, boolean increasing) {\n              Assert.assertEquals(tEvent, t, 5.0e-6);\n              return CONTINUE;\n          }\n",
        "begin_line": 87,
        "end_line": 90,
        "comment": "",
        "child_ranges": [
            "(line 88,col 15)-(line 88,col 53)",
            "(line 89,col 15)-(line 89,col 30)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java",
        "signature": "org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest.testDimensionCheck()",
        "snippet": "  public void testDimensionCheck() {\n    try  {\n      TestProblem1 pb = new TestProblem1();\n      DormandPrince853Integrator integrator = new DormandPrince853Integrator(0.0, 1.0,\n                                                                             1.0e-10, 1.0e-10);\n      integrator.integrate(pb,\n                           0.0, new double[pb.getDimension()+10],\n                           1.0, new double[pb.getDimension()+10]);\n      fail(\"an exception should have been thrown\");\n    } catch(DerivativeException de) {\n      fail(\"wrong exception caught\");\n    } catch(IntegratorException ie) {\n    }\n  }\n",
        "begin_line": 100,
        "end_line": 113,
        "comment": "",
        "child_ranges": [
            "(line 101,col 5)-(line 112,col 5)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java",
        "signature": "org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest.testNullIntervalCheck()",
        "snippet": "  public void testNullIntervalCheck() {\n    try  {\n      TestProblem1 pb = new TestProblem1();\n      DormandPrince853Integrator integrator = new DormandPrince853Integrator(0.0, 1.0,\n                                                                             1.0e-10, 1.0e-10);\n      integrator.integrate(pb,\n                           0.0, new double[pb.getDimension()],\n                           0.0, new double[pb.getDimension()]);\n      fail(\"an exception should have been thrown\");\n    } catch(DerivativeException de) {\n      fail(\"wrong exception caught\");\n    } catch(IntegratorException ie) {\n    }\n  }\n",
        "begin_line": 115,
        "end_line": 128,
        "comment": "",
        "child_ranges": [
            "(line 116,col 5)-(line 127,col 5)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java",
        "signature": "org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest.testMinStep()",
        "snippet": "  public void testMinStep() {\n\n    try {\n      TestProblem1 pb = new TestProblem1();\n      double minStep = 0.1 * (pb.getFinalTime() - pb.getInitialTime());\n      double maxStep = pb.getFinalTime() - pb.getInitialTime();\n      double[] vecAbsoluteTolerance = { 1.0e-15, 1.0e-16 };\n      double[] vecRelativeTolerance = { 1.0e-15, 1.0e-16 };\n\n      FirstOrderIntegrator integ = new DormandPrince853Integrator(minStep, maxStep,\n                                                                  vecAbsoluteTolerance,\n                                                                  vecRelativeTolerance);\n      TestProblemHandler handler = new TestProblemHandler(pb, integ);\n      integ.addStepHandler(handler);\n      integ.integrate(pb,\n                      pb.getInitialTime(), pb.getInitialState(),\n                      pb.getFinalTime(), new double[pb.getDimension()]);\n      fail(\"an exception should have been thrown\");\n    } catch(DerivativeException de) {\n      fail(\"wrong exception caught\");\n    } catch(IntegratorException ie) {\n    }\n\n  }\n",
        "begin_line": 130,
        "end_line": 153,
        "comment": "",
        "child_ranges": [
            "(line 132,col 5)-(line 151,col 5)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java",
        "signature": "org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest.testIncreasingTolerance()",
        "snippet": "  public void testIncreasingTolerance()\n    throws DerivativeException, IntegratorException {\n\n    int previousCalls = Integer.MAX_VALUE;\n    for (int i = -12; i < -2; ++i) {\n      TestProblem1 pb = new TestProblem1();\n      double minStep = 0;\n      double maxStep = pb.getFinalTime() - pb.getInitialTime();\n      double scalAbsoluteTolerance = Math.pow(10.0, i);\n      double scalRelativeTolerance = 0.01 * scalAbsoluteTolerance;\n\n      FirstOrderIntegrator integ = new DormandPrince853Integrator(minStep, maxStep,\n                                                                  scalAbsoluteTolerance,\n                                                                  scalRelativeTolerance);\n      TestProblemHandler handler = new TestProblemHandler(pb, integ);\n      integ.addStepHandler(handler);\n      integ.integrate(pb,\n                      pb.getInitialTime(), pb.getInitialState(),\n                      pb.getFinalTime(), new double[pb.getDimension()]);\n\n      // the 1.3 factor is only valid for this test\n      // and has been obtained from trial and error\n      // there is no general relation between local and global errors\n      assertTrue(handler.getMaximalValueError() < (1.3 * scalAbsoluteTolerance));\n      assertEquals(0, handler.getMaximalTimeError(), 1.0e-12);\n\n      int calls = pb.getCalls();\n      assertEquals(integ.getEvaluations(), calls);\n      assertTrue(calls <= previousCalls);\n      previousCalls = calls;\n\n    }\n\n  }\n",
        "begin_line": 155,
        "end_line": 188,
        "comment": "",
        "child_ranges": [
            "(line 158,col 5)-(line 158,col 42)",
            "(line 159,col 5)-(line 186,col 5)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java",
        "signature": "org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest.testBackward()",
        "snippet": "  public void testBackward()\n      throws DerivativeException, IntegratorException {\n\n      TestProblem5 pb = new TestProblem5();\n      double minStep = 0;\n      double maxStep = pb.getFinalTime() - pb.getInitialTime();\n      double scalAbsoluteTolerance = 1.0e-8;\n      double scalRelativeTolerance = 0.01 * scalAbsoluteTolerance;\n\n      FirstOrderIntegrator integ = new DormandPrince853Integrator(minStep, maxStep,\n                                                                  scalAbsoluteTolerance,\n                                                                  scalRelativeTolerance);\n      TestProblemHandler handler = new TestProblemHandler(pb, integ);\n      integ.addStepHandler(handler);\n      integ.integrate(pb, pb.getInitialTime(), pb.getInitialState(),\n                      pb.getFinalTime(), new double[pb.getDimension()]);\n\n      assertTrue(handler.getLastError() < 8.1e-8);\n      assertTrue(handler.getMaximalValueError() < 1.1e-7);\n      assertEquals(0, handler.getMaximalTimeError(), 1.0e-12);\n      assertEquals(\"Dormand-Prince 8 (5, 3)\", integ.getName());\n  }\n",
        "begin_line": 190,
        "end_line": 211,
        "comment": "",
        "child_ranges": [
            "(line 193,col 7)-(line 193,col 43)",
            "(line 194,col 7)-(line 194,col 25)",
            "(line 195,col 7)-(line 195,col 63)",
            "(line 196,col 7)-(line 196,col 44)",
            "(line 197,col 7)-(line 197,col 66)",
            "(line 199,col 7)-(line 201,col 89)",
            "(line 202,col 7)-(line 202,col 69)",
            "(line 203,col 7)-(line 203,col 36)",
            "(line 204,col 7)-(line 205,col 72)",
            "(line 207,col 7)-(line 207,col 50)",
            "(line 208,col 7)-(line 208,col 58)",
            "(line 209,col 7)-(line 209,col 62)",
            "(line 210,col 7)-(line 210,col 63)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java",
        "signature": "org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest.testEvents()",
        "snippet": "  public void testEvents()\n    throws DerivativeException, IntegratorException {\n\n    TestProblem4 pb = new TestProblem4();\n    double minStep = 0;\n    double maxStep = pb.getFinalTime() - pb.getInitialTime();\n    double scalAbsoluteTolerance = 1.0e-9;\n    double scalRelativeTolerance = 0.01 * scalAbsoluteTolerance;\n\n    FirstOrderIntegrator integ = new DormandPrince853Integrator(minStep, maxStep,\n                                                                scalAbsoluteTolerance,\n                                                                scalRelativeTolerance);\n    TestProblemHandler handler = new TestProblemHandler(pb, integ);\n    integ.addStepHandler(handler);\n    EventHandler[] functions = pb.getEventsHandlers();\n    for (int l = 0; l < functions.length; ++l) {\n      integ.addEventHandler(functions[l],\n                                 Double.POSITIVE_INFINITY, 1.0e-8 * maxStep, 1000);\n    }\n    assertEquals(functions.length, integ.getEventHandlers().size());\n    integ.integrate(pb,\n                    pb.getInitialTime(), pb.getInitialState(),\n                    pb.getFinalTime(), new double[pb.getDimension()]);\n\n    assertTrue(handler.getMaximalValueError() < 5.0e-8);\n    assertEquals(0, handler.getMaximalTimeError(), 1.0e-12);\n    assertEquals(12.0, handler.getLastTime(), 1.0e-8 * maxStep);\n    integ.clearEventHandlers();\n    assertEquals(0, integ.getEventHandlers().size());\n\n  }\n",
        "begin_line": 213,
        "end_line": 243,
        "comment": "",
        "child_ranges": [
            "(line 216,col 5)-(line 216,col 41)",
            "(line 217,col 5)-(line 217,col 23)",
            "(line 218,col 5)-(line 218,col 61)",
            "(line 219,col 5)-(line 219,col 42)",
            "(line 220,col 5)-(line 220,col 64)",
            "(line 222,col 5)-(line 224,col 87)",
            "(line 225,col 5)-(line 225,col 67)",
            "(line 226,col 5)-(line 226,col 34)",
            "(line 227,col 5)-(line 227,col 54)",
            "(line 228,col 5)-(line 231,col 5)",
            "(line 232,col 5)-(line 232,col 68)",
            "(line 233,col 5)-(line 235,col 70)",
            "(line 237,col 5)-(line 237,col 56)",
            "(line 238,col 5)-(line 238,col 60)",
            "(line 239,col 5)-(line 239,col 64)",
            "(line 240,col 5)-(line 240,col 31)",
            "(line 241,col 5)-(line 241,col 53)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java",
        "signature": "org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest.testKepler()",
        "snippet": "  public void testKepler()\n    throws DerivativeException, IntegratorException {\n\n    final TestProblem3 pb  = new TestProblem3(0.9);\n    double minStep = 0;\n    double maxStep = pb.getFinalTime() - pb.getInitialTime();\n    double scalAbsoluteTolerance = 1.0e-8;\n    double scalRelativeTolerance = scalAbsoluteTolerance;\n\n    FirstOrderIntegrator integ = new DormandPrince853Integrator(minStep, maxStep,\n                                                                scalAbsoluteTolerance,\n                                                                scalRelativeTolerance);\n    integ.addStepHandler(new KeplerHandler(pb));\n    integ.integrate(pb,\n                    pb.getInitialTime(), pb.getInitialState(),\n                    pb.getFinalTime(), new double[pb.getDimension()]);\n\n    assertEquals(integ.getEvaluations(), pb.getCalls());\n    assertTrue(pb.getCalls() < 3300);\n\n  }\n",
        "begin_line": 245,
        "end_line": 265,
        "comment": "",
        "child_ranges": [
            "(line 248,col 5)-(line 248,col 51)",
            "(line 249,col 5)-(line 249,col 23)",
            "(line 250,col 5)-(line 250,col 61)",
            "(line 251,col 5)-(line 251,col 42)",
            "(line 252,col 5)-(line 252,col 57)",
            "(line 254,col 5)-(line 256,col 87)",
            "(line 257,col 5)-(line 257,col 48)",
            "(line 258,col 5)-(line 260,col 70)",
            "(line 262,col 5)-(line 262,col 56)",
            "(line 263,col 5)-(line 263,col 37)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java",
        "signature": "org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest.testVariableSteps()",
        "snippet": "  public void testVariableSteps()\n    throws DerivativeException, IntegratorException {\n\n    final TestProblem3 pb  = new TestProblem3(0.9);\n    double minStep = 0;\n    double maxStep = pb.getFinalTime() - pb.getInitialTime();\n    double scalAbsoluteTolerance = 1.0e-8;\n    double scalRelativeTolerance = scalAbsoluteTolerance;\n\n    FirstOrderIntegrator integ = new DormandPrince853Integrator(minStep, maxStep,\n                                                               scalAbsoluteTolerance,\n                                                               scalRelativeTolerance);\n    integ.addStepHandler(new VariableHandler());\n    double stopTime = integ.integrate(pb,\n                                      pb.getInitialTime(), pb.getInitialState(),\n                                      pb.getFinalTime(), new double[pb.getDimension()]);\n    assertEquals(pb.getFinalTime(), stopTime, 1.0e-10);\n    assertEquals(\"Dormand-Prince 8 (5, 3)\", integ.getName());\n  }\n",
        "begin_line": 267,
        "end_line": 285,
        "comment": "",
        "child_ranges": [
            "(line 270,col 5)-(line 270,col 51)",
            "(line 271,col 5)-(line 271,col 23)",
            "(line 272,col 5)-(line 272,col 61)",
            "(line 273,col 5)-(line 273,col 42)",
            "(line 274,col 5)-(line 274,col 57)",
            "(line 276,col 5)-(line 278,col 86)",
            "(line 279,col 5)-(line 279,col 48)",
            "(line 280,col 5)-(line 282,col 88)",
            "(line 283,col 5)-(line 283,col 55)",
            "(line 284,col 5)-(line 284,col 61)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java",
        "signature": "org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest.testNoDenseOutput()",
        "snippet": "  public void testNoDenseOutput()\n    throws DerivativeException, IntegratorException {\n    TestProblem1 pb1 = new TestProblem1();\n    TestProblem1 pb2 = pb1.copy();\n    double minStep = 0.1 * (pb1.getFinalTime() - pb1.getInitialTime());\n    double maxStep = pb1.getFinalTime() - pb1.getInitialTime();\n    double scalAbsoluteTolerance = 1.0e-4;\n    double scalRelativeTolerance = 1.0e-4;\n\n    FirstOrderIntegrator integ = new DormandPrince853Integrator(minStep, maxStep,\n                                                                scalAbsoluteTolerance,\n                                                                scalRelativeTolerance);\n    integ.addStepHandler(DummyStepHandler.getInstance());\n    integ.integrate(pb1,\n                    pb1.getInitialTime(), pb1.getInitialState(),\n                    pb1.getFinalTime(), new double[pb1.getDimension()]);\n    int callsWithoutDenseOutput = pb1.getCalls();\n    assertEquals(integ.getEvaluations(), callsWithoutDenseOutput);\n\n    integ.addStepHandler(new InterpolatingStepHandler());\n    integ.integrate(pb2,\n                    pb2.getInitialTime(), pb2.getInitialState(),\n                    pb2.getFinalTime(), new double[pb2.getDimension()]);\n    int callsWithDenseOutput = pb2.getCalls();\n    assertEquals(integ.getEvaluations(), callsWithDenseOutput);\n\n    assertTrue(callsWithDenseOutput > callsWithoutDenseOutput);\n\n  }\n",
        "begin_line": 287,
        "end_line": 315,
        "comment": "",
        "child_ranges": [
            "(line 289,col 5)-(line 289,col 42)",
            "(line 290,col 5)-(line 290,col 34)",
            "(line 291,col 5)-(line 291,col 71)",
            "(line 292,col 5)-(line 292,col 63)",
            "(line 293,col 5)-(line 293,col 42)",
            "(line 294,col 5)-(line 294,col 42)",
            "(line 296,col 5)-(line 298,col 87)",
            "(line 299,col 5)-(line 299,col 57)",
            "(line 300,col 5)-(line 302,col 72)",
            "(line 303,col 5)-(line 303,col 49)",
            "(line 304,col 5)-(line 304,col 66)",
            "(line 306,col 5)-(line 306,col 57)",
            "(line 307,col 5)-(line 309,col 72)",
            "(line 310,col 5)-(line 310,col 46)",
            "(line 311,col 5)-(line 311,col 63)",
            "(line 313,col 5)-(line 313,col 63)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java",
        "signature": "org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest.testUnstableDerivative()",
        "snippet": "  public void testUnstableDerivative()\n  throws DerivativeException, IntegratorException {\n    final StepProblem stepProblem = new StepProblem(0.0, 1.0, 2.0);\n    FirstOrderIntegrator integ =\n      new DormandPrince853Integrator(0.1, 10, 1.0e-12, 0.0);\n    integ.addEventHandler(stepProblem, 1.0, 1.0e-12, 1000);\n    double[] y = { Double.NaN };\n    integ.integrate(stepProblem, 0.0, new double[] { 0.0 }, 10.0, y);\n    assertEquals(8.0, y[0], 1.0e-12);\n  }\n",
        "begin_line": 317,
        "end_line": 326,
        "comment": "",
        "child_ranges": [
            "(line 319,col 5)-(line 319,col 67)",
            "(line 320,col 5)-(line 321,col 60)",
            "(line 322,col 5)-(line 322,col 59)",
            "(line 323,col 5)-(line 323,col 32)",
            "(line 324,col 5)-(line 324,col 69)",
            "(line 325,col 5)-(line 325,col 37)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java",
        "signature": "KeplerHandler(TestProblem3)",
        "snippet": "    public KeplerHandler(TestProblem3 pb) {\n      this.pb = pb;\n      reset();\n    }\n",
        "begin_line": 329,
        "end_line": 332,
        "comment": "",
        "child_ranges": [
            "(line 330,col 7)-(line 330,col 19)",
            "(line 331,col 7)-(line 331,col 14)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java",
        "signature": "org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest.KeplerHandler.requiresDenseOutput()",
        "snippet": "    public boolean requiresDenseOutput() {\n      return true;\n    }\n",
        "begin_line": 333,
        "end_line": 335,
        "comment": "",
        "child_ranges": [
            "(line 334,col 7)-(line 334,col 18)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java",
        "signature": "org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest.KeplerHandler.reset()",
        "snippet": "    public void reset() {\n      nbSteps = 0;\n      maxError = 0;\n    }\n",
        "begin_line": 336,
        "end_line": 339,
        "comment": "",
        "child_ranges": [
            "(line 337,col 7)-(line 337,col 18)",
            "(line 338,col 7)-(line 338,col 19)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java",
        "signature": "org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest.KeplerHandler.handleStep(org.apache.commons.math.ode.sampling.StepInterpolator, boolean)",
        "snippet": "    public void handleStep(StepInterpolator interpolator,\n                           boolean isLast)\n    throws DerivativeException {\n\n      ++nbSteps;\n      for (int a = 1; a < 10; ++a) {\n\n        double prev   = interpolator.getPreviousTime();\n        double curr   = interpolator.getCurrentTime();\n        double interp = ((10 - a) * prev + a * curr) / 10;\n        interpolator.setInterpolatedTime(interp);\n\n        double[] interpolatedY = interpolator.getInterpolatedState ();\n        double[] theoreticalY  = pb.computeTheoreticalState(interpolator.getInterpolatedTime());\n        double dx = interpolatedY[0] - theoreticalY[0];\n        double dy = interpolatedY[1] - theoreticalY[1];\n        double error = dx * dx + dy * dy;\n        if (error > maxError) {\n          maxError = error;\n        }\n      }\n      if (isLast) {\n        assertTrue(maxError < 2.4e-10);\n        assertTrue(nbSteps < 150);\n      }\n    }\n",
        "begin_line": 340,
        "end_line": 365,
        "comment": "",
        "child_ranges": [
            "(line 344,col 7)-(line 344,col 16)",
            "(line 345,col 7)-(line 360,col 7)",
            "(line 361,col 7)-(line 364,col 7)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java",
        "signature": "org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest.VariableHandler.VariableHandler()",
        "snippet": "    public VariableHandler() {\n      reset();\n    }\n",
        "begin_line": 372,
        "end_line": 374,
        "comment": "",
        "child_ranges": [
            "(line 373,col 7)-(line 373,col 14)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java",
        "signature": "org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest.VariableHandler.requiresDenseOutput()",
        "snippet": "    public boolean requiresDenseOutput() {\n      return false;\n    }\n",
        "begin_line": 375,
        "end_line": 377,
        "comment": "",
        "child_ranges": [
            "(line 376,col 7)-(line 376,col 19)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java",
        "signature": "org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest.VariableHandler.reset()",
        "snippet": "    public void reset() {\n      firstTime = true;\n      minStep = 0;\n      maxStep = 0;\n    }\n",
        "begin_line": 378,
        "end_line": 382,
        "comment": "",
        "child_ranges": [
            "(line 379,col 7)-(line 379,col 23)",
            "(line 380,col 7)-(line 380,col 18)",
            "(line 381,col 7)-(line 381,col 18)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java",
        "signature": "org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest.VariableHandler.handleStep(org.apache.commons.math.ode.sampling.StepInterpolator, boolean)",
        "snippet": "    public void handleStep(StepInterpolator interpolator,\n                           boolean isLast) {\n\n      double step = Math.abs(interpolator.getCurrentTime()\n                             - interpolator.getPreviousTime());\n      if (firstTime) {\n        minStep   = Math.abs(step);\n        maxStep   = minStep;\n        firstTime = false;\n      } else {\n        if (step < minStep) {\n          minStep = step;\n        }\n        if (step > maxStep) {\n          maxStep = step;\n        }\n      }\n\n      if (isLast) {\n        assertTrue(minStep < (1.0 / 100.0));\n        assertTrue(maxStep > (1.0 / 2.0));\n      }\n    }\n",
        "begin_line": 383,
        "end_line": 405,
        "comment": "",
        "child_ranges": [
            "(line 386,col 7)-(line 387,col 63)",
            "(line 388,col 7)-(line 399,col 7)",
            "(line 401,col 7)-(line 404,col 7)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java",
        "signature": "org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest.InterpolatingStepHandler.requiresDenseOutput()",
        "snippet": "    public boolean requiresDenseOutput() {\n      return true;\n    }\n",
        "begin_line": 412,
        "end_line": 414,
        "comment": "",
        "child_ranges": [
            "(line 413,col 7)-(line 413,col 18)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java",
        "signature": "org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest.InterpolatingStepHandler.reset()",
        "snippet": "    public void reset() {\n    }\n",
        "begin_line": 415,
        "end_line": 416,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java",
        "signature": "org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest.InterpolatingStepHandler.handleStep(org.apache.commons.math.ode.sampling.StepInterpolator, boolean)",
        "snippet": "    public void handleStep(StepInterpolator interpolator,\n                           boolean isLast)\n    throws DerivativeException {\n      double prev = interpolator.getPreviousTime();\n      double curr = interpolator.getCurrentTime();\n      interpolator.setInterpolatedTime(0.5*(prev + curr));\n    }\n",
        "begin_line": 417,
        "end_line": 423,
        "comment": "",
        "child_ranges": [
            "(line 420,col 7)-(line 420,col 51)",
            "(line 421,col 7)-(line 421,col 50)",
            "(line 422,col 7)-(line 422,col 58)"
        ]
    }
]