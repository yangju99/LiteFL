[
    {
        "class_name": "org.apache.commons.math.analysis.solvers.BrentSolverTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java",
        "signature": "org.apache.commons.math.analysis.solvers.BrentSolverTest.BrentSolverTest(java.lang.String)",
        "snippet": "    public BrentSolverTest(String name) {\n        super(name);\n    }\n",
        "begin_line": 40,
        "end_line": 42,
        "comment": "",
        "child_ranges": [
            "(line 41,col 9)-(line 41,col 20)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.analysis.solvers.BrentSolverTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java",
        "signature": "org.apache.commons.math.analysis.solvers.BrentSolverTest.testDeprecated()",
        "snippet": "    @Deprecated\n    public void testDeprecated() throws MathException {\n        // The sinus function is behaved well around the root at #pi. The second\n        // order derivative is zero, which means linar approximating methods will\n        // still converge quadratically.\n        UnivariateRealFunction f = new SinFunction();\n        double result;\n        UnivariateRealSolver solver = new BrentSolver(f);\n        // Somewhat benign interval. The function is monotone.\n        result = solver.solve(3, 4);\n        //System.out.println(\n        //    \"Root: \" + result + \" Iterations: \" + solver.getIterationCount());\n        assertEquals(result, Math.PI, solver.getAbsoluteAccuracy());\n        // 4 iterations on i586 JDK 1.4.1.\n        assertTrue(solver.getIterationCount() <= 5);\n        // Larger and somewhat less benign interval. The function is grows first.\n        result = solver.solve(1, 4);\n        //System.out.println(\n        //    \"Root: \" + result + \" Iterations: \" + solver.getIterationCount());\n        assertEquals(result, Math.PI, solver.getAbsoluteAccuracy());\n        // 5 iterations on i586 JDK 1.4.1.\n        assertTrue(solver.getIterationCount() <= 6);\n        solver = new SecantSolver(f);\n        result = solver.solve(3, 4);\n        //System.out.println(\n        //    \"Root: \" + result + \" Iterations: \" + solver.getIterationCount());\n        assertEquals(result, Math.PI, solver.getAbsoluteAccuracy());\n        // 4 iterations on i586 JDK 1.4.1.\n        assertTrue(solver.getIterationCount() <= 5);\n        result = solver.solve(1, 4);\n        //System.out.println(\n        //    \"Root: \" + result + \" Iterations: \" + solver.getIterationCount());\n        assertEquals(result, Math.PI, solver.getAbsoluteAccuracy());\n        // 5 iterations on i586 JDK 1.4.1.\n        assertTrue(solver.getIterationCount() <= 6);\n        assertEquals(result, solver.getResult(), 0);\n    }\n",
        "begin_line": 44,
        "end_line": 80,
        "comment": "",
        "child_ranges": [
            "(line 49,col 9)-(line 49,col 53)",
            "(line 50,col 9)-(line 50,col 22)",
            "(line 51,col 9)-(line 51,col 57)",
            "(line 53,col 9)-(line 53,col 36)",
            "(line 56,col 9)-(line 56,col 68)",
            "(line 58,col 9)-(line 58,col 52)",
            "(line 60,col 9)-(line 60,col 36)",
            "(line 63,col 9)-(line 63,col 68)",
            "(line 65,col 9)-(line 65,col 52)",
            "(line 66,col 9)-(line 66,col 37)",
            "(line 67,col 9)-(line 67,col 36)",
            "(line 70,col 9)-(line 70,col 68)",
            "(line 72,col 9)-(line 72,col 52)",
            "(line 73,col 9)-(line 73,col 36)",
            "(line 76,col 9)-(line 76,col 68)",
            "(line 78,col 9)-(line 78,col 52)",
            "(line 79,col 9)-(line 79,col 52)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.analysis.solvers.BrentSolverTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java",
        "signature": "org.apache.commons.math.analysis.solvers.BrentSolverTest.testSinZero()",
        "snippet": "    public void testSinZero() throws MathException {\n        // The sinus function is behaved well around the root at #pi. The second\n        // order derivative is zero, which means linar approximating methods will\n        // still converge quadratically.\n        UnivariateRealFunction f = new SinFunction();\n        double result;\n        UnivariateRealSolver solver = new BrentSolver();\n        // Somewhat benign interval. The function is monotone.\n        result = solver.solve(f, 3, 4);\n        //System.out.println(\n        //    \"Root: \" + result + \" Iterations: \" + solver.getIterationCount());\n        assertEquals(result, Math.PI, solver.getAbsoluteAccuracy());\n        // 4 iterations on i586 JDK 1.4.1.\n        assertTrue(solver.getIterationCount() <= 5);\n        // Larger and somewhat less benign interval. The function is grows first.\n        result = solver.solve(f, 1, 4);\n        //System.out.println(\n        //    \"Root: \" + result + \" Iterations: \" + solver.getIterationCount());\n        assertEquals(result, Math.PI, solver.getAbsoluteAccuracy());\n        // 5 iterations on i586 JDK 1.4.1.\n        assertTrue(solver.getIterationCount() <= 6);\n        solver = new SecantSolver();\n        result = solver.solve(f, 3, 4);\n        //System.out.println(\n        //    \"Root: \" + result + \" Iterations: \" + solver.getIterationCount());\n        assertEquals(result, Math.PI, solver.getAbsoluteAccuracy());\n        // 4 iterations on i586 JDK 1.4.1.\n        assertTrue(solver.getIterationCount() <= 5);\n        result = solver.solve(f, 1, 4);\n        //System.out.println(\n        //    \"Root: \" + result + \" Iterations: \" + solver.getIterationCount());\n        assertEquals(result, Math.PI, solver.getAbsoluteAccuracy());\n        // 5 iterations on i586 JDK 1.4.1.\n        assertTrue(solver.getIterationCount() <= 6);\n        assertEquals(result, solver.getResult(), 0);\n    }\n",
        "begin_line": 82,
        "end_line": 117,
        "comment": "",
        "child_ranges": [
            "(line 86,col 9)-(line 86,col 53)",
            "(line 87,col 9)-(line 87,col 22)",
            "(line 88,col 9)-(line 88,col 56)",
            "(line 90,col 9)-(line 90,col 39)",
            "(line 93,col 9)-(line 93,col 68)",
            "(line 95,col 9)-(line 95,col 52)",
            "(line 97,col 9)-(line 97,col 39)",
            "(line 100,col 9)-(line 100,col 68)",
            "(line 102,col 9)-(line 102,col 52)",
            "(line 103,col 9)-(line 103,col 36)",
            "(line 104,col 9)-(line 104,col 39)",
            "(line 107,col 9)-(line 107,col 68)",
            "(line 109,col 9)-(line 109,col 52)",
            "(line 110,col 9)-(line 110,col 39)",
            "(line 113,col 9)-(line 113,col 68)",
            "(line 115,col 9)-(line 115,col 52)",
            "(line 116,col 9)-(line 116,col 52)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.analysis.solvers.BrentSolverTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java",
        "signature": "org.apache.commons.math.analysis.solvers.BrentSolverTest.testQuinticZero()",
        "snippet": "   public void testQuinticZero() throws MathException {\n        // The quintic function has zeros at 0, +-0.5 and +-1.\n        // Around the root of 0 the function is well behaved, with a second derivative\n        // of zero a 0.\n        // The other roots are less well to find, in particular the root at 1, because\n        // the function grows fast for x>1.\n        // The function has extrema (first derivative is zero) at 0.27195613 and 0.82221643,\n        // intervals containing these values are harder for the solvers.\n        UnivariateRealFunction f = new QuinticFunction();\n        double result;\n        // Brent-Dekker solver.\n        UnivariateRealSolver solver = new BrentSolver();\n        // Symmetric bracket around 0. Test whether solvers can handle hitting\n        // the root in the first iteration.\n        result = solver.solve(f, -0.2, 0.2);\n        //System.out.println(\n        //    \"Root: \" + result + \" Iterations: \" + solver.getIterationCount());\n        assertEquals(result, 0, solver.getAbsoluteAccuracy());\n        assertTrue(solver.getIterationCount() <= 2);\n        // 1 iterations on i586 JDK 1.4.1.\n        // Asymmetric bracket around 0, just for fun. Contains extremum.\n        result = solver.solve(f, -0.1, 0.3);\n        //System.out.println(\n        //    \"Root: \" + result + \" Iterations: \" + solver.getIterationCount());\n        assertEquals(result, 0, solver.getAbsoluteAccuracy());\n        // 5 iterations on i586 JDK 1.4.1.\n        assertTrue(solver.getIterationCount() <= 6);\n        // Large bracket around 0. Contains two extrema.\n        result = solver.solve(f, -0.3, 0.45);\n        //System.out.println(\n        //    \"Root: \" + result + \" Iterations: \" + solver.getIterationCount());\n        assertEquals(result, 0, solver.getAbsoluteAccuracy());\n        // 6 iterations on i586 JDK 1.4.1.\n        assertTrue(solver.getIterationCount() <= 7);\n        // Benign bracket around 0.5, function is monotonous.\n        result = solver.solve(f, 0.3, 0.7);\n        //System.out.println(\n        //    \"Root: \" + result + \" Iterations: \" + solver.getIterationCount());\n        assertEquals(result, 0.5, solver.getAbsoluteAccuracy());\n        // 6 iterations on i586 JDK 1.4.1.\n        assertTrue(solver.getIterationCount() <= 7);\n        // Less benign bracket around 0.5, contains one extremum.\n        result = solver.solve(f, 0.2, 0.6);\n        //System.out.println(\n        //    \"Root: \" + result + \" Iterations: \" + solver.getIterationCount());\n        assertEquals(result, 0.5, solver.getAbsoluteAccuracy());\n        // 6 iterations on i586 JDK 1.4.1.\n        assertTrue(solver.getIterationCount() <= 7);\n        // Large, less benign bracket around 0.5, contains both extrema.\n        result = solver.solve(f, 0.05, 0.95);\n        //System.out.println(\n        //    \"Root: \" + result + \" Iterations: \" + solver.getIterationCount());\n        assertEquals(result, 0.5, solver.getAbsoluteAccuracy());\n        // 8 iterations on i586 JDK 1.4.1.\n        assertTrue(solver.getIterationCount() <= 9);\n        // Relatively benign bracket around 1, function is monotonous. Fast growth for x>1\n        // is still a problem.\n        result = solver.solve(f, 0.85, 1.25);\n        //System.out.println(\n        //    \"Root: \" + result + \" Iterations: \" + solver.getIterationCount());\n        assertEquals(result, 1.0, solver.getAbsoluteAccuracy());\n        // 8 iterations on i586 JDK 1.4.1.\n        assertTrue(solver.getIterationCount() <= 9);\n        // Less benign bracket around 1 with extremum.\n        result = solver.solve(f, 0.8, 1.2);\n        //System.out.println(\n        //    \"Root: \" + result + \" Iterations: \" + solver.getIterationCount());\n        assertEquals(result, 1.0, solver.getAbsoluteAccuracy());\n        // 8 iterations on i586 JDK 1.4.1.\n        assertTrue(solver.getIterationCount() <= 9);\n        // Large bracket around 1. Monotonous.\n        result = solver.solve(f, 0.85, 1.75);\n        //System.out.println(\n        //    \"Root: \" + result + \" Iterations: \" + solver.getIterationCount());\n        assertEquals(result, 1.0, solver.getAbsoluteAccuracy());\n        // 10 iterations on i586 JDK 1.4.1.\n        assertTrue(solver.getIterationCount() <= 11);\n        // Large bracket around 1. Interval contains extremum.\n        result = solver.solve(f, 0.55, 1.45);\n        //System.out.println(\n        //    \"Root: \" + result + \" Iterations: \" + solver.getIterationCount());\n        assertEquals(result, 1.0, solver.getAbsoluteAccuracy());\n        // 7 iterations on i586 JDK 1.4.1.\n        assertTrue(solver.getIterationCount() <= 8);\n        // Very large bracket around 1 for testing fast growth behaviour.\n        result = solver.solve(f, 0.85, 5);\n        //System.out.println(\n       //     \"Root: \" + result + \" Iterations: \" + solver.getIterationCount());\n        assertEquals(result, 1.0, solver.getAbsoluteAccuracy());\n        // 12 iterations on i586 JDK 1.4.1.\n        assertTrue(solver.getIterationCount() <= 13);\n        // Secant solver.\n        solver = new SecantSolver();\n        result = solver.solve(f, -0.2, 0.2);\n        //System.out.println(\n        //    \"Root: \" + result + \" Iterations: \" + solver.getIterationCount());\n        assertEquals(result, 0, solver.getAbsoluteAccuracy());\n        // 1 iterations on i586 JDK 1.4.1.\n        assertTrue(solver.getIterationCount() <= 2);\n        result = solver.solve(f, -0.1, 0.3);\n        //System.out.println(\n        //    \"Root: \" + result + \" Iterations: \" + solver.getIterationCount());\n        assertEquals(result, 0, solver.getAbsoluteAccuracy());\n        // 5 iterations on i586 JDK 1.4.1.\n        assertTrue(solver.getIterationCount() <= 6);\n        result = solver.solve(f, -0.3, 0.45);\n        //System.out.println(\n        //    \"Root: \" + result + \" Iterations: \" + solver.getIterationCount());\n        assertEquals(result, 0, solver.getAbsoluteAccuracy());\n        // 6 iterations on i586 JDK 1.4.1.\n        assertTrue(solver.getIterationCount() <= 7);\n        result = solver.solve(f, 0.3, 0.7);\n        //System.out.println(\n        //    \"Root: \" + result + \" Iterations: \" + solver.getIterationCount());\n        assertEquals(result, 0.5, solver.getAbsoluteAccuracy());\n        // 7 iterations on i586 JDK 1.4.1.\n        assertTrue(solver.getIterationCount() <= 8);\n        result = solver.solve(f, 0.2, 0.6);\n        //System.out.println(\n        //    \"Root: \" + result + \" Iterations: \" + solver.getIterationCount());\n        assertEquals(result, 0.5, solver.getAbsoluteAccuracy());\n        // 6 iterations on i586 JDK 1.4.1.\n        assertTrue(solver.getIterationCount() <= 7);\n        result = solver.solve(f, 0.05, 0.95);\n        //System.out.println(\n        //    \"Root: \" + result + \" Iterations: \" + solver.getIterationCount());\n        assertEquals(result, 0.5, solver.getAbsoluteAccuracy());\n        // 8 iterations on i586 JDK 1.4.1.\n        assertTrue(solver.getIterationCount() <= 9);\n        result = solver.solve(f, 0.85, 1.25);\n        //System.out.println(\n        //    \"Root: \" + result + \" Iterations: \" + solver.getIterationCount());\n        assertEquals(result, 1.0, solver.getAbsoluteAccuracy());\n        // 10 iterations on i586 JDK 1.4.1.\n        assertTrue(solver.getIterationCount() <= 11);\n        result = solver.solve(f, 0.8, 1.2);\n        //System.out.println(\n        //    \"Root: \" + result + \" Iterations: \" + solver.getIterationCount());\n        assertEquals(result, 1.0, solver.getAbsoluteAccuracy());\n        // 8 iterations on i586 JDK 1.4.1.\n        assertTrue(solver.getIterationCount() <= 9);\n        result = solver.solve(f, 0.85, 1.75);\n        //System.out.println(\n        //    \"Root: \" + result + \" Iterations: \" + solver.getIterationCount());\n        assertEquals(result, 1.0, solver.getAbsoluteAccuracy());\n        // 14 iterations on i586 JDK 1.4.1.\n        assertTrue(solver.getIterationCount() <= 15);\n        // The followig is especially slow because the solver first has to reduce\n        // the bracket to exclude the extremum. After that, convergence is rapide.\n        result = solver.solve(f, 0.55, 1.45);\n        //System.out.println(\n        //    \"Root: \" + result + \" Iterations: \" + solver.getIterationCount());\n        assertEquals(result, 1.0, solver.getAbsoluteAccuracy());\n        // 7 iterations on i586 JDK 1.4.1.\n        assertTrue(solver.getIterationCount() <= 8);\n        result = solver.solve(f, 0.85, 5);\n        //System.out.println(\n        //    \"Root: \" + result + \" Iterations: \" + solver.getIterationCount());\n        assertEquals(result, 1.0, solver.getAbsoluteAccuracy());\n        // 14 iterations on i586 JDK 1.4.1.\n        assertTrue(solver.getIterationCount() <= 15);\n        // Static solve method\n        result = UnivariateRealSolverUtils.solve(f, -0.2, 0.2);\n        assertEquals(result, 0, solver.getAbsoluteAccuracy());\n        result = UnivariateRealSolverUtils.solve(f, -0.1, 0.3);\n        assertEquals(result, 0, 1E-8);\n        result = UnivariateRealSolverUtils.solve(f, -0.3, 0.45);\n        assertEquals(result, 0, 1E-6);\n        result = UnivariateRealSolverUtils.solve(f, 0.3, 0.7);\n        assertEquals(result, 0.5, 1E-6);\n        result = UnivariateRealSolverUtils.solve(f, 0.2, 0.6);\n        assertEquals(result, 0.5, 1E-6);\n        result = UnivariateRealSolverUtils.solve(f, 0.05, 0.95);\n        assertEquals(result, 0.5, 1E-6);\n        result = UnivariateRealSolverUtils.solve(f, 0.85, 1.25);\n        assertEquals(result, 1.0, 1E-6);\n        result = UnivariateRealSolverUtils.solve(f, 0.8, 1.2);\n        assertEquals(result, 1.0, 1E-6);\n        result = UnivariateRealSolverUtils.solve(f, 0.85, 1.75);\n        assertEquals(result, 1.0, 1E-6);\n        result = UnivariateRealSolverUtils.solve(f, 0.55, 1.45);\n        assertEquals(result, 1.0, 1E-6);\n        result = UnivariateRealSolverUtils.solve(f, 0.85, 5);\n        assertEquals(result, 1.0, 1E-6);\n    }\n",
        "begin_line": 119,
        "end_line": 303,
        "comment": "",
        "child_ranges": [
            "(line 127,col 9)-(line 127,col 57)",
            "(line 128,col 9)-(line 128,col 22)",
            "(line 130,col 9)-(line 130,col 56)",
            "(line 133,col 9)-(line 133,col 44)",
            "(line 136,col 9)-(line 136,col 62)",
            "(line 137,col 9)-(line 137,col 52)",
            "(line 140,col 9)-(line 140,col 44)",
            "(line 143,col 9)-(line 143,col 62)",
            "(line 145,col 9)-(line 145,col 52)",
            "(line 147,col 9)-(line 147,col 45)",
            "(line 150,col 9)-(line 150,col 62)",
            "(line 152,col 9)-(line 152,col 52)",
            "(line 154,col 9)-(line 154,col 43)",
            "(line 157,col 9)-(line 157,col 64)",
            "(line 159,col 9)-(line 159,col 52)",
            "(line 161,col 9)-(line 161,col 43)",
            "(line 164,col 9)-(line 164,col 64)",
            "(line 166,col 9)-(line 166,col 52)",
            "(line 168,col 9)-(line 168,col 45)",
            "(line 171,col 9)-(line 171,col 64)",
            "(line 173,col 9)-(line 173,col 52)",
            "(line 176,col 9)-(line 176,col 45)",
            "(line 179,col 9)-(line 179,col 64)",
            "(line 181,col 9)-(line 181,col 52)",
            "(line 183,col 9)-(line 183,col 43)",
            "(line 186,col 9)-(line 186,col 64)",
            "(line 188,col 9)-(line 188,col 52)",
            "(line 190,col 9)-(line 190,col 45)",
            "(line 193,col 9)-(line 193,col 64)",
            "(line 195,col 9)-(line 195,col 53)",
            "(line 197,col 9)-(line 197,col 45)",
            "(line 200,col 9)-(line 200,col 64)",
            "(line 202,col 9)-(line 202,col 52)",
            "(line 204,col 9)-(line 204,col 42)",
            "(line 207,col 9)-(line 207,col 64)",
            "(line 209,col 9)-(line 209,col 53)",
            "(line 211,col 9)-(line 211,col 36)",
            "(line 212,col 9)-(line 212,col 44)",
            "(line 215,col 9)-(line 215,col 62)",
            "(line 217,col 9)-(line 217,col 52)",
            "(line 218,col 9)-(line 218,col 44)",
            "(line 221,col 9)-(line 221,col 62)",
            "(line 223,col 9)-(line 223,col 52)",
            "(line 224,col 9)-(line 224,col 45)",
            "(line 227,col 9)-(line 227,col 62)",
            "(line 229,col 9)-(line 229,col 52)",
            "(line 230,col 9)-(line 230,col 43)",
            "(line 233,col 9)-(line 233,col 64)",
            "(line 235,col 9)-(line 235,col 52)",
            "(line 236,col 9)-(line 236,col 43)",
            "(line 239,col 9)-(line 239,col 64)",
            "(line 241,col 9)-(line 241,col 52)",
            "(line 242,col 9)-(line 242,col 45)",
            "(line 245,col 9)-(line 245,col 64)",
            "(line 247,col 9)-(line 247,col 52)",
            "(line 248,col 9)-(line 248,col 45)",
            "(line 251,col 9)-(line 251,col 64)",
            "(line 253,col 9)-(line 253,col 53)",
            "(line 254,col 9)-(line 254,col 43)",
            "(line 257,col 9)-(line 257,col 64)",
            "(line 259,col 9)-(line 259,col 52)",
            "(line 260,col 9)-(line 260,col 45)",
            "(line 263,col 9)-(line 263,col 64)",
            "(line 265,col 9)-(line 265,col 53)",
            "(line 268,col 9)-(line 268,col 45)",
            "(line 271,col 9)-(line 271,col 64)",
            "(line 273,col 9)-(line 273,col 52)",
            "(line 274,col 9)-(line 274,col 42)",
            "(line 277,col 9)-(line 277,col 64)",
            "(line 279,col 9)-(line 279,col 53)",
            "(line 281,col 9)-(line 281,col 63)",
            "(line 282,col 9)-(line 282,col 62)",
            "(line 283,col 9)-(line 283,col 63)",
            "(line 284,col 9)-(line 284,col 38)",
            "(line 285,col 9)-(line 285,col 64)",
            "(line 286,col 9)-(line 286,col 38)",
            "(line 287,col 9)-(line 287,col 62)",
            "(line 288,col 9)-(line 288,col 40)",
            "(line 289,col 9)-(line 289,col 62)",
            "(line 290,col 9)-(line 290,col 40)",
            "(line 291,col 9)-(line 291,col 64)",
            "(line 292,col 9)-(line 292,col 40)",
            "(line 293,col 9)-(line 293,col 64)",
            "(line 294,col 9)-(line 294,col 40)",
            "(line 295,col 9)-(line 295,col 62)",
            "(line 296,col 9)-(line 296,col 40)",
            "(line 297,col 9)-(line 297,col 64)",
            "(line 298,col 9)-(line 298,col 40)",
            "(line 299,col 9)-(line 299,col 64)",
            "(line 300,col 9)-(line 300,col 40)",
            "(line 301,col 9)-(line 301,col 61)",
            "(line 302,col 9)-(line 302,col 40)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.analysis.solvers.BrentSolverTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java",
        "signature": "org.apache.commons.math.analysis.solvers.BrentSolverTest.testRootEndpoints()",
        "snippet": "    public void testRootEndpoints() throws Exception {\n        UnivariateRealFunction f = new SinFunction();\n        UnivariateRealSolver solver = new BrentSolver();\n\n        // endpoint is root\n        double result = solver.solve(f, Math.PI, 4);\n        assertEquals(Math.PI, result, solver.getAbsoluteAccuracy());\n\n        result = solver.solve(f, 3, Math.PI);\n        assertEquals(Math.PI, result, solver.getAbsoluteAccuracy());\n\n        result = solver.solve(f, Math.PI, 4, 3.5);\n        assertEquals(Math.PI, result, solver.getAbsoluteAccuracy());\n\n        result = solver.solve(f, 3, Math.PI, 3.07);\n        assertEquals(Math.PI, result, solver.getAbsoluteAccuracy());\n\n    }\n",
        "begin_line": 305,
        "end_line": 322,
        "comment": "",
        "child_ranges": [
            "(line 306,col 9)-(line 306,col 53)",
            "(line 307,col 9)-(line 307,col 56)",
            "(line 310,col 9)-(line 310,col 52)",
            "(line 311,col 9)-(line 311,col 68)",
            "(line 313,col 9)-(line 313,col 45)",
            "(line 314,col 9)-(line 314,col 68)",
            "(line 316,col 9)-(line 316,col 50)",
            "(line 317,col 9)-(line 317,col 68)",
            "(line 319,col 9)-(line 319,col 51)",
            "(line 320,col 9)-(line 320,col 68)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.analysis.solvers.BrentSolverTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java",
        "signature": "org.apache.commons.math.analysis.solvers.BrentSolverTest.testBadEndpoints()",
        "snippet": "    public void testBadEndpoints() throws Exception {\n        UnivariateRealFunction f = new SinFunction();\n        UnivariateRealSolver solver = new BrentSolver();\n        try {  // bad interval\n            solver.solve(f, 1, -1);\n            fail(\"Expecting IllegalArgumentException - bad interval\");\n        } catch (IllegalArgumentException ex) {\n            // expected\n        }\n        try {  // no bracket\n            solver.solve(f, 1, 1.5);\n            fail(\"Expecting IllegalArgumentException - non-bracketing\");\n        } catch (IllegalArgumentException ex) {\n            // expected\n        }\n        try {  // no bracket\n            solver.solve(f, 1, 1.5, 1.2);\n            fail(\"Expecting IllegalArgumentException - non-bracketing\");\n        } catch (IllegalArgumentException ex) {\n            // expected\n        }\n    }\n",
        "begin_line": 324,
        "end_line": 345,
        "comment": "",
        "child_ranges": [
            "(line 325,col 9)-(line 325,col 53)",
            "(line 326,col 9)-(line 326,col 56)",
            "(line 327,col 9)-(line 332,col 9)",
            "(line 333,col 9)-(line 338,col 9)",
            "(line 339,col 9)-(line 344,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.analysis.solvers.BrentSolverTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java",
        "signature": "org.apache.commons.math.analysis.solvers.BrentSolverTest.testInitialGuess()",
        "snippet": "    public void testInitialGuess() throws MathException {\n\n        MonitoredFunction f = new MonitoredFunction(new QuinticFunction());\n        UnivariateRealSolver solver = new BrentSolver();\n        double result;\n\n        // no guess\n        result = solver.solve(f, 0.6, 7.0);\n        assertEquals(result, 1.0, solver.getAbsoluteAccuracy());\n        int referenceCallsCount = f.getCallsCount();\n        assertTrue(referenceCallsCount >= 13);\n\n        // invalid guess (it *is* a root, but outside of the range)\n        try {\n          result = solver.solve(f, 0.6, 7.0, 0.0);\n          fail(\"an IllegalArgumentException was expected\");\n        } catch (IllegalArgumentException iae) {\n            // expected behaviour\n        } catch (Exception e) {\n            fail(\"wrong exception caught: \" + e.getMessage());\n        }\n\n        // bad guess\n        f.setCallsCount(0);\n        result = solver.solve(f, 0.6, 7.0, 0.61);\n        assertEquals(result, 1.0, solver.getAbsoluteAccuracy());\n        assertTrue(f.getCallsCount() > referenceCallsCount);\n\n        // good guess\n        f.setCallsCount(0);\n        result = solver.solve(f, 0.6, 7.0, 0.999999);\n        assertEquals(result, 1.0, solver.getAbsoluteAccuracy());\n        assertTrue(f.getCallsCount() < referenceCallsCount);\n\n        // perfect guess\n        f.setCallsCount(0);\n        result = solver.solve(f, 0.6, 7.0, 1.0);\n        assertEquals(result, 1.0, solver.getAbsoluteAccuracy());\n        assertEquals(0, solver.getIterationCount());\n        assertEquals(1, f.getCallsCount());\n\n    }\n",
        "begin_line": 347,
        "end_line": 388,
        "comment": "",
        "child_ranges": [
            "(line 349,col 9)-(line 349,col 75)",
            "(line 350,col 9)-(line 350,col 56)",
            "(line 351,col 9)-(line 351,col 22)",
            "(line 354,col 9)-(line 354,col 43)",
            "(line 355,col 9)-(line 355,col 64)",
            "(line 356,col 9)-(line 356,col 52)",
            "(line 357,col 9)-(line 357,col 46)",
            "(line 360,col 9)-(line 367,col 9)",
            "(line 370,col 9)-(line 370,col 27)",
            "(line 371,col 9)-(line 371,col 49)",
            "(line 372,col 9)-(line 372,col 64)",
            "(line 373,col 9)-(line 373,col 60)",
            "(line 376,col 9)-(line 376,col 27)",
            "(line 377,col 9)-(line 377,col 53)",
            "(line 378,col 9)-(line 378,col 64)",
            "(line 379,col 9)-(line 379,col 60)",
            "(line 382,col 9)-(line 382,col 27)",
            "(line 383,col 9)-(line 383,col 48)",
            "(line 384,col 9)-(line 384,col 64)",
            "(line 385,col 9)-(line 385,col 52)",
            "(line 386,col 9)-(line 386,col 43)"
        ]
    }
]