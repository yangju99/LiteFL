[
    {
        "name": "Vector3D.crossProduct#457",
        "is_bug": true,
        "src_path": "src/main/java/org/apache/commons/math/geometry/Vector3D.java",
        "class_name": "org.apache.commons.math.geometry.Vector3D",
        "signature": "org.apache.commons.math.geometry.Vector3D.crossProduct(org.apache.commons.math.geometry.Vector3D, org.apache.commons.math.geometry.Vector3D)",
        "snippet": "  public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n\n\n      // rescale both vectors without losing precision,\n      // to ensure their norm are the same order of magnitude\n\n      // we reduce cancellation errors by preconditioning,\n      // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute\n      // v3 without loss of precision. See Kahan lecture\n      // \"Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces\"\n      // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf\n\n      // compute rho as an 8 bits approximation of v1.v2 / v2.v2\n\n\n      // compute cross product from v3 and v2 instead of v1 and v2\n      return new Vector3D(v1.y * v2.z - v1.z * v2.y, v1.z * v2.x - v1.x * v2.z, v1.x * v2.y - v1.y * v2.x);\n\n  }\n",
        "begin_line": 457,
        "end_line": 475,
        "comment": " Compute the cross-product of two vectors.\n   * @param v1 first vector\n   * @param v2 second vector\n   * @return the cross product v1 ^ v2 as a new Vector\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 1
    },
    {
        "name": "Vector3D.getX#180",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math/geometry/Vector3D.java",
        "class_name": "org.apache.commons.math.geometry.Vector3D",
        "signature": "org.apache.commons.math.geometry.Vector3D.getX()",
        "snippet": "  public double getX() {\n    return x;\n  }\n",
        "begin_line": 180,
        "end_line": 182,
        "comment": " Get the abscissa of the vector.\n   * @return abscissa of the vector\n   * @see #Vector3D(double, double, double)\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1581
        },
        "num_failing_tests": 1
    },
    {
        "name": "Vector3D.getY#188",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math/geometry/Vector3D.java",
        "class_name": "org.apache.commons.math.geometry.Vector3D",
        "signature": "org.apache.commons.math.geometry.Vector3D.getY()",
        "snippet": "  public double getY() {\n    return y;\n  }\n",
        "begin_line": 188,
        "end_line": 190,
        "comment": " Get the ordinate of the vector.\n   * @return ordinate of the vector\n   * @see #Vector3D(double, double, double)\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1581
        },
        "num_failing_tests": 1
    },
    {
        "name": "Vector3D.getZ#196",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math/geometry/Vector3D.java",
        "class_name": "org.apache.commons.math.geometry.Vector3D",
        "signature": "org.apache.commons.math.geometry.Vector3D.getZ()",
        "snippet": "  public double getZ() {\n    return z;\n  }\n",
        "begin_line": 196,
        "end_line": 198,
        "comment": " Get the height of the vector.\n   * @return height of the vector\n   * @see #Vector3D(double, double, double)\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1581
        },
        "num_failing_tests": 1
    },
    {
        "name": "Vector3DFormat.getInstance#158",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math/geometry/Vector3DFormat.java",
        "class_name": "org.apache.commons.math.geometry.Vector3DFormat",
        "signature": "org.apache.commons.math.geometry.Vector3DFormat.getInstance()",
        "snippet": "    public static Vector3DFormat getInstance() {\n        return getInstance(Locale.getDefault());\n    }\n",
        "begin_line": 158,
        "end_line": 160,
        "comment": "\n     * Returns the default 3D vector format for the current locale.\n     * @return the default 3D vector format.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1118
        },
        "num_failing_tests": 1
    },
    {
        "name": "Vector3D.Vector3D#93",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math/geometry/Vector3D.java",
        "class_name": "org.apache.commons.math.geometry.Vector3D",
        "signature": "org.apache.commons.math.geometry.Vector3D.Vector3D(double, double, double)",
        "snippet": "  public Vector3D(double x, double y, double z) {\n    this.x = x;\n    this.y = y;\n    this.z = z;\n  }\n",
        "begin_line": 93,
        "end_line": 97,
        "comment": " Simple constructor.\n   * Build a vector from its coordinates\n   * @param x abscissa\n   * @param y ordinate\n   * @param z height\n   * @see #getX()\n   * @see #getY()\n   * @see #getZ()\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1118
        },
        "num_failing_tests": 1
    },
    {
        "name": "CompositeFormat.getDefaultNumberFormat#55",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math/util/CompositeFormat.java",
        "class_name": "org.apache.commons.math.util.CompositeFormat",
        "signature": "org.apache.commons.math.util.CompositeFormat.getDefaultNumberFormat(java.util.Locale)",
        "snippet": "    public static NumberFormat getDefaultNumberFormat(final Locale locale) {\n        final NumberFormat nf = NumberFormat.getInstance(locale);\n        nf.setMaximumFractionDigits(2);\n        return nf;\n    }\n",
        "begin_line": 55,
        "end_line": 59,
        "comment": "\n     * Create a default number format.  The default number format is based on\n     * {@link NumberFormat#getInstance(java.util.Locale)} with the only\n     * customizing that the maximum number of fraction digits is set to 2.\n     * @param locale the specific locale used by the format.\n     * @return the default number format specific to the given locale.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1066
        },
        "num_failing_tests": 1
    },
    {
        "name": "Vector3DFormat.Vector3DFormat#79",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math/geometry/Vector3DFormat.java",
        "class_name": "org.apache.commons.math.geometry.Vector3DFormat",
        "signature": "org.apache.commons.math.geometry.Vector3DFormat.Vector3DFormat(java.text.NumberFormat)",
        "snippet": "    public Vector3DFormat(final NumberFormat format) {\n        this(DEFAULT_PREFIX, DEFAULT_SUFFIX, DEFAULT_SEPARATOR, format);\n    }\n",
        "begin_line": 79,
        "end_line": 81,
        "comment": "\n     * Create an instance with a custom number format for components.\n     * @param format the custom format for components.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1066
        },
        "num_failing_tests": 1
    },
    {
        "name": "Vector3DFormat.Vector3DFormat#102",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math/geometry/Vector3DFormat.java",
        "class_name": "org.apache.commons.math.geometry.Vector3DFormat",
        "signature": "org.apache.commons.math.geometry.Vector3DFormat.Vector3DFormat(java.lang.String, java.lang.String, java.lang.String, java.text.NumberFormat)",
        "snippet": "    public Vector3DFormat(final String prefix, final String suffix,\n                          final String separator, final NumberFormat format) {\n        this.prefix      = prefix;\n        this.suffix      = suffix;\n        this.separator   = separator;\n        trimmedPrefix    = prefix.trim();\n        trimmedSuffix    = suffix.trim();\n        trimmedSeparator = separator.trim();\n        this.format      = format;\n    }\n",
        "begin_line": 102,
        "end_line": 111,
        "comment": "\n     * Create an instance with custom prefix, suffix, separator and format\n     * for components.\n     * @param prefix prefix to use instead of the default \"{\"\n     * @param suffix suffix to use instead of the default \"}\"\n     * @param separator separator to use instead of the default \"; \"\n     * @param format the custom format for components.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1066
        },
        "num_failing_tests": 1
    },
    {
        "name": "Vector3DFormat.getInstance#167",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math/geometry/Vector3DFormat.java",
        "class_name": "org.apache.commons.math.geometry.Vector3DFormat",
        "signature": "org.apache.commons.math.geometry.Vector3DFormat.getInstance(java.util.Locale)",
        "snippet": "    public static Vector3DFormat getInstance(final Locale locale) {\n        return new Vector3DFormat(CompositeFormat.getDefaultNumberFormat(locale));\n    }\n",
        "begin_line": 167,
        "end_line": 169,
        "comment": "\n     * Returns the default 3D vector format for the given locale.\n     * @param locale the specific locale used by the format.\n     * @return the 3D vector format specific to the given locale.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1066
        },
        "num_failing_tests": 1
    }
]