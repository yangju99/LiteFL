[
    {
        "class_name": "org.apache.commons.math.geometry.Vector3DTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/geometry/Vector3DTest.java",
        "signature": "org.apache.commons.math.geometry.Vector3DTest.testConstructors()",
        "snippet": "    @Test\n    public void testConstructors() {\n        double r = FastMath.sqrt(2) /2;\n        checkVector(new Vector3D(2, new Vector3D(FastMath.PI / 3, -FastMath.PI / 4)),\n                    r, r * FastMath.sqrt(3), -2 * r);\n        checkVector(new Vector3D(2, Vector3D.PLUS_I,\n                                 -3, Vector3D.MINUS_K),\n                    2, 0, 3);\n        checkVector(new Vector3D(2, Vector3D.PLUS_I,\n                                 5, Vector3D.PLUS_J,\n                                 -3, Vector3D.MINUS_K),\n                    2, 5, 3);\n        checkVector(new Vector3D(2, Vector3D.PLUS_I,\n                                 5, Vector3D.PLUS_J,\n                                 5, Vector3D.MINUS_J,\n                                 -3, Vector3D.MINUS_K),\n                    2, 0, 3);\n    }\n",
        "begin_line": 28,
        "end_line": 45,
        "comment": "",
        "child_ranges": [
            "(line 30,col 9)-(line 30,col 39)",
            "(line 31,col 9)-(line 32,col 53)",
            "(line 33,col 9)-(line 35,col 29)",
            "(line 36,col 9)-(line 39,col 29)",
            "(line 40,col 9)-(line 44,col 29)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.geometry.Vector3DTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/geometry/Vector3DTest.java",
        "signature": "org.apache.commons.math.geometry.Vector3DTest.testCoordinates()",
        "snippet": "    @Test\n    public void testCoordinates() {\n        Vector3D v = new Vector3D(1, 2, 3);\n        Assert.assertTrue(FastMath.abs(v.getX() - 1) < 1.0e-12);\n        Assert.assertTrue(FastMath.abs(v.getY() - 2) < 1.0e-12);\n        Assert.assertTrue(FastMath.abs(v.getZ() - 3) < 1.0e-12);\n    }\n",
        "begin_line": 47,
        "end_line": 53,
        "comment": "",
        "child_ranges": [
            "(line 49,col 9)-(line 49,col 43)",
            "(line 50,col 9)-(line 50,col 64)",
            "(line 51,col 9)-(line 51,col 64)",
            "(line 52,col 9)-(line 52,col 64)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.geometry.Vector3DTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/geometry/Vector3DTest.java",
        "signature": "org.apache.commons.math.geometry.Vector3DTest.testNorm1()",
        "snippet": "    @Test\n    public void testNorm1() {\n        Assert.assertEquals(0.0, Vector3D.ZERO.getNorm1(), 0);\n        Assert.assertEquals(6.0, new Vector3D(1, -2, 3).getNorm1(), 0);\n    }\n",
        "begin_line": 55,
        "end_line": 59,
        "comment": "",
        "child_ranges": [
            "(line 57,col 9)-(line 57,col 62)",
            "(line 58,col 9)-(line 58,col 71)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.geometry.Vector3DTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/geometry/Vector3DTest.java",
        "signature": "org.apache.commons.math.geometry.Vector3DTest.testNorm()",
        "snippet": "    @Test\n    public void testNorm() {\n        Assert.assertEquals(0.0, Vector3D.ZERO.getNorm(), 0);\n        Assert.assertEquals(FastMath.sqrt(14), new Vector3D(1, 2, 3).getNorm(), 1.0e-12);\n    }\n",
        "begin_line": 61,
        "end_line": 65,
        "comment": "",
        "child_ranges": [
            "(line 63,col 9)-(line 63,col 61)",
            "(line 64,col 9)-(line 64,col 89)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.geometry.Vector3DTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/geometry/Vector3DTest.java",
        "signature": "org.apache.commons.math.geometry.Vector3DTest.testNormInf()",
        "snippet": "    @Test\n    public void testNormInf() {\n        Assert.assertEquals(0.0, Vector3D.ZERO.getNormInf(), 0);\n        Assert.assertEquals(3.0, new Vector3D(1, -2, 3).getNormInf(), 0);\n    }\n",
        "begin_line": 67,
        "end_line": 71,
        "comment": "",
        "child_ranges": [
            "(line 69,col 9)-(line 69,col 64)",
            "(line 70,col 9)-(line 70,col 73)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.geometry.Vector3DTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/geometry/Vector3DTest.java",
        "signature": "org.apache.commons.math.geometry.Vector3DTest.testDistance1()",
        "snippet": "    @Test\n    public void testDistance1() {\n        Vector3D v1 = new Vector3D(1, -2, 3);\n        Vector3D v2 = new Vector3D(-4, 2, 0);\n        Assert.assertEquals(0.0, Vector3D.distance1(Vector3D.MINUS_I, Vector3D.MINUS_I), 0);\n        Assert.assertEquals(12.0, Vector3D.distance1(v1, v2), 1.0e-12);\n        Assert.assertEquals(v1.subtract(v2).getNorm1(), Vector3D.distance1(v1, v2), 1.0e-12);\n    }\n",
        "begin_line": 73,
        "end_line": 80,
        "comment": "",
        "child_ranges": [
            "(line 75,col 9)-(line 75,col 45)",
            "(line 76,col 9)-(line 76,col 45)",
            "(line 77,col 9)-(line 77,col 92)",
            "(line 78,col 9)-(line 78,col 71)",
            "(line 79,col 9)-(line 79,col 93)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.geometry.Vector3DTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/geometry/Vector3DTest.java",
        "signature": "org.apache.commons.math.geometry.Vector3DTest.testDistance()",
        "snippet": "    @Test\n    public void testDistance() {\n        Vector3D v1 = new Vector3D(1, -2, 3);\n        Vector3D v2 = new Vector3D(-4, 2, 0);\n        Assert.assertEquals(0.0, Vector3D.distance(Vector3D.MINUS_I, Vector3D.MINUS_I), 0);\n        Assert.assertEquals(FastMath.sqrt(50), Vector3D.distance(v1, v2), 1.0e-12);\n        Assert.assertEquals(v1.subtract(v2).getNorm(), Vector3D.distance(v1, v2), 1.0e-12);\n    }\n",
        "begin_line": 82,
        "end_line": 89,
        "comment": "",
        "child_ranges": [
            "(line 84,col 9)-(line 84,col 45)",
            "(line 85,col 9)-(line 85,col 45)",
            "(line 86,col 9)-(line 86,col 91)",
            "(line 87,col 9)-(line 87,col 83)",
            "(line 88,col 9)-(line 88,col 91)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.geometry.Vector3DTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/geometry/Vector3DTest.java",
        "signature": "org.apache.commons.math.geometry.Vector3DTest.testDistanceSq()",
        "snippet": "    @Test\n    public void testDistanceSq() {\n        Vector3D v1 = new Vector3D(1, -2, 3);\n        Vector3D v2 = new Vector3D(-4, 2, 0);\n        Assert.assertEquals(0.0, Vector3D.distanceSq(Vector3D.MINUS_I, Vector3D.MINUS_I), 0);\n        Assert.assertEquals(50.0, Vector3D.distanceSq(v1, v2), 1.0e-12);\n        Assert.assertEquals(Vector3D.distance(v1, v2) * Vector3D.distance(v1, v2),\n                            Vector3D.distanceSq(v1, v2), 1.0e-12);\n  }\n",
        "begin_line": 91,
        "end_line": 99,
        "comment": "",
        "child_ranges": [
            "(line 93,col 9)-(line 93,col 45)",
            "(line 94,col 9)-(line 94,col 45)",
            "(line 95,col 9)-(line 95,col 93)",
            "(line 96,col 9)-(line 96,col 72)",
            "(line 97,col 9)-(line 98,col 66)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.geometry.Vector3DTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/geometry/Vector3DTest.java",
        "signature": "org.apache.commons.math.geometry.Vector3DTest.testDistanceInf()",
        "snippet": "    @Test\n    public void testDistanceInf() {\n        Vector3D v1 = new Vector3D(1, -2, 3);\n        Vector3D v2 = new Vector3D(-4, 2, 0);\n        Assert.assertEquals(0.0, Vector3D.distanceInf(Vector3D.MINUS_I, Vector3D.MINUS_I), 0);\n        Assert.assertEquals(5.0, Vector3D.distanceInf(v1, v2), 1.0e-12);\n        Assert.assertEquals(v1.subtract(v2).getNormInf(), Vector3D.distanceInf(v1, v2), 1.0e-12);\n    }\n",
        "begin_line": 101,
        "end_line": 108,
        "comment": "",
        "child_ranges": [
            "(line 103,col 9)-(line 103,col 45)",
            "(line 104,col 9)-(line 104,col 45)",
            "(line 105,col 9)-(line 105,col 94)",
            "(line 106,col 9)-(line 106,col 72)",
            "(line 107,col 9)-(line 107,col 97)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.geometry.Vector3DTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/geometry/Vector3DTest.java",
        "signature": "org.apache.commons.math.geometry.Vector3DTest.testSubtract()",
        "snippet": "    @Test\n    public void testSubtract() {\n        Vector3D v1 = new Vector3D(1, 2, 3);\n        Vector3D v2 = new Vector3D(-3, -2, -1);\n        v1 = v1.subtract(v2);\n        checkVector(v1, 4, 4, 4);\n\n        checkVector(v2.subtract(v1), -7, -6, -5);\n        checkVector(v2.subtract(3, v1), -15, -14, -13);\n    }\n",
        "begin_line": 110,
        "end_line": 119,
        "comment": "",
        "child_ranges": [
            "(line 112,col 9)-(line 112,col 44)",
            "(line 113,col 9)-(line 113,col 47)",
            "(line 114,col 9)-(line 114,col 29)",
            "(line 115,col 9)-(line 115,col 33)",
            "(line 117,col 9)-(line 117,col 49)",
            "(line 118,col 9)-(line 118,col 55)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.geometry.Vector3DTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/geometry/Vector3DTest.java",
        "signature": "org.apache.commons.math.geometry.Vector3DTest.testAdd()",
        "snippet": "    @Test\n    public void testAdd() {\n        Vector3D v1 = new Vector3D(1, 2, 3);\n        Vector3D v2 = new Vector3D(-3, -2, -1);\n        v1 = v1.add(v2);\n        checkVector(v1, -2, 0, 2);\n\n        checkVector(v2.add(v1), -5, -2, 1);\n        checkVector(v2.add(3, v1), -9, -2, 5);\n    }\n",
        "begin_line": 121,
        "end_line": 130,
        "comment": "",
        "child_ranges": [
            "(line 123,col 9)-(line 123,col 44)",
            "(line 124,col 9)-(line 124,col 47)",
            "(line 125,col 9)-(line 125,col 24)",
            "(line 126,col 9)-(line 126,col 34)",
            "(line 128,col 9)-(line 128,col 43)",
            "(line 129,col 9)-(line 129,col 46)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.geometry.Vector3DTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/geometry/Vector3DTest.java",
        "signature": "org.apache.commons.math.geometry.Vector3DTest.testScalarProduct()",
        "snippet": "    @Test\n    public void testScalarProduct() {\n        Vector3D v = new Vector3D(1, 2, 3);\n        v = v.scalarMultiply(3);\n        checkVector(v, 3, 6, 9);\n\n        checkVector(v.scalarMultiply(0.5), 1.5, 3, 4.5);\n    }\n",
        "begin_line": 132,
        "end_line": 139,
        "comment": "",
        "child_ranges": [
            "(line 134,col 9)-(line 134,col 43)",
            "(line 135,col 9)-(line 135,col 32)",
            "(line 136,col 9)-(line 136,col 32)",
            "(line 138,col 9)-(line 138,col 56)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.geometry.Vector3DTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/geometry/Vector3DTest.java",
        "signature": "org.apache.commons.math.geometry.Vector3DTest.testVectorialProducts()",
        "snippet": "    @Test\n    public void testVectorialProducts() {\n        Vector3D v1 = new Vector3D(2, 1, -4);\n        Vector3D v2 = new Vector3D(3, 1, -1);\n\n        Assert.assertTrue(FastMath.abs(Vector3D.dotProduct(v1, v2) - 11) < 1.0e-12);\n\n        Vector3D v3 = Vector3D.crossProduct(v1, v2);\n        checkVector(v3, 3, -10, -1);\n\n        Assert.assertTrue(FastMath.abs(Vector3D.dotProduct(v1, v3)) < 1.0e-12);\n        Assert.assertTrue(FastMath.abs(Vector3D.dotProduct(v2, v3)) < 1.0e-12);\n    }\n",
        "begin_line": 141,
        "end_line": 153,
        "comment": "",
        "child_ranges": [
            "(line 143,col 9)-(line 143,col 45)",
            "(line 144,col 9)-(line 144,col 45)",
            "(line 146,col 9)-(line 146,col 84)",
            "(line 148,col 9)-(line 148,col 52)",
            "(line 149,col 9)-(line 149,col 36)",
            "(line 151,col 9)-(line 151,col 79)",
            "(line 152,col 9)-(line 152,col 79)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.geometry.Vector3DTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/geometry/Vector3DTest.java",
        "signature": "org.apache.commons.math.geometry.Vector3DTest.testCrossProductCancellation()",
        "snippet": "    @Test\n    public void testCrossProductCancellation() {\n        Vector3D v1 = new Vector3D(9070467121.0, 4535233560.0, 1);\n        Vector3D v2 = new Vector3D(9070467123.0, 4535233561.0, 1);\n        checkVector(Vector3D.crossProduct(v1, v2), -1, 2, 1);\n\n        double scale    = FastMath.scalb(1.0, 100);\n        Vector3D big1   = new Vector3D(scale, v1);\n        Vector3D small2 = new Vector3D(1 / scale, v2);\n        checkVector(Vector3D.crossProduct(big1, small2), -1, 2, 1);\n\n    }\n",
        "begin_line": 155,
        "end_line": 166,
        "comment": "",
        "child_ranges": [
            "(line 157,col 9)-(line 157,col 66)",
            "(line 158,col 9)-(line 158,col 66)",
            "(line 159,col 9)-(line 159,col 61)",
            "(line 161,col 9)-(line 161,col 51)",
            "(line 162,col 9)-(line 162,col 50)",
            "(line 163,col 9)-(line 163,col 54)",
            "(line 164,col 9)-(line 164,col 67)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.geometry.Vector3DTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/geometry/Vector3DTest.java",
        "signature": "org.apache.commons.math.geometry.Vector3DTest.testAngular()",
        "snippet": "    @Test\n    public void testAngular() {\n        Assert.assertEquals(0,           Vector3D.PLUS_I.getAlpha(), 1.0e-10);\n        Assert.assertEquals(0,           Vector3D.PLUS_I.getDelta(), 1.0e-10);\n        Assert.assertEquals(FastMath.PI / 2, Vector3D.PLUS_J.getAlpha(), 1.0e-10);\n        Assert.assertEquals(0,           Vector3D.PLUS_J.getDelta(), 1.0e-10);\n        Assert.assertEquals(0,           Vector3D.PLUS_K.getAlpha(), 1.0e-10);\n        Assert.assertEquals(FastMath.PI / 2, Vector3D.PLUS_K.getDelta(), 1.0e-10);\n      \n        Vector3D u = new Vector3D(-1, 1, -1);\n        Assert.assertEquals(3 * FastMath.PI /4, u.getAlpha(), 1.0e-10);\n        Assert.assertEquals(-1.0 / FastMath.sqrt(3), FastMath.sin(u.getDelta()), 1.0e-10);\n    }\n",
        "begin_line": 168,
        "end_line": 180,
        "comment": "",
        "child_ranges": [
            "(line 170,col 9)-(line 170,col 78)",
            "(line 171,col 9)-(line 171,col 78)",
            "(line 172,col 9)-(line 172,col 82)",
            "(line 173,col 9)-(line 173,col 78)",
            "(line 174,col 9)-(line 174,col 78)",
            "(line 175,col 9)-(line 175,col 82)",
            "(line 177,col 9)-(line 177,col 45)",
            "(line 178,col 9)-(line 178,col 71)",
            "(line 179,col 9)-(line 179,col 90)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.geometry.Vector3DTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/geometry/Vector3DTest.java",
        "signature": "org.apache.commons.math.geometry.Vector3DTest.testAngularSeparation()",
        "snippet": "    @Test\n    public void testAngularSeparation() {\n        Vector3D v1 = new Vector3D(2, -1, 4);\n\n        Vector3D  k = v1.normalize();\n        Vector3D  i = k.orthogonal();\n        Vector3D v2 = k.scalarMultiply(FastMath.cos(1.2)).add(i.scalarMultiply(FastMath.sin(1.2)));\n\n        Assert.assertTrue(FastMath.abs(Vector3D.angle(v1, v2) - 1.2) < 1.0e-12);\n  }\n",
        "begin_line": 182,
        "end_line": 191,
        "comment": "",
        "child_ranges": [
            "(line 184,col 9)-(line 184,col 45)",
            "(line 186,col 9)-(line 186,col 37)",
            "(line 187,col 9)-(line 187,col 37)",
            "(line 188,col 9)-(line 188,col 99)",
            "(line 190,col 9)-(line 190,col 80)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.geometry.Vector3DTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/geometry/Vector3DTest.java",
        "signature": "org.apache.commons.math.geometry.Vector3DTest.testNormalize()",
        "snippet": "    @Test\n    public void testNormalize() {\n        Assert.assertEquals(1.0, new Vector3D(5, -4, 2).normalize().getNorm(), 1.0e-12);\n        try {\n            Vector3D.ZERO.normalize();\n            Assert.fail(\"an exception should have been thrown\");\n        } catch (MathArithmeticException ae) {\n            // expected behavior\n        }\n    }\n",
        "begin_line": 193,
        "end_line": 202,
        "comment": "",
        "child_ranges": [
            "(line 195,col 9)-(line 195,col 88)",
            "(line 196,col 9)-(line 201,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.geometry.Vector3DTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/geometry/Vector3DTest.java",
        "signature": "org.apache.commons.math.geometry.Vector3DTest.testOrthogonal()",
        "snippet": "    @Test\n    public void testOrthogonal() {\n        Vector3D v1 = new Vector3D(0.1, 2.5, 1.3);\n        Assert.assertEquals(0.0, Vector3D.dotProduct(v1, v1.orthogonal()), 1.0e-12);\n        Vector3D v2 = new Vector3D(2.3, -0.003, 7.6);\n        Assert.assertEquals(0.0, Vector3D.dotProduct(v2, v2.orthogonal()), 1.0e-12);\n        Vector3D v3 = new Vector3D(-1.7, 1.4, 0.2);\n        Assert.assertEquals(0.0, Vector3D.dotProduct(v3, v3.orthogonal()), 1.0e-12);\n        try {\n            new Vector3D(0, 0, 0).orthogonal();\n            Assert.fail(\"an exception should have been thrown\");\n        } catch (MathArithmeticException ae) {\n            // expected behavior\n        }\n    }\n",
        "begin_line": 204,
        "end_line": 218,
        "comment": "",
        "child_ranges": [
            "(line 206,col 9)-(line 206,col 50)",
            "(line 207,col 9)-(line 207,col 84)",
            "(line 208,col 9)-(line 208,col 53)",
            "(line 209,col 9)-(line 209,col 84)",
            "(line 210,col 9)-(line 210,col 51)",
            "(line 211,col 9)-(line 211,col 84)",
            "(line 212,col 9)-(line 217,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.geometry.Vector3DTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/geometry/Vector3DTest.java",
        "signature": "org.apache.commons.math.geometry.Vector3DTest.testAngle()",
        "snippet": "    @Test\n    public void testAngle() {\n        Assert.assertEquals(0.22572612855273393616,\n                            Vector3D.angle(new Vector3D(1, 2, 3), new Vector3D(4, 5, 6)),\n                            1.0e-12);\n        Assert.assertEquals(7.98595620686106654517199e-8,\n                            Vector3D.angle(new Vector3D(1, 2, 3), new Vector3D(2, 4, 6.000001)),\n                            1.0e-12);\n        Assert.assertEquals(3.14159257373023116985197793156,\n                            Vector3D.angle(new Vector3D(1, 2, 3), new Vector3D(-2, -4, -6.000001)),\n                            1.0e-12);\n        try {\n            Vector3D.angle(Vector3D.ZERO, Vector3D.PLUS_I);\n            Assert.fail(\"an exception should have been thrown\");\n        } catch (MathArithmeticException ae) {\n            // expected behavior\n        }\n    }\n",
        "begin_line": 220,
        "end_line": 237,
        "comment": "",
        "child_ranges": [
            "(line 222,col 9)-(line 224,col 37)",
            "(line 225,col 9)-(line 227,col 37)",
            "(line 228,col 9)-(line 230,col 37)",
            "(line 231,col 9)-(line 236,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.geometry.Vector3DTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/geometry/Vector3DTest.java",
        "signature": "org.apache.commons.math.geometry.Vector3DTest.checkVector(org.apache.commons.math.geometry.Vector3D, double, double, double)",
        "snippet": "    private void checkVector(Vector3D v, double x, double y, double z) {\n        Assert.assertEquals(x, v.getX(), 1.0e-12);\n        Assert.assertEquals(y, v.getY(), 1.0e-12);\n        Assert.assertEquals(z, v.getZ(), 1.0e-12);\n    }\n",
        "begin_line": 239,
        "end_line": 243,
        "comment": "",
        "child_ranges": [
            "(line 240,col 9)-(line 240,col 50)",
            "(line 241,col 9)-(line 241,col 50)",
            "(line 242,col 9)-(line 242,col 50)"
        ]
    }
]