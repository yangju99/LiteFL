[
    {
        "class_name": "com.google.javascript.jscomp.NodeUtilTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NodeUtilTest.java",
        "signature": "com.google.javascript.jscomp.NodeUtilTest.parse(java.lang.String)",
        "snippet": "  private static Node parse(String js) {\n    Compiler compiler = new Compiler();\n    Node n = compiler.parseTestCode(js);\n    assertEquals(0, compiler.getErrorCount());\n    return n;\n  }\n",
        "begin_line": 36,
        "end_line": 41,
        "comment": "",
        "child_ranges": [
            "(line 37,col 5)-(line 37,col 39)",
            "(line 38,col 5)-(line 38,col 40)",
            "(line 39,col 5)-(line 39,col 46)",
            "(line 40,col 5)-(line 40,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtilTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NodeUtilTest.java",
        "signature": "com.google.javascript.jscomp.NodeUtilTest.getNode(java.lang.String)",
        "snippet": "  static Node getNode(String js) {\n    Node root = parse(\"var a=(\" + js + \");\");\n    Node expr = root.getFirstChild();\n    Node var = expr.getFirstChild();\n    return var.getFirstChild();\n  }\n",
        "begin_line": 43,
        "end_line": 48,
        "comment": "",
        "child_ranges": [
            "(line 44,col 5)-(line 44,col 45)",
            "(line 45,col 5)-(line 45,col 37)",
            "(line 46,col 5)-(line 46,col 36)",
            "(line 47,col 5)-(line 47,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtilTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NodeUtilTest.java",
        "signature": "com.google.javascript.jscomp.NodeUtilTest.testIsLiteralOrConstValue()",
        "snippet": "  public void testIsLiteralOrConstValue() {\n    assertLiteralAndImmutable(getNode(\"10\"));\n    assertLiteralAndImmutable(getNode(\"-10\"));\n    assertLiteralButNotImmutable(getNode(\"[10, 20]\"));\n    assertLiteralButNotImmutable(getNode(\"{'a': 20}\"));\n    assertLiteralButNotImmutable(getNode(\"[10, , 1.0, [undefined], 'a']\"));\n    assertLiteralButNotImmutable(getNode(\"/abc/\"));\n    assertLiteralAndImmutable(getNode(\"\\\"string\\\"\"));\n    assertLiteralAndImmutable(getNode(\"'aaa'\"));\n    assertLiteralAndImmutable(getNode(\"null\"));\n    assertLiteralAndImmutable(getNode(\"undefined\"));\n    assertLiteralAndImmutable(getNode(\"void 0\"));\n    assertNotLiteral(getNode(\"abc\"));\n    assertNotLiteral(getNode(\"[10, foo(), 20]\"));\n    assertNotLiteral(getNode(\"foo()\"));\n    assertNotLiteral(getNode(\"c + d\"));\n    assertNotLiteral(getNode(\"{'a': foo()}\"));\n    assertNotLiteral(getNode(\"void foo()\"));\n  }\n",
        "begin_line": 50,
        "end_line": 68,
        "comment": "",
        "child_ranges": [
            "(line 51,col 5)-(line 51,col 45)",
            "(line 52,col 5)-(line 52,col 46)",
            "(line 53,col 5)-(line 53,col 54)",
            "(line 54,col 5)-(line 54,col 55)",
            "(line 55,col 5)-(line 55,col 75)",
            "(line 56,col 5)-(line 56,col 51)",
            "(line 57,col 5)-(line 57,col 53)",
            "(line 58,col 5)-(line 58,col 48)",
            "(line 59,col 5)-(line 59,col 47)",
            "(line 60,col 5)-(line 60,col 52)",
            "(line 61,col 5)-(line 61,col 49)",
            "(line 62,col 5)-(line 62,col 37)",
            "(line 63,col 5)-(line 63,col 49)",
            "(line 64,col 5)-(line 64,col 39)",
            "(line 65,col 5)-(line 65,col 39)",
            "(line 66,col 5)-(line 66,col 46)",
            "(line 67,col 5)-(line 67,col 44)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtilTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NodeUtilTest.java",
        "signature": "com.google.javascript.jscomp.NodeUtilTest.assertLiteralAndImmutable(com.google.javascript.rhino.Node)",
        "snippet": "  public void assertLiteralAndImmutable(Node n) {\n    assertTrue(NodeUtil.isLiteralValue(n, true));\n    assertTrue(NodeUtil.isLiteralValue(n, false));\n    assertTrue(NodeUtil.isImmutableValue(n));\n  }\n",
        "begin_line": 70,
        "end_line": 74,
        "comment": "",
        "child_ranges": [
            "(line 71,col 5)-(line 71,col 49)",
            "(line 72,col 5)-(line 72,col 50)",
            "(line 73,col 5)-(line 73,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtilTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NodeUtilTest.java",
        "signature": "com.google.javascript.jscomp.NodeUtilTest.assertLiteralButNotImmutable(com.google.javascript.rhino.Node)",
        "snippet": "  public void assertLiteralButNotImmutable(Node n) {\n    assertTrue(NodeUtil.isLiteralValue(n, true));\n    assertTrue(NodeUtil.isLiteralValue(n, false));\n    assertFalse(NodeUtil.isImmutableValue(n));\n  }\n",
        "begin_line": 76,
        "end_line": 80,
        "comment": "",
        "child_ranges": [
            "(line 77,col 5)-(line 77,col 49)",
            "(line 78,col 5)-(line 78,col 50)",
            "(line 79,col 5)-(line 79,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtilTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NodeUtilTest.java",
        "signature": "com.google.javascript.jscomp.NodeUtilTest.assertNotLiteral(com.google.javascript.rhino.Node)",
        "snippet": "  public void assertNotLiteral(Node n) {\n    assertFalse(NodeUtil.isLiteralValue(n, true));\n    assertFalse(NodeUtil.isLiteralValue(n, false));\n    assertFalse(NodeUtil.isImmutableValue(n));\n  }\n",
        "begin_line": 82,
        "end_line": 86,
        "comment": "",
        "child_ranges": [
            "(line 83,col 5)-(line 83,col 50)",
            "(line 84,col 5)-(line 84,col 51)",
            "(line 85,col 5)-(line 85,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtilTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NodeUtilTest.java",
        "signature": "com.google.javascript.jscomp.NodeUtilTest.testGetBooleanValue()",
        "snippet": "  public void testGetBooleanValue() {\n    assertBooleanTrue(\"true\");\n    assertBooleanTrue(\"10\");\n    assertBooleanTrue(\"'0'\");\n    assertBooleanTrue(\"/a/\");\n    assertBooleanTrue(\"{}\");\n    assertBooleanTrue(\"[]\");\n    assertBooleanFalse(\"false\");\n    assertBooleanFalse(\"null\");\n    assertBooleanFalse(\"0\");\n    assertBooleanFalse(\"''\");\n    assertBooleanFalse(\"undefined\");\n    assertBooleanFalse(\"void 0\");\n    assertBooleanFalse(\"void foo()\");\n    assertBooleanUnknown(\"b\");\n    assertBooleanUnknown(\"-'0.0'\");\n  }\n",
        "begin_line": 88,
        "end_line": 104,
        "comment": "",
        "child_ranges": [
            "(line 89,col 5)-(line 89,col 30)",
            "(line 90,col 5)-(line 90,col 28)",
            "(line 91,col 5)-(line 91,col 29)",
            "(line 92,col 5)-(line 92,col 29)",
            "(line 93,col 5)-(line 93,col 28)",
            "(line 94,col 5)-(line 94,col 28)",
            "(line 95,col 5)-(line 95,col 32)",
            "(line 96,col 5)-(line 96,col 31)",
            "(line 97,col 5)-(line 97,col 28)",
            "(line 98,col 5)-(line 98,col 29)",
            "(line 99,col 5)-(line 99,col 36)",
            "(line 100,col 5)-(line 100,col 33)",
            "(line 101,col 5)-(line 101,col 37)",
            "(line 102,col 5)-(line 102,col 30)",
            "(line 103,col 5)-(line 103,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtilTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NodeUtilTest.java",
        "signature": "com.google.javascript.jscomp.NodeUtilTest.assertBooleanTrue(java.lang.String)",
        "snippet": "  private void assertBooleanTrue(String val) {\n    assertEquals(TernaryValue.TRUE, NodeUtil.getBooleanValue(getNode(val)));\n  }\n",
        "begin_line": 106,
        "end_line": 108,
        "comment": "",
        "child_ranges": [
            "(line 107,col 5)-(line 107,col 76)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtilTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NodeUtilTest.java",
        "signature": "com.google.javascript.jscomp.NodeUtilTest.assertBooleanFalse(java.lang.String)",
        "snippet": "  private void assertBooleanFalse(String val) {\n    assertEquals(TernaryValue.FALSE, NodeUtil.getBooleanValue(getNode(val)));\n  }\n",
        "begin_line": 110,
        "end_line": 112,
        "comment": "",
        "child_ranges": [
            "(line 111,col 5)-(line 111,col 77)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtilTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NodeUtilTest.java",
        "signature": "com.google.javascript.jscomp.NodeUtilTest.assertBooleanUnknown(java.lang.String)",
        "snippet": "  private void assertBooleanUnknown(String val) {\n    assertEquals(TernaryValue.UNKNOWN, NodeUtil.getBooleanValue(getNode(val)));\n  }\n",
        "begin_line": 114,
        "end_line": 116,
        "comment": "",
        "child_ranges": [
            "(line 115,col 5)-(line 115,col 79)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtilTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NodeUtilTest.java",
        "signature": "com.google.javascript.jscomp.NodeUtilTest.testGetExpressionBooleanValue()",
        "snippet": "  public void testGetExpressionBooleanValue() {\n    assertExpressionBooleanTrue(\"a=true\");\n    assertExpressionBooleanFalse(\"a=false\");\n\n    assertExpressionBooleanTrue(\"a=(false,true)\");\n    assertExpressionBooleanFalse(\"a=(true,false)\");\n\n    assertExpressionBooleanTrue(\"a=(false || true)\");\n    assertExpressionBooleanFalse(\"a=(true && false)\");\n\n    assertExpressionBooleanTrue(\"a=!(true && false)\");\n\n    assertExpressionBooleanTrue(\"a,true\");\n    assertExpressionBooleanFalse(\"a,false\");\n\n    assertExpressionBooleanTrue(\"true||false\");\n    assertExpressionBooleanFalse(\"false||false\");\n\n    assertExpressionBooleanTrue(\"true&&true\");\n    assertExpressionBooleanFalse(\"true&&false\");\n\n    assertExpressionBooleanFalse(\"!true\");\n    assertExpressionBooleanTrue(\"!false\");\n    assertExpressionBooleanTrue(\"!''\");\n\n    // Assignment ops other than ASSIGN are unknown.\n    assertExpressionBooleanUnknown(\"a *= 2\");\n\n    // Complex expressions that contain anything other then \"=\", \",\", or \"!\" are\n    // unknown.\n    assertExpressionBooleanUnknown(\"2 + 2\");\n\n    assertExpressionBooleanTrue(\"a=1\");\n    assertExpressionBooleanTrue(\"a=/a/\");\n    assertExpressionBooleanTrue(\"a={}\");\n\n    assertExpressionBooleanTrue(\"true\");\n    assertExpressionBooleanTrue(\"10\");\n    assertExpressionBooleanTrue(\"'0'\");\n    assertExpressionBooleanTrue(\"/a/\");\n    assertExpressionBooleanTrue(\"{}\");\n    assertExpressionBooleanTrue(\"[]\");\n    assertExpressionBooleanFalse(\"false\");\n    assertExpressionBooleanFalse(\"null\");\n    assertExpressionBooleanFalse(\"0\");\n    assertExpressionBooleanFalse(\"''\");\n    assertExpressionBooleanFalse(\"undefined\");\n    assertExpressionBooleanFalse(\"void 0\");\n    assertExpressionBooleanFalse(\"void foo()\");\n\n    assertExpressionBooleanTrue(\"a?true:true\");\n    assertExpressionBooleanFalse(\"a?false:false\");\n    assertExpressionBooleanUnknown(\"a?true:false\");\n    assertExpressionBooleanUnknown(\"a?true:foo()\");\n\n    assertExpressionBooleanUnknown(\"b\");\n    assertExpressionBooleanUnknown(\"-'0.0'\");\n  }\n",
        "begin_line": 118,
        "end_line": 175,
        "comment": "",
        "child_ranges": [
            "(line 119,col 5)-(line 119,col 42)",
            "(line 120,col 5)-(line 120,col 44)",
            "(line 122,col 5)-(line 122,col 50)",
            "(line 123,col 5)-(line 123,col 51)",
            "(line 125,col 5)-(line 125,col 53)",
            "(line 126,col 5)-(line 126,col 54)",
            "(line 128,col 5)-(line 128,col 54)",
            "(line 130,col 5)-(line 130,col 42)",
            "(line 131,col 5)-(line 131,col 44)",
            "(line 133,col 5)-(line 133,col 47)",
            "(line 134,col 5)-(line 134,col 49)",
            "(line 136,col 5)-(line 136,col 46)",
            "(line 137,col 5)-(line 137,col 48)",
            "(line 139,col 5)-(line 139,col 42)",
            "(line 140,col 5)-(line 140,col 42)",
            "(line 141,col 5)-(line 141,col 39)",
            "(line 144,col 5)-(line 144,col 45)",
            "(line 148,col 5)-(line 148,col 44)",
            "(line 150,col 5)-(line 150,col 39)",
            "(line 151,col 5)-(line 151,col 41)",
            "(line 152,col 5)-(line 152,col 40)",
            "(line 154,col 5)-(line 154,col 40)",
            "(line 155,col 5)-(line 155,col 38)",
            "(line 156,col 5)-(line 156,col 39)",
            "(line 157,col 5)-(line 157,col 39)",
            "(line 158,col 5)-(line 158,col 38)",
            "(line 159,col 5)-(line 159,col 38)",
            "(line 160,col 5)-(line 160,col 42)",
            "(line 161,col 5)-(line 161,col 41)",
            "(line 162,col 5)-(line 162,col 38)",
            "(line 163,col 5)-(line 163,col 39)",
            "(line 164,col 5)-(line 164,col 46)",
            "(line 165,col 5)-(line 165,col 43)",
            "(line 166,col 5)-(line 166,col 47)",
            "(line 168,col 5)-(line 168,col 47)",
            "(line 169,col 5)-(line 169,col 50)",
            "(line 170,col 5)-(line 170,col 51)",
            "(line 171,col 5)-(line 171,col 51)",
            "(line 173,col 5)-(line 173,col 40)",
            "(line 174,col 5)-(line 174,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtilTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NodeUtilTest.java",
        "signature": "com.google.javascript.jscomp.NodeUtilTest.assertExpressionBooleanTrue(java.lang.String)",
        "snippet": "  private void assertExpressionBooleanTrue(String val) {\n    assertEquals(TernaryValue.TRUE,\n        NodeUtil.getExpressionBooleanValue(getNode(val)));\n  }\n",
        "begin_line": 177,
        "end_line": 180,
        "comment": "",
        "child_ranges": [
            "(line 178,col 5)-(line 179,col 58)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtilTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NodeUtilTest.java",
        "signature": "com.google.javascript.jscomp.NodeUtilTest.assertExpressionBooleanFalse(java.lang.String)",
        "snippet": "  private void assertExpressionBooleanFalse(String val) {\n    assertEquals(TernaryValue.FALSE,\n        NodeUtil.getExpressionBooleanValue(getNode(val)));\n  }\n",
        "begin_line": 182,
        "end_line": 185,
        "comment": "",
        "child_ranges": [
            "(line 183,col 5)-(line 184,col 58)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtilTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NodeUtilTest.java",
        "signature": "com.google.javascript.jscomp.NodeUtilTest.assertExpressionBooleanUnknown(java.lang.String)",
        "snippet": "  private void assertExpressionBooleanUnknown(String val) {\n    assertEquals(TernaryValue.UNKNOWN,\n        NodeUtil.getExpressionBooleanValue(getNode(val)));\n  }\n",
        "begin_line": 187,
        "end_line": 190,
        "comment": "",
        "child_ranges": [
            "(line 188,col 5)-(line 189,col 58)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtilTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NodeUtilTest.java",
        "signature": "com.google.javascript.jscomp.NodeUtilTest.testGetStringValue()",
        "snippet": "  public void testGetStringValue() {\n    assertEquals(\"true\", NodeUtil.getStringValue(getNode(\"true\")));\n    assertEquals(\"10\", NodeUtil.getStringValue(getNode(\"10\")));\n    assertEquals(\"1\", NodeUtil.getStringValue(getNode(\"1.0\")));\n    assertEquals(\"0\", NodeUtil.getStringValue(getNode(\"'0'\")));\n    assertEquals(null, NodeUtil.getStringValue(getNode(\"/a/\")));\n    assertEquals(null, NodeUtil.getStringValue(getNode(\"{}\")));\n    assertEquals(null, NodeUtil.getStringValue(getNode(\"[]\")));\n    assertEquals(\"false\", NodeUtil.getStringValue(getNode(\"false\")));\n    assertEquals(\"null\", NodeUtil.getStringValue(getNode(\"null\")));\n    assertEquals(\"0\", NodeUtil.getStringValue(getNode(\"0\")));\n    assertEquals(\"\", NodeUtil.getStringValue(getNode(\"''\")));\n    assertEquals(\"undefined\", NodeUtil.getStringValue(getNode(\"undefined\")));\n    assertEquals(\"undefined\", NodeUtil.getStringValue(getNode(\"void 0\")));\n    assertEquals(\"undefined\", NodeUtil.getStringValue(getNode(\"void foo()\")));\n  }\n",
        "begin_line": 192,
        "end_line": 207,
        "comment": "",
        "child_ranges": [
            "(line 193,col 5)-(line 193,col 67)",
            "(line 194,col 5)-(line 194,col 63)",
            "(line 195,col 5)-(line 195,col 63)",
            "(line 196,col 5)-(line 196,col 63)",
            "(line 197,col 5)-(line 197,col 64)",
            "(line 198,col 5)-(line 198,col 63)",
            "(line 199,col 5)-(line 199,col 63)",
            "(line 200,col 5)-(line 200,col 69)",
            "(line 201,col 5)-(line 201,col 67)",
            "(line 202,col 5)-(line 202,col 61)",
            "(line 203,col 5)-(line 203,col 61)",
            "(line 204,col 5)-(line 204,col 77)",
            "(line 205,col 5)-(line 205,col 74)",
            "(line 206,col 5)-(line 206,col 78)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtilTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NodeUtilTest.java",
        "signature": "com.google.javascript.jscomp.NodeUtilTest.testGetFunctionName1()",
        "snippet": "  public void testGetFunctionName1() throws Exception {\n    Compiler compiler = new Compiler();\n    Node parent = compiler.parseTestCode(\"function name(){}\");\n\n    testGetFunctionName(parent.getFirstChild(), \"name\");\n  }\n",
        "begin_line": 209,
        "end_line": 214,
        "comment": "",
        "child_ranges": [
            "(line 210,col 5)-(line 210,col 39)",
            "(line 211,col 5)-(line 211,col 62)",
            "(line 213,col 5)-(line 213,col 56)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtilTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NodeUtilTest.java",
        "signature": "com.google.javascript.jscomp.NodeUtilTest.testGetFunctionName2()",
        "snippet": "  public void testGetFunctionName2() throws Exception {\n    Compiler compiler = new Compiler();\n    Node parent = compiler.parseTestCode(\"var name = function(){}\")\n        .getFirstChild().getFirstChild();\n\n    testGetFunctionName(parent.getFirstChild(), \"name\");\n  }\n",
        "begin_line": 216,
        "end_line": 222,
        "comment": "",
        "child_ranges": [
            "(line 217,col 5)-(line 217,col 39)",
            "(line 218,col 5)-(line 219,col 41)",
            "(line 221,col 5)-(line 221,col 56)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtilTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NodeUtilTest.java",
        "signature": "com.google.javascript.jscomp.NodeUtilTest.testGetFunctionName3()",
        "snippet": "  public void testGetFunctionName3() throws Exception {\n    Compiler compiler = new Compiler();\n    Node parent = compiler.parseTestCode(\"qualified.name = function(){}\")\n        .getFirstChild().getFirstChild();\n\n    testGetFunctionName(parent.getLastChild(), \"qualified.name\");\n  }\n",
        "begin_line": 224,
        "end_line": 230,
        "comment": "",
        "child_ranges": [
            "(line 225,col 5)-(line 225,col 39)",
            "(line 226,col 5)-(line 227,col 41)",
            "(line 229,col 5)-(line 229,col 65)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtilTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NodeUtilTest.java",
        "signature": "com.google.javascript.jscomp.NodeUtilTest.testGetFunctionName4()",
        "snippet": "  public void testGetFunctionName4() throws Exception {\n    Compiler compiler = new Compiler();\n    Node parent = compiler.parseTestCode(\"var name2 = function name1(){}\")\n        .getFirstChild().getFirstChild();\n\n    testGetFunctionName(parent.getFirstChild(), \"name2\");\n  }\n",
        "begin_line": 232,
        "end_line": 238,
        "comment": "",
        "child_ranges": [
            "(line 233,col 5)-(line 233,col 39)",
            "(line 234,col 5)-(line 235,col 41)",
            "(line 237,col 5)-(line 237,col 57)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtilTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NodeUtilTest.java",
        "signature": "com.google.javascript.jscomp.NodeUtilTest.testGetFunctionName5()",
        "snippet": "  public void testGetFunctionName5() throws Exception {\n    Compiler compiler = new Compiler();\n    Node n = compiler.parseTestCode(\"qualified.name2 = function name1(){}\");\n    Node parent = n.getFirstChild().getFirstChild();\n\n    testGetFunctionName(parent.getLastChild(), \"qualified.name2\");\n  }\n",
        "begin_line": 240,
        "end_line": 246,
        "comment": "",
        "child_ranges": [
            "(line 241,col 5)-(line 241,col 39)",
            "(line 242,col 5)-(line 242,col 76)",
            "(line 243,col 5)-(line 243,col 52)",
            "(line 245,col 5)-(line 245,col 66)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtilTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NodeUtilTest.java",
        "signature": "com.google.javascript.jscomp.NodeUtilTest.testGetFunctionName(com.google.javascript.rhino.Node, java.lang.String)",
        "snippet": "  private void testGetFunctionName(Node function, String name) {\n    assertEquals(Token.FUNCTION, function.getType());\n    assertEquals(name, NodeUtil.getFunctionName(function));\n  }\n",
        "begin_line": 248,
        "end_line": 251,
        "comment": "",
        "child_ranges": [
            "(line 249,col 5)-(line 249,col 53)",
            "(line 250,col 5)-(line 250,col 59)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtilTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NodeUtilTest.java",
        "signature": "com.google.javascript.jscomp.NodeUtilTest.testContainsFunctionDeclaration()",
        "snippet": "  public void testContainsFunctionDeclaration() {\n    assertTrue(NodeUtil.containsFunction(\n                   getNode(\"function foo(){}\")));\n    assertTrue(NodeUtil.containsFunction(\n                   getNode(\"(b?function(){}:null)\")));\n\n    assertFalse(NodeUtil.containsFunction(\n                   getNode(\"(b?foo():null)\")));\n    assertFalse(NodeUtil.containsFunction(\n                    getNode(\"foo()\")));\n  }\n",
        "begin_line": 253,
        "end_line": 263,
        "comment": "",
        "child_ranges": [
            "(line 254,col 5)-(line 255,col 49)",
            "(line 256,col 5)-(line 257,col 54)",
            "(line 259,col 5)-(line 260,col 47)",
            "(line 261,col 5)-(line 262,col 39)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtilTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NodeUtilTest.java",
        "signature": "com.google.javascript.jscomp.NodeUtilTest.assertSideEffect(boolean, java.lang.String)",
        "snippet": "  private void assertSideEffect(boolean se, String js) {\n    Node n = parse(js);\n    assertEquals(se, NodeUtil.mayHaveSideEffects(n.getFirstChild()));\n  }\n",
        "begin_line": 265,
        "end_line": 268,
        "comment": "",
        "child_ranges": [
            "(line 266,col 5)-(line 266,col 23)",
            "(line 267,col 5)-(line 267,col 69)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtilTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NodeUtilTest.java",
        "signature": "com.google.javascript.jscomp.NodeUtilTest.assertSideEffect(boolean, java.lang.String, boolean)",
        "snippet": "  private void assertSideEffect(boolean se, String js, boolean GlobalRegExp) {\n    Node n = parse(js);\n    Compiler compiler = new Compiler();\n    compiler.setHasRegExpGlobalReferences(GlobalRegExp);\n    assertEquals(se, NodeUtil.mayHaveSideEffects(n.getFirstChild(), compiler));\n  }\n",
        "begin_line": 270,
        "end_line": 275,
        "comment": "",
        "child_ranges": [
            "(line 271,col 5)-(line 271,col 23)",
            "(line 272,col 5)-(line 272,col 39)",
            "(line 273,col 5)-(line 273,col 56)",
            "(line 274,col 5)-(line 274,col 79)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtilTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NodeUtilTest.java",
        "signature": "com.google.javascript.jscomp.NodeUtilTest.testMayHaveSideEffects()",
        "snippet": "  public void testMayHaveSideEffects() {\n    assertSideEffect(true, \"i++\");\n    assertSideEffect(true, \"[b, [a, i++]]\");\n    assertSideEffect(true, \"i=3\");\n    assertSideEffect(true, \"[0, i=3]\");\n    assertSideEffect(true, \"b()\");\n    assertSideEffect(true, \"[1, b()]\");\n    assertSideEffect(true, \"b.b=4\");\n    assertSideEffect(true, \"b.b--\");\n    assertSideEffect(true, \"i--\");\n    assertSideEffect(true, \"a[0][i=4]\");\n    assertSideEffect(true, \"a += 3\");\n    assertSideEffect(true, \"a, b, z += 4\");\n    assertSideEffect(true, \"a ? c : d++\");\n    assertSideEffect(true, \"a + c++\");\n    assertSideEffect(true, \"a + c - d()\");\n    assertSideEffect(true, \"a + c - d()\");\n\n    assertSideEffect(true, \"function foo() {}\");\n    assertSideEffect(true, \"while(true);\");\n    assertSideEffect(true, \"if(true){a()}\");\n\n    assertSideEffect(false, \"if(true){a}\");\n    assertSideEffect(false, \"(function() { })\");\n    assertSideEffect(false, \"(function() { i++ })\");\n    assertSideEffect(false, \"[function a(){}]\");\n\n    assertSideEffect(false, \"a\");\n    assertSideEffect(false, \"[b, c [d, [e]]]\");\n    assertSideEffect(false, \"({a: x, b: y, c: z})\");\n    assertSideEffect(false, \"/abc/gi\");\n    assertSideEffect(false, \"'a'\");\n    assertSideEffect(false, \"0\");\n    assertSideEffect(false, \"a + c\");\n    assertSideEffect(false, \"'c' + a[0]\");\n    assertSideEffect(false, \"a[0][1]\");\n    assertSideEffect(false, \"'a' + c\");\n    assertSideEffect(false, \"'a' + a.name\");\n    assertSideEffect(false, \"1, 2, 3\");\n    assertSideEffect(false, \"a, b, 3\");\n    assertSideEffect(false, \"(function(a, b) {  })\");\n    assertSideEffect(false, \"a ? c : d\");\n    assertSideEffect(false, \"'1' + navigator.userAgent\");\n\n    assertSideEffect(false, \"new RegExp('foobar', 'i')\");\n    assertSideEffect(true, \"new RegExp(SomethingWacky(), 'i')\");\n    assertSideEffect(false, \"new Array()\");\n    assertSideEffect(false, \"new Array\");\n    assertSideEffect(false, \"new Array(4)\");\n    assertSideEffect(false, \"new Array('a', 'b', 'c')\");\n    assertSideEffect(true, \"new SomeClassINeverHeardOf()\");\n    assertSideEffect(true, \"new SomeClassINeverHeardOf()\");\n\n    assertSideEffect(false, \"({}).foo = 4\");\n    assertSideEffect(false, \"([]).foo = 4\");\n    assertSideEffect(false, \"(function() {}).foo = 4\");\n\n    assertSideEffect(true, \"this.foo = 4\");\n    assertSideEffect(true, \"a.foo = 4\");\n    assertSideEffect(true, \"(function() { return n; })().foo = 4\");\n    assertSideEffect(true, \"([]).foo = bar()\");\n\n    assertSideEffect(false, \"undefined\");\n    assertSideEffect(false, \"void 0\");\n    assertSideEffect(true, \"void foo()\");\n    assertSideEffect(false, \"-Infinity\");\n    assertSideEffect(false, \"Infinity\");\n    assertSideEffect(false, \"NaN\");\n\n    assertSideEffect(false, \"({}||[]).foo = 2;\");\n    assertSideEffect(false, \"(true ? {} : []).foo = 2;\");\n    assertSideEffect(false, \"({},[]).foo = 2;\");\n  }\n",
        "begin_line": 277,
        "end_line": 349,
        "comment": "",
        "child_ranges": [
            "(line 278,col 5)-(line 278,col 34)",
            "(line 279,col 5)-(line 279,col 44)",
            "(line 280,col 5)-(line 280,col 34)",
            "(line 281,col 5)-(line 281,col 39)",
            "(line 282,col 5)-(line 282,col 34)",
            "(line 283,col 5)-(line 283,col 39)",
            "(line 284,col 5)-(line 284,col 36)",
            "(line 285,col 5)-(line 285,col 36)",
            "(line 286,col 5)-(line 286,col 34)",
            "(line 287,col 5)-(line 287,col 40)",
            "(line 288,col 5)-(line 288,col 37)",
            "(line 289,col 5)-(line 289,col 43)",
            "(line 290,col 5)-(line 290,col 42)",
            "(line 291,col 5)-(line 291,col 38)",
            "(line 292,col 5)-(line 292,col 42)",
            "(line 293,col 5)-(line 293,col 42)",
            "(line 295,col 5)-(line 295,col 48)",
            "(line 296,col 5)-(line 296,col 43)",
            "(line 297,col 5)-(line 297,col 44)",
            "(line 299,col 5)-(line 299,col 43)",
            "(line 300,col 5)-(line 300,col 48)",
            "(line 301,col 5)-(line 301,col 52)",
            "(line 302,col 5)-(line 302,col 48)",
            "(line 304,col 5)-(line 304,col 33)",
            "(line 305,col 5)-(line 305,col 47)",
            "(line 306,col 5)-(line 306,col 52)",
            "(line 307,col 5)-(line 307,col 39)",
            "(line 308,col 5)-(line 308,col 35)",
            "(line 309,col 5)-(line 309,col 33)",
            "(line 310,col 5)-(line 310,col 37)",
            "(line 311,col 5)-(line 311,col 42)",
            "(line 312,col 5)-(line 312,col 39)",
            "(line 313,col 5)-(line 313,col 39)",
            "(line 314,col 5)-(line 314,col 44)",
            "(line 315,col 5)-(line 315,col 39)",
            "(line 316,col 5)-(line 316,col 39)",
            "(line 317,col 5)-(line 317,col 53)",
            "(line 318,col 5)-(line 318,col 41)",
            "(line 319,col 5)-(line 319,col 57)",
            "(line 321,col 5)-(line 321,col 57)",
            "(line 322,col 5)-(line 322,col 64)",
            "(line 323,col 5)-(line 323,col 43)",
            "(line 324,col 5)-(line 324,col 41)",
            "(line 325,col 5)-(line 325,col 44)",
            "(line 326,col 5)-(line 326,col 56)",
            "(line 327,col 5)-(line 327,col 59)",
            "(line 328,col 5)-(line 328,col 59)",
            "(line 330,col 5)-(line 330,col 44)",
            "(line 331,col 5)-(line 331,col 44)",
            "(line 332,col 5)-(line 332,col 55)",
            "(line 334,col 5)-(line 334,col 43)",
            "(line 335,col 5)-(line 335,col 40)",
            "(line 336,col 5)-(line 336,col 67)",
            "(line 337,col 5)-(line 337,col 47)",
            "(line 339,col 5)-(line 339,col 41)",
            "(line 340,col 5)-(line 340,col 38)",
            "(line 341,col 5)-(line 341,col 41)",
            "(line 342,col 5)-(line 342,col 41)",
            "(line 343,col 5)-(line 343,col 40)",
            "(line 344,col 5)-(line 344,col 35)",
            "(line 346,col 5)-(line 346,col 49)",
            "(line 347,col 5)-(line 347,col 57)",
            "(line 348,col 5)-(line 348,col 48)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtilTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NodeUtilTest.java",
        "signature": "com.google.javascript.jscomp.NodeUtilTest.testRegExpSideEffect()",
        "snippet": "  public void testRegExpSideEffect() {\n    // A RegExp Object by itself doesn't have any side-effects\n    assertSideEffect(false, \"/abc/gi\", true);\n    assertSideEffect(false, \"/abc/gi\", false);\n\n    // RegExp instance methods have global side-effects, so whether they are\n    // considered side-effect free depends on whether the global properties\n    // are referenced.\n    assertSideEffect(true, \"(/abc/gi).test('')\", true);\n    assertSideEffect(false, \"(/abc/gi).test('')\", false);\n    assertSideEffect(true, \"(/abc/gi).test(a)\", true);\n    assertSideEffect(false, \"(/abc/gi).test(b)\", false);\n\n    assertSideEffect(true, \"(/abc/gi).exec('')\", true);\n    assertSideEffect(false, \"(/abc/gi).exec('')\", false);\n\n    // Some RegExp object method that may have side-effects.\n    assertSideEffect(true, \"(/abc/gi).foo('')\", true);\n    assertSideEffect(true, \"(/abc/gi).foo('')\", false);\n\n    // Try the string RegExp ops.\n    assertSideEffect(true, \"''.match('a')\", true);\n    assertSideEffect(false, \"''.match('a')\", false);\n    assertSideEffect(true, \"''.match(/(a)/)\", true);\n    assertSideEffect(false, \"''.match(/(a)/)\", false);\n\n    assertSideEffect(true, \"''.replace('a')\", true);\n    assertSideEffect(false, \"''.replace('a')\", false);\n\n    assertSideEffect(true, \"''.search('a')\", true);\n    assertSideEffect(false, \"''.search('a')\", false);\n\n    assertSideEffect(true, \"''.split('a')\", true);\n    assertSideEffect(false, \"''.split('a')\", false);\n\n    // Some non-RegExp string op that may have side-effects.\n    assertSideEffect(true, \"''.foo('a')\", true);\n    assertSideEffect(true, \"''.foo('a')\", false);\n\n    // 'a' might be a RegExp object with the 'g' flag, in which case\n    // the state might change by running any of the string ops.\n    // Specifically, using these methods resets the \"lastIndex\" if used\n    // in combination with a RegExp instance \"exec\" method.\n    assertSideEffect(true, \"''.match(a)\", true);\n    assertSideEffect(true, \"''.match(a)\", false);\n  }\n",
        "begin_line": 351,
        "end_line": 396,
        "comment": "",
        "child_ranges": [
            "(line 353,col 5)-(line 353,col 45)",
            "(line 354,col 5)-(line 354,col 46)",
            "(line 359,col 5)-(line 359,col 55)",
            "(line 360,col 5)-(line 360,col 57)",
            "(line 361,col 5)-(line 361,col 54)",
            "(line 362,col 5)-(line 362,col 56)",
            "(line 364,col 5)-(line 364,col 55)",
            "(line 365,col 5)-(line 365,col 57)",
            "(line 368,col 5)-(line 368,col 54)",
            "(line 369,col 5)-(line 369,col 55)",
            "(line 372,col 5)-(line 372,col 50)",
            "(line 373,col 5)-(line 373,col 52)",
            "(line 374,col 5)-(line 374,col 52)",
            "(line 375,col 5)-(line 375,col 54)",
            "(line 377,col 5)-(line 377,col 52)",
            "(line 378,col 5)-(line 378,col 54)",
            "(line 380,col 5)-(line 380,col 51)",
            "(line 381,col 5)-(line 381,col 53)",
            "(line 383,col 5)-(line 383,col 50)",
            "(line 384,col 5)-(line 384,col 52)",
            "(line 387,col 5)-(line 387,col 48)",
            "(line 388,col 5)-(line 388,col 49)",
            "(line 394,col 5)-(line 394,col 48)",
            "(line 395,col 5)-(line 395,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtilTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NodeUtilTest.java",
        "signature": "com.google.javascript.jscomp.NodeUtilTest.assertMutableState(boolean, java.lang.String)",
        "snippet": "  private void assertMutableState(boolean se, String js) {\n    Node n = parse(js);\n    assertEquals(se, NodeUtil.mayEffectMutableState(n.getFirstChild()));\n  }\n",
        "begin_line": 398,
        "end_line": 401,
        "comment": "",
        "child_ranges": [
            "(line 399,col 5)-(line 399,col 23)",
            "(line 400,col 5)-(line 400,col 72)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtilTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NodeUtilTest.java",
        "signature": "com.google.javascript.jscomp.NodeUtilTest.testMayEffectMutableState()",
        "snippet": "  public void testMayEffectMutableState() {\n    assertMutableState(true, \"i++\");\n    assertMutableState(true, \"[b, [a, i++]]\");\n    assertMutableState(true, \"i=3\");\n    assertMutableState(true, \"[0, i=3]\");\n    assertMutableState(true, \"b()\");\n    assertMutableState(true, \"void b()\");\n    assertMutableState(true, \"[1, b()]\");\n    assertMutableState(true, \"b.b=4\");\n    assertMutableState(true, \"b.b--\");\n    assertMutableState(true, \"i--\");\n    assertMutableState(true, \"a[0][i=4]\");\n    assertMutableState(true, \"a += 3\");\n    assertMutableState(true, \"a, b, z += 4\");\n    assertMutableState(true, \"a ? c : d++\");\n    assertMutableState(true, \"a + c++\");\n    assertMutableState(true, \"a + c - d()\");\n    assertMutableState(true, \"a + c - d()\");\n\n    assertMutableState(true, \"function foo() {}\");\n    assertMutableState(true, \"while(true);\");\n    assertMutableState(true, \"if(true){a()}\");\n\n    assertMutableState(false, \"if(true){a}\");\n    assertMutableState(true, \"(function() { })\");\n    assertMutableState(true, \"(function() { i++ })\");\n    assertMutableState(true, \"[function a(){}]\");\n\n    assertMutableState(false, \"a\");\n    assertMutableState(true, \"[b, c [d, [e]]]\");\n    assertMutableState(true, \"({a: x, b: y, c: z})\");\n    // Note: RegEx objects are not immutable,  for instance, the exec\n    // method maintains state for \"global\" searches.\n    assertMutableState(true, \"/abc/gi\");\n    assertMutableState(false, \"'a'\");\n    assertMutableState(false, \"0\");\n    assertMutableState(false, \"a + c\");\n    assertMutableState(false, \"'c' + a[0]\");\n    assertMutableState(false, \"a[0][1]\");\n    assertMutableState(false, \"'a' + c\");\n    assertMutableState(false, \"'a' + a.name\");\n    assertMutableState(false, \"1, 2, 3\");\n    assertMutableState(false, \"a, b, 3\");\n    assertMutableState(true, \"(function(a, b) {  })\");\n    assertMutableState(false, \"a ? c : d\");\n    assertMutableState(false, \"'1' + navigator.userAgent\");\n\n    assertMutableState(true, \"new RegExp('foobar', 'i')\");\n    assertMutableState(true, \"new RegExp(SomethingWacky(), 'i')\");\n    assertMutableState(true, \"new Array()\");\n    assertMutableState(true, \"new Array\");\n    assertMutableState(true, \"new Array(4)\");\n    assertMutableState(true, \"new Array('a', 'b', 'c')\");\n    assertMutableState(true, \"new SomeClassINeverHeardOf()\");\n  }\n",
        "begin_line": 403,
        "end_line": 457,
        "comment": "",
        "child_ranges": [
            "(line 404,col 5)-(line 404,col 36)",
            "(line 405,col 5)-(line 405,col 46)",
            "(line 406,col 5)-(line 406,col 36)",
            "(line 407,col 5)-(line 407,col 41)",
            "(line 408,col 5)-(line 408,col 36)",
            "(line 409,col 5)-(line 409,col 41)",
            "(line 410,col 5)-(line 410,col 41)",
            "(line 411,col 5)-(line 411,col 38)",
            "(line 412,col 5)-(line 412,col 38)",
            "(line 413,col 5)-(line 413,col 36)",
            "(line 414,col 5)-(line 414,col 42)",
            "(line 415,col 5)-(line 415,col 39)",
            "(line 416,col 5)-(line 416,col 45)",
            "(line 417,col 5)-(line 417,col 44)",
            "(line 418,col 5)-(line 418,col 40)",
            "(line 419,col 5)-(line 419,col 44)",
            "(line 420,col 5)-(line 420,col 44)",
            "(line 422,col 5)-(line 422,col 50)",
            "(line 423,col 5)-(line 423,col 45)",
            "(line 424,col 5)-(line 424,col 46)",
            "(line 426,col 5)-(line 426,col 45)",
            "(line 427,col 5)-(line 427,col 49)",
            "(line 428,col 5)-(line 428,col 53)",
            "(line 429,col 5)-(line 429,col 49)",
            "(line 431,col 5)-(line 431,col 35)",
            "(line 432,col 5)-(line 432,col 48)",
            "(line 433,col 5)-(line 433,col 53)",
            "(line 436,col 5)-(line 436,col 40)",
            "(line 437,col 5)-(line 437,col 37)",
            "(line 438,col 5)-(line 438,col 35)",
            "(line 439,col 5)-(line 439,col 39)",
            "(line 440,col 5)-(line 440,col 44)",
            "(line 441,col 5)-(line 441,col 41)",
            "(line 442,col 5)-(line 442,col 41)",
            "(line 443,col 5)-(line 443,col 46)",
            "(line 444,col 5)-(line 444,col 41)",
            "(line 445,col 5)-(line 445,col 41)",
            "(line 446,col 5)-(line 446,col 54)",
            "(line 447,col 5)-(line 447,col 43)",
            "(line 448,col 5)-(line 448,col 59)",
            "(line 450,col 5)-(line 450,col 58)",
            "(line 451,col 5)-(line 451,col 66)",
            "(line 452,col 5)-(line 452,col 44)",
            "(line 453,col 5)-(line 453,col 42)",
            "(line 454,col 5)-(line 454,col 45)",
            "(line 455,col 5)-(line 455,col 57)",
            "(line 456,col 5)-(line 456,col 61)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtilTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NodeUtilTest.java",
        "signature": "com.google.javascript.jscomp.NodeUtilTest.testIsFunctionExpression()",
        "snippet": "  public void testIsFunctionExpression() {\n    assertContainsAnonFunc(true, \"(function(){})\");\n    assertContainsAnonFunc(true, \"[function a(){}]\");\n    assertContainsAnonFunc(false, \"{x: function a(){}}\");\n    assertContainsAnonFunc(true, \"(function a(){})()\");\n    assertContainsAnonFunc(true, \"x = function a(){};\");\n    assertContainsAnonFunc(true, \"var x = function a(){};\");\n    assertContainsAnonFunc(true, \"if (function a(){});\");\n    assertContainsAnonFunc(true, \"while (function a(){});\");\n    assertContainsAnonFunc(true, \"do; while (function a(){});\");\n    assertContainsAnonFunc(true, \"for (function a(){};;);\");\n    assertContainsAnonFunc(true, \"for (;function a(){};);\");\n    assertContainsAnonFunc(true, \"for (;;function a(){});\");\n    assertContainsAnonFunc(true, \"for (p in function a(){});\");\n    assertContainsAnonFunc(true, \"with (function a(){}) {}\");\n    assertContainsAnonFunc(false, \"function a(){}\");\n    assertContainsAnonFunc(false, \"if (x) function a(){};\");\n    assertContainsAnonFunc(false, \"if (x) { function a(){} }\");\n    assertContainsAnonFunc(false, \"if (x); else function a(){};\");\n    assertContainsAnonFunc(false, \"while (x) function a(){};\");\n    assertContainsAnonFunc(false, \"do function a(){} while (0);\");\n    assertContainsAnonFunc(false, \"for (;;) function a(){}\");\n    assertContainsAnonFunc(false, \"for (p in o) function a(){};\");\n    assertContainsAnonFunc(false, \"with (x) function a(){}\");\n  }\n",
        "begin_line": 460,
        "end_line": 484,
        "comment": "",
        "child_ranges": [
            "(line 461,col 5)-(line 461,col 51)",
            "(line 462,col 5)-(line 462,col 53)",
            "(line 463,col 5)-(line 463,col 57)",
            "(line 464,col 5)-(line 464,col 55)",
            "(line 465,col 5)-(line 465,col 56)",
            "(line 466,col 5)-(line 466,col 60)",
            "(line 467,col 5)-(line 467,col 57)",
            "(line 468,col 5)-(line 468,col 60)",
            "(line 469,col 5)-(line 469,col 64)",
            "(line 470,col 5)-(line 470,col 60)",
            "(line 471,col 5)-(line 471,col 60)",
            "(line 472,col 5)-(line 472,col 60)",
            "(line 473,col 5)-(line 473,col 63)",
            "(line 474,col 5)-(line 474,col 61)",
            "(line 475,col 5)-(line 475,col 52)",
            "(line 476,col 5)-(line 476,col 60)",
            "(line 477,col 5)-(line 477,col 63)",
            "(line 478,col 5)-(line 478,col 66)",
            "(line 479,col 5)-(line 479,col 63)",
            "(line 480,col 5)-(line 480,col 66)",
            "(line 481,col 5)-(line 481,col 61)",
            "(line 482,col 5)-(line 482,col 66)",
            "(line 483,col 5)-(line 483,col 61)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtilTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NodeUtilTest.java",
        "signature": "com.google.javascript.jscomp.NodeUtilTest.testNewFunctionNode()",
        "snippet": "  public void testNewFunctionNode() {\n    Node expected = parse(\"function foo(p1, p2, p3) { throw 2; }\");\n    Node body = new Node(Token.BLOCK, new Node(Token.THROW, Node.newNumber(2)));\n    List<Node> params = Lists.newArrayList(Node.newString(Token.NAME, \"p1\"),\n                                           Node.newString(Token.NAME, \"p2\"),\n                                           Node.newString(Token.NAME, \"p3\"));\n    Node function = NodeUtil.newFunctionNode(\n        \"foo\", params, body, -1, -1);\n    Node actual = new Node(Token.SCRIPT);\n    actual.addChildToFront(function);\n    String difference = expected.checkTreeEquals(actual);\n    if (difference != null) {\n      assertTrue(\"Nodes do not match:\\n\" + difference, false);\n    }\n  }\n",
        "begin_line": 486,
        "end_line": 500,
        "comment": "",
        "child_ranges": [
            "(line 487,col 5)-(line 487,col 67)",
            "(line 488,col 5)-(line 488,col 80)",
            "(line 489,col 5)-(line 491,col 77)",
            "(line 492,col 5)-(line 493,col 37)",
            "(line 494,col 5)-(line 494,col 41)",
            "(line 495,col 5)-(line 495,col 37)",
            "(line 496,col 5)-(line 496,col 57)",
            "(line 497,col 5)-(line 499,col 5)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtilTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NodeUtilTest.java",
        "signature": "com.google.javascript.jscomp.NodeUtilTest.assertContainsAnonFunc(boolean, java.lang.String)",
        "snippet": "  private void assertContainsAnonFunc(boolean expected, String js) {\n    Node funcParent = findParentOfFuncDescendant(parse(js));\n    assertNotNull(\"Expected function node in parse tree of: \" + js, funcParent);\n    Node funcNode = getFuncChild(funcParent);\n    assertEquals(expected, NodeUtil.isFunctionExpression(funcNode));\n  }\n",
        "begin_line": 502,
        "end_line": 507,
        "comment": "",
        "child_ranges": [
            "(line 503,col 5)-(line 503,col 60)",
            "(line 504,col 5)-(line 504,col 80)",
            "(line 505,col 5)-(line 505,col 45)",
            "(line 506,col 5)-(line 506,col 68)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtilTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NodeUtilTest.java",
        "signature": "com.google.javascript.jscomp.NodeUtilTest.findParentOfFuncDescendant(com.google.javascript.rhino.Node)",
        "snippet": "  private Node findParentOfFuncDescendant(Node n) {\n    for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n      if (c.getType() == Token.FUNCTION) {\n        return n;\n      }\n      Node result = findParentOfFuncDescendant(c);\n      if (result != null) {\n        return result;\n      }\n    }\n    return null;\n  }\n",
        "begin_line": 509,
        "end_line": 520,
        "comment": "",
        "child_ranges": [
            "(line 510,col 5)-(line 518,col 5)",
            "(line 519,col 5)-(line 519,col 16)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtilTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NodeUtilTest.java",
        "signature": "com.google.javascript.jscomp.NodeUtilTest.getFuncChild(com.google.javascript.rhino.Node)",
        "snippet": "  private Node getFuncChild(Node n) {\n    for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n      if (c.getType() == Token.FUNCTION) {\n        return c;\n      }\n    }\n    return null;\n  }\n",
        "begin_line": 522,
        "end_line": 529,
        "comment": "",
        "child_ranges": [
            "(line 523,col 5)-(line 527,col 5)",
            "(line 528,col 5)-(line 528,col 16)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtilTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NodeUtilTest.java",
        "signature": "com.google.javascript.jscomp.NodeUtilTest.testContainsType()",
        "snippet": "  public void testContainsType() {\n    assertTrue(NodeUtil.containsType(\n        parse(\"this\"), Token.THIS));\n    assertTrue(NodeUtil.containsType(\n        parse(\"function foo(){}(this)\"), Token.THIS));\n    assertTrue(NodeUtil.containsType(\n        parse(\"b?this:null\"), Token.THIS));\n\n    assertFalse(NodeUtil.containsType(\n        parse(\"a\"), Token.THIS));\n    assertFalse(NodeUtil.containsType(\n        parse(\"function foo(){}\"), Token.THIS));\n    assertFalse(NodeUtil.containsType(\n        parse(\"(b?foo():null)\"), Token.THIS));\n  }\n",
        "begin_line": 531,
        "end_line": 545,
        "comment": "",
        "child_ranges": [
            "(line 532,col 5)-(line 533,col 36)",
            "(line 534,col 5)-(line 535,col 54)",
            "(line 536,col 5)-(line 537,col 43)",
            "(line 539,col 5)-(line 540,col 33)",
            "(line 541,col 5)-(line 542,col 48)",
            "(line 543,col 5)-(line 544,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtilTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NodeUtilTest.java",
        "signature": "com.google.javascript.jscomp.NodeUtilTest.testReferencesThis()",
        "snippet": "  public void testReferencesThis() {\n    assertTrue(NodeUtil.referencesThis(\n        parse(\"this\")));\n    assertTrue(NodeUtil.referencesThis(\n        parse(\"function foo(){}(this)\")));\n    assertTrue(NodeUtil.referencesThis(\n        parse(\"b?this:null\")));\n\n    assertFalse(NodeUtil.referencesThis(\n        parse(\"a\")));\n    assertFalse(NodeUtil.referencesThis(\n        parse(\"function foo(){}\")));\n    assertFalse(NodeUtil.referencesThis(\n        parse(\"(b?foo():null)\")));\n  }\n",
        "begin_line": 547,
        "end_line": 561,
        "comment": "",
        "child_ranges": [
            "(line 548,col 5)-(line 549,col 24)",
            "(line 550,col 5)-(line 551,col 42)",
            "(line 552,col 5)-(line 553,col 31)",
            "(line 555,col 5)-(line 556,col 21)",
            "(line 557,col 5)-(line 558,col 36)",
            "(line 559,col 5)-(line 560,col 34)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtilTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NodeUtilTest.java",
        "signature": "com.google.javascript.jscomp.NodeUtilTest.testGetNodeTypeReferenceCount()",
        "snippet": "  public void testGetNodeTypeReferenceCount() {\n    assertEquals(0, NodeUtil.getNodeTypeReferenceCount(\n        parse(\"function foo(){}\"), Token.THIS,\n            Predicates.<Node>alwaysTrue()));\n    assertEquals(1, NodeUtil.getNodeTypeReferenceCount(\n        parse(\"this\"), Token.THIS,\n            Predicates.<Node>alwaysTrue()));\n    assertEquals(2, NodeUtil.getNodeTypeReferenceCount(\n        parse(\"this;function foo(){}(this)\"), Token.THIS,\n            Predicates.<Node>alwaysTrue()));\n  }\n",
        "begin_line": 563,
        "end_line": 573,
        "comment": "",
        "child_ranges": [
            "(line 564,col 5)-(line 566,col 44)",
            "(line 567,col 5)-(line 569,col 44)",
            "(line 570,col 5)-(line 572,col 44)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtilTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NodeUtilTest.java",
        "signature": "com.google.javascript.jscomp.NodeUtilTest.testIsNameReferenceCount()",
        "snippet": "  public void testIsNameReferenceCount() {\n    assertTrue(NodeUtil.isNameReferenced(\n        parse(\"function foo(){}\"), \"foo\"));\n    assertTrue(NodeUtil.isNameReferenced(\n        parse(\"var foo = function(){}\"), \"foo\"));\n    assertFalse(NodeUtil.isNameReferenced(\n        parse(\"function foo(){}\"), \"undefined\"));\n    assertTrue(NodeUtil.isNameReferenced(\n        parse(\"undefined\"), \"undefined\"));\n    assertTrue(NodeUtil.isNameReferenced(\n        parse(\"undefined;function foo(){}(undefined)\"), \"undefined\"));\n\n    assertTrue(NodeUtil.isNameReferenced(\n        parse(\"goo.foo\"), \"goo\"));\n    assertFalse(NodeUtil.isNameReferenced(\n        parse(\"goo.foo\"), \"foo\"));\n  }\n",
        "begin_line": 575,
        "end_line": 591,
        "comment": "",
        "child_ranges": [
            "(line 576,col 5)-(line 577,col 43)",
            "(line 578,col 5)-(line 579,col 49)",
            "(line 580,col 5)-(line 581,col 49)",
            "(line 582,col 5)-(line 583,col 42)",
            "(line 584,col 5)-(line 585,col 70)",
            "(line 587,col 5)-(line 588,col 34)",
            "(line 589,col 5)-(line 590,col 34)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtilTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NodeUtilTest.java",
        "signature": "com.google.javascript.jscomp.NodeUtilTest.testGetNameReferenceCount()",
        "snippet": "  public void testGetNameReferenceCount() {\n    assertEquals(0, NodeUtil.getNameReferenceCount(\n        parse(\"function foo(){}\"), \"undefined\"));\n    assertEquals(1, NodeUtil.getNameReferenceCount(\n        parse(\"undefined\"), \"undefined\"));\n    assertEquals(2, NodeUtil.getNameReferenceCount(\n        parse(\"undefined;function foo(){}(undefined)\"), \"undefined\"));\n\n    assertEquals(1, NodeUtil.getNameReferenceCount(\n        parse(\"goo.foo\"), \"goo\"));\n    assertEquals(0, NodeUtil.getNameReferenceCount(\n        parse(\"goo.foo\"), \"foo\"));\n    assertEquals(1, NodeUtil.getNameReferenceCount(\n        parse(\"function foo(){}\"), \"foo\"));\n    assertEquals(1, NodeUtil.getNameReferenceCount(\n        parse(\"var foo = function(){}\"), \"foo\"));\n  }\n",
        "begin_line": 594,
        "end_line": 610,
        "comment": "",
        "child_ranges": [
            "(line 595,col 5)-(line 596,col 49)",
            "(line 597,col 5)-(line 598,col 42)",
            "(line 599,col 5)-(line 600,col 70)",
            "(line 602,col 5)-(line 603,col 34)",
            "(line 604,col 5)-(line 605,col 34)",
            "(line 606,col 5)-(line 607,col 43)",
            "(line 608,col 5)-(line 609,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtilTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NodeUtilTest.java",
        "signature": "com.google.javascript.jscomp.NodeUtilTest.testGetVarsDeclaredInBranch()",
        "snippet": "  public void testGetVarsDeclaredInBranch() {\n    Compiler compiler = new Compiler();\n\n    assertNodeNames(Sets.newHashSet(\"foo\"),\n        NodeUtil.getVarsDeclaredInBranch(\n            parse(\"var foo;\")));\n    assertNodeNames(Sets.newHashSet(\"foo\",\"goo\"),\n        NodeUtil.getVarsDeclaredInBranch(\n            parse(\"var foo,goo;\")));\n    assertNodeNames(Sets.<String>newHashSet(),\n        NodeUtil.getVarsDeclaredInBranch(\n            parse(\"foo();\")));\n    assertNodeNames(Sets.<String>newHashSet(),\n        NodeUtil.getVarsDeclaredInBranch(\n            parse(\"function(){var foo;}\")));\n    assertNodeNames(Sets.newHashSet(\"goo\"),\n        NodeUtil.getVarsDeclaredInBranch(\n            parse(\"var goo;function(){var foo;}\")));\n  }\n",
        "begin_line": 612,
        "end_line": 630,
        "comment": "",
        "child_ranges": [
            "(line 613,col 5)-(line 613,col 39)",
            "(line 615,col 5)-(line 617,col 32)",
            "(line 618,col 5)-(line 620,col 36)",
            "(line 621,col 5)-(line 623,col 30)",
            "(line 624,col 5)-(line 626,col 44)",
            "(line 627,col 5)-(line 629,col 52)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtilTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NodeUtilTest.java",
        "signature": "com.google.javascript.jscomp.NodeUtilTest.assertNodeNames(java.util.Set<java.lang.String>, java.util.Collection<com.google.javascript.rhino.Node>)",
        "snippet": "  private void assertNodeNames(Set<String> nodeNames, Collection<Node> nodes) {\n    Set<String> actualNames = Sets.newHashSet();\n    for (Node node : nodes) {\n      actualNames.add(node.getString());\n    }\n    assertEquals(nodeNames, actualNames);\n  }\n",
        "begin_line": 632,
        "end_line": 638,
        "comment": "",
        "child_ranges": [
            "(line 633,col 5)-(line 633,col 48)",
            "(line 634,col 5)-(line 636,col 5)",
            "(line 637,col 5)-(line 637,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtilTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NodeUtilTest.java",
        "signature": "com.google.javascript.jscomp.NodeUtilTest.testIsControlStructureCodeBlock()",
        "snippet": "  public void testIsControlStructureCodeBlock() {\n    Compiler compiler = new Compiler();\n\n    Node root = parse(\"if (x) foo(); else boo();\");\n    Node ifNode = root.getFirstChild();\n\n    Node ifCondition = ifNode.getFirstChild();\n    Node ifCase = ifNode.getFirstChild().getNext();\n    Node elseCase = ifNode.getLastChild();\n\n    assertFalse(NodeUtil.isControlStructureCodeBlock(ifNode, ifCondition));\n    assertTrue(NodeUtil.isControlStructureCodeBlock(ifNode, ifCase));\n    assertTrue(NodeUtil.isControlStructureCodeBlock(ifNode, elseCase));\n  }\n",
        "begin_line": 640,
        "end_line": 653,
        "comment": "",
        "child_ranges": [
            "(line 641,col 5)-(line 641,col 39)",
            "(line 643,col 5)-(line 643,col 51)",
            "(line 644,col 5)-(line 644,col 39)",
            "(line 646,col 5)-(line 646,col 46)",
            "(line 647,col 5)-(line 647,col 51)",
            "(line 648,col 5)-(line 648,col 42)",
            "(line 650,col 5)-(line 650,col 75)",
            "(line 651,col 5)-(line 651,col 69)",
            "(line 652,col 5)-(line 652,col 71)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtilTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NodeUtilTest.java",
        "signature": "com.google.javascript.jscomp.NodeUtilTest.testIsFunctionExpression1()",
        "snippet": "  public void testIsFunctionExpression1() {\n    Compiler compiler = new Compiler();\n\n    Node root = parse(\"(function foo() {})\");\n    Node StatementNode = root.getFirstChild();\n    assertTrue(NodeUtil.isExpressionNode(StatementNode));\n    Node functionNode = StatementNode.getFirstChild();\n    assertTrue(NodeUtil.isFunction(functionNode));\n    assertTrue(NodeUtil.isFunctionExpression(functionNode));\n  }\n",
        "begin_line": 655,
        "end_line": 664,
        "comment": "",
        "child_ranges": [
            "(line 656,col 5)-(line 656,col 39)",
            "(line 658,col 5)-(line 658,col 45)",
            "(line 659,col 5)-(line 659,col 46)",
            "(line 660,col 5)-(line 660,col 57)",
            "(line 661,col 5)-(line 661,col 54)",
            "(line 662,col 5)-(line 662,col 50)",
            "(line 663,col 5)-(line 663,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtilTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NodeUtilTest.java",
        "signature": "com.google.javascript.jscomp.NodeUtilTest.testIsFunctionExpression2()",
        "snippet": "  public void testIsFunctionExpression2() {\n    Compiler compiler = new Compiler();\n\n    Node root = parse(\"function foo() {}\");\n    Node functionNode = root.getFirstChild();\n    assertTrue(NodeUtil.isFunction(functionNode));\n    assertFalse(NodeUtil.isFunctionExpression(functionNode));\n  }\n",
        "begin_line": 666,
        "end_line": 673,
        "comment": "",
        "child_ranges": [
            "(line 667,col 5)-(line 667,col 39)",
            "(line 669,col 5)-(line 669,col 43)",
            "(line 670,col 5)-(line 670,col 45)",
            "(line 671,col 5)-(line 671,col 50)",
            "(line 672,col 5)-(line 672,col 61)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtilTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NodeUtilTest.java",
        "signature": "com.google.javascript.jscomp.NodeUtilTest.testRemoveTryChild()",
        "snippet": "  public void testRemoveTryChild() {\n    Compiler compiler = new Compiler();\n\n    Node root = parse(\"try {foo()} catch(e) {} finally {}\");\n\n    // Test removing the finally clause.\n    Node actual = root.cloneTree();\n\n    Node tryNode = actual.getFirstChild();\n    Node tryBlock = tryNode.getFirstChild();\n    Node catchBlocks = tryNode.getFirstChild().getNext();\n    Node finallyBlock = tryNode.getLastChild();\n\n    NodeUtil.removeChild(tryNode, finallyBlock);\n    String expected = \"try {foo()} catch(e) {}\";\n    String difference = parse(expected).checkTreeEquals(actual);\n    if (difference != null) {\n      assertTrue(\"Nodes do not match:\\n\" + difference, false);\n    }\n\n    // Test removing the try clause.\n    actual = root.cloneTree();\n\n    tryNode = actual.getFirstChild();\n    tryBlock = tryNode.getFirstChild();\n    catchBlocks = tryNode.getFirstChild().getNext();\n    finallyBlock = tryNode.getLastChild();\n\n    NodeUtil.removeChild(tryNode, tryBlock);\n    expected = \"try {} catch(e) {} finally {}\";\n    difference = parse(expected).checkTreeEquals(actual);\n    if (difference != null) {\n      assertTrue(\"Nodes do not match:\\n\" + difference, false);\n    }\n\n    // Test removing the catch clause.\n    actual = root.cloneTree();\n\n    tryNode = actual.getFirstChild();\n    tryBlock = tryNode.getFirstChild();\n    catchBlocks = tryNode.getFirstChild().getNext();\n    Node catchBlock = catchBlocks.getFirstChild();\n    finallyBlock = tryNode.getLastChild();\n\n    NodeUtil.removeChild(catchBlocks, catchBlock);\n    expected = \"try {foo()} finally {}\";\n    difference = parse(expected).checkTreeEquals(actual);\n    if (difference != null) {\n      assertTrue(\"Nodes do not match:\\n\" + difference, false);\n    }\n\n  }\n",
        "begin_line": 675,
        "end_line": 726,
        "comment": "",
        "child_ranges": [
            "(line 676,col 5)-(line 676,col 39)",
            "(line 678,col 5)-(line 678,col 60)",
            "(line 681,col 5)-(line 681,col 35)",
            "(line 683,col 5)-(line 683,col 42)",
            "(line 684,col 5)-(line 684,col 44)",
            "(line 685,col 5)-(line 685,col 57)",
            "(line 686,col 5)-(line 686,col 47)",
            "(line 688,col 5)-(line 688,col 48)",
            "(line 689,col 5)-(line 689,col 48)",
            "(line 690,col 5)-(line 690,col 64)",
            "(line 691,col 5)-(line 693,col 5)",
            "(line 696,col 5)-(line 696,col 30)",
            "(line 698,col 5)-(line 698,col 37)",
            "(line 699,col 5)-(line 699,col 39)",
            "(line 700,col 5)-(line 700,col 52)",
            "(line 701,col 5)-(line 701,col 42)",
            "(line 703,col 5)-(line 703,col 44)",
            "(line 704,col 5)-(line 704,col 47)",
            "(line 705,col 5)-(line 705,col 57)",
            "(line 706,col 5)-(line 708,col 5)",
            "(line 711,col 5)-(line 711,col 30)",
            "(line 713,col 5)-(line 713,col 37)",
            "(line 714,col 5)-(line 714,col 39)",
            "(line 715,col 5)-(line 715,col 52)",
            "(line 716,col 5)-(line 716,col 50)",
            "(line 717,col 5)-(line 717,col 42)",
            "(line 719,col 5)-(line 719,col 50)",
            "(line 720,col 5)-(line 720,col 40)",
            "(line 721,col 5)-(line 721,col 57)",
            "(line 722,col 5)-(line 724,col 5)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtilTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NodeUtilTest.java",
        "signature": "com.google.javascript.jscomp.NodeUtilTest.testRemoveVarChild()",
        "snippet": "  public void testRemoveVarChild() {\n    Compiler compiler = new Compiler();\n\n    // Test removing the first child.\n    Node actual = parse(\"var foo, goo, hoo\");\n\n    Node varNode = actual.getFirstChild();\n    Node nameNode = varNode.getFirstChild();\n\n    NodeUtil.removeChild(varNode, nameNode);\n    String expected = \"var goo, hoo\";\n    String difference = parse(expected).checkTreeEquals(actual);\n    if (difference != null) {\n      assertTrue(\"Nodes do not match:\\n\" + difference, false);\n    }\n\n\n    // Test removing the second child.\n    actual = parse(\"var foo, goo, hoo\");\n\n    varNode = actual.getFirstChild();\n    nameNode = varNode.getFirstChild().getNext();\n\n    NodeUtil.removeChild(varNode, nameNode);\n    expected = \"var foo, hoo\";\n    difference = parse(expected).checkTreeEquals(actual);\n    if (difference != null) {\n      assertTrue(\"Nodes do not match:\\n\" + difference, false);\n    }\n\n    // Test removing the last child of several children.\n    actual = parse(\"var foo, hoo\");\n\n    varNode = actual.getFirstChild();\n    nameNode = varNode.getFirstChild().getNext();\n\n    NodeUtil.removeChild(varNode, nameNode);\n    expected = \"var foo\";\n    difference = parse(expected).checkTreeEquals(actual);\n    if (difference != null) {\n      assertTrue(\"Nodes do not match:\\n\" + difference, false);\n    }\n\n    // Test removing the last.\n    actual = parse(\"var hoo\");\n\n    varNode = actual.getFirstChild();\n    nameNode = varNode.getFirstChild();\n\n    NodeUtil.removeChild(varNode, nameNode);\n    expected = \"\";\n    difference = parse(expected).checkTreeEquals(actual);\n    if (difference != null) {\n      assertTrue(\"Nodes do not match:\\n\" + difference, false);\n    }\n  }\n",
        "begin_line": 728,
        "end_line": 783,
        "comment": "",
        "child_ranges": [
            "(line 729,col 5)-(line 729,col 39)",
            "(line 732,col 5)-(line 732,col 45)",
            "(line 734,col 5)-(line 734,col 42)",
            "(line 735,col 5)-(line 735,col 44)",
            "(line 737,col 5)-(line 737,col 44)",
            "(line 738,col 5)-(line 738,col 37)",
            "(line 739,col 5)-(line 739,col 64)",
            "(line 740,col 5)-(line 742,col 5)",
            "(line 746,col 5)-(line 746,col 40)",
            "(line 748,col 5)-(line 748,col 37)",
            "(line 749,col 5)-(line 749,col 49)",
            "(line 751,col 5)-(line 751,col 44)",
            "(line 752,col 5)-(line 752,col 30)",
            "(line 753,col 5)-(line 753,col 57)",
            "(line 754,col 5)-(line 756,col 5)",
            "(line 759,col 5)-(line 759,col 35)",
            "(line 761,col 5)-(line 761,col 37)",
            "(line 762,col 5)-(line 762,col 49)",
            "(line 764,col 5)-(line 764,col 44)",
            "(line 765,col 5)-(line 765,col 25)",
            "(line 766,col 5)-(line 766,col 57)",
            "(line 767,col 5)-(line 769,col 5)",
            "(line 772,col 5)-(line 772,col 30)",
            "(line 774,col 5)-(line 774,col 37)",
            "(line 775,col 5)-(line 775,col 39)",
            "(line 777,col 5)-(line 777,col 44)",
            "(line 778,col 5)-(line 778,col 18)",
            "(line 779,col 5)-(line 779,col 57)",
            "(line 780,col 5)-(line 782,col 5)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtilTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NodeUtilTest.java",
        "signature": "com.google.javascript.jscomp.NodeUtilTest.testRemoveLabelChild1()",
        "snippet": "  public void testRemoveLabelChild1() {\n    Compiler compiler = new Compiler();\n\n    // Test removing the first child.\n    Node actual = parse(\"foo: goo()\");\n\n    Node labelNode = actual.getFirstChild();\n    Node callExpressNode = labelNode.getLastChild();\n\n    NodeUtil.removeChild(labelNode, callExpressNode);\n    String expected = \"\";\n    String difference = parse(expected).checkTreeEquals(actual);\n    if (difference != null) {\n      assertTrue(\"Nodes do not match:\\n\" + difference, false);\n    }\n  }\n",
        "begin_line": 785,
        "end_line": 800,
        "comment": "",
        "child_ranges": [
            "(line 786,col 5)-(line 786,col 39)",
            "(line 789,col 5)-(line 789,col 38)",
            "(line 791,col 5)-(line 791,col 44)",
            "(line 792,col 5)-(line 792,col 52)",
            "(line 794,col 5)-(line 794,col 53)",
            "(line 795,col 5)-(line 795,col 25)",
            "(line 796,col 5)-(line 796,col 64)",
            "(line 797,col 5)-(line 799,col 5)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtilTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NodeUtilTest.java",
        "signature": "com.google.javascript.jscomp.NodeUtilTest.testRemoveLabelChild2()",
        "snippet": "  public void testRemoveLabelChild2() {\n    // Test removing the first child.\n    Node actual = parse(\"achoo: foo: goo()\");\n\n    Node labelNode = actual.getFirstChild();\n    Node callExpressNode = labelNode.getLastChild();\n\n    NodeUtil.removeChild(labelNode, callExpressNode);\n    String expected = \"\";\n    String difference = parse(expected).checkTreeEquals(actual);\n    if (difference != null) {\n      assertTrue(\"Nodes do not match:\\n\" + difference, false);\n    }\n  }\n",
        "begin_line": 802,
        "end_line": 815,
        "comment": "",
        "child_ranges": [
            "(line 804,col 5)-(line 804,col 45)",
            "(line 806,col 5)-(line 806,col 44)",
            "(line 807,col 5)-(line 807,col 52)",
            "(line 809,col 5)-(line 809,col 53)",
            "(line 810,col 5)-(line 810,col 25)",
            "(line 811,col 5)-(line 811,col 64)",
            "(line 812,col 5)-(line 814,col 5)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtilTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NodeUtilTest.java",
        "signature": "com.google.javascript.jscomp.NodeUtilTest.testRemoveForChild()",
        "snippet": "  public void testRemoveForChild() {\n    Compiler compiler = new Compiler();\n\n    // Test removing the initializer.\n    Node actual = parse(\"for(var a=0;a<0;a++)foo()\");\n\n    Node forNode = actual.getFirstChild();\n    Node child = forNode.getFirstChild();\n\n    NodeUtil.removeChild(forNode, child);\n    String expected = \"for(;a<0;a++)foo()\";\n    String difference = parse(expected).checkTreeEquals(actual);\n    assertNull(\"Nodes do not match:\\n\" + difference, difference);\n\n\n    // Test removing the condition.\n    actual = parse(\"for(var a=0;a<0;a++)foo()\");\n\n    forNode = actual.getFirstChild();\n    child = forNode.getFirstChild().getNext();\n\n    NodeUtil.removeChild(forNode, child);\n    expected = \"for(var a=0;;a++)foo()\";\n    difference = parse(expected).checkTreeEquals(actual);\n    assertNull(\"Nodes do not match:\\n\" + difference, difference);\n\n\n    // Test removing the increment.\n    actual = parse(\"for(var a=0;a<0;a++)foo()\");\n\n    forNode = actual.getFirstChild();\n    child = forNode.getFirstChild().getNext().getNext();\n\n    NodeUtil.removeChild(forNode, child);\n    expected = \"for(var a=0;a<0;)foo()\";\n    difference = parse(expected).checkTreeEquals(actual);\n    assertNull(\"Nodes do not match:\\n\" + difference, difference);\n\n\n    // Test removing the body.\n    actual = parse(\"for(var a=0;a<0;a++)foo()\");\n\n    forNode = actual.getFirstChild();\n    child = forNode.getLastChild();\n\n    NodeUtil.removeChild(forNode, child);\n    expected = \"for(var a=0;a<0;a++);\";\n    difference = parse(expected).checkTreeEquals(actual);\n    assertNull(\"Nodes do not match:\\n\" + difference, difference);\n\n\n    // Test removing the body.\n    actual = parse(\"for(a in ack)foo();\");\n\n    forNode = actual.getFirstChild();\n    child = forNode.getLastChild();\n\n    NodeUtil.removeChild(forNode, child);\n    expected = \"for(a in ack);\";\n    difference = parse(expected).checkTreeEquals(actual);\n    assertNull(\"Nodes do not match:\\n\" + difference, difference);\n  }\n",
        "begin_line": 817,
        "end_line": 878,
        "comment": "",
        "child_ranges": [
            "(line 818,col 5)-(line 818,col 39)",
            "(line 821,col 5)-(line 821,col 53)",
            "(line 823,col 5)-(line 823,col 42)",
            "(line 824,col 5)-(line 824,col 41)",
            "(line 826,col 5)-(line 826,col 41)",
            "(line 827,col 5)-(line 827,col 43)",
            "(line 828,col 5)-(line 828,col 64)",
            "(line 829,col 5)-(line 829,col 65)",
            "(line 833,col 5)-(line 833,col 48)",
            "(line 835,col 5)-(line 835,col 37)",
            "(line 836,col 5)-(line 836,col 46)",
            "(line 838,col 5)-(line 838,col 41)",
            "(line 839,col 5)-(line 839,col 40)",
            "(line 840,col 5)-(line 840,col 57)",
            "(line 841,col 5)-(line 841,col 65)",
            "(line 845,col 5)-(line 845,col 48)",
            "(line 847,col 5)-(line 847,col 37)",
            "(line 848,col 5)-(line 848,col 56)",
            "(line 850,col 5)-(line 850,col 41)",
            "(line 851,col 5)-(line 851,col 40)",
            "(line 852,col 5)-(line 852,col 57)",
            "(line 853,col 5)-(line 853,col 65)",
            "(line 857,col 5)-(line 857,col 48)",
            "(line 859,col 5)-(line 859,col 37)",
            "(line 860,col 5)-(line 860,col 35)",
            "(line 862,col 5)-(line 862,col 41)",
            "(line 863,col 5)-(line 863,col 39)",
            "(line 864,col 5)-(line 864,col 57)",
            "(line 865,col 5)-(line 865,col 65)",
            "(line 869,col 5)-(line 869,col 42)",
            "(line 871,col 5)-(line 871,col 37)",
            "(line 872,col 5)-(line 872,col 35)",
            "(line 874,col 5)-(line 874,col 41)",
            "(line 875,col 5)-(line 875,col 32)",
            "(line 876,col 5)-(line 876,col 57)",
            "(line 877,col 5)-(line 877,col 65)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtilTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NodeUtilTest.java",
        "signature": "com.google.javascript.jscomp.NodeUtilTest.testMergeBlock1()",
        "snippet": "  public void testMergeBlock1() {\n    Compiler compiler = new Compiler();\n\n    // Test removing the initializer.\n    Node actual = parse(\"{{a();b();}}\");\n\n    Node parentBlock = actual.getFirstChild();\n    Node childBlock = parentBlock.getFirstChild();\n\n    assertTrue(NodeUtil.tryMergeBlock(childBlock));\n    String expected = \"{a();b();}\";\n    String difference = parse(expected).checkTreeEquals(actual);\n    assertNull(\"Nodes do not match:\\n\" + difference, difference);\n  }\n",
        "begin_line": 880,
        "end_line": 893,
        "comment": "",
        "child_ranges": [
            "(line 881,col 5)-(line 881,col 39)",
            "(line 884,col 5)-(line 884,col 40)",
            "(line 886,col 5)-(line 886,col 46)",
            "(line 887,col 5)-(line 887,col 50)",
            "(line 889,col 5)-(line 889,col 51)",
            "(line 890,col 5)-(line 890,col 35)",
            "(line 891,col 5)-(line 891,col 64)",
            "(line 892,col 5)-(line 892,col 65)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtilTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NodeUtilTest.java",
        "signature": "com.google.javascript.jscomp.NodeUtilTest.testMergeBlock2()",
        "snippet": "  public void testMergeBlock2() {\n    Compiler compiler = new Compiler();\n\n    // Test removing the initializer.\n    Node actual = parse(\"foo:{a();}\");\n\n    Node parentLabel = actual.getFirstChild();\n    Node childBlock = parentLabel.getLastChild();\n\n    assertFalse(NodeUtil.tryMergeBlock(childBlock));\n  }\n",
        "begin_line": 895,
        "end_line": 905,
        "comment": "",
        "child_ranges": [
            "(line 896,col 5)-(line 896,col 39)",
            "(line 899,col 5)-(line 899,col 38)",
            "(line 901,col 5)-(line 901,col 46)",
            "(line 902,col 5)-(line 902,col 49)",
            "(line 904,col 5)-(line 904,col 52)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtilTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NodeUtilTest.java",
        "signature": "com.google.javascript.jscomp.NodeUtilTest.testMergeBlock3()",
        "snippet": "  public void testMergeBlock3() {\n    Compiler compiler = new Compiler();\n\n    // Test removing the initializer.\n    String code = \"foo:{a();boo()}\";\n    Node actual = parse(\"foo:{a();boo()}\");\n\n    Node parentLabel = actual.getFirstChild();\n    Node childBlock = parentLabel.getLastChild();\n\n    assertFalse(NodeUtil.tryMergeBlock(childBlock));\n    String expected = code;\n    String difference = parse(expected).checkTreeEquals(actual);\n    assertNull(\"Nodes do not match:\\n\" + difference, difference);\n  }\n",
        "begin_line": 907,
        "end_line": 921,
        "comment": "",
        "child_ranges": [
            "(line 908,col 5)-(line 908,col 39)",
            "(line 911,col 5)-(line 911,col 36)",
            "(line 912,col 5)-(line 912,col 43)",
            "(line 914,col 5)-(line 914,col 46)",
            "(line 915,col 5)-(line 915,col 49)",
            "(line 917,col 5)-(line 917,col 52)",
            "(line 918,col 5)-(line 918,col 27)",
            "(line 919,col 5)-(line 919,col 64)",
            "(line 920,col 5)-(line 920,col 65)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtilTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NodeUtilTest.java",
        "signature": "com.google.javascript.jscomp.NodeUtilTest.testGetSourceName()",
        "snippet": "  public void testGetSourceName() {\n    Node n = new Node(Token.BLOCK);\n    Node parent = new Node(Token.BLOCK, n);\n    parent.putProp(Node.SOURCENAME_PROP, \"foo\");\n    assertEquals(\"foo\", NodeUtil.getSourceName(n));\n  }\n",
        "begin_line": 923,
        "end_line": 928,
        "comment": "",
        "child_ranges": [
            "(line 924,col 5)-(line 924,col 35)",
            "(line 925,col 5)-(line 925,col 43)",
            "(line 926,col 5)-(line 926,col 48)",
            "(line 927,col 5)-(line 927,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtilTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NodeUtilTest.java",
        "signature": "com.google.javascript.jscomp.NodeUtilTest.testIsLabelName()",
        "snippet": "  public void testIsLabelName() {\n    Compiler compiler = new Compiler();\n\n    // Test removing the initializer.\n    String code = \"a:while(1) {a; continue a; break a; break;}\";\n    Node actual = parse(code);\n\n    Node labelNode = actual.getFirstChild();\n    assertTrue(labelNode.getType() == Token.LABEL);\n    assertTrue(NodeUtil.isLabelName(labelNode.getFirstChild()));\n    assertFalse(NodeUtil.isLabelName(labelNode.getLastChild()));\n\n    Node whileNode = labelNode.getLastChild();\n    assertTrue(whileNode.getType() == Token.WHILE);\n    Node whileBlock = whileNode.getLastChild();\n    assertTrue(whileBlock.getType() == Token.BLOCK);\n    assertFalse(NodeUtil.isLabelName(whileBlock));\n\n    Node firstStatement = whileBlock.getFirstChild();\n    assertTrue(firstStatement.getType() == Token.EXPR_RESULT);\n    Node variableReference = firstStatement.getFirstChild();\n    assertTrue(variableReference.getType() == Token.NAME);\n    assertFalse(NodeUtil.isLabelName(variableReference));\n\n    Node continueStatement = firstStatement.getNext();\n    assertTrue(continueStatement.getType() == Token.CONTINUE);\n    assertTrue(NodeUtil.isLabelName(continueStatement.getFirstChild()));\n\n    Node firstBreak = continueStatement.getNext();\n    assertTrue(firstBreak.getType() == Token.BREAK);\n    assertTrue(NodeUtil.isLabelName(firstBreak.getFirstChild()));\n\n    Node secondBreak = firstBreak.getNext();\n    assertTrue(secondBreak.getType() == Token.BREAK);\n    assertFalse(secondBreak.hasChildren());\n    assertFalse(NodeUtil.isLabelName(secondBreak.getFirstChild()));\n  }\n",
        "begin_line": 930,
        "end_line": 966,
        "comment": "",
        "child_ranges": [
            "(line 931,col 5)-(line 931,col 39)",
            "(line 934,col 5)-(line 934,col 64)",
            "(line 935,col 5)-(line 935,col 30)",
            "(line 937,col 5)-(line 937,col 44)",
            "(line 938,col 5)-(line 938,col 51)",
            "(line 939,col 5)-(line 939,col 64)",
            "(line 940,col 5)-(line 940,col 64)",
            "(line 942,col 5)-(line 942,col 46)",
            "(line 943,col 5)-(line 943,col 51)",
            "(line 944,col 5)-(line 944,col 47)",
            "(line 945,col 5)-(line 945,col 52)",
            "(line 946,col 5)-(line 946,col 50)",
            "(line 948,col 5)-(line 948,col 53)",
            "(line 949,col 5)-(line 949,col 62)",
            "(line 950,col 5)-(line 950,col 60)",
            "(line 951,col 5)-(line 951,col 58)",
            "(line 952,col 5)-(line 952,col 57)",
            "(line 954,col 5)-(line 954,col 54)",
            "(line 955,col 5)-(line 955,col 62)",
            "(line 956,col 5)-(line 956,col 72)",
            "(line 958,col 5)-(line 958,col 50)",
            "(line 959,col 5)-(line 959,col 52)",
            "(line 960,col 5)-(line 960,col 65)",
            "(line 962,col 5)-(line 962,col 44)",
            "(line 963,col 5)-(line 963,col 53)",
            "(line 964,col 5)-(line 964,col 43)",
            "(line 965,col 5)-(line 965,col 67)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtilTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NodeUtilTest.java",
        "signature": "com.google.javascript.jscomp.NodeUtilTest.testLocalValue1()",
        "snippet": "  public void testLocalValue1() throws Exception {\n    // Names are not known to be local.\n    assertFalse(testLocalValue(\"x\"));\n    assertFalse(testLocalValue(\"x()\"));\n    assertFalse(testLocalValue(\"this\"));\n    assertFalse(testLocalValue(\"arguments\"));\n\n    // new objects are local\n    assertTrue(testLocalValue(\"new x()\"));\n\n    // property references are assume to be non-local\n    assertFalse(testLocalValue(\"(new x()).y\"));\n    assertFalse(testLocalValue(\"(new x())['y']\"));\n\n    // Primitive values are local\n    assertTrue(testLocalValue(\"null\"));\n    assertTrue(testLocalValue(\"undefined\"));\n    assertTrue(testLocalValue(\"Infinity\"));\n    assertTrue(testLocalValue(\"NaN\"));\n    assertTrue(testLocalValue(\"1\"));\n    assertTrue(testLocalValue(\"'a'\"));\n    assertTrue(testLocalValue(\"true\"));\n    assertTrue(testLocalValue(\"false\"));\n    assertTrue(testLocalValue(\"[]\"));\n    assertTrue(testLocalValue(\"{}\"));\n\n    // The contents of arrays and objects don't matter\n    assertTrue(testLocalValue(\"[x]\"));\n    assertTrue(testLocalValue(\"{'a':x}\"));\n\n    // Pre-increment results in primitive number\n    assertTrue(testLocalValue(\"++x\"));\n    assertTrue(testLocalValue(\"--x\"));\n\n    // Post-increment, the previous value matters.\n    assertFalse(testLocalValue(\"x++\"));\n    assertFalse(testLocalValue(\"x--\"));\n\n    // The left side of an only assign matters if it is an alias or mutable.\n    assertTrue(testLocalValue(\"x=1\"));\n    assertFalse(testLocalValue(\"x=[]\"));\n    assertFalse(testLocalValue(\"x=y\"));\n    // The right hand side of assignment opts don't matter, as they force\n    // a local result.\n    assertTrue(testLocalValue(\"x+=y\"));\n    assertTrue(testLocalValue(\"x*=y\"));\n    // Comparisons always result in locals, as they force a local boolean\n    // result.\n    assertTrue(testLocalValue(\"x==y\"));\n    assertTrue(testLocalValue(\"x!=y\"));\n    assertTrue(testLocalValue(\"x>y\"));\n    // Only the right side of a comma matters\n    assertTrue(testLocalValue(\"(1,2)\"));\n    assertTrue(testLocalValue(\"(x,1)\"));\n    assertFalse(testLocalValue(\"(x,y)\"));\n\n    // Both the operands of OR matter\n    assertTrue(testLocalValue(\"1||2\"));\n    assertFalse(testLocalValue(\"x||1\"));\n    assertFalse(testLocalValue(\"x||y\"));\n    assertFalse(testLocalValue(\"1||y\"));\n\n    // Both the operands of AND matter\n    assertTrue(testLocalValue(\"1&&2\"));\n    assertFalse(testLocalValue(\"x&&1\"));\n    assertFalse(testLocalValue(\"x&&y\"));\n    assertFalse(testLocalValue(\"1&&y\"));\n\n    // Only the results of HOOK matter\n    assertTrue(testLocalValue(\"x?1:2\"));\n    assertFalse(testLocalValue(\"x?x:2\"));\n    assertFalse(testLocalValue(\"x?1:x\"));\n    assertFalse(testLocalValue(\"x?x:y\"));\n\n    // Results of ops are local values\n    assertTrue(testLocalValue(\"!y\"));\n    assertTrue(testLocalValue(\"~y\"));\n    assertTrue(testLocalValue(\"y + 1\"));\n    assertTrue(testLocalValue(\"y + z\"));\n    assertTrue(testLocalValue(\"y * z\"));\n\n    assertTrue(testLocalValue(\"'a' in x\"));\n    assertTrue(testLocalValue(\"typeof x\"));\n    assertTrue(testLocalValue(\"x instanceof y\"));\n\n    assertTrue(testLocalValue(\"void x\"));\n    assertTrue(testLocalValue(\"void 0\"));\n    \n    assertFalse(testLocalValue(\"{}.x\"));\n  }\n",
        "begin_line": 968,
        "end_line": 1057,
        "comment": "",
        "child_ranges": [
            "(line 970,col 5)-(line 970,col 37)",
            "(line 971,col 5)-(line 971,col 39)",
            "(line 972,col 5)-(line 972,col 40)",
            "(line 973,col 5)-(line 973,col 45)",
            "(line 976,col 5)-(line 976,col 42)",
            "(line 979,col 5)-(line 979,col 47)",
            "(line 980,col 5)-(line 980,col 50)",
            "(line 983,col 5)-(line 983,col 39)",
            "(line 984,col 5)-(line 984,col 44)",
            "(line 985,col 5)-(line 985,col 43)",
            "(line 986,col 5)-(line 986,col 38)",
            "(line 987,col 5)-(line 987,col 36)",
            "(line 988,col 5)-(line 988,col 38)",
            "(line 989,col 5)-(line 989,col 39)",
            "(line 990,col 5)-(line 990,col 40)",
            "(line 991,col 5)-(line 991,col 37)",
            "(line 992,col 5)-(line 992,col 37)",
            "(line 995,col 5)-(line 995,col 38)",
            "(line 996,col 5)-(line 996,col 42)",
            "(line 999,col 5)-(line 999,col 38)",
            "(line 1000,col 5)-(line 1000,col 38)",
            "(line 1003,col 5)-(line 1003,col 39)",
            "(line 1004,col 5)-(line 1004,col 39)",
            "(line 1007,col 5)-(line 1007,col 38)",
            "(line 1008,col 5)-(line 1008,col 40)",
            "(line 1009,col 5)-(line 1009,col 39)",
            "(line 1012,col 5)-(line 1012,col 39)",
            "(line 1013,col 5)-(line 1013,col 39)",
            "(line 1016,col 5)-(line 1016,col 39)",
            "(line 1017,col 5)-(line 1017,col 39)",
            "(line 1018,col 5)-(line 1018,col 38)",
            "(line 1020,col 5)-(line 1020,col 40)",
            "(line 1021,col 5)-(line 1021,col 40)",
            "(line 1022,col 5)-(line 1022,col 41)",
            "(line 1025,col 5)-(line 1025,col 39)",
            "(line 1026,col 5)-(line 1026,col 40)",
            "(line 1027,col 5)-(line 1027,col 40)",
            "(line 1028,col 5)-(line 1028,col 40)",
            "(line 1031,col 5)-(line 1031,col 39)",
            "(line 1032,col 5)-(line 1032,col 40)",
            "(line 1033,col 5)-(line 1033,col 40)",
            "(line 1034,col 5)-(line 1034,col 40)",
            "(line 1037,col 5)-(line 1037,col 40)",
            "(line 1038,col 5)-(line 1038,col 41)",
            "(line 1039,col 5)-(line 1039,col 41)",
            "(line 1040,col 5)-(line 1040,col 41)",
            "(line 1043,col 5)-(line 1043,col 37)",
            "(line 1044,col 5)-(line 1044,col 37)",
            "(line 1045,col 5)-(line 1045,col 40)",
            "(line 1046,col 5)-(line 1046,col 40)",
            "(line 1047,col 5)-(line 1047,col 40)",
            "(line 1049,col 5)-(line 1049,col 43)",
            "(line 1050,col 5)-(line 1050,col 43)",
            "(line 1051,col 5)-(line 1051,col 49)",
            "(line 1053,col 5)-(line 1053,col 41)",
            "(line 1054,col 5)-(line 1054,col 41)",
            "(line 1056,col 5)-(line 1056,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtilTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NodeUtilTest.java",
        "signature": "com.google.javascript.jscomp.NodeUtilTest.testLocalValue(java.lang.String)",
        "snippet": "  private boolean testLocalValue(String js) {\n    Node script = parse(\"var test = \" + js +\";\");\n    Preconditions.checkState(script.getType() == Token.SCRIPT);\n    Node var = script.getFirstChild();\n    Preconditions.checkState(var.getType() == Token.VAR);\n    Node name = var.getFirstChild();\n    Preconditions.checkState(name.getType() == Token.NAME);\n    Node value = name.getFirstChild();\n\n    return NodeUtil.evaluatesToLocalValue(value);\n  }\n",
        "begin_line": 1059,
        "end_line": 1069,
        "comment": "",
        "child_ranges": [
            "(line 1060,col 5)-(line 1060,col 49)",
            "(line 1061,col 5)-(line 1061,col 63)",
            "(line 1062,col 5)-(line 1062,col 38)",
            "(line 1063,col 5)-(line 1063,col 57)",
            "(line 1064,col 5)-(line 1064,col 36)",
            "(line 1065,col 5)-(line 1065,col 59)",
            "(line 1066,col 5)-(line 1066,col 38)",
            "(line 1068,col 5)-(line 1068,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtilTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NodeUtilTest.java",
        "signature": "com.google.javascript.jscomp.NodeUtilTest.testValidDefine()",
        "snippet": "  public void testValidDefine() {\n    assertTrue(testValidDefineValue(\"1\"));\n    assertTrue(testValidDefineValue(\"-3\"));\n    assertTrue(testValidDefineValue(\"true\"));\n    assertTrue(testValidDefineValue(\"false\"));\n    assertTrue(testValidDefineValue(\"'foo'\"));\n    \n    assertFalse(testValidDefineValue(\"x\"));\n    assertFalse(testValidDefineValue(\"null\"));\n    assertFalse(testValidDefineValue(\"undefined\"));\n    assertFalse(testValidDefineValue(\"NaN\"));\n    \n    assertTrue(testValidDefineValue(\"!true\"));\n    assertTrue(testValidDefineValue(\"-true\"));\n    assertTrue(testValidDefineValue(\"1 & 8\"));\n    assertTrue(testValidDefineValue(\"1 + 8\"));\n    assertTrue(testValidDefineValue(\"'a' + 'b'\"));\n\n    assertFalse(testValidDefineValue(\"1 & foo\"));\n  }\n",
        "begin_line": 1071,
        "end_line": 1090,
        "comment": "",
        "child_ranges": [
            "(line 1072,col 5)-(line 1072,col 42)",
            "(line 1073,col 5)-(line 1073,col 43)",
            "(line 1074,col 5)-(line 1074,col 45)",
            "(line 1075,col 5)-(line 1075,col 46)",
            "(line 1076,col 5)-(line 1076,col 46)",
            "(line 1078,col 5)-(line 1078,col 43)",
            "(line 1079,col 5)-(line 1079,col 46)",
            "(line 1080,col 5)-(line 1080,col 51)",
            "(line 1081,col 5)-(line 1081,col 45)",
            "(line 1083,col 5)-(line 1083,col 46)",
            "(line 1084,col 5)-(line 1084,col 46)",
            "(line 1085,col 5)-(line 1085,col 46)",
            "(line 1086,col 5)-(line 1086,col 46)",
            "(line 1087,col 5)-(line 1087,col 50)",
            "(line 1089,col 5)-(line 1089,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtilTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NodeUtilTest.java",
        "signature": "com.google.javascript.jscomp.NodeUtilTest.testValidDefineValue(java.lang.String)",
        "snippet": "  private boolean testValidDefineValue(String js) {\n    Node script = parse(\"var test = \" + js +\";\");\n    Node var = script.getFirstChild();\n    Node name = var.getFirstChild();\n    Node value = name.getFirstChild();\n\n    ImmutableSet<String> defines = ImmutableSet.of();\n    return NodeUtil.isValidDefineValue(value, defines);   \n  }\n",
        "begin_line": 1092,
        "end_line": 1100,
        "comment": "",
        "child_ranges": [
            "(line 1093,col 5)-(line 1093,col 49)",
            "(line 1094,col 5)-(line 1094,col 38)",
            "(line 1095,col 5)-(line 1095,col 36)",
            "(line 1096,col 5)-(line 1096,col 38)",
            "(line 1098,col 5)-(line 1098,col 53)",
            "(line 1099,col 5)-(line 1099,col 55)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessDefinesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ProcessDefinesTest.java",
        "signature": "com.google.javascript.jscomp.ProcessDefinesTest.ProcessDefinesTest()",
        "snippet": "  public ProcessDefinesTest() {\n    super(\"var externMethod;\");\n\n    // ProcessDefines emits warnings if the user tries to re-define a constant,\n    // but the constant is not defined anywhere in the binary.\n    allowSourcelessWarnings();\n  }\n",
        "begin_line": 33,
        "end_line": 39,
        "comment": "",
        "child_ranges": [
            "(line 34,col 5)-(line 34,col 31)",
            "(line 38,col 5)-(line 38,col 30)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessDefinesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ProcessDefinesTest.java",
        "signature": "com.google.javascript.jscomp.ProcessDefinesTest.setUp()",
        "snippet": "  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    overrides.clear();\n  }\n",
        "begin_line": 44,
        "end_line": 48,
        "comment": "",
        "child_ranges": [
            "(line 46,col 5)-(line 46,col 18)",
            "(line 47,col 5)-(line 47,col 22)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessDefinesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ProcessDefinesTest.java",
        "signature": "com.google.javascript.jscomp.ProcessDefinesTest.getProcessor(com.google.javascript.jscomp.Compiler)",
        "snippet": "  @Override\n  protected CompilerPass getProcessor(Compiler compiler) {\n    return new ProcessDefinesWithInjectedNamespace(compiler);\n  }\n",
        "begin_line": 50,
        "end_line": 53,
        "comment": "",
        "child_ranges": [
            "(line 52,col 5)-(line 52,col 61)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessDefinesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ProcessDefinesTest.java",
        "signature": "com.google.javascript.jscomp.ProcessDefinesTest.getNumRepetitions()",
        "snippet": "  @Override\n  protected int getNumRepetitions() {\n    // Only do one repetition, so that we can make sure the first pass keeps\n    // GlobalNamespace up to date.\n    return 1;\n  }\n",
        "begin_line": 55,
        "end_line": 60,
        "comment": "",
        "child_ranges": [
            "(line 59,col 5)-(line 59,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessDefinesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ProcessDefinesTest.java",
        "signature": "com.google.javascript.jscomp.ProcessDefinesTest.testWithPrefix(java.lang.String, java.lang.String, java.lang.String)",
        "snippet": "  private void testWithPrefix(String definitions, String js, String expected) {\n    test(definitions + js, definitions + expected);\n  }\n",
        "begin_line": 66,
        "end_line": 68,
        "comment": "\n   * Helper for tests that expects definitions to remain unchanged, such\n   * that {@code definitions+js} is coverted to {@code definitions+expected}.\n   ",
        "child_ranges": [
            "(line 67,col 5)-(line 67,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessDefinesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ProcessDefinesTest.java",
        "signature": "com.google.javascript.jscomp.ProcessDefinesTest.testBasicDefine1()",
        "snippet": "  public void testBasicDefine1() {\n    test(\"/** @define {boolean} */ var DEF = true\", \"var DEF=true\");\n  }\n",
        "begin_line": 70,
        "end_line": 72,
        "comment": "",
        "child_ranges": [
            "(line 71,col 5)-(line 71,col 68)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessDefinesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ProcessDefinesTest.java",
        "signature": "com.google.javascript.jscomp.ProcessDefinesTest.testBasicDefine2()",
        "snippet": "  public void testBasicDefine2() {\n    test(\"/** @define {string} */ var DEF = 'a'\", \"var DEF=\\\"a\\\"\");\n  }\n",
        "begin_line": 74,
        "end_line": 76,
        "comment": "",
        "child_ranges": [
            "(line 75,col 5)-(line 75,col 67)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessDefinesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ProcessDefinesTest.java",
        "signature": "com.google.javascript.jscomp.ProcessDefinesTest.testBasicDefine3()",
        "snippet": "  public void testBasicDefine3() {\n    test(\"/** @define {number} */ var DEF = 0\", \"var DEF=0\");\n  }\n",
        "begin_line": 78,
        "end_line": 80,
        "comment": "",
        "child_ranges": [
            "(line 79,col 5)-(line 79,col 61)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessDefinesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ProcessDefinesTest.java",
        "signature": "com.google.javascript.jscomp.ProcessDefinesTest.testDefineBadType()",
        "snippet": "  public void testDefineBadType() {\n    test(\"/** @define {Object} */ var DEF = {}\",\n        null, ProcessDefines.INVALID_DEFINE_TYPE_ERROR);\n  }\n",
        "begin_line": 82,
        "end_line": 85,
        "comment": "",
        "child_ranges": [
            "(line 83,col 5)-(line 84,col 56)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessDefinesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ProcessDefinesTest.java",
        "signature": "com.google.javascript.jscomp.ProcessDefinesTest.testDefineWithBadValue1()",
        "snippet": "  public void testDefineWithBadValue1() {\n    test(\"/** @define {boolean} */ var DEF = new Boolean(true);\", null,\n        ProcessDefines.INVALID_DEFINE_INIT_ERROR);\n  }\n",
        "begin_line": 87,
        "end_line": 90,
        "comment": "",
        "child_ranges": [
            "(line 88,col 5)-(line 89,col 50)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessDefinesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ProcessDefinesTest.java",
        "signature": "com.google.javascript.jscomp.ProcessDefinesTest.testDefineWithBadValue2()",
        "snippet": "  public void testDefineWithBadValue2() {\n    test(\"/** @define {string} */ var DEF = 'x' + y;\", null,\n        ProcessDefines.INVALID_DEFINE_INIT_ERROR);\n  }  \n",
        "begin_line": 92,
        "end_line": 95,
        "comment": "",
        "child_ranges": [
            "(line 93,col 5)-(line 94,col 50)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessDefinesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ProcessDefinesTest.java",
        "signature": "com.google.javascript.jscomp.ProcessDefinesTest.testDefineWithDependentValue()",
        "snippet": "  public void testDefineWithDependentValue() {\n    test(\"/** @define {boolean} */ var BASE = false;\\n\" +\n         \"/** @define {boolean} */ var DEF = !BASE;\",\n         \"var BASE=false;var DEF=!BASE\");\n    test(\"var a = {};\\n\" +\n         \"/** @define {boolean} */ a.BASE = false;\\n\" +\n         \"/** @define {boolean} */ a.DEF = !a.BASE;\",\n         \"var a={};a.BASE=false;a.DEF=!a.BASE\");\n  }\n",
        "begin_line": 97,
        "end_line": 105,
        "comment": "",
        "child_ranges": [
            "(line 98,col 5)-(line 100,col 41)",
            "(line 101,col 5)-(line 104,col 48)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessDefinesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ProcessDefinesTest.java",
        "signature": "com.google.javascript.jscomp.ProcessDefinesTest.testDefineWithInvalidDependentValue()",
        "snippet": "  public void testDefineWithInvalidDependentValue() {\n    test(\"var BASE = false;\\n\" +\n         \"/** @define {boolean} */ var DEF = !BASE;\",\n         null,\n          ProcessDefines.INVALID_DEFINE_INIT_ERROR);\n  }\n",
        "begin_line": 108,
        "end_line": 113,
        "comment": "",
        "child_ranges": [
            "(line 109,col 5)-(line 112,col 52)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessDefinesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ProcessDefinesTest.java",
        "signature": "com.google.javascript.jscomp.ProcessDefinesTest.testOverriding1()",
        "snippet": "  public void testOverriding1() {\n    overrides.put(\"DEF_OVERRIDE_TO_TRUE\", new Node(Token.TRUE));\n    overrides.put(\"DEF_OVERRIDE_TO_FALSE\", new Node(Token.FALSE));\n    test(\n        \"/** @define {boolean} */ var DEF_OVERRIDE_TO_TRUE = false;\" +\n        \"/** @define {boolean} */ var DEF_OVERRIDE_TO_FALSE = true\",\n        \"var DEF_OVERRIDE_TO_TRUE=true;var DEF_OVERRIDE_TO_FALSE=false\");\n  }\n",
        "begin_line": 115,
        "end_line": 122,
        "comment": "",
        "child_ranges": [
            "(line 116,col 5)-(line 116,col 64)",
            "(line 117,col 5)-(line 117,col 66)",
            "(line 118,col 5)-(line 121,col 73)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessDefinesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ProcessDefinesTest.java",
        "signature": "com.google.javascript.jscomp.ProcessDefinesTest.testOverriding2()",
        "snippet": "  public void testOverriding2() {\n    overrides.put(\"DEF_OVERRIDE_TO_TRUE\", new Node(Token.TRUE));\n    String normalConst = \"var DEF_OVERRIDE_TO_FALSE=true;\";\n    testWithPrefix(\n        normalConst,\n        \"/** @define {boolean} */ var DEF_OVERRIDE_TO_TRUE = false\",\n        \"var DEF_OVERRIDE_TO_TRUE=true\");\n  }\n",
        "begin_line": 124,
        "end_line": 131,
        "comment": "",
        "child_ranges": [
            "(line 125,col 5)-(line 125,col 64)",
            "(line 126,col 5)-(line 126,col 59)",
            "(line 127,col 5)-(line 130,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessDefinesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ProcessDefinesTest.java",
        "signature": "com.google.javascript.jscomp.ProcessDefinesTest.testOverriding3()",
        "snippet": "  public void testOverriding3() {\n    overrides.put(\"DEF_OVERRIDE_TO_TRUE\", new Node(Token.TRUE));\n    test(\n        \"/** @define {boolean} */ var DEF_OVERRIDE_TO_TRUE = true;\",\n        \"var DEF_OVERRIDE_TO_TRUE=true\");\n  }\n",
        "begin_line": 133,
        "end_line": 138,
        "comment": "",
        "child_ranges": [
            "(line 134,col 5)-(line 134,col 64)",
            "(line 135,col 5)-(line 137,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessDefinesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ProcessDefinesTest.java",
        "signature": "com.google.javascript.jscomp.ProcessDefinesTest.testOverridingString0()",
        "snippet": "  public void testOverridingString0() {\n    test(\n        \"/** @define {string} */ var DEF_OVERRIDE_STRING = 'x';\",\n        \"var DEF_OVERRIDE_STRING=\\\"x\\\"\");\n  }\n",
        "begin_line": 140,
        "end_line": 144,
        "comment": "",
        "child_ranges": [
            "(line 141,col 5)-(line 143,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessDefinesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ProcessDefinesTest.java",
        "signature": "com.google.javascript.jscomp.ProcessDefinesTest.testOverridingString1()",
        "snippet": "  public void testOverridingString1() {\n    test(\n        \"/** @define {string} */ var DEF_OVERRIDE_STRING = 'x' + 'y';\",\n        \"var DEF_OVERRIDE_STRING=\\\"x\\\" + \\\"y\\\"\");\n  }  \n",
        "begin_line": 146,
        "end_line": 150,
        "comment": "",
        "child_ranges": [
            "(line 147,col 5)-(line 149,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessDefinesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ProcessDefinesTest.java",
        "signature": "com.google.javascript.jscomp.ProcessDefinesTest.testOverridingString2()",
        "snippet": "  public void testOverridingString2() {\n    overrides.put(\"DEF_OVERRIDE_STRING\", Node.newString(\"foo\"));\n    test(\n        \"/** @define {string} */ var DEF_OVERRIDE_STRING = 'x';\",\n        \"var DEF_OVERRIDE_STRING=\\\"foo\\\"\");\n  }  \n",
        "begin_line": 152,
        "end_line": 157,
        "comment": "",
        "child_ranges": [
            "(line 153,col 5)-(line 153,col 64)",
            "(line 154,col 5)-(line 156,col 43)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessDefinesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ProcessDefinesTest.java",
        "signature": "com.google.javascript.jscomp.ProcessDefinesTest.testOverridingString3()",
        "snippet": "  public void testOverridingString3() {\n    overrides.put(\"DEF_OVERRIDE_STRING\", Node.newString(\"foo\"));\n    test(\n        \"/** @define {string} */ var DEF_OVERRIDE_STRING = 'x' + 'y';\",\n        \"var DEF_OVERRIDE_STRING=\\\"foo\\\"\");\n  }\n",
        "begin_line": 159,
        "end_line": 164,
        "comment": "",
        "child_ranges": [
            "(line 160,col 5)-(line 160,col 64)",
            "(line 161,col 5)-(line 163,col 43)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessDefinesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ProcessDefinesTest.java",
        "signature": "com.google.javascript.jscomp.ProcessDefinesTest.testMisspelledOverride()",
        "snippet": "  public void testMisspelledOverride() {\n    overrides.put(\"DEF_BAD_OVERIDE\", new Node(Token.TRUE));\n    test(\"/** @define {boolean} */ var DEF_BAD_OVERRIDE = true\",\n        \"var DEF_BAD_OVERRIDE=true\", null,\n        ProcessDefines.UNKNOWN_DEFINE_WARNING);\n  }\n",
        "begin_line": 166,
        "end_line": 171,
        "comment": "",
        "child_ranges": [
            "(line 167,col 5)-(line 167,col 59)",
            "(line 168,col 5)-(line 170,col 47)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessDefinesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ProcessDefinesTest.java",
        "signature": "com.google.javascript.jscomp.ProcessDefinesTest.testCompiledIsKnownDefine()",
        "snippet": "  public void testCompiledIsKnownDefine() {\n    overrides.put(\"COMPILED\", new Node(Token.TRUE));\n    testSame(\"\");\n  }\n",
        "begin_line": 173,
        "end_line": 176,
        "comment": "",
        "child_ranges": [
            "(line 174,col 5)-(line 174,col 52)",
            "(line 175,col 5)-(line 175,col 17)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessDefinesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ProcessDefinesTest.java",
        "signature": "com.google.javascript.jscomp.ProcessDefinesTest.testSimpleReassign1()",
        "snippet": "  public void testSimpleReassign1() {\n    test(\"/** @define {boolean} */ var DEF = false; DEF = true;\",\n        \"var DEF=true;true\");\n  }\n",
        "begin_line": 178,
        "end_line": 181,
        "comment": "",
        "child_ranges": [
            "(line 179,col 5)-(line 180,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessDefinesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ProcessDefinesTest.java",
        "signature": "com.google.javascript.jscomp.ProcessDefinesTest.testSimpleReassign2()",
        "snippet": "  public void testSimpleReassign2() {\n    test(\"/** @define {number|boolean} */ var DEF=false;DEF=true;DEF=3\",\n        \"var DEF=3;true;3\");\n\n    Name def = namespace.getNameIndex().get(\"DEF\");\n    assertEquals(0, def.refs.size());\n    assertEquals(1, def.globalSets);\n    assertNotNull(def.declaration);\n  }\n",
        "begin_line": 183,
        "end_line": 191,
        "comment": "",
        "child_ranges": [
            "(line 184,col 5)-(line 185,col 28)",
            "(line 187,col 5)-(line 187,col 51)",
            "(line 188,col 5)-(line 188,col 37)",
            "(line 189,col 5)-(line 189,col 36)",
            "(line 190,col 5)-(line 190,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessDefinesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ProcessDefinesTest.java",
        "signature": "com.google.javascript.jscomp.ProcessDefinesTest.testSimpleReassign3()",
        "snippet": "  public void testSimpleReassign3() {\n    test(\"/** @define {boolean} */ var DEF = false;var x;x = DEF = true;\",\n        \"var DEF=true;var x;x=true\");\n  }\n",
        "begin_line": 193,
        "end_line": 196,
        "comment": "",
        "child_ranges": [
            "(line 194,col 5)-(line 195,col 37)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessDefinesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ProcessDefinesTest.java",
        "signature": "com.google.javascript.jscomp.ProcessDefinesTest.testDuplicateVar()",
        "snippet": "  public void testDuplicateVar() {\n    test(\"/** @define {boolean} */ var DEF = false; var DEF = true;\",\n         null, VAR_MULTIPLY_DECLARED_ERROR);\n  }\n",
        "begin_line": 198,
        "end_line": 201,
        "comment": "",
        "child_ranges": [
            "(line 199,col 5)-(line 200,col 44)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessDefinesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ProcessDefinesTest.java",
        "signature": "com.google.javascript.jscomp.ProcessDefinesTest.testAssignBeforeDeclaration1()",
        "snippet": "  public void testAssignBeforeDeclaration1() {\n    test(\"DEF=false;var b=false,/** @define {boolean} */DEF=true,c=false\",\n         null, ProcessDefines.INVALID_DEFINE_INIT_ERROR);\n  }\n",
        "begin_line": 203,
        "end_line": 206,
        "comment": "",
        "child_ranges": [
            "(line 204,col 5)-(line 205,col 57)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessDefinesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ProcessDefinesTest.java",
        "signature": "com.google.javascript.jscomp.ProcessDefinesTest.testAssignBeforeDeclaration2()",
        "snippet": "  public void testAssignBeforeDeclaration2() {\n    overrides.put(\"DEF_OVERRIDE_TO_TRUE\", new Node(Token.TRUE));\n    test(\n        \"DEF_OVERRIDE_TO_TRUE = 3;\" +\n        \"/** @define {boolean|number} */ var DEF_OVERRIDE_TO_TRUE = false;\",\n        null, ProcessDefines.INVALID_DEFINE_INIT_ERROR);\n  }\n",
        "begin_line": 208,
        "end_line": 214,
        "comment": "",
        "child_ranges": [
            "(line 209,col 5)-(line 209,col 64)",
            "(line 210,col 5)-(line 213,col 56)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessDefinesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ProcessDefinesTest.java",
        "signature": "com.google.javascript.jscomp.ProcessDefinesTest.testEmptyDeclaration()",
        "snippet": "  public void testEmptyDeclaration() {\n    test(\"/** @define {boolean} */ var DEF;\",\n         null, ProcessDefines.INVALID_DEFINE_INIT_ERROR);\n  }\n",
        "begin_line": 216,
        "end_line": 219,
        "comment": "",
        "child_ranges": [
            "(line 217,col 5)-(line 218,col 57)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessDefinesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ProcessDefinesTest.java",
        "signature": "com.google.javascript.jscomp.ProcessDefinesTest.testReassignAfterCall()",
        "snippet": "  public void testReassignAfterCall() {\n    test(\"/** @define {boolean} */var DEF=true;externMethod();DEF=false\",\n        null, ProcessDefines.DEFINE_NOT_ASSIGNABLE_ERROR);\n  }\n",
        "begin_line": 221,
        "end_line": 224,
        "comment": "",
        "child_ranges": [
            "(line 222,col 5)-(line 223,col 58)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessDefinesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ProcessDefinesTest.java",
        "signature": "com.google.javascript.jscomp.ProcessDefinesTest.testReassignAfterRef()",
        "snippet": "  public void testReassignAfterRef() {\n    test(\"/** @define {boolean} */var DEF=true;var x = DEF;DEF=false\",\n        null, ProcessDefines.DEFINE_NOT_ASSIGNABLE_ERROR);\n  }\n",
        "begin_line": 226,
        "end_line": 229,
        "comment": "",
        "child_ranges": [
            "(line 227,col 5)-(line 228,col 58)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessDefinesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ProcessDefinesTest.java",
        "signature": "com.google.javascript.jscomp.ProcessDefinesTest.testReassignWithExpr()",
        "snippet": "  public void testReassignWithExpr() {\n    test(\"/** @define {boolean} */var DEF=true;var x;DEF=x=false\",\n        null, ProcessDefines.INVALID_DEFINE_INIT_ERROR);\n  }\n",
        "begin_line": 231,
        "end_line": 234,
        "comment": "",
        "child_ranges": [
            "(line 232,col 5)-(line 233,col 56)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessDefinesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ProcessDefinesTest.java",
        "signature": "com.google.javascript.jscomp.ProcessDefinesTest.testReassignAfterNonGlobalRef()",
        "snippet": "  public void testReassignAfterNonGlobalRef() {\n    test(\n        \"/** @define {boolean} */var DEF=true;\" +\n        \"var x=function(){var y=DEF}; DEF=false\",\n        \"var DEF=false;var x=function(){var y=DEF};false\");\n\n    Name def = namespace.getNameIndex().get(\"DEF\");\n    assertEquals(1, def.refs.size());\n    assertEquals(1, def.globalSets);\n    assertNotNull(def.declaration);\n  }\n",
        "begin_line": 236,
        "end_line": 246,
        "comment": "",
        "child_ranges": [
            "(line 237,col 5)-(line 240,col 59)",
            "(line 242,col 5)-(line 242,col 51)",
            "(line 243,col 5)-(line 243,col 37)",
            "(line 244,col 5)-(line 244,col 36)",
            "(line 245,col 5)-(line 245,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessDefinesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ProcessDefinesTest.java",
        "signature": "com.google.javascript.jscomp.ProcessDefinesTest.testReassignAfterRefInConditional()",
        "snippet": "  public void testReassignAfterRefInConditional() {\n    test(\n        \"/** @define {boolean} */var DEF=true;\" +\n        \"if (false) {var x=DEF} DEF=false;\",\n        null, ProcessDefines.DEFINE_NOT_ASSIGNABLE_ERROR);\n  }\n",
        "begin_line": 248,
        "end_line": 253,
        "comment": "",
        "child_ranges": [
            "(line 249,col 5)-(line 252,col 58)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessDefinesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ProcessDefinesTest.java",
        "signature": "com.google.javascript.jscomp.ProcessDefinesTest.testAssignInNonGlobalScope()",
        "snippet": "  public void testAssignInNonGlobalScope() {\n    test(\"/** @define {boolean} */var DEF=true;function foo() {DEF=false};\",\n        null, ProcessDefines.NON_GLOBAL_DEFINE_INIT_ERROR);\n  }\n",
        "begin_line": 255,
        "end_line": 258,
        "comment": "",
        "child_ranges": [
            "(line 256,col 5)-(line 257,col 59)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessDefinesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ProcessDefinesTest.java",
        "signature": "com.google.javascript.jscomp.ProcessDefinesTest.testDeclareInNonGlobalScope()",
        "snippet": "  public void testDeclareInNonGlobalScope() {\n    test(\"function foo() {/** @define {boolean} */var DEF=true;};\",\n        null, ProcessDefines.NON_GLOBAL_DEFINE_INIT_ERROR);\n  }\n",
        "begin_line": 260,
        "end_line": 263,
        "comment": "",
        "child_ranges": [
            "(line 261,col 5)-(line 262,col 59)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessDefinesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ProcessDefinesTest.java",
        "signature": "com.google.javascript.jscomp.ProcessDefinesTest.testDefineAssignmentInLoop()",
        "snippet": "  public void testDefineAssignmentInLoop() {\n    test(\"/** @define {boolean} */var DEF=true;var x=0;while (x) {DEF=false;}\",\n        null, ProcessDefines.NON_GLOBAL_DEFINE_INIT_ERROR);\n  }\n",
        "begin_line": 265,
        "end_line": 268,
        "comment": "",
        "child_ranges": [
            "(line 266,col 5)-(line 267,col 59)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessDefinesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ProcessDefinesTest.java",
        "signature": "com.google.javascript.jscomp.ProcessDefinesTest.testWithNoDefines()",
        "snippet": "  public void testWithNoDefines() {\n    testSame(\"var DEF=true;var x={};x.foo={}\");\n  }\n",
        "begin_line": 270,
        "end_line": 272,
        "comment": "",
        "child_ranges": [
            "(line 271,col 5)-(line 271,col 47)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessDefinesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ProcessDefinesTest.java",
        "signature": "com.google.javascript.jscomp.ProcessDefinesTest.testNamespacedDefine1()",
        "snippet": "  public void testNamespacedDefine1() {\n    test(\"var a = {}; /** @define {boolean} */ a.B = false; a.B = true;\",\n         \"var a = {}; a.B = true; true;\");\n\n    Name aDotB = namespace.getNameIndex().get(\"a.B\");\n    assertEquals(0, aDotB.refs.size());\n    assertEquals(1, aDotB.globalSets);\n    assertNotNull(aDotB.declaration);\n  }\n",
        "begin_line": 274,
        "end_line": 282,
        "comment": "",
        "child_ranges": [
            "(line 275,col 5)-(line 276,col 42)",
            "(line 278,col 5)-(line 278,col 53)",
            "(line 279,col 5)-(line 279,col 39)",
            "(line 280,col 5)-(line 280,col 38)",
            "(line 281,col 5)-(line 281,col 37)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessDefinesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ProcessDefinesTest.java",
        "signature": "com.google.javascript.jscomp.ProcessDefinesTest.testNamespacedDefine2()",
        "snippet": "  public void testNamespacedDefine2() {\n    overrides.put(\"a.B\", new Node(Token.TRUE));\n    test(\"var a = {}; /** @define {boolean} */ a.B = false;\",\n         \"var a = {}; a.B = true;\");\n  }\n",
        "begin_line": 284,
        "end_line": 288,
        "comment": "",
        "child_ranges": [
            "(line 285,col 5)-(line 285,col 47)",
            "(line 286,col 5)-(line 287,col 36)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessDefinesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ProcessDefinesTest.java",
        "signature": "com.google.javascript.jscomp.ProcessDefinesTest.testNamespacedDefine3()",
        "snippet": "  public void testNamespacedDefine3() {\n    overrides.put(\"a.B\", new Node(Token.TRUE));\n    test(\"var a = {};\", \"var a = {};\", null,\n         ProcessDefines.UNKNOWN_DEFINE_WARNING);\n  }\n",
        "begin_line": 290,
        "end_line": 294,
        "comment": "",
        "child_ranges": [
            "(line 291,col 5)-(line 291,col 47)",
            "(line 292,col 5)-(line 293,col 48)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessDefinesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ProcessDefinesTest.java",
        "signature": "com.google.javascript.jscomp.ProcessDefinesTest.testOverrideAfterAlias()",
        "snippet": "  public void testOverrideAfterAlias() {\n    test(\"var x; /** @define {boolean} */var DEF=true; x=DEF; DEF=false;\",\n         null, ProcessDefines.DEFINE_NOT_ASSIGNABLE_ERROR);\n  }\n",
        "begin_line": 297,
        "end_line": 300,
        "comment": "",
        "child_ranges": [
            "(line 298,col 5)-(line 299,col 59)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessDefinesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ProcessDefinesTest.java",
        "signature": "com.google.javascript.jscomp.ProcessDefinesTest.ProcessDefinesWithInjectedNamespace.ProcessDefinesWithInjectedNamespace(com.google.javascript.jscomp.Compiler)",
        "snippet": "    public ProcessDefinesWithInjectedNamespace(Compiler compiler) {\n      this.compiler = compiler;\n    }\n",
        "begin_line": 305,
        "end_line": 307,
        "comment": "",
        "child_ranges": [
            "(line 306,col 7)-(line 306,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessDefinesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ProcessDefinesTest.java",
        "signature": "com.google.javascript.jscomp.ProcessDefinesTest.ProcessDefinesWithInjectedNamespace.process(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "    public void process(Node externs, Node js) {\n      namespace = new GlobalNamespace(compiler, js);\n      new ProcessDefines(compiler, overrides)\n          .injectNamespace(namespace)\n          .process(externs, js);\n    }\n",
        "begin_line": 309,
        "end_line": 314,
        "comment": "",
        "child_ranges": [
            "(line 310,col 7)-(line 310,col 52)",
            "(line 311,col 7)-(line 313,col 32)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ProcessDefinesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.CompilerTestCase(java.lang.String, boolean)",
        "snippet": "  protected CompilerTestCase(String externs, boolean compareAsTree) {\n    this.externsInputs = new JSSourceFile[] {\n        JSSourceFile.fromCode(\"externs\", externs)\n    };\n    this.compareAsTree = compareAsTree;\n    this.parseTypeInfo = false;\n  }\n",
        "begin_line": 101,
        "end_line": 107,
        "comment": "\n   * Constructs a test.\n   *\n   * @param externs Externs JS as a string\n   * @param compareAsTree True to compare output & expected as a node tree.\n   *     99% of the time you want to compare as a tree. There are a few\n   *     special cases where you don't, like if you want to test the code\n   *     printing of \"unnatural\" syntax trees. For example,\n   *\n   * <pre>\n   * IF\n   *   IF\n   *     STATEMENT\n   * ELSE\n   *   STATEMENT\n   * </pre>\n   ",
        "child_ranges": [
            "(line 102,col 5)-(line 104,col 6)",
            "(line 105,col 5)-(line 105,col 39)",
            "(line 106,col 5)-(line 106,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ProcessDefinesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.CompilerTestCase(java.lang.String)",
        "snippet": "  protected CompilerTestCase(String externs) {\n    this(externs, true);\n  }\n",
        "begin_line": 113,
        "end_line": 115,
        "comment": "\n   * Constructs a test. Uses AST comparison.\n   * @param externs Externs JS as a string\n   ",
        "child_ranges": [
            "(line 114,col 5)-(line 114,col 24)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ProcessDefinesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.CompilerTestCase()",
        "snippet": "  protected CompilerTestCase() {\n    this(\"\", true);\n  }\n",
        "begin_line": 120,
        "end_line": 122,
        "comment": "\n   * Constructs a test. Uses AST comparison and no externs.\n   ",
        "child_ranges": [
            "(line 121,col 5)-(line 121,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ProcessDefinesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.getProcessor(com.google.javascript.jscomp.Compiler)",
        "snippet": "  protected abstract CompilerPass getProcessor(Compiler compiler);\n",
        "begin_line": 130,
        "end_line": 130,
        "comment": "\n   * Gets the compiler pass instance to use for a test.\n   *\n   * @param compiler The compiler\n   * @return The pass to test\n   ",
        "child_ranges": []
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ProcessDefinesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.getOptions()",
        "snippet": "  protected CompilerOptions getOptions() {\n    CompilerOptions options = new CompilerOptions();\n\n    // This doesn't affect whether checkSymbols is run--it just affects\n    // whether variable warnings are filtered.\n    options.checkSymbols = true;\n\n    options.setWarningLevel(\n        DiagnosticGroups.MISSING_PROPERTIES, CheckLevel.WARNING);\n    options.setCodingConvention(getCodingConvention());\n    return options;\n  }\n",
        "begin_line": 139,
        "end_line": 150,
        "comment": "\n   * Gets the compiler options to use for this test. Defaults to do nothing\n   * options.\n   *\n   * This is really only for configuring warnings guards. Use getProcessor\n   * to determine what passes should be run.\n   ",
        "child_ranges": [
            "(line 140,col 5)-(line 140,col 52)",
            "(line 144,col 5)-(line 144,col 32)",
            "(line 146,col 5)-(line 147,col 65)",
            "(line 148,col 5)-(line 148,col 55)",
            "(line 149,col 5)-(line 149,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ProcessDefinesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.getCodingConvention()",
        "snippet": "  protected CodingConvention getCodingConvention() {\n    return new GoogleCodingConvention();\n  }\n",
        "begin_line": 152,
        "end_line": 154,
        "comment": "",
        "child_ranges": [
            "(line 153,col 5)-(line 153,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ProcessDefinesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.getNumRepetitions()",
        "snippet": "  protected int getNumRepetitions() {\n    // Since most compiler passes should be idempotent, we run each pass twice\n    // by default.\n    return 2;\n  }\n",
        "begin_line": 160,
        "end_line": 164,
        "comment": "\n   * Returns the number of times the pass should be run before results are\n   * verified.\n   ",
        "child_ranges": [
            "(line 163,col 5)-(line 163,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ProcessDefinesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.allowSourcelessWarnings()",
        "snippet": "  void allowSourcelessWarnings() {\n    allowSourcelessWarnings = true;\n  }\n",
        "begin_line": 167,
        "end_line": 169,
        "comment": " Expect warnings without source information. ",
        "child_ranges": [
            "(line 168,col 5)-(line 168,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ProcessDefinesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.getLastCompiler()",
        "snippet": "  Compiler getLastCompiler() {\n    return lastCompiler;\n  }\n",
        "begin_line": 172,
        "end_line": 174,
        "comment": " The most recently used JSComp instance. ",
        "child_ranges": [
            "(line 173,col 5)-(line 173,col 24)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ProcessDefinesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.enableTypeCheck(com.google.javascript.jscomp.CheckLevel)",
        "snippet": "  public void enableTypeCheck(CheckLevel level) {\n    typeCheckEnabled  = true;\n    typeCheckLevel = level;\n  }\n",
        "begin_line": 184,
        "end_line": 187,
        "comment": "\n   * Perform type checking before running the test pass. This will check\n   * for type errors and annotate nodes with type information.\n   *\n   * @param level the level of severity to report for type errors\n   *\n   * @see TypeCheck\n   ",
        "child_ranges": [
            "(line 185,col 5)-(line 185,col 29)",
            "(line 186,col 5)-(line 186,col 27)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ProcessDefinesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.enableLineNumberCheck(boolean)",
        "snippet": "  public void enableLineNumberCheck(boolean newVal) {\n    checkLineNumbers = newVal;\n  }\n",
        "begin_line": 192,
        "end_line": 194,
        "comment": "\n   * Check to make sure that line numbers were preserved.\n   ",
        "child_ranges": [
            "(line 193,col 5)-(line 193,col 30)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ProcessDefinesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.disableTypeCheck()",
        "snippet": "  void disableTypeCheck() {\n    typeCheckEnabled  = false;\n  }\n",
        "begin_line": 201,
        "end_line": 203,
        "comment": "\n   * Do not run type checking before running the test pass.\n   *\n   * @see TypeCheck\n   ",
        "child_ranges": [
            "(line 202,col 5)-(line 202,col 30)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ProcessDefinesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.enableNormalize()",
        "snippet": "  protected void enableNormalize() {\n    enableNormalize(true);\n  }\n",
        "begin_line": 211,
        "end_line": 213,
        "comment": "\n   * Perform AST normalization before running the test pass, and anti-normalize\n   * after running it.\n   *\n   * @see Normalize\n   ",
        "child_ranges": [
            "(line 212,col 5)-(line 212,col 26)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ProcessDefinesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.enableNormalize(boolean)",
        "snippet": "  protected void enableNormalize(boolean normalizeExpected) {\n    normalizeEnabled = true;\n    this.normalizeExpected = normalizeExpected;\n  }\n",
        "begin_line": 223,
        "end_line": 226,
        "comment": "\n   * Perform AST normalization before running the test pass, and anti-normalize\n   * after running it.\n   *\n   * @param normalizeExpected Whether to perform normalization on the\n   * expected js result.\n   * @see Normalize\n   ",
        "child_ranges": [
            "(line 224,col 5)-(line 224,col 28)",
            "(line 225,col 5)-(line 225,col 47)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ProcessDefinesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.disableNormalize()",
        "snippet": "  protected void disableNormalize() {\n    normalizeEnabled = false;\n  }\n",
        "begin_line": 232,
        "end_line": 234,
        "comment": "\n   * Don't perform AST normalization before running the test pass.\n   * @see Normalize\n   ",
        "child_ranges": [
            "(line 233,col 5)-(line 233,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ProcessDefinesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.enableMarkNoSideEffects()",
        "snippet": "  void enableMarkNoSideEffects() {\n    markNoSideEffects  = true;\n  }\n",
        "begin_line": 241,
        "end_line": 243,
        "comment": "\n   * Run the MarkSideEffectCalls pass before running the test pass.\n   *\n   * @see MarkNoSideEffectCalls\n   ",
        "child_ranges": [
            "(line 242,col 5)-(line 242,col 30)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ProcessDefinesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.createTypeCheck(com.google.javascript.jscomp.Compiler, com.google.javascript.jscomp.CheckLevel)",
        "snippet": "  private static TypeCheck createTypeCheck(Compiler compiler,\n      CheckLevel level) {\n    ReverseAbstractInterpreter rai =\n        new SemanticReverseAbstractInterpreter(compiler.getCodingConvention(),\n            compiler.getTypeRegistry());\n\n    return new TypeCheck(compiler, rai, compiler.getTypeRegistry(),\n        level, CheckLevel.OFF);\n  }\n",
        "begin_line": 246,
        "end_line": 254,
        "comment": " Returns a newly created TypeCheck. ",
        "child_ranges": [
            "(line 248,col 5)-(line 250,col 40)",
            "(line 252,col 5)-(line 253,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ProcessDefinesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.lang.String, java.lang.String)",
        "snippet": "  public void test(String js, String expected) {\n    test(js, expected, (DiagnosticType) null);\n  }\n",
        "begin_line": 262,
        "end_line": 264,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output.\n   *\n   * @param js Input\n   * @param expected Expected JS output\n   ",
        "child_ranges": [
            "(line 263,col 5)-(line 263,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ProcessDefinesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.lang.String, java.lang.String, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void test(String js, String expected, DiagnosticType error) {\n    test(js, expected, error, null);\n  }\n",
        "begin_line": 274,
        "end_line": 276,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output,\n   * or that an expected error is encountered.\n   *\n   * @param js Input\n   * @param expected Expected output, or null if an error is expected\n   * @param error Expected error, or null if no error is expected\n   ",
        "child_ranges": [
            "(line 275,col 5)-(line 275,col 36)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ProcessDefinesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.lang.String, java.lang.String, com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType, java.lang.String)",
        "snippet": "  public void test(String js, String expected, DiagnosticType error,\n                   DiagnosticType warning, String description) {\n    test(externsInputs, js, expected, error, warning, description);\n  }\n",
        "begin_line": 289,
        "end_line": 292,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output,\n   * or that an expected error is encountered.\n   *\n   * @param js Input\n   * @param expected Expected output, or null if an error is expected\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   * @param description The content of the error expected\n   ",
        "child_ranges": [
            "(line 291,col 5)-(line 291,col 67)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ProcessDefinesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.lang.String, java.lang.String, com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void test(String js, String expected,\n                   DiagnosticType error, DiagnosticType warning) {\n    test(externsInputs, js, expected, error, warning, null);\n  }\n",
        "begin_line": 304,
        "end_line": 307,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output\n   * and (optionally) that an expected warning is issued. Or, if an error is\n   * expected, this method just verifies that the error is encountered.\n   *\n   * @param js Input\n   * @param expected Expected output, or null if an error is expected\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   ",
        "child_ranges": [
            "(line 306,col 5)-(line 306,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ProcessDefinesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.lang.String, java.lang.String, java.lang.String, com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void test(String externs, String js, String expected,\n                   DiagnosticType error, DiagnosticType warning) {\n    test(externs, js, expected, error, warning, null);\n  }\n",
        "begin_line": 320,
        "end_line": 323,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output\n   * and (optionally) that an expected warning is issued. Or, if an error is\n   * expected, this method just verifies that the error is encountered.\n   *\n   * @param externs Externs input\n   * @param js Input\n   * @param expected Expected output, or null if an error is expected\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   ",
        "child_ranges": [
            "(line 322,col 5)-(line 322,col 54)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ProcessDefinesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.lang.String, java.lang.String, java.lang.String, com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType, java.lang.String)",
        "snippet": "  public void test(String externs, String js, String expected,\n                   DiagnosticType error, DiagnosticType warning,\n                   String description) {\n    JSSourceFile[] externsInputs = new JSSourceFile[]{\n        JSSourceFile.fromCode(\"externs\", externs)\n    };\n    test(externsInputs, js, expected, error, warning, description);\n  }\n",
        "begin_line": 339,
        "end_line": 346,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output\n   * and (optionally) that an expected warning is issued. Or, if an error is\n   * expected, this method just verifies that the error is encountered.\n   *\n   * @param externs Externs input\n   * @param js Input\n   * @param expected Expected output, or null if an error is expected\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   * @param description The description of the expected warning,\n   *      or null if no warning is expected or if the warning's description\n   *      should not be examined\n   ",
        "child_ranges": [
            "(line 342,col 5)-(line 344,col 6)",
            "(line 345,col 5)-(line 345,col 67)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ProcessDefinesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(com.google.javascript.jscomp.JSSourceFile[], java.lang.String, java.lang.String, com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType, java.lang.String)",
        "snippet": "  public void test(JSSourceFile[] externs, String js, String expected,\n                   DiagnosticType error,\n                   DiagnosticType warning, String description) {\n    Compiler compiler = createCompiler();\n    lastCompiler = compiler;\n\n    CompilerOptions options = getOptions();\n    // Note that in this context, turning on the checkTypes option won't\n    // actually cause the type check to run.\n    options.checkTypes = parseTypeInfo;\n    compiler.init(externs, new JSSourceFile[] {\n        JSSourceFile.fromCode(\"testcode\", js) }, options);\n\n    BaseJSTypeTestCase.addNativeProperties(compiler.getTypeRegistry());\n\n    test(compiler, new String[] { expected }, error, warning, description);\n  }\n",
        "begin_line": 362,
        "end_line": 378,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output\n   * and (optionally) that an expected warning is issued. Or, if an error is\n   * expected, this method just verifies that the error is encountered.\n   *\n   * @param externs Externs inputs\n   * @param js Input\n   * @param expected Expected output, or null if an error is expected\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   * @param description The description of the expected warning,\n   *      or null if no warning is expected or if the warning's description\n   *      should not be examined\n   ",
        "child_ranges": [
            "(line 365,col 5)-(line 365,col 41)",
            "(line 366,col 5)-(line 366,col 28)",
            "(line 368,col 5)-(line 368,col 43)",
            "(line 371,col 5)-(line 371,col 39)",
            "(line 372,col 5)-(line 373,col 58)",
            "(line 375,col 5)-(line 375,col 71)",
            "(line 377,col 5)-(line 377,col 75)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ProcessDefinesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.lang.String[], java.lang.String[])",
        "snippet": "  public void test(String[] js, String[] expected) {\n    test(js, expected, null);\n  }\n",
        "begin_line": 386,
        "end_line": 388,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output.\n   *\n   * @param js Inputs\n   * @param expected Expected JS output\n   ",
        "child_ranges": [
            "(line 387,col 5)-(line 387,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ProcessDefinesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.lang.String[], java.lang.String[], com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void test(String[] js, String[] expected, DiagnosticType error) {\n    test(js, expected, error, null);\n  }\n",
        "begin_line": 398,
        "end_line": 400,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output,\n   * or that an expected error is encountered.\n   *\n   * @param js Inputs\n   * @param expected Expected JS output\n   * @param error Expected error, or null if no error is expected\n   ",
        "child_ranges": [
            "(line 399,col 5)-(line 399,col 36)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ProcessDefinesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.lang.String[], java.lang.String[], com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void test(String[] js, String[] expected, DiagnosticType error,\n                   DiagnosticType warning) {\n    test(js, expected, error, warning, null);\n  }\n",
        "begin_line": 412,
        "end_line": 415,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output\n   * and (optionally) that an expected warning is issued. Or, if an error is\n   * expected, this method just verifies that the error is encountered.\n   *\n   * @param js Inputs\n   * @param expected Expected JS output\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   ",
        "child_ranges": [
            "(line 414,col 5)-(line 414,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ProcessDefinesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.lang.String[], java.lang.String[], com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType, java.lang.String)",
        "snippet": "  public void test(String[] js, String[] expected, DiagnosticType error,\n                   DiagnosticType warning, String description) {\n    Compiler compiler = createCompiler();\n    lastCompiler = compiler;\n\n    JSSourceFile[] inputs = new JSSourceFile[js.length];\n    for (int i = 0; i < js.length; i++) {\n      inputs[i] = JSSourceFile.fromCode(\"input\" + i, js[i]);\n    }\n    compiler.init(externsInputs, inputs, getOptions());\n    test(compiler, expected, error, warning, description);\n  }\n",
        "begin_line": 430,
        "end_line": 441,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output\n   * and (optionally) that an expected warning is issued. Or, if an error is\n   * expected, this method just verifies that the error is encountered.\n   *\n   * @param js Inputs\n   * @param expected Expected JS output\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   * @param description The description of the expected warning,\n   *      or null if no warning is expected or if the warning's description\n   *      should not be examined\n   ",
        "child_ranges": [
            "(line 432,col 5)-(line 432,col 41)",
            "(line 433,col 5)-(line 433,col 28)",
            "(line 435,col 5)-(line 435,col 56)",
            "(line 436,col 5)-(line 438,col 5)",
            "(line 439,col 5)-(line 439,col 55)",
            "(line 440,col 5)-(line 440,col 58)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ProcessDefinesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(com.google.javascript.jscomp.JSModule[], java.lang.String[])",
        "snippet": "  public void test(JSModule[] modules, String[] expected) {\n    test(modules, expected, null);\n  }\n",
        "begin_line": 449,
        "end_line": 451,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output.\n   *\n   * @param modules Module inputs\n   * @param expected Expected JS outputs (one per module)\n   ",
        "child_ranges": [
            "(line 450,col 5)-(line 450,col 34)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ProcessDefinesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(com.google.javascript.jscomp.JSModule[], java.lang.String[], com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void test(JSModule[] modules, String[] expected,\n      DiagnosticType error) {\n    test(modules, expected, error, null);\n  }\n",
        "begin_line": 461,
        "end_line": 464,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output,\n   * or that an expected error is encountered.\n   *\n   * @param modules Module inputs\n   * @param expected Expected JS outputs (one per module)\n   * @param error Expected error, or null if no error is expected\n   ",
        "child_ranges": [
            "(line 463,col 5)-(line 463,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ProcessDefinesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(com.google.javascript.jscomp.JSModule[], java.lang.String[], com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void test(JSModule[] modules, String[] expected,\n                   DiagnosticType error, DiagnosticType warning) {\n    Compiler compiler = createCompiler();\n    lastCompiler = compiler;\n\n    compiler.init(externsInputs, modules, getOptions());\n    test(compiler, expected, error, warning);\n  }\n",
        "begin_line": 476,
        "end_line": 483,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output\n   * and (optionally) that an expected warning is issued. Or, if an error is\n   * expected, this method just verifies that the error is encountered.\n   *\n   * @param modules Module inputs\n   * @param expected Expected JS outputs (one per module)\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   ",
        "child_ranges": [
            "(line 478,col 5)-(line 478,col 41)",
            "(line 479,col 5)-(line 479,col 28)",
            "(line 481,col 5)-(line 481,col 56)",
            "(line 482,col 5)-(line 482,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ProcessDefinesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(java.lang.String)",
        "snippet": "  public void testSame(String js) {\n    test(js, js);\n  }\n",
        "begin_line": 490,
        "end_line": 492,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as its input.\n   *\n   * @param js Input and output\n   ",
        "child_ranges": [
            "(line 491,col 5)-(line 491,col 17)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ProcessDefinesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(java.lang.String, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void testSame(String js, DiagnosticType warning) {\n    test(js, js, null, warning);\n  }\n",
        "begin_line": 501,
        "end_line": 503,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as its input\n   * and (optionally) that an expected warning is issued.\n   *\n   * @param js Input and output\n   * @param warning Expected warning, or null if no warning is expected\n   ",
        "child_ranges": [
            "(line 502,col 5)-(line 502,col 32)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ProcessDefinesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(java.lang.String, com.google.javascript.jscomp.DiagnosticType, boolean)",
        "snippet": "  public void testSame(String js, DiagnosticType diag, boolean error) {\n    if (error) {\n      test(js, js, diag);\n    } else {\n      test(js, js, null, diag);\n    }\n  }\n",
        "begin_line": 513,
        "end_line": 519,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as its input\n   * and (optionally) that an expected warning is issued.\n   *\n   * @param js Input and output\n   * @param diag Expected error or warning, or null if none is expected\n   * @param error true if diag is an error, false if it is a warning\n   ",
        "child_ranges": [
            "(line 514,col 5)-(line 518,col 5)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ProcessDefinesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(java.lang.String, java.lang.String, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void testSame(String externs, String js, DiagnosticType warning) {\n    testSame(externs, js, warning, null);\n  }\n",
        "begin_line": 529,
        "end_line": 531,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as its input\n   * and (optionally) that an expected warning is issued.\n   *\n   * @param externs Externs input\n   * @param js Input and output\n   * @param warning Expected warning, or null if no warning is expected\n   ",
        "child_ranges": [
            "(line 530,col 5)-(line 530,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ProcessDefinesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(java.lang.String, java.lang.String, com.google.javascript.jscomp.DiagnosticType, boolean)",
        "snippet": "  public void testSame(\n      String externs, String js, DiagnosticType diag, boolean error) {\n    if (error) {\n      test(externs, js, js, diag, null);\n    } else {\n      test(externs, js, js, null, diag);\n    }\n  }\n",
        "begin_line": 542,
        "end_line": 549,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as its input\n   * and (optionally) that an expected warning is issued.\n   *\n   * @param externs Externs input\n   * @param js Input and output\n   * @param diag Expected error or warning, or null if none is expected\n   * @param error true if diag is an error, false if it is a warning\n   ",
        "child_ranges": [
            "(line 544,col 5)-(line 548,col 5)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ProcessDefinesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(java.lang.String, java.lang.String, com.google.javascript.jscomp.DiagnosticType, java.lang.String)",
        "snippet": "  public void testSame(String externs, String js, DiagnosticType warning,\n                       String description) {\n    JSSourceFile[] externsInputs = new JSSourceFile[]{\n        JSSourceFile.fromCode(\"externs\", externs)\n    };\n    test(externsInputs, js, js, null, warning, description);\n  }\n",
        "begin_line": 562,
        "end_line": 568,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as its input\n   * and (optionally) that an expected warning and description is issued.\n   *\n   * @param externs Externs input\n   * @param js Input and output\n   * @param warning Expected warning, or null if no warning is expected\n   * @param description The description of the expected warning,\n   *      or null if no warning is expected or if the warning's description\n   *      should not be examined\n   ",
        "child_ranges": [
            "(line 564,col 5)-(line 566,col 6)",
            "(line 567,col 5)-(line 567,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ProcessDefinesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(java.lang.String[])",
        "snippet": "  public void testSame(String[] js) {\n    test(js, js);\n  }\n",
        "begin_line": 575,
        "end_line": 577,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as its input.\n   *\n   * @param js Inputs and outputs\n   ",
        "child_ranges": [
            "(line 576,col 5)-(line 576,col 17)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ProcessDefinesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(java.lang.String[], com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void testSame(String[] js, DiagnosticType error) {\n    test(js, js, error);\n  }\n",
        "begin_line": 586,
        "end_line": 588,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as its input,\n   * and emits the given error.\n   *\n   * @param js Inputs and outputs\n   * @param error Expected error, or null if no error is expected\n   ",
        "child_ranges": [
            "(line 587,col 5)-(line 587,col 24)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ProcessDefinesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(java.lang.String[], com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void testSame(String[] js, DiagnosticType error, DiagnosticType warning) {\n    test(js, js, error, warning);\n  }\n",
        "begin_line": 598,
        "end_line": 600,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as its input,\n   * and emits the given error and warning.\n   *\n   * @param js Inputs and outputs\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   ",
        "child_ranges": [
            "(line 599,col 5)-(line 599,col 33)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ProcessDefinesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(com.google.javascript.jscomp.JSModule[])",
        "snippet": "  public void testSame(JSModule[] modules) {\n    testSame(modules, null);\n  }\n",
        "begin_line": 607,
        "end_line": 609,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as the input.\n   *\n   * @param modules Module inputs\n   ",
        "child_ranges": [
            "(line 608,col 5)-(line 608,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ProcessDefinesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(com.google.javascript.jscomp.JSModule[], com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void testSame(JSModule[] modules, DiagnosticType warning) {\n    try {\n      String[] expected = new String[modules.length];\n      for (int i = 0; i < modules.length; i++) {\n        expected[i] = \"\";\n        for (CompilerInput input : modules[i].getInputs()) {\n          expected[i] += input.getSourceFile().getCode();\n        }\n      }\n      test(modules, expected, null, warning);\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n  }\n",
        "begin_line": 617,
        "end_line": 630,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as the input.\n   *\n   * @param modules Module inputs\n   * @param warning A warning, or null for no expected warning.\n   ",
        "child_ranges": [
            "(line 618,col 5)-(line 629,col 5)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ProcessDefinesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(com.google.javascript.jscomp.Compiler, java.lang.String[], com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  protected void test(Compiler compiler, String[] expected,\n                      DiagnosticType error, DiagnosticType warning) {\n    test(compiler, expected, error, warning, null);\n  }\n",
        "begin_line": 643,
        "end_line": 646,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output\n   * and (optionally) that an expected warning is issued. Or, if an error is\n   * expected, this method just verifies that the error is encountered.\n   *\n   * @param compiler A compiler that has been initialized via\n   *     {@link Compiler#init}\n   * @param expected Expected output, or null if an error is expected\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   ",
        "child_ranges": [
            "(line 645,col 5)-(line 645,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ProcessDefinesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(com.google.javascript.jscomp.Compiler, java.lang.String[], com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType, java.lang.String)",
        "snippet": "  private void test(Compiler compiler, String[] expected,\n                    DiagnosticType error, DiagnosticType warning,\n                    String description) {\n    RecentChange recentChange = new RecentChange();\n    compiler.addChangeHandler(recentChange);\n\n    Node root = compiler.parseInputs();\n    assertTrue(\"Unexpected parse error(s): \" +\n        Joiner.on(\"\\n\").join(compiler.getErrors()), root != null);\n\n    Node externsRoot = root.getFirstChild();\n    Node mainRoot = root.getLastChild();\n\n    // Save the tree for later comparison.\n    Node rootClone = root.cloneTree();\n    Node externsRootClone = rootClone.getFirstChild();\n    Node mainRootClone = rootClone.getLastChild();\n\n    int numRepetitions = getNumRepetitions();\n    ErrorManager[] errorManagers = new ErrorManager[numRepetitions];\n    int aggregateWarningCount = 0;\n    List<JSError> aggregateWarnings = Lists.newArrayList();\n    boolean hasCodeChanged = false;\n\n    assertFalse(\"Code should not change before processing\",\n        recentChange.hasCodeChanged());\n\n    for (int i = 0; i < numRepetitions; ++i) {\n      if (compiler.getErrorCount() == 0) {\n        errorManagers[i] = new BlackHoleErrorManager(compiler);\n\n        // Only run the type checking pass once, if asked.\n        // Running it twice can cause unpredictable behavior because duplicate\n        // objects for the same type are created, and the type system\n        // uses reference equality to compare many types.\n        if (typeCheckEnabled && i == 0) {\n          TypeCheck check = createTypeCheck(compiler, typeCheckLevel);\n          check.processForTesting(externsRoot, mainRoot);\n        }\n\n        // Only run the normalize pass once, if asked.\n        if (normalizeEnabled && i == 0) {\n          normalizeActualCode(compiler, externsRoot, mainRoot);\n        }\n\n        if (markNoSideEffects && i == 0) {\n          MarkNoSideEffectCalls mark = new MarkNoSideEffectCalls(compiler);\n          mark.process(externsRoot, mainRoot);\n        }\n\n        recentChange.reset();\n\n        getProcessor(compiler).process(externsRoot, mainRoot);\n        if (checkLineNumbers) {\n          (new LineNumberCheck(compiler)).process(externsRoot, mainRoot);\n        }\n\n        hasCodeChanged = hasCodeChanged || recentChange.hasCodeChanged();\n        aggregateWarningCount += errorManagers[i].getWarningCount();\n        aggregateWarnings.addAll(Lists.newArrayList(compiler.getWarnings()));\n\n        if (normalizeEnabled) {\n          boolean verifyDeclaredConstants = true;\n          new Normalize.VerifyConstants(compiler, verifyDeclaredConstants)\n              .process(externsRoot, mainRoot);\n        }\n      }\n    }\n\n    if (error == null) {\n      assertEquals(\n          \"Unexpected error(s): \" + Joiner.on(\"\\n\").join(compiler.getErrors()),\n          0, compiler.getErrorCount());\n\n      // Verify the symbol table.\n      ErrorManager symbolTableErrorManager =\n          new BlackHoleErrorManager(compiler);\n      Node expectedRoot = parseExpectedJs(expected);\n      expectedRoot.detachFromParent();\n\n      JSError[] stErrors = symbolTableErrorManager.getErrors();\n      if (expectedSymbolTableError != null) {\n        assertEquals(\"There should be one error.\", 1, stErrors.length);\n        assertEquals(expectedSymbolTableError, stErrors[0].getType());\n      } else {\n        assertEquals(\"Unexpected symbol table error(s): \" +\n            Joiner.on(\"\\n\").join(stErrors),\n            0, stErrors.length);\n      }\n\n      if (warning == null) {\n        assertEquals(\n            \"Unexpected warning(s): \" + Joiner.on(\"\\n\").join(aggregateWarnings),\n            0, aggregateWarningCount);\n      } else {\n        assertEquals(\"There should be one warning, repeated \" + numRepetitions +\n            \" time(s).\", numRepetitions, aggregateWarningCount);\n        for (int i = 0; i < numRepetitions; ++i) {\n          JSError[] warnings = errorManagers[i].getWarnings();\n          JSError actual = warnings[0];\n          assertEquals(warning, actual.getType());\n\n          // Make sure that source information is always provided.\n          if (!allowSourcelessWarnings) {\n            assertTrue(\"Missing source file name in warning\",\n                actual.sourceName != null && !actual.sourceName.isEmpty());\n            assertTrue(\"Missing line number in warning\",\n                -1 != actual.lineNumber);\n            assertTrue(\"Missing char number in warning\",\n                -1 != actual.getCharno());\n          }\n\n          if (description != null) {\n            assertEquals(description, actual.description);\n          }\n        }\n      }\n\n      if (normalizeEnabled) {\n        normalizeActualCode(compiler, externsRootClone, mainRootClone);\n      }\n\n      if (mainRootClone.checkTreeEqualsSilent(mainRoot)) {\n        assertFalse(\n            \"compiler.reportCodeChange() was called \" +\n            \"even though nothing changed\",\n            hasCodeChanged);\n      } else {\n        assertTrue(\"compiler.reportCodeChange() should have been called\",\n            hasCodeChanged);\n      }\n\n      if (compareAsTree) {\n        String explanation = expectedRoot.checkTreeEquals(mainRoot);\n        assertNull(\"\\nExpected: \" + compiler.toSource(expectedRoot) +\n            \"\\nResult: \" + compiler.toSource(mainRoot) +\n            \"\\n\" + explanation, explanation);\n      } else if (expected != null) {\n        assertEquals(\n            Joiner.on(\"\").join(expected), compiler.toSource(mainRoot));\n      }\n\n      // Verify normalization is not invalidated.\n      Node normalizeCheckRootClone = root.cloneTree();\n      Node normalizeCheckExternsRootClone = root.getFirstChild();\n      Node normalizeCheckMainRootClone = root.getLastChild();\n      new PrepareAst(compiler).process(\n          normalizeCheckExternsRootClone, normalizeCheckMainRootClone);\n      String explanation =\n          normalizeCheckMainRootClone.checkTreeEquals(mainRoot);\n      assertNull(\"Node structure normalization invalidated.\\nExpected: \" +\n          compiler.toSource(normalizeCheckMainRootClone) +\n          \"\\nResult: \" + compiler.toSource(mainRoot) +\n          \"\\n\" + explanation, explanation);\n\n      // TODO(johnlenz): enable this for most test cases.\n      // Currently, this invalidates test for while-loops, for-loop\n      // initializers, and other naming.  However, a set of code\n      // (FoldConstants, etc) runs before the Normalize pass, so this can't be\n      // force on everywhere.\n      if (normalizeEnabled) {\n        new Normalize(compiler, true).process(\n            normalizeCheckExternsRootClone, normalizeCheckMainRootClone);\n        explanation =  normalizeCheckMainRootClone.checkTreeEquals(mainRoot);\n        assertNull(\"Normalization invalidated.\\nExpected: \" +\n            compiler.toSource(normalizeCheckMainRootClone) +\n            \"\\nResult: \" + compiler.toSource(mainRoot) +\n            \"\\n\" + explanation, explanation);\n      }\n    } else {\n      String errors = \"\";\n      for (JSError actualError : compiler.getErrors()) {\n        errors += actualError.description + \"\\n\";\n      }\n      assertEquals(\"There should be one error. \" + errors,\n          1, compiler.getErrorCount());\n      assertEquals(errors, error, compiler.getErrors()[0].getType());\n\n      if (warning != null) {\n        String warnings = \"\";\n        for (JSError actualError : compiler.getWarnings()) {\n          warnings += actualError.description + \"\\n\";\n        }\n        assertEquals(\"There should be one warning. \" + warnings,\n            1, compiler.getWarningCount());\n        assertEquals(warnings, warning, compiler.getWarnings()[0].getType());\n      }\n    }\n  }\n",
        "begin_line": 663,
        "end_line": 851,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output\n   * and (optionally) that an expected warning is issued. Or, if an error is\n   * expected, this method just verifies that the error is encountered.\n   *\n   * @param compiler A compiler that has been initialized via\n   *     {@link Compiler#init}\n   * @param expected Expected output, or null if an error is expected\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   * @param description The description of the expected warning,\n   *      or null if no warning is expected or if the warning's description\n   *      should not be examined\n   ",
        "child_ranges": [
            "(line 666,col 5)-(line 666,col 51)",
            "(line 667,col 5)-(line 667,col 44)",
            "(line 669,col 5)-(line 669,col 39)",
            "(line 670,col 5)-(line 671,col 66)",
            "(line 673,col 5)-(line 673,col 44)",
            "(line 674,col 5)-(line 674,col 40)",
            "(line 677,col 5)-(line 677,col 38)",
            "(line 678,col 5)-(line 678,col 54)",
            "(line 679,col 5)-(line 679,col 50)",
            "(line 681,col 5)-(line 681,col 45)",
            "(line 682,col 5)-(line 682,col 68)",
            "(line 683,col 5)-(line 683,col 34)",
            "(line 684,col 5)-(line 684,col 59)",
            "(line 685,col 5)-(line 685,col 35)",
            "(line 687,col 5)-(line 688,col 39)",
            "(line 690,col 5)-(line 730,col 5)",
            "(line 732,col 5)-(line 850,col 5)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ProcessDefinesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.normalizeActualCode(com.google.javascript.jscomp.Compiler, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  private void normalizeActualCode(\n      Compiler compiler, Node externsRoot, Node mainRoot) {\n    Normalize normalize = new Normalize(compiler, false);\n    normalize.process(externsRoot, mainRoot);\n  }\n",
        "begin_line": 853,
        "end_line": 857,
        "comment": "",
        "child_ranges": [
            "(line 855,col 5)-(line 855,col 57)",
            "(line 856,col 5)-(line 856,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ProcessDefinesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.parseExpectedJs(java.lang.String[])",
        "snippet": "  protected Node parseExpectedJs(String[] expected) {\n    Compiler compiler = createCompiler();\n    JSSourceFile[] inputs = new JSSourceFile[expected.length];\n    for (int i = 0; i < expected.length; i++) {\n      inputs[i] = JSSourceFile.fromCode(\"expected\" + i, expected[i]);\n    }\n    compiler.init(externsInputs, inputs, getOptions());\n    Node root = compiler.parseInputs();\n    assertTrue(\"Unexpected parse error(s): \" +\n        Joiner.on(\"\\n\").join(compiler.getErrors()), root != null);\n    Node externsRoot = root.getFirstChild();\n    Node mainRoot = externsRoot.getNext();\n    // Only run the normalize pass, if asked.\n    if (normalizeEnabled && normalizeExpected && !compiler.hasErrors()) {\n      Normalize normalize = new Normalize(compiler, false);\n      normalize.process(externsRoot, mainRoot);\n    }\n    return mainRoot;\n  }\n",
        "begin_line": 862,
        "end_line": 880,
        "comment": "\n   * Parses expected js inputs and returns the root of the parse tree.\n   ",
        "child_ranges": [
            "(line 863,col 5)-(line 863,col 41)",
            "(line 864,col 5)-(line 864,col 62)",
            "(line 865,col 5)-(line 867,col 5)",
            "(line 868,col 5)-(line 868,col 55)",
            "(line 869,col 5)-(line 869,col 39)",
            "(line 870,col 5)-(line 871,col 66)",
            "(line 872,col 5)-(line 872,col 44)",
            "(line 873,col 5)-(line 873,col 42)",
            "(line 875,col 5)-(line 878,col 5)",
            "(line 879,col 5)-(line 879,col 20)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ProcessDefinesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.parseExpectedJs(java.lang.String)",
        "snippet": "  protected Node parseExpectedJs(String expected) {\n    return parseExpectedJs(new String[] {expected});\n  }\n",
        "begin_line": 882,
        "end_line": 884,
        "comment": "",
        "child_ranges": [
            "(line 883,col 5)-(line 883,col 52)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ProcessDefinesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.createModuleChain(java.lang.String...)",
        "snippet": "  static JSModule[] createModuleChain(String... inputs) {\n    JSModule[] modules = createModules(inputs);\n    for (int i = 1; i < modules.length; i++) {\n      modules[i].addDependency(modules[i - 1]);\n    }\n    return modules;\n  }\n",
        "begin_line": 890,
        "end_line": 896,
        "comment": "\n   * Generates a list of modules from a list of inputs, such that each module\n   * depends on the module before it.\n   ",
        "child_ranges": [
            "(line 891,col 5)-(line 891,col 47)",
            "(line 892,col 5)-(line 894,col 5)",
            "(line 895,col 5)-(line 895,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ProcessDefinesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.createModuleStar(java.lang.String...)",
        "snippet": "  static JSModule[] createModuleStar(String... inputs) {\n    JSModule[] modules = createModules(inputs);\n    for (int i = 1; i < modules.length; i++) {\n      modules[i].addDependency(modules[0]);\n    }\n    return modules;\n  }\n",
        "begin_line": 902,
        "end_line": 908,
        "comment": "\n   * Generates a list of modules from a list of inputs, such that each module\n   * depends on the first module.\n   ",
        "child_ranges": [
            "(line 903,col 5)-(line 903,col 47)",
            "(line 904,col 5)-(line 906,col 5)",
            "(line 907,col 5)-(line 907,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ProcessDefinesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.createModuleBush(java.lang.String...)",
        "snippet": "  static JSModule[] createModuleBush(String ... inputs) {\n    Preconditions.checkState(inputs.length > 2);\n    JSModule[] modules = createModules(inputs);\n    for (int i = 1; i < modules.length; i++) {\n      modules[i].addDependency(modules[i == 1 ? 0 : 1]);\n    }\n    return modules;\n  }\n",
        "begin_line": 915,
        "end_line": 922,
        "comment": "\n   * Generates a list of modules from a list of inputs, such that modules\n   * form a bush formation. In a bush formation, module 2 depends\n   * on module 1, and all other modules depend on module 2.\n   ",
        "child_ranges": [
            "(line 916,col 5)-(line 916,col 48)",
            "(line 917,col 5)-(line 917,col 47)",
            "(line 918,col 5)-(line 920,col 5)",
            "(line 921,col 5)-(line 921,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ProcessDefinesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.createModuleTree(java.lang.String...)",
        "snippet": "  static JSModule[] createModuleTree(String ... inputs) {\n    JSModule[] modules = createModules(inputs);\n    for (int i = 1; i < modules.length; i++) {\n      modules[i].addDependency(modules[(i - 1) / 2]);\n    }\n    return modules;\n  }\n",
        "begin_line": 929,
        "end_line": 935,
        "comment": "\n   * Generates a list of modules from a list of inputs, such that modules\n   * form a tree formation. In a tree formation, module N depends on\n   * module `floor(N/2)`, So the modules form a balanced binary tree.\n   ",
        "child_ranges": [
            "(line 930,col 5)-(line 930,col 47)",
            "(line 931,col 5)-(line 933,col 5)",
            "(line 934,col 5)-(line 934,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ProcessDefinesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.createModules(java.lang.String...)",
        "snippet": "  static JSModule[] createModules(String... inputs) {\n    JSModule[] modules = new JSModule[inputs.length];\n    for (int i = 0; i < inputs.length; i++) {\n      JSModule module = modules[i] = new JSModule(\"m\" + i);\n      module.add(JSSourceFile.fromCode(\"i\" + i, inputs[i]));\n    }\n    return modules;\n  }\n",
        "begin_line": 941,
        "end_line": 948,
        "comment": "\n   * Generates a list of modules from a list of inputs. Does not generate any\n   * dependencies between the modules.\n   ",
        "child_ranges": [
            "(line 942,col 5)-(line 942,col 53)",
            "(line 943,col 5)-(line 946,col 5)",
            "(line 947,col 5)-(line 947,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ProcessDefinesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.BlackHoleErrorManager.BlackHoleErrorManager(com.google.javascript.jscomp.Compiler)",
        "snippet": "    private BlackHoleErrorManager(Compiler compiler) {\n      compiler.setErrorManager(this);\n    }\n",
        "begin_line": 951,
        "end_line": 953,
        "comment": "",
        "child_ranges": [
            "(line 952,col 7)-(line 952,col 37)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ProcessDefinesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.BlackHoleErrorManager.println(com.google.javascript.jscomp.CheckLevel, com.google.javascript.jscomp.JSError)",
        "snippet": "    @Override\n    public void println(CheckLevel level, JSError error) {}\n",
        "begin_line": 955,
        "end_line": 956,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ProcessDefinesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.BlackHoleErrorManager.printSummary()",
        "snippet": "    @Override\n    public void printSummary() {}\n",
        "begin_line": 958,
        "end_line": 959,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ProcessDefinesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.createCompiler()",
        "snippet": "  private Compiler createCompiler() {\n    Compiler compiler = new Compiler();\n    return compiler;\n  }\n",
        "begin_line": 962,
        "end_line": 965,
        "comment": "",
        "child_ranges": [
            "(line 963,col 5)-(line 963,col 39)",
            "(line 964,col 5)-(line 964,col 20)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ProcessDefinesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.setExpectedSymbolTableError(com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  protected void setExpectedSymbolTableError(DiagnosticType type) {\n    this.expectedSymbolTableError = type;\n  }\n",
        "begin_line": 967,
        "end_line": 969,
        "comment": "",
        "child_ranges": [
            "(line 968,col 5)-(line 968,col 41)"
        ]
    }
]