[
    {
        "class_name": "com.google.javascript.jscomp.VarCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/VarCheckTest.java",
        "signature": "com.google.javascript.jscomp.VarCheckTest.VarCheckTest()",
        "snippet": "  public VarCheckTest() {\n    super(EXTERNS);\n  }\n",
        "begin_line": 35,
        "end_line": 37,
        "comment": "",
        "child_ranges": [
            "(line 36,col 5)-(line 36,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.VarCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/VarCheckTest.java",
        "signature": "com.google.javascript.jscomp.VarCheckTest.setUp()",
        "snippet": "  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n    // Setup value set by individual tests to the appropriate defaults.\n    super.allowExternsChanges(true);\n    super.enableAstValidation(true);\n    strictModuleDepErrorLevel = CheckLevel.OFF;\n    externValidationErrorLevel = null;\n    sanityCheck = false;\n    declarationCheck = false;\n  }\n",
        "begin_line": 39,
        "end_line": 49,
        "comment": "",
        "child_ranges": [
            "(line 41,col 5)-(line 41,col 18)",
            "(line 43,col 5)-(line 43,col 36)",
            "(line 44,col 5)-(line 44,col 36)",
            "(line 45,col 5)-(line 45,col 47)",
            "(line 46,col 5)-(line 46,col 38)",
            "(line 47,col 5)-(line 47,col 24)",
            "(line 48,col 5)-(line 48,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.VarCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/VarCheckTest.java",
        "signature": "com.google.javascript.jscomp.VarCheckTest.getOptions()",
        "snippet": "  @Override\n  protected CompilerOptions getOptions() {\n    CompilerOptions options = super.getOptions();\n    options.setWarningLevel(DiagnosticGroups.STRICT_MODULE_DEP_CHECK,\n        strictModuleDepErrorLevel);\n    if (externValidationErrorLevel != null) {\n     options.setWarningLevel(DiagnosticGroups.EXTERNS_VALIDATION,\n         externValidationErrorLevel);\n    }\n    return options;\n  }\n",
        "begin_line": 51,
        "end_line": 61,
        "comment": "",
        "child_ranges": [
            "(line 53,col 5)-(line 53,col 49)",
            "(line 54,col 5)-(line 55,col 35)",
            "(line 56,col 5)-(line 59,col 5)",
            "(line 60,col 5)-(line 60,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.VarCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/VarCheckTest.java",
        "signature": "com.google.javascript.jscomp.VarCheckTest.getProcessor(com.google.javascript.jscomp.Compiler)",
        "snippet": "  @Override\n  protected CompilerPass getProcessor(final Compiler compiler) {\n    return new CompilerPass() {\n      @Override public void process(Node externs, Node root) {\n        new VarCheck(compiler, sanityCheck).process(externs, root);\n        if (sanityCheck == false && !compiler.hasErrors()) {\n          new VarCheck(compiler, true).process(externs, root);\n        }\n        if (declarationCheck) {\n          new VariableTestCheck(compiler).process(externs, root);\n        }\n      }\n    };\n  }\n",
        "begin_line": 63,
        "end_line": 76,
        "comment": "",
        "child_ranges": [
            "(line 65,col 5)-(line 75,col 6)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.VarCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/VarCheckTest.java",
        "signature": "com.google.javascript.jscomp.VarCheckTest.Anonymous-23d5832e-f62d-480f-b728-3cafa7f9b00c.process(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "      @Override public void process(Node externs, Node root) {\n        new VarCheck(compiler, sanityCheck).process(externs, root);\n        if (sanityCheck == false && !compiler.hasErrors()) {\n          new VarCheck(compiler, true).process(externs, root);\n        }\n        if (declarationCheck) {\n          new VariableTestCheck(compiler).process(externs, root);\n        }\n      }\n",
        "begin_line": 66,
        "end_line": 74,
        "comment": "",
        "child_ranges": [
            "(line 67,col 9)-(line 67,col 67)",
            "(line 68,col 9)-(line 70,col 9)",
            "(line 71,col 9)-(line 73,col 9)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.VarCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/VarCheckTest.java",
        "signature": "com.google.javascript.jscomp.VarCheckTest.getNumRepetitions()",
        "snippet": "  @Override\n  protected int getNumRepetitions() {\n    // Because we synthesize externs, the second pass won't emit a warning.\n    return 1;\n  }\n",
        "begin_line": 78,
        "end_line": 82,
        "comment": "",
        "child_ranges": [
            "(line 81,col 5)-(line 81,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.VarCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/VarCheckTest.java",
        "signature": "com.google.javascript.jscomp.VarCheckTest.testBreak()",
        "snippet": "  public void testBreak() {\n    testSame(\"a: while(1) break a;\");\n  }\n",
        "begin_line": 84,
        "end_line": 86,
        "comment": "",
        "child_ranges": [
            "(line 85,col 5)-(line 85,col 37)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.VarCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/VarCheckTest.java",
        "signature": "com.google.javascript.jscomp.VarCheckTest.testContinue()",
        "snippet": "  public void testContinue() {\n    testSame(\"a: while(1) continue a;\");\n  }\n",
        "begin_line": 88,
        "end_line": 90,
        "comment": "",
        "child_ranges": [
            "(line 89,col 5)-(line 89,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.VarCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/VarCheckTest.java",
        "signature": "com.google.javascript.jscomp.VarCheckTest.testReferencedVarNotDefined()",
        "snippet": "  public void testReferencedVarNotDefined() {\n    test(\"x = 0;\", null, VarCheck.UNDEFINED_VAR_ERROR);\n  }\n",
        "begin_line": 92,
        "end_line": 94,
        "comment": "",
        "child_ranges": [
            "(line 93,col 5)-(line 93,col 55)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.VarCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/VarCheckTest.java",
        "signature": "com.google.javascript.jscomp.VarCheckTest.testReferencedVarDefined1()",
        "snippet": "  public void testReferencedVarDefined1() {\n    testSame(\"var x, y; x=1;\");\n  }\n",
        "begin_line": 96,
        "end_line": 98,
        "comment": "",
        "child_ranges": [
            "(line 97,col 5)-(line 97,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.VarCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/VarCheckTest.java",
        "signature": "com.google.javascript.jscomp.VarCheckTest.testReferencedVarDefined2()",
        "snippet": "  public void testReferencedVarDefined2() {\n    testSame(\"var x; function y() {x=1;}\");\n  }\n",
        "begin_line": 100,
        "end_line": 102,
        "comment": "",
        "child_ranges": [
            "(line 101,col 5)-(line 101,col 43)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.VarCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/VarCheckTest.java",
        "signature": "com.google.javascript.jscomp.VarCheckTest.testReferencedVarsExternallyDefined()",
        "snippet": "  public void testReferencedVarsExternallyDefined() {\n    testSame(\"var x = window; alert(x);\");\n  }\n",
        "begin_line": 104,
        "end_line": 106,
        "comment": "",
        "child_ranges": [
            "(line 105,col 5)-(line 105,col 42)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.VarCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/VarCheckTest.java",
        "signature": "com.google.javascript.jscomp.VarCheckTest.testMultiplyDeclaredVars1()",
        "snippet": "  public void testMultiplyDeclaredVars1() {\n    test(\"var x = 1; var x = 2;\", null,\n        VarCheck.VAR_MULTIPLY_DECLARED_ERROR);\n  }\n",
        "begin_line": 108,
        "end_line": 111,
        "comment": "",
        "child_ranges": [
            "(line 109,col 5)-(line 110,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.VarCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/VarCheckTest.java",
        "signature": "com.google.javascript.jscomp.VarCheckTest.testMultiplyDeclaredVars2()",
        "snippet": "  public void testMultiplyDeclaredVars2() {\n    test(\"var y; try { y=1 } catch (x) {}\" +\n         \"try { y=1 } catch (x) {}\",\n         \"var y;try{y=1}catch(x){}try{y=1}catch(x){}\");\n  }\n",
        "begin_line": 113,
        "end_line": 117,
        "comment": "",
        "child_ranges": [
            "(line 114,col 5)-(line 116,col 55)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.VarCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/VarCheckTest.java",
        "signature": "com.google.javascript.jscomp.VarCheckTest.testMultiplyDeclaredVars3()",
        "snippet": "  public void testMultiplyDeclaredVars3() {\n    test(\"try { var x = 1; x *=2; } catch (x) {}\", null,\n         VarCheck.VAR_MULTIPLY_DECLARED_ERROR);\n  }\n",
        "begin_line": 119,
        "end_line": 122,
        "comment": "",
        "child_ranges": [
            "(line 120,col 5)-(line 121,col 47)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.VarCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/VarCheckTest.java",
        "signature": "com.google.javascript.jscomp.VarCheckTest.testMultiplyDeclaredVars4()",
        "snippet": "  public void testMultiplyDeclaredVars4() {\n    testSame(\"x;\", \"var x = 1; var x = 2;\",\n        VarCheck.VAR_MULTIPLY_DECLARED_ERROR, true);\n  }\n",
        "begin_line": 124,
        "end_line": 127,
        "comment": "",
        "child_ranges": [
            "(line 125,col 5)-(line 126,col 52)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.VarCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/VarCheckTest.java",
        "signature": "com.google.javascript.jscomp.VarCheckTest.testVarReferenceInExterns()",
        "snippet": "  public void testVarReferenceInExterns() {\n    testSame(\"asdf;\", \"var asdf;\",\n        VarCheck.NAME_REFERENCE_IN_EXTERNS_ERROR);\n  }\n",
        "begin_line": 129,
        "end_line": 132,
        "comment": "",
        "child_ranges": [
            "(line 130,col 5)-(line 131,col 50)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.VarCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/VarCheckTest.java",
        "signature": "com.google.javascript.jscomp.VarCheckTest.testCallInExterns()",
        "snippet": "  public void testCallInExterns() {\n    testSame(\"yz();\", \"function yz() {}\",\n        VarCheck.NAME_REFERENCE_IN_EXTERNS_ERROR);\n  }\n",
        "begin_line": 134,
        "end_line": 137,
        "comment": "",
        "child_ranges": [
            "(line 135,col 5)-(line 136,col 50)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.VarCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/VarCheckTest.java",
        "signature": "com.google.javascript.jscomp.VarCheckTest.testPropReferenceInExterns1()",
        "snippet": "  public void testPropReferenceInExterns1() {\n    testSame(\"asdf.foo;\", \"var asdf;\",\n        VarCheck.UNDEFINED_EXTERN_VAR_ERROR);\n  }\n",
        "begin_line": 139,
        "end_line": 142,
        "comment": "",
        "child_ranges": [
            "(line 140,col 5)-(line 141,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.VarCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/VarCheckTest.java",
        "signature": "com.google.javascript.jscomp.VarCheckTest.testPropReferenceInExterns2()",
        "snippet": "  public void testPropReferenceInExterns2() {\n    testSame(\"asdf.foo;\", \"\",\n        VarCheck.UNDEFINED_VAR_ERROR, true);\n  }\n",
        "begin_line": 144,
        "end_line": 147,
        "comment": "",
        "child_ranges": [
            "(line 145,col 5)-(line 146,col 44)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.VarCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/VarCheckTest.java",
        "signature": "com.google.javascript.jscomp.VarCheckTest.testPropReferenceInExterns3()",
        "snippet": "  public void testPropReferenceInExterns3() {\n    testSame(\"asdf.foo;\", \"var asdf;\",\n        VarCheck.UNDEFINED_EXTERN_VAR_ERROR);\n\n    externValidationErrorLevel = CheckLevel.ERROR;\n    test(\n        \"asdf.foo;\", \"var asdf;\", \"\",\n         VarCheck.UNDEFINED_EXTERN_VAR_ERROR, null);\n\n    externValidationErrorLevel = CheckLevel.OFF;\n    test(\"asdf.foo;\", \"var asdf;\", \"var asdf;\", null, null);\n  }\n",
        "begin_line": 149,
        "end_line": 160,
        "comment": "",
        "child_ranges": [
            "(line 150,col 5)-(line 151,col 45)",
            "(line 153,col 5)-(line 153,col 50)",
            "(line 154,col 5)-(line 156,col 52)",
            "(line 158,col 5)-(line 158,col 48)",
            "(line 159,col 5)-(line 159,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.VarCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/VarCheckTest.java",
        "signature": "com.google.javascript.jscomp.VarCheckTest.testVarInWithBlock()",
        "snippet": "  public void testVarInWithBlock() {\n    test(\"var a = {b:5}; with (a){b;}\", null, VarCheck.UNDEFINED_VAR_ERROR);\n  }\n",
        "begin_line": 162,
        "end_line": 164,
        "comment": "",
        "child_ranges": [
            "(line 163,col 5)-(line 163,col 76)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.VarCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/VarCheckTest.java",
        "signature": "com.google.javascript.jscomp.VarCheckTest.testValidFunctionExpr()",
        "snippet": "  public void testValidFunctionExpr() {\n    testSame(\"(function() {});\");\n  }\n",
        "begin_line": 166,
        "end_line": 168,
        "comment": "",
        "child_ranges": [
            "(line 167,col 5)-(line 167,col 33)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.VarCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/VarCheckTest.java",
        "signature": "com.google.javascript.jscomp.VarCheckTest.testRecursiveFunction()",
        "snippet": "  public void testRecursiveFunction() {\n    testSame(\"(function a() { return a(); })();\");\n  }\n",
        "begin_line": 170,
        "end_line": 172,
        "comment": "",
        "child_ranges": [
            "(line 171,col 5)-(line 171,col 50)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.VarCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/VarCheckTest.java",
        "signature": "com.google.javascript.jscomp.VarCheckTest.testRecursiveFunction2()",
        "snippet": "  public void testRecursiveFunction2() {\n    testSame(\"var a = 3; (function a() { return a(); })();\");\n  }\n",
        "begin_line": 174,
        "end_line": 176,
        "comment": "",
        "child_ranges": [
            "(line 175,col 5)-(line 175,col 61)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.VarCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/VarCheckTest.java",
        "signature": "com.google.javascript.jscomp.VarCheckTest.testLegalVarReferenceBetweenModules()",
        "snippet": "  public void testLegalVarReferenceBetweenModules() {\n    testDependentModules(\"var x = 10;\", \"var y = x++;\", null);\n  }\n",
        "begin_line": 178,
        "end_line": 180,
        "comment": "",
        "child_ranges": [
            "(line 179,col 5)-(line 179,col 62)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.VarCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/VarCheckTest.java",
        "signature": "com.google.javascript.jscomp.VarCheckTest.testMissingModuleDependencyDefault()",
        "snippet": "  public void testMissingModuleDependencyDefault() {\n    testIndependentModules(\"var x = 10;\", \"var y = x++;\",\n                           null, VarCheck.MISSING_MODULE_DEP_ERROR);\n  }\n",
        "begin_line": 182,
        "end_line": 185,
        "comment": "",
        "child_ranges": [
            "(line 183,col 5)-(line 184,col 68)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.VarCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/VarCheckTest.java",
        "signature": "com.google.javascript.jscomp.VarCheckTest.testViolatedModuleDependencyDefault()",
        "snippet": "  public void testViolatedModuleDependencyDefault() {\n    testDependentModules(\"var y = x++;\", \"var x = 10;\",\n                         VarCheck.VIOLATED_MODULE_DEP_ERROR);\n  }\n",
        "begin_line": 187,
        "end_line": 190,
        "comment": "",
        "child_ranges": [
            "(line 188,col 5)-(line 189,col 61)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.VarCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/VarCheckTest.java",
        "signature": "com.google.javascript.jscomp.VarCheckTest.testMissingModuleDependencySkipNonStrict()",
        "snippet": "  public void testMissingModuleDependencySkipNonStrict() {\n    sanityCheck = true;\n    testIndependentModules(\"var x = 10;\", \"var y = x++;\",\n                           null, null);\n  }\n",
        "begin_line": 192,
        "end_line": 196,
        "comment": "",
        "child_ranges": [
            "(line 193,col 5)-(line 193,col 23)",
            "(line 194,col 5)-(line 195,col 39)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.VarCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/VarCheckTest.java",
        "signature": "com.google.javascript.jscomp.VarCheckTest.testViolatedModuleDependencySkipNonStrict()",
        "snippet": "  public void testViolatedModuleDependencySkipNonStrict() {\n    sanityCheck = true;\n    testDependentModules(\"var y = x++;\", \"var x = 10;\",\n                         null);\n  }\n",
        "begin_line": 198,
        "end_line": 202,
        "comment": "",
        "child_ranges": [
            "(line 199,col 5)-(line 199,col 23)",
            "(line 200,col 5)-(line 201,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.VarCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/VarCheckTest.java",
        "signature": "com.google.javascript.jscomp.VarCheckTest.testMissingModuleDependencySkipNonStrictNotPromoted()",
        "snippet": "  public void testMissingModuleDependencySkipNonStrictNotPromoted() {\n    sanityCheck = true;\n    strictModuleDepErrorLevel = CheckLevel.ERROR;\n    testIndependentModules(\"var x = 10;\", \"var y = x++;\", null, null);\n  }\n",
        "begin_line": 204,
        "end_line": 208,
        "comment": "",
        "child_ranges": [
            "(line 205,col 5)-(line 205,col 23)",
            "(line 206,col 5)-(line 206,col 49)",
            "(line 207,col 5)-(line 207,col 70)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.VarCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/VarCheckTest.java",
        "signature": "com.google.javascript.jscomp.VarCheckTest.testViolatedModuleDependencyNonStrictNotPromoted()",
        "snippet": "  public void testViolatedModuleDependencyNonStrictNotPromoted() {\n    sanityCheck = true;\n    strictModuleDepErrorLevel = CheckLevel.ERROR;\n    testDependentModules(\"var y = x++;\", \"var x = 10;\", null);\n  }\n",
        "begin_line": 210,
        "end_line": 214,
        "comment": "",
        "child_ranges": [
            "(line 211,col 5)-(line 211,col 23)",
            "(line 212,col 5)-(line 212,col 49)",
            "(line 213,col 5)-(line 213,col 62)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.VarCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/VarCheckTest.java",
        "signature": "com.google.javascript.jscomp.VarCheckTest.testDependentStrictModuleDependencyCheck()",
        "snippet": "  public void testDependentStrictModuleDependencyCheck() {\n    strictModuleDepErrorLevel = CheckLevel.ERROR;\n    testDependentModules(\"var f = function() {return new B();};\",\n        \"var B = function() {}\",\n        VarCheck.STRICT_MODULE_DEP_ERROR);\n  }\n",
        "begin_line": 216,
        "end_line": 221,
        "comment": "",
        "child_ranges": [
            "(line 217,col 5)-(line 217,col 49)",
            "(line 218,col 5)-(line 220,col 42)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.VarCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/VarCheckTest.java",
        "signature": "com.google.javascript.jscomp.VarCheckTest.testIndependentStrictModuleDependencyCheck()",
        "snippet": "  public void testIndependentStrictModuleDependencyCheck() {\n    strictModuleDepErrorLevel = CheckLevel.ERROR;\n    testIndependentModules(\"var f = function() {return new B();};\",\n        \"var B = function() {}\",\n        VarCheck.STRICT_MODULE_DEP_ERROR, null);\n  }\n",
        "begin_line": 223,
        "end_line": 228,
        "comment": "",
        "child_ranges": [
            "(line 224,col 5)-(line 224,col 49)",
            "(line 225,col 5)-(line 227,col 48)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.VarCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/VarCheckTest.java",
        "signature": "com.google.javascript.jscomp.VarCheckTest.testStarStrictModuleDependencyCheck()",
        "snippet": "  public void testStarStrictModuleDependencyCheck() {\n    strictModuleDepErrorLevel = CheckLevel.WARNING;\n    testSame(createModuleStar(\"function a() {}\", \"function b() { a(); c(); }\",\n        \"function c() { a(); }\"),\n        VarCheck.STRICT_MODULE_DEP_ERROR);\n  }\n",
        "begin_line": 230,
        "end_line": 235,
        "comment": "",
        "child_ranges": [
            "(line 231,col 5)-(line 231,col 51)",
            "(line 232,col 5)-(line 234,col 42)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.VarCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/VarCheckTest.java",
        "signature": "com.google.javascript.jscomp.VarCheckTest.testForwardVarReferenceInLocalScope1()",
        "snippet": "  public void testForwardVarReferenceInLocalScope1() {\n    testDependentModules(\"var x = 10; function a() {y++;}\",\n                         \"var y = 11; a();\", null);\n  }\n",
        "begin_line": 237,
        "end_line": 240,
        "comment": "",
        "child_ranges": [
            "(line 238,col 5)-(line 239,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.VarCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/VarCheckTest.java",
        "signature": "com.google.javascript.jscomp.VarCheckTest.testForwardVarReferenceInLocalScope2()",
        "snippet": "  public void testForwardVarReferenceInLocalScope2() {\n    // It would be nice if this pass could use a call graph to flag this case\n    // as an error, but it currently doesn't.\n    testDependentModules(\"var x = 10; function a() {y++;} a();\",\n                         \"var y = 11;\", null);\n  }\n",
        "begin_line": 242,
        "end_line": 247,
        "comment": "",
        "child_ranges": [
            "(line 245,col 5)-(line 246,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.VarCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/VarCheckTest.java",
        "signature": "com.google.javascript.jscomp.VarCheckTest.testDependentModules(java.lang.String, java.lang.String, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  private void testDependentModules(String code1, String code2,\n                                    DiagnosticType error) {\n    testDependentModules(code1, code2, error, null);\n  }\n",
        "begin_line": 249,
        "end_line": 252,
        "comment": "",
        "child_ranges": [
            "(line 251,col 5)-(line 251,col 52)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.VarCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/VarCheckTest.java",
        "signature": "com.google.javascript.jscomp.VarCheckTest.testDependentModules(java.lang.String, java.lang.String, com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  private void testDependentModules(String code1, String code2,\n                                    DiagnosticType error,\n                                    DiagnosticType warning) {\n    testTwoModules(code1, code2, true, error, warning);\n  }\n",
        "begin_line": 254,
        "end_line": 258,
        "comment": "",
        "child_ranges": [
            "(line 257,col 5)-(line 257,col 55)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.VarCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/VarCheckTest.java",
        "signature": "com.google.javascript.jscomp.VarCheckTest.testIndependentModules(java.lang.String, java.lang.String, com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  private void testIndependentModules(String code1, String code2,\n                                      DiagnosticType error,\n                                      DiagnosticType warning) {\n    testTwoModules(code1, code2, false, error, warning);\n  }\n",
        "begin_line": 260,
        "end_line": 264,
        "comment": "",
        "child_ranges": [
            "(line 263,col 5)-(line 263,col 56)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.VarCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/VarCheckTest.java",
        "signature": "com.google.javascript.jscomp.VarCheckTest.testTwoModules(java.lang.String, java.lang.String, boolean, com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  private void testTwoModules(String code1, String code2, boolean m2DependsOnm1,\n                              DiagnosticType error, DiagnosticType warning) {\n    JSModule m1 = new JSModule(\"m1\");\n    m1.add(SourceFile.fromCode(\"input1\", code1));\n    JSModule m2 = new JSModule(\"m2\");\n    m2.add(SourceFile.fromCode(\"input2\", code2));\n    if (m2DependsOnm1) {\n      m2.addDependency(m1);\n    }\n    test(new JSModule[] { m1, m2 },\n         new String[] { code1, code2 }, error, warning);\n  }\n",
        "begin_line": 266,
        "end_line": 277,
        "comment": "",
        "child_ranges": [
            "(line 268,col 5)-(line 268,col 37)",
            "(line 269,col 5)-(line 269,col 49)",
            "(line 270,col 5)-(line 270,col 37)",
            "(line 271,col 5)-(line 271,col 49)",
            "(line 272,col 5)-(line 274,col 5)",
            "(line 275,col 5)-(line 276,col 56)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.VarCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/VarCheckTest.java",
        "signature": "com.google.javascript.jscomp.VarCheckTest.testSimple()",
        "snippet": "  public void testSimple() {\n    checkSynthesizedExtern(\"x\", \"var x;\");\n    checkSynthesizedExtern(\"var x\", \"\");\n  }\n",
        "begin_line": 282,
        "end_line": 285,
        "comment": "",
        "child_ranges": [
            "(line 283,col 5)-(line 283,col 42)",
            "(line 284,col 5)-(line 284,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.VarCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/VarCheckTest.java",
        "signature": "com.google.javascript.jscomp.VarCheckTest.testSimpleSanityCheck()",
        "snippet": "  public void testSimpleSanityCheck() {\n    sanityCheck = true;\n    try {\n      checkSynthesizedExtern(\"x\", \"\");\n    } catch (RuntimeException e) {\n      assertTrue(e.getMessage().indexOf(\"Unexpected variable x\") != -1);\n    }\n  }\n",
        "begin_line": 287,
        "end_line": 294,
        "comment": "",
        "child_ranges": [
            "(line 288,col 5)-(line 288,col 23)",
            "(line 289,col 5)-(line 293,col 5)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.VarCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/VarCheckTest.java",
        "signature": "com.google.javascript.jscomp.VarCheckTest.testParameter()",
        "snippet": "  public void testParameter() {\n    checkSynthesizedExtern(\"function f(x){}\", \"\");\n  }\n",
        "begin_line": 296,
        "end_line": 298,
        "comment": "",
        "child_ranges": [
            "(line 297,col 5)-(line 297,col 50)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.VarCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/VarCheckTest.java",
        "signature": "com.google.javascript.jscomp.VarCheckTest.testLocalVar()",
        "snippet": "  public void testLocalVar() {\n    checkSynthesizedExtern(\"function f(){x}\", \"var x\");\n  }\n",
        "begin_line": 300,
        "end_line": 302,
        "comment": "",
        "child_ranges": [
            "(line 301,col 5)-(line 301,col 55)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.VarCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/VarCheckTest.java",
        "signature": "com.google.javascript.jscomp.VarCheckTest.testTwoLocalVars()",
        "snippet": "  public void testTwoLocalVars() {\n    checkSynthesizedExtern(\"function f(){x}function g() {x}\", \"var x\");\n  }\n",
        "begin_line": 304,
        "end_line": 306,
        "comment": "",
        "child_ranges": [
            "(line 305,col 5)-(line 305,col 71)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.VarCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/VarCheckTest.java",
        "signature": "com.google.javascript.jscomp.VarCheckTest.testInnerFunctionLocalVar()",
        "snippet": "  public void testInnerFunctionLocalVar() {\n    checkSynthesizedExtern(\"function f(){function g() {x}}\", \"var x\");\n  }\n",
        "begin_line": 308,
        "end_line": 310,
        "comment": "",
        "child_ranges": [
            "(line 309,col 5)-(line 309,col 70)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.VarCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/VarCheckTest.java",
        "signature": "com.google.javascript.jscomp.VarCheckTest.testNoCreateVarsForLabels()",
        "snippet": "  public void testNoCreateVarsForLabels() {\n    checkSynthesizedExtern(\"x:var y\", \"\");\n  }\n",
        "begin_line": 312,
        "end_line": 314,
        "comment": "",
        "child_ranges": [
            "(line 313,col 5)-(line 313,col 42)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.VarCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/VarCheckTest.java",
        "signature": "com.google.javascript.jscomp.VarCheckTest.testVariableInNormalCodeUsedInExterns1()",
        "snippet": "  public void testVariableInNormalCodeUsedInExterns1() {\n    checkSynthesizedExtern(\n        \"x.foo;\", \"var x;\", \"var x; x.foo;\");\n  }\n",
        "begin_line": 316,
        "end_line": 319,
        "comment": "",
        "child_ranges": [
            "(line 317,col 5)-(line 318,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.VarCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/VarCheckTest.java",
        "signature": "com.google.javascript.jscomp.VarCheckTest.testVariableInNormalCodeUsedInExterns2()",
        "snippet": "  public void testVariableInNormalCodeUsedInExterns2() {\n    checkSynthesizedExtern(\n        \"x;\", \"var x;\", \"var x; x;\");\n  }\n",
        "begin_line": 321,
        "end_line": 324,
        "comment": "",
        "child_ranges": [
            "(line 322,col 5)-(line 323,col 37)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.VarCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/VarCheckTest.java",
        "signature": "com.google.javascript.jscomp.VarCheckTest.testVariableInNormalCodeUsedInExterns3()",
        "snippet": "  public void testVariableInNormalCodeUsedInExterns3() {\n    checkSynthesizedExtern(\n        \"x.foo;\", \"function x() {}\", \"var x; x.foo; \");\n  }\n",
        "begin_line": 326,
        "end_line": 329,
        "comment": "",
        "child_ranges": [
            "(line 327,col 5)-(line 328,col 55)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.VarCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/VarCheckTest.java",
        "signature": "com.google.javascript.jscomp.VarCheckTest.testVariableInNormalCodeUsedInExterns4()",
        "snippet": "  public void testVariableInNormalCodeUsedInExterns4() {\n    checkSynthesizedExtern(\n        \"x;\", \"function x() {}\", \"var x; x; \");\n  }\n",
        "begin_line": 331,
        "end_line": 334,
        "comment": "",
        "child_ranges": [
            "(line 332,col 5)-(line 333,col 47)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.VarCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/VarCheckTest.java",
        "signature": "com.google.javascript.jscomp.VarCheckTest.testRedeclaration1()",
        "snippet": "  public void testRedeclaration1() {\n     String js = \"var a; var a;\";\n     test(js, null, VarCheck.VAR_MULTIPLY_DECLARED_ERROR);\n  }\n",
        "begin_line": 336,
        "end_line": 339,
        "comment": "",
        "child_ranges": [
            "(line 337,col 6)-(line 337,col 33)",
            "(line 338,col 6)-(line 338,col 58)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.VarCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/VarCheckTest.java",
        "signature": "com.google.javascript.jscomp.VarCheckTest.testRedeclaration2()",
        "snippet": "  public void testRedeclaration2() {\n    String js = \"var a; /** @suppress {duplicate} */ var a;\";\n    testSame(js);\n  }\n",
        "begin_line": 341,
        "end_line": 344,
        "comment": "",
        "child_ranges": [
            "(line 342,col 5)-(line 342,col 61)",
            "(line 343,col 5)-(line 343,col 17)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.VarCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/VarCheckTest.java",
        "signature": "com.google.javascript.jscomp.VarCheckTest.testRedeclaration3()",
        "snippet": "  public void testRedeclaration3() {\n    String js = \" /** @suppress {duplicate} */ var a; var a; \";\n    testSame(js);\n  }\n",
        "begin_line": 346,
        "end_line": 349,
        "comment": "",
        "child_ranges": [
            "(line 347,col 5)-(line 347,col 63)",
            "(line 348,col 5)-(line 348,col 17)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.VarCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/VarCheckTest.java",
        "signature": "com.google.javascript.jscomp.VarCheckTest.testDuplicateVar()",
        "snippet": "  public void testDuplicateVar() {\n    test(\"/** @define {boolean} */ var DEF = false; var DEF = true;\",\n         null, VAR_MULTIPLY_DECLARED_ERROR);\n  }\n",
        "begin_line": 351,
        "end_line": 354,
        "comment": "",
        "child_ranges": [
            "(line 352,col 5)-(line 353,col 44)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.VarCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/VarCheckTest.java",
        "signature": "com.google.javascript.jscomp.VarCheckTest.testFunctionScopeArguments()",
        "snippet": "  public void testFunctionScopeArguments() {\n    // A var declaration doesn't mask arguments\n    testSame(\"function f() {var arguments}\");\n\n    test(\"var f = function arguments() {}\",\n        null, VarCheck.VAR_ARGUMENTS_SHADOWED_ERROR);\n    test(\"var f = function (arguments) {}\",\n        null, VarCheck.VAR_ARGUMENTS_SHADOWED_ERROR);\n    test(\"function f() {try {} catch(arguments) {}}\",\n        null, VarCheck.VAR_ARGUMENTS_SHADOWED_ERROR);\n  }\n",
        "begin_line": 356,
        "end_line": 366,
        "comment": "",
        "child_ranges": [
            "(line 358,col 5)-(line 358,col 45)",
            "(line 360,col 5)-(line 361,col 53)",
            "(line 362,col 5)-(line 363,col 53)",
            "(line 364,col 5)-(line 365,col 53)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.VarCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/VarCheckTest.java",
        "signature": "com.google.javascript.jscomp.VarCheckTest.testNoUndeclaredVarWhenUsingClosurePass()",
        "snippet": "  public void testNoUndeclaredVarWhenUsingClosurePass() {\n    enableClosurePass();\n    // We don't want to get goog as an undeclared var here.\n    test(\"goog.require('namespace.Class1');\\n\", null,\n        ProcessClosurePrimitives.MISSING_PROVIDE_ERROR);\n  }\n",
        "begin_line": 368,
        "end_line": 373,
        "comment": "",
        "child_ranges": [
            "(line 369,col 5)-(line 369,col 24)",
            "(line 371,col 5)-(line 372,col 56)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.VarCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/VarCheckTest.java",
        "signature": "com.google.javascript.jscomp.VarCheckTest.VariableTestCheck.VariableTestCheck(com.google.javascript.jscomp.AbstractCompiler)",
        "snippet": "    VariableTestCheck(AbstractCompiler compiler) {\n      this.compiler = compiler;\n    }\n",
        "begin_line": 378,
        "end_line": 380,
        "comment": "",
        "child_ranges": [
            "(line 379,col 7)-(line 379,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.VarCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/VarCheckTest.java",
        "signature": "com.google.javascript.jscomp.VarCheckTest.VariableTestCheck.process(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "    @Override\n    public void process(Node externs, Node root) {\n      NodeTraversal.traverseRoots(compiler, Lists.newArrayList(externs, root),\n          new AbstractPostOrderCallback() {\n        @Override\n        public void visit(NodeTraversal t, Node n, Node parent) {\n          if (n.isName() && !parent.isFunction()\n              && !parent.isLabel()) {\n            assertTrue(\"Variable \" + n.getString() + \" should have be declared\",\n                t.getScope().isDeclared(n.getString(), true));\n          }\n        }\n      });\n    }\n",
        "begin_line": 382,
        "end_line": 395,
        "comment": "",
        "child_ranges": [
            "(line 384,col 7)-(line 394,col 9)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.VarCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/VarCheckTest.java",
        "signature": "com.google.javascript.jscomp.VarCheckTest.VariableTestCheck.Anonymous-3637306d-1213-4bd1-a97a-4a6db4e86af0.visit(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "        @Override\n        public void visit(NodeTraversal t, Node n, Node parent) {\n          if (n.isName() && !parent.isFunction()\n              && !parent.isLabel()) {\n            assertTrue(\"Variable \" + n.getString() + \" should have be declared\",\n                t.getScope().isDeclared(n.getString(), true));\n          }\n        }\n",
        "begin_line": 386,
        "end_line": 393,
        "comment": "",
        "child_ranges": [
            "(line 388,col 11)-(line 392,col 11)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.VarCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/VarCheckTest.java",
        "signature": "com.google.javascript.jscomp.VarCheckTest.checkSynthesizedExtern(java.lang.String, java.lang.String)",
        "snippet": "  public void checkSynthesizedExtern(\n      String input, String expectedExtern) {\n    checkSynthesizedExtern(\"\", input, expectedExtern);\n  }\n",
        "begin_line": 398,
        "end_line": 401,
        "comment": "",
        "child_ranges": [
            "(line 400,col 5)-(line 400,col 54)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.VarCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/VarCheckTest.java",
        "signature": "com.google.javascript.jscomp.VarCheckTest.checkSynthesizedExtern(java.lang.String, java.lang.String, java.lang.String)",
        "snippet": "  public void checkSynthesizedExtern(\n      String extern, String input, String expectedExtern) {\n    declarationCheck = !sanityCheck;\n    testExternChanges(extern, input, expectedExtern);\n  }\n",
        "begin_line": 403,
        "end_line": 407,
        "comment": "",
        "child_ranges": [
            "(line 405,col 5)-(line 405,col 36)",
            "(line 406,col 5)-(line 406,col 53)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.VarCheckTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.CompilerTestCase(java.lang.String, boolean)",
        "snippet": "  protected CompilerTestCase(String externs, boolean compareAsTree) {\n    this.externsInputs = ImmutableList.of(\n        SourceFile.fromCode(\"externs\", externs));\n    this.compareAsTree = compareAsTree;\n    this.parseTypeInfo = false;\n  }\n",
        "begin_line": 137,
        "end_line": 142,
        "comment": "\n   * Constructs a test.\n   *\n   * @param externs Externs JS as a string\n   * @param compareAsTree True to compare output & expected as a node tree.\n   *     99% of the time you want to compare as a tree. There are a few\n   *     special cases where you don't, like if you want to test the code\n   *     printing of \"unnatural\" syntax trees. For example,\n   *\n   * <pre>\n   * IF\n   *   IF\n   *     STATEMENT\n   * ELSE\n   *   STATEMENT\n   * </pre>\n   ",
        "child_ranges": [
            "(line 138,col 5)-(line 139,col 49)",
            "(line 140,col 5)-(line 140,col 39)",
            "(line 141,col 5)-(line 141,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.VarCheckTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.CompilerTestCase(java.lang.String)",
        "snippet": "  protected CompilerTestCase(String externs) {\n    this(externs, true);\n  }\n",
        "begin_line": 148,
        "end_line": 150,
        "comment": "\n   * Constructs a test. Uses AST comparison.\n   * @param externs Externs JS as a string\n   ",
        "child_ranges": [
            "(line 149,col 5)-(line 149,col 24)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.VarCheckTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.CompilerTestCase()",
        "snippet": "  protected CompilerTestCase() {\n    this(\"\", true);\n  }\n",
        "begin_line": 155,
        "end_line": 157,
        "comment": "\n   * Constructs a test. Uses AST comparison and no externs.\n   ",
        "child_ranges": [
            "(line 156,col 5)-(line 156,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.VarCheckTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.tearDown()",
        "snippet": "  @Override protected void tearDown() throws Exception {\n    super.tearDown();\n    expectParseWarningsThisTest = false;\n  }\n",
        "begin_line": 159,
        "end_line": 162,
        "comment": "",
        "child_ranges": [
            "(line 160,col 5)-(line 160,col 21)",
            "(line 161,col 5)-(line 161,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.VarCheckTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.getProcessor(com.google.javascript.jscomp.Compiler)",
        "snippet": "  protected abstract CompilerPass getProcessor(Compiler compiler);\n",
        "begin_line": 170,
        "end_line": 170,
        "comment": "\n   * Gets the compiler pass instance to use for a test.\n   *\n   * @param compiler The compiler\n   * @return The pass to test\n   ",
        "child_ranges": []
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.VarCheckTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.getOptions()",
        "snippet": "  protected CompilerOptions getOptions() {\n    return getOptions(new CompilerOptions());\n  }\n",
        "begin_line": 177,
        "end_line": 179,
        "comment": "\n   * Gets the compiler options to use for this test. Use getProcessor to\n   * determine what passes should be run.\n   ",
        "child_ranges": [
            "(line 178,col 5)-(line 178,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.VarCheckTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.getOptions(com.google.javascript.jscomp.CompilerOptions)",
        "snippet": "  protected CompilerOptions getOptions(CompilerOptions options) {\n    if (this.acceptES5) {\n      options.setLanguageIn(LanguageMode.ECMASCRIPT5);\n    }\n\n    // This doesn't affect whether checkSymbols is run--it just affects\n    // whether variable warnings are filtered.\n    options.checkSymbols = true;\n\n    options.setWarningLevel(\n        DiagnosticGroups.MISSING_PROPERTIES, CheckLevel.WARNING);\n    options.setWarningLevel(\n        DiagnosticGroups.INVALID_CASTS, CheckLevel.WARNING);\n    options.setCodingConvention(getCodingConvention());\n    return options;\n  }\n",
        "begin_line": 185,
        "end_line": 200,
        "comment": "\n   * Gets the compiler options to use for this test. Use getProcessor to\n   * determine what passes should be run.\n   ",
        "child_ranges": [
            "(line 186,col 5)-(line 188,col 5)",
            "(line 192,col 5)-(line 192,col 32)",
            "(line 194,col 5)-(line 195,col 65)",
            "(line 196,col 5)-(line 197,col 60)",
            "(line 198,col 5)-(line 198,col 55)",
            "(line 199,col 5)-(line 199,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.VarCheckTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.getCodingConvention()",
        "snippet": "  protected CodingConvention getCodingConvention() {\n    return new GoogleCodingConvention();\n  }\n",
        "begin_line": 202,
        "end_line": 204,
        "comment": "",
        "child_ranges": [
            "(line 203,col 5)-(line 203,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.VarCheckTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.setFilename(java.lang.String)",
        "snippet": "  public void setFilename(String filename) {\n    this.filename = filename;\n  }\n",
        "begin_line": 206,
        "end_line": 208,
        "comment": "",
        "child_ranges": [
            "(line 207,col 5)-(line 207,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.VarCheckTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.getNumRepetitions()",
        "snippet": "  protected int getNumRepetitions() {\n    // Since most compiler passes should be idempotent, we run each pass twice\n    // by default.\n    return 2;\n  }\n",
        "begin_line": 214,
        "end_line": 218,
        "comment": "\n   * Returns the number of times the pass should be run before results are\n   * verified.\n   ",
        "child_ranges": [
            "(line 217,col 5)-(line 217,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.VarCheckTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.allowSourcelessWarnings()",
        "snippet": "  void allowSourcelessWarnings() {\n    allowSourcelessWarnings = true;\n  }\n",
        "begin_line": 221,
        "end_line": 223,
        "comment": " Expect warnings without source information. ",
        "child_ranges": [
            "(line 222,col 5)-(line 222,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.VarCheckTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.getLastCompiler()",
        "snippet": "  Compiler getLastCompiler() {\n    return lastCompiler;\n  }\n",
        "begin_line": 226,
        "end_line": 228,
        "comment": " The most recently used JSComp instance. ",
        "child_ranges": [
            "(line 227,col 5)-(line 227,col 24)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.VarCheckTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.enableEcmaScript5(boolean)",
        "snippet": "  protected void enableEcmaScript5(boolean acceptES5) {\n    this.acceptES5 = acceptES5;\n  }\n",
        "begin_line": 233,
        "end_line": 235,
        "comment": "\n   * Whether to allow ECMASCRIPT5 source parsing.\n   ",
        "child_ranges": [
            "(line 234,col 5)-(line 234,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.VarCheckTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.allowExternsChanges(boolean)",
        "snippet": "  protected void allowExternsChanges(boolean allowExternsChanges) {\n    this.allowExternsChanges = allowExternsChanges;\n  }\n",
        "begin_line": 240,
        "end_line": 242,
        "comment": "\n   * Whether to allow externs changes.\n   ",
        "child_ranges": [
            "(line 241,col 5)-(line 241,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.VarCheckTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.enableTypeCheck(com.google.javascript.jscomp.CheckLevel)",
        "snippet": "  public void enableTypeCheck(CheckLevel level) {\n    typeCheckEnabled  = true;\n    typeCheckLevel = level;\n  }\n",
        "begin_line": 252,
        "end_line": 255,
        "comment": "\n   * Perform type checking before running the test pass. This will check\n   * for type errors and annotate nodes with type information.\n   *\n   * @param level the level of severity to report for type errors\n   *\n   * @see TypeCheck\n   ",
        "child_ranges": [
            "(line 253,col 5)-(line 253,col 29)",
            "(line 254,col 5)-(line 254,col 27)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.VarCheckTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.enableLineNumberCheck(boolean)",
        "snippet": "  public void enableLineNumberCheck(boolean newVal) {\n    checkLineNumbers = newVal;\n  }\n",
        "begin_line": 260,
        "end_line": 262,
        "comment": "\n   * Check to make sure that line numbers were preserved.\n   ",
        "child_ranges": [
            "(line 261,col 5)-(line 261,col 30)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.VarCheckTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.disableTypeCheck()",
        "snippet": "  void disableTypeCheck() {\n    typeCheckEnabled  = false;\n  }\n",
        "begin_line": 269,
        "end_line": 271,
        "comment": "\n   * Do not run type checking before running the test pass.\n   *\n   * @see TypeCheck\n   ",
        "child_ranges": [
            "(line 270,col 5)-(line 270,col 30)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.VarCheckTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.enableClosurePass()",
        "snippet": "  void enableClosurePass() {\n    closurePassEnabled = true;\n  }\n",
        "begin_line": 277,
        "end_line": 279,
        "comment": " TODO(nicksantos): Fix other passes to use this when appropriate.",
        "child_ranges": [
            "(line 278,col 5)-(line 278,col 30)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.VarCheckTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.enableNormalize()",
        "snippet": "  protected void enableNormalize() {\n    enableNormalize(true);\n  }\n",
        "begin_line": 287,
        "end_line": 289,
        "comment": "\n   * Perform AST normalization before running the test pass, and anti-normalize\n   * after running it.\n   *\n   * @see Normalize\n   ",
        "child_ranges": [
            "(line 288,col 5)-(line 288,col 26)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.VarCheckTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.enableNormalize(boolean)",
        "snippet": "  protected void enableNormalize(boolean normalizeExpected) {\n    normalizeEnabled = true;\n    this.normalizeExpected = normalizeExpected;\n  }\n",
        "begin_line": 299,
        "end_line": 302,
        "comment": "\n   * Perform AST normalization before running the test pass, and anti-normalize\n   * after running it.\n   *\n   * @param normalizeExpected Whether to perform normalization on the\n   * expected JS result.\n   * @see Normalize\n   ",
        "child_ranges": [
            "(line 300,col 5)-(line 300,col 28)",
            "(line 301,col 5)-(line 301,col 47)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.VarCheckTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.disableNormalize()",
        "snippet": "  protected void disableNormalize() {\n    normalizeEnabled = false;\n  }\n",
        "begin_line": 308,
        "end_line": 310,
        "comment": "\n   * Don't perform AST normalization before running the test pass.\n   * @see Normalize\n   ",
        "child_ranges": [
            "(line 309,col 5)-(line 309,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.VarCheckTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.enableMarkNoSideEffects()",
        "snippet": "  void enableMarkNoSideEffects() {\n    markNoSideEffects  = true;\n  }\n",
        "begin_line": 318,
        "end_line": 320,
        "comment": " TODO(nicksantos): This pass doesn't get run anymore. It should be removed.",
        "child_ranges": [
            "(line 319,col 5)-(line 319,col 30)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.VarCheckTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.enableComputeSideEffects()",
        "snippet": "  void enableComputeSideEffects() {\n    computeSideEffects  = true;\n  }\n",
        "begin_line": 327,
        "end_line": 329,
        "comment": "\n   * Run the PureFunctionIdentifier pass before running the test pass.\n   *\n   * @see MarkNoSideEffectCalls\n   ",
        "child_ranges": [
            "(line 328,col 5)-(line 328,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.VarCheckTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.enableAstValidation(boolean)",
        "snippet": "  protected void enableAstValidation(boolean validate) {\n    astValidationEnabled = validate;\n  }\n",
        "begin_line": 334,
        "end_line": 336,
        "comment": "\n   * Whether to allow Validate the AST after each run of the pass.\n   ",
        "child_ranges": [
            "(line 335,col 5)-(line 335,col 36)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.VarCheckTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.setExpectParseWarningsThisTest()",
        "snippet": "  protected void setExpectParseWarningsThisTest() {\n    expectParseWarningsThisTest = true;\n  }\n",
        "begin_line": 339,
        "end_line": 341,
        "comment": " Whether we should ignore parse warnings for the current test method. ",
        "child_ranges": [
            "(line 340,col 5)-(line 340,col 39)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.VarCheckTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.createTypeCheck(com.google.javascript.jscomp.Compiler, com.google.javascript.jscomp.CheckLevel)",
        "snippet": "  private static TypeCheck createTypeCheck(Compiler compiler,\n      CheckLevel level) {\n    ReverseAbstractInterpreter rai =\n        new SemanticReverseAbstractInterpreter(compiler.getCodingConvention(),\n            compiler.getTypeRegistry());\n\n    return new TypeCheck(compiler, rai, compiler.getTypeRegistry(), level);\n  }\n",
        "begin_line": 344,
        "end_line": 351,
        "comment": " Returns a newly created TypeCheck. ",
        "child_ranges": [
            "(line 346,col 5)-(line 348,col 40)",
            "(line 350,col 5)-(line 350,col 75)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.VarCheckTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.lang.String, java.lang.String)",
        "snippet": "  public void test(String js, String expected) {\n    test(js, expected, (DiagnosticType) null);\n  }\n",
        "begin_line": 359,
        "end_line": 361,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output.\n   *\n   * @param js Input\n   * @param expected Expected JS output\n   ",
        "child_ranges": [
            "(line 360,col 5)-(line 360,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.VarCheckTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.lang.String, java.lang.String, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void test(String js, String expected, DiagnosticType error) {\n    test(js, expected, error, null);\n  }\n",
        "begin_line": 371,
        "end_line": 373,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output,\n   * or that an expected error is encountered.\n   *\n   * @param js Input\n   * @param expected Expected output, or null if an error is expected\n   * @param error Expected error, or null if no error is expected\n   ",
        "child_ranges": [
            "(line 372,col 5)-(line 372,col 36)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.VarCheckTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.lang.String, java.lang.String, com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType, java.lang.String)",
        "snippet": "  public void test(String js, String expected, DiagnosticType error,\n                   DiagnosticType warning, String description) {\n    test(externsInputs, js, expected, error, warning, description);\n  }\n",
        "begin_line": 386,
        "end_line": 389,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output,\n   * or that an expected error is encountered.\n   *\n   * @param js Input\n   * @param expected Expected output, or null if an error is expected\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   * @param description The content of the error expected\n   ",
        "child_ranges": [
            "(line 388,col 5)-(line 388,col 67)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.VarCheckTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.lang.String, java.lang.String, com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void test(String js, String expected,\n                   DiagnosticType error, DiagnosticType warning) {\n    test(externsInputs, js, expected, error, warning, null);\n  }\n",
        "begin_line": 401,
        "end_line": 404,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output\n   * and (optionally) that an expected warning is issued. Or, if an error is\n   * expected, this method just verifies that the error is encountered.\n   *\n   * @param js Input\n   * @param expected Expected output, or null if an error is expected\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   ",
        "child_ranges": [
            "(line 403,col 5)-(line 403,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.VarCheckTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.lang.String, java.lang.String, java.lang.String, com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void test(String externs, String js, String expected,\n                   DiagnosticType error, DiagnosticType warning) {\n    test(externs, js, expected, error, warning, null);\n  }\n",
        "begin_line": 417,
        "end_line": 420,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output\n   * and (optionally) that an expected warning is issued. Or, if an error is\n   * expected, this method just verifies that the error is encountered.\n   *\n   * @param externs Externs input\n   * @param js Input\n   * @param expected Expected output, or null if an error is expected\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   ",
        "child_ranges": [
            "(line 419,col 5)-(line 419,col 54)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.VarCheckTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.lang.String, java.lang.String, java.lang.String, com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType, java.lang.String)",
        "snippet": "  public void test(String externs, String js, String expected,\n                   DiagnosticType error, DiagnosticType warning,\n                   String description) {\n    List<SourceFile> externsInputs = ImmutableList.of(\n        SourceFile.fromCode(\"externs\", externs));\n    test(externsInputs, js, expected, error, warning, description);\n  }\n",
        "begin_line": 436,
        "end_line": 442,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output\n   * and (optionally) that an expected warning is issued. Or, if an error is\n   * expected, this method just verifies that the error is encountered.\n   *\n   * @param externs Externs input\n   * @param js Input\n   * @param expected Expected output, or null if an error is expected\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   * @param description The description of the expected warning,\n   *      or null if no warning is expected or if the warning's description\n   *      should not be examined\n   ",
        "child_ranges": [
            "(line 439,col 5)-(line 440,col 49)",
            "(line 441,col 5)-(line 441,col 67)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.VarCheckTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.util.List<com.google.javascript.jscomp.SourceFile>, java.lang.String, java.lang.String, com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType, java.lang.String)",
        "snippet": "  public void test(List<SourceFile> externs, String js, String expected,\n                   DiagnosticType error,\n                   DiagnosticType warning, String description) {\n    Compiler compiler = createCompiler();\n    lastCompiler = compiler;\n\n    CompilerOptions options = getOptions();\n\n    if (this.acceptES5) {\n      options.setLanguageIn(LanguageMode.ECMASCRIPT5);\n    }\n    // Note that in this context, turning on the checkTypes option won't\n    // actually cause the type check to run.\n    options.checkTypes = parseTypeInfo;\n    compiler.init(externs, ImmutableList.of(\n        SourceFile.fromCode(filename, js)), options);\n\n    BaseJSTypeTestCase.addNativeProperties(compiler.getTypeRegistry());\n\n    test(compiler, maybeCreateArray(expected), error, warning, description);\n  }\n",
        "begin_line": 458,
        "end_line": 478,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output\n   * and (optionally) that an expected warning is issued. Or, if an error is\n   * expected, this method just verifies that the error is encountered.\n   *\n   * @param externs Externs inputs\n   * @param js Input\n   * @param expected Expected output, or null if an error is expected\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   * @param description The description of the expected warning,\n   *      or null if no warning is expected or if the warning's description\n   *      should not be examined\n   ",
        "child_ranges": [
            "(line 461,col 5)-(line 461,col 41)",
            "(line 462,col 5)-(line 462,col 28)",
            "(line 464,col 5)-(line 464,col 43)",
            "(line 466,col 5)-(line 468,col 5)",
            "(line 471,col 5)-(line 471,col 39)",
            "(line 472,col 5)-(line 473,col 53)",
            "(line 475,col 5)-(line 475,col 71)",
            "(line 477,col 5)-(line 477,col 76)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.VarCheckTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.maybeCreateArray(java.lang.String)",
        "snippet": "  private String[] maybeCreateArray(String expected) {\n    if (expected != null) {\n      return new String[] { expected };\n    }\n    return null;\n  }\n",
        "begin_line": 480,
        "end_line": 485,
        "comment": "",
        "child_ranges": [
            "(line 481,col 5)-(line 483,col 5)",
            "(line 484,col 5)-(line 484,col 16)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.VarCheckTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.lang.String[], java.lang.String[])",
        "snippet": "  public void test(String[] js, String[] expected) {\n    test(js, expected, null);\n  }\n",
        "begin_line": 493,
        "end_line": 495,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output.\n   *\n   * @param js Inputs\n   * @param expected Expected JS output\n   ",
        "child_ranges": [
            "(line 494,col 5)-(line 494,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.VarCheckTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.lang.String[], java.lang.String[], com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void test(String[] js, String[] expected, DiagnosticType error) {\n    test(js, expected, error, null);\n  }\n",
        "begin_line": 505,
        "end_line": 507,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output,\n   * or that an expected error is encountered.\n   *\n   * @param js Inputs\n   * @param expected Expected JS output\n   * @param error Expected error, or null if no error is expected\n   ",
        "child_ranges": [
            "(line 506,col 5)-(line 506,col 36)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.VarCheckTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.lang.String[], java.lang.String[], com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void test(String[] js, String[] expected, DiagnosticType error,\n                   DiagnosticType warning) {\n    test(js, expected, error, warning, null);\n  }\n",
        "begin_line": 519,
        "end_line": 522,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output\n   * and (optionally) that an expected warning is issued. Or, if an error is\n   * expected, this method just verifies that the error is encountered.\n   *\n   * @param js Inputs\n   * @param expected Expected JS output\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   ",
        "child_ranges": [
            "(line 521,col 5)-(line 521,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.VarCheckTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.lang.String[], java.lang.String[], com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType, java.lang.String)",
        "snippet": "  public void test(String[] js, String[] expected, DiagnosticType error,\n                   DiagnosticType warning, String description) {\n    Compiler compiler = createCompiler();\n    lastCompiler = compiler;\n\n    List<SourceFile> inputs = Lists.newArrayList();\n    for (int i = 0; i < js.length; i++) {\n      inputs.add(SourceFile.fromCode(\"input\" + i, js[i]));\n    }\n    compiler.init(externsInputs, inputs, getOptions());\n    test(compiler, expected, error, warning, description);\n  }\n",
        "begin_line": 537,
        "end_line": 548,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output\n   * and (optionally) that an expected warning is issued. Or, if an error is\n   * expected, this method just verifies that the error is encountered.\n   *\n   * @param js Inputs\n   * @param expected Expected JS output\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   * @param description The description of the expected warning,\n   *      or null if no warning is expected or if the warning's description\n   *      should not be examined\n   ",
        "child_ranges": [
            "(line 539,col 5)-(line 539,col 41)",
            "(line 540,col 5)-(line 540,col 28)",
            "(line 542,col 5)-(line 542,col 51)",
            "(line 543,col 5)-(line 545,col 5)",
            "(line 546,col 5)-(line 546,col 55)",
            "(line 547,col 5)-(line 547,col 58)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.VarCheckTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(com.google.javascript.jscomp.JSModule[], java.lang.String[])",
        "snippet": "  public void test(JSModule[] modules, String[] expected) {\n    test(modules, expected, null);\n  }\n",
        "begin_line": 556,
        "end_line": 558,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output.\n   *\n   * @param modules Module inputs\n   * @param expected Expected JS outputs (one per module)\n   ",
        "child_ranges": [
            "(line 557,col 5)-(line 557,col 34)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.VarCheckTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(com.google.javascript.jscomp.JSModule[], java.lang.String[], com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void test(JSModule[] modules, String[] expected,\n      DiagnosticType error) {\n    test(modules, expected, error, null);\n  }\n",
        "begin_line": 568,
        "end_line": 571,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output,\n   * or that an expected error is encountered.\n   *\n   * @param modules Module inputs\n   * @param expected Expected JS outputs (one per module)\n   * @param error Expected error, or null if no error is expected\n   ",
        "child_ranges": [
            "(line 570,col 5)-(line 570,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.VarCheckTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(com.google.javascript.jscomp.JSModule[], java.lang.String[], com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void test(JSModule[] modules, String[] expected,\n                   DiagnosticType error, DiagnosticType warning) {\n    Compiler compiler = createCompiler();\n    lastCompiler = compiler;\n\n    compiler.initModules(\n        externsInputs, Lists.newArrayList(modules), getOptions());\n    test(compiler, expected, error, warning);\n  }\n",
        "begin_line": 583,
        "end_line": 591,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output\n   * and (optionally) that an expected warning is issued. Or, if an error is\n   * expected, this method just verifies that the error is encountered.\n   *\n   * @param modules Module inputs\n   * @param expected Expected JS outputs (one per module)\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   ",
        "child_ranges": [
            "(line 585,col 5)-(line 585,col 41)",
            "(line 586,col 5)-(line 586,col 28)",
            "(line 588,col 5)-(line 589,col 66)",
            "(line 590,col 5)-(line 590,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.VarCheckTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(java.lang.String)",
        "snippet": "  public void testSame(String js) {\n    test(js, js);\n  }\n",
        "begin_line": 598,
        "end_line": 600,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as its input.\n   *\n   * @param js Input and output\n   ",
        "child_ranges": [
            "(line 599,col 5)-(line 599,col 17)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.VarCheckTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(java.lang.String, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void testSame(String js, DiagnosticType warning) {\n    test(js, js, null, warning);\n  }\n",
        "begin_line": 609,
        "end_line": 611,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as its input\n   * and (optionally) that an expected warning is issued.\n   *\n   * @param js Input and output\n   * @param warning Expected warning, or null if no warning is expected\n   ",
        "child_ranges": [
            "(line 610,col 5)-(line 610,col 32)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.VarCheckTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(java.lang.String, com.google.javascript.jscomp.DiagnosticType, boolean)",
        "snippet": "  public void testSame(String js, DiagnosticType diag, boolean error) {\n    if (error) {\n      test(js, js, diag);\n    } else {\n      test(js, js, null, diag);\n    }\n  }\n",
        "begin_line": 621,
        "end_line": 627,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as its input\n   * and (optionally) that an expected warning is issued.\n   *\n   * @param js Input and output\n   * @param diag Expected error or warning, or null if none is expected\n   * @param error true if diag is an error, false if it is a warning\n   ",
        "child_ranges": [
            "(line 622,col 5)-(line 626,col 5)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.VarCheckTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(java.lang.String, java.lang.String, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void testSame(String externs, String js, DiagnosticType warning) {\n    testSame(externs, js, warning, null);\n  }\n",
        "begin_line": 637,
        "end_line": 639,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as its input\n   * and (optionally) that an expected warning is issued.\n   *\n   * @param externs Externs input\n   * @param js Input and output\n   * @param warning Expected warning, or null if no warning is expected\n   ",
        "child_ranges": [
            "(line 638,col 5)-(line 638,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.VarCheckTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(java.lang.String, java.lang.String, com.google.javascript.jscomp.DiagnosticType, boolean)",
        "snippet": "  public void testSame(\n      String externs, String js, DiagnosticType diag, boolean error) {\n    if (error) {\n      test(externs, js, js, diag, null);\n    } else {\n      test(externs, js, js, null, diag);\n    }\n  }\n",
        "begin_line": 650,
        "end_line": 657,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as its input\n   * and (optionally) that an expected warning is issued.\n   *\n   * @param externs Externs input\n   * @param js Input and output\n   * @param diag Expected error or warning, or null if none is expected\n   * @param error true if diag is an error, false if it is a warning\n   ",
        "child_ranges": [
            "(line 652,col 5)-(line 656,col 5)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.VarCheckTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(java.lang.String, java.lang.String, com.google.javascript.jscomp.DiagnosticType, java.lang.String)",
        "snippet": "  public void testSame(String externs, String js, DiagnosticType warning,\n                       String description) {\n    List<SourceFile> externsInputs = ImmutableList.of(\n        SourceFile.fromCode(\"externs\", externs));\n    test(externsInputs, js, js, null, warning, description);\n  }\n",
        "begin_line": 670,
        "end_line": 675,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as its input\n   * and (optionally) that an expected warning and description is issued.\n   *\n   * @param externs Externs input\n   * @param js Input and output\n   * @param warning Expected warning, or null if no warning is expected\n   * @param description The description of the expected warning,\n   *      or null if no warning is expected or if the warning's description\n   *      should not be examined\n   ",
        "child_ranges": [
            "(line 672,col 5)-(line 673,col 49)",
            "(line 674,col 5)-(line 674,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.VarCheckTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(java.lang.String[])",
        "snippet": "  public void testSame(String[] js) {\n    test(js, js);\n  }\n",
        "begin_line": 682,
        "end_line": 684,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as its input.\n   *\n   * @param js Inputs and outputs\n   ",
        "child_ranges": [
            "(line 683,col 5)-(line 683,col 17)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.VarCheckTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(java.lang.String[], com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void testSame(String[] js, DiagnosticType error) {\n    test(js, js, error);\n  }\n",
        "begin_line": 693,
        "end_line": 695,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as its input,\n   * and emits the given error.\n   *\n   * @param js Inputs and outputs\n   * @param error Expected error, or null if no error is expected\n   ",
        "child_ranges": [
            "(line 694,col 5)-(line 694,col 24)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.VarCheckTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(java.lang.String[], com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void testSame(\n      String[] js, DiagnosticType error, DiagnosticType warning) {\n    test(js, js, error, warning);\n  }\n",
        "begin_line": 705,
        "end_line": 708,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as its input,\n   * and emits the given error and warning.\n   *\n   * @param js Inputs and outputs\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   ",
        "child_ranges": [
            "(line 707,col 5)-(line 707,col 33)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.VarCheckTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(com.google.javascript.jscomp.JSModule[])",
        "snippet": "  public void testSame(JSModule[] modules) {\n    testSame(modules, null);\n  }\n",
        "begin_line": 715,
        "end_line": 717,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as the input.\n   *\n   * @param modules Module inputs\n   ",
        "child_ranges": [
            "(line 716,col 5)-(line 716,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.VarCheckTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(com.google.javascript.jscomp.JSModule[], com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void testSame(JSModule[] modules, DiagnosticType warning) {\n    try {\n      String[] expected = new String[modules.length];\n      for (int i = 0; i < modules.length; i++) {\n        expected[i] = \"\";\n        for (CompilerInput input : modules[i].getInputs()) {\n          expected[i] += input.getSourceFile().getCode();\n        }\n      }\n      test(modules, expected, null, warning);\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n  }\n",
        "begin_line": 725,
        "end_line": 738,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as the input.\n   *\n   * @param modules Module inputs\n   * @param warning A warning, or null for no expected warning.\n   ",
        "child_ranges": [
            "(line 726,col 5)-(line 737,col 5)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.VarCheckTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(com.google.javascript.jscomp.Compiler, java.lang.String[], com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  protected void test(Compiler compiler, String[] expected,\n                      DiagnosticType error, DiagnosticType warning) {\n    test(compiler, expected, error, warning, null);\n  }\n",
        "begin_line": 751,
        "end_line": 754,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output\n   * and (optionally) that an expected warning is issued. Or, if an error is\n   * expected, this method just verifies that the error is encountered.\n   *\n   * @param compiler A compiler that has been initialized via\n   *     {@link Compiler#init}\n   * @param expected Expected output, or null if an error is expected\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   ",
        "child_ranges": [
            "(line 753,col 5)-(line 753,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.VarCheckTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(com.google.javascript.jscomp.Compiler, java.lang.String[], com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType, java.lang.String)",
        "snippet": "  private void test(Compiler compiler, String[] expected,\n                    DiagnosticType error, DiagnosticType warning,\n                    String description) {\n    RecentChange recentChange = new RecentChange();\n    compiler.addChangeHandler(recentChange);\n\n    Node root = compiler.parseInputs();\n    assertTrue(\"Unexpected parse error(s): \" +\n        Joiner.on(\"\\n\").join(compiler.getErrors()), root != null);\n    if (!expectParseWarningsThisTest) {\n      assertTrue(\"Unexpected parse warnings(s): \" +\n          Joiner.on(\"\\n\").join(compiler.getWarnings()),\n          compiler.getWarnings().length == 0);\n    }\n\n    if (astValidationEnabled) {\n      (new AstValidator()).validateRoot(root);\n    }\n    Node externsRoot = root.getFirstChild();\n    Node mainRoot = root.getLastChild();\n\n    // Save the tree for later comparison.\n    Node rootClone = root.cloneTree();\n    Node externsRootClone = rootClone.getFirstChild();\n    Node mainRootClone = rootClone.getLastChild();\n    Map<Node, Node> mtoc = NodeUtil.mapMainToClone(mainRoot, mainRootClone);\n\n    int numRepetitions = getNumRepetitions();\n    ErrorManager[] errorManagers = new ErrorManager[numRepetitions];\n    int aggregateWarningCount = 0;\n    List<JSError> aggregateWarnings = Lists.newArrayList();\n    boolean hasCodeChanged = false;\n\n    assertFalse(\"Code should not change before processing\",\n        recentChange.hasCodeChanged());\n\n    for (int i = 0; i < numRepetitions; ++i) {\n      if (compiler.getErrorCount() == 0) {\n        errorManagers[i] = new BlackHoleErrorManager(compiler);\n\n        // Only run process closure primitives once, if asked.\n        if (closurePassEnabled && i == 0) {\n          recentChange.reset();\n          new ProcessClosurePrimitives(compiler, null, CheckLevel.ERROR)\n              .process(null, mainRoot);\n          hasCodeChanged = hasCodeChanged || recentChange.hasCodeChanged();\n        }\n\n        // Only run the type checking pass once, if asked.\n        // Running it twice can cause unpredictable behavior because duplicate\n        // objects for the same type are created, and the type system\n        // uses reference equality to compare many types.\n        if (!runTypeCheckAfterProcessing && typeCheckEnabled && i == 0) {\n          TypeCheck check = createTypeCheck(compiler, typeCheckLevel);\n          check.processForTesting(externsRoot, mainRoot);\n        }\n\n        // Only run the normalize pass once, if asked.\n        if (normalizeEnabled && i == 0) {\n          normalizeActualCode(compiler, externsRoot, mainRoot);\n        }\n\n        if (computeSideEffects && i == 0) {\n          PureFunctionIdentifier.Driver mark =\n              new PureFunctionIdentifier.Driver(compiler, null, false);\n          mark.process(externsRoot, mainRoot);\n        }\n\n        if (markNoSideEffects && i == 0) {\n          MarkNoSideEffectCalls mark = new MarkNoSideEffectCalls(compiler);\n          mark.process(externsRoot, mainRoot);\n        }\n\n        recentChange.reset();\n\n        getProcessor(compiler).process(externsRoot, mainRoot);\n        if (astValidationEnabled) {\n          (new AstValidator()).validateRoot(root);\n        }\n        if (checkLineNumbers) {\n          (new LineNumberCheck(compiler)).process(externsRoot, mainRoot);\n        }\n\n        if (runTypeCheckAfterProcessing && typeCheckEnabled && i == 0) {\n          TypeCheck check = createTypeCheck(compiler, typeCheckLevel);\n          check.processForTesting(externsRoot, mainRoot);\n        }\n\n        hasCodeChanged = hasCodeChanged || recentChange.hasCodeChanged();\n        aggregateWarningCount += errorManagers[i].getWarningCount();\n        aggregateWarnings.addAll(Lists.newArrayList(compiler.getWarnings()));\n\n        if (normalizeEnabled) {\n          boolean verifyDeclaredConstants = true;\n          new Normalize.VerifyConstants(compiler, verifyDeclaredConstants)\n              .process(externsRoot, mainRoot);\n        }\n      }\n    }\n\n    if (error == null) {\n      assertEquals(\n          \"Unexpected error(s): \" + Joiner.on(\"\\n\").join(compiler.getErrors()),\n          0, compiler.getErrorCount());\n\n      // Verify the symbol table.\n      ErrorManager symbolTableErrorManager =\n          new BlackHoleErrorManager(compiler);\n      Node expectedRoot = null;\n      if (expected != null) {\n        expectedRoot = parseExpectedJs(expected);\n        expectedRoot.detachFromParent();\n      }\n\n      JSError[] stErrors = symbolTableErrorManager.getErrors();\n      if (expectedSymbolTableError != null) {\n        assertEquals(\"There should be one error.\", 1, stErrors.length);\n        assertEquals(expectedSymbolTableError, stErrors[0].getType());\n      } else {\n        assertEquals(\"Unexpected symbol table error(s): \" +\n            Joiner.on(\"\\n\").join(stErrors),\n            0, stErrors.length);\n      }\n\n      if (warning == null) {\n        assertEquals(\n            \"Unexpected warning(s): \" + Joiner.on(\"\\n\").join(aggregateWarnings),\n            0, aggregateWarningCount);\n      } else {\n        assertEquals(\"There should be one warning, repeated \" + numRepetitions +\n            \" time(s).\", numRepetitions, aggregateWarningCount);\n        for (int i = 0; i < numRepetitions; ++i) {\n          JSError[] warnings = errorManagers[i].getWarnings();\n          JSError actual = warnings[0];\n          assertEquals(warning, actual.getType());\n\n          // Make sure that source information is always provided.\n          if (!allowSourcelessWarnings) {\n            assertTrue(\"Missing source file name in warning\",\n                actual.sourceName != null && !actual.sourceName.isEmpty());\n            assertTrue(\"Missing line number in warning\",\n                -1 != actual.lineNumber);\n            assertTrue(\"Missing char number in warning\",\n                -1 != actual.getCharno());\n          }\n\n          if (description != null) {\n            assertEquals(description, actual.description);\n          }\n        }\n      }\n\n      // If we ran normalize on the AST, we must also run normalize on the\n      // clone before checking for changes.\n      if (normalizeEnabled) {\n        normalizeActualCode(compiler, externsRootClone, mainRootClone);\n      }\n\n      boolean codeChange = !mainRootClone.isEquivalentTo(mainRoot);\n      boolean externsChange = !externsRootClone.isEquivalentTo(externsRoot);\n\n      // Generally, externs should not be changed by the compiler passes.\n      if (externsChange && !allowExternsChanges) {\n        String explanation = externsRootClone.checkTreeEquals(externsRoot);\n        fail(\"Unexpected changes to externs\" +\n            \"\\nExpected: \" + compiler.toSource(externsRootClone) +\n            \"\\nResult: \" + compiler.toSource(externsRoot) +\n            \"\\n\" + explanation);\n      }\n\n      if (!codeChange && !externsChange) {\n        assertFalse(\n            \"compiler.reportCodeChange() was called \" +\n            \"even though nothing changed\",\n            hasCodeChanged);\n      } else {\n        assertTrue(\"compiler.reportCodeChange() should have been called.\"\n            + \"\\nOriginal: \" + mainRootClone.toStringTree()\n            + \"\\nNew: \" + mainRoot.toStringTree(), hasCodeChanged);\n      }\n\n      // Check correctness of the changed-scopes-only traversal\n      NodeUtil.verifyScopeChanges(mtoc, mainRoot, false, compiler);\n\n      if (expected != null) {\n        if (compareAsTree) {\n          String explanation = expectedRoot.checkTreeEquals(mainRoot);\n          assertNull(\"\\nExpected: \" + compiler.toSource(expectedRoot) +\n              \"\\nResult: \" + compiler.toSource(mainRoot) +\n              \"\\n\" + explanation, explanation);\n        } else if (expected != null) {\n          assertEquals(\n              Joiner.on(\"\").join(expected), compiler.toSource(mainRoot));\n        }\n      }\n\n      // Verify normalization is not invalidated.\n      Node normalizeCheckRootClone = root.cloneTree();\n      Node normalizeCheckExternsRootClone =\n          normalizeCheckRootClone.getFirstChild();\n      Node normalizeCheckMainRootClone = normalizeCheckRootClone.getLastChild();\n      new PrepareAst(compiler).process(\n          normalizeCheckExternsRootClone, normalizeCheckMainRootClone);\n      String explanation =\n          normalizeCheckMainRootClone.checkTreeEquals(mainRoot);\n      assertNull(\"Node structure normalization invalidated.\\nExpected: \" +\n          compiler.toSource(normalizeCheckMainRootClone) +\n          \"\\nResult: \" + compiler.toSource(mainRoot) +\n          \"\\n\" + explanation, explanation);\n\n      // TODO(johnlenz): enable this for most test cases.\n      // Currently, this invalidates test for while-loops, for-loop\n      // initializers, and other naming.  However, a set of code\n      // (Closure primitive rewrites, etc) runs before the Normalize pass,\n      // so this can't be force on everywhere.\n      if (normalizeEnabled) {\n        new Normalize(compiler, true).process(\n            normalizeCheckExternsRootClone, normalizeCheckMainRootClone);\n        explanation =  normalizeCheckMainRootClone.checkTreeEquals(mainRoot);\n        assertNull(\"Normalization invalidated.\\nExpected: \" +\n            compiler.toSource(normalizeCheckMainRootClone) +\n            \"\\nResult: \" + compiler.toSource(mainRoot) +\n            \"\\n\" + explanation, explanation);\n      }\n    } else {\n      String errors = \"\";\n      for (JSError actualError : compiler.getErrors()) {\n        errors += actualError.description + \"\\n\";\n      }\n      assertEquals(\"There should be one error. \" + errors,\n          1, compiler.getErrorCount());\n      assertEquals(errors, error, compiler.getErrors()[0].getType());\n\n      if (warning != null) {\n        String warnings = \"\";\n        for (JSError actualError : compiler.getWarnings()) {\n          warnings += actualError.description + \"\\n\";\n        }\n        assertEquals(\"There should be one warning. \" + warnings,\n            1, compiler.getWarningCount());\n        assertEquals(warnings, warning, compiler.getWarnings()[0].getType());\n      }\n    }\n  }\n",
        "begin_line": 770,
        "end_line": 1013,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output\n   * and (optionally) that an expected warning is issued. Or, if an error is\n   * expected, this method just verifies that the error is encountered.\n   *\n   * @param compiler A compiler that has been initialized via\n   *     {@link Compiler#init}\n   * @param expected Expected output, or null if an error is expected\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   * @param description The description of the expected warning,\n   *      or null if no warning is expected or if the warning's description\n   *      should not be examined\n   ",
        "child_ranges": [
            "(line 773,col 5)-(line 773,col 51)",
            "(line 774,col 5)-(line 774,col 44)",
            "(line 776,col 5)-(line 776,col 39)",
            "(line 777,col 5)-(line 778,col 66)",
            "(line 779,col 5)-(line 783,col 5)",
            "(line 785,col 5)-(line 787,col 5)",
            "(line 788,col 5)-(line 788,col 44)",
            "(line 789,col 5)-(line 789,col 40)",
            "(line 792,col 5)-(line 792,col 38)",
            "(line 793,col 5)-(line 793,col 54)",
            "(line 794,col 5)-(line 794,col 50)",
            "(line 795,col 5)-(line 795,col 76)",
            "(line 797,col 5)-(line 797,col 45)",
            "(line 798,col 5)-(line 798,col 68)",
            "(line 799,col 5)-(line 799,col 34)",
            "(line 800,col 5)-(line 800,col 59)",
            "(line 801,col 5)-(line 801,col 35)",
            "(line 803,col 5)-(line 804,col 39)",
            "(line 806,col 5)-(line 868,col 5)",
            "(line 870,col 5)-(line 1012,col 5)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.VarCheckTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.normalizeActualCode(com.google.javascript.jscomp.Compiler, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  private void normalizeActualCode(\n      Compiler compiler, Node externsRoot, Node mainRoot) {\n    Normalize normalize = new Normalize(compiler, false);\n    normalize.process(externsRoot, mainRoot);\n  }\n",
        "begin_line": 1015,
        "end_line": 1019,
        "comment": "",
        "child_ranges": [
            "(line 1017,col 5)-(line 1017,col 57)",
            "(line 1018,col 5)-(line 1018,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.VarCheckTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.parseExpectedJs(java.lang.String[])",
        "snippet": "  protected Node parseExpectedJs(String[] expected) {\n    Compiler compiler = createCompiler();\n    List<SourceFile> inputs = Lists.newArrayList();\n    for (int i = 0; i < expected.length; i++) {\n      inputs.add(SourceFile.fromCode(\"expected\" + i, expected[i]));\n    }\n    compiler.init(externsInputs, inputs, getOptions());\n    Node root = compiler.parseInputs();\n    assertTrue(\"Unexpected parse error(s): \" +\n        Joiner.on(\"\\n\").join(compiler.getErrors()), root != null);\n    Node externsRoot = root.getFirstChild();\n    Node mainRoot = externsRoot.getNext();\n    // Only run the normalize pass, if asked.\n    if (normalizeEnabled && normalizeExpected && !compiler.hasErrors()) {\n      Normalize normalize = new Normalize(compiler, false);\n      normalize.process(externsRoot, mainRoot);\n    }\n    return mainRoot;\n  }\n",
        "begin_line": 1024,
        "end_line": 1042,
        "comment": "\n   * Parses expected JS inputs and returns the root of the parse tree.\n   ",
        "child_ranges": [
            "(line 1025,col 5)-(line 1025,col 41)",
            "(line 1026,col 5)-(line 1026,col 51)",
            "(line 1027,col 5)-(line 1029,col 5)",
            "(line 1030,col 5)-(line 1030,col 55)",
            "(line 1031,col 5)-(line 1031,col 39)",
            "(line 1032,col 5)-(line 1033,col 66)",
            "(line 1034,col 5)-(line 1034,col 44)",
            "(line 1035,col 5)-(line 1035,col 42)",
            "(line 1037,col 5)-(line 1040,col 5)",
            "(line 1041,col 5)-(line 1041,col 20)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.VarCheckTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testExternChanges(java.lang.String, java.lang.String)",
        "snippet": "  protected void testExternChanges(\n      String input, String expectedExtern) {\n    testExternChanges(\"\", input, expectedExtern);\n  }\n",
        "begin_line": 1044,
        "end_line": 1047,
        "comment": "",
        "child_ranges": [
            "(line 1046,col 5)-(line 1046,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.VarCheckTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testExternChanges(java.lang.String, java.lang.String, java.lang.String)",
        "snippet": "  protected void testExternChanges(\n      String extern, String input, String expectedExtern) {\n    Compiler compiler = createCompiler();\n    CompilerOptions options = getOptions();\n    compiler.init(\n        ImmutableList.of(SourceFile.fromCode(\"extern\", extern)),\n        ImmutableList.of(SourceFile.fromCode(\"input\", input)),\n        options);\n    compiler.parseInputs();\n    assertFalse(compiler.hasErrors());\n\n    Node externsAndJs = compiler.getRoot();\n    Node root = externsAndJs.getLastChild();\n\n    Node externs = externsAndJs.getFirstChild();\n\n    Node expected = compiler.parseTestCode(expectedExtern);\n    assertFalse(compiler.hasErrors());\n\n    (getProcessor(compiler)).process(externs, root);\n\n    String externsCode = compiler.toSource(externs);\n    String expectedCode = compiler.toSource(expected);\n\n    assertEquals(expectedCode, externsCode);\n  }\n",
        "begin_line": 1049,
        "end_line": 1074,
        "comment": "",
        "child_ranges": [
            "(line 1051,col 5)-(line 1051,col 41)",
            "(line 1052,col 5)-(line 1052,col 43)",
            "(line 1053,col 5)-(line 1056,col 17)",
            "(line 1057,col 5)-(line 1057,col 27)",
            "(line 1058,col 5)-(line 1058,col 38)",
            "(line 1060,col 5)-(line 1060,col 43)",
            "(line 1061,col 5)-(line 1061,col 44)",
            "(line 1063,col 5)-(line 1063,col 48)",
            "(line 1065,col 5)-(line 1065,col 59)",
            "(line 1066,col 5)-(line 1066,col 38)",
            "(line 1068,col 5)-(line 1068,col 52)",
            "(line 1070,col 5)-(line 1070,col 52)",
            "(line 1071,col 5)-(line 1071,col 54)",
            "(line 1073,col 5)-(line 1073,col 44)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.VarCheckTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.parseExpectedJs(java.lang.String)",
        "snippet": "  protected Node parseExpectedJs(String expected) {\n    return parseExpectedJs(new String[] {expected});\n  }\n",
        "begin_line": 1076,
        "end_line": 1078,
        "comment": "",
        "child_ranges": [
            "(line 1077,col 5)-(line 1077,col 52)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.VarCheckTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.createModuleChain(java.lang.String...)",
        "snippet": "  static JSModule[] createModuleChain(String... inputs) {\n    JSModule[] modules = createModules(inputs);\n    for (int i = 1; i < modules.length; i++) {\n      modules[i].addDependency(modules[i - 1]);\n    }\n    return modules;\n  }\n",
        "begin_line": 1084,
        "end_line": 1090,
        "comment": "\n   * Generates a list of modules from a list of inputs, such that each module\n   * depends on the module before it.\n   ",
        "child_ranges": [
            "(line 1085,col 5)-(line 1085,col 47)",
            "(line 1086,col 5)-(line 1088,col 5)",
            "(line 1089,col 5)-(line 1089,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.VarCheckTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.createModuleStar(java.lang.String...)",
        "snippet": "  static JSModule[] createModuleStar(String... inputs) {\n    JSModule[] modules = createModules(inputs);\n    for (int i = 1; i < modules.length; i++) {\n      modules[i].addDependency(modules[0]);\n    }\n    return modules;\n  }\n",
        "begin_line": 1096,
        "end_line": 1102,
        "comment": "\n   * Generates a list of modules from a list of inputs, such that each module\n   * depends on the first module.\n   ",
        "child_ranges": [
            "(line 1097,col 5)-(line 1097,col 47)",
            "(line 1098,col 5)-(line 1100,col 5)",
            "(line 1101,col 5)-(line 1101,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.VarCheckTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.createModuleBush(java.lang.String...)",
        "snippet": "  static JSModule[] createModuleBush(String ... inputs) {\n    Preconditions.checkState(inputs.length > 2);\n    JSModule[] modules = createModules(inputs);\n    for (int i = 1; i < modules.length; i++) {\n      modules[i].addDependency(modules[i == 1 ? 0 : 1]);\n    }\n    return modules;\n  }\n",
        "begin_line": 1109,
        "end_line": 1116,
        "comment": "\n   * Generates a list of modules from a list of inputs, such that modules\n   * form a bush formation. In a bush formation, module 2 depends\n   * on module 1, and all other modules depend on module 2.\n   ",
        "child_ranges": [
            "(line 1110,col 5)-(line 1110,col 48)",
            "(line 1111,col 5)-(line 1111,col 47)",
            "(line 1112,col 5)-(line 1114,col 5)",
            "(line 1115,col 5)-(line 1115,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.VarCheckTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.createModuleTree(java.lang.String...)",
        "snippet": "  static JSModule[] createModuleTree(String ... inputs) {\n    JSModule[] modules = createModules(inputs);\n    for (int i = 1; i < modules.length; i++) {\n      modules[i].addDependency(modules[(i - 1) / 2]);\n    }\n    return modules;\n  }\n",
        "begin_line": 1123,
        "end_line": 1129,
        "comment": "\n   * Generates a list of modules from a list of inputs, such that modules\n   * form a tree formation. In a tree formation, module N depends on\n   * module `floor(N/2)`, So the modules form a balanced binary tree.\n   ",
        "child_ranges": [
            "(line 1124,col 5)-(line 1124,col 47)",
            "(line 1125,col 5)-(line 1127,col 5)",
            "(line 1128,col 5)-(line 1128,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.VarCheckTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.createModules(java.lang.String...)",
        "snippet": "  static JSModule[] createModules(String... inputs) {\n    JSModule[] modules = new JSModule[inputs.length];\n    for (int i = 0; i < inputs.length; i++) {\n      JSModule module = modules[i] = new JSModule(\"m\" + i);\n      module.add(SourceFile.fromCode(\"i\" + i, inputs[i]));\n    }\n    return modules;\n  }\n",
        "begin_line": 1135,
        "end_line": 1142,
        "comment": "\n   * Generates a list of modules from a list of inputs. Does not generate any\n   * dependencies between the modules.\n   ",
        "child_ranges": [
            "(line 1136,col 5)-(line 1136,col 53)",
            "(line 1137,col 5)-(line 1140,col 5)",
            "(line 1141,col 5)-(line 1141,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.VarCheckTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.BlackHoleErrorManager.BlackHoleErrorManager(com.google.javascript.jscomp.Compiler)",
        "snippet": "    private BlackHoleErrorManager(Compiler compiler) {\n      compiler.setErrorManager(this);\n    }\n",
        "begin_line": 1145,
        "end_line": 1147,
        "comment": "",
        "child_ranges": [
            "(line 1146,col 7)-(line 1146,col 37)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.VarCheckTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.BlackHoleErrorManager.println(com.google.javascript.jscomp.CheckLevel, com.google.javascript.jscomp.JSError)",
        "snippet": "    @Override\n    public void println(CheckLevel level, JSError error) {}\n",
        "begin_line": 1149,
        "end_line": 1150,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.VarCheckTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.BlackHoleErrorManager.printSummary()",
        "snippet": "    @Override\n    public void printSummary() {}\n",
        "begin_line": 1152,
        "end_line": 1153,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.VarCheckTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.createCompiler()",
        "snippet": "  Compiler createCompiler() {\n    Compiler compiler = new Compiler();\n    return compiler;\n  }\n",
        "begin_line": 1156,
        "end_line": 1159,
        "comment": "",
        "child_ranges": [
            "(line 1157,col 5)-(line 1157,col 39)",
            "(line 1158,col 5)-(line 1158,col 20)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.VarCheckTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.setExpectedSymbolTableError(com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  protected void setExpectedSymbolTableError(DiagnosticType type) {\n    this.expectedSymbolTableError = type;\n  }\n",
        "begin_line": 1161,
        "end_line": 1163,
        "comment": "",
        "child_ranges": [
            "(line 1162,col 5)-(line 1162,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.VarCheckTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.findQualifiedNameNode(java.lang.String, com.google.javascript.rhino.Node)",
        "snippet": "  protected final Node findQualifiedNameNode(final String name, Node root) {\n    final List<Node> matches = Lists.newArrayList();\n    NodeUtil.visitPostOrder(root,\n        new NodeUtil.Visitor() {\n          @Override public void visit(Node n) {\n            if (name.equals(n.getQualifiedName())) {\n              matches.add(n);\n            }\n          }\n        },\n        Predicates.<Node>alwaysTrue());\n    return matches.get(0);\n  }\n",
        "begin_line": 1166,
        "end_line": 1178,
        "comment": " Finds the first matching qualified name node in post-traversal order. ",
        "child_ranges": [
            "(line 1167,col 5)-(line 1167,col 52)",
            "(line 1168,col 5)-(line 1176,col 39)",
            "(line 1177,col 5)-(line 1177,col 26)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.VarCheckTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.Anonymous-98e453fd-de1d-4dea-8669-a33fefc8cb74.visit(com.google.javascript.rhino.Node)",
        "snippet": "          @Override public void visit(Node n) {\n            if (name.equals(n.getQualifiedName())) {\n              matches.add(n);\n            }\n          }\n",
        "begin_line": 1170,
        "end_line": 1174,
        "comment": "",
        "child_ranges": [
            "(line 1171,col 13)-(line 1173,col 13)"
        ]
    }
]