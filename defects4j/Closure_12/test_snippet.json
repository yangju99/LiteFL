[
    {
        "class_name": "com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/FlowSensitiveInlineVariablesTest.java",
        "signature": "com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest.FlowSensitiveInlineVariablesTest()",
        "snippet": "  public FlowSensitiveInlineVariablesTest() {\n    enableNormalize(true);\n  }\n",
        "begin_line": 32,
        "end_line": 34,
        "comment": "",
        "child_ranges": [
            "(line 33,col 5)-(line 33,col 26)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/FlowSensitiveInlineVariablesTest.java",
        "signature": "com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest.getNumRepetitions()",
        "snippet": "  @Override\n  public int getNumRepetitions() {\n    // Test repeatedly inline.\n    return 3;\n  }\n",
        "begin_line": 36,
        "end_line": 40,
        "comment": "",
        "child_ranges": [
            "(line 39,col 5)-(line 39,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/FlowSensitiveInlineVariablesTest.java",
        "signature": "com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest.getProcessor(com.google.javascript.jscomp.Compiler)",
        "snippet": "  @Override\n  protected CompilerPass getProcessor(final Compiler compiler) {\n    //return new FlowSensitiveInlineVariables(compiler);\n    return new CompilerPass() {\n      @Override\n      public void process(Node externs, Node root) {\n        (new MarkNoSideEffectCalls(compiler)).process(externs, root);\n        (new FlowSensitiveInlineVariables(compiler)).process(externs, root);\n      }\n    };\n  }\n",
        "begin_line": 42,
        "end_line": 52,
        "comment": "",
        "child_ranges": [
            "(line 45,col 5)-(line 51,col 6)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/FlowSensitiveInlineVariablesTest.java",
        "signature": "com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest.Anonymous-3efeadf2-621c-448a-9d7e-0c91496b0fb0.process(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "      @Override\n      public void process(Node externs, Node root) {\n        (new MarkNoSideEffectCalls(compiler)).process(externs, root);\n        (new FlowSensitiveInlineVariables(compiler)).process(externs, root);\n      }\n",
        "begin_line": 46,
        "end_line": 50,
        "comment": "",
        "child_ranges": [
            "(line 48,col 9)-(line 48,col 69)",
            "(line 49,col 9)-(line 49,col 76)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/FlowSensitiveInlineVariablesTest.java",
        "signature": "com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest.testSimpleAssign()",
        "snippet": "  public void testSimpleAssign() {\n    inline(\"var x; x = 1; print(x)\", \"var x; print(1)\");\n    inline(\"var x; x = 1; x\", \"var x; 1\");\n    inline(\"var x; x = 1; var a = x\", \"var x; var a = 1\");\n    inline(\"var x; x = 1; x = x + 1\", \"var x; x = 1 + 1\");\n  }\n",
        "begin_line": 54,
        "end_line": 59,
        "comment": "",
        "child_ranges": [
            "(line 55,col 5)-(line 55,col 56)",
            "(line 56,col 5)-(line 56,col 42)",
            "(line 57,col 5)-(line 57,col 58)",
            "(line 58,col 5)-(line 58,col 58)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/FlowSensitiveInlineVariablesTest.java",
        "signature": "com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest.testSimpleVar()",
        "snippet": "  public void testSimpleVar() {\n    inline(\"var x = 1; print(x)\", \"var x; print(1)\");\n    inline(\"var x = 1; x\", \"var x; 1\");\n    inline(\"var x = 1; var a = x\", \"var x; var a = 1\");\n    inline(\"var x = 1; x = x + 1\", \"var x; x = 1 + 1\");\n  }\n",
        "begin_line": 61,
        "end_line": 66,
        "comment": "",
        "child_ranges": [
            "(line 62,col 5)-(line 62,col 53)",
            "(line 63,col 5)-(line 63,col 39)",
            "(line 64,col 5)-(line 64,col 55)",
            "(line 65,col 5)-(line 65,col 55)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/FlowSensitiveInlineVariablesTest.java",
        "signature": "com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest.testSimpleForIn()",
        "snippet": "  public void testSimpleForIn() {\n    inline(\"var a,b,x = a in b; x\",\n           \"var a,b,x; a in b\");\n    noInline(\"var a, b; var x = a in b; print(1); x\");\n    noInline(\"var a,b,x = a in b; delete a[b]; x\");\n  }\n",
        "begin_line": 68,
        "end_line": 73,
        "comment": "",
        "child_ranges": [
            "(line 69,col 5)-(line 70,col 32)",
            "(line 71,col 5)-(line 71,col 54)",
            "(line 72,col 5)-(line 72,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/FlowSensitiveInlineVariablesTest.java",
        "signature": "com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest.testExported()",
        "snippet": "  public void testExported() {\n    noInline(\"var _x = 1; print(_x)\");\n  }\n",
        "begin_line": 75,
        "end_line": 77,
        "comment": "",
        "child_ranges": [
            "(line 76,col 5)-(line 76,col 38)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/FlowSensitiveInlineVariablesTest.java",
        "signature": "com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest.testDoNotInlineIncrement()",
        "snippet": "  public void testDoNotInlineIncrement() {\n    noInline(\"var x = 1; x++;\");\n    noInline(\"var x = 1; x--;\");\n  }\n",
        "begin_line": 79,
        "end_line": 82,
        "comment": "",
        "child_ranges": [
            "(line 80,col 5)-(line 80,col 32)",
            "(line 81,col 5)-(line 81,col 32)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/FlowSensitiveInlineVariablesTest.java",
        "signature": "com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest.testDoNotInlineAssignmentOp()",
        "snippet": "  public void testDoNotInlineAssignmentOp() {\n    noInline(\"var x = 1; x += 1;\");\n    noInline(\"var x = 1; x -= 1;\");\n  }\n",
        "begin_line": 84,
        "end_line": 87,
        "comment": "",
        "child_ranges": [
            "(line 85,col 5)-(line 85,col 35)",
            "(line 86,col 5)-(line 86,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/FlowSensitiveInlineVariablesTest.java",
        "signature": "com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest.testDoNotInlineIntoLhsOfAssign()",
        "snippet": "  public void testDoNotInlineIntoLhsOfAssign() {\n    noInline(\"var x = 1; x += 3;\");\n  }\n",
        "begin_line": 89,
        "end_line": 91,
        "comment": "",
        "child_ranges": [
            "(line 90,col 5)-(line 90,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/FlowSensitiveInlineVariablesTest.java",
        "signature": "com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest.testMultiUse()",
        "snippet": "  public void testMultiUse() {\n    noInline(\"var x; x = 1; print(x); print (x);\");\n  }\n",
        "begin_line": 93,
        "end_line": 95,
        "comment": "",
        "child_ranges": [
            "(line 94,col 5)-(line 94,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/FlowSensitiveInlineVariablesTest.java",
        "signature": "com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest.testMultiUseInSameCfgNode()",
        "snippet": "  public void testMultiUseInSameCfgNode() {\n    noInline(\"var x; x = 1; print(x) || print (x);\");\n  }\n",
        "begin_line": 97,
        "end_line": 99,
        "comment": "",
        "child_ranges": [
            "(line 98,col 5)-(line 98,col 53)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/FlowSensitiveInlineVariablesTest.java",
        "signature": "com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest.testMultiUseInTwoDifferentPath()",
        "snippet": "  public void testMultiUseInTwoDifferentPath() {\n    noInline(\"var x = 1; if (print) { print(x) } else { alert(x) }\");\n  }\n",
        "begin_line": 101,
        "end_line": 103,
        "comment": "",
        "child_ranges": [
            "(line 102,col 5)-(line 102,col 69)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/FlowSensitiveInlineVariablesTest.java",
        "signature": "com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest.testAssignmentBeforeDefinition()",
        "snippet": "  public void testAssignmentBeforeDefinition() {\n    inline(\"x = 1; var x = 0; print(x)\",\"x = 1; var x; print(0)\" );\n  }\n",
        "begin_line": 105,
        "end_line": 107,
        "comment": "",
        "child_ranges": [
            "(line 106,col 5)-(line 106,col 67)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/FlowSensitiveInlineVariablesTest.java",
        "signature": "com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest.testVarInConditionPath()",
        "snippet": "  public void testVarInConditionPath() {\n    noInline(\"if (foo) { var x = 0 } print(x)\");\n  }\n",
        "begin_line": 109,
        "end_line": 111,
        "comment": "",
        "child_ranges": [
            "(line 110,col 5)-(line 110,col 48)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/FlowSensitiveInlineVariablesTest.java",
        "signature": "com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest.testMultiDefinitionsBeforeUse()",
        "snippet": "  public void testMultiDefinitionsBeforeUse() {\n    inline(\"var x = 0; x = 1; print(x)\", \"var x = 0; print(1)\");\n  }\n",
        "begin_line": 113,
        "end_line": 115,
        "comment": "",
        "child_ranges": [
            "(line 114,col 5)-(line 114,col 64)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/FlowSensitiveInlineVariablesTest.java",
        "signature": "com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest.testMultiDefinitionsInSameCfgNode()",
        "snippet": "  public void testMultiDefinitionsInSameCfgNode() {\n    noInline(\"var x; (x = 1) || (x = 2); print(x)\");\n    noInline(\"var x; x = (1 || (x = 2)); print(x)\");\n    noInline(\"var x;(x = 1) && (x = 2); print(x)\");\n    noInline(\"var x;x = (1 && (x = 2)); print(x)\");\n    noInline(\"var x; x = 1 , x = 2; print(x)\");\n  }\n",
        "begin_line": 117,
        "end_line": 123,
        "comment": "",
        "child_ranges": [
            "(line 118,col 5)-(line 118,col 52)",
            "(line 119,col 5)-(line 119,col 52)",
            "(line 120,col 5)-(line 120,col 51)",
            "(line 121,col 5)-(line 121,col 51)",
            "(line 122,col 5)-(line 122,col 47)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/FlowSensitiveInlineVariablesTest.java",
        "signature": "com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest.testNotReachingDefinitions()",
        "snippet": "  public void testNotReachingDefinitions() {\n    noInline(\"var x; if (foo) { x = 0 } print (x)\");\n  }\n",
        "begin_line": 125,
        "end_line": 127,
        "comment": "",
        "child_ranges": [
            "(line 126,col 5)-(line 126,col 52)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/FlowSensitiveInlineVariablesTest.java",
        "signature": "com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest.testNoInlineLoopCarriedDefinition()",
        "snippet": "  public void testNoInlineLoopCarriedDefinition() {\n    // First print is undefined instead.\n    noInline(\"var x; while(true) { print(x); x = 1; }\");\n\n    // Prints 0 1 1 1 1....\n    noInline(\"var x = 0; while(true) { print(x); x = 1; }\");\n  }\n",
        "begin_line": 129,
        "end_line": 135,
        "comment": "",
        "child_ranges": [
            "(line 131,col 5)-(line 131,col 56)",
            "(line 134,col 5)-(line 134,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/FlowSensitiveInlineVariablesTest.java",
        "signature": "com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest.testDoNotExitLoop()",
        "snippet": "  public void testDoNotExitLoop() {\n    noInline(\"while (z) { var x = 3; } var y = x;\");\n  }\n",
        "begin_line": 137,
        "end_line": 139,
        "comment": "",
        "child_ranges": [
            "(line 138,col 5)-(line 138,col 52)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/FlowSensitiveInlineVariablesTest.java",
        "signature": "com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest.testDoNotInlineWithinLoop()",
        "snippet": "  public void testDoNotInlineWithinLoop() {\n    noInline(\"var y = noSFX(); do { var z = y.foo(); } while (true);\");\n  }\n",
        "begin_line": 141,
        "end_line": 143,
        "comment": "",
        "child_ranges": [
            "(line 142,col 5)-(line 142,col 71)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/FlowSensitiveInlineVariablesTest.java",
        "signature": "com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest.testDefinitionAfterUse()",
        "snippet": "  public void testDefinitionAfterUse() {\n    inline(\"var x = 0; print(x); x = 1\", \"var x; print(0); x = 1\");\n  }\n",
        "begin_line": 145,
        "end_line": 147,
        "comment": "",
        "child_ranges": [
            "(line 146,col 5)-(line 146,col 67)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/FlowSensitiveInlineVariablesTest.java",
        "signature": "com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest.testInlineSameVariableInStraightLine()",
        "snippet": "  public void testInlineSameVariableInStraightLine() {\n    inline(\"var x; x = 1; print(x); x = 2; print(x)\",\n        \"var x; print(1); print(2)\");\n  }\n",
        "begin_line": 149,
        "end_line": 152,
        "comment": "",
        "child_ranges": [
            "(line 150,col 5)-(line 151,col 37)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/FlowSensitiveInlineVariablesTest.java",
        "signature": "com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest.testInlineInDifferentPaths()",
        "snippet": "  public void testInlineInDifferentPaths() {\n    inline(\"var x; if (print) {x = 1; print(x)} else {x = 2; print(x)}\",\n        \"var x; if (print) {print(1)} else {print(2)}\");\n  }\n",
        "begin_line": 154,
        "end_line": 157,
        "comment": "",
        "child_ranges": [
            "(line 155,col 5)-(line 156,col 56)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/FlowSensitiveInlineVariablesTest.java",
        "signature": "com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest.testNoInlineInMergedPath()",
        "snippet": "  public void testNoInlineInMergedPath() {\n    noInline(\n        \"var x,y;x = 1;while(y) { if(y){ print(x) } else { x = 1 } } print(x)\");\n  }\n",
        "begin_line": 159,
        "end_line": 162,
        "comment": "",
        "child_ranges": [
            "(line 160,col 5)-(line 161,col 80)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/FlowSensitiveInlineVariablesTest.java",
        "signature": "com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest.testInlineIntoExpressions()",
        "snippet": "  public void testInlineIntoExpressions() {\n    inline(\"var x = 1; print(x + 1);\", \"var x; print(1 + 1)\");\n  }\n",
        "begin_line": 164,
        "end_line": 166,
        "comment": "",
        "child_ranges": [
            "(line 165,col 5)-(line 165,col 62)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/FlowSensitiveInlineVariablesTest.java",
        "signature": "com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest.testInlineExpressions1()",
        "snippet": "  public void testInlineExpressions1() {\n    inline(\"var a, b; var x = a+b; print(x)\", \"var a, b; var x; print(a+b)\");\n  }\n",
        "begin_line": 168,
        "end_line": 170,
        "comment": "",
        "child_ranges": [
            "(line 169,col 5)-(line 169,col 77)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/FlowSensitiveInlineVariablesTest.java",
        "signature": "com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest.testInlineExpressions2()",
        "snippet": "  public void testInlineExpressions2() {\n    // We can't inline because of the redefinition of \"a\".\n    noInline(\"var a, b; var x = a + b; a = 1; print(x)\");\n  }\n",
        "begin_line": 172,
        "end_line": 175,
        "comment": "",
        "child_ranges": [
            "(line 174,col 5)-(line 174,col 57)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/FlowSensitiveInlineVariablesTest.java",
        "signature": "com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest.testInlineExpressions3()",
        "snippet": "  public void testInlineExpressions3() {\n    inline(\"var a,b,x; x=a+b; x=a-b ; print(x)\",\n           \"var a,b,x; x=a+b; print(a-b)\");\n  }\n",
        "begin_line": 177,
        "end_line": 180,
        "comment": "",
        "child_ranges": [
            "(line 178,col 5)-(line 179,col 43)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/FlowSensitiveInlineVariablesTest.java",
        "signature": "com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest.testInlineExpressions4()",
        "snippet": "  public void testInlineExpressions4() {\n    // Precision is lost due to comma's.\n    noInline(\"var a,b,x; x=a+b, x=a-b; print(x)\");\n  }\n",
        "begin_line": 182,
        "end_line": 185,
        "comment": "",
        "child_ranges": [
            "(line 184,col 5)-(line 184,col 50)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/FlowSensitiveInlineVariablesTest.java",
        "signature": "com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest.testInlineExpressions5()",
        "snippet": "  public void testInlineExpressions5() {\n    noInline(\"var a; var x = a = 1; print(x)\");\n  }\n",
        "begin_line": 187,
        "end_line": 189,
        "comment": "",
        "child_ranges": [
            "(line 188,col 5)-(line 188,col 47)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/FlowSensitiveInlineVariablesTest.java",
        "signature": "com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest.testInlineExpressions6()",
        "snippet": "  public void testInlineExpressions6() {\n    noInline(\"var a, x; a = 1 + (x = 1); print(x)\");\n  }\n",
        "begin_line": 191,
        "end_line": 193,
        "comment": "",
        "child_ranges": [
            "(line 192,col 5)-(line 192,col 52)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/FlowSensitiveInlineVariablesTest.java",
        "signature": "com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest.testInlineExpression7()",
        "snippet": "  public void testInlineExpression7() {\n    // Possible side effects in foo() that might conflict with bar();\n    noInline(\"var x = foo() + 1; bar(); print(x)\");\n\n    // This is a possible case but we don't have analysis to prove this yet.\n    // TODO(user): It is possible to cover this case with the same algorithm\n    //                as the missing return check.\n    noInline(\"var x = foo() + 1; print(x)\");\n  }\n",
        "begin_line": 195,
        "end_line": 203,
        "comment": "",
        "child_ranges": [
            "(line 197,col 5)-(line 197,col 51)",
            "(line 202,col 5)-(line 202,col 44)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/FlowSensitiveInlineVariablesTest.java",
        "signature": "com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest.testInlineExpression8()",
        "snippet": "  public void testInlineExpression8() {\n    // The same variable inlined twice.\n    inline(\n        \"var a,b;\" +\n        \"var x = a + b; print(x);      x = a - b; print(x)\",\n        \"var a,b;\" +\n        \"var x;         print(a + b);             print(a - b)\");\n  }\n",
        "begin_line": 205,
        "end_line": 212,
        "comment": "",
        "child_ranges": [
            "(line 207,col 5)-(line 211,col 65)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/FlowSensitiveInlineVariablesTest.java",
        "signature": "com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest.testInlineExpression9()",
        "snippet": "  public void testInlineExpression9() {\n    // Check for actual control flow sensitivity.\n    inline(\n        \"var a,b;\" +\n        \"var x; if (g) { x= a + b; print(x)    }  x = a - b; print(x)\",\n        \"var a,b;\" +\n        \"var x; if (g) {           print(a + b)}             print(a - b)\");\n  }\n",
        "begin_line": 214,
        "end_line": 221,
        "comment": "",
        "child_ranges": [
            "(line 216,col 5)-(line 220,col 76)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/FlowSensitiveInlineVariablesTest.java",
        "signature": "com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest.testInlineExpression10()",
        "snippet": "  public void testInlineExpression10() {\n    // The DFA is not fine grain enough for this.\n    noInline(\"var x, y; x = ((y = 1), print(y))\");\n  }\n",
        "begin_line": 223,
        "end_line": 226,
        "comment": "",
        "child_ranges": [
            "(line 225,col 5)-(line 225,col 50)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/FlowSensitiveInlineVariablesTest.java",
        "signature": "com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest.testInlineExpressions11()",
        "snippet": "  public void testInlineExpressions11() {\n    inline(\"var x; x = x + 1; print(x)\", \"var x; print(x + 1)\");\n    noInline(\"var x; x = x + 1; print(x); print(x)\");\n  }\n",
        "begin_line": 228,
        "end_line": 231,
        "comment": "",
        "child_ranges": [
            "(line 229,col 5)-(line 229,col 64)",
            "(line 230,col 5)-(line 230,col 53)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/FlowSensitiveInlineVariablesTest.java",
        "signature": "com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest.testInlineExpressions12()",
        "snippet": "  public void testInlineExpressions12() {\n    // ++ is an assignment and considered to modify state so it will not be\n    // inlined.\n    noInline(\"var x = 10; x = c++; print(x)\");\n  }\n",
        "begin_line": 233,
        "end_line": 237,
        "comment": "",
        "child_ranges": [
            "(line 236,col 5)-(line 236,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/FlowSensitiveInlineVariablesTest.java",
        "signature": "com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest.testInlineExpressions13()",
        "snippet": "  public void testInlineExpressions13() {\n    inline(\"var a = 1, b = 2;\" +\n           \"var x = a;\" +\n           \"var y = b;\" +\n           \"var z = x + y;\" +\n           \"var i = z;\" +\n           \"var j = z + y;\" +\n           \"var k = i;\",\n\n           \"var a, b;\" +\n           \"var x;\" +\n           \"var y = 2;\" +\n           \"var z = 1 + y;\" +\n           \"var i;\" +\n           \"var j = z + y;\" +\n           \"var k = z;\");\n  }\n",
        "begin_line": 239,
        "end_line": 255,
        "comment": "",
        "child_ranges": [
            "(line 240,col 5)-(line 254,col 25)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/FlowSensitiveInlineVariablesTest.java",
        "signature": "com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest.testNoInlineIfDefinitionMayNotReach()",
        "snippet": "  public void testNoInlineIfDefinitionMayNotReach() {\n    noInline(\"var x; if (x=1) {} x;\");\n  }\n",
        "begin_line": 257,
        "end_line": 259,
        "comment": "",
        "child_ranges": [
            "(line 258,col 5)-(line 258,col 38)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/FlowSensitiveInlineVariablesTest.java",
        "signature": "com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest.testNoInlineEscapedToInnerFunction()",
        "snippet": "  public void testNoInlineEscapedToInnerFunction() {\n    noInline(\"var x = 1; function foo() { x = 2 }; print(x)\");\n  }\n",
        "begin_line": 261,
        "end_line": 263,
        "comment": "",
        "child_ranges": [
            "(line 262,col 5)-(line 262,col 62)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/FlowSensitiveInlineVariablesTest.java",
        "signature": "com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest.testNoInlineLValue()",
        "snippet": "  public void testNoInlineLValue() {\n    noInline(\"var x; if (x = 1) { print(x) }\");\n  }\n",
        "begin_line": 265,
        "end_line": 267,
        "comment": "",
        "child_ranges": [
            "(line 266,col 5)-(line 266,col 47)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/FlowSensitiveInlineVariablesTest.java",
        "signature": "com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest.testSwitchCase()",
        "snippet": "  public void testSwitchCase() {\n    inline(\"var x = 1; switch(x) { }\", \"var x; switch(1) { }\");\n  }\n",
        "begin_line": 269,
        "end_line": 271,
        "comment": "",
        "child_ranges": [
            "(line 270,col 5)-(line 270,col 63)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/FlowSensitiveInlineVariablesTest.java",
        "signature": "com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest.testShadowedVariableInnerFunction()",
        "snippet": "  public void testShadowedVariableInnerFunction() {\n    inline(\"var x = 1; print(x) || (function() {  var x; x = 1; print(x)})()\",\n        \"var x; print(1) || (function() {  var x; print(1)})()\");\n  }\n",
        "begin_line": 273,
        "end_line": 276,
        "comment": "",
        "child_ranges": [
            "(line 274,col 5)-(line 275,col 65)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/FlowSensitiveInlineVariablesTest.java",
        "signature": "com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest.testCatch()",
        "snippet": "  public void testCatch() {\n    noInline(\"var x = 0; try { } catch (x) { }\");\n    noInline(\"try { } catch (x) { print(x) }\");\n  }\n",
        "begin_line": 278,
        "end_line": 281,
        "comment": "",
        "child_ranges": [
            "(line 279,col 5)-(line 279,col 49)",
            "(line 280,col 5)-(line 280,col 47)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/FlowSensitiveInlineVariablesTest.java",
        "signature": "com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest.testNoInlineGetProp()",
        "snippet": "  public void testNoInlineGetProp() {\n    // We don't know if j alias a.b\n    noInline(\"var x = a.b.c; j.c = 1; print(x);\");\n  }\n",
        "begin_line": 283,
        "end_line": 286,
        "comment": "",
        "child_ranges": [
            "(line 285,col 5)-(line 285,col 50)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/FlowSensitiveInlineVariablesTest.java",
        "signature": "com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest.testNoInlineGetProp2()",
        "snippet": "  public void testNoInlineGetProp2() {\n    noInline(\"var x = 1 * a.b.c; j.c = 1; print(x);\");\n  }\n",
        "begin_line": 288,
        "end_line": 290,
        "comment": "",
        "child_ranges": [
            "(line 289,col 5)-(line 289,col 54)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/FlowSensitiveInlineVariablesTest.java",
        "signature": "com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest.testNoInlineGetProp3()",
        "snippet": "  public void testNoInlineGetProp3() {\n    // Anything inside a function is fine.\n    inline(\"var x = function(){1 * a.b.c}; print(x);\",\n           \"var x; print(function(){1 * a.b.c});\");\n  }\n",
        "begin_line": 292,
        "end_line": 296,
        "comment": "",
        "child_ranges": [
            "(line 294,col 5)-(line 295,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/FlowSensitiveInlineVariablesTest.java",
        "signature": "com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest.testNoInlineGetEle()",
        "snippet": "  public void testNoInlineGetEle() {\n    // Again we don't know if i = j\n    noInline(\"var x = a[i]; a[j] = 2; print(x); \");\n  }\n",
        "begin_line": 298,
        "end_line": 301,
        "comment": "",
        "child_ranges": [
            "(line 300,col 5)-(line 300,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/FlowSensitiveInlineVariablesTest.java",
        "signature": "com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest.testNoInlineConstructors()",
        "snippet": "  public void testNoInlineConstructors() {\n    noInline(\"var x = new Iterator(); x.next();\");\n  }\n",
        "begin_line": 304,
        "end_line": 306,
        "comment": " TODO(user): These should be inlinable.",
        "child_ranges": [
            "(line 305,col 5)-(line 305,col 50)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/FlowSensitiveInlineVariablesTest.java",
        "signature": "com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest.testNoInlineArrayLits()",
        "snippet": "  public void testNoInlineArrayLits() {\n    noInline(\"var x = []; print(x)\");\n  }\n",
        "begin_line": 309,
        "end_line": 311,
        "comment": " TODO(user): These should be inlinable.",
        "child_ranges": [
            "(line 310,col 5)-(line 310,col 37)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/FlowSensitiveInlineVariablesTest.java",
        "signature": "com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest.testNoInlineObjectLits()",
        "snippet": "  public void testNoInlineObjectLits() {\n    noInline(\"var x = {}; print(x)\");\n  }\n",
        "begin_line": 314,
        "end_line": 316,
        "comment": " TODO(user): These should be inlinable.",
        "child_ranges": [
            "(line 315,col 5)-(line 315,col 37)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/FlowSensitiveInlineVariablesTest.java",
        "signature": "com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest.testNoInlineRegExpLits()",
        "snippet": "  public void testNoInlineRegExpLits() {\n    noInline(\"var x = /y/; print(x)\");\n  }\n",
        "begin_line": 319,
        "end_line": 321,
        "comment": " TODO(user): These should be inlinable after the REGEX checks.",
        "child_ranges": [
            "(line 320,col 5)-(line 320,col 38)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/FlowSensitiveInlineVariablesTest.java",
        "signature": "com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest.testInlineConstructorCallsIntoLoop()",
        "snippet": "  public void testInlineConstructorCallsIntoLoop() {\n    // Don't inline construction into loops.\n    noInline(\"var x = new Iterator();\" +\n             \"for(i = 0; i < 10; i++) {j = x.next()}\");\n  }\n",
        "begin_line": 323,
        "end_line": 327,
        "comment": "",
        "child_ranges": [
            "(line 325,col 5)-(line 326,col 55)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/FlowSensitiveInlineVariablesTest.java",
        "signature": "com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest.testRemoveWithLabels()",
        "snippet": "  public void testRemoveWithLabels() {\n    inline(\"var x = 1; L: x = 2; print(x)\", \"var x = 1; L:{} print(2)\");\n    inline(\"var x = 1; L: M: x = 2; print(x)\", \"var x = 1; L:M:{} print(2)\");\n    inline(\"var x = 1; L: M: N: x = 2; print(x)\",\n           \"var x = 1; L:M:N:{} print(2)\");\n  }\n",
        "begin_line": 329,
        "end_line": 334,
        "comment": "",
        "child_ranges": [
            "(line 330,col 5)-(line 330,col 72)",
            "(line 331,col 5)-(line 331,col 77)",
            "(line 332,col 5)-(line 333,col 43)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/FlowSensitiveInlineVariablesTest.java",
        "signature": "com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest.testInlineAcrossSideEffect1()",
        "snippet": "  public void testInlineAcrossSideEffect1() {\n    // This can't be inlined because print() has side-effects and might change\n    // the definition of noSFX.\n    //\n    // noSFX must be both const and pure in order to inline it.\n    noInline(\"var y; var x = noSFX(y); print(x)\");\n    //inline(\"var y; var x = noSFX(y); print(x)\", \"var y;var x;print(noSFX(y))\");\n  }\n",
        "begin_line": 336,
        "end_line": 343,
        "comment": "",
        "child_ranges": [
            "(line 341,col 5)-(line 341,col 50)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/FlowSensitiveInlineVariablesTest.java",
        "signature": "com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest.testInlineAcrossSideEffect2()",
        "snippet": "  public void testInlineAcrossSideEffect2() {\n    // Think noSFX() as a function that reads y.foo and return it\n    // and SFX() write some new value of y.foo. If that's the case,\n    // inlining across hasSFX() is not valid.\n\n    // This is a case where hasSFX is right of the source of the inlining.\n    noInline(\"var y; var x = noSFX(y), z = hasSFX(y); print(x)\");\n    noInline(\"var y; var x = noSFX(y), z = new hasSFX(y); print(x)\");\n    noInline(\"var y; var x = new noSFX(y), z = new hasSFX(y); print(x)\");\n  }\n",
        "begin_line": 345,
        "end_line": 354,
        "comment": "",
        "child_ranges": [
            "(line 351,col 5)-(line 351,col 65)",
            "(line 352,col 5)-(line 352,col 69)",
            "(line 353,col 5)-(line 353,col 73)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/FlowSensitiveInlineVariablesTest.java",
        "signature": "com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest.testInlineAcrossSideEffect3()",
        "snippet": "  public void testInlineAcrossSideEffect3() {\n    // This is a case where hasSFX is left of the destination of the inlining.\n    noInline(\"var y; var x = noSFX(y); hasSFX(y), print(x)\");\n    noInline(\"var y; var x = noSFX(y); new hasSFX(y), print(x)\");\n    noInline(\"var y; var x = new noSFX(y); new hasSFX(y), print(x)\");\n  }\n",
        "begin_line": 356,
        "end_line": 361,
        "comment": "",
        "child_ranges": [
            "(line 358,col 5)-(line 358,col 61)",
            "(line 359,col 5)-(line 359,col 65)",
            "(line 360,col 5)-(line 360,col 69)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/FlowSensitiveInlineVariablesTest.java",
        "signature": "com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest.testInlineAcrossSideEffect4()",
        "snippet": "  public void testInlineAcrossSideEffect4() {\n    // This is a case where hasSFX is some control flow path between the\n    // source and its destination.\n    noInline(\"var y; var x = noSFX(y); hasSFX(y); print(x)\");\n    noInline(\"var y; var x = noSFX(y); new hasSFX(y); print(x)\");\n    noInline(\"var y; var x = new noSFX(y); new hasSFX(y); print(x)\");\n  }\n",
        "begin_line": 363,
        "end_line": 369,
        "comment": "",
        "child_ranges": [
            "(line 366,col 5)-(line 366,col 61)",
            "(line 367,col 5)-(line 367,col 65)",
            "(line 368,col 5)-(line 368,col 69)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/FlowSensitiveInlineVariablesTest.java",
        "signature": "com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest.testCanInlineAcrossNoSideEffect()",
        "snippet": "  public void testCanInlineAcrossNoSideEffect() {\n    // This can't be inlined because print() has side-effects and might change\n    // the definition of noSFX. We should be able to mark noSFX as const\n    // in some way.\n    noInline(\n        \"var y; var x = noSFX(y), z = noSFX(); noSFX(); noSFX(), print(x)\");\n    //inline(\n    //    \"var y; var x = noSFX(y), z = noSFX(); noSFX(); noSFX(), print(x)\",\n    //    \"var y; var x, z = noSFX(); noSFX(); noSFX(), print(noSFX(y))\");\n  }\n",
        "begin_line": 371,
        "end_line": 380,
        "comment": "",
        "child_ranges": [
            "(line 375,col 5)-(line 376,col 76)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/FlowSensitiveInlineVariablesTest.java",
        "signature": "com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest.testDependOnOuterScopeVariables()",
        "snippet": "  public void testDependOnOuterScopeVariables() {\n    noInline(\"var x; function foo() { var y = x; x = 0; print(y) }\");\n    noInline(\"var x; function foo() { var y = x; x++; print(y) }\");\n\n    // Sadly, we don't understand the data flow of outer scoped variables as\n    // it can be modified by code outside of this scope. We can't inline\n    // at all if the definition has dependence on such variable.\n    noInline(\"var x; function foo() { var y = x; print(y) }\");\n  }\n",
        "begin_line": 382,
        "end_line": 390,
        "comment": "",
        "child_ranges": [
            "(line 383,col 5)-(line 383,col 69)",
            "(line 384,col 5)-(line 384,col 67)",
            "(line 389,col 5)-(line 389,col 62)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/FlowSensitiveInlineVariablesTest.java",
        "signature": "com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest.testInlineIfNameIsLeftSideOfAssign()",
        "snippet": "  public void testInlineIfNameIsLeftSideOfAssign() {\n    inline(\"var x = 1; x = print(x) + 1\", \"var x; x = print(1) + 1\");\n    inline(\"var x = 1; L: x = x + 2\", \"var x; L: x = 1 + 2\");\n    inline(\"var x = 1; x = (x = x + 1)\", \"var x; x = (x = 1 + 1)\");\n\n    noInline(\"var x = 1; x = (x = (x = 10) + x)\");\n    noInline(\"var x = 1; x = (f(x) + (x = 10) + x);\");\n    noInline(\"var x = 1; x=-1,foo(x)\");\n    noInline(\"var x = 1; x-=1,foo(x)\");\n  }\n",
        "begin_line": 392,
        "end_line": 401,
        "comment": "",
        "child_ranges": [
            "(line 393,col 5)-(line 393,col 69)",
            "(line 394,col 5)-(line 394,col 61)",
            "(line 395,col 5)-(line 395,col 67)",
            "(line 397,col 5)-(line 397,col 50)",
            "(line 398,col 5)-(line 398,col 54)",
            "(line 399,col 5)-(line 399,col 39)",
            "(line 400,col 5)-(line 400,col 39)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/FlowSensitiveInlineVariablesTest.java",
        "signature": "com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest.testInlineArguments()",
        "snippet": "  public void testInlineArguments() {\n    testSame(\"function _func(x) { print(x) }\");\n    testSame(\"function _func(x,y) { if(y) { x = 1 }; print(x) }\");\n\n    test(\"function f(x, y) { x = 1; print(x) }\",\n         \"function f(x, y) { print(1) }\");\n\n    test(\"function f(x, y) { if (y) { x = 1; print(x) }}\",\n         \"function f(x, y) { if (y) { print(1) }}\");\n  }\n",
        "begin_line": 403,
        "end_line": 412,
        "comment": "",
        "child_ranges": [
            "(line 404,col 5)-(line 404,col 47)",
            "(line 405,col 5)-(line 405,col 66)",
            "(line 407,col 5)-(line 408,col 42)",
            "(line 410,col 5)-(line 411,col 52)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/FlowSensitiveInlineVariablesTest.java",
        "signature": "com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest.testInvalidInlineArguments1()",
        "snippet": "  public void testInvalidInlineArguments1() {\n    testSame(\"function f(x, y) { x = 1; arguments[0] = 2; print(x) }\");\n    testSame(\"function f(x, y) { x = 1; var z = arguments;\" +\n        \"z[0] = 2; z[1] = 3; print(x)}\");\n    testSame(\"function g(a){a[0]=2} function f(x){x=1;g(arguments);print(x)}\");\n  }\n",
        "begin_line": 414,
        "end_line": 419,
        "comment": "",
        "child_ranges": [
            "(line 415,col 5)-(line 415,col 71)",
            "(line 416,col 5)-(line 417,col 41)",
            "(line 418,col 5)-(line 418,col 79)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/FlowSensitiveInlineVariablesTest.java",
        "signature": "com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest.testInvalidInlineArguments2()",
        "snippet": "  public void testInvalidInlineArguments2() {\n    testSame(\"function f(c) {var f = c; arguments[0] = this;\" +\n             \"f.apply(this, arguments); return this;}\");\n  }\n",
        "begin_line": 421,
        "end_line": 424,
        "comment": "",
        "child_ranges": [
            "(line 422,col 5)-(line 423,col 56)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/FlowSensitiveInlineVariablesTest.java",
        "signature": "com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest.testForIn()",
        "snippet": "  public void testForIn() {\n    noInline(\"var x; var y = {}; for(x in y){}\");\n    noInline(\"var x; var y = {}; var z; for(x in z = y){print(z)}\");\n    noInline(\"var x; var y = {}; var z; for(x in y){print(z)}\");\n\n  }\n",
        "begin_line": 426,
        "end_line": 431,
        "comment": "",
        "child_ranges": [
            "(line 427,col 5)-(line 427,col 49)",
            "(line 428,col 5)-(line 428,col 68)",
            "(line 429,col 5)-(line 429,col 64)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/FlowSensitiveInlineVariablesTest.java",
        "signature": "com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest.testNotOkToSkipCheckPathBetweenNodes()",
        "snippet": "  public void testNotOkToSkipCheckPathBetweenNodes() {\n    noInline(\"var x; for(x = 1; foo(x);) {}\");\n    noInline(\"var x; for(; x = 1;foo(x)) {}\");\n  }\n",
        "begin_line": 433,
        "end_line": 436,
        "comment": "",
        "child_ranges": [
            "(line 434,col 5)-(line 434,col 46)",
            "(line 435,col 5)-(line 435,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/FlowSensitiveInlineVariablesTest.java",
        "signature": "com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest.testIssue698()",
        "snippet": "  public void testIssue698() {\n    // Most of the flow algorithms operate on Vars. We want to make\n    // sure the algorithm bails out appropriately if it sees\n    // a var that it doesn't know about.\n    inline(\n        \"var x = ''; \"\n        + \"unknown.length < 2 && (unknown='0' + unknown);\"\n        + \"x = x + unknown; \"\n        + \"unknown.length < 3 && (unknown='0' + unknown);\"\n        + \"x = x + unknown; \"\n        + \"return x;\",\n        \"var x; \"\n        + \"unknown.length < 2 && (unknown='0' + unknown);\"\n        + \"x = '' + unknown; \"\n        + \"unknown.length < 3 && (unknown='0' + unknown);\"\n        + \"x = x + unknown; \"\n        + \"return x;\");\n  }\n",
        "begin_line": 438,
        "end_line": 455,
        "comment": "",
        "child_ranges": [
            "(line 442,col 5)-(line 454,col 23)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/FlowSensitiveInlineVariablesTest.java",
        "signature": "com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest.testIssue777()",
        "snippet": "  public void testIssue777() {\n    test(\n        \"function f(cmd, ta) {\" +\n        \"  var temp = cmd;\" +\n        \"  var temp2 = temp >> 2;\" +\n        \"  cmd = STACKTOP;\" +\n        \"  for (var src = temp2, dest = cmd >> 2, stop = src + 37;\" +\n        \"       src < stop;\" +\n        \"       src++, dest++) {\" +\n        \"    HEAP32[dest] = HEAP32[src];\" +\n        \"  }\" +\n        \"  temp = ta;\" +\n        \"  temp2 = temp >> 2;\" +\n        \"  ta = STACKTOP;\" +\n        \"  STACKTOP += 8;\" +\n        \"  HEAP32[ta >> 2] = HEAP32[temp2];\" +\n        \"  HEAP32[ta + 4 >> 2] = HEAP32[temp2 + 1];\" +\n        \"}\",\n        \"function f(cmd, ta){\" +\n        \"  var temp;\" +\n        \"  var temp2 = cmd >> 2;\" +\n        \"  cmd = STACKTOP;\" +\n        \"  var src = temp2;\" +\n        \"  var dest = cmd >> 2;\" +\n        \"  var stop = src + 37;\" +\n        \"  for(;src<stop;src++,dest++)HEAP32[dest]=HEAP32[src];\" +\n        \"  temp2 = ta >> 2;\" +\n        \"  ta = STACKTOP;\" +\n        \"  STACKTOP += 8;\" +\n        \"  HEAP32[ta>>2] = HEAP32[temp2];\" +\n        \"  HEAP32[ta+4>>2] = HEAP32[temp2+1];\" +\n        \"}\");\n  }\n",
        "begin_line": 457,
        "end_line": 489,
        "comment": "",
        "child_ranges": [
            "(line 458,col 5)-(line 488,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/FlowSensitiveInlineVariablesTest.java",
        "signature": "com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest.testTransitiveDependencies1()",
        "snippet": "  public void testTransitiveDependencies1() {\n    test(\n        \"function f(x) { var a = x; var b = a; x = 3; return b; }\",\n        \"function f(x) { var a;     var b = x; x = 3; return b; }\");\n  }\n",
        "begin_line": 491,
        "end_line": 495,
        "comment": "",
        "child_ranges": [
            "(line 492,col 5)-(line 494,col 68)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/FlowSensitiveInlineVariablesTest.java",
        "signature": "com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest.testTransitiveDependencies2()",
        "snippet": "  public void testTransitiveDependencies2() {\n    test(\n        \"function f(x) { var a = x; var b = a; var c = b; x = 3; return c; }\",\n        \"function f(x) { var a    ; var b = x; var c    ; x = 3; return b; }\");\n  }\n",
        "begin_line": 497,
        "end_line": 501,
        "comment": "",
        "child_ranges": [
            "(line 498,col 5)-(line 500,col 79)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/FlowSensitiveInlineVariablesTest.java",
        "signature": "com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest.testIssue794a()",
        "snippet": "  public void testIssue794a() {\n    noInline(\n        \"var x = 1; \" +\n        \"try { x += someFunction(); } catch (e) {}\" +\n        \"x += 1;\" +\n        \"try { x += someFunction(); } catch (e) {}\" +\n        \"return x;\");\n  }\n",
        "begin_line": 503,
        "end_line": 510,
        "comment": "",
        "child_ranges": [
            "(line 504,col 5)-(line 509,col 21)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/FlowSensitiveInlineVariablesTest.java",
        "signature": "com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest.testIssue794b()",
        "snippet": "  public void testIssue794b() {\n    noInline(\n        \"var x = 1; \" +\n        \"try { x = x + someFunction(); } catch (e) {}\" +\n        \"x = x + 1;\" +\n        \"try { x = x + someFunction(); } catch (e) {}\" +\n        \"return x;\");\n  }\n",
        "begin_line": 512,
        "end_line": 519,
        "comment": "",
        "child_ranges": [
            "(line 513,col 5)-(line 518,col 21)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/FlowSensitiveInlineVariablesTest.java",
        "signature": "com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest.noInline(java.lang.String)",
        "snippet": "  private void noInline(String input) {\n    inline(input, input);\n  }\n",
        "begin_line": 521,
        "end_line": 523,
        "comment": "",
        "child_ranges": [
            "(line 522,col 5)-(line 522,col 25)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/FlowSensitiveInlineVariablesTest.java",
        "signature": "com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest.inline(java.lang.String, java.lang.String)",
        "snippet": "  private void inline(String input, String expected) {\n    test(EXTERN_FUNCTIONS, \"function _func() {\" + input + \"}\",\n        \"function _func() {\" + expected + \"}\", null, null);\n  }\n",
        "begin_line": 525,
        "end_line": 528,
        "comment": "",
        "child_ranges": [
            "(line 526,col 5)-(line 527,col 59)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.CompilerTestCase(java.lang.String, boolean)",
        "snippet": "  protected CompilerTestCase(String externs, boolean compareAsTree) {\n    this.externsInputs = ImmutableList.of(\n        SourceFile.fromCode(\"externs\", externs));\n    this.compareAsTree = compareAsTree;\n    this.parseTypeInfo = false;\n  }\n",
        "begin_line": 126,
        "end_line": 131,
        "comment": "\n   * Constructs a test.\n   *\n   * @param externs Externs JS as a string\n   * @param compareAsTree True to compare output & expected as a node tree.\n   *     99% of the time you want to compare as a tree. There are a few\n   *     special cases where you don't, like if you want to test the code\n   *     printing of \"unnatural\" syntax trees. For example,\n   *\n   * <pre>\n   * IF\n   *   IF\n   *     STATEMENT\n   * ELSE\n   *   STATEMENT\n   * </pre>\n   ",
        "child_ranges": [
            "(line 127,col 5)-(line 128,col 49)",
            "(line 129,col 5)-(line 129,col 39)",
            "(line 130,col 5)-(line 130,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.CompilerTestCase(java.lang.String)",
        "snippet": "  protected CompilerTestCase(String externs) {\n    this(externs, true);\n  }\n",
        "begin_line": 137,
        "end_line": 139,
        "comment": "\n   * Constructs a test. Uses AST comparison.\n   * @param externs Externs JS as a string\n   ",
        "child_ranges": [
            "(line 138,col 5)-(line 138,col 24)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.CompilerTestCase()",
        "snippet": "  protected CompilerTestCase() {\n    this(\"\", true);\n  }\n",
        "begin_line": 144,
        "end_line": 146,
        "comment": "\n   * Constructs a test. Uses AST comparison and no externs.\n   ",
        "child_ranges": [
            "(line 145,col 5)-(line 145,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.getProcessor(com.google.javascript.jscomp.Compiler)",
        "snippet": "  protected abstract CompilerPass getProcessor(Compiler compiler);\n",
        "begin_line": 154,
        "end_line": 154,
        "comment": "\n   * Gets the compiler pass instance to use for a test.\n   *\n   * @param compiler The compiler\n   * @return The pass to test\n   ",
        "child_ranges": []
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.getOptions()",
        "snippet": "  protected CompilerOptions getOptions() {\n    return getOptions(new CompilerOptions());\n  }\n",
        "begin_line": 161,
        "end_line": 163,
        "comment": "\n   * Gets the compiler options to use for this test. Use getProcessor to\n   * determine what passes should be run.\n   ",
        "child_ranges": [
            "(line 162,col 5)-(line 162,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.getOptions(com.google.javascript.jscomp.CompilerOptions)",
        "snippet": "  protected CompilerOptions getOptions(CompilerOptions options) {\n    if (this.acceptES5) {\n      options.setLanguageIn(LanguageMode.ECMASCRIPT5);\n    }\n\n    // This doesn't affect whether checkSymbols is run--it just affects\n    // whether variable warnings are filtered.\n    options.checkSymbols = true;\n\n    options.setWarningLevel(\n        DiagnosticGroups.MISSING_PROPERTIES, CheckLevel.WARNING);\n    options.setCodingConvention(getCodingConvention());\n    return options;\n  }\n",
        "begin_line": 169,
        "end_line": 182,
        "comment": "\n   * Gets the compiler options to use for this test. Use getProcessor to\n   * determine what passes should be run.\n   ",
        "child_ranges": [
            "(line 170,col 5)-(line 172,col 5)",
            "(line 176,col 5)-(line 176,col 32)",
            "(line 178,col 5)-(line 179,col 65)",
            "(line 180,col 5)-(line 180,col 55)",
            "(line 181,col 5)-(line 181,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.getCodingConvention()",
        "snippet": "  protected CodingConvention getCodingConvention() {\n    return new GoogleCodingConvention();\n  }\n",
        "begin_line": 184,
        "end_line": 186,
        "comment": "",
        "child_ranges": [
            "(line 185,col 5)-(line 185,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.setFilename(java.lang.String)",
        "snippet": "  public void setFilename(String filename) {\n    this.filename = filename;\n  }\n",
        "begin_line": 188,
        "end_line": 190,
        "comment": "",
        "child_ranges": [
            "(line 189,col 5)-(line 189,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.getNumRepetitions()",
        "snippet": "  protected int getNumRepetitions() {\n    // Since most compiler passes should be idempotent, we run each pass twice\n    // by default.\n    return 2;\n  }\n",
        "begin_line": 196,
        "end_line": 200,
        "comment": "\n   * Returns the number of times the pass should be run before results are\n   * verified.\n   ",
        "child_ranges": [
            "(line 199,col 5)-(line 199,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.allowSourcelessWarnings()",
        "snippet": "  void allowSourcelessWarnings() {\n    allowSourcelessWarnings = true;\n  }\n",
        "begin_line": 203,
        "end_line": 205,
        "comment": " Expect warnings without source information. ",
        "child_ranges": [
            "(line 204,col 5)-(line 204,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.getLastCompiler()",
        "snippet": "  Compiler getLastCompiler() {\n    return lastCompiler;\n  }\n",
        "begin_line": 208,
        "end_line": 210,
        "comment": " The most recently used JSComp instance. ",
        "child_ranges": [
            "(line 209,col 5)-(line 209,col 24)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.enableEcmaScript5(boolean)",
        "snippet": "  protected void enableEcmaScript5(boolean acceptES5) {\n    this.acceptES5 = acceptES5;\n  }\n",
        "begin_line": 215,
        "end_line": 217,
        "comment": "\n   * Whether to allow ECMASCRIPT5 source parsing.\n   ",
        "child_ranges": [
            "(line 216,col 5)-(line 216,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.allowExternsChanges(boolean)",
        "snippet": "  protected void allowExternsChanges(boolean allowExternsChanges) {\n    this.allowExternsChanges = allowExternsChanges;\n  }\n",
        "begin_line": 222,
        "end_line": 224,
        "comment": "\n   * Whether to allow externs changes.\n   ",
        "child_ranges": [
            "(line 223,col 5)-(line 223,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.enableTypeCheck(com.google.javascript.jscomp.CheckLevel)",
        "snippet": "  public void enableTypeCheck(CheckLevel level) {\n    typeCheckEnabled  = true;\n    typeCheckLevel = level;\n  }\n",
        "begin_line": 234,
        "end_line": 237,
        "comment": "\n   * Perform type checking before running the test pass. This will check\n   * for type errors and annotate nodes with type information.\n   *\n   * @param level the level of severity to report for type errors\n   *\n   * @see TypeCheck\n   ",
        "child_ranges": [
            "(line 235,col 5)-(line 235,col 29)",
            "(line 236,col 5)-(line 236,col 27)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.enableLineNumberCheck(boolean)",
        "snippet": "  public void enableLineNumberCheck(boolean newVal) {\n    checkLineNumbers = newVal;\n  }\n",
        "begin_line": 242,
        "end_line": 244,
        "comment": "\n   * Check to make sure that line numbers were preserved.\n   ",
        "child_ranges": [
            "(line 243,col 5)-(line 243,col 30)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.disableTypeCheck()",
        "snippet": "  void disableTypeCheck() {\n    typeCheckEnabled  = false;\n  }\n",
        "begin_line": 251,
        "end_line": 253,
        "comment": "\n   * Do not run type checking before running the test pass.\n   *\n   * @see TypeCheck\n   ",
        "child_ranges": [
            "(line 252,col 5)-(line 252,col 30)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.enableClosurePass()",
        "snippet": "  void enableClosurePass() {\n    closurePassEnabled = true;\n  }\n",
        "begin_line": 259,
        "end_line": 261,
        "comment": " TODO(nicksantos): Fix other passes to use this when appropriate.",
        "child_ranges": [
            "(line 260,col 5)-(line 260,col 30)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.enableNormalize()",
        "snippet": "  protected void enableNormalize() {\n    enableNormalize(true);\n  }\n",
        "begin_line": 269,
        "end_line": 271,
        "comment": "\n   * Perform AST normalization before running the test pass, and anti-normalize\n   * after running it.\n   *\n   * @see Normalize\n   ",
        "child_ranges": [
            "(line 270,col 5)-(line 270,col 26)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.enableNormalize(boolean)",
        "snippet": "  protected void enableNormalize(boolean normalizeExpected) {\n    normalizeEnabled = true;\n    this.normalizeExpected = normalizeExpected;\n  }\n",
        "begin_line": 281,
        "end_line": 284,
        "comment": "\n   * Perform AST normalization before running the test pass, and anti-normalize\n   * after running it.\n   *\n   * @param normalizeExpected Whether to perform normalization on the\n   * expected JS result.\n   * @see Normalize\n   ",
        "child_ranges": [
            "(line 282,col 5)-(line 282,col 28)",
            "(line 283,col 5)-(line 283,col 47)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.disableNormalize()",
        "snippet": "  protected void disableNormalize() {\n    normalizeEnabled = false;\n  }\n",
        "begin_line": 290,
        "end_line": 292,
        "comment": "\n   * Don't perform AST normalization before running the test pass.\n   * @see Normalize\n   ",
        "child_ranges": [
            "(line 291,col 5)-(line 291,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.enableMarkNoSideEffects()",
        "snippet": "  void enableMarkNoSideEffects() {\n    markNoSideEffects  = true;\n  }\n",
        "begin_line": 299,
        "end_line": 301,
        "comment": "\n   * Run the MarkSideEffectCalls pass before running the test pass.\n   *\n   * @see MarkNoSideEffectCalls\n   ",
        "child_ranges": [
            "(line 300,col 5)-(line 300,col 30)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.enableAstValidation(boolean)",
        "snippet": "  protected void enableAstValidation(boolean validate) {\n    astValidationEnabled = validate;\n  }\n",
        "begin_line": 306,
        "end_line": 308,
        "comment": "\n   * Whether to allow Validate the AST after each run of the pass.\n   ",
        "child_ranges": [
            "(line 307,col 5)-(line 307,col 36)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.createTypeCheck(com.google.javascript.jscomp.Compiler, com.google.javascript.jscomp.CheckLevel)",
        "snippet": "  private static TypeCheck createTypeCheck(Compiler compiler,\n      CheckLevel level) {\n    ReverseAbstractInterpreter rai =\n        new SemanticReverseAbstractInterpreter(compiler.getCodingConvention(),\n            compiler.getTypeRegistry());\n\n    return new TypeCheck(compiler, rai, compiler.getTypeRegistry(),\n        level, CheckLevel.OFF);\n  }\n",
        "begin_line": 311,
        "end_line": 319,
        "comment": " Returns a newly created TypeCheck. ",
        "child_ranges": [
            "(line 313,col 5)-(line 315,col 40)",
            "(line 317,col 5)-(line 318,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.lang.String, java.lang.String)",
        "snippet": "  public void test(String js, String expected) {\n    test(js, expected, (DiagnosticType) null);\n  }\n",
        "begin_line": 327,
        "end_line": 329,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output.\n   *\n   * @param js Input\n   * @param expected Expected JS output\n   ",
        "child_ranges": [
            "(line 328,col 5)-(line 328,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.lang.String, java.lang.String, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void test(String js, String expected, DiagnosticType error) {\n    test(js, expected, error, null);\n  }\n",
        "begin_line": 339,
        "end_line": 341,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output,\n   * or that an expected error is encountered.\n   *\n   * @param js Input\n   * @param expected Expected output, or null if an error is expected\n   * @param error Expected error, or null if no error is expected\n   ",
        "child_ranges": [
            "(line 340,col 5)-(line 340,col 36)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.lang.String, java.lang.String, com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType, java.lang.String)",
        "snippet": "  public void test(String js, String expected, DiagnosticType error,\n                   DiagnosticType warning, String description) {\n    test(externsInputs, js, expected, error, warning, description);\n  }\n",
        "begin_line": 354,
        "end_line": 357,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output,\n   * or that an expected error is encountered.\n   *\n   * @param js Input\n   * @param expected Expected output, or null if an error is expected\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   * @param description The content of the error expected\n   ",
        "child_ranges": [
            "(line 356,col 5)-(line 356,col 67)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.lang.String, java.lang.String, com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void test(String js, String expected,\n                   DiagnosticType error, DiagnosticType warning) {\n    test(externsInputs, js, expected, error, warning, null);\n  }\n",
        "begin_line": 369,
        "end_line": 372,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output\n   * and (optionally) that an expected warning is issued. Or, if an error is\n   * expected, this method just verifies that the error is encountered.\n   *\n   * @param js Input\n   * @param expected Expected output, or null if an error is expected\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   ",
        "child_ranges": [
            "(line 371,col 5)-(line 371,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.lang.String, java.lang.String, java.lang.String, com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void test(String externs, String js, String expected,\n                   DiagnosticType error, DiagnosticType warning) {\n    test(externs, js, expected, error, warning, null);\n  }\n",
        "begin_line": 385,
        "end_line": 388,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output\n   * and (optionally) that an expected warning is issued. Or, if an error is\n   * expected, this method just verifies that the error is encountered.\n   *\n   * @param externs Externs input\n   * @param js Input\n   * @param expected Expected output, or null if an error is expected\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   ",
        "child_ranges": [
            "(line 387,col 5)-(line 387,col 54)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.lang.String, java.lang.String, java.lang.String, com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType, java.lang.String)",
        "snippet": "  public void test(String externs, String js, String expected,\n                   DiagnosticType error, DiagnosticType warning,\n                   String description) {\n    List<SourceFile> externsInputs = ImmutableList.of(\n        SourceFile.fromCode(\"externs\", externs));\n    test(externsInputs, js, expected, error, warning, description);\n  }\n",
        "begin_line": 404,
        "end_line": 410,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output\n   * and (optionally) that an expected warning is issued. Or, if an error is\n   * expected, this method just verifies that the error is encountered.\n   *\n   * @param externs Externs input\n   * @param js Input\n   * @param expected Expected output, or null if an error is expected\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   * @param description The description of the expected warning,\n   *      or null if no warning is expected or if the warning's description\n   *      should not be examined\n   ",
        "child_ranges": [
            "(line 407,col 5)-(line 408,col 49)",
            "(line 409,col 5)-(line 409,col 67)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.util.List<com.google.javascript.jscomp.SourceFile>, java.lang.String, java.lang.String, com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType, java.lang.String)",
        "snippet": "  public void test(List<SourceFile> externs, String js, String expected,\n                   DiagnosticType error,\n                   DiagnosticType warning, String description) {\n    Compiler compiler = createCompiler();\n    lastCompiler = compiler;\n\n    CompilerOptions options = getOptions();\n\n    if (this.acceptES5) {\n      options.setLanguageIn(LanguageMode.ECMASCRIPT5);\n    }\n    // Note that in this context, turning on the checkTypes option won't\n    // actually cause the type check to run.\n    options.checkTypes = parseTypeInfo;\n    compiler.init(externs, ImmutableList.of(\n        SourceFile.fromCode(filename, js)), options);\n\n    BaseJSTypeTestCase.addNativeProperties(compiler.getTypeRegistry());\n\n    test(compiler, new String[] { expected }, error, warning, description);\n  }\n",
        "begin_line": 426,
        "end_line": 446,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output\n   * and (optionally) that an expected warning is issued. Or, if an error is\n   * expected, this method just verifies that the error is encountered.\n   *\n   * @param externs Externs inputs\n   * @param js Input\n   * @param expected Expected output, or null if an error is expected\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   * @param description The description of the expected warning,\n   *      or null if no warning is expected or if the warning's description\n   *      should not be examined\n   ",
        "child_ranges": [
            "(line 429,col 5)-(line 429,col 41)",
            "(line 430,col 5)-(line 430,col 28)",
            "(line 432,col 5)-(line 432,col 43)",
            "(line 434,col 5)-(line 436,col 5)",
            "(line 439,col 5)-(line 439,col 39)",
            "(line 440,col 5)-(line 441,col 53)",
            "(line 443,col 5)-(line 443,col 71)",
            "(line 445,col 5)-(line 445,col 75)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.lang.String[], java.lang.String[])",
        "snippet": "  public void test(String[] js, String[] expected) {\n    test(js, expected, null);\n  }\n",
        "begin_line": 454,
        "end_line": 456,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output.\n   *\n   * @param js Inputs\n   * @param expected Expected JS output\n   ",
        "child_ranges": [
            "(line 455,col 5)-(line 455,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.lang.String[], java.lang.String[], com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void test(String[] js, String[] expected, DiagnosticType error) {\n    test(js, expected, error, null);\n  }\n",
        "begin_line": 466,
        "end_line": 468,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output,\n   * or that an expected error is encountered.\n   *\n   * @param js Inputs\n   * @param expected Expected JS output\n   * @param error Expected error, or null if no error is expected\n   ",
        "child_ranges": [
            "(line 467,col 5)-(line 467,col 36)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.lang.String[], java.lang.String[], com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void test(String[] js, String[] expected, DiagnosticType error,\n                   DiagnosticType warning) {\n    test(js, expected, error, warning, null);\n  }\n",
        "begin_line": 480,
        "end_line": 483,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output\n   * and (optionally) that an expected warning is issued. Or, if an error is\n   * expected, this method just verifies that the error is encountered.\n   *\n   * @param js Inputs\n   * @param expected Expected JS output\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   ",
        "child_ranges": [
            "(line 482,col 5)-(line 482,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.lang.String[], java.lang.String[], com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType, java.lang.String)",
        "snippet": "  public void test(String[] js, String[] expected, DiagnosticType error,\n                   DiagnosticType warning, String description) {\n    Compiler compiler = createCompiler();\n    lastCompiler = compiler;\n\n    List<SourceFile> inputs = Lists.newArrayList();\n    for (int i = 0; i < js.length; i++) {\n      inputs.add(SourceFile.fromCode(\"input\" + i, js[i]));\n    }\n    compiler.init(externsInputs, inputs, getOptions());\n    test(compiler, expected, error, warning, description);\n  }\n",
        "begin_line": 498,
        "end_line": 509,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output\n   * and (optionally) that an expected warning is issued. Or, if an error is\n   * expected, this method just verifies that the error is encountered.\n   *\n   * @param js Inputs\n   * @param expected Expected JS output\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   * @param description The description of the expected warning,\n   *      or null if no warning is expected or if the warning's description\n   *      should not be examined\n   ",
        "child_ranges": [
            "(line 500,col 5)-(line 500,col 41)",
            "(line 501,col 5)-(line 501,col 28)",
            "(line 503,col 5)-(line 503,col 51)",
            "(line 504,col 5)-(line 506,col 5)",
            "(line 507,col 5)-(line 507,col 55)",
            "(line 508,col 5)-(line 508,col 58)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(com.google.javascript.jscomp.JSModule[], java.lang.String[])",
        "snippet": "  public void test(JSModule[] modules, String[] expected) {\n    test(modules, expected, null);\n  }\n",
        "begin_line": 517,
        "end_line": 519,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output.\n   *\n   * @param modules Module inputs\n   * @param expected Expected JS outputs (one per module)\n   ",
        "child_ranges": [
            "(line 518,col 5)-(line 518,col 34)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(com.google.javascript.jscomp.JSModule[], java.lang.String[], com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void test(JSModule[] modules, String[] expected,\n      DiagnosticType error) {\n    test(modules, expected, error, null);\n  }\n",
        "begin_line": 529,
        "end_line": 532,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output,\n   * or that an expected error is encountered.\n   *\n   * @param modules Module inputs\n   * @param expected Expected JS outputs (one per module)\n   * @param error Expected error, or null if no error is expected\n   ",
        "child_ranges": [
            "(line 531,col 5)-(line 531,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(com.google.javascript.jscomp.JSModule[], java.lang.String[], com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void test(JSModule[] modules, String[] expected,\n                   DiagnosticType error, DiagnosticType warning) {\n    Compiler compiler = createCompiler();\n    lastCompiler = compiler;\n\n    compiler.initModules(\n        externsInputs, Lists.newArrayList(modules), getOptions());\n    test(compiler, expected, error, warning);\n  }\n",
        "begin_line": 544,
        "end_line": 552,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output\n   * and (optionally) that an expected warning is issued. Or, if an error is\n   * expected, this method just verifies that the error is encountered.\n   *\n   * @param modules Module inputs\n   * @param expected Expected JS outputs (one per module)\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   ",
        "child_ranges": [
            "(line 546,col 5)-(line 546,col 41)",
            "(line 547,col 5)-(line 547,col 28)",
            "(line 549,col 5)-(line 550,col 66)",
            "(line 551,col 5)-(line 551,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(java.lang.String)",
        "snippet": "  public void testSame(String js) {\n    test(js, js);\n  }\n",
        "begin_line": 559,
        "end_line": 561,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as its input.\n   *\n   * @param js Input and output\n   ",
        "child_ranges": [
            "(line 560,col 5)-(line 560,col 17)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(java.lang.String, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void testSame(String js, DiagnosticType warning) {\n    test(js, js, null, warning);\n  }\n",
        "begin_line": 570,
        "end_line": 572,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as its input\n   * and (optionally) that an expected warning is issued.\n   *\n   * @param js Input and output\n   * @param warning Expected warning, or null if no warning is expected\n   ",
        "child_ranges": [
            "(line 571,col 5)-(line 571,col 32)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(java.lang.String, com.google.javascript.jscomp.DiagnosticType, boolean)",
        "snippet": "  public void testSame(String js, DiagnosticType diag, boolean error) {\n    if (error) {\n      test(js, js, diag);\n    } else {\n      test(js, js, null, diag);\n    }\n  }\n",
        "begin_line": 582,
        "end_line": 588,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as its input\n   * and (optionally) that an expected warning is issued.\n   *\n   * @param js Input and output\n   * @param diag Expected error or warning, or null if none is expected\n   * @param error true if diag is an error, false if it is a warning\n   ",
        "child_ranges": [
            "(line 583,col 5)-(line 587,col 5)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(java.lang.String, java.lang.String, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void testSame(String externs, String js, DiagnosticType warning) {\n    testSame(externs, js, warning, null);\n  }\n",
        "begin_line": 598,
        "end_line": 600,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as its input\n   * and (optionally) that an expected warning is issued.\n   *\n   * @param externs Externs input\n   * @param js Input and output\n   * @param warning Expected warning, or null if no warning is expected\n   ",
        "child_ranges": [
            "(line 599,col 5)-(line 599,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(java.lang.String, java.lang.String, com.google.javascript.jscomp.DiagnosticType, boolean)",
        "snippet": "  public void testSame(\n      String externs, String js, DiagnosticType diag, boolean error) {\n    if (error) {\n      test(externs, js, js, diag, null);\n    } else {\n      test(externs, js, js, null, diag);\n    }\n  }\n",
        "begin_line": 611,
        "end_line": 618,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as its input\n   * and (optionally) that an expected warning is issued.\n   *\n   * @param externs Externs input\n   * @param js Input and output\n   * @param diag Expected error or warning, or null if none is expected\n   * @param error true if diag is an error, false if it is a warning\n   ",
        "child_ranges": [
            "(line 613,col 5)-(line 617,col 5)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(java.lang.String, java.lang.String, com.google.javascript.jscomp.DiagnosticType, java.lang.String)",
        "snippet": "  public void testSame(String externs, String js, DiagnosticType warning,\n                       String description) {\n    List<SourceFile> externsInputs = ImmutableList.of(\n        SourceFile.fromCode(\"externs\", externs));\n    test(externsInputs, js, js, null, warning, description);\n  }\n",
        "begin_line": 631,
        "end_line": 636,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as its input\n   * and (optionally) that an expected warning and description is issued.\n   *\n   * @param externs Externs input\n   * @param js Input and output\n   * @param warning Expected warning, or null if no warning is expected\n   * @param description The description of the expected warning,\n   *      or null if no warning is expected or if the warning's description\n   *      should not be examined\n   ",
        "child_ranges": [
            "(line 633,col 5)-(line 634,col 49)",
            "(line 635,col 5)-(line 635,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(java.lang.String[])",
        "snippet": "  public void testSame(String[] js) {\n    test(js, js);\n  }\n",
        "begin_line": 643,
        "end_line": 645,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as its input.\n   *\n   * @param js Inputs and outputs\n   ",
        "child_ranges": [
            "(line 644,col 5)-(line 644,col 17)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(java.lang.String[], com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void testSame(String[] js, DiagnosticType error) {\n    test(js, js, error);\n  }\n",
        "begin_line": 654,
        "end_line": 656,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as its input,\n   * and emits the given error.\n   *\n   * @param js Inputs and outputs\n   * @param error Expected error, or null if no error is expected\n   ",
        "child_ranges": [
            "(line 655,col 5)-(line 655,col 24)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(java.lang.String[], com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void testSame(\n      String[] js, DiagnosticType error, DiagnosticType warning) {\n    test(js, js, error, warning);\n  }\n",
        "begin_line": 666,
        "end_line": 669,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as its input,\n   * and emits the given error and warning.\n   *\n   * @param js Inputs and outputs\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   ",
        "child_ranges": [
            "(line 668,col 5)-(line 668,col 33)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(com.google.javascript.jscomp.JSModule[])",
        "snippet": "  public void testSame(JSModule[] modules) {\n    testSame(modules, null);\n  }\n",
        "begin_line": 676,
        "end_line": 678,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as the input.\n   *\n   * @param modules Module inputs\n   ",
        "child_ranges": [
            "(line 677,col 5)-(line 677,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(com.google.javascript.jscomp.JSModule[], com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void testSame(JSModule[] modules, DiagnosticType warning) {\n    try {\n      String[] expected = new String[modules.length];\n      for (int i = 0; i < modules.length; i++) {\n        expected[i] = \"\";\n        for (CompilerInput input : modules[i].getInputs()) {\n          expected[i] += input.getSourceFile().getCode();\n        }\n      }\n      test(modules, expected, null, warning);\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n  }\n",
        "begin_line": 686,
        "end_line": 699,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as the input.\n   *\n   * @param modules Module inputs\n   * @param warning A warning, or null for no expected warning.\n   ",
        "child_ranges": [
            "(line 687,col 5)-(line 698,col 5)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(com.google.javascript.jscomp.Compiler, java.lang.String[], com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  protected void test(Compiler compiler, String[] expected,\n                      DiagnosticType error, DiagnosticType warning) {\n    test(compiler, expected, error, warning, null);\n  }\n",
        "begin_line": 712,
        "end_line": 715,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output\n   * and (optionally) that an expected warning is issued. Or, if an error is\n   * expected, this method just verifies that the error is encountered.\n   *\n   * @param compiler A compiler that has been initialized via\n   *     {@link Compiler#init}\n   * @param expected Expected output, or null if an error is expected\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   ",
        "child_ranges": [
            "(line 714,col 5)-(line 714,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(com.google.javascript.jscomp.Compiler, java.lang.String[], com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType, java.lang.String)",
        "snippet": "  private void test(Compiler compiler, String[] expected,\n                    DiagnosticType error, DiagnosticType warning,\n                    String description) {\n    RecentChange recentChange = new RecentChange();\n    compiler.addChangeHandler(recentChange);\n\n    Node root = compiler.parseInputs();\n    assertTrue(\"Unexpected parse error(s): \" +\n        Joiner.on(\"\\n\").join(compiler.getErrors()), root != null);\n\n    if (astValidationEnabled) {\n      (new AstValidator()).validateRoot(root);\n    }\n    Node externsRoot = root.getFirstChild();\n    Node mainRoot = root.getLastChild();\n\n    // Save the tree for later comparison.\n    Node rootClone = root.cloneTree();\n    Node externsRootClone = rootClone.getFirstChild();\n    Node mainRootClone = rootClone.getLastChild();\n\n    int numRepetitions = getNumRepetitions();\n    ErrorManager[] errorManagers = new ErrorManager[numRepetitions];\n    int aggregateWarningCount = 0;\n    List<JSError> aggregateWarnings = Lists.newArrayList();\n    boolean hasCodeChanged = false;\n\n    assertFalse(\"Code should not change before processing\",\n        recentChange.hasCodeChanged());\n\n    for (int i = 0; i < numRepetitions; ++i) {\n      if (compiler.getErrorCount() == 0) {\n        errorManagers[i] = new BlackHoleErrorManager(compiler);\n\n        // Only run process closure primitives once, if asked.\n        if (closurePassEnabled && i == 0) {\n          recentChange.reset();\n          new ProcessClosurePrimitives(compiler, null, CheckLevel.ERROR)\n              .process(null, mainRoot);\n          hasCodeChanged = hasCodeChanged || recentChange.hasCodeChanged();\n        }\n\n        // Only run the type checking pass once, if asked.\n        // Running it twice can cause unpredictable behavior because duplicate\n        // objects for the same type are created, and the type system\n        // uses reference equality to compare many types.\n        if (typeCheckEnabled && i == 0) {\n          TypeCheck check = createTypeCheck(compiler, typeCheckLevel);\n          check.processForTesting(externsRoot, mainRoot);\n        }\n\n        // Only run the normalize pass once, if asked.\n        if (normalizeEnabled && i == 0) {\n          normalizeActualCode(compiler, externsRoot, mainRoot);\n        }\n\n        if (markNoSideEffects && i == 0) {\n          MarkNoSideEffectCalls mark = new MarkNoSideEffectCalls(compiler);\n          mark.process(externsRoot, mainRoot);\n        }\n\n        recentChange.reset();\n\n        getProcessor(compiler).process(externsRoot, mainRoot);\n        if (astValidationEnabled) {\n          (new AstValidator()).validateRoot(root);\n        }\n        if (checkLineNumbers) {\n          (new LineNumberCheck(compiler)).process(externsRoot, mainRoot);\n        }\n\n        hasCodeChanged = hasCodeChanged || recentChange.hasCodeChanged();\n        aggregateWarningCount += errorManagers[i].getWarningCount();\n        aggregateWarnings.addAll(Lists.newArrayList(compiler.getWarnings()));\n\n        if (normalizeEnabled) {\n          boolean verifyDeclaredConstants = true;\n          new Normalize.VerifyConstants(compiler, verifyDeclaredConstants)\n              .process(externsRoot, mainRoot);\n        }\n      }\n    }\n\n    if (error == null) {\n      assertEquals(\n          \"Unexpected error(s): \" + Joiner.on(\"\\n\").join(compiler.getErrors()),\n          0, compiler.getErrorCount());\n\n      // Verify the symbol table.\n      ErrorManager symbolTableErrorManager =\n          new BlackHoleErrorManager(compiler);\n      Node expectedRoot = parseExpectedJs(expected);\n      expectedRoot.detachFromParent();\n\n      JSError[] stErrors = symbolTableErrorManager.getErrors();\n      if (expectedSymbolTableError != null) {\n        assertEquals(\"There should be one error.\", 1, stErrors.length);\n        assertEquals(expectedSymbolTableError, stErrors[0].getType());\n      } else {\n        assertEquals(\"Unexpected symbol table error(s): \" +\n            Joiner.on(\"\\n\").join(stErrors),\n            0, stErrors.length);\n      }\n\n      if (warning == null) {\n        assertEquals(\n            \"Unexpected warning(s): \" + Joiner.on(\"\\n\").join(aggregateWarnings),\n            0, aggregateWarningCount);\n      } else {\n        assertEquals(\"There should be one warning, repeated \" + numRepetitions +\n            \" time(s).\", numRepetitions, aggregateWarningCount);\n        for (int i = 0; i < numRepetitions; ++i) {\n          JSError[] warnings = errorManagers[i].getWarnings();\n          JSError actual = warnings[0];\n          assertEquals(warning, actual.getType());\n\n          // Make sure that source information is always provided.\n          if (!allowSourcelessWarnings) {\n            assertTrue(\"Missing source file name in warning\",\n                actual.sourceName != null && !actual.sourceName.isEmpty());\n            assertTrue(\"Missing line number in warning\",\n                -1 != actual.lineNumber);\n            assertTrue(\"Missing char number in warning\",\n                -1 != actual.getCharno());\n          }\n\n          if (description != null) {\n            assertEquals(description, actual.description);\n          }\n        }\n      }\n\n      if (normalizeEnabled) {\n        normalizeActualCode(compiler, externsRootClone, mainRootClone);\n      }\n\n      boolean codeChange = !mainRootClone.isEquivalentTo(mainRoot);\n      boolean externsChange = !externsRootClone.isEquivalentTo(externsRoot);\n\n      // Generally, externs should not be change by the compiler passes.\n      if (externsChange && !allowExternsChanges) {\n        String explanation = externsRootClone.checkTreeEquals(externsRoot);\n        fail(\"Unexpected changes to externs\" +\n            \"\\nExpected: \" + compiler.toSource(externsRootClone) +\n            \"\\nResult: \" + compiler.toSource(externsRoot) +\n            \"\\n\" + explanation);\n      }\n\n      if (!codeChange && !externsChange) {\n        assertFalse(\n            \"compiler.reportCodeChange() was called \" +\n            \"even though nothing changed\",\n            hasCodeChanged);\n      } else {\n        assertTrue(\"compiler.reportCodeChange() should have been called\",\n            hasCodeChanged);\n      }\n\n      if (compareAsTree) {\n        String explanation = expectedRoot.checkTreeEquals(mainRoot);\n        assertNull(\"\\nExpected: \" + compiler.toSource(expectedRoot) +\n            \"\\nResult: \" + compiler.toSource(mainRoot) +\n            \"\\n\" + explanation, explanation);\n      } else if (expected != null) {\n        assertEquals(\n            Joiner.on(\"\").join(expected), compiler.toSource(mainRoot));\n      }\n\n      // Verify normalization is not invalidated.\n      Node normalizeCheckRootClone = root.cloneTree();\n      Node normalizeCheckExternsRootClone = root.getFirstChild();\n      Node normalizeCheckMainRootClone = root.getLastChild();\n      new PrepareAst(compiler).process(\n          normalizeCheckExternsRootClone, normalizeCheckMainRootClone);\n      String explanation =\n          normalizeCheckMainRootClone.checkTreeEquals(mainRoot);\n      assertNull(\"Node structure normalization invalidated.\\nExpected: \" +\n          compiler.toSource(normalizeCheckMainRootClone) +\n          \"\\nResult: \" + compiler.toSource(mainRoot) +\n          \"\\n\" + explanation, explanation);\n\n      // TODO(johnlenz): enable this for most test cases.\n      // Currently, this invalidates test for while-loops, for-loop\n      // initializers, and other naming.  However, a set of code\n      // (FoldConstants, etc) runs before the Normalize pass, so this can't be\n      // force on everywhere.\n      if (normalizeEnabled) {\n        new Normalize(compiler, true).process(\n            normalizeCheckExternsRootClone, normalizeCheckMainRootClone);\n        explanation =  normalizeCheckMainRootClone.checkTreeEquals(mainRoot);\n        assertNull(\"Normalization invalidated.\\nExpected: \" +\n            compiler.toSource(normalizeCheckMainRootClone) +\n            \"\\nResult: \" + compiler.toSource(mainRoot) +\n            \"\\n\" + explanation, explanation);\n      }\n    } else {\n      String errors = \"\";\n      for (JSError actualError : compiler.getErrors()) {\n        errors += actualError.description + \"\\n\";\n      }\n      assertEquals(\"There should be one error. \" + errors,\n          1, compiler.getErrorCount());\n      assertEquals(errors, error, compiler.getErrors()[0].getType());\n\n      if (warning != null) {\n        String warnings = \"\";\n        for (JSError actualError : compiler.getWarnings()) {\n          warnings += actualError.description + \"\\n\";\n        }\n        assertEquals(\"There should be one warning. \" + warnings,\n            1, compiler.getWarningCount());\n        assertEquals(warnings, warning, compiler.getWarnings()[0].getType());\n      }\n    }\n  }\n",
        "begin_line": 732,
        "end_line": 946,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output\n   * and (optionally) that an expected warning is issued. Or, if an error is\n   * expected, this method just verifies that the error is encountered.\n   *\n   * @param compiler A compiler that has been initialized via\n   *     {@link Compiler#init}\n   * @param expected Expected output, or null if an error is expected\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   * @param description The description of the expected warning,\n   *      or null if no warning is expected or if the warning's description\n   *      should not be examined\n   ",
        "child_ranges": [
            "(line 735,col 5)-(line 735,col 51)",
            "(line 736,col 5)-(line 736,col 44)",
            "(line 738,col 5)-(line 738,col 39)",
            "(line 739,col 5)-(line 740,col 66)",
            "(line 742,col 5)-(line 744,col 5)",
            "(line 745,col 5)-(line 745,col 44)",
            "(line 746,col 5)-(line 746,col 40)",
            "(line 749,col 5)-(line 749,col 38)",
            "(line 750,col 5)-(line 750,col 54)",
            "(line 751,col 5)-(line 751,col 50)",
            "(line 753,col 5)-(line 753,col 45)",
            "(line 754,col 5)-(line 754,col 68)",
            "(line 755,col 5)-(line 755,col 34)",
            "(line 756,col 5)-(line 756,col 59)",
            "(line 757,col 5)-(line 757,col 35)",
            "(line 759,col 5)-(line 760,col 39)",
            "(line 762,col 5)-(line 813,col 5)",
            "(line 815,col 5)-(line 945,col 5)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.normalizeActualCode(com.google.javascript.jscomp.Compiler, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  private void normalizeActualCode(\n      Compiler compiler, Node externsRoot, Node mainRoot) {\n    Normalize normalize = new Normalize(compiler, false);\n    normalize.process(externsRoot, mainRoot);\n  }\n",
        "begin_line": 948,
        "end_line": 952,
        "comment": "",
        "child_ranges": [
            "(line 950,col 5)-(line 950,col 57)",
            "(line 951,col 5)-(line 951,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.parseExpectedJs(java.lang.String[])",
        "snippet": "  protected Node parseExpectedJs(String[] expected) {\n    Compiler compiler = createCompiler();\n    List<SourceFile> inputs = Lists.newArrayList();\n    for (int i = 0; i < expected.length; i++) {\n      inputs.add(SourceFile.fromCode(\"expected\" + i, expected[i]));\n    }\n    compiler.init(externsInputs, inputs, getOptions());\n    Node root = compiler.parseInputs();\n    assertTrue(\"Unexpected parse error(s): \" +\n        Joiner.on(\"\\n\").join(compiler.getErrors()), root != null);\n    Node externsRoot = root.getFirstChild();\n    Node mainRoot = externsRoot.getNext();\n    // Only run the normalize pass, if asked.\n    if (normalizeEnabled && normalizeExpected && !compiler.hasErrors()) {\n      Normalize normalize = new Normalize(compiler, false);\n      normalize.process(externsRoot, mainRoot);\n    }\n    return mainRoot;\n  }\n",
        "begin_line": 957,
        "end_line": 975,
        "comment": "\n   * Parses expected JS inputs and returns the root of the parse tree.\n   ",
        "child_ranges": [
            "(line 958,col 5)-(line 958,col 41)",
            "(line 959,col 5)-(line 959,col 51)",
            "(line 960,col 5)-(line 962,col 5)",
            "(line 963,col 5)-(line 963,col 55)",
            "(line 964,col 5)-(line 964,col 39)",
            "(line 965,col 5)-(line 966,col 66)",
            "(line 967,col 5)-(line 967,col 44)",
            "(line 968,col 5)-(line 968,col 42)",
            "(line 970,col 5)-(line 973,col 5)",
            "(line 974,col 5)-(line 974,col 20)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.parseExpectedJs(java.lang.String)",
        "snippet": "  protected Node parseExpectedJs(String expected) {\n    return parseExpectedJs(new String[] {expected});\n  }\n",
        "begin_line": 977,
        "end_line": 979,
        "comment": "",
        "child_ranges": [
            "(line 978,col 5)-(line 978,col 52)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.createModuleChain(java.lang.String...)",
        "snippet": "  static JSModule[] createModuleChain(String... inputs) {\n    JSModule[] modules = createModules(inputs);\n    for (int i = 1; i < modules.length; i++) {\n      modules[i].addDependency(modules[i - 1]);\n    }\n    return modules;\n  }\n",
        "begin_line": 985,
        "end_line": 991,
        "comment": "\n   * Generates a list of modules from a list of inputs, such that each module\n   * depends on the module before it.\n   ",
        "child_ranges": [
            "(line 986,col 5)-(line 986,col 47)",
            "(line 987,col 5)-(line 989,col 5)",
            "(line 990,col 5)-(line 990,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.createModuleStar(java.lang.String...)",
        "snippet": "  static JSModule[] createModuleStar(String... inputs) {\n    JSModule[] modules = createModules(inputs);\n    for (int i = 1; i < modules.length; i++) {\n      modules[i].addDependency(modules[0]);\n    }\n    return modules;\n  }\n",
        "begin_line": 997,
        "end_line": 1003,
        "comment": "\n   * Generates a list of modules from a list of inputs, such that each module\n   * depends on the first module.\n   ",
        "child_ranges": [
            "(line 998,col 5)-(line 998,col 47)",
            "(line 999,col 5)-(line 1001,col 5)",
            "(line 1002,col 5)-(line 1002,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.createModuleBush(java.lang.String...)",
        "snippet": "  static JSModule[] createModuleBush(String ... inputs) {\n    Preconditions.checkState(inputs.length > 2);\n    JSModule[] modules = createModules(inputs);\n    for (int i = 1; i < modules.length; i++) {\n      modules[i].addDependency(modules[i == 1 ? 0 : 1]);\n    }\n    return modules;\n  }\n",
        "begin_line": 1010,
        "end_line": 1017,
        "comment": "\n   * Generates a list of modules from a list of inputs, such that modules\n   * form a bush formation. In a bush formation, module 2 depends\n   * on module 1, and all other modules depend on module 2.\n   ",
        "child_ranges": [
            "(line 1011,col 5)-(line 1011,col 48)",
            "(line 1012,col 5)-(line 1012,col 47)",
            "(line 1013,col 5)-(line 1015,col 5)",
            "(line 1016,col 5)-(line 1016,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.createModuleTree(java.lang.String...)",
        "snippet": "  static JSModule[] createModuleTree(String ... inputs) {\n    JSModule[] modules = createModules(inputs);\n    for (int i = 1; i < modules.length; i++) {\n      modules[i].addDependency(modules[(i - 1) / 2]);\n    }\n    return modules;\n  }\n",
        "begin_line": 1024,
        "end_line": 1030,
        "comment": "\n   * Generates a list of modules from a list of inputs, such that modules\n   * form a tree formation. In a tree formation, module N depends on\n   * module `floor(N/2)`, So the modules form a balanced binary tree.\n   ",
        "child_ranges": [
            "(line 1025,col 5)-(line 1025,col 47)",
            "(line 1026,col 5)-(line 1028,col 5)",
            "(line 1029,col 5)-(line 1029,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.createModules(java.lang.String...)",
        "snippet": "  static JSModule[] createModules(String... inputs) {\n    JSModule[] modules = new JSModule[inputs.length];\n    for (int i = 0; i < inputs.length; i++) {\n      JSModule module = modules[i] = new JSModule(\"m\" + i);\n      module.add(SourceFile.fromCode(\"i\" + i, inputs[i]));\n    }\n    return modules;\n  }\n",
        "begin_line": 1036,
        "end_line": 1043,
        "comment": "\n   * Generates a list of modules from a list of inputs. Does not generate any\n   * dependencies between the modules.\n   ",
        "child_ranges": [
            "(line 1037,col 5)-(line 1037,col 53)",
            "(line 1038,col 5)-(line 1041,col 5)",
            "(line 1042,col 5)-(line 1042,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.BlackHoleErrorManager.BlackHoleErrorManager(com.google.javascript.jscomp.Compiler)",
        "snippet": "    private BlackHoleErrorManager(Compiler compiler) {\n      compiler.setErrorManager(this);\n    }\n",
        "begin_line": 1046,
        "end_line": 1048,
        "comment": "",
        "child_ranges": [
            "(line 1047,col 7)-(line 1047,col 37)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.BlackHoleErrorManager.println(com.google.javascript.jscomp.CheckLevel, com.google.javascript.jscomp.JSError)",
        "snippet": "    @Override\n    public void println(CheckLevel level, JSError error) {}\n",
        "begin_line": 1050,
        "end_line": 1051,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.BlackHoleErrorManager.printSummary()",
        "snippet": "    @Override\n    public void printSummary() {}\n",
        "begin_line": 1053,
        "end_line": 1054,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.createCompiler()",
        "snippet": "  Compiler createCompiler() {\n    Compiler compiler = new Compiler();\n    return compiler;\n  }\n",
        "begin_line": 1057,
        "end_line": 1060,
        "comment": "",
        "child_ranges": [
            "(line 1058,col 5)-(line 1058,col 39)",
            "(line 1059,col 5)-(line 1059,col 20)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.setExpectedSymbolTableError(com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  protected void setExpectedSymbolTableError(DiagnosticType type) {\n    this.expectedSymbolTableError = type;\n  }\n",
        "begin_line": 1062,
        "end_line": 1064,
        "comment": "",
        "child_ranges": [
            "(line 1063,col 5)-(line 1063,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.findQualifiedNameNode(java.lang.String, com.google.javascript.rhino.Node)",
        "snippet": "  protected final Node findQualifiedNameNode(final String name, Node root) {\n    final List<Node> matches = Lists.newArrayList();\n    NodeUtil.visitPostOrder(root,\n        new NodeUtil.Visitor() {\n          @Override public void visit(Node n) {\n            if (name.equals(n.getQualifiedName())) {\n              matches.add(n);\n            }\n          }\n        },\n        Predicates.<Node>alwaysTrue());\n    return matches.get(0);\n  }\n",
        "begin_line": 1067,
        "end_line": 1079,
        "comment": " Finds the first matching qualified name node in post-traversal order. ",
        "child_ranges": [
            "(line 1068,col 5)-(line 1068,col 52)",
            "(line 1069,col 5)-(line 1077,col 39)",
            "(line 1078,col 5)-(line 1078,col 26)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.Anonymous-90806de3-0c73-4e53-9e5a-e0729d092dea.visit(com.google.javascript.rhino.Node)",
        "snippet": "          @Override public void visit(Node n) {\n            if (name.equals(n.getQualifiedName())) {\n              matches.add(n);\n            }\n          }\n",
        "begin_line": 1071,
        "end_line": 1075,
        "comment": "",
        "child_ranges": [
            "(line 1072,col 13)-(line 1074,col 13)"
        ]
    }
]