[
    {
        "class_name": "com.google.javascript.jscomp.InlineVariablesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineVariablesTest.java",
        "signature": "com.google.javascript.jscomp.InlineVariablesTest.InlineVariablesTest()",
        "snippet": "  public InlineVariablesTest() {\n    enableNormalize();\n  }\n",
        "begin_line": 31,
        "end_line": 33,
        "comment": "",
        "child_ranges": [
            "(line 32,col 5)-(line 32,col 22)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineVariablesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineVariablesTest.java",
        "signature": "com.google.javascript.jscomp.InlineVariablesTest.setUp()",
        "snippet": "  @Override\n  public void setUp() {\n    super.enableLineNumberCheck(true);\n  }\n",
        "begin_line": 35,
        "end_line": 38,
        "comment": "",
        "child_ranges": [
            "(line 37,col 5)-(line 37,col 38)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineVariablesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineVariablesTest.java",
        "signature": "com.google.javascript.jscomp.InlineVariablesTest.getProcessor(com.google.javascript.jscomp.Compiler)",
        "snippet": "  @Override\n  protected CompilerPass getProcessor(final Compiler compiler) {\n    return new InlineVariables(\n        compiler,\n        (inlineLocalsOnly)\n            ? InlineVariables.Mode.LOCALS_ONLY\n            : InlineVariables.Mode.ALL,\n        inlineAllStrings);\n  }\n",
        "begin_line": 40,
        "end_line": 48,
        "comment": "",
        "child_ranges": [
            "(line 42,col 5)-(line 47,col 26)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineVariablesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineVariablesTest.java",
        "signature": "com.google.javascript.jscomp.InlineVariablesTest.tearDown()",
        "snippet": "  @Override\n  public void tearDown() {\n    inlineAllStrings = false;\n    inlineLocalsOnly = false;\n  }\n",
        "begin_line": 50,
        "end_line": 54,
        "comment": "",
        "child_ranges": [
            "(line 52,col 5)-(line 52,col 29)",
            "(line 53,col 5)-(line 53,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineVariablesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineVariablesTest.java",
        "signature": "com.google.javascript.jscomp.InlineVariablesTest.testInlineGlobal()",
        "snippet": "  public void testInlineGlobal() {\n    test(\"var x = 1; var z = x;\", \"var z = 1;\");\n  }\n",
        "begin_line": 58,
        "end_line": 60,
        "comment": "",
        "child_ranges": [
            "(line 59,col 5)-(line 59,col 48)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineVariablesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineVariablesTest.java",
        "signature": "com.google.javascript.jscomp.InlineVariablesTest.testNoInlineExportedName()",
        "snippet": "  public void testNoInlineExportedName() {\n    testSame(\"var _x = 1; var z = _x;\");\n  }\n",
        "begin_line": 62,
        "end_line": 64,
        "comment": "",
        "child_ranges": [
            "(line 63,col 5)-(line 63,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineVariablesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineVariablesTest.java",
        "signature": "com.google.javascript.jscomp.InlineVariablesTest.testNoInlineExportedName2()",
        "snippet": "  public void testNoInlineExportedName2() {\n    testSame(\"var f = function() {}; var _x = f;\" +\n             \"var y = function() { _x(); }; var _y = f;\");\n  }\n",
        "begin_line": 66,
        "end_line": 69,
        "comment": "",
        "child_ranges": [
            "(line 67,col 5)-(line 68,col 58)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineVariablesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineVariablesTest.java",
        "signature": "com.google.javascript.jscomp.InlineVariablesTest.testDoNotInlineIncrement()",
        "snippet": "  public void testDoNotInlineIncrement() {\n    testSame(\"var x = 1; x++;\");\n  }\n",
        "begin_line": 71,
        "end_line": 73,
        "comment": "",
        "child_ranges": [
            "(line 72,col 5)-(line 72,col 32)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineVariablesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineVariablesTest.java",
        "signature": "com.google.javascript.jscomp.InlineVariablesTest.testDoNotInlineDecrement()",
        "snippet": "  public void testDoNotInlineDecrement() {\n    testSame(\"var x = 1; x--;\");\n  }\n",
        "begin_line": 75,
        "end_line": 77,
        "comment": "",
        "child_ranges": [
            "(line 76,col 5)-(line 76,col 32)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineVariablesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineVariablesTest.java",
        "signature": "com.google.javascript.jscomp.InlineVariablesTest.testDoNotInlineIntoLhsOfAssign()",
        "snippet": "  public void testDoNotInlineIntoLhsOfAssign() {\n    testSame(\"var x = 1; x += 3;\");\n  }\n",
        "begin_line": 79,
        "end_line": 81,
        "comment": "",
        "child_ranges": [
            "(line 80,col 5)-(line 80,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineVariablesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineVariablesTest.java",
        "signature": "com.google.javascript.jscomp.InlineVariablesTest.testInlineIntoRhsOfAssign()",
        "snippet": "  public void testInlineIntoRhsOfAssign() {\n    test(\"var x = 1; var y = x;\", \"var y = 1;\");\n  }\n",
        "begin_line": 83,
        "end_line": 85,
        "comment": "",
        "child_ranges": [
            "(line 84,col 5)-(line 84,col 48)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineVariablesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineVariablesTest.java",
        "signature": "com.google.javascript.jscomp.InlineVariablesTest.testInlineInFunction()",
        "snippet": "  public void testInlineInFunction() {\n    test(\"function baz() { var x = 1; var z = x; }\",\n        \"function baz() { var z = 1; }\");\n  }\n",
        "begin_line": 87,
        "end_line": 90,
        "comment": "",
        "child_ranges": [
            "(line 88,col 5)-(line 89,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineVariablesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineVariablesTest.java",
        "signature": "com.google.javascript.jscomp.InlineVariablesTest.testInlineInFunction2()",
        "snippet": "  public void testInlineInFunction2() {\n    test(\"function baz() { \" +\n            \"var a = new obj();\"+\n            \"result = a;\" +\n         \"}\",\n         \"function baz() { \" +\n            \"result = new obj()\" +\n         \"}\");\n  }\n",
        "begin_line": 92,
        "end_line": 100,
        "comment": "",
        "child_ranges": [
            "(line 93,col 5)-(line 99,col 14)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineVariablesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineVariablesTest.java",
        "signature": "com.google.javascript.jscomp.InlineVariablesTest.testInlineInFunction3()",
        "snippet": "  public void testInlineInFunction3() {\n    testSame(\n        \"function baz() { \" +\n           \"var a = new obj();\" +\n           \"(function(){a;})();\" +\n           \"result = a;\" +\n        \"}\");\n  }\n",
        "begin_line": 102,
        "end_line": 109,
        "comment": "",
        "child_ranges": [
            "(line 103,col 5)-(line 108,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineVariablesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineVariablesTest.java",
        "signature": "com.google.javascript.jscomp.InlineVariablesTest.testInlineInFunction4()",
        "snippet": "  public void testInlineInFunction4() {\n    testSame(\n        \"function baz() { \" +\n           \"var a = new obj();\" +\n           \"foo.result = a;\" +\n        \"}\");\n  }\n",
        "begin_line": 111,
        "end_line": 117,
        "comment": "",
        "child_ranges": [
            "(line 112,col 5)-(line 116,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineVariablesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineVariablesTest.java",
        "signature": "com.google.javascript.jscomp.InlineVariablesTest.testInlineInFunction5()",
        "snippet": "  public void testInlineInFunction5() {\n    testSame(\n        \"function baz() { \" +\n           \"var a = (foo = new obj());\" +\n           \"foo.x();\" +\n           \"result = a;\" +\n        \"}\");\n  }\n",
        "begin_line": 119,
        "end_line": 126,
        "comment": "",
        "child_ranges": [
            "(line 120,col 5)-(line 125,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineVariablesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineVariablesTest.java",
        "signature": "com.google.javascript.jscomp.InlineVariablesTest.testInlineAcrossModules()",
        "snippet": "  public void testInlineAcrossModules() {\n    // TODO(kushal): Make decision about overlap with CrossModuleCodeMotion\n    test(createModules(\"var a = 2;\", \"var b = a;\"),\n        new String[] { \"\", \"var b = 2;\" });\n  }\n",
        "begin_line": 128,
        "end_line": 132,
        "comment": "",
        "child_ranges": [
            "(line 130,col 5)-(line 131,col 43)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineVariablesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineVariablesTest.java",
        "signature": "com.google.javascript.jscomp.InlineVariablesTest.testDoNotExitConditional1()",
        "snippet": "  public void testDoNotExitConditional1() {\n    testSame(\"if (true) { var x = 1; } var z = x;\");\n  }\n",
        "begin_line": 134,
        "end_line": 136,
        "comment": "",
        "child_ranges": [
            "(line 135,col 5)-(line 135,col 52)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineVariablesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineVariablesTest.java",
        "signature": "com.google.javascript.jscomp.InlineVariablesTest.testDoNotExitConditional2()",
        "snippet": "  public void testDoNotExitConditional2() {\n    testSame(\"if (true) var x = 1; var z = x;\");\n  }\n",
        "begin_line": 138,
        "end_line": 140,
        "comment": "",
        "child_ranges": [
            "(line 139,col 5)-(line 139,col 48)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineVariablesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineVariablesTest.java",
        "signature": "com.google.javascript.jscomp.InlineVariablesTest.testDoNotExitConditional3()",
        "snippet": "  public void testDoNotExitConditional3() {\n    testSame(\"var x; if (true) x=1; var z = x;\");\n  }\n",
        "begin_line": 143,
        "end_line": 145,
        "comment": "",
        "child_ranges": [
            "(line 144,col 5)-(line 144,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineVariablesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineVariablesTest.java",
        "signature": "com.google.javascript.jscomp.InlineVariablesTest.testDoNotExitLoop()",
        "snippet": "  public void testDoNotExitLoop() {\n    testSame(\"while (z) { var x = 3; } var y = x;\");\n  }\n",
        "begin_line": 147,
        "end_line": 149,
        "comment": "",
        "child_ranges": [
            "(line 148,col 5)-(line 148,col 52)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineVariablesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineVariablesTest.java",
        "signature": "com.google.javascript.jscomp.InlineVariablesTest.testDoNotExitForLoop()",
        "snippet": "  public void testDoNotExitForLoop() {\n    test(\"for (var i = 1; false; false) var z = i;\",\n         \"for (;false;false) var z = 1;\");\n    testSame(\"for (; false; false) var i = 1; var z = i;\");\n    testSame(\"for (var i in {}); var z = i;\");\n  }\n",
        "begin_line": 151,
        "end_line": 156,
        "comment": "",
        "child_ranges": [
            "(line 152,col 5)-(line 153,col 42)",
            "(line 154,col 5)-(line 154,col 59)",
            "(line 155,col 5)-(line 155,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineVariablesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineVariablesTest.java",
        "signature": "com.google.javascript.jscomp.InlineVariablesTest.testDoNotEnterSubscope()",
        "snippet": "  public void testDoNotEnterSubscope() {\n    testSame(\n        \"var x = function() {\" +\n        \"  var self = this; \" +\n        \"  return function() { var y = self; };\" +\n        \"}\");\n    testSame(\n        \"var x = function() {\" +\n        \"  var y = [1]; \" +\n        \"  return function() { var z = y; };\" +\n        \"}\");\n  }\n",
        "begin_line": 158,
        "end_line": 169,
        "comment": "",
        "child_ranges": [
            "(line 159,col 5)-(line 163,col 13)",
            "(line 164,col 5)-(line 168,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineVariablesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineVariablesTest.java",
        "signature": "com.google.javascript.jscomp.InlineVariablesTest.testDoNotExitTry()",
        "snippet": "  public void testDoNotExitTry() {\n    testSame(\"try { var x = y; } catch (e) {} var z = y; \");\n    testSame(\"try { throw e; var x = 1; } catch (e) {} var z = x; \");\n  }\n",
        "begin_line": 171,
        "end_line": 174,
        "comment": "",
        "child_ranges": [
            "(line 172,col 5)-(line 172,col 60)",
            "(line 173,col 5)-(line 173,col 69)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineVariablesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineVariablesTest.java",
        "signature": "com.google.javascript.jscomp.InlineVariablesTest.testDoNotEnterCatch()",
        "snippet": "  public void testDoNotEnterCatch() {\n    testSame(\"try { } catch (e) { var z = e; } \");\n  }\n",
        "begin_line": 176,
        "end_line": 178,
        "comment": "",
        "child_ranges": [
            "(line 177,col 5)-(line 177,col 50)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineVariablesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineVariablesTest.java",
        "signature": "com.google.javascript.jscomp.InlineVariablesTest.testDoNotEnterFinally()",
        "snippet": "  public void testDoNotEnterFinally() {\n    testSame(\"try { throw e; var x = 1; } catch (e) {} \" +\n             \"finally  { var z = x; } \");\n  }\n",
        "begin_line": 180,
        "end_line": 183,
        "comment": "",
        "child_ranges": [
            "(line 181,col 5)-(line 182,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineVariablesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineVariablesTest.java",
        "signature": "com.google.javascript.jscomp.InlineVariablesTest.testInsideIfConditional()",
        "snippet": "  public void testInsideIfConditional() {\n    test(\"var a = foo(); if (a) { alert(3); }\", \"if (foo()) { alert(3); }\");\n    test(\"var a; a = foo(); if (a) { alert(3); }\", \"if (foo()) { alert(3); }\");\n  }\n",
        "begin_line": 185,
        "end_line": 188,
        "comment": "",
        "child_ranges": [
            "(line 186,col 5)-(line 186,col 76)",
            "(line 187,col 5)-(line 187,col 79)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineVariablesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineVariablesTest.java",
        "signature": "com.google.javascript.jscomp.InlineVariablesTest.testOnlyReadAtInitialization()",
        "snippet": "  public void testOnlyReadAtInitialization() {\n    test(\"var a; a = foo();\", \"foo();\");\n    test(\"var a; if (a = foo()) { alert(3); }\", \"if (foo()) { alert(3); }\");\n    test(\"var a; switch (a = foo()) {}\", \"switch(foo()) {}\");\n    test(\"var a; function f(){ return a = foo(); }\",\n         \"function f(){ return foo(); }\");\n    test(\"function f(){ var a; return a = foo(); }\",\n         \"function f(){ return foo(); }\");\n    test(\"var a; with (a = foo()) { alert(3); }\", \"with (foo()) { alert(3); }\");\n\n    test(\"var a; b = (a = foo());\", \"b = foo();\");\n    test(\"var a; while(a = foo()) { alert(3); }\",\n         \"while(foo()) { alert(3); }\");\n    test(\"var a; for(;a = foo();) { alert(3); }\",\n         \"for(;foo();) { alert(3); }\");\n    test(\"var a; do {} while(a = foo()) { alert(3); }\",\n         \"do {} while(foo()) { alert(3); }\");\n  }\n",
        "begin_line": 190,
        "end_line": 207,
        "comment": "",
        "child_ranges": [
            "(line 191,col 5)-(line 191,col 40)",
            "(line 192,col 5)-(line 192,col 76)",
            "(line 193,col 5)-(line 193,col 61)",
            "(line 194,col 5)-(line 195,col 42)",
            "(line 196,col 5)-(line 197,col 42)",
            "(line 198,col 5)-(line 198,col 80)",
            "(line 200,col 5)-(line 200,col 50)",
            "(line 201,col 5)-(line 202,col 39)",
            "(line 203,col 5)-(line 204,col 39)",
            "(line 205,col 5)-(line 206,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineVariablesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineVariablesTest.java",
        "signature": "com.google.javascript.jscomp.InlineVariablesTest.testImmutableWithSingleReferenceAfterInitialzation()",
        "snippet": "  public void testImmutableWithSingleReferenceAfterInitialzation() {\n    test(\"var a; a = 1;\", \"1;\");\n    test(\"var a; if (a = 1) { alert(3); }\", \"if (1) { alert(3); }\");\n    test(\"var a; switch (a = 1) {}\", \"switch(1) {}\");\n    test(\"var a; function f(){ return a = 1; }\",\n         \"function f(){ return 1; }\");\n    test(\"function f(){ var a; return a = 1; }\",\n         \"function f(){ return 1; }\");\n    test(\"var a; with (a = 1) { alert(3); }\", \"with (1) { alert(3); }\");\n\n    test(\"var a; b = (a = 1);\", \"b = 1;\");\n    test(\"var a; while(a = 1) { alert(3); }\",\n         \"while(1) { alert(3); }\");\n    test(\"var a; for(;a = 1;) { alert(3); }\",\n         \"for(;1;) { alert(3); }\");\n    test(\"var a; do {} while(a = 1) { alert(3); }\",\n         \"do {} while(1) { alert(3); }\");\n  }\n",
        "begin_line": 209,
        "end_line": 226,
        "comment": "",
        "child_ranges": [
            "(line 210,col 5)-(line 210,col 32)",
            "(line 211,col 5)-(line 211,col 68)",
            "(line 212,col 5)-(line 212,col 53)",
            "(line 213,col 5)-(line 214,col 38)",
            "(line 215,col 5)-(line 216,col 38)",
            "(line 217,col 5)-(line 217,col 72)",
            "(line 219,col 5)-(line 219,col 42)",
            "(line 220,col 5)-(line 221,col 35)",
            "(line 222,col 5)-(line 223,col 35)",
            "(line 224,col 5)-(line 225,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineVariablesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineVariablesTest.java",
        "signature": "com.google.javascript.jscomp.InlineVariablesTest.testSingleReferenceAfterInitialzation()",
        "snippet": "  public void testSingleReferenceAfterInitialzation() {\n    test(\"var a; a = foo();a;\", \"foo();\");\n    testSame(\"var a; if (a = foo()) { alert(3); } a;\");\n    testSame(\"var a; switch (a = foo()) {} a;\");\n    testSame(\"var a; function f(){ return a = foo(); } a;\");\n    testSame(\"function f(){ var a; return a = foo(); a;}\");\n    testSame(\"var a; with (a = foo()) { alert(3); } a;\");\n    testSame(\"var a; b = (a = foo()); a;\");\n    testSame(\"var a; while(a = foo()) { alert(3); } a;\");\n    testSame(\"var a; for(;a = foo();) { alert(3); } a;\");\n    testSame(\"var a; do {} while(a = foo()) { alert(3); } a;\");\n  }\n",
        "begin_line": 228,
        "end_line": 239,
        "comment": "",
        "child_ranges": [
            "(line 229,col 5)-(line 229,col 42)",
            "(line 230,col 5)-(line 230,col 55)",
            "(line 231,col 5)-(line 231,col 48)",
            "(line 232,col 5)-(line 232,col 60)",
            "(line 233,col 5)-(line 233,col 59)",
            "(line 234,col 5)-(line 234,col 57)",
            "(line 235,col 5)-(line 235,col 43)",
            "(line 236,col 5)-(line 236,col 57)",
            "(line 237,col 5)-(line 237,col 57)",
            "(line 238,col 5)-(line 238,col 63)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineVariablesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineVariablesTest.java",
        "signature": "com.google.javascript.jscomp.InlineVariablesTest.testInsideIfBranch()",
        "snippet": "  public void testInsideIfBranch() {\n    testSame(\"var a = foo(); if (1) { alert(a); }\");\n  }\n",
        "begin_line": 241,
        "end_line": 243,
        "comment": "",
        "child_ranges": [
            "(line 242,col 5)-(line 242,col 52)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineVariablesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineVariablesTest.java",
        "signature": "com.google.javascript.jscomp.InlineVariablesTest.testInsideAndConditional()",
        "snippet": "  public void testInsideAndConditional() {\n    test(\"var a = foo(); a && alert(3);\", \"foo() && alert(3);\");\n  }\n",
        "begin_line": 245,
        "end_line": 247,
        "comment": "",
        "child_ranges": [
            "(line 246,col 5)-(line 246,col 64)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineVariablesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineVariablesTest.java",
        "signature": "com.google.javascript.jscomp.InlineVariablesTest.testInsideAndBranch()",
        "snippet": "  public void testInsideAndBranch() {\n    testSame(\"var a = foo(); 1 && alert(a);\");\n  }\n",
        "begin_line": 249,
        "end_line": 251,
        "comment": "",
        "child_ranges": [
            "(line 250,col 5)-(line 250,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineVariablesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineVariablesTest.java",
        "signature": "com.google.javascript.jscomp.InlineVariablesTest.testInsideOrBranch()",
        "snippet": "  public void testInsideOrBranch() {\n    testSame(\"var a = foo(); 1 || alert(a);\");\n  }\n",
        "begin_line": 253,
        "end_line": 255,
        "comment": "",
        "child_ranges": [
            "(line 254,col 5)-(line 254,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineVariablesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineVariablesTest.java",
        "signature": "com.google.javascript.jscomp.InlineVariablesTest.testInsideHookBranch()",
        "snippet": "  public void testInsideHookBranch() {\n    testSame(\"var a = foo(); 1 ? alert(a) : alert(3)\");\n  }\n",
        "begin_line": 257,
        "end_line": 259,
        "comment": "",
        "child_ranges": [
            "(line 258,col 5)-(line 258,col 55)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineVariablesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineVariablesTest.java",
        "signature": "com.google.javascript.jscomp.InlineVariablesTest.testInsideHookConditional()",
        "snippet": "  public void testInsideHookConditional() {\n    test(\"var a = foo(); a ? alert(1) : alert(3)\",\n         \"foo() ? alert(1) : alert(3)\");\n  }\n",
        "begin_line": 261,
        "end_line": 264,
        "comment": "",
        "child_ranges": [
            "(line 262,col 5)-(line 263,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineVariablesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineVariablesTest.java",
        "signature": "com.google.javascript.jscomp.InlineVariablesTest.testInsideOrBranchInsideIfConditional()",
        "snippet": "  public void testInsideOrBranchInsideIfConditional() {\n    testSame(\"var a = foo(); if (x || a) {}\");\n  }\n",
        "begin_line": 266,
        "end_line": 268,
        "comment": "",
        "child_ranges": [
            "(line 267,col 5)-(line 267,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineVariablesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineVariablesTest.java",
        "signature": "com.google.javascript.jscomp.InlineVariablesTest.testInsideOrBranchInsideIfConditionalWithConstant()",
        "snippet": "  public void testInsideOrBranchInsideIfConditionalWithConstant() {\n    // We don't inline non-immutable constants into branches.\n    testSame(\"var a = [false]; if (x || a) {}\");\n  }\n",
        "begin_line": 270,
        "end_line": 273,
        "comment": "",
        "child_ranges": [
            "(line 272,col 5)-(line 272,col 48)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineVariablesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineVariablesTest.java",
        "signature": "com.google.javascript.jscomp.InlineVariablesTest.testCrossFunctionsAsLeftLeaves()",
        "snippet": "  public void testCrossFunctionsAsLeftLeaves() {\n    // Ensures getNext() understands how to walk past a function leaf\n    test(\n        new String[] { \"var x = function() {};\", \"\",\n            \"function cow() {} var z = x;\"},\n        new String[] { \"\", \"\", \"function cow() {} var z = function() {};\" });\n    test(\n        new String[] { \"var x = function() {};\", \"\",\n            \"var cow = function() {}; var z = x;\"},\n        new String[] { \"\", \"\",\n            \"var cow = function() {}; var z = function() {};\" });\n    testSame(\n        new String[] { \"var x = a;\", \"\",\n            \"(function() { a++; })(); var z = x;\"});\n    test(\n        new String[] { \"var x = a;\", \"\",\n            \"function cow() { a++; }; cow(); var z = x;\"},\n        new String[] { \"var x = a;\", \"\",\n            \";(function cow(){ a++; })(); var z = x;\"});\n    testSame(\n        new String[] { \"var x = a;\", \"\",\n            \"cow(); var z = x; function cow() { a++; };\"});\n  }\n",
        "begin_line": 275,
        "end_line": 297,
        "comment": "",
        "child_ranges": [
            "(line 277,col 5)-(line 280,col 77)",
            "(line 281,col 5)-(line 285,col 65)",
            "(line 286,col 5)-(line 288,col 52)",
            "(line 289,col 5)-(line 293,col 56)",
            "(line 294,col 5)-(line 296,col 59)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineVariablesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineVariablesTest.java",
        "signature": "com.google.javascript.jscomp.InlineVariablesTest.testDoCrossFunction()",
        "snippet": "  public void testDoCrossFunction() {\n    // We know foo() does not affect x because we require that x is only\n    // referenced twice.\n    test(\"var x = 1; foo(); var z = x;\", \"foo(); var z = 1;\");\n  }\n",
        "begin_line": 301,
        "end_line": 305,
        "comment": "",
        "child_ranges": [
            "(line 304,col 5)-(line 304,col 62)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineVariablesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineVariablesTest.java",
        "signature": "com.google.javascript.jscomp.InlineVariablesTest.testDoNotCrossReferencingFunction()",
        "snippet": "  public void testDoNotCrossReferencingFunction() {\n    testSame(\n        \"var f = function() { var z = x; };\" +\n        \"var x = 1;\" +\n        \"f();\" +\n        \"var z = x;\" +\n        \"f();\");\n  }\n",
        "begin_line": 307,
        "end_line": 314,
        "comment": "",
        "child_ranges": [
            "(line 308,col 5)-(line 313,col 16)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineVariablesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineVariablesTest.java",
        "signature": "com.google.javascript.jscomp.InlineVariablesTest.testChainedAssignment()",
        "snippet": "  public void testChainedAssignment() {\n    test(\"var a = 2, b = 2; var c = b;\", \"var a = 2; var c = 2;\");\n    test(\"var a = 2, b = 2; var c = a;\", \"var b = 2; var c = 2;\");\n    test(\"var a = b = 2; var f = 3; var c = a;\", \"var f = 3; var c = b = 2;\");\n    testSame(\"var a = b = 2; var c = b;\");\n  }\n",
        "begin_line": 319,
        "end_line": 324,
        "comment": "",
        "child_ranges": [
            "(line 320,col 5)-(line 320,col 66)",
            "(line 321,col 5)-(line 321,col 66)",
            "(line 322,col 5)-(line 322,col 78)",
            "(line 323,col 5)-(line 323,col 42)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineVariablesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineVariablesTest.java",
        "signature": "com.google.javascript.jscomp.InlineVariablesTest.testForIn()",
        "snippet": "  public void testForIn() {\n    testSame(\"for (var i in j) { var c = i; }\");\n    testSame(\"var i = 0; for (i in j) ;\");\n    testSame(\"var i = 0; for (i in j) { var c = i; }\");\n    testSame(\"i = 0; for (var i in j) { var c = i; }\");\n    testSame(\"var j = {'key':'value'}; for (var i in j) {print(i)};\");\n  }\n",
        "begin_line": 326,
        "end_line": 332,
        "comment": "",
        "child_ranges": [
            "(line 327,col 5)-(line 327,col 48)",
            "(line 328,col 5)-(line 328,col 42)",
            "(line 329,col 5)-(line 329,col 55)",
            "(line 330,col 5)-(line 330,col 55)",
            "(line 331,col 5)-(line 331,col 70)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineVariablesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineVariablesTest.java",
        "signature": "com.google.javascript.jscomp.InlineVariablesTest.testDoCrossNewVariables()",
        "snippet": "  public void testDoCrossNewVariables() {\n    test(\"var x = foo(); var z = x;\", \"var z = foo();\");\n  }\n",
        "begin_line": 336,
        "end_line": 338,
        "comment": "",
        "child_ranges": [
            "(line 337,col 5)-(line 337,col 56)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineVariablesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineVariablesTest.java",
        "signature": "com.google.javascript.jscomp.InlineVariablesTest.testDoNotCrossFunctionCalls()",
        "snippet": "  public void testDoNotCrossFunctionCalls() {\n    testSame(\"var x = foo(); bar(); var z = x;\");\n  }\n",
        "begin_line": 340,
        "end_line": 342,
        "comment": "",
        "child_ranges": [
            "(line 341,col 5)-(line 341,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineVariablesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineVariablesTest.java",
        "signature": "com.google.javascript.jscomp.InlineVariablesTest.testDoNotCrossAssignment()",
        "snippet": "  public void testDoNotCrossAssignment() {\n    testSame(\"var x = {}; var y = x.a; x.a = 1; var z = y;\");\n    testSame(\"var a = this.id; foo(this.id = 3, a);\");\n  }\n",
        "begin_line": 347,
        "end_line": 350,
        "comment": "",
        "child_ranges": [
            "(line 348,col 5)-(line 348,col 61)",
            "(line 349,col 5)-(line 349,col 54)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineVariablesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineVariablesTest.java",
        "signature": "com.google.javascript.jscomp.InlineVariablesTest.testDoNotCrossDelete()",
        "snippet": "  public void testDoNotCrossDelete() {\n    testSame(\"var x = {}; var y = x.a; delete x.a; var z = y;\");\n  }\n",
        "begin_line": 352,
        "end_line": 354,
        "comment": "",
        "child_ranges": [
            "(line 353,col 5)-(line 353,col 64)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineVariablesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineVariablesTest.java",
        "signature": "com.google.javascript.jscomp.InlineVariablesTest.testDoNotCrossAssignmentPlus()",
        "snippet": "  public void testDoNotCrossAssignmentPlus() {\n    testSame(\"var a = b; b += 2; var c = a;\");\n  }\n",
        "begin_line": 356,
        "end_line": 358,
        "comment": "",
        "child_ranges": [
            "(line 357,col 5)-(line 357,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineVariablesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineVariablesTest.java",
        "signature": "com.google.javascript.jscomp.InlineVariablesTest.testDoNotCrossIncrement()",
        "snippet": "  public void testDoNotCrossIncrement() {\n    testSame(\"var a = b.c; b.c++; var d = a;\");\n  }\n",
        "begin_line": 360,
        "end_line": 362,
        "comment": "",
        "child_ranges": [
            "(line 361,col 5)-(line 361,col 47)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineVariablesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineVariablesTest.java",
        "signature": "com.google.javascript.jscomp.InlineVariablesTest.testDoNotCrossConstructor()",
        "snippet": "  public void testDoNotCrossConstructor() {\n    testSame(\"var a = b; new Foo(); var c = a;\");\n  }\n",
        "begin_line": 364,
        "end_line": 366,
        "comment": "",
        "child_ranges": [
            "(line 365,col 5)-(line 365,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineVariablesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineVariablesTest.java",
        "signature": "com.google.javascript.jscomp.InlineVariablesTest.testDoCrossVar()",
        "snippet": "  public void testDoCrossVar() {\n    // Assumes we do not rely on undefined variables (not technically correct!)\n    test(\"var a = b; var b = 3; alert(a)\", \"alert(3);\");\n  }\n",
        "begin_line": 368,
        "end_line": 371,
        "comment": "",
        "child_ranges": [
            "(line 370,col 5)-(line 370,col 56)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineVariablesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineVariablesTest.java",
        "signature": "com.google.javascript.jscomp.InlineVariablesTest.testOverlappingInlines()",
        "snippet": "  public void testOverlappingInlines() {\n    String source =\n        \"a = function(el, x, opt_y) { \" +\n        \"  var cur = bar(el); \" +\n        \"  opt_y = x.y; \" +\n        \"  x = x.x; \" +\n        \"  var dx = x - cur.x; \" +\n        \"  var dy = opt_y - cur.y;\" +\n        \"  foo(el, el.offsetLeft + dx, el.offsetTop + dy); \" +\n        \"};\";\n    String expected =\n      \"a = function(el, x, opt_y) { \" +\n      \"  var cur = bar(el); \" +\n      \"  opt_y = x.y; \" +\n      \"  x = x.x; \" +\n      \"  foo(el, el.offsetLeft + (x - cur.x),\" +\n      \"      el.offsetTop + (opt_y - cur.y)); \" +\n      \"};\";\n\n    test(source, expected);\n  }\n",
        "begin_line": 373,
        "end_line": 393,
        "comment": "",
        "child_ranges": [
            "(line 374,col 5)-(line 382,col 13)",
            "(line 383,col 5)-(line 390,col 11)",
            "(line 392,col 5)-(line 392,col 27)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineVariablesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineVariablesTest.java",
        "signature": "com.google.javascript.jscomp.InlineVariablesTest.testOverlappingInlineFunctions()",
        "snippet": "  public void testOverlappingInlineFunctions() {\n    String source =\n        \"a = function() { \" +\n        \"  var b = function(args) {var n;}; \" +\n        \"  var c = function(args) {}; \" +\n        \"  d(b,c); \" +\n        \"};\";\n    String expected =\n      \"a = function() { \" +\n      \"  d(function(args){var n;}, function(args){}); \" +\n      \"};\";\n\n    test(source, expected);\n  }\n",
        "begin_line": 395,
        "end_line": 408,
        "comment": "",
        "child_ranges": [
            "(line 396,col 5)-(line 401,col 13)",
            "(line 402,col 5)-(line 405,col 11)",
            "(line 407,col 5)-(line 407,col 27)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineVariablesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineVariablesTest.java",
        "signature": "com.google.javascript.jscomp.InlineVariablesTest.testInlineIntoLoops()",
        "snippet": "  public void testInlineIntoLoops() {\n    test(\"var x = true; while (true) alert(x);\",\n         \"while (true) alert(true);\");\n    test(\"var x = true; while (true) for (var i in {}) alert(x);\",\n         \"while (true) for (var i in {}) alert(true);\");\n    testSame(\"var x = [true]; while (true) alert(x);\");\n  }\n",
        "begin_line": 410,
        "end_line": 416,
        "comment": "",
        "child_ranges": [
            "(line 411,col 5)-(line 412,col 38)",
            "(line 413,col 5)-(line 414,col 56)",
            "(line 415,col 5)-(line 415,col 55)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineVariablesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineVariablesTest.java",
        "signature": "com.google.javascript.jscomp.InlineVariablesTest.testInlineIntoFunction()",
        "snippet": "  public void testInlineIntoFunction() {\n    test(\"var x = false; var f = function() { alert(x); };\",\n         \"var f = function() { alert(false); };\");\n    testSame(\"var x = [false]; var f = function() { alert(x); };\");\n  }\n",
        "begin_line": 418,
        "end_line": 422,
        "comment": "",
        "child_ranges": [
            "(line 419,col 5)-(line 420,col 50)",
            "(line 421,col 5)-(line 421,col 67)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineVariablesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineVariablesTest.java",
        "signature": "com.google.javascript.jscomp.InlineVariablesTest.testNoInlineIntoNamedFunction()",
        "snippet": "  public void testNoInlineIntoNamedFunction() {\n    testSame(\"f(); var x = false; function f() { alert(x); };\");\n  }\n",
        "begin_line": 424,
        "end_line": 426,
        "comment": "",
        "child_ranges": [
            "(line 425,col 5)-(line 425,col 64)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineVariablesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineVariablesTest.java",
        "signature": "com.google.javascript.jscomp.InlineVariablesTest.testInlineIntoNestedNonHoistedNamedFunctions()",
        "snippet": "  public void testInlineIntoNestedNonHoistedNamedFunctions() {\n    test(\"f(); var x = false; if (false) function f() { alert(x); };\",\n         \"f(); if (false) function f() { alert(false); };\");\n  }\n",
        "begin_line": 428,
        "end_line": 431,
        "comment": "",
        "child_ranges": [
            "(line 429,col 5)-(line 430,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineVariablesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineVariablesTest.java",
        "signature": "com.google.javascript.jscomp.InlineVariablesTest.testNoInlineIntoNestedNamedFunctions()",
        "snippet": "  public void testNoInlineIntoNestedNamedFunctions() {\n    testSame(\"f(); var x = false; function f() { if (false) { alert(x); } };\");\n  }\n",
        "begin_line": 433,
        "end_line": 435,
        "comment": "",
        "child_ranges": [
            "(line 434,col 5)-(line 434,col 79)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineVariablesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineVariablesTest.java",
        "signature": "com.google.javascript.jscomp.InlineVariablesTest.testNoInlineMutatedVariable()",
        "snippet": "  public void testNoInlineMutatedVariable() {\n    testSame(\"var x = false; if (true) { var y = x; x = true; }\");\n  }\n",
        "begin_line": 437,
        "end_line": 439,
        "comment": "",
        "child_ranges": [
            "(line 438,col 5)-(line 438,col 66)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineVariablesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineVariablesTest.java",
        "signature": "com.google.javascript.jscomp.InlineVariablesTest.testInlineImmutableMultipleTimes()",
        "snippet": "  public void testInlineImmutableMultipleTimes() {\n    test(\"var x = null; var y = x, z = x;\",\n         \"var y = null, z = null;\");\n    test(\"var x = 3; var y = x, z = x;\",\n         \"var y = 3, z = 3;\");\n  }\n",
        "begin_line": 441,
        "end_line": 446,
        "comment": "",
        "child_ranges": [
            "(line 442,col 5)-(line 443,col 36)",
            "(line 444,col 5)-(line 445,col 30)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineVariablesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineVariablesTest.java",
        "signature": "com.google.javascript.jscomp.InlineVariablesTest.testNoInlineStringMultipleTimesIfNotWorthwhile()",
        "snippet": "  public void testNoInlineStringMultipleTimesIfNotWorthwhile() {\n    testSame(\"var x = 'abcdefghijklmnopqrstuvwxyz'; var y = x, z = x;\");\n  }\n",
        "begin_line": 448,
        "end_line": 450,
        "comment": "",
        "child_ranges": [
            "(line 449,col 5)-(line 449,col 72)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineVariablesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineVariablesTest.java",
        "signature": "com.google.javascript.jscomp.InlineVariablesTest.testInlineStringMultipleTimesWhenAliasingAllStrings()",
        "snippet": "  public void testInlineStringMultipleTimesWhenAliasingAllStrings() {\n    inlineAllStrings = true;\n    test(\"var x = 'abcdefghijklmnopqrstuvwxyz'; var y = x, z = x;\",\n         \"var y = 'abcdefghijklmnopqrstuvwxyz', \" +\n         \"    z = 'abcdefghijklmnopqrstuvwxyz';\");\n  }\n",
        "begin_line": 452,
        "end_line": 457,
        "comment": "",
        "child_ranges": [
            "(line 453,col 5)-(line 453,col 28)",
            "(line 454,col 5)-(line 456,col 50)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineVariablesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineVariablesTest.java",
        "signature": "com.google.javascript.jscomp.InlineVariablesTest.testNoInlineBackwards()",
        "snippet": "  public void testNoInlineBackwards() {\n    testSame(\"var y = x; var x = null;\");\n  }\n",
        "begin_line": 459,
        "end_line": 461,
        "comment": "",
        "child_ranges": [
            "(line 460,col 5)-(line 460,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineVariablesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineVariablesTest.java",
        "signature": "com.google.javascript.jscomp.InlineVariablesTest.testNoInlineOutOfBranch()",
        "snippet": "  public void testNoInlineOutOfBranch() {\n    testSame(\"if (true) var x = null; var y = x;\");\n  }\n",
        "begin_line": 463,
        "end_line": 465,
        "comment": "",
        "child_ranges": [
            "(line 464,col 5)-(line 464,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineVariablesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineVariablesTest.java",
        "signature": "com.google.javascript.jscomp.InlineVariablesTest.testInterferingInlines()",
        "snippet": "  public void testInterferingInlines() {\n    test(\"var a = 3; var f = function() { var x = a; alert(x); };\",\n         \"var f = function() { alert(3); };\");\n  }\n",
        "begin_line": 467,
        "end_line": 470,
        "comment": "",
        "child_ranges": [
            "(line 468,col 5)-(line 469,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineVariablesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineVariablesTest.java",
        "signature": "com.google.javascript.jscomp.InlineVariablesTest.testInlineIntoTryCatch()",
        "snippet": "  public void testInlineIntoTryCatch() {\n    test(\"var a = true; \" +\n         \"try { var b = a; } \" +\n         \"catch (e) { var c = a + b; var d = true; } \" +\n         \"finally { var f = a + b + c + d; }\",\n         \"try { var b = true; } \" +\n         \"catch (e) { var c = true + b; var d = true; } \" +\n         \"finally { var f = true + b + c + d; }\");\n  }\n",
        "begin_line": 472,
        "end_line": 480,
        "comment": "",
        "child_ranges": [
            "(line 473,col 5)-(line 479,col 50)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineVariablesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineVariablesTest.java",
        "signature": "com.google.javascript.jscomp.InlineVariablesTest.testInlineConstants()",
        "snippet": "  public void testInlineConstants() {\n    test(\"function foo() { return XXX; } var XXX = true;\",\n         \"function foo() { return true; }\");\n  }\n",
        "begin_line": 484,
        "end_line": 487,
        "comment": " written before they're read.",
        "child_ranges": [
            "(line 485,col 5)-(line 486,col 44)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineVariablesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineVariablesTest.java",
        "signature": "com.google.javascript.jscomp.InlineVariablesTest.testInlineStringWhenWorthwhile()",
        "snippet": "  public void testInlineStringWhenWorthwhile() {\n    test(\"var x = 'a'; foo(x, x, x);\", \"foo('a', 'a', 'a');\");\n  }\n",
        "begin_line": 489,
        "end_line": 491,
        "comment": "",
        "child_ranges": [
            "(line 490,col 5)-(line 490,col 62)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineVariablesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineVariablesTest.java",
        "signature": "com.google.javascript.jscomp.InlineVariablesTest.testInlineConstantAlias()",
        "snippet": "  public void testInlineConstantAlias() {\n    test(\"var XXX = new Foo(); q(XXX); var YYY = XXX; bar(YYY)\",\n         \"var XXX = new Foo(); q(XXX); bar(XXX)\");\n  }\n",
        "begin_line": 493,
        "end_line": 496,
        "comment": "",
        "child_ranges": [
            "(line 494,col 5)-(line 495,col 50)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineVariablesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineVariablesTest.java",
        "signature": "com.google.javascript.jscomp.InlineVariablesTest.testInlineConstantAliasWithAnnotation()",
        "snippet": "  public void testInlineConstantAliasWithAnnotation() {\n    test(\"/** @const */ var xxx = new Foo(); q(xxx); var YYY = xxx; bar(YYY)\",\n         \"/** @const */ var xxx = new Foo(); q(xxx); bar(xxx)\");\n  }\n",
        "begin_line": 498,
        "end_line": 501,
        "comment": "",
        "child_ranges": [
            "(line 499,col 5)-(line 500,col 64)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineVariablesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineVariablesTest.java",
        "signature": "com.google.javascript.jscomp.InlineVariablesTest.testInlineConstantAliasWithNonConstant()",
        "snippet": "  public void testInlineConstantAliasWithNonConstant() {\n    test(\"var XXX = new Foo(); q(XXX); var y = XXX; bar(y); baz(y)\",\n         \"var XXX = new Foo(); q(XXX); bar(XXX); baz(XXX)\");\n  }\n",
        "begin_line": 503,
        "end_line": 506,
        "comment": "",
        "child_ranges": [
            "(line 504,col 5)-(line 505,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineVariablesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineVariablesTest.java",
        "signature": "com.google.javascript.jscomp.InlineVariablesTest.testCascadingInlines()",
        "snippet": "  public void testCascadingInlines() {\n    test(\"var XXX = 4; \" +\n         \"function f() { var YYY = XXX; bar(YYY); baz(YYY); }\",\n         \"function f() { bar(4); baz(4); }\");\n  }\n",
        "begin_line": 508,
        "end_line": 512,
        "comment": "",
        "child_ranges": [
            "(line 509,col 5)-(line 511,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineVariablesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineVariablesTest.java",
        "signature": "com.google.javascript.jscomp.InlineVariablesTest.testNoInlineGetpropIntoCall()",
        "snippet": "  public void testNoInlineGetpropIntoCall() {\n    test(\"var a = b; a();\", \"b();\");\n    test(\"var a = b.c; f(a);\", \"f(b.c);\");\n    testSame(\"var a = b.c; a();\");\n  }\n",
        "begin_line": 514,
        "end_line": 518,
        "comment": "",
        "child_ranges": [
            "(line 515,col 5)-(line 515,col 36)",
            "(line 516,col 5)-(line 516,col 42)",
            "(line 517,col 5)-(line 517,col 34)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineVariablesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineVariablesTest.java",
        "signature": "com.google.javascript.jscomp.InlineVariablesTest.testInlineFunctionDeclaration()",
        "snippet": "  public void testInlineFunctionDeclaration() {\n    test(\"var f = function () {}; var a = f;\",\n         \"var a = function () {};\");\n    test(\"var f = function () {}; foo(); var a = f;\",\n         \"foo(); var a = function () {};\");\n    test(\"var f = function () {}; foo(f);\",\n         \"foo(function () {});\");\n\n    testSame(\"var f = function () {}; function g() {var a = f;}\");\n    testSame(\"var f = function () {}; function g() {h(f);}\");\n  }\n",
        "begin_line": 520,
        "end_line": 530,
        "comment": "",
        "child_ranges": [
            "(line 521,col 5)-(line 522,col 36)",
            "(line 523,col 5)-(line 524,col 43)",
            "(line 525,col 5)-(line 526,col 33)",
            "(line 528,col 5)-(line 528,col 66)",
            "(line 529,col 5)-(line 529,col 61)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineVariablesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineVariablesTest.java",
        "signature": "com.google.javascript.jscomp.InlineVariablesTest.test2388531()",
        "snippet": "  public void test2388531() {\n    testSame(\"var f = function () {};\" +\n             \"var g = function () {};\" +\n             \"goog.inherits(f, g);\");\n    testSame(\"var f = function () {};\" +\n             \"var g = function () {};\" +\n             \"goog$inherits(f, g);\");\n  }\n",
        "begin_line": 532,
        "end_line": 539,
        "comment": "",
        "child_ranges": [
            "(line 533,col 5)-(line 535,col 37)",
            "(line 536,col 5)-(line 538,col 37)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineVariablesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineVariablesTest.java",
        "signature": "com.google.javascript.jscomp.InlineVariablesTest.testRecursiveFunction1()",
        "snippet": "  public void testRecursiveFunction1() {\n    testSame(\"var x = 0; (function x() { return x ? x() : 3; })();\");\n  }\n",
        "begin_line": 541,
        "end_line": 543,
        "comment": "",
        "child_ranges": [
            "(line 542,col 5)-(line 542,col 69)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineVariablesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineVariablesTest.java",
        "signature": "com.google.javascript.jscomp.InlineVariablesTest.testRecursiveFunction2()",
        "snippet": "  public void testRecursiveFunction2() {\n    testSame(\"function y() { return y(); }\");\n  }\n",
        "begin_line": 545,
        "end_line": 547,
        "comment": "",
        "child_ranges": [
            "(line 546,col 5)-(line 546,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineVariablesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineVariablesTest.java",
        "signature": "com.google.javascript.jscomp.InlineVariablesTest.testUnreferencedBleedingFunction()",
        "snippet": "  public void testUnreferencedBleedingFunction() {\n    testSame(\"var x = function y() {}\");\n  }\n",
        "begin_line": 549,
        "end_line": 551,
        "comment": "",
        "child_ranges": [
            "(line 550,col 5)-(line 550,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineVariablesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineVariablesTest.java",
        "signature": "com.google.javascript.jscomp.InlineVariablesTest.testReferencedBleedingFunction()",
        "snippet": "  public void testReferencedBleedingFunction() {\n    testSame(\"var x = function y() { return y(); }\");\n  }\n",
        "begin_line": 553,
        "end_line": 555,
        "comment": "",
        "child_ranges": [
            "(line 554,col 5)-(line 554,col 53)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineVariablesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineVariablesTest.java",
        "signature": "com.google.javascript.jscomp.InlineVariablesTest.testInlineAliases1()",
        "snippet": "  public void testInlineAliases1() {\n    test(\"var x = this.foo(); this.bar(); var y = x; this.baz(y);\",\n         \"var x = this.foo(); this.bar(); this.baz(x);\");\n  }\n",
        "begin_line": 557,
        "end_line": 560,
        "comment": "",
        "child_ranges": [
            "(line 558,col 5)-(line 559,col 57)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineVariablesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineVariablesTest.java",
        "signature": "com.google.javascript.jscomp.InlineVariablesTest.testInlineAliases1b()",
        "snippet": "  public void testInlineAliases1b() {\n    test(\"var x = this.foo(); this.bar(); var y; y = x; this.baz(y);\",\n         \"var x = this.foo(); this.bar(); x; this.baz(x);\");\n  }\n",
        "begin_line": 562,
        "end_line": 565,
        "comment": "",
        "child_ranges": [
            "(line 563,col 5)-(line 564,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineVariablesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineVariablesTest.java",
        "signature": "com.google.javascript.jscomp.InlineVariablesTest.testInlineAliases1c()",
        "snippet": "  public void testInlineAliases1c() {\n    test(\"var x; x = this.foo(); this.bar(); var y = x; this.baz(y);\",\n         \"var x; x = this.foo(); this.bar(); this.baz(x);\");\n  }\n",
        "begin_line": 567,
        "end_line": 570,
        "comment": "",
        "child_ranges": [
            "(line 568,col 5)-(line 569,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineVariablesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineVariablesTest.java",
        "signature": "com.google.javascript.jscomp.InlineVariablesTest.testInlineAliases1d()",
        "snippet": "  public void testInlineAliases1d() {\n    test(\"var x; x = this.foo(); this.bar(); var y; y = x; this.baz(y);\",\n         \"var x; x = this.foo(); this.bar(); x; this.baz(x);\");\n  }\n",
        "begin_line": 572,
        "end_line": 575,
        "comment": "",
        "child_ranges": [
            "(line 573,col 5)-(line 574,col 63)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineVariablesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineVariablesTest.java",
        "signature": "com.google.javascript.jscomp.InlineVariablesTest.testInlineAliases2()",
        "snippet": "  public void testInlineAliases2() {\n    test(\"var x = this.foo(); this.bar(); \" +\n         \"function f() { var y = x; this.baz(y); }\",\n         \"var x = this.foo(); this.bar(); function f() { this.baz(x); }\");\n  }\n",
        "begin_line": 577,
        "end_line": 581,
        "comment": "",
        "child_ranges": [
            "(line 578,col 5)-(line 580,col 74)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineVariablesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineVariablesTest.java",
        "signature": "com.google.javascript.jscomp.InlineVariablesTest.testInlineAliases2b()",
        "snippet": "  public void testInlineAliases2b() {\n    test(\"var x = this.foo(); this.bar(); \" +\n         \"function f() { var y; y = x; this.baz(y); }\",\n         \"var x = this.foo(); this.bar(); function f() { this.baz(x); }\");\n  }\n",
        "begin_line": 583,
        "end_line": 587,
        "comment": "",
        "child_ranges": [
            "(line 584,col 5)-(line 586,col 74)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineVariablesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineVariablesTest.java",
        "signature": "com.google.javascript.jscomp.InlineVariablesTest.testInlineAliases2c()",
        "snippet": "  public void testInlineAliases2c() {\n    test(\"var x; x = this.foo(); this.bar(); \" +\n         \"function f() { var y = x; this.baz(y); }\",\n         \"var x; x = this.foo(); this.bar(); function f() { this.baz(x); }\");\n  }\n",
        "begin_line": 589,
        "end_line": 593,
        "comment": "",
        "child_ranges": [
            "(line 590,col 5)-(line 592,col 77)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineVariablesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineVariablesTest.java",
        "signature": "com.google.javascript.jscomp.InlineVariablesTest.testInlineAliases2d()",
        "snippet": "  public void testInlineAliases2d() {\n    test(\"var x; x = this.foo(); this.bar(); \" +\n         \"function f() { var y; y = x; this.baz(y); }\",\n         \"var x; x = this.foo(); this.bar(); function f() { this.baz(x); }\");\n  }\n",
        "begin_line": 595,
        "end_line": 599,
        "comment": "",
        "child_ranges": [
            "(line 596,col 5)-(line 598,col 77)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineVariablesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineVariablesTest.java",
        "signature": "com.google.javascript.jscomp.InlineVariablesTest.testInlineAliasesInLoop()",
        "snippet": "  public void testInlineAliasesInLoop() {\n    test(\n        \"function f() { \" +\n        \"  var x = extern();\" +\n        \"  for (var i = 0; i < 5; i++) {\" +\n        \"    (function() {\" +\n        \"       var y = x; window.setTimeout(function() { extern(y); }, 0);\" +\n        \"     })();\" +\n        \"  }\" +\n        \"}\",\n        \"function f() { \" +\n        \"  var x = extern();\" +\n        \"  for (var i = 0; i < 5; i++) {\" +\n        \"    (function() {\" +\n        \"       window.setTimeout(function() { extern(x); }, 0);\" +\n        \"     })();\" +\n        \"  }\" +\n        \"}\");\n  }\n",
        "begin_line": 601,
        "end_line": 619,
        "comment": "",
        "child_ranges": [
            "(line 602,col 5)-(line 618,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineVariablesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineVariablesTest.java",
        "signature": "com.google.javascript.jscomp.InlineVariablesTest.testNoInlineAliasesInLoop()",
        "snippet": "  public void testNoInlineAliasesInLoop() {\n    testSame(\n        \"function f() { \" +\n        \"  for (var i = 0; i < 5; i++) {\" +\n        \"    var x = extern();\" +\n        \"    (function() {\" +\n        \"       var y = x; window.setTimeout(function() { extern(y); }, 0);\" +\n        \"     })();\" +\n        \"  }\" +\n        \"}\");\n  }\n",
        "begin_line": 621,
        "end_line": 631,
        "comment": "",
        "child_ranges": [
            "(line 622,col 5)-(line 630,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineVariablesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineVariablesTest.java",
        "signature": "com.google.javascript.jscomp.InlineVariablesTest.testNoInlineAliases1()",
        "snippet": "  public void testNoInlineAliases1() {\n    testSame(\n        \"var x = this.foo(); this.bar(); var y = x; x = 3; this.baz(y);\");\n  }\n",
        "begin_line": 633,
        "end_line": 636,
        "comment": "",
        "child_ranges": [
            "(line 634,col 5)-(line 635,col 74)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineVariablesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineVariablesTest.java",
        "signature": "com.google.javascript.jscomp.InlineVariablesTest.testNoInlineAliases1b()",
        "snippet": "  public void testNoInlineAliases1b() {\n    testSame(\n        \"var x = this.foo(); this.bar(); var y; y = x; x = 3; this.baz(y);\");\n  }\n",
        "begin_line": 638,
        "end_line": 641,
        "comment": "",
        "child_ranges": [
            "(line 639,col 5)-(line 640,col 77)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineVariablesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineVariablesTest.java",
        "signature": "com.google.javascript.jscomp.InlineVariablesTest.testNoInlineAliases2()",
        "snippet": "  public void testNoInlineAliases2() {\n    testSame(\n        \"var x = this.foo(); this.bar(); var y = x; y = 3; this.baz(y); \");\n  }\n",
        "begin_line": 643,
        "end_line": 646,
        "comment": "",
        "child_ranges": [
            "(line 644,col 5)-(line 645,col 75)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineVariablesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineVariablesTest.java",
        "signature": "com.google.javascript.jscomp.InlineVariablesTest.testNoInlineAliases2b()",
        "snippet": "  public void testNoInlineAliases2b() {\n    testSame(\n        \"var x = this.foo(); this.bar(); var y; y = x; y = 3; this.baz(y); \");\n  }\n",
        "begin_line": 648,
        "end_line": 651,
        "comment": "",
        "child_ranges": [
            "(line 649,col 5)-(line 650,col 78)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineVariablesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineVariablesTest.java",
        "signature": "com.google.javascript.jscomp.InlineVariablesTest.testNoInlineAliases3()",
        "snippet": "  public void testNoInlineAliases3() {\n    testSame(\n         \"var x = this.foo(); this.bar(); \" +\n         \"function f() { var y = x; g(); this.baz(y); } \" +\n         \"function g() { x = 3; }\");\n  }\n",
        "begin_line": 653,
        "end_line": 658,
        "comment": "",
        "child_ranges": [
            "(line 654,col 5)-(line 657,col 36)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineVariablesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineVariablesTest.java",
        "signature": "com.google.javascript.jscomp.InlineVariablesTest.testNoInlineAliases3b()",
        "snippet": "  public void testNoInlineAliases3b() {\n    testSame(\n         \"var x = this.foo(); this.bar(); \" +\n         \"function f() { var y; y = x; g(); this.baz(y); } \" +\n         \"function g() { x = 3; }\");\n  }\n",
        "begin_line": 660,
        "end_line": 665,
        "comment": "",
        "child_ranges": [
            "(line 661,col 5)-(line 664,col 36)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineVariablesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineVariablesTest.java",
        "signature": "com.google.javascript.jscomp.InlineVariablesTest.testNoInlineAliases4()",
        "snippet": "  public void testNoInlineAliases4() {\n    testSame(\n         \"var x = this.foo(); this.bar(); \" +\n         \"function f() { var y = x; y = 3; this.baz(y); }\");\n  }\n",
        "begin_line": 667,
        "end_line": 671,
        "comment": "",
        "child_ranges": [
            "(line 668,col 5)-(line 670,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineVariablesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineVariablesTest.java",
        "signature": "com.google.javascript.jscomp.InlineVariablesTest.testNoInlineAliases4b()",
        "snippet": "  public void testNoInlineAliases4b() {\n    testSame(\n         \"var x = this.foo(); this.bar(); \" +\n         \"function f() { var y; y = x; y = 3; this.baz(y); }\");\n  }\n",
        "begin_line": 673,
        "end_line": 677,
        "comment": "",
        "child_ranges": [
            "(line 674,col 5)-(line 676,col 63)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineVariablesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineVariablesTest.java",
        "signature": "com.google.javascript.jscomp.InlineVariablesTest.testNoInlineAliases5()",
        "snippet": "  public void testNoInlineAliases5() {\n    testSame(\n        \"var x = this.foo(); this.bar(); var y = x; this.bing();\" +\n        \"this.baz(y); x = 3;\");\n  }\n",
        "begin_line": 679,
        "end_line": 683,
        "comment": "",
        "child_ranges": [
            "(line 680,col 5)-(line 682,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineVariablesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineVariablesTest.java",
        "signature": "com.google.javascript.jscomp.InlineVariablesTest.testNoInlineAliases5b()",
        "snippet": "  public void testNoInlineAliases5b() {\n    testSame(\n        \"var x = this.foo(); this.bar(); var y; y = x; this.bing();\" +\n        \"this.baz(y); x = 3;\");\n  }\n",
        "begin_line": 685,
        "end_line": 689,
        "comment": "",
        "child_ranges": [
            "(line 686,col 5)-(line 688,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineVariablesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineVariablesTest.java",
        "signature": "com.google.javascript.jscomp.InlineVariablesTest.testNoInlineAliases6()",
        "snippet": "  public void testNoInlineAliases6() {\n    testSame(\n        \"var x = this.foo(); this.bar(); var y = x; this.bing();\" +\n        \"this.baz(y); y = 3;\");\n  }\n",
        "begin_line": 691,
        "end_line": 695,
        "comment": "",
        "child_ranges": [
            "(line 692,col 5)-(line 694,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineVariablesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineVariablesTest.java",
        "signature": "com.google.javascript.jscomp.InlineVariablesTest.testNoInlineAliases6b()",
        "snippet": "  public void testNoInlineAliases6b() {\n    testSame(\n        \"var x = this.foo(); this.bar(); var y; y = x; this.bing();\" +\n        \"this.baz(y); y = 3;\");\n  }\n",
        "begin_line": 697,
        "end_line": 701,
        "comment": "",
        "child_ranges": [
            "(line 698,col 5)-(line 700,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineVariablesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineVariablesTest.java",
        "signature": "com.google.javascript.jscomp.InlineVariablesTest.testNoInlineAliases7()",
        "snippet": "  public void testNoInlineAliases7() {\n    testSame(\n         \"var x = this.foo(); this.bar(); \" +\n         \"function f() { var y = x; this.bing(); this.baz(y); x = 3; }\");\n  }\n",
        "begin_line": 703,
        "end_line": 707,
        "comment": "",
        "child_ranges": [
            "(line 704,col 5)-(line 706,col 73)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineVariablesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineVariablesTest.java",
        "signature": "com.google.javascript.jscomp.InlineVariablesTest.testNoInlineAliases7b()",
        "snippet": "  public void testNoInlineAliases7b() {\n    testSame(\n         \"var x = this.foo(); this.bar(); \" +\n         \"function f() { var y; y = x; this.bing(); this.baz(y); x = 3; }\");\n  }\n",
        "begin_line": 709,
        "end_line": 713,
        "comment": "",
        "child_ranges": [
            "(line 710,col 5)-(line 712,col 76)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineVariablesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineVariablesTest.java",
        "signature": "com.google.javascript.jscomp.InlineVariablesTest.testNoInlineAliases8()",
        "snippet": "  public void testNoInlineAliases8() {\n    testSame(\n         \"var x = this.foo(); this.bar(); \" +\n         \"function f() { var y = x; this.baz(y); y = 3; }\");\n  }\n",
        "begin_line": 715,
        "end_line": 719,
        "comment": "",
        "child_ranges": [
            "(line 716,col 5)-(line 718,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineVariablesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineVariablesTest.java",
        "signature": "com.google.javascript.jscomp.InlineVariablesTest.testNoInlineAliases8b()",
        "snippet": "  public void testNoInlineAliases8b() {\n    testSame(\n         \"var x = this.foo(); this.bar(); \" +\n         \"function f() { var y; y = x; this.baz(y); y = 3; }\");\n  }\n",
        "begin_line": 721,
        "end_line": 725,
        "comment": "",
        "child_ranges": [
            "(line 722,col 5)-(line 724,col 63)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineVariablesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineVariablesTest.java",
        "signature": "com.google.javascript.jscomp.InlineVariablesTest.testSideEffectOrder()",
        "snippet": "  public void testSideEffectOrder() {\n    // z can not be changed by the call to y, so x can be inlined.\n    String EXTERNS = \"var z; function f(){}\";\n    test(EXTERNS,\n         \"var x = f(y.a, y); z = x;\",\n         \"z = f(y.a, y);\", null, null);\n    // z.b can be changed by the call to y, so x can not be inlined.\n    testSame(EXTERNS, \"var x = f(y.a, y); z.b = x;\", null, null);\n  }\n",
        "begin_line": 727,
        "end_line": 735,
        "comment": "",
        "child_ranges": [
            "(line 729,col 5)-(line 729,col 45)",
            "(line 730,col 5)-(line 732,col 39)",
            "(line 734,col 5)-(line 734,col 65)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineVariablesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineVariablesTest.java",
        "signature": "com.google.javascript.jscomp.InlineVariablesTest.testInlineParameterAlias1()",
        "snippet": "  public void testInlineParameterAlias1() {\n    test(\n      \"function f(x) {\" +\n      \"  var y = x;\" +\n      \"  g();\" +\n      \"  y;y;\" +\n      \"}\",\n      \"function f(x) {\" +\n      \"  g();\" +\n      \"  x;x;\" +\n      \"}\"\n      );\n  }\n",
        "begin_line": 737,
        "end_line": 749,
        "comment": "",
        "child_ranges": [
            "(line 738,col 5)-(line 748,col 8)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineVariablesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineVariablesTest.java",
        "signature": "com.google.javascript.jscomp.InlineVariablesTest.testInlineParameterAlias2()",
        "snippet": "  public void testInlineParameterAlias2() {\n    test(\n      \"function f(x) {\" +\n      \"  var y; y = x;\" +\n      \"  g();\" +\n      \"  y;y;\" +\n      \"}\",\n      \"function f(x) {\" +\n      \"  x;\" +\n      \"  g();\" +\n      \"  x;x;\" +\n      \"}\"\n      );\n  }\n",
        "begin_line": 751,
        "end_line": 764,
        "comment": "",
        "child_ranges": [
            "(line 752,col 5)-(line 763,col 8)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineVariablesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineVariablesTest.java",
        "signature": "com.google.javascript.jscomp.InlineVariablesTest.testInlineFunctionAlias1a()",
        "snippet": "  public void testInlineFunctionAlias1a() {\n    test(\n      \"function f(x) {}\" +\n      \"var y = f;\" +\n      \"g();\" +\n      \"y();y();\",\n      \"var y = function f(x) {};\" +\n      \"g();\" +\n      \"y();y();\"\n      );\n  }\n",
        "begin_line": 766,
        "end_line": 776,
        "comment": "",
        "child_ranges": [
            "(line 767,col 5)-(line 775,col 8)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineVariablesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineVariablesTest.java",
        "signature": "com.google.javascript.jscomp.InlineVariablesTest.testInlineFunctionAlias1b()",
        "snippet": "  public void testInlineFunctionAlias1b() {\n    test(\n      \"function f(x) {};\" +\n      \"f;var y = f;\" +\n      \"g();\" +\n      \"y();y();\",\n      \"function f(x) {};\" +\n      \"f;g();\" +\n      \"f();f();\"\n      );\n  }\n",
        "begin_line": 778,
        "end_line": 788,
        "comment": "",
        "child_ranges": [
            "(line 779,col 5)-(line 787,col 8)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineVariablesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineVariablesTest.java",
        "signature": "com.google.javascript.jscomp.InlineVariablesTest.testInlineFunctionAlias2a()",
        "snippet": "  public void testInlineFunctionAlias2a() {\n    test(\n      \"function f(x) {}\" +\n      \"var y; y = f;\" +\n      \"g();\" +\n      \"y();y();\",\n      \"var y; y = function f(x) {};\" +\n      \"g();\" +\n      \"y();y();\"\n      );\n  }\n",
        "begin_line": 790,
        "end_line": 800,
        "comment": "",
        "child_ranges": [
            "(line 791,col 5)-(line 799,col 8)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineVariablesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineVariablesTest.java",
        "signature": "com.google.javascript.jscomp.InlineVariablesTest.testInlineFunctionAlias2b()",
        "snippet": "  public void testInlineFunctionAlias2b() {\n    test(\n      \"function f(x) {};\" +\n      \"f; var y; y = f;\" +\n      \"g();\" +\n      \"y();y();\",\n      \"function f(x) {};\" +\n      \"f; f;\" +\n      \"g();\" +\n      \"f();f();\"\n      );\n  }\n",
        "begin_line": 802,
        "end_line": 813,
        "comment": "",
        "child_ranges": [
            "(line 803,col 5)-(line 812,col 8)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineVariablesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineVariablesTest.java",
        "signature": "com.google.javascript.jscomp.InlineVariablesTest.testInlineCatchAlias1()",
        "snippet": "  public void testInlineCatchAlias1() {\n    test(\n      \"try {\" +\n      \"} catch (e) {\" +\n      \"  var y = e;\" +\n      \"  g();\" +\n      \"  y;y;\" +\n      \"}\",\n      \"try {\" +\n      \"} catch (e) {\" +\n      \"  g();\" +\n      \"  e;e;\" +\n      \"}\"\n      );\n  }\n",
        "begin_line": 815,
        "end_line": 829,
        "comment": "",
        "child_ranges": [
            "(line 816,col 5)-(line 828,col 8)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineVariablesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineVariablesTest.java",
        "signature": "com.google.javascript.jscomp.InlineVariablesTest.testInlineCatchAlias2()",
        "snippet": "  public void testInlineCatchAlias2() {\n    test(\n      \"try {\" +\n      \"} catch (e) {\" +\n      \"  var y; y = e;\" +\n      \"  g();\" +\n      \"  y;y;\" +\n      \"}\",\n      \"try {\" +\n      \"} catch (e) {\" +\n      \"  e;\" +\n      \"  g();\" +\n      \"  e;e;\" +\n      \"}\"\n      );\n  }\n",
        "begin_line": 831,
        "end_line": 846,
        "comment": "",
        "child_ranges": [
            "(line 832,col 5)-(line 845,col 8)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineVariablesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineVariablesTest.java",
        "signature": "com.google.javascript.jscomp.InlineVariablesTest.testLocalsOnly1()",
        "snippet": "  public void testLocalsOnly1() {\n    inlineLocalsOnly = true;\n    test(\n        \"var x=1; x; function f() {var x = 1; x;}\",\n        \"var x=1; x; function f() {1;}\");\n  }\n",
        "begin_line": 848,
        "end_line": 853,
        "comment": "",
        "child_ranges": [
            "(line 849,col 5)-(line 849,col 28)",
            "(line 850,col 5)-(line 852,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineVariablesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineVariablesTest.java",
        "signature": "com.google.javascript.jscomp.InlineVariablesTest.testLocalsOnly2()",
        "snippet": "  public void testLocalsOnly2() {\n    inlineLocalsOnly = true;\n    test(\n        \"/** @const */\\n\" +\n        \"var X=1; X;\\n\" +\n        \"function f() {\\n\" +\n        \"  /** @const */\\n\" +\n        \"  var X = 1; X;\\n\" +\n        \"}\",\n        \"var X=1; X; function f() {1;}\");\n  }\n",
        "begin_line": 855,
        "end_line": 865,
        "comment": "",
        "child_ranges": [
            "(line 856,col 5)-(line 856,col 28)",
            "(line 857,col 5)-(line 864,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineVariablesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineVariablesTest.java",
        "signature": "com.google.javascript.jscomp.InlineVariablesTest.testInlineUndefined1()",
        "snippet": "  public void testInlineUndefined1() {\n    test(\"var x; x;\",\n         \"void 0;\");\n  }\n",
        "begin_line": 867,
        "end_line": 870,
        "comment": "",
        "child_ranges": [
            "(line 868,col 5)-(line 869,col 20)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineVariablesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineVariablesTest.java",
        "signature": "com.google.javascript.jscomp.InlineVariablesTest.testInlineUndefined2()",
        "snippet": "  public void testInlineUndefined2() {\n    testSame(\"var x; x++;\");\n  }\n",
        "begin_line": 872,
        "end_line": 874,
        "comment": "",
        "child_ranges": [
            "(line 873,col 5)-(line 873,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineVariablesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineVariablesTest.java",
        "signature": "com.google.javascript.jscomp.InlineVariablesTest.testInlineUndefined3()",
        "snippet": "  public void testInlineUndefined3() {\n    testSame(\"var x; var x;\");\n  }\n",
        "begin_line": 876,
        "end_line": 878,
        "comment": "",
        "child_ranges": [
            "(line 877,col 5)-(line 877,col 30)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineVariablesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineVariablesTest.java",
        "signature": "com.google.javascript.jscomp.InlineVariablesTest.testInlineUndefined4()",
        "snippet": "  public void testInlineUndefined4() {\n    test(\"var x; x; x;\",\n         \"void 0; void 0;\");\n  }\n",
        "begin_line": 880,
        "end_line": 883,
        "comment": "",
        "child_ranges": [
            "(line 881,col 5)-(line 882,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineVariablesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineVariablesTest.java",
        "signature": "com.google.javascript.jscomp.InlineVariablesTest.testInlineUndefined5()",
        "snippet": "  public void testInlineUndefined5() {\n    test(\"var x; for(x in a) {}\",\n         \"var x; for(x in a) {}\");\n  }\n",
        "begin_line": 885,
        "end_line": 888,
        "comment": "",
        "child_ranges": [
            "(line 886,col 5)-(line 887,col 34)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineVariablesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineVariablesTest.java",
        "signature": "com.google.javascript.jscomp.InlineVariablesTest.testIssue90()",
        "snippet": "  public void testIssue90() {\n    test(\"var x; x && alert(1)\",\n         \"void 0 && alert(1)\");\n  }\n",
        "begin_line": 890,
        "end_line": 893,
        "comment": "",
        "child_ranges": [
            "(line 891,col 5)-(line 892,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineVariablesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineVariablesTest.java",
        "signature": "com.google.javascript.jscomp.InlineVariablesTest.testRenamePropertyFunction()",
        "snippet": "  public void testRenamePropertyFunction() {\n    testSame(\"var JSCompiler_renameProperty; \" +\n             \"JSCompiler_renameProperty('foo')\");\n  }\n",
        "begin_line": 895,
        "end_line": 898,
        "comment": "",
        "child_ranges": [
            "(line 896,col 5)-(line 897,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineVariablesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineVariablesTest.java",
        "signature": "com.google.javascript.jscomp.InlineVariablesTest.testThisAlias()",
        "snippet": "  public void testThisAlias() {\n    test(\"function f() { var a = this; a.y(); a.z(); }\",\n         \"function f() { this.y(); this.z(); }\");\n  }\n",
        "begin_line": 900,
        "end_line": 903,
        "comment": "",
        "child_ranges": [
            "(line 901,col 5)-(line 902,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineVariablesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineVariablesTest.java",
        "signature": "com.google.javascript.jscomp.InlineVariablesTest.testThisEscapedAlias()",
        "snippet": "  public void testThisEscapedAlias() {\n    testSame(\n        \"function f() { var a = this; var g = function() { a.y(); }; a.z(); }\");\n  }\n",
        "begin_line": 905,
        "end_line": 908,
        "comment": "",
        "child_ranges": [
            "(line 906,col 5)-(line 907,col 80)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineVariablesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineVariablesTest.java",
        "signature": "com.google.javascript.jscomp.InlineVariablesTest.testInlineNamedFunction()",
        "snippet": "  public void testInlineNamedFunction() {\n    test(\"function f() {} f();\", \"(function f(){})()\");\n  }\n",
        "begin_line": 910,
        "end_line": 912,
        "comment": "",
        "child_ranges": [
            "(line 911,col 5)-(line 911,col 55)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineVariablesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineVariablesTest.java",
        "signature": "com.google.javascript.jscomp.InlineVariablesTest.testIssue378ModifiedArguments1()",
        "snippet": "  public void testIssue378ModifiedArguments1() {\n    testSame(\n        \"function g(callback) {\\n\" +\n        \"  var f = callback;\\n\" +\n        \"  arguments[0] = this;\\n\" +\n        \"  f.apply(this, arguments);\\n\" +\n        \"}\");\n  }\n",
        "begin_line": 914,
        "end_line": 921,
        "comment": "",
        "child_ranges": [
            "(line 915,col 5)-(line 920,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineVariablesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineVariablesTest.java",
        "signature": "com.google.javascript.jscomp.InlineVariablesTest.testIssue378ModifiedArguments2()",
        "snippet": "  public void testIssue378ModifiedArguments2() {\n    testSame(\n        \"function g(callback) {\\n\" +\n        \"  /** @const */\\n\" +\n        \"  var f = callback;\\n\" +\n        \"  arguments[0] = this;\\n\" +\n        \"  f.apply(this, arguments);\\n\" +\n        \"}\");\n  }\n",
        "begin_line": 923,
        "end_line": 931,
        "comment": "",
        "child_ranges": [
            "(line 924,col 5)-(line 930,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineVariablesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineVariablesTest.java",
        "signature": "com.google.javascript.jscomp.InlineVariablesTest.testIssue378EscapedArguments1()",
        "snippet": "  public void testIssue378EscapedArguments1() {\n    testSame(\n        \"function g(callback) {\\n\" +\n        \"  var f = callback;\\n\" +\n        \"  h(arguments,this);\\n\" +\n        \"  f.apply(this, arguments);\\n\" +\n        \"}\\n\" +\n        \"function h(a,b) {\\n\" +\n        \"  a[0] = b;\" +\n        \"}\");\n  }\n",
        "begin_line": 933,
        "end_line": 943,
        "comment": "",
        "child_ranges": [
            "(line 934,col 5)-(line 942,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineVariablesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineVariablesTest.java",
        "signature": "com.google.javascript.jscomp.InlineVariablesTest.testIssue378EscapedArguments2()",
        "snippet": "  public void testIssue378EscapedArguments2() {\n    testSame(\n        \"function g(callback) {\\n\" +\n        \"  /** @const */\\n\" +\n        \"  var f = callback;\\n\" +\n        \"  h(arguments,this);\\n\" +\n        \"  f.apply(this);\\n\" +\n        \"}\\n\" +\n        \"function h(a,b) {\\n\" +\n        \"  a[0] = b;\" +\n        \"}\");\n  }\n",
        "begin_line": 945,
        "end_line": 956,
        "comment": "",
        "child_ranges": [
            "(line 946,col 5)-(line 955,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineVariablesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineVariablesTest.java",
        "signature": "com.google.javascript.jscomp.InlineVariablesTest.testIssue378EscapedArguments3()",
        "snippet": "  public void testIssue378EscapedArguments3() {\n    test(\n        \"function g(callback) {\\n\" +\n        \"  var f = callback;\\n\" +\n        \"  f.apply(this, arguments);\\n\" +\n        \"}\\n\",\n        \"function g(callback) {\\n\" +\n        \"  callback.apply(this, arguments);\\n\" +\n        \"}\\n\");\n  }\n",
        "begin_line": 958,
        "end_line": 967,
        "comment": "",
        "child_ranges": [
            "(line 959,col 5)-(line 966,col 15)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineVariablesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineVariablesTest.java",
        "signature": "com.google.javascript.jscomp.InlineVariablesTest.testIssue378EscapedArguments4()",
        "snippet": "  public void testIssue378EscapedArguments4() {\n    testSame(\n        \"function g(callback) {\\n\" +\n        \"  var f = callback;\\n\" +\n        \"  h(arguments[0],this);\\n\" +\n        \"  f.apply(this, arguments);\\n\" +\n        \"}\\n\" +\n        \"function h(a,b) {\\n\" +\n        \"  a[0] = b;\" +\n        \"}\");\n  }\n",
        "begin_line": 969,
        "end_line": 979,
        "comment": "",
        "child_ranges": [
            "(line 970,col 5)-(line 978,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineVariablesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineVariablesTest.java",
        "signature": "com.google.javascript.jscomp.InlineVariablesTest.testIssue378ArgumentsRead1()",
        "snippet": "  public void testIssue378ArgumentsRead1() {\n    test(\n        \"function g(callback) {\\n\" +\n        \"  var f = callback;\\n\" +\n        \"  var g = arguments[0];\\n\" +\n        \"  f.apply(this, arguments);\\n\" +\n        \"}\",\n        \"function g(callback) {\\n\" +\n        \"  var g = arguments[0];\\n\" +\n        \"  callback.apply(this, arguments);\\n\" +\n        \"}\");\n  }\n",
        "begin_line": 981,
        "end_line": 992,
        "comment": "",
        "child_ranges": [
            "(line 982,col 5)-(line 991,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineVariablesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineVariablesTest.java",
        "signature": "com.google.javascript.jscomp.InlineVariablesTest.testIssue378ArgumentsRead2()",
        "snippet": "  public void testIssue378ArgumentsRead2() {\n    test(\n        \"function g(callback) {\\n\" +\n        \"  var f = callback;\\n\" +\n        \"  h(arguments[0],this);\\n\" +\n        \"  f.apply(this, arguments[0]);\\n\" +\n        \"}\\n\" +\n        \"function h(a,b) {\\n\" +\n        \"  a[0] = b;\" +\n        \"}\",\n        \"function g(callback) {\\n\" +\n        \"  h(arguments[0],this);\\n\" +\n        \"  callback.apply(this, arguments[0]);\\n\" +\n        \"}\\n\" +\n        \"function h(a,b) {\\n\" +\n        \"  a[0] = b;\" +\n        \"}\");\n  }\n",
        "begin_line": 994,
        "end_line": 1011,
        "comment": "",
        "child_ranges": [
            "(line 995,col 5)-(line 1010,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineVariablesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineVariablesTest.java",
        "signature": "com.google.javascript.jscomp.InlineVariablesTest.testArgumentsModifiedInOuterFunction()",
        "snippet": "  public void testArgumentsModifiedInOuterFunction() {\n    test(\n      \"function g(callback) {\\n\" +\n      \"  var f = callback;\\n\" +\n      \"  arguments[0] = this;\\n\" +\n      \"  f.apply(this, arguments);\\n\" +\n      \"  function inner(callback) {\" +\n      \"    var x = callback;\\n\" +\n      \"    x.apply(this);\\n\" +\n      \"  }\" +\n      \"}\",\n      \"function g(callback) {\\n\" +\n      \"  var f = callback;\\n\" +\n      \"  arguments[0] = this;\\n\" +\n      \"  f.apply(this, arguments);\\n\" +\n      \"  function inner(callback) {\" +\n      \"    callback.apply(this);\\n\" +\n      \"  }\" +\n      \"}\");\n  }\n",
        "begin_line": 1013,
        "end_line": 1032,
        "comment": "",
        "child_ranges": [
            "(line 1014,col 5)-(line 1031,col 11)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineVariablesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineVariablesTest.java",
        "signature": "com.google.javascript.jscomp.InlineVariablesTest.testArgumentsModifiedInInnerFunction()",
        "snippet": "  public void testArgumentsModifiedInInnerFunction() {\n    test(\n      \"function g(callback) {\\n\" +\n      \"  var f = callback;\\n\" +\n      \"  f.apply(this, arguments);\\n\" +\n      \"  function inner(callback) {\" +\n      \"    var x = callback;\\n\" +\n      \"    arguments[0] = this;\\n\" +\n      \"    x.apply(this);\\n\" +\n      \"  }\" +\n      \"}\",\n      \"function g(callback) {\\n\" +\n      \"  callback.apply(this, arguments);\\n\" +\n      \"  function inner(callback) {\" +\n      \"    var x = callback;\\n\" +\n      \"    arguments[0] = this;\\n\" +\n      \"    x.apply(this);\\n\" +\n      \"  }\" +\n      \"}\");\n  }\n",
        "begin_line": 1034,
        "end_line": 1053,
        "comment": "",
        "child_ranges": [
            "(line 1035,col 5)-(line 1052,col 11)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineVariablesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineVariablesTest.java",
        "signature": "com.google.javascript.jscomp.InlineVariablesTest.testNoInlineRedeclaredExterns()",
        "snippet": "  public void testNoInlineRedeclaredExterns() {\n    String externs = \"var test = 1;\";\n    String code = \"/** @suppress {duplicate} */ var test = 2;alert(test);\";\n    test(externs, code, code, null, null);\n  }\n",
        "begin_line": 1055,
        "end_line": 1059,
        "comment": "",
        "child_ranges": [
            "(line 1056,col 5)-(line 1056,col 37)",
            "(line 1057,col 5)-(line 1057,col 75)",
            "(line 1058,col 5)-(line 1058,col 42)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineVariablesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineVariablesTest.java",
        "signature": "com.google.javascript.jscomp.InlineVariablesTest.testBug6598844()",
        "snippet": "  public void testBug6598844() {\n    testSame(\n        \"function F() { this.a = 0; }\" +\n        \"F.prototype.inc = function() { this.a++; return 10; };\" +\n        \"F.prototype.bar = function() { var x = this.inc(); this.a += x; };\");\n  }\n",
        "begin_line": 1061,
        "end_line": 1066,
        "comment": "",
        "child_ranges": [
            "(line 1062,col 5)-(line 1065,col 78)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineVariablesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineVariablesTest.java",
        "signature": "com.google.javascript.jscomp.InlineVariablesTest.testExternalIssue1053()",
        "snippet": "  public void testExternalIssue1053() {\n    testSame(\n        \"var u; function f() { u = Random(); var x = u; f(); alert(x===u)}\");\n  }\n",
        "begin_line": 1068,
        "end_line": 1071,
        "comment": "",
        "child_ranges": [
            "(line 1069,col 5)-(line 1070,col 77)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.InlineVariablesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.CompilerTestCase(java.lang.String, boolean)",
        "snippet": "  protected CompilerTestCase(String externs, boolean compareAsTree) {\n    this.externsInputs = ImmutableList.of(\n        SourceFile.fromCode(\"externs\", externs));\n    this.compareAsTree = compareAsTree;\n    this.parseTypeInfo = false;\n  }\n",
        "begin_line": 137,
        "end_line": 142,
        "comment": "\n   * Constructs a test.\n   *\n   * @param externs Externs JS as a string\n   * @param compareAsTree True to compare output & expected as a node tree.\n   *     99% of the time you want to compare as a tree. There are a few\n   *     special cases where you don't, like if you want to test the code\n   *     printing of \"unnatural\" syntax trees. For example,\n   *\n   * <pre>\n   * IF\n   *   IF\n   *     STATEMENT\n   * ELSE\n   *   STATEMENT\n   * </pre>\n   ",
        "child_ranges": [
            "(line 138,col 5)-(line 139,col 49)",
            "(line 140,col 5)-(line 140,col 39)",
            "(line 141,col 5)-(line 141,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.InlineVariablesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.CompilerTestCase(java.lang.String)",
        "snippet": "  protected CompilerTestCase(String externs) {\n    this(externs, true);\n  }\n",
        "begin_line": 148,
        "end_line": 150,
        "comment": "\n   * Constructs a test. Uses AST comparison.\n   * @param externs Externs JS as a string\n   ",
        "child_ranges": [
            "(line 149,col 5)-(line 149,col 24)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.InlineVariablesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.CompilerTestCase()",
        "snippet": "  protected CompilerTestCase() {\n    this(\"\", true);\n  }\n",
        "begin_line": 155,
        "end_line": 157,
        "comment": "\n   * Constructs a test. Uses AST comparison and no externs.\n   ",
        "child_ranges": [
            "(line 156,col 5)-(line 156,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.InlineVariablesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.tearDown()",
        "snippet": "  @Override protected void tearDown() throws Exception {\n    super.tearDown();\n    expectParseWarningsThisTest = false;\n  }\n",
        "begin_line": 159,
        "end_line": 162,
        "comment": "",
        "child_ranges": [
            "(line 160,col 5)-(line 160,col 21)",
            "(line 161,col 5)-(line 161,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.InlineVariablesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.getProcessor(com.google.javascript.jscomp.Compiler)",
        "snippet": "  protected abstract CompilerPass getProcessor(Compiler compiler);\n",
        "begin_line": 170,
        "end_line": 170,
        "comment": "\n   * Gets the compiler pass instance to use for a test.\n   *\n   * @param compiler The compiler\n   * @return The pass to test\n   ",
        "child_ranges": []
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.InlineVariablesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.getOptions()",
        "snippet": "  protected CompilerOptions getOptions() {\n    return getOptions(new CompilerOptions());\n  }\n",
        "begin_line": 177,
        "end_line": 179,
        "comment": "\n   * Gets the compiler options to use for this test. Use getProcessor to\n   * determine what passes should be run.\n   ",
        "child_ranges": [
            "(line 178,col 5)-(line 178,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.InlineVariablesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.getOptions(com.google.javascript.jscomp.CompilerOptions)",
        "snippet": "  protected CompilerOptions getOptions(CompilerOptions options) {\n    if (this.acceptES5) {\n      options.setLanguageIn(LanguageMode.ECMASCRIPT5);\n    }\n\n    // This doesn't affect whether checkSymbols is run--it just affects\n    // whether variable warnings are filtered.\n    options.checkSymbols = true;\n\n    options.setWarningLevel(\n        DiagnosticGroups.MISSING_PROPERTIES, CheckLevel.WARNING);\n    options.setWarningLevel(\n        DiagnosticGroups.INVALID_CASTS, CheckLevel.WARNING);\n    options.setCodingConvention(getCodingConvention());\n    return options;\n  }\n",
        "begin_line": 185,
        "end_line": 200,
        "comment": "\n   * Gets the compiler options to use for this test. Use getProcessor to\n   * determine what passes should be run.\n   ",
        "child_ranges": [
            "(line 186,col 5)-(line 188,col 5)",
            "(line 192,col 5)-(line 192,col 32)",
            "(line 194,col 5)-(line 195,col 65)",
            "(line 196,col 5)-(line 197,col 60)",
            "(line 198,col 5)-(line 198,col 55)",
            "(line 199,col 5)-(line 199,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.InlineVariablesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.getCodingConvention()",
        "snippet": "  protected CodingConvention getCodingConvention() {\n    return new GoogleCodingConvention();\n  }\n",
        "begin_line": 202,
        "end_line": 204,
        "comment": "",
        "child_ranges": [
            "(line 203,col 5)-(line 203,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.InlineVariablesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.setFilename(java.lang.String)",
        "snippet": "  public void setFilename(String filename) {\n    this.filename = filename;\n  }\n",
        "begin_line": 206,
        "end_line": 208,
        "comment": "",
        "child_ranges": [
            "(line 207,col 5)-(line 207,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.InlineVariablesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.getNumRepetitions()",
        "snippet": "  protected int getNumRepetitions() {\n    // Since most compiler passes should be idempotent, we run each pass twice\n    // by default.\n    return 2;\n  }\n",
        "begin_line": 214,
        "end_line": 218,
        "comment": "\n   * Returns the number of times the pass should be run before results are\n   * verified.\n   ",
        "child_ranges": [
            "(line 217,col 5)-(line 217,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.InlineVariablesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.allowSourcelessWarnings()",
        "snippet": "  void allowSourcelessWarnings() {\n    allowSourcelessWarnings = true;\n  }\n",
        "begin_line": 221,
        "end_line": 223,
        "comment": " Expect warnings without source information. ",
        "child_ranges": [
            "(line 222,col 5)-(line 222,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.InlineVariablesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.getLastCompiler()",
        "snippet": "  Compiler getLastCompiler() {\n    return lastCompiler;\n  }\n",
        "begin_line": 226,
        "end_line": 228,
        "comment": " The most recently used JSComp instance. ",
        "child_ranges": [
            "(line 227,col 5)-(line 227,col 24)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.InlineVariablesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.enableEcmaScript5(boolean)",
        "snippet": "  protected void enableEcmaScript5(boolean acceptES5) {\n    this.acceptES5 = acceptES5;\n  }\n",
        "begin_line": 233,
        "end_line": 235,
        "comment": "\n   * Whether to allow ECMASCRIPT5 source parsing.\n   ",
        "child_ranges": [
            "(line 234,col 5)-(line 234,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.InlineVariablesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.allowExternsChanges(boolean)",
        "snippet": "  protected void allowExternsChanges(boolean allowExternsChanges) {\n    this.allowExternsChanges = allowExternsChanges;\n  }\n",
        "begin_line": 240,
        "end_line": 242,
        "comment": "\n   * Whether to allow externs changes.\n   ",
        "child_ranges": [
            "(line 241,col 5)-(line 241,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.InlineVariablesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.enableTypeCheck(com.google.javascript.jscomp.CheckLevel)",
        "snippet": "  public void enableTypeCheck(CheckLevel level) {\n    typeCheckEnabled  = true;\n    typeCheckLevel = level;\n  }\n",
        "begin_line": 252,
        "end_line": 255,
        "comment": "\n   * Perform type checking before running the test pass. This will check\n   * for type errors and annotate nodes with type information.\n   *\n   * @param level the level of severity to report for type errors\n   *\n   * @see TypeCheck\n   ",
        "child_ranges": [
            "(line 253,col 5)-(line 253,col 29)",
            "(line 254,col 5)-(line 254,col 27)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.InlineVariablesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.enableLineNumberCheck(boolean)",
        "snippet": "  public void enableLineNumberCheck(boolean newVal) {\n    checkLineNumbers = newVal;\n  }\n",
        "begin_line": 260,
        "end_line": 262,
        "comment": "\n   * Check to make sure that line numbers were preserved.\n   ",
        "child_ranges": [
            "(line 261,col 5)-(line 261,col 30)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.InlineVariablesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.disableTypeCheck()",
        "snippet": "  void disableTypeCheck() {\n    typeCheckEnabled  = false;\n  }\n",
        "begin_line": 269,
        "end_line": 271,
        "comment": "\n   * Do not run type checking before running the test pass.\n   *\n   * @see TypeCheck\n   ",
        "child_ranges": [
            "(line 270,col 5)-(line 270,col 30)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.InlineVariablesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.enableClosurePass()",
        "snippet": "  void enableClosurePass() {\n    closurePassEnabled = true;\n  }\n",
        "begin_line": 277,
        "end_line": 279,
        "comment": " TODO(nicksantos): Fix other passes to use this when appropriate.",
        "child_ranges": [
            "(line 278,col 5)-(line 278,col 30)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.InlineVariablesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.enableNormalize()",
        "snippet": "  protected void enableNormalize() {\n    enableNormalize(true);\n  }\n",
        "begin_line": 287,
        "end_line": 289,
        "comment": "\n   * Perform AST normalization before running the test pass, and anti-normalize\n   * after running it.\n   *\n   * @see Normalize\n   ",
        "child_ranges": [
            "(line 288,col 5)-(line 288,col 26)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.InlineVariablesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.enableNormalize(boolean)",
        "snippet": "  protected void enableNormalize(boolean normalizeExpected) {\n    normalizeEnabled = true;\n    this.normalizeExpected = normalizeExpected;\n  }\n",
        "begin_line": 299,
        "end_line": 302,
        "comment": "\n   * Perform AST normalization before running the test pass, and anti-normalize\n   * after running it.\n   *\n   * @param normalizeExpected Whether to perform normalization on the\n   * expected JS result.\n   * @see Normalize\n   ",
        "child_ranges": [
            "(line 300,col 5)-(line 300,col 28)",
            "(line 301,col 5)-(line 301,col 47)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.InlineVariablesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.disableNormalize()",
        "snippet": "  protected void disableNormalize() {\n    normalizeEnabled = false;\n  }\n",
        "begin_line": 308,
        "end_line": 310,
        "comment": "\n   * Don't perform AST normalization before running the test pass.\n   * @see Normalize\n   ",
        "child_ranges": [
            "(line 309,col 5)-(line 309,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.InlineVariablesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.enableMarkNoSideEffects()",
        "snippet": "  void enableMarkNoSideEffects() {\n    markNoSideEffects  = true;\n  }\n",
        "begin_line": 318,
        "end_line": 320,
        "comment": " TODO(nicksantos): This pass doesn't get run anymore. It should be removed.",
        "child_ranges": [
            "(line 319,col 5)-(line 319,col 30)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.InlineVariablesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.enableComputeSideEffects()",
        "snippet": "  void enableComputeSideEffects() {\n    computeSideEffects  = true;\n  }\n",
        "begin_line": 327,
        "end_line": 329,
        "comment": "\n   * Run the PureFunctionIdentifier pass before running the test pass.\n   *\n   * @see MarkNoSideEffectCalls\n   ",
        "child_ranges": [
            "(line 328,col 5)-(line 328,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.InlineVariablesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.enableAstValidation(boolean)",
        "snippet": "  protected void enableAstValidation(boolean validate) {\n    astValidationEnabled = validate;\n  }\n",
        "begin_line": 334,
        "end_line": 336,
        "comment": "\n   * Whether to allow Validate the AST after each run of the pass.\n   ",
        "child_ranges": [
            "(line 335,col 5)-(line 335,col 36)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.InlineVariablesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.setExpectParseWarningsThisTest()",
        "snippet": "  protected void setExpectParseWarningsThisTest() {\n    expectParseWarningsThisTest = true;\n  }\n",
        "begin_line": 339,
        "end_line": 341,
        "comment": " Whether we should ignore parse warnings for the current test method. ",
        "child_ranges": [
            "(line 340,col 5)-(line 340,col 39)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.InlineVariablesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.createTypeCheck(com.google.javascript.jscomp.Compiler, com.google.javascript.jscomp.CheckLevel)",
        "snippet": "  private static TypeCheck createTypeCheck(Compiler compiler,\n      CheckLevel level) {\n    ReverseAbstractInterpreter rai =\n        new SemanticReverseAbstractInterpreter(compiler.getCodingConvention(),\n            compiler.getTypeRegistry());\n\n    return new TypeCheck(compiler, rai, compiler.getTypeRegistry(), level);\n  }\n",
        "begin_line": 344,
        "end_line": 351,
        "comment": " Returns a newly created TypeCheck. ",
        "child_ranges": [
            "(line 346,col 5)-(line 348,col 40)",
            "(line 350,col 5)-(line 350,col 75)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.InlineVariablesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.lang.String, java.lang.String)",
        "snippet": "  public void test(String js, String expected) {\n    test(js, expected, (DiagnosticType) null);\n  }\n",
        "begin_line": 359,
        "end_line": 361,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output.\n   *\n   * @param js Input\n   * @param expected Expected JS output\n   ",
        "child_ranges": [
            "(line 360,col 5)-(line 360,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.InlineVariablesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.lang.String, java.lang.String, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void test(String js, String expected, DiagnosticType error) {\n    test(js, expected, error, null);\n  }\n",
        "begin_line": 371,
        "end_line": 373,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output,\n   * or that an expected error is encountered.\n   *\n   * @param js Input\n   * @param expected Expected output, or null if an error is expected\n   * @param error Expected error, or null if no error is expected\n   ",
        "child_ranges": [
            "(line 372,col 5)-(line 372,col 36)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.InlineVariablesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.lang.String, java.lang.String, com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType, java.lang.String)",
        "snippet": "  public void test(String js, String expected, DiagnosticType error,\n                   DiagnosticType warning, String description) {\n    test(externsInputs, js, expected, error, warning, description);\n  }\n",
        "begin_line": 386,
        "end_line": 389,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output,\n   * or that an expected error is encountered.\n   *\n   * @param js Input\n   * @param expected Expected output, or null if an error is expected\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   * @param description The content of the error expected\n   ",
        "child_ranges": [
            "(line 388,col 5)-(line 388,col 67)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.InlineVariablesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.lang.String, java.lang.String, com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void test(String js, String expected,\n                   DiagnosticType error, DiagnosticType warning) {\n    test(externsInputs, js, expected, error, warning, null);\n  }\n",
        "begin_line": 401,
        "end_line": 404,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output\n   * and (optionally) that an expected warning is issued. Or, if an error is\n   * expected, this method just verifies that the error is encountered.\n   *\n   * @param js Input\n   * @param expected Expected output, or null if an error is expected\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   ",
        "child_ranges": [
            "(line 403,col 5)-(line 403,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.InlineVariablesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.lang.String, java.lang.String, java.lang.String, com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void test(String externs, String js, String expected,\n                   DiagnosticType error, DiagnosticType warning) {\n    test(externs, js, expected, error, warning, null);\n  }\n",
        "begin_line": 417,
        "end_line": 420,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output\n   * and (optionally) that an expected warning is issued. Or, if an error is\n   * expected, this method just verifies that the error is encountered.\n   *\n   * @param externs Externs input\n   * @param js Input\n   * @param expected Expected output, or null if an error is expected\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   ",
        "child_ranges": [
            "(line 419,col 5)-(line 419,col 54)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.InlineVariablesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.lang.String, java.lang.String, java.lang.String, com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType, java.lang.String)",
        "snippet": "  public void test(String externs, String js, String expected,\n                   DiagnosticType error, DiagnosticType warning,\n                   String description) {\n    List<SourceFile> externsInputs = ImmutableList.of(\n        SourceFile.fromCode(\"externs\", externs));\n    test(externsInputs, js, expected, error, warning, description);\n  }\n",
        "begin_line": 436,
        "end_line": 442,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output\n   * and (optionally) that an expected warning is issued. Or, if an error is\n   * expected, this method just verifies that the error is encountered.\n   *\n   * @param externs Externs input\n   * @param js Input\n   * @param expected Expected output, or null if an error is expected\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   * @param description The description of the expected warning,\n   *      or null if no warning is expected or if the warning's description\n   *      should not be examined\n   ",
        "child_ranges": [
            "(line 439,col 5)-(line 440,col 49)",
            "(line 441,col 5)-(line 441,col 67)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.InlineVariablesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.util.List<com.google.javascript.jscomp.SourceFile>, java.lang.String, java.lang.String, com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType, java.lang.String)",
        "snippet": "  public void test(List<SourceFile> externs, String js, String expected,\n                   DiagnosticType error,\n                   DiagnosticType warning, String description) {\n    Compiler compiler = createCompiler();\n    lastCompiler = compiler;\n\n    CompilerOptions options = getOptions();\n\n    if (this.acceptES5) {\n      options.setLanguageIn(LanguageMode.ECMASCRIPT5);\n    }\n    // Note that in this context, turning on the checkTypes option won't\n    // actually cause the type check to run.\n    options.checkTypes = parseTypeInfo;\n    compiler.init(externs, ImmutableList.of(\n        SourceFile.fromCode(filename, js)), options);\n\n    BaseJSTypeTestCase.addNativeProperties(compiler.getTypeRegistry());\n\n    test(compiler, maybeCreateArray(expected), error, warning, description);\n  }\n",
        "begin_line": 458,
        "end_line": 478,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output\n   * and (optionally) that an expected warning is issued. Or, if an error is\n   * expected, this method just verifies that the error is encountered.\n   *\n   * @param externs Externs inputs\n   * @param js Input\n   * @param expected Expected output, or null if an error is expected\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   * @param description The description of the expected warning,\n   *      or null if no warning is expected or if the warning's description\n   *      should not be examined\n   ",
        "child_ranges": [
            "(line 461,col 5)-(line 461,col 41)",
            "(line 462,col 5)-(line 462,col 28)",
            "(line 464,col 5)-(line 464,col 43)",
            "(line 466,col 5)-(line 468,col 5)",
            "(line 471,col 5)-(line 471,col 39)",
            "(line 472,col 5)-(line 473,col 53)",
            "(line 475,col 5)-(line 475,col 71)",
            "(line 477,col 5)-(line 477,col 76)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.InlineVariablesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.maybeCreateArray(java.lang.String)",
        "snippet": "  private String[] maybeCreateArray(String expected) {\n    if (expected != null) {\n      return new String[] { expected };\n    }\n    return null;\n  }\n",
        "begin_line": 480,
        "end_line": 485,
        "comment": "",
        "child_ranges": [
            "(line 481,col 5)-(line 483,col 5)",
            "(line 484,col 5)-(line 484,col 16)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.InlineVariablesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.lang.String[], java.lang.String[])",
        "snippet": "  public void test(String[] js, String[] expected) {\n    test(js, expected, null);\n  }\n",
        "begin_line": 493,
        "end_line": 495,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output.\n   *\n   * @param js Inputs\n   * @param expected Expected JS output\n   ",
        "child_ranges": [
            "(line 494,col 5)-(line 494,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.InlineVariablesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.lang.String[], java.lang.String[], com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void test(String[] js, String[] expected, DiagnosticType error) {\n    test(js, expected, error, null);\n  }\n",
        "begin_line": 505,
        "end_line": 507,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output,\n   * or that an expected error is encountered.\n   *\n   * @param js Inputs\n   * @param expected Expected JS output\n   * @param error Expected error, or null if no error is expected\n   ",
        "child_ranges": [
            "(line 506,col 5)-(line 506,col 36)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.InlineVariablesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.lang.String[], java.lang.String[], com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void test(String[] js, String[] expected, DiagnosticType error,\n                   DiagnosticType warning) {\n    test(js, expected, error, warning, null);\n  }\n",
        "begin_line": 519,
        "end_line": 522,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output\n   * and (optionally) that an expected warning is issued. Or, if an error is\n   * expected, this method just verifies that the error is encountered.\n   *\n   * @param js Inputs\n   * @param expected Expected JS output\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   ",
        "child_ranges": [
            "(line 521,col 5)-(line 521,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.InlineVariablesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.lang.String[], java.lang.String[], com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType, java.lang.String)",
        "snippet": "  public void test(String[] js, String[] expected, DiagnosticType error,\n                   DiagnosticType warning, String description) {\n    Compiler compiler = createCompiler();\n    lastCompiler = compiler;\n\n    List<SourceFile> inputs = Lists.newArrayList();\n    for (int i = 0; i < js.length; i++) {\n      inputs.add(SourceFile.fromCode(\"input\" + i, js[i]));\n    }\n    compiler.init(externsInputs, inputs, getOptions());\n    test(compiler, expected, error, warning, description);\n  }\n",
        "begin_line": 537,
        "end_line": 548,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output\n   * and (optionally) that an expected warning is issued. Or, if an error is\n   * expected, this method just verifies that the error is encountered.\n   *\n   * @param js Inputs\n   * @param expected Expected JS output\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   * @param description The description of the expected warning,\n   *      or null if no warning is expected or if the warning's description\n   *      should not be examined\n   ",
        "child_ranges": [
            "(line 539,col 5)-(line 539,col 41)",
            "(line 540,col 5)-(line 540,col 28)",
            "(line 542,col 5)-(line 542,col 51)",
            "(line 543,col 5)-(line 545,col 5)",
            "(line 546,col 5)-(line 546,col 55)",
            "(line 547,col 5)-(line 547,col 58)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.InlineVariablesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(com.google.javascript.jscomp.JSModule[], java.lang.String[])",
        "snippet": "  public void test(JSModule[] modules, String[] expected) {\n    test(modules, expected, null);\n  }\n",
        "begin_line": 556,
        "end_line": 558,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output.\n   *\n   * @param modules Module inputs\n   * @param expected Expected JS outputs (one per module)\n   ",
        "child_ranges": [
            "(line 557,col 5)-(line 557,col 34)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.InlineVariablesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(com.google.javascript.jscomp.JSModule[], java.lang.String[], com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void test(JSModule[] modules, String[] expected,\n      DiagnosticType error) {\n    test(modules, expected, error, null);\n  }\n",
        "begin_line": 568,
        "end_line": 571,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output,\n   * or that an expected error is encountered.\n   *\n   * @param modules Module inputs\n   * @param expected Expected JS outputs (one per module)\n   * @param error Expected error, or null if no error is expected\n   ",
        "child_ranges": [
            "(line 570,col 5)-(line 570,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.InlineVariablesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(com.google.javascript.jscomp.JSModule[], java.lang.String[], com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void test(JSModule[] modules, String[] expected,\n                   DiagnosticType error, DiagnosticType warning) {\n    Compiler compiler = createCompiler();\n    lastCompiler = compiler;\n\n    compiler.initModules(\n        externsInputs, Lists.newArrayList(modules), getOptions());\n    test(compiler, expected, error, warning);\n  }\n",
        "begin_line": 583,
        "end_line": 591,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output\n   * and (optionally) that an expected warning is issued. Or, if an error is\n   * expected, this method just verifies that the error is encountered.\n   *\n   * @param modules Module inputs\n   * @param expected Expected JS outputs (one per module)\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   ",
        "child_ranges": [
            "(line 585,col 5)-(line 585,col 41)",
            "(line 586,col 5)-(line 586,col 28)",
            "(line 588,col 5)-(line 589,col 66)",
            "(line 590,col 5)-(line 590,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.InlineVariablesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(java.lang.String)",
        "snippet": "  public void testSame(String js) {\n    test(js, js);\n  }\n",
        "begin_line": 598,
        "end_line": 600,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as its input.\n   *\n   * @param js Input and output\n   ",
        "child_ranges": [
            "(line 599,col 5)-(line 599,col 17)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.InlineVariablesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(java.lang.String, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void testSame(String js, DiagnosticType warning) {\n    test(js, js, null, warning);\n  }\n",
        "begin_line": 609,
        "end_line": 611,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as its input\n   * and (optionally) that an expected warning is issued.\n   *\n   * @param js Input and output\n   * @param warning Expected warning, or null if no warning is expected\n   ",
        "child_ranges": [
            "(line 610,col 5)-(line 610,col 32)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.InlineVariablesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(java.lang.String, com.google.javascript.jscomp.DiagnosticType, boolean)",
        "snippet": "  public void testSame(String js, DiagnosticType diag, boolean error) {\n    if (error) {\n      test(js, js, diag);\n    } else {\n      test(js, js, null, diag);\n    }\n  }\n",
        "begin_line": 621,
        "end_line": 627,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as its input\n   * and (optionally) that an expected warning is issued.\n   *\n   * @param js Input and output\n   * @param diag Expected error or warning, or null if none is expected\n   * @param error true if diag is an error, false if it is a warning\n   ",
        "child_ranges": [
            "(line 622,col 5)-(line 626,col 5)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.InlineVariablesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(java.lang.String, java.lang.String, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void testSame(String externs, String js, DiagnosticType warning) {\n    testSame(externs, js, warning, null);\n  }\n",
        "begin_line": 637,
        "end_line": 639,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as its input\n   * and (optionally) that an expected warning is issued.\n   *\n   * @param externs Externs input\n   * @param js Input and output\n   * @param warning Expected warning, or null if no warning is expected\n   ",
        "child_ranges": [
            "(line 638,col 5)-(line 638,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.InlineVariablesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(java.lang.String, java.lang.String, com.google.javascript.jscomp.DiagnosticType, boolean)",
        "snippet": "  public void testSame(\n      String externs, String js, DiagnosticType diag, boolean error) {\n    if (error) {\n      test(externs, js, js, diag, null);\n    } else {\n      test(externs, js, js, null, diag);\n    }\n  }\n",
        "begin_line": 650,
        "end_line": 657,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as its input\n   * and (optionally) that an expected warning is issued.\n   *\n   * @param externs Externs input\n   * @param js Input and output\n   * @param diag Expected error or warning, or null if none is expected\n   * @param error true if diag is an error, false if it is a warning\n   ",
        "child_ranges": [
            "(line 652,col 5)-(line 656,col 5)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.InlineVariablesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(java.lang.String, java.lang.String, com.google.javascript.jscomp.DiagnosticType, java.lang.String)",
        "snippet": "  public void testSame(String externs, String js, DiagnosticType warning,\n                       String description) {\n    List<SourceFile> externsInputs = ImmutableList.of(\n        SourceFile.fromCode(\"externs\", externs));\n    test(externsInputs, js, js, null, warning, description);\n  }\n",
        "begin_line": 670,
        "end_line": 675,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as its input\n   * and (optionally) that an expected warning and description is issued.\n   *\n   * @param externs Externs input\n   * @param js Input and output\n   * @param warning Expected warning, or null if no warning is expected\n   * @param description The description of the expected warning,\n   *      or null if no warning is expected or if the warning's description\n   *      should not be examined\n   ",
        "child_ranges": [
            "(line 672,col 5)-(line 673,col 49)",
            "(line 674,col 5)-(line 674,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.InlineVariablesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(java.lang.String[])",
        "snippet": "  public void testSame(String[] js) {\n    test(js, js);\n  }\n",
        "begin_line": 682,
        "end_line": 684,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as its input.\n   *\n   * @param js Inputs and outputs\n   ",
        "child_ranges": [
            "(line 683,col 5)-(line 683,col 17)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.InlineVariablesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(java.lang.String[], com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void testSame(String[] js, DiagnosticType error) {\n    test(js, js, error);\n  }\n",
        "begin_line": 693,
        "end_line": 695,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as its input,\n   * and emits the given error.\n   *\n   * @param js Inputs and outputs\n   * @param error Expected error, or null if no error is expected\n   ",
        "child_ranges": [
            "(line 694,col 5)-(line 694,col 24)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.InlineVariablesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(java.lang.String[], com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void testSame(\n      String[] js, DiagnosticType error, DiagnosticType warning) {\n    test(js, js, error, warning);\n  }\n",
        "begin_line": 705,
        "end_line": 708,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as its input,\n   * and emits the given error and warning.\n   *\n   * @param js Inputs and outputs\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   ",
        "child_ranges": [
            "(line 707,col 5)-(line 707,col 33)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.InlineVariablesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(com.google.javascript.jscomp.JSModule[])",
        "snippet": "  public void testSame(JSModule[] modules) {\n    testSame(modules, null);\n  }\n",
        "begin_line": 715,
        "end_line": 717,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as the input.\n   *\n   * @param modules Module inputs\n   ",
        "child_ranges": [
            "(line 716,col 5)-(line 716,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.InlineVariablesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(com.google.javascript.jscomp.JSModule[], com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void testSame(JSModule[] modules, DiagnosticType warning) {\n    try {\n      String[] expected = new String[modules.length];\n      for (int i = 0; i < modules.length; i++) {\n        expected[i] = \"\";\n        for (CompilerInput input : modules[i].getInputs()) {\n          expected[i] += input.getSourceFile().getCode();\n        }\n      }\n      test(modules, expected, null, warning);\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n  }\n",
        "begin_line": 725,
        "end_line": 738,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as the input.\n   *\n   * @param modules Module inputs\n   * @param warning A warning, or null for no expected warning.\n   ",
        "child_ranges": [
            "(line 726,col 5)-(line 737,col 5)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.InlineVariablesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(com.google.javascript.jscomp.Compiler, java.lang.String[], com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  protected void test(Compiler compiler, String[] expected,\n                      DiagnosticType error, DiagnosticType warning) {\n    test(compiler, expected, error, warning, null);\n  }\n",
        "begin_line": 751,
        "end_line": 754,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output\n   * and (optionally) that an expected warning is issued. Or, if an error is\n   * expected, this method just verifies that the error is encountered.\n   *\n   * @param compiler A compiler that has been initialized via\n   *     {@link Compiler#init}\n   * @param expected Expected output, or null if an error is expected\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   ",
        "child_ranges": [
            "(line 753,col 5)-(line 753,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.InlineVariablesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(com.google.javascript.jscomp.Compiler, java.lang.String[], com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType, java.lang.String)",
        "snippet": "  private void test(Compiler compiler, String[] expected,\n                    DiagnosticType error, DiagnosticType warning,\n                    String description) {\n    RecentChange recentChange = new RecentChange();\n    compiler.addChangeHandler(recentChange);\n\n    Node root = compiler.parseInputs();\n    assertTrue(\"Unexpected parse error(s): \" +\n        Joiner.on(\"\\n\").join(compiler.getErrors()), root != null);\n    if (!expectParseWarningsThisTest) {\n      assertTrue(\"Unexpected parse warnings(s): \" +\n          Joiner.on(\"\\n\").join(compiler.getWarnings()),\n          compiler.getWarnings().length == 0);\n    }\n\n    if (astValidationEnabled) {\n      (new AstValidator()).validateRoot(root);\n    }\n    Node externsRoot = root.getFirstChild();\n    Node mainRoot = root.getLastChild();\n\n    // Save the tree for later comparison.\n    Node rootClone = root.cloneTree();\n    Node externsRootClone = rootClone.getFirstChild();\n    Node mainRootClone = rootClone.getLastChild();\n    Map<Node, Node> mtoc = NodeUtil.mapMainToClone(mainRoot, mainRootClone);\n\n    int numRepetitions = getNumRepetitions();\n    ErrorManager[] errorManagers = new ErrorManager[numRepetitions];\n    int aggregateWarningCount = 0;\n    List<JSError> aggregateWarnings = Lists.newArrayList();\n    boolean hasCodeChanged = false;\n\n    assertFalse(\"Code should not change before processing\",\n        recentChange.hasCodeChanged());\n\n    for (int i = 0; i < numRepetitions; ++i) {\n      if (compiler.getErrorCount() == 0) {\n        errorManagers[i] = new BlackHoleErrorManager(compiler);\n\n        // Only run process closure primitives once, if asked.\n        if (closurePassEnabled && i == 0) {\n          recentChange.reset();\n          new ProcessClosurePrimitives(compiler, null, CheckLevel.ERROR)\n              .process(null, mainRoot);\n          hasCodeChanged = hasCodeChanged || recentChange.hasCodeChanged();\n        }\n\n        // Only run the type checking pass once, if asked.\n        // Running it twice can cause unpredictable behavior because duplicate\n        // objects for the same type are created, and the type system\n        // uses reference equality to compare many types.\n        if (!runTypeCheckAfterProcessing && typeCheckEnabled && i == 0) {\n          TypeCheck check = createTypeCheck(compiler, typeCheckLevel);\n          check.processForTesting(externsRoot, mainRoot);\n        }\n\n        // Only run the normalize pass once, if asked.\n        if (normalizeEnabled && i == 0) {\n          normalizeActualCode(compiler, externsRoot, mainRoot);\n        }\n\n        if (computeSideEffects && i == 0) {\n          PureFunctionIdentifier.Driver mark =\n              new PureFunctionIdentifier.Driver(compiler, null, false);\n          mark.process(externsRoot, mainRoot);\n        }\n\n        if (markNoSideEffects && i == 0) {\n          MarkNoSideEffectCalls mark = new MarkNoSideEffectCalls(compiler);\n          mark.process(externsRoot, mainRoot);\n        }\n\n        recentChange.reset();\n\n        getProcessor(compiler).process(externsRoot, mainRoot);\n        if (astValidationEnabled) {\n          (new AstValidator()).validateRoot(root);\n        }\n        if (checkLineNumbers) {\n          (new LineNumberCheck(compiler)).process(externsRoot, mainRoot);\n        }\n\n        if (runTypeCheckAfterProcessing && typeCheckEnabled && i == 0) {\n          TypeCheck check = createTypeCheck(compiler, typeCheckLevel);\n          check.processForTesting(externsRoot, mainRoot);\n        }\n\n        hasCodeChanged = hasCodeChanged || recentChange.hasCodeChanged();\n        aggregateWarningCount += errorManagers[i].getWarningCount();\n        aggregateWarnings.addAll(Lists.newArrayList(compiler.getWarnings()));\n\n        if (normalizeEnabled) {\n          boolean verifyDeclaredConstants = true;\n          new Normalize.VerifyConstants(compiler, verifyDeclaredConstants)\n              .process(externsRoot, mainRoot);\n        }\n      }\n    }\n\n    if (error == null) {\n      assertEquals(\n          \"Unexpected error(s): \" + Joiner.on(\"\\n\").join(compiler.getErrors()),\n          0, compiler.getErrorCount());\n\n      // Verify the symbol table.\n      ErrorManager symbolTableErrorManager =\n          new BlackHoleErrorManager(compiler);\n      Node expectedRoot = null;\n      if (expected != null) {\n        expectedRoot = parseExpectedJs(expected);\n        expectedRoot.detachFromParent();\n      }\n\n      JSError[] stErrors = symbolTableErrorManager.getErrors();\n      if (expectedSymbolTableError != null) {\n        assertEquals(\"There should be one error.\", 1, stErrors.length);\n        assertEquals(expectedSymbolTableError, stErrors[0].getType());\n      } else {\n        assertEquals(\"Unexpected symbol table error(s): \" +\n            Joiner.on(\"\\n\").join(stErrors),\n            0, stErrors.length);\n      }\n\n      if (warning == null) {\n        assertEquals(\n            \"Unexpected warning(s): \" + Joiner.on(\"\\n\").join(aggregateWarnings),\n            0, aggregateWarningCount);\n      } else {\n        assertEquals(\"There should be one warning, repeated \" + numRepetitions +\n            \" time(s).\", numRepetitions, aggregateWarningCount);\n        for (int i = 0; i < numRepetitions; ++i) {\n          JSError[] warnings = errorManagers[i].getWarnings();\n          JSError actual = warnings[0];\n          assertEquals(warning, actual.getType());\n\n          // Make sure that source information is always provided.\n          if (!allowSourcelessWarnings) {\n            assertTrue(\"Missing source file name in warning\",\n                actual.sourceName != null && !actual.sourceName.isEmpty());\n            assertTrue(\"Missing line number in warning\",\n                -1 != actual.lineNumber);\n            assertTrue(\"Missing char number in warning\",\n                -1 != actual.getCharno());\n          }\n\n          if (description != null) {\n            assertEquals(description, actual.description);\n          }\n        }\n      }\n\n      // If we ran normalize on the AST, we must also run normalize on the\n      // clone before checking for changes.\n      if (normalizeEnabled) {\n        normalizeActualCode(compiler, externsRootClone, mainRootClone);\n      }\n\n      boolean codeChange = !mainRootClone.isEquivalentTo(mainRoot);\n      boolean externsChange = !externsRootClone.isEquivalentTo(externsRoot);\n\n      // Generally, externs should not be changed by the compiler passes.\n      if (externsChange && !allowExternsChanges) {\n        String explanation = externsRootClone.checkTreeEquals(externsRoot);\n        fail(\"Unexpected changes to externs\" +\n            \"\\nExpected: \" + compiler.toSource(externsRootClone) +\n            \"\\nResult: \" + compiler.toSource(externsRoot) +\n            \"\\n\" + explanation);\n      }\n\n      if (!codeChange && !externsChange) {\n        assertFalse(\n            \"compiler.reportCodeChange() was called \" +\n            \"even though nothing changed\",\n            hasCodeChanged);\n      } else {\n        assertTrue(\"compiler.reportCodeChange() should have been called.\"\n            + \"\\nOriginal: \" + mainRootClone.toStringTree()\n            + \"\\nNew: \" + mainRoot.toStringTree(), hasCodeChanged);\n      }\n\n      // Check correctness of the changed-scopes-only traversal\n      NodeUtil.verifyScopeChanges(mtoc, mainRoot, false, compiler);\n\n      if (expected != null) {\n        if (compareAsTree) {\n          String explanation = expectedRoot.checkTreeEquals(mainRoot);\n          assertNull(\"\\nExpected: \" + compiler.toSource(expectedRoot) +\n              \"\\nResult: \" + compiler.toSource(mainRoot) +\n              \"\\n\" + explanation, explanation);\n        } else if (expected != null) {\n          assertEquals(\n              Joiner.on(\"\").join(expected), compiler.toSource(mainRoot));\n        }\n      }\n\n      // Verify normalization is not invalidated.\n      Node normalizeCheckRootClone = root.cloneTree();\n      Node normalizeCheckExternsRootClone =\n          normalizeCheckRootClone.getFirstChild();\n      Node normalizeCheckMainRootClone = normalizeCheckRootClone.getLastChild();\n      new PrepareAst(compiler).process(\n          normalizeCheckExternsRootClone, normalizeCheckMainRootClone);\n      String explanation =\n          normalizeCheckMainRootClone.checkTreeEquals(mainRoot);\n      assertNull(\"Node structure normalization invalidated.\\nExpected: \" +\n          compiler.toSource(normalizeCheckMainRootClone) +\n          \"\\nResult: \" + compiler.toSource(mainRoot) +\n          \"\\n\" + explanation, explanation);\n\n      // TODO(johnlenz): enable this for most test cases.\n      // Currently, this invalidates test for while-loops, for-loop\n      // initializers, and other naming.  However, a set of code\n      // (Closure primitive rewrites, etc) runs before the Normalize pass,\n      // so this can't be force on everywhere.\n      if (normalizeEnabled) {\n        new Normalize(compiler, true).process(\n            normalizeCheckExternsRootClone, normalizeCheckMainRootClone);\n        explanation =  normalizeCheckMainRootClone.checkTreeEquals(mainRoot);\n        assertNull(\"Normalization invalidated.\\nExpected: \" +\n            compiler.toSource(normalizeCheckMainRootClone) +\n            \"\\nResult: \" + compiler.toSource(mainRoot) +\n            \"\\n\" + explanation, explanation);\n      }\n    } else {\n      String errors = \"\";\n      for (JSError actualError : compiler.getErrors()) {\n        errors += actualError.description + \"\\n\";\n      }\n      assertEquals(\"There should be one error. \" + errors,\n          1, compiler.getErrorCount());\n      assertEquals(errors, error, compiler.getErrors()[0].getType());\n\n      if (warning != null) {\n        String warnings = \"\";\n        for (JSError actualError : compiler.getWarnings()) {\n          warnings += actualError.description + \"\\n\";\n        }\n        assertEquals(\"There should be one warning. \" + warnings,\n            1, compiler.getWarningCount());\n        assertEquals(warnings, warning, compiler.getWarnings()[0].getType());\n      }\n    }\n  }\n",
        "begin_line": 770,
        "end_line": 1013,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output\n   * and (optionally) that an expected warning is issued. Or, if an error is\n   * expected, this method just verifies that the error is encountered.\n   *\n   * @param compiler A compiler that has been initialized via\n   *     {@link Compiler#init}\n   * @param expected Expected output, or null if an error is expected\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   * @param description The description of the expected warning,\n   *      or null if no warning is expected or if the warning's description\n   *      should not be examined\n   ",
        "child_ranges": [
            "(line 773,col 5)-(line 773,col 51)",
            "(line 774,col 5)-(line 774,col 44)",
            "(line 776,col 5)-(line 776,col 39)",
            "(line 777,col 5)-(line 778,col 66)",
            "(line 779,col 5)-(line 783,col 5)",
            "(line 785,col 5)-(line 787,col 5)",
            "(line 788,col 5)-(line 788,col 44)",
            "(line 789,col 5)-(line 789,col 40)",
            "(line 792,col 5)-(line 792,col 38)",
            "(line 793,col 5)-(line 793,col 54)",
            "(line 794,col 5)-(line 794,col 50)",
            "(line 795,col 5)-(line 795,col 76)",
            "(line 797,col 5)-(line 797,col 45)",
            "(line 798,col 5)-(line 798,col 68)",
            "(line 799,col 5)-(line 799,col 34)",
            "(line 800,col 5)-(line 800,col 59)",
            "(line 801,col 5)-(line 801,col 35)",
            "(line 803,col 5)-(line 804,col 39)",
            "(line 806,col 5)-(line 868,col 5)",
            "(line 870,col 5)-(line 1012,col 5)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.InlineVariablesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.normalizeActualCode(com.google.javascript.jscomp.Compiler, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  private void normalizeActualCode(\n      Compiler compiler, Node externsRoot, Node mainRoot) {\n    Normalize normalize = new Normalize(compiler, false);\n    normalize.process(externsRoot, mainRoot);\n  }\n",
        "begin_line": 1015,
        "end_line": 1019,
        "comment": "",
        "child_ranges": [
            "(line 1017,col 5)-(line 1017,col 57)",
            "(line 1018,col 5)-(line 1018,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.InlineVariablesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.parseExpectedJs(java.lang.String[])",
        "snippet": "  protected Node parseExpectedJs(String[] expected) {\n    Compiler compiler = createCompiler();\n    List<SourceFile> inputs = Lists.newArrayList();\n    for (int i = 0; i < expected.length; i++) {\n      inputs.add(SourceFile.fromCode(\"expected\" + i, expected[i]));\n    }\n    compiler.init(externsInputs, inputs, getOptions());\n    Node root = compiler.parseInputs();\n    assertTrue(\"Unexpected parse error(s): \" +\n        Joiner.on(\"\\n\").join(compiler.getErrors()), root != null);\n    Node externsRoot = root.getFirstChild();\n    Node mainRoot = externsRoot.getNext();\n    // Only run the normalize pass, if asked.\n    if (normalizeEnabled && normalizeExpected && !compiler.hasErrors()) {\n      Normalize normalize = new Normalize(compiler, false);\n      normalize.process(externsRoot, mainRoot);\n    }\n    return mainRoot;\n  }\n",
        "begin_line": 1024,
        "end_line": 1042,
        "comment": "\n   * Parses expected JS inputs and returns the root of the parse tree.\n   ",
        "child_ranges": [
            "(line 1025,col 5)-(line 1025,col 41)",
            "(line 1026,col 5)-(line 1026,col 51)",
            "(line 1027,col 5)-(line 1029,col 5)",
            "(line 1030,col 5)-(line 1030,col 55)",
            "(line 1031,col 5)-(line 1031,col 39)",
            "(line 1032,col 5)-(line 1033,col 66)",
            "(line 1034,col 5)-(line 1034,col 44)",
            "(line 1035,col 5)-(line 1035,col 42)",
            "(line 1037,col 5)-(line 1040,col 5)",
            "(line 1041,col 5)-(line 1041,col 20)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.InlineVariablesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.parseExpectedJs(java.lang.String)",
        "snippet": "  protected Node parseExpectedJs(String expected) {\n    return parseExpectedJs(new String[] {expected});\n  }\n",
        "begin_line": 1044,
        "end_line": 1046,
        "comment": "",
        "child_ranges": [
            "(line 1045,col 5)-(line 1045,col 52)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.InlineVariablesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.createModuleChain(java.lang.String...)",
        "snippet": "  static JSModule[] createModuleChain(String... inputs) {\n    JSModule[] modules = createModules(inputs);\n    for (int i = 1; i < modules.length; i++) {\n      modules[i].addDependency(modules[i - 1]);\n    }\n    return modules;\n  }\n",
        "begin_line": 1052,
        "end_line": 1058,
        "comment": "\n   * Generates a list of modules from a list of inputs, such that each module\n   * depends on the module before it.\n   ",
        "child_ranges": [
            "(line 1053,col 5)-(line 1053,col 47)",
            "(line 1054,col 5)-(line 1056,col 5)",
            "(line 1057,col 5)-(line 1057,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.InlineVariablesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.createModuleStar(java.lang.String...)",
        "snippet": "  static JSModule[] createModuleStar(String... inputs) {\n    JSModule[] modules = createModules(inputs);\n    for (int i = 1; i < modules.length; i++) {\n      modules[i].addDependency(modules[0]);\n    }\n    return modules;\n  }\n",
        "begin_line": 1064,
        "end_line": 1070,
        "comment": "\n   * Generates a list of modules from a list of inputs, such that each module\n   * depends on the first module.\n   ",
        "child_ranges": [
            "(line 1065,col 5)-(line 1065,col 47)",
            "(line 1066,col 5)-(line 1068,col 5)",
            "(line 1069,col 5)-(line 1069,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.InlineVariablesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.createModuleBush(java.lang.String...)",
        "snippet": "  static JSModule[] createModuleBush(String ... inputs) {\n    Preconditions.checkState(inputs.length > 2);\n    JSModule[] modules = createModules(inputs);\n    for (int i = 1; i < modules.length; i++) {\n      modules[i].addDependency(modules[i == 1 ? 0 : 1]);\n    }\n    return modules;\n  }\n",
        "begin_line": 1077,
        "end_line": 1084,
        "comment": "\n   * Generates a list of modules from a list of inputs, such that modules\n   * form a bush formation. In a bush formation, module 2 depends\n   * on module 1, and all other modules depend on module 2.\n   ",
        "child_ranges": [
            "(line 1078,col 5)-(line 1078,col 48)",
            "(line 1079,col 5)-(line 1079,col 47)",
            "(line 1080,col 5)-(line 1082,col 5)",
            "(line 1083,col 5)-(line 1083,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.InlineVariablesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.createModuleTree(java.lang.String...)",
        "snippet": "  static JSModule[] createModuleTree(String ... inputs) {\n    JSModule[] modules = createModules(inputs);\n    for (int i = 1; i < modules.length; i++) {\n      modules[i].addDependency(modules[(i - 1) / 2]);\n    }\n    return modules;\n  }\n",
        "begin_line": 1091,
        "end_line": 1097,
        "comment": "\n   * Generates a list of modules from a list of inputs, such that modules\n   * form a tree formation. In a tree formation, module N depends on\n   * module `floor(N/2)`, So the modules form a balanced binary tree.\n   ",
        "child_ranges": [
            "(line 1092,col 5)-(line 1092,col 47)",
            "(line 1093,col 5)-(line 1095,col 5)",
            "(line 1096,col 5)-(line 1096,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.InlineVariablesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.createModules(java.lang.String...)",
        "snippet": "  static JSModule[] createModules(String... inputs) {\n    JSModule[] modules = new JSModule[inputs.length];\n    for (int i = 0; i < inputs.length; i++) {\n      JSModule module = modules[i] = new JSModule(\"m\" + i);\n      module.add(SourceFile.fromCode(\"i\" + i, inputs[i]));\n    }\n    return modules;\n  }\n",
        "begin_line": 1103,
        "end_line": 1110,
        "comment": "\n   * Generates a list of modules from a list of inputs. Does not generate any\n   * dependencies between the modules.\n   ",
        "child_ranges": [
            "(line 1104,col 5)-(line 1104,col 53)",
            "(line 1105,col 5)-(line 1108,col 5)",
            "(line 1109,col 5)-(line 1109,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.InlineVariablesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.BlackHoleErrorManager.BlackHoleErrorManager(com.google.javascript.jscomp.Compiler)",
        "snippet": "    private BlackHoleErrorManager(Compiler compiler) {\n      compiler.setErrorManager(this);\n    }\n",
        "begin_line": 1113,
        "end_line": 1115,
        "comment": "",
        "child_ranges": [
            "(line 1114,col 7)-(line 1114,col 37)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.InlineVariablesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.BlackHoleErrorManager.println(com.google.javascript.jscomp.CheckLevel, com.google.javascript.jscomp.JSError)",
        "snippet": "    @Override\n    public void println(CheckLevel level, JSError error) {}\n",
        "begin_line": 1117,
        "end_line": 1118,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.InlineVariablesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.BlackHoleErrorManager.printSummary()",
        "snippet": "    @Override\n    public void printSummary() {}\n",
        "begin_line": 1120,
        "end_line": 1121,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.InlineVariablesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.createCompiler()",
        "snippet": "  Compiler createCompiler() {\n    Compiler compiler = new Compiler();\n    return compiler;\n  }\n",
        "begin_line": 1124,
        "end_line": 1127,
        "comment": "",
        "child_ranges": [
            "(line 1125,col 5)-(line 1125,col 39)",
            "(line 1126,col 5)-(line 1126,col 20)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.InlineVariablesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.setExpectedSymbolTableError(com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  protected void setExpectedSymbolTableError(DiagnosticType type) {\n    this.expectedSymbolTableError = type;\n  }\n",
        "begin_line": 1129,
        "end_line": 1131,
        "comment": "",
        "child_ranges": [
            "(line 1130,col 5)-(line 1130,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.InlineVariablesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.findQualifiedNameNode(java.lang.String, com.google.javascript.rhino.Node)",
        "snippet": "  protected final Node findQualifiedNameNode(final String name, Node root) {\n    final List<Node> matches = Lists.newArrayList();\n    NodeUtil.visitPostOrder(root,\n        new NodeUtil.Visitor() {\n          @Override public void visit(Node n) {\n            if (name.equals(n.getQualifiedName())) {\n              matches.add(n);\n            }\n          }\n        },\n        Predicates.<Node>alwaysTrue());\n    return matches.get(0);\n  }\n",
        "begin_line": 1134,
        "end_line": 1146,
        "comment": " Finds the first matching qualified name node in post-traversal order. ",
        "child_ranges": [
            "(line 1135,col 5)-(line 1135,col 52)",
            "(line 1136,col 5)-(line 1144,col 39)",
            "(line 1145,col 5)-(line 1145,col 26)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.InlineVariablesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.Anonymous-3df55195-9c29-4f49-af0a-e564b938b36a.visit(com.google.javascript.rhino.Node)",
        "snippet": "          @Override public void visit(Node n) {\n            if (name.equals(n.getQualifiedName())) {\n              matches.add(n);\n            }\n          }\n",
        "begin_line": 1138,
        "end_line": 1142,
        "comment": "",
        "child_ranges": [
            "(line 1139,col 13)-(line 1141,col 13)"
        ]
    }
]