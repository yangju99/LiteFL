[
    {
        "name": "SimplexTableau.getSolution#339",
        "is_bug": true,
        "src_path": "src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java",
        "class_name": "org.apache.commons.math.optimization.linear.SimplexTableau",
        "signature": "org.apache.commons.math.optimization.linear.SimplexTableau.getSolution()",
        "snippet": "    protected RealPointValuePair getSolution() {\n      double[] coefficients = new double[getOriginalNumDecisionVariables()];\n      Integer negativeVarBasicRow = getBasicRow(getNegativeDecisionVariableOffset());\n      double mostNegative = negativeVarBasicRow == null ? 0 : getEntry(negativeVarBasicRow, getRhsOffset());\n      Set<Integer> basicRows = new HashSet<Integer>();\n      for (int i = 0; i < coefficients.length; i++) {\n          Integer basicRow = getBasicRow(getNumObjectiveFunctions() + i);\n          if (basicRows.contains(basicRow)) {\n              // if multiple variables can take a given value \n              // then we choose the first and set the rest equal to 0\n              coefficients[i] = 0;\n          } else {\n              basicRows.add(basicRow);\n              coefficients[i] =\n                  (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) -\n                  (restrictToNonNegative ? 0 : mostNegative);\n          }\n      }\n        return new RealPointValuePair(coefficients, f.getValue(coefficients));\n    }\n",
        "begin_line": 339,
        "end_line": 358,
        "comment": "\n     * Get the current solution.\n     * \n     * @return current solution\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 1
    },
    {
        "name": "SimplexSolver.isOptimal#145",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java",
        "class_name": "org.apache.commons.math.optimization.linear.SimplexSolver",
        "signature": "org.apache.commons.math.optimization.linear.SimplexSolver.isOptimal(org.apache.commons.math.optimization.linear.SimplexTableau)",
        "snippet": "    public boolean isOptimal(final SimplexTableau tableau) {\n        if (tableau.getNumArtificialVariables() > 0) {\n            return false;\n        }\n        for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getWidth() - 1; i++) {\n            if (MathUtils.compareTo(tableau.getEntry(0, i), 0, epsilon) < 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n",
        "begin_line": 145,
        "end_line": 155,
        "comment": "\n     * Returns whether the problem is at an optimal state.\n     * @param tableau simple tableau for the problem\n     * @return whether the model has been solved\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3536
        },
        "num_failing_tests": 1
    },
    {
        "name": "SimplexSolver.doOptimize#182",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java",
        "class_name": "org.apache.commons.math.optimization.linear.SimplexSolver",
        "signature": "org.apache.commons.math.optimization.linear.SimplexSolver.doOptimize()",
        "snippet": "    @Override\n    public RealPointValuePair doOptimize()\n        throws OptimizationException {\n        final SimplexTableau tableau =\n            new SimplexTableau(f, constraints, goalType, restrictToNonNegative, epsilon);\n        solvePhase1(tableau);\n        tableau.discardArtificialVariables();\n        while (!isOptimal(tableau)) {\n            doIteration(tableau);\n        }\n        return tableau.getSolution();\n    }\n",
        "begin_line": 182,
        "end_line": 193,
        "comment": " {@inheritDoc} ",
        "resolved_comments": {
            "org.apache.commons.math.optimization.linear.AbstractLinearOptimizer": " Perform the bulk of optimization algorithm.\n     * @return the point/value pair giving the optimal value for objective function\n     * @exception OptimizationException if no solution fulfilling the constraints\n     * can be found in the allowed number of iterations\n     "
        },
        "susp": {
            "ochiai_susp": 0.3536
        },
        "num_failing_tests": 1
    },
    {
        "name": "SimplexTableau.getBasicRow#290",
        "is_bug": true,
        "src_path": "src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java",
        "class_name": "org.apache.commons.math.optimization.linear.SimplexTableau",
        "signature": "org.apache.commons.math.optimization.linear.SimplexTableau.getBasicRow(int, boolean)",
        "snippet": "    private Integer getBasicRow(final int col, boolean ignoreObjectiveRows) {\n        Integer row = null;\n        int start = getNumObjectiveFunctions();\n        for (int i = start; i < getHeight(); i++) {\n            if (MathUtils.equals(getEntry(i, col), 1.0, epsilon) && (row == null)) {\n                row = i;\n            } else if (!MathUtils.equals(getEntry(i, col), 0.0, epsilon)) {\n                return null;\n            }\n        }\n        return row;\n    }\n",
        "begin_line": 290,
        "end_line": 301,
        "comment": "\n     * Checks whether the given column is basic.\n     * @param col index of the column to check\n     * @return the row that the variable is basic in.  null if the column is not basic\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3162
        },
        "num_failing_tests": 1
    },
    {
        "name": "SimplexSolver.solvePhase1#164",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java",
        "class_name": "org.apache.commons.math.optimization.linear.SimplexSolver",
        "signature": "org.apache.commons.math.optimization.linear.SimplexSolver.solvePhase1(org.apache.commons.math.optimization.linear.SimplexTableau)",
        "snippet": "    protected void solvePhase1(final SimplexTableau tableau)\n        throws OptimizationException {\n        // make sure we're in Phase 1\n        if (tableau.getNumArtificialVariables() == 0) {\n            return;\n        }\n\n        while (!isPhase1Solved(tableau)) {\n            doIteration(tableau);\n        }\n\n        // if W is not zero then we have no feasible solution\n        if (!MathUtils.equals(tableau.getEntry(0, tableau.getRhsOffset()), 0, epsilon)) {\n            throw new NoFeasibleSolutionException();\n        }\n    }\n",
        "begin_line": 164,
        "end_line": 179,
        "comment": "\n     * Solves Phase 1 of the Simplex method.\n     * @param tableau simple tableau for the problem\n     * @exception OptimizationException if the maximal number of iterations is\n     * exceeded, or if the problem is found not to have a bounded solution, or\n     * if there is no feasible solution\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3162
        },
        "num_failing_tests": 1
    },
    {
        "name": "SimplexTableau.discardArtificialVariables#306",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java",
        "class_name": "org.apache.commons.math.optimization.linear.SimplexTableau",
        "signature": "org.apache.commons.math.optimization.linear.SimplexTableau.discardArtificialVariables()",
        "snippet": "    protected void discardArtificialVariables() {\n        if (numArtificialVariables == 0) {\n            return;\n        }\n        int width = getWidth() - numArtificialVariables - 1;\n        int height = getHeight() - 1;\n        double[][] matrix = new double[height][width];\n        for (int i = 0; i < height; i++) {\n            for (int j = 0; j < width - 1; j++) {\n                matrix[i][j] = getEntry(i + 1, j + 1);\n            }\n            matrix[i][width - 1] = getEntry(i + 1, getRhsOffset());\n        }\n        this.tableau = new Array2DRowRealMatrix(matrix);\n        this.numArtificialVariables = 0;\n    }\n",
        "begin_line": 306,
        "end_line": 321,
        "comment": "\n     * Removes the phase 1 objective function and artificial variables from this tableau.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3015
        },
        "num_failing_tests": 1
    },
    {
        "name": "SimplexTableau.getNegativeDecisionVariableOffset#457",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java",
        "class_name": "org.apache.commons.math.optimization.linear.SimplexTableau",
        "signature": "org.apache.commons.math.optimization.linear.SimplexTableau.getNegativeDecisionVariableOffset()",
        "snippet": "    protected final int getNegativeDecisionVariableOffset() {\n      return getNumObjectiveFunctions() + getOriginalNumDecisionVariables();\n    }\n",
        "begin_line": 457,
        "end_line": 459,
        "comment": "\n     * Returns the offset of the extra decision variable added when there is a\n     * negative decision variable in the original problem.\n     * @return the offset of x-\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3015
        },
        "num_failing_tests": 1
    },
    {
        "name": "SimplexTableau.getOriginalNumDecisionVariables#480",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java",
        "class_name": "org.apache.commons.math.optimization.linear.SimplexTableau",
        "signature": "org.apache.commons.math.optimization.linear.SimplexTableau.getOriginalNumDecisionVariables()",
        "snippet": "    protected final int getOriginalNumDecisionVariables() {\n        return restrictToNonNegative ? numDecisionVariables : numDecisionVariables - 1;\n    }\n",
        "begin_line": 480,
        "end_line": 482,
        "comment": "\n     * Get the original number of decision variables.\n     * @return original number of decision variables\n     * @see #getNumDecisionVariables()\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3015
        },
        "num_failing_tests": 1
    },
    {
        "name": "SimplexSolver.isPhase1Solved#128",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java",
        "class_name": "org.apache.commons.math.optimization.linear.SimplexSolver",
        "signature": "org.apache.commons.math.optimization.linear.SimplexSolver.isPhase1Solved(org.apache.commons.math.optimization.linear.SimplexTableau)",
        "snippet": "    private boolean isPhase1Solved(final SimplexTableau tableau) {\n        if (tableau.getNumArtificialVariables() == 0) {\n            return true;\n        }\n        for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getWidth() - 1; i++) {\n            if (MathUtils.compareTo(tableau.getEntry(0, i), 0, epsilon) < 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n",
        "begin_line": 128,
        "end_line": 138,
        "comment": "\n     * Checks whether Phase 1 is solved.\n     * @param tableau simple tableau for the problem\n     * @return whether Phase 1 is solved\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3015
        },
        "num_failing_tests": 1
    },
    {
        "name": "LinearObjectiveFunction.getValue#91",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math/optimization/linear/LinearObjectiveFunction.java",
        "class_name": "org.apache.commons.math.optimization.linear.LinearObjectiveFunction",
        "signature": "org.apache.commons.math.optimization.linear.LinearObjectiveFunction.getValue(double[])",
        "snippet": "    public double getValue(final double[] point) {\n        return coefficients.dotProduct(point) + constantTerm;\n    }\n",
        "begin_line": 91,
        "end_line": 93,
        "comment": "\n     * Compute the value of the linear equation at the current point\n     * @param point point at which linear equation must be evaluated\n     * @return value of the linear equation at the current point\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3015
        },
        "num_failing_tests": 1
    },
    {
        "name": "RealPointValuePair.RealPointValuePair#48",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math/optimization/RealPointValuePair.java",
        "class_name": "org.apache.commons.math.optimization.RealPointValuePair",
        "signature": "org.apache.commons.math.optimization.RealPointValuePair.RealPointValuePair(double[], double)",
        "snippet": "    public RealPointValuePair(final double[] point, final double value) {\n        this.point = point.clone();\n        this.value  = value;\n    }\n",
        "begin_line": 48,
        "end_line": 51,
        "comment": " Build a point/objective function value pair.\n     * @param point point coordinates (the built instance will store\n     * a copy of the array, not the array passed as argument)\n     * @param value value of an objective function at the point\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3015
        },
        "num_failing_tests": 1
    },
    {
        "name": "RealPointValuePair.getValue#85",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math/optimization/RealPointValuePair.java",
        "class_name": "org.apache.commons.math.optimization.RealPointValuePair",
        "signature": "org.apache.commons.math.optimization.RealPointValuePair.getValue()",
        "snippet": "    public double getValue() {\n        return value;\n    }\n",
        "begin_line": 85,
        "end_line": 87,
        "comment": " Get the value of the objective function.\n     * @return the stored value of the objective function\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3015
        },
        "num_failing_tests": 1
    },
    {
        "name": "ArrayRealVector.dotProduct#882",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math/linear/ArrayRealVector.java",
        "class_name": "org.apache.commons.math.linear.ArrayRealVector",
        "signature": "org.apache.commons.math.linear.ArrayRealVector.dotProduct(double[])",
        "snippet": "    public double dotProduct(double[] v)\n        throws IllegalArgumentException {\n        checkVectorDimensions(v.length);\n        double dot = 0;\n        for (int i = 0; i < data.length; i++) {\n            dot += data[i] * v[i];\n        }\n        return dot;\n    }\n",
        "begin_line": 882,
        "end_line": 890,
        "comment": " {@inheritDoc} ",
        "resolved_comments": {
            "org.apache.commons.math.linear.RealVector": "\n     * Compute the dot product.\n     * @param v vector with which dot product should be computed\n     * @return the scalar dot product between instance and v\n     * @exception IllegalArgumentException if v is not the same size as this\n     ",
            "java.io.Serializable": null
        },
        "susp": {
            "ochiai_susp": 0.3015
        },
        "num_failing_tests": 1
    },
    {
        "name": "ArrayRealVector.checkVectorDimensions#1285",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math/linear/ArrayRealVector.java",
        "class_name": "org.apache.commons.math.linear.ArrayRealVector",
        "signature": "org.apache.commons.math.linear.ArrayRealVector.checkVectorDimensions(int)",
        "snippet": "    protected void checkVectorDimensions(int n)\n        throws IllegalArgumentException {\n        if (data.length != n) {\n            throw MathRuntimeException.createIllegalArgumentException(\n                    \"vector length mismatch: got {0} but expected {1}\",\n                    data.length, n);\n        }\n    }\n",
        "begin_line": 1285,
        "end_line": 1292,
        "comment": "\n     * Check if instance dimension is equal to some expected value.\n     * \n     * @param n expected dimension.\n     * @exception IllegalArgumentException if the dimension is\n     * inconsistent with vector size\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3015
        },
        "num_failing_tests": 1
    },
    {
        "name": "MathUtils.compareTo#366",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math/util/MathUtils.java",
        "class_name": "org.apache.commons.math.util.MathUtils",
        "signature": "org.apache.commons.math.util.MathUtils.compareTo(double, double, double)",
        "snippet": "    public static int compareTo(double x, double y, double eps) {\n        if (equals(x, y, eps)) {\n            return 0;\n        } else if (x < y) {\n          return -1;\n        }\n        return 1;\n    }\n",
        "begin_line": 366,
        "end_line": 373,
        "comment": "\n     * Compares two numbers given some amount of allowed error.\n     * \n     * @param x the first number\n     * @param y the second number\n     * @param eps the amount of error to allow when checking for equality\n     * @return <ul><li>0 if  {@link #equals(double, double, double) equals(x, y, eps)}</li>\n     *       <li>&lt; 0 if !{@link #equals(double, double, double) equals(x, y, eps)} &amp;&amp; x &lt; y</li>\n     *       <li>> 0 if !{@link #equals(double, double, double) equals(x, y, eps)} &amp;&amp; x > y</li></ul>\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2773
        },
        "num_failing_tests": 1
    },
    {
        "name": "SimplexTableau.divideRow#369",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java",
        "class_name": "org.apache.commons.math.optimization.linear.SimplexTableau",
        "signature": "org.apache.commons.math.optimization.linear.SimplexTableau.divideRow(int, double)",
        "snippet": "    protected void divideRow(final int dividendRow, final double divisor) {\n        for (int j = 0; j < getWidth(); j++) {\n            tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);\n        }\n    }\n",
        "begin_line": 369,
        "end_line": 373,
        "comment": "\n     * Subtracts a multiple of one row from another.\n     * <p>\n     * After application of this operation, the following will hold:\n     *   minuendRow = minuendRow - multiple * subtrahendRow\n     * </p>\n     * @param dividendRow index of the row\n     * @param divisor value of the divisor\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2773
        },
        "num_failing_tests": 1
    },
    {
        "name": "SimplexTableau.getNumArtificialVariables#496",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java",
        "class_name": "org.apache.commons.math.optimization.linear.SimplexTableau",
        "signature": "org.apache.commons.math.optimization.linear.SimplexTableau.getNumArtificialVariables()",
        "snippet": "    protected final int getNumArtificialVariables() {\n        return numArtificialVariables;\n    }\n",
        "begin_line": 496,
        "end_line": 498,
        "comment": "\n     * Get the number of artificial variables.\n     * @return number of artificial variables\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2773
        },
        "num_failing_tests": 1
    },
    {
        "name": "SimplexSolver.SimplexSolver#41",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java",
        "class_name": "org.apache.commons.math.optimization.linear.SimplexSolver",
        "signature": "org.apache.commons.math.optimization.linear.SimplexSolver.SimplexSolver()",
        "snippet": "    public SimplexSolver() {\n        this(DEFAULT_EPSILON);\n    }\n",
        "begin_line": 41,
        "end_line": 43,
        "comment": "\n     * Build a simplex solver with default settings.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2773
        },
        "num_failing_tests": 1
    },
    {
        "name": "SimplexSolver.SimplexSolver#49",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java",
        "class_name": "org.apache.commons.math.optimization.linear.SimplexSolver",
        "signature": "org.apache.commons.math.optimization.linear.SimplexSolver.SimplexSolver(double)",
        "snippet": "    public SimplexSolver(final double epsilon) {\n        this.epsilon = epsilon;\n    }\n",
        "begin_line": 49,
        "end_line": 51,
        "comment": "\n     * Build a simplex solver with a specified accepted amount of error\n     * @param epsilon the amount of error to accept in floating point comparisons\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2773
        },
        "num_failing_tests": 1
    },
    {
        "name": "SimplexSolver.getPivotColumn#58",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java",
        "class_name": "org.apache.commons.math.optimization.linear.SimplexSolver",
        "signature": "org.apache.commons.math.optimization.linear.SimplexSolver.getPivotColumn(org.apache.commons.math.optimization.linear.SimplexTableau)",
        "snippet": "    private Integer getPivotColumn(SimplexTableau tableau) {\n        double minValue = 0;\n        Integer minPos = null;\n        for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getWidth() - 1; i++) {\n            if (MathUtils.compareTo(tableau.getEntry(0, i), minValue, epsilon) < 0) {\n                minValue = tableau.getEntry(0, i);\n                minPos = i;\n            }\n        }\n        return minPos;\n    }\n",
        "begin_line": 58,
        "end_line": 68,
        "comment": "\n     * Returns the column with the most negative coefficient in the objective function row.\n     * @param tableau simple tableau for the problem\n     * @return column with the most negative coefficient\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2773
        },
        "num_failing_tests": 1
    },
    {
        "name": "SimplexSolver.getPivotRow#76",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java",
        "class_name": "org.apache.commons.math.optimization.linear.SimplexSolver",
        "signature": "org.apache.commons.math.optimization.linear.SimplexSolver.getPivotRow(int, org.apache.commons.math.optimization.linear.SimplexTableau)",
        "snippet": "    private Integer getPivotRow(final int col, final SimplexTableau tableau) {\n        double minRatio = Double.MAX_VALUE;\n        Integer minRatioPos = null;\n        for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) {\n            double rhs = tableau.getEntry(i, tableau.getWidth() - 1);\n            if (MathUtils.compareTo(tableau.getEntry(i, col), 0, epsilon) >= 0) {\n                double ratio = rhs / tableau.getEntry(i, col);\n                if (ratio < minRatio) {\n                    minRatio = ratio;\n                    minRatioPos = i; \n                }\n            }\n        }\n        return minRatioPos;\n    }\n",
        "begin_line": 76,
        "end_line": 90,
        "comment": "\n     * Returns the row with the minimum ratio as given by the minimum ratio test (MRT).\n     * @param tableau simple tableau for the problem\n     * @param col the column to test the ratio of.  See {@link #getPivotColumn(SimplexTableau)}\n     * @return row with the minimum ratio\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2773
        },
        "num_failing_tests": 1
    },
    {
        "name": "SimplexSolver.doIteration#99",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java",
        "class_name": "org.apache.commons.math.optimization.linear.SimplexSolver",
        "signature": "org.apache.commons.math.optimization.linear.SimplexSolver.doIteration(org.apache.commons.math.optimization.linear.SimplexTableau)",
        "snippet": "    protected void doIteration(final SimplexTableau tableau)\n        throws OptimizationException {\n\n        incrementIterationsCounter();\n\n        Integer pivotCol = getPivotColumn(tableau);\n        Integer pivotRow = getPivotRow(pivotCol, tableau);\n        if (pivotRow == null) {\n            throw new UnboundedSolutionException();\n        }\n\n        // set the pivot element to 1\n        double pivotVal = tableau.getEntry(pivotRow, pivotCol);\n        tableau.divideRow(pivotRow, pivotVal);\n\n        // set the rest of the pivot column to 0\n        for (int i = 0; i < tableau.getHeight(); i++) {\n            if (i != pivotRow) {\n                double multiplier = tableau.getEntry(i, pivotCol);\n                tableau.subtractRow(i, pivotRow, multiplier);\n            }\n        }\n    }\n",
        "begin_line": 99,
        "end_line": 121,
        "comment": "\n     * Runs one iteration of the Simplex method on the given model.\n     * @param tableau simple tableau for the problem\n     * @throws OptimizationException if the maximal iteration count has been\n     * exceeded or if the model is found not to have a bounded solution\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2773
        },
        "num_failing_tests": 1
    },
    {
        "name": "AbstractLinearOptimizer.AbstractLinearOptimizer#61",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math/optimization/linear/AbstractLinearOptimizer.java",
        "class_name": "org.apache.commons.math.optimization.linear.AbstractLinearOptimizer",
        "signature": "org.apache.commons.math.optimization.linear.AbstractLinearOptimizer.AbstractLinearOptimizer()",
        "snippet": "    protected AbstractLinearOptimizer() {\n        setMaxIterations(DEFAULT_MAX_ITERATIONS);\n    }\n",
        "begin_line": 61,
        "end_line": 63,
        "comment": " Simple constructor with default settings.\n     * <p>The maximal number of evaluation is set to its default value.</p>\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2773
        },
        "num_failing_tests": 1
    },
    {
        "name": "AbstractLinearOptimizer.setMaxIterations#66",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math/optimization/linear/AbstractLinearOptimizer.java",
        "class_name": "org.apache.commons.math.optimization.linear.AbstractLinearOptimizer",
        "signature": "org.apache.commons.math.optimization.linear.AbstractLinearOptimizer.setMaxIterations(int)",
        "snippet": "    public void setMaxIterations(int maxIterations) {\n        this.maxIterations = maxIterations;\n    }\n",
        "begin_line": 66,
        "end_line": 68,
        "comment": " {@inheritDoc} ",
        "resolved_comments": {
            "org.apache.commons.math.optimization.linear.LinearOptimizer": " Set the maximal number of iterations of the algorithm.\n     * @param maxIterations maximal number of function calls\n     "
        },
        "susp": {
            "ochiai_susp": 0.2773
        },
        "num_failing_tests": 1
    },
    {
        "name": "AbstractLinearOptimizer.incrementIterationsCounter#84",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math/optimization/linear/AbstractLinearOptimizer.java",
        "class_name": "org.apache.commons.math.optimization.linear.AbstractLinearOptimizer",
        "signature": "org.apache.commons.math.optimization.linear.AbstractLinearOptimizer.incrementIterationsCounter()",
        "snippet": "    protected void incrementIterationsCounter()\n        throws OptimizationException {\n        if (++iterations > maxIterations) {\n            throw new OptimizationException(new MaxIterationsExceededException(maxIterations));\n        }\n    }\n",
        "begin_line": 84,
        "end_line": 89,
        "comment": " Increment the iterations counter by 1.\n     * @exception OptimizationException if the maximal number\n     * of iterations is exceeded\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2773
        },
        "num_failing_tests": 1
    },
    {
        "name": "AbstractLinearOptimizer.optimize#92",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math/optimization/linear/AbstractLinearOptimizer.java",
        "class_name": "org.apache.commons.math.optimization.linear.AbstractLinearOptimizer",
        "signature": "org.apache.commons.math.optimization.linear.AbstractLinearOptimizer.optimize(org.apache.commons.math.optimization.linear.LinearObjectiveFunction, java.util.Collection<org.apache.commons.math.optimization.linear.LinearConstraint>, org.apache.commons.math.optimization.GoalType, boolean)",
        "snippet": "    public RealPointValuePair optimize(final LinearObjectiveFunction f,\n                                       final Collection<LinearConstraint> constraints,\n                                       final GoalType goalType, final boolean restrictToNonNegative)\n         throws OptimizationException {\n\n        // store linear problem characteristics\n        this.f                     = f;\n        this.constraints           = constraints;\n        this.goalType              = goalType;\n        this.restrictToNonNegative = restrictToNonNegative;\n\n        iterations  = 0;\n\n        // solve the problem\n        return doOptimize();\n\n    }\n",
        "begin_line": 92,
        "end_line": 108,
        "comment": " {@inheritDoc} ",
        "resolved_comments": {
            "org.apache.commons.math.optimization.linear.LinearOptimizer": " Optimizes an objective function.\n     * @param f linear objective function\n     * @param constraints linear constraints\n     * @param goalType type of optimization goal: either {@link GoalType#MAXIMIZE}\n     * or {@link GoalType#MINIMIZE}\n     * @param restrictToNonNegative whether to restrict the variables to non-negative values\n     * @return point/value pair giving the optimal value for objective function\n     * @exception OptimizationException if no solution fulfilling the constraints\n     * can be found in the allowed number of iterations\n     "
        },
        "susp": {
            "ochiai_susp": 0.2773
        },
        "num_failing_tests": 1
    },
    {
        "name": "SimplexTableau.createTableau#123",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java",
        "class_name": "org.apache.commons.math.optimization.linear.SimplexTableau",
        "signature": "org.apache.commons.math.optimization.linear.SimplexTableau.createTableau(boolean)",
        "snippet": "    protected double[][] createTableau(final boolean maximize) {\n\n        // create a matrix of the correct size\n        List<LinearConstraint> constraints = getNormalizedConstraints();\n        int width = numDecisionVariables + numSlackVariables +\n        numArtificialVariables + getNumObjectiveFunctions() + 1; // + 1 is for RHS\n        int height = constraints.size() + getNumObjectiveFunctions();\n        double[][] matrix = new double[height][width];\n\n        // initialize the objective function rows\n        if (getNumObjectiveFunctions() == 2) {\n            matrix[0][0] = -1;\n        }\n        int zIndex = (getNumObjectiveFunctions() == 1) ? 0 : 1;\n        matrix[zIndex][zIndex] = maximize ? 1 : -1;\n        RealVector objectiveCoefficients =\n            maximize ? f.getCoefficients().mapMultiply(-1) : f.getCoefficients();\n            copyArray(objectiveCoefficients.getData(), matrix[zIndex], getNumObjectiveFunctions());\n            matrix[zIndex][width - 1] =\n                maximize ? f.getConstantTerm() : -1 * f.getConstantTerm();\n\n                if (!restrictToNonNegative) {\n                    matrix[zIndex][getSlackVariableOffset() - 1] =\n                        getInvertedCoeffiecientSum(objectiveCoefficients);\n                }\n\n                // initialize the constraint rows\n                int slackVar = 0;\n                int artificialVar = 0;\n                for (int i = 0; i < constraints.size(); i++) {\n                    LinearConstraint constraint = constraints.get(i);\n                    int row = getNumObjectiveFunctions() + i;\n\n                    // decision variable coefficients\n                    copyArray(constraint.getCoefficients().getData(), matrix[row], 1);\n\n                    // x-\n                    if (!restrictToNonNegative) {\n                        matrix[row][getSlackVariableOffset() - 1] =\n                            getInvertedCoeffiecientSum(constraint.getCoefficients());\n                    }\n\n                    // RHS\n                    matrix[row][width - 1] = constraint.getValue();\n\n                    // slack variables\n                    if (constraint.getRelationship() == Relationship.LEQ) {\n                        matrix[row][getSlackVariableOffset() + slackVar++] = 1;  // slack\n                    } else if (constraint.getRelationship() == Relationship.GEQ) {\n                        matrix[row][getSlackVariableOffset() + slackVar++] = -1; // excess\n                    }\n\n                    // artificial variables\n                    if ((constraint.getRelationship() == Relationship.EQ) ||\n                        (constraint.getRelationship() == Relationship.GEQ)) {\n                        matrix[0][getArtificialVariableOffset() + artificialVar] = 1; \n                        matrix[row][getArtificialVariableOffset() + artificialVar++] = 1; \n                    }\n                }\n\n                return matrix;\n    }\n",
        "begin_line": 123,
        "end_line": 184,
        "comment": "\n     * Create the tableau by itself.\n     * @param maximize if true, goal is to maximize the objective function\n     * @return created tableau\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2673
        },
        "num_failing_tests": 1
    },
    {
        "name": "SimplexTableau.initialize#247",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java",
        "class_name": "org.apache.commons.math.optimization.linear.SimplexTableau",
        "signature": "org.apache.commons.math.optimization.linear.SimplexTableau.initialize()",
        "snippet": "    private void initialize() {\n        for (int artificialVar = 0; artificialVar < numArtificialVariables; artificialVar++) {\n            int row = getBasicRow(getArtificialVariableOffset() + artificialVar);\n            subtractRow(0, row, 1.0);\n        }\n    }\n",
        "begin_line": 247,
        "end_line": 252,
        "comment": "\n     * Puts the tableau in proper form by zeroing out the artificial variables\n     * in the objective function via elementary row operations.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2673
        },
        "num_failing_tests": 1
    },
    {
        "name": "SimplexTableau.getArtificialVariableOffset#440",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java",
        "class_name": "org.apache.commons.math.optimization.linear.SimplexTableau",
        "signature": "org.apache.commons.math.optimization.linear.SimplexTableau.getArtificialVariableOffset()",
        "snippet": "    protected final int getArtificialVariableOffset() {\n        return getNumObjectiveFunctions() + numDecisionVariables + numSlackVariables;\n    }\n",
        "begin_line": 440,
        "end_line": 442,
        "comment": "\n     * Get the offset of the first artificial variable.\n     * @return offset of the first artificial variable\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2673
        },
        "num_failing_tests": 1
    },
    {
        "name": "SimplexTableau.getRhsOffset#448",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java",
        "class_name": "org.apache.commons.math.optimization.linear.SimplexTableau",
        "signature": "org.apache.commons.math.optimization.linear.SimplexTableau.getRhsOffset()",
        "snippet": "    protected final int getRhsOffset() {\n        return getWidth() - 1;\n    }\n",
        "begin_line": 448,
        "end_line": 450,
        "comment": "\n     * Get the offset of the right hand side.\n     * @return offset of the right hand side\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2673
        },
        "num_failing_tests": 1
    },
    {
        "name": "ArrayRealVector.mapMultiply#337",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math/linear/ArrayRealVector.java",
        "class_name": "org.apache.commons.math.linear.ArrayRealVector",
        "signature": "org.apache.commons.math.linear.ArrayRealVector.mapMultiply(double)",
        "snippet": "    public RealVector mapMultiply(double d) {\n        double[] out = new double[data.length];\n        for (int i = 0; i < data.length; i++) {\n            out[i] = data[i] * d;\n        }\n        return new ArrayRealVector(out);\n    }\n",
        "begin_line": 337,
        "end_line": 343,
        "comment": " {@inheritDoc} ",
        "resolved_comments": {
            "org.apache.commons.math.linear.RealVector": "\n     * Map a multiplication operation to each entry.\n     * @param d value to multiply all entries by\n     * @return this * d\n     ",
            "java.io.Serializable": null
        },
        "susp": {
            "ochiai_susp": 0.2673
        },
        "num_failing_tests": 1
    },
    {
        "name": "MathUtils.equals#394",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math/util/MathUtils.java",
        "class_name": "org.apache.commons.math.util.MathUtils",
        "signature": "org.apache.commons.math.util.MathUtils.equals(double, double)",
        "snippet": "    public static boolean equals(double x, double y) {\n        return ((Double.isNaN(x) && Double.isNaN(y)) || x == y);\n    }\n",
        "begin_line": 394,
        "end_line": 396,
        "comment": "\n     * Returns true iff both arguments are NaN or neither is NaN and they are\n     * equal\n     * \n     * @param x first value\n     * @param y second value\n     * @return true if the values are equal or both are NaN\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.25
        },
        "num_failing_tests": 1
    },
    {
        "name": "MathUtils.equals#410",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math/util/MathUtils.java",
        "class_name": "org.apache.commons.math.util.MathUtils",
        "signature": "org.apache.commons.math.util.MathUtils.equals(double, double, double)",
        "snippet": "    public static boolean equals(double x, double y, double eps) {\n      return equals(x, y) || (Math.abs(y - x) <= eps);\n    }\n",
        "begin_line": 410,
        "end_line": 412,
        "comment": "\n     * Returns true iff both arguments are equal or within the range of allowed\n     * error (inclusive).\n     * <p>\n     * Two NaNs are considered equals, as are two infinities with same sign.\n     * </p>\n     * \n     * @param x first value\n     * @param y second value\n     * @param eps the amount of absolute error to allow\n     * @return true if the values are equal or within range of each other\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.25
        },
        "num_failing_tests": 1
    },
    {
        "name": "SimplexTableau.getBasicRow#272",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java",
        "class_name": "org.apache.commons.math.optimization.linear.SimplexTableau",
        "signature": "org.apache.commons.math.optimization.linear.SimplexTableau.getBasicRow(int)",
        "snippet": "    private Integer getBasicRow(final int col) {\n        return getBasicRow(col, true);\n    }\n",
        "begin_line": 272,
        "end_line": 274,
        "comment": "\n     * Checks whether the given column is basic.\n     * @param col index of the column to check\n     * @return the row that the variable is basic in.  null if the column is not basic\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.25
        },
        "num_failing_tests": 1
    },
    {
        "name": "SimplexTableau.subtractRow#385",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java",
        "class_name": "org.apache.commons.math.optimization.linear.SimplexTableau",
        "signature": "org.apache.commons.math.optimization.linear.SimplexTableau.subtractRow(int, int, double)",
        "snippet": "    protected void subtractRow(final int minuendRow, final int subtrahendRow,\n                               final double multiple) {\n        for (int j = 0; j < getWidth(); j++) {\n            tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) -\n                             multiple * tableau.getEntry(subtrahendRow, j));\n        }\n    }\n",
        "begin_line": 385,
        "end_line": 391,
        "comment": "\n     * Subtracts a multiple of one row from another.\n     * <p>\n     * After application of this operation, the following will hold:\n     *   minuendRow = minuendRow - multiple * subtrahendRow\n     * </p>\n     * @param minuendRow row index\n     * @param subtrahendRow row index\n     * @param multiple multiplication factor\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.25
        },
        "num_failing_tests": 1
    },
    {
        "name": "SimplexTableau.getWidth#397",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java",
        "class_name": "org.apache.commons.math.optimization.linear.SimplexTableau",
        "signature": "org.apache.commons.math.optimization.linear.SimplexTableau.getWidth()",
        "snippet": "    protected final int getWidth() {\n        return tableau.getColumnDimension();\n    }\n",
        "begin_line": 397,
        "end_line": 399,
        "comment": "\n     * Get the width of the tableau.\n     * @return width of the tableau\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.25
        },
        "num_failing_tests": 1
    },
    {
        "name": "SimplexTableau.getHeight#405",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java",
        "class_name": "org.apache.commons.math.optimization.linear.SimplexTableau",
        "signature": "org.apache.commons.math.optimization.linear.SimplexTableau.getHeight()",
        "snippet": "    protected final int getHeight() {\n        return tableau.getRowDimension();\n    }\n",
        "begin_line": 405,
        "end_line": 407,
        "comment": "\n     * Get the height of the tableau.\n     * @return height of the tableau\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.25
        },
        "num_failing_tests": 1
    },
    {
        "name": "SimplexTableau.getEntry#414",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java",
        "class_name": "org.apache.commons.math.optimization.linear.SimplexTableau",
        "signature": "org.apache.commons.math.optimization.linear.SimplexTableau.getEntry(int, int)",
        "snippet": "    protected final double getEntry(final int row, final int column) {\n        return tableau.getEntry(row, column);\n    }\n",
        "begin_line": 414,
        "end_line": 416,
        "comment": " Get an entry of the tableau.\n     * @param row row index\n     * @param column column index\n     * @return entry at (row, column)\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.25
        },
        "num_failing_tests": 1
    },
    {
        "name": "LinearConstraint.LinearConstraint#79",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math/optimization/linear/LinearConstraint.java",
        "class_name": "org.apache.commons.math.optimization.linear.LinearConstraint",
        "signature": "org.apache.commons.math.optimization.linear.LinearConstraint.LinearConstraint(double[], org.apache.commons.math.optimization.linear.Relationship, double)",
        "snippet": "    public LinearConstraint(final double[] coefficients, final Relationship relationship,\n                            final double value) {\n        this(new ArrayRealVector(coefficients), relationship, value);\n    }\n",
        "begin_line": 79,
        "end_line": 82,
        "comment": "\n     * Build a constraint involving a single linear equation.\n     * <p>\n     * A linear constraint with a single linear equation has one of the forms:\n     * <ul>\n     *   <li>c<sub>1</sub>x<sub>1</sub> + ... c<sub>n</sub>x<sub>n</sub> = v</li>\n     *   <li>c<sub>1</sub>x<sub>1</sub> + ... c<sub>n</sub>x<sub>n</sub> &lt;= v</li>\n     *   <li>c<sub>1</sub>x<sub>1</sub> + ... c<sub>n</sub>x<sub>n</sub> >= v</li>\n     * </ul>\n     * </p>\n     * @param coefficients The coefficients of the constraint (left hand side)\n     * @param relationship The type of (in)equality used in the constraint\n     * @param value The value of the constraint (right hand side)\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.25
        },
        "num_failing_tests": 1
    },
    {
        "name": "Array2DRowRealMatrix.getEntry#350",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java",
        "class_name": "org.apache.commons.math.linear.Array2DRowRealMatrix",
        "signature": "org.apache.commons.math.linear.Array2DRowRealMatrix.getEntry(int, int)",
        "snippet": "    @Override\n    public double getEntry(final int row, final int column)\n        throws MatrixIndexException {\n        try {\n            return data[row][column];\n        } catch (ArrayIndexOutOfBoundsException e) {\n            throw new MatrixIndexException(\n                    \"no entry at indices ({0}, {1}) in a {2}x{3} matrix\",\n                    row, column, getRowDimension(), getColumnDimension());\n        }\n    }\n",
        "begin_line": 350,
        "end_line": 360,
        "comment": " {@inheritDoc} ",
        "resolved_comments": {
            "org.apache.commons.math.linear.AbstractRealMatrix": " {@inheritDoc} ",
            "java.io.Serializable": null,
            "org.apache.commons.math.linear.RealMatrix": "\n     * Returns the entry in the specified row and column.\n     * <p>\n     * Row and column indices start at 0 and must satisfy \n     * <ul>\n     * <li><code>0 <= row < rowDimension</code></li>\n     * <li><code> 0 <= column < columnDimension</code></li>\n     * </ul>\n     * otherwise a <code>MatrixIndexException</code> is thrown.</p>\n     * \n     * @param row  row location of entry to be fetched\n     * @param column  column location of entry to be fetched\n     * @return matrix entry in row,column\n     * @throws MatrixIndexException if the row or column index is not valid\n     "
        },
        "susp": {
            "ochiai_susp": 0.25
        },
        "num_failing_tests": 1
    },
    {
        "name": "Array2DRowRealMatrix.setEntry#363",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java",
        "class_name": "org.apache.commons.math.linear.Array2DRowRealMatrix",
        "signature": "org.apache.commons.math.linear.Array2DRowRealMatrix.setEntry(int, int, double)",
        "snippet": "    @Override\n    public void setEntry(final int row, final int column, final double value)\n        throws MatrixIndexException {\n        try {\n            data[row][column] = value;\n        } catch (ArrayIndexOutOfBoundsException e) {\n            throw new MatrixIndexException(\n                    \"no entry at indices ({0}, {1}) in a {2}x{3} matrix\",\n                    row, column, getRowDimension(), getColumnDimension());\n        }\n    }\n",
        "begin_line": 363,
        "end_line": 373,
        "comment": " {@inheritDoc} ",
        "resolved_comments": {
            "org.apache.commons.math.linear.AbstractRealMatrix": " {@inheritDoc} ",
            "java.io.Serializable": null,
            "org.apache.commons.math.linear.RealMatrix": "\n     * Set the entry in the specified row and column.\n     * <p>\n     * Row and column indices start at 0 and must satisfy \n     * <ul>\n     * <li><code>0 <= row < rowDimension</code></li>\n     * <li><code> 0 <= column < columnDimension</code></li>\n     * </ul>\n     * otherwise a <code>MatrixIndexException</code> is thrown.</p>\n     * \n     * @param row  row location of entry to be set\n     * @param column  column location of entry to be set\n     * @param value matrix entry to be set in row,column\n     * @throws MatrixIndexException if the row or column index is not valid\n     * @since 2.0\n     "
        },
        "susp": {
            "ochiai_susp": 0.25
        },
        "num_failing_tests": 1
    },
    {
        "name": "CompositeFormat.getDefaultNumberFormat#53",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math/util/CompositeFormat.java",
        "class_name": "org.apache.commons.math.util.CompositeFormat",
        "signature": "org.apache.commons.math.util.CompositeFormat.getDefaultNumberFormat(java.util.Locale)",
        "snippet": "    protected static NumberFormat getDefaultNumberFormat(final Locale locale) {\n        final NumberFormat nf = NumberFormat.getInstance(locale);\n        nf.setMaximumFractionDigits(2);\n        return nf;\n    }\n",
        "begin_line": 53,
        "end_line": 57,
        "comment": "\n     * Create a default number format.  The default number format is based on\n     * {@link NumberFormat#getInstance(java.util.Locale)} with the only\n     * customizing that the maximum number of fraction digits is set to 2.  \n     * @param locale the specific locale used by the format.\n     * @return the default number format specific to the given locale.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2425
        },
        "num_failing_tests": 1
    },
    {
        "name": "SimplexTableau.SimplexTableau#101",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java",
        "class_name": "org.apache.commons.math.optimization.linear.SimplexTableau",
        "signature": "org.apache.commons.math.optimization.linear.SimplexTableau.SimplexTableau(org.apache.commons.math.optimization.linear.LinearObjectiveFunction, java.util.Collection<org.apache.commons.math.optimization.linear.LinearConstraint>, org.apache.commons.math.optimization.GoalType, boolean, double)",
        "snippet": "    SimplexTableau(final LinearObjectiveFunction f,\n                   final Collection<LinearConstraint> constraints,\n                   final GoalType goalType, final boolean restrictToNonNegative,\n                   final double epsilon) {\n        this.f                      = f;\n        this.constraints            = constraints;\n        this.restrictToNonNegative  = restrictToNonNegative;\n        this.epsilon                = epsilon;\n        this.numDecisionVariables   = getNumVariables() + (restrictToNonNegative ? 0 : 1);\n        this.numSlackVariables      = getConstraintTypeCounts(Relationship.LEQ) +\n                                      getConstraintTypeCounts(Relationship.GEQ);\n        this.numArtificialVariables = getConstraintTypeCounts(Relationship.EQ) +\n                                      getConstraintTypeCounts(Relationship.GEQ);\n        this.tableau = new Array2DRowRealMatrix(createTableau(goalType == GoalType.MAXIMIZE));\n        initialize();\n    }\n",
        "begin_line": 101,
        "end_line": 116,
        "comment": "\n     * Build a tableau for a linear problem.\n     * @param f linear objective function\n     * @param constraints linear constraints\n     * @param goalType type of optimization goal: either {@link GoalType#MAXIMIZE}\n     * or {@link GoalType#MINIMIZE}\n     * @param restrictToNonNegative whether to restrict the variables to non-negative values\n     * @param epsilon amount of error to accept in floating point comparisons\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2425
        },
        "num_failing_tests": 1
    },
    {
        "name": "SimplexTableau.getNumVariables#189",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java",
        "class_name": "org.apache.commons.math.optimization.linear.SimplexTableau",
        "signature": "org.apache.commons.math.optimization.linear.SimplexTableau.getNumVariables()",
        "snippet": "    public int getNumVariables() {\n        return f.getCoefficients().getDimension();\n    }\n",
        "begin_line": 189,
        "end_line": 191,
        "comment": " Get the number of variables.\n     * @return number of variables\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2425
        },
        "num_failing_tests": 1
    },
    {
        "name": "SimplexTableau.getNormalizedConstraints#197",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java",
        "class_name": "org.apache.commons.math.optimization.linear.SimplexTableau",
        "signature": "org.apache.commons.math.optimization.linear.SimplexTableau.getNormalizedConstraints()",
        "snippet": "    public List<LinearConstraint> getNormalizedConstraints() {\n        List<LinearConstraint> normalized = new ArrayList<LinearConstraint>();\n        for (LinearConstraint constraint : constraints) {\n            normalized.add(normalize(constraint));\n        }\n        return normalized;\n    }\n",
        "begin_line": 197,
        "end_line": 203,
        "comment": "\n     * Get new versions of the constraints which have positive right hand sides.\n     * @return new versions of the constraints\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2425
        },
        "num_failing_tests": 1
    },
    {
        "name": "SimplexTableau.normalize#210",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java",
        "class_name": "org.apache.commons.math.optimization.linear.SimplexTableau",
        "signature": "org.apache.commons.math.optimization.linear.SimplexTableau.normalize(org.apache.commons.math.optimization.linear.LinearConstraint)",
        "snippet": "    private LinearConstraint normalize(final LinearConstraint constraint) {\n        if (constraint.getValue() < 0) {\n            return new LinearConstraint(constraint.getCoefficients().mapMultiply(-1),\n                                        constraint.getRelationship().oppositeRelationship(),\n                                        -1 * constraint.getValue());\n        }\n        return new LinearConstraint(constraint.getCoefficients(), \n                                    constraint.getRelationship(), constraint.getValue());\n    }\n",
        "begin_line": 210,
        "end_line": 218,
        "comment": "\n     * Get a new equation equivalent to this one with a positive right hand side.\n     * @param constraint reference constraint\n     * @return new equation\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2425
        },
        "num_failing_tests": 1
    },
    {
        "name": "SimplexTableau.getNumObjectiveFunctions#224",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java",
        "class_name": "org.apache.commons.math.optimization.linear.SimplexTableau",
        "signature": "org.apache.commons.math.optimization.linear.SimplexTableau.getNumObjectiveFunctions()",
        "snippet": "    protected final int getNumObjectiveFunctions() {\n        return this.numArtificialVariables > 0 ? 2 : 1;\n    }\n",
        "begin_line": 224,
        "end_line": 226,
        "comment": "\n     * Get the number of objective functions in this tableau.\n     * @return 2 for Phase 1.  1 for Phase 2.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2425
        },
        "num_failing_tests": 1
    },
    {
        "name": "SimplexTableau.getConstraintTypeCounts#233",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java",
        "class_name": "org.apache.commons.math.optimization.linear.SimplexTableau",
        "signature": "org.apache.commons.math.optimization.linear.SimplexTableau.getConstraintTypeCounts(org.apache.commons.math.optimization.linear.Relationship)",
        "snippet": "    private int getConstraintTypeCounts(final Relationship relationship) {\n        int count = 0;\n        for (final LinearConstraint constraint : constraints) {\n            if (constraint.getRelationship() == relationship) {\n                ++count;\n            }\n        }\n        return count;\n    }\n",
        "begin_line": 233,
        "end_line": 241,
        "comment": "\n     * Get a count of constraints corresponding to a specified relationship.\n     * @param relationship relationship to count\n     * @return number of constraint with the specified relationship\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2425
        },
        "num_failing_tests": 1
    },
    {
        "name": "SimplexTableau.copyArray#329",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java",
        "class_name": "org.apache.commons.math.optimization.linear.SimplexTableau",
        "signature": "org.apache.commons.math.optimization.linear.SimplexTableau.copyArray(double[], double[], int)",
        "snippet": "    private void copyArray(final double[] src, final double[] dest,\n                           final int destPos) {\n        System.arraycopy(src, 0, dest, getNumObjectiveFunctions(), src.length); \n    }\n",
        "begin_line": 329,
        "end_line": 332,
        "comment": "\n     * @param src the source array\n     * @param dest the destination array\n     * @param destPos the destination position\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2425
        },
        "num_failing_tests": 1
    },
    {
        "name": "Relationship.Relationship#42",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math/optimization/linear/Relationship.java",
        "class_name": "org.apache.commons.math.optimization.linear.Relationship",
        "signature": "org.apache.commons.math.optimization.linear.Relationship.Relationship(java.lang.String)",
        "snippet": "    private Relationship(String stringValue) {\n        this.stringValue = stringValue;\n    }\n",
        "begin_line": 42,
        "end_line": 44,
        "comment": " Simple constructor.\n     * @param stringValue display string for the relationship\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2425
        },
        "num_failing_tests": 1
    },
    {
        "name": "LinearObjectiveFunction.LinearObjectiveFunction#57",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math/optimization/linear/LinearObjectiveFunction.java",
        "class_name": "org.apache.commons.math.optimization.linear.LinearObjectiveFunction",
        "signature": "org.apache.commons.math.optimization.linear.LinearObjectiveFunction.LinearObjectiveFunction(double[], double)",
        "snippet": "    public LinearObjectiveFunction(double[] coefficients, double constantTerm) {\n        this(new ArrayRealVector(coefficients), constantTerm);\n    }\n",
        "begin_line": 57,
        "end_line": 59,
        "comment": "\n     * @param coefficients The coefficients for the linear equation being optimized\n     * @param constantTerm The constant term of the linear equation\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2425
        },
        "num_failing_tests": 1
    },
    {
        "name": "LinearObjectiveFunction.LinearObjectiveFunction#65",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math/optimization/linear/LinearObjectiveFunction.java",
        "class_name": "org.apache.commons.math.optimization.linear.LinearObjectiveFunction",
        "signature": "org.apache.commons.math.optimization.linear.LinearObjectiveFunction.LinearObjectiveFunction(org.apache.commons.math.linear.RealVector, double)",
        "snippet": "    public LinearObjectiveFunction(RealVector coefficients, double constantTerm) {\n        this.coefficients = coefficients;\n        this.constantTerm = constantTerm;\n    }\n",
        "begin_line": 65,
        "end_line": 68,
        "comment": "\n     * @param coefficients The coefficients for the linear equation being optimized\n     * @param constantTerm The constant term of the linear equation\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2425
        },
        "num_failing_tests": 1
    },
    {
        "name": "LinearObjectiveFunction.getCoefficients#74",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math/optimization/linear/LinearObjectiveFunction.java",
        "class_name": "org.apache.commons.math.optimization.linear.LinearObjectiveFunction",
        "signature": "org.apache.commons.math.optimization.linear.LinearObjectiveFunction.getCoefficients()",
        "snippet": "    public RealVector getCoefficients() {\n        return coefficients;\n    }\n",
        "begin_line": 74,
        "end_line": 76,
        "comment": "\n     * Get the coefficients of the linear equation being optimized.\n     * @return coefficients of the linear equation being optimized\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2425
        },
        "num_failing_tests": 1
    },
    {
        "name": "LinearObjectiveFunction.getConstantTerm#82",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math/optimization/linear/LinearObjectiveFunction.java",
        "class_name": "org.apache.commons.math.optimization.linear.LinearObjectiveFunction",
        "signature": "org.apache.commons.math.optimization.linear.LinearObjectiveFunction.getConstantTerm()",
        "snippet": "    public double getConstantTerm() {\n        return constantTerm;\n    }\n",
        "begin_line": 82,
        "end_line": 84,
        "comment": "\n     * Get the constant of the linear equation being optimized.\n     * @return constant of the linear equation being optimized\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2425
        },
        "num_failing_tests": 1
    },
    {
        "name": "LinearConstraint.LinearConstraint#98",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math/optimization/linear/LinearConstraint.java",
        "class_name": "org.apache.commons.math.optimization.linear.LinearConstraint",
        "signature": "org.apache.commons.math.optimization.linear.LinearConstraint.LinearConstraint(org.apache.commons.math.linear.RealVector, org.apache.commons.math.optimization.linear.Relationship, double)",
        "snippet": "    public LinearConstraint(final RealVector coefficients, final Relationship relationship,\n                            final double value) {\n        this.coefficients = coefficients;\n        this.relationship = relationship;\n        this.value        = value;\n    }\n",
        "begin_line": 98,
        "end_line": 103,
        "comment": "\n     * Build a constraint involving a single linear equation.\n     * <p>\n     * A linear constraint with a single linear equation has one of the forms:\n     * <ul>\n     *   <li>c<sub>1</sub>x<sub>1</sub> + ... c<sub>n</sub>x<sub>n</sub> = v</li>\n     *   <li>c<sub>1</sub>x<sub>1</sub> + ... c<sub>n</sub>x<sub>n</sub> &lt;= v</li>\n     *   <li>c<sub>1</sub>x<sub>1</sub> + ... c<sub>n</sub>x<sub>n</sub> >= v</li>\n     * </ul>\n     * </p>\n     * @param coefficients The coefficients of the constraint (left hand side)\n     * @param relationship The type of (in)equality used in the constraint\n     * @param value The value of the constraint (right hand side)\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2425
        },
        "num_failing_tests": 1
    },
    {
        "name": "LinearConstraint.getCoefficients#167",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math/optimization/linear/LinearConstraint.java",
        "class_name": "org.apache.commons.math.optimization.linear.LinearConstraint",
        "signature": "org.apache.commons.math.optimization.linear.LinearConstraint.getCoefficients()",
        "snippet": "    public RealVector getCoefficients() {\n        return coefficients;\n    }\n",
        "begin_line": 167,
        "end_line": 169,
        "comment": "\n     * Get the coefficients of the constraint (left hand side).\n     * @return coefficients of the constraint (left hand side)\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2425
        },
        "num_failing_tests": 1
    },
    {
        "name": "LinearConstraint.getRelationship#175",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math/optimization/linear/LinearConstraint.java",
        "class_name": "org.apache.commons.math.optimization.linear.LinearConstraint",
        "signature": "org.apache.commons.math.optimization.linear.LinearConstraint.getRelationship()",
        "snippet": "    public Relationship getRelationship() {\n        return relationship;\n    }\n",
        "begin_line": 175,
        "end_line": 177,
        "comment": "\n     * Get the relationship between left and right hand sides.\n     * @return relationship between left and right hand sides\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2425
        },
        "num_failing_tests": 1
    },
    {
        "name": "LinearConstraint.getValue#183",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math/optimization/linear/LinearConstraint.java",
        "class_name": "org.apache.commons.math.optimization.linear.LinearConstraint",
        "signature": "org.apache.commons.math.optimization.linear.LinearConstraint.getValue()",
        "snippet": "    public double getValue() {\n        return value;\n    }\n",
        "begin_line": 183,
        "end_line": 185,
        "comment": "\n     * Get the value of the constraint (right hand side).\n     * @return value of the constraint (right hand side)\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2425
        },
        "num_failing_tests": 1
    },
    {
        "name": "RealVectorFormat.RealVectorFormat#93",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math/linear/RealVectorFormat.java",
        "class_name": "org.apache.commons.math.linear.RealVectorFormat",
        "signature": "org.apache.commons.math.linear.RealVectorFormat.RealVectorFormat(java.text.NumberFormat)",
        "snippet": "    public RealVectorFormat(final NumberFormat format) {\n        this(DEFAULT_PREFIX, DEFAULT_SUFFIX, DEFAULT_SEPARATOR, format);\n    }\n",
        "begin_line": 93,
        "end_line": 95,
        "comment": "\n     * Create an instance with a custom number format for components.\n     * @param format the custom format for components.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2425
        },
        "num_failing_tests": 1
    },
    {
        "name": "RealVectorFormat.RealVectorFormat#116",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math/linear/RealVectorFormat.java",
        "class_name": "org.apache.commons.math.linear.RealVectorFormat",
        "signature": "org.apache.commons.math.linear.RealVectorFormat.RealVectorFormat(java.lang.String, java.lang.String, java.lang.String, java.text.NumberFormat)",
        "snippet": "    public RealVectorFormat(final String prefix, final String suffix,\n                            final String separator, final NumberFormat format) {\n        this.prefix      = prefix;\n        this.suffix      = suffix;\n        this.separator   = separator;\n        trimmedPrefix    = prefix.trim();\n        trimmedSuffix    = suffix.trim();\n        trimmedSeparator = separator.trim();\n        this.format      = format;\n    }\n",
        "begin_line": 116,
        "end_line": 125,
        "comment": "\n     * Create an instance with custom prefix, suffix, separator and format\n     * for components.\n     * @param prefix prefix to use instead of the default \"{\"\n     * @param suffix suffix to use instead of the default \"}\"\n     * @param separator separator to use instead of the default \"; \"\n     * @param format the custom format for components.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2425
        },
        "num_failing_tests": 1
    },
    {
        "name": "RealVectorFormat.getInstance#172",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math/linear/RealVectorFormat.java",
        "class_name": "org.apache.commons.math.linear.RealVectorFormat",
        "signature": "org.apache.commons.math.linear.RealVectorFormat.getInstance()",
        "snippet": "    public static RealVectorFormat getInstance() {\n        return getInstance(Locale.getDefault());\n    }\n",
        "begin_line": 172,
        "end_line": 174,
        "comment": "\n     * Returns the default real vector format for the current locale.\n     * @return the default real vector format.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2425
        },
        "num_failing_tests": 1
    },
    {
        "name": "RealVectorFormat.getInstance#181",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math/linear/RealVectorFormat.java",
        "class_name": "org.apache.commons.math.linear.RealVectorFormat",
        "signature": "org.apache.commons.math.linear.RealVectorFormat.getInstance(java.util.Locale)",
        "snippet": "    public static RealVectorFormat getInstance(final Locale locale) {\n        return new RealVectorFormat(getDefaultNumberFormat(locale));\n    }\n",
        "begin_line": 181,
        "end_line": 183,
        "comment": "\n     * Returns the default real vector format for the given locale.\n     * @param locale the specific locale used by the format.\n     * @return the real vector format specific to the given locale.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2425
        },
        "num_failing_tests": 1
    },
    {
        "name": "ArrayRealVector.ArrayRealVector#77",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math/linear/ArrayRealVector.java",
        "class_name": "org.apache.commons.math.linear.ArrayRealVector",
        "signature": "org.apache.commons.math.linear.ArrayRealVector.ArrayRealVector(double[])",
        "snippet": "    public ArrayRealVector(double[] d) {\n        data = d.clone();\n    }\n",
        "begin_line": 77,
        "end_line": 79,
        "comment": "\n     * Construct a vector from an array, copying the input array.\n     * @param d array of doubles.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2425
        },
        "num_failing_tests": 1
    },
    {
        "name": "ArrayRealVector.getData#853",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math/linear/ArrayRealVector.java",
        "class_name": "org.apache.commons.math.linear.ArrayRealVector",
        "signature": "org.apache.commons.math.linear.ArrayRealVector.getData()",
        "snippet": "    public double[] getData() {\n        return data.clone();\n    }\n",
        "begin_line": 853,
        "end_line": 855,
        "comment": " {@inheritDoc} ",
        "resolved_comments": {
            "org.apache.commons.math.linear.RealVector": "\n     * Returns vector entries as a double array.\n     * @return double array of entries\n     ",
            "java.io.Serializable": null
        },
        "susp": {
            "ochiai_susp": 0.2425
        },
        "num_failing_tests": 1
    },
    {
        "name": "ArrayRealVector.getDimension#1156",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math/linear/ArrayRealVector.java",
        "class_name": "org.apache.commons.math.linear.ArrayRealVector",
        "signature": "org.apache.commons.math.linear.ArrayRealVector.getDimension()",
        "snippet": "    public int getDimension() {\n        return data.length;\n    }\n",
        "begin_line": 1156,
        "end_line": 1158,
        "comment": " {@inheritDoc} ",
        "resolved_comments": {
            "org.apache.commons.math.linear.RealVector": "\n     * Returns the size of the vector.\n     * @return size\n     ",
            "java.io.Serializable": null
        },
        "susp": {
            "ochiai_susp": 0.2425
        },
        "num_failing_tests": 1
    },
    {
        "name": "Array2DRowRealMatrix.Array2DRowRealMatrix#93",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java",
        "class_name": "org.apache.commons.math.linear.Array2DRowRealMatrix",
        "signature": "org.apache.commons.math.linear.Array2DRowRealMatrix.Array2DRowRealMatrix(double[][])",
        "snippet": "    public Array2DRowRealMatrix(final double[][] d)\n        throws IllegalArgumentException, NullPointerException {\n        copyIn(d);\n    }\n",
        "begin_line": 93,
        "end_line": 96,
        "comment": "\n     * Create a new RealMatrix using the input array as the underlying\n     * data array.\n     * <p>The input array is copied, not referenced. This constructor has\n     * the same effect as calling {@link #Array2DRowRealMatrix(double[][], boolean)}\n     * with the second argument set to <code>true</code>.</p>\n     *\n     * @param d data for new matrix\n     * @throws IllegalArgumentException if <code>d</code> is not rectangular\n     *  (not all rows have the same length) or empty\n     * @throws NullPointerException if <code>d</code> is null\n     * @see #Array2DRowRealMatrix(double[][], boolean)\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2425
        },
        "num_failing_tests": 1
    },
    {
        "name": "Array2DRowRealMatrix.setSubMatrix#311",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java",
        "class_name": "org.apache.commons.math.linear.Array2DRowRealMatrix",
        "signature": "org.apache.commons.math.linear.Array2DRowRealMatrix.setSubMatrix(double[][], int, int)",
        "snippet": "    @Override\n    public void setSubMatrix(final double[][] subMatrix, final int row, final int column) \n    throws MatrixIndexException {\n        if (data == null) {\n            if (row > 0) {\n                throw MathRuntimeException.createIllegalStateException(\n                        \"first {0} rows are not initialized yet\",\n                        row);\n            }\n            if (column > 0) {\n                throw MathRuntimeException.createIllegalStateException(\n                        \"first {0} columns are not initialized yet\",\n                        column);\n            }\n            final int nRows = subMatrix.length;\n            if (nRows == 0) {\n                throw MathRuntimeException.createIllegalArgumentException(\"matrix must have at least one row\"); \n            }\n\n            final int nCols = subMatrix[0].length;\n            if (nCols == 0) {\n                throw MathRuntimeException.createIllegalArgumentException(\"matrix must have at least one column\"); \n            }\n            data = new double[subMatrix.length][nCols];\n            for (int i = 0; i < data.length; ++i) {\n                if (subMatrix[i].length != nCols) {\n                    throw MathRuntimeException.createIllegalArgumentException(\n                            \"some rows have length {0} while others have length {1}\",\n                            nCols, subMatrix[i].length); \n                }\n                System.arraycopy(subMatrix[i], 0, data[i + row], column, nCols);\n            }\n        } else {\n            super.setSubMatrix(subMatrix, row, column);\n        }\n\n    }\n",
        "begin_line": 311,
        "end_line": 347,
        "comment": " {@inheritDoc} ",
        "resolved_comments": {
            "org.apache.commons.math.linear.AbstractRealMatrix": " {@inheritDoc} ",
            "java.io.Serializable": null,
            "org.apache.commons.math.linear.RealMatrix": "\n    * Replace the submatrix starting at <code>row, column</code> using data in\n    * the input <code>subMatrix</code> array. Indexes are 0-based.\n    * <p> \n    * Example:<br>\n    * Starting with <pre>\n    * 1  2  3  4\n    * 5  6  7  8\n    * 9  0  1  2\n    * </pre>\n    * and <code>subMatrix = {{3, 4} {5,6}}</code>, invoking \n    * <code>setSubMatrix(subMatrix,1,1))</code> will result in <pre>\n    * 1  2  3  4\n    * 5  3  4  8\n    * 9  5  6  2\n    * </pre></p>\n    * \n    * @param subMatrix  array containing the submatrix replacement data\n    * @param row  row coordinate of the top, left element to be replaced\n    * @param column  column coordinate of the top, left element to be replaced\n    * @throws MatrixIndexException  if subMatrix does not fit into this \n    *    matrix from element in (row, column) \n    * @throws IllegalArgumentException if <code>subMatrix</code> is not rectangular\n    *  (not all rows have the same length) or empty\n    * @throws NullPointerException if <code>subMatrix</code> is null\n    * @since 2.0\n    "
        },
        "susp": {
            "ochiai_susp": 0.2425
        },
        "num_failing_tests": 1
    },
    {
        "name": "Array2DRowRealMatrix.getRowDimension#402",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java",
        "class_name": "org.apache.commons.math.linear.Array2DRowRealMatrix",
        "signature": "org.apache.commons.math.linear.Array2DRowRealMatrix.getRowDimension()",
        "snippet": "    @Override\n    public int getRowDimension() {\n        return (data == null) ? 0 : data.length;\n    }\n",
        "begin_line": 402,
        "end_line": 405,
        "comment": " {@inheritDoc} ",
        "resolved_comments": {
            "org.apache.commons.math.linear.AbstractRealMatrix": " {@inheritDoc} ",
            "java.io.Serializable": null,
            "org.apache.commons.math.linear.RealMatrix": null,
            "org.apache.commons.math.linear.AnyMatrix": "\n     * Returns the number of rows in the matrix.\n     *\n     * @return rowDimension\n     "
        },
        "susp": {
            "ochiai_susp": 0.2425
        },
        "num_failing_tests": 1
    },
    {
        "name": "Array2DRowRealMatrix.getColumnDimension#408",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java",
        "class_name": "org.apache.commons.math.linear.Array2DRowRealMatrix",
        "signature": "org.apache.commons.math.linear.Array2DRowRealMatrix.getColumnDimension()",
        "snippet": "    @Override\n    public int getColumnDimension() {\n        return ((data == null) || (data[0] == null)) ? 0 : data[0].length;\n    }\n",
        "begin_line": 408,
        "end_line": 411,
        "comment": " {@inheritDoc} ",
        "resolved_comments": {
            "org.apache.commons.math.linear.AbstractRealMatrix": " {@inheritDoc} ",
            "java.io.Serializable": null,
            "org.apache.commons.math.linear.RealMatrix": null,
            "org.apache.commons.math.linear.AnyMatrix": "\n     * Returns the number of columns in the matrix.\n     *\n     * @return columnDimension\n     "
        },
        "susp": {
            "ochiai_susp": 0.2425
        },
        "num_failing_tests": 1
    },
    {
        "name": "Array2DRowRealMatrix.copyIn#621",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java",
        "class_name": "org.apache.commons.math.linear.Array2DRowRealMatrix",
        "signature": "org.apache.commons.math.linear.Array2DRowRealMatrix.copyIn(double[][])",
        "snippet": "    private void copyIn(final double[][] in) {\n        setSubMatrix(in, 0, 0);\n    }\n",
        "begin_line": 621,
        "end_line": 623,
        "comment": "\n     * Replaces data with a fresh copy of the input array.\n     * <p>\n     * Verifies that the input array is rectangular and non-empty.</p>\n     *\n     * @param in data to copy in\n     * @throws IllegalArgumentException if input array is empty or not\n     *    rectangular\n     * @throws NullPointerException if input array is null\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2425
        },
        "num_failing_tests": 1
    },
    {
        "name": "AbstractRealMatrix.AbstractRealMatrix#43",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java",
        "class_name": "org.apache.commons.math.linear.AbstractRealMatrix",
        "signature": "org.apache.commons.math.linear.AbstractRealMatrix.AbstractRealMatrix()",
        "snippet": "    protected AbstractRealMatrix() {\n        lu = null;\n    }\n",
        "begin_line": 43,
        "end_line": 45,
        "comment": "\n     * Creates a matrix with no data\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2425
        },
        "num_failing_tests": 1
    }
]