[
    {
        "class_name": "org.apache.commons.math.optimization.linear.SimplexSolverTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java",
        "signature": "org.apache.commons.math.optimization.linear.SimplexSolverTest.testMath272()",
        "snippet": "    @Test\n    public void testMath272() throws OptimizationException {\n        LinearObjectiveFunction f = new LinearObjectiveFunction(new double[] { 2, 2, 1 }, 0);\n        Collection<LinearConstraint> constraints = new ArrayList<LinearConstraint>();\n        constraints.add(new LinearConstraint(new double[] { 1, 1, 0 }, Relationship.GEQ,  1));\n        constraints.add(new LinearConstraint(new double[] { 1, 0, 1 }, Relationship.GEQ,  1));\n        constraints.add(new LinearConstraint(new double[] { 0, 1, 0 }, Relationship.GEQ,  1));\n\n        SimplexSolver solver = new SimplexSolver();\n        RealPointValuePair solution = solver.optimize(f, constraints, GoalType.MINIMIZE, true);\n        \n        assertEquals(0.0, solution.getPoint()[0], .0000001);\n        assertEquals(1.0, solution.getPoint()[1], .0000001);\n        assertEquals(1.0, solution.getPoint()[2], .0000001);\n        assertEquals(3.0, solution.getValue(), .0000001);\n    }\n",
        "begin_line": 34,
        "end_line": 49,
        "comment": "",
        "child_ranges": [
            "(line 36,col 9)-(line 36,col 93)",
            "(line 37,col 9)-(line 37,col 85)",
            "(line 38,col 9)-(line 38,col 94)",
            "(line 39,col 9)-(line 39,col 94)",
            "(line 40,col 9)-(line 40,col 94)",
            "(line 42,col 9)-(line 42,col 51)",
            "(line 43,col 9)-(line 43,col 95)",
            "(line 45,col 9)-(line 45,col 60)",
            "(line 46,col 9)-(line 46,col 60)",
            "(line 47,col 9)-(line 47,col 60)",
            "(line 48,col 9)-(line 48,col 57)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.optimization.linear.SimplexSolverTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java",
        "signature": "org.apache.commons.math.optimization.linear.SimplexSolverTest.testMath286()",
        "snippet": "    @Test\n    public void testMath286() throws OptimizationException {\n      LinearObjectiveFunction f = new LinearObjectiveFunction(new double[] { 0.2, 0.3 }, 0 );\n      Collection<LinearConstraint> constraints = new ArrayList<LinearConstraint>();\n      constraints.add(new LinearConstraint(new double[] { 1, 1 }, Relationship.EQ, 23.0));\n\n      RealPointValuePair solution = new SimplexSolver().optimize(f, constraints, GoalType.MAXIMIZE, true);\n      assertEquals(6.9, solution.getValue(), .0000001);\n    }\n",
        "begin_line": 51,
        "end_line": 59,
        "comment": "",
        "child_ranges": [
            "(line 53,col 7)-(line 53,col 93)",
            "(line 54,col 7)-(line 54,col 83)",
            "(line 55,col 7)-(line 55,col 90)",
            "(line 57,col 7)-(line 57,col 106)",
            "(line 58,col 7)-(line 58,col 55)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.optimization.linear.SimplexSolverTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java",
        "signature": "org.apache.commons.math.optimization.linear.SimplexSolverTest.testSimplexSolver()",
        "snippet": "    @Test\n    public void testSimplexSolver() throws OptimizationException {\n        LinearObjectiveFunction f =\n            new LinearObjectiveFunction(new double[] { 15, 10 }, 7);\n        Collection<LinearConstraint> constraints = new ArrayList<LinearConstraint>();\n        constraints.add(new LinearConstraint(new double[] { 1, 0 }, Relationship.LEQ, 2));\n        constraints.add(new LinearConstraint(new double[] { 0, 1 }, Relationship.LEQ, 3));\n        constraints.add(new LinearConstraint(new double[] { 1, 1 }, Relationship.EQ, 4));\n\n        SimplexSolver solver = new SimplexSolver();\n        RealPointValuePair solution = solver.optimize(f, constraints, GoalType.MAXIMIZE, false);\n        assertEquals(2.0, solution.getPoint()[0], 0.0);\n        assertEquals(2.0, solution.getPoint()[1], 0.0);\n        assertEquals(57.0, solution.getValue(), 0.0);\n    }\n",
        "begin_line": 61,
        "end_line": 75,
        "comment": "",
        "child_ranges": [
            "(line 63,col 9)-(line 64,col 68)",
            "(line 65,col 9)-(line 65,col 85)",
            "(line 66,col 9)-(line 66,col 90)",
            "(line 67,col 9)-(line 67,col 90)",
            "(line 68,col 9)-(line 68,col 89)",
            "(line 70,col 9)-(line 70,col 51)",
            "(line 71,col 9)-(line 71,col 96)",
            "(line 72,col 9)-(line 72,col 55)",
            "(line 73,col 9)-(line 73,col 55)",
            "(line 74,col 9)-(line 74,col 53)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.optimization.linear.SimplexSolverTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java",
        "signature": "org.apache.commons.math.optimization.linear.SimplexSolverTest.testSingleVariableAndConstraint()",
        "snippet": "    @Test\n    public void testSingleVariableAndConstraint() throws OptimizationException {\n        LinearObjectiveFunction f = new LinearObjectiveFunction(new double[] { 3 }, 0);\n        Collection<LinearConstraint> constraints = new ArrayList<LinearConstraint>();\n        constraints.add(new LinearConstraint(new double[] { 1 }, Relationship.LEQ, 10));\n\n        SimplexSolver solver = new SimplexSolver();\n        RealPointValuePair solution = solver.optimize(f, constraints, GoalType.MAXIMIZE, false);\n        assertEquals(10.0, solution.getPoint()[0], 0.0);\n        assertEquals(30.0, solution.getValue(), 0.0);\n    }\n",
        "begin_line": 77,
        "end_line": 87,
        "comment": "",
        "child_ranges": [
            "(line 79,col 9)-(line 79,col 87)",
            "(line 80,col 9)-(line 80,col 85)",
            "(line 81,col 9)-(line 81,col 88)",
            "(line 83,col 9)-(line 83,col 51)",
            "(line 84,col 9)-(line 84,col 96)",
            "(line 85,col 9)-(line 85,col 56)",
            "(line 86,col 9)-(line 86,col 53)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.optimization.linear.SimplexSolverTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java",
        "signature": "org.apache.commons.math.optimization.linear.SimplexSolverTest.testModelWithNoArtificialVars()",
        "snippet": "    @Test\n    public void testModelWithNoArtificialVars() throws OptimizationException {\n        LinearObjectiveFunction f = new LinearObjectiveFunction(new double[] { 15, 10 }, 0);\n        Collection<LinearConstraint> constraints = new ArrayList<LinearConstraint>();\n        constraints.add(new LinearConstraint(new double[] { 1, 0 }, Relationship.LEQ, 2));\n        constraints.add(new LinearConstraint(new double[] { 0, 1 }, Relationship.LEQ, 3));\n        constraints.add(new LinearConstraint(new double[] { 1, 1 }, Relationship.LEQ, 4));\n\n        SimplexSolver solver = new SimplexSolver();\n        RealPointValuePair solution = solver.optimize(f, constraints, GoalType.MAXIMIZE, false);\n        assertEquals(2.0, solution.getPoint()[0], 0.0);\n        assertEquals(2.0, solution.getPoint()[1], 0.0);\n        assertEquals(50.0, solution.getValue(), 0.0);\n    }\n",
        "begin_line": 93,
        "end_line": 106,
        "comment": "\n     * With no artificial variables needed (no equals and no greater than\n     * constraints) we can go straight to Phase 2.\n     ",
        "child_ranges": [
            "(line 95,col 9)-(line 95,col 92)",
            "(line 96,col 9)-(line 96,col 85)",
            "(line 97,col 9)-(line 97,col 90)",
            "(line 98,col 9)-(line 98,col 90)",
            "(line 99,col 9)-(line 99,col 90)",
            "(line 101,col 9)-(line 101,col 51)",
            "(line 102,col 9)-(line 102,col 96)",
            "(line 103,col 9)-(line 103,col 55)",
            "(line 104,col 9)-(line 104,col 55)",
            "(line 105,col 9)-(line 105,col 53)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.optimization.linear.SimplexSolverTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java",
        "signature": "org.apache.commons.math.optimization.linear.SimplexSolverTest.testMinimization()",
        "snippet": "    @Test\n    public void testMinimization() throws OptimizationException {\n        LinearObjectiveFunction f = new LinearObjectiveFunction(new double[] { -2, 1 }, -5);\n        Collection<LinearConstraint> constraints = new ArrayList<LinearConstraint>();\n        constraints.add(new LinearConstraint(new double[] { 1, 2 }, Relationship.LEQ, 6));\n        constraints.add(new LinearConstraint(new double[] { 3, 2 }, Relationship.LEQ, 12));\n        constraints.add(new LinearConstraint(new double[] { 0, 1 }, Relationship.GEQ, 0));\n\n        SimplexSolver solver = new SimplexSolver();\n        RealPointValuePair solution = solver.optimize(f, constraints, GoalType.MINIMIZE, false);\n        assertEquals(4.0, solution.getPoint()[0], 0.0);\n        assertEquals(0.0, solution.getPoint()[1], 0.0);\n        assertEquals(-13.0, solution.getValue(), 0.0);\n    }\n",
        "begin_line": 108,
        "end_line": 121,
        "comment": "",
        "child_ranges": [
            "(line 110,col 9)-(line 110,col 92)",
            "(line 111,col 9)-(line 111,col 85)",
            "(line 112,col 9)-(line 112,col 90)",
            "(line 113,col 9)-(line 113,col 91)",
            "(line 114,col 9)-(line 114,col 90)",
            "(line 116,col 9)-(line 116,col 51)",
            "(line 117,col 9)-(line 117,col 96)",
            "(line 118,col 9)-(line 118,col 55)",
            "(line 119,col 9)-(line 119,col 55)",
            "(line 120,col 9)-(line 120,col 54)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.optimization.linear.SimplexSolverTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java",
        "signature": "org.apache.commons.math.optimization.linear.SimplexSolverTest.testSolutionWithNegativeDecisionVariable()",
        "snippet": "    @Test\n    public void testSolutionWithNegativeDecisionVariable() throws OptimizationException {\n        LinearObjectiveFunction f = new LinearObjectiveFunction(new double[] { -2, 1 }, 0);\n        Collection<LinearConstraint> constraints = new ArrayList<LinearConstraint>();\n        constraints.add(new LinearConstraint(new double[] { 1, 1 }, Relationship.GEQ, 6));\n        constraints.add(new LinearConstraint(new double[] { 1, 2 }, Relationship.LEQ, 14));\n\n        SimplexSolver solver = new SimplexSolver();\n        RealPointValuePair solution = solver.optimize(f, constraints, GoalType.MAXIMIZE, false);\n        assertEquals(-2.0, solution.getPoint()[0], 0.0);\n        assertEquals(8.0, solution.getPoint()[1], 0.0);\n        assertEquals(12.0, solution.getValue(), 0.0);\n    }\n",
        "begin_line": 123,
        "end_line": 135,
        "comment": "",
        "child_ranges": [
            "(line 125,col 9)-(line 125,col 91)",
            "(line 126,col 9)-(line 126,col 85)",
            "(line 127,col 9)-(line 127,col 90)",
            "(line 128,col 9)-(line 128,col 91)",
            "(line 130,col 9)-(line 130,col 51)",
            "(line 131,col 9)-(line 131,col 96)",
            "(line 132,col 9)-(line 132,col 56)",
            "(line 133,col 9)-(line 133,col 55)",
            "(line 134,col 9)-(line 134,col 53)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.optimization.linear.SimplexSolverTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java",
        "signature": "org.apache.commons.math.optimization.linear.SimplexSolverTest.testInfeasibleSolution()",
        "snippet": "    @Test(expected = NoFeasibleSolutionException.class)\n    public void testInfeasibleSolution() throws OptimizationException {\n        LinearObjectiveFunction f = new LinearObjectiveFunction(new double[] { 15 }, 0);\n        Collection<LinearConstraint> constraints = new ArrayList<LinearConstraint>();\n        constraints.add(new LinearConstraint(new double[] { 1 }, Relationship.LEQ, 1));\n        constraints.add(new LinearConstraint(new double[] { 1 }, Relationship.GEQ, 3));\n\n        SimplexSolver solver = new SimplexSolver();\n        solver.optimize(f, constraints, GoalType.MAXIMIZE, false);\n    }\n",
        "begin_line": 137,
        "end_line": 146,
        "comment": "",
        "child_ranges": [
            "(line 139,col 9)-(line 139,col 88)",
            "(line 140,col 9)-(line 140,col 85)",
            "(line 141,col 9)-(line 141,col 87)",
            "(line 142,col 9)-(line 142,col 87)",
            "(line 144,col 9)-(line 144,col 51)",
            "(line 145,col 9)-(line 145,col 66)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.optimization.linear.SimplexSolverTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java",
        "signature": "org.apache.commons.math.optimization.linear.SimplexSolverTest.testUnboundedSolution()",
        "snippet": "    @Test(expected = UnboundedSolutionException.class)\n    public void testUnboundedSolution() throws OptimizationException {\n        LinearObjectiveFunction f = new LinearObjectiveFunction(new double[] { 15, 10 }, 0);\n        Collection<LinearConstraint> constraints = new ArrayList<LinearConstraint>();\n        constraints.add(new LinearConstraint(new double[] { 1, 0 }, Relationship.EQ, 2));\n\n        SimplexSolver solver = new SimplexSolver();\n        solver.optimize(f, constraints, GoalType.MAXIMIZE, false);\n    }\n",
        "begin_line": 148,
        "end_line": 156,
        "comment": "",
        "child_ranges": [
            "(line 150,col 9)-(line 150,col 92)",
            "(line 151,col 9)-(line 151,col 85)",
            "(line 152,col 9)-(line 152,col 89)",
            "(line 154,col 9)-(line 154,col 51)",
            "(line 155,col 9)-(line 155,col 66)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.optimization.linear.SimplexSolverTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java",
        "signature": "org.apache.commons.math.optimization.linear.SimplexSolverTest.testRestrictVariablesToNonNegative()",
        "snippet": "    @Test\n    public void testRestrictVariablesToNonNegative() throws OptimizationException {\n        LinearObjectiveFunction f = new LinearObjectiveFunction(new double[] { 409, 523, 70, 204, 339 }, 0);\n        Collection<LinearConstraint> constraints = new ArrayList<LinearConstraint>();\n        constraints.add(new LinearConstraint(new double[] {    43,   56, 345,  56,    5 }, Relationship.LEQ,  4567456));\n        constraints.add(new LinearConstraint(new double[] {    12,   45,   7,  56,   23 }, Relationship.LEQ,    56454));\n        constraints.add(new LinearConstraint(new double[] {     8,  768,   0,  34, 7456 }, Relationship.LEQ,  1923421));\n        constraints.add(new LinearConstraint(new double[] { 12342, 2342,  34, 678, 2342 }, Relationship.GEQ,     4356));\n        constraints.add(new LinearConstraint(new double[] {    45,  678,  76,  52,   23 }, Relationship.EQ,    456356));\n\n        SimplexSolver solver = new SimplexSolver();\n        RealPointValuePair solution = solver.optimize(f, constraints, GoalType.MAXIMIZE, true);\n        assertEquals(2902.92783505155, solution.getPoint()[0], .0000001);\n        assertEquals(480.419243986254, solution.getPoint()[1], .0000001);\n        assertEquals(0.0, solution.getPoint()[2], .0000001);\n        assertEquals(0.0, solution.getPoint()[3], .0000001);\n        assertEquals(0.0, solution.getPoint()[4], .0000001);\n        assertEquals(1438556.7491409, solution.getValue(), .0000001);\n    }\n",
        "begin_line": 158,
        "end_line": 176,
        "comment": "",
        "child_ranges": [
            "(line 160,col 9)-(line 160,col 108)",
            "(line 161,col 9)-(line 161,col 85)",
            "(line 162,col 9)-(line 162,col 120)",
            "(line 163,col 9)-(line 163,col 120)",
            "(line 164,col 9)-(line 164,col 120)",
            "(line 165,col 9)-(line 165,col 120)",
            "(line 166,col 9)-(line 166,col 120)",
            "(line 168,col 9)-(line 168,col 51)",
            "(line 169,col 9)-(line 169,col 95)",
            "(line 170,col 9)-(line 170,col 73)",
            "(line 171,col 9)-(line 171,col 73)",
            "(line 172,col 9)-(line 172,col 60)",
            "(line 173,col 9)-(line 173,col 60)",
            "(line 174,col 9)-(line 174,col 60)",
            "(line 175,col 9)-(line 175,col 69)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.optimization.linear.SimplexSolverTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java",
        "signature": "org.apache.commons.math.optimization.linear.SimplexSolverTest.testEpsilon()",
        "snippet": "    @Test\n    public void testEpsilon() throws OptimizationException {\n      LinearObjectiveFunction f =\n          new LinearObjectiveFunction(new double[] { 10, 5, 1 }, 0);\n      Collection<LinearConstraint> constraints = new ArrayList<LinearConstraint>();\n      constraints.add(new LinearConstraint(new double[] {  9, 8, 0 }, Relationship.EQ,  17));\n      constraints.add(new LinearConstraint(new double[] {  0, 7, 8 }, Relationship.LEQ,  7));\n      constraints.add(new LinearConstraint(new double[] { 10, 0, 2 }, Relationship.LEQ, 10));\n\n      SimplexSolver solver = new SimplexSolver();\n      RealPointValuePair solution = solver.optimize(f, constraints, GoalType.MAXIMIZE, false);\n      assertEquals(1.0, solution.getPoint()[0], 0.0);\n      assertEquals(1.0, solution.getPoint()[1], 0.0);\n      assertEquals(0.0, solution.getPoint()[2], 0.0);\n      assertEquals(15.0, solution.getValue(), 0.0);\n  }\n",
        "begin_line": 178,
        "end_line": 193,
        "comment": "",
        "child_ranges": [
            "(line 180,col 7)-(line 181,col 68)",
            "(line 182,col 7)-(line 182,col 83)",
            "(line 183,col 7)-(line 183,col 93)",
            "(line 184,col 7)-(line 184,col 93)",
            "(line 185,col 7)-(line 185,col 93)",
            "(line 187,col 7)-(line 187,col 49)",
            "(line 188,col 7)-(line 188,col 94)",
            "(line 189,col 7)-(line 189,col 53)",
            "(line 190,col 7)-(line 190,col 53)",
            "(line 191,col 7)-(line 191,col 53)",
            "(line 192,col 7)-(line 192,col 51)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.optimization.linear.SimplexSolverTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java",
        "signature": "org.apache.commons.math.optimization.linear.SimplexSolverTest.testTrivialModel()",
        "snippet": "    @Test\n    public void testTrivialModel() throws OptimizationException {\n        LinearObjectiveFunction f = new LinearObjectiveFunction(new double[] { 1, 1 }, 0);\n        Collection<LinearConstraint> constraints = new ArrayList<LinearConstraint>();\n        constraints.add(new LinearConstraint(new double[] { 1, 1 }, Relationship.EQ,  0));\n\n        SimplexSolver solver = new SimplexSolver();\n        RealPointValuePair solution = solver.optimize(f, constraints, GoalType.MAXIMIZE, true);\n        assertEquals(0, solution.getValue(), .0000001);\n    }\n",
        "begin_line": 195,
        "end_line": 204,
        "comment": "",
        "child_ranges": [
            "(line 197,col 9)-(line 197,col 90)",
            "(line 198,col 9)-(line 198,col 85)",
            "(line 199,col 9)-(line 199,col 90)",
            "(line 201,col 9)-(line 201,col 51)",
            "(line 202,col 9)-(line 202,col 95)",
            "(line 203,col 9)-(line 203,col 55)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.optimization.linear.SimplexSolverTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java",
        "signature": "org.apache.commons.math.optimization.linear.SimplexSolverTest.testLargeModel()",
        "snippet": "    @Test\n    public void testLargeModel() throws OptimizationException {\n        double[] objective = new double[] {\n                                           1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n                                           1, 1, 12, 1, 1, 1, 1, 1, 1, 1,\n                                           1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n                                           1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n                                           12, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n                                           1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n                                           1, 1, 1, 1, 1, 1, 1, 1, 12, 1,\n                                           1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n                                           1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n                                           1, 1, 1, 1, 1, 1, 12, 1, 1, 1,\n                                           1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n                                           1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n                                           1, 1, 1, 1, 12, 1, 1, 1, 1, 1,\n                                           1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n                                           1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n                                           1, 1, 12, 1, 1, 1, 1, 1, 1, 1,\n                                           1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n                                           1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n                                           1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n                                           1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n                                           1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n                                           1, 1, 1, 1, 1, 1};\n\n        LinearObjectiveFunction f = new LinearObjectiveFunction(objective, 0);\n        Collection<LinearConstraint> constraints = new ArrayList<LinearConstraint>();\n        constraints.add(equationFromString(objective.length, \"x0 + x1 + x2 + x3 - x12 = 0\"));\n        constraints.add(equationFromString(objective.length, \"x4 + x5 + x6 + x7 + x8 + x9 + x10 + x11 - x13 = 0\"));\n        constraints.add(equationFromString(objective.length, \"x4 + x5 + x6 + x7 + x8 + x9 + x10 + x11 >= 49\"));\n        constraints.add(equationFromString(objective.length, \"x0 + x1 + x2 + x3 >= 42\"));\n        constraints.add(equationFromString(objective.length, \"x14 + x15 + x16 + x17 - x26 = 0\"));\n        constraints.add(equationFromString(objective.length, \"x18 + x19 + x20 + x21 + x22 + x23 + x24 + x25 - x27 = 0\"));\n        constraints.add(equationFromString(objective.length, \"x14 + x15 + x16 + x17 - x12 = 0\"));\n        constraints.add(equationFromString(objective.length, \"x18 + x19 + x20 + x21 + x22 + x23 + x24 + x25 - x13 = 0\"));\n        constraints.add(equationFromString(objective.length, \"x28 + x29 + x30 + x31 - x40 = 0\"));\n        constraints.add(equationFromString(objective.length, \"x32 + x33 + x34 + x35 + x36 + x37 + x38 + x39 - x41 = 0\"));\n        constraints.add(equationFromString(objective.length, \"x32 + x33 + x34 + x35 + x36 + x37 + x38 + x39 >= 49\"));\n        constraints.add(equationFromString(objective.length, \"x28 + x29 + x30 + x31 >= 42\"));\n        constraints.add(equationFromString(objective.length, \"x42 + x43 + x44 + x45 - x54 = 0\"));\n        constraints.add(equationFromString(objective.length, \"x46 + x47 + x48 + x49 + x50 + x51 + x52 + x53 - x55 = 0\"));\n        constraints.add(equationFromString(objective.length, \"x42 + x43 + x44 + x45 - x40 = 0\"));\n        constraints.add(equationFromString(objective.length, \"x46 + x47 + x48 + x49 + x50 + x51 + x52 + x53 - x41 = 0\"));\n        constraints.add(equationFromString(objective.length, \"x56 + x57 + x58 + x59 - x68 = 0\"));\n        constraints.add(equationFromString(objective.length, \"x60 + x61 + x62 + x63 + x64 + x65 + x66 + x67 - x69 = 0\"));\n        constraints.add(equationFromString(objective.length, \"x60 + x61 + x62 + x63 + x64 + x65 + x66 + x67 >= 51\"));\n        constraints.add(equationFromString(objective.length, \"x56 + x57 + x58 + x59 >= 44\"));\n        constraints.add(equationFromString(objective.length, \"x70 + x71 + x72 + x73 - x82 = 0\"));\n        constraints.add(equationFromString(objective.length, \"x74 + x75 + x76 + x77 + x78 + x79 + x80 + x81 - x83 = 0\"));\n        constraints.add(equationFromString(objective.length, \"x70 + x71 + x72 + x73 - x68 = 0\"));\n        constraints.add(equationFromString(objective.length, \"x74 + x75 + x76 + x77 + x78 + x79 + x80 + x81 - x69 = 0\"));\n        constraints.add(equationFromString(objective.length, \"x84 + x85 + x86 + x87 - x96 = 0\"));\n        constraints.add(equationFromString(objective.length, \"x88 + x89 + x90 + x91 + x92 + x93 + x94 + x95 - x97 = 0\"));\n        constraints.add(equationFromString(objective.length, \"x88 + x89 + x90 + x91 + x92 + x93 + x94 + x95 >= 51\"));\n        constraints.add(equationFromString(objective.length, \"x84 + x85 + x86 + x87 >= 44\"));\n        constraints.add(equationFromString(objective.length, \"x98 + x99 + x100 + x101 - x110 = 0\"));\n        constraints.add(equationFromString(objective.length, \"x102 + x103 + x104 + x105 + x106 + x107 + x108 + x109 - x111 = 0\"));\n        constraints.add(equationFromString(objective.length, \"x98 + x99 + x100 + x101 - x96 = 0\"));\n        constraints.add(equationFromString(objective.length, \"x102 + x103 + x104 + x105 + x106 + x107 + x108 + x109 - x97 = 0\"));\n        constraints.add(equationFromString(objective.length, \"x112 + x113 + x114 + x115 - x124 = 0\"));\n        constraints.add(equationFromString(objective.length, \"x116 + x117 + x118 + x119 + x120 + x121 + x122 + x123 - x125 = 0\"));\n        constraints.add(equationFromString(objective.length, \"x116 + x117 + x118 + x119 + x120 + x121 + x122 + x123 >= 49\"));\n        constraints.add(equationFromString(objective.length, \"x112 + x113 + x114 + x115 >= 42\"));\n        constraints.add(equationFromString(objective.length, \"x126 + x127 + x128 + x129 - x138 = 0\"));\n        constraints.add(equationFromString(objective.length, \"x130 + x131 + x132 + x133 + x134 + x135 + x136 + x137 - x139 = 0\"));\n        constraints.add(equationFromString(objective.length, \"x126 + x127 + x128 + x129 - x124 = 0\"));\n        constraints.add(equationFromString(objective.length, \"x130 + x131 + x132 + x133 + x134 + x135 + x136 + x137 - x125 = 0\"));\n        constraints.add(equationFromString(objective.length, \"x140 + x141 + x142 + x143 - x152 = 0\"));\n        constraints.add(equationFromString(objective.length, \"x144 + x145 + x146 + x147 + x148 + x149 + x150 + x151 - x153 = 0\"));\n        constraints.add(equationFromString(objective.length, \"x144 + x145 + x146 + x147 + x148 + x149 + x150 + x151 >= 59\"));\n        constraints.add(equationFromString(objective.length, \"x140 + x141 + x142 + x143 >= 42\"));\n        constraints.add(equationFromString(objective.length, \"x154 + x155 + x156 + x157 - x166 = 0\"));\n        constraints.add(equationFromString(objective.length, \"x158 + x159 + x160 + x161 + x162 + x163 + x164 + x165 - x167 = 0\"));\n        constraints.add(equationFromString(objective.length, \"x154 + x155 + x156 + x157 - x152 = 0\"));\n        constraints.add(equationFromString(objective.length, \"x158 + x159 + x160 + x161 + x162 + x163 + x164 + x165 - x153 = 0\"));\n        constraints.add(equationFromString(objective.length, \"x83 + x82 - x168 = 0\"));\n        constraints.add(equationFromString(objective.length, \"x111 + x110 - x169 = 0\"));\n        constraints.add(equationFromString(objective.length, \"x170 - x182 = 0\"));\n        constraints.add(equationFromString(objective.length, \"x171 - x183 = 0\"));\n        constraints.add(equationFromString(objective.length, \"x172 - x184 = 0\"));\n        constraints.add(equationFromString(objective.length, \"x173 - x185 = 0\"));\n        constraints.add(equationFromString(objective.length, \"x174 - x186 = 0\"));\n        constraints.add(equationFromString(objective.length, \"x175 + x176 - x187 = 0\"));\n        constraints.add(equationFromString(objective.length, \"x177 - x188 = 0\"));\n        constraints.add(equationFromString(objective.length, \"x178 - x189 = 0\"));\n        constraints.add(equationFromString(objective.length, \"x179 - x190 = 0\"));\n        constraints.add(equationFromString(objective.length, \"x180 - x191 = 0\"));\n        constraints.add(equationFromString(objective.length, \"x181 - x192 = 0\"));\n        constraints.add(equationFromString(objective.length, \"x170 - x26 = 0\"));\n        constraints.add(equationFromString(objective.length, \"x171 - x27 = 0\"));\n        constraints.add(equationFromString(objective.length, \"x172 - x54 = 0\"));\n        constraints.add(equationFromString(objective.length, \"x173 - x55 = 0\"));\n        constraints.add(equationFromString(objective.length, \"x174 - x168 = 0\"));\n        constraints.add(equationFromString(objective.length, \"x177 - x169 = 0\"));\n        constraints.add(equationFromString(objective.length, \"x178 - x138 = 0\"));\n        constraints.add(equationFromString(objective.length, \"x179 - x139 = 0\"));\n        constraints.add(equationFromString(objective.length, \"x180 - x166 = 0\"));\n        constraints.add(equationFromString(objective.length, \"x181 - x167 = 0\"));\n        constraints.add(equationFromString(objective.length, \"x193 - x205 = 0\"));\n        constraints.add(equationFromString(objective.length, \"x194 - x206 = 0\"));\n        constraints.add(equationFromString(objective.length, \"x195 - x207 = 0\"));\n        constraints.add(equationFromString(objective.length, \"x196 - x208 = 0\"));\n        constraints.add(equationFromString(objective.length, \"x197 - x209 = 0\"));\n        constraints.add(equationFromString(objective.length, \"x198 + x199 - x210 = 0\"));\n        constraints.add(equationFromString(objective.length, \"x200 - x211 = 0\"));\n        constraints.add(equationFromString(objective.length, \"x201 - x212 = 0\"));\n        constraints.add(equationFromString(objective.length, \"x202 - x213 = 0\"));\n        constraints.add(equationFromString(objective.length, \"x203 - x214 = 0\"));\n        constraints.add(equationFromString(objective.length, \"x204 - x215 = 0\"));\n        constraints.add(equationFromString(objective.length, \"x193 - x182 = 0\"));\n        constraints.add(equationFromString(objective.length, \"x194 - x183 = 0\"));\n        constraints.add(equationFromString(objective.length, \"x195 - x184 = 0\"));\n        constraints.add(equationFromString(objective.length, \"x196 - x185 = 0\"));\n        constraints.add(equationFromString(objective.length, \"x197 - x186 = 0\"));\n        constraints.add(equationFromString(objective.length, \"x198 + x199 - x187 = 0\"));\n        constraints.add(equationFromString(objective.length, \"x200 - x188 = 0\"));\n        constraints.add(equationFromString(objective.length, \"x201 - x189 = 0\"));\n        constraints.add(equationFromString(objective.length, \"x202 - x190 = 0\"));\n        constraints.add(equationFromString(objective.length, \"x203 - x191 = 0\"));\n        constraints.add(equationFromString(objective.length, \"x204 - x192 = 0\"));\n\n        SimplexSolver solver = new SimplexSolver();\n        RealPointValuePair solution = solver.optimize(f, constraints, GoalType.MINIMIZE, true);\n        assertEquals(7518.0, solution.getValue(), .0000001);\n    }\n",
        "begin_line": 206,
        "end_line": 331,
        "comment": "",
        "child_ranges": [
            "(line 208,col 9)-(line 230,col 61)",
            "(line 232,col 9)-(line 232,col 78)",
            "(line 233,col 9)-(line 233,col 85)",
            "(line 234,col 9)-(line 234,col 93)",
            "(line 235,col 9)-(line 235,col 115)",
            "(line 236,col 9)-(line 236,col 111)",
            "(line 237,col 9)-(line 237,col 89)",
            "(line 238,col 9)-(line 238,col 97)",
            "(line 239,col 9)-(line 239,col 121)",
            "(line 240,col 9)-(line 240,col 97)",
            "(line 241,col 9)-(line 241,col 121)",
            "(line 242,col 9)-(line 242,col 97)",
            "(line 243,col 9)-(line 243,col 121)",
            "(line 244,col 9)-(line 244,col 117)",
            "(line 245,col 9)-(line 245,col 93)",
            "(line 246,col 9)-(line 246,col 97)",
            "(line 247,col 9)-(line 247,col 121)",
            "(line 248,col 9)-(line 248,col 97)",
            "(line 249,col 9)-(line 249,col 121)",
            "(line 250,col 9)-(line 250,col 97)",
            "(line 251,col 9)-(line 251,col 121)",
            "(line 252,col 9)-(line 252,col 117)",
            "(line 253,col 9)-(line 253,col 93)",
            "(line 254,col 9)-(line 254,col 97)",
            "(line 255,col 9)-(line 255,col 121)",
            "(line 256,col 9)-(line 256,col 97)",
            "(line 257,col 9)-(line 257,col 121)",
            "(line 258,col 9)-(line 258,col 97)",
            "(line 259,col 9)-(line 259,col 121)",
            "(line 260,col 9)-(line 260,col 117)",
            "(line 261,col 9)-(line 261,col 93)",
            "(line 262,col 9)-(line 262,col 100)",
            "(line 263,col 9)-(line 263,col 130)",
            "(line 264,col 9)-(line 264,col 99)",
            "(line 265,col 9)-(line 265,col 129)",
            "(line 266,col 9)-(line 266,col 102)",
            "(line 267,col 9)-(line 267,col 130)",
            "(line 268,col 9)-(line 268,col 125)",
            "(line 269,col 9)-(line 269,col 97)",
            "(line 270,col 9)-(line 270,col 102)",
            "(line 271,col 9)-(line 271,col 130)",
            "(line 272,col 9)-(line 272,col 102)",
            "(line 273,col 9)-(line 273,col 130)",
            "(line 274,col 9)-(line 274,col 102)",
            "(line 275,col 9)-(line 275,col 130)",
            "(line 276,col 9)-(line 276,col 125)",
            "(line 277,col 9)-(line 277,col 97)",
            "(line 278,col 9)-(line 278,col 102)",
            "(line 279,col 9)-(line 279,col 130)",
            "(line 280,col 9)-(line 280,col 102)",
            "(line 281,col 9)-(line 281,col 130)",
            "(line 282,col 9)-(line 282,col 86)",
            "(line 283,col 9)-(line 283,col 88)",
            "(line 284,col 9)-(line 284,col 81)",
            "(line 285,col 9)-(line 285,col 81)",
            "(line 286,col 9)-(line 286,col 81)",
            "(line 287,col 9)-(line 287,col 81)",
            "(line 288,col 9)-(line 288,col 81)",
            "(line 289,col 9)-(line 289,col 88)",
            "(line 290,col 9)-(line 290,col 81)",
            "(line 291,col 9)-(line 291,col 81)",
            "(line 292,col 9)-(line 292,col 81)",
            "(line 293,col 9)-(line 293,col 81)",
            "(line 294,col 9)-(line 294,col 81)",
            "(line 295,col 9)-(line 295,col 80)",
            "(line 296,col 9)-(line 296,col 80)",
            "(line 297,col 9)-(line 297,col 80)",
            "(line 298,col 9)-(line 298,col 80)",
            "(line 299,col 9)-(line 299,col 81)",
            "(line 300,col 9)-(line 300,col 81)",
            "(line 301,col 9)-(line 301,col 81)",
            "(line 302,col 9)-(line 302,col 81)",
            "(line 303,col 9)-(line 303,col 81)",
            "(line 304,col 9)-(line 304,col 81)",
            "(line 305,col 9)-(line 305,col 81)",
            "(line 306,col 9)-(line 306,col 81)",
            "(line 307,col 9)-(line 307,col 81)",
            "(line 308,col 9)-(line 308,col 81)",
            "(line 309,col 9)-(line 309,col 81)",
            "(line 310,col 9)-(line 310,col 88)",
            "(line 311,col 9)-(line 311,col 81)",
            "(line 312,col 9)-(line 312,col 81)",
            "(line 313,col 9)-(line 313,col 81)",
            "(line 314,col 9)-(line 314,col 81)",
            "(line 315,col 9)-(line 315,col 81)",
            "(line 316,col 9)-(line 316,col 81)",
            "(line 317,col 9)-(line 317,col 81)",
            "(line 318,col 9)-(line 318,col 81)",
            "(line 319,col 9)-(line 319,col 81)",
            "(line 320,col 9)-(line 320,col 81)",
            "(line 321,col 9)-(line 321,col 88)",
            "(line 322,col 9)-(line 322,col 81)",
            "(line 323,col 9)-(line 323,col 81)",
            "(line 324,col 9)-(line 324,col 81)",
            "(line 325,col 9)-(line 325,col 81)",
            "(line 326,col 9)-(line 326,col 81)",
            "(line 328,col 9)-(line 328,col 51)",
            "(line 329,col 9)-(line 329,col 95)",
            "(line 330,col 9)-(line 330,col 60)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.optimization.linear.SimplexSolverTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java",
        "signature": "org.apache.commons.math.optimization.linear.SimplexSolverTest.equationFromString(int, java.lang.String)",
        "snippet": "    private LinearConstraint equationFromString(int numCoefficients, String s) {\n        Relationship relationship;\n        if (s.contains(\">=\")) {\n            relationship = Relationship.GEQ;\n        } else if (s.contains(\"<=\")) {\n            relationship = Relationship.LEQ;\n        } else if (s.contains(\"=\")) {\n            relationship = Relationship.EQ;\n        } else {\n            throw new IllegalArgumentException();\n        }\n\n        String[] equationParts = s.split(\"[>|<]?=\");\n        double rhs = Double.parseDouble(equationParts[1].trim());\n\n        RealVector lhs = new ArrayRealVector(numCoefficients);\n        String left = equationParts[0].replaceAll(\" ?x\", \"\");\n        String[] coefficients = left.split(\" \");\n        for (String coefficient : coefficients) {\n            double value = coefficient.charAt(0) == '-' ? -1 : 1;\n            int index = Integer.parseInt(coefficient.replaceFirst(\"[+|-]\", \"\").trim());\n            lhs.setEntry(index, value);\n        }\n        return new LinearConstraint(lhs, relationship, rhs);\n    }\n",
        "begin_line": 337,
        "end_line": 361,
        "comment": "\n     * Converts a test string to a {@link LinearConstraint}.\n     * Ex: x0 + x1 + x2 + x3 - x12 = 0\n     ",
        "child_ranges": [
            "(line 338,col 9)-(line 338,col 34)",
            "(line 339,col 9)-(line 347,col 9)",
            "(line 349,col 9)-(line 349,col 52)",
            "(line 350,col 9)-(line 350,col 65)",
            "(line 352,col 9)-(line 352,col 62)",
            "(line 353,col 9)-(line 353,col 61)",
            "(line 354,col 9)-(line 354,col 48)",
            "(line 355,col 9)-(line 359,col 9)",
            "(line 360,col 9)-(line 360,col 60)"
        ]
    }
]