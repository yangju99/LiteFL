[
    {
        "name": "NumberUtils.createNumber#445",
        "is_bug": true,
        "src_path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java",
        "class_name": "org.apache.commons.lang3.math.NumberUtils",
        "signature": "org.apache.commons.lang3.math.NumberUtils.createNumber(java.lang.String)",
        "snippet": "    public static Number createNumber(String str) throws NumberFormatException {\n        if (str == null) {\n            return null;\n        }\n        if (StringUtils.isBlank(str)) {\n            throw new NumberFormatException(\"A blank string is not a valid number\");\n        }  \n        if (str.startsWith(\"--\")) {\n            return null;\n        }\n        if (str.startsWith(\"0x\") || str.startsWith(\"-0x\") || str.startsWith(\"0X\") || str.startsWith(\"-0X\")) {\n            int hexDigits = str.length() - 2; // drop 0x\n            if (str.startsWith(\"-\")) { // drop -\n                hexDigits--;\n            }\n            if (hexDigits > 8) { // too many for an int\n                return createLong(str);\n            }\n            return createInteger(str);\n        }   \n        char lastChar = str.charAt(str.length() - 1);\n        String mant;\n        String dec;\n        String exp;\n        int decPos = str.indexOf('.');\n        int expPos = str.indexOf('e') + str.indexOf('E') + 1;\n\n        if (decPos > -1) {\n\n            if (expPos > -1) {\n                if (expPos < decPos || expPos > str.length()) {\n                    throw new NumberFormatException(str + \" is not a valid number.\");\n                }\n                dec = str.substring(decPos + 1, expPos);\n            } else {\n                dec = str.substring(decPos + 1);\n            }\n            mant = str.substring(0, decPos);\n        } else {\n            if (expPos > -1) {\n                if (expPos > str.length()) {\n                    throw new NumberFormatException(str + \" is not a valid number.\");\n                }\n                mant = str.substring(0, expPos);\n            } else {\n                mant = str;\n            }\n            dec = null;\n        }\n        if (!Character.isDigit(lastChar) && lastChar != '.') {\n            if (expPos > -1 && expPos < str.length() - 1) {\n                exp = str.substring(expPos + 1, str.length() - 1);\n            } else {\n                exp = null;\n            }\n            //Requesting a specific type..\n            String numeric = str.substring(0, str.length() - 1);\n            boolean allZeros = isAllZeros(mant) && isAllZeros(exp);\n            switch (lastChar) {\n                case 'l' :\n                case 'L' :\n                    if (dec == null\n                        && exp == null\n                        && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric))) {\n                        try {\n                            return createLong(numeric);\n                        } catch (NumberFormatException nfe) { // NOPMD\n                            // Too big for a long\n                        }\n                        return createBigInteger(numeric);\n\n                    }\n                    throw new NumberFormatException(str + \" is not a valid number.\");\n                case 'f' :\n                case 'F' :\n                    try {\n                        Float f = NumberUtils.createFloat(numeric);\n                        if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n                            //If it's too big for a float or the float value = 0 and the string\n                            //has non-zeros in it, then float does not have the precision we want\n                            return f;\n                        }\n\n                    } catch (NumberFormatException nfe) { // NOPMD\n                        // ignore the bad number\n                    }\n                    //$FALL-THROUGH$\n                case 'd' :\n                case 'D' :\n                    try {\n                        Double d = NumberUtils.createDouble(numeric);\n                        if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {\n                            return d;\n                        }\n                    } catch (NumberFormatException nfe) { // NOPMD\n                        // ignore the bad number\n                    }\n                    try {\n                        return createBigDecimal(numeric);\n                    } catch (NumberFormatException e) { // NOPMD\n                        // ignore the bad number\n                    }\n                    //$FALL-THROUGH$\n                default :\n                    throw new NumberFormatException(str + \" is not a valid number.\");\n\n            }\n        } else {\n            //User doesn't have a preference on the return type, so let's start\n            //small and go from there...\n            if (expPos > -1 && expPos < str.length() - 1) {\n                exp = str.substring(expPos + 1, str.length());\n            } else {\n                exp = null;\n            }\n            if (dec == null && exp == null) {\n                //Must be an int,long,bigint\n                try {\n                    return createInteger(str);\n                } catch (NumberFormatException nfe) { // NOPMD\n                    // ignore the bad number\n                }\n                try {\n                    return createLong(str);\n                } catch (NumberFormatException nfe) { // NOPMD\n                    // ignore the bad number\n                }\n                return createBigInteger(str);\n\n            } else {\n                //Must be a float,double,BigDec\n                boolean allZeros = isAllZeros(mant) && isAllZeros(exp);\n                try {\n                    Float f = createFloat(str);\n                    if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n                        return f;\n                    }\n                } catch (NumberFormatException nfe) { // NOPMD\n                    // ignore the bad number\n                }\n                try {\n                    Double d = createDouble(str);\n                    if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n                        return d;\n                    }\n                } catch (NumberFormatException nfe) { // NOPMD\n                    // ignore the bad number\n                }\n\n                return createBigDecimal(str);\n\n            }\n        }\n    }\n",
        "begin_line": 445,
        "end_line": 598,
        "comment": "\n     * <p>Turns a string value into a java.lang.Number.</p>\n     *\n     * <p>If the string starts with <code>0x</code> or <code>-0x</code> (lower or upper case), it\n     * will be interpreted as a hexadecimal integer - or long, if the number of digits after the 0x\n     * prefix is more than 8.\n     * Values with leading <code>0</code>'s will not be interpreted as octal.</p>\n     *\n     * <p>Then, the value is examined for a type qualifier on the end, i.e. one of\n     * <code>'f','F','d','D','l','L'</code>.  If it is found, it starts \n     * trying to create successively larger types from the type specified\n     * until one is found that can represent the value.</p>\n     *\n     * <p>If a type specifier is not found, it will check for a decimal point\n     * and then try successively larger types from <code>Integer</code> to\n     * <code>BigInteger</code> and from <code>Float</code> to\n     * <code>BigDecimal</code>.</p>\n     *\n     * <p>Returns <code>null</code> if the string is <code>null</code>.</p>\n     *\n     * <p>This method does not trim the input string, i.e., strings with leading\n     * or trailing spaces will generate NumberFormatExceptions.</p>\n     *\n     * @param str  String containing a number, may be null\n     * @return Number created from the string (or null if the input is null)\n     * @throws NumberFormatException if the value cannot be converted\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 1.0
        },
        "num_failing_tests": 1
    },
    {
        "name": "SystemUtils.getJavaVersionMatches#1276",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/SystemUtils.java",
        "class_name": "org.apache.commons.lang3.SystemUtils",
        "signature": "org.apache.commons.lang3.SystemUtils.getJavaVersionMatches(java.lang.String)",
        "snippet": "    private static boolean getJavaVersionMatches(String versionPrefix) {\n        return isJavaVersionMatch(JAVA_SPECIFICATION_VERSION, versionPrefix);\n    }\n",
        "begin_line": 1276,
        "end_line": 1278,
        "comment": "\n     * <p>\n     * Decides if the Java version matches.\n     * </p>\n     *\n     * @param versionPrefix the prefix for the java version\n     * @return true if matches, or false if not or can't determine\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.7071
        },
        "num_failing_tests": 1
    },
    {
        "name": "SystemUtils.getOSMatches#1287",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/SystemUtils.java",
        "class_name": "org.apache.commons.lang3.SystemUtils",
        "signature": "org.apache.commons.lang3.SystemUtils.getOSMatches(java.lang.String, java.lang.String)",
        "snippet": "    private static boolean getOSMatches(String osNamePrefix, String osVersionPrefix) {\n        return isOSMatch(OS_NAME, OS_VERSION, osNamePrefix, osVersionPrefix);\n    }\n",
        "begin_line": 1287,
        "end_line": 1289,
        "comment": "\n     * Decides if the operating system matches.\n     *\n     * @param osNamePrefix the prefix for the os name\n     * @param osVersionPrefix the prefix for the version\n     * @return true if matches, or false if not or can't determine\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.7071
        },
        "num_failing_tests": 1
    },
    {
        "name": "SystemUtils.getOSMatchesName#1297",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/SystemUtils.java",
        "class_name": "org.apache.commons.lang3.SystemUtils",
        "signature": "org.apache.commons.lang3.SystemUtils.getOSMatchesName(java.lang.String)",
        "snippet": "    private static boolean getOSMatchesName(String osNamePrefix) {\n        return isOSNameMatch(OS_NAME, osNamePrefix);\n    }\n",
        "begin_line": 1297,
        "end_line": 1299,
        "comment": "\n     * Decides if the operating system matches.\n     *\n     * @param osNamePrefix the prefix for the os name\n     * @return true if matches, or false if not or can't determine\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.7071
        },
        "num_failing_tests": 1
    },
    {
        "name": "SystemUtils.getSystemProperty#1314",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/SystemUtils.java",
        "class_name": "org.apache.commons.lang3.SystemUtils",
        "signature": "org.apache.commons.lang3.SystemUtils.getSystemProperty(java.lang.String)",
        "snippet": "    private static String getSystemProperty(String property) {\n        try {\n            return System.getProperty(property);\n        } catch (SecurityException ex) {\n            // we are not allowed to look at this property\n            System.err.println(\"Caught a SecurityException reading the system property '\" + property\n                    + \"'; the SystemUtils property value will default to null.\");\n            return null;\n        }\n    }\n",
        "begin_line": 1314,
        "end_line": 1323,
        "comment": "\n     * <p>\n     * Gets a System property, defaulting to {@code null} if the property cannot be read.\n     * </p>\n     * <p>\n     * If a {@code SecurityException} is caught, the return value is {@code null} and a message is written to\n     * {@code System.err}.\n     * </p>\n     *\n     * @param property the system property name\n     * @return the system property value or {@code null} if a security problem occurs\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.7071
        },
        "num_failing_tests": 1
    },
    {
        "name": "SystemUtils.isJavaVersionAtLeast#1382",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/SystemUtils.java",
        "class_name": "org.apache.commons.lang3.SystemUtils",
        "signature": "org.apache.commons.lang3.SystemUtils.isJavaVersionAtLeast(org.apache.commons.lang3.JavaVersion)",
        "snippet": "    public static boolean isJavaVersionAtLeast(JavaVersion requiredVersion) {\n        return JAVA_SPECIFICATION_VERSION_AS_ENUM.atLeast(requiredVersion);\n    }\n",
        "begin_line": 1382,
        "end_line": 1384,
        "comment": "\n     * <p>\n     * Is the Java version at least the requested version.\n     * </p>\n     * <p>\n     * Example input:\n     * </p>\n     * <ul>\n     * <li>{@code 1.2f} to test for Java 1.2</li>\n     * <li>{@code 1.31f} to test for Java 1.3.1</li>\n     * </ul>\n     *\n     * @param requiredVersion the required version, for example 1.31f\n     * @return {@code true} if the actual version is equal or greater than the required version\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.7071
        },
        "num_failing_tests": 1
    },
    {
        "name": "SystemUtils.isJavaVersionMatch#1398",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/SystemUtils.java",
        "class_name": "org.apache.commons.lang3.SystemUtils",
        "signature": "org.apache.commons.lang3.SystemUtils.isJavaVersionMatch(java.lang.String, java.lang.String)",
        "snippet": "    static boolean isJavaVersionMatch(String version, String versionPrefix) {\n        if (version == null) {\n            return false;\n        }\n        return version.startsWith(versionPrefix);\n    }\n",
        "begin_line": 1398,
        "end_line": 1403,
        "comment": "\n     * <p>\n     * Decides if the Java version matches.\n     * </p>\n     * <p>\n     * This method is package private instead of private to support unit test invocation.\n     * </p>\n     *\n     * @param version the actual Java version\n     * @param versionPrefix the prefix for the expected Java version\n     * @return true if matches, or false if not or can't determine\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.7071
        },
        "num_failing_tests": 1
    },
    {
        "name": "SystemUtils.isOSMatch#1417",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/SystemUtils.java",
        "class_name": "org.apache.commons.lang3.SystemUtils",
        "signature": "org.apache.commons.lang3.SystemUtils.isOSMatch(java.lang.String, java.lang.String, java.lang.String, java.lang.String)",
        "snippet": "    static boolean isOSMatch(String osName, String osVersion, String osNamePrefix, String osVersionPrefix) {\n        if (osName == null || osVersion == null) {\n            return false;\n        }\n        return osName.startsWith(osNamePrefix) && osVersion.startsWith(osVersionPrefix);\n    }\n",
        "begin_line": 1417,
        "end_line": 1422,
        "comment": "\n     * Decides if the operating system matches.\n     * <p>\n     * This method is package private instead of private to support unit test invocation.\n     * </p>\n     *\n     * @param osName the actual OS name\n     * @param osVersion the actual OS version\n     * @param osNamePrefix the prefix for the expected OS name\n     * @param osVersionPrefix the prefix for the expected OS version\n     * @return true if matches, or false if not or can't determine\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.7071
        },
        "num_failing_tests": 1
    },
    {
        "name": "SystemUtils.isOSNameMatch#1434",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/SystemUtils.java",
        "class_name": "org.apache.commons.lang3.SystemUtils",
        "signature": "org.apache.commons.lang3.SystemUtils.isOSNameMatch(java.lang.String, java.lang.String)",
        "snippet": "    static boolean isOSNameMatch(String osName, String osNamePrefix) {\n        if (osName == null) {\n            return false;\n        }\n        return osName.startsWith(osNamePrefix);\n    }\n",
        "begin_line": 1434,
        "end_line": 1439,
        "comment": "\n     * Decides if the operating system matches.\n     * <p>\n     * This method is package private instead of private to support unit test invocation.\n     * </p>\n     *\n     * @param osName the actual OS name\n     * @param osNamePrefix the prefix for the expected OS name\n     * @return true if matches, or false if not or can't determine\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.7071
        },
        "num_failing_tests": 1
    },
    {
        "name": "JavaVersion.JavaVersion#89",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/JavaVersion.java",
        "class_name": "org.apache.commons.lang3.JavaVersion",
        "signature": "org.apache.commons.lang3.JavaVersion.JavaVersion(float, java.lang.String)",
        "snippet": "    JavaVersion(final float value, final String name) {\n        this.value = value;\n        this.name = name;\n    }\n",
        "begin_line": 89,
        "end_line": 92,
        "comment": "\n     * Constructor.\n     *\n     * @param value  the float value\n     * @param name  the standard name, not null\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.7071
        },
        "num_failing_tests": 1
    },
    {
        "name": "JavaVersion.atLeast#104",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/JavaVersion.java",
        "class_name": "org.apache.commons.lang3.JavaVersion",
        "signature": "org.apache.commons.lang3.JavaVersion.atLeast(org.apache.commons.lang3.JavaVersion)",
        "snippet": "    public boolean atLeast(JavaVersion requiredVersion) {\n        return this.value >= requiredVersion.value;\n    }\n",
        "begin_line": 104,
        "end_line": 106,
        "comment": "\n     * <p>Whether this version of Java is at least the version of Java passed in.</p>\n     *\n     * <p>For example:<br />\n     *  {@code myVersion.atLeast(JavaVersion.JAVA_1_4)}<p>\n     *\n     * @param requiredVersion  the version to check against, not null\n     * @return true if this version is equal to or greater than the specified version\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.7071
        },
        "num_failing_tests": 1
    },
    {
        "name": "JavaVersion.get#131",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/JavaVersion.java",
        "class_name": "org.apache.commons.lang3.JavaVersion",
        "signature": "org.apache.commons.lang3.JavaVersion.get(java.lang.String)",
        "snippet": "    static JavaVersion get(final String nom) {\n        if (\"0.9\".equals(nom)) {\n            return JAVA_0_9;\n        } else if (\"1.1\".equals(nom)) {\n            return JAVA_1_1;\n        } else if (\"1.2\".equals(nom)) {\n            return JAVA_1_2;\n        } else if (\"1.3\".equals(nom)) {\n            return JAVA_1_3;\n        } else if (\"1.4\".equals(nom)) {\n            return JAVA_1_4;\n        } else if (\"1.5\".equals(nom)) {\n            return JAVA_1_5;\n        } else if (\"1.6\".equals(nom)) {\n            return JAVA_1_6;\n        } else if (\"1.7\".equals(nom)) {\n            return JAVA_1_7;\n        } else if (\"1.8\".equals(nom)) {\n            return JAVA_1_8;\n        } else {\n            return null;\n        }\n    }\n",
        "begin_line": 131,
        "end_line": 153,
        "comment": "\n     * Transforms the given string with a Java version number to the\n     * corresponding constant of this enumeration class. This method is used\n     * internally.\n     *\n     * @param nom the Java version as string\n     * @return the corresponding enumeration constant or <b>null</b> if the\n     * version is unknown\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.7071
        },
        "num_failing_tests": 1
    },
    {
        "name": "NumberUtils.isAllZeros#608",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java",
        "class_name": "org.apache.commons.lang3.math.NumberUtils",
        "signature": "org.apache.commons.lang3.math.NumberUtils.isAllZeros(java.lang.String)",
        "snippet": "    private static boolean isAllZeros(String str) {\n        if (str == null) {\n            return true;\n        }\n        for (int i = str.length() - 1; i >= 0; i--) {\n            if (str.charAt(i) != '0') {\n                return false;\n            }\n        }\n        return str.length() > 0;\n    }\n",
        "begin_line": 608,
        "end_line": 618,
        "comment": "\n     * <p>Utility method for {@link #createNumber(java.lang.String)}.</p>\n     *\n     * <p>Returns <code>true</code> if s is <code>null</code>.</p>\n     * \n     * @param str  the String to check\n     * @return if it is all zeros or <code>null</code>\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5773
        },
        "num_failing_tests": 1
    },
    {
        "name": "NumberUtils.createFloat#630",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java",
        "class_name": "org.apache.commons.lang3.math.NumberUtils",
        "signature": "org.apache.commons.lang3.math.NumberUtils.createFloat(java.lang.String)",
        "snippet": "    public static Float createFloat(String str) {\n        if (str == null) {\n            return null;\n        }\n        return Float.valueOf(str);\n    }\n",
        "begin_line": 630,
        "end_line": 635,
        "comment": "\n     * <p>Convert a <code>String</code> to a <code>Float</code>.</p>\n     *\n     * <p>Returns <code>null</code> if the string is <code>null</code>.</p>\n     * \n     * @param str  a <code>String</code> to convert, may be null\n     * @return converted <code>Float</code> (or null if the input is null)\n     * @throws NumberFormatException if the value cannot be converted\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5773
        },
        "num_failing_tests": 1
    },
    {
        "name": "NumberUtils.createDouble#646",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java",
        "class_name": "org.apache.commons.lang3.math.NumberUtils",
        "signature": "org.apache.commons.lang3.math.NumberUtils.createDouble(java.lang.String)",
        "snippet": "    public static Double createDouble(String str) {\n        if (str == null) {\n            return null;\n        }\n        return Double.valueOf(str);\n    }\n",
        "begin_line": 646,
        "end_line": 651,
        "comment": "\n     * <p>Convert a <code>String</code> to a <code>Double</code>.</p>\n     * \n     * <p>Returns <code>null</code> if the string is <code>null</code>.</p>\n     *\n     * @param str  a <code>String</code> to convert, may be null\n     * @return converted <code>Double</code> (or null if the input is null)\n     * @throws NumberFormatException if the value cannot be converted\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5773
        },
        "num_failing_tests": 1
    },
    {
        "name": "NumberUtils.createInteger#663",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java",
        "class_name": "org.apache.commons.lang3.math.NumberUtils",
        "signature": "org.apache.commons.lang3.math.NumberUtils.createInteger(java.lang.String)",
        "snippet": "    public static Integer createInteger(String str) {\n        if (str == null) {\n            return null;\n        }\n        // decode() handles 0xAABD and 0777 (hex and octal) as well.\n        return Integer.decode(str);\n    }\n",
        "begin_line": 663,
        "end_line": 669,
        "comment": "\n     * <p>Convert a <code>String</code> to a <code>Integer</code>, handling\n     * hex and octal notations.</p>\n     *\n     * <p>Returns <code>null</code> if the string is <code>null</code>.</p>\n     * \n     * @param str  a <code>String</code> to convert, may be null\n     * @return converted <code>Integer</code> (or null if the input is null)\n     * @throws NumberFormatException if the value cannot be converted\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5773
        },
        "num_failing_tests": 1
    },
    {
        "name": "NumberUtils.createBigInteger#697",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java",
        "class_name": "org.apache.commons.lang3.math.NumberUtils",
        "signature": "org.apache.commons.lang3.math.NumberUtils.createBigInteger(java.lang.String)",
        "snippet": "    public static BigInteger createBigInteger(String str) {\n        if (str == null) {\n            return null;\n        }\n        return new BigInteger(str);\n    }\n",
        "begin_line": 697,
        "end_line": 702,
        "comment": "\n     * <p>Convert a <code>String</code> to a <code>BigInteger</code>.</p>\n     *\n     * <p>Returns <code>null</code> if the string is <code>null</code>.</p>\n     * \n     * @param str  a <code>String</code> to convert, may be null\n     * @return converted <code>BigInteger</code> (or null if the input is null)\n     * @throws NumberFormatException if the value cannot be converted\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5773
        },
        "num_failing_tests": 1
    },
    {
        "name": "NumberUtils.createBigDecimal#713",
        "is_bug": true,
        "src_path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java",
        "class_name": "org.apache.commons.lang3.math.NumberUtils",
        "signature": "org.apache.commons.lang3.math.NumberUtils.createBigDecimal(java.lang.String)",
        "snippet": "    public static BigDecimal createBigDecimal(String str) {\n        if (str == null) {\n            return null;\n        }\n        // handle JDK1.3.1 bug where \"\" throws IndexOutOfBoundsException\n        if (StringUtils.isBlank(str)) {\n            throw new NumberFormatException(\"A blank string is not a valid number\");\n        }\n            // this is protection for poorness in java.lang.BigDecimal.\n            // it accepts this as a legal value, but it does not appear \n            // to be in specification of class. OS X Java parses it to \n            // a wrong value.\n        return new BigDecimal(str);\n    }\n",
        "begin_line": 713,
        "end_line": 726,
        "comment": "\n     * <p>Convert a <code>String</code> to a <code>BigDecimal</code>.</p>\n     * \n     * <p>Returns <code>null</code> if the string is <code>null</code>.</p>\n     *\n     * @param str  a <code>String</code> to convert, may be null\n     * @return converted <code>BigDecimal</code> (or null if the input is null)\n     * @throws NumberFormatException if the value cannot be converted\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5773
        },
        "num_failing_tests": 1
    },
    {
        "name": "NumberUtils.createLong#681",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java",
        "class_name": "org.apache.commons.lang3.math.NumberUtils",
        "signature": "org.apache.commons.lang3.math.NumberUtils.createLong(java.lang.String)",
        "snippet": "    public static Long createLong(String str) {\n        if (str == null) {\n            return null;\n        }\n        return Long.decode(str);\n    }\n",
        "begin_line": 681,
        "end_line": 686,
        "comment": "\n     * <p>Convert a <code>String</code> to a <code>Long</code>; \n     * since 3.1 it handles hex and octal notations.</p>\n     * \n     * <p>Returns <code>null</code> if the string is <code>null</code>.</p>\n     *\n     * @param str  a <code>String</code> to convert, may be null\n     * @return converted <code>Long</code> (or null if the input is null)\n     * @throws NumberFormatException if the value cannot be converted\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 1
    },
    {
        "name": "NumberUtils.isDigits#1295",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java",
        "class_name": "org.apache.commons.lang3.math.NumberUtils",
        "signature": "org.apache.commons.lang3.math.NumberUtils.isDigits(java.lang.String)",
        "snippet": "    public static boolean isDigits(String str) {\n        if (StringUtils.isEmpty(str)) {\n            return false;\n        }\n        for (int i = 0; i < str.length(); i++) {\n            if (!Character.isDigit(str.charAt(i))) {\n                return false;\n            }\n        }\n        return true;\n    }\n",
        "begin_line": 1295,
        "end_line": 1305,
        "comment": "\n     * <p>Checks whether the <code>String</code> contains only\n     * digit characters.</p>\n     *\n     * <p><code>Null</code> and empty String will return\n     * <code>false</code>.</p>\n     *\n     * @param str  the <code>String</code> to check\n     * @return <code>true</code> if str contains only Unicode numeric\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 1
    },
    {
        "name": "StringUtils.isEmpty#194",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/StringUtils.java",
        "class_name": "org.apache.commons.lang3.StringUtils",
        "signature": "org.apache.commons.lang3.StringUtils.isEmpty(java.lang.CharSequence)",
        "snippet": "    public static boolean isEmpty(CharSequence cs) {\n        return cs == null || cs.length() == 0;\n    }\n",
        "begin_line": 194,
        "end_line": 196,
        "comment": "\n     * <p>Checks if a CharSequence is empty (\"\") or null.</p>\n     *\n     * <pre>\n     * StringUtils.isEmpty(null)      = true\n     * StringUtils.isEmpty(\"\")        = true\n     * StringUtils.isEmpty(\" \")       = false\n     * StringUtils.isEmpty(\"bob\")     = false\n     * StringUtils.isEmpty(\"  bob  \") = false\n     * </pre>\n     *\n     * <p>NOTE: This method changed in Lang version 2.0.\n     * It no longer trims the CharSequence.\n     * That functionality is available in isBlank().</p>\n     *\n     * @param cs  the CharSequence to check, may be null\n     * @return {@code true} if the CharSequence is empty or null\n     * @since 3.0 Changed signature from isEmpty(String) to isEmpty(CharSequence)\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 1
    },
    {
        "name": "StringUtils.isBlank#233",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/StringUtils.java",
        "class_name": "org.apache.commons.lang3.StringUtils",
        "signature": "org.apache.commons.lang3.StringUtils.isBlank(java.lang.CharSequence)",
        "snippet": "    public static boolean isBlank(CharSequence cs) {\n        int strLen;\n        if (cs == null || (strLen = cs.length()) == 0) {\n            return true;\n        }\n        for (int i = 0; i < strLen; i++) {\n            if (Character.isWhitespace(cs.charAt(i)) == false) {\n                return false;\n            }\n        }\n        return true;\n    }\n",
        "begin_line": 233,
        "end_line": 244,
        "comment": "\n     * <p>Checks if a CharSequence is whitespace, empty (\"\") or null.</p>\n     *\n     * <pre>\n     * StringUtils.isBlank(null)      = true\n     * StringUtils.isBlank(\"\")        = true\n     * StringUtils.isBlank(\" \")       = true\n     * StringUtils.isBlank(\"bob\")     = false\n     * StringUtils.isBlank(\"  bob  \") = false\n     * </pre>\n     *\n     * @param cs  the CharSequence to check, may be null\n     * @return {@code true} if the CharSequence is null, empty or whitespace\n     * @since 2.0\n     * @since 3.0 Changed signature from isBlank(String) to isBlank(CharSequence)\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 1
    }
]