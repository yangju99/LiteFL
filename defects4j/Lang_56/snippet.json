[
    {
        "name": "NestableRuntimeException.NestableRuntimeException#80",
        "is_bug": false,
        "src_path": "src/java/org/apache/commons/lang/exception/NestableRuntimeException.java",
        "class_name": "org.apache.commons.lang.exception.NestableRuntimeException",
        "signature": "org.apache.commons.lang.exception.NestableRuntimeException.NestableRuntimeException(java.lang.Throwable)",
        "snippet": "    public NestableRuntimeException(Throwable cause) {\n        super();\n        this.cause = cause;\n    }\n",
        "begin_line": 80,
        "end_line": 83,
        "comment": "\n     * Constructs a new <code>NestableRuntimeException</code> with specified\n     * nested <code>Throwable</code>.\n     *\n     * @param cause the exception or error that caused this exception to be\n     * thrown\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 1.0
        },
        "num_failing_tests": 1
    },
    {
        "name": "NestableRuntimeException.getCause#101",
        "is_bug": false,
        "src_path": "src/java/org/apache/commons/lang/exception/NestableRuntimeException.java",
        "class_name": "org.apache.commons.lang.exception.NestableRuntimeException",
        "signature": "org.apache.commons.lang.exception.NestableRuntimeException.getCause()",
        "snippet": "    public Throwable getCause() {\n        return cause;\n    }\n",
        "begin_line": 101,
        "end_line": 103,
        "comment": "\n     * {@inheritDoc}\n     ",
        "resolved_comments": {
            "java.lang.RuntimeException": null,
            "org.apache.commons.lang.exception.Nestable": "\n     * Returns the reference to the exception or error that caused the\n     * exception implementing the <code>Nestable</code> to be thrown.\n     *\n     * @return throwable that caused the original exception\n     "
        },
        "susp": {
            "ochiai_susp": 1.0
        },
        "num_failing_tests": 1
    },
    {
        "name": "NestableRuntimeException.getMessage#112",
        "is_bug": false,
        "src_path": "src/java/org/apache/commons/lang/exception/NestableRuntimeException.java",
        "class_name": "org.apache.commons.lang.exception.NestableRuntimeException",
        "signature": "org.apache.commons.lang.exception.NestableRuntimeException.getMessage()",
        "snippet": "    public String getMessage() {\n        if (super.getMessage() != null) {\n            return super.getMessage();\n        } else if (cause != null) {\n            return cause.toString();\n        } else {\n            return null;\n        }\n    }\n",
        "begin_line": 112,
        "end_line": 120,
        "comment": "\n     * Returns the detail message string of this throwable. If it was\n     * created with a null message, returns the following:\n     * (cause==null ? null : cause.toString()).\n     *\n     * @return String message string of the throwable\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 1.0
        },
        "num_failing_tests": 1
    },
    {
        "name": "NestableRuntimeException.printStackTrace#192",
        "is_bug": false,
        "src_path": "src/java/org/apache/commons/lang/exception/NestableRuntimeException.java",
        "class_name": "org.apache.commons.lang.exception.NestableRuntimeException",
        "signature": "org.apache.commons.lang.exception.NestableRuntimeException.printStackTrace(java.io.PrintWriter)",
        "snippet": "    public void printStackTrace(PrintWriter out) {\n        delegate.printStackTrace(out);\n    }\n",
        "begin_line": 192,
        "end_line": 194,
        "comment": "\n     * {@inheritDoc}\n     ",
        "resolved_comments": {
            "java.lang.RuntimeException": null,
            "org.apache.commons.lang.exception.Nestable": "\n     * Prints the stack trace of this exception to the specified print\n     * writer.  Includes information from the exception, if any,\n     * which caused this exception.\n     *\n     * @param out <code>PrintWriter</code> to use for output.\n     "
        },
        "susp": {
            "ochiai_susp": 1.0
        },
        "num_failing_tests": 1
    },
    {
        "name": "NestableRuntimeException.printPartialStackTrace#199",
        "is_bug": false,
        "src_path": "src/java/org/apache/commons/lang/exception/NestableRuntimeException.java",
        "class_name": "org.apache.commons.lang.exception.NestableRuntimeException",
        "signature": "org.apache.commons.lang.exception.NestableRuntimeException.printPartialStackTrace(java.io.PrintWriter)",
        "snippet": "    public final void printPartialStackTrace(PrintWriter out) {\n        super.printStackTrace(out);\n    }\n",
        "begin_line": 199,
        "end_line": 201,
        "comment": "\n     * {@inheritDoc}\n     ",
        "resolved_comments": {
            "java.lang.RuntimeException": null,
            "org.apache.commons.lang.exception.Nestable": "\n     * Prints the stack trace of this exception to the specified print\n     * writer.  Includes information from the exception, if any,\n     * which caused this exception.\n     *\n     * @param out <code>PrintWriter</code> to use for output.\n     "
        },
        "susp": {
            "ochiai_susp": 1.0
        },
        "num_failing_tests": 1
    },
    {
        "name": "SerializationUtils.serialize#100",
        "is_bug": false,
        "src_path": "src/java/org/apache/commons/lang/SerializationUtils.java",
        "class_name": "org.apache.commons.lang.SerializationUtils",
        "signature": "org.apache.commons.lang.SerializationUtils.serialize(java.io.Serializable, java.io.OutputStream)",
        "snippet": "    public static void serialize(Serializable obj, OutputStream outputStream) {\n        if (outputStream == null) {\n            throw new IllegalArgumentException(\"The OutputStream must not be null\");\n        }\n        ObjectOutputStream out = null;\n        try {\n            // stream closed in the finally\n            out = new ObjectOutputStream(outputStream);\n            out.writeObject(obj);\n            \n        } catch (IOException ex) {\n            throw new SerializationException(ex);\n        } finally {\n            try {\n                if (out != null) {\n                    out.close();\n                }\n            } catch (IOException ex) {\n                // ignore close exception\n            }\n        }\n    }\n",
        "begin_line": 100,
        "end_line": 121,
        "comment": "\n     * <p>Serializes an <code>Object</code> to the specified stream.</p>\n     *\n     * <p>The stream will be closed once the object is written.\n     * This avoids the need for a finally clause, and maybe also exception\n     * handling, in the application code.</p>\n     * \n     * <p>The stream passed in is not buffered internally within this method.\n     * This is the responsibility of your application if desired.</p>\n     *\n     * @param obj  the object to serialize to bytes, may be null\n     * @param outputStream  the stream to write to, must not be null\n     * @throws IllegalArgumentException if <code>outputStream</code> is <code>null</code>\n     * @throws SerializationException (runtime) if the serialization fails\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 1.0
        },
        "num_failing_tests": 1
    },
    {
        "name": "SerializationUtils.serialize#131",
        "is_bug": false,
        "src_path": "src/java/org/apache/commons/lang/SerializationUtils.java",
        "class_name": "org.apache.commons.lang.SerializationUtils",
        "signature": "org.apache.commons.lang.SerializationUtils.serialize(java.io.Serializable)",
        "snippet": "    public static byte[] serialize(Serializable obj) {\n        ByteArrayOutputStream baos = new ByteArrayOutputStream(512);\n        serialize(obj, baos);\n        return baos.toByteArray();\n    }\n",
        "begin_line": 131,
        "end_line": 135,
        "comment": "\n     * <p>Serializes an <code>Object</code> to a byte array for\n     * storage/serialization.</p>\n     *\n     * @param obj  the object to serialize to bytes\n     * @return a byte[] with the converted Serializable\n     * @throws SerializationException (runtime) if the serialization fails\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 1.0
        },
        "num_failing_tests": 1
    },
    {
        "name": "SerializationException.SerializationException#64",
        "is_bug": false,
        "src_path": "src/java/org/apache/commons/lang/SerializationException.java",
        "class_name": "org.apache.commons.lang.SerializationException",
        "signature": "org.apache.commons.lang.SerializationException.SerializationException(java.lang.Throwable)",
        "snippet": "    public SerializationException(Throwable cause) {\n        super(cause);\n    }\n",
        "begin_line": 64,
        "end_line": 66,
        "comment": "\n     * <p>Constructs a new <code>SerializationException</code> with specified\n     * nested <code>Throwable</code>.</p>\n     *\n     * @param cause  The <code>Exception</code> or <code>Error</code>\n     *  that caused this exception to be thrown.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 1.0
        },
        "num_failing_tests": 1
    },
    {
        "name": "FastDateFormat.parsePattern#581",
        "is_bug": false,
        "src_path": "src/java/org/apache/commons/lang/time/FastDateFormat.java",
        "class_name": "org.apache.commons.lang.time.FastDateFormat",
        "signature": "org.apache.commons.lang.time.FastDateFormat.parsePattern()",
        "snippet": "    protected List parsePattern() {\n        DateFormatSymbols symbols = new DateFormatSymbols(mLocale);\n        List rules = new ArrayList();\n\n        String[] ERAs = symbols.getEras();\n        String[] months = symbols.getMonths();\n        String[] shortMonths = symbols.getShortMonths();\n        String[] weekdays = symbols.getWeekdays();\n        String[] shortWeekdays = symbols.getShortWeekdays();\n        String[] AmPmStrings = symbols.getAmPmStrings();\n\n        int length = mPattern.length();\n        int[] indexRef = new int[1];\n\n        for (int i = 0; i < length; i++) {\n            indexRef[0] = i;\n            String token = parseToken(mPattern, indexRef);\n            i = indexRef[0];\n\n            int tokenLen = token.length();\n            if (tokenLen == 0) {\n                break;\n            }\n\n            Rule rule;\n            char c = token.charAt(0);\n\n            switch (c) {\n            case 'G': // era designator (text)\n                rule = new TextField(Calendar.ERA, ERAs);\n                break;\n            case 'y': // year (number)\n                if (tokenLen >= 4) {\n                    rule = selectNumberRule(Calendar.YEAR, tokenLen);\n                } else {\n                    rule = TwoDigitYearField.INSTANCE;\n                }\n                break;\n            case 'M': // month in year (text and number)\n                if (tokenLen >= 4) {\n                    rule = new TextField(Calendar.MONTH, months);\n                } else if (tokenLen == 3) {\n                    rule = new TextField(Calendar.MONTH, shortMonths);\n                } else if (tokenLen == 2) {\n                    rule = TwoDigitMonthField.INSTANCE;\n                } else {\n                    rule = UnpaddedMonthField.INSTANCE;\n                }\n                break;\n            case 'd': // day in month (number)\n                rule = selectNumberRule(Calendar.DAY_OF_MONTH, tokenLen);\n                break;\n            case 'h': // hour in am/pm (number, 1..12)\n                rule = new TwelveHourField(selectNumberRule(Calendar.HOUR, tokenLen));\n                break;\n            case 'H': // hour in day (number, 0..23)\n                rule = selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen);\n                break;\n            case 'm': // minute in hour (number)\n                rule = selectNumberRule(Calendar.MINUTE, tokenLen);\n                break;\n            case 's': // second in minute (number)\n                rule = selectNumberRule(Calendar.SECOND, tokenLen);\n                break;\n            case 'S': // millisecond (number)\n                rule = selectNumberRule(Calendar.MILLISECOND, tokenLen);\n                break;\n            case 'E': // day in week (text)\n                rule = new TextField(Calendar.DAY_OF_WEEK, tokenLen < 4 ? shortWeekdays : weekdays);\n                break;\n            case 'D': // day in year (number)\n                rule = selectNumberRule(Calendar.DAY_OF_YEAR, tokenLen);\n                break;\n            case 'F': // day of week in month (number)\n                rule = selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH, tokenLen);\n                break;\n            case 'w': // week in year (number)\n                rule = selectNumberRule(Calendar.WEEK_OF_YEAR, tokenLen);\n                break;\n            case 'W': // week in month (number)\n                rule = selectNumberRule(Calendar.WEEK_OF_MONTH, tokenLen);\n                break;\n            case 'a': // am/pm marker (text)\n                rule = new TextField(Calendar.AM_PM, AmPmStrings);\n                break;\n            case 'k': // hour in day (1..24)\n                rule = new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen));\n                break;\n            case 'K': // hour in am/pm (0..11)\n                rule = selectNumberRule(Calendar.HOUR, tokenLen);\n                break;\n            case 'z': // time zone (text)\n                if (tokenLen >= 4) {\n                    rule = new TimeZoneNameRule(mTimeZone, mTimeZoneForced, mLocale, TimeZone.LONG);\n                } else {\n                    rule = new TimeZoneNameRule(mTimeZone, mTimeZoneForced, mLocale, TimeZone.SHORT);\n                }\n                break;\n            case 'Z': // time zone (value)\n                if (tokenLen == 1) {\n                    rule = TimeZoneNumberRule.INSTANCE_NO_COLON;\n                } else {\n                    rule = TimeZoneNumberRule.INSTANCE_COLON;\n                }\n                break;\n            case '\\'': // literal text\n                String sub = token.substring(1);\n                if (sub.length() == 1) {\n                    rule = new CharacterLiteral(sub.charAt(0));\n                } else {\n                    rule = new StringLiteral(sub);\n                }\n                break;\n            default:\n                throw new IllegalArgumentException(\"Illegal pattern component: \" + token);\n            }\n\n            rules.add(rule);\n        }\n\n        return rules;\n    }\n",
        "begin_line": 581,
        "end_line": 702,
        "comment": "\n     * <p>Returns a list of Rules given a pattern.</p>\n     * \n     * @return a <code>List</code> of Rule objects\n     * @throws IllegalArgumentException if pattern is invalid\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2673
        },
        "num_failing_tests": 1
    },
    {
        "name": "FastDateFormat.getInstance#166",
        "is_bug": false,
        "src_path": "src/java/org/apache/commons/lang/time/FastDateFormat.java",
        "class_name": "org.apache.commons.lang.time.FastDateFormat",
        "signature": "org.apache.commons.lang.time.FastDateFormat.getInstance(java.lang.String)",
        "snippet": "    public static FastDateFormat getInstance(String pattern) {\n        return getInstance(pattern, null, null);\n    }\n",
        "begin_line": 166,
        "end_line": 168,
        "comment": "\n     * <p>Gets a formatter instance using the specified pattern in the\n     * default locale.</p>\n     * \n     * @param pattern  {@link java.text.SimpleDateFormat} compatible\n     *  pattern\n     * @return a pattern based date/time formatter\n     * @throws IllegalArgumentException if pattern is invalid\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.25
        },
        "num_failing_tests": 1
    },
    {
        "name": "FastDateFormat.FastDateFormat#538",
        "is_bug": false,
        "src_path": "src/java/org/apache/commons/lang/time/FastDateFormat.java",
        "class_name": "org.apache.commons.lang.time.FastDateFormat",
        "signature": "org.apache.commons.lang.time.FastDateFormat.FastDateFormat(java.lang.String, java.util.TimeZone, java.util.Locale)",
        "snippet": "    protected FastDateFormat(String pattern, TimeZone timeZone, Locale locale) {\n        super();\n        if (pattern == null) {\n            throw new IllegalArgumentException(\"The pattern must not be null\");\n        }\n        mPattern = pattern;\n        \n        mTimeZoneForced = (timeZone != null);\n        if (timeZone == null) {\n            timeZone = TimeZone.getDefault();\n        }\n        mTimeZone = timeZone;\n        \n        mLocaleForced = (locale != null);\n        if (locale == null) {\n            locale = Locale.getDefault();\n        }\n        mLocale = locale;\n    }\n",
        "begin_line": 538,
        "end_line": 556,
        "comment": "\n     * <p>Constructs a new FastDateFormat.</p>\n     * \n     * @param pattern  {@link java.text.SimpleDateFormat} compatible\n     *  pattern\n     * @param timeZone  time zone to use, <code>null</code> means use\n     *  default for <code>Date</code> and value within for\n     *  <code>Calendar</code>\n     * @param locale  locale, <code>null</code> means use system\n     *  default\n     * @throws IllegalArgumentException if pattern is invalid or\n     *  <code>null</code>\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2425
        },
        "num_failing_tests": 1
    },
    {
        "name": "FastDateFormat.TwoDigitMonthField#1397",
        "is_bug": false,
        "src_path": "src/java/org/apache/commons/lang/time/FastDateFormat.java",
        "class_name": "org.apache.commons.lang.time.FastDateFormat",
        "signature": "org.apache.commons.lang.time.FastDateFormat.TwoDigitMonthField.TwoDigitMonthField()",
        "snippet": "        TwoDigitMonthField() {\n            super();\n        }\n",
        "begin_line": 1397,
        "end_line": 1399,
        "comment": "\n         * Constructs an instance of <code>TwoDigitMonthField</code>.\n         ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2357
        },
        "num_failing_tests": 1
    },
    {
        "name": "FastDateFormat.estimateLength#1404",
        "is_bug": false,
        "src_path": "src/java/org/apache/commons/lang/time/FastDateFormat.java",
        "class_name": "org.apache.commons.lang.time.FastDateFormat",
        "signature": "org.apache.commons.lang.time.FastDateFormat.TwoDigitMonthField.estimateLength()",
        "snippet": "        public int estimateLength() {\n            return 2;\n        }\n",
        "begin_line": 1404,
        "end_line": 1406,
        "comment": "\n         * {@inheritDoc}\n         ",
        "resolved_comments": {
            "java.text.Format": null,
            "org.apache.commons.lang.time.FastDateFormat.NumberRule": null
        },
        "susp": {
            "ochiai_susp": 0.2357
        },
        "num_failing_tests": 1
    },
    {
        "name": "FastDateFormat.PaddedNumberField#1261",
        "is_bug": false,
        "src_path": "src/java/org/apache/commons/lang/time/FastDateFormat.java",
        "class_name": "org.apache.commons.lang.time.FastDateFormat",
        "signature": "org.apache.commons.lang.time.FastDateFormat.PaddedNumberField.PaddedNumberField(int, int)",
        "snippet": "        PaddedNumberField(int field, int size) {\n            if (size < 3) {\n                // Should use UnpaddedNumberField or TwoDigitNumberField.\n                throw new IllegalArgumentException();\n            }\n            mField = field;\n            mSize = size;\n        }\n",
        "begin_line": 1261,
        "end_line": 1268,
        "comment": "\n         * Constructs an instance of <code>PaddedNumberField</code>.\n         * \n         * @param field the field\n         * @param size size of the output field\n         ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2357
        },
        "num_failing_tests": 1
    },
    {
        "name": "FastDateFormat.estimateLength#1273",
        "is_bug": false,
        "src_path": "src/java/org/apache/commons/lang/time/FastDateFormat.java",
        "class_name": "org.apache.commons.lang.time.FastDateFormat",
        "signature": "org.apache.commons.lang.time.FastDateFormat.PaddedNumberField.estimateLength()",
        "snippet": "        public int estimateLength() {\n            return 4;\n        }\n",
        "begin_line": 1273,
        "end_line": 1275,
        "comment": "\n         * {@inheritDoc}\n         ",
        "resolved_comments": {
            "java.text.Format": null,
            "org.apache.commons.lang.time.FastDateFormat.NumberRule": null
        },
        "susp": {
            "ochiai_susp": 0.2357
        },
        "num_failing_tests": 1
    },
    {
        "name": "FastDateFormat.selectNumberRule#770",
        "is_bug": false,
        "src_path": "src/java/org/apache/commons/lang/time/FastDateFormat.java",
        "class_name": "org.apache.commons.lang.time.FastDateFormat",
        "signature": "org.apache.commons.lang.time.FastDateFormat.selectNumberRule(int, int)",
        "snippet": "    protected NumberRule selectNumberRule(int field, int padding) {\n        switch (padding) {\n        case 1:\n            return new UnpaddedNumberField(field);\n        case 2:\n            return new TwoDigitNumberField(field);\n        default:\n            return new PaddedNumberField(field, padding);\n        }\n    }\n",
        "begin_line": 770,
        "end_line": 779,
        "comment": "\n     * <p>Gets an appropriate rule for the padding required.</p>\n     * \n     * @param field  the field to get a rule for\n     * @param padding  the padding required\n     * @return a new rule with the correct padding\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2357
        },
        "num_failing_tests": 1
    },
    {
        "name": "FastDateFormat.TwoDigitNumberField#1321",
        "is_bug": false,
        "src_path": "src/java/org/apache/commons/lang/time/FastDateFormat.java",
        "class_name": "org.apache.commons.lang.time.FastDateFormat",
        "signature": "org.apache.commons.lang.time.FastDateFormat.TwoDigitNumberField.TwoDigitNumberField(int)",
        "snippet": "        TwoDigitNumberField(int field) {\n            mField = field;\n        }\n",
        "begin_line": 1321,
        "end_line": 1323,
        "comment": "\n         * Constructs an instance of <code>TwoDigitNumberField</code> with the specified field.\n         * \n         * @param field the field\n         ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2294
        },
        "num_failing_tests": 1
    },
    {
        "name": "FastDateFormat.estimateLength#1328",
        "is_bug": false,
        "src_path": "src/java/org/apache/commons/lang/time/FastDateFormat.java",
        "class_name": "org.apache.commons.lang.time.FastDateFormat",
        "signature": "org.apache.commons.lang.time.FastDateFormat.TwoDigitNumberField.estimateLength()",
        "snippet": "        public int estimateLength() {\n            return 2;\n        }\n",
        "begin_line": 1328,
        "end_line": 1330,
        "comment": "\n         * {@inheritDoc}\n         ",
        "resolved_comments": {
            "java.text.Format": null,
            "org.apache.commons.lang.time.FastDateFormat.NumberRule": null
        },
        "susp": {
            "ochiai_susp": 0.2294
        },
        "num_failing_tests": 1
    },
    {
        "name": "FastDateFormat.CharacterLiteral#1070",
        "is_bug": false,
        "src_path": "src/java/org/apache/commons/lang/time/FastDateFormat.java",
        "class_name": "org.apache.commons.lang.time.FastDateFormat",
        "signature": "org.apache.commons.lang.time.FastDateFormat.CharacterLiteral.CharacterLiteral(char)",
        "snippet": "        CharacterLiteral(char value) {\n            mValue = value;\n        }\n",
        "begin_line": 1070,
        "end_line": 1072,
        "comment": "\n         * Constructs a new instance of <code>CharacterLiteral</code>\n         * to hold the specified value.\n         * \n         * @param value the character literal\n         ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2294
        },
        "num_failing_tests": 1
    },
    {
        "name": "FastDateFormat.estimateLength#1077",
        "is_bug": false,
        "src_path": "src/java/org/apache/commons/lang/time/FastDateFormat.java",
        "class_name": "org.apache.commons.lang.time.FastDateFormat",
        "signature": "org.apache.commons.lang.time.FastDateFormat.CharacterLiteral.estimateLength()",
        "snippet": "        public int estimateLength() {\n            return 1;\n        }\n",
        "begin_line": 1077,
        "end_line": 1079,
        "comment": "\n         * {@inheritDoc}\n         ",
        "resolved_comments": {
            "java.text.Format": null,
            "org.apache.commons.lang.time.FastDateFormat.Rule": null
        },
        "susp": {
            "ochiai_susp": 0.2294
        },
        "num_failing_tests": 1
    },
    {
        "name": "FastDateFormat.getInstance#212",
        "is_bug": false,
        "src_path": "src/java/org/apache/commons/lang/time/FastDateFormat.java",
        "class_name": "org.apache.commons.lang.time.FastDateFormat",
        "signature": "org.apache.commons.lang.time.FastDateFormat.getInstance(java.lang.String, java.util.TimeZone, java.util.Locale)",
        "snippet": "    public static synchronized FastDateFormat getInstance(String pattern, TimeZone timeZone, Locale locale) {\n        FastDateFormat emptyFormat = new FastDateFormat(pattern, timeZone, locale);\n        FastDateFormat format = (FastDateFormat) cInstanceCache.get(emptyFormat);\n        if (format == null) {\n            format = emptyFormat;\n            format.init();  // convert shell format into usable one\n            cInstanceCache.put(format, format);  // this is OK!\n        }\n        return format;\n    }\n",
        "begin_line": 212,
        "end_line": 221,
        "comment": "\n     * <p>Gets a formatter instance using the specified pattern, time zone\n     * and locale.</p>\n     * \n     * @param pattern  {@link java.text.SimpleDateFormat} compatible\n     *  pattern\n     * @param timeZone  optional time zone, overrides time zone of\n     *  formatted date\n     * @param locale  optional locale, overrides system locale\n     * @return a pattern based date/time formatter\n     * @throws IllegalArgumentException if pattern is invalid\n     *  or <code>null</code>\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2294
        },
        "num_failing_tests": 1
    },
    {
        "name": "FastDateFormat.init#561",
        "is_bug": false,
        "src_path": "src/java/org/apache/commons/lang/time/FastDateFormat.java",
        "class_name": "org.apache.commons.lang.time.FastDateFormat",
        "signature": "org.apache.commons.lang.time.FastDateFormat.init()",
        "snippet": "    protected void init() {\n        List rulesList = parsePattern();\n        mRules = (Rule[]) rulesList.toArray(new Rule[rulesList.size()]);\n\n        int len = 0;\n        for (int i=mRules.length; --i >= 0; ) {\n            len += mRules[i].estimateLength();\n        }\n\n        mMaxLengthEstimate = len;\n    }\n",
        "begin_line": 561,
        "end_line": 571,
        "comment": "\n     * <p>Initializes the instance for first use.</p>\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2294
        },
        "num_failing_tests": 1
    },
    {
        "name": "FastDateFormat.parseToken#711",
        "is_bug": false,
        "src_path": "src/java/org/apache/commons/lang/time/FastDateFormat.java",
        "class_name": "org.apache.commons.lang.time.FastDateFormat",
        "signature": "org.apache.commons.lang.time.FastDateFormat.parseToken(java.lang.String, int[])",
        "snippet": "    protected String parseToken(String pattern, int[] indexRef) {\n        StringBuffer buf = new StringBuffer();\n\n        int i = indexRef[0];\n        int length = pattern.length();\n\n        char c = pattern.charAt(i);\n        if (c >= 'A' && c <= 'Z' || c >= 'a' && c <= 'z') {\n            // Scan a run of the same character, which indicates a time\n            // pattern.\n            buf.append(c);\n\n            while (i + 1 < length) {\n                char peek = pattern.charAt(i + 1);\n                if (peek == c) {\n                    buf.append(c);\n                    i++;\n                } else {\n                    break;\n                }\n            }\n        } else {\n            // This will identify token as text.\n            buf.append('\\'');\n\n            boolean inLiteral = false;\n\n            for (; i < length; i++) {\n                c = pattern.charAt(i);\n\n                if (c == '\\'') {\n                    if (i + 1 < length && pattern.charAt(i + 1) == '\\'') {\n                        // '' is treated as escaped '\n                        i++;\n                        buf.append(c);\n                    } else {\n                        inLiteral = !inLiteral;\n                    }\n                } else if (!inLiteral &&\n                         (c >= 'A' && c <= 'Z' || c >= 'a' && c <= 'z')) {\n                    i--;\n                    break;\n                } else {\n                    buf.append(c);\n                }\n            }\n        }\n\n        indexRef[0] = i;\n        return buf.toString();\n    }\n",
        "begin_line": 711,
        "end_line": 761,
        "comment": "\n     * <p>Performs the parsing of tokens.</p>\n     * \n     * @param pattern  the pattern\n     * @param indexRef  index references\n     * @return parsed token\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2294
        },
        "num_failing_tests": 1
    },
    {
        "name": "FastDateFormat.hashCode#1001",
        "is_bug": false,
        "src_path": "src/java/org/apache/commons/lang/time/FastDateFormat.java",
        "class_name": "org.apache.commons.lang.time.FastDateFormat",
        "signature": "org.apache.commons.lang.time.FastDateFormat.hashCode()",
        "snippet": "    public int hashCode() {\n        int total = 0;\n        total += mPattern.hashCode();\n        total += mTimeZone.hashCode();\n        total += (mTimeZoneForced ? 1 : 0);\n        total += mLocale.hashCode();\n        total += (mLocaleForced ? 1 : 0);\n        return total;\n    }\n",
        "begin_line": 1001,
        "end_line": 1009,
        "comment": "\n     * <p>Returns a hashcode compatible with equals.</p>\n     * \n     * @return a hashcode compatible with equals\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2294
        },
        "num_failing_tests": 1
    }
]