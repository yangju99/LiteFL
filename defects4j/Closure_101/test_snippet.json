[
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.setUp()",
        "snippet": "  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    lastCompiler = null;\n    useStringComparison = false;\n    args.clear();\n  }\n",
        "begin_line": 57,
        "end_line": 63,
        "comment": "",
        "child_ranges": [
            "(line 59,col 5)-(line 59,col 18)",
            "(line 60,col 5)-(line 60,col 24)",
            "(line 61,col 5)-(line 61,col 32)",
            "(line 62,col 5)-(line 62,col 17)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.tearDown()",
        "snippet": "  @Override\n  public void tearDown() throws Exception {\n    super.tearDown();\n  }\n",
        "begin_line": 65,
        "end_line": 68,
        "comment": "",
        "child_ranges": [
            "(line 67,col 5)-(line 67,col 21)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testTypeCheckingOffByDefault()",
        "snippet": "  public void testTypeCheckingOffByDefault() {\n    test(\"function f(x) { return x; } f();\",\n         \"function f(a) { return a; } f();\");\n  }\n",
        "begin_line": 70,
        "end_line": 73,
        "comment": "",
        "child_ranges": [
            "(line 71,col 5)-(line 72,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testTypeCheckingOnWithVerbose()",
        "snippet": "  public void testTypeCheckingOnWithVerbose() {\n    args.add(\"--warning_level=VERBOSE\");\n    test(\"function f(x) { return x; } f();\", TypeCheck.WRONG_ARGUMENT_COUNT);\n  }\n",
        "begin_line": 75,
        "end_line": 78,
        "comment": "",
        "child_ranges": [
            "(line 76,col 5)-(line 76,col 40)",
            "(line 77,col 5)-(line 77,col 77)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testTypeCheckOverride1()",
        "snippet": "  public void testTypeCheckOverride1() {\n    args.add(\"--warning_level=VERBOSE\");\n    args.add(\"--jscomp_off=checkTypes\");\n    testSame(\"var x = x || {}; x.f = function() {}; x.f(3);\");\n  }\n",
        "begin_line": 80,
        "end_line": 84,
        "comment": "",
        "child_ranges": [
            "(line 81,col 5)-(line 81,col 40)",
            "(line 82,col 5)-(line 82,col 40)",
            "(line 83,col 5)-(line 83,col 62)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testTypeCheckOverride2()",
        "snippet": "  public void testTypeCheckOverride2() {\n    args.add(\"--warning_level=DEFAULT\");\n    testSame(\"var x = x || {}; x.f = function() {}; x.f(3);\");\n\n    args.add(\"--jscomp_warning=checkTypes\");\n    test(\"var x = x || {}; x.f = function() {}; x.f(3);\",\n         TypeCheck.WRONG_ARGUMENT_COUNT);\n  }\n",
        "begin_line": 86,
        "end_line": 93,
        "comment": "",
        "child_ranges": [
            "(line 87,col 5)-(line 87,col 40)",
            "(line 88,col 5)-(line 88,col 62)",
            "(line 90,col 5)-(line 90,col 44)",
            "(line 91,col 5)-(line 92,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testCheckSymbolsOffForDefault()",
        "snippet": "  public void testCheckSymbolsOffForDefault() {\n    args.add(\"--warning_level=DEFAULT\");\n    test(\"x = 3; var y; var y;\", \"x=3; var y;\");\n  }\n",
        "begin_line": 95,
        "end_line": 98,
        "comment": "",
        "child_ranges": [
            "(line 96,col 5)-(line 96,col 40)",
            "(line 97,col 5)-(line 97,col 48)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testCheckSymbolsOnForVerbose()",
        "snippet": "  public void testCheckSymbolsOnForVerbose() {\n    args.add(\"--warning_level=VERBOSE\");\n    test(\"x = 3;\", VarCheck.UNDEFINED_VAR_ERROR);\n    test(\"var y; var y;\", SyntacticScopeCreator.VAR_MULTIPLY_DECLARED_ERROR);\n  }\n",
        "begin_line": 100,
        "end_line": 104,
        "comment": "",
        "child_ranges": [
            "(line 101,col 5)-(line 101,col 40)",
            "(line 102,col 5)-(line 102,col 49)",
            "(line 103,col 5)-(line 103,col 77)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testCheckSymbolsOverrideForVerbose()",
        "snippet": "  public void testCheckSymbolsOverrideForVerbose() {\n    args.add(\"--warning_level=VERBOSE\");\n    args.add(\"--jscomp_off=undefinedVars\");\n    testSame(\"x = 3;\");\n  }\n",
        "begin_line": 106,
        "end_line": 110,
        "comment": "",
        "child_ranges": [
            "(line 107,col 5)-(line 107,col 40)",
            "(line 108,col 5)-(line 108,col 43)",
            "(line 109,col 5)-(line 109,col 23)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testCheckUndefinedProperties()",
        "snippet": "  public void testCheckUndefinedProperties() {\n    args.add(\"--warning_level=VERBOSE\");\n    args.add(\"--jscomp_error=missingProperties\");\n    test(\"var x = {}; var y = x.bar;\", TypeCheck.INEXISTENT_PROPERTY);\n  }\n",
        "begin_line": 112,
        "end_line": 116,
        "comment": "",
        "child_ranges": [
            "(line 113,col 5)-(line 113,col 40)",
            "(line 114,col 5)-(line 114,col 49)",
            "(line 115,col 5)-(line 115,col 70)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testDuplicateParams()",
        "snippet": "  public void testDuplicateParams() {\n    test(\"function (a, a) {}\", RhinoErrorReporter.DUPLICATE_PARAM);\n    assertTrue(lastCompiler.hasHaltingErrors());\n  }\n",
        "begin_line": 118,
        "end_line": 121,
        "comment": "",
        "child_ranges": [
            "(line 119,col 5)-(line 119,col 67)",
            "(line 120,col 5)-(line 120,col 48)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testDefineFlag()",
        "snippet": "  public void testDefineFlag() {\n    args.add(\"--define=FOO\");\n    args.add(\"--define=\\\"BAR=5\\\"\");\n    args.add(\"--D\"); args.add(\"CCC\");\n    args.add(\"-D\"); args.add(\"DDD\");\n    test(\"/** @define {boolean} */ var FOO = false;\" +\n         \"/** @define {number} */ var BAR = 3;\" +\n         \"/** @define {boolean} */ var CCC = false;\" +\n         \"/** @define {boolean} */ var DDD = false;\",\n         \"var FOO = true, BAR = 5, CCC = true, DDD = true;\");\n  }\n",
        "begin_line": 123,
        "end_line": 133,
        "comment": "",
        "child_ranges": [
            "(line 124,col 5)-(line 124,col 29)",
            "(line 125,col 5)-(line 125,col 35)",
            "(line 126,col 5)-(line 126,col 20)",
            "(line 126,col 22)-(line 126,col 37)",
            "(line 127,col 5)-(line 127,col 19)",
            "(line 127,col 21)-(line 127,col 36)",
            "(line 128,col 5)-(line 132,col 61)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testScriptStrictModeNoWarning()",
        "snippet": "  public void testScriptStrictModeNoWarning() {\n    test(\"'use strict';\", \"\");\n    test(\"'no use strict';\", CheckSideEffects.USELESS_CODE_ERROR);\n  }\n",
        "begin_line": 135,
        "end_line": 138,
        "comment": "",
        "child_ranges": [
            "(line 136,col 5)-(line 136,col 30)",
            "(line 137,col 5)-(line 137,col 66)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testFunctionStrictModeNoWarning()",
        "snippet": "  public void testFunctionStrictModeNoWarning() {\n    test(\"function f() {'use strict';}\", \"function f() {}\");\n    test(\"function f() {'no use strict';}\",\n         CheckSideEffects.USELESS_CODE_ERROR);\n  }\n",
        "begin_line": 140,
        "end_line": 144,
        "comment": "",
        "child_ranges": [
            "(line 141,col 5)-(line 141,col 60)",
            "(line 142,col 5)-(line 143,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testQuietMode()",
        "snippet": "  public void testQuietMode() {\n    args.add(\"--warning_level=DEFAULT\");\n    test(\"/** @type { not a type name } */ var x;\",\n         RhinoErrorReporter.PARSE_ERROR);\n    args.add(\"--warning_level=QUIET\");\n    testSame(\"/** @type { not a type name } */ var x;\");\n  }\n",
        "begin_line": 146,
        "end_line": 152,
        "comment": "",
        "child_ranges": [
            "(line 147,col 5)-(line 147,col 40)",
            "(line 148,col 5)-(line 149,col 41)",
            "(line 150,col 5)-(line 150,col 38)",
            "(line 151,col 5)-(line 151,col 56)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testProcessClosurePrimitives()",
        "snippet": "  public void testProcessClosurePrimitives() {\n    test(\"var goog = {}; goog.provide('goog.dom');\",\n         \"var goog = {}; goog.dom = {};\");\n    args.add(\"--process_closure_primitives=false\");\n    testSame(\"var goog = {}; goog.provide('goog.dom');\");\n  }\n",
        "begin_line": 154,
        "end_line": 159,
        "comment": "",
        "child_ranges": [
            "(line 155,col 5)-(line 156,col 42)",
            "(line 157,col 5)-(line 157,col 51)",
            "(line 158,col 5)-(line 158,col 57)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testIssue70()",
        "snippet": "  public void testIssue70() {\n    test(\"function foo({}) {}\", RhinoErrorReporter.PARSE_ERROR);\n  }\n",
        "begin_line": 164,
        "end_line": 166,
        "comment": "",
        "child_ranges": [
            "(line 165,col 5)-(line 165,col 64)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testIssue81()",
        "snippet": "  public void testIssue81() {\n    args.add(\"--compilation_level=ADVANCED_OPTIMIZATIONS\");\n    useStringComparison = true;\n    test(\"eval('1'); var x = eval; x('2');\",\n         \"eval(\\\"1\\\");(0,eval)(\\\"2\\\");\");\n  }\n",
        "begin_line": 168,
        "end_line": 173,
        "comment": "",
        "child_ranges": [
            "(line 169,col 5)-(line 169,col 59)",
            "(line 170,col 5)-(line 170,col 31)",
            "(line 171,col 5)-(line 172,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testIssue115()",
        "snippet": "  public void testIssue115() {\n    args.add(\"--compilation_level=SIMPLE_OPTIMIZATIONS\");\n    args.add(\"--warning_level=VERBOSE\");\n    test(\"function f() { \" +\n         \"  var arguments = Array.prototype.slice.call(arguments, 0);\" +\n         \"  return arguments[0]; \" +\n         \"}\",\n         \"function f() { \" +\n         \"  arguments = Array.prototype.slice.call(arguments, 0);\" +\n         \"  return arguments[0]; \" +\n         \"}\");\n  }\n",
        "begin_line": 175,
        "end_line": 186,
        "comment": "",
        "child_ranges": [
            "(line 176,col 5)-(line 176,col 57)",
            "(line 177,col 5)-(line 177,col 40)",
            "(line 178,col 5)-(line 185,col 14)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testDebugFlag1()",
        "snippet": "  public void testDebugFlag1() {\n    args.add(\"--compilation_level=SIMPLE_OPTIMIZATIONS\");\n    args.add(\"--debug=false\");\n    testSame(\"function foo(a) {}\");\n  }\n",
        "begin_line": 188,
        "end_line": 192,
        "comment": "",
        "child_ranges": [
            "(line 189,col 5)-(line 189,col 57)",
            "(line 190,col 5)-(line 190,col 30)",
            "(line 191,col 5)-(line 191,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testDebugFlag2()",
        "snippet": "  public void testDebugFlag2() {\n    args.add(\"--compilation_level=SIMPLE_OPTIMIZATIONS\");\n    args.add(\"--debug=true\");\n    test(\"function foo(a) {}\",\n         \"function foo($a$$) {}\");\n  }\n",
        "begin_line": 194,
        "end_line": 199,
        "comment": "",
        "child_ranges": [
            "(line 195,col 5)-(line 195,col 57)",
            "(line 196,col 5)-(line 196,col 29)",
            "(line 197,col 5)-(line 198,col 34)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testDebugFlag3()",
        "snippet": "  public void testDebugFlag3() {\n    args.add(\"--compilation_level=ADVANCED_OPTIMIZATIONS\");\n    args.add(\"--warning_level=QUIET\");\n    args.add(\"--debug=false\");\n    test(\"function Foo() {};\" +\n         \"Foo.x = 1;\" +\n         \"function f() {throw new Foo().x;} f();\",\n         \"function a() {};\" +\n         \"throw new a().a;\");\n  }\n",
        "begin_line": 201,
        "end_line": 210,
        "comment": "",
        "child_ranges": [
            "(line 202,col 5)-(line 202,col 59)",
            "(line 203,col 5)-(line 203,col 38)",
            "(line 204,col 5)-(line 204,col 30)",
            "(line 205,col 5)-(line 209,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testDebugFlag4()",
        "snippet": "  public void testDebugFlag4() {\n    args.add(\"--compilation_level=ADVANCED_OPTIMIZATIONS\");\n    args.add(\"--warning_level=QUIET\");\n    args.add(\"--debug=true\");\n    test(\"function Foo() {};\" +\n        \"Foo.x = 1;\" +\n        \"function f() {throw new Foo().x;} f();\",\n        \"function $Foo$$() {};\" +\n        \"throw new $Foo$$().$x$;\");\n  }\n",
        "begin_line": 212,
        "end_line": 221,
        "comment": "",
        "child_ranges": [
            "(line 213,col 5)-(line 213,col 59)",
            "(line 214,col 5)-(line 214,col 38)",
            "(line 215,col 5)-(line 215,col 29)",
            "(line 216,col 5)-(line 220,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testSame(java.lang.String)",
        "snippet": "  private void testSame(String original) {\n    testSame(new String[] { original });\n  }\n",
        "begin_line": 225,
        "end_line": 227,
        "comment": "",
        "child_ranges": [
            "(line 226,col 5)-(line 226,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testSame(java.lang.String[])",
        "snippet": "  private void testSame(String[] original) {\n    test(original, original);\n  }\n",
        "begin_line": 229,
        "end_line": 231,
        "comment": "",
        "child_ranges": [
            "(line 230,col 5)-(line 230,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.test(java.lang.String, java.lang.String)",
        "snippet": "  private void test(String original, String compiled) {\n    test(new String[] { original }, new String[] { compiled });\n  }\n",
        "begin_line": 233,
        "end_line": 235,
        "comment": "",
        "child_ranges": [
            "(line 234,col 5)-(line 234,col 63)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.test(java.lang.String[], java.lang.String[])",
        "snippet": "  private void test(String[] original, String[] compiled) {\n    Compiler compiler = compile(original);\n    assertEquals(\"Expected no warnings or errors\\n\" +\n        \"Errors: \\n\" + Joiner.on(\"\\n\").join(compiler.getErrors()) +\n        \"Warnings: \\n\" + Joiner.on(\"\\n\").join(compiler.getWarnings()),\n        0, compiler.getErrors().length + compiler.getWarnings().length);\n\n    Node root = compiler.getRoot().getLastChild();\n    if (useStringComparison) {\n      assertEquals(Joiner.on(\"\").join(compiled), compiler.toSource());\n    } else {\n      Node expectedRoot = parse(compiled);\n      String explanation = expectedRoot.checkTreeEquals(root);\n      assertNull(\"\\nExpected: \" + compiler.toSource(expectedRoot) +\n          \"\\nResult: \" + compiler.toSource(root) +\n          \"\\n\" + explanation, explanation);\n    }\n  }\n",
        "begin_line": 241,
        "end_line": 258,
        "comment": "\n   * Asserts that when compiling with the given compiler options,\n   * {@code original} is transformed into {@code compiled}.\n   ",
        "child_ranges": [
            "(line 242,col 5)-(line 242,col 42)",
            "(line 243,col 5)-(line 246,col 72)",
            "(line 248,col 5)-(line 248,col 50)",
            "(line 249,col 5)-(line 257,col 5)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.test(java.lang.String, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  private void test(String original, DiagnosticType warning) {\n    test(new String[] { original }, warning);\n  }\n",
        "begin_line": 263,
        "end_line": 265,
        "comment": "\n   * Asserts that when compiling, there is an error or warning.\n   ",
        "child_ranges": [
            "(line 264,col 5)-(line 264,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.test(java.lang.String[], com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  private void test(String[] original, DiagnosticType warning) {\n    Compiler compiler = compile(original);\n    assertEquals(\"Expected exactly one warning or error \" +\n        \"Errors: \\n\" + Joiner.on(\"\\n\").join(compiler.getErrors()) +\n        \"Warnings: \\n\" + Joiner.on(\"\\n\").join(compiler.getWarnings()),\n        1, compiler.getErrors().length + compiler.getWarnings().length);\n    if (compiler.getErrors().length > 0) {\n      assertEquals(warning, compiler.getErrors()[0].getType());\n    } else {\n      assertEquals(warning, compiler.getWarnings()[0].getType());\n    }\n  }\n",
        "begin_line": 270,
        "end_line": 281,
        "comment": "\n   * Asserts that when compiling, there is an error or warning.\n   ",
        "child_ranges": [
            "(line 271,col 5)-(line 271,col 42)",
            "(line 272,col 5)-(line 275,col 72)",
            "(line 276,col 5)-(line 280,col 5)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.compile(java.lang.String)",
        "snippet": "  private Compiler compile(String original) {\n    return compile( new String[] { original });\n  }\n",
        "begin_line": 283,
        "end_line": 285,
        "comment": "",
        "child_ranges": [
            "(line 284,col 5)-(line 284,col 47)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.compile(java.lang.String[])",
        "snippet": "  private Compiler compile(String[] original) {\n    String[] argStrings = args.toArray(new String[] {});\n    CommandLineRunner runner = null;\n    try {\n      runner = new CommandLineRunner(argStrings);\n    } catch (CmdLineException e) {\n      throw new RuntimeException(e);\n    }\n    Compiler compiler = runner.createCompiler();\n    lastCompiler = compiler;\n    JSSourceFile[] inputs = new JSSourceFile[original.length];\n    for (int i = 0; i < original.length; i++) {\n      inputs[i] = JSSourceFile.fromCode(\"input\" + i, original[i]);\n    }\n    CompilerOptions options = runner.createOptions();\n    try {\n      runner.setRunOptions(options);\n    } catch (AbstractCommandLineRunner.FlagUsageException e) {\n      fail(\"Unexpected exception \" + e);\n    } catch (IOException e) {\n      assert(false);\n    }\n    compiler.compile(\n        externs, CompilerTestCase.createModuleChain(original), options);\n    return compiler;\n  }\n",
        "begin_line": 287,
        "end_line": 312,
        "comment": "",
        "child_ranges": [
            "(line 288,col 5)-(line 288,col 56)",
            "(line 289,col 5)-(line 289,col 36)",
            "(line 290,col 5)-(line 294,col 5)",
            "(line 295,col 5)-(line 295,col 48)",
            "(line 296,col 5)-(line 296,col 28)",
            "(line 297,col 5)-(line 297,col 62)",
            "(line 298,col 5)-(line 300,col 5)",
            "(line 301,col 5)-(line 301,col 53)",
            "(line 302,col 5)-(line 308,col 5)",
            "(line 309,col 5)-(line 310,col 72)",
            "(line 311,col 5)-(line 311,col 20)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.parse(java.lang.String[])",
        "snippet": "  private Node parse(String[] original) {\n    String[] argStrings = args.toArray(new String[] {});\n    CommandLineRunner runner = null;\n    try {\n      runner = new CommandLineRunner(argStrings);\n    } catch (CmdLineException e) {\n      throw new RuntimeException(e);\n    }\n    Compiler compiler = runner.createCompiler();\n    JSSourceFile[] inputs = new JSSourceFile[original.length];\n    for (int i = 0; i < inputs.length; i++) {\n      inputs[i] = JSSourceFile.fromCode(\"input\" + i, original[i]);\n    }\n    compiler.init(externs, inputs, new CompilerOptions());\n    Node all = compiler.parseInputs();\n    Node n = all.getLastChild();\n    return n;\n  }\n",
        "begin_line": 314,
        "end_line": 331,
        "comment": "",
        "child_ranges": [
            "(line 315,col 5)-(line 315,col 56)",
            "(line 316,col 5)-(line 316,col 36)",
            "(line 317,col 5)-(line 321,col 5)",
            "(line 322,col 5)-(line 322,col 48)",
            "(line 323,col 5)-(line 323,col 62)",
            "(line 324,col 5)-(line 326,col 5)",
            "(line 327,col 5)-(line 327,col 58)",
            "(line 328,col 5)-(line 328,col 38)",
            "(line 329,col 5)-(line 329,col 32)",
            "(line 330,col 5)-(line 330,col 13)"
        ]
    }
]