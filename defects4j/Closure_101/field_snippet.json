[
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 1L;",
        "begin_line": 65,
        "end_line": 65,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.LOCAL_BLOCK_PROP",
        "snippet": "    public static final int\n        // Rhino's AST captures data flow. These are the annotations\n        // it used. We've mostly torn them out.\n        LOCAL_BLOCK_PROP  = -3,\n        OBJECT_IDS_PROP   = -2,\n        CATCH_SCOPE_PROP  = -1,\n        LABEL_ID_PROP     =  0,\n\n        TARGET_PROP       =  1,\n        BREAK_PROP        =  2,\n        CONTINUE_PROP     =  3,\n        ENUM_PROP         =  4,\n        FUNCTION_PROP     =  5,\n        TEMP_PROP         =  6,\n        LOCAL_PROP        =  7,\n        CODEOFFSET_PROP   =  8,\n        FIXUPS_PROP       =  9,\n        VARS_PROP         = 10,\n        USES_PROP         = 11,\n        REGEXP_PROP       = 12,\n        CASES_PROP        = 13,\n        DEFAULT_PROP      = 14,\n        CASEARRAY_PROP    = 15,\n        SOURCENAME_PROP   = 16,\n        TYPE_PROP         = 17,\n        SPECIAL_PROP_PROP = 18,\n        LABEL_PROP        = 19,\n        FINALLY_PROP      = 20,\n        LOCALCOUNT_PROP   = 21,\n    /*\n        the following properties are defined and manipulated by the\n        optimizer -\n        TARGETBLOCK_PROP - the block referenced by a branch node\n        VARIABLE_PROP - the variable referenced by a BIND or NAME node\n        LASTUSE_PROP - that variable node is the last reference before\n                        a new def or the end of the block\n        ISNUMBER_PROP - this node generates code on Number children and\n                        delivers a Number result (as opposed to Objects)\n        DIRECTCALL_PROP - this call node should emit code to test the function\n                          object against the known class and call diret if it\n                          matches.\n    */\n\n        TARGETBLOCK_PROP  = 22,\n        VARIABLE_PROP     = 23,\n        LASTUSE_PROP      = 24,\n        ISNUMBER_PROP     = 25,\n        DIRECTCALL_PROP   = 26,\n\n        SPECIALCALL_PROP  = 27,\n        DEBUGSOURCE_PROP  = 28,\n        JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n        VAR_ARGS_NAME     = 29,     // the name node is a variable length\n                                    // argument placeholder. It can never be\n                                    // used in conjunction with JSDOC_INFO_PROP.\n        SKIP_INDEXES_PROP  = 30,    // array of skipped indexes of array literal\n        INCRDECR_PROP      = 31,    // pre or post type of increment/decrement\n        MEMBER_TYPE_PROP   = 32,    // type of element access operation\n        NAME_PROP          = 33,    // property name\n        PARENTHESIZED_PROP = 34,    // expression is parenthesized\n        QUOTED_PROP        = 35,    // set to indicate a quoted object lit key\n        OPT_ARG_NAME       = 36,    // The name node is an optional argument.\n        SYNTHETIC_BLOCK_PROP = 37,  // A synthetic block. Used to make\n                                    // processing simpler, and does not\n                                    // represent a real block in the source.\n        SOURCEFILE_PROP    = 38,    // Contains the path of the source file\n                                    // from which the current node was parsed.\n        EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                    // EMPTY nodes.\n        ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                    // renaming.\n        BRACELESS_TYPE     = 41,    // The type syntax without curly braces.\n        NO_SIDE_EFFECTS_CALL = 42,  // Function or constructor call has no\n                                    // side effects.\n        // Coding convention props\n        IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n        IS_OPTIONAL_PARAM  = 44,    // The parameter is optional.\n        IS_VAR_ARGS_PARAM  = 45,    // The parameter is a var_args.\n        IS_NAMESPACE       = 46,    // The variable creates a namespace.\n        IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                    // probably generated from Java code, and\n                                    // should be resolved to the proper\n                                    // overload if possible.\n        DIRECTIVES         = 48,    // The ES5 directives on this node.\n        DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                    // indirect calls to eval.\n        LAST_PROP          = 49;",
        "begin_line": 67,
        "end_line": 153,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.OBJECT_IDS_PROP",
        "snippet": "    public static final int\n        // Rhino's AST captures data flow. These are the annotations\n        // it used. We've mostly torn them out.\n        LOCAL_BLOCK_PROP  = -3,\n        OBJECT_IDS_PROP   = -2,\n        CATCH_SCOPE_PROP  = -1,\n        LABEL_ID_PROP     =  0,\n\n        TARGET_PROP       =  1,\n        BREAK_PROP        =  2,\n        CONTINUE_PROP     =  3,\n        ENUM_PROP         =  4,\n        FUNCTION_PROP     =  5,\n        TEMP_PROP         =  6,\n        LOCAL_PROP        =  7,\n        CODEOFFSET_PROP   =  8,\n        FIXUPS_PROP       =  9,\n        VARS_PROP         = 10,\n        USES_PROP         = 11,\n        REGEXP_PROP       = 12,\n        CASES_PROP        = 13,\n        DEFAULT_PROP      = 14,\n        CASEARRAY_PROP    = 15,\n        SOURCENAME_PROP   = 16,\n        TYPE_PROP         = 17,\n        SPECIAL_PROP_PROP = 18,\n        LABEL_PROP        = 19,\n        FINALLY_PROP      = 20,\n        LOCALCOUNT_PROP   = 21,\n    /*\n        the following properties are defined and manipulated by the\n        optimizer -\n        TARGETBLOCK_PROP - the block referenced by a branch node\n        VARIABLE_PROP - the variable referenced by a BIND or NAME node\n        LASTUSE_PROP - that variable node is the last reference before\n                        a new def or the end of the block\n        ISNUMBER_PROP - this node generates code on Number children and\n                        delivers a Number result (as opposed to Objects)\n        DIRECTCALL_PROP - this call node should emit code to test the function\n                          object against the known class and call diret if it\n                          matches.\n    */\n\n        TARGETBLOCK_PROP  = 22,\n        VARIABLE_PROP     = 23,\n        LASTUSE_PROP      = 24,\n        ISNUMBER_PROP     = 25,\n        DIRECTCALL_PROP   = 26,\n\n        SPECIALCALL_PROP  = 27,\n        DEBUGSOURCE_PROP  = 28,\n        JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n        VAR_ARGS_NAME     = 29,     // the name node is a variable length\n                                    // argument placeholder. It can never be\n                                    // used in conjunction with JSDOC_INFO_PROP.\n        SKIP_INDEXES_PROP  = 30,    // array of skipped indexes of array literal\n        INCRDECR_PROP      = 31,    // pre or post type of increment/decrement\n        MEMBER_TYPE_PROP   = 32,    // type of element access operation\n        NAME_PROP          = 33,    // property name\n        PARENTHESIZED_PROP = 34,    // expression is parenthesized\n        QUOTED_PROP        = 35,    // set to indicate a quoted object lit key\n        OPT_ARG_NAME       = 36,    // The name node is an optional argument.\n        SYNTHETIC_BLOCK_PROP = 37,  // A synthetic block. Used to make\n                                    // processing simpler, and does not\n                                    // represent a real block in the source.\n        SOURCEFILE_PROP    = 38,    // Contains the path of the source file\n                                    // from which the current node was parsed.\n        EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                    // EMPTY nodes.\n        ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                    // renaming.\n        BRACELESS_TYPE     = 41,    // The type syntax without curly braces.\n        NO_SIDE_EFFECTS_CALL = 42,  // Function or constructor call has no\n                                    // side effects.\n        // Coding convention props\n        IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n        IS_OPTIONAL_PARAM  = 44,    // The parameter is optional.\n        IS_VAR_ARGS_PARAM  = 45,    // The parameter is a var_args.\n        IS_NAMESPACE       = 46,    // The variable creates a namespace.\n        IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                    // probably generated from Java code, and\n                                    // should be resolved to the proper\n                                    // overload if possible.\n        DIRECTIVES         = 48,    // The ES5 directives on this node.\n        DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                    // indirect calls to eval.\n        LAST_PROP          = 49;",
        "begin_line": 67,
        "end_line": 153,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.CATCH_SCOPE_PROP",
        "snippet": "    public static final int\n        // Rhino's AST captures data flow. These are the annotations\n        // it used. We've mostly torn them out.\n        LOCAL_BLOCK_PROP  = -3,\n        OBJECT_IDS_PROP   = -2,\n        CATCH_SCOPE_PROP  = -1,\n        LABEL_ID_PROP     =  0,\n\n        TARGET_PROP       =  1,\n        BREAK_PROP        =  2,\n        CONTINUE_PROP     =  3,\n        ENUM_PROP         =  4,\n        FUNCTION_PROP     =  5,\n        TEMP_PROP         =  6,\n        LOCAL_PROP        =  7,\n        CODEOFFSET_PROP   =  8,\n        FIXUPS_PROP       =  9,\n        VARS_PROP         = 10,\n        USES_PROP         = 11,\n        REGEXP_PROP       = 12,\n        CASES_PROP        = 13,\n        DEFAULT_PROP      = 14,\n        CASEARRAY_PROP    = 15,\n        SOURCENAME_PROP   = 16,\n        TYPE_PROP         = 17,\n        SPECIAL_PROP_PROP = 18,\n        LABEL_PROP        = 19,\n        FINALLY_PROP      = 20,\n        LOCALCOUNT_PROP   = 21,\n    /*\n        the following properties are defined and manipulated by the\n        optimizer -\n        TARGETBLOCK_PROP - the block referenced by a branch node\n        VARIABLE_PROP - the variable referenced by a BIND or NAME node\n        LASTUSE_PROP - that variable node is the last reference before\n                        a new def or the end of the block\n        ISNUMBER_PROP - this node generates code on Number children and\n                        delivers a Number result (as opposed to Objects)\n        DIRECTCALL_PROP - this call node should emit code to test the function\n                          object against the known class and call diret if it\n                          matches.\n    */\n\n        TARGETBLOCK_PROP  = 22,\n        VARIABLE_PROP     = 23,\n        LASTUSE_PROP      = 24,\n        ISNUMBER_PROP     = 25,\n        DIRECTCALL_PROP   = 26,\n\n        SPECIALCALL_PROP  = 27,\n        DEBUGSOURCE_PROP  = 28,\n        JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n        VAR_ARGS_NAME     = 29,     // the name node is a variable length\n                                    // argument placeholder. It can never be\n                                    // used in conjunction with JSDOC_INFO_PROP.\n        SKIP_INDEXES_PROP  = 30,    // array of skipped indexes of array literal\n        INCRDECR_PROP      = 31,    // pre or post type of increment/decrement\n        MEMBER_TYPE_PROP   = 32,    // type of element access operation\n        NAME_PROP          = 33,    // property name\n        PARENTHESIZED_PROP = 34,    // expression is parenthesized\n        QUOTED_PROP        = 35,    // set to indicate a quoted object lit key\n        OPT_ARG_NAME       = 36,    // The name node is an optional argument.\n        SYNTHETIC_BLOCK_PROP = 37,  // A synthetic block. Used to make\n                                    // processing simpler, and does not\n                                    // represent a real block in the source.\n        SOURCEFILE_PROP    = 38,    // Contains the path of the source file\n                                    // from which the current node was parsed.\n        EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                    // EMPTY nodes.\n        ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                    // renaming.\n        BRACELESS_TYPE     = 41,    // The type syntax without curly braces.\n        NO_SIDE_EFFECTS_CALL = 42,  // Function or constructor call has no\n                                    // side effects.\n        // Coding convention props\n        IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n        IS_OPTIONAL_PARAM  = 44,    // The parameter is optional.\n        IS_VAR_ARGS_PARAM  = 45,    // The parameter is a var_args.\n        IS_NAMESPACE       = 46,    // The variable creates a namespace.\n        IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                    // probably generated from Java code, and\n                                    // should be resolved to the proper\n                                    // overload if possible.\n        DIRECTIVES         = 48,    // The ES5 directives on this node.\n        DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                    // indirect calls to eval.\n        LAST_PROP          = 49;",
        "begin_line": 67,
        "end_line": 153,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.LABEL_ID_PROP",
        "snippet": "    public static final int\n        // Rhino's AST captures data flow. These are the annotations\n        // it used. We've mostly torn them out.\n        LOCAL_BLOCK_PROP  = -3,\n        OBJECT_IDS_PROP   = -2,\n        CATCH_SCOPE_PROP  = -1,\n        LABEL_ID_PROP     =  0,\n\n        TARGET_PROP       =  1,\n        BREAK_PROP        =  2,\n        CONTINUE_PROP     =  3,\n        ENUM_PROP         =  4,\n        FUNCTION_PROP     =  5,\n        TEMP_PROP         =  6,\n        LOCAL_PROP        =  7,\n        CODEOFFSET_PROP   =  8,\n        FIXUPS_PROP       =  9,\n        VARS_PROP         = 10,\n        USES_PROP         = 11,\n        REGEXP_PROP       = 12,\n        CASES_PROP        = 13,\n        DEFAULT_PROP      = 14,\n        CASEARRAY_PROP    = 15,\n        SOURCENAME_PROP   = 16,\n        TYPE_PROP         = 17,\n        SPECIAL_PROP_PROP = 18,\n        LABEL_PROP        = 19,\n        FINALLY_PROP      = 20,\n        LOCALCOUNT_PROP   = 21,\n    /*\n        the following properties are defined and manipulated by the\n        optimizer -\n        TARGETBLOCK_PROP - the block referenced by a branch node\n        VARIABLE_PROP - the variable referenced by a BIND or NAME node\n        LASTUSE_PROP - that variable node is the last reference before\n                        a new def or the end of the block\n        ISNUMBER_PROP - this node generates code on Number children and\n                        delivers a Number result (as opposed to Objects)\n        DIRECTCALL_PROP - this call node should emit code to test the function\n                          object against the known class and call diret if it\n                          matches.\n    */\n\n        TARGETBLOCK_PROP  = 22,\n        VARIABLE_PROP     = 23,\n        LASTUSE_PROP      = 24,\n        ISNUMBER_PROP     = 25,\n        DIRECTCALL_PROP   = 26,\n\n        SPECIALCALL_PROP  = 27,\n        DEBUGSOURCE_PROP  = 28,\n        JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n        VAR_ARGS_NAME     = 29,     // the name node is a variable length\n                                    // argument placeholder. It can never be\n                                    // used in conjunction with JSDOC_INFO_PROP.\n        SKIP_INDEXES_PROP  = 30,    // array of skipped indexes of array literal\n        INCRDECR_PROP      = 31,    // pre or post type of increment/decrement\n        MEMBER_TYPE_PROP   = 32,    // type of element access operation\n        NAME_PROP          = 33,    // property name\n        PARENTHESIZED_PROP = 34,    // expression is parenthesized\n        QUOTED_PROP        = 35,    // set to indicate a quoted object lit key\n        OPT_ARG_NAME       = 36,    // The name node is an optional argument.\n        SYNTHETIC_BLOCK_PROP = 37,  // A synthetic block. Used to make\n                                    // processing simpler, and does not\n                                    // represent a real block in the source.\n        SOURCEFILE_PROP    = 38,    // Contains the path of the source file\n                                    // from which the current node was parsed.\n        EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                    // EMPTY nodes.\n        ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                    // renaming.\n        BRACELESS_TYPE     = 41,    // The type syntax without curly braces.\n        NO_SIDE_EFFECTS_CALL = 42,  // Function or constructor call has no\n                                    // side effects.\n        // Coding convention props\n        IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n        IS_OPTIONAL_PARAM  = 44,    // The parameter is optional.\n        IS_VAR_ARGS_PARAM  = 45,    // The parameter is a var_args.\n        IS_NAMESPACE       = 46,    // The variable creates a namespace.\n        IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                    // probably generated from Java code, and\n                                    // should be resolved to the proper\n                                    // overload if possible.\n        DIRECTIVES         = 48,    // The ES5 directives on this node.\n        DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                    // indirect calls to eval.\n        LAST_PROP          = 49;",
        "begin_line": 67,
        "end_line": 153,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.TARGET_PROP",
        "snippet": "    public static final int\n        // Rhino's AST captures data flow. These are the annotations\n        // it used. We've mostly torn them out.\n        LOCAL_BLOCK_PROP  = -3,\n        OBJECT_IDS_PROP   = -2,\n        CATCH_SCOPE_PROP  = -1,\n        LABEL_ID_PROP     =  0,\n\n        TARGET_PROP       =  1,\n        BREAK_PROP        =  2,\n        CONTINUE_PROP     =  3,\n        ENUM_PROP         =  4,\n        FUNCTION_PROP     =  5,\n        TEMP_PROP         =  6,\n        LOCAL_PROP        =  7,\n        CODEOFFSET_PROP   =  8,\n        FIXUPS_PROP       =  9,\n        VARS_PROP         = 10,\n        USES_PROP         = 11,\n        REGEXP_PROP       = 12,\n        CASES_PROP        = 13,\n        DEFAULT_PROP      = 14,\n        CASEARRAY_PROP    = 15,\n        SOURCENAME_PROP   = 16,\n        TYPE_PROP         = 17,\n        SPECIAL_PROP_PROP = 18,\n        LABEL_PROP        = 19,\n        FINALLY_PROP      = 20,\n        LOCALCOUNT_PROP   = 21,\n    /*\n        the following properties are defined and manipulated by the\n        optimizer -\n        TARGETBLOCK_PROP - the block referenced by a branch node\n        VARIABLE_PROP - the variable referenced by a BIND or NAME node\n        LASTUSE_PROP - that variable node is the last reference before\n                        a new def or the end of the block\n        ISNUMBER_PROP - this node generates code on Number children and\n                        delivers a Number result (as opposed to Objects)\n        DIRECTCALL_PROP - this call node should emit code to test the function\n                          object against the known class and call diret if it\n                          matches.\n    */\n\n        TARGETBLOCK_PROP  = 22,\n        VARIABLE_PROP     = 23,\n        LASTUSE_PROP      = 24,\n        ISNUMBER_PROP     = 25,\n        DIRECTCALL_PROP   = 26,\n\n        SPECIALCALL_PROP  = 27,\n        DEBUGSOURCE_PROP  = 28,\n        JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n        VAR_ARGS_NAME     = 29,     // the name node is a variable length\n                                    // argument placeholder. It can never be\n                                    // used in conjunction with JSDOC_INFO_PROP.\n        SKIP_INDEXES_PROP  = 30,    // array of skipped indexes of array literal\n        INCRDECR_PROP      = 31,    // pre or post type of increment/decrement\n        MEMBER_TYPE_PROP   = 32,    // type of element access operation\n        NAME_PROP          = 33,    // property name\n        PARENTHESIZED_PROP = 34,    // expression is parenthesized\n        QUOTED_PROP        = 35,    // set to indicate a quoted object lit key\n        OPT_ARG_NAME       = 36,    // The name node is an optional argument.\n        SYNTHETIC_BLOCK_PROP = 37,  // A synthetic block. Used to make\n                                    // processing simpler, and does not\n                                    // represent a real block in the source.\n        SOURCEFILE_PROP    = 38,    // Contains the path of the source file\n                                    // from which the current node was parsed.\n        EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                    // EMPTY nodes.\n        ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                    // renaming.\n        BRACELESS_TYPE     = 41,    // The type syntax without curly braces.\n        NO_SIDE_EFFECTS_CALL = 42,  // Function or constructor call has no\n                                    // side effects.\n        // Coding convention props\n        IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n        IS_OPTIONAL_PARAM  = 44,    // The parameter is optional.\n        IS_VAR_ARGS_PARAM  = 45,    // The parameter is a var_args.\n        IS_NAMESPACE       = 46,    // The variable creates a namespace.\n        IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                    // probably generated from Java code, and\n                                    // should be resolved to the proper\n                                    // overload if possible.\n        DIRECTIVES         = 48,    // The ES5 directives on this node.\n        DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                    // indirect calls to eval.\n        LAST_PROP          = 49;",
        "begin_line": 67,
        "end_line": 153,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.BREAK_PROP",
        "snippet": "    public static final int\n        // Rhino's AST captures data flow. These are the annotations\n        // it used. We've mostly torn them out.\n        LOCAL_BLOCK_PROP  = -3,\n        OBJECT_IDS_PROP   = -2,\n        CATCH_SCOPE_PROP  = -1,\n        LABEL_ID_PROP     =  0,\n\n        TARGET_PROP       =  1,\n        BREAK_PROP        =  2,\n        CONTINUE_PROP     =  3,\n        ENUM_PROP         =  4,\n        FUNCTION_PROP     =  5,\n        TEMP_PROP         =  6,\n        LOCAL_PROP        =  7,\n        CODEOFFSET_PROP   =  8,\n        FIXUPS_PROP       =  9,\n        VARS_PROP         = 10,\n        USES_PROP         = 11,\n        REGEXP_PROP       = 12,\n        CASES_PROP        = 13,\n        DEFAULT_PROP      = 14,\n        CASEARRAY_PROP    = 15,\n        SOURCENAME_PROP   = 16,\n        TYPE_PROP         = 17,\n        SPECIAL_PROP_PROP = 18,\n        LABEL_PROP        = 19,\n        FINALLY_PROP      = 20,\n        LOCALCOUNT_PROP   = 21,\n    /*\n        the following properties are defined and manipulated by the\n        optimizer -\n        TARGETBLOCK_PROP - the block referenced by a branch node\n        VARIABLE_PROP - the variable referenced by a BIND or NAME node\n        LASTUSE_PROP - that variable node is the last reference before\n                        a new def or the end of the block\n        ISNUMBER_PROP - this node generates code on Number children and\n                        delivers a Number result (as opposed to Objects)\n        DIRECTCALL_PROP - this call node should emit code to test the function\n                          object against the known class and call diret if it\n                          matches.\n    */\n\n        TARGETBLOCK_PROP  = 22,\n        VARIABLE_PROP     = 23,\n        LASTUSE_PROP      = 24,\n        ISNUMBER_PROP     = 25,\n        DIRECTCALL_PROP   = 26,\n\n        SPECIALCALL_PROP  = 27,\n        DEBUGSOURCE_PROP  = 28,\n        JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n        VAR_ARGS_NAME     = 29,     // the name node is a variable length\n                                    // argument placeholder. It can never be\n                                    // used in conjunction with JSDOC_INFO_PROP.\n        SKIP_INDEXES_PROP  = 30,    // array of skipped indexes of array literal\n        INCRDECR_PROP      = 31,    // pre or post type of increment/decrement\n        MEMBER_TYPE_PROP   = 32,    // type of element access operation\n        NAME_PROP          = 33,    // property name\n        PARENTHESIZED_PROP = 34,    // expression is parenthesized\n        QUOTED_PROP        = 35,    // set to indicate a quoted object lit key\n        OPT_ARG_NAME       = 36,    // The name node is an optional argument.\n        SYNTHETIC_BLOCK_PROP = 37,  // A synthetic block. Used to make\n                                    // processing simpler, and does not\n                                    // represent a real block in the source.\n        SOURCEFILE_PROP    = 38,    // Contains the path of the source file\n                                    // from which the current node was parsed.\n        EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                    // EMPTY nodes.\n        ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                    // renaming.\n        BRACELESS_TYPE     = 41,    // The type syntax without curly braces.\n        NO_SIDE_EFFECTS_CALL = 42,  // Function or constructor call has no\n                                    // side effects.\n        // Coding convention props\n        IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n        IS_OPTIONAL_PARAM  = 44,    // The parameter is optional.\n        IS_VAR_ARGS_PARAM  = 45,    // The parameter is a var_args.\n        IS_NAMESPACE       = 46,    // The variable creates a namespace.\n        IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                    // probably generated from Java code, and\n                                    // should be resolved to the proper\n                                    // overload if possible.\n        DIRECTIVES         = 48,    // The ES5 directives on this node.\n        DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                    // indirect calls to eval.\n        LAST_PROP          = 49;",
        "begin_line": 67,
        "end_line": 153,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.CONTINUE_PROP",
        "snippet": "    public static final int\n        // Rhino's AST captures data flow. These are the annotations\n        // it used. We've mostly torn them out.\n        LOCAL_BLOCK_PROP  = -3,\n        OBJECT_IDS_PROP   = -2,\n        CATCH_SCOPE_PROP  = -1,\n        LABEL_ID_PROP     =  0,\n\n        TARGET_PROP       =  1,\n        BREAK_PROP        =  2,\n        CONTINUE_PROP     =  3,\n        ENUM_PROP         =  4,\n        FUNCTION_PROP     =  5,\n        TEMP_PROP         =  6,\n        LOCAL_PROP        =  7,\n        CODEOFFSET_PROP   =  8,\n        FIXUPS_PROP       =  9,\n        VARS_PROP         = 10,\n        USES_PROP         = 11,\n        REGEXP_PROP       = 12,\n        CASES_PROP        = 13,\n        DEFAULT_PROP      = 14,\n        CASEARRAY_PROP    = 15,\n        SOURCENAME_PROP   = 16,\n        TYPE_PROP         = 17,\n        SPECIAL_PROP_PROP = 18,\n        LABEL_PROP        = 19,\n        FINALLY_PROP      = 20,\n        LOCALCOUNT_PROP   = 21,\n    /*\n        the following properties are defined and manipulated by the\n        optimizer -\n        TARGETBLOCK_PROP - the block referenced by a branch node\n        VARIABLE_PROP - the variable referenced by a BIND or NAME node\n        LASTUSE_PROP - that variable node is the last reference before\n                        a new def or the end of the block\n        ISNUMBER_PROP - this node generates code on Number children and\n                        delivers a Number result (as opposed to Objects)\n        DIRECTCALL_PROP - this call node should emit code to test the function\n                          object against the known class and call diret if it\n                          matches.\n    */\n\n        TARGETBLOCK_PROP  = 22,\n        VARIABLE_PROP     = 23,\n        LASTUSE_PROP      = 24,\n        ISNUMBER_PROP     = 25,\n        DIRECTCALL_PROP   = 26,\n\n        SPECIALCALL_PROP  = 27,\n        DEBUGSOURCE_PROP  = 28,\n        JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n        VAR_ARGS_NAME     = 29,     // the name node is a variable length\n                                    // argument placeholder. It can never be\n                                    // used in conjunction with JSDOC_INFO_PROP.\n        SKIP_INDEXES_PROP  = 30,    // array of skipped indexes of array literal\n        INCRDECR_PROP      = 31,    // pre or post type of increment/decrement\n        MEMBER_TYPE_PROP   = 32,    // type of element access operation\n        NAME_PROP          = 33,    // property name\n        PARENTHESIZED_PROP = 34,    // expression is parenthesized\n        QUOTED_PROP        = 35,    // set to indicate a quoted object lit key\n        OPT_ARG_NAME       = 36,    // The name node is an optional argument.\n        SYNTHETIC_BLOCK_PROP = 37,  // A synthetic block. Used to make\n                                    // processing simpler, and does not\n                                    // represent a real block in the source.\n        SOURCEFILE_PROP    = 38,    // Contains the path of the source file\n                                    // from which the current node was parsed.\n        EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                    // EMPTY nodes.\n        ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                    // renaming.\n        BRACELESS_TYPE     = 41,    // The type syntax without curly braces.\n        NO_SIDE_EFFECTS_CALL = 42,  // Function or constructor call has no\n                                    // side effects.\n        // Coding convention props\n        IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n        IS_OPTIONAL_PARAM  = 44,    // The parameter is optional.\n        IS_VAR_ARGS_PARAM  = 45,    // The parameter is a var_args.\n        IS_NAMESPACE       = 46,    // The variable creates a namespace.\n        IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                    // probably generated from Java code, and\n                                    // should be resolved to the proper\n                                    // overload if possible.\n        DIRECTIVES         = 48,    // The ES5 directives on this node.\n        DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                    // indirect calls to eval.\n        LAST_PROP          = 49;",
        "begin_line": 67,
        "end_line": 153,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.ENUM_PROP",
        "snippet": "    public static final int\n        // Rhino's AST captures data flow. These are the annotations\n        // it used. We've mostly torn them out.\n        LOCAL_BLOCK_PROP  = -3,\n        OBJECT_IDS_PROP   = -2,\n        CATCH_SCOPE_PROP  = -1,\n        LABEL_ID_PROP     =  0,\n\n        TARGET_PROP       =  1,\n        BREAK_PROP        =  2,\n        CONTINUE_PROP     =  3,\n        ENUM_PROP         =  4,\n        FUNCTION_PROP     =  5,\n        TEMP_PROP         =  6,\n        LOCAL_PROP        =  7,\n        CODEOFFSET_PROP   =  8,\n        FIXUPS_PROP       =  9,\n        VARS_PROP         = 10,\n        USES_PROP         = 11,\n        REGEXP_PROP       = 12,\n        CASES_PROP        = 13,\n        DEFAULT_PROP      = 14,\n        CASEARRAY_PROP    = 15,\n        SOURCENAME_PROP   = 16,\n        TYPE_PROP         = 17,\n        SPECIAL_PROP_PROP = 18,\n        LABEL_PROP        = 19,\n        FINALLY_PROP      = 20,\n        LOCALCOUNT_PROP   = 21,\n    /*\n        the following properties are defined and manipulated by the\n        optimizer -\n        TARGETBLOCK_PROP - the block referenced by a branch node\n        VARIABLE_PROP - the variable referenced by a BIND or NAME node\n        LASTUSE_PROP - that variable node is the last reference before\n                        a new def or the end of the block\n        ISNUMBER_PROP - this node generates code on Number children and\n                        delivers a Number result (as opposed to Objects)\n        DIRECTCALL_PROP - this call node should emit code to test the function\n                          object against the known class and call diret if it\n                          matches.\n    */\n\n        TARGETBLOCK_PROP  = 22,\n        VARIABLE_PROP     = 23,\n        LASTUSE_PROP      = 24,\n        ISNUMBER_PROP     = 25,\n        DIRECTCALL_PROP   = 26,\n\n        SPECIALCALL_PROP  = 27,\n        DEBUGSOURCE_PROP  = 28,\n        JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n        VAR_ARGS_NAME     = 29,     // the name node is a variable length\n                                    // argument placeholder. It can never be\n                                    // used in conjunction with JSDOC_INFO_PROP.\n        SKIP_INDEXES_PROP  = 30,    // array of skipped indexes of array literal\n        INCRDECR_PROP      = 31,    // pre or post type of increment/decrement\n        MEMBER_TYPE_PROP   = 32,    // type of element access operation\n        NAME_PROP          = 33,    // property name\n        PARENTHESIZED_PROP = 34,    // expression is parenthesized\n        QUOTED_PROP        = 35,    // set to indicate a quoted object lit key\n        OPT_ARG_NAME       = 36,    // The name node is an optional argument.\n        SYNTHETIC_BLOCK_PROP = 37,  // A synthetic block. Used to make\n                                    // processing simpler, and does not\n                                    // represent a real block in the source.\n        SOURCEFILE_PROP    = 38,    // Contains the path of the source file\n                                    // from which the current node was parsed.\n        EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                    // EMPTY nodes.\n        ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                    // renaming.\n        BRACELESS_TYPE     = 41,    // The type syntax without curly braces.\n        NO_SIDE_EFFECTS_CALL = 42,  // Function or constructor call has no\n                                    // side effects.\n        // Coding convention props\n        IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n        IS_OPTIONAL_PARAM  = 44,    // The parameter is optional.\n        IS_VAR_ARGS_PARAM  = 45,    // The parameter is a var_args.\n        IS_NAMESPACE       = 46,    // The variable creates a namespace.\n        IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                    // probably generated from Java code, and\n                                    // should be resolved to the proper\n                                    // overload if possible.\n        DIRECTIVES         = 48,    // The ES5 directives on this node.\n        DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                    // indirect calls to eval.\n        LAST_PROP          = 49;",
        "begin_line": 67,
        "end_line": 153,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.FUNCTION_PROP",
        "snippet": "    public static final int\n        // Rhino's AST captures data flow. These are the annotations\n        // it used. We've mostly torn them out.\n        LOCAL_BLOCK_PROP  = -3,\n        OBJECT_IDS_PROP   = -2,\n        CATCH_SCOPE_PROP  = -1,\n        LABEL_ID_PROP     =  0,\n\n        TARGET_PROP       =  1,\n        BREAK_PROP        =  2,\n        CONTINUE_PROP     =  3,\n        ENUM_PROP         =  4,\n        FUNCTION_PROP     =  5,\n        TEMP_PROP         =  6,\n        LOCAL_PROP        =  7,\n        CODEOFFSET_PROP   =  8,\n        FIXUPS_PROP       =  9,\n        VARS_PROP         = 10,\n        USES_PROP         = 11,\n        REGEXP_PROP       = 12,\n        CASES_PROP        = 13,\n        DEFAULT_PROP      = 14,\n        CASEARRAY_PROP    = 15,\n        SOURCENAME_PROP   = 16,\n        TYPE_PROP         = 17,\n        SPECIAL_PROP_PROP = 18,\n        LABEL_PROP        = 19,\n        FINALLY_PROP      = 20,\n        LOCALCOUNT_PROP   = 21,\n    /*\n        the following properties are defined and manipulated by the\n        optimizer -\n        TARGETBLOCK_PROP - the block referenced by a branch node\n        VARIABLE_PROP - the variable referenced by a BIND or NAME node\n        LASTUSE_PROP - that variable node is the last reference before\n                        a new def or the end of the block\n        ISNUMBER_PROP - this node generates code on Number children and\n                        delivers a Number result (as opposed to Objects)\n        DIRECTCALL_PROP - this call node should emit code to test the function\n                          object against the known class and call diret if it\n                          matches.\n    */\n\n        TARGETBLOCK_PROP  = 22,\n        VARIABLE_PROP     = 23,\n        LASTUSE_PROP      = 24,\n        ISNUMBER_PROP     = 25,\n        DIRECTCALL_PROP   = 26,\n\n        SPECIALCALL_PROP  = 27,\n        DEBUGSOURCE_PROP  = 28,\n        JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n        VAR_ARGS_NAME     = 29,     // the name node is a variable length\n                                    // argument placeholder. It can never be\n                                    // used in conjunction with JSDOC_INFO_PROP.\n        SKIP_INDEXES_PROP  = 30,    // array of skipped indexes of array literal\n        INCRDECR_PROP      = 31,    // pre or post type of increment/decrement\n        MEMBER_TYPE_PROP   = 32,    // type of element access operation\n        NAME_PROP          = 33,    // property name\n        PARENTHESIZED_PROP = 34,    // expression is parenthesized\n        QUOTED_PROP        = 35,    // set to indicate a quoted object lit key\n        OPT_ARG_NAME       = 36,    // The name node is an optional argument.\n        SYNTHETIC_BLOCK_PROP = 37,  // A synthetic block. Used to make\n                                    // processing simpler, and does not\n                                    // represent a real block in the source.\n        SOURCEFILE_PROP    = 38,    // Contains the path of the source file\n                                    // from which the current node was parsed.\n        EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                    // EMPTY nodes.\n        ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                    // renaming.\n        BRACELESS_TYPE     = 41,    // The type syntax without curly braces.\n        NO_SIDE_EFFECTS_CALL = 42,  // Function or constructor call has no\n                                    // side effects.\n        // Coding convention props\n        IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n        IS_OPTIONAL_PARAM  = 44,    // The parameter is optional.\n        IS_VAR_ARGS_PARAM  = 45,    // The parameter is a var_args.\n        IS_NAMESPACE       = 46,    // The variable creates a namespace.\n        IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                    // probably generated from Java code, and\n                                    // should be resolved to the proper\n                                    // overload if possible.\n        DIRECTIVES         = 48,    // The ES5 directives on this node.\n        DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                    // indirect calls to eval.\n        LAST_PROP          = 49;",
        "begin_line": 67,
        "end_line": 153,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.TEMP_PROP",
        "snippet": "    public static final int\n        // Rhino's AST captures data flow. These are the annotations\n        // it used. We've mostly torn them out.\n        LOCAL_BLOCK_PROP  = -3,\n        OBJECT_IDS_PROP   = -2,\n        CATCH_SCOPE_PROP  = -1,\n        LABEL_ID_PROP     =  0,\n\n        TARGET_PROP       =  1,\n        BREAK_PROP        =  2,\n        CONTINUE_PROP     =  3,\n        ENUM_PROP         =  4,\n        FUNCTION_PROP     =  5,\n        TEMP_PROP         =  6,\n        LOCAL_PROP        =  7,\n        CODEOFFSET_PROP   =  8,\n        FIXUPS_PROP       =  9,\n        VARS_PROP         = 10,\n        USES_PROP         = 11,\n        REGEXP_PROP       = 12,\n        CASES_PROP        = 13,\n        DEFAULT_PROP      = 14,\n        CASEARRAY_PROP    = 15,\n        SOURCENAME_PROP   = 16,\n        TYPE_PROP         = 17,\n        SPECIAL_PROP_PROP = 18,\n        LABEL_PROP        = 19,\n        FINALLY_PROP      = 20,\n        LOCALCOUNT_PROP   = 21,\n    /*\n        the following properties are defined and manipulated by the\n        optimizer -\n        TARGETBLOCK_PROP - the block referenced by a branch node\n        VARIABLE_PROP - the variable referenced by a BIND or NAME node\n        LASTUSE_PROP - that variable node is the last reference before\n                        a new def or the end of the block\n        ISNUMBER_PROP - this node generates code on Number children and\n                        delivers a Number result (as opposed to Objects)\n        DIRECTCALL_PROP - this call node should emit code to test the function\n                          object against the known class and call diret if it\n                          matches.\n    */\n\n        TARGETBLOCK_PROP  = 22,\n        VARIABLE_PROP     = 23,\n        LASTUSE_PROP      = 24,\n        ISNUMBER_PROP     = 25,\n        DIRECTCALL_PROP   = 26,\n\n        SPECIALCALL_PROP  = 27,\n        DEBUGSOURCE_PROP  = 28,\n        JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n        VAR_ARGS_NAME     = 29,     // the name node is a variable length\n                                    // argument placeholder. It can never be\n                                    // used in conjunction with JSDOC_INFO_PROP.\n        SKIP_INDEXES_PROP  = 30,    // array of skipped indexes of array literal\n        INCRDECR_PROP      = 31,    // pre or post type of increment/decrement\n        MEMBER_TYPE_PROP   = 32,    // type of element access operation\n        NAME_PROP          = 33,    // property name\n        PARENTHESIZED_PROP = 34,    // expression is parenthesized\n        QUOTED_PROP        = 35,    // set to indicate a quoted object lit key\n        OPT_ARG_NAME       = 36,    // The name node is an optional argument.\n        SYNTHETIC_BLOCK_PROP = 37,  // A synthetic block. Used to make\n                                    // processing simpler, and does not\n                                    // represent a real block in the source.\n        SOURCEFILE_PROP    = 38,    // Contains the path of the source file\n                                    // from which the current node was parsed.\n        EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                    // EMPTY nodes.\n        ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                    // renaming.\n        BRACELESS_TYPE     = 41,    // The type syntax without curly braces.\n        NO_SIDE_EFFECTS_CALL = 42,  // Function or constructor call has no\n                                    // side effects.\n        // Coding convention props\n        IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n        IS_OPTIONAL_PARAM  = 44,    // The parameter is optional.\n        IS_VAR_ARGS_PARAM  = 45,    // The parameter is a var_args.\n        IS_NAMESPACE       = 46,    // The variable creates a namespace.\n        IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                    // probably generated from Java code, and\n                                    // should be resolved to the proper\n                                    // overload if possible.\n        DIRECTIVES         = 48,    // The ES5 directives on this node.\n        DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                    // indirect calls to eval.\n        LAST_PROP          = 49;",
        "begin_line": 67,
        "end_line": 153,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.LOCAL_PROP",
        "snippet": "    public static final int\n        // Rhino's AST captures data flow. These are the annotations\n        // it used. We've mostly torn them out.\n        LOCAL_BLOCK_PROP  = -3,\n        OBJECT_IDS_PROP   = -2,\n        CATCH_SCOPE_PROP  = -1,\n        LABEL_ID_PROP     =  0,\n\n        TARGET_PROP       =  1,\n        BREAK_PROP        =  2,\n        CONTINUE_PROP     =  3,\n        ENUM_PROP         =  4,\n        FUNCTION_PROP     =  5,\n        TEMP_PROP         =  6,\n        LOCAL_PROP        =  7,\n        CODEOFFSET_PROP   =  8,\n        FIXUPS_PROP       =  9,\n        VARS_PROP         = 10,\n        USES_PROP         = 11,\n        REGEXP_PROP       = 12,\n        CASES_PROP        = 13,\n        DEFAULT_PROP      = 14,\n        CASEARRAY_PROP    = 15,\n        SOURCENAME_PROP   = 16,\n        TYPE_PROP         = 17,\n        SPECIAL_PROP_PROP = 18,\n        LABEL_PROP        = 19,\n        FINALLY_PROP      = 20,\n        LOCALCOUNT_PROP   = 21,\n    /*\n        the following properties are defined and manipulated by the\n        optimizer -\n        TARGETBLOCK_PROP - the block referenced by a branch node\n        VARIABLE_PROP - the variable referenced by a BIND or NAME node\n        LASTUSE_PROP - that variable node is the last reference before\n                        a new def or the end of the block\n        ISNUMBER_PROP - this node generates code on Number children and\n                        delivers a Number result (as opposed to Objects)\n        DIRECTCALL_PROP - this call node should emit code to test the function\n                          object against the known class and call diret if it\n                          matches.\n    */\n\n        TARGETBLOCK_PROP  = 22,\n        VARIABLE_PROP     = 23,\n        LASTUSE_PROP      = 24,\n        ISNUMBER_PROP     = 25,\n        DIRECTCALL_PROP   = 26,\n\n        SPECIALCALL_PROP  = 27,\n        DEBUGSOURCE_PROP  = 28,\n        JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n        VAR_ARGS_NAME     = 29,     // the name node is a variable length\n                                    // argument placeholder. It can never be\n                                    // used in conjunction with JSDOC_INFO_PROP.\n        SKIP_INDEXES_PROP  = 30,    // array of skipped indexes of array literal\n        INCRDECR_PROP      = 31,    // pre or post type of increment/decrement\n        MEMBER_TYPE_PROP   = 32,    // type of element access operation\n        NAME_PROP          = 33,    // property name\n        PARENTHESIZED_PROP = 34,    // expression is parenthesized\n        QUOTED_PROP        = 35,    // set to indicate a quoted object lit key\n        OPT_ARG_NAME       = 36,    // The name node is an optional argument.\n        SYNTHETIC_BLOCK_PROP = 37,  // A synthetic block. Used to make\n                                    // processing simpler, and does not\n                                    // represent a real block in the source.\n        SOURCEFILE_PROP    = 38,    // Contains the path of the source file\n                                    // from which the current node was parsed.\n        EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                    // EMPTY nodes.\n        ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                    // renaming.\n        BRACELESS_TYPE     = 41,    // The type syntax without curly braces.\n        NO_SIDE_EFFECTS_CALL = 42,  // Function or constructor call has no\n                                    // side effects.\n        // Coding convention props\n        IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n        IS_OPTIONAL_PARAM  = 44,    // The parameter is optional.\n        IS_VAR_ARGS_PARAM  = 45,    // The parameter is a var_args.\n        IS_NAMESPACE       = 46,    // The variable creates a namespace.\n        IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                    // probably generated from Java code, and\n                                    // should be resolved to the proper\n                                    // overload if possible.\n        DIRECTIVES         = 48,    // The ES5 directives on this node.\n        DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                    // indirect calls to eval.\n        LAST_PROP          = 49;",
        "begin_line": 67,
        "end_line": 153,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.CODEOFFSET_PROP",
        "snippet": "    public static final int\n        // Rhino's AST captures data flow. These are the annotations\n        // it used. We've mostly torn them out.\n        LOCAL_BLOCK_PROP  = -3,\n        OBJECT_IDS_PROP   = -2,\n        CATCH_SCOPE_PROP  = -1,\n        LABEL_ID_PROP     =  0,\n\n        TARGET_PROP       =  1,\n        BREAK_PROP        =  2,\n        CONTINUE_PROP     =  3,\n        ENUM_PROP         =  4,\n        FUNCTION_PROP     =  5,\n        TEMP_PROP         =  6,\n        LOCAL_PROP        =  7,\n        CODEOFFSET_PROP   =  8,\n        FIXUPS_PROP       =  9,\n        VARS_PROP         = 10,\n        USES_PROP         = 11,\n        REGEXP_PROP       = 12,\n        CASES_PROP        = 13,\n        DEFAULT_PROP      = 14,\n        CASEARRAY_PROP    = 15,\n        SOURCENAME_PROP   = 16,\n        TYPE_PROP         = 17,\n        SPECIAL_PROP_PROP = 18,\n        LABEL_PROP        = 19,\n        FINALLY_PROP      = 20,\n        LOCALCOUNT_PROP   = 21,\n    /*\n        the following properties are defined and manipulated by the\n        optimizer -\n        TARGETBLOCK_PROP - the block referenced by a branch node\n        VARIABLE_PROP - the variable referenced by a BIND or NAME node\n        LASTUSE_PROP - that variable node is the last reference before\n                        a new def or the end of the block\n        ISNUMBER_PROP - this node generates code on Number children and\n                        delivers a Number result (as opposed to Objects)\n        DIRECTCALL_PROP - this call node should emit code to test the function\n                          object against the known class and call diret if it\n                          matches.\n    */\n\n        TARGETBLOCK_PROP  = 22,\n        VARIABLE_PROP     = 23,\n        LASTUSE_PROP      = 24,\n        ISNUMBER_PROP     = 25,\n        DIRECTCALL_PROP   = 26,\n\n        SPECIALCALL_PROP  = 27,\n        DEBUGSOURCE_PROP  = 28,\n        JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n        VAR_ARGS_NAME     = 29,     // the name node is a variable length\n                                    // argument placeholder. It can never be\n                                    // used in conjunction with JSDOC_INFO_PROP.\n        SKIP_INDEXES_PROP  = 30,    // array of skipped indexes of array literal\n        INCRDECR_PROP      = 31,    // pre or post type of increment/decrement\n        MEMBER_TYPE_PROP   = 32,    // type of element access operation\n        NAME_PROP          = 33,    // property name\n        PARENTHESIZED_PROP = 34,    // expression is parenthesized\n        QUOTED_PROP        = 35,    // set to indicate a quoted object lit key\n        OPT_ARG_NAME       = 36,    // The name node is an optional argument.\n        SYNTHETIC_BLOCK_PROP = 37,  // A synthetic block. Used to make\n                                    // processing simpler, and does not\n                                    // represent a real block in the source.\n        SOURCEFILE_PROP    = 38,    // Contains the path of the source file\n                                    // from which the current node was parsed.\n        EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                    // EMPTY nodes.\n        ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                    // renaming.\n        BRACELESS_TYPE     = 41,    // The type syntax without curly braces.\n        NO_SIDE_EFFECTS_CALL = 42,  // Function or constructor call has no\n                                    // side effects.\n        // Coding convention props\n        IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n        IS_OPTIONAL_PARAM  = 44,    // The parameter is optional.\n        IS_VAR_ARGS_PARAM  = 45,    // The parameter is a var_args.\n        IS_NAMESPACE       = 46,    // The variable creates a namespace.\n        IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                    // probably generated from Java code, and\n                                    // should be resolved to the proper\n                                    // overload if possible.\n        DIRECTIVES         = 48,    // The ES5 directives on this node.\n        DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                    // indirect calls to eval.\n        LAST_PROP          = 49;",
        "begin_line": 67,
        "end_line": 153,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.FIXUPS_PROP",
        "snippet": "    public static final int\n        // Rhino's AST captures data flow. These are the annotations\n        // it used. We've mostly torn them out.\n        LOCAL_BLOCK_PROP  = -3,\n        OBJECT_IDS_PROP   = -2,\n        CATCH_SCOPE_PROP  = -1,\n        LABEL_ID_PROP     =  0,\n\n        TARGET_PROP       =  1,\n        BREAK_PROP        =  2,\n        CONTINUE_PROP     =  3,\n        ENUM_PROP         =  4,\n        FUNCTION_PROP     =  5,\n        TEMP_PROP         =  6,\n        LOCAL_PROP        =  7,\n        CODEOFFSET_PROP   =  8,\n        FIXUPS_PROP       =  9,\n        VARS_PROP         = 10,\n        USES_PROP         = 11,\n        REGEXP_PROP       = 12,\n        CASES_PROP        = 13,\n        DEFAULT_PROP      = 14,\n        CASEARRAY_PROP    = 15,\n        SOURCENAME_PROP   = 16,\n        TYPE_PROP         = 17,\n        SPECIAL_PROP_PROP = 18,\n        LABEL_PROP        = 19,\n        FINALLY_PROP      = 20,\n        LOCALCOUNT_PROP   = 21,\n    /*\n        the following properties are defined and manipulated by the\n        optimizer -\n        TARGETBLOCK_PROP - the block referenced by a branch node\n        VARIABLE_PROP - the variable referenced by a BIND or NAME node\n        LASTUSE_PROP - that variable node is the last reference before\n                        a new def or the end of the block\n        ISNUMBER_PROP - this node generates code on Number children and\n                        delivers a Number result (as opposed to Objects)\n        DIRECTCALL_PROP - this call node should emit code to test the function\n                          object against the known class and call diret if it\n                          matches.\n    */\n\n        TARGETBLOCK_PROP  = 22,\n        VARIABLE_PROP     = 23,\n        LASTUSE_PROP      = 24,\n        ISNUMBER_PROP     = 25,\n        DIRECTCALL_PROP   = 26,\n\n        SPECIALCALL_PROP  = 27,\n        DEBUGSOURCE_PROP  = 28,\n        JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n        VAR_ARGS_NAME     = 29,     // the name node is a variable length\n                                    // argument placeholder. It can never be\n                                    // used in conjunction with JSDOC_INFO_PROP.\n        SKIP_INDEXES_PROP  = 30,    // array of skipped indexes of array literal\n        INCRDECR_PROP      = 31,    // pre or post type of increment/decrement\n        MEMBER_TYPE_PROP   = 32,    // type of element access operation\n        NAME_PROP          = 33,    // property name\n        PARENTHESIZED_PROP = 34,    // expression is parenthesized\n        QUOTED_PROP        = 35,    // set to indicate a quoted object lit key\n        OPT_ARG_NAME       = 36,    // The name node is an optional argument.\n        SYNTHETIC_BLOCK_PROP = 37,  // A synthetic block. Used to make\n                                    // processing simpler, and does not\n                                    // represent a real block in the source.\n        SOURCEFILE_PROP    = 38,    // Contains the path of the source file\n                                    // from which the current node was parsed.\n        EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                    // EMPTY nodes.\n        ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                    // renaming.\n        BRACELESS_TYPE     = 41,    // The type syntax without curly braces.\n        NO_SIDE_EFFECTS_CALL = 42,  // Function or constructor call has no\n                                    // side effects.\n        // Coding convention props\n        IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n        IS_OPTIONAL_PARAM  = 44,    // The parameter is optional.\n        IS_VAR_ARGS_PARAM  = 45,    // The parameter is a var_args.\n        IS_NAMESPACE       = 46,    // The variable creates a namespace.\n        IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                    // probably generated from Java code, and\n                                    // should be resolved to the proper\n                                    // overload if possible.\n        DIRECTIVES         = 48,    // The ES5 directives on this node.\n        DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                    // indirect calls to eval.\n        LAST_PROP          = 49;",
        "begin_line": 67,
        "end_line": 153,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.VARS_PROP",
        "snippet": "    public static final int\n        // Rhino's AST captures data flow. These are the annotations\n        // it used. We've mostly torn them out.\n        LOCAL_BLOCK_PROP  = -3,\n        OBJECT_IDS_PROP   = -2,\n        CATCH_SCOPE_PROP  = -1,\n        LABEL_ID_PROP     =  0,\n\n        TARGET_PROP       =  1,\n        BREAK_PROP        =  2,\n        CONTINUE_PROP     =  3,\n        ENUM_PROP         =  4,\n        FUNCTION_PROP     =  5,\n        TEMP_PROP         =  6,\n        LOCAL_PROP        =  7,\n        CODEOFFSET_PROP   =  8,\n        FIXUPS_PROP       =  9,\n        VARS_PROP         = 10,\n        USES_PROP         = 11,\n        REGEXP_PROP       = 12,\n        CASES_PROP        = 13,\n        DEFAULT_PROP      = 14,\n        CASEARRAY_PROP    = 15,\n        SOURCENAME_PROP   = 16,\n        TYPE_PROP         = 17,\n        SPECIAL_PROP_PROP = 18,\n        LABEL_PROP        = 19,\n        FINALLY_PROP      = 20,\n        LOCALCOUNT_PROP   = 21,\n    /*\n        the following properties are defined and manipulated by the\n        optimizer -\n        TARGETBLOCK_PROP - the block referenced by a branch node\n        VARIABLE_PROP - the variable referenced by a BIND or NAME node\n        LASTUSE_PROP - that variable node is the last reference before\n                        a new def or the end of the block\n        ISNUMBER_PROP - this node generates code on Number children and\n                        delivers a Number result (as opposed to Objects)\n        DIRECTCALL_PROP - this call node should emit code to test the function\n                          object against the known class and call diret if it\n                          matches.\n    */\n\n        TARGETBLOCK_PROP  = 22,\n        VARIABLE_PROP     = 23,\n        LASTUSE_PROP      = 24,\n        ISNUMBER_PROP     = 25,\n        DIRECTCALL_PROP   = 26,\n\n        SPECIALCALL_PROP  = 27,\n        DEBUGSOURCE_PROP  = 28,\n        JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n        VAR_ARGS_NAME     = 29,     // the name node is a variable length\n                                    // argument placeholder. It can never be\n                                    // used in conjunction with JSDOC_INFO_PROP.\n        SKIP_INDEXES_PROP  = 30,    // array of skipped indexes of array literal\n        INCRDECR_PROP      = 31,    // pre or post type of increment/decrement\n        MEMBER_TYPE_PROP   = 32,    // type of element access operation\n        NAME_PROP          = 33,    // property name\n        PARENTHESIZED_PROP = 34,    // expression is parenthesized\n        QUOTED_PROP        = 35,    // set to indicate a quoted object lit key\n        OPT_ARG_NAME       = 36,    // The name node is an optional argument.\n        SYNTHETIC_BLOCK_PROP = 37,  // A synthetic block. Used to make\n                                    // processing simpler, and does not\n                                    // represent a real block in the source.\n        SOURCEFILE_PROP    = 38,    // Contains the path of the source file\n                                    // from which the current node was parsed.\n        EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                    // EMPTY nodes.\n        ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                    // renaming.\n        BRACELESS_TYPE     = 41,    // The type syntax without curly braces.\n        NO_SIDE_EFFECTS_CALL = 42,  // Function or constructor call has no\n                                    // side effects.\n        // Coding convention props\n        IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n        IS_OPTIONAL_PARAM  = 44,    // The parameter is optional.\n        IS_VAR_ARGS_PARAM  = 45,    // The parameter is a var_args.\n        IS_NAMESPACE       = 46,    // The variable creates a namespace.\n        IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                    // probably generated from Java code, and\n                                    // should be resolved to the proper\n                                    // overload if possible.\n        DIRECTIVES         = 48,    // The ES5 directives on this node.\n        DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                    // indirect calls to eval.\n        LAST_PROP          = 49;",
        "begin_line": 67,
        "end_line": 153,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.USES_PROP",
        "snippet": "    public static final int\n        // Rhino's AST captures data flow. These are the annotations\n        // it used. We've mostly torn them out.\n        LOCAL_BLOCK_PROP  = -3,\n        OBJECT_IDS_PROP   = -2,\n        CATCH_SCOPE_PROP  = -1,\n        LABEL_ID_PROP     =  0,\n\n        TARGET_PROP       =  1,\n        BREAK_PROP        =  2,\n        CONTINUE_PROP     =  3,\n        ENUM_PROP         =  4,\n        FUNCTION_PROP     =  5,\n        TEMP_PROP         =  6,\n        LOCAL_PROP        =  7,\n        CODEOFFSET_PROP   =  8,\n        FIXUPS_PROP       =  9,\n        VARS_PROP         = 10,\n        USES_PROP         = 11,\n        REGEXP_PROP       = 12,\n        CASES_PROP        = 13,\n        DEFAULT_PROP      = 14,\n        CASEARRAY_PROP    = 15,\n        SOURCENAME_PROP   = 16,\n        TYPE_PROP         = 17,\n        SPECIAL_PROP_PROP = 18,\n        LABEL_PROP        = 19,\n        FINALLY_PROP      = 20,\n        LOCALCOUNT_PROP   = 21,\n    /*\n        the following properties are defined and manipulated by the\n        optimizer -\n        TARGETBLOCK_PROP - the block referenced by a branch node\n        VARIABLE_PROP - the variable referenced by a BIND or NAME node\n        LASTUSE_PROP - that variable node is the last reference before\n                        a new def or the end of the block\n        ISNUMBER_PROP - this node generates code on Number children and\n                        delivers a Number result (as opposed to Objects)\n        DIRECTCALL_PROP - this call node should emit code to test the function\n                          object against the known class and call diret if it\n                          matches.\n    */\n\n        TARGETBLOCK_PROP  = 22,\n        VARIABLE_PROP     = 23,\n        LASTUSE_PROP      = 24,\n        ISNUMBER_PROP     = 25,\n        DIRECTCALL_PROP   = 26,\n\n        SPECIALCALL_PROP  = 27,\n        DEBUGSOURCE_PROP  = 28,\n        JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n        VAR_ARGS_NAME     = 29,     // the name node is a variable length\n                                    // argument placeholder. It can never be\n                                    // used in conjunction with JSDOC_INFO_PROP.\n        SKIP_INDEXES_PROP  = 30,    // array of skipped indexes of array literal\n        INCRDECR_PROP      = 31,    // pre or post type of increment/decrement\n        MEMBER_TYPE_PROP   = 32,    // type of element access operation\n        NAME_PROP          = 33,    // property name\n        PARENTHESIZED_PROP = 34,    // expression is parenthesized\n        QUOTED_PROP        = 35,    // set to indicate a quoted object lit key\n        OPT_ARG_NAME       = 36,    // The name node is an optional argument.\n        SYNTHETIC_BLOCK_PROP = 37,  // A synthetic block. Used to make\n                                    // processing simpler, and does not\n                                    // represent a real block in the source.\n        SOURCEFILE_PROP    = 38,    // Contains the path of the source file\n                                    // from which the current node was parsed.\n        EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                    // EMPTY nodes.\n        ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                    // renaming.\n        BRACELESS_TYPE     = 41,    // The type syntax without curly braces.\n        NO_SIDE_EFFECTS_CALL = 42,  // Function or constructor call has no\n                                    // side effects.\n        // Coding convention props\n        IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n        IS_OPTIONAL_PARAM  = 44,    // The parameter is optional.\n        IS_VAR_ARGS_PARAM  = 45,    // The parameter is a var_args.\n        IS_NAMESPACE       = 46,    // The variable creates a namespace.\n        IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                    // probably generated from Java code, and\n                                    // should be resolved to the proper\n                                    // overload if possible.\n        DIRECTIVES         = 48,    // The ES5 directives on this node.\n        DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                    // indirect calls to eval.\n        LAST_PROP          = 49;",
        "begin_line": 67,
        "end_line": 153,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.REGEXP_PROP",
        "snippet": "    public static final int\n        // Rhino's AST captures data flow. These are the annotations\n        // it used. We've mostly torn them out.\n        LOCAL_BLOCK_PROP  = -3,\n        OBJECT_IDS_PROP   = -2,\n        CATCH_SCOPE_PROP  = -1,\n        LABEL_ID_PROP     =  0,\n\n        TARGET_PROP       =  1,\n        BREAK_PROP        =  2,\n        CONTINUE_PROP     =  3,\n        ENUM_PROP         =  4,\n        FUNCTION_PROP     =  5,\n        TEMP_PROP         =  6,\n        LOCAL_PROP        =  7,\n        CODEOFFSET_PROP   =  8,\n        FIXUPS_PROP       =  9,\n        VARS_PROP         = 10,\n        USES_PROP         = 11,\n        REGEXP_PROP       = 12,\n        CASES_PROP        = 13,\n        DEFAULT_PROP      = 14,\n        CASEARRAY_PROP    = 15,\n        SOURCENAME_PROP   = 16,\n        TYPE_PROP         = 17,\n        SPECIAL_PROP_PROP = 18,\n        LABEL_PROP        = 19,\n        FINALLY_PROP      = 20,\n        LOCALCOUNT_PROP   = 21,\n    /*\n        the following properties are defined and manipulated by the\n        optimizer -\n        TARGETBLOCK_PROP - the block referenced by a branch node\n        VARIABLE_PROP - the variable referenced by a BIND or NAME node\n        LASTUSE_PROP - that variable node is the last reference before\n                        a new def or the end of the block\n        ISNUMBER_PROP - this node generates code on Number children and\n                        delivers a Number result (as opposed to Objects)\n        DIRECTCALL_PROP - this call node should emit code to test the function\n                          object against the known class and call diret if it\n                          matches.\n    */\n\n        TARGETBLOCK_PROP  = 22,\n        VARIABLE_PROP     = 23,\n        LASTUSE_PROP      = 24,\n        ISNUMBER_PROP     = 25,\n        DIRECTCALL_PROP   = 26,\n\n        SPECIALCALL_PROP  = 27,\n        DEBUGSOURCE_PROP  = 28,\n        JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n        VAR_ARGS_NAME     = 29,     // the name node is a variable length\n                                    // argument placeholder. It can never be\n                                    // used in conjunction with JSDOC_INFO_PROP.\n        SKIP_INDEXES_PROP  = 30,    // array of skipped indexes of array literal\n        INCRDECR_PROP      = 31,    // pre or post type of increment/decrement\n        MEMBER_TYPE_PROP   = 32,    // type of element access operation\n        NAME_PROP          = 33,    // property name\n        PARENTHESIZED_PROP = 34,    // expression is parenthesized\n        QUOTED_PROP        = 35,    // set to indicate a quoted object lit key\n        OPT_ARG_NAME       = 36,    // The name node is an optional argument.\n        SYNTHETIC_BLOCK_PROP = 37,  // A synthetic block. Used to make\n                                    // processing simpler, and does not\n                                    // represent a real block in the source.\n        SOURCEFILE_PROP    = 38,    // Contains the path of the source file\n                                    // from which the current node was parsed.\n        EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                    // EMPTY nodes.\n        ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                    // renaming.\n        BRACELESS_TYPE     = 41,    // The type syntax without curly braces.\n        NO_SIDE_EFFECTS_CALL = 42,  // Function or constructor call has no\n                                    // side effects.\n        // Coding convention props\n        IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n        IS_OPTIONAL_PARAM  = 44,    // The parameter is optional.\n        IS_VAR_ARGS_PARAM  = 45,    // The parameter is a var_args.\n        IS_NAMESPACE       = 46,    // The variable creates a namespace.\n        IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                    // probably generated from Java code, and\n                                    // should be resolved to the proper\n                                    // overload if possible.\n        DIRECTIVES         = 48,    // The ES5 directives on this node.\n        DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                    // indirect calls to eval.\n        LAST_PROP          = 49;",
        "begin_line": 67,
        "end_line": 153,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.CASES_PROP",
        "snippet": "    public static final int\n        // Rhino's AST captures data flow. These are the annotations\n        // it used. We've mostly torn them out.\n        LOCAL_BLOCK_PROP  = -3,\n        OBJECT_IDS_PROP   = -2,\n        CATCH_SCOPE_PROP  = -1,\n        LABEL_ID_PROP     =  0,\n\n        TARGET_PROP       =  1,\n        BREAK_PROP        =  2,\n        CONTINUE_PROP     =  3,\n        ENUM_PROP         =  4,\n        FUNCTION_PROP     =  5,\n        TEMP_PROP         =  6,\n        LOCAL_PROP        =  7,\n        CODEOFFSET_PROP   =  8,\n        FIXUPS_PROP       =  9,\n        VARS_PROP         = 10,\n        USES_PROP         = 11,\n        REGEXP_PROP       = 12,\n        CASES_PROP        = 13,\n        DEFAULT_PROP      = 14,\n        CASEARRAY_PROP    = 15,\n        SOURCENAME_PROP   = 16,\n        TYPE_PROP         = 17,\n        SPECIAL_PROP_PROP = 18,\n        LABEL_PROP        = 19,\n        FINALLY_PROP      = 20,\n        LOCALCOUNT_PROP   = 21,\n    /*\n        the following properties are defined and manipulated by the\n        optimizer -\n        TARGETBLOCK_PROP - the block referenced by a branch node\n        VARIABLE_PROP - the variable referenced by a BIND or NAME node\n        LASTUSE_PROP - that variable node is the last reference before\n                        a new def or the end of the block\n        ISNUMBER_PROP - this node generates code on Number children and\n                        delivers a Number result (as opposed to Objects)\n        DIRECTCALL_PROP - this call node should emit code to test the function\n                          object against the known class and call diret if it\n                          matches.\n    */\n\n        TARGETBLOCK_PROP  = 22,\n        VARIABLE_PROP     = 23,\n        LASTUSE_PROP      = 24,\n        ISNUMBER_PROP     = 25,\n        DIRECTCALL_PROP   = 26,\n\n        SPECIALCALL_PROP  = 27,\n        DEBUGSOURCE_PROP  = 28,\n        JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n        VAR_ARGS_NAME     = 29,     // the name node is a variable length\n                                    // argument placeholder. It can never be\n                                    // used in conjunction with JSDOC_INFO_PROP.\n        SKIP_INDEXES_PROP  = 30,    // array of skipped indexes of array literal\n        INCRDECR_PROP      = 31,    // pre or post type of increment/decrement\n        MEMBER_TYPE_PROP   = 32,    // type of element access operation\n        NAME_PROP          = 33,    // property name\n        PARENTHESIZED_PROP = 34,    // expression is parenthesized\n        QUOTED_PROP        = 35,    // set to indicate a quoted object lit key\n        OPT_ARG_NAME       = 36,    // The name node is an optional argument.\n        SYNTHETIC_BLOCK_PROP = 37,  // A synthetic block. Used to make\n                                    // processing simpler, and does not\n                                    // represent a real block in the source.\n        SOURCEFILE_PROP    = 38,    // Contains the path of the source file\n                                    // from which the current node was parsed.\n        EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                    // EMPTY nodes.\n        ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                    // renaming.\n        BRACELESS_TYPE     = 41,    // The type syntax without curly braces.\n        NO_SIDE_EFFECTS_CALL = 42,  // Function or constructor call has no\n                                    // side effects.\n        // Coding convention props\n        IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n        IS_OPTIONAL_PARAM  = 44,    // The parameter is optional.\n        IS_VAR_ARGS_PARAM  = 45,    // The parameter is a var_args.\n        IS_NAMESPACE       = 46,    // The variable creates a namespace.\n        IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                    // probably generated from Java code, and\n                                    // should be resolved to the proper\n                                    // overload if possible.\n        DIRECTIVES         = 48,    // The ES5 directives on this node.\n        DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                    // indirect calls to eval.\n        LAST_PROP          = 49;",
        "begin_line": 67,
        "end_line": 153,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.DEFAULT_PROP",
        "snippet": "    public static final int\n        // Rhino's AST captures data flow. These are the annotations\n        // it used. We've mostly torn them out.\n        LOCAL_BLOCK_PROP  = -3,\n        OBJECT_IDS_PROP   = -2,\n        CATCH_SCOPE_PROP  = -1,\n        LABEL_ID_PROP     =  0,\n\n        TARGET_PROP       =  1,\n        BREAK_PROP        =  2,\n        CONTINUE_PROP     =  3,\n        ENUM_PROP         =  4,\n        FUNCTION_PROP     =  5,\n        TEMP_PROP         =  6,\n        LOCAL_PROP        =  7,\n        CODEOFFSET_PROP   =  8,\n        FIXUPS_PROP       =  9,\n        VARS_PROP         = 10,\n        USES_PROP         = 11,\n        REGEXP_PROP       = 12,\n        CASES_PROP        = 13,\n        DEFAULT_PROP      = 14,\n        CASEARRAY_PROP    = 15,\n        SOURCENAME_PROP   = 16,\n        TYPE_PROP         = 17,\n        SPECIAL_PROP_PROP = 18,\n        LABEL_PROP        = 19,\n        FINALLY_PROP      = 20,\n        LOCALCOUNT_PROP   = 21,\n    /*\n        the following properties are defined and manipulated by the\n        optimizer -\n        TARGETBLOCK_PROP - the block referenced by a branch node\n        VARIABLE_PROP - the variable referenced by a BIND or NAME node\n        LASTUSE_PROP - that variable node is the last reference before\n                        a new def or the end of the block\n        ISNUMBER_PROP - this node generates code on Number children and\n                        delivers a Number result (as opposed to Objects)\n        DIRECTCALL_PROP - this call node should emit code to test the function\n                          object against the known class and call diret if it\n                          matches.\n    */\n\n        TARGETBLOCK_PROP  = 22,\n        VARIABLE_PROP     = 23,\n        LASTUSE_PROP      = 24,\n        ISNUMBER_PROP     = 25,\n        DIRECTCALL_PROP   = 26,\n\n        SPECIALCALL_PROP  = 27,\n        DEBUGSOURCE_PROP  = 28,\n        JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n        VAR_ARGS_NAME     = 29,     // the name node is a variable length\n                                    // argument placeholder. It can never be\n                                    // used in conjunction with JSDOC_INFO_PROP.\n        SKIP_INDEXES_PROP  = 30,    // array of skipped indexes of array literal\n        INCRDECR_PROP      = 31,    // pre or post type of increment/decrement\n        MEMBER_TYPE_PROP   = 32,    // type of element access operation\n        NAME_PROP          = 33,    // property name\n        PARENTHESIZED_PROP = 34,    // expression is parenthesized\n        QUOTED_PROP        = 35,    // set to indicate a quoted object lit key\n        OPT_ARG_NAME       = 36,    // The name node is an optional argument.\n        SYNTHETIC_BLOCK_PROP = 37,  // A synthetic block. Used to make\n                                    // processing simpler, and does not\n                                    // represent a real block in the source.\n        SOURCEFILE_PROP    = 38,    // Contains the path of the source file\n                                    // from which the current node was parsed.\n        EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                    // EMPTY nodes.\n        ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                    // renaming.\n        BRACELESS_TYPE     = 41,    // The type syntax without curly braces.\n        NO_SIDE_EFFECTS_CALL = 42,  // Function or constructor call has no\n                                    // side effects.\n        // Coding convention props\n        IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n        IS_OPTIONAL_PARAM  = 44,    // The parameter is optional.\n        IS_VAR_ARGS_PARAM  = 45,    // The parameter is a var_args.\n        IS_NAMESPACE       = 46,    // The variable creates a namespace.\n        IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                    // probably generated from Java code, and\n                                    // should be resolved to the proper\n                                    // overload if possible.\n        DIRECTIVES         = 48,    // The ES5 directives on this node.\n        DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                    // indirect calls to eval.\n        LAST_PROP          = 49;",
        "begin_line": 67,
        "end_line": 153,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.CASEARRAY_PROP",
        "snippet": "    public static final int\n        // Rhino's AST captures data flow. These are the annotations\n        // it used. We've mostly torn them out.\n        LOCAL_BLOCK_PROP  = -3,\n        OBJECT_IDS_PROP   = -2,\n        CATCH_SCOPE_PROP  = -1,\n        LABEL_ID_PROP     =  0,\n\n        TARGET_PROP       =  1,\n        BREAK_PROP        =  2,\n        CONTINUE_PROP     =  3,\n        ENUM_PROP         =  4,\n        FUNCTION_PROP     =  5,\n        TEMP_PROP         =  6,\n        LOCAL_PROP        =  7,\n        CODEOFFSET_PROP   =  8,\n        FIXUPS_PROP       =  9,\n        VARS_PROP         = 10,\n        USES_PROP         = 11,\n        REGEXP_PROP       = 12,\n        CASES_PROP        = 13,\n        DEFAULT_PROP      = 14,\n        CASEARRAY_PROP    = 15,\n        SOURCENAME_PROP   = 16,\n        TYPE_PROP         = 17,\n        SPECIAL_PROP_PROP = 18,\n        LABEL_PROP        = 19,\n        FINALLY_PROP      = 20,\n        LOCALCOUNT_PROP   = 21,\n    /*\n        the following properties are defined and manipulated by the\n        optimizer -\n        TARGETBLOCK_PROP - the block referenced by a branch node\n        VARIABLE_PROP - the variable referenced by a BIND or NAME node\n        LASTUSE_PROP - that variable node is the last reference before\n                        a new def or the end of the block\n        ISNUMBER_PROP - this node generates code on Number children and\n                        delivers a Number result (as opposed to Objects)\n        DIRECTCALL_PROP - this call node should emit code to test the function\n                          object against the known class and call diret if it\n                          matches.\n    */\n\n        TARGETBLOCK_PROP  = 22,\n        VARIABLE_PROP     = 23,\n        LASTUSE_PROP      = 24,\n        ISNUMBER_PROP     = 25,\n        DIRECTCALL_PROP   = 26,\n\n        SPECIALCALL_PROP  = 27,\n        DEBUGSOURCE_PROP  = 28,\n        JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n        VAR_ARGS_NAME     = 29,     // the name node is a variable length\n                                    // argument placeholder. It can never be\n                                    // used in conjunction with JSDOC_INFO_PROP.\n        SKIP_INDEXES_PROP  = 30,    // array of skipped indexes of array literal\n        INCRDECR_PROP      = 31,    // pre or post type of increment/decrement\n        MEMBER_TYPE_PROP   = 32,    // type of element access operation\n        NAME_PROP          = 33,    // property name\n        PARENTHESIZED_PROP = 34,    // expression is parenthesized\n        QUOTED_PROP        = 35,    // set to indicate a quoted object lit key\n        OPT_ARG_NAME       = 36,    // The name node is an optional argument.\n        SYNTHETIC_BLOCK_PROP = 37,  // A synthetic block. Used to make\n                                    // processing simpler, and does not\n                                    // represent a real block in the source.\n        SOURCEFILE_PROP    = 38,    // Contains the path of the source file\n                                    // from which the current node was parsed.\n        EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                    // EMPTY nodes.\n        ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                    // renaming.\n        BRACELESS_TYPE     = 41,    // The type syntax without curly braces.\n        NO_SIDE_EFFECTS_CALL = 42,  // Function or constructor call has no\n                                    // side effects.\n        // Coding convention props\n        IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n        IS_OPTIONAL_PARAM  = 44,    // The parameter is optional.\n        IS_VAR_ARGS_PARAM  = 45,    // The parameter is a var_args.\n        IS_NAMESPACE       = 46,    // The variable creates a namespace.\n        IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                    // probably generated from Java code, and\n                                    // should be resolved to the proper\n                                    // overload if possible.\n        DIRECTIVES         = 48,    // The ES5 directives on this node.\n        DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                    // indirect calls to eval.\n        LAST_PROP          = 49;",
        "begin_line": 67,
        "end_line": 153,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.SOURCENAME_PROP",
        "snippet": "    public static final int\n        // Rhino's AST captures data flow. These are the annotations\n        // it used. We've mostly torn them out.\n        LOCAL_BLOCK_PROP  = -3,\n        OBJECT_IDS_PROP   = -2,\n        CATCH_SCOPE_PROP  = -1,\n        LABEL_ID_PROP     =  0,\n\n        TARGET_PROP       =  1,\n        BREAK_PROP        =  2,\n        CONTINUE_PROP     =  3,\n        ENUM_PROP         =  4,\n        FUNCTION_PROP     =  5,\n        TEMP_PROP         =  6,\n        LOCAL_PROP        =  7,\n        CODEOFFSET_PROP   =  8,\n        FIXUPS_PROP       =  9,\n        VARS_PROP         = 10,\n        USES_PROP         = 11,\n        REGEXP_PROP       = 12,\n        CASES_PROP        = 13,\n        DEFAULT_PROP      = 14,\n        CASEARRAY_PROP    = 15,\n        SOURCENAME_PROP   = 16,\n        TYPE_PROP         = 17,\n        SPECIAL_PROP_PROP = 18,\n        LABEL_PROP        = 19,\n        FINALLY_PROP      = 20,\n        LOCALCOUNT_PROP   = 21,\n    /*\n        the following properties are defined and manipulated by the\n        optimizer -\n        TARGETBLOCK_PROP - the block referenced by a branch node\n        VARIABLE_PROP - the variable referenced by a BIND or NAME node\n        LASTUSE_PROP - that variable node is the last reference before\n                        a new def or the end of the block\n        ISNUMBER_PROP - this node generates code on Number children and\n                        delivers a Number result (as opposed to Objects)\n        DIRECTCALL_PROP - this call node should emit code to test the function\n                          object against the known class and call diret if it\n                          matches.\n    */\n\n        TARGETBLOCK_PROP  = 22,\n        VARIABLE_PROP     = 23,\n        LASTUSE_PROP      = 24,\n        ISNUMBER_PROP     = 25,\n        DIRECTCALL_PROP   = 26,\n\n        SPECIALCALL_PROP  = 27,\n        DEBUGSOURCE_PROP  = 28,\n        JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n        VAR_ARGS_NAME     = 29,     // the name node is a variable length\n                                    // argument placeholder. It can never be\n                                    // used in conjunction with JSDOC_INFO_PROP.\n        SKIP_INDEXES_PROP  = 30,    // array of skipped indexes of array literal\n        INCRDECR_PROP      = 31,    // pre or post type of increment/decrement\n        MEMBER_TYPE_PROP   = 32,    // type of element access operation\n        NAME_PROP          = 33,    // property name\n        PARENTHESIZED_PROP = 34,    // expression is parenthesized\n        QUOTED_PROP        = 35,    // set to indicate a quoted object lit key\n        OPT_ARG_NAME       = 36,    // The name node is an optional argument.\n        SYNTHETIC_BLOCK_PROP = 37,  // A synthetic block. Used to make\n                                    // processing simpler, and does not\n                                    // represent a real block in the source.\n        SOURCEFILE_PROP    = 38,    // Contains the path of the source file\n                                    // from which the current node was parsed.\n        EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                    // EMPTY nodes.\n        ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                    // renaming.\n        BRACELESS_TYPE     = 41,    // The type syntax without curly braces.\n        NO_SIDE_EFFECTS_CALL = 42,  // Function or constructor call has no\n                                    // side effects.\n        // Coding convention props\n        IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n        IS_OPTIONAL_PARAM  = 44,    // The parameter is optional.\n        IS_VAR_ARGS_PARAM  = 45,    // The parameter is a var_args.\n        IS_NAMESPACE       = 46,    // The variable creates a namespace.\n        IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                    // probably generated from Java code, and\n                                    // should be resolved to the proper\n                                    // overload if possible.\n        DIRECTIVES         = 48,    // The ES5 directives on this node.\n        DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                    // indirect calls to eval.\n        LAST_PROP          = 49;",
        "begin_line": 67,
        "end_line": 153,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.TYPE_PROP",
        "snippet": "    public static final int\n        // Rhino's AST captures data flow. These are the annotations\n        // it used. We've mostly torn them out.\n        LOCAL_BLOCK_PROP  = -3,\n        OBJECT_IDS_PROP   = -2,\n        CATCH_SCOPE_PROP  = -1,\n        LABEL_ID_PROP     =  0,\n\n        TARGET_PROP       =  1,\n        BREAK_PROP        =  2,\n        CONTINUE_PROP     =  3,\n        ENUM_PROP         =  4,\n        FUNCTION_PROP     =  5,\n        TEMP_PROP         =  6,\n        LOCAL_PROP        =  7,\n        CODEOFFSET_PROP   =  8,\n        FIXUPS_PROP       =  9,\n        VARS_PROP         = 10,\n        USES_PROP         = 11,\n        REGEXP_PROP       = 12,\n        CASES_PROP        = 13,\n        DEFAULT_PROP      = 14,\n        CASEARRAY_PROP    = 15,\n        SOURCENAME_PROP   = 16,\n        TYPE_PROP         = 17,\n        SPECIAL_PROP_PROP = 18,\n        LABEL_PROP        = 19,\n        FINALLY_PROP      = 20,\n        LOCALCOUNT_PROP   = 21,\n    /*\n        the following properties are defined and manipulated by the\n        optimizer -\n        TARGETBLOCK_PROP - the block referenced by a branch node\n        VARIABLE_PROP - the variable referenced by a BIND or NAME node\n        LASTUSE_PROP - that variable node is the last reference before\n                        a new def or the end of the block\n        ISNUMBER_PROP - this node generates code on Number children and\n                        delivers a Number result (as opposed to Objects)\n        DIRECTCALL_PROP - this call node should emit code to test the function\n                          object against the known class and call diret if it\n                          matches.\n    */\n\n        TARGETBLOCK_PROP  = 22,\n        VARIABLE_PROP     = 23,\n        LASTUSE_PROP      = 24,\n        ISNUMBER_PROP     = 25,\n        DIRECTCALL_PROP   = 26,\n\n        SPECIALCALL_PROP  = 27,\n        DEBUGSOURCE_PROP  = 28,\n        JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n        VAR_ARGS_NAME     = 29,     // the name node is a variable length\n                                    // argument placeholder. It can never be\n                                    // used in conjunction with JSDOC_INFO_PROP.\n        SKIP_INDEXES_PROP  = 30,    // array of skipped indexes of array literal\n        INCRDECR_PROP      = 31,    // pre or post type of increment/decrement\n        MEMBER_TYPE_PROP   = 32,    // type of element access operation\n        NAME_PROP          = 33,    // property name\n        PARENTHESIZED_PROP = 34,    // expression is parenthesized\n        QUOTED_PROP        = 35,    // set to indicate a quoted object lit key\n        OPT_ARG_NAME       = 36,    // The name node is an optional argument.\n        SYNTHETIC_BLOCK_PROP = 37,  // A synthetic block. Used to make\n                                    // processing simpler, and does not\n                                    // represent a real block in the source.\n        SOURCEFILE_PROP    = 38,    // Contains the path of the source file\n                                    // from which the current node was parsed.\n        EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                    // EMPTY nodes.\n        ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                    // renaming.\n        BRACELESS_TYPE     = 41,    // The type syntax without curly braces.\n        NO_SIDE_EFFECTS_CALL = 42,  // Function or constructor call has no\n                                    // side effects.\n        // Coding convention props\n        IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n        IS_OPTIONAL_PARAM  = 44,    // The parameter is optional.\n        IS_VAR_ARGS_PARAM  = 45,    // The parameter is a var_args.\n        IS_NAMESPACE       = 46,    // The variable creates a namespace.\n        IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                    // probably generated from Java code, and\n                                    // should be resolved to the proper\n                                    // overload if possible.\n        DIRECTIVES         = 48,    // The ES5 directives on this node.\n        DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                    // indirect calls to eval.\n        LAST_PROP          = 49;",
        "begin_line": 67,
        "end_line": 153,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.SPECIAL_PROP_PROP",
        "snippet": "    public static final int\n        // Rhino's AST captures data flow. These are the annotations\n        // it used. We've mostly torn them out.\n        LOCAL_BLOCK_PROP  = -3,\n        OBJECT_IDS_PROP   = -2,\n        CATCH_SCOPE_PROP  = -1,\n        LABEL_ID_PROP     =  0,\n\n        TARGET_PROP       =  1,\n        BREAK_PROP        =  2,\n        CONTINUE_PROP     =  3,\n        ENUM_PROP         =  4,\n        FUNCTION_PROP     =  5,\n        TEMP_PROP         =  6,\n        LOCAL_PROP        =  7,\n        CODEOFFSET_PROP   =  8,\n        FIXUPS_PROP       =  9,\n        VARS_PROP         = 10,\n        USES_PROP         = 11,\n        REGEXP_PROP       = 12,\n        CASES_PROP        = 13,\n        DEFAULT_PROP      = 14,\n        CASEARRAY_PROP    = 15,\n        SOURCENAME_PROP   = 16,\n        TYPE_PROP         = 17,\n        SPECIAL_PROP_PROP = 18,\n        LABEL_PROP        = 19,\n        FINALLY_PROP      = 20,\n        LOCALCOUNT_PROP   = 21,\n    /*\n        the following properties are defined and manipulated by the\n        optimizer -\n        TARGETBLOCK_PROP - the block referenced by a branch node\n        VARIABLE_PROP - the variable referenced by a BIND or NAME node\n        LASTUSE_PROP - that variable node is the last reference before\n                        a new def or the end of the block\n        ISNUMBER_PROP - this node generates code on Number children and\n                        delivers a Number result (as opposed to Objects)\n        DIRECTCALL_PROP - this call node should emit code to test the function\n                          object against the known class and call diret if it\n                          matches.\n    */\n\n        TARGETBLOCK_PROP  = 22,\n        VARIABLE_PROP     = 23,\n        LASTUSE_PROP      = 24,\n        ISNUMBER_PROP     = 25,\n        DIRECTCALL_PROP   = 26,\n\n        SPECIALCALL_PROP  = 27,\n        DEBUGSOURCE_PROP  = 28,\n        JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n        VAR_ARGS_NAME     = 29,     // the name node is a variable length\n                                    // argument placeholder. It can never be\n                                    // used in conjunction with JSDOC_INFO_PROP.\n        SKIP_INDEXES_PROP  = 30,    // array of skipped indexes of array literal\n        INCRDECR_PROP      = 31,    // pre or post type of increment/decrement\n        MEMBER_TYPE_PROP   = 32,    // type of element access operation\n        NAME_PROP          = 33,    // property name\n        PARENTHESIZED_PROP = 34,    // expression is parenthesized\n        QUOTED_PROP        = 35,    // set to indicate a quoted object lit key\n        OPT_ARG_NAME       = 36,    // The name node is an optional argument.\n        SYNTHETIC_BLOCK_PROP = 37,  // A synthetic block. Used to make\n                                    // processing simpler, and does not\n                                    // represent a real block in the source.\n        SOURCEFILE_PROP    = 38,    // Contains the path of the source file\n                                    // from which the current node was parsed.\n        EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                    // EMPTY nodes.\n        ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                    // renaming.\n        BRACELESS_TYPE     = 41,    // The type syntax without curly braces.\n        NO_SIDE_EFFECTS_CALL = 42,  // Function or constructor call has no\n                                    // side effects.\n        // Coding convention props\n        IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n        IS_OPTIONAL_PARAM  = 44,    // The parameter is optional.\n        IS_VAR_ARGS_PARAM  = 45,    // The parameter is a var_args.\n        IS_NAMESPACE       = 46,    // The variable creates a namespace.\n        IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                    // probably generated from Java code, and\n                                    // should be resolved to the proper\n                                    // overload if possible.\n        DIRECTIVES         = 48,    // The ES5 directives on this node.\n        DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                    // indirect calls to eval.\n        LAST_PROP          = 49;",
        "begin_line": 67,
        "end_line": 153,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.LABEL_PROP",
        "snippet": "    public static final int\n        // Rhino's AST captures data flow. These are the annotations\n        // it used. We've mostly torn them out.\n        LOCAL_BLOCK_PROP  = -3,\n        OBJECT_IDS_PROP   = -2,\n        CATCH_SCOPE_PROP  = -1,\n        LABEL_ID_PROP     =  0,\n\n        TARGET_PROP       =  1,\n        BREAK_PROP        =  2,\n        CONTINUE_PROP     =  3,\n        ENUM_PROP         =  4,\n        FUNCTION_PROP     =  5,\n        TEMP_PROP         =  6,\n        LOCAL_PROP        =  7,\n        CODEOFFSET_PROP   =  8,\n        FIXUPS_PROP       =  9,\n        VARS_PROP         = 10,\n        USES_PROP         = 11,\n        REGEXP_PROP       = 12,\n        CASES_PROP        = 13,\n        DEFAULT_PROP      = 14,\n        CASEARRAY_PROP    = 15,\n        SOURCENAME_PROP   = 16,\n        TYPE_PROP         = 17,\n        SPECIAL_PROP_PROP = 18,\n        LABEL_PROP        = 19,\n        FINALLY_PROP      = 20,\n        LOCALCOUNT_PROP   = 21,\n    /*\n        the following properties are defined and manipulated by the\n        optimizer -\n        TARGETBLOCK_PROP - the block referenced by a branch node\n        VARIABLE_PROP - the variable referenced by a BIND or NAME node\n        LASTUSE_PROP - that variable node is the last reference before\n                        a new def or the end of the block\n        ISNUMBER_PROP - this node generates code on Number children and\n                        delivers a Number result (as opposed to Objects)\n        DIRECTCALL_PROP - this call node should emit code to test the function\n                          object against the known class and call diret if it\n                          matches.\n    */\n\n        TARGETBLOCK_PROP  = 22,\n        VARIABLE_PROP     = 23,\n        LASTUSE_PROP      = 24,\n        ISNUMBER_PROP     = 25,\n        DIRECTCALL_PROP   = 26,\n\n        SPECIALCALL_PROP  = 27,\n        DEBUGSOURCE_PROP  = 28,\n        JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n        VAR_ARGS_NAME     = 29,     // the name node is a variable length\n                                    // argument placeholder. It can never be\n                                    // used in conjunction with JSDOC_INFO_PROP.\n        SKIP_INDEXES_PROP  = 30,    // array of skipped indexes of array literal\n        INCRDECR_PROP      = 31,    // pre or post type of increment/decrement\n        MEMBER_TYPE_PROP   = 32,    // type of element access operation\n        NAME_PROP          = 33,    // property name\n        PARENTHESIZED_PROP = 34,    // expression is parenthesized\n        QUOTED_PROP        = 35,    // set to indicate a quoted object lit key\n        OPT_ARG_NAME       = 36,    // The name node is an optional argument.\n        SYNTHETIC_BLOCK_PROP = 37,  // A synthetic block. Used to make\n                                    // processing simpler, and does not\n                                    // represent a real block in the source.\n        SOURCEFILE_PROP    = 38,    // Contains the path of the source file\n                                    // from which the current node was parsed.\n        EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                    // EMPTY nodes.\n        ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                    // renaming.\n        BRACELESS_TYPE     = 41,    // The type syntax without curly braces.\n        NO_SIDE_EFFECTS_CALL = 42,  // Function or constructor call has no\n                                    // side effects.\n        // Coding convention props\n        IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n        IS_OPTIONAL_PARAM  = 44,    // The parameter is optional.\n        IS_VAR_ARGS_PARAM  = 45,    // The parameter is a var_args.\n        IS_NAMESPACE       = 46,    // The variable creates a namespace.\n        IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                    // probably generated from Java code, and\n                                    // should be resolved to the proper\n                                    // overload if possible.\n        DIRECTIVES         = 48,    // The ES5 directives on this node.\n        DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                    // indirect calls to eval.\n        LAST_PROP          = 49;",
        "begin_line": 67,
        "end_line": 153,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.FINALLY_PROP",
        "snippet": "    public static final int\n        // Rhino's AST captures data flow. These are the annotations\n        // it used. We've mostly torn them out.\n        LOCAL_BLOCK_PROP  = -3,\n        OBJECT_IDS_PROP   = -2,\n        CATCH_SCOPE_PROP  = -1,\n        LABEL_ID_PROP     =  0,\n\n        TARGET_PROP       =  1,\n        BREAK_PROP        =  2,\n        CONTINUE_PROP     =  3,\n        ENUM_PROP         =  4,\n        FUNCTION_PROP     =  5,\n        TEMP_PROP         =  6,\n        LOCAL_PROP        =  7,\n        CODEOFFSET_PROP   =  8,\n        FIXUPS_PROP       =  9,\n        VARS_PROP         = 10,\n        USES_PROP         = 11,\n        REGEXP_PROP       = 12,\n        CASES_PROP        = 13,\n        DEFAULT_PROP      = 14,\n        CASEARRAY_PROP    = 15,\n        SOURCENAME_PROP   = 16,\n        TYPE_PROP         = 17,\n        SPECIAL_PROP_PROP = 18,\n        LABEL_PROP        = 19,\n        FINALLY_PROP      = 20,\n        LOCALCOUNT_PROP   = 21,\n    /*\n        the following properties are defined and manipulated by the\n        optimizer -\n        TARGETBLOCK_PROP - the block referenced by a branch node\n        VARIABLE_PROP - the variable referenced by a BIND or NAME node\n        LASTUSE_PROP - that variable node is the last reference before\n                        a new def or the end of the block\n        ISNUMBER_PROP - this node generates code on Number children and\n                        delivers a Number result (as opposed to Objects)\n        DIRECTCALL_PROP - this call node should emit code to test the function\n                          object against the known class and call diret if it\n                          matches.\n    */\n\n        TARGETBLOCK_PROP  = 22,\n        VARIABLE_PROP     = 23,\n        LASTUSE_PROP      = 24,\n        ISNUMBER_PROP     = 25,\n        DIRECTCALL_PROP   = 26,\n\n        SPECIALCALL_PROP  = 27,\n        DEBUGSOURCE_PROP  = 28,\n        JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n        VAR_ARGS_NAME     = 29,     // the name node is a variable length\n                                    // argument placeholder. It can never be\n                                    // used in conjunction with JSDOC_INFO_PROP.\n        SKIP_INDEXES_PROP  = 30,    // array of skipped indexes of array literal\n        INCRDECR_PROP      = 31,    // pre or post type of increment/decrement\n        MEMBER_TYPE_PROP   = 32,    // type of element access operation\n        NAME_PROP          = 33,    // property name\n        PARENTHESIZED_PROP = 34,    // expression is parenthesized\n        QUOTED_PROP        = 35,    // set to indicate a quoted object lit key\n        OPT_ARG_NAME       = 36,    // The name node is an optional argument.\n        SYNTHETIC_BLOCK_PROP = 37,  // A synthetic block. Used to make\n                                    // processing simpler, and does not\n                                    // represent a real block in the source.\n        SOURCEFILE_PROP    = 38,    // Contains the path of the source file\n                                    // from which the current node was parsed.\n        EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                    // EMPTY nodes.\n        ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                    // renaming.\n        BRACELESS_TYPE     = 41,    // The type syntax without curly braces.\n        NO_SIDE_EFFECTS_CALL = 42,  // Function or constructor call has no\n                                    // side effects.\n        // Coding convention props\n        IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n        IS_OPTIONAL_PARAM  = 44,    // The parameter is optional.\n        IS_VAR_ARGS_PARAM  = 45,    // The parameter is a var_args.\n        IS_NAMESPACE       = 46,    // The variable creates a namespace.\n        IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                    // probably generated from Java code, and\n                                    // should be resolved to the proper\n                                    // overload if possible.\n        DIRECTIVES         = 48,    // The ES5 directives on this node.\n        DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                    // indirect calls to eval.\n        LAST_PROP          = 49;",
        "begin_line": 67,
        "end_line": 153,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.LOCALCOUNT_PROP",
        "snippet": "    public static final int\n        // Rhino's AST captures data flow. These are the annotations\n        // it used. We've mostly torn them out.\n        LOCAL_BLOCK_PROP  = -3,\n        OBJECT_IDS_PROP   = -2,\n        CATCH_SCOPE_PROP  = -1,\n        LABEL_ID_PROP     =  0,\n\n        TARGET_PROP       =  1,\n        BREAK_PROP        =  2,\n        CONTINUE_PROP     =  3,\n        ENUM_PROP         =  4,\n        FUNCTION_PROP     =  5,\n        TEMP_PROP         =  6,\n        LOCAL_PROP        =  7,\n        CODEOFFSET_PROP   =  8,\n        FIXUPS_PROP       =  9,\n        VARS_PROP         = 10,\n        USES_PROP         = 11,\n        REGEXP_PROP       = 12,\n        CASES_PROP        = 13,\n        DEFAULT_PROP      = 14,\n        CASEARRAY_PROP    = 15,\n        SOURCENAME_PROP   = 16,\n        TYPE_PROP         = 17,\n        SPECIAL_PROP_PROP = 18,\n        LABEL_PROP        = 19,\n        FINALLY_PROP      = 20,\n        LOCALCOUNT_PROP   = 21,\n    /*\n        the following properties are defined and manipulated by the\n        optimizer -\n        TARGETBLOCK_PROP - the block referenced by a branch node\n        VARIABLE_PROP - the variable referenced by a BIND or NAME node\n        LASTUSE_PROP - that variable node is the last reference before\n                        a new def or the end of the block\n        ISNUMBER_PROP - this node generates code on Number children and\n                        delivers a Number result (as opposed to Objects)\n        DIRECTCALL_PROP - this call node should emit code to test the function\n                          object against the known class and call diret if it\n                          matches.\n    */\n\n        TARGETBLOCK_PROP  = 22,\n        VARIABLE_PROP     = 23,\n        LASTUSE_PROP      = 24,\n        ISNUMBER_PROP     = 25,\n        DIRECTCALL_PROP   = 26,\n\n        SPECIALCALL_PROP  = 27,\n        DEBUGSOURCE_PROP  = 28,\n        JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n        VAR_ARGS_NAME     = 29,     // the name node is a variable length\n                                    // argument placeholder. It can never be\n                                    // used in conjunction with JSDOC_INFO_PROP.\n        SKIP_INDEXES_PROP  = 30,    // array of skipped indexes of array literal\n        INCRDECR_PROP      = 31,    // pre or post type of increment/decrement\n        MEMBER_TYPE_PROP   = 32,    // type of element access operation\n        NAME_PROP          = 33,    // property name\n        PARENTHESIZED_PROP = 34,    // expression is parenthesized\n        QUOTED_PROP        = 35,    // set to indicate a quoted object lit key\n        OPT_ARG_NAME       = 36,    // The name node is an optional argument.\n        SYNTHETIC_BLOCK_PROP = 37,  // A synthetic block. Used to make\n                                    // processing simpler, and does not\n                                    // represent a real block in the source.\n        SOURCEFILE_PROP    = 38,    // Contains the path of the source file\n                                    // from which the current node was parsed.\n        EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                    // EMPTY nodes.\n        ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                    // renaming.\n        BRACELESS_TYPE     = 41,    // The type syntax without curly braces.\n        NO_SIDE_EFFECTS_CALL = 42,  // Function or constructor call has no\n                                    // side effects.\n        // Coding convention props\n        IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n        IS_OPTIONAL_PARAM  = 44,    // The parameter is optional.\n        IS_VAR_ARGS_PARAM  = 45,    // The parameter is a var_args.\n        IS_NAMESPACE       = 46,    // The variable creates a namespace.\n        IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                    // probably generated from Java code, and\n                                    // should be resolved to the proper\n                                    // overload if possible.\n        DIRECTIVES         = 48,    // The ES5 directives on this node.\n        DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                    // indirect calls to eval.\n        LAST_PROP          = 49;",
        "begin_line": 67,
        "end_line": 153,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.TARGETBLOCK_PROP",
        "snippet": "    public static final int\n        // Rhino's AST captures data flow. These are the annotations\n        // it used. We've mostly torn them out.\n        LOCAL_BLOCK_PROP  = -3,\n        OBJECT_IDS_PROP   = -2,\n        CATCH_SCOPE_PROP  = -1,\n        LABEL_ID_PROP     =  0,\n\n        TARGET_PROP       =  1,\n        BREAK_PROP        =  2,\n        CONTINUE_PROP     =  3,\n        ENUM_PROP         =  4,\n        FUNCTION_PROP     =  5,\n        TEMP_PROP         =  6,\n        LOCAL_PROP        =  7,\n        CODEOFFSET_PROP   =  8,\n        FIXUPS_PROP       =  9,\n        VARS_PROP         = 10,\n        USES_PROP         = 11,\n        REGEXP_PROP       = 12,\n        CASES_PROP        = 13,\n        DEFAULT_PROP      = 14,\n        CASEARRAY_PROP    = 15,\n        SOURCENAME_PROP   = 16,\n        TYPE_PROP         = 17,\n        SPECIAL_PROP_PROP = 18,\n        LABEL_PROP        = 19,\n        FINALLY_PROP      = 20,\n        LOCALCOUNT_PROP   = 21,\n    /*\n        the following properties are defined and manipulated by the\n        optimizer -\n        TARGETBLOCK_PROP - the block referenced by a branch node\n        VARIABLE_PROP - the variable referenced by a BIND or NAME node\n        LASTUSE_PROP - that variable node is the last reference before\n                        a new def or the end of the block\n        ISNUMBER_PROP - this node generates code on Number children and\n                        delivers a Number result (as opposed to Objects)\n        DIRECTCALL_PROP - this call node should emit code to test the function\n                          object against the known class and call diret if it\n                          matches.\n    */\n\n        TARGETBLOCK_PROP  = 22,\n        VARIABLE_PROP     = 23,\n        LASTUSE_PROP      = 24,\n        ISNUMBER_PROP     = 25,\n        DIRECTCALL_PROP   = 26,\n\n        SPECIALCALL_PROP  = 27,\n        DEBUGSOURCE_PROP  = 28,\n        JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n        VAR_ARGS_NAME     = 29,     // the name node is a variable length\n                                    // argument placeholder. It can never be\n                                    // used in conjunction with JSDOC_INFO_PROP.\n        SKIP_INDEXES_PROP  = 30,    // array of skipped indexes of array literal\n        INCRDECR_PROP      = 31,    // pre or post type of increment/decrement\n        MEMBER_TYPE_PROP   = 32,    // type of element access operation\n        NAME_PROP          = 33,    // property name\n        PARENTHESIZED_PROP = 34,    // expression is parenthesized\n        QUOTED_PROP        = 35,    // set to indicate a quoted object lit key\n        OPT_ARG_NAME       = 36,    // The name node is an optional argument.\n        SYNTHETIC_BLOCK_PROP = 37,  // A synthetic block. Used to make\n                                    // processing simpler, and does not\n                                    // represent a real block in the source.\n        SOURCEFILE_PROP    = 38,    // Contains the path of the source file\n                                    // from which the current node was parsed.\n        EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                    // EMPTY nodes.\n        ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                    // renaming.\n        BRACELESS_TYPE     = 41,    // The type syntax without curly braces.\n        NO_SIDE_EFFECTS_CALL = 42,  // Function or constructor call has no\n                                    // side effects.\n        // Coding convention props\n        IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n        IS_OPTIONAL_PARAM  = 44,    // The parameter is optional.\n        IS_VAR_ARGS_PARAM  = 45,    // The parameter is a var_args.\n        IS_NAMESPACE       = 46,    // The variable creates a namespace.\n        IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                    // probably generated from Java code, and\n                                    // should be resolved to the proper\n                                    // overload if possible.\n        DIRECTIVES         = 48,    // The ES5 directives on this node.\n        DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                    // indirect calls to eval.\n        LAST_PROP          = 49;",
        "begin_line": 67,
        "end_line": 153,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.VARIABLE_PROP",
        "snippet": "    public static final int\n        // Rhino's AST captures data flow. These are the annotations\n        // it used. We've mostly torn them out.\n        LOCAL_BLOCK_PROP  = -3,\n        OBJECT_IDS_PROP   = -2,\n        CATCH_SCOPE_PROP  = -1,\n        LABEL_ID_PROP     =  0,\n\n        TARGET_PROP       =  1,\n        BREAK_PROP        =  2,\n        CONTINUE_PROP     =  3,\n        ENUM_PROP         =  4,\n        FUNCTION_PROP     =  5,\n        TEMP_PROP         =  6,\n        LOCAL_PROP        =  7,\n        CODEOFFSET_PROP   =  8,\n        FIXUPS_PROP       =  9,\n        VARS_PROP         = 10,\n        USES_PROP         = 11,\n        REGEXP_PROP       = 12,\n        CASES_PROP        = 13,\n        DEFAULT_PROP      = 14,\n        CASEARRAY_PROP    = 15,\n        SOURCENAME_PROP   = 16,\n        TYPE_PROP         = 17,\n        SPECIAL_PROP_PROP = 18,\n        LABEL_PROP        = 19,\n        FINALLY_PROP      = 20,\n        LOCALCOUNT_PROP   = 21,\n    /*\n        the following properties are defined and manipulated by the\n        optimizer -\n        TARGETBLOCK_PROP - the block referenced by a branch node\n        VARIABLE_PROP - the variable referenced by a BIND or NAME node\n        LASTUSE_PROP - that variable node is the last reference before\n                        a new def or the end of the block\n        ISNUMBER_PROP - this node generates code on Number children and\n                        delivers a Number result (as opposed to Objects)\n        DIRECTCALL_PROP - this call node should emit code to test the function\n                          object against the known class and call diret if it\n                          matches.\n    */\n\n        TARGETBLOCK_PROP  = 22,\n        VARIABLE_PROP     = 23,\n        LASTUSE_PROP      = 24,\n        ISNUMBER_PROP     = 25,\n        DIRECTCALL_PROP   = 26,\n\n        SPECIALCALL_PROP  = 27,\n        DEBUGSOURCE_PROP  = 28,\n        JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n        VAR_ARGS_NAME     = 29,     // the name node is a variable length\n                                    // argument placeholder. It can never be\n                                    // used in conjunction with JSDOC_INFO_PROP.\n        SKIP_INDEXES_PROP  = 30,    // array of skipped indexes of array literal\n        INCRDECR_PROP      = 31,    // pre or post type of increment/decrement\n        MEMBER_TYPE_PROP   = 32,    // type of element access operation\n        NAME_PROP          = 33,    // property name\n        PARENTHESIZED_PROP = 34,    // expression is parenthesized\n        QUOTED_PROP        = 35,    // set to indicate a quoted object lit key\n        OPT_ARG_NAME       = 36,    // The name node is an optional argument.\n        SYNTHETIC_BLOCK_PROP = 37,  // A synthetic block. Used to make\n                                    // processing simpler, and does not\n                                    // represent a real block in the source.\n        SOURCEFILE_PROP    = 38,    // Contains the path of the source file\n                                    // from which the current node was parsed.\n        EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                    // EMPTY nodes.\n        ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                    // renaming.\n        BRACELESS_TYPE     = 41,    // The type syntax without curly braces.\n        NO_SIDE_EFFECTS_CALL = 42,  // Function or constructor call has no\n                                    // side effects.\n        // Coding convention props\n        IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n        IS_OPTIONAL_PARAM  = 44,    // The parameter is optional.\n        IS_VAR_ARGS_PARAM  = 45,    // The parameter is a var_args.\n        IS_NAMESPACE       = 46,    // The variable creates a namespace.\n        IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                    // probably generated from Java code, and\n                                    // should be resolved to the proper\n                                    // overload if possible.\n        DIRECTIVES         = 48,    // The ES5 directives on this node.\n        DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                    // indirect calls to eval.\n        LAST_PROP          = 49;",
        "begin_line": 67,
        "end_line": 153,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.LASTUSE_PROP",
        "snippet": "    public static final int\n        // Rhino's AST captures data flow. These are the annotations\n        // it used. We've mostly torn them out.\n        LOCAL_BLOCK_PROP  = -3,\n        OBJECT_IDS_PROP   = -2,\n        CATCH_SCOPE_PROP  = -1,\n        LABEL_ID_PROP     =  0,\n\n        TARGET_PROP       =  1,\n        BREAK_PROP        =  2,\n        CONTINUE_PROP     =  3,\n        ENUM_PROP         =  4,\n        FUNCTION_PROP     =  5,\n        TEMP_PROP         =  6,\n        LOCAL_PROP        =  7,\n        CODEOFFSET_PROP   =  8,\n        FIXUPS_PROP       =  9,\n        VARS_PROP         = 10,\n        USES_PROP         = 11,\n        REGEXP_PROP       = 12,\n        CASES_PROP        = 13,\n        DEFAULT_PROP      = 14,\n        CASEARRAY_PROP    = 15,\n        SOURCENAME_PROP   = 16,\n        TYPE_PROP         = 17,\n        SPECIAL_PROP_PROP = 18,\n        LABEL_PROP        = 19,\n        FINALLY_PROP      = 20,\n        LOCALCOUNT_PROP   = 21,\n    /*\n        the following properties are defined and manipulated by the\n        optimizer -\n        TARGETBLOCK_PROP - the block referenced by a branch node\n        VARIABLE_PROP - the variable referenced by a BIND or NAME node\n        LASTUSE_PROP - that variable node is the last reference before\n                        a new def or the end of the block\n        ISNUMBER_PROP - this node generates code on Number children and\n                        delivers a Number result (as opposed to Objects)\n        DIRECTCALL_PROP - this call node should emit code to test the function\n                          object against the known class and call diret if it\n                          matches.\n    */\n\n        TARGETBLOCK_PROP  = 22,\n        VARIABLE_PROP     = 23,\n        LASTUSE_PROP      = 24,\n        ISNUMBER_PROP     = 25,\n        DIRECTCALL_PROP   = 26,\n\n        SPECIALCALL_PROP  = 27,\n        DEBUGSOURCE_PROP  = 28,\n        JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n        VAR_ARGS_NAME     = 29,     // the name node is a variable length\n                                    // argument placeholder. It can never be\n                                    // used in conjunction with JSDOC_INFO_PROP.\n        SKIP_INDEXES_PROP  = 30,    // array of skipped indexes of array literal\n        INCRDECR_PROP      = 31,    // pre or post type of increment/decrement\n        MEMBER_TYPE_PROP   = 32,    // type of element access operation\n        NAME_PROP          = 33,    // property name\n        PARENTHESIZED_PROP = 34,    // expression is parenthesized\n        QUOTED_PROP        = 35,    // set to indicate a quoted object lit key\n        OPT_ARG_NAME       = 36,    // The name node is an optional argument.\n        SYNTHETIC_BLOCK_PROP = 37,  // A synthetic block. Used to make\n                                    // processing simpler, and does not\n                                    // represent a real block in the source.\n        SOURCEFILE_PROP    = 38,    // Contains the path of the source file\n                                    // from which the current node was parsed.\n        EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                    // EMPTY nodes.\n        ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                    // renaming.\n        BRACELESS_TYPE     = 41,    // The type syntax without curly braces.\n        NO_SIDE_EFFECTS_CALL = 42,  // Function or constructor call has no\n                                    // side effects.\n        // Coding convention props\n        IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n        IS_OPTIONAL_PARAM  = 44,    // The parameter is optional.\n        IS_VAR_ARGS_PARAM  = 45,    // The parameter is a var_args.\n        IS_NAMESPACE       = 46,    // The variable creates a namespace.\n        IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                    // probably generated from Java code, and\n                                    // should be resolved to the proper\n                                    // overload if possible.\n        DIRECTIVES         = 48,    // The ES5 directives on this node.\n        DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                    // indirect calls to eval.\n        LAST_PROP          = 49;",
        "begin_line": 67,
        "end_line": 153,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.ISNUMBER_PROP",
        "snippet": "    public static final int\n        // Rhino's AST captures data flow. These are the annotations\n        // it used. We've mostly torn them out.\n        LOCAL_BLOCK_PROP  = -3,\n        OBJECT_IDS_PROP   = -2,\n        CATCH_SCOPE_PROP  = -1,\n        LABEL_ID_PROP     =  0,\n\n        TARGET_PROP       =  1,\n        BREAK_PROP        =  2,\n        CONTINUE_PROP     =  3,\n        ENUM_PROP         =  4,\n        FUNCTION_PROP     =  5,\n        TEMP_PROP         =  6,\n        LOCAL_PROP        =  7,\n        CODEOFFSET_PROP   =  8,\n        FIXUPS_PROP       =  9,\n        VARS_PROP         = 10,\n        USES_PROP         = 11,\n        REGEXP_PROP       = 12,\n        CASES_PROP        = 13,\n        DEFAULT_PROP      = 14,\n        CASEARRAY_PROP    = 15,\n        SOURCENAME_PROP   = 16,\n        TYPE_PROP         = 17,\n        SPECIAL_PROP_PROP = 18,\n        LABEL_PROP        = 19,\n        FINALLY_PROP      = 20,\n        LOCALCOUNT_PROP   = 21,\n    /*\n        the following properties are defined and manipulated by the\n        optimizer -\n        TARGETBLOCK_PROP - the block referenced by a branch node\n        VARIABLE_PROP - the variable referenced by a BIND or NAME node\n        LASTUSE_PROP - that variable node is the last reference before\n                        a new def or the end of the block\n        ISNUMBER_PROP - this node generates code on Number children and\n                        delivers a Number result (as opposed to Objects)\n        DIRECTCALL_PROP - this call node should emit code to test the function\n                          object against the known class and call diret if it\n                          matches.\n    */\n\n        TARGETBLOCK_PROP  = 22,\n        VARIABLE_PROP     = 23,\n        LASTUSE_PROP      = 24,\n        ISNUMBER_PROP     = 25,\n        DIRECTCALL_PROP   = 26,\n\n        SPECIALCALL_PROP  = 27,\n        DEBUGSOURCE_PROP  = 28,\n        JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n        VAR_ARGS_NAME     = 29,     // the name node is a variable length\n                                    // argument placeholder. It can never be\n                                    // used in conjunction with JSDOC_INFO_PROP.\n        SKIP_INDEXES_PROP  = 30,    // array of skipped indexes of array literal\n        INCRDECR_PROP      = 31,    // pre or post type of increment/decrement\n        MEMBER_TYPE_PROP   = 32,    // type of element access operation\n        NAME_PROP          = 33,    // property name\n        PARENTHESIZED_PROP = 34,    // expression is parenthesized\n        QUOTED_PROP        = 35,    // set to indicate a quoted object lit key\n        OPT_ARG_NAME       = 36,    // The name node is an optional argument.\n        SYNTHETIC_BLOCK_PROP = 37,  // A synthetic block. Used to make\n                                    // processing simpler, and does not\n                                    // represent a real block in the source.\n        SOURCEFILE_PROP    = 38,    // Contains the path of the source file\n                                    // from which the current node was parsed.\n        EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                    // EMPTY nodes.\n        ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                    // renaming.\n        BRACELESS_TYPE     = 41,    // The type syntax without curly braces.\n        NO_SIDE_EFFECTS_CALL = 42,  // Function or constructor call has no\n                                    // side effects.\n        // Coding convention props\n        IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n        IS_OPTIONAL_PARAM  = 44,    // The parameter is optional.\n        IS_VAR_ARGS_PARAM  = 45,    // The parameter is a var_args.\n        IS_NAMESPACE       = 46,    // The variable creates a namespace.\n        IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                    // probably generated from Java code, and\n                                    // should be resolved to the proper\n                                    // overload if possible.\n        DIRECTIVES         = 48,    // The ES5 directives on this node.\n        DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                    // indirect calls to eval.\n        LAST_PROP          = 49;",
        "begin_line": 67,
        "end_line": 153,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.DIRECTCALL_PROP",
        "snippet": "    public static final int\n        // Rhino's AST captures data flow. These are the annotations\n        // it used. We've mostly torn them out.\n        LOCAL_BLOCK_PROP  = -3,\n        OBJECT_IDS_PROP   = -2,\n        CATCH_SCOPE_PROP  = -1,\n        LABEL_ID_PROP     =  0,\n\n        TARGET_PROP       =  1,\n        BREAK_PROP        =  2,\n        CONTINUE_PROP     =  3,\n        ENUM_PROP         =  4,\n        FUNCTION_PROP     =  5,\n        TEMP_PROP         =  6,\n        LOCAL_PROP        =  7,\n        CODEOFFSET_PROP   =  8,\n        FIXUPS_PROP       =  9,\n        VARS_PROP         = 10,\n        USES_PROP         = 11,\n        REGEXP_PROP       = 12,\n        CASES_PROP        = 13,\n        DEFAULT_PROP      = 14,\n        CASEARRAY_PROP    = 15,\n        SOURCENAME_PROP   = 16,\n        TYPE_PROP         = 17,\n        SPECIAL_PROP_PROP = 18,\n        LABEL_PROP        = 19,\n        FINALLY_PROP      = 20,\n        LOCALCOUNT_PROP   = 21,\n    /*\n        the following properties are defined and manipulated by the\n        optimizer -\n        TARGETBLOCK_PROP - the block referenced by a branch node\n        VARIABLE_PROP - the variable referenced by a BIND or NAME node\n        LASTUSE_PROP - that variable node is the last reference before\n                        a new def or the end of the block\n        ISNUMBER_PROP - this node generates code on Number children and\n                        delivers a Number result (as opposed to Objects)\n        DIRECTCALL_PROP - this call node should emit code to test the function\n                          object against the known class and call diret if it\n                          matches.\n    */\n\n        TARGETBLOCK_PROP  = 22,\n        VARIABLE_PROP     = 23,\n        LASTUSE_PROP      = 24,\n        ISNUMBER_PROP     = 25,\n        DIRECTCALL_PROP   = 26,\n\n        SPECIALCALL_PROP  = 27,\n        DEBUGSOURCE_PROP  = 28,\n        JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n        VAR_ARGS_NAME     = 29,     // the name node is a variable length\n                                    // argument placeholder. It can never be\n                                    // used in conjunction with JSDOC_INFO_PROP.\n        SKIP_INDEXES_PROP  = 30,    // array of skipped indexes of array literal\n        INCRDECR_PROP      = 31,    // pre or post type of increment/decrement\n        MEMBER_TYPE_PROP   = 32,    // type of element access operation\n        NAME_PROP          = 33,    // property name\n        PARENTHESIZED_PROP = 34,    // expression is parenthesized\n        QUOTED_PROP        = 35,    // set to indicate a quoted object lit key\n        OPT_ARG_NAME       = 36,    // The name node is an optional argument.\n        SYNTHETIC_BLOCK_PROP = 37,  // A synthetic block. Used to make\n                                    // processing simpler, and does not\n                                    // represent a real block in the source.\n        SOURCEFILE_PROP    = 38,    // Contains the path of the source file\n                                    // from which the current node was parsed.\n        EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                    // EMPTY nodes.\n        ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                    // renaming.\n        BRACELESS_TYPE     = 41,    // The type syntax without curly braces.\n        NO_SIDE_EFFECTS_CALL = 42,  // Function or constructor call has no\n                                    // side effects.\n        // Coding convention props\n        IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n        IS_OPTIONAL_PARAM  = 44,    // The parameter is optional.\n        IS_VAR_ARGS_PARAM  = 45,    // The parameter is a var_args.\n        IS_NAMESPACE       = 46,    // The variable creates a namespace.\n        IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                    // probably generated from Java code, and\n                                    // should be resolved to the proper\n                                    // overload if possible.\n        DIRECTIVES         = 48,    // The ES5 directives on this node.\n        DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                    // indirect calls to eval.\n        LAST_PROP          = 49;",
        "begin_line": 67,
        "end_line": 153,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.SPECIALCALL_PROP",
        "snippet": "    public static final int\n        // Rhino's AST captures data flow. These are the annotations\n        // it used. We've mostly torn them out.\n        LOCAL_BLOCK_PROP  = -3,\n        OBJECT_IDS_PROP   = -2,\n        CATCH_SCOPE_PROP  = -1,\n        LABEL_ID_PROP     =  0,\n\n        TARGET_PROP       =  1,\n        BREAK_PROP        =  2,\n        CONTINUE_PROP     =  3,\n        ENUM_PROP         =  4,\n        FUNCTION_PROP     =  5,\n        TEMP_PROP         =  6,\n        LOCAL_PROP        =  7,\n        CODEOFFSET_PROP   =  8,\n        FIXUPS_PROP       =  9,\n        VARS_PROP         = 10,\n        USES_PROP         = 11,\n        REGEXP_PROP       = 12,\n        CASES_PROP        = 13,\n        DEFAULT_PROP      = 14,\n        CASEARRAY_PROP    = 15,\n        SOURCENAME_PROP   = 16,\n        TYPE_PROP         = 17,\n        SPECIAL_PROP_PROP = 18,\n        LABEL_PROP        = 19,\n        FINALLY_PROP      = 20,\n        LOCALCOUNT_PROP   = 21,\n    /*\n        the following properties are defined and manipulated by the\n        optimizer -\n        TARGETBLOCK_PROP - the block referenced by a branch node\n        VARIABLE_PROP - the variable referenced by a BIND or NAME node\n        LASTUSE_PROP - that variable node is the last reference before\n                        a new def or the end of the block\n        ISNUMBER_PROP - this node generates code on Number children and\n                        delivers a Number result (as opposed to Objects)\n        DIRECTCALL_PROP - this call node should emit code to test the function\n                          object against the known class and call diret if it\n                          matches.\n    */\n\n        TARGETBLOCK_PROP  = 22,\n        VARIABLE_PROP     = 23,\n        LASTUSE_PROP      = 24,\n        ISNUMBER_PROP     = 25,\n        DIRECTCALL_PROP   = 26,\n\n        SPECIALCALL_PROP  = 27,\n        DEBUGSOURCE_PROP  = 28,\n        JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n        VAR_ARGS_NAME     = 29,     // the name node is a variable length\n                                    // argument placeholder. It can never be\n                                    // used in conjunction with JSDOC_INFO_PROP.\n        SKIP_INDEXES_PROP  = 30,    // array of skipped indexes of array literal\n        INCRDECR_PROP      = 31,    // pre or post type of increment/decrement\n        MEMBER_TYPE_PROP   = 32,    // type of element access operation\n        NAME_PROP          = 33,    // property name\n        PARENTHESIZED_PROP = 34,    // expression is parenthesized\n        QUOTED_PROP        = 35,    // set to indicate a quoted object lit key\n        OPT_ARG_NAME       = 36,    // The name node is an optional argument.\n        SYNTHETIC_BLOCK_PROP = 37,  // A synthetic block. Used to make\n                                    // processing simpler, and does not\n                                    // represent a real block in the source.\n        SOURCEFILE_PROP    = 38,    // Contains the path of the source file\n                                    // from which the current node was parsed.\n        EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                    // EMPTY nodes.\n        ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                    // renaming.\n        BRACELESS_TYPE     = 41,    // The type syntax without curly braces.\n        NO_SIDE_EFFECTS_CALL = 42,  // Function or constructor call has no\n                                    // side effects.\n        // Coding convention props\n        IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n        IS_OPTIONAL_PARAM  = 44,    // The parameter is optional.\n        IS_VAR_ARGS_PARAM  = 45,    // The parameter is a var_args.\n        IS_NAMESPACE       = 46,    // The variable creates a namespace.\n        IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                    // probably generated from Java code, and\n                                    // should be resolved to the proper\n                                    // overload if possible.\n        DIRECTIVES         = 48,    // The ES5 directives on this node.\n        DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                    // indirect calls to eval.\n        LAST_PROP          = 49;",
        "begin_line": 67,
        "end_line": 153,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.DEBUGSOURCE_PROP",
        "snippet": "    public static final int\n        // Rhino's AST captures data flow. These are the annotations\n        // it used. We've mostly torn them out.\n        LOCAL_BLOCK_PROP  = -3,\n        OBJECT_IDS_PROP   = -2,\n        CATCH_SCOPE_PROP  = -1,\n        LABEL_ID_PROP     =  0,\n\n        TARGET_PROP       =  1,\n        BREAK_PROP        =  2,\n        CONTINUE_PROP     =  3,\n        ENUM_PROP         =  4,\n        FUNCTION_PROP     =  5,\n        TEMP_PROP         =  6,\n        LOCAL_PROP        =  7,\n        CODEOFFSET_PROP   =  8,\n        FIXUPS_PROP       =  9,\n        VARS_PROP         = 10,\n        USES_PROP         = 11,\n        REGEXP_PROP       = 12,\n        CASES_PROP        = 13,\n        DEFAULT_PROP      = 14,\n        CASEARRAY_PROP    = 15,\n        SOURCENAME_PROP   = 16,\n        TYPE_PROP         = 17,\n        SPECIAL_PROP_PROP = 18,\n        LABEL_PROP        = 19,\n        FINALLY_PROP      = 20,\n        LOCALCOUNT_PROP   = 21,\n    /*\n        the following properties are defined and manipulated by the\n        optimizer -\n        TARGETBLOCK_PROP - the block referenced by a branch node\n        VARIABLE_PROP - the variable referenced by a BIND or NAME node\n        LASTUSE_PROP - that variable node is the last reference before\n                        a new def or the end of the block\n        ISNUMBER_PROP - this node generates code on Number children and\n                        delivers a Number result (as opposed to Objects)\n        DIRECTCALL_PROP - this call node should emit code to test the function\n                          object against the known class and call diret if it\n                          matches.\n    */\n\n        TARGETBLOCK_PROP  = 22,\n        VARIABLE_PROP     = 23,\n        LASTUSE_PROP      = 24,\n        ISNUMBER_PROP     = 25,\n        DIRECTCALL_PROP   = 26,\n\n        SPECIALCALL_PROP  = 27,\n        DEBUGSOURCE_PROP  = 28,\n        JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n        VAR_ARGS_NAME     = 29,     // the name node is a variable length\n                                    // argument placeholder. It can never be\n                                    // used in conjunction with JSDOC_INFO_PROP.\n        SKIP_INDEXES_PROP  = 30,    // array of skipped indexes of array literal\n        INCRDECR_PROP      = 31,    // pre or post type of increment/decrement\n        MEMBER_TYPE_PROP   = 32,    // type of element access operation\n        NAME_PROP          = 33,    // property name\n        PARENTHESIZED_PROP = 34,    // expression is parenthesized\n        QUOTED_PROP        = 35,    // set to indicate a quoted object lit key\n        OPT_ARG_NAME       = 36,    // The name node is an optional argument.\n        SYNTHETIC_BLOCK_PROP = 37,  // A synthetic block. Used to make\n                                    // processing simpler, and does not\n                                    // represent a real block in the source.\n        SOURCEFILE_PROP    = 38,    // Contains the path of the source file\n                                    // from which the current node was parsed.\n        EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                    // EMPTY nodes.\n        ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                    // renaming.\n        BRACELESS_TYPE     = 41,    // The type syntax without curly braces.\n        NO_SIDE_EFFECTS_CALL = 42,  // Function or constructor call has no\n                                    // side effects.\n        // Coding convention props\n        IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n        IS_OPTIONAL_PARAM  = 44,    // The parameter is optional.\n        IS_VAR_ARGS_PARAM  = 45,    // The parameter is a var_args.\n        IS_NAMESPACE       = 46,    // The variable creates a namespace.\n        IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                    // probably generated from Java code, and\n                                    // should be resolved to the proper\n                                    // overload if possible.\n        DIRECTIVES         = 48,    // The ES5 directives on this node.\n        DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                    // indirect calls to eval.\n        LAST_PROP          = 49;",
        "begin_line": 67,
        "end_line": 153,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.JSDOC_INFO_PROP",
        "snippet": "    public static final int\n        // Rhino's AST captures data flow. These are the annotations\n        // it used. We've mostly torn them out.\n        LOCAL_BLOCK_PROP  = -3,\n        OBJECT_IDS_PROP   = -2,\n        CATCH_SCOPE_PROP  = -1,\n        LABEL_ID_PROP     =  0,\n\n        TARGET_PROP       =  1,\n        BREAK_PROP        =  2,\n        CONTINUE_PROP     =  3,\n        ENUM_PROP         =  4,\n        FUNCTION_PROP     =  5,\n        TEMP_PROP         =  6,\n        LOCAL_PROP        =  7,\n        CODEOFFSET_PROP   =  8,\n        FIXUPS_PROP       =  9,\n        VARS_PROP         = 10,\n        USES_PROP         = 11,\n        REGEXP_PROP       = 12,\n        CASES_PROP        = 13,\n        DEFAULT_PROP      = 14,\n        CASEARRAY_PROP    = 15,\n        SOURCENAME_PROP   = 16,\n        TYPE_PROP         = 17,\n        SPECIAL_PROP_PROP = 18,\n        LABEL_PROP        = 19,\n        FINALLY_PROP      = 20,\n        LOCALCOUNT_PROP   = 21,\n    /*\n        the following properties are defined and manipulated by the\n        optimizer -\n        TARGETBLOCK_PROP - the block referenced by a branch node\n        VARIABLE_PROP - the variable referenced by a BIND or NAME node\n        LASTUSE_PROP - that variable node is the last reference before\n                        a new def or the end of the block\n        ISNUMBER_PROP - this node generates code on Number children and\n                        delivers a Number result (as opposed to Objects)\n        DIRECTCALL_PROP - this call node should emit code to test the function\n                          object against the known class and call diret if it\n                          matches.\n    */\n\n        TARGETBLOCK_PROP  = 22,\n        VARIABLE_PROP     = 23,\n        LASTUSE_PROP      = 24,\n        ISNUMBER_PROP     = 25,\n        DIRECTCALL_PROP   = 26,\n\n        SPECIALCALL_PROP  = 27,\n        DEBUGSOURCE_PROP  = 28,\n        JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n        VAR_ARGS_NAME     = 29,     // the name node is a variable length\n                                    // argument placeholder. It can never be\n                                    // used in conjunction with JSDOC_INFO_PROP.\n        SKIP_INDEXES_PROP  = 30,    // array of skipped indexes of array literal\n        INCRDECR_PROP      = 31,    // pre or post type of increment/decrement\n        MEMBER_TYPE_PROP   = 32,    // type of element access operation\n        NAME_PROP          = 33,    // property name\n        PARENTHESIZED_PROP = 34,    // expression is parenthesized\n        QUOTED_PROP        = 35,    // set to indicate a quoted object lit key\n        OPT_ARG_NAME       = 36,    // The name node is an optional argument.\n        SYNTHETIC_BLOCK_PROP = 37,  // A synthetic block. Used to make\n                                    // processing simpler, and does not\n                                    // represent a real block in the source.\n        SOURCEFILE_PROP    = 38,    // Contains the path of the source file\n                                    // from which the current node was parsed.\n        EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                    // EMPTY nodes.\n        ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                    // renaming.\n        BRACELESS_TYPE     = 41,    // The type syntax without curly braces.\n        NO_SIDE_EFFECTS_CALL = 42,  // Function or constructor call has no\n                                    // side effects.\n        // Coding convention props\n        IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n        IS_OPTIONAL_PARAM  = 44,    // The parameter is optional.\n        IS_VAR_ARGS_PARAM  = 45,    // The parameter is a var_args.\n        IS_NAMESPACE       = 46,    // The variable creates a namespace.\n        IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                    // probably generated from Java code, and\n                                    // should be resolved to the proper\n                                    // overload if possible.\n        DIRECTIVES         = 48,    // The ES5 directives on this node.\n        DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                    // indirect calls to eval.\n        LAST_PROP          = 49;",
        "begin_line": 67,
        "end_line": 153,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.VAR_ARGS_NAME",
        "snippet": "    public static final int\n        // Rhino's AST captures data flow. These are the annotations\n        // it used. We've mostly torn them out.\n        LOCAL_BLOCK_PROP  = -3,\n        OBJECT_IDS_PROP   = -2,\n        CATCH_SCOPE_PROP  = -1,\n        LABEL_ID_PROP     =  0,\n\n        TARGET_PROP       =  1,\n        BREAK_PROP        =  2,\n        CONTINUE_PROP     =  3,\n        ENUM_PROP         =  4,\n        FUNCTION_PROP     =  5,\n        TEMP_PROP         =  6,\n        LOCAL_PROP        =  7,\n        CODEOFFSET_PROP   =  8,\n        FIXUPS_PROP       =  9,\n        VARS_PROP         = 10,\n        USES_PROP         = 11,\n        REGEXP_PROP       = 12,\n        CASES_PROP        = 13,\n        DEFAULT_PROP      = 14,\n        CASEARRAY_PROP    = 15,\n        SOURCENAME_PROP   = 16,\n        TYPE_PROP         = 17,\n        SPECIAL_PROP_PROP = 18,\n        LABEL_PROP        = 19,\n        FINALLY_PROP      = 20,\n        LOCALCOUNT_PROP   = 21,\n    /*\n        the following properties are defined and manipulated by the\n        optimizer -\n        TARGETBLOCK_PROP - the block referenced by a branch node\n        VARIABLE_PROP - the variable referenced by a BIND or NAME node\n        LASTUSE_PROP - that variable node is the last reference before\n                        a new def or the end of the block\n        ISNUMBER_PROP - this node generates code on Number children and\n                        delivers a Number result (as opposed to Objects)\n        DIRECTCALL_PROP - this call node should emit code to test the function\n                          object against the known class and call diret if it\n                          matches.\n    */\n\n        TARGETBLOCK_PROP  = 22,\n        VARIABLE_PROP     = 23,\n        LASTUSE_PROP      = 24,\n        ISNUMBER_PROP     = 25,\n        DIRECTCALL_PROP   = 26,\n\n        SPECIALCALL_PROP  = 27,\n        DEBUGSOURCE_PROP  = 28,\n        JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n        VAR_ARGS_NAME     = 29,     // the name node is a variable length\n                                    // argument placeholder. It can never be\n                                    // used in conjunction with JSDOC_INFO_PROP.\n        SKIP_INDEXES_PROP  = 30,    // array of skipped indexes of array literal\n        INCRDECR_PROP      = 31,    // pre or post type of increment/decrement\n        MEMBER_TYPE_PROP   = 32,    // type of element access operation\n        NAME_PROP          = 33,    // property name\n        PARENTHESIZED_PROP = 34,    // expression is parenthesized\n        QUOTED_PROP        = 35,    // set to indicate a quoted object lit key\n        OPT_ARG_NAME       = 36,    // The name node is an optional argument.\n        SYNTHETIC_BLOCK_PROP = 37,  // A synthetic block. Used to make\n                                    // processing simpler, and does not\n                                    // represent a real block in the source.\n        SOURCEFILE_PROP    = 38,    // Contains the path of the source file\n                                    // from which the current node was parsed.\n        EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                    // EMPTY nodes.\n        ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                    // renaming.\n        BRACELESS_TYPE     = 41,    // The type syntax without curly braces.\n        NO_SIDE_EFFECTS_CALL = 42,  // Function or constructor call has no\n                                    // side effects.\n        // Coding convention props\n        IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n        IS_OPTIONAL_PARAM  = 44,    // The parameter is optional.\n        IS_VAR_ARGS_PARAM  = 45,    // The parameter is a var_args.\n        IS_NAMESPACE       = 46,    // The variable creates a namespace.\n        IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                    // probably generated from Java code, and\n                                    // should be resolved to the proper\n                                    // overload if possible.\n        DIRECTIVES         = 48,    // The ES5 directives on this node.\n        DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                    // indirect calls to eval.\n        LAST_PROP          = 49;",
        "begin_line": 67,
        "end_line": 153,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.SKIP_INDEXES_PROP",
        "snippet": "    public static final int\n        // Rhino's AST captures data flow. These are the annotations\n        // it used. We've mostly torn them out.\n        LOCAL_BLOCK_PROP  = -3,\n        OBJECT_IDS_PROP   = -2,\n        CATCH_SCOPE_PROP  = -1,\n        LABEL_ID_PROP     =  0,\n\n        TARGET_PROP       =  1,\n        BREAK_PROP        =  2,\n        CONTINUE_PROP     =  3,\n        ENUM_PROP         =  4,\n        FUNCTION_PROP     =  5,\n        TEMP_PROP         =  6,\n        LOCAL_PROP        =  7,\n        CODEOFFSET_PROP   =  8,\n        FIXUPS_PROP       =  9,\n        VARS_PROP         = 10,\n        USES_PROP         = 11,\n        REGEXP_PROP       = 12,\n        CASES_PROP        = 13,\n        DEFAULT_PROP      = 14,\n        CASEARRAY_PROP    = 15,\n        SOURCENAME_PROP   = 16,\n        TYPE_PROP         = 17,\n        SPECIAL_PROP_PROP = 18,\n        LABEL_PROP        = 19,\n        FINALLY_PROP      = 20,\n        LOCALCOUNT_PROP   = 21,\n    /*\n        the following properties are defined and manipulated by the\n        optimizer -\n        TARGETBLOCK_PROP - the block referenced by a branch node\n        VARIABLE_PROP - the variable referenced by a BIND or NAME node\n        LASTUSE_PROP - that variable node is the last reference before\n                        a new def or the end of the block\n        ISNUMBER_PROP - this node generates code on Number children and\n                        delivers a Number result (as opposed to Objects)\n        DIRECTCALL_PROP - this call node should emit code to test the function\n                          object against the known class and call diret if it\n                          matches.\n    */\n\n        TARGETBLOCK_PROP  = 22,\n        VARIABLE_PROP     = 23,\n        LASTUSE_PROP      = 24,\n        ISNUMBER_PROP     = 25,\n        DIRECTCALL_PROP   = 26,\n\n        SPECIALCALL_PROP  = 27,\n        DEBUGSOURCE_PROP  = 28,\n        JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n        VAR_ARGS_NAME     = 29,     // the name node is a variable length\n                                    // argument placeholder. It can never be\n                                    // used in conjunction with JSDOC_INFO_PROP.\n        SKIP_INDEXES_PROP  = 30,    // array of skipped indexes of array literal\n        INCRDECR_PROP      = 31,    // pre or post type of increment/decrement\n        MEMBER_TYPE_PROP   = 32,    // type of element access operation\n        NAME_PROP          = 33,    // property name\n        PARENTHESIZED_PROP = 34,    // expression is parenthesized\n        QUOTED_PROP        = 35,    // set to indicate a quoted object lit key\n        OPT_ARG_NAME       = 36,    // The name node is an optional argument.\n        SYNTHETIC_BLOCK_PROP = 37,  // A synthetic block. Used to make\n                                    // processing simpler, and does not\n                                    // represent a real block in the source.\n        SOURCEFILE_PROP    = 38,    // Contains the path of the source file\n                                    // from which the current node was parsed.\n        EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                    // EMPTY nodes.\n        ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                    // renaming.\n        BRACELESS_TYPE     = 41,    // The type syntax without curly braces.\n        NO_SIDE_EFFECTS_CALL = 42,  // Function or constructor call has no\n                                    // side effects.\n        // Coding convention props\n        IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n        IS_OPTIONAL_PARAM  = 44,    // The parameter is optional.\n        IS_VAR_ARGS_PARAM  = 45,    // The parameter is a var_args.\n        IS_NAMESPACE       = 46,    // The variable creates a namespace.\n        IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                    // probably generated from Java code, and\n                                    // should be resolved to the proper\n                                    // overload if possible.\n        DIRECTIVES         = 48,    // The ES5 directives on this node.\n        DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                    // indirect calls to eval.\n        LAST_PROP          = 49;",
        "begin_line": 67,
        "end_line": 153,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.INCRDECR_PROP",
        "snippet": "    public static final int\n        // Rhino's AST captures data flow. These are the annotations\n        // it used. We've mostly torn them out.\n        LOCAL_BLOCK_PROP  = -3,\n        OBJECT_IDS_PROP   = -2,\n        CATCH_SCOPE_PROP  = -1,\n        LABEL_ID_PROP     =  0,\n\n        TARGET_PROP       =  1,\n        BREAK_PROP        =  2,\n        CONTINUE_PROP     =  3,\n        ENUM_PROP         =  4,\n        FUNCTION_PROP     =  5,\n        TEMP_PROP         =  6,\n        LOCAL_PROP        =  7,\n        CODEOFFSET_PROP   =  8,\n        FIXUPS_PROP       =  9,\n        VARS_PROP         = 10,\n        USES_PROP         = 11,\n        REGEXP_PROP       = 12,\n        CASES_PROP        = 13,\n        DEFAULT_PROP      = 14,\n        CASEARRAY_PROP    = 15,\n        SOURCENAME_PROP   = 16,\n        TYPE_PROP         = 17,\n        SPECIAL_PROP_PROP = 18,\n        LABEL_PROP        = 19,\n        FINALLY_PROP      = 20,\n        LOCALCOUNT_PROP   = 21,\n    /*\n        the following properties are defined and manipulated by the\n        optimizer -\n        TARGETBLOCK_PROP - the block referenced by a branch node\n        VARIABLE_PROP - the variable referenced by a BIND or NAME node\n        LASTUSE_PROP - that variable node is the last reference before\n                        a new def or the end of the block\n        ISNUMBER_PROP - this node generates code on Number children and\n                        delivers a Number result (as opposed to Objects)\n        DIRECTCALL_PROP - this call node should emit code to test the function\n                          object against the known class and call diret if it\n                          matches.\n    */\n\n        TARGETBLOCK_PROP  = 22,\n        VARIABLE_PROP     = 23,\n        LASTUSE_PROP      = 24,\n        ISNUMBER_PROP     = 25,\n        DIRECTCALL_PROP   = 26,\n\n        SPECIALCALL_PROP  = 27,\n        DEBUGSOURCE_PROP  = 28,\n        JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n        VAR_ARGS_NAME     = 29,     // the name node is a variable length\n                                    // argument placeholder. It can never be\n                                    // used in conjunction with JSDOC_INFO_PROP.\n        SKIP_INDEXES_PROP  = 30,    // array of skipped indexes of array literal\n        INCRDECR_PROP      = 31,    // pre or post type of increment/decrement\n        MEMBER_TYPE_PROP   = 32,    // type of element access operation\n        NAME_PROP          = 33,    // property name\n        PARENTHESIZED_PROP = 34,    // expression is parenthesized\n        QUOTED_PROP        = 35,    // set to indicate a quoted object lit key\n        OPT_ARG_NAME       = 36,    // The name node is an optional argument.\n        SYNTHETIC_BLOCK_PROP = 37,  // A synthetic block. Used to make\n                                    // processing simpler, and does not\n                                    // represent a real block in the source.\n        SOURCEFILE_PROP    = 38,    // Contains the path of the source file\n                                    // from which the current node was parsed.\n        EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                    // EMPTY nodes.\n        ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                    // renaming.\n        BRACELESS_TYPE     = 41,    // The type syntax without curly braces.\n        NO_SIDE_EFFECTS_CALL = 42,  // Function or constructor call has no\n                                    // side effects.\n        // Coding convention props\n        IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n        IS_OPTIONAL_PARAM  = 44,    // The parameter is optional.\n        IS_VAR_ARGS_PARAM  = 45,    // The parameter is a var_args.\n        IS_NAMESPACE       = 46,    // The variable creates a namespace.\n        IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                    // probably generated from Java code, and\n                                    // should be resolved to the proper\n                                    // overload if possible.\n        DIRECTIVES         = 48,    // The ES5 directives on this node.\n        DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                    // indirect calls to eval.\n        LAST_PROP          = 49;",
        "begin_line": 67,
        "end_line": 153,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.MEMBER_TYPE_PROP",
        "snippet": "    public static final int\n        // Rhino's AST captures data flow. These are the annotations\n        // it used. We've mostly torn them out.\n        LOCAL_BLOCK_PROP  = -3,\n        OBJECT_IDS_PROP   = -2,\n        CATCH_SCOPE_PROP  = -1,\n        LABEL_ID_PROP     =  0,\n\n        TARGET_PROP       =  1,\n        BREAK_PROP        =  2,\n        CONTINUE_PROP     =  3,\n        ENUM_PROP         =  4,\n        FUNCTION_PROP     =  5,\n        TEMP_PROP         =  6,\n        LOCAL_PROP        =  7,\n        CODEOFFSET_PROP   =  8,\n        FIXUPS_PROP       =  9,\n        VARS_PROP         = 10,\n        USES_PROP         = 11,\n        REGEXP_PROP       = 12,\n        CASES_PROP        = 13,\n        DEFAULT_PROP      = 14,\n        CASEARRAY_PROP    = 15,\n        SOURCENAME_PROP   = 16,\n        TYPE_PROP         = 17,\n        SPECIAL_PROP_PROP = 18,\n        LABEL_PROP        = 19,\n        FINALLY_PROP      = 20,\n        LOCALCOUNT_PROP   = 21,\n    /*\n        the following properties are defined and manipulated by the\n        optimizer -\n        TARGETBLOCK_PROP - the block referenced by a branch node\n        VARIABLE_PROP - the variable referenced by a BIND or NAME node\n        LASTUSE_PROP - that variable node is the last reference before\n                        a new def or the end of the block\n        ISNUMBER_PROP - this node generates code on Number children and\n                        delivers a Number result (as opposed to Objects)\n        DIRECTCALL_PROP - this call node should emit code to test the function\n                          object against the known class and call diret if it\n                          matches.\n    */\n\n        TARGETBLOCK_PROP  = 22,\n        VARIABLE_PROP     = 23,\n        LASTUSE_PROP      = 24,\n        ISNUMBER_PROP     = 25,\n        DIRECTCALL_PROP   = 26,\n\n        SPECIALCALL_PROP  = 27,\n        DEBUGSOURCE_PROP  = 28,\n        JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n        VAR_ARGS_NAME     = 29,     // the name node is a variable length\n                                    // argument placeholder. It can never be\n                                    // used in conjunction with JSDOC_INFO_PROP.\n        SKIP_INDEXES_PROP  = 30,    // array of skipped indexes of array literal\n        INCRDECR_PROP      = 31,    // pre or post type of increment/decrement\n        MEMBER_TYPE_PROP   = 32,    // type of element access operation\n        NAME_PROP          = 33,    // property name\n        PARENTHESIZED_PROP = 34,    // expression is parenthesized\n        QUOTED_PROP        = 35,    // set to indicate a quoted object lit key\n        OPT_ARG_NAME       = 36,    // The name node is an optional argument.\n        SYNTHETIC_BLOCK_PROP = 37,  // A synthetic block. Used to make\n                                    // processing simpler, and does not\n                                    // represent a real block in the source.\n        SOURCEFILE_PROP    = 38,    // Contains the path of the source file\n                                    // from which the current node was parsed.\n        EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                    // EMPTY nodes.\n        ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                    // renaming.\n        BRACELESS_TYPE     = 41,    // The type syntax without curly braces.\n        NO_SIDE_EFFECTS_CALL = 42,  // Function or constructor call has no\n                                    // side effects.\n        // Coding convention props\n        IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n        IS_OPTIONAL_PARAM  = 44,    // The parameter is optional.\n        IS_VAR_ARGS_PARAM  = 45,    // The parameter is a var_args.\n        IS_NAMESPACE       = 46,    // The variable creates a namespace.\n        IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                    // probably generated from Java code, and\n                                    // should be resolved to the proper\n                                    // overload if possible.\n        DIRECTIVES         = 48,    // The ES5 directives on this node.\n        DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                    // indirect calls to eval.\n        LAST_PROP          = 49;",
        "begin_line": 67,
        "end_line": 153,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.NAME_PROP",
        "snippet": "    public static final int\n        // Rhino's AST captures data flow. These are the annotations\n        // it used. We've mostly torn them out.\n        LOCAL_BLOCK_PROP  = -3,\n        OBJECT_IDS_PROP   = -2,\n        CATCH_SCOPE_PROP  = -1,\n        LABEL_ID_PROP     =  0,\n\n        TARGET_PROP       =  1,\n        BREAK_PROP        =  2,\n        CONTINUE_PROP     =  3,\n        ENUM_PROP         =  4,\n        FUNCTION_PROP     =  5,\n        TEMP_PROP         =  6,\n        LOCAL_PROP        =  7,\n        CODEOFFSET_PROP   =  8,\n        FIXUPS_PROP       =  9,\n        VARS_PROP         = 10,\n        USES_PROP         = 11,\n        REGEXP_PROP       = 12,\n        CASES_PROP        = 13,\n        DEFAULT_PROP      = 14,\n        CASEARRAY_PROP    = 15,\n        SOURCENAME_PROP   = 16,\n        TYPE_PROP         = 17,\n        SPECIAL_PROP_PROP = 18,\n        LABEL_PROP        = 19,\n        FINALLY_PROP      = 20,\n        LOCALCOUNT_PROP   = 21,\n    /*\n        the following properties are defined and manipulated by the\n        optimizer -\n        TARGETBLOCK_PROP - the block referenced by a branch node\n        VARIABLE_PROP - the variable referenced by a BIND or NAME node\n        LASTUSE_PROP - that variable node is the last reference before\n                        a new def or the end of the block\n        ISNUMBER_PROP - this node generates code on Number children and\n                        delivers a Number result (as opposed to Objects)\n        DIRECTCALL_PROP - this call node should emit code to test the function\n                          object against the known class and call diret if it\n                          matches.\n    */\n\n        TARGETBLOCK_PROP  = 22,\n        VARIABLE_PROP     = 23,\n        LASTUSE_PROP      = 24,\n        ISNUMBER_PROP     = 25,\n        DIRECTCALL_PROP   = 26,\n\n        SPECIALCALL_PROP  = 27,\n        DEBUGSOURCE_PROP  = 28,\n        JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n        VAR_ARGS_NAME     = 29,     // the name node is a variable length\n                                    // argument placeholder. It can never be\n                                    // used in conjunction with JSDOC_INFO_PROP.\n        SKIP_INDEXES_PROP  = 30,    // array of skipped indexes of array literal\n        INCRDECR_PROP      = 31,    // pre or post type of increment/decrement\n        MEMBER_TYPE_PROP   = 32,    // type of element access operation\n        NAME_PROP          = 33,    // property name\n        PARENTHESIZED_PROP = 34,    // expression is parenthesized\n        QUOTED_PROP        = 35,    // set to indicate a quoted object lit key\n        OPT_ARG_NAME       = 36,    // The name node is an optional argument.\n        SYNTHETIC_BLOCK_PROP = 37,  // A synthetic block. Used to make\n                                    // processing simpler, and does not\n                                    // represent a real block in the source.\n        SOURCEFILE_PROP    = 38,    // Contains the path of the source file\n                                    // from which the current node was parsed.\n        EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                    // EMPTY nodes.\n        ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                    // renaming.\n        BRACELESS_TYPE     = 41,    // The type syntax without curly braces.\n        NO_SIDE_EFFECTS_CALL = 42,  // Function or constructor call has no\n                                    // side effects.\n        // Coding convention props\n        IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n        IS_OPTIONAL_PARAM  = 44,    // The parameter is optional.\n        IS_VAR_ARGS_PARAM  = 45,    // The parameter is a var_args.\n        IS_NAMESPACE       = 46,    // The variable creates a namespace.\n        IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                    // probably generated from Java code, and\n                                    // should be resolved to the proper\n                                    // overload if possible.\n        DIRECTIVES         = 48,    // The ES5 directives on this node.\n        DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                    // indirect calls to eval.\n        LAST_PROP          = 49;",
        "begin_line": 67,
        "end_line": 153,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.PARENTHESIZED_PROP",
        "snippet": "    public static final int\n        // Rhino's AST captures data flow. These are the annotations\n        // it used. We've mostly torn them out.\n        LOCAL_BLOCK_PROP  = -3,\n        OBJECT_IDS_PROP   = -2,\n        CATCH_SCOPE_PROP  = -1,\n        LABEL_ID_PROP     =  0,\n\n        TARGET_PROP       =  1,\n        BREAK_PROP        =  2,\n        CONTINUE_PROP     =  3,\n        ENUM_PROP         =  4,\n        FUNCTION_PROP     =  5,\n        TEMP_PROP         =  6,\n        LOCAL_PROP        =  7,\n        CODEOFFSET_PROP   =  8,\n        FIXUPS_PROP       =  9,\n        VARS_PROP         = 10,\n        USES_PROP         = 11,\n        REGEXP_PROP       = 12,\n        CASES_PROP        = 13,\n        DEFAULT_PROP      = 14,\n        CASEARRAY_PROP    = 15,\n        SOURCENAME_PROP   = 16,\n        TYPE_PROP         = 17,\n        SPECIAL_PROP_PROP = 18,\n        LABEL_PROP        = 19,\n        FINALLY_PROP      = 20,\n        LOCALCOUNT_PROP   = 21,\n    /*\n        the following properties are defined and manipulated by the\n        optimizer -\n        TARGETBLOCK_PROP - the block referenced by a branch node\n        VARIABLE_PROP - the variable referenced by a BIND or NAME node\n        LASTUSE_PROP - that variable node is the last reference before\n                        a new def or the end of the block\n        ISNUMBER_PROP - this node generates code on Number children and\n                        delivers a Number result (as opposed to Objects)\n        DIRECTCALL_PROP - this call node should emit code to test the function\n                          object against the known class and call diret if it\n                          matches.\n    */\n\n        TARGETBLOCK_PROP  = 22,\n        VARIABLE_PROP     = 23,\n        LASTUSE_PROP      = 24,\n        ISNUMBER_PROP     = 25,\n        DIRECTCALL_PROP   = 26,\n\n        SPECIALCALL_PROP  = 27,\n        DEBUGSOURCE_PROP  = 28,\n        JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n        VAR_ARGS_NAME     = 29,     // the name node is a variable length\n                                    // argument placeholder. It can never be\n                                    // used in conjunction with JSDOC_INFO_PROP.\n        SKIP_INDEXES_PROP  = 30,    // array of skipped indexes of array literal\n        INCRDECR_PROP      = 31,    // pre or post type of increment/decrement\n        MEMBER_TYPE_PROP   = 32,    // type of element access operation\n        NAME_PROP          = 33,    // property name\n        PARENTHESIZED_PROP = 34,    // expression is parenthesized\n        QUOTED_PROP        = 35,    // set to indicate a quoted object lit key\n        OPT_ARG_NAME       = 36,    // The name node is an optional argument.\n        SYNTHETIC_BLOCK_PROP = 37,  // A synthetic block. Used to make\n                                    // processing simpler, and does not\n                                    // represent a real block in the source.\n        SOURCEFILE_PROP    = 38,    // Contains the path of the source file\n                                    // from which the current node was parsed.\n        EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                    // EMPTY nodes.\n        ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                    // renaming.\n        BRACELESS_TYPE     = 41,    // The type syntax without curly braces.\n        NO_SIDE_EFFECTS_CALL = 42,  // Function or constructor call has no\n                                    // side effects.\n        // Coding convention props\n        IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n        IS_OPTIONAL_PARAM  = 44,    // The parameter is optional.\n        IS_VAR_ARGS_PARAM  = 45,    // The parameter is a var_args.\n        IS_NAMESPACE       = 46,    // The variable creates a namespace.\n        IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                    // probably generated from Java code, and\n                                    // should be resolved to the proper\n                                    // overload if possible.\n        DIRECTIVES         = 48,    // The ES5 directives on this node.\n        DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                    // indirect calls to eval.\n        LAST_PROP          = 49;",
        "begin_line": 67,
        "end_line": 153,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.QUOTED_PROP",
        "snippet": "    public static final int\n        // Rhino's AST captures data flow. These are the annotations\n        // it used. We've mostly torn them out.\n        LOCAL_BLOCK_PROP  = -3,\n        OBJECT_IDS_PROP   = -2,\n        CATCH_SCOPE_PROP  = -1,\n        LABEL_ID_PROP     =  0,\n\n        TARGET_PROP       =  1,\n        BREAK_PROP        =  2,\n        CONTINUE_PROP     =  3,\n        ENUM_PROP         =  4,\n        FUNCTION_PROP     =  5,\n        TEMP_PROP         =  6,\n        LOCAL_PROP        =  7,\n        CODEOFFSET_PROP   =  8,\n        FIXUPS_PROP       =  9,\n        VARS_PROP         = 10,\n        USES_PROP         = 11,\n        REGEXP_PROP       = 12,\n        CASES_PROP        = 13,\n        DEFAULT_PROP      = 14,\n        CASEARRAY_PROP    = 15,\n        SOURCENAME_PROP   = 16,\n        TYPE_PROP         = 17,\n        SPECIAL_PROP_PROP = 18,\n        LABEL_PROP        = 19,\n        FINALLY_PROP      = 20,\n        LOCALCOUNT_PROP   = 21,\n    /*\n        the following properties are defined and manipulated by the\n        optimizer -\n        TARGETBLOCK_PROP - the block referenced by a branch node\n        VARIABLE_PROP - the variable referenced by a BIND or NAME node\n        LASTUSE_PROP - that variable node is the last reference before\n                        a new def or the end of the block\n        ISNUMBER_PROP - this node generates code on Number children and\n                        delivers a Number result (as opposed to Objects)\n        DIRECTCALL_PROP - this call node should emit code to test the function\n                          object against the known class and call diret if it\n                          matches.\n    */\n\n        TARGETBLOCK_PROP  = 22,\n        VARIABLE_PROP     = 23,\n        LASTUSE_PROP      = 24,\n        ISNUMBER_PROP     = 25,\n        DIRECTCALL_PROP   = 26,\n\n        SPECIALCALL_PROP  = 27,\n        DEBUGSOURCE_PROP  = 28,\n        JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n        VAR_ARGS_NAME     = 29,     // the name node is a variable length\n                                    // argument placeholder. It can never be\n                                    // used in conjunction with JSDOC_INFO_PROP.\n        SKIP_INDEXES_PROP  = 30,    // array of skipped indexes of array literal\n        INCRDECR_PROP      = 31,    // pre or post type of increment/decrement\n        MEMBER_TYPE_PROP   = 32,    // type of element access operation\n        NAME_PROP          = 33,    // property name\n        PARENTHESIZED_PROP = 34,    // expression is parenthesized\n        QUOTED_PROP        = 35,    // set to indicate a quoted object lit key\n        OPT_ARG_NAME       = 36,    // The name node is an optional argument.\n        SYNTHETIC_BLOCK_PROP = 37,  // A synthetic block. Used to make\n                                    // processing simpler, and does not\n                                    // represent a real block in the source.\n        SOURCEFILE_PROP    = 38,    // Contains the path of the source file\n                                    // from which the current node was parsed.\n        EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                    // EMPTY nodes.\n        ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                    // renaming.\n        BRACELESS_TYPE     = 41,    // The type syntax without curly braces.\n        NO_SIDE_EFFECTS_CALL = 42,  // Function or constructor call has no\n                                    // side effects.\n        // Coding convention props\n        IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n        IS_OPTIONAL_PARAM  = 44,    // The parameter is optional.\n        IS_VAR_ARGS_PARAM  = 45,    // The parameter is a var_args.\n        IS_NAMESPACE       = 46,    // The variable creates a namespace.\n        IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                    // probably generated from Java code, and\n                                    // should be resolved to the proper\n                                    // overload if possible.\n        DIRECTIVES         = 48,    // The ES5 directives on this node.\n        DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                    // indirect calls to eval.\n        LAST_PROP          = 49;",
        "begin_line": 67,
        "end_line": 153,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.OPT_ARG_NAME",
        "snippet": "    public static final int\n        // Rhino's AST captures data flow. These are the annotations\n        // it used. We've mostly torn them out.\n        LOCAL_BLOCK_PROP  = -3,\n        OBJECT_IDS_PROP   = -2,\n        CATCH_SCOPE_PROP  = -1,\n        LABEL_ID_PROP     =  0,\n\n        TARGET_PROP       =  1,\n        BREAK_PROP        =  2,\n        CONTINUE_PROP     =  3,\n        ENUM_PROP         =  4,\n        FUNCTION_PROP     =  5,\n        TEMP_PROP         =  6,\n        LOCAL_PROP        =  7,\n        CODEOFFSET_PROP   =  8,\n        FIXUPS_PROP       =  9,\n        VARS_PROP         = 10,\n        USES_PROP         = 11,\n        REGEXP_PROP       = 12,\n        CASES_PROP        = 13,\n        DEFAULT_PROP      = 14,\n        CASEARRAY_PROP    = 15,\n        SOURCENAME_PROP   = 16,\n        TYPE_PROP         = 17,\n        SPECIAL_PROP_PROP = 18,\n        LABEL_PROP        = 19,\n        FINALLY_PROP      = 20,\n        LOCALCOUNT_PROP   = 21,\n    /*\n        the following properties are defined and manipulated by the\n        optimizer -\n        TARGETBLOCK_PROP - the block referenced by a branch node\n        VARIABLE_PROP - the variable referenced by a BIND or NAME node\n        LASTUSE_PROP - that variable node is the last reference before\n                        a new def or the end of the block\n        ISNUMBER_PROP - this node generates code on Number children and\n                        delivers a Number result (as opposed to Objects)\n        DIRECTCALL_PROP - this call node should emit code to test the function\n                          object against the known class and call diret if it\n                          matches.\n    */\n\n        TARGETBLOCK_PROP  = 22,\n        VARIABLE_PROP     = 23,\n        LASTUSE_PROP      = 24,\n        ISNUMBER_PROP     = 25,\n        DIRECTCALL_PROP   = 26,\n\n        SPECIALCALL_PROP  = 27,\n        DEBUGSOURCE_PROP  = 28,\n        JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n        VAR_ARGS_NAME     = 29,     // the name node is a variable length\n                                    // argument placeholder. It can never be\n                                    // used in conjunction with JSDOC_INFO_PROP.\n        SKIP_INDEXES_PROP  = 30,    // array of skipped indexes of array literal\n        INCRDECR_PROP      = 31,    // pre or post type of increment/decrement\n        MEMBER_TYPE_PROP   = 32,    // type of element access operation\n        NAME_PROP          = 33,    // property name\n        PARENTHESIZED_PROP = 34,    // expression is parenthesized\n        QUOTED_PROP        = 35,    // set to indicate a quoted object lit key\n        OPT_ARG_NAME       = 36,    // The name node is an optional argument.\n        SYNTHETIC_BLOCK_PROP = 37,  // A synthetic block. Used to make\n                                    // processing simpler, and does not\n                                    // represent a real block in the source.\n        SOURCEFILE_PROP    = 38,    // Contains the path of the source file\n                                    // from which the current node was parsed.\n        EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                    // EMPTY nodes.\n        ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                    // renaming.\n        BRACELESS_TYPE     = 41,    // The type syntax without curly braces.\n        NO_SIDE_EFFECTS_CALL = 42,  // Function or constructor call has no\n                                    // side effects.\n        // Coding convention props\n        IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n        IS_OPTIONAL_PARAM  = 44,    // The parameter is optional.\n        IS_VAR_ARGS_PARAM  = 45,    // The parameter is a var_args.\n        IS_NAMESPACE       = 46,    // The variable creates a namespace.\n        IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                    // probably generated from Java code, and\n                                    // should be resolved to the proper\n                                    // overload if possible.\n        DIRECTIVES         = 48,    // The ES5 directives on this node.\n        DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                    // indirect calls to eval.\n        LAST_PROP          = 49;",
        "begin_line": 67,
        "end_line": 153,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP",
        "snippet": "    public static final int\n        // Rhino's AST captures data flow. These are the annotations\n        // it used. We've mostly torn them out.\n        LOCAL_BLOCK_PROP  = -3,\n        OBJECT_IDS_PROP   = -2,\n        CATCH_SCOPE_PROP  = -1,\n        LABEL_ID_PROP     =  0,\n\n        TARGET_PROP       =  1,\n        BREAK_PROP        =  2,\n        CONTINUE_PROP     =  3,\n        ENUM_PROP         =  4,\n        FUNCTION_PROP     =  5,\n        TEMP_PROP         =  6,\n        LOCAL_PROP        =  7,\n        CODEOFFSET_PROP   =  8,\n        FIXUPS_PROP       =  9,\n        VARS_PROP         = 10,\n        USES_PROP         = 11,\n        REGEXP_PROP       = 12,\n        CASES_PROP        = 13,\n        DEFAULT_PROP      = 14,\n        CASEARRAY_PROP    = 15,\n        SOURCENAME_PROP   = 16,\n        TYPE_PROP         = 17,\n        SPECIAL_PROP_PROP = 18,\n        LABEL_PROP        = 19,\n        FINALLY_PROP      = 20,\n        LOCALCOUNT_PROP   = 21,\n    /*\n        the following properties are defined and manipulated by the\n        optimizer -\n        TARGETBLOCK_PROP - the block referenced by a branch node\n        VARIABLE_PROP - the variable referenced by a BIND or NAME node\n        LASTUSE_PROP - that variable node is the last reference before\n                        a new def or the end of the block\n        ISNUMBER_PROP - this node generates code on Number children and\n                        delivers a Number result (as opposed to Objects)\n        DIRECTCALL_PROP - this call node should emit code to test the function\n                          object against the known class and call diret if it\n                          matches.\n    */\n\n        TARGETBLOCK_PROP  = 22,\n        VARIABLE_PROP     = 23,\n        LASTUSE_PROP      = 24,\n        ISNUMBER_PROP     = 25,\n        DIRECTCALL_PROP   = 26,\n\n        SPECIALCALL_PROP  = 27,\n        DEBUGSOURCE_PROP  = 28,\n        JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n        VAR_ARGS_NAME     = 29,     // the name node is a variable length\n                                    // argument placeholder. It can never be\n                                    // used in conjunction with JSDOC_INFO_PROP.\n        SKIP_INDEXES_PROP  = 30,    // array of skipped indexes of array literal\n        INCRDECR_PROP      = 31,    // pre or post type of increment/decrement\n        MEMBER_TYPE_PROP   = 32,    // type of element access operation\n        NAME_PROP          = 33,    // property name\n        PARENTHESIZED_PROP = 34,    // expression is parenthesized\n        QUOTED_PROP        = 35,    // set to indicate a quoted object lit key\n        OPT_ARG_NAME       = 36,    // The name node is an optional argument.\n        SYNTHETIC_BLOCK_PROP = 37,  // A synthetic block. Used to make\n                                    // processing simpler, and does not\n                                    // represent a real block in the source.\n        SOURCEFILE_PROP    = 38,    // Contains the path of the source file\n                                    // from which the current node was parsed.\n        EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                    // EMPTY nodes.\n        ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                    // renaming.\n        BRACELESS_TYPE     = 41,    // The type syntax without curly braces.\n        NO_SIDE_EFFECTS_CALL = 42,  // Function or constructor call has no\n                                    // side effects.\n        // Coding convention props\n        IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n        IS_OPTIONAL_PARAM  = 44,    // The parameter is optional.\n        IS_VAR_ARGS_PARAM  = 45,    // The parameter is a var_args.\n        IS_NAMESPACE       = 46,    // The variable creates a namespace.\n        IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                    // probably generated from Java code, and\n                                    // should be resolved to the proper\n                                    // overload if possible.\n        DIRECTIVES         = 48,    // The ES5 directives on this node.\n        DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                    // indirect calls to eval.\n        LAST_PROP          = 49;",
        "begin_line": 67,
        "end_line": 153,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.SOURCEFILE_PROP",
        "snippet": "    public static final int\n        // Rhino's AST captures data flow. These are the annotations\n        // it used. We've mostly torn them out.\n        LOCAL_BLOCK_PROP  = -3,\n        OBJECT_IDS_PROP   = -2,\n        CATCH_SCOPE_PROP  = -1,\n        LABEL_ID_PROP     =  0,\n\n        TARGET_PROP       =  1,\n        BREAK_PROP        =  2,\n        CONTINUE_PROP     =  3,\n        ENUM_PROP         =  4,\n        FUNCTION_PROP     =  5,\n        TEMP_PROP         =  6,\n        LOCAL_PROP        =  7,\n        CODEOFFSET_PROP   =  8,\n        FIXUPS_PROP       =  9,\n        VARS_PROP         = 10,\n        USES_PROP         = 11,\n        REGEXP_PROP       = 12,\n        CASES_PROP        = 13,\n        DEFAULT_PROP      = 14,\n        CASEARRAY_PROP    = 15,\n        SOURCENAME_PROP   = 16,\n        TYPE_PROP         = 17,\n        SPECIAL_PROP_PROP = 18,\n        LABEL_PROP        = 19,\n        FINALLY_PROP      = 20,\n        LOCALCOUNT_PROP   = 21,\n    /*\n        the following properties are defined and manipulated by the\n        optimizer -\n        TARGETBLOCK_PROP - the block referenced by a branch node\n        VARIABLE_PROP - the variable referenced by a BIND or NAME node\n        LASTUSE_PROP - that variable node is the last reference before\n                        a new def or the end of the block\n        ISNUMBER_PROP - this node generates code on Number children and\n                        delivers a Number result (as opposed to Objects)\n        DIRECTCALL_PROP - this call node should emit code to test the function\n                          object against the known class and call diret if it\n                          matches.\n    */\n\n        TARGETBLOCK_PROP  = 22,\n        VARIABLE_PROP     = 23,\n        LASTUSE_PROP      = 24,\n        ISNUMBER_PROP     = 25,\n        DIRECTCALL_PROP   = 26,\n\n        SPECIALCALL_PROP  = 27,\n        DEBUGSOURCE_PROP  = 28,\n        JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n        VAR_ARGS_NAME     = 29,     // the name node is a variable length\n                                    // argument placeholder. It can never be\n                                    // used in conjunction with JSDOC_INFO_PROP.\n        SKIP_INDEXES_PROP  = 30,    // array of skipped indexes of array literal\n        INCRDECR_PROP      = 31,    // pre or post type of increment/decrement\n        MEMBER_TYPE_PROP   = 32,    // type of element access operation\n        NAME_PROP          = 33,    // property name\n        PARENTHESIZED_PROP = 34,    // expression is parenthesized\n        QUOTED_PROP        = 35,    // set to indicate a quoted object lit key\n        OPT_ARG_NAME       = 36,    // The name node is an optional argument.\n        SYNTHETIC_BLOCK_PROP = 37,  // A synthetic block. Used to make\n                                    // processing simpler, and does not\n                                    // represent a real block in the source.\n        SOURCEFILE_PROP    = 38,    // Contains the path of the source file\n                                    // from which the current node was parsed.\n        EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                    // EMPTY nodes.\n        ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                    // renaming.\n        BRACELESS_TYPE     = 41,    // The type syntax without curly braces.\n        NO_SIDE_EFFECTS_CALL = 42,  // Function or constructor call has no\n                                    // side effects.\n        // Coding convention props\n        IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n        IS_OPTIONAL_PARAM  = 44,    // The parameter is optional.\n        IS_VAR_ARGS_PARAM  = 45,    // The parameter is a var_args.\n        IS_NAMESPACE       = 46,    // The variable creates a namespace.\n        IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                    // probably generated from Java code, and\n                                    // should be resolved to the proper\n                                    // overload if possible.\n        DIRECTIVES         = 48,    // The ES5 directives on this node.\n        DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                    // indirect calls to eval.\n        LAST_PROP          = 49;",
        "begin_line": 67,
        "end_line": 153,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.EMPTY_BLOCK",
        "snippet": "    public static final int\n        // Rhino's AST captures data flow. These are the annotations\n        // it used. We've mostly torn them out.\n        LOCAL_BLOCK_PROP  = -3,\n        OBJECT_IDS_PROP   = -2,\n        CATCH_SCOPE_PROP  = -1,\n        LABEL_ID_PROP     =  0,\n\n        TARGET_PROP       =  1,\n        BREAK_PROP        =  2,\n        CONTINUE_PROP     =  3,\n        ENUM_PROP         =  4,\n        FUNCTION_PROP     =  5,\n        TEMP_PROP         =  6,\n        LOCAL_PROP        =  7,\n        CODEOFFSET_PROP   =  8,\n        FIXUPS_PROP       =  9,\n        VARS_PROP         = 10,\n        USES_PROP         = 11,\n        REGEXP_PROP       = 12,\n        CASES_PROP        = 13,\n        DEFAULT_PROP      = 14,\n        CASEARRAY_PROP    = 15,\n        SOURCENAME_PROP   = 16,\n        TYPE_PROP         = 17,\n        SPECIAL_PROP_PROP = 18,\n        LABEL_PROP        = 19,\n        FINALLY_PROP      = 20,\n        LOCALCOUNT_PROP   = 21,\n    /*\n        the following properties are defined and manipulated by the\n        optimizer -\n        TARGETBLOCK_PROP - the block referenced by a branch node\n        VARIABLE_PROP - the variable referenced by a BIND or NAME node\n        LASTUSE_PROP - that variable node is the last reference before\n                        a new def or the end of the block\n        ISNUMBER_PROP - this node generates code on Number children and\n                        delivers a Number result (as opposed to Objects)\n        DIRECTCALL_PROP - this call node should emit code to test the function\n                          object against the known class and call diret if it\n                          matches.\n    */\n\n        TARGETBLOCK_PROP  = 22,\n        VARIABLE_PROP     = 23,\n        LASTUSE_PROP      = 24,\n        ISNUMBER_PROP     = 25,\n        DIRECTCALL_PROP   = 26,\n\n        SPECIALCALL_PROP  = 27,\n        DEBUGSOURCE_PROP  = 28,\n        JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n        VAR_ARGS_NAME     = 29,     // the name node is a variable length\n                                    // argument placeholder. It can never be\n                                    // used in conjunction with JSDOC_INFO_PROP.\n        SKIP_INDEXES_PROP  = 30,    // array of skipped indexes of array literal\n        INCRDECR_PROP      = 31,    // pre or post type of increment/decrement\n        MEMBER_TYPE_PROP   = 32,    // type of element access operation\n        NAME_PROP          = 33,    // property name\n        PARENTHESIZED_PROP = 34,    // expression is parenthesized\n        QUOTED_PROP        = 35,    // set to indicate a quoted object lit key\n        OPT_ARG_NAME       = 36,    // The name node is an optional argument.\n        SYNTHETIC_BLOCK_PROP = 37,  // A synthetic block. Used to make\n                                    // processing simpler, and does not\n                                    // represent a real block in the source.\n        SOURCEFILE_PROP    = 38,    // Contains the path of the source file\n                                    // from which the current node was parsed.\n        EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                    // EMPTY nodes.\n        ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                    // renaming.\n        BRACELESS_TYPE     = 41,    // The type syntax without curly braces.\n        NO_SIDE_EFFECTS_CALL = 42,  // Function or constructor call has no\n                                    // side effects.\n        // Coding convention props\n        IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n        IS_OPTIONAL_PARAM  = 44,    // The parameter is optional.\n        IS_VAR_ARGS_PARAM  = 45,    // The parameter is a var_args.\n        IS_NAMESPACE       = 46,    // The variable creates a namespace.\n        IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                    // probably generated from Java code, and\n                                    // should be resolved to the proper\n                                    // overload if possible.\n        DIRECTIVES         = 48,    // The ES5 directives on this node.\n        DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                    // indirect calls to eval.\n        LAST_PROP          = 49;",
        "begin_line": 67,
        "end_line": 153,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.ORIGINALNAME_PROP",
        "snippet": "    public static final int\n        // Rhino's AST captures data flow. These are the annotations\n        // it used. We've mostly torn them out.\n        LOCAL_BLOCK_PROP  = -3,\n        OBJECT_IDS_PROP   = -2,\n        CATCH_SCOPE_PROP  = -1,\n        LABEL_ID_PROP     =  0,\n\n        TARGET_PROP       =  1,\n        BREAK_PROP        =  2,\n        CONTINUE_PROP     =  3,\n        ENUM_PROP         =  4,\n        FUNCTION_PROP     =  5,\n        TEMP_PROP         =  6,\n        LOCAL_PROP        =  7,\n        CODEOFFSET_PROP   =  8,\n        FIXUPS_PROP       =  9,\n        VARS_PROP         = 10,\n        USES_PROP         = 11,\n        REGEXP_PROP       = 12,\n        CASES_PROP        = 13,\n        DEFAULT_PROP      = 14,\n        CASEARRAY_PROP    = 15,\n        SOURCENAME_PROP   = 16,\n        TYPE_PROP         = 17,\n        SPECIAL_PROP_PROP = 18,\n        LABEL_PROP        = 19,\n        FINALLY_PROP      = 20,\n        LOCALCOUNT_PROP   = 21,\n    /*\n        the following properties are defined and manipulated by the\n        optimizer -\n        TARGETBLOCK_PROP - the block referenced by a branch node\n        VARIABLE_PROP - the variable referenced by a BIND or NAME node\n        LASTUSE_PROP - that variable node is the last reference before\n                        a new def or the end of the block\n        ISNUMBER_PROP - this node generates code on Number children and\n                        delivers a Number result (as opposed to Objects)\n        DIRECTCALL_PROP - this call node should emit code to test the function\n                          object against the known class and call diret if it\n                          matches.\n    */\n\n        TARGETBLOCK_PROP  = 22,\n        VARIABLE_PROP     = 23,\n        LASTUSE_PROP      = 24,\n        ISNUMBER_PROP     = 25,\n        DIRECTCALL_PROP   = 26,\n\n        SPECIALCALL_PROP  = 27,\n        DEBUGSOURCE_PROP  = 28,\n        JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n        VAR_ARGS_NAME     = 29,     // the name node is a variable length\n                                    // argument placeholder. It can never be\n                                    // used in conjunction with JSDOC_INFO_PROP.\n        SKIP_INDEXES_PROP  = 30,    // array of skipped indexes of array literal\n        INCRDECR_PROP      = 31,    // pre or post type of increment/decrement\n        MEMBER_TYPE_PROP   = 32,    // type of element access operation\n        NAME_PROP          = 33,    // property name\n        PARENTHESIZED_PROP = 34,    // expression is parenthesized\n        QUOTED_PROP        = 35,    // set to indicate a quoted object lit key\n        OPT_ARG_NAME       = 36,    // The name node is an optional argument.\n        SYNTHETIC_BLOCK_PROP = 37,  // A synthetic block. Used to make\n                                    // processing simpler, and does not\n                                    // represent a real block in the source.\n        SOURCEFILE_PROP    = 38,    // Contains the path of the source file\n                                    // from which the current node was parsed.\n        EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                    // EMPTY nodes.\n        ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                    // renaming.\n        BRACELESS_TYPE     = 41,    // The type syntax without curly braces.\n        NO_SIDE_EFFECTS_CALL = 42,  // Function or constructor call has no\n                                    // side effects.\n        // Coding convention props\n        IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n        IS_OPTIONAL_PARAM  = 44,    // The parameter is optional.\n        IS_VAR_ARGS_PARAM  = 45,    // The parameter is a var_args.\n        IS_NAMESPACE       = 46,    // The variable creates a namespace.\n        IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                    // probably generated from Java code, and\n                                    // should be resolved to the proper\n                                    // overload if possible.\n        DIRECTIVES         = 48,    // The ES5 directives on this node.\n        DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                    // indirect calls to eval.\n        LAST_PROP          = 49;",
        "begin_line": 67,
        "end_line": 153,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.BRACELESS_TYPE",
        "snippet": "    public static final int\n        // Rhino's AST captures data flow. These are the annotations\n        // it used. We've mostly torn them out.\n        LOCAL_BLOCK_PROP  = -3,\n        OBJECT_IDS_PROP   = -2,\n        CATCH_SCOPE_PROP  = -1,\n        LABEL_ID_PROP     =  0,\n\n        TARGET_PROP       =  1,\n        BREAK_PROP        =  2,\n        CONTINUE_PROP     =  3,\n        ENUM_PROP         =  4,\n        FUNCTION_PROP     =  5,\n        TEMP_PROP         =  6,\n        LOCAL_PROP        =  7,\n        CODEOFFSET_PROP   =  8,\n        FIXUPS_PROP       =  9,\n        VARS_PROP         = 10,\n        USES_PROP         = 11,\n        REGEXP_PROP       = 12,\n        CASES_PROP        = 13,\n        DEFAULT_PROP      = 14,\n        CASEARRAY_PROP    = 15,\n        SOURCENAME_PROP   = 16,\n        TYPE_PROP         = 17,\n        SPECIAL_PROP_PROP = 18,\n        LABEL_PROP        = 19,\n        FINALLY_PROP      = 20,\n        LOCALCOUNT_PROP   = 21,\n    /*\n        the following properties are defined and manipulated by the\n        optimizer -\n        TARGETBLOCK_PROP - the block referenced by a branch node\n        VARIABLE_PROP - the variable referenced by a BIND or NAME node\n        LASTUSE_PROP - that variable node is the last reference before\n                        a new def or the end of the block\n        ISNUMBER_PROP - this node generates code on Number children and\n                        delivers a Number result (as opposed to Objects)\n        DIRECTCALL_PROP - this call node should emit code to test the function\n                          object against the known class and call diret if it\n                          matches.\n    */\n\n        TARGETBLOCK_PROP  = 22,\n        VARIABLE_PROP     = 23,\n        LASTUSE_PROP      = 24,\n        ISNUMBER_PROP     = 25,\n        DIRECTCALL_PROP   = 26,\n\n        SPECIALCALL_PROP  = 27,\n        DEBUGSOURCE_PROP  = 28,\n        JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n        VAR_ARGS_NAME     = 29,     // the name node is a variable length\n                                    // argument placeholder. It can never be\n                                    // used in conjunction with JSDOC_INFO_PROP.\n        SKIP_INDEXES_PROP  = 30,    // array of skipped indexes of array literal\n        INCRDECR_PROP      = 31,    // pre or post type of increment/decrement\n        MEMBER_TYPE_PROP   = 32,    // type of element access operation\n        NAME_PROP          = 33,    // property name\n        PARENTHESIZED_PROP = 34,    // expression is parenthesized\n        QUOTED_PROP        = 35,    // set to indicate a quoted object lit key\n        OPT_ARG_NAME       = 36,    // The name node is an optional argument.\n        SYNTHETIC_BLOCK_PROP = 37,  // A synthetic block. Used to make\n                                    // processing simpler, and does not\n                                    // represent a real block in the source.\n        SOURCEFILE_PROP    = 38,    // Contains the path of the source file\n                                    // from which the current node was parsed.\n        EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                    // EMPTY nodes.\n        ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                    // renaming.\n        BRACELESS_TYPE     = 41,    // The type syntax without curly braces.\n        NO_SIDE_EFFECTS_CALL = 42,  // Function or constructor call has no\n                                    // side effects.\n        // Coding convention props\n        IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n        IS_OPTIONAL_PARAM  = 44,    // The parameter is optional.\n        IS_VAR_ARGS_PARAM  = 45,    // The parameter is a var_args.\n        IS_NAMESPACE       = 46,    // The variable creates a namespace.\n        IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                    // probably generated from Java code, and\n                                    // should be resolved to the proper\n                                    // overload if possible.\n        DIRECTIVES         = 48,    // The ES5 directives on this node.\n        DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                    // indirect calls to eval.\n        LAST_PROP          = 49;",
        "begin_line": 67,
        "end_line": 153,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.NO_SIDE_EFFECTS_CALL",
        "snippet": "    public static final int\n        // Rhino's AST captures data flow. These are the annotations\n        // it used. We've mostly torn them out.\n        LOCAL_BLOCK_PROP  = -3,\n        OBJECT_IDS_PROP   = -2,\n        CATCH_SCOPE_PROP  = -1,\n        LABEL_ID_PROP     =  0,\n\n        TARGET_PROP       =  1,\n        BREAK_PROP        =  2,\n        CONTINUE_PROP     =  3,\n        ENUM_PROP         =  4,\n        FUNCTION_PROP     =  5,\n        TEMP_PROP         =  6,\n        LOCAL_PROP        =  7,\n        CODEOFFSET_PROP   =  8,\n        FIXUPS_PROP       =  9,\n        VARS_PROP         = 10,\n        USES_PROP         = 11,\n        REGEXP_PROP       = 12,\n        CASES_PROP        = 13,\n        DEFAULT_PROP      = 14,\n        CASEARRAY_PROP    = 15,\n        SOURCENAME_PROP   = 16,\n        TYPE_PROP         = 17,\n        SPECIAL_PROP_PROP = 18,\n        LABEL_PROP        = 19,\n        FINALLY_PROP      = 20,\n        LOCALCOUNT_PROP   = 21,\n    /*\n        the following properties are defined and manipulated by the\n        optimizer -\n        TARGETBLOCK_PROP - the block referenced by a branch node\n        VARIABLE_PROP - the variable referenced by a BIND or NAME node\n        LASTUSE_PROP - that variable node is the last reference before\n                        a new def or the end of the block\n        ISNUMBER_PROP - this node generates code on Number children and\n                        delivers a Number result (as opposed to Objects)\n        DIRECTCALL_PROP - this call node should emit code to test the function\n                          object against the known class and call diret if it\n                          matches.\n    */\n\n        TARGETBLOCK_PROP  = 22,\n        VARIABLE_PROP     = 23,\n        LASTUSE_PROP      = 24,\n        ISNUMBER_PROP     = 25,\n        DIRECTCALL_PROP   = 26,\n\n        SPECIALCALL_PROP  = 27,\n        DEBUGSOURCE_PROP  = 28,\n        JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n        VAR_ARGS_NAME     = 29,     // the name node is a variable length\n                                    // argument placeholder. It can never be\n                                    // used in conjunction with JSDOC_INFO_PROP.\n        SKIP_INDEXES_PROP  = 30,    // array of skipped indexes of array literal\n        INCRDECR_PROP      = 31,    // pre or post type of increment/decrement\n        MEMBER_TYPE_PROP   = 32,    // type of element access operation\n        NAME_PROP          = 33,    // property name\n        PARENTHESIZED_PROP = 34,    // expression is parenthesized\n        QUOTED_PROP        = 35,    // set to indicate a quoted object lit key\n        OPT_ARG_NAME       = 36,    // The name node is an optional argument.\n        SYNTHETIC_BLOCK_PROP = 37,  // A synthetic block. Used to make\n                                    // processing simpler, and does not\n                                    // represent a real block in the source.\n        SOURCEFILE_PROP    = 38,    // Contains the path of the source file\n                                    // from which the current node was parsed.\n        EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                    // EMPTY nodes.\n        ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                    // renaming.\n        BRACELESS_TYPE     = 41,    // The type syntax without curly braces.\n        NO_SIDE_EFFECTS_CALL = 42,  // Function or constructor call has no\n                                    // side effects.\n        // Coding convention props\n        IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n        IS_OPTIONAL_PARAM  = 44,    // The parameter is optional.\n        IS_VAR_ARGS_PARAM  = 45,    // The parameter is a var_args.\n        IS_NAMESPACE       = 46,    // The variable creates a namespace.\n        IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                    // probably generated from Java code, and\n                                    // should be resolved to the proper\n                                    // overload if possible.\n        DIRECTIVES         = 48,    // The ES5 directives on this node.\n        DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                    // indirect calls to eval.\n        LAST_PROP          = 49;",
        "begin_line": 67,
        "end_line": 153,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.IS_CONSTANT_NAME",
        "snippet": "    public static final int\n        // Rhino's AST captures data flow. These are the annotations\n        // it used. We've mostly torn them out.\n        LOCAL_BLOCK_PROP  = -3,\n        OBJECT_IDS_PROP   = -2,\n        CATCH_SCOPE_PROP  = -1,\n        LABEL_ID_PROP     =  0,\n\n        TARGET_PROP       =  1,\n        BREAK_PROP        =  2,\n        CONTINUE_PROP     =  3,\n        ENUM_PROP         =  4,\n        FUNCTION_PROP     =  5,\n        TEMP_PROP         =  6,\n        LOCAL_PROP        =  7,\n        CODEOFFSET_PROP   =  8,\n        FIXUPS_PROP       =  9,\n        VARS_PROP         = 10,\n        USES_PROP         = 11,\n        REGEXP_PROP       = 12,\n        CASES_PROP        = 13,\n        DEFAULT_PROP      = 14,\n        CASEARRAY_PROP    = 15,\n        SOURCENAME_PROP   = 16,\n        TYPE_PROP         = 17,\n        SPECIAL_PROP_PROP = 18,\n        LABEL_PROP        = 19,\n        FINALLY_PROP      = 20,\n        LOCALCOUNT_PROP   = 21,\n    /*\n        the following properties are defined and manipulated by the\n        optimizer -\n        TARGETBLOCK_PROP - the block referenced by a branch node\n        VARIABLE_PROP - the variable referenced by a BIND or NAME node\n        LASTUSE_PROP - that variable node is the last reference before\n                        a new def or the end of the block\n        ISNUMBER_PROP - this node generates code on Number children and\n                        delivers a Number result (as opposed to Objects)\n        DIRECTCALL_PROP - this call node should emit code to test the function\n                          object against the known class and call diret if it\n                          matches.\n    */\n\n        TARGETBLOCK_PROP  = 22,\n        VARIABLE_PROP     = 23,\n        LASTUSE_PROP      = 24,\n        ISNUMBER_PROP     = 25,\n        DIRECTCALL_PROP   = 26,\n\n        SPECIALCALL_PROP  = 27,\n        DEBUGSOURCE_PROP  = 28,\n        JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n        VAR_ARGS_NAME     = 29,     // the name node is a variable length\n                                    // argument placeholder. It can never be\n                                    // used in conjunction with JSDOC_INFO_PROP.\n        SKIP_INDEXES_PROP  = 30,    // array of skipped indexes of array literal\n        INCRDECR_PROP      = 31,    // pre or post type of increment/decrement\n        MEMBER_TYPE_PROP   = 32,    // type of element access operation\n        NAME_PROP          = 33,    // property name\n        PARENTHESIZED_PROP = 34,    // expression is parenthesized\n        QUOTED_PROP        = 35,    // set to indicate a quoted object lit key\n        OPT_ARG_NAME       = 36,    // The name node is an optional argument.\n        SYNTHETIC_BLOCK_PROP = 37,  // A synthetic block. Used to make\n                                    // processing simpler, and does not\n                                    // represent a real block in the source.\n        SOURCEFILE_PROP    = 38,    // Contains the path of the source file\n                                    // from which the current node was parsed.\n        EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                    // EMPTY nodes.\n        ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                    // renaming.\n        BRACELESS_TYPE     = 41,    // The type syntax without curly braces.\n        NO_SIDE_EFFECTS_CALL = 42,  // Function or constructor call has no\n                                    // side effects.\n        // Coding convention props\n        IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n        IS_OPTIONAL_PARAM  = 44,    // The parameter is optional.\n        IS_VAR_ARGS_PARAM  = 45,    // The parameter is a var_args.\n        IS_NAMESPACE       = 46,    // The variable creates a namespace.\n        IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                    // probably generated from Java code, and\n                                    // should be resolved to the proper\n                                    // overload if possible.\n        DIRECTIVES         = 48,    // The ES5 directives on this node.\n        DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                    // indirect calls to eval.\n        LAST_PROP          = 49;",
        "begin_line": 67,
        "end_line": 153,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.IS_OPTIONAL_PARAM",
        "snippet": "    public static final int\n        // Rhino's AST captures data flow. These are the annotations\n        // it used. We've mostly torn them out.\n        LOCAL_BLOCK_PROP  = -3,\n        OBJECT_IDS_PROP   = -2,\n        CATCH_SCOPE_PROP  = -1,\n        LABEL_ID_PROP     =  0,\n\n        TARGET_PROP       =  1,\n        BREAK_PROP        =  2,\n        CONTINUE_PROP     =  3,\n        ENUM_PROP         =  4,\n        FUNCTION_PROP     =  5,\n        TEMP_PROP         =  6,\n        LOCAL_PROP        =  7,\n        CODEOFFSET_PROP   =  8,\n        FIXUPS_PROP       =  9,\n        VARS_PROP         = 10,\n        USES_PROP         = 11,\n        REGEXP_PROP       = 12,\n        CASES_PROP        = 13,\n        DEFAULT_PROP      = 14,\n        CASEARRAY_PROP    = 15,\n        SOURCENAME_PROP   = 16,\n        TYPE_PROP         = 17,\n        SPECIAL_PROP_PROP = 18,\n        LABEL_PROP        = 19,\n        FINALLY_PROP      = 20,\n        LOCALCOUNT_PROP   = 21,\n    /*\n        the following properties are defined and manipulated by the\n        optimizer -\n        TARGETBLOCK_PROP - the block referenced by a branch node\n        VARIABLE_PROP - the variable referenced by a BIND or NAME node\n        LASTUSE_PROP - that variable node is the last reference before\n                        a new def or the end of the block\n        ISNUMBER_PROP - this node generates code on Number children and\n                        delivers a Number result (as opposed to Objects)\n        DIRECTCALL_PROP - this call node should emit code to test the function\n                          object against the known class and call diret if it\n                          matches.\n    */\n\n        TARGETBLOCK_PROP  = 22,\n        VARIABLE_PROP     = 23,\n        LASTUSE_PROP      = 24,\n        ISNUMBER_PROP     = 25,\n        DIRECTCALL_PROP   = 26,\n\n        SPECIALCALL_PROP  = 27,\n        DEBUGSOURCE_PROP  = 28,\n        JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n        VAR_ARGS_NAME     = 29,     // the name node is a variable length\n                                    // argument placeholder. It can never be\n                                    // used in conjunction with JSDOC_INFO_PROP.\n        SKIP_INDEXES_PROP  = 30,    // array of skipped indexes of array literal\n        INCRDECR_PROP      = 31,    // pre or post type of increment/decrement\n        MEMBER_TYPE_PROP   = 32,    // type of element access operation\n        NAME_PROP          = 33,    // property name\n        PARENTHESIZED_PROP = 34,    // expression is parenthesized\n        QUOTED_PROP        = 35,    // set to indicate a quoted object lit key\n        OPT_ARG_NAME       = 36,    // The name node is an optional argument.\n        SYNTHETIC_BLOCK_PROP = 37,  // A synthetic block. Used to make\n                                    // processing simpler, and does not\n                                    // represent a real block in the source.\n        SOURCEFILE_PROP    = 38,    // Contains the path of the source file\n                                    // from which the current node was parsed.\n        EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                    // EMPTY nodes.\n        ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                    // renaming.\n        BRACELESS_TYPE     = 41,    // The type syntax without curly braces.\n        NO_SIDE_EFFECTS_CALL = 42,  // Function or constructor call has no\n                                    // side effects.\n        // Coding convention props\n        IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n        IS_OPTIONAL_PARAM  = 44,    // The parameter is optional.\n        IS_VAR_ARGS_PARAM  = 45,    // The parameter is a var_args.\n        IS_NAMESPACE       = 46,    // The variable creates a namespace.\n        IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                    // probably generated from Java code, and\n                                    // should be resolved to the proper\n                                    // overload if possible.\n        DIRECTIVES         = 48,    // The ES5 directives on this node.\n        DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                    // indirect calls to eval.\n        LAST_PROP          = 49;",
        "begin_line": 67,
        "end_line": 153,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.IS_VAR_ARGS_PARAM",
        "snippet": "    public static final int\n        // Rhino's AST captures data flow. These are the annotations\n        // it used. We've mostly torn them out.\n        LOCAL_BLOCK_PROP  = -3,\n        OBJECT_IDS_PROP   = -2,\n        CATCH_SCOPE_PROP  = -1,\n        LABEL_ID_PROP     =  0,\n\n        TARGET_PROP       =  1,\n        BREAK_PROP        =  2,\n        CONTINUE_PROP     =  3,\n        ENUM_PROP         =  4,\n        FUNCTION_PROP     =  5,\n        TEMP_PROP         =  6,\n        LOCAL_PROP        =  7,\n        CODEOFFSET_PROP   =  8,\n        FIXUPS_PROP       =  9,\n        VARS_PROP         = 10,\n        USES_PROP         = 11,\n        REGEXP_PROP       = 12,\n        CASES_PROP        = 13,\n        DEFAULT_PROP      = 14,\n        CASEARRAY_PROP    = 15,\n        SOURCENAME_PROP   = 16,\n        TYPE_PROP         = 17,\n        SPECIAL_PROP_PROP = 18,\n        LABEL_PROP        = 19,\n        FINALLY_PROP      = 20,\n        LOCALCOUNT_PROP   = 21,\n    /*\n        the following properties are defined and manipulated by the\n        optimizer -\n        TARGETBLOCK_PROP - the block referenced by a branch node\n        VARIABLE_PROP - the variable referenced by a BIND or NAME node\n        LASTUSE_PROP - that variable node is the last reference before\n                        a new def or the end of the block\n        ISNUMBER_PROP - this node generates code on Number children and\n                        delivers a Number result (as opposed to Objects)\n        DIRECTCALL_PROP - this call node should emit code to test the function\n                          object against the known class and call diret if it\n                          matches.\n    */\n\n        TARGETBLOCK_PROP  = 22,\n        VARIABLE_PROP     = 23,\n        LASTUSE_PROP      = 24,\n        ISNUMBER_PROP     = 25,\n        DIRECTCALL_PROP   = 26,\n\n        SPECIALCALL_PROP  = 27,\n        DEBUGSOURCE_PROP  = 28,\n        JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n        VAR_ARGS_NAME     = 29,     // the name node is a variable length\n                                    // argument placeholder. It can never be\n                                    // used in conjunction with JSDOC_INFO_PROP.\n        SKIP_INDEXES_PROP  = 30,    // array of skipped indexes of array literal\n        INCRDECR_PROP      = 31,    // pre or post type of increment/decrement\n        MEMBER_TYPE_PROP   = 32,    // type of element access operation\n        NAME_PROP          = 33,    // property name\n        PARENTHESIZED_PROP = 34,    // expression is parenthesized\n        QUOTED_PROP        = 35,    // set to indicate a quoted object lit key\n        OPT_ARG_NAME       = 36,    // The name node is an optional argument.\n        SYNTHETIC_BLOCK_PROP = 37,  // A synthetic block. Used to make\n                                    // processing simpler, and does not\n                                    // represent a real block in the source.\n        SOURCEFILE_PROP    = 38,    // Contains the path of the source file\n                                    // from which the current node was parsed.\n        EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                    // EMPTY nodes.\n        ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                    // renaming.\n        BRACELESS_TYPE     = 41,    // The type syntax without curly braces.\n        NO_SIDE_EFFECTS_CALL = 42,  // Function or constructor call has no\n                                    // side effects.\n        // Coding convention props\n        IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n        IS_OPTIONAL_PARAM  = 44,    // The parameter is optional.\n        IS_VAR_ARGS_PARAM  = 45,    // The parameter is a var_args.\n        IS_NAMESPACE       = 46,    // The variable creates a namespace.\n        IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                    // probably generated from Java code, and\n                                    // should be resolved to the proper\n                                    // overload if possible.\n        DIRECTIVES         = 48,    // The ES5 directives on this node.\n        DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                    // indirect calls to eval.\n        LAST_PROP          = 49;",
        "begin_line": 67,
        "end_line": 153,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.IS_NAMESPACE",
        "snippet": "    public static final int\n        // Rhino's AST captures data flow. These are the annotations\n        // it used. We've mostly torn them out.\n        LOCAL_BLOCK_PROP  = -3,\n        OBJECT_IDS_PROP   = -2,\n        CATCH_SCOPE_PROP  = -1,\n        LABEL_ID_PROP     =  0,\n\n        TARGET_PROP       =  1,\n        BREAK_PROP        =  2,\n        CONTINUE_PROP     =  3,\n        ENUM_PROP         =  4,\n        FUNCTION_PROP     =  5,\n        TEMP_PROP         =  6,\n        LOCAL_PROP        =  7,\n        CODEOFFSET_PROP   =  8,\n        FIXUPS_PROP       =  9,\n        VARS_PROP         = 10,\n        USES_PROP         = 11,\n        REGEXP_PROP       = 12,\n        CASES_PROP        = 13,\n        DEFAULT_PROP      = 14,\n        CASEARRAY_PROP    = 15,\n        SOURCENAME_PROP   = 16,\n        TYPE_PROP         = 17,\n        SPECIAL_PROP_PROP = 18,\n        LABEL_PROP        = 19,\n        FINALLY_PROP      = 20,\n        LOCALCOUNT_PROP   = 21,\n    /*\n        the following properties are defined and manipulated by the\n        optimizer -\n        TARGETBLOCK_PROP - the block referenced by a branch node\n        VARIABLE_PROP - the variable referenced by a BIND or NAME node\n        LASTUSE_PROP - that variable node is the last reference before\n                        a new def or the end of the block\n        ISNUMBER_PROP - this node generates code on Number children and\n                        delivers a Number result (as opposed to Objects)\n        DIRECTCALL_PROP - this call node should emit code to test the function\n                          object against the known class and call diret if it\n                          matches.\n    */\n\n        TARGETBLOCK_PROP  = 22,\n        VARIABLE_PROP     = 23,\n        LASTUSE_PROP      = 24,\n        ISNUMBER_PROP     = 25,\n        DIRECTCALL_PROP   = 26,\n\n        SPECIALCALL_PROP  = 27,\n        DEBUGSOURCE_PROP  = 28,\n        JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n        VAR_ARGS_NAME     = 29,     // the name node is a variable length\n                                    // argument placeholder. It can never be\n                                    // used in conjunction with JSDOC_INFO_PROP.\n        SKIP_INDEXES_PROP  = 30,    // array of skipped indexes of array literal\n        INCRDECR_PROP      = 31,    // pre or post type of increment/decrement\n        MEMBER_TYPE_PROP   = 32,    // type of element access operation\n        NAME_PROP          = 33,    // property name\n        PARENTHESIZED_PROP = 34,    // expression is parenthesized\n        QUOTED_PROP        = 35,    // set to indicate a quoted object lit key\n        OPT_ARG_NAME       = 36,    // The name node is an optional argument.\n        SYNTHETIC_BLOCK_PROP = 37,  // A synthetic block. Used to make\n                                    // processing simpler, and does not\n                                    // represent a real block in the source.\n        SOURCEFILE_PROP    = 38,    // Contains the path of the source file\n                                    // from which the current node was parsed.\n        EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                    // EMPTY nodes.\n        ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                    // renaming.\n        BRACELESS_TYPE     = 41,    // The type syntax without curly braces.\n        NO_SIDE_EFFECTS_CALL = 42,  // Function or constructor call has no\n                                    // side effects.\n        // Coding convention props\n        IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n        IS_OPTIONAL_PARAM  = 44,    // The parameter is optional.\n        IS_VAR_ARGS_PARAM  = 45,    // The parameter is a var_args.\n        IS_NAMESPACE       = 46,    // The variable creates a namespace.\n        IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                    // probably generated from Java code, and\n                                    // should be resolved to the proper\n                                    // overload if possible.\n        DIRECTIVES         = 48,    // The ES5 directives on this node.\n        DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                    // indirect calls to eval.\n        LAST_PROP          = 49;",
        "begin_line": 67,
        "end_line": 153,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.IS_DISPATCHER",
        "snippet": "    public static final int\n        // Rhino's AST captures data flow. These are the annotations\n        // it used. We've mostly torn them out.\n        LOCAL_BLOCK_PROP  = -3,\n        OBJECT_IDS_PROP   = -2,\n        CATCH_SCOPE_PROP  = -1,\n        LABEL_ID_PROP     =  0,\n\n        TARGET_PROP       =  1,\n        BREAK_PROP        =  2,\n        CONTINUE_PROP     =  3,\n        ENUM_PROP         =  4,\n        FUNCTION_PROP     =  5,\n        TEMP_PROP         =  6,\n        LOCAL_PROP        =  7,\n        CODEOFFSET_PROP   =  8,\n        FIXUPS_PROP       =  9,\n        VARS_PROP         = 10,\n        USES_PROP         = 11,\n        REGEXP_PROP       = 12,\n        CASES_PROP        = 13,\n        DEFAULT_PROP      = 14,\n        CASEARRAY_PROP    = 15,\n        SOURCENAME_PROP   = 16,\n        TYPE_PROP         = 17,\n        SPECIAL_PROP_PROP = 18,\n        LABEL_PROP        = 19,\n        FINALLY_PROP      = 20,\n        LOCALCOUNT_PROP   = 21,\n    /*\n        the following properties are defined and manipulated by the\n        optimizer -\n        TARGETBLOCK_PROP - the block referenced by a branch node\n        VARIABLE_PROP - the variable referenced by a BIND or NAME node\n        LASTUSE_PROP - that variable node is the last reference before\n                        a new def or the end of the block\n        ISNUMBER_PROP - this node generates code on Number children and\n                        delivers a Number result (as opposed to Objects)\n        DIRECTCALL_PROP - this call node should emit code to test the function\n                          object against the known class and call diret if it\n                          matches.\n    */\n\n        TARGETBLOCK_PROP  = 22,\n        VARIABLE_PROP     = 23,\n        LASTUSE_PROP      = 24,\n        ISNUMBER_PROP     = 25,\n        DIRECTCALL_PROP   = 26,\n\n        SPECIALCALL_PROP  = 27,\n        DEBUGSOURCE_PROP  = 28,\n        JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n        VAR_ARGS_NAME     = 29,     // the name node is a variable length\n                                    // argument placeholder. It can never be\n                                    // used in conjunction with JSDOC_INFO_PROP.\n        SKIP_INDEXES_PROP  = 30,    // array of skipped indexes of array literal\n        INCRDECR_PROP      = 31,    // pre or post type of increment/decrement\n        MEMBER_TYPE_PROP   = 32,    // type of element access operation\n        NAME_PROP          = 33,    // property name\n        PARENTHESIZED_PROP = 34,    // expression is parenthesized\n        QUOTED_PROP        = 35,    // set to indicate a quoted object lit key\n        OPT_ARG_NAME       = 36,    // The name node is an optional argument.\n        SYNTHETIC_BLOCK_PROP = 37,  // A synthetic block. Used to make\n                                    // processing simpler, and does not\n                                    // represent a real block in the source.\n        SOURCEFILE_PROP    = 38,    // Contains the path of the source file\n                                    // from which the current node was parsed.\n        EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                    // EMPTY nodes.\n        ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                    // renaming.\n        BRACELESS_TYPE     = 41,    // The type syntax without curly braces.\n        NO_SIDE_EFFECTS_CALL = 42,  // Function or constructor call has no\n                                    // side effects.\n        // Coding convention props\n        IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n        IS_OPTIONAL_PARAM  = 44,    // The parameter is optional.\n        IS_VAR_ARGS_PARAM  = 45,    // The parameter is a var_args.\n        IS_NAMESPACE       = 46,    // The variable creates a namespace.\n        IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                    // probably generated from Java code, and\n                                    // should be resolved to the proper\n                                    // overload if possible.\n        DIRECTIVES         = 48,    // The ES5 directives on this node.\n        DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                    // indirect calls to eval.\n        LAST_PROP          = 49;",
        "begin_line": 67,
        "end_line": 153,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.DIRECTIVES",
        "snippet": "    public static final int\n        // Rhino's AST captures data flow. These are the annotations\n        // it used. We've mostly torn them out.\n        LOCAL_BLOCK_PROP  = -3,\n        OBJECT_IDS_PROP   = -2,\n        CATCH_SCOPE_PROP  = -1,\n        LABEL_ID_PROP     =  0,\n\n        TARGET_PROP       =  1,\n        BREAK_PROP        =  2,\n        CONTINUE_PROP     =  3,\n        ENUM_PROP         =  4,\n        FUNCTION_PROP     =  5,\n        TEMP_PROP         =  6,\n        LOCAL_PROP        =  7,\n        CODEOFFSET_PROP   =  8,\n        FIXUPS_PROP       =  9,\n        VARS_PROP         = 10,\n        USES_PROP         = 11,\n        REGEXP_PROP       = 12,\n        CASES_PROP        = 13,\n        DEFAULT_PROP      = 14,\n        CASEARRAY_PROP    = 15,\n        SOURCENAME_PROP   = 16,\n        TYPE_PROP         = 17,\n        SPECIAL_PROP_PROP = 18,\n        LABEL_PROP        = 19,\n        FINALLY_PROP      = 20,\n        LOCALCOUNT_PROP   = 21,\n    /*\n        the following properties are defined and manipulated by the\n        optimizer -\n        TARGETBLOCK_PROP - the block referenced by a branch node\n        VARIABLE_PROP - the variable referenced by a BIND or NAME node\n        LASTUSE_PROP - that variable node is the last reference before\n                        a new def or the end of the block\n        ISNUMBER_PROP - this node generates code on Number children and\n                        delivers a Number result (as opposed to Objects)\n        DIRECTCALL_PROP - this call node should emit code to test the function\n                          object against the known class and call diret if it\n                          matches.\n    */\n\n        TARGETBLOCK_PROP  = 22,\n        VARIABLE_PROP     = 23,\n        LASTUSE_PROP      = 24,\n        ISNUMBER_PROP     = 25,\n        DIRECTCALL_PROP   = 26,\n\n        SPECIALCALL_PROP  = 27,\n        DEBUGSOURCE_PROP  = 28,\n        JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n        VAR_ARGS_NAME     = 29,     // the name node is a variable length\n                                    // argument placeholder. It can never be\n                                    // used in conjunction with JSDOC_INFO_PROP.\n        SKIP_INDEXES_PROP  = 30,    // array of skipped indexes of array literal\n        INCRDECR_PROP      = 31,    // pre or post type of increment/decrement\n        MEMBER_TYPE_PROP   = 32,    // type of element access operation\n        NAME_PROP          = 33,    // property name\n        PARENTHESIZED_PROP = 34,    // expression is parenthesized\n        QUOTED_PROP        = 35,    // set to indicate a quoted object lit key\n        OPT_ARG_NAME       = 36,    // The name node is an optional argument.\n        SYNTHETIC_BLOCK_PROP = 37,  // A synthetic block. Used to make\n                                    // processing simpler, and does not\n                                    // represent a real block in the source.\n        SOURCEFILE_PROP    = 38,    // Contains the path of the source file\n                                    // from which the current node was parsed.\n        EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                    // EMPTY nodes.\n        ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                    // renaming.\n        BRACELESS_TYPE     = 41,    // The type syntax without curly braces.\n        NO_SIDE_EFFECTS_CALL = 42,  // Function or constructor call has no\n                                    // side effects.\n        // Coding convention props\n        IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n        IS_OPTIONAL_PARAM  = 44,    // The parameter is optional.\n        IS_VAR_ARGS_PARAM  = 45,    // The parameter is a var_args.\n        IS_NAMESPACE       = 46,    // The variable creates a namespace.\n        IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                    // probably generated from Java code, and\n                                    // should be resolved to the proper\n                                    // overload if possible.\n        DIRECTIVES         = 48,    // The ES5 directives on this node.\n        DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                    // indirect calls to eval.\n        LAST_PROP          = 49;",
        "begin_line": 67,
        "end_line": 153,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.DIRECT_EVAL",
        "snippet": "    public static final int\n        // Rhino's AST captures data flow. These are the annotations\n        // it used. We've mostly torn them out.\n        LOCAL_BLOCK_PROP  = -3,\n        OBJECT_IDS_PROP   = -2,\n        CATCH_SCOPE_PROP  = -1,\n        LABEL_ID_PROP     =  0,\n\n        TARGET_PROP       =  1,\n        BREAK_PROP        =  2,\n        CONTINUE_PROP     =  3,\n        ENUM_PROP         =  4,\n        FUNCTION_PROP     =  5,\n        TEMP_PROP         =  6,\n        LOCAL_PROP        =  7,\n        CODEOFFSET_PROP   =  8,\n        FIXUPS_PROP       =  9,\n        VARS_PROP         = 10,\n        USES_PROP         = 11,\n        REGEXP_PROP       = 12,\n        CASES_PROP        = 13,\n        DEFAULT_PROP      = 14,\n        CASEARRAY_PROP    = 15,\n        SOURCENAME_PROP   = 16,\n        TYPE_PROP         = 17,\n        SPECIAL_PROP_PROP = 18,\n        LABEL_PROP        = 19,\n        FINALLY_PROP      = 20,\n        LOCALCOUNT_PROP   = 21,\n    /*\n        the following properties are defined and manipulated by the\n        optimizer -\n        TARGETBLOCK_PROP - the block referenced by a branch node\n        VARIABLE_PROP - the variable referenced by a BIND or NAME node\n        LASTUSE_PROP - that variable node is the last reference before\n                        a new def or the end of the block\n        ISNUMBER_PROP - this node generates code on Number children and\n                        delivers a Number result (as opposed to Objects)\n        DIRECTCALL_PROP - this call node should emit code to test the function\n                          object against the known class and call diret if it\n                          matches.\n    */\n\n        TARGETBLOCK_PROP  = 22,\n        VARIABLE_PROP     = 23,\n        LASTUSE_PROP      = 24,\n        ISNUMBER_PROP     = 25,\n        DIRECTCALL_PROP   = 26,\n\n        SPECIALCALL_PROP  = 27,\n        DEBUGSOURCE_PROP  = 28,\n        JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n        VAR_ARGS_NAME     = 29,     // the name node is a variable length\n                                    // argument placeholder. It can never be\n                                    // used in conjunction with JSDOC_INFO_PROP.\n        SKIP_INDEXES_PROP  = 30,    // array of skipped indexes of array literal\n        INCRDECR_PROP      = 31,    // pre or post type of increment/decrement\n        MEMBER_TYPE_PROP   = 32,    // type of element access operation\n        NAME_PROP          = 33,    // property name\n        PARENTHESIZED_PROP = 34,    // expression is parenthesized\n        QUOTED_PROP        = 35,    // set to indicate a quoted object lit key\n        OPT_ARG_NAME       = 36,    // The name node is an optional argument.\n        SYNTHETIC_BLOCK_PROP = 37,  // A synthetic block. Used to make\n                                    // processing simpler, and does not\n                                    // represent a real block in the source.\n        SOURCEFILE_PROP    = 38,    // Contains the path of the source file\n                                    // from which the current node was parsed.\n        EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                    // EMPTY nodes.\n        ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                    // renaming.\n        BRACELESS_TYPE     = 41,    // The type syntax without curly braces.\n        NO_SIDE_EFFECTS_CALL = 42,  // Function or constructor call has no\n                                    // side effects.\n        // Coding convention props\n        IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n        IS_OPTIONAL_PARAM  = 44,    // The parameter is optional.\n        IS_VAR_ARGS_PARAM  = 45,    // The parameter is a var_args.\n        IS_NAMESPACE       = 46,    // The variable creates a namespace.\n        IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                    // probably generated from Java code, and\n                                    // should be resolved to the proper\n                                    // overload if possible.\n        DIRECTIVES         = 48,    // The ES5 directives on this node.\n        DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                    // indirect calls to eval.\n        LAST_PROP          = 49;",
        "begin_line": 67,
        "end_line": 153,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.LAST_PROP",
        "snippet": "    public static final int\n        // Rhino's AST captures data flow. These are the annotations\n        // it used. We've mostly torn them out.\n        LOCAL_BLOCK_PROP  = -3,\n        OBJECT_IDS_PROP   = -2,\n        CATCH_SCOPE_PROP  = -1,\n        LABEL_ID_PROP     =  0,\n\n        TARGET_PROP       =  1,\n        BREAK_PROP        =  2,\n        CONTINUE_PROP     =  3,\n        ENUM_PROP         =  4,\n        FUNCTION_PROP     =  5,\n        TEMP_PROP         =  6,\n        LOCAL_PROP        =  7,\n        CODEOFFSET_PROP   =  8,\n        FIXUPS_PROP       =  9,\n        VARS_PROP         = 10,\n        USES_PROP         = 11,\n        REGEXP_PROP       = 12,\n        CASES_PROP        = 13,\n        DEFAULT_PROP      = 14,\n        CASEARRAY_PROP    = 15,\n        SOURCENAME_PROP   = 16,\n        TYPE_PROP         = 17,\n        SPECIAL_PROP_PROP = 18,\n        LABEL_PROP        = 19,\n        FINALLY_PROP      = 20,\n        LOCALCOUNT_PROP   = 21,\n    /*\n        the following properties are defined and manipulated by the\n        optimizer -\n        TARGETBLOCK_PROP - the block referenced by a branch node\n        VARIABLE_PROP - the variable referenced by a BIND or NAME node\n        LASTUSE_PROP - that variable node is the last reference before\n                        a new def or the end of the block\n        ISNUMBER_PROP - this node generates code on Number children and\n                        delivers a Number result (as opposed to Objects)\n        DIRECTCALL_PROP - this call node should emit code to test the function\n                          object against the known class and call diret if it\n                          matches.\n    */\n\n        TARGETBLOCK_PROP  = 22,\n        VARIABLE_PROP     = 23,\n        LASTUSE_PROP      = 24,\n        ISNUMBER_PROP     = 25,\n        DIRECTCALL_PROP   = 26,\n\n        SPECIALCALL_PROP  = 27,\n        DEBUGSOURCE_PROP  = 28,\n        JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n        VAR_ARGS_NAME     = 29,     // the name node is a variable length\n                                    // argument placeholder. It can never be\n                                    // used in conjunction with JSDOC_INFO_PROP.\n        SKIP_INDEXES_PROP  = 30,    // array of skipped indexes of array literal\n        INCRDECR_PROP      = 31,    // pre or post type of increment/decrement\n        MEMBER_TYPE_PROP   = 32,    // type of element access operation\n        NAME_PROP          = 33,    // property name\n        PARENTHESIZED_PROP = 34,    // expression is parenthesized\n        QUOTED_PROP        = 35,    // set to indicate a quoted object lit key\n        OPT_ARG_NAME       = 36,    // The name node is an optional argument.\n        SYNTHETIC_BLOCK_PROP = 37,  // A synthetic block. Used to make\n                                    // processing simpler, and does not\n                                    // represent a real block in the source.\n        SOURCEFILE_PROP    = 38,    // Contains the path of the source file\n                                    // from which the current node was parsed.\n        EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                    // EMPTY nodes.\n        ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                    // renaming.\n        BRACELESS_TYPE     = 41,    // The type syntax without curly braces.\n        NO_SIDE_EFFECTS_CALL = 42,  // Function or constructor call has no\n                                    // side effects.\n        // Coding convention props\n        IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n        IS_OPTIONAL_PARAM  = 44,    // The parameter is optional.\n        IS_VAR_ARGS_PARAM  = 45,    // The parameter is a var_args.\n        IS_NAMESPACE       = 46,    // The variable creates a namespace.\n        IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                    // probably generated from Java code, and\n                                    // should be resolved to the proper\n                                    // overload if possible.\n        DIRECTIVES         = 48,    // The ES5 directives on this node.\n        DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                    // indirect calls to eval.\n        LAST_PROP          = 49;",
        "begin_line": 67,
        "end_line": 153,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.BOTH",
        "snippet": "    public static final int\n        BOTH = 0,\n        LEFT = 1,\n        RIGHT = 2;",
        "begin_line": 157,
        "end_line": 160,
        "comment": " which of the children are Number types"
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.LEFT",
        "snippet": "    public static final int\n        BOTH = 0,\n        LEFT = 1,\n        RIGHT = 2;",
        "begin_line": 157,
        "end_line": 160,
        "comment": " which of the children are Number types"
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.RIGHT",
        "snippet": "    public static final int\n        BOTH = 0,\n        LEFT = 1,\n        RIGHT = 2;",
        "begin_line": 157,
        "end_line": 160,
        "comment": " which of the children are Number types"
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.NON_SPECIALCALL",
        "snippet": "    public static final int    // values for SPECIALCALL_PROP\n        NON_SPECIALCALL  = 0,\n        SPECIALCALL_EVAL = 1,\n        SPECIALCALL_WITH = 2;",
        "begin_line": 162,
        "end_line": 165,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.SPECIALCALL_EVAL",
        "snippet": "    public static final int    // values for SPECIALCALL_PROP\n        NON_SPECIALCALL  = 0,\n        SPECIALCALL_EVAL = 1,\n        SPECIALCALL_WITH = 2;",
        "begin_line": 162,
        "end_line": 165,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.SPECIALCALL_WITH",
        "snippet": "    public static final int    // values for SPECIALCALL_PROP\n        NON_SPECIALCALL  = 0,\n        SPECIALCALL_EVAL = 1,\n        SPECIALCALL_WITH = 2;",
        "begin_line": 162,
        "end_line": 165,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.DECR_FLAG",
        "snippet": "    public static final int   // flags for INCRDECR_PROP\n        DECR_FLAG = 0x1,\n        POST_FLAG = 0x2;",
        "begin_line": 167,
        "end_line": 169,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.POST_FLAG",
        "snippet": "    public static final int   // flags for INCRDECR_PROP\n        DECR_FLAG = 0x1,\n        POST_FLAG = 0x2;",
        "begin_line": 167,
        "end_line": 169,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.PROPERTY_FLAG",
        "snippet": "    public static final int   // flags for MEMBER_TYPE_PROP\n        PROPERTY_FLAG    = 0x1, // property access: element is valid name\n        ATTRIBUTE_FLAG   = 0x2, // x.@y or x..@y\n        DESCENDANTS_FLAG = 0x4; // x..y or x..@i",
        "begin_line": 171,
        "end_line": 174,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.ATTRIBUTE_FLAG",
        "snippet": "    public static final int   // flags for MEMBER_TYPE_PROP\n        PROPERTY_FLAG    = 0x1, // property access: element is valid name\n        ATTRIBUTE_FLAG   = 0x2, // x.@y or x..@y\n        DESCENDANTS_FLAG = 0x4; // x..y or x..@i",
        "begin_line": 171,
        "end_line": 174,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.DESCENDANTS_FLAG",
        "snippet": "    public static final int   // flags for MEMBER_TYPE_PROP\n        PROPERTY_FLAG    = 0x1, // property access: element is valid name\n        ATTRIBUTE_FLAG   = 0x2, // x.@y or x..@y\n        DESCENDANTS_FLAG = 0x4; // x..y or x..@i",
        "begin_line": 171,
        "end_line": 174,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.NumberNode",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.NumberNode.serialVersionUID",
        "snippet": "        private static final long serialVersionUID = 1L;",
        "begin_line": 245,
        "end_line": 245,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.NumberNode",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.NumberNode.number",
        "snippet": "        private double number;",
        "begin_line": 270,
        "end_line": 270,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.StringNode",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.StringNode.serialVersionUID",
        "snippet": "        private static final long serialVersionUID = 1L;",
        "begin_line": 275,
        "end_line": 275,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.StringNode",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.StringNode.str",
        "snippet": "        private String str;",
        "begin_line": 332,
        "end_line": 332,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.PropListItem",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.PropListItem.serialVersionUID",
        "snippet": "        private static final long serialVersionUID = 1L;",
        "begin_line": 337,
        "end_line": 337,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.PropListItem",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.PropListItem.next",
        "snippet": "        PropListItem next;",
        "begin_line": 339,
        "end_line": 339,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.PropListItem",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.PropListItem.type",
        "snippet": "        int type;",
        "begin_line": 340,
        "end_line": 340,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.PropListItem",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.PropListItem.intValue",
        "snippet": "        int intValue;",
        "begin_line": 341,
        "end_line": 341,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.PropListItem",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.PropListItem.objectValue",
        "snippet": "        Object objectValue;",
        "begin_line": 342,
        "end_line": 342,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.type",
        "snippet": "    int type;              // type of the node; Token.NAME for example",
        "begin_line": 1039,
        "end_line": 1039,
        "comment": " type of the node; Token.NAME for example"
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.next",
        "snippet": "    Node next;             // next sibling",
        "begin_line": 1040,
        "end_line": 1040,
        "comment": " next sibling"
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.first",
        "snippet": "    private Node first;    // first element of a linked list of children",
        "begin_line": 1041,
        "end_line": 1041,
        "comment": " first element of a linked list of children"
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.last",
        "snippet": "    private Node last;     // last element of a linked list of children",
        "begin_line": 1042,
        "end_line": 1042,
        "comment": " last element of a linked list of children"
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.propListHead",
        "snippet": "    private PropListItem propListHead;",
        "begin_line": 1050,
        "end_line": 1050,
        "comment": "\n     * Linked list of properties. Since vast majority of nodes would have\n     * no more then 2 properties, linked list saves memory and provides\n     * fast lookup. If this does not holds, propListHead can be replaced\n     * by UintMap.\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.COLUMN_BITS",
        "snippet": "    public static final int COLUMN_BITS = 12;",
        "begin_line": 1060,
        "end_line": 1060,
        "comment": "\n     * COLUMN_BITS represents how many of the lower-order bits of\n     * sourcePosition are reserved for storing the column number.\n     * Bits above these store the line number.\n     * This gives us decent position information for everything except\n     * files already passed through a minimizer, where lines might\n     * be longer than 4096 characters.\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER",
        "snippet": "    public static final int MAX_COLUMN_NUMBER = (1 << COLUMN_BITS) - 1;",
        "begin_line": 1067,
        "end_line": 1067,
        "comment": "\n     * MAX_COLUMN_NUMBER represents the maximum column number that can\n     * be represented.  JSCompiler's modifications to Rhino cause all\n     * tokens located beyond the maximum column to MAX_COLUMN_NUMBER.\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.COLUMN_MASK",
        "snippet": "    public static final int COLUMN_MASK = MAX_COLUMN_NUMBER;",
        "begin_line": 1074,
        "end_line": 1074,
        "comment": "\n     * COLUMN_MASK stores a value where bits storing the column number\n     * are set, and bits storing the line are not set.  It's handy for\n     * separating column number from line number.\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.sourcePosition",
        "snippet": "    private int sourcePosition;",
        "begin_line": 1082,
        "end_line": 1082,
        "comment": "\n     * Source position of this node. The position is encoded with the\n     * column number in the low 12 bits of the integer, and the line\n     * number in the rest.  Create some handy constants so we can change this\n     * size if we want.\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.jsType",
        "snippet": "    private JSType jsType;",
        "begin_line": 1084,
        "end_line": 1084,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.parent",
        "snippet": "    private Node parent;",
        "begin_line": 1086,
        "end_line": 1086,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.SiblingNodeIterable",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.SiblingNodeIterable.start",
        "snippet": "        private final Node start;",
        "begin_line": 1182,
        "end_line": 1182,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.SiblingNodeIterable",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.SiblingNodeIterable.current",
        "snippet": "        private Node current;",
        "begin_line": 1183,
        "end_line": 1183,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.SiblingNodeIterable",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.SiblingNodeIterable.used",
        "snippet": "        private boolean used;",
        "begin_line": 1184,
        "end_line": 1184,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.AncestorIterable",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.AncestorIterable.cur",
        "snippet": "      private Node cur;",
        "begin_line": 1258,
        "end_line": 1258,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.NodeMismatch",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.NodeMismatch.nodeA",
        "snippet": "      final Node nodeA;",
        "begin_line": 2040,
        "end_line": 2040,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.NodeMismatch",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.NodeMismatch.nodeB",
        "snippet": "      final Node nodeB;",
        "begin_line": 2041,
        "end_line": 2041,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.options",
        "snippet": "  CompilerOptions options = null;",
        "begin_line": 63,
        "end_line": 63,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.passes",
        "snippet": "  private PassConfig passes = null;",
        "begin_line": 65,
        "end_line": 65,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.externs",
        "snippet": "  private CompilerInput[] externs;",
        "begin_line": 68,
        "end_line": 68,
        "comment": " The externs inputs"
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.modules",
        "snippet": "  private JSModule[] modules;",
        "begin_line": 71,
        "end_line": 71,
        "comment": " The JS source modules"
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.moduleGraph",
        "snippet": "  private JSModuleGraph moduleGraph;",
        "begin_line": 74,
        "end_line": 74,
        "comment": " The graph of the JS source modules"
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.inputs",
        "snippet": "  private CompilerInput[] inputs;",
        "begin_line": 77,
        "end_line": 77,
        "comment": " The JS source inputs"
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.errorManager",
        "snippet": "  private ErrorManager errorManager;",
        "begin_line": 80,
        "end_line": 80,
        "comment": " error manager to which error management is delegated"
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.symbolTable",
        "snippet": "  private SymbolTable symbolTable = null;",
        "begin_line": 83,
        "end_line": 83,
        "comment": " Cached data structures."
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.externsRoot",
        "snippet": "  Node externsRoot;",
        "begin_line": 86,
        "end_line": 86,
        "comment": " Parse tree root nodes"
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.jsRoot",
        "snippet": "  Node jsRoot;",
        "begin_line": 87,
        "end_line": 87,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.externAndJsRoot",
        "snippet": "  Node externAndJsRoot;",
        "begin_line": 88,
        "end_line": 88,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.inputsByName",
        "snippet": "  private Map<String, CompilerInput> inputsByName;",
        "begin_line": 90,
        "end_line": 90,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.sourceMap",
        "snippet": "  private SourceMap sourceMap;",
        "begin_line": 93,
        "end_line": 93,
        "comment": " The source code map "
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.externExports",
        "snippet": "  private String externExports = null;",
        "begin_line": 96,
        "end_line": 96,
        "comment": " The externs created from the exports.  "
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.uniqueNameId",
        "snippet": "  private int uniqueNameId = 0;",
        "begin_line": 102,
        "end_line": 102,
        "comment": "\n   * Ids for function inlining so that each declared name remains\n   * unique.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.normalized",
        "snippet": "  private boolean normalized = false;",
        "begin_line": 108,
        "end_line": 108,
        "comment": "\n   * Whether the optional \"normalization\" pass has been run.  Passes that\n   * depend on the assumptions made there should check this value.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.useThreads",
        "snippet": "  private boolean useThreads = true;",
        "begin_line": 111,
        "end_line": 111,
        "comment": " Whether to use threads. "
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.functionInformationMap",
        "snippet": "  private FunctionInformationMap functionInformationMap;",
        "begin_line": 114,
        "end_line": 114,
        "comment": " The function information map "
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.debugLog",
        "snippet": "  private final StringBuilder debugLog = new StringBuilder();",
        "begin_line": 117,
        "end_line": 117,
        "comment": " Debugging information "
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.defaultCodingConvention",
        "snippet": "  CodingConvention defaultCodingConvention = new GoogleCodingConvention();",
        "begin_line": 120,
        "end_line": 120,
        "comment": " Detects Google-specific coding conventions. "
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.typeRegistry",
        "snippet": "  private JSTypeRegistry typeRegistry;",
        "begin_line": 122,
        "end_line": 122,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.parserConfig",
        "snippet": "  private Config parserConfig = null;",
        "begin_line": 123,
        "end_line": 123,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.abstractInterpreter",
        "snippet": "  private ReverseAbstractInterpreter abstractInterpreter;",
        "begin_line": 125,
        "end_line": 125,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.typeValidator",
        "snippet": "  private final TypeValidator typeValidator;",
        "begin_line": 126,
        "end_line": 126,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.tracker",
        "snippet": "  public PerformanceTracker tracker;",
        "begin_line": 128,
        "end_line": 128,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.oldErrorReporter",
        "snippet": "  private final com.google.javascript.rhino.ErrorReporter oldErrorReporter =\n      RhinoErrorReporter.forOldRhino(this);",
        "begin_line": 131,
        "end_line": 132,
        "comment": " The oldErrorReporter exists so we can get errors from the JSTypeRegistry."
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.defaultErrorReporter",
        "snippet": "  private final ErrorReporter defaultErrorReporter =\n      RhinoErrorReporter.forNewRhino(this);",
        "begin_line": 135,
        "end_line": 136,
        "comment": " This error reporter gets the messages from the current Rhino parser."
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.OPTIMIZE_LOOP_ERROR",
        "snippet": "  public static final DiagnosticType OPTIMIZE_LOOP_ERROR = DiagnosticType.error(\n      \"JSC_OPTIMIZE_LOOP_ERROR\",\n      \"Exceeded max number of optimization iterations: {0}\");",
        "begin_line": 139,
        "end_line": 141,
        "comment": " Error strings used for reporting JSErrors "
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.MOTION_ITERATIONS_ERROR",
        "snippet": "  public static final DiagnosticType MOTION_ITERATIONS_ERROR =\n      DiagnosticType.error(\"JSC_OPTIMIZE_LOOP_ERROR\",\n          \"Exceeded max number of code motion iterations: {0}\");",
        "begin_line": 142,
        "end_line": 144,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.COMPILER_STACK_SIZE",
        "snippet": "  private static final long COMPILER_STACK_SIZE = 1048576L;",
        "begin_line": 146,
        "end_line": 146,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.logger",
        "snippet": "  private static final Logger logger =\n      Logger.getLogger(\"com.google.javascript.jscomp\");",
        "begin_line": 154,
        "end_line": 155,
        "comment": "\n   * Logger for the whole com.google.javascript.jscomp domain -\n   * setting configuration for this logger affects all loggers\n   *  in other classes within the compiler.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.outStream",
        "snippet": "  private final PrintStream outStream;",
        "begin_line": 157,
        "end_line": 157,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.MODULE_DEPENDENCY_ERROR",
        "snippet": "  static final DiagnosticType MODULE_DEPENDENCY_ERROR =\n      DiagnosticType.error(\"JSC_MODULE_DEPENDENCY_ERROR\",\n          \"Bad dependency: {0} -> {1}. \"\n              + \"Modules must be listed in dependency order.\");",
        "begin_line": 251,
        "end_line": 254,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.EMPTY_MODULE_LIST_ERROR",
        "snippet": "  private static final DiagnosticType EMPTY_MODULE_LIST_ERROR =\n      DiagnosticType.error(\"JSC_EMPTY_MODULE_LIST_ERROR\",\n          \"At least one module must be provided\");",
        "begin_line": 304,
        "end_line": 306,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.EMPTY_ROOT_MODULE_ERROR",
        "snippet": "  private static final DiagnosticType EMPTY_ROOT_MODULE_ERROR =\n      DiagnosticType.error(\"JSC_EMPTY_ROOT_MODULE_ERROR\",\n          \"Root module '{0}' must contain at least one source code input\");",
        "begin_line": 308,
        "end_line": 310,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.DUPLICATE_INPUT_IN_MODULES",
        "snippet": "  static final DiagnosticType DUPLICATE_INPUT_IN_MODULES =\n      DiagnosticType.error(\"JSC_DUPLICATE_INPUT_IN_MODULES_ERROR\",\n          \"Two modules cannot contain the same input, but module {0} and {1} \"\n              + \"both include \\\"{2}\\\"\");",
        "begin_line": 338,
        "end_line": 341,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.DUPLICATE_INPUT",
        "snippet": "  static final DiagnosticType DUPLICATE_INPUT =\n      DiagnosticType.error(\"JSC_DUPLICATE_INPUT\", \"Duplicate input: {0}\");",
        "begin_line": 382,
        "end_line": 383,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.DUPLICATE_EXTERN_INPUT",
        "snippet": "  static final DiagnosticType DUPLICATE_EXTERN_INPUT =\n      DiagnosticType.error(\"JSC_DUPLICATE_EXTERN_INPUT\",\n          \"Duplicate extern input: {0}\");",
        "begin_line": 384,
        "end_line": 386,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.sanityCheck",
        "snippet": "  private final PassFactory sanityCheck =\n      new PassFactory(\"sanityCheck\", false) {\n    @Override\n    protected CompilerPass createInternal(AbstractCompiler compiler) {\n      return new SanityCheck(compiler);\n    }\n  };",
        "begin_line": 686,
        "end_line": 692,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.currentTracer",
        "snippet": "  private Tracer currentTracer = null;",
        "begin_line": 745,
        "end_line": 745,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.currentPassName",
        "snippet": "  private String currentPassName = null;",
        "begin_line": 746,
        "end_line": 746,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CodeBuilder",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.CodeBuilder.sb",
        "snippet": "    private final StringBuilder sb = new StringBuilder();",
        "begin_line": 1282,
        "end_line": 1282,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CodeBuilder",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.CodeBuilder.lineCount",
        "snippet": "    private int lineCount = 0;",
        "begin_line": 1283,
        "end_line": 1283,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.recentChange",
        "snippet": "  protected final CodeChangeHandler.RecentChange recentChange =\n      new CodeChangeHandler.RecentChange();",
        "begin_line": 1413,
        "end_line": 1414,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.codeChangeHandlers",
        "snippet": "  private final List<CodeChangeHandler> codeChangeHandlers =\n      Lists.<CodeChangeHandler>newArrayList();",
        "begin_line": 1415,
        "end_line": 1416,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.IntermediateState",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.IntermediateState.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 1L;",
        "begin_line": 1652,
        "end_line": 1652,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.IntermediateState",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.IntermediateState.externsRoot",
        "snippet": "    Node externsRoot;",
        "begin_line": 1654,
        "end_line": 1654,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.IntermediateState",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.IntermediateState.jsRoot",
        "snippet": "    private Node jsRoot;",
        "begin_line": 1655,
        "end_line": 1655,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.IntermediateState",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.IntermediateState.externs",
        "snippet": "    private CompilerInput[] externs;",
        "begin_line": 1656,
        "end_line": 1656,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.IntermediateState",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.IntermediateState.inputs",
        "snippet": "    private CompilerInput[] inputs;",
        "begin_line": 1657,
        "end_line": 1657,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.IntermediateState",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.IntermediateState.modules",
        "snippet": "    private JSModule[] modules;",
        "begin_line": 1658,
        "end_line": 1658,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.IntermediateState",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.IntermediateState.passConfigState",
        "snippet": "    private PassConfig.State passConfigState;",
        "begin_line": 1659,
        "end_line": 1659,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.IntermediateState",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.IntermediateState.typeRegistry",
        "snippet": "    private JSTypeRegistry typeRegistry;",
        "begin_line": 1660,
        "end_line": 1660,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.IntermediateState",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.IntermediateState.normalized",
        "snippet": "    private boolean normalized;",
        "begin_line": 1661,
        "end_line": 1661,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "signature": "com.google.javascript.rhino.jstype.JSType.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 1L;",
        "begin_line": 72,
        "end_line": 72,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "signature": "com.google.javascript.rhino.jstype.JSType.resolved",
        "snippet": "  private boolean resolved = false;",
        "begin_line": 74,
        "end_line": 74,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "signature": "com.google.javascript.rhino.jstype.JSType.resolveResult",
        "snippet": "  private JSType resolveResult = null;",
        "begin_line": 75,
        "end_line": 75,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "signature": "com.google.javascript.rhino.jstype.JSType.UNKNOWN_NAME",
        "snippet": "  public static final String UNKNOWN_NAME =\n      \"Unknown class name\";",
        "begin_line": 77,
        "end_line": 78,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "signature": "com.google.javascript.rhino.jstype.JSType.NOT_A_CLASS",
        "snippet": "  public static final String NOT_A_CLASS =\n      \"Not declared as a constructor\";",
        "begin_line": 80,
        "end_line": 81,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "signature": "com.google.javascript.rhino.jstype.JSType.NOT_A_TYPE",
        "snippet": "  public static final String NOT_A_TYPE =\n      \"Not declared as a type name\";",
        "begin_line": 83,
        "end_line": 84,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "signature": "com.google.javascript.rhino.jstype.JSType.EMPTY_TYPE_COMPONENT",
        "snippet": "  public static final String EMPTY_TYPE_COMPONENT =\n      \"Named type with empty name component\";",
        "begin_line": 86,
        "end_line": 87,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "signature": "com.google.javascript.rhino.jstype.JSType.ALPHA",
        "snippet": "  static final Comparator<JSType> ALPHA = new Comparator<JSType>() {\n    public int compare(JSType t1, JSType t2) {\n      return t1.toString().compareTo(t2.toString());\n    }\n  };",
        "begin_line": 94,
        "end_line": 98,
        "comment": "\n   * Total ordering on types based on their textual representation.\n   * This is used to have a deterministic output of the toString\n   * method of the union type since this output is used in tests.\n   "
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "signature": "com.google.javascript.rhino.jstype.JSType.ENUMDECL",
        "snippet": "  public static final int ENUMDECL = 1;",
        "begin_line": 101,
        "end_line": 101,
        "comment": " A flag set on enum definition tree nodes"
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "signature": "com.google.javascript.rhino.jstype.JSType.NOT_ENUMDECL",
        "snippet": "  public static final int NOT_ENUMDECL = 0;",
        "begin_line": 102,
        "end_line": 102,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "signature": "com.google.javascript.rhino.jstype.JSType.registry",
        "snippet": "  final JSTypeRegistry registry;",
        "begin_line": 104,
        "end_line": 104,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.TypePair",
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "signature": "com.google.javascript.rhino.jstype.TypePair.typeA",
        "snippet": "    public final JSType typeA;",
        "begin_line": 900,
        "end_line": 900,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.TypePair",
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "signature": "com.google.javascript.rhino.jstype.TypePair.typeB",
        "snippet": "    public final JSType typeB;",
        "begin_line": 901,
        "end_line": 901,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.ScriptOrFnNode",
        "src_path": "src/com/google/javascript/rhino/ScriptOrFnNode.java",
        "signature": "com.google.javascript.rhino.ScriptOrFnNode.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 1L;",
        "begin_line": 44,
        "end_line": 44,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.ScriptOrFnNode",
        "src_path": "src/com/google/javascript/rhino/ScriptOrFnNode.java",
        "signature": "com.google.javascript.rhino.ScriptOrFnNode.NO_DUPLICATE",
        "snippet": "    public static final int NO_DUPLICATE = 1;",
        "begin_line": 172,
        "end_line": 172,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.ScriptOrFnNode",
        "src_path": "src/com/google/javascript/rhino/ScriptOrFnNode.java",
        "signature": "com.google.javascript.rhino.ScriptOrFnNode.DUPLICATE_VAR",
        "snippet": "    public static final int DUPLICATE_VAR = 0;",
        "begin_line": 173,
        "end_line": 173,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.ScriptOrFnNode",
        "src_path": "src/com/google/javascript/rhino/ScriptOrFnNode.java",
        "signature": "com.google.javascript.rhino.ScriptOrFnNode.DUPLICATE_PARAMETER",
        "snippet": "    public static final int DUPLICATE_PARAMETER = -1;",
        "begin_line": 174,
        "end_line": 174,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.ScriptOrFnNode",
        "src_path": "src/com/google/javascript/rhino/ScriptOrFnNode.java",
        "signature": "com.google.javascript.rhino.ScriptOrFnNode.DUPLICATE_CONST",
        "snippet": "    public static final int DUPLICATE_CONST = -2;",
        "begin_line": 175,
        "end_line": 175,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.ScriptOrFnNode",
        "src_path": "src/com/google/javascript/rhino/ScriptOrFnNode.java",
        "signature": "com.google.javascript.rhino.ScriptOrFnNode.encodedSourceStart",
        "snippet": "    private int encodedSourceStart;",
        "begin_line": 247,
        "end_line": 247,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.ScriptOrFnNode",
        "src_path": "src/com/google/javascript/rhino/ScriptOrFnNode.java",
        "signature": "com.google.javascript.rhino.ScriptOrFnNode.encodedSourceEnd",
        "snippet": "    private int encodedSourceEnd;",
        "begin_line": 248,
        "end_line": 248,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.ScriptOrFnNode",
        "src_path": "src/com/google/javascript/rhino/ScriptOrFnNode.java",
        "signature": "com.google.javascript.rhino.ScriptOrFnNode.sourceName",
        "snippet": "    private String sourceName;",
        "begin_line": 249,
        "end_line": 249,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.ScriptOrFnNode",
        "src_path": "src/com/google/javascript/rhino/ScriptOrFnNode.java",
        "signature": "com.google.javascript.rhino.ScriptOrFnNode.baseLineno",
        "snippet": "    private int baseLineno = -1;",
        "begin_line": 250,
        "end_line": 250,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.ScriptOrFnNode",
        "src_path": "src/com/google/javascript/rhino/ScriptOrFnNode.java",
        "signature": "com.google.javascript.rhino.ScriptOrFnNode.endLineno",
        "snippet": "    private int endLineno = -1;",
        "begin_line": 251,
        "end_line": 251,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.ScriptOrFnNode",
        "src_path": "src/com/google/javascript/rhino/ScriptOrFnNode.java",
        "signature": "com.google.javascript.rhino.ScriptOrFnNode.functions",
        "snippet": "    private ObjArray functions;",
        "begin_line": 253,
        "end_line": 253,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.ScriptOrFnNode",
        "src_path": "src/com/google/javascript/rhino/ScriptOrFnNode.java",
        "signature": "com.google.javascript.rhino.ScriptOrFnNode.regexps",
        "snippet": "    private ObjArray regexps;",
        "begin_line": 255,
        "end_line": 255,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.ScriptOrFnNode",
        "src_path": "src/com/google/javascript/rhino/ScriptOrFnNode.java",
        "signature": "com.google.javascript.rhino.ScriptOrFnNode.itsVariables",
        "snippet": "    private ObjArray itsVariables = new ObjArray();",
        "begin_line": 258,
        "end_line": 258,
        "comment": " a list of the formal parameters and local variables"
    },
    {
        "class_name": "com.google.javascript.rhino.ScriptOrFnNode",
        "src_path": "src/com/google/javascript/rhino/ScriptOrFnNode.java",
        "signature": "com.google.javascript.rhino.ScriptOrFnNode.itsConst",
        "snippet": "    private ObjArray itsConst = new ObjArray();",
        "begin_line": 259,
        "end_line": 259,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.ScriptOrFnNode",
        "src_path": "src/com/google/javascript/rhino/ScriptOrFnNode.java",
        "signature": "com.google.javascript.rhino.ScriptOrFnNode.itsVariableNames",
        "snippet": "    private ObjToIntMap itsVariableNames = new ObjToIntMap(11);",
        "begin_line": 262,
        "end_line": 262,
        "comment": " mapping from name to index in list"
    },
    {
        "class_name": "com.google.javascript.rhino.ScriptOrFnNode",
        "src_path": "src/com/google/javascript/rhino/ScriptOrFnNode.java",
        "signature": "com.google.javascript.rhino.ScriptOrFnNode.varStart",
        "snippet": "    private int varStart;               // index in list of first variable",
        "begin_line": 264,
        "end_line": 264,
        "comment": " index in list of first variable"
    },
    {
        "class_name": "com.google.javascript.rhino.ScriptOrFnNode",
        "src_path": "src/com/google/javascript/rhino/ScriptOrFnNode.java",
        "signature": "com.google.javascript.rhino.ScriptOrFnNode.compilerData",
        "snippet": "    private Object compilerData;",
        "begin_line": 266,
        "end_line": 266,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.RemoveUnusedVars",
        "src_path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java",
        "signature": "com.google.javascript.jscomp.RemoveUnusedVars.logger_",
        "snippet": "  private static final Logger logger_ =\n    Logger.getLogger(RemoveUnusedVars.class.getName());",
        "begin_line": 47,
        "end_line": 48,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.RemoveUnusedVars",
        "src_path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java",
        "signature": "com.google.javascript.jscomp.RemoveUnusedVars.compiler_",
        "snippet": "  private final AbstractCompiler compiler_;",
        "begin_line": 50,
        "end_line": 50,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.RemoveUnusedVars",
        "src_path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java",
        "signature": "com.google.javascript.jscomp.RemoveUnusedVars.MAX_ITERATIONS",
        "snippet": "  private static final int MAX_ITERATIONS = 20;",
        "begin_line": 53,
        "end_line": 53,
        "comment": " Maximum number of iterations we'll allow (for safety) "
    },
    {
        "class_name": "com.google.javascript.jscomp.RemoveUnusedVars",
        "src_path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java",
        "signature": "com.google.javascript.jscomp.RemoveUnusedVars.numRemoved_",
        "snippet": "  private int numRemoved_ = 0;",
        "begin_line": 56,
        "end_line": 56,
        "comment": " Keeps track of the number of variables removed per instance. "
    },
    {
        "class_name": "com.google.javascript.jscomp.RemoveUnusedVars",
        "src_path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java",
        "signature": "com.google.javascript.jscomp.RemoveUnusedVars.removeGlobals",
        "snippet": "  private final boolean removeGlobals;",
        "begin_line": 58,
        "end_line": 58,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.RemoveUnusedVars",
        "src_path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java",
        "signature": "com.google.javascript.jscomp.RemoveUnusedVars.preserveAnonymousFunctionNames",
        "snippet": "  private boolean preserveAnonymousFunctionNames;",
        "begin_line": 60,
        "end_line": 60,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.RemoveUnusedVars",
        "src_path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java",
        "signature": "com.google.javascript.jscomp.RemoveUnusedVars.warnedVars_",
        "snippet": "  private final Set<Var> warnedVars_ = Sets.newHashSet();",
        "begin_line": 66,
        "end_line": 66,
        "comment": "\n   * Keeps track of what variables we've warned about, so that we don't do it\n   * on subsequent traversals.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.RemoveUnusedVars",
        "src_path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java",
        "signature": "com.google.javascript.jscomp.RemoveUnusedVars.referenced",
        "snippet": "  private final Set<Var> referenced = Sets.newHashSet();",
        "begin_line": 71,
        "end_line": 71,
        "comment": "\n   * Keep track of variables that we've referenced.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.CollapseVariableDeclarations",
        "src_path": "src/com/google/javascript/jscomp/CollapseVariableDeclarations.java",
        "signature": "com.google.javascript.jscomp.CollapseVariableDeclarations.compiler",
        "snippet": "  private final AbstractCompiler compiler;",
        "begin_line": 66,
        "end_line": 66,
        "comment": " Reference to JS Compiler "
    },
    {
        "class_name": "com.google.javascript.jscomp.Collapse",
        "src_path": "src/com/google/javascript/jscomp/CollapseVariableDeclarations.java",
        "signature": "com.google.javascript.jscomp.Collapse.firstVarNode",
        "snippet": "    final Node firstVarNode;",
        "begin_line": 74,
        "end_line": 74,
        "comment": "\n     * Variable declaration that any following var nodes should be\n     * collapsed into\n     "
    },
    {
        "class_name": "com.google.javascript.jscomp.Collapse",
        "src_path": "src/com/google/javascript/jscomp/CollapseVariableDeclarations.java",
        "signature": "com.google.javascript.jscomp.Collapse.parent",
        "snippet": "    final Node parent;",
        "begin_line": 77,
        "end_line": 77,
        "comment": " Parent of the nodes to the collapse "
    },
    {
        "class_name": "com.google.javascript.jscomp.CollapseVariableDeclarations",
        "src_path": "src/com/google/javascript/jscomp/CollapseVariableDeclarations.java",
        "signature": "com.google.javascript.jscomp.CollapseVariableDeclarations.collapses",
        "snippet": "  private final List<Collapse> collapses = Lists.newArrayList();",
        "begin_line": 88,
        "end_line": 88,
        "comment": "\n   * Collapses to do in this pass.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.CollapseVariableDeclarations",
        "src_path": "src/com/google/javascript/jscomp/CollapseVariableDeclarations.java",
        "signature": "com.google.javascript.jscomp.CollapseVariableDeclarations.nodesToCollapse",
        "snippet": "  private final Set<Node> nodesToCollapse = Sets.newHashSet();",
        "begin_line": 95,
        "end_line": 95,
        "comment": "\n   * Nodes we've already looked at for collapsing, so that we don't look at them\n   * again (we look ahead when examining what nodes can be collapsed, and the\n   * node traversal may give them to us again)\n   "
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.printTrees",
        "snippet": "    public static final boolean printTrees = true;",
        "begin_line": 60,
        "end_line": 60,
        "comment": " debug flags"
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.printICode",
        "snippet": "    static final boolean printICode = false;",
        "begin_line": 61,
        "end_line": 61,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.printNames",
        "snippet": "    static final boolean printNames = printTrees || printICode;",
        "begin_line": 62,
        "end_line": 62,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.ERROR",
        "snippet": "    public final static int\n    // start enum\n        ERROR          = -1, // well-known as the only code < EOF\n        EOF            = 0,  // end of file token - (not EOF_CHAR)\n        EOL            = 1,  // end of line\n\n        // Interpreter reuses the following as bytecodes\n        FIRST_BYTECODE_TOKEN    = 2,\n\n        ENTERWITH      = 2,\n        LEAVEWITH      = 3,\n        RETURN         = 4,\n        GOTO           = 5,\n        IFEQ           = 6,\n        IFNE           = 7,\n        SETNAME        = 8,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        SETPROP        = 34,\n        GETELEM        = 35,\n        SETELEM        = 36,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        BINDNAME       = 48,\n        THROW          = 49,\n        RETHROW        = 50, // rethrow caught execetion: catch (e if ) use it\n        IN             = 51,\n        INSTANCEOF     = 52,\n        LOCAL_LOAD     = 53,\n        GETVAR         = 54,\n        SETVAR         = 55,\n        CATCH_SCOPE    = 56,\n        ENUM_INIT_KEYS = 57,\n        ENUM_INIT_VALUES = 58,\n        ENUM_NEXT      = 59,\n        ENUM_ID        = 60,\n        THISFN         = 61,\n        RETURN_RESULT  = 62, // to return prevoisly stored return result\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n        GET_REF        = 65, // *reference\n        SET_REF        = 66, // *reference    = something\n        DEL_REF        = 67, // delete reference\n        REF_CALL       = 68, // f(args)    = something or f(args)++\n        REF_SPECIAL    = 69, // reference for special properties like __proto\n\n        // For XML support:\n        DEFAULTNAMESPACE = 70, // default xml namespace =\n        ESCXMLATTR     = 71,\n        ESCXMLTEXT     = 72,\n        REF_MEMBER     = 73, // Reference for x.@y, x..y etc.\n        REF_NS_MEMBER  = 74, // Reference for x.ns::y, x..ns::y etc.\n        REF_NAME       = 75, // Reference for @y, @[y] etc.\n        REF_NS_NAME    = 76; // Reference for ns::y, @ns::y@[y] etc.",
        "begin_line": 69,
        "end_line": 154,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.EOF",
        "snippet": "    public final static int\n    // start enum\n        ERROR          = -1, // well-known as the only code < EOF\n        EOF            = 0,  // end of file token - (not EOF_CHAR)\n        EOL            = 1,  // end of line\n\n        // Interpreter reuses the following as bytecodes\n        FIRST_BYTECODE_TOKEN    = 2,\n\n        ENTERWITH      = 2,\n        LEAVEWITH      = 3,\n        RETURN         = 4,\n        GOTO           = 5,\n        IFEQ           = 6,\n        IFNE           = 7,\n        SETNAME        = 8,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        SETPROP        = 34,\n        GETELEM        = 35,\n        SETELEM        = 36,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        BINDNAME       = 48,\n        THROW          = 49,\n        RETHROW        = 50, // rethrow caught execetion: catch (e if ) use it\n        IN             = 51,\n        INSTANCEOF     = 52,\n        LOCAL_LOAD     = 53,\n        GETVAR         = 54,\n        SETVAR         = 55,\n        CATCH_SCOPE    = 56,\n        ENUM_INIT_KEYS = 57,\n        ENUM_INIT_VALUES = 58,\n        ENUM_NEXT      = 59,\n        ENUM_ID        = 60,\n        THISFN         = 61,\n        RETURN_RESULT  = 62, // to return prevoisly stored return result\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n        GET_REF        = 65, // *reference\n        SET_REF        = 66, // *reference    = something\n        DEL_REF        = 67, // delete reference\n        REF_CALL       = 68, // f(args)    = something or f(args)++\n        REF_SPECIAL    = 69, // reference for special properties like __proto\n\n        // For XML support:\n        DEFAULTNAMESPACE = 70, // default xml namespace =\n        ESCXMLATTR     = 71,\n        ESCXMLTEXT     = 72,\n        REF_MEMBER     = 73, // Reference for x.@y, x..y etc.\n        REF_NS_MEMBER  = 74, // Reference for x.ns::y, x..ns::y etc.\n        REF_NAME       = 75, // Reference for @y, @[y] etc.\n        REF_NS_NAME    = 76; // Reference for ns::y, @ns::y@[y] etc.",
        "begin_line": 69,
        "end_line": 154,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.EOL",
        "snippet": "    public final static int\n    // start enum\n        ERROR          = -1, // well-known as the only code < EOF\n        EOF            = 0,  // end of file token - (not EOF_CHAR)\n        EOL            = 1,  // end of line\n\n        // Interpreter reuses the following as bytecodes\n        FIRST_BYTECODE_TOKEN    = 2,\n\n        ENTERWITH      = 2,\n        LEAVEWITH      = 3,\n        RETURN         = 4,\n        GOTO           = 5,\n        IFEQ           = 6,\n        IFNE           = 7,\n        SETNAME        = 8,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        SETPROP        = 34,\n        GETELEM        = 35,\n        SETELEM        = 36,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        BINDNAME       = 48,\n        THROW          = 49,\n        RETHROW        = 50, // rethrow caught execetion: catch (e if ) use it\n        IN             = 51,\n        INSTANCEOF     = 52,\n        LOCAL_LOAD     = 53,\n        GETVAR         = 54,\n        SETVAR         = 55,\n        CATCH_SCOPE    = 56,\n        ENUM_INIT_KEYS = 57,\n        ENUM_INIT_VALUES = 58,\n        ENUM_NEXT      = 59,\n        ENUM_ID        = 60,\n        THISFN         = 61,\n        RETURN_RESULT  = 62, // to return prevoisly stored return result\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n        GET_REF        = 65, // *reference\n        SET_REF        = 66, // *reference    = something\n        DEL_REF        = 67, // delete reference\n        REF_CALL       = 68, // f(args)    = something or f(args)++\n        REF_SPECIAL    = 69, // reference for special properties like __proto\n\n        // For XML support:\n        DEFAULTNAMESPACE = 70, // default xml namespace =\n        ESCXMLATTR     = 71,\n        ESCXMLTEXT     = 72,\n        REF_MEMBER     = 73, // Reference for x.@y, x..y etc.\n        REF_NS_MEMBER  = 74, // Reference for x.ns::y, x..ns::y etc.\n        REF_NAME       = 75, // Reference for @y, @[y] etc.\n        REF_NS_NAME    = 76; // Reference for ns::y, @ns::y@[y] etc.",
        "begin_line": 69,
        "end_line": 154,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.FIRST_BYTECODE_TOKEN",
        "snippet": "    public final static int\n    // start enum\n        ERROR          = -1, // well-known as the only code < EOF\n        EOF            = 0,  // end of file token - (not EOF_CHAR)\n        EOL            = 1,  // end of line\n\n        // Interpreter reuses the following as bytecodes\n        FIRST_BYTECODE_TOKEN    = 2,\n\n        ENTERWITH      = 2,\n        LEAVEWITH      = 3,\n        RETURN         = 4,\n        GOTO           = 5,\n        IFEQ           = 6,\n        IFNE           = 7,\n        SETNAME        = 8,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        SETPROP        = 34,\n        GETELEM        = 35,\n        SETELEM        = 36,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        BINDNAME       = 48,\n        THROW          = 49,\n        RETHROW        = 50, // rethrow caught execetion: catch (e if ) use it\n        IN             = 51,\n        INSTANCEOF     = 52,\n        LOCAL_LOAD     = 53,\n        GETVAR         = 54,\n        SETVAR         = 55,\n        CATCH_SCOPE    = 56,\n        ENUM_INIT_KEYS = 57,\n        ENUM_INIT_VALUES = 58,\n        ENUM_NEXT      = 59,\n        ENUM_ID        = 60,\n        THISFN         = 61,\n        RETURN_RESULT  = 62, // to return prevoisly stored return result\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n        GET_REF        = 65, // *reference\n        SET_REF        = 66, // *reference    = something\n        DEL_REF        = 67, // delete reference\n        REF_CALL       = 68, // f(args)    = something or f(args)++\n        REF_SPECIAL    = 69, // reference for special properties like __proto\n\n        // For XML support:\n        DEFAULTNAMESPACE = 70, // default xml namespace =\n        ESCXMLATTR     = 71,\n        ESCXMLTEXT     = 72,\n        REF_MEMBER     = 73, // Reference for x.@y, x..y etc.\n        REF_NS_MEMBER  = 74, // Reference for x.ns::y, x..ns::y etc.\n        REF_NAME       = 75, // Reference for @y, @[y] etc.\n        REF_NS_NAME    = 76; // Reference for ns::y, @ns::y@[y] etc.",
        "begin_line": 69,
        "end_line": 154,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.ENTERWITH",
        "snippet": "    public final static int\n    // start enum\n        ERROR          = -1, // well-known as the only code < EOF\n        EOF            = 0,  // end of file token - (not EOF_CHAR)\n        EOL            = 1,  // end of line\n\n        // Interpreter reuses the following as bytecodes\n        FIRST_BYTECODE_TOKEN    = 2,\n\n        ENTERWITH      = 2,\n        LEAVEWITH      = 3,\n        RETURN         = 4,\n        GOTO           = 5,\n        IFEQ           = 6,\n        IFNE           = 7,\n        SETNAME        = 8,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        SETPROP        = 34,\n        GETELEM        = 35,\n        SETELEM        = 36,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        BINDNAME       = 48,\n        THROW          = 49,\n        RETHROW        = 50, // rethrow caught execetion: catch (e if ) use it\n        IN             = 51,\n        INSTANCEOF     = 52,\n        LOCAL_LOAD     = 53,\n        GETVAR         = 54,\n        SETVAR         = 55,\n        CATCH_SCOPE    = 56,\n        ENUM_INIT_KEYS = 57,\n        ENUM_INIT_VALUES = 58,\n        ENUM_NEXT      = 59,\n        ENUM_ID        = 60,\n        THISFN         = 61,\n        RETURN_RESULT  = 62, // to return prevoisly stored return result\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n        GET_REF        = 65, // *reference\n        SET_REF        = 66, // *reference    = something\n        DEL_REF        = 67, // delete reference\n        REF_CALL       = 68, // f(args)    = something or f(args)++\n        REF_SPECIAL    = 69, // reference for special properties like __proto\n\n        // For XML support:\n        DEFAULTNAMESPACE = 70, // default xml namespace =\n        ESCXMLATTR     = 71,\n        ESCXMLTEXT     = 72,\n        REF_MEMBER     = 73, // Reference for x.@y, x..y etc.\n        REF_NS_MEMBER  = 74, // Reference for x.ns::y, x..ns::y etc.\n        REF_NAME       = 75, // Reference for @y, @[y] etc.\n        REF_NS_NAME    = 76; // Reference for ns::y, @ns::y@[y] etc.",
        "begin_line": 69,
        "end_line": 154,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.LEAVEWITH",
        "snippet": "    public final static int\n    // start enum\n        ERROR          = -1, // well-known as the only code < EOF\n        EOF            = 0,  // end of file token - (not EOF_CHAR)\n        EOL            = 1,  // end of line\n\n        // Interpreter reuses the following as bytecodes\n        FIRST_BYTECODE_TOKEN    = 2,\n\n        ENTERWITH      = 2,\n        LEAVEWITH      = 3,\n        RETURN         = 4,\n        GOTO           = 5,\n        IFEQ           = 6,\n        IFNE           = 7,\n        SETNAME        = 8,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        SETPROP        = 34,\n        GETELEM        = 35,\n        SETELEM        = 36,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        BINDNAME       = 48,\n        THROW          = 49,\n        RETHROW        = 50, // rethrow caught execetion: catch (e if ) use it\n        IN             = 51,\n        INSTANCEOF     = 52,\n        LOCAL_LOAD     = 53,\n        GETVAR         = 54,\n        SETVAR         = 55,\n        CATCH_SCOPE    = 56,\n        ENUM_INIT_KEYS = 57,\n        ENUM_INIT_VALUES = 58,\n        ENUM_NEXT      = 59,\n        ENUM_ID        = 60,\n        THISFN         = 61,\n        RETURN_RESULT  = 62, // to return prevoisly stored return result\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n        GET_REF        = 65, // *reference\n        SET_REF        = 66, // *reference    = something\n        DEL_REF        = 67, // delete reference\n        REF_CALL       = 68, // f(args)    = something or f(args)++\n        REF_SPECIAL    = 69, // reference for special properties like __proto\n\n        // For XML support:\n        DEFAULTNAMESPACE = 70, // default xml namespace =\n        ESCXMLATTR     = 71,\n        ESCXMLTEXT     = 72,\n        REF_MEMBER     = 73, // Reference for x.@y, x..y etc.\n        REF_NS_MEMBER  = 74, // Reference for x.ns::y, x..ns::y etc.\n        REF_NAME       = 75, // Reference for @y, @[y] etc.\n        REF_NS_NAME    = 76; // Reference for ns::y, @ns::y@[y] etc.",
        "begin_line": 69,
        "end_line": 154,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.RETURN",
        "snippet": "    public final static int\n    // start enum\n        ERROR          = -1, // well-known as the only code < EOF\n        EOF            = 0,  // end of file token - (not EOF_CHAR)\n        EOL            = 1,  // end of line\n\n        // Interpreter reuses the following as bytecodes\n        FIRST_BYTECODE_TOKEN    = 2,\n\n        ENTERWITH      = 2,\n        LEAVEWITH      = 3,\n        RETURN         = 4,\n        GOTO           = 5,\n        IFEQ           = 6,\n        IFNE           = 7,\n        SETNAME        = 8,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        SETPROP        = 34,\n        GETELEM        = 35,\n        SETELEM        = 36,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        BINDNAME       = 48,\n        THROW          = 49,\n        RETHROW        = 50, // rethrow caught execetion: catch (e if ) use it\n        IN             = 51,\n        INSTANCEOF     = 52,\n        LOCAL_LOAD     = 53,\n        GETVAR         = 54,\n        SETVAR         = 55,\n        CATCH_SCOPE    = 56,\n        ENUM_INIT_KEYS = 57,\n        ENUM_INIT_VALUES = 58,\n        ENUM_NEXT      = 59,\n        ENUM_ID        = 60,\n        THISFN         = 61,\n        RETURN_RESULT  = 62, // to return prevoisly stored return result\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n        GET_REF        = 65, // *reference\n        SET_REF        = 66, // *reference    = something\n        DEL_REF        = 67, // delete reference\n        REF_CALL       = 68, // f(args)    = something or f(args)++\n        REF_SPECIAL    = 69, // reference for special properties like __proto\n\n        // For XML support:\n        DEFAULTNAMESPACE = 70, // default xml namespace =\n        ESCXMLATTR     = 71,\n        ESCXMLTEXT     = 72,\n        REF_MEMBER     = 73, // Reference for x.@y, x..y etc.\n        REF_NS_MEMBER  = 74, // Reference for x.ns::y, x..ns::y etc.\n        REF_NAME       = 75, // Reference for @y, @[y] etc.\n        REF_NS_NAME    = 76; // Reference for ns::y, @ns::y@[y] etc.",
        "begin_line": 69,
        "end_line": 154,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.GOTO",
        "snippet": "    public final static int\n    // start enum\n        ERROR          = -1, // well-known as the only code < EOF\n        EOF            = 0,  // end of file token - (not EOF_CHAR)\n        EOL            = 1,  // end of line\n\n        // Interpreter reuses the following as bytecodes\n        FIRST_BYTECODE_TOKEN    = 2,\n\n        ENTERWITH      = 2,\n        LEAVEWITH      = 3,\n        RETURN         = 4,\n        GOTO           = 5,\n        IFEQ           = 6,\n        IFNE           = 7,\n        SETNAME        = 8,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        SETPROP        = 34,\n        GETELEM        = 35,\n        SETELEM        = 36,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        BINDNAME       = 48,\n        THROW          = 49,\n        RETHROW        = 50, // rethrow caught execetion: catch (e if ) use it\n        IN             = 51,\n        INSTANCEOF     = 52,\n        LOCAL_LOAD     = 53,\n        GETVAR         = 54,\n        SETVAR         = 55,\n        CATCH_SCOPE    = 56,\n        ENUM_INIT_KEYS = 57,\n        ENUM_INIT_VALUES = 58,\n        ENUM_NEXT      = 59,\n        ENUM_ID        = 60,\n        THISFN         = 61,\n        RETURN_RESULT  = 62, // to return prevoisly stored return result\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n        GET_REF        = 65, // *reference\n        SET_REF        = 66, // *reference    = something\n        DEL_REF        = 67, // delete reference\n        REF_CALL       = 68, // f(args)    = something or f(args)++\n        REF_SPECIAL    = 69, // reference for special properties like __proto\n\n        // For XML support:\n        DEFAULTNAMESPACE = 70, // default xml namespace =\n        ESCXMLATTR     = 71,\n        ESCXMLTEXT     = 72,\n        REF_MEMBER     = 73, // Reference for x.@y, x..y etc.\n        REF_NS_MEMBER  = 74, // Reference for x.ns::y, x..ns::y etc.\n        REF_NAME       = 75, // Reference for @y, @[y] etc.\n        REF_NS_NAME    = 76; // Reference for ns::y, @ns::y@[y] etc.",
        "begin_line": 69,
        "end_line": 154,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.IFEQ",
        "snippet": "    public final static int\n    // start enum\n        ERROR          = -1, // well-known as the only code < EOF\n        EOF            = 0,  // end of file token - (not EOF_CHAR)\n        EOL            = 1,  // end of line\n\n        // Interpreter reuses the following as bytecodes\n        FIRST_BYTECODE_TOKEN    = 2,\n\n        ENTERWITH      = 2,\n        LEAVEWITH      = 3,\n        RETURN         = 4,\n        GOTO           = 5,\n        IFEQ           = 6,\n        IFNE           = 7,\n        SETNAME        = 8,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        SETPROP        = 34,\n        GETELEM        = 35,\n        SETELEM        = 36,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        BINDNAME       = 48,\n        THROW          = 49,\n        RETHROW        = 50, // rethrow caught execetion: catch (e if ) use it\n        IN             = 51,\n        INSTANCEOF     = 52,\n        LOCAL_LOAD     = 53,\n        GETVAR         = 54,\n        SETVAR         = 55,\n        CATCH_SCOPE    = 56,\n        ENUM_INIT_KEYS = 57,\n        ENUM_INIT_VALUES = 58,\n        ENUM_NEXT      = 59,\n        ENUM_ID        = 60,\n        THISFN         = 61,\n        RETURN_RESULT  = 62, // to return prevoisly stored return result\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n        GET_REF        = 65, // *reference\n        SET_REF        = 66, // *reference    = something\n        DEL_REF        = 67, // delete reference\n        REF_CALL       = 68, // f(args)    = something or f(args)++\n        REF_SPECIAL    = 69, // reference for special properties like __proto\n\n        // For XML support:\n        DEFAULTNAMESPACE = 70, // default xml namespace =\n        ESCXMLATTR     = 71,\n        ESCXMLTEXT     = 72,\n        REF_MEMBER     = 73, // Reference for x.@y, x..y etc.\n        REF_NS_MEMBER  = 74, // Reference for x.ns::y, x..ns::y etc.\n        REF_NAME       = 75, // Reference for @y, @[y] etc.\n        REF_NS_NAME    = 76; // Reference for ns::y, @ns::y@[y] etc.",
        "begin_line": 69,
        "end_line": 154,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.IFNE",
        "snippet": "    public final static int\n    // start enum\n        ERROR          = -1, // well-known as the only code < EOF\n        EOF            = 0,  // end of file token - (not EOF_CHAR)\n        EOL            = 1,  // end of line\n\n        // Interpreter reuses the following as bytecodes\n        FIRST_BYTECODE_TOKEN    = 2,\n\n        ENTERWITH      = 2,\n        LEAVEWITH      = 3,\n        RETURN         = 4,\n        GOTO           = 5,\n        IFEQ           = 6,\n        IFNE           = 7,\n        SETNAME        = 8,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        SETPROP        = 34,\n        GETELEM        = 35,\n        SETELEM        = 36,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        BINDNAME       = 48,\n        THROW          = 49,\n        RETHROW        = 50, // rethrow caught execetion: catch (e if ) use it\n        IN             = 51,\n        INSTANCEOF     = 52,\n        LOCAL_LOAD     = 53,\n        GETVAR         = 54,\n        SETVAR         = 55,\n        CATCH_SCOPE    = 56,\n        ENUM_INIT_KEYS = 57,\n        ENUM_INIT_VALUES = 58,\n        ENUM_NEXT      = 59,\n        ENUM_ID        = 60,\n        THISFN         = 61,\n        RETURN_RESULT  = 62, // to return prevoisly stored return result\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n        GET_REF        = 65, // *reference\n        SET_REF        = 66, // *reference    = something\n        DEL_REF        = 67, // delete reference\n        REF_CALL       = 68, // f(args)    = something or f(args)++\n        REF_SPECIAL    = 69, // reference for special properties like __proto\n\n        // For XML support:\n        DEFAULTNAMESPACE = 70, // default xml namespace =\n        ESCXMLATTR     = 71,\n        ESCXMLTEXT     = 72,\n        REF_MEMBER     = 73, // Reference for x.@y, x..y etc.\n        REF_NS_MEMBER  = 74, // Reference for x.ns::y, x..ns::y etc.\n        REF_NAME       = 75, // Reference for @y, @[y] etc.\n        REF_NS_NAME    = 76; // Reference for ns::y, @ns::y@[y] etc.",
        "begin_line": 69,
        "end_line": 154,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.SETNAME",
        "snippet": "    public final static int\n    // start enum\n        ERROR          = -1, // well-known as the only code < EOF\n        EOF            = 0,  // end of file token - (not EOF_CHAR)\n        EOL            = 1,  // end of line\n\n        // Interpreter reuses the following as bytecodes\n        FIRST_BYTECODE_TOKEN    = 2,\n\n        ENTERWITH      = 2,\n        LEAVEWITH      = 3,\n        RETURN         = 4,\n        GOTO           = 5,\n        IFEQ           = 6,\n        IFNE           = 7,\n        SETNAME        = 8,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        SETPROP        = 34,\n        GETELEM        = 35,\n        SETELEM        = 36,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        BINDNAME       = 48,\n        THROW          = 49,\n        RETHROW        = 50, // rethrow caught execetion: catch (e if ) use it\n        IN             = 51,\n        INSTANCEOF     = 52,\n        LOCAL_LOAD     = 53,\n        GETVAR         = 54,\n        SETVAR         = 55,\n        CATCH_SCOPE    = 56,\n        ENUM_INIT_KEYS = 57,\n        ENUM_INIT_VALUES = 58,\n        ENUM_NEXT      = 59,\n        ENUM_ID        = 60,\n        THISFN         = 61,\n        RETURN_RESULT  = 62, // to return prevoisly stored return result\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n        GET_REF        = 65, // *reference\n        SET_REF        = 66, // *reference    = something\n        DEL_REF        = 67, // delete reference\n        REF_CALL       = 68, // f(args)    = something or f(args)++\n        REF_SPECIAL    = 69, // reference for special properties like __proto\n\n        // For XML support:\n        DEFAULTNAMESPACE = 70, // default xml namespace =\n        ESCXMLATTR     = 71,\n        ESCXMLTEXT     = 72,\n        REF_MEMBER     = 73, // Reference for x.@y, x..y etc.\n        REF_NS_MEMBER  = 74, // Reference for x.ns::y, x..ns::y etc.\n        REF_NAME       = 75, // Reference for @y, @[y] etc.\n        REF_NS_NAME    = 76; // Reference for ns::y, @ns::y@[y] etc.",
        "begin_line": 69,
        "end_line": 154,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.BITOR",
        "snippet": "    public final static int\n    // start enum\n        ERROR          = -1, // well-known as the only code < EOF\n        EOF            = 0,  // end of file token - (not EOF_CHAR)\n        EOL            = 1,  // end of line\n\n        // Interpreter reuses the following as bytecodes\n        FIRST_BYTECODE_TOKEN    = 2,\n\n        ENTERWITH      = 2,\n        LEAVEWITH      = 3,\n        RETURN         = 4,\n        GOTO           = 5,\n        IFEQ           = 6,\n        IFNE           = 7,\n        SETNAME        = 8,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        SETPROP        = 34,\n        GETELEM        = 35,\n        SETELEM        = 36,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        BINDNAME       = 48,\n        THROW          = 49,\n        RETHROW        = 50, // rethrow caught execetion: catch (e if ) use it\n        IN             = 51,\n        INSTANCEOF     = 52,\n        LOCAL_LOAD     = 53,\n        GETVAR         = 54,\n        SETVAR         = 55,\n        CATCH_SCOPE    = 56,\n        ENUM_INIT_KEYS = 57,\n        ENUM_INIT_VALUES = 58,\n        ENUM_NEXT      = 59,\n        ENUM_ID        = 60,\n        THISFN         = 61,\n        RETURN_RESULT  = 62, // to return prevoisly stored return result\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n        GET_REF        = 65, // *reference\n        SET_REF        = 66, // *reference    = something\n        DEL_REF        = 67, // delete reference\n        REF_CALL       = 68, // f(args)    = something or f(args)++\n        REF_SPECIAL    = 69, // reference for special properties like __proto\n\n        // For XML support:\n        DEFAULTNAMESPACE = 70, // default xml namespace =\n        ESCXMLATTR     = 71,\n        ESCXMLTEXT     = 72,\n        REF_MEMBER     = 73, // Reference for x.@y, x..y etc.\n        REF_NS_MEMBER  = 74, // Reference for x.ns::y, x..ns::y etc.\n        REF_NAME       = 75, // Reference for @y, @[y] etc.\n        REF_NS_NAME    = 76; // Reference for ns::y, @ns::y@[y] etc.",
        "begin_line": 69,
        "end_line": 154,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.BITXOR",
        "snippet": "    public final static int\n    // start enum\n        ERROR          = -1, // well-known as the only code < EOF\n        EOF            = 0,  // end of file token - (not EOF_CHAR)\n        EOL            = 1,  // end of line\n\n        // Interpreter reuses the following as bytecodes\n        FIRST_BYTECODE_TOKEN    = 2,\n\n        ENTERWITH      = 2,\n        LEAVEWITH      = 3,\n        RETURN         = 4,\n        GOTO           = 5,\n        IFEQ           = 6,\n        IFNE           = 7,\n        SETNAME        = 8,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        SETPROP        = 34,\n        GETELEM        = 35,\n        SETELEM        = 36,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        BINDNAME       = 48,\n        THROW          = 49,\n        RETHROW        = 50, // rethrow caught execetion: catch (e if ) use it\n        IN             = 51,\n        INSTANCEOF     = 52,\n        LOCAL_LOAD     = 53,\n        GETVAR         = 54,\n        SETVAR         = 55,\n        CATCH_SCOPE    = 56,\n        ENUM_INIT_KEYS = 57,\n        ENUM_INIT_VALUES = 58,\n        ENUM_NEXT      = 59,\n        ENUM_ID        = 60,\n        THISFN         = 61,\n        RETURN_RESULT  = 62, // to return prevoisly stored return result\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n        GET_REF        = 65, // *reference\n        SET_REF        = 66, // *reference    = something\n        DEL_REF        = 67, // delete reference\n        REF_CALL       = 68, // f(args)    = something or f(args)++\n        REF_SPECIAL    = 69, // reference for special properties like __proto\n\n        // For XML support:\n        DEFAULTNAMESPACE = 70, // default xml namespace =\n        ESCXMLATTR     = 71,\n        ESCXMLTEXT     = 72,\n        REF_MEMBER     = 73, // Reference for x.@y, x..y etc.\n        REF_NS_MEMBER  = 74, // Reference for x.ns::y, x..ns::y etc.\n        REF_NAME       = 75, // Reference for @y, @[y] etc.\n        REF_NS_NAME    = 76; // Reference for ns::y, @ns::y@[y] etc.",
        "begin_line": 69,
        "end_line": 154,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.BITAND",
        "snippet": "    public final static int\n    // start enum\n        ERROR          = -1, // well-known as the only code < EOF\n        EOF            = 0,  // end of file token - (not EOF_CHAR)\n        EOL            = 1,  // end of line\n\n        // Interpreter reuses the following as bytecodes\n        FIRST_BYTECODE_TOKEN    = 2,\n\n        ENTERWITH      = 2,\n        LEAVEWITH      = 3,\n        RETURN         = 4,\n        GOTO           = 5,\n        IFEQ           = 6,\n        IFNE           = 7,\n        SETNAME        = 8,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        SETPROP        = 34,\n        GETELEM        = 35,\n        SETELEM        = 36,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        BINDNAME       = 48,\n        THROW          = 49,\n        RETHROW        = 50, // rethrow caught execetion: catch (e if ) use it\n        IN             = 51,\n        INSTANCEOF     = 52,\n        LOCAL_LOAD     = 53,\n        GETVAR         = 54,\n        SETVAR         = 55,\n        CATCH_SCOPE    = 56,\n        ENUM_INIT_KEYS = 57,\n        ENUM_INIT_VALUES = 58,\n        ENUM_NEXT      = 59,\n        ENUM_ID        = 60,\n        THISFN         = 61,\n        RETURN_RESULT  = 62, // to return prevoisly stored return result\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n        GET_REF        = 65, // *reference\n        SET_REF        = 66, // *reference    = something\n        DEL_REF        = 67, // delete reference\n        REF_CALL       = 68, // f(args)    = something or f(args)++\n        REF_SPECIAL    = 69, // reference for special properties like __proto\n\n        // For XML support:\n        DEFAULTNAMESPACE = 70, // default xml namespace =\n        ESCXMLATTR     = 71,\n        ESCXMLTEXT     = 72,\n        REF_MEMBER     = 73, // Reference for x.@y, x..y etc.\n        REF_NS_MEMBER  = 74, // Reference for x.ns::y, x..ns::y etc.\n        REF_NAME       = 75, // Reference for @y, @[y] etc.\n        REF_NS_NAME    = 76; // Reference for ns::y, @ns::y@[y] etc.",
        "begin_line": 69,
        "end_line": 154,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.EQ",
        "snippet": "    public final static int\n    // start enum\n        ERROR          = -1, // well-known as the only code < EOF\n        EOF            = 0,  // end of file token - (not EOF_CHAR)\n        EOL            = 1,  // end of line\n\n        // Interpreter reuses the following as bytecodes\n        FIRST_BYTECODE_TOKEN    = 2,\n\n        ENTERWITH      = 2,\n        LEAVEWITH      = 3,\n        RETURN         = 4,\n        GOTO           = 5,\n        IFEQ           = 6,\n        IFNE           = 7,\n        SETNAME        = 8,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        SETPROP        = 34,\n        GETELEM        = 35,\n        SETELEM        = 36,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        BINDNAME       = 48,\n        THROW          = 49,\n        RETHROW        = 50, // rethrow caught execetion: catch (e if ) use it\n        IN             = 51,\n        INSTANCEOF     = 52,\n        LOCAL_LOAD     = 53,\n        GETVAR         = 54,\n        SETVAR         = 55,\n        CATCH_SCOPE    = 56,\n        ENUM_INIT_KEYS = 57,\n        ENUM_INIT_VALUES = 58,\n        ENUM_NEXT      = 59,\n        ENUM_ID        = 60,\n        THISFN         = 61,\n        RETURN_RESULT  = 62, // to return prevoisly stored return result\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n        GET_REF        = 65, // *reference\n        SET_REF        = 66, // *reference    = something\n        DEL_REF        = 67, // delete reference\n        REF_CALL       = 68, // f(args)    = something or f(args)++\n        REF_SPECIAL    = 69, // reference for special properties like __proto\n\n        // For XML support:\n        DEFAULTNAMESPACE = 70, // default xml namespace =\n        ESCXMLATTR     = 71,\n        ESCXMLTEXT     = 72,\n        REF_MEMBER     = 73, // Reference for x.@y, x..y etc.\n        REF_NS_MEMBER  = 74, // Reference for x.ns::y, x..ns::y etc.\n        REF_NAME       = 75, // Reference for @y, @[y] etc.\n        REF_NS_NAME    = 76; // Reference for ns::y, @ns::y@[y] etc.",
        "begin_line": 69,
        "end_line": 154,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.NE",
        "snippet": "    public final static int\n    // start enum\n        ERROR          = -1, // well-known as the only code < EOF\n        EOF            = 0,  // end of file token - (not EOF_CHAR)\n        EOL            = 1,  // end of line\n\n        // Interpreter reuses the following as bytecodes\n        FIRST_BYTECODE_TOKEN    = 2,\n\n        ENTERWITH      = 2,\n        LEAVEWITH      = 3,\n        RETURN         = 4,\n        GOTO           = 5,\n        IFEQ           = 6,\n        IFNE           = 7,\n        SETNAME        = 8,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        SETPROP        = 34,\n        GETELEM        = 35,\n        SETELEM        = 36,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        BINDNAME       = 48,\n        THROW          = 49,\n        RETHROW        = 50, // rethrow caught execetion: catch (e if ) use it\n        IN             = 51,\n        INSTANCEOF     = 52,\n        LOCAL_LOAD     = 53,\n        GETVAR         = 54,\n        SETVAR         = 55,\n        CATCH_SCOPE    = 56,\n        ENUM_INIT_KEYS = 57,\n        ENUM_INIT_VALUES = 58,\n        ENUM_NEXT      = 59,\n        ENUM_ID        = 60,\n        THISFN         = 61,\n        RETURN_RESULT  = 62, // to return prevoisly stored return result\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n        GET_REF        = 65, // *reference\n        SET_REF        = 66, // *reference    = something\n        DEL_REF        = 67, // delete reference\n        REF_CALL       = 68, // f(args)    = something or f(args)++\n        REF_SPECIAL    = 69, // reference for special properties like __proto\n\n        // For XML support:\n        DEFAULTNAMESPACE = 70, // default xml namespace =\n        ESCXMLATTR     = 71,\n        ESCXMLTEXT     = 72,\n        REF_MEMBER     = 73, // Reference for x.@y, x..y etc.\n        REF_NS_MEMBER  = 74, // Reference for x.ns::y, x..ns::y etc.\n        REF_NAME       = 75, // Reference for @y, @[y] etc.\n        REF_NS_NAME    = 76; // Reference for ns::y, @ns::y@[y] etc.",
        "begin_line": 69,
        "end_line": 154,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.LT",
        "snippet": "    public final static int\n    // start enum\n        ERROR          = -1, // well-known as the only code < EOF\n        EOF            = 0,  // end of file token - (not EOF_CHAR)\n        EOL            = 1,  // end of line\n\n        // Interpreter reuses the following as bytecodes\n        FIRST_BYTECODE_TOKEN    = 2,\n\n        ENTERWITH      = 2,\n        LEAVEWITH      = 3,\n        RETURN         = 4,\n        GOTO           = 5,\n        IFEQ           = 6,\n        IFNE           = 7,\n        SETNAME        = 8,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        SETPROP        = 34,\n        GETELEM        = 35,\n        SETELEM        = 36,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        BINDNAME       = 48,\n        THROW          = 49,\n        RETHROW        = 50, // rethrow caught execetion: catch (e if ) use it\n        IN             = 51,\n        INSTANCEOF     = 52,\n        LOCAL_LOAD     = 53,\n        GETVAR         = 54,\n        SETVAR         = 55,\n        CATCH_SCOPE    = 56,\n        ENUM_INIT_KEYS = 57,\n        ENUM_INIT_VALUES = 58,\n        ENUM_NEXT      = 59,\n        ENUM_ID        = 60,\n        THISFN         = 61,\n        RETURN_RESULT  = 62, // to return prevoisly stored return result\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n        GET_REF        = 65, // *reference\n        SET_REF        = 66, // *reference    = something\n        DEL_REF        = 67, // delete reference\n        REF_CALL       = 68, // f(args)    = something or f(args)++\n        REF_SPECIAL    = 69, // reference for special properties like __proto\n\n        // For XML support:\n        DEFAULTNAMESPACE = 70, // default xml namespace =\n        ESCXMLATTR     = 71,\n        ESCXMLTEXT     = 72,\n        REF_MEMBER     = 73, // Reference for x.@y, x..y etc.\n        REF_NS_MEMBER  = 74, // Reference for x.ns::y, x..ns::y etc.\n        REF_NAME       = 75, // Reference for @y, @[y] etc.\n        REF_NS_NAME    = 76; // Reference for ns::y, @ns::y@[y] etc.",
        "begin_line": 69,
        "end_line": 154,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.LE",
        "snippet": "    public final static int\n    // start enum\n        ERROR          = -1, // well-known as the only code < EOF\n        EOF            = 0,  // end of file token - (not EOF_CHAR)\n        EOL            = 1,  // end of line\n\n        // Interpreter reuses the following as bytecodes\n        FIRST_BYTECODE_TOKEN    = 2,\n\n        ENTERWITH      = 2,\n        LEAVEWITH      = 3,\n        RETURN         = 4,\n        GOTO           = 5,\n        IFEQ           = 6,\n        IFNE           = 7,\n        SETNAME        = 8,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        SETPROP        = 34,\n        GETELEM        = 35,\n        SETELEM        = 36,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        BINDNAME       = 48,\n        THROW          = 49,\n        RETHROW        = 50, // rethrow caught execetion: catch (e if ) use it\n        IN             = 51,\n        INSTANCEOF     = 52,\n        LOCAL_LOAD     = 53,\n        GETVAR         = 54,\n        SETVAR         = 55,\n        CATCH_SCOPE    = 56,\n        ENUM_INIT_KEYS = 57,\n        ENUM_INIT_VALUES = 58,\n        ENUM_NEXT      = 59,\n        ENUM_ID        = 60,\n        THISFN         = 61,\n        RETURN_RESULT  = 62, // to return prevoisly stored return result\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n        GET_REF        = 65, // *reference\n        SET_REF        = 66, // *reference    = something\n        DEL_REF        = 67, // delete reference\n        REF_CALL       = 68, // f(args)    = something or f(args)++\n        REF_SPECIAL    = 69, // reference for special properties like __proto\n\n        // For XML support:\n        DEFAULTNAMESPACE = 70, // default xml namespace =\n        ESCXMLATTR     = 71,\n        ESCXMLTEXT     = 72,\n        REF_MEMBER     = 73, // Reference for x.@y, x..y etc.\n        REF_NS_MEMBER  = 74, // Reference for x.ns::y, x..ns::y etc.\n        REF_NAME       = 75, // Reference for @y, @[y] etc.\n        REF_NS_NAME    = 76; // Reference for ns::y, @ns::y@[y] etc.",
        "begin_line": 69,
        "end_line": 154,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.GT",
        "snippet": "    public final static int\n    // start enum\n        ERROR          = -1, // well-known as the only code < EOF\n        EOF            = 0,  // end of file token - (not EOF_CHAR)\n        EOL            = 1,  // end of line\n\n        // Interpreter reuses the following as bytecodes\n        FIRST_BYTECODE_TOKEN    = 2,\n\n        ENTERWITH      = 2,\n        LEAVEWITH      = 3,\n        RETURN         = 4,\n        GOTO           = 5,\n        IFEQ           = 6,\n        IFNE           = 7,\n        SETNAME        = 8,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        SETPROP        = 34,\n        GETELEM        = 35,\n        SETELEM        = 36,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        BINDNAME       = 48,\n        THROW          = 49,\n        RETHROW        = 50, // rethrow caught execetion: catch (e if ) use it\n        IN             = 51,\n        INSTANCEOF     = 52,\n        LOCAL_LOAD     = 53,\n        GETVAR         = 54,\n        SETVAR         = 55,\n        CATCH_SCOPE    = 56,\n        ENUM_INIT_KEYS = 57,\n        ENUM_INIT_VALUES = 58,\n        ENUM_NEXT      = 59,\n        ENUM_ID        = 60,\n        THISFN         = 61,\n        RETURN_RESULT  = 62, // to return prevoisly stored return result\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n        GET_REF        = 65, // *reference\n        SET_REF        = 66, // *reference    = something\n        DEL_REF        = 67, // delete reference\n        REF_CALL       = 68, // f(args)    = something or f(args)++\n        REF_SPECIAL    = 69, // reference for special properties like __proto\n\n        // For XML support:\n        DEFAULTNAMESPACE = 70, // default xml namespace =\n        ESCXMLATTR     = 71,\n        ESCXMLTEXT     = 72,\n        REF_MEMBER     = 73, // Reference for x.@y, x..y etc.\n        REF_NS_MEMBER  = 74, // Reference for x.ns::y, x..ns::y etc.\n        REF_NAME       = 75, // Reference for @y, @[y] etc.\n        REF_NS_NAME    = 76; // Reference for ns::y, @ns::y@[y] etc.",
        "begin_line": 69,
        "end_line": 154,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.GE",
        "snippet": "    public final static int\n    // start enum\n        ERROR          = -1, // well-known as the only code < EOF\n        EOF            = 0,  // end of file token - (not EOF_CHAR)\n        EOL            = 1,  // end of line\n\n        // Interpreter reuses the following as bytecodes\n        FIRST_BYTECODE_TOKEN    = 2,\n\n        ENTERWITH      = 2,\n        LEAVEWITH      = 3,\n        RETURN         = 4,\n        GOTO           = 5,\n        IFEQ           = 6,\n        IFNE           = 7,\n        SETNAME        = 8,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        SETPROP        = 34,\n        GETELEM        = 35,\n        SETELEM        = 36,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        BINDNAME       = 48,\n        THROW          = 49,\n        RETHROW        = 50, // rethrow caught execetion: catch (e if ) use it\n        IN             = 51,\n        INSTANCEOF     = 52,\n        LOCAL_LOAD     = 53,\n        GETVAR         = 54,\n        SETVAR         = 55,\n        CATCH_SCOPE    = 56,\n        ENUM_INIT_KEYS = 57,\n        ENUM_INIT_VALUES = 58,\n        ENUM_NEXT      = 59,\n        ENUM_ID        = 60,\n        THISFN         = 61,\n        RETURN_RESULT  = 62, // to return prevoisly stored return result\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n        GET_REF        = 65, // *reference\n        SET_REF        = 66, // *reference    = something\n        DEL_REF        = 67, // delete reference\n        REF_CALL       = 68, // f(args)    = something or f(args)++\n        REF_SPECIAL    = 69, // reference for special properties like __proto\n\n        // For XML support:\n        DEFAULTNAMESPACE = 70, // default xml namespace =\n        ESCXMLATTR     = 71,\n        ESCXMLTEXT     = 72,\n        REF_MEMBER     = 73, // Reference for x.@y, x..y etc.\n        REF_NS_MEMBER  = 74, // Reference for x.ns::y, x..ns::y etc.\n        REF_NAME       = 75, // Reference for @y, @[y] etc.\n        REF_NS_NAME    = 76; // Reference for ns::y, @ns::y@[y] etc.",
        "begin_line": 69,
        "end_line": 154,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.LSH",
        "snippet": "    public final static int\n    // start enum\n        ERROR          = -1, // well-known as the only code < EOF\n        EOF            = 0,  // end of file token - (not EOF_CHAR)\n        EOL            = 1,  // end of line\n\n        // Interpreter reuses the following as bytecodes\n        FIRST_BYTECODE_TOKEN    = 2,\n\n        ENTERWITH      = 2,\n        LEAVEWITH      = 3,\n        RETURN         = 4,\n        GOTO           = 5,\n        IFEQ           = 6,\n        IFNE           = 7,\n        SETNAME        = 8,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        SETPROP        = 34,\n        GETELEM        = 35,\n        SETELEM        = 36,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        BINDNAME       = 48,\n        THROW          = 49,\n        RETHROW        = 50, // rethrow caught execetion: catch (e if ) use it\n        IN             = 51,\n        INSTANCEOF     = 52,\n        LOCAL_LOAD     = 53,\n        GETVAR         = 54,\n        SETVAR         = 55,\n        CATCH_SCOPE    = 56,\n        ENUM_INIT_KEYS = 57,\n        ENUM_INIT_VALUES = 58,\n        ENUM_NEXT      = 59,\n        ENUM_ID        = 60,\n        THISFN         = 61,\n        RETURN_RESULT  = 62, // to return prevoisly stored return result\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n        GET_REF        = 65, // *reference\n        SET_REF        = 66, // *reference    = something\n        DEL_REF        = 67, // delete reference\n        REF_CALL       = 68, // f(args)    = something or f(args)++\n        REF_SPECIAL    = 69, // reference for special properties like __proto\n\n        // For XML support:\n        DEFAULTNAMESPACE = 70, // default xml namespace =\n        ESCXMLATTR     = 71,\n        ESCXMLTEXT     = 72,\n        REF_MEMBER     = 73, // Reference for x.@y, x..y etc.\n        REF_NS_MEMBER  = 74, // Reference for x.ns::y, x..ns::y etc.\n        REF_NAME       = 75, // Reference for @y, @[y] etc.\n        REF_NS_NAME    = 76; // Reference for ns::y, @ns::y@[y] etc.",
        "begin_line": 69,
        "end_line": 154,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.RSH",
        "snippet": "    public final static int\n    // start enum\n        ERROR          = -1, // well-known as the only code < EOF\n        EOF            = 0,  // end of file token - (not EOF_CHAR)\n        EOL            = 1,  // end of line\n\n        // Interpreter reuses the following as bytecodes\n        FIRST_BYTECODE_TOKEN    = 2,\n\n        ENTERWITH      = 2,\n        LEAVEWITH      = 3,\n        RETURN         = 4,\n        GOTO           = 5,\n        IFEQ           = 6,\n        IFNE           = 7,\n        SETNAME        = 8,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        SETPROP        = 34,\n        GETELEM        = 35,\n        SETELEM        = 36,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        BINDNAME       = 48,\n        THROW          = 49,\n        RETHROW        = 50, // rethrow caught execetion: catch (e if ) use it\n        IN             = 51,\n        INSTANCEOF     = 52,\n        LOCAL_LOAD     = 53,\n        GETVAR         = 54,\n        SETVAR         = 55,\n        CATCH_SCOPE    = 56,\n        ENUM_INIT_KEYS = 57,\n        ENUM_INIT_VALUES = 58,\n        ENUM_NEXT      = 59,\n        ENUM_ID        = 60,\n        THISFN         = 61,\n        RETURN_RESULT  = 62, // to return prevoisly stored return result\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n        GET_REF        = 65, // *reference\n        SET_REF        = 66, // *reference    = something\n        DEL_REF        = 67, // delete reference\n        REF_CALL       = 68, // f(args)    = something or f(args)++\n        REF_SPECIAL    = 69, // reference for special properties like __proto\n\n        // For XML support:\n        DEFAULTNAMESPACE = 70, // default xml namespace =\n        ESCXMLATTR     = 71,\n        ESCXMLTEXT     = 72,\n        REF_MEMBER     = 73, // Reference for x.@y, x..y etc.\n        REF_NS_MEMBER  = 74, // Reference for x.ns::y, x..ns::y etc.\n        REF_NAME       = 75, // Reference for @y, @[y] etc.\n        REF_NS_NAME    = 76; // Reference for ns::y, @ns::y@[y] etc.",
        "begin_line": 69,
        "end_line": 154,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.URSH",
        "snippet": "    public final static int\n    // start enum\n        ERROR          = -1, // well-known as the only code < EOF\n        EOF            = 0,  // end of file token - (not EOF_CHAR)\n        EOL            = 1,  // end of line\n\n        // Interpreter reuses the following as bytecodes\n        FIRST_BYTECODE_TOKEN    = 2,\n\n        ENTERWITH      = 2,\n        LEAVEWITH      = 3,\n        RETURN         = 4,\n        GOTO           = 5,\n        IFEQ           = 6,\n        IFNE           = 7,\n        SETNAME        = 8,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        SETPROP        = 34,\n        GETELEM        = 35,\n        SETELEM        = 36,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        BINDNAME       = 48,\n        THROW          = 49,\n        RETHROW        = 50, // rethrow caught execetion: catch (e if ) use it\n        IN             = 51,\n        INSTANCEOF     = 52,\n        LOCAL_LOAD     = 53,\n        GETVAR         = 54,\n        SETVAR         = 55,\n        CATCH_SCOPE    = 56,\n        ENUM_INIT_KEYS = 57,\n        ENUM_INIT_VALUES = 58,\n        ENUM_NEXT      = 59,\n        ENUM_ID        = 60,\n        THISFN         = 61,\n        RETURN_RESULT  = 62, // to return prevoisly stored return result\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n        GET_REF        = 65, // *reference\n        SET_REF        = 66, // *reference    = something\n        DEL_REF        = 67, // delete reference\n        REF_CALL       = 68, // f(args)    = something or f(args)++\n        REF_SPECIAL    = 69, // reference for special properties like __proto\n\n        // For XML support:\n        DEFAULTNAMESPACE = 70, // default xml namespace =\n        ESCXMLATTR     = 71,\n        ESCXMLTEXT     = 72,\n        REF_MEMBER     = 73, // Reference for x.@y, x..y etc.\n        REF_NS_MEMBER  = 74, // Reference for x.ns::y, x..ns::y etc.\n        REF_NAME       = 75, // Reference for @y, @[y] etc.\n        REF_NS_NAME    = 76; // Reference for ns::y, @ns::y@[y] etc.",
        "begin_line": 69,
        "end_line": 154,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.ADD",
        "snippet": "    public final static int\n    // start enum\n        ERROR          = -1, // well-known as the only code < EOF\n        EOF            = 0,  // end of file token - (not EOF_CHAR)\n        EOL            = 1,  // end of line\n\n        // Interpreter reuses the following as bytecodes\n        FIRST_BYTECODE_TOKEN    = 2,\n\n        ENTERWITH      = 2,\n        LEAVEWITH      = 3,\n        RETURN         = 4,\n        GOTO           = 5,\n        IFEQ           = 6,\n        IFNE           = 7,\n        SETNAME        = 8,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        SETPROP        = 34,\n        GETELEM        = 35,\n        SETELEM        = 36,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        BINDNAME       = 48,\n        THROW          = 49,\n        RETHROW        = 50, // rethrow caught execetion: catch (e if ) use it\n        IN             = 51,\n        INSTANCEOF     = 52,\n        LOCAL_LOAD     = 53,\n        GETVAR         = 54,\n        SETVAR         = 55,\n        CATCH_SCOPE    = 56,\n        ENUM_INIT_KEYS = 57,\n        ENUM_INIT_VALUES = 58,\n        ENUM_NEXT      = 59,\n        ENUM_ID        = 60,\n        THISFN         = 61,\n        RETURN_RESULT  = 62, // to return prevoisly stored return result\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n        GET_REF        = 65, // *reference\n        SET_REF        = 66, // *reference    = something\n        DEL_REF        = 67, // delete reference\n        REF_CALL       = 68, // f(args)    = something or f(args)++\n        REF_SPECIAL    = 69, // reference for special properties like __proto\n\n        // For XML support:\n        DEFAULTNAMESPACE = 70, // default xml namespace =\n        ESCXMLATTR     = 71,\n        ESCXMLTEXT     = 72,\n        REF_MEMBER     = 73, // Reference for x.@y, x..y etc.\n        REF_NS_MEMBER  = 74, // Reference for x.ns::y, x..ns::y etc.\n        REF_NAME       = 75, // Reference for @y, @[y] etc.\n        REF_NS_NAME    = 76; // Reference for ns::y, @ns::y@[y] etc.",
        "begin_line": 69,
        "end_line": 154,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.SUB",
        "snippet": "    public final static int\n    // start enum\n        ERROR          = -1, // well-known as the only code < EOF\n        EOF            = 0,  // end of file token - (not EOF_CHAR)\n        EOL            = 1,  // end of line\n\n        // Interpreter reuses the following as bytecodes\n        FIRST_BYTECODE_TOKEN    = 2,\n\n        ENTERWITH      = 2,\n        LEAVEWITH      = 3,\n        RETURN         = 4,\n        GOTO           = 5,\n        IFEQ           = 6,\n        IFNE           = 7,\n        SETNAME        = 8,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        SETPROP        = 34,\n        GETELEM        = 35,\n        SETELEM        = 36,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        BINDNAME       = 48,\n        THROW          = 49,\n        RETHROW        = 50, // rethrow caught execetion: catch (e if ) use it\n        IN             = 51,\n        INSTANCEOF     = 52,\n        LOCAL_LOAD     = 53,\n        GETVAR         = 54,\n        SETVAR         = 55,\n        CATCH_SCOPE    = 56,\n        ENUM_INIT_KEYS = 57,\n        ENUM_INIT_VALUES = 58,\n        ENUM_NEXT      = 59,\n        ENUM_ID        = 60,\n        THISFN         = 61,\n        RETURN_RESULT  = 62, // to return prevoisly stored return result\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n        GET_REF        = 65, // *reference\n        SET_REF        = 66, // *reference    = something\n        DEL_REF        = 67, // delete reference\n        REF_CALL       = 68, // f(args)    = something or f(args)++\n        REF_SPECIAL    = 69, // reference for special properties like __proto\n\n        // For XML support:\n        DEFAULTNAMESPACE = 70, // default xml namespace =\n        ESCXMLATTR     = 71,\n        ESCXMLTEXT     = 72,\n        REF_MEMBER     = 73, // Reference for x.@y, x..y etc.\n        REF_NS_MEMBER  = 74, // Reference for x.ns::y, x..ns::y etc.\n        REF_NAME       = 75, // Reference for @y, @[y] etc.\n        REF_NS_NAME    = 76; // Reference for ns::y, @ns::y@[y] etc.",
        "begin_line": 69,
        "end_line": 154,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.MUL",
        "snippet": "    public final static int\n    // start enum\n        ERROR          = -1, // well-known as the only code < EOF\n        EOF            = 0,  // end of file token - (not EOF_CHAR)\n        EOL            = 1,  // end of line\n\n        // Interpreter reuses the following as bytecodes\n        FIRST_BYTECODE_TOKEN    = 2,\n\n        ENTERWITH      = 2,\n        LEAVEWITH      = 3,\n        RETURN         = 4,\n        GOTO           = 5,\n        IFEQ           = 6,\n        IFNE           = 7,\n        SETNAME        = 8,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        SETPROP        = 34,\n        GETELEM        = 35,\n        SETELEM        = 36,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        BINDNAME       = 48,\n        THROW          = 49,\n        RETHROW        = 50, // rethrow caught execetion: catch (e if ) use it\n        IN             = 51,\n        INSTANCEOF     = 52,\n        LOCAL_LOAD     = 53,\n        GETVAR         = 54,\n        SETVAR         = 55,\n        CATCH_SCOPE    = 56,\n        ENUM_INIT_KEYS = 57,\n        ENUM_INIT_VALUES = 58,\n        ENUM_NEXT      = 59,\n        ENUM_ID        = 60,\n        THISFN         = 61,\n        RETURN_RESULT  = 62, // to return prevoisly stored return result\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n        GET_REF        = 65, // *reference\n        SET_REF        = 66, // *reference    = something\n        DEL_REF        = 67, // delete reference\n        REF_CALL       = 68, // f(args)    = something or f(args)++\n        REF_SPECIAL    = 69, // reference for special properties like __proto\n\n        // For XML support:\n        DEFAULTNAMESPACE = 70, // default xml namespace =\n        ESCXMLATTR     = 71,\n        ESCXMLTEXT     = 72,\n        REF_MEMBER     = 73, // Reference for x.@y, x..y etc.\n        REF_NS_MEMBER  = 74, // Reference for x.ns::y, x..ns::y etc.\n        REF_NAME       = 75, // Reference for @y, @[y] etc.\n        REF_NS_NAME    = 76; // Reference for ns::y, @ns::y@[y] etc.",
        "begin_line": 69,
        "end_line": 154,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.DIV",
        "snippet": "    public final static int\n    // start enum\n        ERROR          = -1, // well-known as the only code < EOF\n        EOF            = 0,  // end of file token - (not EOF_CHAR)\n        EOL            = 1,  // end of line\n\n        // Interpreter reuses the following as bytecodes\n        FIRST_BYTECODE_TOKEN    = 2,\n\n        ENTERWITH      = 2,\n        LEAVEWITH      = 3,\n        RETURN         = 4,\n        GOTO           = 5,\n        IFEQ           = 6,\n        IFNE           = 7,\n        SETNAME        = 8,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        SETPROP        = 34,\n        GETELEM        = 35,\n        SETELEM        = 36,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        BINDNAME       = 48,\n        THROW          = 49,\n        RETHROW        = 50, // rethrow caught execetion: catch (e if ) use it\n        IN             = 51,\n        INSTANCEOF     = 52,\n        LOCAL_LOAD     = 53,\n        GETVAR         = 54,\n        SETVAR         = 55,\n        CATCH_SCOPE    = 56,\n        ENUM_INIT_KEYS = 57,\n        ENUM_INIT_VALUES = 58,\n        ENUM_NEXT      = 59,\n        ENUM_ID        = 60,\n        THISFN         = 61,\n        RETURN_RESULT  = 62, // to return prevoisly stored return result\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n        GET_REF        = 65, // *reference\n        SET_REF        = 66, // *reference    = something\n        DEL_REF        = 67, // delete reference\n        REF_CALL       = 68, // f(args)    = something or f(args)++\n        REF_SPECIAL    = 69, // reference for special properties like __proto\n\n        // For XML support:\n        DEFAULTNAMESPACE = 70, // default xml namespace =\n        ESCXMLATTR     = 71,\n        ESCXMLTEXT     = 72,\n        REF_MEMBER     = 73, // Reference for x.@y, x..y etc.\n        REF_NS_MEMBER  = 74, // Reference for x.ns::y, x..ns::y etc.\n        REF_NAME       = 75, // Reference for @y, @[y] etc.\n        REF_NS_NAME    = 76; // Reference for ns::y, @ns::y@[y] etc.",
        "begin_line": 69,
        "end_line": 154,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.MOD",
        "snippet": "    public final static int\n    // start enum\n        ERROR          = -1, // well-known as the only code < EOF\n        EOF            = 0,  // end of file token - (not EOF_CHAR)\n        EOL            = 1,  // end of line\n\n        // Interpreter reuses the following as bytecodes\n        FIRST_BYTECODE_TOKEN    = 2,\n\n        ENTERWITH      = 2,\n        LEAVEWITH      = 3,\n        RETURN         = 4,\n        GOTO           = 5,\n        IFEQ           = 6,\n        IFNE           = 7,\n        SETNAME        = 8,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        SETPROP        = 34,\n        GETELEM        = 35,\n        SETELEM        = 36,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        BINDNAME       = 48,\n        THROW          = 49,\n        RETHROW        = 50, // rethrow caught execetion: catch (e if ) use it\n        IN             = 51,\n        INSTANCEOF     = 52,\n        LOCAL_LOAD     = 53,\n        GETVAR         = 54,\n        SETVAR         = 55,\n        CATCH_SCOPE    = 56,\n        ENUM_INIT_KEYS = 57,\n        ENUM_INIT_VALUES = 58,\n        ENUM_NEXT      = 59,\n        ENUM_ID        = 60,\n        THISFN         = 61,\n        RETURN_RESULT  = 62, // to return prevoisly stored return result\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n        GET_REF        = 65, // *reference\n        SET_REF        = 66, // *reference    = something\n        DEL_REF        = 67, // delete reference\n        REF_CALL       = 68, // f(args)    = something or f(args)++\n        REF_SPECIAL    = 69, // reference for special properties like __proto\n\n        // For XML support:\n        DEFAULTNAMESPACE = 70, // default xml namespace =\n        ESCXMLATTR     = 71,\n        ESCXMLTEXT     = 72,\n        REF_MEMBER     = 73, // Reference for x.@y, x..y etc.\n        REF_NS_MEMBER  = 74, // Reference for x.ns::y, x..ns::y etc.\n        REF_NAME       = 75, // Reference for @y, @[y] etc.\n        REF_NS_NAME    = 76; // Reference for ns::y, @ns::y@[y] etc.",
        "begin_line": 69,
        "end_line": 154,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.NOT",
        "snippet": "    public final static int\n    // start enum\n        ERROR          = -1, // well-known as the only code < EOF\n        EOF            = 0,  // end of file token - (not EOF_CHAR)\n        EOL            = 1,  // end of line\n\n        // Interpreter reuses the following as bytecodes\n        FIRST_BYTECODE_TOKEN    = 2,\n\n        ENTERWITH      = 2,\n        LEAVEWITH      = 3,\n        RETURN         = 4,\n        GOTO           = 5,\n        IFEQ           = 6,\n        IFNE           = 7,\n        SETNAME        = 8,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        SETPROP        = 34,\n        GETELEM        = 35,\n        SETELEM        = 36,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        BINDNAME       = 48,\n        THROW          = 49,\n        RETHROW        = 50, // rethrow caught execetion: catch (e if ) use it\n        IN             = 51,\n        INSTANCEOF     = 52,\n        LOCAL_LOAD     = 53,\n        GETVAR         = 54,\n        SETVAR         = 55,\n        CATCH_SCOPE    = 56,\n        ENUM_INIT_KEYS = 57,\n        ENUM_INIT_VALUES = 58,\n        ENUM_NEXT      = 59,\n        ENUM_ID        = 60,\n        THISFN         = 61,\n        RETURN_RESULT  = 62, // to return prevoisly stored return result\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n        GET_REF        = 65, // *reference\n        SET_REF        = 66, // *reference    = something\n        DEL_REF        = 67, // delete reference\n        REF_CALL       = 68, // f(args)    = something or f(args)++\n        REF_SPECIAL    = 69, // reference for special properties like __proto\n\n        // For XML support:\n        DEFAULTNAMESPACE = 70, // default xml namespace =\n        ESCXMLATTR     = 71,\n        ESCXMLTEXT     = 72,\n        REF_MEMBER     = 73, // Reference for x.@y, x..y etc.\n        REF_NS_MEMBER  = 74, // Reference for x.ns::y, x..ns::y etc.\n        REF_NAME       = 75, // Reference for @y, @[y] etc.\n        REF_NS_NAME    = 76; // Reference for ns::y, @ns::y@[y] etc.",
        "begin_line": 69,
        "end_line": 154,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.BITNOT",
        "snippet": "    public final static int\n    // start enum\n        ERROR          = -1, // well-known as the only code < EOF\n        EOF            = 0,  // end of file token - (not EOF_CHAR)\n        EOL            = 1,  // end of line\n\n        // Interpreter reuses the following as bytecodes\n        FIRST_BYTECODE_TOKEN    = 2,\n\n        ENTERWITH      = 2,\n        LEAVEWITH      = 3,\n        RETURN         = 4,\n        GOTO           = 5,\n        IFEQ           = 6,\n        IFNE           = 7,\n        SETNAME        = 8,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        SETPROP        = 34,\n        GETELEM        = 35,\n        SETELEM        = 36,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        BINDNAME       = 48,\n        THROW          = 49,\n        RETHROW        = 50, // rethrow caught execetion: catch (e if ) use it\n        IN             = 51,\n        INSTANCEOF     = 52,\n        LOCAL_LOAD     = 53,\n        GETVAR         = 54,\n        SETVAR         = 55,\n        CATCH_SCOPE    = 56,\n        ENUM_INIT_KEYS = 57,\n        ENUM_INIT_VALUES = 58,\n        ENUM_NEXT      = 59,\n        ENUM_ID        = 60,\n        THISFN         = 61,\n        RETURN_RESULT  = 62, // to return prevoisly stored return result\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n        GET_REF        = 65, // *reference\n        SET_REF        = 66, // *reference    = something\n        DEL_REF        = 67, // delete reference\n        REF_CALL       = 68, // f(args)    = something or f(args)++\n        REF_SPECIAL    = 69, // reference for special properties like __proto\n\n        // For XML support:\n        DEFAULTNAMESPACE = 70, // default xml namespace =\n        ESCXMLATTR     = 71,\n        ESCXMLTEXT     = 72,\n        REF_MEMBER     = 73, // Reference for x.@y, x..y etc.\n        REF_NS_MEMBER  = 74, // Reference for x.ns::y, x..ns::y etc.\n        REF_NAME       = 75, // Reference for @y, @[y] etc.\n        REF_NS_NAME    = 76; // Reference for ns::y, @ns::y@[y] etc.",
        "begin_line": 69,
        "end_line": 154,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.POS",
        "snippet": "    public final static int\n    // start enum\n        ERROR          = -1, // well-known as the only code < EOF\n        EOF            = 0,  // end of file token - (not EOF_CHAR)\n        EOL            = 1,  // end of line\n\n        // Interpreter reuses the following as bytecodes\n        FIRST_BYTECODE_TOKEN    = 2,\n\n        ENTERWITH      = 2,\n        LEAVEWITH      = 3,\n        RETURN         = 4,\n        GOTO           = 5,\n        IFEQ           = 6,\n        IFNE           = 7,\n        SETNAME        = 8,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        SETPROP        = 34,\n        GETELEM        = 35,\n        SETELEM        = 36,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        BINDNAME       = 48,\n        THROW          = 49,\n        RETHROW        = 50, // rethrow caught execetion: catch (e if ) use it\n        IN             = 51,\n        INSTANCEOF     = 52,\n        LOCAL_LOAD     = 53,\n        GETVAR         = 54,\n        SETVAR         = 55,\n        CATCH_SCOPE    = 56,\n        ENUM_INIT_KEYS = 57,\n        ENUM_INIT_VALUES = 58,\n        ENUM_NEXT      = 59,\n        ENUM_ID        = 60,\n        THISFN         = 61,\n        RETURN_RESULT  = 62, // to return prevoisly stored return result\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n        GET_REF        = 65, // *reference\n        SET_REF        = 66, // *reference    = something\n        DEL_REF        = 67, // delete reference\n        REF_CALL       = 68, // f(args)    = something or f(args)++\n        REF_SPECIAL    = 69, // reference for special properties like __proto\n\n        // For XML support:\n        DEFAULTNAMESPACE = 70, // default xml namespace =\n        ESCXMLATTR     = 71,\n        ESCXMLTEXT     = 72,\n        REF_MEMBER     = 73, // Reference for x.@y, x..y etc.\n        REF_NS_MEMBER  = 74, // Reference for x.ns::y, x..ns::y etc.\n        REF_NAME       = 75, // Reference for @y, @[y] etc.\n        REF_NS_NAME    = 76; // Reference for ns::y, @ns::y@[y] etc.",
        "begin_line": 69,
        "end_line": 154,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.NEG",
        "snippet": "    public final static int\n    // start enum\n        ERROR          = -1, // well-known as the only code < EOF\n        EOF            = 0,  // end of file token - (not EOF_CHAR)\n        EOL            = 1,  // end of line\n\n        // Interpreter reuses the following as bytecodes\n        FIRST_BYTECODE_TOKEN    = 2,\n\n        ENTERWITH      = 2,\n        LEAVEWITH      = 3,\n        RETURN         = 4,\n        GOTO           = 5,\n        IFEQ           = 6,\n        IFNE           = 7,\n        SETNAME        = 8,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        SETPROP        = 34,\n        GETELEM        = 35,\n        SETELEM        = 36,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        BINDNAME       = 48,\n        THROW          = 49,\n        RETHROW        = 50, // rethrow caught execetion: catch (e if ) use it\n        IN             = 51,\n        INSTANCEOF     = 52,\n        LOCAL_LOAD     = 53,\n        GETVAR         = 54,\n        SETVAR         = 55,\n        CATCH_SCOPE    = 56,\n        ENUM_INIT_KEYS = 57,\n        ENUM_INIT_VALUES = 58,\n        ENUM_NEXT      = 59,\n        ENUM_ID        = 60,\n        THISFN         = 61,\n        RETURN_RESULT  = 62, // to return prevoisly stored return result\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n        GET_REF        = 65, // *reference\n        SET_REF        = 66, // *reference    = something\n        DEL_REF        = 67, // delete reference\n        REF_CALL       = 68, // f(args)    = something or f(args)++\n        REF_SPECIAL    = 69, // reference for special properties like __proto\n\n        // For XML support:\n        DEFAULTNAMESPACE = 70, // default xml namespace =\n        ESCXMLATTR     = 71,\n        ESCXMLTEXT     = 72,\n        REF_MEMBER     = 73, // Reference for x.@y, x..y etc.\n        REF_NS_MEMBER  = 74, // Reference for x.ns::y, x..ns::y etc.\n        REF_NAME       = 75, // Reference for @y, @[y] etc.\n        REF_NS_NAME    = 76; // Reference for ns::y, @ns::y@[y] etc.",
        "begin_line": 69,
        "end_line": 154,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.NEW",
        "snippet": "    public final static int\n    // start enum\n        ERROR          = -1, // well-known as the only code < EOF\n        EOF            = 0,  // end of file token - (not EOF_CHAR)\n        EOL            = 1,  // end of line\n\n        // Interpreter reuses the following as bytecodes\n        FIRST_BYTECODE_TOKEN    = 2,\n\n        ENTERWITH      = 2,\n        LEAVEWITH      = 3,\n        RETURN         = 4,\n        GOTO           = 5,\n        IFEQ           = 6,\n        IFNE           = 7,\n        SETNAME        = 8,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        SETPROP        = 34,\n        GETELEM        = 35,\n        SETELEM        = 36,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        BINDNAME       = 48,\n        THROW          = 49,\n        RETHROW        = 50, // rethrow caught execetion: catch (e if ) use it\n        IN             = 51,\n        INSTANCEOF     = 52,\n        LOCAL_LOAD     = 53,\n        GETVAR         = 54,\n        SETVAR         = 55,\n        CATCH_SCOPE    = 56,\n        ENUM_INIT_KEYS = 57,\n        ENUM_INIT_VALUES = 58,\n        ENUM_NEXT      = 59,\n        ENUM_ID        = 60,\n        THISFN         = 61,\n        RETURN_RESULT  = 62, // to return prevoisly stored return result\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n        GET_REF        = 65, // *reference\n        SET_REF        = 66, // *reference    = something\n        DEL_REF        = 67, // delete reference\n        REF_CALL       = 68, // f(args)    = something or f(args)++\n        REF_SPECIAL    = 69, // reference for special properties like __proto\n\n        // For XML support:\n        DEFAULTNAMESPACE = 70, // default xml namespace =\n        ESCXMLATTR     = 71,\n        ESCXMLTEXT     = 72,\n        REF_MEMBER     = 73, // Reference for x.@y, x..y etc.\n        REF_NS_MEMBER  = 74, // Reference for x.ns::y, x..ns::y etc.\n        REF_NAME       = 75, // Reference for @y, @[y] etc.\n        REF_NS_NAME    = 76; // Reference for ns::y, @ns::y@[y] etc.",
        "begin_line": 69,
        "end_line": 154,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.DELPROP",
        "snippet": "    public final static int\n    // start enum\n        ERROR          = -1, // well-known as the only code < EOF\n        EOF            = 0,  // end of file token - (not EOF_CHAR)\n        EOL            = 1,  // end of line\n\n        // Interpreter reuses the following as bytecodes\n        FIRST_BYTECODE_TOKEN    = 2,\n\n        ENTERWITH      = 2,\n        LEAVEWITH      = 3,\n        RETURN         = 4,\n        GOTO           = 5,\n        IFEQ           = 6,\n        IFNE           = 7,\n        SETNAME        = 8,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        SETPROP        = 34,\n        GETELEM        = 35,\n        SETELEM        = 36,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        BINDNAME       = 48,\n        THROW          = 49,\n        RETHROW        = 50, // rethrow caught execetion: catch (e if ) use it\n        IN             = 51,\n        INSTANCEOF     = 52,\n        LOCAL_LOAD     = 53,\n        GETVAR         = 54,\n        SETVAR         = 55,\n        CATCH_SCOPE    = 56,\n        ENUM_INIT_KEYS = 57,\n        ENUM_INIT_VALUES = 58,\n        ENUM_NEXT      = 59,\n        ENUM_ID        = 60,\n        THISFN         = 61,\n        RETURN_RESULT  = 62, // to return prevoisly stored return result\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n        GET_REF        = 65, // *reference\n        SET_REF        = 66, // *reference    = something\n        DEL_REF        = 67, // delete reference\n        REF_CALL       = 68, // f(args)    = something or f(args)++\n        REF_SPECIAL    = 69, // reference for special properties like __proto\n\n        // For XML support:\n        DEFAULTNAMESPACE = 70, // default xml namespace =\n        ESCXMLATTR     = 71,\n        ESCXMLTEXT     = 72,\n        REF_MEMBER     = 73, // Reference for x.@y, x..y etc.\n        REF_NS_MEMBER  = 74, // Reference for x.ns::y, x..ns::y etc.\n        REF_NAME       = 75, // Reference for @y, @[y] etc.\n        REF_NS_NAME    = 76; // Reference for ns::y, @ns::y@[y] etc.",
        "begin_line": 69,
        "end_line": 154,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.TYPEOF",
        "snippet": "    public final static int\n    // start enum\n        ERROR          = -1, // well-known as the only code < EOF\n        EOF            = 0,  // end of file token - (not EOF_CHAR)\n        EOL            = 1,  // end of line\n\n        // Interpreter reuses the following as bytecodes\n        FIRST_BYTECODE_TOKEN    = 2,\n\n        ENTERWITH      = 2,\n        LEAVEWITH      = 3,\n        RETURN         = 4,\n        GOTO           = 5,\n        IFEQ           = 6,\n        IFNE           = 7,\n        SETNAME        = 8,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        SETPROP        = 34,\n        GETELEM        = 35,\n        SETELEM        = 36,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        BINDNAME       = 48,\n        THROW          = 49,\n        RETHROW        = 50, // rethrow caught execetion: catch (e if ) use it\n        IN             = 51,\n        INSTANCEOF     = 52,\n        LOCAL_LOAD     = 53,\n        GETVAR         = 54,\n        SETVAR         = 55,\n        CATCH_SCOPE    = 56,\n        ENUM_INIT_KEYS = 57,\n        ENUM_INIT_VALUES = 58,\n        ENUM_NEXT      = 59,\n        ENUM_ID        = 60,\n        THISFN         = 61,\n        RETURN_RESULT  = 62, // to return prevoisly stored return result\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n        GET_REF        = 65, // *reference\n        SET_REF        = 66, // *reference    = something\n        DEL_REF        = 67, // delete reference\n        REF_CALL       = 68, // f(args)    = something or f(args)++\n        REF_SPECIAL    = 69, // reference for special properties like __proto\n\n        // For XML support:\n        DEFAULTNAMESPACE = 70, // default xml namespace =\n        ESCXMLATTR     = 71,\n        ESCXMLTEXT     = 72,\n        REF_MEMBER     = 73, // Reference for x.@y, x..y etc.\n        REF_NS_MEMBER  = 74, // Reference for x.ns::y, x..ns::y etc.\n        REF_NAME       = 75, // Reference for @y, @[y] etc.\n        REF_NS_NAME    = 76; // Reference for ns::y, @ns::y@[y] etc.",
        "begin_line": 69,
        "end_line": 154,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.GETPROP",
        "snippet": "    public final static int\n    // start enum\n        ERROR          = -1, // well-known as the only code < EOF\n        EOF            = 0,  // end of file token - (not EOF_CHAR)\n        EOL            = 1,  // end of line\n\n        // Interpreter reuses the following as bytecodes\n        FIRST_BYTECODE_TOKEN    = 2,\n\n        ENTERWITH      = 2,\n        LEAVEWITH      = 3,\n        RETURN         = 4,\n        GOTO           = 5,\n        IFEQ           = 6,\n        IFNE           = 7,\n        SETNAME        = 8,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        SETPROP        = 34,\n        GETELEM        = 35,\n        SETELEM        = 36,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        BINDNAME       = 48,\n        THROW          = 49,\n        RETHROW        = 50, // rethrow caught execetion: catch (e if ) use it\n        IN             = 51,\n        INSTANCEOF     = 52,\n        LOCAL_LOAD     = 53,\n        GETVAR         = 54,\n        SETVAR         = 55,\n        CATCH_SCOPE    = 56,\n        ENUM_INIT_KEYS = 57,\n        ENUM_INIT_VALUES = 58,\n        ENUM_NEXT      = 59,\n        ENUM_ID        = 60,\n        THISFN         = 61,\n        RETURN_RESULT  = 62, // to return prevoisly stored return result\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n        GET_REF        = 65, // *reference\n        SET_REF        = 66, // *reference    = something\n        DEL_REF        = 67, // delete reference\n        REF_CALL       = 68, // f(args)    = something or f(args)++\n        REF_SPECIAL    = 69, // reference for special properties like __proto\n\n        // For XML support:\n        DEFAULTNAMESPACE = 70, // default xml namespace =\n        ESCXMLATTR     = 71,\n        ESCXMLTEXT     = 72,\n        REF_MEMBER     = 73, // Reference for x.@y, x..y etc.\n        REF_NS_MEMBER  = 74, // Reference for x.ns::y, x..ns::y etc.\n        REF_NAME       = 75, // Reference for @y, @[y] etc.\n        REF_NS_NAME    = 76; // Reference for ns::y, @ns::y@[y] etc.",
        "begin_line": 69,
        "end_line": 154,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.SETPROP",
        "snippet": "    public final static int\n    // start enum\n        ERROR          = -1, // well-known as the only code < EOF\n        EOF            = 0,  // end of file token - (not EOF_CHAR)\n        EOL            = 1,  // end of line\n\n        // Interpreter reuses the following as bytecodes\n        FIRST_BYTECODE_TOKEN    = 2,\n\n        ENTERWITH      = 2,\n        LEAVEWITH      = 3,\n        RETURN         = 4,\n        GOTO           = 5,\n        IFEQ           = 6,\n        IFNE           = 7,\n        SETNAME        = 8,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        SETPROP        = 34,\n        GETELEM        = 35,\n        SETELEM        = 36,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        BINDNAME       = 48,\n        THROW          = 49,\n        RETHROW        = 50, // rethrow caught execetion: catch (e if ) use it\n        IN             = 51,\n        INSTANCEOF     = 52,\n        LOCAL_LOAD     = 53,\n        GETVAR         = 54,\n        SETVAR         = 55,\n        CATCH_SCOPE    = 56,\n        ENUM_INIT_KEYS = 57,\n        ENUM_INIT_VALUES = 58,\n        ENUM_NEXT      = 59,\n        ENUM_ID        = 60,\n        THISFN         = 61,\n        RETURN_RESULT  = 62, // to return prevoisly stored return result\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n        GET_REF        = 65, // *reference\n        SET_REF        = 66, // *reference    = something\n        DEL_REF        = 67, // delete reference\n        REF_CALL       = 68, // f(args)    = something or f(args)++\n        REF_SPECIAL    = 69, // reference for special properties like __proto\n\n        // For XML support:\n        DEFAULTNAMESPACE = 70, // default xml namespace =\n        ESCXMLATTR     = 71,\n        ESCXMLTEXT     = 72,\n        REF_MEMBER     = 73, // Reference for x.@y, x..y etc.\n        REF_NS_MEMBER  = 74, // Reference for x.ns::y, x..ns::y etc.\n        REF_NAME       = 75, // Reference for @y, @[y] etc.\n        REF_NS_NAME    = 76; // Reference for ns::y, @ns::y@[y] etc.",
        "begin_line": 69,
        "end_line": 154,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.GETELEM",
        "snippet": "    public final static int\n    // start enum\n        ERROR          = -1, // well-known as the only code < EOF\n        EOF            = 0,  // end of file token - (not EOF_CHAR)\n        EOL            = 1,  // end of line\n\n        // Interpreter reuses the following as bytecodes\n        FIRST_BYTECODE_TOKEN    = 2,\n\n        ENTERWITH      = 2,\n        LEAVEWITH      = 3,\n        RETURN         = 4,\n        GOTO           = 5,\n        IFEQ           = 6,\n        IFNE           = 7,\n        SETNAME        = 8,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        SETPROP        = 34,\n        GETELEM        = 35,\n        SETELEM        = 36,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        BINDNAME       = 48,\n        THROW          = 49,\n        RETHROW        = 50, // rethrow caught execetion: catch (e if ) use it\n        IN             = 51,\n        INSTANCEOF     = 52,\n        LOCAL_LOAD     = 53,\n        GETVAR         = 54,\n        SETVAR         = 55,\n        CATCH_SCOPE    = 56,\n        ENUM_INIT_KEYS = 57,\n        ENUM_INIT_VALUES = 58,\n        ENUM_NEXT      = 59,\n        ENUM_ID        = 60,\n        THISFN         = 61,\n        RETURN_RESULT  = 62, // to return prevoisly stored return result\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n        GET_REF        = 65, // *reference\n        SET_REF        = 66, // *reference    = something\n        DEL_REF        = 67, // delete reference\n        REF_CALL       = 68, // f(args)    = something or f(args)++\n        REF_SPECIAL    = 69, // reference for special properties like __proto\n\n        // For XML support:\n        DEFAULTNAMESPACE = 70, // default xml namespace =\n        ESCXMLATTR     = 71,\n        ESCXMLTEXT     = 72,\n        REF_MEMBER     = 73, // Reference for x.@y, x..y etc.\n        REF_NS_MEMBER  = 74, // Reference for x.ns::y, x..ns::y etc.\n        REF_NAME       = 75, // Reference for @y, @[y] etc.\n        REF_NS_NAME    = 76; // Reference for ns::y, @ns::y@[y] etc.",
        "begin_line": 69,
        "end_line": 154,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.SETELEM",
        "snippet": "    public final static int\n    // start enum\n        ERROR          = -1, // well-known as the only code < EOF\n        EOF            = 0,  // end of file token - (not EOF_CHAR)\n        EOL            = 1,  // end of line\n\n        // Interpreter reuses the following as bytecodes\n        FIRST_BYTECODE_TOKEN    = 2,\n\n        ENTERWITH      = 2,\n        LEAVEWITH      = 3,\n        RETURN         = 4,\n        GOTO           = 5,\n        IFEQ           = 6,\n        IFNE           = 7,\n        SETNAME        = 8,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        SETPROP        = 34,\n        GETELEM        = 35,\n        SETELEM        = 36,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        BINDNAME       = 48,\n        THROW          = 49,\n        RETHROW        = 50, // rethrow caught execetion: catch (e if ) use it\n        IN             = 51,\n        INSTANCEOF     = 52,\n        LOCAL_LOAD     = 53,\n        GETVAR         = 54,\n        SETVAR         = 55,\n        CATCH_SCOPE    = 56,\n        ENUM_INIT_KEYS = 57,\n        ENUM_INIT_VALUES = 58,\n        ENUM_NEXT      = 59,\n        ENUM_ID        = 60,\n        THISFN         = 61,\n        RETURN_RESULT  = 62, // to return prevoisly stored return result\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n        GET_REF        = 65, // *reference\n        SET_REF        = 66, // *reference    = something\n        DEL_REF        = 67, // delete reference\n        REF_CALL       = 68, // f(args)    = something or f(args)++\n        REF_SPECIAL    = 69, // reference for special properties like __proto\n\n        // For XML support:\n        DEFAULTNAMESPACE = 70, // default xml namespace =\n        ESCXMLATTR     = 71,\n        ESCXMLTEXT     = 72,\n        REF_MEMBER     = 73, // Reference for x.@y, x..y etc.\n        REF_NS_MEMBER  = 74, // Reference for x.ns::y, x..ns::y etc.\n        REF_NAME       = 75, // Reference for @y, @[y] etc.\n        REF_NS_NAME    = 76; // Reference for ns::y, @ns::y@[y] etc.",
        "begin_line": 69,
        "end_line": 154,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.CALL",
        "snippet": "    public final static int\n    // start enum\n        ERROR          = -1, // well-known as the only code < EOF\n        EOF            = 0,  // end of file token - (not EOF_CHAR)\n        EOL            = 1,  // end of line\n\n        // Interpreter reuses the following as bytecodes\n        FIRST_BYTECODE_TOKEN    = 2,\n\n        ENTERWITH      = 2,\n        LEAVEWITH      = 3,\n        RETURN         = 4,\n        GOTO           = 5,\n        IFEQ           = 6,\n        IFNE           = 7,\n        SETNAME        = 8,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        SETPROP        = 34,\n        GETELEM        = 35,\n        SETELEM        = 36,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        BINDNAME       = 48,\n        THROW          = 49,\n        RETHROW        = 50, // rethrow caught execetion: catch (e if ) use it\n        IN             = 51,\n        INSTANCEOF     = 52,\n        LOCAL_LOAD     = 53,\n        GETVAR         = 54,\n        SETVAR         = 55,\n        CATCH_SCOPE    = 56,\n        ENUM_INIT_KEYS = 57,\n        ENUM_INIT_VALUES = 58,\n        ENUM_NEXT      = 59,\n        ENUM_ID        = 60,\n        THISFN         = 61,\n        RETURN_RESULT  = 62, // to return prevoisly stored return result\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n        GET_REF        = 65, // *reference\n        SET_REF        = 66, // *reference    = something\n        DEL_REF        = 67, // delete reference\n        REF_CALL       = 68, // f(args)    = something or f(args)++\n        REF_SPECIAL    = 69, // reference for special properties like __proto\n\n        // For XML support:\n        DEFAULTNAMESPACE = 70, // default xml namespace =\n        ESCXMLATTR     = 71,\n        ESCXMLTEXT     = 72,\n        REF_MEMBER     = 73, // Reference for x.@y, x..y etc.\n        REF_NS_MEMBER  = 74, // Reference for x.ns::y, x..ns::y etc.\n        REF_NAME       = 75, // Reference for @y, @[y] etc.\n        REF_NS_NAME    = 76; // Reference for ns::y, @ns::y@[y] etc.",
        "begin_line": 69,
        "end_line": 154,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.NAME",
        "snippet": "    public final static int\n    // start enum\n        ERROR          = -1, // well-known as the only code < EOF\n        EOF            = 0,  // end of file token - (not EOF_CHAR)\n        EOL            = 1,  // end of line\n\n        // Interpreter reuses the following as bytecodes\n        FIRST_BYTECODE_TOKEN    = 2,\n\n        ENTERWITH      = 2,\n        LEAVEWITH      = 3,\n        RETURN         = 4,\n        GOTO           = 5,\n        IFEQ           = 6,\n        IFNE           = 7,\n        SETNAME        = 8,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        SETPROP        = 34,\n        GETELEM        = 35,\n        SETELEM        = 36,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        BINDNAME       = 48,\n        THROW          = 49,\n        RETHROW        = 50, // rethrow caught execetion: catch (e if ) use it\n        IN             = 51,\n        INSTANCEOF     = 52,\n        LOCAL_LOAD     = 53,\n        GETVAR         = 54,\n        SETVAR         = 55,\n        CATCH_SCOPE    = 56,\n        ENUM_INIT_KEYS = 57,\n        ENUM_INIT_VALUES = 58,\n        ENUM_NEXT      = 59,\n        ENUM_ID        = 60,\n        THISFN         = 61,\n        RETURN_RESULT  = 62, // to return prevoisly stored return result\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n        GET_REF        = 65, // *reference\n        SET_REF        = 66, // *reference    = something\n        DEL_REF        = 67, // delete reference\n        REF_CALL       = 68, // f(args)    = something or f(args)++\n        REF_SPECIAL    = 69, // reference for special properties like __proto\n\n        // For XML support:\n        DEFAULTNAMESPACE = 70, // default xml namespace =\n        ESCXMLATTR     = 71,\n        ESCXMLTEXT     = 72,\n        REF_MEMBER     = 73, // Reference for x.@y, x..y etc.\n        REF_NS_MEMBER  = 74, // Reference for x.ns::y, x..ns::y etc.\n        REF_NAME       = 75, // Reference for @y, @[y] etc.\n        REF_NS_NAME    = 76; // Reference for ns::y, @ns::y@[y] etc.",
        "begin_line": 69,
        "end_line": 154,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.NUMBER",
        "snippet": "    public final static int\n    // start enum\n        ERROR          = -1, // well-known as the only code < EOF\n        EOF            = 0,  // end of file token - (not EOF_CHAR)\n        EOL            = 1,  // end of line\n\n        // Interpreter reuses the following as bytecodes\n        FIRST_BYTECODE_TOKEN    = 2,\n\n        ENTERWITH      = 2,\n        LEAVEWITH      = 3,\n        RETURN         = 4,\n        GOTO           = 5,\n        IFEQ           = 6,\n        IFNE           = 7,\n        SETNAME        = 8,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        SETPROP        = 34,\n        GETELEM        = 35,\n        SETELEM        = 36,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        BINDNAME       = 48,\n        THROW          = 49,\n        RETHROW        = 50, // rethrow caught execetion: catch (e if ) use it\n        IN             = 51,\n        INSTANCEOF     = 52,\n        LOCAL_LOAD     = 53,\n        GETVAR         = 54,\n        SETVAR         = 55,\n        CATCH_SCOPE    = 56,\n        ENUM_INIT_KEYS = 57,\n        ENUM_INIT_VALUES = 58,\n        ENUM_NEXT      = 59,\n        ENUM_ID        = 60,\n        THISFN         = 61,\n        RETURN_RESULT  = 62, // to return prevoisly stored return result\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n        GET_REF        = 65, // *reference\n        SET_REF        = 66, // *reference    = something\n        DEL_REF        = 67, // delete reference\n        REF_CALL       = 68, // f(args)    = something or f(args)++\n        REF_SPECIAL    = 69, // reference for special properties like __proto\n\n        // For XML support:\n        DEFAULTNAMESPACE = 70, // default xml namespace =\n        ESCXMLATTR     = 71,\n        ESCXMLTEXT     = 72,\n        REF_MEMBER     = 73, // Reference for x.@y, x..y etc.\n        REF_NS_MEMBER  = 74, // Reference for x.ns::y, x..ns::y etc.\n        REF_NAME       = 75, // Reference for @y, @[y] etc.\n        REF_NS_NAME    = 76; // Reference for ns::y, @ns::y@[y] etc.",
        "begin_line": 69,
        "end_line": 154,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.STRING",
        "snippet": "    public final static int\n    // start enum\n        ERROR          = -1, // well-known as the only code < EOF\n        EOF            = 0,  // end of file token - (not EOF_CHAR)\n        EOL            = 1,  // end of line\n\n        // Interpreter reuses the following as bytecodes\n        FIRST_BYTECODE_TOKEN    = 2,\n\n        ENTERWITH      = 2,\n        LEAVEWITH      = 3,\n        RETURN         = 4,\n        GOTO           = 5,\n        IFEQ           = 6,\n        IFNE           = 7,\n        SETNAME        = 8,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        SETPROP        = 34,\n        GETELEM        = 35,\n        SETELEM        = 36,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        BINDNAME       = 48,\n        THROW          = 49,\n        RETHROW        = 50, // rethrow caught execetion: catch (e if ) use it\n        IN             = 51,\n        INSTANCEOF     = 52,\n        LOCAL_LOAD     = 53,\n        GETVAR         = 54,\n        SETVAR         = 55,\n        CATCH_SCOPE    = 56,\n        ENUM_INIT_KEYS = 57,\n        ENUM_INIT_VALUES = 58,\n        ENUM_NEXT      = 59,\n        ENUM_ID        = 60,\n        THISFN         = 61,\n        RETURN_RESULT  = 62, // to return prevoisly stored return result\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n        GET_REF        = 65, // *reference\n        SET_REF        = 66, // *reference    = something\n        DEL_REF        = 67, // delete reference\n        REF_CALL       = 68, // f(args)    = something or f(args)++\n        REF_SPECIAL    = 69, // reference for special properties like __proto\n\n        // For XML support:\n        DEFAULTNAMESPACE = 70, // default xml namespace =\n        ESCXMLATTR     = 71,\n        ESCXMLTEXT     = 72,\n        REF_MEMBER     = 73, // Reference for x.@y, x..y etc.\n        REF_NS_MEMBER  = 74, // Reference for x.ns::y, x..ns::y etc.\n        REF_NAME       = 75, // Reference for @y, @[y] etc.\n        REF_NS_NAME    = 76; // Reference for ns::y, @ns::y@[y] etc.",
        "begin_line": 69,
        "end_line": 154,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.NULL",
        "snippet": "    public final static int\n    // start enum\n        ERROR          = -1, // well-known as the only code < EOF\n        EOF            = 0,  // end of file token - (not EOF_CHAR)\n        EOL            = 1,  // end of line\n\n        // Interpreter reuses the following as bytecodes\n        FIRST_BYTECODE_TOKEN    = 2,\n\n        ENTERWITH      = 2,\n        LEAVEWITH      = 3,\n        RETURN         = 4,\n        GOTO           = 5,\n        IFEQ           = 6,\n        IFNE           = 7,\n        SETNAME        = 8,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        SETPROP        = 34,\n        GETELEM        = 35,\n        SETELEM        = 36,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        BINDNAME       = 48,\n        THROW          = 49,\n        RETHROW        = 50, // rethrow caught execetion: catch (e if ) use it\n        IN             = 51,\n        INSTANCEOF     = 52,\n        LOCAL_LOAD     = 53,\n        GETVAR         = 54,\n        SETVAR         = 55,\n        CATCH_SCOPE    = 56,\n        ENUM_INIT_KEYS = 57,\n        ENUM_INIT_VALUES = 58,\n        ENUM_NEXT      = 59,\n        ENUM_ID        = 60,\n        THISFN         = 61,\n        RETURN_RESULT  = 62, // to return prevoisly stored return result\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n        GET_REF        = 65, // *reference\n        SET_REF        = 66, // *reference    = something\n        DEL_REF        = 67, // delete reference\n        REF_CALL       = 68, // f(args)    = something or f(args)++\n        REF_SPECIAL    = 69, // reference for special properties like __proto\n\n        // For XML support:\n        DEFAULTNAMESPACE = 70, // default xml namespace =\n        ESCXMLATTR     = 71,\n        ESCXMLTEXT     = 72,\n        REF_MEMBER     = 73, // Reference for x.@y, x..y etc.\n        REF_NS_MEMBER  = 74, // Reference for x.ns::y, x..ns::y etc.\n        REF_NAME       = 75, // Reference for @y, @[y] etc.\n        REF_NS_NAME    = 76; // Reference for ns::y, @ns::y@[y] etc.",
        "begin_line": 69,
        "end_line": 154,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.THIS",
        "snippet": "    public final static int\n    // start enum\n        ERROR          = -1, // well-known as the only code < EOF\n        EOF            = 0,  // end of file token - (not EOF_CHAR)\n        EOL            = 1,  // end of line\n\n        // Interpreter reuses the following as bytecodes\n        FIRST_BYTECODE_TOKEN    = 2,\n\n        ENTERWITH      = 2,\n        LEAVEWITH      = 3,\n        RETURN         = 4,\n        GOTO           = 5,\n        IFEQ           = 6,\n        IFNE           = 7,\n        SETNAME        = 8,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        SETPROP        = 34,\n        GETELEM        = 35,\n        SETELEM        = 36,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        BINDNAME       = 48,\n        THROW          = 49,\n        RETHROW        = 50, // rethrow caught execetion: catch (e if ) use it\n        IN             = 51,\n        INSTANCEOF     = 52,\n        LOCAL_LOAD     = 53,\n        GETVAR         = 54,\n        SETVAR         = 55,\n        CATCH_SCOPE    = 56,\n        ENUM_INIT_KEYS = 57,\n        ENUM_INIT_VALUES = 58,\n        ENUM_NEXT      = 59,\n        ENUM_ID        = 60,\n        THISFN         = 61,\n        RETURN_RESULT  = 62, // to return prevoisly stored return result\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n        GET_REF        = 65, // *reference\n        SET_REF        = 66, // *reference    = something\n        DEL_REF        = 67, // delete reference\n        REF_CALL       = 68, // f(args)    = something or f(args)++\n        REF_SPECIAL    = 69, // reference for special properties like __proto\n\n        // For XML support:\n        DEFAULTNAMESPACE = 70, // default xml namespace =\n        ESCXMLATTR     = 71,\n        ESCXMLTEXT     = 72,\n        REF_MEMBER     = 73, // Reference for x.@y, x..y etc.\n        REF_NS_MEMBER  = 74, // Reference for x.ns::y, x..ns::y etc.\n        REF_NAME       = 75, // Reference for @y, @[y] etc.\n        REF_NS_NAME    = 76; // Reference for ns::y, @ns::y@[y] etc.",
        "begin_line": 69,
        "end_line": 154,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.FALSE",
        "snippet": "    public final static int\n    // start enum\n        ERROR          = -1, // well-known as the only code < EOF\n        EOF            = 0,  // end of file token - (not EOF_CHAR)\n        EOL            = 1,  // end of line\n\n        // Interpreter reuses the following as bytecodes\n        FIRST_BYTECODE_TOKEN    = 2,\n\n        ENTERWITH      = 2,\n        LEAVEWITH      = 3,\n        RETURN         = 4,\n        GOTO           = 5,\n        IFEQ           = 6,\n        IFNE           = 7,\n        SETNAME        = 8,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        SETPROP        = 34,\n        GETELEM        = 35,\n        SETELEM        = 36,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        BINDNAME       = 48,\n        THROW          = 49,\n        RETHROW        = 50, // rethrow caught execetion: catch (e if ) use it\n        IN             = 51,\n        INSTANCEOF     = 52,\n        LOCAL_LOAD     = 53,\n        GETVAR         = 54,\n        SETVAR         = 55,\n        CATCH_SCOPE    = 56,\n        ENUM_INIT_KEYS = 57,\n        ENUM_INIT_VALUES = 58,\n        ENUM_NEXT      = 59,\n        ENUM_ID        = 60,\n        THISFN         = 61,\n        RETURN_RESULT  = 62, // to return prevoisly stored return result\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n        GET_REF        = 65, // *reference\n        SET_REF        = 66, // *reference    = something\n        DEL_REF        = 67, // delete reference\n        REF_CALL       = 68, // f(args)    = something or f(args)++\n        REF_SPECIAL    = 69, // reference for special properties like __proto\n\n        // For XML support:\n        DEFAULTNAMESPACE = 70, // default xml namespace =\n        ESCXMLATTR     = 71,\n        ESCXMLTEXT     = 72,\n        REF_MEMBER     = 73, // Reference for x.@y, x..y etc.\n        REF_NS_MEMBER  = 74, // Reference for x.ns::y, x..ns::y etc.\n        REF_NAME       = 75, // Reference for @y, @[y] etc.\n        REF_NS_NAME    = 76; // Reference for ns::y, @ns::y@[y] etc.",
        "begin_line": 69,
        "end_line": 154,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.TRUE",
        "snippet": "    public final static int\n    // start enum\n        ERROR          = -1, // well-known as the only code < EOF\n        EOF            = 0,  // end of file token - (not EOF_CHAR)\n        EOL            = 1,  // end of line\n\n        // Interpreter reuses the following as bytecodes\n        FIRST_BYTECODE_TOKEN    = 2,\n\n        ENTERWITH      = 2,\n        LEAVEWITH      = 3,\n        RETURN         = 4,\n        GOTO           = 5,\n        IFEQ           = 6,\n        IFNE           = 7,\n        SETNAME        = 8,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        SETPROP        = 34,\n        GETELEM        = 35,\n        SETELEM        = 36,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        BINDNAME       = 48,\n        THROW          = 49,\n        RETHROW        = 50, // rethrow caught execetion: catch (e if ) use it\n        IN             = 51,\n        INSTANCEOF     = 52,\n        LOCAL_LOAD     = 53,\n        GETVAR         = 54,\n        SETVAR         = 55,\n        CATCH_SCOPE    = 56,\n        ENUM_INIT_KEYS = 57,\n        ENUM_INIT_VALUES = 58,\n        ENUM_NEXT      = 59,\n        ENUM_ID        = 60,\n        THISFN         = 61,\n        RETURN_RESULT  = 62, // to return prevoisly stored return result\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n        GET_REF        = 65, // *reference\n        SET_REF        = 66, // *reference    = something\n        DEL_REF        = 67, // delete reference\n        REF_CALL       = 68, // f(args)    = something or f(args)++\n        REF_SPECIAL    = 69, // reference for special properties like __proto\n\n        // For XML support:\n        DEFAULTNAMESPACE = 70, // default xml namespace =\n        ESCXMLATTR     = 71,\n        ESCXMLTEXT     = 72,\n        REF_MEMBER     = 73, // Reference for x.@y, x..y etc.\n        REF_NS_MEMBER  = 74, // Reference for x.ns::y, x..ns::y etc.\n        REF_NAME       = 75, // Reference for @y, @[y] etc.\n        REF_NS_NAME    = 76; // Reference for ns::y, @ns::y@[y] etc.",
        "begin_line": 69,
        "end_line": 154,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.SHEQ",
        "snippet": "    public final static int\n    // start enum\n        ERROR          = -1, // well-known as the only code < EOF\n        EOF            = 0,  // end of file token - (not EOF_CHAR)\n        EOL            = 1,  // end of line\n\n        // Interpreter reuses the following as bytecodes\n        FIRST_BYTECODE_TOKEN    = 2,\n\n        ENTERWITH      = 2,\n        LEAVEWITH      = 3,\n        RETURN         = 4,\n        GOTO           = 5,\n        IFEQ           = 6,\n        IFNE           = 7,\n        SETNAME        = 8,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        SETPROP        = 34,\n        GETELEM        = 35,\n        SETELEM        = 36,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        BINDNAME       = 48,\n        THROW          = 49,\n        RETHROW        = 50, // rethrow caught execetion: catch (e if ) use it\n        IN             = 51,\n        INSTANCEOF     = 52,\n        LOCAL_LOAD     = 53,\n        GETVAR         = 54,\n        SETVAR         = 55,\n        CATCH_SCOPE    = 56,\n        ENUM_INIT_KEYS = 57,\n        ENUM_INIT_VALUES = 58,\n        ENUM_NEXT      = 59,\n        ENUM_ID        = 60,\n        THISFN         = 61,\n        RETURN_RESULT  = 62, // to return prevoisly stored return result\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n        GET_REF        = 65, // *reference\n        SET_REF        = 66, // *reference    = something\n        DEL_REF        = 67, // delete reference\n        REF_CALL       = 68, // f(args)    = something or f(args)++\n        REF_SPECIAL    = 69, // reference for special properties like __proto\n\n        // For XML support:\n        DEFAULTNAMESPACE = 70, // default xml namespace =\n        ESCXMLATTR     = 71,\n        ESCXMLTEXT     = 72,\n        REF_MEMBER     = 73, // Reference for x.@y, x..y etc.\n        REF_NS_MEMBER  = 74, // Reference for x.ns::y, x..ns::y etc.\n        REF_NAME       = 75, // Reference for @y, @[y] etc.\n        REF_NS_NAME    = 76; // Reference for ns::y, @ns::y@[y] etc.",
        "begin_line": 69,
        "end_line": 154,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.SHNE",
        "snippet": "    public final static int\n    // start enum\n        ERROR          = -1, // well-known as the only code < EOF\n        EOF            = 0,  // end of file token - (not EOF_CHAR)\n        EOL            = 1,  // end of line\n\n        // Interpreter reuses the following as bytecodes\n        FIRST_BYTECODE_TOKEN    = 2,\n\n        ENTERWITH      = 2,\n        LEAVEWITH      = 3,\n        RETURN         = 4,\n        GOTO           = 5,\n        IFEQ           = 6,\n        IFNE           = 7,\n        SETNAME        = 8,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        SETPROP        = 34,\n        GETELEM        = 35,\n        SETELEM        = 36,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        BINDNAME       = 48,\n        THROW          = 49,\n        RETHROW        = 50, // rethrow caught execetion: catch (e if ) use it\n        IN             = 51,\n        INSTANCEOF     = 52,\n        LOCAL_LOAD     = 53,\n        GETVAR         = 54,\n        SETVAR         = 55,\n        CATCH_SCOPE    = 56,\n        ENUM_INIT_KEYS = 57,\n        ENUM_INIT_VALUES = 58,\n        ENUM_NEXT      = 59,\n        ENUM_ID        = 60,\n        THISFN         = 61,\n        RETURN_RESULT  = 62, // to return prevoisly stored return result\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n        GET_REF        = 65, // *reference\n        SET_REF        = 66, // *reference    = something\n        DEL_REF        = 67, // delete reference\n        REF_CALL       = 68, // f(args)    = something or f(args)++\n        REF_SPECIAL    = 69, // reference for special properties like __proto\n\n        // For XML support:\n        DEFAULTNAMESPACE = 70, // default xml namespace =\n        ESCXMLATTR     = 71,\n        ESCXMLTEXT     = 72,\n        REF_MEMBER     = 73, // Reference for x.@y, x..y etc.\n        REF_NS_MEMBER  = 74, // Reference for x.ns::y, x..ns::y etc.\n        REF_NAME       = 75, // Reference for @y, @[y] etc.\n        REF_NS_NAME    = 76; // Reference for ns::y, @ns::y@[y] etc.",
        "begin_line": 69,
        "end_line": 154,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.REGEXP",
        "snippet": "    public final static int\n    // start enum\n        ERROR          = -1, // well-known as the only code < EOF\n        EOF            = 0,  // end of file token - (not EOF_CHAR)\n        EOL            = 1,  // end of line\n\n        // Interpreter reuses the following as bytecodes\n        FIRST_BYTECODE_TOKEN    = 2,\n\n        ENTERWITH      = 2,\n        LEAVEWITH      = 3,\n        RETURN         = 4,\n        GOTO           = 5,\n        IFEQ           = 6,\n        IFNE           = 7,\n        SETNAME        = 8,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        SETPROP        = 34,\n        GETELEM        = 35,\n        SETELEM        = 36,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        BINDNAME       = 48,\n        THROW          = 49,\n        RETHROW        = 50, // rethrow caught execetion: catch (e if ) use it\n        IN             = 51,\n        INSTANCEOF     = 52,\n        LOCAL_LOAD     = 53,\n        GETVAR         = 54,\n        SETVAR         = 55,\n        CATCH_SCOPE    = 56,\n        ENUM_INIT_KEYS = 57,\n        ENUM_INIT_VALUES = 58,\n        ENUM_NEXT      = 59,\n        ENUM_ID        = 60,\n        THISFN         = 61,\n        RETURN_RESULT  = 62, // to return prevoisly stored return result\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n        GET_REF        = 65, // *reference\n        SET_REF        = 66, // *reference    = something\n        DEL_REF        = 67, // delete reference\n        REF_CALL       = 68, // f(args)    = something or f(args)++\n        REF_SPECIAL    = 69, // reference for special properties like __proto\n\n        // For XML support:\n        DEFAULTNAMESPACE = 70, // default xml namespace =\n        ESCXMLATTR     = 71,\n        ESCXMLTEXT     = 72,\n        REF_MEMBER     = 73, // Reference for x.@y, x..y etc.\n        REF_NS_MEMBER  = 74, // Reference for x.ns::y, x..ns::y etc.\n        REF_NAME       = 75, // Reference for @y, @[y] etc.\n        REF_NS_NAME    = 76; // Reference for ns::y, @ns::y@[y] etc.",
        "begin_line": 69,
        "end_line": 154,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.BINDNAME",
        "snippet": "    public final static int\n    // start enum\n        ERROR          = -1, // well-known as the only code < EOF\n        EOF            = 0,  // end of file token - (not EOF_CHAR)\n        EOL            = 1,  // end of line\n\n        // Interpreter reuses the following as bytecodes\n        FIRST_BYTECODE_TOKEN    = 2,\n\n        ENTERWITH      = 2,\n        LEAVEWITH      = 3,\n        RETURN         = 4,\n        GOTO           = 5,\n        IFEQ           = 6,\n        IFNE           = 7,\n        SETNAME        = 8,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        SETPROP        = 34,\n        GETELEM        = 35,\n        SETELEM        = 36,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        BINDNAME       = 48,\n        THROW          = 49,\n        RETHROW        = 50, // rethrow caught execetion: catch (e if ) use it\n        IN             = 51,\n        INSTANCEOF     = 52,\n        LOCAL_LOAD     = 53,\n        GETVAR         = 54,\n        SETVAR         = 55,\n        CATCH_SCOPE    = 56,\n        ENUM_INIT_KEYS = 57,\n        ENUM_INIT_VALUES = 58,\n        ENUM_NEXT      = 59,\n        ENUM_ID        = 60,\n        THISFN         = 61,\n        RETURN_RESULT  = 62, // to return prevoisly stored return result\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n        GET_REF        = 65, // *reference\n        SET_REF        = 66, // *reference    = something\n        DEL_REF        = 67, // delete reference\n        REF_CALL       = 68, // f(args)    = something or f(args)++\n        REF_SPECIAL    = 69, // reference for special properties like __proto\n\n        // For XML support:\n        DEFAULTNAMESPACE = 70, // default xml namespace =\n        ESCXMLATTR     = 71,\n        ESCXMLTEXT     = 72,\n        REF_MEMBER     = 73, // Reference for x.@y, x..y etc.\n        REF_NS_MEMBER  = 74, // Reference for x.ns::y, x..ns::y etc.\n        REF_NAME       = 75, // Reference for @y, @[y] etc.\n        REF_NS_NAME    = 76; // Reference for ns::y, @ns::y@[y] etc.",
        "begin_line": 69,
        "end_line": 154,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.THROW",
        "snippet": "    public final static int\n    // start enum\n        ERROR          = -1, // well-known as the only code < EOF\n        EOF            = 0,  // end of file token - (not EOF_CHAR)\n        EOL            = 1,  // end of line\n\n        // Interpreter reuses the following as bytecodes\n        FIRST_BYTECODE_TOKEN    = 2,\n\n        ENTERWITH      = 2,\n        LEAVEWITH      = 3,\n        RETURN         = 4,\n        GOTO           = 5,\n        IFEQ           = 6,\n        IFNE           = 7,\n        SETNAME        = 8,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        SETPROP        = 34,\n        GETELEM        = 35,\n        SETELEM        = 36,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        BINDNAME       = 48,\n        THROW          = 49,\n        RETHROW        = 50, // rethrow caught execetion: catch (e if ) use it\n        IN             = 51,\n        INSTANCEOF     = 52,\n        LOCAL_LOAD     = 53,\n        GETVAR         = 54,\n        SETVAR         = 55,\n        CATCH_SCOPE    = 56,\n        ENUM_INIT_KEYS = 57,\n        ENUM_INIT_VALUES = 58,\n        ENUM_NEXT      = 59,\n        ENUM_ID        = 60,\n        THISFN         = 61,\n        RETURN_RESULT  = 62, // to return prevoisly stored return result\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n        GET_REF        = 65, // *reference\n        SET_REF        = 66, // *reference    = something\n        DEL_REF        = 67, // delete reference\n        REF_CALL       = 68, // f(args)    = something or f(args)++\n        REF_SPECIAL    = 69, // reference for special properties like __proto\n\n        // For XML support:\n        DEFAULTNAMESPACE = 70, // default xml namespace =\n        ESCXMLATTR     = 71,\n        ESCXMLTEXT     = 72,\n        REF_MEMBER     = 73, // Reference for x.@y, x..y etc.\n        REF_NS_MEMBER  = 74, // Reference for x.ns::y, x..ns::y etc.\n        REF_NAME       = 75, // Reference for @y, @[y] etc.\n        REF_NS_NAME    = 76; // Reference for ns::y, @ns::y@[y] etc.",
        "begin_line": 69,
        "end_line": 154,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.RETHROW",
        "snippet": "    public final static int\n    // start enum\n        ERROR          = -1, // well-known as the only code < EOF\n        EOF            = 0,  // end of file token - (not EOF_CHAR)\n        EOL            = 1,  // end of line\n\n        // Interpreter reuses the following as bytecodes\n        FIRST_BYTECODE_TOKEN    = 2,\n\n        ENTERWITH      = 2,\n        LEAVEWITH      = 3,\n        RETURN         = 4,\n        GOTO           = 5,\n        IFEQ           = 6,\n        IFNE           = 7,\n        SETNAME        = 8,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        SETPROP        = 34,\n        GETELEM        = 35,\n        SETELEM        = 36,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        BINDNAME       = 48,\n        THROW          = 49,\n        RETHROW        = 50, // rethrow caught execetion: catch (e if ) use it\n        IN             = 51,\n        INSTANCEOF     = 52,\n        LOCAL_LOAD     = 53,\n        GETVAR         = 54,\n        SETVAR         = 55,\n        CATCH_SCOPE    = 56,\n        ENUM_INIT_KEYS = 57,\n        ENUM_INIT_VALUES = 58,\n        ENUM_NEXT      = 59,\n        ENUM_ID        = 60,\n        THISFN         = 61,\n        RETURN_RESULT  = 62, // to return prevoisly stored return result\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n        GET_REF        = 65, // *reference\n        SET_REF        = 66, // *reference    = something\n        DEL_REF        = 67, // delete reference\n        REF_CALL       = 68, // f(args)    = something or f(args)++\n        REF_SPECIAL    = 69, // reference for special properties like __proto\n\n        // For XML support:\n        DEFAULTNAMESPACE = 70, // default xml namespace =\n        ESCXMLATTR     = 71,\n        ESCXMLTEXT     = 72,\n        REF_MEMBER     = 73, // Reference for x.@y, x..y etc.\n        REF_NS_MEMBER  = 74, // Reference for x.ns::y, x..ns::y etc.\n        REF_NAME       = 75, // Reference for @y, @[y] etc.\n        REF_NS_NAME    = 76; // Reference for ns::y, @ns::y@[y] etc.",
        "begin_line": 69,
        "end_line": 154,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.IN",
        "snippet": "    public final static int\n    // start enum\n        ERROR          = -1, // well-known as the only code < EOF\n        EOF            = 0,  // end of file token - (not EOF_CHAR)\n        EOL            = 1,  // end of line\n\n        // Interpreter reuses the following as bytecodes\n        FIRST_BYTECODE_TOKEN    = 2,\n\n        ENTERWITH      = 2,\n        LEAVEWITH      = 3,\n        RETURN         = 4,\n        GOTO           = 5,\n        IFEQ           = 6,\n        IFNE           = 7,\n        SETNAME        = 8,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        SETPROP        = 34,\n        GETELEM        = 35,\n        SETELEM        = 36,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        BINDNAME       = 48,\n        THROW          = 49,\n        RETHROW        = 50, // rethrow caught execetion: catch (e if ) use it\n        IN             = 51,\n        INSTANCEOF     = 52,\n        LOCAL_LOAD     = 53,\n        GETVAR         = 54,\n        SETVAR         = 55,\n        CATCH_SCOPE    = 56,\n        ENUM_INIT_KEYS = 57,\n        ENUM_INIT_VALUES = 58,\n        ENUM_NEXT      = 59,\n        ENUM_ID        = 60,\n        THISFN         = 61,\n        RETURN_RESULT  = 62, // to return prevoisly stored return result\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n        GET_REF        = 65, // *reference\n        SET_REF        = 66, // *reference    = something\n        DEL_REF        = 67, // delete reference\n        REF_CALL       = 68, // f(args)    = something or f(args)++\n        REF_SPECIAL    = 69, // reference for special properties like __proto\n\n        // For XML support:\n        DEFAULTNAMESPACE = 70, // default xml namespace =\n        ESCXMLATTR     = 71,\n        ESCXMLTEXT     = 72,\n        REF_MEMBER     = 73, // Reference for x.@y, x..y etc.\n        REF_NS_MEMBER  = 74, // Reference for x.ns::y, x..ns::y etc.\n        REF_NAME       = 75, // Reference for @y, @[y] etc.\n        REF_NS_NAME    = 76; // Reference for ns::y, @ns::y@[y] etc.",
        "begin_line": 69,
        "end_line": 154,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.INSTANCEOF",
        "snippet": "    public final static int\n    // start enum\n        ERROR          = -1, // well-known as the only code < EOF\n        EOF            = 0,  // end of file token - (not EOF_CHAR)\n        EOL            = 1,  // end of line\n\n        // Interpreter reuses the following as bytecodes\n        FIRST_BYTECODE_TOKEN    = 2,\n\n        ENTERWITH      = 2,\n        LEAVEWITH      = 3,\n        RETURN         = 4,\n        GOTO           = 5,\n        IFEQ           = 6,\n        IFNE           = 7,\n        SETNAME        = 8,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        SETPROP        = 34,\n        GETELEM        = 35,\n        SETELEM        = 36,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        BINDNAME       = 48,\n        THROW          = 49,\n        RETHROW        = 50, // rethrow caught execetion: catch (e if ) use it\n        IN             = 51,\n        INSTANCEOF     = 52,\n        LOCAL_LOAD     = 53,\n        GETVAR         = 54,\n        SETVAR         = 55,\n        CATCH_SCOPE    = 56,\n        ENUM_INIT_KEYS = 57,\n        ENUM_INIT_VALUES = 58,\n        ENUM_NEXT      = 59,\n        ENUM_ID        = 60,\n        THISFN         = 61,\n        RETURN_RESULT  = 62, // to return prevoisly stored return result\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n        GET_REF        = 65, // *reference\n        SET_REF        = 66, // *reference    = something\n        DEL_REF        = 67, // delete reference\n        REF_CALL       = 68, // f(args)    = something or f(args)++\n        REF_SPECIAL    = 69, // reference for special properties like __proto\n\n        // For XML support:\n        DEFAULTNAMESPACE = 70, // default xml namespace =\n        ESCXMLATTR     = 71,\n        ESCXMLTEXT     = 72,\n        REF_MEMBER     = 73, // Reference for x.@y, x..y etc.\n        REF_NS_MEMBER  = 74, // Reference for x.ns::y, x..ns::y etc.\n        REF_NAME       = 75, // Reference for @y, @[y] etc.\n        REF_NS_NAME    = 76; // Reference for ns::y, @ns::y@[y] etc.",
        "begin_line": 69,
        "end_line": 154,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.LOCAL_LOAD",
        "snippet": "    public final static int\n    // start enum\n        ERROR          = -1, // well-known as the only code < EOF\n        EOF            = 0,  // end of file token - (not EOF_CHAR)\n        EOL            = 1,  // end of line\n\n        // Interpreter reuses the following as bytecodes\n        FIRST_BYTECODE_TOKEN    = 2,\n\n        ENTERWITH      = 2,\n        LEAVEWITH      = 3,\n        RETURN         = 4,\n        GOTO           = 5,\n        IFEQ           = 6,\n        IFNE           = 7,\n        SETNAME        = 8,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        SETPROP        = 34,\n        GETELEM        = 35,\n        SETELEM        = 36,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        BINDNAME       = 48,\n        THROW          = 49,\n        RETHROW        = 50, // rethrow caught execetion: catch (e if ) use it\n        IN             = 51,\n        INSTANCEOF     = 52,\n        LOCAL_LOAD     = 53,\n        GETVAR         = 54,\n        SETVAR         = 55,\n        CATCH_SCOPE    = 56,\n        ENUM_INIT_KEYS = 57,\n        ENUM_INIT_VALUES = 58,\n        ENUM_NEXT      = 59,\n        ENUM_ID        = 60,\n        THISFN         = 61,\n        RETURN_RESULT  = 62, // to return prevoisly stored return result\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n        GET_REF        = 65, // *reference\n        SET_REF        = 66, // *reference    = something\n        DEL_REF        = 67, // delete reference\n        REF_CALL       = 68, // f(args)    = something or f(args)++\n        REF_SPECIAL    = 69, // reference for special properties like __proto\n\n        // For XML support:\n        DEFAULTNAMESPACE = 70, // default xml namespace =\n        ESCXMLATTR     = 71,\n        ESCXMLTEXT     = 72,\n        REF_MEMBER     = 73, // Reference for x.@y, x..y etc.\n        REF_NS_MEMBER  = 74, // Reference for x.ns::y, x..ns::y etc.\n        REF_NAME       = 75, // Reference for @y, @[y] etc.\n        REF_NS_NAME    = 76; // Reference for ns::y, @ns::y@[y] etc.",
        "begin_line": 69,
        "end_line": 154,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.GETVAR",
        "snippet": "    public final static int\n    // start enum\n        ERROR          = -1, // well-known as the only code < EOF\n        EOF            = 0,  // end of file token - (not EOF_CHAR)\n        EOL            = 1,  // end of line\n\n        // Interpreter reuses the following as bytecodes\n        FIRST_BYTECODE_TOKEN    = 2,\n\n        ENTERWITH      = 2,\n        LEAVEWITH      = 3,\n        RETURN         = 4,\n        GOTO           = 5,\n        IFEQ           = 6,\n        IFNE           = 7,\n        SETNAME        = 8,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        SETPROP        = 34,\n        GETELEM        = 35,\n        SETELEM        = 36,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        BINDNAME       = 48,\n        THROW          = 49,\n        RETHROW        = 50, // rethrow caught execetion: catch (e if ) use it\n        IN             = 51,\n        INSTANCEOF     = 52,\n        LOCAL_LOAD     = 53,\n        GETVAR         = 54,\n        SETVAR         = 55,\n        CATCH_SCOPE    = 56,\n        ENUM_INIT_KEYS = 57,\n        ENUM_INIT_VALUES = 58,\n        ENUM_NEXT      = 59,\n        ENUM_ID        = 60,\n        THISFN         = 61,\n        RETURN_RESULT  = 62, // to return prevoisly stored return result\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n        GET_REF        = 65, // *reference\n        SET_REF        = 66, // *reference    = something\n        DEL_REF        = 67, // delete reference\n        REF_CALL       = 68, // f(args)    = something or f(args)++\n        REF_SPECIAL    = 69, // reference for special properties like __proto\n\n        // For XML support:\n        DEFAULTNAMESPACE = 70, // default xml namespace =\n        ESCXMLATTR     = 71,\n        ESCXMLTEXT     = 72,\n        REF_MEMBER     = 73, // Reference for x.@y, x..y etc.\n        REF_NS_MEMBER  = 74, // Reference for x.ns::y, x..ns::y etc.\n        REF_NAME       = 75, // Reference for @y, @[y] etc.\n        REF_NS_NAME    = 76; // Reference for ns::y, @ns::y@[y] etc.",
        "begin_line": 69,
        "end_line": 154,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.SETVAR",
        "snippet": "    public final static int\n    // start enum\n        ERROR          = -1, // well-known as the only code < EOF\n        EOF            = 0,  // end of file token - (not EOF_CHAR)\n        EOL            = 1,  // end of line\n\n        // Interpreter reuses the following as bytecodes\n        FIRST_BYTECODE_TOKEN    = 2,\n\n        ENTERWITH      = 2,\n        LEAVEWITH      = 3,\n        RETURN         = 4,\n        GOTO           = 5,\n        IFEQ           = 6,\n        IFNE           = 7,\n        SETNAME        = 8,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        SETPROP        = 34,\n        GETELEM        = 35,\n        SETELEM        = 36,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        BINDNAME       = 48,\n        THROW          = 49,\n        RETHROW        = 50, // rethrow caught execetion: catch (e if ) use it\n        IN             = 51,\n        INSTANCEOF     = 52,\n        LOCAL_LOAD     = 53,\n        GETVAR         = 54,\n        SETVAR         = 55,\n        CATCH_SCOPE    = 56,\n        ENUM_INIT_KEYS = 57,\n        ENUM_INIT_VALUES = 58,\n        ENUM_NEXT      = 59,\n        ENUM_ID        = 60,\n        THISFN         = 61,\n        RETURN_RESULT  = 62, // to return prevoisly stored return result\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n        GET_REF        = 65, // *reference\n        SET_REF        = 66, // *reference    = something\n        DEL_REF        = 67, // delete reference\n        REF_CALL       = 68, // f(args)    = something or f(args)++\n        REF_SPECIAL    = 69, // reference for special properties like __proto\n\n        // For XML support:\n        DEFAULTNAMESPACE = 70, // default xml namespace =\n        ESCXMLATTR     = 71,\n        ESCXMLTEXT     = 72,\n        REF_MEMBER     = 73, // Reference for x.@y, x..y etc.\n        REF_NS_MEMBER  = 74, // Reference for x.ns::y, x..ns::y etc.\n        REF_NAME       = 75, // Reference for @y, @[y] etc.\n        REF_NS_NAME    = 76; // Reference for ns::y, @ns::y@[y] etc.",
        "begin_line": 69,
        "end_line": 154,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.CATCH_SCOPE",
        "snippet": "    public final static int\n    // start enum\n        ERROR          = -1, // well-known as the only code < EOF\n        EOF            = 0,  // end of file token - (not EOF_CHAR)\n        EOL            = 1,  // end of line\n\n        // Interpreter reuses the following as bytecodes\n        FIRST_BYTECODE_TOKEN    = 2,\n\n        ENTERWITH      = 2,\n        LEAVEWITH      = 3,\n        RETURN         = 4,\n        GOTO           = 5,\n        IFEQ           = 6,\n        IFNE           = 7,\n        SETNAME        = 8,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        SETPROP        = 34,\n        GETELEM        = 35,\n        SETELEM        = 36,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        BINDNAME       = 48,\n        THROW          = 49,\n        RETHROW        = 50, // rethrow caught execetion: catch (e if ) use it\n        IN             = 51,\n        INSTANCEOF     = 52,\n        LOCAL_LOAD     = 53,\n        GETVAR         = 54,\n        SETVAR         = 55,\n        CATCH_SCOPE    = 56,\n        ENUM_INIT_KEYS = 57,\n        ENUM_INIT_VALUES = 58,\n        ENUM_NEXT      = 59,\n        ENUM_ID        = 60,\n        THISFN         = 61,\n        RETURN_RESULT  = 62, // to return prevoisly stored return result\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n        GET_REF        = 65, // *reference\n        SET_REF        = 66, // *reference    = something\n        DEL_REF        = 67, // delete reference\n        REF_CALL       = 68, // f(args)    = something or f(args)++\n        REF_SPECIAL    = 69, // reference for special properties like __proto\n\n        // For XML support:\n        DEFAULTNAMESPACE = 70, // default xml namespace =\n        ESCXMLATTR     = 71,\n        ESCXMLTEXT     = 72,\n        REF_MEMBER     = 73, // Reference for x.@y, x..y etc.\n        REF_NS_MEMBER  = 74, // Reference for x.ns::y, x..ns::y etc.\n        REF_NAME       = 75, // Reference for @y, @[y] etc.\n        REF_NS_NAME    = 76; // Reference for ns::y, @ns::y@[y] etc.",
        "begin_line": 69,
        "end_line": 154,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.ENUM_INIT_KEYS",
        "snippet": "    public final static int\n    // start enum\n        ERROR          = -1, // well-known as the only code < EOF\n        EOF            = 0,  // end of file token - (not EOF_CHAR)\n        EOL            = 1,  // end of line\n\n        // Interpreter reuses the following as bytecodes\n        FIRST_BYTECODE_TOKEN    = 2,\n\n        ENTERWITH      = 2,\n        LEAVEWITH      = 3,\n        RETURN         = 4,\n        GOTO           = 5,\n        IFEQ           = 6,\n        IFNE           = 7,\n        SETNAME        = 8,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        SETPROP        = 34,\n        GETELEM        = 35,\n        SETELEM        = 36,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        BINDNAME       = 48,\n        THROW          = 49,\n        RETHROW        = 50, // rethrow caught execetion: catch (e if ) use it\n        IN             = 51,\n        INSTANCEOF     = 52,\n        LOCAL_LOAD     = 53,\n        GETVAR         = 54,\n        SETVAR         = 55,\n        CATCH_SCOPE    = 56,\n        ENUM_INIT_KEYS = 57,\n        ENUM_INIT_VALUES = 58,\n        ENUM_NEXT      = 59,\n        ENUM_ID        = 60,\n        THISFN         = 61,\n        RETURN_RESULT  = 62, // to return prevoisly stored return result\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n        GET_REF        = 65, // *reference\n        SET_REF        = 66, // *reference    = something\n        DEL_REF        = 67, // delete reference\n        REF_CALL       = 68, // f(args)    = something or f(args)++\n        REF_SPECIAL    = 69, // reference for special properties like __proto\n\n        // For XML support:\n        DEFAULTNAMESPACE = 70, // default xml namespace =\n        ESCXMLATTR     = 71,\n        ESCXMLTEXT     = 72,\n        REF_MEMBER     = 73, // Reference for x.@y, x..y etc.\n        REF_NS_MEMBER  = 74, // Reference for x.ns::y, x..ns::y etc.\n        REF_NAME       = 75, // Reference for @y, @[y] etc.\n        REF_NS_NAME    = 76; // Reference for ns::y, @ns::y@[y] etc.",
        "begin_line": 69,
        "end_line": 154,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.ENUM_INIT_VALUES",
        "snippet": "    public final static int\n    // start enum\n        ERROR          = -1, // well-known as the only code < EOF\n        EOF            = 0,  // end of file token - (not EOF_CHAR)\n        EOL            = 1,  // end of line\n\n        // Interpreter reuses the following as bytecodes\n        FIRST_BYTECODE_TOKEN    = 2,\n\n        ENTERWITH      = 2,\n        LEAVEWITH      = 3,\n        RETURN         = 4,\n        GOTO           = 5,\n        IFEQ           = 6,\n        IFNE           = 7,\n        SETNAME        = 8,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        SETPROP        = 34,\n        GETELEM        = 35,\n        SETELEM        = 36,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        BINDNAME       = 48,\n        THROW          = 49,\n        RETHROW        = 50, // rethrow caught execetion: catch (e if ) use it\n        IN             = 51,\n        INSTANCEOF     = 52,\n        LOCAL_LOAD     = 53,\n        GETVAR         = 54,\n        SETVAR         = 55,\n        CATCH_SCOPE    = 56,\n        ENUM_INIT_KEYS = 57,\n        ENUM_INIT_VALUES = 58,\n        ENUM_NEXT      = 59,\n        ENUM_ID        = 60,\n        THISFN         = 61,\n        RETURN_RESULT  = 62, // to return prevoisly stored return result\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n        GET_REF        = 65, // *reference\n        SET_REF        = 66, // *reference    = something\n        DEL_REF        = 67, // delete reference\n        REF_CALL       = 68, // f(args)    = something or f(args)++\n        REF_SPECIAL    = 69, // reference for special properties like __proto\n\n        // For XML support:\n        DEFAULTNAMESPACE = 70, // default xml namespace =\n        ESCXMLATTR     = 71,\n        ESCXMLTEXT     = 72,\n        REF_MEMBER     = 73, // Reference for x.@y, x..y etc.\n        REF_NS_MEMBER  = 74, // Reference for x.ns::y, x..ns::y etc.\n        REF_NAME       = 75, // Reference for @y, @[y] etc.\n        REF_NS_NAME    = 76; // Reference for ns::y, @ns::y@[y] etc.",
        "begin_line": 69,
        "end_line": 154,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.ENUM_NEXT",
        "snippet": "    public final static int\n    // start enum\n        ERROR          = -1, // well-known as the only code < EOF\n        EOF            = 0,  // end of file token - (not EOF_CHAR)\n        EOL            = 1,  // end of line\n\n        // Interpreter reuses the following as bytecodes\n        FIRST_BYTECODE_TOKEN    = 2,\n\n        ENTERWITH      = 2,\n        LEAVEWITH      = 3,\n        RETURN         = 4,\n        GOTO           = 5,\n        IFEQ           = 6,\n        IFNE           = 7,\n        SETNAME        = 8,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        SETPROP        = 34,\n        GETELEM        = 35,\n        SETELEM        = 36,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        BINDNAME       = 48,\n        THROW          = 49,\n        RETHROW        = 50, // rethrow caught execetion: catch (e if ) use it\n        IN             = 51,\n        INSTANCEOF     = 52,\n        LOCAL_LOAD     = 53,\n        GETVAR         = 54,\n        SETVAR         = 55,\n        CATCH_SCOPE    = 56,\n        ENUM_INIT_KEYS = 57,\n        ENUM_INIT_VALUES = 58,\n        ENUM_NEXT      = 59,\n        ENUM_ID        = 60,\n        THISFN         = 61,\n        RETURN_RESULT  = 62, // to return prevoisly stored return result\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n        GET_REF        = 65, // *reference\n        SET_REF        = 66, // *reference    = something\n        DEL_REF        = 67, // delete reference\n        REF_CALL       = 68, // f(args)    = something or f(args)++\n        REF_SPECIAL    = 69, // reference for special properties like __proto\n\n        // For XML support:\n        DEFAULTNAMESPACE = 70, // default xml namespace =\n        ESCXMLATTR     = 71,\n        ESCXMLTEXT     = 72,\n        REF_MEMBER     = 73, // Reference for x.@y, x..y etc.\n        REF_NS_MEMBER  = 74, // Reference for x.ns::y, x..ns::y etc.\n        REF_NAME       = 75, // Reference for @y, @[y] etc.\n        REF_NS_NAME    = 76; // Reference for ns::y, @ns::y@[y] etc.",
        "begin_line": 69,
        "end_line": 154,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.ENUM_ID",
        "snippet": "    public final static int\n    // start enum\n        ERROR          = -1, // well-known as the only code < EOF\n        EOF            = 0,  // end of file token - (not EOF_CHAR)\n        EOL            = 1,  // end of line\n\n        // Interpreter reuses the following as bytecodes\n        FIRST_BYTECODE_TOKEN    = 2,\n\n        ENTERWITH      = 2,\n        LEAVEWITH      = 3,\n        RETURN         = 4,\n        GOTO           = 5,\n        IFEQ           = 6,\n        IFNE           = 7,\n        SETNAME        = 8,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        SETPROP        = 34,\n        GETELEM        = 35,\n        SETELEM        = 36,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        BINDNAME       = 48,\n        THROW          = 49,\n        RETHROW        = 50, // rethrow caught execetion: catch (e if ) use it\n        IN             = 51,\n        INSTANCEOF     = 52,\n        LOCAL_LOAD     = 53,\n        GETVAR         = 54,\n        SETVAR         = 55,\n        CATCH_SCOPE    = 56,\n        ENUM_INIT_KEYS = 57,\n        ENUM_INIT_VALUES = 58,\n        ENUM_NEXT      = 59,\n        ENUM_ID        = 60,\n        THISFN         = 61,\n        RETURN_RESULT  = 62, // to return prevoisly stored return result\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n        GET_REF        = 65, // *reference\n        SET_REF        = 66, // *reference    = something\n        DEL_REF        = 67, // delete reference\n        REF_CALL       = 68, // f(args)    = something or f(args)++\n        REF_SPECIAL    = 69, // reference for special properties like __proto\n\n        // For XML support:\n        DEFAULTNAMESPACE = 70, // default xml namespace =\n        ESCXMLATTR     = 71,\n        ESCXMLTEXT     = 72,\n        REF_MEMBER     = 73, // Reference for x.@y, x..y etc.\n        REF_NS_MEMBER  = 74, // Reference for x.ns::y, x..ns::y etc.\n        REF_NAME       = 75, // Reference for @y, @[y] etc.\n        REF_NS_NAME    = 76; // Reference for ns::y, @ns::y@[y] etc.",
        "begin_line": 69,
        "end_line": 154,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.THISFN",
        "snippet": "    public final static int\n    // start enum\n        ERROR          = -1, // well-known as the only code < EOF\n        EOF            = 0,  // end of file token - (not EOF_CHAR)\n        EOL            = 1,  // end of line\n\n        // Interpreter reuses the following as bytecodes\n        FIRST_BYTECODE_TOKEN    = 2,\n\n        ENTERWITH      = 2,\n        LEAVEWITH      = 3,\n        RETURN         = 4,\n        GOTO           = 5,\n        IFEQ           = 6,\n        IFNE           = 7,\n        SETNAME        = 8,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        SETPROP        = 34,\n        GETELEM        = 35,\n        SETELEM        = 36,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        BINDNAME       = 48,\n        THROW          = 49,\n        RETHROW        = 50, // rethrow caught execetion: catch (e if ) use it\n        IN             = 51,\n        INSTANCEOF     = 52,\n        LOCAL_LOAD     = 53,\n        GETVAR         = 54,\n        SETVAR         = 55,\n        CATCH_SCOPE    = 56,\n        ENUM_INIT_KEYS = 57,\n        ENUM_INIT_VALUES = 58,\n        ENUM_NEXT      = 59,\n        ENUM_ID        = 60,\n        THISFN         = 61,\n        RETURN_RESULT  = 62, // to return prevoisly stored return result\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n        GET_REF        = 65, // *reference\n        SET_REF        = 66, // *reference    = something\n        DEL_REF        = 67, // delete reference\n        REF_CALL       = 68, // f(args)    = something or f(args)++\n        REF_SPECIAL    = 69, // reference for special properties like __proto\n\n        // For XML support:\n        DEFAULTNAMESPACE = 70, // default xml namespace =\n        ESCXMLATTR     = 71,\n        ESCXMLTEXT     = 72,\n        REF_MEMBER     = 73, // Reference for x.@y, x..y etc.\n        REF_NS_MEMBER  = 74, // Reference for x.ns::y, x..ns::y etc.\n        REF_NAME       = 75, // Reference for @y, @[y] etc.\n        REF_NS_NAME    = 76; // Reference for ns::y, @ns::y@[y] etc.",
        "begin_line": 69,
        "end_line": 154,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.RETURN_RESULT",
        "snippet": "    public final static int\n    // start enum\n        ERROR          = -1, // well-known as the only code < EOF\n        EOF            = 0,  // end of file token - (not EOF_CHAR)\n        EOL            = 1,  // end of line\n\n        // Interpreter reuses the following as bytecodes\n        FIRST_BYTECODE_TOKEN    = 2,\n\n        ENTERWITH      = 2,\n        LEAVEWITH      = 3,\n        RETURN         = 4,\n        GOTO           = 5,\n        IFEQ           = 6,\n        IFNE           = 7,\n        SETNAME        = 8,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        SETPROP        = 34,\n        GETELEM        = 35,\n        SETELEM        = 36,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        BINDNAME       = 48,\n        THROW          = 49,\n        RETHROW        = 50, // rethrow caught execetion: catch (e if ) use it\n        IN             = 51,\n        INSTANCEOF     = 52,\n        LOCAL_LOAD     = 53,\n        GETVAR         = 54,\n        SETVAR         = 55,\n        CATCH_SCOPE    = 56,\n        ENUM_INIT_KEYS = 57,\n        ENUM_INIT_VALUES = 58,\n        ENUM_NEXT      = 59,\n        ENUM_ID        = 60,\n        THISFN         = 61,\n        RETURN_RESULT  = 62, // to return prevoisly stored return result\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n        GET_REF        = 65, // *reference\n        SET_REF        = 66, // *reference    = something\n        DEL_REF        = 67, // delete reference\n        REF_CALL       = 68, // f(args)    = something or f(args)++\n        REF_SPECIAL    = 69, // reference for special properties like __proto\n\n        // For XML support:\n        DEFAULTNAMESPACE = 70, // default xml namespace =\n        ESCXMLATTR     = 71,\n        ESCXMLTEXT     = 72,\n        REF_MEMBER     = 73, // Reference for x.@y, x..y etc.\n        REF_NS_MEMBER  = 74, // Reference for x.ns::y, x..ns::y etc.\n        REF_NAME       = 75, // Reference for @y, @[y] etc.\n        REF_NS_NAME    = 76; // Reference for ns::y, @ns::y@[y] etc.",
        "begin_line": 69,
        "end_line": 154,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.ARRAYLIT",
        "snippet": "    public final static int\n    // start enum\n        ERROR          = -1, // well-known as the only code < EOF\n        EOF            = 0,  // end of file token - (not EOF_CHAR)\n        EOL            = 1,  // end of line\n\n        // Interpreter reuses the following as bytecodes\n        FIRST_BYTECODE_TOKEN    = 2,\n\n        ENTERWITH      = 2,\n        LEAVEWITH      = 3,\n        RETURN         = 4,\n        GOTO           = 5,\n        IFEQ           = 6,\n        IFNE           = 7,\n        SETNAME        = 8,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        SETPROP        = 34,\n        GETELEM        = 35,\n        SETELEM        = 36,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        BINDNAME       = 48,\n        THROW          = 49,\n        RETHROW        = 50, // rethrow caught execetion: catch (e if ) use it\n        IN             = 51,\n        INSTANCEOF     = 52,\n        LOCAL_LOAD     = 53,\n        GETVAR         = 54,\n        SETVAR         = 55,\n        CATCH_SCOPE    = 56,\n        ENUM_INIT_KEYS = 57,\n        ENUM_INIT_VALUES = 58,\n        ENUM_NEXT      = 59,\n        ENUM_ID        = 60,\n        THISFN         = 61,\n        RETURN_RESULT  = 62, // to return prevoisly stored return result\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n        GET_REF        = 65, // *reference\n        SET_REF        = 66, // *reference    = something\n        DEL_REF        = 67, // delete reference\n        REF_CALL       = 68, // f(args)    = something or f(args)++\n        REF_SPECIAL    = 69, // reference for special properties like __proto\n\n        // For XML support:\n        DEFAULTNAMESPACE = 70, // default xml namespace =\n        ESCXMLATTR     = 71,\n        ESCXMLTEXT     = 72,\n        REF_MEMBER     = 73, // Reference for x.@y, x..y etc.\n        REF_NS_MEMBER  = 74, // Reference for x.ns::y, x..ns::y etc.\n        REF_NAME       = 75, // Reference for @y, @[y] etc.\n        REF_NS_NAME    = 76; // Reference for ns::y, @ns::y@[y] etc.",
        "begin_line": 69,
        "end_line": 154,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.OBJECTLIT",
        "snippet": "    public final static int\n    // start enum\n        ERROR          = -1, // well-known as the only code < EOF\n        EOF            = 0,  // end of file token - (not EOF_CHAR)\n        EOL            = 1,  // end of line\n\n        // Interpreter reuses the following as bytecodes\n        FIRST_BYTECODE_TOKEN    = 2,\n\n        ENTERWITH      = 2,\n        LEAVEWITH      = 3,\n        RETURN         = 4,\n        GOTO           = 5,\n        IFEQ           = 6,\n        IFNE           = 7,\n        SETNAME        = 8,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        SETPROP        = 34,\n        GETELEM        = 35,\n        SETELEM        = 36,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        BINDNAME       = 48,\n        THROW          = 49,\n        RETHROW        = 50, // rethrow caught execetion: catch (e if ) use it\n        IN             = 51,\n        INSTANCEOF     = 52,\n        LOCAL_LOAD     = 53,\n        GETVAR         = 54,\n        SETVAR         = 55,\n        CATCH_SCOPE    = 56,\n        ENUM_INIT_KEYS = 57,\n        ENUM_INIT_VALUES = 58,\n        ENUM_NEXT      = 59,\n        ENUM_ID        = 60,\n        THISFN         = 61,\n        RETURN_RESULT  = 62, // to return prevoisly stored return result\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n        GET_REF        = 65, // *reference\n        SET_REF        = 66, // *reference    = something\n        DEL_REF        = 67, // delete reference\n        REF_CALL       = 68, // f(args)    = something or f(args)++\n        REF_SPECIAL    = 69, // reference for special properties like __proto\n\n        // For XML support:\n        DEFAULTNAMESPACE = 70, // default xml namespace =\n        ESCXMLATTR     = 71,\n        ESCXMLTEXT     = 72,\n        REF_MEMBER     = 73, // Reference for x.@y, x..y etc.\n        REF_NS_MEMBER  = 74, // Reference for x.ns::y, x..ns::y etc.\n        REF_NAME       = 75, // Reference for @y, @[y] etc.\n        REF_NS_NAME    = 76; // Reference for ns::y, @ns::y@[y] etc.",
        "begin_line": 69,
        "end_line": 154,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.GET_REF",
        "snippet": "    public final static int\n    // start enum\n        ERROR          = -1, // well-known as the only code < EOF\n        EOF            = 0,  // end of file token - (not EOF_CHAR)\n        EOL            = 1,  // end of line\n\n        // Interpreter reuses the following as bytecodes\n        FIRST_BYTECODE_TOKEN    = 2,\n\n        ENTERWITH      = 2,\n        LEAVEWITH      = 3,\n        RETURN         = 4,\n        GOTO           = 5,\n        IFEQ           = 6,\n        IFNE           = 7,\n        SETNAME        = 8,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        SETPROP        = 34,\n        GETELEM        = 35,\n        SETELEM        = 36,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        BINDNAME       = 48,\n        THROW          = 49,\n        RETHROW        = 50, // rethrow caught execetion: catch (e if ) use it\n        IN             = 51,\n        INSTANCEOF     = 52,\n        LOCAL_LOAD     = 53,\n        GETVAR         = 54,\n        SETVAR         = 55,\n        CATCH_SCOPE    = 56,\n        ENUM_INIT_KEYS = 57,\n        ENUM_INIT_VALUES = 58,\n        ENUM_NEXT      = 59,\n        ENUM_ID        = 60,\n        THISFN         = 61,\n        RETURN_RESULT  = 62, // to return prevoisly stored return result\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n        GET_REF        = 65, // *reference\n        SET_REF        = 66, // *reference    = something\n        DEL_REF        = 67, // delete reference\n        REF_CALL       = 68, // f(args)    = something or f(args)++\n        REF_SPECIAL    = 69, // reference for special properties like __proto\n\n        // For XML support:\n        DEFAULTNAMESPACE = 70, // default xml namespace =\n        ESCXMLATTR     = 71,\n        ESCXMLTEXT     = 72,\n        REF_MEMBER     = 73, // Reference for x.@y, x..y etc.\n        REF_NS_MEMBER  = 74, // Reference for x.ns::y, x..ns::y etc.\n        REF_NAME       = 75, // Reference for @y, @[y] etc.\n        REF_NS_NAME    = 76; // Reference for ns::y, @ns::y@[y] etc.",
        "begin_line": 69,
        "end_line": 154,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.SET_REF",
        "snippet": "    public final static int\n    // start enum\n        ERROR          = -1, // well-known as the only code < EOF\n        EOF            = 0,  // end of file token - (not EOF_CHAR)\n        EOL            = 1,  // end of line\n\n        // Interpreter reuses the following as bytecodes\n        FIRST_BYTECODE_TOKEN    = 2,\n\n        ENTERWITH      = 2,\n        LEAVEWITH      = 3,\n        RETURN         = 4,\n        GOTO           = 5,\n        IFEQ           = 6,\n        IFNE           = 7,\n        SETNAME        = 8,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        SETPROP        = 34,\n        GETELEM        = 35,\n        SETELEM        = 36,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        BINDNAME       = 48,\n        THROW          = 49,\n        RETHROW        = 50, // rethrow caught execetion: catch (e if ) use it\n        IN             = 51,\n        INSTANCEOF     = 52,\n        LOCAL_LOAD     = 53,\n        GETVAR         = 54,\n        SETVAR         = 55,\n        CATCH_SCOPE    = 56,\n        ENUM_INIT_KEYS = 57,\n        ENUM_INIT_VALUES = 58,\n        ENUM_NEXT      = 59,\n        ENUM_ID        = 60,\n        THISFN         = 61,\n        RETURN_RESULT  = 62, // to return prevoisly stored return result\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n        GET_REF        = 65, // *reference\n        SET_REF        = 66, // *reference    = something\n        DEL_REF        = 67, // delete reference\n        REF_CALL       = 68, // f(args)    = something or f(args)++\n        REF_SPECIAL    = 69, // reference for special properties like __proto\n\n        // For XML support:\n        DEFAULTNAMESPACE = 70, // default xml namespace =\n        ESCXMLATTR     = 71,\n        ESCXMLTEXT     = 72,\n        REF_MEMBER     = 73, // Reference for x.@y, x..y etc.\n        REF_NS_MEMBER  = 74, // Reference for x.ns::y, x..ns::y etc.\n        REF_NAME       = 75, // Reference for @y, @[y] etc.\n        REF_NS_NAME    = 76; // Reference for ns::y, @ns::y@[y] etc.",
        "begin_line": 69,
        "end_line": 154,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.DEL_REF",
        "snippet": "    public final static int\n    // start enum\n        ERROR          = -1, // well-known as the only code < EOF\n        EOF            = 0,  // end of file token - (not EOF_CHAR)\n        EOL            = 1,  // end of line\n\n        // Interpreter reuses the following as bytecodes\n        FIRST_BYTECODE_TOKEN    = 2,\n\n        ENTERWITH      = 2,\n        LEAVEWITH      = 3,\n        RETURN         = 4,\n        GOTO           = 5,\n        IFEQ           = 6,\n        IFNE           = 7,\n        SETNAME        = 8,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        SETPROP        = 34,\n        GETELEM        = 35,\n        SETELEM        = 36,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        BINDNAME       = 48,\n        THROW          = 49,\n        RETHROW        = 50, // rethrow caught execetion: catch (e if ) use it\n        IN             = 51,\n        INSTANCEOF     = 52,\n        LOCAL_LOAD     = 53,\n        GETVAR         = 54,\n        SETVAR         = 55,\n        CATCH_SCOPE    = 56,\n        ENUM_INIT_KEYS = 57,\n        ENUM_INIT_VALUES = 58,\n        ENUM_NEXT      = 59,\n        ENUM_ID        = 60,\n        THISFN         = 61,\n        RETURN_RESULT  = 62, // to return prevoisly stored return result\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n        GET_REF        = 65, // *reference\n        SET_REF        = 66, // *reference    = something\n        DEL_REF        = 67, // delete reference\n        REF_CALL       = 68, // f(args)    = something or f(args)++\n        REF_SPECIAL    = 69, // reference for special properties like __proto\n\n        // For XML support:\n        DEFAULTNAMESPACE = 70, // default xml namespace =\n        ESCXMLATTR     = 71,\n        ESCXMLTEXT     = 72,\n        REF_MEMBER     = 73, // Reference for x.@y, x..y etc.\n        REF_NS_MEMBER  = 74, // Reference for x.ns::y, x..ns::y etc.\n        REF_NAME       = 75, // Reference for @y, @[y] etc.\n        REF_NS_NAME    = 76; // Reference for ns::y, @ns::y@[y] etc.",
        "begin_line": 69,
        "end_line": 154,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.REF_CALL",
        "snippet": "    public final static int\n    // start enum\n        ERROR          = -1, // well-known as the only code < EOF\n        EOF            = 0,  // end of file token - (not EOF_CHAR)\n        EOL            = 1,  // end of line\n\n        // Interpreter reuses the following as bytecodes\n        FIRST_BYTECODE_TOKEN    = 2,\n\n        ENTERWITH      = 2,\n        LEAVEWITH      = 3,\n        RETURN         = 4,\n        GOTO           = 5,\n        IFEQ           = 6,\n        IFNE           = 7,\n        SETNAME        = 8,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        SETPROP        = 34,\n        GETELEM        = 35,\n        SETELEM        = 36,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        BINDNAME       = 48,\n        THROW          = 49,\n        RETHROW        = 50, // rethrow caught execetion: catch (e if ) use it\n        IN             = 51,\n        INSTANCEOF     = 52,\n        LOCAL_LOAD     = 53,\n        GETVAR         = 54,\n        SETVAR         = 55,\n        CATCH_SCOPE    = 56,\n        ENUM_INIT_KEYS = 57,\n        ENUM_INIT_VALUES = 58,\n        ENUM_NEXT      = 59,\n        ENUM_ID        = 60,\n        THISFN         = 61,\n        RETURN_RESULT  = 62, // to return prevoisly stored return result\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n        GET_REF        = 65, // *reference\n        SET_REF        = 66, // *reference    = something\n        DEL_REF        = 67, // delete reference\n        REF_CALL       = 68, // f(args)    = something or f(args)++\n        REF_SPECIAL    = 69, // reference for special properties like __proto\n\n        // For XML support:\n        DEFAULTNAMESPACE = 70, // default xml namespace =\n        ESCXMLATTR     = 71,\n        ESCXMLTEXT     = 72,\n        REF_MEMBER     = 73, // Reference for x.@y, x..y etc.\n        REF_NS_MEMBER  = 74, // Reference for x.ns::y, x..ns::y etc.\n        REF_NAME       = 75, // Reference for @y, @[y] etc.\n        REF_NS_NAME    = 76; // Reference for ns::y, @ns::y@[y] etc.",
        "begin_line": 69,
        "end_line": 154,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.REF_SPECIAL",
        "snippet": "    public final static int\n    // start enum\n        ERROR          = -1, // well-known as the only code < EOF\n        EOF            = 0,  // end of file token - (not EOF_CHAR)\n        EOL            = 1,  // end of line\n\n        // Interpreter reuses the following as bytecodes\n        FIRST_BYTECODE_TOKEN    = 2,\n\n        ENTERWITH      = 2,\n        LEAVEWITH      = 3,\n        RETURN         = 4,\n        GOTO           = 5,\n        IFEQ           = 6,\n        IFNE           = 7,\n        SETNAME        = 8,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        SETPROP        = 34,\n        GETELEM        = 35,\n        SETELEM        = 36,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        BINDNAME       = 48,\n        THROW          = 49,\n        RETHROW        = 50, // rethrow caught execetion: catch (e if ) use it\n        IN             = 51,\n        INSTANCEOF     = 52,\n        LOCAL_LOAD     = 53,\n        GETVAR         = 54,\n        SETVAR         = 55,\n        CATCH_SCOPE    = 56,\n        ENUM_INIT_KEYS = 57,\n        ENUM_INIT_VALUES = 58,\n        ENUM_NEXT      = 59,\n        ENUM_ID        = 60,\n        THISFN         = 61,\n        RETURN_RESULT  = 62, // to return prevoisly stored return result\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n        GET_REF        = 65, // *reference\n        SET_REF        = 66, // *reference    = something\n        DEL_REF        = 67, // delete reference\n        REF_CALL       = 68, // f(args)    = something or f(args)++\n        REF_SPECIAL    = 69, // reference for special properties like __proto\n\n        // For XML support:\n        DEFAULTNAMESPACE = 70, // default xml namespace =\n        ESCXMLATTR     = 71,\n        ESCXMLTEXT     = 72,\n        REF_MEMBER     = 73, // Reference for x.@y, x..y etc.\n        REF_NS_MEMBER  = 74, // Reference for x.ns::y, x..ns::y etc.\n        REF_NAME       = 75, // Reference for @y, @[y] etc.\n        REF_NS_NAME    = 76; // Reference for ns::y, @ns::y@[y] etc.",
        "begin_line": 69,
        "end_line": 154,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.DEFAULTNAMESPACE",
        "snippet": "    public final static int\n    // start enum\n        ERROR          = -1, // well-known as the only code < EOF\n        EOF            = 0,  // end of file token - (not EOF_CHAR)\n        EOL            = 1,  // end of line\n\n        // Interpreter reuses the following as bytecodes\n        FIRST_BYTECODE_TOKEN    = 2,\n\n        ENTERWITH      = 2,\n        LEAVEWITH      = 3,\n        RETURN         = 4,\n        GOTO           = 5,\n        IFEQ           = 6,\n        IFNE           = 7,\n        SETNAME        = 8,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        SETPROP        = 34,\n        GETELEM        = 35,\n        SETELEM        = 36,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        BINDNAME       = 48,\n        THROW          = 49,\n        RETHROW        = 50, // rethrow caught execetion: catch (e if ) use it\n        IN             = 51,\n        INSTANCEOF     = 52,\n        LOCAL_LOAD     = 53,\n        GETVAR         = 54,\n        SETVAR         = 55,\n        CATCH_SCOPE    = 56,\n        ENUM_INIT_KEYS = 57,\n        ENUM_INIT_VALUES = 58,\n        ENUM_NEXT      = 59,\n        ENUM_ID        = 60,\n        THISFN         = 61,\n        RETURN_RESULT  = 62, // to return prevoisly stored return result\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n        GET_REF        = 65, // *reference\n        SET_REF        = 66, // *reference    = something\n        DEL_REF        = 67, // delete reference\n        REF_CALL       = 68, // f(args)    = something or f(args)++\n        REF_SPECIAL    = 69, // reference for special properties like __proto\n\n        // For XML support:\n        DEFAULTNAMESPACE = 70, // default xml namespace =\n        ESCXMLATTR     = 71,\n        ESCXMLTEXT     = 72,\n        REF_MEMBER     = 73, // Reference for x.@y, x..y etc.\n        REF_NS_MEMBER  = 74, // Reference for x.ns::y, x..ns::y etc.\n        REF_NAME       = 75, // Reference for @y, @[y] etc.\n        REF_NS_NAME    = 76; // Reference for ns::y, @ns::y@[y] etc.",
        "begin_line": 69,
        "end_line": 154,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.ESCXMLATTR",
        "snippet": "    public final static int\n    // start enum\n        ERROR          = -1, // well-known as the only code < EOF\n        EOF            = 0,  // end of file token - (not EOF_CHAR)\n        EOL            = 1,  // end of line\n\n        // Interpreter reuses the following as bytecodes\n        FIRST_BYTECODE_TOKEN    = 2,\n\n        ENTERWITH      = 2,\n        LEAVEWITH      = 3,\n        RETURN         = 4,\n        GOTO           = 5,\n        IFEQ           = 6,\n        IFNE           = 7,\n        SETNAME        = 8,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        SETPROP        = 34,\n        GETELEM        = 35,\n        SETELEM        = 36,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        BINDNAME       = 48,\n        THROW          = 49,\n        RETHROW        = 50, // rethrow caught execetion: catch (e if ) use it\n        IN             = 51,\n        INSTANCEOF     = 52,\n        LOCAL_LOAD     = 53,\n        GETVAR         = 54,\n        SETVAR         = 55,\n        CATCH_SCOPE    = 56,\n        ENUM_INIT_KEYS = 57,\n        ENUM_INIT_VALUES = 58,\n        ENUM_NEXT      = 59,\n        ENUM_ID        = 60,\n        THISFN         = 61,\n        RETURN_RESULT  = 62, // to return prevoisly stored return result\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n        GET_REF        = 65, // *reference\n        SET_REF        = 66, // *reference    = something\n        DEL_REF        = 67, // delete reference\n        REF_CALL       = 68, // f(args)    = something or f(args)++\n        REF_SPECIAL    = 69, // reference for special properties like __proto\n\n        // For XML support:\n        DEFAULTNAMESPACE = 70, // default xml namespace =\n        ESCXMLATTR     = 71,\n        ESCXMLTEXT     = 72,\n        REF_MEMBER     = 73, // Reference for x.@y, x..y etc.\n        REF_NS_MEMBER  = 74, // Reference for x.ns::y, x..ns::y etc.\n        REF_NAME       = 75, // Reference for @y, @[y] etc.\n        REF_NS_NAME    = 76; // Reference for ns::y, @ns::y@[y] etc.",
        "begin_line": 69,
        "end_line": 154,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.ESCXMLTEXT",
        "snippet": "    public final static int\n    // start enum\n        ERROR          = -1, // well-known as the only code < EOF\n        EOF            = 0,  // end of file token - (not EOF_CHAR)\n        EOL            = 1,  // end of line\n\n        // Interpreter reuses the following as bytecodes\n        FIRST_BYTECODE_TOKEN    = 2,\n\n        ENTERWITH      = 2,\n        LEAVEWITH      = 3,\n        RETURN         = 4,\n        GOTO           = 5,\n        IFEQ           = 6,\n        IFNE           = 7,\n        SETNAME        = 8,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        SETPROP        = 34,\n        GETELEM        = 35,\n        SETELEM        = 36,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        BINDNAME       = 48,\n        THROW          = 49,\n        RETHROW        = 50, // rethrow caught execetion: catch (e if ) use it\n        IN             = 51,\n        INSTANCEOF     = 52,\n        LOCAL_LOAD     = 53,\n        GETVAR         = 54,\n        SETVAR         = 55,\n        CATCH_SCOPE    = 56,\n        ENUM_INIT_KEYS = 57,\n        ENUM_INIT_VALUES = 58,\n        ENUM_NEXT      = 59,\n        ENUM_ID        = 60,\n        THISFN         = 61,\n        RETURN_RESULT  = 62, // to return prevoisly stored return result\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n        GET_REF        = 65, // *reference\n        SET_REF        = 66, // *reference    = something\n        DEL_REF        = 67, // delete reference\n        REF_CALL       = 68, // f(args)    = something or f(args)++\n        REF_SPECIAL    = 69, // reference for special properties like __proto\n\n        // For XML support:\n        DEFAULTNAMESPACE = 70, // default xml namespace =\n        ESCXMLATTR     = 71,\n        ESCXMLTEXT     = 72,\n        REF_MEMBER     = 73, // Reference for x.@y, x..y etc.\n        REF_NS_MEMBER  = 74, // Reference for x.ns::y, x..ns::y etc.\n        REF_NAME       = 75, // Reference for @y, @[y] etc.\n        REF_NS_NAME    = 76; // Reference for ns::y, @ns::y@[y] etc.",
        "begin_line": 69,
        "end_line": 154,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.REF_MEMBER",
        "snippet": "    public final static int\n    // start enum\n        ERROR          = -1, // well-known as the only code < EOF\n        EOF            = 0,  // end of file token - (not EOF_CHAR)\n        EOL            = 1,  // end of line\n\n        // Interpreter reuses the following as bytecodes\n        FIRST_BYTECODE_TOKEN    = 2,\n\n        ENTERWITH      = 2,\n        LEAVEWITH      = 3,\n        RETURN         = 4,\n        GOTO           = 5,\n        IFEQ           = 6,\n        IFNE           = 7,\n        SETNAME        = 8,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        SETPROP        = 34,\n        GETELEM        = 35,\n        SETELEM        = 36,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        BINDNAME       = 48,\n        THROW          = 49,\n        RETHROW        = 50, // rethrow caught execetion: catch (e if ) use it\n        IN             = 51,\n        INSTANCEOF     = 52,\n        LOCAL_LOAD     = 53,\n        GETVAR         = 54,\n        SETVAR         = 55,\n        CATCH_SCOPE    = 56,\n        ENUM_INIT_KEYS = 57,\n        ENUM_INIT_VALUES = 58,\n        ENUM_NEXT      = 59,\n        ENUM_ID        = 60,\n        THISFN         = 61,\n        RETURN_RESULT  = 62, // to return prevoisly stored return result\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n        GET_REF        = 65, // *reference\n        SET_REF        = 66, // *reference    = something\n        DEL_REF        = 67, // delete reference\n        REF_CALL       = 68, // f(args)    = something or f(args)++\n        REF_SPECIAL    = 69, // reference for special properties like __proto\n\n        // For XML support:\n        DEFAULTNAMESPACE = 70, // default xml namespace =\n        ESCXMLATTR     = 71,\n        ESCXMLTEXT     = 72,\n        REF_MEMBER     = 73, // Reference for x.@y, x..y etc.\n        REF_NS_MEMBER  = 74, // Reference for x.ns::y, x..ns::y etc.\n        REF_NAME       = 75, // Reference for @y, @[y] etc.\n        REF_NS_NAME    = 76; // Reference for ns::y, @ns::y@[y] etc.",
        "begin_line": 69,
        "end_line": 154,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.REF_NS_MEMBER",
        "snippet": "    public final static int\n    // start enum\n        ERROR          = -1, // well-known as the only code < EOF\n        EOF            = 0,  // end of file token - (not EOF_CHAR)\n        EOL            = 1,  // end of line\n\n        // Interpreter reuses the following as bytecodes\n        FIRST_BYTECODE_TOKEN    = 2,\n\n        ENTERWITH      = 2,\n        LEAVEWITH      = 3,\n        RETURN         = 4,\n        GOTO           = 5,\n        IFEQ           = 6,\n        IFNE           = 7,\n        SETNAME        = 8,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        SETPROP        = 34,\n        GETELEM        = 35,\n        SETELEM        = 36,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        BINDNAME       = 48,\n        THROW          = 49,\n        RETHROW        = 50, // rethrow caught execetion: catch (e if ) use it\n        IN             = 51,\n        INSTANCEOF     = 52,\n        LOCAL_LOAD     = 53,\n        GETVAR         = 54,\n        SETVAR         = 55,\n        CATCH_SCOPE    = 56,\n        ENUM_INIT_KEYS = 57,\n        ENUM_INIT_VALUES = 58,\n        ENUM_NEXT      = 59,\n        ENUM_ID        = 60,\n        THISFN         = 61,\n        RETURN_RESULT  = 62, // to return prevoisly stored return result\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n        GET_REF        = 65, // *reference\n        SET_REF        = 66, // *reference    = something\n        DEL_REF        = 67, // delete reference\n        REF_CALL       = 68, // f(args)    = something or f(args)++\n        REF_SPECIAL    = 69, // reference for special properties like __proto\n\n        // For XML support:\n        DEFAULTNAMESPACE = 70, // default xml namespace =\n        ESCXMLATTR     = 71,\n        ESCXMLTEXT     = 72,\n        REF_MEMBER     = 73, // Reference for x.@y, x..y etc.\n        REF_NS_MEMBER  = 74, // Reference for x.ns::y, x..ns::y etc.\n        REF_NAME       = 75, // Reference for @y, @[y] etc.\n        REF_NS_NAME    = 76; // Reference for ns::y, @ns::y@[y] etc.",
        "begin_line": 69,
        "end_line": 154,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.REF_NAME",
        "snippet": "    public final static int\n    // start enum\n        ERROR          = -1, // well-known as the only code < EOF\n        EOF            = 0,  // end of file token - (not EOF_CHAR)\n        EOL            = 1,  // end of line\n\n        // Interpreter reuses the following as bytecodes\n        FIRST_BYTECODE_TOKEN    = 2,\n\n        ENTERWITH      = 2,\n        LEAVEWITH      = 3,\n        RETURN         = 4,\n        GOTO           = 5,\n        IFEQ           = 6,\n        IFNE           = 7,\n        SETNAME        = 8,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        SETPROP        = 34,\n        GETELEM        = 35,\n        SETELEM        = 36,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        BINDNAME       = 48,\n        THROW          = 49,\n        RETHROW        = 50, // rethrow caught execetion: catch (e if ) use it\n        IN             = 51,\n        INSTANCEOF     = 52,\n        LOCAL_LOAD     = 53,\n        GETVAR         = 54,\n        SETVAR         = 55,\n        CATCH_SCOPE    = 56,\n        ENUM_INIT_KEYS = 57,\n        ENUM_INIT_VALUES = 58,\n        ENUM_NEXT      = 59,\n        ENUM_ID        = 60,\n        THISFN         = 61,\n        RETURN_RESULT  = 62, // to return prevoisly stored return result\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n        GET_REF        = 65, // *reference\n        SET_REF        = 66, // *reference    = something\n        DEL_REF        = 67, // delete reference\n        REF_CALL       = 68, // f(args)    = something or f(args)++\n        REF_SPECIAL    = 69, // reference for special properties like __proto\n\n        // For XML support:\n        DEFAULTNAMESPACE = 70, // default xml namespace =\n        ESCXMLATTR     = 71,\n        ESCXMLTEXT     = 72,\n        REF_MEMBER     = 73, // Reference for x.@y, x..y etc.\n        REF_NS_MEMBER  = 74, // Reference for x.ns::y, x..ns::y etc.\n        REF_NAME       = 75, // Reference for @y, @[y] etc.\n        REF_NS_NAME    = 76; // Reference for ns::y, @ns::y@[y] etc.",
        "begin_line": 69,
        "end_line": 154,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.REF_NS_NAME",
        "snippet": "    public final static int\n    // start enum\n        ERROR          = -1, // well-known as the only code < EOF\n        EOF            = 0,  // end of file token - (not EOF_CHAR)\n        EOL            = 1,  // end of line\n\n        // Interpreter reuses the following as bytecodes\n        FIRST_BYTECODE_TOKEN    = 2,\n\n        ENTERWITH      = 2,\n        LEAVEWITH      = 3,\n        RETURN         = 4,\n        GOTO           = 5,\n        IFEQ           = 6,\n        IFNE           = 7,\n        SETNAME        = 8,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        SETPROP        = 34,\n        GETELEM        = 35,\n        SETELEM        = 36,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        BINDNAME       = 48,\n        THROW          = 49,\n        RETHROW        = 50, // rethrow caught execetion: catch (e if ) use it\n        IN             = 51,\n        INSTANCEOF     = 52,\n        LOCAL_LOAD     = 53,\n        GETVAR         = 54,\n        SETVAR         = 55,\n        CATCH_SCOPE    = 56,\n        ENUM_INIT_KEYS = 57,\n        ENUM_INIT_VALUES = 58,\n        ENUM_NEXT      = 59,\n        ENUM_ID        = 60,\n        THISFN         = 61,\n        RETURN_RESULT  = 62, // to return prevoisly stored return result\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n        GET_REF        = 65, // *reference\n        SET_REF        = 66, // *reference    = something\n        DEL_REF        = 67, // delete reference\n        REF_CALL       = 68, // f(args)    = something or f(args)++\n        REF_SPECIAL    = 69, // reference for special properties like __proto\n\n        // For XML support:\n        DEFAULTNAMESPACE = 70, // default xml namespace =\n        ESCXMLATTR     = 71,\n        ESCXMLTEXT     = 72,\n        REF_MEMBER     = 73, // Reference for x.@y, x..y etc.\n        REF_NS_MEMBER  = 74, // Reference for x.ns::y, x..ns::y etc.\n        REF_NAME       = 75, // Reference for @y, @[y] etc.\n        REF_NS_NAME    = 76; // Reference for ns::y, @ns::y@[y] etc.",
        "begin_line": 69,
        "end_line": 154,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.LAST_BYTECODE_TOKEN",
        "snippet": "    public final static int\n        LAST_BYTECODE_TOKEN    = REF_NS_NAME,\n\n        TRY            = 77,\n        SEMI           = 78,  // semicolon\n        LB             = 79,  // left and right brackets\n        RB             = 80,\n        LC             = 81,  // left and right curlies (braces)\n        RC             = 82,\n        LP             = 83,  // left and right parentheses\n        RP             = 84,\n        COMMA          = 85,  // comma operator\n\n        ASSIGN         = 86,  // simple assignment  (=)\n        ASSIGN_BITOR   = 87,  // |=\n        ASSIGN_BITXOR  = 88,  // ^=\n        ASSIGN_BITAND  = 89,  // |=\n        ASSIGN_LSH     = 90,  // <<=\n        ASSIGN_RSH     = 91,  // >>=\n        ASSIGN_URSH    = 92,  // >>>=\n        ASSIGN_ADD     = 93,  // +=\n        ASSIGN_SUB     = 94,  // -=\n        ASSIGN_MUL     = 95,  // *=\n        ASSIGN_DIV     = 96,  // /=\n        ASSIGN_MOD     = 97;  // %=",
        "begin_line": 157,
        "end_line": 181,
        "comment": " End of interpreter bytecodes"
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.TRY",
        "snippet": "    public final static int\n        LAST_BYTECODE_TOKEN    = REF_NS_NAME,\n\n        TRY            = 77,\n        SEMI           = 78,  // semicolon\n        LB             = 79,  // left and right brackets\n        RB             = 80,\n        LC             = 81,  // left and right curlies (braces)\n        RC             = 82,\n        LP             = 83,  // left and right parentheses\n        RP             = 84,\n        COMMA          = 85,  // comma operator\n\n        ASSIGN         = 86,  // simple assignment  (=)\n        ASSIGN_BITOR   = 87,  // |=\n        ASSIGN_BITXOR  = 88,  // ^=\n        ASSIGN_BITAND  = 89,  // |=\n        ASSIGN_LSH     = 90,  // <<=\n        ASSIGN_RSH     = 91,  // >>=\n        ASSIGN_URSH    = 92,  // >>>=\n        ASSIGN_ADD     = 93,  // +=\n        ASSIGN_SUB     = 94,  // -=\n        ASSIGN_MUL     = 95,  // *=\n        ASSIGN_DIV     = 96,  // /=\n        ASSIGN_MOD     = 97;  // %=",
        "begin_line": 157,
        "end_line": 181,
        "comment": " End of interpreter bytecodes"
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.SEMI",
        "snippet": "    public final static int\n        LAST_BYTECODE_TOKEN    = REF_NS_NAME,\n\n        TRY            = 77,\n        SEMI           = 78,  // semicolon\n        LB             = 79,  // left and right brackets\n        RB             = 80,\n        LC             = 81,  // left and right curlies (braces)\n        RC             = 82,\n        LP             = 83,  // left and right parentheses\n        RP             = 84,\n        COMMA          = 85,  // comma operator\n\n        ASSIGN         = 86,  // simple assignment  (=)\n        ASSIGN_BITOR   = 87,  // |=\n        ASSIGN_BITXOR  = 88,  // ^=\n        ASSIGN_BITAND  = 89,  // |=\n        ASSIGN_LSH     = 90,  // <<=\n        ASSIGN_RSH     = 91,  // >>=\n        ASSIGN_URSH    = 92,  // >>>=\n        ASSIGN_ADD     = 93,  // +=\n        ASSIGN_SUB     = 94,  // -=\n        ASSIGN_MUL     = 95,  // *=\n        ASSIGN_DIV     = 96,  // /=\n        ASSIGN_MOD     = 97;  // %=",
        "begin_line": 157,
        "end_line": 181,
        "comment": " End of interpreter bytecodes"
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.LB",
        "snippet": "    public final static int\n        LAST_BYTECODE_TOKEN    = REF_NS_NAME,\n\n        TRY            = 77,\n        SEMI           = 78,  // semicolon\n        LB             = 79,  // left and right brackets\n        RB             = 80,\n        LC             = 81,  // left and right curlies (braces)\n        RC             = 82,\n        LP             = 83,  // left and right parentheses\n        RP             = 84,\n        COMMA          = 85,  // comma operator\n\n        ASSIGN         = 86,  // simple assignment  (=)\n        ASSIGN_BITOR   = 87,  // |=\n        ASSIGN_BITXOR  = 88,  // ^=\n        ASSIGN_BITAND  = 89,  // |=\n        ASSIGN_LSH     = 90,  // <<=\n        ASSIGN_RSH     = 91,  // >>=\n        ASSIGN_URSH    = 92,  // >>>=\n        ASSIGN_ADD     = 93,  // +=\n        ASSIGN_SUB     = 94,  // -=\n        ASSIGN_MUL     = 95,  // *=\n        ASSIGN_DIV     = 96,  // /=\n        ASSIGN_MOD     = 97;  // %=",
        "begin_line": 157,
        "end_line": 181,
        "comment": " End of interpreter bytecodes"
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.RB",
        "snippet": "    public final static int\n        LAST_BYTECODE_TOKEN    = REF_NS_NAME,\n\n        TRY            = 77,\n        SEMI           = 78,  // semicolon\n        LB             = 79,  // left and right brackets\n        RB             = 80,\n        LC             = 81,  // left and right curlies (braces)\n        RC             = 82,\n        LP             = 83,  // left and right parentheses\n        RP             = 84,\n        COMMA          = 85,  // comma operator\n\n        ASSIGN         = 86,  // simple assignment  (=)\n        ASSIGN_BITOR   = 87,  // |=\n        ASSIGN_BITXOR  = 88,  // ^=\n        ASSIGN_BITAND  = 89,  // |=\n        ASSIGN_LSH     = 90,  // <<=\n        ASSIGN_RSH     = 91,  // >>=\n        ASSIGN_URSH    = 92,  // >>>=\n        ASSIGN_ADD     = 93,  // +=\n        ASSIGN_SUB     = 94,  // -=\n        ASSIGN_MUL     = 95,  // *=\n        ASSIGN_DIV     = 96,  // /=\n        ASSIGN_MOD     = 97;  // %=",
        "begin_line": 157,
        "end_line": 181,
        "comment": " End of interpreter bytecodes"
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.LC",
        "snippet": "    public final static int\n        LAST_BYTECODE_TOKEN    = REF_NS_NAME,\n\n        TRY            = 77,\n        SEMI           = 78,  // semicolon\n        LB             = 79,  // left and right brackets\n        RB             = 80,\n        LC             = 81,  // left and right curlies (braces)\n        RC             = 82,\n        LP             = 83,  // left and right parentheses\n        RP             = 84,\n        COMMA          = 85,  // comma operator\n\n        ASSIGN         = 86,  // simple assignment  (=)\n        ASSIGN_BITOR   = 87,  // |=\n        ASSIGN_BITXOR  = 88,  // ^=\n        ASSIGN_BITAND  = 89,  // |=\n        ASSIGN_LSH     = 90,  // <<=\n        ASSIGN_RSH     = 91,  // >>=\n        ASSIGN_URSH    = 92,  // >>>=\n        ASSIGN_ADD     = 93,  // +=\n        ASSIGN_SUB     = 94,  // -=\n        ASSIGN_MUL     = 95,  // *=\n        ASSIGN_DIV     = 96,  // /=\n        ASSIGN_MOD     = 97;  // %=",
        "begin_line": 157,
        "end_line": 181,
        "comment": " End of interpreter bytecodes"
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.RC",
        "snippet": "    public final static int\n        LAST_BYTECODE_TOKEN    = REF_NS_NAME,\n\n        TRY            = 77,\n        SEMI           = 78,  // semicolon\n        LB             = 79,  // left and right brackets\n        RB             = 80,\n        LC             = 81,  // left and right curlies (braces)\n        RC             = 82,\n        LP             = 83,  // left and right parentheses\n        RP             = 84,\n        COMMA          = 85,  // comma operator\n\n        ASSIGN         = 86,  // simple assignment  (=)\n        ASSIGN_BITOR   = 87,  // |=\n        ASSIGN_BITXOR  = 88,  // ^=\n        ASSIGN_BITAND  = 89,  // |=\n        ASSIGN_LSH     = 90,  // <<=\n        ASSIGN_RSH     = 91,  // >>=\n        ASSIGN_URSH    = 92,  // >>>=\n        ASSIGN_ADD     = 93,  // +=\n        ASSIGN_SUB     = 94,  // -=\n        ASSIGN_MUL     = 95,  // *=\n        ASSIGN_DIV     = 96,  // /=\n        ASSIGN_MOD     = 97;  // %=",
        "begin_line": 157,
        "end_line": 181,
        "comment": " End of interpreter bytecodes"
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.LP",
        "snippet": "    public final static int\n        LAST_BYTECODE_TOKEN    = REF_NS_NAME,\n\n        TRY            = 77,\n        SEMI           = 78,  // semicolon\n        LB             = 79,  // left and right brackets\n        RB             = 80,\n        LC             = 81,  // left and right curlies (braces)\n        RC             = 82,\n        LP             = 83,  // left and right parentheses\n        RP             = 84,\n        COMMA          = 85,  // comma operator\n\n        ASSIGN         = 86,  // simple assignment  (=)\n        ASSIGN_BITOR   = 87,  // |=\n        ASSIGN_BITXOR  = 88,  // ^=\n        ASSIGN_BITAND  = 89,  // |=\n        ASSIGN_LSH     = 90,  // <<=\n        ASSIGN_RSH     = 91,  // >>=\n        ASSIGN_URSH    = 92,  // >>>=\n        ASSIGN_ADD     = 93,  // +=\n        ASSIGN_SUB     = 94,  // -=\n        ASSIGN_MUL     = 95,  // *=\n        ASSIGN_DIV     = 96,  // /=\n        ASSIGN_MOD     = 97;  // %=",
        "begin_line": 157,
        "end_line": 181,
        "comment": " End of interpreter bytecodes"
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.RP",
        "snippet": "    public final static int\n        LAST_BYTECODE_TOKEN    = REF_NS_NAME,\n\n        TRY            = 77,\n        SEMI           = 78,  // semicolon\n        LB             = 79,  // left and right brackets\n        RB             = 80,\n        LC             = 81,  // left and right curlies (braces)\n        RC             = 82,\n        LP             = 83,  // left and right parentheses\n        RP             = 84,\n        COMMA          = 85,  // comma operator\n\n        ASSIGN         = 86,  // simple assignment  (=)\n        ASSIGN_BITOR   = 87,  // |=\n        ASSIGN_BITXOR  = 88,  // ^=\n        ASSIGN_BITAND  = 89,  // |=\n        ASSIGN_LSH     = 90,  // <<=\n        ASSIGN_RSH     = 91,  // >>=\n        ASSIGN_URSH    = 92,  // >>>=\n        ASSIGN_ADD     = 93,  // +=\n        ASSIGN_SUB     = 94,  // -=\n        ASSIGN_MUL     = 95,  // *=\n        ASSIGN_DIV     = 96,  // /=\n        ASSIGN_MOD     = 97;  // %=",
        "begin_line": 157,
        "end_line": 181,
        "comment": " End of interpreter bytecodes"
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.COMMA",
        "snippet": "    public final static int\n        LAST_BYTECODE_TOKEN    = REF_NS_NAME,\n\n        TRY            = 77,\n        SEMI           = 78,  // semicolon\n        LB             = 79,  // left and right brackets\n        RB             = 80,\n        LC             = 81,  // left and right curlies (braces)\n        RC             = 82,\n        LP             = 83,  // left and right parentheses\n        RP             = 84,\n        COMMA          = 85,  // comma operator\n\n        ASSIGN         = 86,  // simple assignment  (=)\n        ASSIGN_BITOR   = 87,  // |=\n        ASSIGN_BITXOR  = 88,  // ^=\n        ASSIGN_BITAND  = 89,  // |=\n        ASSIGN_LSH     = 90,  // <<=\n        ASSIGN_RSH     = 91,  // >>=\n        ASSIGN_URSH    = 92,  // >>>=\n        ASSIGN_ADD     = 93,  // +=\n        ASSIGN_SUB     = 94,  // -=\n        ASSIGN_MUL     = 95,  // *=\n        ASSIGN_DIV     = 96,  // /=\n        ASSIGN_MOD     = 97;  // %=",
        "begin_line": 157,
        "end_line": 181,
        "comment": " End of interpreter bytecodes"
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.ASSIGN",
        "snippet": "    public final static int\n        LAST_BYTECODE_TOKEN    = REF_NS_NAME,\n\n        TRY            = 77,\n        SEMI           = 78,  // semicolon\n        LB             = 79,  // left and right brackets\n        RB             = 80,\n        LC             = 81,  // left and right curlies (braces)\n        RC             = 82,\n        LP             = 83,  // left and right parentheses\n        RP             = 84,\n        COMMA          = 85,  // comma operator\n\n        ASSIGN         = 86,  // simple assignment  (=)\n        ASSIGN_BITOR   = 87,  // |=\n        ASSIGN_BITXOR  = 88,  // ^=\n        ASSIGN_BITAND  = 89,  // |=\n        ASSIGN_LSH     = 90,  // <<=\n        ASSIGN_RSH     = 91,  // >>=\n        ASSIGN_URSH    = 92,  // >>>=\n        ASSIGN_ADD     = 93,  // +=\n        ASSIGN_SUB     = 94,  // -=\n        ASSIGN_MUL     = 95,  // *=\n        ASSIGN_DIV     = 96,  // /=\n        ASSIGN_MOD     = 97;  // %=",
        "begin_line": 157,
        "end_line": 181,
        "comment": " End of interpreter bytecodes"
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.ASSIGN_BITOR",
        "snippet": "    public final static int\n        LAST_BYTECODE_TOKEN    = REF_NS_NAME,\n\n        TRY            = 77,\n        SEMI           = 78,  // semicolon\n        LB             = 79,  // left and right brackets\n        RB             = 80,\n        LC             = 81,  // left and right curlies (braces)\n        RC             = 82,\n        LP             = 83,  // left and right parentheses\n        RP             = 84,\n        COMMA          = 85,  // comma operator\n\n        ASSIGN         = 86,  // simple assignment  (=)\n        ASSIGN_BITOR   = 87,  // |=\n        ASSIGN_BITXOR  = 88,  // ^=\n        ASSIGN_BITAND  = 89,  // |=\n        ASSIGN_LSH     = 90,  // <<=\n        ASSIGN_RSH     = 91,  // >>=\n        ASSIGN_URSH    = 92,  // >>>=\n        ASSIGN_ADD     = 93,  // +=\n        ASSIGN_SUB     = 94,  // -=\n        ASSIGN_MUL     = 95,  // *=\n        ASSIGN_DIV     = 96,  // /=\n        ASSIGN_MOD     = 97;  // %=",
        "begin_line": 157,
        "end_line": 181,
        "comment": " End of interpreter bytecodes"
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.ASSIGN_BITXOR",
        "snippet": "    public final static int\n        LAST_BYTECODE_TOKEN    = REF_NS_NAME,\n\n        TRY            = 77,\n        SEMI           = 78,  // semicolon\n        LB             = 79,  // left and right brackets\n        RB             = 80,\n        LC             = 81,  // left and right curlies (braces)\n        RC             = 82,\n        LP             = 83,  // left and right parentheses\n        RP             = 84,\n        COMMA          = 85,  // comma operator\n\n        ASSIGN         = 86,  // simple assignment  (=)\n        ASSIGN_BITOR   = 87,  // |=\n        ASSIGN_BITXOR  = 88,  // ^=\n        ASSIGN_BITAND  = 89,  // |=\n        ASSIGN_LSH     = 90,  // <<=\n        ASSIGN_RSH     = 91,  // >>=\n        ASSIGN_URSH    = 92,  // >>>=\n        ASSIGN_ADD     = 93,  // +=\n        ASSIGN_SUB     = 94,  // -=\n        ASSIGN_MUL     = 95,  // *=\n        ASSIGN_DIV     = 96,  // /=\n        ASSIGN_MOD     = 97;  // %=",
        "begin_line": 157,
        "end_line": 181,
        "comment": " End of interpreter bytecodes"
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.ASSIGN_BITAND",
        "snippet": "    public final static int\n        LAST_BYTECODE_TOKEN    = REF_NS_NAME,\n\n        TRY            = 77,\n        SEMI           = 78,  // semicolon\n        LB             = 79,  // left and right brackets\n        RB             = 80,\n        LC             = 81,  // left and right curlies (braces)\n        RC             = 82,\n        LP             = 83,  // left and right parentheses\n        RP             = 84,\n        COMMA          = 85,  // comma operator\n\n        ASSIGN         = 86,  // simple assignment  (=)\n        ASSIGN_BITOR   = 87,  // |=\n        ASSIGN_BITXOR  = 88,  // ^=\n        ASSIGN_BITAND  = 89,  // |=\n        ASSIGN_LSH     = 90,  // <<=\n        ASSIGN_RSH     = 91,  // >>=\n        ASSIGN_URSH    = 92,  // >>>=\n        ASSIGN_ADD     = 93,  // +=\n        ASSIGN_SUB     = 94,  // -=\n        ASSIGN_MUL     = 95,  // *=\n        ASSIGN_DIV     = 96,  // /=\n        ASSIGN_MOD     = 97;  // %=",
        "begin_line": 157,
        "end_line": 181,
        "comment": " End of interpreter bytecodes"
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.ASSIGN_LSH",
        "snippet": "    public final static int\n        LAST_BYTECODE_TOKEN    = REF_NS_NAME,\n\n        TRY            = 77,\n        SEMI           = 78,  // semicolon\n        LB             = 79,  // left and right brackets\n        RB             = 80,\n        LC             = 81,  // left and right curlies (braces)\n        RC             = 82,\n        LP             = 83,  // left and right parentheses\n        RP             = 84,\n        COMMA          = 85,  // comma operator\n\n        ASSIGN         = 86,  // simple assignment  (=)\n        ASSIGN_BITOR   = 87,  // |=\n        ASSIGN_BITXOR  = 88,  // ^=\n        ASSIGN_BITAND  = 89,  // |=\n        ASSIGN_LSH     = 90,  // <<=\n        ASSIGN_RSH     = 91,  // >>=\n        ASSIGN_URSH    = 92,  // >>>=\n        ASSIGN_ADD     = 93,  // +=\n        ASSIGN_SUB     = 94,  // -=\n        ASSIGN_MUL     = 95,  // *=\n        ASSIGN_DIV     = 96,  // /=\n        ASSIGN_MOD     = 97;  // %=",
        "begin_line": 157,
        "end_line": 181,
        "comment": " End of interpreter bytecodes"
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.ASSIGN_RSH",
        "snippet": "    public final static int\n        LAST_BYTECODE_TOKEN    = REF_NS_NAME,\n\n        TRY            = 77,\n        SEMI           = 78,  // semicolon\n        LB             = 79,  // left and right brackets\n        RB             = 80,\n        LC             = 81,  // left and right curlies (braces)\n        RC             = 82,\n        LP             = 83,  // left and right parentheses\n        RP             = 84,\n        COMMA          = 85,  // comma operator\n\n        ASSIGN         = 86,  // simple assignment  (=)\n        ASSIGN_BITOR   = 87,  // |=\n        ASSIGN_BITXOR  = 88,  // ^=\n        ASSIGN_BITAND  = 89,  // |=\n        ASSIGN_LSH     = 90,  // <<=\n        ASSIGN_RSH     = 91,  // >>=\n        ASSIGN_URSH    = 92,  // >>>=\n        ASSIGN_ADD     = 93,  // +=\n        ASSIGN_SUB     = 94,  // -=\n        ASSIGN_MUL     = 95,  // *=\n        ASSIGN_DIV     = 96,  // /=\n        ASSIGN_MOD     = 97;  // %=",
        "begin_line": 157,
        "end_line": 181,
        "comment": " End of interpreter bytecodes"
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.ASSIGN_URSH",
        "snippet": "    public final static int\n        LAST_BYTECODE_TOKEN    = REF_NS_NAME,\n\n        TRY            = 77,\n        SEMI           = 78,  // semicolon\n        LB             = 79,  // left and right brackets\n        RB             = 80,\n        LC             = 81,  // left and right curlies (braces)\n        RC             = 82,\n        LP             = 83,  // left and right parentheses\n        RP             = 84,\n        COMMA          = 85,  // comma operator\n\n        ASSIGN         = 86,  // simple assignment  (=)\n        ASSIGN_BITOR   = 87,  // |=\n        ASSIGN_BITXOR  = 88,  // ^=\n        ASSIGN_BITAND  = 89,  // |=\n        ASSIGN_LSH     = 90,  // <<=\n        ASSIGN_RSH     = 91,  // >>=\n        ASSIGN_URSH    = 92,  // >>>=\n        ASSIGN_ADD     = 93,  // +=\n        ASSIGN_SUB     = 94,  // -=\n        ASSIGN_MUL     = 95,  // *=\n        ASSIGN_DIV     = 96,  // /=\n        ASSIGN_MOD     = 97;  // %=",
        "begin_line": 157,
        "end_line": 181,
        "comment": " End of interpreter bytecodes"
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.ASSIGN_ADD",
        "snippet": "    public final static int\n        LAST_BYTECODE_TOKEN    = REF_NS_NAME,\n\n        TRY            = 77,\n        SEMI           = 78,  // semicolon\n        LB             = 79,  // left and right brackets\n        RB             = 80,\n        LC             = 81,  // left and right curlies (braces)\n        RC             = 82,\n        LP             = 83,  // left and right parentheses\n        RP             = 84,\n        COMMA          = 85,  // comma operator\n\n        ASSIGN         = 86,  // simple assignment  (=)\n        ASSIGN_BITOR   = 87,  // |=\n        ASSIGN_BITXOR  = 88,  // ^=\n        ASSIGN_BITAND  = 89,  // |=\n        ASSIGN_LSH     = 90,  // <<=\n        ASSIGN_RSH     = 91,  // >>=\n        ASSIGN_URSH    = 92,  // >>>=\n        ASSIGN_ADD     = 93,  // +=\n        ASSIGN_SUB     = 94,  // -=\n        ASSIGN_MUL     = 95,  // *=\n        ASSIGN_DIV     = 96,  // /=\n        ASSIGN_MOD     = 97;  // %=",
        "begin_line": 157,
        "end_line": 181,
        "comment": " End of interpreter bytecodes"
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.ASSIGN_SUB",
        "snippet": "    public final static int\n        LAST_BYTECODE_TOKEN    = REF_NS_NAME,\n\n        TRY            = 77,\n        SEMI           = 78,  // semicolon\n        LB             = 79,  // left and right brackets\n        RB             = 80,\n        LC             = 81,  // left and right curlies (braces)\n        RC             = 82,\n        LP             = 83,  // left and right parentheses\n        RP             = 84,\n        COMMA          = 85,  // comma operator\n\n        ASSIGN         = 86,  // simple assignment  (=)\n        ASSIGN_BITOR   = 87,  // |=\n        ASSIGN_BITXOR  = 88,  // ^=\n        ASSIGN_BITAND  = 89,  // |=\n        ASSIGN_LSH     = 90,  // <<=\n        ASSIGN_RSH     = 91,  // >>=\n        ASSIGN_URSH    = 92,  // >>>=\n        ASSIGN_ADD     = 93,  // +=\n        ASSIGN_SUB     = 94,  // -=\n        ASSIGN_MUL     = 95,  // *=\n        ASSIGN_DIV     = 96,  // /=\n        ASSIGN_MOD     = 97;  // %=",
        "begin_line": 157,
        "end_line": 181,
        "comment": " End of interpreter bytecodes"
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.ASSIGN_MUL",
        "snippet": "    public final static int\n        LAST_BYTECODE_TOKEN    = REF_NS_NAME,\n\n        TRY            = 77,\n        SEMI           = 78,  // semicolon\n        LB             = 79,  // left and right brackets\n        RB             = 80,\n        LC             = 81,  // left and right curlies (braces)\n        RC             = 82,\n        LP             = 83,  // left and right parentheses\n        RP             = 84,\n        COMMA          = 85,  // comma operator\n\n        ASSIGN         = 86,  // simple assignment  (=)\n        ASSIGN_BITOR   = 87,  // |=\n        ASSIGN_BITXOR  = 88,  // ^=\n        ASSIGN_BITAND  = 89,  // |=\n        ASSIGN_LSH     = 90,  // <<=\n        ASSIGN_RSH     = 91,  // >>=\n        ASSIGN_URSH    = 92,  // >>>=\n        ASSIGN_ADD     = 93,  // +=\n        ASSIGN_SUB     = 94,  // -=\n        ASSIGN_MUL     = 95,  // *=\n        ASSIGN_DIV     = 96,  // /=\n        ASSIGN_MOD     = 97;  // %=",
        "begin_line": 157,
        "end_line": 181,
        "comment": " End of interpreter bytecodes"
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.ASSIGN_DIV",
        "snippet": "    public final static int\n        LAST_BYTECODE_TOKEN    = REF_NS_NAME,\n\n        TRY            = 77,\n        SEMI           = 78,  // semicolon\n        LB             = 79,  // left and right brackets\n        RB             = 80,\n        LC             = 81,  // left and right curlies (braces)\n        RC             = 82,\n        LP             = 83,  // left and right parentheses\n        RP             = 84,\n        COMMA          = 85,  // comma operator\n\n        ASSIGN         = 86,  // simple assignment  (=)\n        ASSIGN_BITOR   = 87,  // |=\n        ASSIGN_BITXOR  = 88,  // ^=\n        ASSIGN_BITAND  = 89,  // |=\n        ASSIGN_LSH     = 90,  // <<=\n        ASSIGN_RSH     = 91,  // >>=\n        ASSIGN_URSH    = 92,  // >>>=\n        ASSIGN_ADD     = 93,  // +=\n        ASSIGN_SUB     = 94,  // -=\n        ASSIGN_MUL     = 95,  // *=\n        ASSIGN_DIV     = 96,  // /=\n        ASSIGN_MOD     = 97;  // %=",
        "begin_line": 157,
        "end_line": 181,
        "comment": " End of interpreter bytecodes"
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.ASSIGN_MOD",
        "snippet": "    public final static int\n        LAST_BYTECODE_TOKEN    = REF_NS_NAME,\n\n        TRY            = 77,\n        SEMI           = 78,  // semicolon\n        LB             = 79,  // left and right brackets\n        RB             = 80,\n        LC             = 81,  // left and right curlies (braces)\n        RC             = 82,\n        LP             = 83,  // left and right parentheses\n        RP             = 84,\n        COMMA          = 85,  // comma operator\n\n        ASSIGN         = 86,  // simple assignment  (=)\n        ASSIGN_BITOR   = 87,  // |=\n        ASSIGN_BITXOR  = 88,  // ^=\n        ASSIGN_BITAND  = 89,  // |=\n        ASSIGN_LSH     = 90,  // <<=\n        ASSIGN_RSH     = 91,  // >>=\n        ASSIGN_URSH    = 92,  // >>>=\n        ASSIGN_ADD     = 93,  // +=\n        ASSIGN_SUB     = 94,  // -=\n        ASSIGN_MUL     = 95,  // *=\n        ASSIGN_DIV     = 96,  // /=\n        ASSIGN_MOD     = 97;  // %=",
        "begin_line": 157,
        "end_line": 181,
        "comment": " End of interpreter bytecodes"
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.FIRST_ASSIGN",
        "snippet": "    public final static int\n        FIRST_ASSIGN   = ASSIGN,\n        LAST_ASSIGN    = ASSIGN_MOD,\n\n        HOOK           = 98, // conditional (?:)\n        COLON          = 99,\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment/decrement (++ --)\n        DEC            = 103,\n        DOT            = 104, // member operator (.)\n        FUNCTION       = 105, // function keyword\n        EXPORT         = 106, // export keyword\n        IMPORT         = 107, // import keyword\n        IF             = 108, // if keyword\n        ELSE           = 109, // else keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT        = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        FINALLY        = 121, // finally keyword\n        VOID           = 122, // void keyword\n        RESERVED       = 123, // reserved keywords\n\n        EMPTY          = 124,\n\n        /* types used for the parse tree - these never get returned\n         * by the scanner.\n         */\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        TARGET         = 127,\n        LOOP           = 128,\n        EXPR_VOID      = 129, // expression statement in functions\n        EXPR_RESULT    = 130, // expression statement in scripts\n        JSR            = 131,\n        SCRIPT         = 132, // top-level node for entire script\n        TYPEOFNAME     = 133, // for typeof(simple-name)\n        USE_STACK      = 134,\n        SETPROP_OP     = 135, // x.y op= something\n        SETELEM_OP     = 136, // x[y] op= something\n        LOCAL_BLOCK    = 137,\n        SET_REF_OP     = 138, // *reference op= something\n\n        // For XML support:\n        DOTDOT         = 139,  // member operator (..)\n        COLONCOLON     = 140,  // namespace::name\n        XML            = 141,  // XML type\n        DOTQUERY       = 142,  // .() -- e.g., x.emps.emp.(name == \"terry\")\n        XMLATTR        = 143,  // @\n        XMLEND         = 144,\n\n        // Optimizer-only-tokens\n        TO_OBJECT      = 145,\n        TO_DOUBLE      = 146,\n\n        GET            = 147,  // JS 1.5 get pseudo keyword\n        SET            = 148,  // JS 1.5 set pseudo keyword\n\n        CONST          = 149,  // JS 1.5 const keyword\n        SETCONST       = 150,\n        SETCONSTVAR    = 151,\n        DEBUGGER       = 152,\n        LAST_TOKEN     = 152,\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307;",
        "begin_line": 183,
        "end_line": 264,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.LAST_ASSIGN",
        "snippet": "    public final static int\n        FIRST_ASSIGN   = ASSIGN,\n        LAST_ASSIGN    = ASSIGN_MOD,\n\n        HOOK           = 98, // conditional (?:)\n        COLON          = 99,\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment/decrement (++ --)\n        DEC            = 103,\n        DOT            = 104, // member operator (.)\n        FUNCTION       = 105, // function keyword\n        EXPORT         = 106, // export keyword\n        IMPORT         = 107, // import keyword\n        IF             = 108, // if keyword\n        ELSE           = 109, // else keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT        = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        FINALLY        = 121, // finally keyword\n        VOID           = 122, // void keyword\n        RESERVED       = 123, // reserved keywords\n\n        EMPTY          = 124,\n\n        /* types used for the parse tree - these never get returned\n         * by the scanner.\n         */\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        TARGET         = 127,\n        LOOP           = 128,\n        EXPR_VOID      = 129, // expression statement in functions\n        EXPR_RESULT    = 130, // expression statement in scripts\n        JSR            = 131,\n        SCRIPT         = 132, // top-level node for entire script\n        TYPEOFNAME     = 133, // for typeof(simple-name)\n        USE_STACK      = 134,\n        SETPROP_OP     = 135, // x.y op= something\n        SETELEM_OP     = 136, // x[y] op= something\n        LOCAL_BLOCK    = 137,\n        SET_REF_OP     = 138, // *reference op= something\n\n        // For XML support:\n        DOTDOT         = 139,  // member operator (..)\n        COLONCOLON     = 140,  // namespace::name\n        XML            = 141,  // XML type\n        DOTQUERY       = 142,  // .() -- e.g., x.emps.emp.(name == \"terry\")\n        XMLATTR        = 143,  // @\n        XMLEND         = 144,\n\n        // Optimizer-only-tokens\n        TO_OBJECT      = 145,\n        TO_DOUBLE      = 146,\n\n        GET            = 147,  // JS 1.5 get pseudo keyword\n        SET            = 148,  // JS 1.5 set pseudo keyword\n\n        CONST          = 149,  // JS 1.5 const keyword\n        SETCONST       = 150,\n        SETCONSTVAR    = 151,\n        DEBUGGER       = 152,\n        LAST_TOKEN     = 152,\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307;",
        "begin_line": 183,
        "end_line": 264,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.HOOK",
        "snippet": "    public final static int\n        FIRST_ASSIGN   = ASSIGN,\n        LAST_ASSIGN    = ASSIGN_MOD,\n\n        HOOK           = 98, // conditional (?:)\n        COLON          = 99,\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment/decrement (++ --)\n        DEC            = 103,\n        DOT            = 104, // member operator (.)\n        FUNCTION       = 105, // function keyword\n        EXPORT         = 106, // export keyword\n        IMPORT         = 107, // import keyword\n        IF             = 108, // if keyword\n        ELSE           = 109, // else keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT        = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        FINALLY        = 121, // finally keyword\n        VOID           = 122, // void keyword\n        RESERVED       = 123, // reserved keywords\n\n        EMPTY          = 124,\n\n        /* types used for the parse tree - these never get returned\n         * by the scanner.\n         */\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        TARGET         = 127,\n        LOOP           = 128,\n        EXPR_VOID      = 129, // expression statement in functions\n        EXPR_RESULT    = 130, // expression statement in scripts\n        JSR            = 131,\n        SCRIPT         = 132, // top-level node for entire script\n        TYPEOFNAME     = 133, // for typeof(simple-name)\n        USE_STACK      = 134,\n        SETPROP_OP     = 135, // x.y op= something\n        SETELEM_OP     = 136, // x[y] op= something\n        LOCAL_BLOCK    = 137,\n        SET_REF_OP     = 138, // *reference op= something\n\n        // For XML support:\n        DOTDOT         = 139,  // member operator (..)\n        COLONCOLON     = 140,  // namespace::name\n        XML            = 141,  // XML type\n        DOTQUERY       = 142,  // .() -- e.g., x.emps.emp.(name == \"terry\")\n        XMLATTR        = 143,  // @\n        XMLEND         = 144,\n\n        // Optimizer-only-tokens\n        TO_OBJECT      = 145,\n        TO_DOUBLE      = 146,\n\n        GET            = 147,  // JS 1.5 get pseudo keyword\n        SET            = 148,  // JS 1.5 set pseudo keyword\n\n        CONST          = 149,  // JS 1.5 const keyword\n        SETCONST       = 150,\n        SETCONSTVAR    = 151,\n        DEBUGGER       = 152,\n        LAST_TOKEN     = 152,\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307;",
        "begin_line": 183,
        "end_line": 264,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.COLON",
        "snippet": "    public final static int\n        FIRST_ASSIGN   = ASSIGN,\n        LAST_ASSIGN    = ASSIGN_MOD,\n\n        HOOK           = 98, // conditional (?:)\n        COLON          = 99,\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment/decrement (++ --)\n        DEC            = 103,\n        DOT            = 104, // member operator (.)\n        FUNCTION       = 105, // function keyword\n        EXPORT         = 106, // export keyword\n        IMPORT         = 107, // import keyword\n        IF             = 108, // if keyword\n        ELSE           = 109, // else keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT        = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        FINALLY        = 121, // finally keyword\n        VOID           = 122, // void keyword\n        RESERVED       = 123, // reserved keywords\n\n        EMPTY          = 124,\n\n        /* types used for the parse tree - these never get returned\n         * by the scanner.\n         */\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        TARGET         = 127,\n        LOOP           = 128,\n        EXPR_VOID      = 129, // expression statement in functions\n        EXPR_RESULT    = 130, // expression statement in scripts\n        JSR            = 131,\n        SCRIPT         = 132, // top-level node for entire script\n        TYPEOFNAME     = 133, // for typeof(simple-name)\n        USE_STACK      = 134,\n        SETPROP_OP     = 135, // x.y op= something\n        SETELEM_OP     = 136, // x[y] op= something\n        LOCAL_BLOCK    = 137,\n        SET_REF_OP     = 138, // *reference op= something\n\n        // For XML support:\n        DOTDOT         = 139,  // member operator (..)\n        COLONCOLON     = 140,  // namespace::name\n        XML            = 141,  // XML type\n        DOTQUERY       = 142,  // .() -- e.g., x.emps.emp.(name == \"terry\")\n        XMLATTR        = 143,  // @\n        XMLEND         = 144,\n\n        // Optimizer-only-tokens\n        TO_OBJECT      = 145,\n        TO_DOUBLE      = 146,\n\n        GET            = 147,  // JS 1.5 get pseudo keyword\n        SET            = 148,  // JS 1.5 set pseudo keyword\n\n        CONST          = 149,  // JS 1.5 const keyword\n        SETCONST       = 150,\n        SETCONSTVAR    = 151,\n        DEBUGGER       = 152,\n        LAST_TOKEN     = 152,\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307;",
        "begin_line": 183,
        "end_line": 264,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.OR",
        "snippet": "    public final static int\n        FIRST_ASSIGN   = ASSIGN,\n        LAST_ASSIGN    = ASSIGN_MOD,\n\n        HOOK           = 98, // conditional (?:)\n        COLON          = 99,\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment/decrement (++ --)\n        DEC            = 103,\n        DOT            = 104, // member operator (.)\n        FUNCTION       = 105, // function keyword\n        EXPORT         = 106, // export keyword\n        IMPORT         = 107, // import keyword\n        IF             = 108, // if keyword\n        ELSE           = 109, // else keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT        = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        FINALLY        = 121, // finally keyword\n        VOID           = 122, // void keyword\n        RESERVED       = 123, // reserved keywords\n\n        EMPTY          = 124,\n\n        /* types used for the parse tree - these never get returned\n         * by the scanner.\n         */\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        TARGET         = 127,\n        LOOP           = 128,\n        EXPR_VOID      = 129, // expression statement in functions\n        EXPR_RESULT    = 130, // expression statement in scripts\n        JSR            = 131,\n        SCRIPT         = 132, // top-level node for entire script\n        TYPEOFNAME     = 133, // for typeof(simple-name)\n        USE_STACK      = 134,\n        SETPROP_OP     = 135, // x.y op= something\n        SETELEM_OP     = 136, // x[y] op= something\n        LOCAL_BLOCK    = 137,\n        SET_REF_OP     = 138, // *reference op= something\n\n        // For XML support:\n        DOTDOT         = 139,  // member operator (..)\n        COLONCOLON     = 140,  // namespace::name\n        XML            = 141,  // XML type\n        DOTQUERY       = 142,  // .() -- e.g., x.emps.emp.(name == \"terry\")\n        XMLATTR        = 143,  // @\n        XMLEND         = 144,\n\n        // Optimizer-only-tokens\n        TO_OBJECT      = 145,\n        TO_DOUBLE      = 146,\n\n        GET            = 147,  // JS 1.5 get pseudo keyword\n        SET            = 148,  // JS 1.5 set pseudo keyword\n\n        CONST          = 149,  // JS 1.5 const keyword\n        SETCONST       = 150,\n        SETCONSTVAR    = 151,\n        DEBUGGER       = 152,\n        LAST_TOKEN     = 152,\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307;",
        "begin_line": 183,
        "end_line": 264,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.AND",
        "snippet": "    public final static int\n        FIRST_ASSIGN   = ASSIGN,\n        LAST_ASSIGN    = ASSIGN_MOD,\n\n        HOOK           = 98, // conditional (?:)\n        COLON          = 99,\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment/decrement (++ --)\n        DEC            = 103,\n        DOT            = 104, // member operator (.)\n        FUNCTION       = 105, // function keyword\n        EXPORT         = 106, // export keyword\n        IMPORT         = 107, // import keyword\n        IF             = 108, // if keyword\n        ELSE           = 109, // else keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT        = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        FINALLY        = 121, // finally keyword\n        VOID           = 122, // void keyword\n        RESERVED       = 123, // reserved keywords\n\n        EMPTY          = 124,\n\n        /* types used for the parse tree - these never get returned\n         * by the scanner.\n         */\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        TARGET         = 127,\n        LOOP           = 128,\n        EXPR_VOID      = 129, // expression statement in functions\n        EXPR_RESULT    = 130, // expression statement in scripts\n        JSR            = 131,\n        SCRIPT         = 132, // top-level node for entire script\n        TYPEOFNAME     = 133, // for typeof(simple-name)\n        USE_STACK      = 134,\n        SETPROP_OP     = 135, // x.y op= something\n        SETELEM_OP     = 136, // x[y] op= something\n        LOCAL_BLOCK    = 137,\n        SET_REF_OP     = 138, // *reference op= something\n\n        // For XML support:\n        DOTDOT         = 139,  // member operator (..)\n        COLONCOLON     = 140,  // namespace::name\n        XML            = 141,  // XML type\n        DOTQUERY       = 142,  // .() -- e.g., x.emps.emp.(name == \"terry\")\n        XMLATTR        = 143,  // @\n        XMLEND         = 144,\n\n        // Optimizer-only-tokens\n        TO_OBJECT      = 145,\n        TO_DOUBLE      = 146,\n\n        GET            = 147,  // JS 1.5 get pseudo keyword\n        SET            = 148,  // JS 1.5 set pseudo keyword\n\n        CONST          = 149,  // JS 1.5 const keyword\n        SETCONST       = 150,\n        SETCONSTVAR    = 151,\n        DEBUGGER       = 152,\n        LAST_TOKEN     = 152,\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307;",
        "begin_line": 183,
        "end_line": 264,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.INC",
        "snippet": "    public final static int\n        FIRST_ASSIGN   = ASSIGN,\n        LAST_ASSIGN    = ASSIGN_MOD,\n\n        HOOK           = 98, // conditional (?:)\n        COLON          = 99,\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment/decrement (++ --)\n        DEC            = 103,\n        DOT            = 104, // member operator (.)\n        FUNCTION       = 105, // function keyword\n        EXPORT         = 106, // export keyword\n        IMPORT         = 107, // import keyword\n        IF             = 108, // if keyword\n        ELSE           = 109, // else keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT        = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        FINALLY        = 121, // finally keyword\n        VOID           = 122, // void keyword\n        RESERVED       = 123, // reserved keywords\n\n        EMPTY          = 124,\n\n        /* types used for the parse tree - these never get returned\n         * by the scanner.\n         */\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        TARGET         = 127,\n        LOOP           = 128,\n        EXPR_VOID      = 129, // expression statement in functions\n        EXPR_RESULT    = 130, // expression statement in scripts\n        JSR            = 131,\n        SCRIPT         = 132, // top-level node for entire script\n        TYPEOFNAME     = 133, // for typeof(simple-name)\n        USE_STACK      = 134,\n        SETPROP_OP     = 135, // x.y op= something\n        SETELEM_OP     = 136, // x[y] op= something\n        LOCAL_BLOCK    = 137,\n        SET_REF_OP     = 138, // *reference op= something\n\n        // For XML support:\n        DOTDOT         = 139,  // member operator (..)\n        COLONCOLON     = 140,  // namespace::name\n        XML            = 141,  // XML type\n        DOTQUERY       = 142,  // .() -- e.g., x.emps.emp.(name == \"terry\")\n        XMLATTR        = 143,  // @\n        XMLEND         = 144,\n\n        // Optimizer-only-tokens\n        TO_OBJECT      = 145,\n        TO_DOUBLE      = 146,\n\n        GET            = 147,  // JS 1.5 get pseudo keyword\n        SET            = 148,  // JS 1.5 set pseudo keyword\n\n        CONST          = 149,  // JS 1.5 const keyword\n        SETCONST       = 150,\n        SETCONSTVAR    = 151,\n        DEBUGGER       = 152,\n        LAST_TOKEN     = 152,\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307;",
        "begin_line": 183,
        "end_line": 264,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.DEC",
        "snippet": "    public final static int\n        FIRST_ASSIGN   = ASSIGN,\n        LAST_ASSIGN    = ASSIGN_MOD,\n\n        HOOK           = 98, // conditional (?:)\n        COLON          = 99,\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment/decrement (++ --)\n        DEC            = 103,\n        DOT            = 104, // member operator (.)\n        FUNCTION       = 105, // function keyword\n        EXPORT         = 106, // export keyword\n        IMPORT         = 107, // import keyword\n        IF             = 108, // if keyword\n        ELSE           = 109, // else keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT        = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        FINALLY        = 121, // finally keyword\n        VOID           = 122, // void keyword\n        RESERVED       = 123, // reserved keywords\n\n        EMPTY          = 124,\n\n        /* types used for the parse tree - these never get returned\n         * by the scanner.\n         */\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        TARGET         = 127,\n        LOOP           = 128,\n        EXPR_VOID      = 129, // expression statement in functions\n        EXPR_RESULT    = 130, // expression statement in scripts\n        JSR            = 131,\n        SCRIPT         = 132, // top-level node for entire script\n        TYPEOFNAME     = 133, // for typeof(simple-name)\n        USE_STACK      = 134,\n        SETPROP_OP     = 135, // x.y op= something\n        SETELEM_OP     = 136, // x[y] op= something\n        LOCAL_BLOCK    = 137,\n        SET_REF_OP     = 138, // *reference op= something\n\n        // For XML support:\n        DOTDOT         = 139,  // member operator (..)\n        COLONCOLON     = 140,  // namespace::name\n        XML            = 141,  // XML type\n        DOTQUERY       = 142,  // .() -- e.g., x.emps.emp.(name == \"terry\")\n        XMLATTR        = 143,  // @\n        XMLEND         = 144,\n\n        // Optimizer-only-tokens\n        TO_OBJECT      = 145,\n        TO_DOUBLE      = 146,\n\n        GET            = 147,  // JS 1.5 get pseudo keyword\n        SET            = 148,  // JS 1.5 set pseudo keyword\n\n        CONST          = 149,  // JS 1.5 const keyword\n        SETCONST       = 150,\n        SETCONSTVAR    = 151,\n        DEBUGGER       = 152,\n        LAST_TOKEN     = 152,\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307;",
        "begin_line": 183,
        "end_line": 264,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.DOT",
        "snippet": "    public final static int\n        FIRST_ASSIGN   = ASSIGN,\n        LAST_ASSIGN    = ASSIGN_MOD,\n\n        HOOK           = 98, // conditional (?:)\n        COLON          = 99,\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment/decrement (++ --)\n        DEC            = 103,\n        DOT            = 104, // member operator (.)\n        FUNCTION       = 105, // function keyword\n        EXPORT         = 106, // export keyword\n        IMPORT         = 107, // import keyword\n        IF             = 108, // if keyword\n        ELSE           = 109, // else keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT        = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        FINALLY        = 121, // finally keyword\n        VOID           = 122, // void keyword\n        RESERVED       = 123, // reserved keywords\n\n        EMPTY          = 124,\n\n        /* types used for the parse tree - these never get returned\n         * by the scanner.\n         */\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        TARGET         = 127,\n        LOOP           = 128,\n        EXPR_VOID      = 129, // expression statement in functions\n        EXPR_RESULT    = 130, // expression statement in scripts\n        JSR            = 131,\n        SCRIPT         = 132, // top-level node for entire script\n        TYPEOFNAME     = 133, // for typeof(simple-name)\n        USE_STACK      = 134,\n        SETPROP_OP     = 135, // x.y op= something\n        SETELEM_OP     = 136, // x[y] op= something\n        LOCAL_BLOCK    = 137,\n        SET_REF_OP     = 138, // *reference op= something\n\n        // For XML support:\n        DOTDOT         = 139,  // member operator (..)\n        COLONCOLON     = 140,  // namespace::name\n        XML            = 141,  // XML type\n        DOTQUERY       = 142,  // .() -- e.g., x.emps.emp.(name == \"terry\")\n        XMLATTR        = 143,  // @\n        XMLEND         = 144,\n\n        // Optimizer-only-tokens\n        TO_OBJECT      = 145,\n        TO_DOUBLE      = 146,\n\n        GET            = 147,  // JS 1.5 get pseudo keyword\n        SET            = 148,  // JS 1.5 set pseudo keyword\n\n        CONST          = 149,  // JS 1.5 const keyword\n        SETCONST       = 150,\n        SETCONSTVAR    = 151,\n        DEBUGGER       = 152,\n        LAST_TOKEN     = 152,\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307;",
        "begin_line": 183,
        "end_line": 264,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.FUNCTION",
        "snippet": "    public final static int\n        FIRST_ASSIGN   = ASSIGN,\n        LAST_ASSIGN    = ASSIGN_MOD,\n\n        HOOK           = 98, // conditional (?:)\n        COLON          = 99,\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment/decrement (++ --)\n        DEC            = 103,\n        DOT            = 104, // member operator (.)\n        FUNCTION       = 105, // function keyword\n        EXPORT         = 106, // export keyword\n        IMPORT         = 107, // import keyword\n        IF             = 108, // if keyword\n        ELSE           = 109, // else keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT        = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        FINALLY        = 121, // finally keyword\n        VOID           = 122, // void keyword\n        RESERVED       = 123, // reserved keywords\n\n        EMPTY          = 124,\n\n        /* types used for the parse tree - these never get returned\n         * by the scanner.\n         */\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        TARGET         = 127,\n        LOOP           = 128,\n        EXPR_VOID      = 129, // expression statement in functions\n        EXPR_RESULT    = 130, // expression statement in scripts\n        JSR            = 131,\n        SCRIPT         = 132, // top-level node for entire script\n        TYPEOFNAME     = 133, // for typeof(simple-name)\n        USE_STACK      = 134,\n        SETPROP_OP     = 135, // x.y op= something\n        SETELEM_OP     = 136, // x[y] op= something\n        LOCAL_BLOCK    = 137,\n        SET_REF_OP     = 138, // *reference op= something\n\n        // For XML support:\n        DOTDOT         = 139,  // member operator (..)\n        COLONCOLON     = 140,  // namespace::name\n        XML            = 141,  // XML type\n        DOTQUERY       = 142,  // .() -- e.g., x.emps.emp.(name == \"terry\")\n        XMLATTR        = 143,  // @\n        XMLEND         = 144,\n\n        // Optimizer-only-tokens\n        TO_OBJECT      = 145,\n        TO_DOUBLE      = 146,\n\n        GET            = 147,  // JS 1.5 get pseudo keyword\n        SET            = 148,  // JS 1.5 set pseudo keyword\n\n        CONST          = 149,  // JS 1.5 const keyword\n        SETCONST       = 150,\n        SETCONSTVAR    = 151,\n        DEBUGGER       = 152,\n        LAST_TOKEN     = 152,\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307;",
        "begin_line": 183,
        "end_line": 264,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.EXPORT",
        "snippet": "    public final static int\n        FIRST_ASSIGN   = ASSIGN,\n        LAST_ASSIGN    = ASSIGN_MOD,\n\n        HOOK           = 98, // conditional (?:)\n        COLON          = 99,\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment/decrement (++ --)\n        DEC            = 103,\n        DOT            = 104, // member operator (.)\n        FUNCTION       = 105, // function keyword\n        EXPORT         = 106, // export keyword\n        IMPORT         = 107, // import keyword\n        IF             = 108, // if keyword\n        ELSE           = 109, // else keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT        = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        FINALLY        = 121, // finally keyword\n        VOID           = 122, // void keyword\n        RESERVED       = 123, // reserved keywords\n\n        EMPTY          = 124,\n\n        /* types used for the parse tree - these never get returned\n         * by the scanner.\n         */\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        TARGET         = 127,\n        LOOP           = 128,\n        EXPR_VOID      = 129, // expression statement in functions\n        EXPR_RESULT    = 130, // expression statement in scripts\n        JSR            = 131,\n        SCRIPT         = 132, // top-level node for entire script\n        TYPEOFNAME     = 133, // for typeof(simple-name)\n        USE_STACK      = 134,\n        SETPROP_OP     = 135, // x.y op= something\n        SETELEM_OP     = 136, // x[y] op= something\n        LOCAL_BLOCK    = 137,\n        SET_REF_OP     = 138, // *reference op= something\n\n        // For XML support:\n        DOTDOT         = 139,  // member operator (..)\n        COLONCOLON     = 140,  // namespace::name\n        XML            = 141,  // XML type\n        DOTQUERY       = 142,  // .() -- e.g., x.emps.emp.(name == \"terry\")\n        XMLATTR        = 143,  // @\n        XMLEND         = 144,\n\n        // Optimizer-only-tokens\n        TO_OBJECT      = 145,\n        TO_DOUBLE      = 146,\n\n        GET            = 147,  // JS 1.5 get pseudo keyword\n        SET            = 148,  // JS 1.5 set pseudo keyword\n\n        CONST          = 149,  // JS 1.5 const keyword\n        SETCONST       = 150,\n        SETCONSTVAR    = 151,\n        DEBUGGER       = 152,\n        LAST_TOKEN     = 152,\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307;",
        "begin_line": 183,
        "end_line": 264,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.IMPORT",
        "snippet": "    public final static int\n        FIRST_ASSIGN   = ASSIGN,\n        LAST_ASSIGN    = ASSIGN_MOD,\n\n        HOOK           = 98, // conditional (?:)\n        COLON          = 99,\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment/decrement (++ --)\n        DEC            = 103,\n        DOT            = 104, // member operator (.)\n        FUNCTION       = 105, // function keyword\n        EXPORT         = 106, // export keyword\n        IMPORT         = 107, // import keyword\n        IF             = 108, // if keyword\n        ELSE           = 109, // else keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT        = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        FINALLY        = 121, // finally keyword\n        VOID           = 122, // void keyword\n        RESERVED       = 123, // reserved keywords\n\n        EMPTY          = 124,\n\n        /* types used for the parse tree - these never get returned\n         * by the scanner.\n         */\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        TARGET         = 127,\n        LOOP           = 128,\n        EXPR_VOID      = 129, // expression statement in functions\n        EXPR_RESULT    = 130, // expression statement in scripts\n        JSR            = 131,\n        SCRIPT         = 132, // top-level node for entire script\n        TYPEOFNAME     = 133, // for typeof(simple-name)\n        USE_STACK      = 134,\n        SETPROP_OP     = 135, // x.y op= something\n        SETELEM_OP     = 136, // x[y] op= something\n        LOCAL_BLOCK    = 137,\n        SET_REF_OP     = 138, // *reference op= something\n\n        // For XML support:\n        DOTDOT         = 139,  // member operator (..)\n        COLONCOLON     = 140,  // namespace::name\n        XML            = 141,  // XML type\n        DOTQUERY       = 142,  // .() -- e.g., x.emps.emp.(name == \"terry\")\n        XMLATTR        = 143,  // @\n        XMLEND         = 144,\n\n        // Optimizer-only-tokens\n        TO_OBJECT      = 145,\n        TO_DOUBLE      = 146,\n\n        GET            = 147,  // JS 1.5 get pseudo keyword\n        SET            = 148,  // JS 1.5 set pseudo keyword\n\n        CONST          = 149,  // JS 1.5 const keyword\n        SETCONST       = 150,\n        SETCONSTVAR    = 151,\n        DEBUGGER       = 152,\n        LAST_TOKEN     = 152,\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307;",
        "begin_line": 183,
        "end_line": 264,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.IF",
        "snippet": "    public final static int\n        FIRST_ASSIGN   = ASSIGN,\n        LAST_ASSIGN    = ASSIGN_MOD,\n\n        HOOK           = 98, // conditional (?:)\n        COLON          = 99,\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment/decrement (++ --)\n        DEC            = 103,\n        DOT            = 104, // member operator (.)\n        FUNCTION       = 105, // function keyword\n        EXPORT         = 106, // export keyword\n        IMPORT         = 107, // import keyword\n        IF             = 108, // if keyword\n        ELSE           = 109, // else keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT        = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        FINALLY        = 121, // finally keyword\n        VOID           = 122, // void keyword\n        RESERVED       = 123, // reserved keywords\n\n        EMPTY          = 124,\n\n        /* types used for the parse tree - these never get returned\n         * by the scanner.\n         */\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        TARGET         = 127,\n        LOOP           = 128,\n        EXPR_VOID      = 129, // expression statement in functions\n        EXPR_RESULT    = 130, // expression statement in scripts\n        JSR            = 131,\n        SCRIPT         = 132, // top-level node for entire script\n        TYPEOFNAME     = 133, // for typeof(simple-name)\n        USE_STACK      = 134,\n        SETPROP_OP     = 135, // x.y op= something\n        SETELEM_OP     = 136, // x[y] op= something\n        LOCAL_BLOCK    = 137,\n        SET_REF_OP     = 138, // *reference op= something\n\n        // For XML support:\n        DOTDOT         = 139,  // member operator (..)\n        COLONCOLON     = 140,  // namespace::name\n        XML            = 141,  // XML type\n        DOTQUERY       = 142,  // .() -- e.g., x.emps.emp.(name == \"terry\")\n        XMLATTR        = 143,  // @\n        XMLEND         = 144,\n\n        // Optimizer-only-tokens\n        TO_OBJECT      = 145,\n        TO_DOUBLE      = 146,\n\n        GET            = 147,  // JS 1.5 get pseudo keyword\n        SET            = 148,  // JS 1.5 set pseudo keyword\n\n        CONST          = 149,  // JS 1.5 const keyword\n        SETCONST       = 150,\n        SETCONSTVAR    = 151,\n        DEBUGGER       = 152,\n        LAST_TOKEN     = 152,\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307;",
        "begin_line": 183,
        "end_line": 264,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.ELSE",
        "snippet": "    public final static int\n        FIRST_ASSIGN   = ASSIGN,\n        LAST_ASSIGN    = ASSIGN_MOD,\n\n        HOOK           = 98, // conditional (?:)\n        COLON          = 99,\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment/decrement (++ --)\n        DEC            = 103,\n        DOT            = 104, // member operator (.)\n        FUNCTION       = 105, // function keyword\n        EXPORT         = 106, // export keyword\n        IMPORT         = 107, // import keyword\n        IF             = 108, // if keyword\n        ELSE           = 109, // else keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT        = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        FINALLY        = 121, // finally keyword\n        VOID           = 122, // void keyword\n        RESERVED       = 123, // reserved keywords\n\n        EMPTY          = 124,\n\n        /* types used for the parse tree - these never get returned\n         * by the scanner.\n         */\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        TARGET         = 127,\n        LOOP           = 128,\n        EXPR_VOID      = 129, // expression statement in functions\n        EXPR_RESULT    = 130, // expression statement in scripts\n        JSR            = 131,\n        SCRIPT         = 132, // top-level node for entire script\n        TYPEOFNAME     = 133, // for typeof(simple-name)\n        USE_STACK      = 134,\n        SETPROP_OP     = 135, // x.y op= something\n        SETELEM_OP     = 136, // x[y] op= something\n        LOCAL_BLOCK    = 137,\n        SET_REF_OP     = 138, // *reference op= something\n\n        // For XML support:\n        DOTDOT         = 139,  // member operator (..)\n        COLONCOLON     = 140,  // namespace::name\n        XML            = 141,  // XML type\n        DOTQUERY       = 142,  // .() -- e.g., x.emps.emp.(name == \"terry\")\n        XMLATTR        = 143,  // @\n        XMLEND         = 144,\n\n        // Optimizer-only-tokens\n        TO_OBJECT      = 145,\n        TO_DOUBLE      = 146,\n\n        GET            = 147,  // JS 1.5 get pseudo keyword\n        SET            = 148,  // JS 1.5 set pseudo keyword\n\n        CONST          = 149,  // JS 1.5 const keyword\n        SETCONST       = 150,\n        SETCONSTVAR    = 151,\n        DEBUGGER       = 152,\n        LAST_TOKEN     = 152,\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307;",
        "begin_line": 183,
        "end_line": 264,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.SWITCH",
        "snippet": "    public final static int\n        FIRST_ASSIGN   = ASSIGN,\n        LAST_ASSIGN    = ASSIGN_MOD,\n\n        HOOK           = 98, // conditional (?:)\n        COLON          = 99,\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment/decrement (++ --)\n        DEC            = 103,\n        DOT            = 104, // member operator (.)\n        FUNCTION       = 105, // function keyword\n        EXPORT         = 106, // export keyword\n        IMPORT         = 107, // import keyword\n        IF             = 108, // if keyword\n        ELSE           = 109, // else keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT        = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        FINALLY        = 121, // finally keyword\n        VOID           = 122, // void keyword\n        RESERVED       = 123, // reserved keywords\n\n        EMPTY          = 124,\n\n        /* types used for the parse tree - these never get returned\n         * by the scanner.\n         */\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        TARGET         = 127,\n        LOOP           = 128,\n        EXPR_VOID      = 129, // expression statement in functions\n        EXPR_RESULT    = 130, // expression statement in scripts\n        JSR            = 131,\n        SCRIPT         = 132, // top-level node for entire script\n        TYPEOFNAME     = 133, // for typeof(simple-name)\n        USE_STACK      = 134,\n        SETPROP_OP     = 135, // x.y op= something\n        SETELEM_OP     = 136, // x[y] op= something\n        LOCAL_BLOCK    = 137,\n        SET_REF_OP     = 138, // *reference op= something\n\n        // For XML support:\n        DOTDOT         = 139,  // member operator (..)\n        COLONCOLON     = 140,  // namespace::name\n        XML            = 141,  // XML type\n        DOTQUERY       = 142,  // .() -- e.g., x.emps.emp.(name == \"terry\")\n        XMLATTR        = 143,  // @\n        XMLEND         = 144,\n\n        // Optimizer-only-tokens\n        TO_OBJECT      = 145,\n        TO_DOUBLE      = 146,\n\n        GET            = 147,  // JS 1.5 get pseudo keyword\n        SET            = 148,  // JS 1.5 set pseudo keyword\n\n        CONST          = 149,  // JS 1.5 const keyword\n        SETCONST       = 150,\n        SETCONSTVAR    = 151,\n        DEBUGGER       = 152,\n        LAST_TOKEN     = 152,\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307;",
        "begin_line": 183,
        "end_line": 264,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.CASE",
        "snippet": "    public final static int\n        FIRST_ASSIGN   = ASSIGN,\n        LAST_ASSIGN    = ASSIGN_MOD,\n\n        HOOK           = 98, // conditional (?:)\n        COLON          = 99,\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment/decrement (++ --)\n        DEC            = 103,\n        DOT            = 104, // member operator (.)\n        FUNCTION       = 105, // function keyword\n        EXPORT         = 106, // export keyword\n        IMPORT         = 107, // import keyword\n        IF             = 108, // if keyword\n        ELSE           = 109, // else keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT        = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        FINALLY        = 121, // finally keyword\n        VOID           = 122, // void keyword\n        RESERVED       = 123, // reserved keywords\n\n        EMPTY          = 124,\n\n        /* types used for the parse tree - these never get returned\n         * by the scanner.\n         */\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        TARGET         = 127,\n        LOOP           = 128,\n        EXPR_VOID      = 129, // expression statement in functions\n        EXPR_RESULT    = 130, // expression statement in scripts\n        JSR            = 131,\n        SCRIPT         = 132, // top-level node for entire script\n        TYPEOFNAME     = 133, // for typeof(simple-name)\n        USE_STACK      = 134,\n        SETPROP_OP     = 135, // x.y op= something\n        SETELEM_OP     = 136, // x[y] op= something\n        LOCAL_BLOCK    = 137,\n        SET_REF_OP     = 138, // *reference op= something\n\n        // For XML support:\n        DOTDOT         = 139,  // member operator (..)\n        COLONCOLON     = 140,  // namespace::name\n        XML            = 141,  // XML type\n        DOTQUERY       = 142,  // .() -- e.g., x.emps.emp.(name == \"terry\")\n        XMLATTR        = 143,  // @\n        XMLEND         = 144,\n\n        // Optimizer-only-tokens\n        TO_OBJECT      = 145,\n        TO_DOUBLE      = 146,\n\n        GET            = 147,  // JS 1.5 get pseudo keyword\n        SET            = 148,  // JS 1.5 set pseudo keyword\n\n        CONST          = 149,  // JS 1.5 const keyword\n        SETCONST       = 150,\n        SETCONSTVAR    = 151,\n        DEBUGGER       = 152,\n        LAST_TOKEN     = 152,\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307;",
        "begin_line": 183,
        "end_line": 264,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.DEFAULT",
        "snippet": "    public final static int\n        FIRST_ASSIGN   = ASSIGN,\n        LAST_ASSIGN    = ASSIGN_MOD,\n\n        HOOK           = 98, // conditional (?:)\n        COLON          = 99,\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment/decrement (++ --)\n        DEC            = 103,\n        DOT            = 104, // member operator (.)\n        FUNCTION       = 105, // function keyword\n        EXPORT         = 106, // export keyword\n        IMPORT         = 107, // import keyword\n        IF             = 108, // if keyword\n        ELSE           = 109, // else keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT        = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        FINALLY        = 121, // finally keyword\n        VOID           = 122, // void keyword\n        RESERVED       = 123, // reserved keywords\n\n        EMPTY          = 124,\n\n        /* types used for the parse tree - these never get returned\n         * by the scanner.\n         */\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        TARGET         = 127,\n        LOOP           = 128,\n        EXPR_VOID      = 129, // expression statement in functions\n        EXPR_RESULT    = 130, // expression statement in scripts\n        JSR            = 131,\n        SCRIPT         = 132, // top-level node for entire script\n        TYPEOFNAME     = 133, // for typeof(simple-name)\n        USE_STACK      = 134,\n        SETPROP_OP     = 135, // x.y op= something\n        SETELEM_OP     = 136, // x[y] op= something\n        LOCAL_BLOCK    = 137,\n        SET_REF_OP     = 138, // *reference op= something\n\n        // For XML support:\n        DOTDOT         = 139,  // member operator (..)\n        COLONCOLON     = 140,  // namespace::name\n        XML            = 141,  // XML type\n        DOTQUERY       = 142,  // .() -- e.g., x.emps.emp.(name == \"terry\")\n        XMLATTR        = 143,  // @\n        XMLEND         = 144,\n\n        // Optimizer-only-tokens\n        TO_OBJECT      = 145,\n        TO_DOUBLE      = 146,\n\n        GET            = 147,  // JS 1.5 get pseudo keyword\n        SET            = 148,  // JS 1.5 set pseudo keyword\n\n        CONST          = 149,  // JS 1.5 const keyword\n        SETCONST       = 150,\n        SETCONSTVAR    = 151,\n        DEBUGGER       = 152,\n        LAST_TOKEN     = 152,\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307;",
        "begin_line": 183,
        "end_line": 264,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.WHILE",
        "snippet": "    public final static int\n        FIRST_ASSIGN   = ASSIGN,\n        LAST_ASSIGN    = ASSIGN_MOD,\n\n        HOOK           = 98, // conditional (?:)\n        COLON          = 99,\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment/decrement (++ --)\n        DEC            = 103,\n        DOT            = 104, // member operator (.)\n        FUNCTION       = 105, // function keyword\n        EXPORT         = 106, // export keyword\n        IMPORT         = 107, // import keyword\n        IF             = 108, // if keyword\n        ELSE           = 109, // else keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT        = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        FINALLY        = 121, // finally keyword\n        VOID           = 122, // void keyword\n        RESERVED       = 123, // reserved keywords\n\n        EMPTY          = 124,\n\n        /* types used for the parse tree - these never get returned\n         * by the scanner.\n         */\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        TARGET         = 127,\n        LOOP           = 128,\n        EXPR_VOID      = 129, // expression statement in functions\n        EXPR_RESULT    = 130, // expression statement in scripts\n        JSR            = 131,\n        SCRIPT         = 132, // top-level node for entire script\n        TYPEOFNAME     = 133, // for typeof(simple-name)\n        USE_STACK      = 134,\n        SETPROP_OP     = 135, // x.y op= something\n        SETELEM_OP     = 136, // x[y] op= something\n        LOCAL_BLOCK    = 137,\n        SET_REF_OP     = 138, // *reference op= something\n\n        // For XML support:\n        DOTDOT         = 139,  // member operator (..)\n        COLONCOLON     = 140,  // namespace::name\n        XML            = 141,  // XML type\n        DOTQUERY       = 142,  // .() -- e.g., x.emps.emp.(name == \"terry\")\n        XMLATTR        = 143,  // @\n        XMLEND         = 144,\n\n        // Optimizer-only-tokens\n        TO_OBJECT      = 145,\n        TO_DOUBLE      = 146,\n\n        GET            = 147,  // JS 1.5 get pseudo keyword\n        SET            = 148,  // JS 1.5 set pseudo keyword\n\n        CONST          = 149,  // JS 1.5 const keyword\n        SETCONST       = 150,\n        SETCONSTVAR    = 151,\n        DEBUGGER       = 152,\n        LAST_TOKEN     = 152,\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307;",
        "begin_line": 183,
        "end_line": 264,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.DO",
        "snippet": "    public final static int\n        FIRST_ASSIGN   = ASSIGN,\n        LAST_ASSIGN    = ASSIGN_MOD,\n\n        HOOK           = 98, // conditional (?:)\n        COLON          = 99,\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment/decrement (++ --)\n        DEC            = 103,\n        DOT            = 104, // member operator (.)\n        FUNCTION       = 105, // function keyword\n        EXPORT         = 106, // export keyword\n        IMPORT         = 107, // import keyword\n        IF             = 108, // if keyword\n        ELSE           = 109, // else keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT        = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        FINALLY        = 121, // finally keyword\n        VOID           = 122, // void keyword\n        RESERVED       = 123, // reserved keywords\n\n        EMPTY          = 124,\n\n        /* types used for the parse tree - these never get returned\n         * by the scanner.\n         */\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        TARGET         = 127,\n        LOOP           = 128,\n        EXPR_VOID      = 129, // expression statement in functions\n        EXPR_RESULT    = 130, // expression statement in scripts\n        JSR            = 131,\n        SCRIPT         = 132, // top-level node for entire script\n        TYPEOFNAME     = 133, // for typeof(simple-name)\n        USE_STACK      = 134,\n        SETPROP_OP     = 135, // x.y op= something\n        SETELEM_OP     = 136, // x[y] op= something\n        LOCAL_BLOCK    = 137,\n        SET_REF_OP     = 138, // *reference op= something\n\n        // For XML support:\n        DOTDOT         = 139,  // member operator (..)\n        COLONCOLON     = 140,  // namespace::name\n        XML            = 141,  // XML type\n        DOTQUERY       = 142,  // .() -- e.g., x.emps.emp.(name == \"terry\")\n        XMLATTR        = 143,  // @\n        XMLEND         = 144,\n\n        // Optimizer-only-tokens\n        TO_OBJECT      = 145,\n        TO_DOUBLE      = 146,\n\n        GET            = 147,  // JS 1.5 get pseudo keyword\n        SET            = 148,  // JS 1.5 set pseudo keyword\n\n        CONST          = 149,  // JS 1.5 const keyword\n        SETCONST       = 150,\n        SETCONSTVAR    = 151,\n        DEBUGGER       = 152,\n        LAST_TOKEN     = 152,\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307;",
        "begin_line": 183,
        "end_line": 264,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.FOR",
        "snippet": "    public final static int\n        FIRST_ASSIGN   = ASSIGN,\n        LAST_ASSIGN    = ASSIGN_MOD,\n\n        HOOK           = 98, // conditional (?:)\n        COLON          = 99,\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment/decrement (++ --)\n        DEC            = 103,\n        DOT            = 104, // member operator (.)\n        FUNCTION       = 105, // function keyword\n        EXPORT         = 106, // export keyword\n        IMPORT         = 107, // import keyword\n        IF             = 108, // if keyword\n        ELSE           = 109, // else keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT        = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        FINALLY        = 121, // finally keyword\n        VOID           = 122, // void keyword\n        RESERVED       = 123, // reserved keywords\n\n        EMPTY          = 124,\n\n        /* types used for the parse tree - these never get returned\n         * by the scanner.\n         */\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        TARGET         = 127,\n        LOOP           = 128,\n        EXPR_VOID      = 129, // expression statement in functions\n        EXPR_RESULT    = 130, // expression statement in scripts\n        JSR            = 131,\n        SCRIPT         = 132, // top-level node for entire script\n        TYPEOFNAME     = 133, // for typeof(simple-name)\n        USE_STACK      = 134,\n        SETPROP_OP     = 135, // x.y op= something\n        SETELEM_OP     = 136, // x[y] op= something\n        LOCAL_BLOCK    = 137,\n        SET_REF_OP     = 138, // *reference op= something\n\n        // For XML support:\n        DOTDOT         = 139,  // member operator (..)\n        COLONCOLON     = 140,  // namespace::name\n        XML            = 141,  // XML type\n        DOTQUERY       = 142,  // .() -- e.g., x.emps.emp.(name == \"terry\")\n        XMLATTR        = 143,  // @\n        XMLEND         = 144,\n\n        // Optimizer-only-tokens\n        TO_OBJECT      = 145,\n        TO_DOUBLE      = 146,\n\n        GET            = 147,  // JS 1.5 get pseudo keyword\n        SET            = 148,  // JS 1.5 set pseudo keyword\n\n        CONST          = 149,  // JS 1.5 const keyword\n        SETCONST       = 150,\n        SETCONSTVAR    = 151,\n        DEBUGGER       = 152,\n        LAST_TOKEN     = 152,\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307;",
        "begin_line": 183,
        "end_line": 264,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.BREAK",
        "snippet": "    public final static int\n        FIRST_ASSIGN   = ASSIGN,\n        LAST_ASSIGN    = ASSIGN_MOD,\n\n        HOOK           = 98, // conditional (?:)\n        COLON          = 99,\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment/decrement (++ --)\n        DEC            = 103,\n        DOT            = 104, // member operator (.)\n        FUNCTION       = 105, // function keyword\n        EXPORT         = 106, // export keyword\n        IMPORT         = 107, // import keyword\n        IF             = 108, // if keyword\n        ELSE           = 109, // else keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT        = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        FINALLY        = 121, // finally keyword\n        VOID           = 122, // void keyword\n        RESERVED       = 123, // reserved keywords\n\n        EMPTY          = 124,\n\n        /* types used for the parse tree - these never get returned\n         * by the scanner.\n         */\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        TARGET         = 127,\n        LOOP           = 128,\n        EXPR_VOID      = 129, // expression statement in functions\n        EXPR_RESULT    = 130, // expression statement in scripts\n        JSR            = 131,\n        SCRIPT         = 132, // top-level node for entire script\n        TYPEOFNAME     = 133, // for typeof(simple-name)\n        USE_STACK      = 134,\n        SETPROP_OP     = 135, // x.y op= something\n        SETELEM_OP     = 136, // x[y] op= something\n        LOCAL_BLOCK    = 137,\n        SET_REF_OP     = 138, // *reference op= something\n\n        // For XML support:\n        DOTDOT         = 139,  // member operator (..)\n        COLONCOLON     = 140,  // namespace::name\n        XML            = 141,  // XML type\n        DOTQUERY       = 142,  // .() -- e.g., x.emps.emp.(name == \"terry\")\n        XMLATTR        = 143,  // @\n        XMLEND         = 144,\n\n        // Optimizer-only-tokens\n        TO_OBJECT      = 145,\n        TO_DOUBLE      = 146,\n\n        GET            = 147,  // JS 1.5 get pseudo keyword\n        SET            = 148,  // JS 1.5 set pseudo keyword\n\n        CONST          = 149,  // JS 1.5 const keyword\n        SETCONST       = 150,\n        SETCONSTVAR    = 151,\n        DEBUGGER       = 152,\n        LAST_TOKEN     = 152,\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307;",
        "begin_line": 183,
        "end_line": 264,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.CONTINUE",
        "snippet": "    public final static int\n        FIRST_ASSIGN   = ASSIGN,\n        LAST_ASSIGN    = ASSIGN_MOD,\n\n        HOOK           = 98, // conditional (?:)\n        COLON          = 99,\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment/decrement (++ --)\n        DEC            = 103,\n        DOT            = 104, // member operator (.)\n        FUNCTION       = 105, // function keyword\n        EXPORT         = 106, // export keyword\n        IMPORT         = 107, // import keyword\n        IF             = 108, // if keyword\n        ELSE           = 109, // else keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT        = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        FINALLY        = 121, // finally keyword\n        VOID           = 122, // void keyword\n        RESERVED       = 123, // reserved keywords\n\n        EMPTY          = 124,\n\n        /* types used for the parse tree - these never get returned\n         * by the scanner.\n         */\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        TARGET         = 127,\n        LOOP           = 128,\n        EXPR_VOID      = 129, // expression statement in functions\n        EXPR_RESULT    = 130, // expression statement in scripts\n        JSR            = 131,\n        SCRIPT         = 132, // top-level node for entire script\n        TYPEOFNAME     = 133, // for typeof(simple-name)\n        USE_STACK      = 134,\n        SETPROP_OP     = 135, // x.y op= something\n        SETELEM_OP     = 136, // x[y] op= something\n        LOCAL_BLOCK    = 137,\n        SET_REF_OP     = 138, // *reference op= something\n\n        // For XML support:\n        DOTDOT         = 139,  // member operator (..)\n        COLONCOLON     = 140,  // namespace::name\n        XML            = 141,  // XML type\n        DOTQUERY       = 142,  // .() -- e.g., x.emps.emp.(name == \"terry\")\n        XMLATTR        = 143,  // @\n        XMLEND         = 144,\n\n        // Optimizer-only-tokens\n        TO_OBJECT      = 145,\n        TO_DOUBLE      = 146,\n\n        GET            = 147,  // JS 1.5 get pseudo keyword\n        SET            = 148,  // JS 1.5 set pseudo keyword\n\n        CONST          = 149,  // JS 1.5 const keyword\n        SETCONST       = 150,\n        SETCONSTVAR    = 151,\n        DEBUGGER       = 152,\n        LAST_TOKEN     = 152,\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307;",
        "begin_line": 183,
        "end_line": 264,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.VAR",
        "snippet": "    public final static int\n        FIRST_ASSIGN   = ASSIGN,\n        LAST_ASSIGN    = ASSIGN_MOD,\n\n        HOOK           = 98, // conditional (?:)\n        COLON          = 99,\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment/decrement (++ --)\n        DEC            = 103,\n        DOT            = 104, // member operator (.)\n        FUNCTION       = 105, // function keyword\n        EXPORT         = 106, // export keyword\n        IMPORT         = 107, // import keyword\n        IF             = 108, // if keyword\n        ELSE           = 109, // else keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT        = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        FINALLY        = 121, // finally keyword\n        VOID           = 122, // void keyword\n        RESERVED       = 123, // reserved keywords\n\n        EMPTY          = 124,\n\n        /* types used for the parse tree - these never get returned\n         * by the scanner.\n         */\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        TARGET         = 127,\n        LOOP           = 128,\n        EXPR_VOID      = 129, // expression statement in functions\n        EXPR_RESULT    = 130, // expression statement in scripts\n        JSR            = 131,\n        SCRIPT         = 132, // top-level node for entire script\n        TYPEOFNAME     = 133, // for typeof(simple-name)\n        USE_STACK      = 134,\n        SETPROP_OP     = 135, // x.y op= something\n        SETELEM_OP     = 136, // x[y] op= something\n        LOCAL_BLOCK    = 137,\n        SET_REF_OP     = 138, // *reference op= something\n\n        // For XML support:\n        DOTDOT         = 139,  // member operator (..)\n        COLONCOLON     = 140,  // namespace::name\n        XML            = 141,  // XML type\n        DOTQUERY       = 142,  // .() -- e.g., x.emps.emp.(name == \"terry\")\n        XMLATTR        = 143,  // @\n        XMLEND         = 144,\n\n        // Optimizer-only-tokens\n        TO_OBJECT      = 145,\n        TO_DOUBLE      = 146,\n\n        GET            = 147,  // JS 1.5 get pseudo keyword\n        SET            = 148,  // JS 1.5 set pseudo keyword\n\n        CONST          = 149,  // JS 1.5 const keyword\n        SETCONST       = 150,\n        SETCONSTVAR    = 151,\n        DEBUGGER       = 152,\n        LAST_TOKEN     = 152,\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307;",
        "begin_line": 183,
        "end_line": 264,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.WITH",
        "snippet": "    public final static int\n        FIRST_ASSIGN   = ASSIGN,\n        LAST_ASSIGN    = ASSIGN_MOD,\n\n        HOOK           = 98, // conditional (?:)\n        COLON          = 99,\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment/decrement (++ --)\n        DEC            = 103,\n        DOT            = 104, // member operator (.)\n        FUNCTION       = 105, // function keyword\n        EXPORT         = 106, // export keyword\n        IMPORT         = 107, // import keyword\n        IF             = 108, // if keyword\n        ELSE           = 109, // else keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT        = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        FINALLY        = 121, // finally keyword\n        VOID           = 122, // void keyword\n        RESERVED       = 123, // reserved keywords\n\n        EMPTY          = 124,\n\n        /* types used for the parse tree - these never get returned\n         * by the scanner.\n         */\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        TARGET         = 127,\n        LOOP           = 128,\n        EXPR_VOID      = 129, // expression statement in functions\n        EXPR_RESULT    = 130, // expression statement in scripts\n        JSR            = 131,\n        SCRIPT         = 132, // top-level node for entire script\n        TYPEOFNAME     = 133, // for typeof(simple-name)\n        USE_STACK      = 134,\n        SETPROP_OP     = 135, // x.y op= something\n        SETELEM_OP     = 136, // x[y] op= something\n        LOCAL_BLOCK    = 137,\n        SET_REF_OP     = 138, // *reference op= something\n\n        // For XML support:\n        DOTDOT         = 139,  // member operator (..)\n        COLONCOLON     = 140,  // namespace::name\n        XML            = 141,  // XML type\n        DOTQUERY       = 142,  // .() -- e.g., x.emps.emp.(name == \"terry\")\n        XMLATTR        = 143,  // @\n        XMLEND         = 144,\n\n        // Optimizer-only-tokens\n        TO_OBJECT      = 145,\n        TO_DOUBLE      = 146,\n\n        GET            = 147,  // JS 1.5 get pseudo keyword\n        SET            = 148,  // JS 1.5 set pseudo keyword\n\n        CONST          = 149,  // JS 1.5 const keyword\n        SETCONST       = 150,\n        SETCONSTVAR    = 151,\n        DEBUGGER       = 152,\n        LAST_TOKEN     = 152,\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307;",
        "begin_line": 183,
        "end_line": 264,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.CATCH",
        "snippet": "    public final static int\n        FIRST_ASSIGN   = ASSIGN,\n        LAST_ASSIGN    = ASSIGN_MOD,\n\n        HOOK           = 98, // conditional (?:)\n        COLON          = 99,\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment/decrement (++ --)\n        DEC            = 103,\n        DOT            = 104, // member operator (.)\n        FUNCTION       = 105, // function keyword\n        EXPORT         = 106, // export keyword\n        IMPORT         = 107, // import keyword\n        IF             = 108, // if keyword\n        ELSE           = 109, // else keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT        = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        FINALLY        = 121, // finally keyword\n        VOID           = 122, // void keyword\n        RESERVED       = 123, // reserved keywords\n\n        EMPTY          = 124,\n\n        /* types used for the parse tree - these never get returned\n         * by the scanner.\n         */\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        TARGET         = 127,\n        LOOP           = 128,\n        EXPR_VOID      = 129, // expression statement in functions\n        EXPR_RESULT    = 130, // expression statement in scripts\n        JSR            = 131,\n        SCRIPT         = 132, // top-level node for entire script\n        TYPEOFNAME     = 133, // for typeof(simple-name)\n        USE_STACK      = 134,\n        SETPROP_OP     = 135, // x.y op= something\n        SETELEM_OP     = 136, // x[y] op= something\n        LOCAL_BLOCK    = 137,\n        SET_REF_OP     = 138, // *reference op= something\n\n        // For XML support:\n        DOTDOT         = 139,  // member operator (..)\n        COLONCOLON     = 140,  // namespace::name\n        XML            = 141,  // XML type\n        DOTQUERY       = 142,  // .() -- e.g., x.emps.emp.(name == \"terry\")\n        XMLATTR        = 143,  // @\n        XMLEND         = 144,\n\n        // Optimizer-only-tokens\n        TO_OBJECT      = 145,\n        TO_DOUBLE      = 146,\n\n        GET            = 147,  // JS 1.5 get pseudo keyword\n        SET            = 148,  // JS 1.5 set pseudo keyword\n\n        CONST          = 149,  // JS 1.5 const keyword\n        SETCONST       = 150,\n        SETCONSTVAR    = 151,\n        DEBUGGER       = 152,\n        LAST_TOKEN     = 152,\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307;",
        "begin_line": 183,
        "end_line": 264,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.FINALLY",
        "snippet": "    public final static int\n        FIRST_ASSIGN   = ASSIGN,\n        LAST_ASSIGN    = ASSIGN_MOD,\n\n        HOOK           = 98, // conditional (?:)\n        COLON          = 99,\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment/decrement (++ --)\n        DEC            = 103,\n        DOT            = 104, // member operator (.)\n        FUNCTION       = 105, // function keyword\n        EXPORT         = 106, // export keyword\n        IMPORT         = 107, // import keyword\n        IF             = 108, // if keyword\n        ELSE           = 109, // else keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT        = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        FINALLY        = 121, // finally keyword\n        VOID           = 122, // void keyword\n        RESERVED       = 123, // reserved keywords\n\n        EMPTY          = 124,\n\n        /* types used for the parse tree - these never get returned\n         * by the scanner.\n         */\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        TARGET         = 127,\n        LOOP           = 128,\n        EXPR_VOID      = 129, // expression statement in functions\n        EXPR_RESULT    = 130, // expression statement in scripts\n        JSR            = 131,\n        SCRIPT         = 132, // top-level node for entire script\n        TYPEOFNAME     = 133, // for typeof(simple-name)\n        USE_STACK      = 134,\n        SETPROP_OP     = 135, // x.y op= something\n        SETELEM_OP     = 136, // x[y] op= something\n        LOCAL_BLOCK    = 137,\n        SET_REF_OP     = 138, // *reference op= something\n\n        // For XML support:\n        DOTDOT         = 139,  // member operator (..)\n        COLONCOLON     = 140,  // namespace::name\n        XML            = 141,  // XML type\n        DOTQUERY       = 142,  // .() -- e.g., x.emps.emp.(name == \"terry\")\n        XMLATTR        = 143,  // @\n        XMLEND         = 144,\n\n        // Optimizer-only-tokens\n        TO_OBJECT      = 145,\n        TO_DOUBLE      = 146,\n\n        GET            = 147,  // JS 1.5 get pseudo keyword\n        SET            = 148,  // JS 1.5 set pseudo keyword\n\n        CONST          = 149,  // JS 1.5 const keyword\n        SETCONST       = 150,\n        SETCONSTVAR    = 151,\n        DEBUGGER       = 152,\n        LAST_TOKEN     = 152,\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307;",
        "begin_line": 183,
        "end_line": 264,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.VOID",
        "snippet": "    public final static int\n        FIRST_ASSIGN   = ASSIGN,\n        LAST_ASSIGN    = ASSIGN_MOD,\n\n        HOOK           = 98, // conditional (?:)\n        COLON          = 99,\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment/decrement (++ --)\n        DEC            = 103,\n        DOT            = 104, // member operator (.)\n        FUNCTION       = 105, // function keyword\n        EXPORT         = 106, // export keyword\n        IMPORT         = 107, // import keyword\n        IF             = 108, // if keyword\n        ELSE           = 109, // else keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT        = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        FINALLY        = 121, // finally keyword\n        VOID           = 122, // void keyword\n        RESERVED       = 123, // reserved keywords\n\n        EMPTY          = 124,\n\n        /* types used for the parse tree - these never get returned\n         * by the scanner.\n         */\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        TARGET         = 127,\n        LOOP           = 128,\n        EXPR_VOID      = 129, // expression statement in functions\n        EXPR_RESULT    = 130, // expression statement in scripts\n        JSR            = 131,\n        SCRIPT         = 132, // top-level node for entire script\n        TYPEOFNAME     = 133, // for typeof(simple-name)\n        USE_STACK      = 134,\n        SETPROP_OP     = 135, // x.y op= something\n        SETELEM_OP     = 136, // x[y] op= something\n        LOCAL_BLOCK    = 137,\n        SET_REF_OP     = 138, // *reference op= something\n\n        // For XML support:\n        DOTDOT         = 139,  // member operator (..)\n        COLONCOLON     = 140,  // namespace::name\n        XML            = 141,  // XML type\n        DOTQUERY       = 142,  // .() -- e.g., x.emps.emp.(name == \"terry\")\n        XMLATTR        = 143,  // @\n        XMLEND         = 144,\n\n        // Optimizer-only-tokens\n        TO_OBJECT      = 145,\n        TO_DOUBLE      = 146,\n\n        GET            = 147,  // JS 1.5 get pseudo keyword\n        SET            = 148,  // JS 1.5 set pseudo keyword\n\n        CONST          = 149,  // JS 1.5 const keyword\n        SETCONST       = 150,\n        SETCONSTVAR    = 151,\n        DEBUGGER       = 152,\n        LAST_TOKEN     = 152,\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307;",
        "begin_line": 183,
        "end_line": 264,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.RESERVED",
        "snippet": "    public final static int\n        FIRST_ASSIGN   = ASSIGN,\n        LAST_ASSIGN    = ASSIGN_MOD,\n\n        HOOK           = 98, // conditional (?:)\n        COLON          = 99,\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment/decrement (++ --)\n        DEC            = 103,\n        DOT            = 104, // member operator (.)\n        FUNCTION       = 105, // function keyword\n        EXPORT         = 106, // export keyword\n        IMPORT         = 107, // import keyword\n        IF             = 108, // if keyword\n        ELSE           = 109, // else keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT        = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        FINALLY        = 121, // finally keyword\n        VOID           = 122, // void keyword\n        RESERVED       = 123, // reserved keywords\n\n        EMPTY          = 124,\n\n        /* types used for the parse tree - these never get returned\n         * by the scanner.\n         */\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        TARGET         = 127,\n        LOOP           = 128,\n        EXPR_VOID      = 129, // expression statement in functions\n        EXPR_RESULT    = 130, // expression statement in scripts\n        JSR            = 131,\n        SCRIPT         = 132, // top-level node for entire script\n        TYPEOFNAME     = 133, // for typeof(simple-name)\n        USE_STACK      = 134,\n        SETPROP_OP     = 135, // x.y op= something\n        SETELEM_OP     = 136, // x[y] op= something\n        LOCAL_BLOCK    = 137,\n        SET_REF_OP     = 138, // *reference op= something\n\n        // For XML support:\n        DOTDOT         = 139,  // member operator (..)\n        COLONCOLON     = 140,  // namespace::name\n        XML            = 141,  // XML type\n        DOTQUERY       = 142,  // .() -- e.g., x.emps.emp.(name == \"terry\")\n        XMLATTR        = 143,  // @\n        XMLEND         = 144,\n\n        // Optimizer-only-tokens\n        TO_OBJECT      = 145,\n        TO_DOUBLE      = 146,\n\n        GET            = 147,  // JS 1.5 get pseudo keyword\n        SET            = 148,  // JS 1.5 set pseudo keyword\n\n        CONST          = 149,  // JS 1.5 const keyword\n        SETCONST       = 150,\n        SETCONSTVAR    = 151,\n        DEBUGGER       = 152,\n        LAST_TOKEN     = 152,\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307;",
        "begin_line": 183,
        "end_line": 264,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.EMPTY",
        "snippet": "    public final static int\n        FIRST_ASSIGN   = ASSIGN,\n        LAST_ASSIGN    = ASSIGN_MOD,\n\n        HOOK           = 98, // conditional (?:)\n        COLON          = 99,\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment/decrement (++ --)\n        DEC            = 103,\n        DOT            = 104, // member operator (.)\n        FUNCTION       = 105, // function keyword\n        EXPORT         = 106, // export keyword\n        IMPORT         = 107, // import keyword\n        IF             = 108, // if keyword\n        ELSE           = 109, // else keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT        = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        FINALLY        = 121, // finally keyword\n        VOID           = 122, // void keyword\n        RESERVED       = 123, // reserved keywords\n\n        EMPTY          = 124,\n\n        /* types used for the parse tree - these never get returned\n         * by the scanner.\n         */\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        TARGET         = 127,\n        LOOP           = 128,\n        EXPR_VOID      = 129, // expression statement in functions\n        EXPR_RESULT    = 130, // expression statement in scripts\n        JSR            = 131,\n        SCRIPT         = 132, // top-level node for entire script\n        TYPEOFNAME     = 133, // for typeof(simple-name)\n        USE_STACK      = 134,\n        SETPROP_OP     = 135, // x.y op= something\n        SETELEM_OP     = 136, // x[y] op= something\n        LOCAL_BLOCK    = 137,\n        SET_REF_OP     = 138, // *reference op= something\n\n        // For XML support:\n        DOTDOT         = 139,  // member operator (..)\n        COLONCOLON     = 140,  // namespace::name\n        XML            = 141,  // XML type\n        DOTQUERY       = 142,  // .() -- e.g., x.emps.emp.(name == \"terry\")\n        XMLATTR        = 143,  // @\n        XMLEND         = 144,\n\n        // Optimizer-only-tokens\n        TO_OBJECT      = 145,\n        TO_DOUBLE      = 146,\n\n        GET            = 147,  // JS 1.5 get pseudo keyword\n        SET            = 148,  // JS 1.5 set pseudo keyword\n\n        CONST          = 149,  // JS 1.5 const keyword\n        SETCONST       = 150,\n        SETCONSTVAR    = 151,\n        DEBUGGER       = 152,\n        LAST_TOKEN     = 152,\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307;",
        "begin_line": 183,
        "end_line": 264,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.BLOCK",
        "snippet": "    public final static int\n        FIRST_ASSIGN   = ASSIGN,\n        LAST_ASSIGN    = ASSIGN_MOD,\n\n        HOOK           = 98, // conditional (?:)\n        COLON          = 99,\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment/decrement (++ --)\n        DEC            = 103,\n        DOT            = 104, // member operator (.)\n        FUNCTION       = 105, // function keyword\n        EXPORT         = 106, // export keyword\n        IMPORT         = 107, // import keyword\n        IF             = 108, // if keyword\n        ELSE           = 109, // else keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT        = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        FINALLY        = 121, // finally keyword\n        VOID           = 122, // void keyword\n        RESERVED       = 123, // reserved keywords\n\n        EMPTY          = 124,\n\n        /* types used for the parse tree - these never get returned\n         * by the scanner.\n         */\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        TARGET         = 127,\n        LOOP           = 128,\n        EXPR_VOID      = 129, // expression statement in functions\n        EXPR_RESULT    = 130, // expression statement in scripts\n        JSR            = 131,\n        SCRIPT         = 132, // top-level node for entire script\n        TYPEOFNAME     = 133, // for typeof(simple-name)\n        USE_STACK      = 134,\n        SETPROP_OP     = 135, // x.y op= something\n        SETELEM_OP     = 136, // x[y] op= something\n        LOCAL_BLOCK    = 137,\n        SET_REF_OP     = 138, // *reference op= something\n\n        // For XML support:\n        DOTDOT         = 139,  // member operator (..)\n        COLONCOLON     = 140,  // namespace::name\n        XML            = 141,  // XML type\n        DOTQUERY       = 142,  // .() -- e.g., x.emps.emp.(name == \"terry\")\n        XMLATTR        = 143,  // @\n        XMLEND         = 144,\n\n        // Optimizer-only-tokens\n        TO_OBJECT      = 145,\n        TO_DOUBLE      = 146,\n\n        GET            = 147,  // JS 1.5 get pseudo keyword\n        SET            = 148,  // JS 1.5 set pseudo keyword\n\n        CONST          = 149,  // JS 1.5 const keyword\n        SETCONST       = 150,\n        SETCONSTVAR    = 151,\n        DEBUGGER       = 152,\n        LAST_TOKEN     = 152,\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307;",
        "begin_line": 183,
        "end_line": 264,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.LABEL",
        "snippet": "    public final static int\n        FIRST_ASSIGN   = ASSIGN,\n        LAST_ASSIGN    = ASSIGN_MOD,\n\n        HOOK           = 98, // conditional (?:)\n        COLON          = 99,\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment/decrement (++ --)\n        DEC            = 103,\n        DOT            = 104, // member operator (.)\n        FUNCTION       = 105, // function keyword\n        EXPORT         = 106, // export keyword\n        IMPORT         = 107, // import keyword\n        IF             = 108, // if keyword\n        ELSE           = 109, // else keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT        = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        FINALLY        = 121, // finally keyword\n        VOID           = 122, // void keyword\n        RESERVED       = 123, // reserved keywords\n\n        EMPTY          = 124,\n\n        /* types used for the parse tree - these never get returned\n         * by the scanner.\n         */\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        TARGET         = 127,\n        LOOP           = 128,\n        EXPR_VOID      = 129, // expression statement in functions\n        EXPR_RESULT    = 130, // expression statement in scripts\n        JSR            = 131,\n        SCRIPT         = 132, // top-level node for entire script\n        TYPEOFNAME     = 133, // for typeof(simple-name)\n        USE_STACK      = 134,\n        SETPROP_OP     = 135, // x.y op= something\n        SETELEM_OP     = 136, // x[y] op= something\n        LOCAL_BLOCK    = 137,\n        SET_REF_OP     = 138, // *reference op= something\n\n        // For XML support:\n        DOTDOT         = 139,  // member operator (..)\n        COLONCOLON     = 140,  // namespace::name\n        XML            = 141,  // XML type\n        DOTQUERY       = 142,  // .() -- e.g., x.emps.emp.(name == \"terry\")\n        XMLATTR        = 143,  // @\n        XMLEND         = 144,\n\n        // Optimizer-only-tokens\n        TO_OBJECT      = 145,\n        TO_DOUBLE      = 146,\n\n        GET            = 147,  // JS 1.5 get pseudo keyword\n        SET            = 148,  // JS 1.5 set pseudo keyword\n\n        CONST          = 149,  // JS 1.5 const keyword\n        SETCONST       = 150,\n        SETCONSTVAR    = 151,\n        DEBUGGER       = 152,\n        LAST_TOKEN     = 152,\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307;",
        "begin_line": 183,
        "end_line": 264,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.TARGET",
        "snippet": "    public final static int\n        FIRST_ASSIGN   = ASSIGN,\n        LAST_ASSIGN    = ASSIGN_MOD,\n\n        HOOK           = 98, // conditional (?:)\n        COLON          = 99,\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment/decrement (++ --)\n        DEC            = 103,\n        DOT            = 104, // member operator (.)\n        FUNCTION       = 105, // function keyword\n        EXPORT         = 106, // export keyword\n        IMPORT         = 107, // import keyword\n        IF             = 108, // if keyword\n        ELSE           = 109, // else keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT        = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        FINALLY        = 121, // finally keyword\n        VOID           = 122, // void keyword\n        RESERVED       = 123, // reserved keywords\n\n        EMPTY          = 124,\n\n        /* types used for the parse tree - these never get returned\n         * by the scanner.\n         */\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        TARGET         = 127,\n        LOOP           = 128,\n        EXPR_VOID      = 129, // expression statement in functions\n        EXPR_RESULT    = 130, // expression statement in scripts\n        JSR            = 131,\n        SCRIPT         = 132, // top-level node for entire script\n        TYPEOFNAME     = 133, // for typeof(simple-name)\n        USE_STACK      = 134,\n        SETPROP_OP     = 135, // x.y op= something\n        SETELEM_OP     = 136, // x[y] op= something\n        LOCAL_BLOCK    = 137,\n        SET_REF_OP     = 138, // *reference op= something\n\n        // For XML support:\n        DOTDOT         = 139,  // member operator (..)\n        COLONCOLON     = 140,  // namespace::name\n        XML            = 141,  // XML type\n        DOTQUERY       = 142,  // .() -- e.g., x.emps.emp.(name == \"terry\")\n        XMLATTR        = 143,  // @\n        XMLEND         = 144,\n\n        // Optimizer-only-tokens\n        TO_OBJECT      = 145,\n        TO_DOUBLE      = 146,\n\n        GET            = 147,  // JS 1.5 get pseudo keyword\n        SET            = 148,  // JS 1.5 set pseudo keyword\n\n        CONST          = 149,  // JS 1.5 const keyword\n        SETCONST       = 150,\n        SETCONSTVAR    = 151,\n        DEBUGGER       = 152,\n        LAST_TOKEN     = 152,\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307;",
        "begin_line": 183,
        "end_line": 264,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.LOOP",
        "snippet": "    public final static int\n        FIRST_ASSIGN   = ASSIGN,\n        LAST_ASSIGN    = ASSIGN_MOD,\n\n        HOOK           = 98, // conditional (?:)\n        COLON          = 99,\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment/decrement (++ --)\n        DEC            = 103,\n        DOT            = 104, // member operator (.)\n        FUNCTION       = 105, // function keyword\n        EXPORT         = 106, // export keyword\n        IMPORT         = 107, // import keyword\n        IF             = 108, // if keyword\n        ELSE           = 109, // else keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT        = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        FINALLY        = 121, // finally keyword\n        VOID           = 122, // void keyword\n        RESERVED       = 123, // reserved keywords\n\n        EMPTY          = 124,\n\n        /* types used for the parse tree - these never get returned\n         * by the scanner.\n         */\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        TARGET         = 127,\n        LOOP           = 128,\n        EXPR_VOID      = 129, // expression statement in functions\n        EXPR_RESULT    = 130, // expression statement in scripts\n        JSR            = 131,\n        SCRIPT         = 132, // top-level node for entire script\n        TYPEOFNAME     = 133, // for typeof(simple-name)\n        USE_STACK      = 134,\n        SETPROP_OP     = 135, // x.y op= something\n        SETELEM_OP     = 136, // x[y] op= something\n        LOCAL_BLOCK    = 137,\n        SET_REF_OP     = 138, // *reference op= something\n\n        // For XML support:\n        DOTDOT         = 139,  // member operator (..)\n        COLONCOLON     = 140,  // namespace::name\n        XML            = 141,  // XML type\n        DOTQUERY       = 142,  // .() -- e.g., x.emps.emp.(name == \"terry\")\n        XMLATTR        = 143,  // @\n        XMLEND         = 144,\n\n        // Optimizer-only-tokens\n        TO_OBJECT      = 145,\n        TO_DOUBLE      = 146,\n\n        GET            = 147,  // JS 1.5 get pseudo keyword\n        SET            = 148,  // JS 1.5 set pseudo keyword\n\n        CONST          = 149,  // JS 1.5 const keyword\n        SETCONST       = 150,\n        SETCONSTVAR    = 151,\n        DEBUGGER       = 152,\n        LAST_TOKEN     = 152,\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307;",
        "begin_line": 183,
        "end_line": 264,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.EXPR_VOID",
        "snippet": "    public final static int\n        FIRST_ASSIGN   = ASSIGN,\n        LAST_ASSIGN    = ASSIGN_MOD,\n\n        HOOK           = 98, // conditional (?:)\n        COLON          = 99,\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment/decrement (++ --)\n        DEC            = 103,\n        DOT            = 104, // member operator (.)\n        FUNCTION       = 105, // function keyword\n        EXPORT         = 106, // export keyword\n        IMPORT         = 107, // import keyword\n        IF             = 108, // if keyword\n        ELSE           = 109, // else keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT        = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        FINALLY        = 121, // finally keyword\n        VOID           = 122, // void keyword\n        RESERVED       = 123, // reserved keywords\n\n        EMPTY          = 124,\n\n        /* types used for the parse tree - these never get returned\n         * by the scanner.\n         */\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        TARGET         = 127,\n        LOOP           = 128,\n        EXPR_VOID      = 129, // expression statement in functions\n        EXPR_RESULT    = 130, // expression statement in scripts\n        JSR            = 131,\n        SCRIPT         = 132, // top-level node for entire script\n        TYPEOFNAME     = 133, // for typeof(simple-name)\n        USE_STACK      = 134,\n        SETPROP_OP     = 135, // x.y op= something\n        SETELEM_OP     = 136, // x[y] op= something\n        LOCAL_BLOCK    = 137,\n        SET_REF_OP     = 138, // *reference op= something\n\n        // For XML support:\n        DOTDOT         = 139,  // member operator (..)\n        COLONCOLON     = 140,  // namespace::name\n        XML            = 141,  // XML type\n        DOTQUERY       = 142,  // .() -- e.g., x.emps.emp.(name == \"terry\")\n        XMLATTR        = 143,  // @\n        XMLEND         = 144,\n\n        // Optimizer-only-tokens\n        TO_OBJECT      = 145,\n        TO_DOUBLE      = 146,\n\n        GET            = 147,  // JS 1.5 get pseudo keyword\n        SET            = 148,  // JS 1.5 set pseudo keyword\n\n        CONST          = 149,  // JS 1.5 const keyword\n        SETCONST       = 150,\n        SETCONSTVAR    = 151,\n        DEBUGGER       = 152,\n        LAST_TOKEN     = 152,\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307;",
        "begin_line": 183,
        "end_line": 264,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.EXPR_RESULT",
        "snippet": "    public final static int\n        FIRST_ASSIGN   = ASSIGN,\n        LAST_ASSIGN    = ASSIGN_MOD,\n\n        HOOK           = 98, // conditional (?:)\n        COLON          = 99,\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment/decrement (++ --)\n        DEC            = 103,\n        DOT            = 104, // member operator (.)\n        FUNCTION       = 105, // function keyword\n        EXPORT         = 106, // export keyword\n        IMPORT         = 107, // import keyword\n        IF             = 108, // if keyword\n        ELSE           = 109, // else keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT        = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        FINALLY        = 121, // finally keyword\n        VOID           = 122, // void keyword\n        RESERVED       = 123, // reserved keywords\n\n        EMPTY          = 124,\n\n        /* types used for the parse tree - these never get returned\n         * by the scanner.\n         */\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        TARGET         = 127,\n        LOOP           = 128,\n        EXPR_VOID      = 129, // expression statement in functions\n        EXPR_RESULT    = 130, // expression statement in scripts\n        JSR            = 131,\n        SCRIPT         = 132, // top-level node for entire script\n        TYPEOFNAME     = 133, // for typeof(simple-name)\n        USE_STACK      = 134,\n        SETPROP_OP     = 135, // x.y op= something\n        SETELEM_OP     = 136, // x[y] op= something\n        LOCAL_BLOCK    = 137,\n        SET_REF_OP     = 138, // *reference op= something\n\n        // For XML support:\n        DOTDOT         = 139,  // member operator (..)\n        COLONCOLON     = 140,  // namespace::name\n        XML            = 141,  // XML type\n        DOTQUERY       = 142,  // .() -- e.g., x.emps.emp.(name == \"terry\")\n        XMLATTR        = 143,  // @\n        XMLEND         = 144,\n\n        // Optimizer-only-tokens\n        TO_OBJECT      = 145,\n        TO_DOUBLE      = 146,\n\n        GET            = 147,  // JS 1.5 get pseudo keyword\n        SET            = 148,  // JS 1.5 set pseudo keyword\n\n        CONST          = 149,  // JS 1.5 const keyword\n        SETCONST       = 150,\n        SETCONSTVAR    = 151,\n        DEBUGGER       = 152,\n        LAST_TOKEN     = 152,\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307;",
        "begin_line": 183,
        "end_line": 264,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.JSR",
        "snippet": "    public final static int\n        FIRST_ASSIGN   = ASSIGN,\n        LAST_ASSIGN    = ASSIGN_MOD,\n\n        HOOK           = 98, // conditional (?:)\n        COLON          = 99,\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment/decrement (++ --)\n        DEC            = 103,\n        DOT            = 104, // member operator (.)\n        FUNCTION       = 105, // function keyword\n        EXPORT         = 106, // export keyword\n        IMPORT         = 107, // import keyword\n        IF             = 108, // if keyword\n        ELSE           = 109, // else keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT        = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        FINALLY        = 121, // finally keyword\n        VOID           = 122, // void keyword\n        RESERVED       = 123, // reserved keywords\n\n        EMPTY          = 124,\n\n        /* types used for the parse tree - these never get returned\n         * by the scanner.\n         */\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        TARGET         = 127,\n        LOOP           = 128,\n        EXPR_VOID      = 129, // expression statement in functions\n        EXPR_RESULT    = 130, // expression statement in scripts\n        JSR            = 131,\n        SCRIPT         = 132, // top-level node for entire script\n        TYPEOFNAME     = 133, // for typeof(simple-name)\n        USE_STACK      = 134,\n        SETPROP_OP     = 135, // x.y op= something\n        SETELEM_OP     = 136, // x[y] op= something\n        LOCAL_BLOCK    = 137,\n        SET_REF_OP     = 138, // *reference op= something\n\n        // For XML support:\n        DOTDOT         = 139,  // member operator (..)\n        COLONCOLON     = 140,  // namespace::name\n        XML            = 141,  // XML type\n        DOTQUERY       = 142,  // .() -- e.g., x.emps.emp.(name == \"terry\")\n        XMLATTR        = 143,  // @\n        XMLEND         = 144,\n\n        // Optimizer-only-tokens\n        TO_OBJECT      = 145,\n        TO_DOUBLE      = 146,\n\n        GET            = 147,  // JS 1.5 get pseudo keyword\n        SET            = 148,  // JS 1.5 set pseudo keyword\n\n        CONST          = 149,  // JS 1.5 const keyword\n        SETCONST       = 150,\n        SETCONSTVAR    = 151,\n        DEBUGGER       = 152,\n        LAST_TOKEN     = 152,\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307;",
        "begin_line": 183,
        "end_line": 264,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.SCRIPT",
        "snippet": "    public final static int\n        FIRST_ASSIGN   = ASSIGN,\n        LAST_ASSIGN    = ASSIGN_MOD,\n\n        HOOK           = 98, // conditional (?:)\n        COLON          = 99,\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment/decrement (++ --)\n        DEC            = 103,\n        DOT            = 104, // member operator (.)\n        FUNCTION       = 105, // function keyword\n        EXPORT         = 106, // export keyword\n        IMPORT         = 107, // import keyword\n        IF             = 108, // if keyword\n        ELSE           = 109, // else keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT        = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        FINALLY        = 121, // finally keyword\n        VOID           = 122, // void keyword\n        RESERVED       = 123, // reserved keywords\n\n        EMPTY          = 124,\n\n        /* types used for the parse tree - these never get returned\n         * by the scanner.\n         */\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        TARGET         = 127,\n        LOOP           = 128,\n        EXPR_VOID      = 129, // expression statement in functions\n        EXPR_RESULT    = 130, // expression statement in scripts\n        JSR            = 131,\n        SCRIPT         = 132, // top-level node for entire script\n        TYPEOFNAME     = 133, // for typeof(simple-name)\n        USE_STACK      = 134,\n        SETPROP_OP     = 135, // x.y op= something\n        SETELEM_OP     = 136, // x[y] op= something\n        LOCAL_BLOCK    = 137,\n        SET_REF_OP     = 138, // *reference op= something\n\n        // For XML support:\n        DOTDOT         = 139,  // member operator (..)\n        COLONCOLON     = 140,  // namespace::name\n        XML            = 141,  // XML type\n        DOTQUERY       = 142,  // .() -- e.g., x.emps.emp.(name == \"terry\")\n        XMLATTR        = 143,  // @\n        XMLEND         = 144,\n\n        // Optimizer-only-tokens\n        TO_OBJECT      = 145,\n        TO_DOUBLE      = 146,\n\n        GET            = 147,  // JS 1.5 get pseudo keyword\n        SET            = 148,  // JS 1.5 set pseudo keyword\n\n        CONST          = 149,  // JS 1.5 const keyword\n        SETCONST       = 150,\n        SETCONSTVAR    = 151,\n        DEBUGGER       = 152,\n        LAST_TOKEN     = 152,\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307;",
        "begin_line": 183,
        "end_line": 264,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.TYPEOFNAME",
        "snippet": "    public final static int\n        FIRST_ASSIGN   = ASSIGN,\n        LAST_ASSIGN    = ASSIGN_MOD,\n\n        HOOK           = 98, // conditional (?:)\n        COLON          = 99,\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment/decrement (++ --)\n        DEC            = 103,\n        DOT            = 104, // member operator (.)\n        FUNCTION       = 105, // function keyword\n        EXPORT         = 106, // export keyword\n        IMPORT         = 107, // import keyword\n        IF             = 108, // if keyword\n        ELSE           = 109, // else keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT        = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        FINALLY        = 121, // finally keyword\n        VOID           = 122, // void keyword\n        RESERVED       = 123, // reserved keywords\n\n        EMPTY          = 124,\n\n        /* types used for the parse tree - these never get returned\n         * by the scanner.\n         */\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        TARGET         = 127,\n        LOOP           = 128,\n        EXPR_VOID      = 129, // expression statement in functions\n        EXPR_RESULT    = 130, // expression statement in scripts\n        JSR            = 131,\n        SCRIPT         = 132, // top-level node for entire script\n        TYPEOFNAME     = 133, // for typeof(simple-name)\n        USE_STACK      = 134,\n        SETPROP_OP     = 135, // x.y op= something\n        SETELEM_OP     = 136, // x[y] op= something\n        LOCAL_BLOCK    = 137,\n        SET_REF_OP     = 138, // *reference op= something\n\n        // For XML support:\n        DOTDOT         = 139,  // member operator (..)\n        COLONCOLON     = 140,  // namespace::name\n        XML            = 141,  // XML type\n        DOTQUERY       = 142,  // .() -- e.g., x.emps.emp.(name == \"terry\")\n        XMLATTR        = 143,  // @\n        XMLEND         = 144,\n\n        // Optimizer-only-tokens\n        TO_OBJECT      = 145,\n        TO_DOUBLE      = 146,\n\n        GET            = 147,  // JS 1.5 get pseudo keyword\n        SET            = 148,  // JS 1.5 set pseudo keyword\n\n        CONST          = 149,  // JS 1.5 const keyword\n        SETCONST       = 150,\n        SETCONSTVAR    = 151,\n        DEBUGGER       = 152,\n        LAST_TOKEN     = 152,\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307;",
        "begin_line": 183,
        "end_line": 264,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.USE_STACK",
        "snippet": "    public final static int\n        FIRST_ASSIGN   = ASSIGN,\n        LAST_ASSIGN    = ASSIGN_MOD,\n\n        HOOK           = 98, // conditional (?:)\n        COLON          = 99,\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment/decrement (++ --)\n        DEC            = 103,\n        DOT            = 104, // member operator (.)\n        FUNCTION       = 105, // function keyword\n        EXPORT         = 106, // export keyword\n        IMPORT         = 107, // import keyword\n        IF             = 108, // if keyword\n        ELSE           = 109, // else keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT        = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        FINALLY        = 121, // finally keyword\n        VOID           = 122, // void keyword\n        RESERVED       = 123, // reserved keywords\n\n        EMPTY          = 124,\n\n        /* types used for the parse tree - these never get returned\n         * by the scanner.\n         */\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        TARGET         = 127,\n        LOOP           = 128,\n        EXPR_VOID      = 129, // expression statement in functions\n        EXPR_RESULT    = 130, // expression statement in scripts\n        JSR            = 131,\n        SCRIPT         = 132, // top-level node for entire script\n        TYPEOFNAME     = 133, // for typeof(simple-name)\n        USE_STACK      = 134,\n        SETPROP_OP     = 135, // x.y op= something\n        SETELEM_OP     = 136, // x[y] op= something\n        LOCAL_BLOCK    = 137,\n        SET_REF_OP     = 138, // *reference op= something\n\n        // For XML support:\n        DOTDOT         = 139,  // member operator (..)\n        COLONCOLON     = 140,  // namespace::name\n        XML            = 141,  // XML type\n        DOTQUERY       = 142,  // .() -- e.g., x.emps.emp.(name == \"terry\")\n        XMLATTR        = 143,  // @\n        XMLEND         = 144,\n\n        // Optimizer-only-tokens\n        TO_OBJECT      = 145,\n        TO_DOUBLE      = 146,\n\n        GET            = 147,  // JS 1.5 get pseudo keyword\n        SET            = 148,  // JS 1.5 set pseudo keyword\n\n        CONST          = 149,  // JS 1.5 const keyword\n        SETCONST       = 150,\n        SETCONSTVAR    = 151,\n        DEBUGGER       = 152,\n        LAST_TOKEN     = 152,\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307;",
        "begin_line": 183,
        "end_line": 264,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.SETPROP_OP",
        "snippet": "    public final static int\n        FIRST_ASSIGN   = ASSIGN,\n        LAST_ASSIGN    = ASSIGN_MOD,\n\n        HOOK           = 98, // conditional (?:)\n        COLON          = 99,\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment/decrement (++ --)\n        DEC            = 103,\n        DOT            = 104, // member operator (.)\n        FUNCTION       = 105, // function keyword\n        EXPORT         = 106, // export keyword\n        IMPORT         = 107, // import keyword\n        IF             = 108, // if keyword\n        ELSE           = 109, // else keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT        = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        FINALLY        = 121, // finally keyword\n        VOID           = 122, // void keyword\n        RESERVED       = 123, // reserved keywords\n\n        EMPTY          = 124,\n\n        /* types used for the parse tree - these never get returned\n         * by the scanner.\n         */\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        TARGET         = 127,\n        LOOP           = 128,\n        EXPR_VOID      = 129, // expression statement in functions\n        EXPR_RESULT    = 130, // expression statement in scripts\n        JSR            = 131,\n        SCRIPT         = 132, // top-level node for entire script\n        TYPEOFNAME     = 133, // for typeof(simple-name)\n        USE_STACK      = 134,\n        SETPROP_OP     = 135, // x.y op= something\n        SETELEM_OP     = 136, // x[y] op= something\n        LOCAL_BLOCK    = 137,\n        SET_REF_OP     = 138, // *reference op= something\n\n        // For XML support:\n        DOTDOT         = 139,  // member operator (..)\n        COLONCOLON     = 140,  // namespace::name\n        XML            = 141,  // XML type\n        DOTQUERY       = 142,  // .() -- e.g., x.emps.emp.(name == \"terry\")\n        XMLATTR        = 143,  // @\n        XMLEND         = 144,\n\n        // Optimizer-only-tokens\n        TO_OBJECT      = 145,\n        TO_DOUBLE      = 146,\n\n        GET            = 147,  // JS 1.5 get pseudo keyword\n        SET            = 148,  // JS 1.5 set pseudo keyword\n\n        CONST          = 149,  // JS 1.5 const keyword\n        SETCONST       = 150,\n        SETCONSTVAR    = 151,\n        DEBUGGER       = 152,\n        LAST_TOKEN     = 152,\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307;",
        "begin_line": 183,
        "end_line": 264,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.SETELEM_OP",
        "snippet": "    public final static int\n        FIRST_ASSIGN   = ASSIGN,\n        LAST_ASSIGN    = ASSIGN_MOD,\n\n        HOOK           = 98, // conditional (?:)\n        COLON          = 99,\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment/decrement (++ --)\n        DEC            = 103,\n        DOT            = 104, // member operator (.)\n        FUNCTION       = 105, // function keyword\n        EXPORT         = 106, // export keyword\n        IMPORT         = 107, // import keyword\n        IF             = 108, // if keyword\n        ELSE           = 109, // else keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT        = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        FINALLY        = 121, // finally keyword\n        VOID           = 122, // void keyword\n        RESERVED       = 123, // reserved keywords\n\n        EMPTY          = 124,\n\n        /* types used for the parse tree - these never get returned\n         * by the scanner.\n         */\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        TARGET         = 127,\n        LOOP           = 128,\n        EXPR_VOID      = 129, // expression statement in functions\n        EXPR_RESULT    = 130, // expression statement in scripts\n        JSR            = 131,\n        SCRIPT         = 132, // top-level node for entire script\n        TYPEOFNAME     = 133, // for typeof(simple-name)\n        USE_STACK      = 134,\n        SETPROP_OP     = 135, // x.y op= something\n        SETELEM_OP     = 136, // x[y] op= something\n        LOCAL_BLOCK    = 137,\n        SET_REF_OP     = 138, // *reference op= something\n\n        // For XML support:\n        DOTDOT         = 139,  // member operator (..)\n        COLONCOLON     = 140,  // namespace::name\n        XML            = 141,  // XML type\n        DOTQUERY       = 142,  // .() -- e.g., x.emps.emp.(name == \"terry\")\n        XMLATTR        = 143,  // @\n        XMLEND         = 144,\n\n        // Optimizer-only-tokens\n        TO_OBJECT      = 145,\n        TO_DOUBLE      = 146,\n\n        GET            = 147,  // JS 1.5 get pseudo keyword\n        SET            = 148,  // JS 1.5 set pseudo keyword\n\n        CONST          = 149,  // JS 1.5 const keyword\n        SETCONST       = 150,\n        SETCONSTVAR    = 151,\n        DEBUGGER       = 152,\n        LAST_TOKEN     = 152,\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307;",
        "begin_line": 183,
        "end_line": 264,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.LOCAL_BLOCK",
        "snippet": "    public final static int\n        FIRST_ASSIGN   = ASSIGN,\n        LAST_ASSIGN    = ASSIGN_MOD,\n\n        HOOK           = 98, // conditional (?:)\n        COLON          = 99,\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment/decrement (++ --)\n        DEC            = 103,\n        DOT            = 104, // member operator (.)\n        FUNCTION       = 105, // function keyword\n        EXPORT         = 106, // export keyword\n        IMPORT         = 107, // import keyword\n        IF             = 108, // if keyword\n        ELSE           = 109, // else keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT        = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        FINALLY        = 121, // finally keyword\n        VOID           = 122, // void keyword\n        RESERVED       = 123, // reserved keywords\n\n        EMPTY          = 124,\n\n        /* types used for the parse tree - these never get returned\n         * by the scanner.\n         */\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        TARGET         = 127,\n        LOOP           = 128,\n        EXPR_VOID      = 129, // expression statement in functions\n        EXPR_RESULT    = 130, // expression statement in scripts\n        JSR            = 131,\n        SCRIPT         = 132, // top-level node for entire script\n        TYPEOFNAME     = 133, // for typeof(simple-name)\n        USE_STACK      = 134,\n        SETPROP_OP     = 135, // x.y op= something\n        SETELEM_OP     = 136, // x[y] op= something\n        LOCAL_BLOCK    = 137,\n        SET_REF_OP     = 138, // *reference op= something\n\n        // For XML support:\n        DOTDOT         = 139,  // member operator (..)\n        COLONCOLON     = 140,  // namespace::name\n        XML            = 141,  // XML type\n        DOTQUERY       = 142,  // .() -- e.g., x.emps.emp.(name == \"terry\")\n        XMLATTR        = 143,  // @\n        XMLEND         = 144,\n\n        // Optimizer-only-tokens\n        TO_OBJECT      = 145,\n        TO_DOUBLE      = 146,\n\n        GET            = 147,  // JS 1.5 get pseudo keyword\n        SET            = 148,  // JS 1.5 set pseudo keyword\n\n        CONST          = 149,  // JS 1.5 const keyword\n        SETCONST       = 150,\n        SETCONSTVAR    = 151,\n        DEBUGGER       = 152,\n        LAST_TOKEN     = 152,\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307;",
        "begin_line": 183,
        "end_line": 264,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.SET_REF_OP",
        "snippet": "    public final static int\n        FIRST_ASSIGN   = ASSIGN,\n        LAST_ASSIGN    = ASSIGN_MOD,\n\n        HOOK           = 98, // conditional (?:)\n        COLON          = 99,\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment/decrement (++ --)\n        DEC            = 103,\n        DOT            = 104, // member operator (.)\n        FUNCTION       = 105, // function keyword\n        EXPORT         = 106, // export keyword\n        IMPORT         = 107, // import keyword\n        IF             = 108, // if keyword\n        ELSE           = 109, // else keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT        = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        FINALLY        = 121, // finally keyword\n        VOID           = 122, // void keyword\n        RESERVED       = 123, // reserved keywords\n\n        EMPTY          = 124,\n\n        /* types used for the parse tree - these never get returned\n         * by the scanner.\n         */\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        TARGET         = 127,\n        LOOP           = 128,\n        EXPR_VOID      = 129, // expression statement in functions\n        EXPR_RESULT    = 130, // expression statement in scripts\n        JSR            = 131,\n        SCRIPT         = 132, // top-level node for entire script\n        TYPEOFNAME     = 133, // for typeof(simple-name)\n        USE_STACK      = 134,\n        SETPROP_OP     = 135, // x.y op= something\n        SETELEM_OP     = 136, // x[y] op= something\n        LOCAL_BLOCK    = 137,\n        SET_REF_OP     = 138, // *reference op= something\n\n        // For XML support:\n        DOTDOT         = 139,  // member operator (..)\n        COLONCOLON     = 140,  // namespace::name\n        XML            = 141,  // XML type\n        DOTQUERY       = 142,  // .() -- e.g., x.emps.emp.(name == \"terry\")\n        XMLATTR        = 143,  // @\n        XMLEND         = 144,\n\n        // Optimizer-only-tokens\n        TO_OBJECT      = 145,\n        TO_DOUBLE      = 146,\n\n        GET            = 147,  // JS 1.5 get pseudo keyword\n        SET            = 148,  // JS 1.5 set pseudo keyword\n\n        CONST          = 149,  // JS 1.5 const keyword\n        SETCONST       = 150,\n        SETCONSTVAR    = 151,\n        DEBUGGER       = 152,\n        LAST_TOKEN     = 152,\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307;",
        "begin_line": 183,
        "end_line": 264,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.DOTDOT",
        "snippet": "    public final static int\n        FIRST_ASSIGN   = ASSIGN,\n        LAST_ASSIGN    = ASSIGN_MOD,\n\n        HOOK           = 98, // conditional (?:)\n        COLON          = 99,\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment/decrement (++ --)\n        DEC            = 103,\n        DOT            = 104, // member operator (.)\n        FUNCTION       = 105, // function keyword\n        EXPORT         = 106, // export keyword\n        IMPORT         = 107, // import keyword\n        IF             = 108, // if keyword\n        ELSE           = 109, // else keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT        = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        FINALLY        = 121, // finally keyword\n        VOID           = 122, // void keyword\n        RESERVED       = 123, // reserved keywords\n\n        EMPTY          = 124,\n\n        /* types used for the parse tree - these never get returned\n         * by the scanner.\n         */\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        TARGET         = 127,\n        LOOP           = 128,\n        EXPR_VOID      = 129, // expression statement in functions\n        EXPR_RESULT    = 130, // expression statement in scripts\n        JSR            = 131,\n        SCRIPT         = 132, // top-level node for entire script\n        TYPEOFNAME     = 133, // for typeof(simple-name)\n        USE_STACK      = 134,\n        SETPROP_OP     = 135, // x.y op= something\n        SETELEM_OP     = 136, // x[y] op= something\n        LOCAL_BLOCK    = 137,\n        SET_REF_OP     = 138, // *reference op= something\n\n        // For XML support:\n        DOTDOT         = 139,  // member operator (..)\n        COLONCOLON     = 140,  // namespace::name\n        XML            = 141,  // XML type\n        DOTQUERY       = 142,  // .() -- e.g., x.emps.emp.(name == \"terry\")\n        XMLATTR        = 143,  // @\n        XMLEND         = 144,\n\n        // Optimizer-only-tokens\n        TO_OBJECT      = 145,\n        TO_DOUBLE      = 146,\n\n        GET            = 147,  // JS 1.5 get pseudo keyword\n        SET            = 148,  // JS 1.5 set pseudo keyword\n\n        CONST          = 149,  // JS 1.5 const keyword\n        SETCONST       = 150,\n        SETCONSTVAR    = 151,\n        DEBUGGER       = 152,\n        LAST_TOKEN     = 152,\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307;",
        "begin_line": 183,
        "end_line": 264,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.COLONCOLON",
        "snippet": "    public final static int\n        FIRST_ASSIGN   = ASSIGN,\n        LAST_ASSIGN    = ASSIGN_MOD,\n\n        HOOK           = 98, // conditional (?:)\n        COLON          = 99,\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment/decrement (++ --)\n        DEC            = 103,\n        DOT            = 104, // member operator (.)\n        FUNCTION       = 105, // function keyword\n        EXPORT         = 106, // export keyword\n        IMPORT         = 107, // import keyword\n        IF             = 108, // if keyword\n        ELSE           = 109, // else keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT        = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        FINALLY        = 121, // finally keyword\n        VOID           = 122, // void keyword\n        RESERVED       = 123, // reserved keywords\n\n        EMPTY          = 124,\n\n        /* types used for the parse tree - these never get returned\n         * by the scanner.\n         */\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        TARGET         = 127,\n        LOOP           = 128,\n        EXPR_VOID      = 129, // expression statement in functions\n        EXPR_RESULT    = 130, // expression statement in scripts\n        JSR            = 131,\n        SCRIPT         = 132, // top-level node for entire script\n        TYPEOFNAME     = 133, // for typeof(simple-name)\n        USE_STACK      = 134,\n        SETPROP_OP     = 135, // x.y op= something\n        SETELEM_OP     = 136, // x[y] op= something\n        LOCAL_BLOCK    = 137,\n        SET_REF_OP     = 138, // *reference op= something\n\n        // For XML support:\n        DOTDOT         = 139,  // member operator (..)\n        COLONCOLON     = 140,  // namespace::name\n        XML            = 141,  // XML type\n        DOTQUERY       = 142,  // .() -- e.g., x.emps.emp.(name == \"terry\")\n        XMLATTR        = 143,  // @\n        XMLEND         = 144,\n\n        // Optimizer-only-tokens\n        TO_OBJECT      = 145,\n        TO_DOUBLE      = 146,\n\n        GET            = 147,  // JS 1.5 get pseudo keyword\n        SET            = 148,  // JS 1.5 set pseudo keyword\n\n        CONST          = 149,  // JS 1.5 const keyword\n        SETCONST       = 150,\n        SETCONSTVAR    = 151,\n        DEBUGGER       = 152,\n        LAST_TOKEN     = 152,\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307;",
        "begin_line": 183,
        "end_line": 264,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.XML",
        "snippet": "    public final static int\n        FIRST_ASSIGN   = ASSIGN,\n        LAST_ASSIGN    = ASSIGN_MOD,\n\n        HOOK           = 98, // conditional (?:)\n        COLON          = 99,\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment/decrement (++ --)\n        DEC            = 103,\n        DOT            = 104, // member operator (.)\n        FUNCTION       = 105, // function keyword\n        EXPORT         = 106, // export keyword\n        IMPORT         = 107, // import keyword\n        IF             = 108, // if keyword\n        ELSE           = 109, // else keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT        = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        FINALLY        = 121, // finally keyword\n        VOID           = 122, // void keyword\n        RESERVED       = 123, // reserved keywords\n\n        EMPTY          = 124,\n\n        /* types used for the parse tree - these never get returned\n         * by the scanner.\n         */\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        TARGET         = 127,\n        LOOP           = 128,\n        EXPR_VOID      = 129, // expression statement in functions\n        EXPR_RESULT    = 130, // expression statement in scripts\n        JSR            = 131,\n        SCRIPT         = 132, // top-level node for entire script\n        TYPEOFNAME     = 133, // for typeof(simple-name)\n        USE_STACK      = 134,\n        SETPROP_OP     = 135, // x.y op= something\n        SETELEM_OP     = 136, // x[y] op= something\n        LOCAL_BLOCK    = 137,\n        SET_REF_OP     = 138, // *reference op= something\n\n        // For XML support:\n        DOTDOT         = 139,  // member operator (..)\n        COLONCOLON     = 140,  // namespace::name\n        XML            = 141,  // XML type\n        DOTQUERY       = 142,  // .() -- e.g., x.emps.emp.(name == \"terry\")\n        XMLATTR        = 143,  // @\n        XMLEND         = 144,\n\n        // Optimizer-only-tokens\n        TO_OBJECT      = 145,\n        TO_DOUBLE      = 146,\n\n        GET            = 147,  // JS 1.5 get pseudo keyword\n        SET            = 148,  // JS 1.5 set pseudo keyword\n\n        CONST          = 149,  // JS 1.5 const keyword\n        SETCONST       = 150,\n        SETCONSTVAR    = 151,\n        DEBUGGER       = 152,\n        LAST_TOKEN     = 152,\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307;",
        "begin_line": 183,
        "end_line": 264,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.DOTQUERY",
        "snippet": "    public final static int\n        FIRST_ASSIGN   = ASSIGN,\n        LAST_ASSIGN    = ASSIGN_MOD,\n\n        HOOK           = 98, // conditional (?:)\n        COLON          = 99,\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment/decrement (++ --)\n        DEC            = 103,\n        DOT            = 104, // member operator (.)\n        FUNCTION       = 105, // function keyword\n        EXPORT         = 106, // export keyword\n        IMPORT         = 107, // import keyword\n        IF             = 108, // if keyword\n        ELSE           = 109, // else keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT        = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        FINALLY        = 121, // finally keyword\n        VOID           = 122, // void keyword\n        RESERVED       = 123, // reserved keywords\n\n        EMPTY          = 124,\n\n        /* types used for the parse tree - these never get returned\n         * by the scanner.\n         */\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        TARGET         = 127,\n        LOOP           = 128,\n        EXPR_VOID      = 129, // expression statement in functions\n        EXPR_RESULT    = 130, // expression statement in scripts\n        JSR            = 131,\n        SCRIPT         = 132, // top-level node for entire script\n        TYPEOFNAME     = 133, // for typeof(simple-name)\n        USE_STACK      = 134,\n        SETPROP_OP     = 135, // x.y op= something\n        SETELEM_OP     = 136, // x[y] op= something\n        LOCAL_BLOCK    = 137,\n        SET_REF_OP     = 138, // *reference op= something\n\n        // For XML support:\n        DOTDOT         = 139,  // member operator (..)\n        COLONCOLON     = 140,  // namespace::name\n        XML            = 141,  // XML type\n        DOTQUERY       = 142,  // .() -- e.g., x.emps.emp.(name == \"terry\")\n        XMLATTR        = 143,  // @\n        XMLEND         = 144,\n\n        // Optimizer-only-tokens\n        TO_OBJECT      = 145,\n        TO_DOUBLE      = 146,\n\n        GET            = 147,  // JS 1.5 get pseudo keyword\n        SET            = 148,  // JS 1.5 set pseudo keyword\n\n        CONST          = 149,  // JS 1.5 const keyword\n        SETCONST       = 150,\n        SETCONSTVAR    = 151,\n        DEBUGGER       = 152,\n        LAST_TOKEN     = 152,\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307;",
        "begin_line": 183,
        "end_line": 264,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.XMLATTR",
        "snippet": "    public final static int\n        FIRST_ASSIGN   = ASSIGN,\n        LAST_ASSIGN    = ASSIGN_MOD,\n\n        HOOK           = 98, // conditional (?:)\n        COLON          = 99,\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment/decrement (++ --)\n        DEC            = 103,\n        DOT            = 104, // member operator (.)\n        FUNCTION       = 105, // function keyword\n        EXPORT         = 106, // export keyword\n        IMPORT         = 107, // import keyword\n        IF             = 108, // if keyword\n        ELSE           = 109, // else keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT        = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        FINALLY        = 121, // finally keyword\n        VOID           = 122, // void keyword\n        RESERVED       = 123, // reserved keywords\n\n        EMPTY          = 124,\n\n        /* types used for the parse tree - these never get returned\n         * by the scanner.\n         */\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        TARGET         = 127,\n        LOOP           = 128,\n        EXPR_VOID      = 129, // expression statement in functions\n        EXPR_RESULT    = 130, // expression statement in scripts\n        JSR            = 131,\n        SCRIPT         = 132, // top-level node for entire script\n        TYPEOFNAME     = 133, // for typeof(simple-name)\n        USE_STACK      = 134,\n        SETPROP_OP     = 135, // x.y op= something\n        SETELEM_OP     = 136, // x[y] op= something\n        LOCAL_BLOCK    = 137,\n        SET_REF_OP     = 138, // *reference op= something\n\n        // For XML support:\n        DOTDOT         = 139,  // member operator (..)\n        COLONCOLON     = 140,  // namespace::name\n        XML            = 141,  // XML type\n        DOTQUERY       = 142,  // .() -- e.g., x.emps.emp.(name == \"terry\")\n        XMLATTR        = 143,  // @\n        XMLEND         = 144,\n\n        // Optimizer-only-tokens\n        TO_OBJECT      = 145,\n        TO_DOUBLE      = 146,\n\n        GET            = 147,  // JS 1.5 get pseudo keyword\n        SET            = 148,  // JS 1.5 set pseudo keyword\n\n        CONST          = 149,  // JS 1.5 const keyword\n        SETCONST       = 150,\n        SETCONSTVAR    = 151,\n        DEBUGGER       = 152,\n        LAST_TOKEN     = 152,\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307;",
        "begin_line": 183,
        "end_line": 264,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.XMLEND",
        "snippet": "    public final static int\n        FIRST_ASSIGN   = ASSIGN,\n        LAST_ASSIGN    = ASSIGN_MOD,\n\n        HOOK           = 98, // conditional (?:)\n        COLON          = 99,\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment/decrement (++ --)\n        DEC            = 103,\n        DOT            = 104, // member operator (.)\n        FUNCTION       = 105, // function keyword\n        EXPORT         = 106, // export keyword\n        IMPORT         = 107, // import keyword\n        IF             = 108, // if keyword\n        ELSE           = 109, // else keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT        = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        FINALLY        = 121, // finally keyword\n        VOID           = 122, // void keyword\n        RESERVED       = 123, // reserved keywords\n\n        EMPTY          = 124,\n\n        /* types used for the parse tree - these never get returned\n         * by the scanner.\n         */\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        TARGET         = 127,\n        LOOP           = 128,\n        EXPR_VOID      = 129, // expression statement in functions\n        EXPR_RESULT    = 130, // expression statement in scripts\n        JSR            = 131,\n        SCRIPT         = 132, // top-level node for entire script\n        TYPEOFNAME     = 133, // for typeof(simple-name)\n        USE_STACK      = 134,\n        SETPROP_OP     = 135, // x.y op= something\n        SETELEM_OP     = 136, // x[y] op= something\n        LOCAL_BLOCK    = 137,\n        SET_REF_OP     = 138, // *reference op= something\n\n        // For XML support:\n        DOTDOT         = 139,  // member operator (..)\n        COLONCOLON     = 140,  // namespace::name\n        XML            = 141,  // XML type\n        DOTQUERY       = 142,  // .() -- e.g., x.emps.emp.(name == \"terry\")\n        XMLATTR        = 143,  // @\n        XMLEND         = 144,\n\n        // Optimizer-only-tokens\n        TO_OBJECT      = 145,\n        TO_DOUBLE      = 146,\n\n        GET            = 147,  // JS 1.5 get pseudo keyword\n        SET            = 148,  // JS 1.5 set pseudo keyword\n\n        CONST          = 149,  // JS 1.5 const keyword\n        SETCONST       = 150,\n        SETCONSTVAR    = 151,\n        DEBUGGER       = 152,\n        LAST_TOKEN     = 152,\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307;",
        "begin_line": 183,
        "end_line": 264,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.TO_OBJECT",
        "snippet": "    public final static int\n        FIRST_ASSIGN   = ASSIGN,\n        LAST_ASSIGN    = ASSIGN_MOD,\n\n        HOOK           = 98, // conditional (?:)\n        COLON          = 99,\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment/decrement (++ --)\n        DEC            = 103,\n        DOT            = 104, // member operator (.)\n        FUNCTION       = 105, // function keyword\n        EXPORT         = 106, // export keyword\n        IMPORT         = 107, // import keyword\n        IF             = 108, // if keyword\n        ELSE           = 109, // else keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT        = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        FINALLY        = 121, // finally keyword\n        VOID           = 122, // void keyword\n        RESERVED       = 123, // reserved keywords\n\n        EMPTY          = 124,\n\n        /* types used for the parse tree - these never get returned\n         * by the scanner.\n         */\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        TARGET         = 127,\n        LOOP           = 128,\n        EXPR_VOID      = 129, // expression statement in functions\n        EXPR_RESULT    = 130, // expression statement in scripts\n        JSR            = 131,\n        SCRIPT         = 132, // top-level node for entire script\n        TYPEOFNAME     = 133, // for typeof(simple-name)\n        USE_STACK      = 134,\n        SETPROP_OP     = 135, // x.y op= something\n        SETELEM_OP     = 136, // x[y] op= something\n        LOCAL_BLOCK    = 137,\n        SET_REF_OP     = 138, // *reference op= something\n\n        // For XML support:\n        DOTDOT         = 139,  // member operator (..)\n        COLONCOLON     = 140,  // namespace::name\n        XML            = 141,  // XML type\n        DOTQUERY       = 142,  // .() -- e.g., x.emps.emp.(name == \"terry\")\n        XMLATTR        = 143,  // @\n        XMLEND         = 144,\n\n        // Optimizer-only-tokens\n        TO_OBJECT      = 145,\n        TO_DOUBLE      = 146,\n\n        GET            = 147,  // JS 1.5 get pseudo keyword\n        SET            = 148,  // JS 1.5 set pseudo keyword\n\n        CONST          = 149,  // JS 1.5 const keyword\n        SETCONST       = 150,\n        SETCONSTVAR    = 151,\n        DEBUGGER       = 152,\n        LAST_TOKEN     = 152,\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307;",
        "begin_line": 183,
        "end_line": 264,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.TO_DOUBLE",
        "snippet": "    public final static int\n        FIRST_ASSIGN   = ASSIGN,\n        LAST_ASSIGN    = ASSIGN_MOD,\n\n        HOOK           = 98, // conditional (?:)\n        COLON          = 99,\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment/decrement (++ --)\n        DEC            = 103,\n        DOT            = 104, // member operator (.)\n        FUNCTION       = 105, // function keyword\n        EXPORT         = 106, // export keyword\n        IMPORT         = 107, // import keyword\n        IF             = 108, // if keyword\n        ELSE           = 109, // else keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT        = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        FINALLY        = 121, // finally keyword\n        VOID           = 122, // void keyword\n        RESERVED       = 123, // reserved keywords\n\n        EMPTY          = 124,\n\n        /* types used for the parse tree - these never get returned\n         * by the scanner.\n         */\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        TARGET         = 127,\n        LOOP           = 128,\n        EXPR_VOID      = 129, // expression statement in functions\n        EXPR_RESULT    = 130, // expression statement in scripts\n        JSR            = 131,\n        SCRIPT         = 132, // top-level node for entire script\n        TYPEOFNAME     = 133, // for typeof(simple-name)\n        USE_STACK      = 134,\n        SETPROP_OP     = 135, // x.y op= something\n        SETELEM_OP     = 136, // x[y] op= something\n        LOCAL_BLOCK    = 137,\n        SET_REF_OP     = 138, // *reference op= something\n\n        // For XML support:\n        DOTDOT         = 139,  // member operator (..)\n        COLONCOLON     = 140,  // namespace::name\n        XML            = 141,  // XML type\n        DOTQUERY       = 142,  // .() -- e.g., x.emps.emp.(name == \"terry\")\n        XMLATTR        = 143,  // @\n        XMLEND         = 144,\n\n        // Optimizer-only-tokens\n        TO_OBJECT      = 145,\n        TO_DOUBLE      = 146,\n\n        GET            = 147,  // JS 1.5 get pseudo keyword\n        SET            = 148,  // JS 1.5 set pseudo keyword\n\n        CONST          = 149,  // JS 1.5 const keyword\n        SETCONST       = 150,\n        SETCONSTVAR    = 151,\n        DEBUGGER       = 152,\n        LAST_TOKEN     = 152,\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307;",
        "begin_line": 183,
        "end_line": 264,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.GET",
        "snippet": "    public final static int\n        FIRST_ASSIGN   = ASSIGN,\n        LAST_ASSIGN    = ASSIGN_MOD,\n\n        HOOK           = 98, // conditional (?:)\n        COLON          = 99,\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment/decrement (++ --)\n        DEC            = 103,\n        DOT            = 104, // member operator (.)\n        FUNCTION       = 105, // function keyword\n        EXPORT         = 106, // export keyword\n        IMPORT         = 107, // import keyword\n        IF             = 108, // if keyword\n        ELSE           = 109, // else keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT        = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        FINALLY        = 121, // finally keyword\n        VOID           = 122, // void keyword\n        RESERVED       = 123, // reserved keywords\n\n        EMPTY          = 124,\n\n        /* types used for the parse tree - these never get returned\n         * by the scanner.\n         */\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        TARGET         = 127,\n        LOOP           = 128,\n        EXPR_VOID      = 129, // expression statement in functions\n        EXPR_RESULT    = 130, // expression statement in scripts\n        JSR            = 131,\n        SCRIPT         = 132, // top-level node for entire script\n        TYPEOFNAME     = 133, // for typeof(simple-name)\n        USE_STACK      = 134,\n        SETPROP_OP     = 135, // x.y op= something\n        SETELEM_OP     = 136, // x[y] op= something\n        LOCAL_BLOCK    = 137,\n        SET_REF_OP     = 138, // *reference op= something\n\n        // For XML support:\n        DOTDOT         = 139,  // member operator (..)\n        COLONCOLON     = 140,  // namespace::name\n        XML            = 141,  // XML type\n        DOTQUERY       = 142,  // .() -- e.g., x.emps.emp.(name == \"terry\")\n        XMLATTR        = 143,  // @\n        XMLEND         = 144,\n\n        // Optimizer-only-tokens\n        TO_OBJECT      = 145,\n        TO_DOUBLE      = 146,\n\n        GET            = 147,  // JS 1.5 get pseudo keyword\n        SET            = 148,  // JS 1.5 set pseudo keyword\n\n        CONST          = 149,  // JS 1.5 const keyword\n        SETCONST       = 150,\n        SETCONSTVAR    = 151,\n        DEBUGGER       = 152,\n        LAST_TOKEN     = 152,\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307;",
        "begin_line": 183,
        "end_line": 264,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.SET",
        "snippet": "    public final static int\n        FIRST_ASSIGN   = ASSIGN,\n        LAST_ASSIGN    = ASSIGN_MOD,\n\n        HOOK           = 98, // conditional (?:)\n        COLON          = 99,\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment/decrement (++ --)\n        DEC            = 103,\n        DOT            = 104, // member operator (.)\n        FUNCTION       = 105, // function keyword\n        EXPORT         = 106, // export keyword\n        IMPORT         = 107, // import keyword\n        IF             = 108, // if keyword\n        ELSE           = 109, // else keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT        = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        FINALLY        = 121, // finally keyword\n        VOID           = 122, // void keyword\n        RESERVED       = 123, // reserved keywords\n\n        EMPTY          = 124,\n\n        /* types used for the parse tree - these never get returned\n         * by the scanner.\n         */\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        TARGET         = 127,\n        LOOP           = 128,\n        EXPR_VOID      = 129, // expression statement in functions\n        EXPR_RESULT    = 130, // expression statement in scripts\n        JSR            = 131,\n        SCRIPT         = 132, // top-level node for entire script\n        TYPEOFNAME     = 133, // for typeof(simple-name)\n        USE_STACK      = 134,\n        SETPROP_OP     = 135, // x.y op= something\n        SETELEM_OP     = 136, // x[y] op= something\n        LOCAL_BLOCK    = 137,\n        SET_REF_OP     = 138, // *reference op= something\n\n        // For XML support:\n        DOTDOT         = 139,  // member operator (..)\n        COLONCOLON     = 140,  // namespace::name\n        XML            = 141,  // XML type\n        DOTQUERY       = 142,  // .() -- e.g., x.emps.emp.(name == \"terry\")\n        XMLATTR        = 143,  // @\n        XMLEND         = 144,\n\n        // Optimizer-only-tokens\n        TO_OBJECT      = 145,\n        TO_DOUBLE      = 146,\n\n        GET            = 147,  // JS 1.5 get pseudo keyword\n        SET            = 148,  // JS 1.5 set pseudo keyword\n\n        CONST          = 149,  // JS 1.5 const keyword\n        SETCONST       = 150,\n        SETCONSTVAR    = 151,\n        DEBUGGER       = 152,\n        LAST_TOKEN     = 152,\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307;",
        "begin_line": 183,
        "end_line": 264,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.CONST",
        "snippet": "    public final static int\n        FIRST_ASSIGN   = ASSIGN,\n        LAST_ASSIGN    = ASSIGN_MOD,\n\n        HOOK           = 98, // conditional (?:)\n        COLON          = 99,\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment/decrement (++ --)\n        DEC            = 103,\n        DOT            = 104, // member operator (.)\n        FUNCTION       = 105, // function keyword\n        EXPORT         = 106, // export keyword\n        IMPORT         = 107, // import keyword\n        IF             = 108, // if keyword\n        ELSE           = 109, // else keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT        = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        FINALLY        = 121, // finally keyword\n        VOID           = 122, // void keyword\n        RESERVED       = 123, // reserved keywords\n\n        EMPTY          = 124,\n\n        /* types used for the parse tree - these never get returned\n         * by the scanner.\n         */\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        TARGET         = 127,\n        LOOP           = 128,\n        EXPR_VOID      = 129, // expression statement in functions\n        EXPR_RESULT    = 130, // expression statement in scripts\n        JSR            = 131,\n        SCRIPT         = 132, // top-level node for entire script\n        TYPEOFNAME     = 133, // for typeof(simple-name)\n        USE_STACK      = 134,\n        SETPROP_OP     = 135, // x.y op= something\n        SETELEM_OP     = 136, // x[y] op= something\n        LOCAL_BLOCK    = 137,\n        SET_REF_OP     = 138, // *reference op= something\n\n        // For XML support:\n        DOTDOT         = 139,  // member operator (..)\n        COLONCOLON     = 140,  // namespace::name\n        XML            = 141,  // XML type\n        DOTQUERY       = 142,  // .() -- e.g., x.emps.emp.(name == \"terry\")\n        XMLATTR        = 143,  // @\n        XMLEND         = 144,\n\n        // Optimizer-only-tokens\n        TO_OBJECT      = 145,\n        TO_DOUBLE      = 146,\n\n        GET            = 147,  // JS 1.5 get pseudo keyword\n        SET            = 148,  // JS 1.5 set pseudo keyword\n\n        CONST          = 149,  // JS 1.5 const keyword\n        SETCONST       = 150,\n        SETCONSTVAR    = 151,\n        DEBUGGER       = 152,\n        LAST_TOKEN     = 152,\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307;",
        "begin_line": 183,
        "end_line": 264,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.SETCONST",
        "snippet": "    public final static int\n        FIRST_ASSIGN   = ASSIGN,\n        LAST_ASSIGN    = ASSIGN_MOD,\n\n        HOOK           = 98, // conditional (?:)\n        COLON          = 99,\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment/decrement (++ --)\n        DEC            = 103,\n        DOT            = 104, // member operator (.)\n        FUNCTION       = 105, // function keyword\n        EXPORT         = 106, // export keyword\n        IMPORT         = 107, // import keyword\n        IF             = 108, // if keyword\n        ELSE           = 109, // else keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT        = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        FINALLY        = 121, // finally keyword\n        VOID           = 122, // void keyword\n        RESERVED       = 123, // reserved keywords\n\n        EMPTY          = 124,\n\n        /* types used for the parse tree - these never get returned\n         * by the scanner.\n         */\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        TARGET         = 127,\n        LOOP           = 128,\n        EXPR_VOID      = 129, // expression statement in functions\n        EXPR_RESULT    = 130, // expression statement in scripts\n        JSR            = 131,\n        SCRIPT         = 132, // top-level node for entire script\n        TYPEOFNAME     = 133, // for typeof(simple-name)\n        USE_STACK      = 134,\n        SETPROP_OP     = 135, // x.y op= something\n        SETELEM_OP     = 136, // x[y] op= something\n        LOCAL_BLOCK    = 137,\n        SET_REF_OP     = 138, // *reference op= something\n\n        // For XML support:\n        DOTDOT         = 139,  // member operator (..)\n        COLONCOLON     = 140,  // namespace::name\n        XML            = 141,  // XML type\n        DOTQUERY       = 142,  // .() -- e.g., x.emps.emp.(name == \"terry\")\n        XMLATTR        = 143,  // @\n        XMLEND         = 144,\n\n        // Optimizer-only-tokens\n        TO_OBJECT      = 145,\n        TO_DOUBLE      = 146,\n\n        GET            = 147,  // JS 1.5 get pseudo keyword\n        SET            = 148,  // JS 1.5 set pseudo keyword\n\n        CONST          = 149,  // JS 1.5 const keyword\n        SETCONST       = 150,\n        SETCONSTVAR    = 151,\n        DEBUGGER       = 152,\n        LAST_TOKEN     = 152,\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307;",
        "begin_line": 183,
        "end_line": 264,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.SETCONSTVAR",
        "snippet": "    public final static int\n        FIRST_ASSIGN   = ASSIGN,\n        LAST_ASSIGN    = ASSIGN_MOD,\n\n        HOOK           = 98, // conditional (?:)\n        COLON          = 99,\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment/decrement (++ --)\n        DEC            = 103,\n        DOT            = 104, // member operator (.)\n        FUNCTION       = 105, // function keyword\n        EXPORT         = 106, // export keyword\n        IMPORT         = 107, // import keyword\n        IF             = 108, // if keyword\n        ELSE           = 109, // else keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT        = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        FINALLY        = 121, // finally keyword\n        VOID           = 122, // void keyword\n        RESERVED       = 123, // reserved keywords\n\n        EMPTY          = 124,\n\n        /* types used for the parse tree - these never get returned\n         * by the scanner.\n         */\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        TARGET         = 127,\n        LOOP           = 128,\n        EXPR_VOID      = 129, // expression statement in functions\n        EXPR_RESULT    = 130, // expression statement in scripts\n        JSR            = 131,\n        SCRIPT         = 132, // top-level node for entire script\n        TYPEOFNAME     = 133, // for typeof(simple-name)\n        USE_STACK      = 134,\n        SETPROP_OP     = 135, // x.y op= something\n        SETELEM_OP     = 136, // x[y] op= something\n        LOCAL_BLOCK    = 137,\n        SET_REF_OP     = 138, // *reference op= something\n\n        // For XML support:\n        DOTDOT         = 139,  // member operator (..)\n        COLONCOLON     = 140,  // namespace::name\n        XML            = 141,  // XML type\n        DOTQUERY       = 142,  // .() -- e.g., x.emps.emp.(name == \"terry\")\n        XMLATTR        = 143,  // @\n        XMLEND         = 144,\n\n        // Optimizer-only-tokens\n        TO_OBJECT      = 145,\n        TO_DOUBLE      = 146,\n\n        GET            = 147,  // JS 1.5 get pseudo keyword\n        SET            = 148,  // JS 1.5 set pseudo keyword\n\n        CONST          = 149,  // JS 1.5 const keyword\n        SETCONST       = 150,\n        SETCONSTVAR    = 151,\n        DEBUGGER       = 152,\n        LAST_TOKEN     = 152,\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307;",
        "begin_line": 183,
        "end_line": 264,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.DEBUGGER",
        "snippet": "    public final static int\n        FIRST_ASSIGN   = ASSIGN,\n        LAST_ASSIGN    = ASSIGN_MOD,\n\n        HOOK           = 98, // conditional (?:)\n        COLON          = 99,\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment/decrement (++ --)\n        DEC            = 103,\n        DOT            = 104, // member operator (.)\n        FUNCTION       = 105, // function keyword\n        EXPORT         = 106, // export keyword\n        IMPORT         = 107, // import keyword\n        IF             = 108, // if keyword\n        ELSE           = 109, // else keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT        = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        FINALLY        = 121, // finally keyword\n        VOID           = 122, // void keyword\n        RESERVED       = 123, // reserved keywords\n\n        EMPTY          = 124,\n\n        /* types used for the parse tree - these never get returned\n         * by the scanner.\n         */\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        TARGET         = 127,\n        LOOP           = 128,\n        EXPR_VOID      = 129, // expression statement in functions\n        EXPR_RESULT    = 130, // expression statement in scripts\n        JSR            = 131,\n        SCRIPT         = 132, // top-level node for entire script\n        TYPEOFNAME     = 133, // for typeof(simple-name)\n        USE_STACK      = 134,\n        SETPROP_OP     = 135, // x.y op= something\n        SETELEM_OP     = 136, // x[y] op= something\n        LOCAL_BLOCK    = 137,\n        SET_REF_OP     = 138, // *reference op= something\n\n        // For XML support:\n        DOTDOT         = 139,  // member operator (..)\n        COLONCOLON     = 140,  // namespace::name\n        XML            = 141,  // XML type\n        DOTQUERY       = 142,  // .() -- e.g., x.emps.emp.(name == \"terry\")\n        XMLATTR        = 143,  // @\n        XMLEND         = 144,\n\n        // Optimizer-only-tokens\n        TO_OBJECT      = 145,\n        TO_DOUBLE      = 146,\n\n        GET            = 147,  // JS 1.5 get pseudo keyword\n        SET            = 148,  // JS 1.5 set pseudo keyword\n\n        CONST          = 149,  // JS 1.5 const keyword\n        SETCONST       = 150,\n        SETCONSTVAR    = 151,\n        DEBUGGER       = 152,\n        LAST_TOKEN     = 152,\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307;",
        "begin_line": 183,
        "end_line": 264,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.LAST_TOKEN",
        "snippet": "    public final static int\n        FIRST_ASSIGN   = ASSIGN,\n        LAST_ASSIGN    = ASSIGN_MOD,\n\n        HOOK           = 98, // conditional (?:)\n        COLON          = 99,\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment/decrement (++ --)\n        DEC            = 103,\n        DOT            = 104, // member operator (.)\n        FUNCTION       = 105, // function keyword\n        EXPORT         = 106, // export keyword\n        IMPORT         = 107, // import keyword\n        IF             = 108, // if keyword\n        ELSE           = 109, // else keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT        = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        FINALLY        = 121, // finally keyword\n        VOID           = 122, // void keyword\n        RESERVED       = 123, // reserved keywords\n\n        EMPTY          = 124,\n\n        /* types used for the parse tree - these never get returned\n         * by the scanner.\n         */\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        TARGET         = 127,\n        LOOP           = 128,\n        EXPR_VOID      = 129, // expression statement in functions\n        EXPR_RESULT    = 130, // expression statement in scripts\n        JSR            = 131,\n        SCRIPT         = 132, // top-level node for entire script\n        TYPEOFNAME     = 133, // for typeof(simple-name)\n        USE_STACK      = 134,\n        SETPROP_OP     = 135, // x.y op= something\n        SETELEM_OP     = 136, // x[y] op= something\n        LOCAL_BLOCK    = 137,\n        SET_REF_OP     = 138, // *reference op= something\n\n        // For XML support:\n        DOTDOT         = 139,  // member operator (..)\n        COLONCOLON     = 140,  // namespace::name\n        XML            = 141,  // XML type\n        DOTQUERY       = 142,  // .() -- e.g., x.emps.emp.(name == \"terry\")\n        XMLATTR        = 143,  // @\n        XMLEND         = 144,\n\n        // Optimizer-only-tokens\n        TO_OBJECT      = 145,\n        TO_DOUBLE      = 146,\n\n        GET            = 147,  // JS 1.5 get pseudo keyword\n        SET            = 148,  // JS 1.5 set pseudo keyword\n\n        CONST          = 149,  // JS 1.5 const keyword\n        SETCONST       = 150,\n        SETCONSTVAR    = 151,\n        DEBUGGER       = 152,\n        LAST_TOKEN     = 152,\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307;",
        "begin_line": 183,
        "end_line": 264,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.ANNOTATION",
        "snippet": "    public final static int\n        FIRST_ASSIGN   = ASSIGN,\n        LAST_ASSIGN    = ASSIGN_MOD,\n\n        HOOK           = 98, // conditional (?:)\n        COLON          = 99,\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment/decrement (++ --)\n        DEC            = 103,\n        DOT            = 104, // member operator (.)\n        FUNCTION       = 105, // function keyword\n        EXPORT         = 106, // export keyword\n        IMPORT         = 107, // import keyword\n        IF             = 108, // if keyword\n        ELSE           = 109, // else keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT        = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        FINALLY        = 121, // finally keyword\n        VOID           = 122, // void keyword\n        RESERVED       = 123, // reserved keywords\n\n        EMPTY          = 124,\n\n        /* types used for the parse tree - these never get returned\n         * by the scanner.\n         */\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        TARGET         = 127,\n        LOOP           = 128,\n        EXPR_VOID      = 129, // expression statement in functions\n        EXPR_RESULT    = 130, // expression statement in scripts\n        JSR            = 131,\n        SCRIPT         = 132, // top-level node for entire script\n        TYPEOFNAME     = 133, // for typeof(simple-name)\n        USE_STACK      = 134,\n        SETPROP_OP     = 135, // x.y op= something\n        SETELEM_OP     = 136, // x[y] op= something\n        LOCAL_BLOCK    = 137,\n        SET_REF_OP     = 138, // *reference op= something\n\n        // For XML support:\n        DOTDOT         = 139,  // member operator (..)\n        COLONCOLON     = 140,  // namespace::name\n        XML            = 141,  // XML type\n        DOTQUERY       = 142,  // .() -- e.g., x.emps.emp.(name == \"terry\")\n        XMLATTR        = 143,  // @\n        XMLEND         = 144,\n\n        // Optimizer-only-tokens\n        TO_OBJECT      = 145,\n        TO_DOUBLE      = 146,\n\n        GET            = 147,  // JS 1.5 get pseudo keyword\n        SET            = 148,  // JS 1.5 set pseudo keyword\n\n        CONST          = 149,  // JS 1.5 const keyword\n        SETCONST       = 150,\n        SETCONSTVAR    = 151,\n        DEBUGGER       = 152,\n        LAST_TOKEN     = 152,\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307;",
        "begin_line": 183,
        "end_line": 264,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.PIPE",
        "snippet": "    public final static int\n        FIRST_ASSIGN   = ASSIGN,\n        LAST_ASSIGN    = ASSIGN_MOD,\n\n        HOOK           = 98, // conditional (?:)\n        COLON          = 99,\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment/decrement (++ --)\n        DEC            = 103,\n        DOT            = 104, // member operator (.)\n        FUNCTION       = 105, // function keyword\n        EXPORT         = 106, // export keyword\n        IMPORT         = 107, // import keyword\n        IF             = 108, // if keyword\n        ELSE           = 109, // else keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT        = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        FINALLY        = 121, // finally keyword\n        VOID           = 122, // void keyword\n        RESERVED       = 123, // reserved keywords\n\n        EMPTY          = 124,\n\n        /* types used for the parse tree - these never get returned\n         * by the scanner.\n         */\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        TARGET         = 127,\n        LOOP           = 128,\n        EXPR_VOID      = 129, // expression statement in functions\n        EXPR_RESULT    = 130, // expression statement in scripts\n        JSR            = 131,\n        SCRIPT         = 132, // top-level node for entire script\n        TYPEOFNAME     = 133, // for typeof(simple-name)\n        USE_STACK      = 134,\n        SETPROP_OP     = 135, // x.y op= something\n        SETELEM_OP     = 136, // x[y] op= something\n        LOCAL_BLOCK    = 137,\n        SET_REF_OP     = 138, // *reference op= something\n\n        // For XML support:\n        DOTDOT         = 139,  // member operator (..)\n        COLONCOLON     = 140,  // namespace::name\n        XML            = 141,  // XML type\n        DOTQUERY       = 142,  // .() -- e.g., x.emps.emp.(name == \"terry\")\n        XMLATTR        = 143,  // @\n        XMLEND         = 144,\n\n        // Optimizer-only-tokens\n        TO_OBJECT      = 145,\n        TO_DOUBLE      = 146,\n\n        GET            = 147,  // JS 1.5 get pseudo keyword\n        SET            = 148,  // JS 1.5 set pseudo keyword\n\n        CONST          = 149,  // JS 1.5 const keyword\n        SETCONST       = 150,\n        SETCONSTVAR    = 151,\n        DEBUGGER       = 152,\n        LAST_TOKEN     = 152,\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307;",
        "begin_line": 183,
        "end_line": 264,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.STAR",
        "snippet": "    public final static int\n        FIRST_ASSIGN   = ASSIGN,\n        LAST_ASSIGN    = ASSIGN_MOD,\n\n        HOOK           = 98, // conditional (?:)\n        COLON          = 99,\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment/decrement (++ --)\n        DEC            = 103,\n        DOT            = 104, // member operator (.)\n        FUNCTION       = 105, // function keyword\n        EXPORT         = 106, // export keyword\n        IMPORT         = 107, // import keyword\n        IF             = 108, // if keyword\n        ELSE           = 109, // else keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT        = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        FINALLY        = 121, // finally keyword\n        VOID           = 122, // void keyword\n        RESERVED       = 123, // reserved keywords\n\n        EMPTY          = 124,\n\n        /* types used for the parse tree - these never get returned\n         * by the scanner.\n         */\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        TARGET         = 127,\n        LOOP           = 128,\n        EXPR_VOID      = 129, // expression statement in functions\n        EXPR_RESULT    = 130, // expression statement in scripts\n        JSR            = 131,\n        SCRIPT         = 132, // top-level node for entire script\n        TYPEOFNAME     = 133, // for typeof(simple-name)\n        USE_STACK      = 134,\n        SETPROP_OP     = 135, // x.y op= something\n        SETELEM_OP     = 136, // x[y] op= something\n        LOCAL_BLOCK    = 137,\n        SET_REF_OP     = 138, // *reference op= something\n\n        // For XML support:\n        DOTDOT         = 139,  // member operator (..)\n        COLONCOLON     = 140,  // namespace::name\n        XML            = 141,  // XML type\n        DOTQUERY       = 142,  // .() -- e.g., x.emps.emp.(name == \"terry\")\n        XMLATTR        = 143,  // @\n        XMLEND         = 144,\n\n        // Optimizer-only-tokens\n        TO_OBJECT      = 145,\n        TO_DOUBLE      = 146,\n\n        GET            = 147,  // JS 1.5 get pseudo keyword\n        SET            = 148,  // JS 1.5 set pseudo keyword\n\n        CONST          = 149,  // JS 1.5 const keyword\n        SETCONST       = 150,\n        SETCONSTVAR    = 151,\n        DEBUGGER       = 152,\n        LAST_TOKEN     = 152,\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307;",
        "begin_line": 183,
        "end_line": 264,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.EOC",
        "snippet": "    public final static int\n        FIRST_ASSIGN   = ASSIGN,\n        LAST_ASSIGN    = ASSIGN_MOD,\n\n        HOOK           = 98, // conditional (?:)\n        COLON          = 99,\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment/decrement (++ --)\n        DEC            = 103,\n        DOT            = 104, // member operator (.)\n        FUNCTION       = 105, // function keyword\n        EXPORT         = 106, // export keyword\n        IMPORT         = 107, // import keyword\n        IF             = 108, // if keyword\n        ELSE           = 109, // else keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT        = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        FINALLY        = 121, // finally keyword\n        VOID           = 122, // void keyword\n        RESERVED       = 123, // reserved keywords\n\n        EMPTY          = 124,\n\n        /* types used for the parse tree - these never get returned\n         * by the scanner.\n         */\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        TARGET         = 127,\n        LOOP           = 128,\n        EXPR_VOID      = 129, // expression statement in functions\n        EXPR_RESULT    = 130, // expression statement in scripts\n        JSR            = 131,\n        SCRIPT         = 132, // top-level node for entire script\n        TYPEOFNAME     = 133, // for typeof(simple-name)\n        USE_STACK      = 134,\n        SETPROP_OP     = 135, // x.y op= something\n        SETELEM_OP     = 136, // x[y] op= something\n        LOCAL_BLOCK    = 137,\n        SET_REF_OP     = 138, // *reference op= something\n\n        // For XML support:\n        DOTDOT         = 139,  // member operator (..)\n        COLONCOLON     = 140,  // namespace::name\n        XML            = 141,  // XML type\n        DOTQUERY       = 142,  // .() -- e.g., x.emps.emp.(name == \"terry\")\n        XMLATTR        = 143,  // @\n        XMLEND         = 144,\n\n        // Optimizer-only-tokens\n        TO_OBJECT      = 145,\n        TO_DOUBLE      = 146,\n\n        GET            = 147,  // JS 1.5 get pseudo keyword\n        SET            = 148,  // JS 1.5 set pseudo keyword\n\n        CONST          = 149,  // JS 1.5 const keyword\n        SETCONST       = 150,\n        SETCONSTVAR    = 151,\n        DEBUGGER       = 152,\n        LAST_TOKEN     = 152,\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307;",
        "begin_line": 183,
        "end_line": 264,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.QMARK",
        "snippet": "    public final static int\n        FIRST_ASSIGN   = ASSIGN,\n        LAST_ASSIGN    = ASSIGN_MOD,\n\n        HOOK           = 98, // conditional (?:)\n        COLON          = 99,\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment/decrement (++ --)\n        DEC            = 103,\n        DOT            = 104, // member operator (.)\n        FUNCTION       = 105, // function keyword\n        EXPORT         = 106, // export keyword\n        IMPORT         = 107, // import keyword\n        IF             = 108, // if keyword\n        ELSE           = 109, // else keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT        = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        FINALLY        = 121, // finally keyword\n        VOID           = 122, // void keyword\n        RESERVED       = 123, // reserved keywords\n\n        EMPTY          = 124,\n\n        /* types used for the parse tree - these never get returned\n         * by the scanner.\n         */\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        TARGET         = 127,\n        LOOP           = 128,\n        EXPR_VOID      = 129, // expression statement in functions\n        EXPR_RESULT    = 130, // expression statement in scripts\n        JSR            = 131,\n        SCRIPT         = 132, // top-level node for entire script\n        TYPEOFNAME     = 133, // for typeof(simple-name)\n        USE_STACK      = 134,\n        SETPROP_OP     = 135, // x.y op= something\n        SETELEM_OP     = 136, // x[y] op= something\n        LOCAL_BLOCK    = 137,\n        SET_REF_OP     = 138, // *reference op= something\n\n        // For XML support:\n        DOTDOT         = 139,  // member operator (..)\n        COLONCOLON     = 140,  // namespace::name\n        XML            = 141,  // XML type\n        DOTQUERY       = 142,  // .() -- e.g., x.emps.emp.(name == \"terry\")\n        XMLATTR        = 143,  // @\n        XMLEND         = 144,\n\n        // Optimizer-only-tokens\n        TO_OBJECT      = 145,\n        TO_DOUBLE      = 146,\n\n        GET            = 147,  // JS 1.5 get pseudo keyword\n        SET            = 148,  // JS 1.5 set pseudo keyword\n\n        CONST          = 149,  // JS 1.5 const keyword\n        SETCONST       = 150,\n        SETCONSTVAR    = 151,\n        DEBUGGER       = 152,\n        LAST_TOKEN     = 152,\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307;",
        "begin_line": 183,
        "end_line": 264,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.ELLIPSIS",
        "snippet": "    public final static int\n        FIRST_ASSIGN   = ASSIGN,\n        LAST_ASSIGN    = ASSIGN_MOD,\n\n        HOOK           = 98, // conditional (?:)\n        COLON          = 99,\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment/decrement (++ --)\n        DEC            = 103,\n        DOT            = 104, // member operator (.)\n        FUNCTION       = 105, // function keyword\n        EXPORT         = 106, // export keyword\n        IMPORT         = 107, // import keyword\n        IF             = 108, // if keyword\n        ELSE           = 109, // else keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT        = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        FINALLY        = 121, // finally keyword\n        VOID           = 122, // void keyword\n        RESERVED       = 123, // reserved keywords\n\n        EMPTY          = 124,\n\n        /* types used for the parse tree - these never get returned\n         * by the scanner.\n         */\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        TARGET         = 127,\n        LOOP           = 128,\n        EXPR_VOID      = 129, // expression statement in functions\n        EXPR_RESULT    = 130, // expression statement in scripts\n        JSR            = 131,\n        SCRIPT         = 132, // top-level node for entire script\n        TYPEOFNAME     = 133, // for typeof(simple-name)\n        USE_STACK      = 134,\n        SETPROP_OP     = 135, // x.y op= something\n        SETELEM_OP     = 136, // x[y] op= something\n        LOCAL_BLOCK    = 137,\n        SET_REF_OP     = 138, // *reference op= something\n\n        // For XML support:\n        DOTDOT         = 139,  // member operator (..)\n        COLONCOLON     = 140,  // namespace::name\n        XML            = 141,  // XML type\n        DOTQUERY       = 142,  // .() -- e.g., x.emps.emp.(name == \"terry\")\n        XMLATTR        = 143,  // @\n        XMLEND         = 144,\n\n        // Optimizer-only-tokens\n        TO_OBJECT      = 145,\n        TO_DOUBLE      = 146,\n\n        GET            = 147,  // JS 1.5 get pseudo keyword\n        SET            = 148,  // JS 1.5 set pseudo keyword\n\n        CONST          = 149,  // JS 1.5 const keyword\n        SETCONST       = 150,\n        SETCONSTVAR    = 151,\n        DEBUGGER       = 152,\n        LAST_TOKEN     = 152,\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307;",
        "begin_line": 183,
        "end_line": 264,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.BANG",
        "snippet": "    public final static int\n        FIRST_ASSIGN   = ASSIGN,\n        LAST_ASSIGN    = ASSIGN_MOD,\n\n        HOOK           = 98, // conditional (?:)\n        COLON          = 99,\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment/decrement (++ --)\n        DEC            = 103,\n        DOT            = 104, // member operator (.)\n        FUNCTION       = 105, // function keyword\n        EXPORT         = 106, // export keyword\n        IMPORT         = 107, // import keyword\n        IF             = 108, // if keyword\n        ELSE           = 109, // else keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT        = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        FINALLY        = 121, // finally keyword\n        VOID           = 122, // void keyword\n        RESERVED       = 123, // reserved keywords\n\n        EMPTY          = 124,\n\n        /* types used for the parse tree - these never get returned\n         * by the scanner.\n         */\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        TARGET         = 127,\n        LOOP           = 128,\n        EXPR_VOID      = 129, // expression statement in functions\n        EXPR_RESULT    = 130, // expression statement in scripts\n        JSR            = 131,\n        SCRIPT         = 132, // top-level node for entire script\n        TYPEOFNAME     = 133, // for typeof(simple-name)\n        USE_STACK      = 134,\n        SETPROP_OP     = 135, // x.y op= something\n        SETELEM_OP     = 136, // x[y] op= something\n        LOCAL_BLOCK    = 137,\n        SET_REF_OP     = 138, // *reference op= something\n\n        // For XML support:\n        DOTDOT         = 139,  // member operator (..)\n        COLONCOLON     = 140,  // namespace::name\n        XML            = 141,  // XML type\n        DOTQUERY       = 142,  // .() -- e.g., x.emps.emp.(name == \"terry\")\n        XMLATTR        = 143,  // @\n        XMLEND         = 144,\n\n        // Optimizer-only-tokens\n        TO_OBJECT      = 145,\n        TO_DOUBLE      = 146,\n\n        GET            = 147,  // JS 1.5 get pseudo keyword\n        SET            = 148,  // JS 1.5 set pseudo keyword\n\n        CONST          = 149,  // JS 1.5 const keyword\n        SETCONST       = 150,\n        SETCONSTVAR    = 151,\n        DEBUGGER       = 152,\n        LAST_TOKEN     = 152,\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307;",
        "begin_line": 183,
        "end_line": 264,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.EQUALS",
        "snippet": "    public final static int\n        FIRST_ASSIGN   = ASSIGN,\n        LAST_ASSIGN    = ASSIGN_MOD,\n\n        HOOK           = 98, // conditional (?:)\n        COLON          = 99,\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment/decrement (++ --)\n        DEC            = 103,\n        DOT            = 104, // member operator (.)\n        FUNCTION       = 105, // function keyword\n        EXPORT         = 106, // export keyword\n        IMPORT         = 107, // import keyword\n        IF             = 108, // if keyword\n        ELSE           = 109, // else keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT        = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        FINALLY        = 121, // finally keyword\n        VOID           = 122, // void keyword\n        RESERVED       = 123, // reserved keywords\n\n        EMPTY          = 124,\n\n        /* types used for the parse tree - these never get returned\n         * by the scanner.\n         */\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        TARGET         = 127,\n        LOOP           = 128,\n        EXPR_VOID      = 129, // expression statement in functions\n        EXPR_RESULT    = 130, // expression statement in scripts\n        JSR            = 131,\n        SCRIPT         = 132, // top-level node for entire script\n        TYPEOFNAME     = 133, // for typeof(simple-name)\n        USE_STACK      = 134,\n        SETPROP_OP     = 135, // x.y op= something\n        SETELEM_OP     = 136, // x[y] op= something\n        LOCAL_BLOCK    = 137,\n        SET_REF_OP     = 138, // *reference op= something\n\n        // For XML support:\n        DOTDOT         = 139,  // member operator (..)\n        COLONCOLON     = 140,  // namespace::name\n        XML            = 141,  // XML type\n        DOTQUERY       = 142,  // .() -- e.g., x.emps.emp.(name == \"terry\")\n        XMLATTR        = 143,  // @\n        XMLEND         = 144,\n\n        // Optimizer-only-tokens\n        TO_OBJECT      = 145,\n        TO_DOUBLE      = 146,\n\n        GET            = 147,  // JS 1.5 get pseudo keyword\n        SET            = 148,  // JS 1.5 set pseudo keyword\n\n        CONST          = 149,  // JS 1.5 const keyword\n        SETCONST       = 150,\n        SETCONSTVAR    = 151,\n        DEBUGGER       = 152,\n        LAST_TOKEN     = 152,\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307;",
        "begin_line": 183,
        "end_line": 264,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.graph.AnnotationState",
        "src_path": "src/com/google/javascript/jscomp/graph/Graph.java",
        "signature": "com.google.javascript.jscomp.graph.AnnotationState.first",
        "snippet": "    private final Annotatable first;",
        "begin_line": 64,
        "end_line": 64,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.graph.AnnotationState",
        "src_path": "src/com/google/javascript/jscomp/graph/Graph.java",
        "signature": "com.google.javascript.jscomp.graph.AnnotationState.second",
        "snippet": "    private final Annotation second;",
        "begin_line": 65,
        "end_line": 65,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.graph.GraphAnnotationState",
        "src_path": "src/com/google/javascript/jscomp/graph/Graph.java",
        "signature": "com.google.javascript.jscomp.graph.GraphAnnotationState.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 1L;",
        "begin_line": 78,
        "end_line": 78,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.graph.Graph",
        "src_path": "src/com/google/javascript/jscomp/graph/Graph.java",
        "signature": "com.google.javascript.jscomp.graph.Graph.nodeAnnotationStack",
        "snippet": "  private Deque<GraphAnnotationState> nodeAnnotationStack;",
        "begin_line": 88,
        "end_line": 88,
        "comment": "\n   * Used by {@link #pushNodeAnnotations()} and {@link #popNodeAnnotations()}.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.graph.Graph",
        "src_path": "src/com/google/javascript/jscomp/graph/Graph.java",
        "signature": "com.google.javascript.jscomp.graph.Graph.edgeAnnotationStack",
        "snippet": "  private Deque<GraphAnnotationState> edgeAnnotationStack;",
        "begin_line": 93,
        "end_line": 93,
        "comment": "\n   * Used by {@link #pushEdgeAnnotations()} and {@link #popEdgeAnnotations()}.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.graph.SimpleSubGraph",
        "src_path": "src/com/google/javascript/jscomp/graph/Graph.java",
        "signature": "com.google.javascript.jscomp.graph.SimpleSubGraph.graph",
        "snippet": "    private Graph<N, E> graph;",
        "begin_line": 286,
        "end_line": 286,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.graph.SimpleSubGraph",
        "src_path": "src/com/google/javascript/jscomp/graph/Graph.java",
        "signature": "com.google.javascript.jscomp.graph.SimpleSubGraph.nodes",
        "snippet": "    private List<GraphNode<N, E>> nodes = Lists.newArrayList();",
        "begin_line": 287,
        "end_line": 287,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.COMPILED_CONSTANT_NAME",
        "snippet": "  private static final String COMPILED_CONSTANT_NAME = \"COMPILED\";",
        "begin_line": 52,
        "end_line": 52,
        "comment": " For the --mark-as-compiled pass "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.CLOSURE_LOCALE_CONSTANT_NAME",
        "snippet": "  private static final String CLOSURE_LOCALE_CONSTANT_NAME = \"goog.LOCALE\";",
        "begin_line": 55,
        "end_line": 55,
        "comment": " Constant name for Closure's locale "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.TIGHTEN_TYPES_WITHOUT_TYPE_CHECK",
        "snippet": "  static final DiagnosticType TIGHTEN_TYPES_WITHOUT_TYPE_CHECK =\n      DiagnosticType.error(\"JSC_TIGHTEN_TYPES_WITHOUT_TYPE_CHECK\",\n          \"TightenTypes requires type checking. Please use --check_types.\");",
        "begin_line": 58,
        "end_line": 60,
        "comment": " Compiler errors when invalid combinations of passes are run."
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.CANNOT_USE_PROTOTYPE_AND_VAR",
        "snippet": "  static final DiagnosticType CANNOT_USE_PROTOTYPE_AND_VAR =\n      DiagnosticType.error(\"JSC_CANNOT_USE_PROTOTYPE_AND_VAR\",\n          \"Rename prototypes and inline variables cannot be used together\");",
        "begin_line": 62,
        "end_line": 64,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.REPORT_PATH_IO_ERROR",
        "snippet": "  static final DiagnosticType REPORT_PATH_IO_ERROR =\n      DiagnosticType.error(\"JSC_REPORT_PATH_IO_ERROR\",\n          \"Error writing compiler report to {0}\");",
        "begin_line": 67,
        "end_line": 69,
        "comment": " Miscellaneous errors."
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.INPUT_MAP_PROP_PARSE",
        "snippet": "  private static final DiagnosticType INPUT_MAP_PROP_PARSE =\n      DiagnosticType.error(\"JSC_INPUT_MAP_PROP_PARSE\",\n          \"Input property map parse error: {0}\");",
        "begin_line": 71,
        "end_line": 73,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.INPUT_MAP_VAR_PARSE",
        "snippet": "  private static final DiagnosticType INPUT_MAP_VAR_PARSE =\n      DiagnosticType.error(\"JSC_INPUT_MAP_VAR_PARSE\",\n          \"Input variable map parse error: {0}\");",
        "begin_line": 75,
        "end_line": 77,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.namespaceForChecks",
        "snippet": "  private GlobalNamespace namespaceForChecks = null;",
        "begin_line": 84,
        "end_line": 84,
        "comment": "\n   * A global namespace to share across checking passes.\n   * TODO(nicksantos): This is a hack until I can get the namespace into\n   * the symbol table.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.tightenTypes",
        "snippet": "  private TightenTypes tightenTypes = null;",
        "begin_line": 89,
        "end_line": 89,
        "comment": "\n   * A type-tightener to share across optimization passes.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.exportedNames",
        "snippet": "  private Set<String> exportedNames = null;",
        "begin_line": 92,
        "end_line": 92,
        "comment": " Names exported by goog.exportSymbol. "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.crossModuleIdGenerator",
        "snippet": "  private CrossModuleMethodMotion.IdGenerator crossModuleIdGenerator =\n      new CrossModuleMethodMotion.IdGenerator();",
        "begin_line": 98,
        "end_line": 99,
        "comment": "\n   * Ids for cross-module method stubbing, so that each method has\n   * a unique id.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.cssNames",
        "snippet": "  private Map<String, Integer> cssNames = null;",
        "begin_line": 105,
        "end_line": 105,
        "comment": "\n   * Keys are arguments passed to getCssName() found during compilation; values\n   * are the number of times the key appeared as an argument to getCssName().\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.variableMap",
        "snippet": "  private VariableMap variableMap = null;",
        "begin_line": 108,
        "end_line": 108,
        "comment": " The variable renaming map "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.propertyMap",
        "snippet": "  private VariableMap propertyMap = null;",
        "begin_line": 111,
        "end_line": 111,
        "comment": " The property renaming map "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.anonymousFunctionNameMap",
        "snippet": "  private VariableMap anonymousFunctionNameMap = null;",
        "begin_line": 114,
        "end_line": 114,
        "comment": " The naming map for anonymous functions "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.functionNames",
        "snippet": "  private FunctionNames functionNames = null;",
        "begin_line": 117,
        "end_line": 117,
        "comment": " Fully qualified function names and globally unique ids "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.suspiciousCode",
        "snippet": "  final PassFactory suspiciousCode =\n      new PassFactory(\"suspiciousCode\", true) {\n\n    @Override\n    protected CompilerPass createInternal(final AbstractCompiler compiler) {\n      List<Callback> sharedCallbacks = Lists.newArrayList();\n      sharedCallbacks.add(new CheckAccidentalSemicolon(CheckLevel.WARNING));\n      sharedCallbacks.add(new CheckSideEffects(CheckLevel.WARNING));\n      if (options.checkGlobalThisLevel.isOn()) {\n        sharedCallbacks.add(\n            new CheckGlobalThis(compiler, options.checkGlobalThisLevel));\n      }\n      return combineChecks(compiler, sharedCallbacks);\n    }\n\n  };",
        "begin_line": 617,
        "end_line": 632,
        "comment": " TODO(bolinfest): Write a CompilerPass for this."
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.checkControlStructures",
        "snippet": "  private final PassFactory checkControlStructures =\n      new PassFactory(\"checkControlStructures\", true) {\n    @Override\n    protected CompilerPass createInternal(AbstractCompiler compiler) {\n      return new ControlStructureCheck(compiler);\n    }\n  };",
        "begin_line": 649,
        "end_line": 655,
        "comment": " Checks for validity of the control structures. "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.checkRequires",
        "snippet": "  private final PassFactory checkRequires =\n      new PassFactory(\"checkRequires\", true) {\n    @Override\n    protected CompilerPass createInternal(AbstractCompiler compiler) {\n      return new CheckRequiresForConstructors(compiler, options.checkRequires);\n    }\n  };",
        "begin_line": 658,
        "end_line": 664,
        "comment": " Checks that all constructed classes are goog.require()d. "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.checkProvides",
        "snippet": "  private final PassFactory checkProvides =\n      new PassFactory(\"checkProvides\", true) {\n    @Override\n    protected CompilerPass createInternal(AbstractCompiler compiler) {\n      return new CheckProvides(compiler, options.checkProvides);\n    }\n  };",
        "begin_line": 667,
        "end_line": 673,
        "comment": " Makes sure @constructor is paired with goog.provides(). "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.GENERATE_EXPORTS_ERROR",
        "snippet": "  private static final DiagnosticType GENERATE_EXPORTS_ERROR =\n      DiagnosticType.error(\n          \"JSC_GENERATE_EXPORTS_ERROR\",\n          \"Exports can only be generated if export symbol/property \" +\n          \"functions are set.\");",
        "begin_line": 675,
        "end_line": 679,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.generateExports",
        "snippet": "  private final PassFactory generateExports =\n      new PassFactory(\"generateExports\", true) {\n    @Override\n    protected CompilerPass createInternal(AbstractCompiler compiler) {\n      CodingConvention convention = compiler.getCodingConvention();\n      if (convention.getExportSymbolFunction() != null &&\n          convention.getExportPropertyFunction() != null) {\n        return new GenerateExports(compiler,\n            convention.getExportSymbolFunction(),\n            convention.getExportPropertyFunction());\n      } else {\n        return new ErrorPass(compiler, GENERATE_EXPORTS_ERROR);\n      }\n    }\n  };",
        "begin_line": 682,
        "end_line": 696,
        "comment": " Generates exports for @export annotations. "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.exportTestFunctions",
        "snippet": "  private final PassFactory exportTestFunctions =\n      new PassFactory(\"exportTestFunctions\", true) {\n    @Override\n    protected CompilerPass createInternal(AbstractCompiler compiler) {\n      CodingConvention convention = compiler.getCodingConvention();\n      if (convention.getExportSymbolFunction() != null) {\n        return new ExportTestFunctions(compiler,\n            convention.getExportSymbolFunction());\n      } else {\n        return new ErrorPass(compiler, GENERATE_EXPORTS_ERROR);\n      }\n    }\n  };",
        "begin_line": 699,
        "end_line": 711,
        "comment": " Generates exports for functions associated with JSUnit. "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.gatherRawExports",
        "snippet": "  final PassFactory gatherRawExports =\n      new PassFactory(\"gatherRawExports\", false) {\n    @Override\n    protected CompilerPass createInternal(AbstractCompiler compiler) {\n      final GatherRawExports pass = new GatherRawExports(\n          compiler);\n\n      return new CompilerPass() {\n        @Override\n        public void process(Node externs, Node root) {\n          pass.process(externs, root);\n          if (exportedNames == null) {\n            exportedNames = Sets.newHashSet();\n          }\n          exportedNames.addAll(pass.getExportedVariableNames());\n        }\n      };\n    }\n  };",
        "begin_line": 714,
        "end_line": 732,
        "comment": " Raw exports processing pass. "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.closurePrimitives",
        "snippet": "  @SuppressWarnings(\"deprecation\")\n  final PassFactory closurePrimitives =\n      new PassFactory(\"processProvidesAndRequires\", false) {\n    @Override\n    protected CompilerPass createInternal(AbstractCompiler compiler) {\n      final ProcessClosurePrimitives pass = new ProcessClosurePrimitives(\n          compiler,\n          options.brokenClosureRequiresLevel,\n          options.rewriteNewDateGoogNow);\n\n      return new CompilerPass() {\n        @Override\n        public void process(Node externs, Node root) {\n          pass.process(externs, root);\n          exportedNames = pass.getExportedVariableNames();\n        }\n      };\n    }\n  };",
        "begin_line": 735,
        "end_line": 753,
        "comment": " Closure pre-processing pass. "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.closureCheckGetCssName",
        "snippet": "  private final PassFactory closureCheckGetCssName =\n      new PassFactory(\"checkMissingGetCssName\", true) {\n    @Override\n    protected CompilerPass createInternal(AbstractCompiler compiler) {\n      String blacklist = options.checkMissingGetCssNameBlacklist;\n      Preconditions.checkState(blacklist != null && !blacklist.isEmpty(),\n          \"Not checking use of goog.getCssName because of empty blacklist.\");\n      return new CheckMissingGetCssName(\n          compiler, options.checkMissingGetCssNameLevel, blacklist);\n    }\n  };",
        "begin_line": 756,
        "end_line": 766,
        "comment": " Checks that CSS class names are wrapped in goog.getCssName "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.closureReplaceGetCssName",
        "snippet": "  private final PassFactory closureReplaceGetCssName =\n      new PassFactory(\"renameCssNames\", true) {\n    @Override\n    protected CompilerPass createInternal(final AbstractCompiler compiler) {\n      return new CompilerPass() {\n        @Override\n        public void process(Node externs, Node jsRoot) {\n          Map<String, Integer> newCssNames = null;\n          if (options.gatherCssNames) {\n            newCssNames = Maps.newHashMap();\n          }\n          (new ReplaceCssNames(compiler, newCssNames)).process(\n              externs, jsRoot);\n          cssNames = newCssNames;\n        }\n      };\n    }\n  };",
        "begin_line": 773,
        "end_line": 790,
        "comment": "\n   * Processes goog.getCssName.  The cssRenamingMap is used to lookup\n   * replacement values for the classnames.  If null, the raw class names are\n   * inlined.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.createSyntheticBlocks",
        "snippet": "  private final PassFactory createSyntheticBlocks =\n      new PassFactory(\"createSyntheticBlocks\", true) {\n    @Override\n    protected CompilerPass createInternal(AbstractCompiler compiler) {\n      return new CreateSyntheticBlocks(compiler,\n          options.syntheticBlockStartMarker,\n          options.syntheticBlockEndMarker);\n    }\n  };",
        "begin_line": 796,
        "end_line": 804,
        "comment": "\n   * Creates synthetic blocks to prevent FoldConstants from moving code\n   * past markers in the source.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.foldConstants",
        "snippet": "  static final PassFactory foldConstants =\n      new PassFactory(\"foldConstants\", false) {\n    @Override\n    protected CompilerPass createInternal(AbstractCompiler compiler) {\n      return new FoldConstants(compiler);\n    }\n  };",
        "begin_line": 807,
        "end_line": 813,
        "comment": " Local constant folding "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.checkVars",
        "snippet": "  private final PassFactory checkVars =\n      new PassFactory(\"checkVars\", true) {\n    @Override\n    protected CompilerPass createInternal(AbstractCompiler compiler) {\n      return new VarCheck(compiler);\n    }\n  };",
        "begin_line": 816,
        "end_line": 822,
        "comment": " Checks that all variables are defined. "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.checkShadowVars",
        "snippet": "  private final PassFactory checkShadowVars =\n      new PassFactory(\"variableShadowDeclarationCheck\", true) {\n    @Override\n    protected CompilerPass createInternal(AbstractCompiler compiler) {\n      return new VariableShadowDeclarationCheck(\n          compiler, options.checkShadowVars);\n    }\n  };",
        "begin_line": 825,
        "end_line": 832,
        "comment": " Checks that no vars are illegally shadowed. "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.checkVariableReferences",
        "snippet": "  private final PassFactory checkVariableReferences =\n      new PassFactory(\"checkVariableReferences\", true) {\n    @Override\n    protected CompilerPass createInternal(AbstractCompiler compiler) {\n      return new VariableReferenceCheck(\n          compiler, options.aggressiveVarCheck);\n    }\n  };",
        "begin_line": 835,
        "end_line": 842,
        "comment": " Checks that references to variables look reasonable. "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.objectPropertyStringPreprocess",
        "snippet": "  private final PassFactory objectPropertyStringPreprocess =\n      new PassFactory(\"ObjectPropertyStringPreprocess\", true) {\n    @Override\n    protected CompilerPass createInternal(AbstractCompiler compiler) {\n      return new ObjectPropertyStringPreprocess(compiler);\n    }\n  };",
        "begin_line": 845,
        "end_line": 851,
        "comment": " Pre-process goog.testing.ObjectPropertyString. "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.checkFunctions",
        "snippet": "  private final PassFactory checkFunctions =\n      new PassFactory(\"checkFunctions\", true) {\n    @Override\n    protected CompilerPass createInternal(AbstractCompiler compiler) {\n      return new FunctionCheck(compiler, options.checkFunctions);\n    }\n  };",
        "begin_line": 854,
        "end_line": 860,
        "comment": " Checks number of args passed to functions. "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.checkMethods",
        "snippet": "  private final PassFactory checkMethods =\n      new PassFactory(\"checkMethods\", true) {\n    @Override\n    protected CompilerPass createInternal(AbstractCompiler compiler) {\n      return new MethodCheck(compiler, options.checkMethods);\n    }\n  };",
        "begin_line": 863,
        "end_line": 869,
        "comment": " Checks number of args passed to methods. "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.resolveTypes",
        "snippet": "  final PassFactory resolveTypes =\n      new PassFactory(\"resolveTypes\", false) {\n    @Override\n    protected CompilerPass createInternal(AbstractCompiler compiler) {\n      return new GlobalTypeResolver(compiler);\n    }\n  };",
        "begin_line": 872,
        "end_line": 878,
        "comment": " Creates a typed scope and adds types to the type registry. "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.inferTypes",
        "snippet": "  private final PassFactory inferTypes =\n      new PassFactory(\"inferTypes\", false) {\n    @Override\n    protected CompilerPass createInternal(final AbstractCompiler compiler) {\n      return new CompilerPass() {\n        @Override\n        public void process(Node externs, Node root) {\n          Preconditions.checkNotNull(topScope);\n          Preconditions.checkNotNull(typedScopeCreator);\n\n          makeTypeInference(compiler).process(externs, root);\n        }\n      };\n    }\n  };",
        "begin_line": 881,
        "end_line": 895,
        "comment": " Rusn type inference. "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.checkTypes",
        "snippet": "  private final PassFactory checkTypes =\n      new PassFactory(\"checkTypes\", false) {\n    @Override\n    protected CompilerPass createInternal(final AbstractCompiler compiler) {\n      return new CompilerPass() {\n        @Override\n        public void process(Node externs, Node root) {\n          Preconditions.checkNotNull(topScope);\n          Preconditions.checkNotNull(typedScopeCreator);\n\n          TypeCheck check = makeTypeCheck(compiler);\n          check.process(externs, root);\n          compiler.getErrorManager().setTypedPercent(check.getTypedPercent());\n        }\n      };\n    }\n  };",
        "begin_line": 898,
        "end_line": 914,
        "comment": " Checks type usage "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.checkControlFlow",
        "snippet": "  private final PassFactory checkControlFlow =\n      new PassFactory(\"checkControlFlow\", true) {\n    @Override\n    protected CompilerPass createInternal(AbstractCompiler compiler) {\n      List<Callback> callbacks = Lists.newArrayList();\n      if (options.checkUnreachableCode.isOn()) {\n        callbacks.add(\n            new CheckUnreachableCode(compiler, options.checkUnreachableCode));\n      }\n      if (options.checkMissingReturn.isOn() && options.checkTypes) {\n        callbacks.add(\n            new CheckMissingReturn(compiler, options.checkMissingReturn));\n      }\n      return combineChecks(compiler, callbacks);\n    }\n  };",
        "begin_line": 920,
        "end_line": 935,
        "comment": "\n   * Checks possible execution paths of the program for problems: missing return\n   * statements and dead code.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.checkAccessControls",
        "snippet": "  private final PassFactory checkAccessControls =\n      new PassFactory(\"checkAccessControls\", true) {\n    @Override\n    protected CompilerPass createInternal(AbstractCompiler compiler) {\n      return new CheckAccessControls(compiler);\n    }\n  };",
        "begin_line": 938,
        "end_line": 944,
        "comment": " Checks access controls. Depends on type-inference. "
    },
    {
        "class_name": "com.google.javascript.jscomp.GlobalTypeResolver",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.GlobalTypeResolver.compiler",
        "snippet": "    private final AbstractCompiler compiler;",
        "begin_line": 956,
        "end_line": 956,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.checkGlobalNames",
        "snippet": "  private final PassFactory checkGlobalNames =\n      new PassFactory(\"Check names\", true) {\n    @Override\n    protected CompilerPass createInternal(final AbstractCompiler compiler) {\n      return new CompilerPass() {\n        @Override\n        public void process(Node externs, Node jsRoot) {\n          // Create a global namespace for analysis by check passes.\n          // Note that this class does all heavy computation lazily,\n          // so it's OK to create it here.\n          namespaceForChecks = new GlobalNamespace(compiler, jsRoot);\n          new CheckGlobalNames(compiler, options.checkGlobalNamesLevel)\n              .injectNamespace(namespaceForChecks).process(externs, jsRoot);\n        }\n      };\n    }\n  };",
        "begin_line": 975,
        "end_line": 991,
        "comment": " Checks global name usage. "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.checkSuspiciousProperties",
        "snippet": "  private final PassFactory checkSuspiciousProperties =\n      new PassFactory(\"checkSuspiciousProperties\", true) {\n    @Override\n    protected CompilerPass createInternal(AbstractCompiler compiler) {\n      return new SuspiciousPropertiesCheck(\n          compiler,\n          options.checkUndefinedProperties,\n          options.checkUnusedPropertiesEarly ?\n              CheckLevel.WARNING : CheckLevel.OFF);\n    }\n  };",
        "begin_line": 994,
        "end_line": 1004,
        "comment": " Checks for properties that are not read or written "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.checkStrictMode",
        "snippet": "  private final PassFactory checkStrictMode =\n      new PassFactory(\"checkStrictMode\", true) {\n    @Override\n    protected CompilerPass createInternal(AbstractCompiler compiler) {\n      return new StrictModeCheck(compiler,\n          !options.checkSymbols,  // don't check variables twice\n          !options.checkCaja);    // disable eval check if not Caja\n    }\n  };",
        "begin_line": 1007,
        "end_line": 1015,
        "comment": " Checks that the code is ES5 or Caja compliant. "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.processDefines",
        "snippet": "  final PassFactory processDefines =\n      new PassFactory(\"processDefines\", true) {\n    @Override\n    protected CompilerPass createInternal(final AbstractCompiler compiler) {\n      return new CompilerPass() {\n        @Override\n        public void process(Node externs, Node jsRoot) {\n          Map<String, Node> replacements = getAdditionalReplacements(options);\n          replacements.putAll(options.getDefineReplacements());\n\n          new ProcessDefines(compiler, replacements)\n              .injectNamespace(namespaceForChecks).process(externs, jsRoot);\n\n          // Kill the namespace in the other class\n          // so that it can be garbage collected after all passes\n          // are through with it.\n          namespaceForChecks = null;\n        }\n      };\n    }\n  };",
        "begin_line": 1018,
        "end_line": 1038,
        "comment": " Override @define-annotated constants. "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.checkConsts",
        "snippet": "  private final PassFactory checkConsts =\n      new PassFactory(\"checkConsts\", true) {\n    @Override\n    protected CompilerPass createInternal(AbstractCompiler compiler) {\n      return new ConstCheck(compiler);\n    }\n  };",
        "begin_line": 1041,
        "end_line": 1047,
        "comment": " Checks that all constants are not modified "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.computeFunctionNames",
        "snippet": "  private final PassFactory computeFunctionNames =\n      new PassFactory(\"computeFunctionNames\", true) {\n    @Override\n    protected CompilerPass createInternal(AbstractCompiler compiler) {\n      return ((functionNames = new FunctionNames(compiler)));\n    }\n  };",
        "begin_line": 1050,
        "end_line": 1056,
        "comment": " Computes the names of functions for later analysis. "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.ignoreCajaProperties",
        "snippet": "  private final PassFactory ignoreCajaProperties =\n      new PassFactory(\"ignoreCajaProperties\", true) {\n    @Override\n    protected CompilerPass createInternal(AbstractCompiler compiler) {\n      return new IgnoreCajaProperties(compiler);\n    }\n  };",
        "begin_line": 1059,
        "end_line": 1065,
        "comment": " Skips Caja-private properties in for-in loops "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.runtimeTypeCheck",
        "snippet": "  private final PassFactory runtimeTypeCheck =\n      new PassFactory(\"runtimeTypeCheck\", true) {\n    @Override\n    protected CompilerPass createInternal(AbstractCompiler compiler) {\n      return new RuntimeTypeCheck(compiler,\n          options.runtimeTypeCheckLogFunction);\n    }\n  };",
        "begin_line": 1068,
        "end_line": 1075,
        "comment": " Inserts runtime type assertions for debugging. "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.replaceIdGenerators",
        "snippet": "  private final PassFactory replaceIdGenerators =\n      new PassFactory(\"replaceIdGenerators\", true) {\n    @Override\n    protected CompilerPass createInternal(AbstractCompiler compiler) {\n      return new ReplaceIdGenerators(compiler, options.idGenerators);\n    }\n  };",
        "begin_line": 1078,
        "end_line": 1084,
        "comment": " Generates unique ids. "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.optimizeArgumentsArray",
        "snippet": "  private final PassFactory optimizeArgumentsArray =\n      new PassFactory(\"optimizeArgumentsArray\", true) {\n    @Override\n    protected CompilerPass createInternal(AbstractCompiler compiler) {\n      return new OptimizeArgumentsArray(compiler);\n    }\n  };",
        "begin_line": 1087,
        "end_line": 1093,
        "comment": " Optimizes the \"arguments\" array. "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.removeUselessParameters",
        "snippet": "  private final PassFactory removeUselessParameters =\n      new PassFactory(\"optimizeParameters\", true) {\n    @Override\n    protected CompilerPass createInternal(final AbstractCompiler compiler) {\n      return new CompilerPass() {\n        @Override public void process(Node externs, Node root) {\n          NameReferenceGraphConstruction c =\n              new NameReferenceGraphConstruction(compiler);\n          c.process(externs, root);\n\n          (new OptimizeParameters(compiler, c.getNameReferenceGraph())).process(\n              externs, root);\n        }\n      };\n    }\n  };",
        "begin_line": 1096,
        "end_line": 1111,
        "comment": " Removes unused or constant formal parameters. "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.removeAbstractMethods",
        "snippet": "  private final PassFactory removeAbstractMethods =\n      new PassFactory(\"removeAbstractMethods\", true) {\n    @Override\n    protected CompilerPass createInternal(final AbstractCompiler compiler) {\n      return new GoogleCodeRemoval(compiler);\n    }\n  };",
        "begin_line": 1114,
        "end_line": 1120,
        "comment": " Remove variables set to goog.abstractMethod. "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.collapseProperties",
        "snippet": "  private final PassFactory collapseProperties =\n      new PassFactory(\"collapseProperties\", true) {\n    @Override\n    protected CompilerPass createInternal(AbstractCompiler compiler) {\n      return new CollapseProperties(\n          compiler, options.collapsePropertiesOnExternTypes,\n          !isInliningForbidden());\n    }\n  };",
        "begin_line": 1123,
        "end_line": 1131,
        "comment": " Collapses names in the global scope. "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.tightenTypesBuilder",
        "snippet": "  private final PassFactory tightenTypesBuilder =\n      new PassFactory(\"tightenTypes\", true) {\n    @Override\n    protected CompilerPass createInternal(AbstractCompiler compiler) {\n      if (!options.checkTypes) {\n        return new ErrorPass(compiler, TIGHTEN_TYPES_WITHOUT_TYPE_CHECK);\n      }\n      tightenTypes = new TightenTypes(compiler);\n      return tightenTypes;\n    }\n  };",
        "begin_line": 1137,
        "end_line": 1147,
        "comment": "\n   * Try to infer the actual types, which may be narrower\n   * than the declared types.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.disambiguateProperties",
        "snippet": "  private final PassFactory disambiguateProperties =\n      new PassFactory(\"disambiguateProperties\", true) {\n    @Override\n    protected CompilerPass createInternal(AbstractCompiler compiler) {\n      if (tightenTypes == null) {\n        return DisambiguateProperties.forJSTypeSystem(compiler);\n      } else {\n        return DisambiguateProperties.forConcreteTypeSystem(\n            compiler, tightenTypes);\n      }\n    }\n  };",
        "begin_line": 1150,
        "end_line": 1161,
        "comment": " Devirtualize property names based on type information. "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.chainCalls",
        "snippet": "  private final PassFactory chainCalls =\n      new PassFactory(\"chainCalls\", true) {\n    @Override\n    protected CompilerPass createInternal(AbstractCompiler compiler) {\n      return new ChainCalls(compiler);\n    }\n  };",
        "begin_line": 1166,
        "end_line": 1172,
        "comment": "\n   * Chain calls to functions that return this.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.devirtualizePrototypeMethods",
        "snippet": "  private final PassFactory devirtualizePrototypeMethods =\n      new PassFactory(\"devirtualizePrototypeMethods\", true) {\n    @Override\n    protected CompilerPass createInternal(AbstractCompiler compiler) {\n      return new DevirtualizePrototypeMethods(compiler);\n    }\n  };",
        "begin_line": 1178,
        "end_line": 1184,
        "comment": "\n   * Rewrite instance methods as static methods, to make them easier\n   * to inline.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.markPureFunctions",
        "snippet": "  private final PassFactory markPureFunctions =\n      new PassFactory(\"markPureFunctions\", true) {\n    @Override\n    protected CompilerPass createInternal(AbstractCompiler compiler) {\n      return new PureFunctionMarker(\n          compiler, options.debugFunctionSideEffectsPath, false);\n    }\n  };",
        "begin_line": 1190,
        "end_line": 1197,
        "comment": "\n   * Look for function calls that are pure, and annotate them\n   * that way.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.markNoSideEffectCalls",
        "snippet": "  private final PassFactory markNoSideEffectCalls =\n      new PassFactory(\"markNoSideEffectCalls\", true) {\n    @Override\n    protected CompilerPass createInternal(AbstractCompiler compiler) {\n      return new MarkNoSideEffectCalls(compiler);\n    }\n  };",
        "begin_line": 1203,
        "end_line": 1209,
        "comment": "\n   * Look for function calls that have no side effects, and annotate them\n   * that way.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.inlineVariables",
        "snippet": "  private final PassFactory inlineVariables =\n      new PassFactory(\"inlineVariables\", false) {\n    @Override\n    protected CompilerPass createInternal(AbstractCompiler compiler) {\n      if (isInliningForbidden()) {\n        // In old renaming schemes, inlining a variable can change whether\n        // or not a property is renamed. This is bad, and those old renaming\n        // schemes need to die.\n        return new ErrorPass(compiler, CANNOT_USE_PROTOTYPE_AND_VAR);\n      } else {\n        InlineVariables.Mode mode;\n        if (options.inlineVariables) {\n          mode = InlineVariables.Mode.ALL;\n        } else if (options.inlineLocalVariables) {\n          mode = InlineVariables.Mode.LOCALS_ONLY;\n        } else {\n          throw new IllegalStateException(\"No variable inlining option set.\");\n        }\n\n        return new InlineVariables(compiler, mode, true);\n      }\n    }\n  };",
        "begin_line": 1212,
        "end_line": 1234,
        "comment": " Inlines variables heuristically. "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.inlineConstants",
        "snippet": "  private final PassFactory inlineConstants =\n      new PassFactory(\"inlineConstants\", false) {\n    @Override\n    protected CompilerPass createInternal(AbstractCompiler compiler) {\n      return new InlineVariables(\n          compiler, InlineVariables.Mode.CONSTANTS_ONLY, true);\n    }\n  };",
        "begin_line": 1237,
        "end_line": 1244,
        "comment": " Inlines variables that are marked as constants. "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.removeConstantExpressions",
        "snippet": "  private final PassFactory removeConstantExpressions =\n      new PassFactory(\"removeConstantExpressions\", false) {\n    @Override\n    protected CompilerPass createInternal(AbstractCompiler compiler) {\n      return new RemoveConstantExpressions(compiler);\n    }\n  };",
        "begin_line": 1249,
        "end_line": 1255,
        "comment": "\n   * Simplify expressions by removing the parts that have no side effects.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.minimizeExitPoints",
        "snippet": "  private final PassFactory minimizeExitPoints =\n      new PassFactory(\"minimizeExitPoints\", false) {\n    @Override\n    protected CompilerPass createInternal(AbstractCompiler compiler) {\n      return new MinimizeExitPoints(compiler);\n    }\n  };",
        "begin_line": 1260,
        "end_line": 1266,
        "comment": "\n   * Perform local control flow optimizations.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.removeUnreachableCode",
        "snippet": "  private final PassFactory removeUnreachableCode =\n      new PassFactory(\"removeUnreachableCode\", false) {\n    @Override\n    protected CompilerPass createInternal(AbstractCompiler compiler) {\n      return new UnreachableCodeElimination(compiler, true);\n    }\n  };",
        "begin_line": 1271,
        "end_line": 1277,
        "comment": "\n   * Use data flow analysis to remove dead branches.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.removeUnusedPrototypeProperties",
        "snippet": "  private final PassFactory removeUnusedPrototypeProperties =\n      new PassFactory(\"removeUnusedPrototypeProperties\", false) {\n    @Override\n    protected CompilerPass createInternal(AbstractCompiler compiler) {\n      return new RemoveUnusedPrototypeProperties(\n          compiler, options.removeUnusedPrototypePropertiesInExterns,\n          !options.removeUnusedVars);\n    }\n  };",
        "begin_line": 1282,
        "end_line": 1290,
        "comment": "\n   * Remove prototype properties that do not appear to be used.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.smartNamePass",
        "snippet": "  private final PassFactory smartNamePass =\n      new PassFactory(\"smartNamePass\", true) {\n    @Override\n    protected CompilerPass createInternal(final AbstractCompiler compiler) {\n      return new CompilerPass() {\n        @Override\n        public void process(Node externs, Node root) {\n          NameAnalyzer na = new NameAnalyzer(compiler, false);\n          na.process(externs, root);\n\n          String reportPath = options.reportPath;\n          if (reportPath != null) {\n            try {\n              Files.write(na.getHtmlReport(), new File(reportPath),\n                  Charsets.UTF_8);\n            } catch (IOException e) {\n              compiler.report(JSError.make(REPORT_PATH_IO_ERROR, reportPath));\n            }\n          }\n\n          if (options.smartNameRemoval) {\n            na.removeUnreferenced();\n          }\n        }\n      };\n    }\n  };",
        "begin_line": 1296,
        "end_line": 1322,
        "comment": "\n   * Process smart name processing - removes unused classes and does referencing\n   * starting with minimum set of names.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.inlineGetters",
        "snippet": "  private PassFactory inlineGetters =\n      new PassFactory(\"inlineGetters\", false) {\n    @Override\n    protected CompilerPass createInternal(AbstractCompiler compiler) {\n      return new InlineGetters(compiler);\n    }\n  };",
        "begin_line": 1325,
        "end_line": 1331,
        "comment": " Inlines simple methods, like getters "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.deadAssignmentsElimination",
        "snippet": "  private PassFactory deadAssignmentsElimination =\n      new PassFactory(\"deadAssignmentsElimination\", false) {\n    @Override\n    protected CompilerPass createInternal(AbstractCompiler compiler) {\n      return new DeadAssignmentsElimination(compiler);\n    }\n  };",
        "begin_line": 1334,
        "end_line": 1340,
        "comment": " Kills dead assignments. "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.inlineFunctions",
        "snippet": "  private PassFactory inlineFunctions =\n      new PassFactory(\"inlineFunctions\", false) {\n    @Override\n    protected CompilerPass createInternal(AbstractCompiler compiler) {\n      boolean enableBlockInlining = !isInliningForbidden();\n      return new InlineFunctions(\n          compiler,\n          compiler.getUniqueNameIdSupplier(),\n          options.inlineFunctions,\n          options.inlineLocalFunctions,\n          options.inlineAnonymousFunctionExpressions,\n          enableBlockInlining,\n          options.decomposeExpressions);\n    }\n  };",
        "begin_line": 1343,
        "end_line": 1357,
        "comment": " Inlines function calls. "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.removeUnusedVars",
        "snippet": "  private PassFactory removeUnusedVars =\n      new PassFactory(\"removeUnusedVars\", false) {\n    @Override\n    protected CompilerPass createInternal(AbstractCompiler compiler) {\n      boolean preserveAnonymousFunctionNames =\n        options.anonymousFunctionNaming != AnonymousFunctionNamingPolicy.OFF;\n      return new RemoveUnusedVars(\n          compiler,\n          options.removeUnusedVarsInGlobalScope,\n          preserveAnonymousFunctionNames);\n    }\n  };",
        "begin_line": 1360,
        "end_line": 1371,
        "comment": " Removes variables that are never used. "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.crossModuleCodeMotion",
        "snippet": "  private PassFactory crossModuleCodeMotion =\n      new PassFactory(\"crossModuleCodeMotion\", false) {\n    @Override\n    protected CompilerPass createInternal(AbstractCompiler compiler) {\n      return new CrossModuleCodeMotion(compiler, compiler.getModuleGraph());\n    }\n  };",
        "begin_line": 1376,
        "end_line": 1382,
        "comment": "\n   * Move global symbols to a deeper common module\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.crossModuleMethodMotion",
        "snippet": "  private PassFactory crossModuleMethodMotion =\n      new PassFactory(\"crossModuleMethodMotion\", false) {\n    @Override\n    protected CompilerPass createInternal(AbstractCompiler compiler) {\n      return new CrossModuleMethodMotion(\n          compiler, crossModuleIdGenerator,\n          // Only move properties in externs if we're not treating\n          // them as exports.\n          options.removeUnusedPrototypePropertiesInExterns);\n    }\n  };",
        "begin_line": 1387,
        "end_line": 1397,
        "comment": "\n   * Move methods to a deeper common module\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.flowSensitiveInlineVariables",
        "snippet": "  private final PassFactory flowSensitiveInlineVariables =\n      new PassFactory(\"flowSensitiveInlineVariables\", true) {\n    @Override\n    protected CompilerPass createInternal(AbstractCompiler compiler) {\n      return new FlowSensitiveInlineVariables(compiler);\n    }\n  };",
        "begin_line": 1400,
        "end_line": 1406,
        "comment": " A data-flow based variable inliner. "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.coalesceVariableNames",
        "snippet": "  private final PassFactory coalesceVariableNames =\n      new PassFactory(\"coalesceVariableNames\", true) {\n    @Override\n    protected CompilerPass createInternal(AbstractCompiler compiler) {\n      return new CoalesceVariableNames(compiler, options.generatePseudoNames);\n    }\n  };",
        "begin_line": 1409,
        "end_line": 1415,
        "comment": " Uses register-allocation algorithms to use fewer variables. "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.collapseVariableDeclarations",
        "snippet": "  private final PassFactory collapseVariableDeclarations =\n      new PassFactory(\"collapseVariableDeclarations\", true) {\n    @Override\n    protected CompilerPass createInternal(AbstractCompiler compiler) {\n      compiler.setUnnormalized();\n      return new CollapseVariableDeclarations(compiler);\n    }\n  };",
        "begin_line": 1421,
        "end_line": 1428,
        "comment": "\n   * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n   * {@code var x,y;}.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.extractPrototypeMemberDeclarations",
        "snippet": "  private final PassFactory extractPrototypeMemberDeclarations =\n      new PassFactory(\"extractPrototypeMemberDeclarations\", true) {\n    @Override\n    protected CompilerPass createInternal(AbstractCompiler compiler) {\n      return new ExtractPrototypeMemberDeclarations(compiler);\n    }\n  };",
        "begin_line": 1433,
        "end_line": 1439,
        "comment": "\n   * Extracts common sub-expressions.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.rewriteFunctionExpressions",
        "snippet": "  private final PassFactory rewriteFunctionExpressions =\n      new PassFactory(\"rewriteFunctionExpressions\", true) {\n    @Override\n    protected CompilerPass createInternal(AbstractCompiler compiler) {\n      return new FunctionRewriter(compiler);\n    }\n  };",
        "begin_line": 1442,
        "end_line": 1448,
        "comment": " Rewrites common function definitions to be more compact. "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.collapseAnonymousFunctions",
        "snippet": "  private final PassFactory collapseAnonymousFunctions =\n      new PassFactory(\"collapseAnonymousFunctions\", true) {\n    @Override\n    protected CompilerPass createInternal(AbstractCompiler compiler) {\n      return new CollapseAnonymousFunctions(compiler);\n    }\n  };",
        "begin_line": 1451,
        "end_line": 1457,
        "comment": " Collapses functions to not use the VAR keyword. "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.moveFunctionDeclarations",
        "snippet": "  private final PassFactory moveFunctionDeclarations =\n      new PassFactory(\"moveFunctionDeclarations\", true) {\n    @Override\n    protected CompilerPass createInternal(AbstractCompiler compiler) {\n      return new MoveFunctionDeclarations(compiler);\n    }\n  };",
        "begin_line": 1460,
        "end_line": 1466,
        "comment": " Moves function declarations to the top, to simulate actual hoisting. "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.nameUnmappedAnonymousFunctions",
        "snippet": "  private final PassFactory nameUnmappedAnonymousFunctions =\n      new PassFactory(\"nameAnonymousFunctions\", true) {\n    @Override\n    protected CompilerPass createInternal(AbstractCompiler compiler) {\n      return new NameAnonymousFunctions(compiler);\n    }\n  };",
        "begin_line": 1468,
        "end_line": 1474,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.nameMappedAnonymousFunctions",
        "snippet": "  private final PassFactory nameMappedAnonymousFunctions =\n      new PassFactory(\"nameAnonymousFunctions\", true) {\n    @Override\n    protected CompilerPass createInternal(final AbstractCompiler compiler) {\n      return new CompilerPass() {\n        @Override public void process(Node externs, Node root) {\n          NameAnonymousFunctionsMapped naf =\n              new NameAnonymousFunctionsMapped(compiler);\n          naf.process(externs, root);\n          anonymousFunctionNameMap = naf.getFunctionMap();\n        }\n      };\n    }\n  };",
        "begin_line": 1476,
        "end_line": 1489,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.aliasExternals",
        "snippet": "  private final PassFactory aliasExternals =\n      new PassFactory(\"aliasExternals\", true) {\n    @Override\n    protected CompilerPass createInternal(AbstractCompiler compiler) {\n      return new AliasExternals(compiler, compiler.getModuleGraph(),\n          options.unaliasableGlobals, options.aliasableGlobals);\n    }\n  };",
        "begin_line": 1492,
        "end_line": 1499,
        "comment": " Alias external symbols. "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.aliasStrings",
        "snippet": "  private final PassFactory aliasStrings =\n      new PassFactory(\"aliasStrings\", true) {\n    @Override\n    protected CompilerPass createInternal(AbstractCompiler compiler) {\n      return new AliasStrings(\n          compiler,\n          compiler.getModuleGraph(),\n          options.aliasAllStrings ? null : options.aliasableStrings,\n          options.aliasStringsBlacklist,\n          options.outputJsStringUsage);\n    }\n  };",
        "begin_line": 1505,
        "end_line": 1516,
        "comment": "\n   * Alias string literals with global variables, to avoid creating lots of\n   * transient objects.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.aliasKeywords",
        "snippet": "  private final PassFactory aliasKeywords =\n      new PassFactory(\"aliasKeywords\", true) {\n    @Override\n    protected CompilerPass createInternal(AbstractCompiler compiler) {\n      return new AliasKeywords(compiler);\n    }\n  };",
        "begin_line": 1519,
        "end_line": 1525,
        "comment": " Aliases common keywords (true, false) "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.objectPropertyStringPostprocess",
        "snippet": "  private final PassFactory objectPropertyStringPostprocess =\n      new PassFactory(\"ObjectPropertyStringPostprocess\", true) {\n    @Override\n    protected CompilerPass createInternal(AbstractCompiler compiler) {\n      return new ObjectPropertyStringPostprocess(compiler);\n    }\n  };",
        "begin_line": 1528,
        "end_line": 1534,
        "comment": " Handling for the ObjectPropertyString primitive. "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.ambiguateProperties",
        "snippet": "  private final PassFactory ambiguateProperties =\n      new PassFactory(\"ambiguateProperties\", true) {\n    @Override\n    protected CompilerPass createInternal(AbstractCompiler compiler) {\n      return new AmbiguateProperties(\n          compiler, options.anonymousFunctionNaming.getReservedCharacters());\n    }\n  };",
        "begin_line": 1540,
        "end_line": 1547,
        "comment": "\n   * Renames properties so that the two properties that never appear on\n   * the same object get the same name.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.denormalize",
        "snippet": "  private final PassFactory denormalize =\n      new PassFactory(\"denormalize\", true) {\n    @Override\n    protected CompilerPass createInternal(AbstractCompiler compiler) {\n      compiler.setUnnormalized();\n      return new Denormalize(compiler);\n    }\n  };",
        "begin_line": 1550,
        "end_line": 1557,
        "comment": " Denormalize the AST for code generation. "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.invertContextualRenaming",
        "snippet": "  private final PassFactory invertContextualRenaming =\n      new PassFactory(\"invertNames\", true) {\n    @Override\n    protected CompilerPass createInternal(AbstractCompiler compiler) {\n      return MakeDeclaredNamesUnique.getContextualRenameInverter(compiler);\n    }\n  };",
        "begin_line": 1560,
        "end_line": 1566,
        "comment": " Inverting name normalization. "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.renameProperties",
        "snippet": "  private final PassFactory renameProperties =\n      new PassFactory(\"renameProperties\", true) {\n    @Override\n    protected CompilerPass createInternal(final AbstractCompiler compiler) {\n      VariableMap map = null;\n      if (options.inputPropertyMapSerialized != null) {\n        try {\n          map = VariableMap.fromBytes(options.inputPropertyMapSerialized);\n        } catch (ParseException e) {\n          return new ErrorPass(compiler,\n              JSError.make(INPUT_MAP_PROP_PARSE, e.getMessage()));\n        }\n      }\n\n      final VariableMap prevPropertyMap = map;\n      return new CompilerPass() {\n        @Override public void process(Node externs, Node root) {\n          propertyMap = runPropertyRenaming(\n              compiler, prevPropertyMap, externs, root);\n        }\n      };\n    }\n  };",
        "begin_line": 1571,
        "end_line": 1593,
        "comment": "\n   * Renames properties.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.renameVars",
        "snippet": "  private final PassFactory renameVars =\n      new PassFactory(\"renameVars\", true) {\n    @Override\n    protected CompilerPass createInternal(final AbstractCompiler compiler) {\n      VariableMap map = null;\n      if (options.inputVariableMapSerialized != null) {\n        try {\n          map = VariableMap.fromBytes(options.inputVariableMapSerialized);\n        } catch (ParseException e) {\n          return new ErrorPass(compiler,\n              JSError.make(INPUT_MAP_VAR_PARSE, e.getMessage()));\n        }\n      }\n\n      final VariableMap prevVariableMap = map;\n      return new CompilerPass() {\n        @Override public void process(Node externs, Node root) {\n          variableMap = runVariableRenaming(\n              compiler, prevVariableMap, externs, root);\n        }\n      };\n    }\n  };",
        "begin_line": 1627,
        "end_line": 1649,
        "comment": " Renames variables. "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.renameLabels",
        "snippet": "  private final PassFactory renameLabels =\n      new PassFactory(\"renameLabels\", true) {\n    @Override\n    protected CompilerPass createInternal(AbstractCompiler compiler) {\n      return new RenameLabels(compiler);\n    }\n  };",
        "begin_line": 1672,
        "end_line": 1678,
        "comment": " Renames labels "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.convertToDottedProperties",
        "snippet": "  private final PassFactory convertToDottedProperties =\n      new PassFactory(\"convertToDottedProperties\", true) {\n    @Override\n    protected CompilerPass createInternal(AbstractCompiler compiler) {\n      return new ConvertToDottedProperties(compiler);\n    }\n  };",
        "begin_line": 1681,
        "end_line": 1687,
        "comment": " Convert bracket access to dot access "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.sanityCheckVars",
        "snippet": "  private final PassFactory sanityCheckVars =\n      new PassFactory(\"sanityCheckVars\", true) {\n    @Override\n    protected CompilerPass createInternal(AbstractCompiler compiler) {\n      return new VarCheck(compiler, true);\n    }\n  };",
        "begin_line": 1690,
        "end_line": 1696,
        "comment": " Checks that all variables are defined. "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.instrumentFunctions",
        "snippet": "  private final PassFactory instrumentFunctions =\n      new PassFactory(\"instrumentFunctions\", true) {\n    @Override\n    protected CompilerPass createInternal(final AbstractCompiler compiler) {\n      return new CompilerPass() {\n        @Override public void process(Node externs, Node root) {\n          try {\n            FileReader templateFile =\n                new FileReader(options.instrumentationTemplate);\n            (new InstrumentFunctions(\n                compiler, functionNames,\n                options.instrumentationTemplate,\n                options.appNameStr,\n                templateFile)).process(externs, root);\n          } catch (IOException e) {\n            compiler.report(\n                JSError.make(AbstractCompiler.READ_ERROR,\n                    options.instrumentationTemplate));\n          }\n        }\n      };\n    }\n  };",
        "begin_line": 1699,
        "end_line": 1721,
        "comment": " Adds instrumentations according to an instrumentation template. "
    },
    {
        "class_name": "com.google.javascript.jscomp.PureFunctionMarker",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.PureFunctionMarker.compiler",
        "snippet": "    private final AbstractCompiler compiler;",
        "begin_line": 1794,
        "end_line": 1794,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.PureFunctionMarker",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.PureFunctionMarker.reportPath",
        "snippet": "    private final String reportPath;",
        "begin_line": 1795,
        "end_line": 1795,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.PureFunctionMarker",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.PureFunctionMarker.useNameReferenceGraph",
        "snippet": "    private final boolean useNameReferenceGraph;",
        "begin_line": 1796,
        "end_line": 1796,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.PrototypeObjectType",
        "src_path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
        "signature": "com.google.javascript.rhino.jstype.PrototypeObjectType.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 1L;",
        "begin_line": 70,
        "end_line": 70,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.PrototypeObjectType",
        "src_path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
        "signature": "com.google.javascript.rhino.jstype.PrototypeObjectType.className",
        "snippet": "  private final String className;",
        "begin_line": 72,
        "end_line": 72,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.PrototypeObjectType",
        "src_path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
        "signature": "com.google.javascript.rhino.jstype.PrototypeObjectType.properties",
        "snippet": "  private final Map<String, Property> properties;",
        "begin_line": 73,
        "end_line": 73,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.PrototypeObjectType",
        "src_path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
        "signature": "com.google.javascript.rhino.jstype.PrototypeObjectType.implicitPrototype",
        "snippet": "  private ObjectType implicitPrototype;",
        "begin_line": 74,
        "end_line": 74,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.PrototypeObjectType",
        "src_path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
        "signature": "com.google.javascript.rhino.jstype.PrototypeObjectType.nativeType",
        "snippet": "  private final boolean nativeType;",
        "begin_line": 75,
        "end_line": 75,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.Property",
        "src_path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
        "signature": "com.google.javascript.rhino.jstype.Property.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 1L;",
        "begin_line": 418,
        "end_line": 418,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.Property",
        "src_path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
        "signature": "com.google.javascript.rhino.jstype.Property.type",
        "snippet": "    private JSType type;",
        "begin_line": 423,
        "end_line": 423,
        "comment": "\n     * Property's type.\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.Property",
        "src_path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
        "signature": "com.google.javascript.rhino.jstype.Property.inferred",
        "snippet": "    private final boolean inferred;",
        "begin_line": 428,
        "end_line": 428,
        "comment": "\n     * Whether the property's type is inferred.\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.Property",
        "src_path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
        "signature": "com.google.javascript.rhino.jstype.Property.inExterns",
        "snippet": "    private final boolean inExterns;",
        "begin_line": 433,
        "end_line": 433,
        "comment": "\n     * Whether the property is defined in the externs.\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.Property",
        "src_path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
        "signature": "com.google.javascript.rhino.jstype.Property.docInfo",
        "snippet": "    private JSDocInfo docInfo = null;",
        "begin_line": 436,
        "end_line": 436,
        "comment": "  The JSDocInfo for this property. "
    },
    {
        "class_name": "com.google.javascript.jscomp.FoldConstants",
        "src_path": "src/com/google/javascript/jscomp/FoldConstants.java",
        "signature": "com.google.javascript.jscomp.FoldConstants.DIVIDE_BY_0_ERROR",
        "snippet": "  static final DiagnosticType DIVIDE_BY_0_ERROR = DiagnosticType.error(\n      \"JSC_DIVIDE_BY_0_ERROR\",\n      \"Divide by 0\");",
        "begin_line": 40,
        "end_line": 42,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.FoldConstants",
        "src_path": "src/com/google/javascript/jscomp/FoldConstants.java",
        "signature": "com.google.javascript.jscomp.FoldConstants.INVALID_GETELEM_INDEX_ERROR",
        "snippet": "  static final DiagnosticType INVALID_GETELEM_INDEX_ERROR =\n      DiagnosticType.error(\n          \"JSC_INVALID_GETELEM_INDEX_ERROR\",\n          \"Array index not integer: {0}\");",
        "begin_line": 44,
        "end_line": 47,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.FoldConstants",
        "src_path": "src/com/google/javascript/jscomp/FoldConstants.java",
        "signature": "com.google.javascript.jscomp.FoldConstants.INDEX_OUT_OF_BOUNDS_ERROR",
        "snippet": "  static final DiagnosticType INDEX_OUT_OF_BOUNDS_ERROR =\n      DiagnosticType.error(\n          \"JSC_INDEX_OUT_OF_BOUNDS_ERROR\",\n          \"Array index out of bounds: {0}\");",
        "begin_line": 49,
        "end_line": 52,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.FoldConstants",
        "src_path": "src/com/google/javascript/jscomp/FoldConstants.java",
        "signature": "com.google.javascript.jscomp.FoldConstants.NEGATING_A_NON_NUMBER_ERROR",
        "snippet": "  static final DiagnosticType NEGATING_A_NON_NUMBER_ERROR =\n      DiagnosticType.error(\n          \"JSC_NEGATING_A_NON_NUMBER_ERROR\",\n          \"Can't negate non-numeric value: {0}\");",
        "begin_line": 54,
        "end_line": 57,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.FoldConstants",
        "src_path": "src/com/google/javascript/jscomp/FoldConstants.java",
        "signature": "com.google.javascript.jscomp.FoldConstants.INVALID_REGULAR_EXPRESSION_FLAGS",
        "snippet": "  static final DiagnosticType INVALID_REGULAR_EXPRESSION_FLAGS =\n      DiagnosticType.error(\n          \"JSC_INVALID_REGULAR_EXPRESSION_FLAGS\",\n          \"Invalid flags to RegExp constructor: {0}\");",
        "begin_line": 59,
        "end_line": 62,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.FoldConstants",
        "src_path": "src/com/google/javascript/jscomp/FoldConstants.java",
        "signature": "com.google.javascript.jscomp.FoldConstants.BITWISE_OPERAND_OUT_OF_RANGE",
        "snippet": "  static final DiagnosticType BITWISE_OPERAND_OUT_OF_RANGE =\n      DiagnosticType.error(\n          \"JSC_BITWISE_OPERAND_OUT_OF_RANGE\",\n          \"Operand out of range, bitwise operation will lose information: {0}\");",
        "begin_line": 64,
        "end_line": 67,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.FoldConstants",
        "src_path": "src/com/google/javascript/jscomp/FoldConstants.java",
        "signature": "com.google.javascript.jscomp.FoldConstants.SHIFT_AMOUNT_OUT_OF_BOUNDS",
        "snippet": "  static final DiagnosticType SHIFT_AMOUNT_OUT_OF_BOUNDS = DiagnosticType.error(\n      \"JSC_SHIFT_AMOUNT_OUT_OF_BOUNDS\",\n      \"Shift amount out of bounds: {0}\");",
        "begin_line": 69,
        "end_line": 71,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.FoldConstants",
        "src_path": "src/com/google/javascript/jscomp/FoldConstants.java",
        "signature": "com.google.javascript.jscomp.FoldConstants.FRACTIONAL_BITWISE_OPERAND",
        "snippet": "  static final DiagnosticType FRACTIONAL_BITWISE_OPERAND = DiagnosticType.error(\n      \"JSC_FRACTIONAL_BITWISE_OPERAND\",\n      \"Fractional bitwise operand: {0}\");",
        "begin_line": 73,
        "end_line": 75,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.FoldConstants",
        "src_path": "src/com/google/javascript/jscomp/FoldConstants.java",
        "signature": "com.google.javascript.jscomp.FoldConstants.AND_PRECEDENCE",
        "snippet": "  private static final int AND_PRECEDENCE = NodeUtil.precedence(Token.AND);",
        "begin_line": 77,
        "end_line": 77,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.FoldConstants",
        "src_path": "src/com/google/javascript/jscomp/FoldConstants.java",
        "signature": "com.google.javascript.jscomp.FoldConstants.OR_PRECEDENCE",
        "snippet": "  private static final int OR_PRECEDENCE = NodeUtil.precedence(Token.OR);",
        "begin_line": 78,
        "end_line": 78,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.FoldConstants",
        "src_path": "src/com/google/javascript/jscomp/FoldConstants.java",
        "signature": "com.google.javascript.jscomp.FoldConstants.compiler",
        "snippet": "  private final AbstractCompiler compiler;",
        "begin_line": 80,
        "end_line": 80,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.FoldConstants",
        "src_path": "src/com/google/javascript/jscomp/FoldConstants.java",
        "signature": "com.google.javascript.jscomp.FoldConstants.REGEXP_FLAGS_RE",
        "snippet": "  private static final Pattern REGEXP_FLAGS_RE = Pattern.compile(\"^[gmi]*$\");",
        "begin_line": 1717,
        "end_line": 1717,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.FunctionPrototypeType",
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionPrototypeType.java",
        "signature": "com.google.javascript.rhino.jstype.FunctionPrototypeType.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 1L;",
        "begin_line": 53,
        "end_line": 53,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.FunctionPrototypeType",
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionPrototypeType.java",
        "signature": "com.google.javascript.rhino.jstype.FunctionPrototypeType.ownerFunction",
        "snippet": "  private final FunctionType ownerFunction;",
        "begin_line": 55,
        "end_line": 55,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.InstanceObjectType",
        "src_path": "src/com/google/javascript/rhino/jstype/InstanceObjectType.java",
        "signature": "com.google.javascript.rhino.jstype.InstanceObjectType.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 1L;",
        "begin_line": 55,
        "end_line": 55,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.InstanceObjectType",
        "src_path": "src/com/google/javascript/rhino/jstype/InstanceObjectType.java",
        "signature": "com.google.javascript.rhino.jstype.InstanceObjectType.constructor",
        "snippet": "  private final FunctionType constructor;",
        "begin_line": 57,
        "end_line": 57,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.LightweightMessageFormatter",
        "src_path": "src/com/google/javascript/jscomp/LightweightMessageFormatter.java",
        "signature": "com.google.javascript.jscomp.LightweightMessageFormatter.excerpt",
        "snippet": "  private SourceExcerpt excerpt;",
        "begin_line": 32,
        "end_line": 32,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.LightweightMessageFormatter",
        "src_path": "src/com/google/javascript/jscomp/LightweightMessageFormatter.java",
        "signature": "com.google.javascript.jscomp.LightweightMessageFormatter.excerptFormatter",
        "snippet": "  private static final ExcerptFormatter excerptFormatter =\n      new LineNumberingFormatter();",
        "begin_line": 33,
        "end_line": 34,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ClosureCodingConvention",
        "src_path": "src/com/google/javascript/jscomp/ClosureCodingConvention.java",
        "signature": "com.google.javascript.jscomp.ClosureCodingConvention.TYPEDEF_NAME",
        "snippet": "  private static final String TYPEDEF_NAME = \"goog.typedef\";",
        "begin_line": 39,
        "end_line": 39,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ClosureCodingConvention",
        "src_path": "src/com/google/javascript/jscomp/ClosureCodingConvention.java",
        "signature": "com.google.javascript.jscomp.ClosureCodingConvention.OBJECTLIT_EXPECTED",
        "snippet": "  static final DiagnosticType OBJECTLIT_EXPECTED = DiagnosticType.warning(\n      \"JSC_REFLECT_OBJECTLIT_EXPECTED\",\n      \"Object literal expected as second argument\");",
        "begin_line": 41,
        "end_line": 43,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ClosureCodingConvention",
        "src_path": "src/com/google/javascript/jscomp/ClosureCodingConvention.java",
        "signature": "com.google.javascript.jscomp.ClosureCodingConvention.propertyTestFunctions",
        "snippet": "  private final Set<String> propertyTestFunctions = ImmutableSet.of(\n      \"goog.isDef\", \"goog.isNull\", \"goog.isDefAndNotNull\",\n      \"goog.isString\", \"goog.isNumber\", \"goog.isBoolean\",\n      \"goog.isFunction\", \"goog.isArray\", \"goog.isObject\");",
        "begin_line": 282,
        "end_line": 285,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 7L;",
        "begin_line": 37,
        "end_line": 37,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.ideMode",
        "snippet": "  public boolean ideMode;",
        "begin_line": 51,
        "end_line": 51,
        "comment": "\n   * Configures the compiler for use as an IDE backend.  In this mode:\n   * <ul>\n   *  <li>No optimization passes will run.</li>\n   *  <li>The last time custom passes are invoked is\n   *      {@link CustomPassExecutionTime#BEFORE_OPTIMIZATIONS}</li>\n   *  <li>The compiler will always try to process all inputs fully, even\n   *      if it encounters errors.</li>\n   *  <li>The compiler may record more information than is strictly\n   *      needed for codegen.</li>\n   * </ul>\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.skipAllPasses",
        "snippet": "  boolean skipAllPasses;",
        "begin_line": 56,
        "end_line": 56,
        "comment": "\n   * Configures the compiler to skip as many passes as possible.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.nameAnonymousFunctionsOnly",
        "snippet": "  boolean nameAnonymousFunctionsOnly;",
        "begin_line": 61,
        "end_line": 61,
        "comment": "\n   * If true, name anonymous functions only. All others passes will be skipped.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.devMode",
        "snippet": "  DevMode devMode;",
        "begin_line": 67,
        "end_line": 67,
        "comment": "\n   * Configures the compiler to run expensive sanity checks after\n   * every pass. Only intended for internal development.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.checkSymbols",
        "snippet": "  public boolean checkSymbols;",
        "begin_line": 74,
        "end_line": 74,
        "comment": " Checks that all symbols are defined "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.checkShadowVars",
        "snippet": "  public CheckLevel checkShadowVars;",
        "begin_line": 80,
        "end_line": 80,
        "comment": "\n   * Checks that all variables with the @noshadow attribute are\n   * never shadowed.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.aggressiveVarCheck",
        "snippet": "  public CheckLevel aggressiveVarCheck;",
        "begin_line": 83,
        "end_line": 83,
        "comment": " Checks for suspicious variable definitions and undefined variables "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.checkFunctions",
        "snippet": "  public CheckLevel checkFunctions;",
        "begin_line": 86,
        "end_line": 86,
        "comment": " Checks function arity "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.checkMethods",
        "snippet": "  public CheckLevel checkMethods;",
        "begin_line": 89,
        "end_line": 89,
        "comment": " Checks method arity "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.checkDuplicateMessages",
        "snippet": "  public boolean checkDuplicateMessages;",
        "begin_line": 92,
        "end_line": 92,
        "comment": " Makes sure no duplicate messages "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.allowLegacyJsMessages",
        "snippet": "  public boolean allowLegacyJsMessages;",
        "begin_line": 95,
        "end_line": 95,
        "comment": " Allows old deprecated js message style "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.strictMessageReplacement",
        "snippet": "  public boolean strictMessageReplacement;",
        "begin_line": 101,
        "end_line": 101,
        "comment": "\n   * Whether we should throw an exception in case if the message absent from a\n   * bundle.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.checkSuspiciousCode",
        "snippet": "  public boolean checkSuspiciousCode;",
        "begin_line": 104,
        "end_line": 104,
        "comment": " Checks for suspicious statements that have no effect "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.checkControlStructures",
        "snippet": "  public boolean checkControlStructures;",
        "begin_line": 107,
        "end_line": 107,
        "comment": " Checks for invalid control structures "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.checkUndefinedProperties",
        "snippet": "  public CheckLevel checkUndefinedProperties;",
        "begin_line": 110,
        "end_line": 110,
        "comment": " Checks for non-extern properties that are read but never set. "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.checkUnusedPropertiesEarly",
        "snippet": "  public boolean checkUnusedPropertiesEarly;",
        "begin_line": 119,
        "end_line": 119,
        "comment": "\n   * Checks for non-extern properties that are written but never read.\n   * This check occurs after the first constant-based dead code removal pass,\n   * but before the main optimization loop.  This is noisy if you are\n   * including libraries with methods that you don't use, so it is off by\n   * default.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.checkTypes",
        "snippet": "  public boolean checkTypes;",
        "begin_line": 122,
        "end_line": 122,
        "comment": " Checks types on expressions "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.tightenTypes",
        "snippet": "  public boolean tightenTypes;",
        "begin_line": 125,
        "end_line": 125,
        "comment": " Tightens types based on a global analysis. "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.inferTypesInGlobalScope",
        "snippet": "  public boolean inferTypesInGlobalScope;",
        "begin_line": 130,
        "end_line": 130,
        "comment": " Runs a flow sensitive type inference in the global scope "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.checkTypedPropertyCalls",
        "snippet": "  public boolean checkTypedPropertyCalls;",
        "begin_line": 133,
        "end_line": 133,
        "comment": " Checks for inexistant property calls "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.reportMissingOverride",
        "snippet": "  public CheckLevel reportMissingOverride;",
        "begin_line": 139,
        "end_line": 139,
        "comment": "\n   * Flags a warning if a property is missing the @override annotation, but it\n   * overrides a base class property.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.reportUnknownTypes",
        "snippet": "  public CheckLevel reportUnknownTypes;",
        "begin_line": 142,
        "end_line": 142,
        "comment": " Flags a warning for every node whose type could not be determined. "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.checkRequires",
        "snippet": "  public CheckLevel checkRequires;",
        "begin_line": 145,
        "end_line": 145,
        "comment": " Checks for missing goog.require() calls *"
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.checkProvides",
        "snippet": "  public CheckLevel checkProvides;",
        "begin_line": 148,
        "end_line": 148,
        "comment": " Checks for missing goog.provides() calls *"
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.checkGlobalNamesLevel",
        "snippet": "  public CheckLevel checkGlobalNamesLevel;",
        "begin_line": 154,
        "end_line": 154,
        "comment": "\n   * Checks the integrity of references to qualified global names.\n   * (e.g. \"a.b\")\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.brokenClosureRequiresLevel",
        "snippet": "  public CheckLevel brokenClosureRequiresLevel;",
        "begin_line": 157,
        "end_line": 157,
        "comment": " Sets the check level for bad Closure require calls. "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.checkGlobalThisLevel",
        "snippet": "  public CheckLevel checkGlobalThisLevel;",
        "begin_line": 164,
        "end_line": 164,
        "comment": "\n   * Checks for certain uses of the {@code this} keyword that are considered\n   * unsafe because they are likely to reference the global {@code this}\n   * object unintentionally.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.checkMissingGetCssNameLevel",
        "snippet": "  public CheckLevel checkMissingGetCssNameLevel;",
        "begin_line": 170,
        "end_line": 170,
        "comment": "\n   * Checks that certain string literals only appear in strings used as\n   * goog.getCssName arguments.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.checkMissingGetCssNameBlacklist",
        "snippet": "  public String checkMissingGetCssNameBlacklist;",
        "begin_line": 175,
        "end_line": 175,
        "comment": "\n   * Regex of string literals that may only appear in goog.getCssName arguments.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.checkEs5Strict",
        "snippet": "  public boolean checkEs5Strict;",
        "begin_line": 178,
        "end_line": 178,
        "comment": " Checks that the synctactic restrictions of ES5 strict mode are met. "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.checkCaja",
        "snippet": "  public boolean checkCaja;",
        "begin_line": 181,
        "end_line": 181,
        "comment": " Checks that the synctactic restrictions of Caja are met. "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.foldConstants",
        "snippet": "  public boolean foldConstants;",
        "begin_line": 188,
        "end_line": 188,
        "comment": " Folds constants (e.g. (2 + 3) to 5) "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.removeConstantExpressions",
        "snippet": "  public boolean removeConstantExpressions;",
        "begin_line": 190,
        "end_line": 190,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.deadAssignmentElimination",
        "snippet": "  public boolean deadAssignmentElimination;",
        "begin_line": 192,
        "end_line": 192,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.inlineConstantVars",
        "snippet": "  public boolean inlineConstantVars;",
        "begin_line": 195,
        "end_line": 195,
        "comment": " Inlines constants (symbols that are all CAPS) "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.inlineFunctions",
        "snippet": "  public boolean inlineFunctions;",
        "begin_line": 198,
        "end_line": 198,
        "comment": " Inlines short functions "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.decomposeExpressions",
        "snippet": "  public boolean decomposeExpressions;",
        "begin_line": 201,
        "end_line": 201,
        "comment": " Enhanced function inlining "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.inlineAnonymousFunctionExpressions",
        "snippet": "  public boolean inlineAnonymousFunctionExpressions;",
        "begin_line": 204,
        "end_line": 204,
        "comment": " Enhanced function inlining "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.inlineLocalFunctions",
        "snippet": "  public boolean inlineLocalFunctions;",
        "begin_line": 207,
        "end_line": 207,
        "comment": " Enhanced function inlining "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.crossModuleCodeMotion",
        "snippet": "  public boolean crossModuleCodeMotion;",
        "begin_line": 210,
        "end_line": 210,
        "comment": " Move code to a deeper module "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.coalesceVariableNames",
        "snippet": "  public boolean coalesceVariableNames;",
        "begin_line": 213,
        "end_line": 213,
        "comment": " Merge two variables together as one. "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.crossModuleMethodMotion",
        "snippet": "  public boolean crossModuleMethodMotion;",
        "begin_line": 216,
        "end_line": 216,
        "comment": " Move methds to a deeper module "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.inlineGetters",
        "snippet": "  public boolean inlineGetters;",
        "begin_line": 219,
        "end_line": 219,
        "comment": " Inlines trivial getters "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.inlineVariables",
        "snippet": "  public boolean inlineVariables;",
        "begin_line": 222,
        "end_line": 222,
        "comment": " Inlines variables "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.inlineLocalVariables",
        "snippet": "  public boolean inlineLocalVariables;",
        "begin_line": 225,
        "end_line": 225,
        "comment": " Inlines variables "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.flowSensitiveInlineVariables",
        "snippet": "  public boolean flowSensitiveInlineVariables;",
        "begin_line": 229,
        "end_line": 229,
        "comment": " Remove this."
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.smartNameRemoval",
        "snippet": "  public boolean smartNameRemoval;",
        "begin_line": 232,
        "end_line": 232,
        "comment": " Removes code associated with unused global names "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.removeDeadCode",
        "snippet": "  public boolean removeDeadCode;",
        "begin_line": 235,
        "end_line": 235,
        "comment": " Removes code that will never execute "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.checkUnreachableCode",
        "snippet": "  public CheckLevel checkUnreachableCode;",
        "begin_line": 238,
        "end_line": 238,
        "comment": " Checks for unreachable code "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.checkMissingReturn",
        "snippet": "  public CheckLevel checkMissingReturn;",
        "begin_line": 241,
        "end_line": 241,
        "comment": " Checks for missing return statements "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.extractPrototypeMemberDeclarations",
        "snippet": "  public boolean extractPrototypeMemberDeclarations;",
        "begin_line": 244,
        "end_line": 244,
        "comment": " Extracts common prototype member declarations "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.removeEmptyFunctions",
        "snippet": "  public boolean removeEmptyFunctions;",
        "begin_line": 247,
        "end_line": 247,
        "comment": " Removes functions that have no body "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.removeUnusedPrototypeProperties",
        "snippet": "  public boolean removeUnusedPrototypeProperties;",
        "begin_line": 250,
        "end_line": 250,
        "comment": " Removes unused member prototypes "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.removeUnusedPrototypePropertiesInExterns",
        "snippet": "  public boolean removeUnusedPrototypePropertiesInExterns;",
        "begin_line": 253,
        "end_line": 253,
        "comment": " Tells AnalyzePrototypeProperties it can remove externed props. "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.removeUnusedVars",
        "snippet": "  public boolean removeUnusedVars;",
        "begin_line": 256,
        "end_line": 256,
        "comment": " Removes unused variables "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.removeUnusedVarsInGlobalScope",
        "snippet": "  public boolean removeUnusedVarsInGlobalScope;",
        "begin_line": 259,
        "end_line": 259,
        "comment": " Removes unused variables in global scope. "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.aliasExternals",
        "snippet": "  public boolean aliasExternals;",
        "begin_line": 262,
        "end_line": 262,
        "comment": " Adds variable aliases for externals to reduce code size "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.aliasableGlobals",
        "snippet": "  public String aliasableGlobals;",
        "begin_line": 268,
        "end_line": 268,
        "comment": "\n   * If set to a non-empty string, then during an alias externals pass only\n   * externals with these names will be considered for aliasing.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.unaliasableGlobals",
        "snippet": "  public String unaliasableGlobals;",
        "begin_line": 274,
        "end_line": 274,
        "comment": "\n   * Additional globals that can not be aliased since they may be undefined or\n   * can cause errors.  Comma separated list of symbols.  e.g. \"foo,bar\"\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.collapseVariableDeclarations",
        "snippet": "  public boolean collapseVariableDeclarations;",
        "begin_line": 277,
        "end_line": 277,
        "comment": " Collapses multiple variable declarations into one "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.collapseAnonymousFunctions",
        "snippet": "  public boolean collapseAnonymousFunctions;",
        "begin_line": 283,
        "end_line": 283,
        "comment": "\n   * Collapses anonymous function declarations into named function\n   * declarations\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.aliasableStrings",
        "snippet": "  public Set<String> aliasableStrings;",
        "begin_line": 290,
        "end_line": 290,
        "comment": "\n   * If set to a non-empty set, those strings literals will be aliased to a\n   * single global instance per string, to avoid creating more objects than\n   * necessary.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.aliasStringsBlacklist",
        "snippet": "  public String aliasStringsBlacklist;",
        "begin_line": 297,
        "end_line": 297,
        "comment": "\n   * A blacklist in the form of a regular expression to block strings that\n   * contains certain words from being aliased.\n   * If the value is the empty string, no words are blacklisted.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.aliasAllStrings",
        "snippet": "  public boolean aliasAllStrings;",
        "begin_line": 304,
        "end_line": 304,
        "comment": "\n   * Aliases all string literals to global instances, to avoid creating more\n   * objects than necessary (if true, overrides any set of strings passed in\n   * to aliasableStrings)\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.outputJsStringUsage",
        "snippet": "  boolean outputJsStringUsage;",
        "begin_line": 307,
        "end_line": 307,
        "comment": " Print string usage as part of the compilation log. "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.convertToDottedProperties",
        "snippet": "  public boolean convertToDottedProperties;",
        "begin_line": 310,
        "end_line": 310,
        "comment": " Converts quoted property accesses to dot syntax (a['b'] -> a.b) "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.rewriteFunctionExpressions",
        "snippet": "  public boolean rewriteFunctionExpressions;",
        "begin_line": 313,
        "end_line": 313,
        "comment": " Reduces the size of common function expressions. "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.optimizeParameters",
        "snippet": "  public boolean optimizeParameters;",
        "begin_line": 318,
        "end_line": 318,
        "comment": "\n   * Remove unused and constant parameters.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.optimizeArgumentsArray",
        "snippet": "  public boolean optimizeArgumentsArray;",
        "begin_line": 323,
        "end_line": 323,
        "comment": "\n   * Provide formal names for elements of arguments array.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.chainCalls",
        "snippet": "  boolean chainCalls;",
        "begin_line": 326,
        "end_line": 326,
        "comment": " Chains calls to functions that return this. "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.variableRenaming",
        "snippet": "  public VariableRenamingPolicy variableRenaming;",
        "begin_line": 333,
        "end_line": 333,
        "comment": " Controls which variables get renamed. "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.propertyRenaming",
        "snippet": "  public PropertyRenamingPolicy propertyRenaming;",
        "begin_line": 336,
        "end_line": 336,
        "comment": " Controls which properties get renamed. "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.labelRenaming",
        "snippet": "  public boolean labelRenaming;",
        "begin_line": 339,
        "end_line": 339,
        "comment": " Controls label renaming. "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.reserveRawExports",
        "snippet": "  public boolean reserveRawExports;",
        "begin_line": 342,
        "end_line": 342,
        "comment": " Reserve property names on the global this object. "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.generatePseudoNames",
        "snippet": "  public boolean generatePseudoNames;",
        "begin_line": 347,
        "end_line": 347,
        "comment": "\n   * Generate pseudo names for variables and properties for debugging purposes.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.renamePrefix",
        "snippet": "  public String renamePrefix;",
        "begin_line": 350,
        "end_line": 350,
        "comment": " Specifies a prefix for all globals "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.aliasKeywords",
        "snippet": "  public boolean aliasKeywords;",
        "begin_line": 353,
        "end_line": 353,
        "comment": " Aliases true, false, and null to variables with shorter names. "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.collapseProperties",
        "snippet": "  public boolean collapseProperties;",
        "begin_line": 356,
        "end_line": 356,
        "comment": " Flattens multi-level property names (e.g. a$b = x) "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.collapsePropertiesOnExternTypes",
        "snippet": "  boolean collapsePropertiesOnExternTypes;",
        "begin_line": 359,
        "end_line": 359,
        "comment": " Flattens multi-level property names on extern types (e.g. String$f = x) "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.devirtualizePrototypeMethods",
        "snippet": "  public boolean devirtualizePrototypeMethods;",
        "begin_line": 365,
        "end_line": 365,
        "comment": "\n   * Devirtualize prototype method by rewriting them to be static calls that\n   * take the this pointer as their first argument\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.computeFunctionSideEffects",
        "snippet": "  public boolean computeFunctionSideEffects;",
        "begin_line": 371,
        "end_line": 371,
        "comment": "\n   * Use @nosideeffects annotations, function bodies and name graph\n   * to determine if calls have side effects.  Requires --check_types.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.debugFunctionSideEffectsPath",
        "snippet": "  public String debugFunctionSideEffectsPath;",
        "begin_line": 376,
        "end_line": 376,
        "comment": "\n   * Where to save debug report for compute function side effects.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.disambiguateProperties",
        "snippet": "  public boolean disambiguateProperties;",
        "begin_line": 382,
        "end_line": 382,
        "comment": "\n   * Rename properties to disambiguate between unrelated fields based on\n   * type information.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.ambiguateProperties",
        "snippet": "  public boolean ambiguateProperties;",
        "begin_line": 385,
        "end_line": 385,
        "comment": " Rename unrelated properties to the same name to reduce code size. "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.anonymousFunctionNaming",
        "snippet": "  public AnonymousFunctionNamingPolicy anonymousFunctionNaming;",
        "begin_line": 388,
        "end_line": 388,
        "comment": " Give anonymous functions names for easier debugging "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.inputVariableMapSerialized",
        "snippet": "  public byte[] inputVariableMapSerialized;",
        "begin_line": 391,
        "end_line": 391,
        "comment": " Serialized input variable renaming map. "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.inputPropertyMapSerialized",
        "snippet": "  public byte[] inputPropertyMapSerialized;",
        "begin_line": 394,
        "end_line": 394,
        "comment": " Serialized input property renaming map. "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.exportTestFunctions",
        "snippet": "  public boolean exportTestFunctions;",
        "begin_line": 397,
        "end_line": 397,
        "comment": " Whether to export test functions. "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.runtimeTypeCheck",
        "snippet": "  boolean runtimeTypeCheck;",
        "begin_line": 404,
        "end_line": 404,
        "comment": " Inserts runtime type assertions for debugging. "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.runtimeTypeCheckLogFunction",
        "snippet": "  String runtimeTypeCheckLogFunction;",
        "begin_line": 411,
        "end_line": 411,
        "comment": "\n   * A JS function to be used for logging runtime type assertion\n   * failures. It will be passed the warning as a string and the\n   * faulty expression as arguments.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.codingConvention",
        "snippet": "  private CodingConvention codingConvention;",
        "begin_line": 414,
        "end_line": 414,
        "comment": " A CodingConvention to use during the compile. "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.instrumentForCoverage",
        "snippet": "  public boolean instrumentForCoverage;",
        "begin_line": 417,
        "end_line": 417,
        "comment": " Instrument code for the purpose of collecting coverage data. "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.instrumentForCoverageOnly",
        "snippet": "  public boolean instrumentForCoverageOnly;",
        "begin_line": 423,
        "end_line": 423,
        "comment": "\n   * Instrument code for the purpose of collecting coverage data - restrict to\n   * coverage pass only, and skip all other passes.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.ignoreCajaProperties",
        "snippet": "  public boolean ignoreCajaProperties;",
        "begin_line": 426,
        "end_line": 426,
        "comment": " Add code to skip properties that Caja adds to Object.prototype "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.syntheticBlockStartMarker",
        "snippet": "  public String syntheticBlockStartMarker;",
        "begin_line": 428,
        "end_line": 428,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.syntheticBlockEndMarker",
        "snippet": "  public String syntheticBlockEndMarker;",
        "begin_line": 430,
        "end_line": 430,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.locale",
        "snippet": "  public String locale;",
        "begin_line": 433,
        "end_line": 433,
        "comment": " Compiling locale "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.markAsCompiled",
        "snippet": "  public boolean markAsCompiled;",
        "begin_line": 436,
        "end_line": 436,
        "comment": " Sets the special \"COMPILED\" value to true "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.removeTryCatchFinally",
        "snippet": "  public boolean removeTryCatchFinally;",
        "begin_line": 439,
        "end_line": 439,
        "comment": " Removes try...catch...finally blocks for easier debugging "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.closurePass",
        "snippet": "  public boolean closurePass;",
        "begin_line": 442,
        "end_line": 442,
        "comment": " Processes goog.provide() and goog.require() calls "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.rewriteNewDateGoogNow",
        "snippet": "  boolean rewriteNewDateGoogNow;",
        "begin_line": 445,
        "end_line": 445,
        "comment": " Rewrite new Date(goog.now()) to new Date().  "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.removeAbstractMethods",
        "snippet": "  boolean removeAbstractMethods;",
        "begin_line": 448,
        "end_line": 448,
        "comment": " Remove goog.abstractMethod assignments. "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.gatherCssNames",
        "snippet": "  public boolean gatherCssNames;",
        "begin_line": 451,
        "end_line": 451,
        "comment": " Gather CSS names (requires closurePass) "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.stripTypes",
        "snippet": "  public Set<String> stripTypes;",
        "begin_line": 454,
        "end_line": 454,
        "comment": " Names of types to strip "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.stripNameSuffixes",
        "snippet": "  public Set<String> stripNameSuffixes;",
        "begin_line": 457,
        "end_line": 457,
        "comment": " Name suffixes that determine which variables and properties to strip "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.stripNamePrefixes",
        "snippet": "  public Set<String> stripNamePrefixes;",
        "begin_line": 460,
        "end_line": 460,
        "comment": " Name prefixes that determine which variables and properties to strip "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.stripTypePrefixes",
        "snippet": "  public Set<String> stripTypePrefixes;",
        "begin_line": 463,
        "end_line": 463,
        "comment": " Qualified type name prefixes that determine which types to strip "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.customPasses",
        "snippet": "  public transient\n      Multimap<CustomPassExecutionTime, CompilerPass> customPasses;",
        "begin_line": 466,
        "end_line": 467,
        "comment": " Custom passes "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.markNoSideEffectCalls",
        "snippet": "  public boolean markNoSideEffectCalls;",
        "begin_line": 470,
        "end_line": 470,
        "comment": " Mark no side effect calls "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.defineReplacements",
        "snippet": "  private Map<String, Object> defineReplacements;",
        "begin_line": 473,
        "end_line": 473,
        "comment": " Replacements for @defines. Will be Boolean, Numbers, or Strings "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.moveFunctionDeclarations",
        "snippet": "  public boolean moveFunctionDeclarations;",
        "begin_line": 476,
        "end_line": 476,
        "comment": " Move top level function declarations to the top "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.instrumentationTemplate",
        "snippet": "  public String instrumentationTemplate;",
        "begin_line": 479,
        "end_line": 479,
        "comment": " Instrumentation template to use "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.appNameStr",
        "snippet": "  public String appNameStr;",
        "begin_line": 485,
        "end_line": 485,
        "comment": "\n   * App identifier string for use by the instrumentation template's\n   * app_name_setter\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.recordFunctionInformation",
        "snippet": "  public boolean recordFunctionInformation;",
        "begin_line": 488,
        "end_line": 488,
        "comment": " Record function information "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.generateExports",
        "snippet": "  public boolean generateExports;",
        "begin_line": 490,
        "end_line": 490,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.cssRenamingMap",
        "snippet": "  public CssRenamingMap cssRenamingMap;",
        "begin_line": 493,
        "end_line": 493,
        "comment": " Map used in the renaming of CSS class names. "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.processObjectPropertyString",
        "snippet": "  boolean processObjectPropertyString;",
        "begin_line": 496,
        "end_line": 496,
        "comment": " Process instances of goog.testing.ObjectPropertyString. "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.idGenerators",
        "snippet": "  Set<String> idGenerators;",
        "begin_line": 499,
        "end_line": 499,
        "comment": " Id generators to replace. "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.prettyPrint",
        "snippet": "  public boolean prettyPrint;",
        "begin_line": 506,
        "end_line": 506,
        "comment": " Output in pretty indented format "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.lineBreak",
        "snippet": "  public boolean lineBreak;",
        "begin_line": 509,
        "end_line": 509,
        "comment": " Line break the output a bit more aggressively "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.printInputDelimiter",
        "snippet": "  public boolean printInputDelimiter;",
        "begin_line": 512,
        "end_line": 512,
        "comment": " Prints a separator comment before each js script "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.inputDelimiter",
        "snippet": "  public String inputDelimiter = \"// Input %num%\";",
        "begin_line": 515,
        "end_line": 515,
        "comment": " The string to use as the separator for printInputDelimiter "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.reportPath",
        "snippet": "  public String reportPath;",
        "begin_line": 518,
        "end_line": 518,
        "comment": " Where to save a report of global name usage "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.tracer",
        "snippet": "  public TracerMode tracer;",
        "begin_line": 520,
        "end_line": 520,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.colorizeErrorOutput",
        "snippet": "  private boolean colorizeErrorOutput;",
        "begin_line": 522,
        "end_line": 522,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.errorFormat",
        "snippet": "  public ErrorFormat errorFormat;",
        "begin_line": 524,
        "end_line": 524,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.jsOutputFile",
        "snippet": "  public String jsOutputFile;",
        "begin_line": 526,
        "end_line": 526,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.warningsGuard",
        "snippet": "  private transient ComposeWarningsGuard warningsGuard;",
        "begin_line": 528,
        "end_line": 528,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.summaryDetailLevel",
        "snippet": "  int summaryDetailLevel = 1;",
        "begin_line": 530,
        "end_line": 530,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.externExportsPath",
        "snippet": "  String externExportsPath;",
        "begin_line": 537,
        "end_line": 537,
        "comment": " The output path for the created externs file. "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.nameReferenceReportPath",
        "snippet": "  public String nameReferenceReportPath;",
        "begin_line": 540,
        "end_line": 540,
        "comment": " Where to save a cross-reference report from the name reference graph "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.nameReferenceGraphPath",
        "snippet": "  public String nameReferenceGraphPath;",
        "begin_line": 543,
        "end_line": 543,
        "comment": " Where to save the name reference graph "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.sourceMapOutputPath",
        "snippet": "  public String sourceMapOutputPath;",
        "begin_line": 550,
        "end_line": 550,
        "comment": " The output path for the source map. "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.outputCharset",
        "snippet": "  public Charset outputCharset;",
        "begin_line": 555,
        "end_line": 555,
        "comment": "\n   * Charset to use when generating code.  If null, then output ASCII.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.SourceFile",
        "src_path": "src/com/google/javascript/jscomp/SourceFile.java",
        "signature": "com.google.javascript.jscomp.SourceFile.SOURCE_EXCERPT_REGION_LENGTH",
        "snippet": "  private static final int SOURCE_EXCERPT_REGION_LENGTH = 5;",
        "begin_line": 52,
        "end_line": 52,
        "comment": "\n   * Number of lines in the region returned by {@link #getRegion(int)}.\n   * This length must be odd.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.SourceFile",
        "src_path": "src/com/google/javascript/jscomp/SourceFile.java",
        "signature": "com.google.javascript.jscomp.SourceFile.fileName",
        "snippet": "  private final String fileName;",
        "begin_line": 54,
        "end_line": 54,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.SourceFile",
        "src_path": "src/com/google/javascript/jscomp/SourceFile.java",
        "signature": "com.google.javascript.jscomp.SourceFile.originalPath",
        "snippet": "  private String originalPath = null;",
        "begin_line": 61,
        "end_line": 61,
        "comment": " from a Jar, it could be the path to the Jar."
    },
    {
        "class_name": "com.google.javascript.jscomp.SourceFile",
        "src_path": "src/com/google/javascript/jscomp/SourceFile.java",
        "signature": "com.google.javascript.jscomp.SourceFile.lastOffset",
        "snippet": "  private int lastOffset;",
        "begin_line": 66,
        "end_line": 66,
        "comment": " than starting at the beginning of the file."
    },
    {
        "class_name": "com.google.javascript.jscomp.SourceFile",
        "src_path": "src/com/google/javascript/jscomp/SourceFile.java",
        "signature": "com.google.javascript.jscomp.SourceFile.lastLine",
        "snippet": "  private int lastLine;",
        "begin_line": 67,
        "end_line": 67,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.SourceFile",
        "src_path": "src/com/google/javascript/jscomp/SourceFile.java",
        "signature": "com.google.javascript.jscomp.SourceFile.code",
        "snippet": "  private String code = null;",
        "begin_line": 69,
        "end_line": 69,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Generated",
        "src_path": "src/com/google/javascript/jscomp/SourceFile.java",
        "signature": "com.google.javascript.jscomp.Generated.generator",
        "snippet": "    private final Generator generator;",
        "begin_line": 295,
        "end_line": 295,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.OnDisk",
        "src_path": "src/com/google/javascript/jscomp/SourceFile.java",
        "signature": "com.google.javascript.jscomp.OnDisk.file",
        "snippet": "    private final File file;",
        "begin_line": 328,
        "end_line": 328,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.OnDisk",
        "src_path": "src/com/google/javascript/jscomp/SourceFile.java",
        "signature": "com.google.javascript.jscomp.OnDisk.inputCharset",
        "snippet": "    protected String inputCharset = Charsets.UTF_8.name();",
        "begin_line": 333,
        "end_line": 333,
        "comment": " Default input file format for JSCompiler has always been UTF_8."
    },
    {
        "class_name": "com.google.javascript.jscomp.ComposeWarningsGuard",
        "src_path": "src/com/google/javascript/jscomp/ComposeWarningsGuard.java",
        "signature": "com.google.javascript.jscomp.ComposeWarningsGuard.guards",
        "snippet": "  private final List<WarningsGuard> guards;",
        "begin_line": 37,
        "end_line": 37,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ComposeWarningsGuard",
        "src_path": "src/com/google/javascript/jscomp/ComposeWarningsGuard.java",
        "signature": "com.google.javascript.jscomp.ComposeWarningsGuard.guardComparator",
        "snippet": "  private static final Comparator<WarningsGuard> guardComparator =\n      new Comparator<WarningsGuard>() {\n    @Override\n    public int compare(WarningsGuard a, WarningsGuard b) {\n      return a.getPriority() - b.getPriority();\n    }\n  };",
        "begin_line": 38,
        "end_line": 44,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParser",
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParser.stream",
        "snippet": "  private final JsDocTokenStream stream;",
        "begin_line": 46,
        "end_line": 46,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParser",
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParser.typeRegistry",
        "snippet": "  private final JSTypeRegistry typeRegistry;",
        "begin_line": 47,
        "end_line": 47,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParser",
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParser.jsdocBuilder",
        "snippet": "  private final JSDocInfoBuilder jsdocBuilder;",
        "begin_line": 48,
        "end_line": 48,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParser",
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParser.sourceName",
        "snippet": "  private final String sourceName;",
        "begin_line": 49,
        "end_line": 49,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParser",
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParser.errorReporter",
        "snippet": "  private final ErrorReporter errorReporter;",
        "begin_line": 50,
        "end_line": 50,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParser",
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParser.parser",
        "snippet": "  private final ErrorReporterParser parser = new ErrorReporterParser();",
        "begin_line": 51,
        "end_line": 51,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParser",
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParser.fileOverviewJSDocInfo",
        "snippet": "  private JSDocInfo fileOverviewJSDocInfo = null;",
        "begin_line": 66,
        "end_line": 66,
        "comment": " The DocInfo with the fileoverview tag for the whole file."
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParser",
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParser.state",
        "snippet": "  private State state;",
        "begin_line": 67,
        "end_line": 67,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParser",
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParser.annotationNames",
        "snippet": "  private final Map<String, Annotation> annotationNames;",
        "begin_line": 69,
        "end_line": 69,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParser",
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParser.fileLevelJsDocBuilder",
        "snippet": "  private Node.FileLevelJsDocBuilder fileLevelJsDocBuilder;",
        "begin_line": 71,
        "end_line": 71,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ExtractionInfo",
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "signature": "com.google.javascript.jscomp.parsing.ExtractionInfo.string",
        "snippet": "    private final String string;",
        "begin_line": 1039,
        "end_line": 1039,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ExtractionInfo",
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "signature": "com.google.javascript.jscomp.parsing.ExtractionInfo.token",
        "snippet": "    private final JsDocToken token;",
        "begin_line": 1040,
        "end_line": 1040,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParser",
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParser.NO_UNREAD_TOKEN",
        "snippet": "  private static final JsDocToken NO_UNREAD_TOKEN = null;",
        "begin_line": 1945,
        "end_line": 1945,
        "comment": "\n   * Specific value indicating that the {@link #unreadToken} contains no token.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParser",
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParser.unreadToken",
        "snippet": "  private JsDocToken unreadToken = NO_UNREAD_TOKEN;",
        "begin_line": 1950,
        "end_line": 1950,
        "comment": "\n   * One token buffer.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.PrepareAst",
        "src_path": "src/com/google/javascript/jscomp/PrepareAst.java",
        "signature": "com.google.javascript.jscomp.PrepareAst.compiler",
        "snippet": "  private final AbstractCompiler compiler;",
        "begin_line": 37,
        "end_line": 37,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.PrepareAst",
        "src_path": "src/com/google/javascript/jscomp/PrepareAst.java",
        "signature": "com.google.javascript.jscomp.PrepareAst.assertOnChange",
        "snippet": "  private final boolean assertOnChange;",
        "begin_line": 38,
        "end_line": 38,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.PrepareAnnotations",
        "src_path": "src/com/google/javascript/jscomp/PrepareAst.java",
        "signature": "com.google.javascript.jscomp.PrepareAnnotations.compiler",
        "snippet": "    private final AbstractCompiler compiler;",
        "begin_line": 127,
        "end_line": 127,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.PrepareAnnotations",
        "src_path": "src/com/google/javascript/jscomp/PrepareAst.java",
        "signature": "com.google.javascript.jscomp.PrepareAnnotations.convention",
        "snippet": "    private final CodingConvention convention;",
        "begin_line": 128,
        "end_line": 128,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Scope",
        "src_path": "src/com/google/javascript/jscomp/Scope.java",
        "signature": "com.google.javascript.jscomp.Scope.vars",
        "snippet": "  private final Map<String, Var> vars = new LinkedHashMap<String, Var>();",
        "begin_line": 54,
        "end_line": 54,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Scope",
        "src_path": "src/com/google/javascript/jscomp/Scope.java",
        "signature": "com.google.javascript.jscomp.Scope.parent",
        "snippet": "  private final Scope parent;",
        "begin_line": 55,
        "end_line": 55,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Scope",
        "src_path": "src/com/google/javascript/jscomp/Scope.java",
        "signature": "com.google.javascript.jscomp.Scope.rootNode",
        "snippet": "  private final Node rootNode;",
        "begin_line": 56,
        "end_line": 56,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Scope",
        "src_path": "src/com/google/javascript/jscomp/Scope.java",
        "signature": "com.google.javascript.jscomp.Scope.thisType",
        "snippet": "  private final ObjectType thisType;",
        "begin_line": 59,
        "end_line": 59,
        "comment": " The type of {@code this} in the current scope. "
    },
    {
        "class_name": "com.google.javascript.jscomp.Scope",
        "src_path": "src/com/google/javascript/jscomp/Scope.java",
        "signature": "com.google.javascript.jscomp.Scope.isBottom",
        "snippet": "  private final boolean isBottom;",
        "begin_line": 62,
        "end_line": 62,
        "comment": " Whether this is a bottom scope for the purposes of type inference. "
    },
    {
        "class_name": "com.google.javascript.jscomp.Var",
        "src_path": "src/com/google/javascript/jscomp/Scope.java",
        "signature": "com.google.javascript.jscomp.Var.name",
        "snippet": "    String name;",
        "begin_line": 67,
        "end_line": 67,
        "comment": " name "
    },
    {
        "class_name": "com.google.javascript.jscomp.Var",
        "src_path": "src/com/google/javascript/jscomp/Scope.java",
        "signature": "com.google.javascript.jscomp.Var.nameNode",
        "snippet": "    Node nameNode;",
        "begin_line": 70,
        "end_line": 70,
        "comment": " Var node "
    },
    {
        "class_name": "com.google.javascript.jscomp.Var",
        "src_path": "src/com/google/javascript/jscomp/Scope.java",
        "signature": "com.google.javascript.jscomp.Var.type",
        "snippet": "    private JSType type;",
        "begin_line": 75,
        "end_line": 75,
        "comment": "\n     * The variable's type.\n     "
    },
    {
        "class_name": "com.google.javascript.jscomp.Var",
        "src_path": "src/com/google/javascript/jscomp/Scope.java",
        "signature": "com.google.javascript.jscomp.Var.info",
        "snippet": "    private JSDocInfo info = null;",
        "begin_line": 80,
        "end_line": 80,
        "comment": "\n     * The variable's doc info.\n     "
    },
    {
        "class_name": "com.google.javascript.jscomp.Var",
        "src_path": "src/com/google/javascript/jscomp/Scope.java",
        "signature": "com.google.javascript.jscomp.Var.typeInferred",
        "snippet": "    private final boolean typeInferred;",
        "begin_line": 87,
        "end_line": 87,
        "comment": "\n     * Whether the variable's type has been inferred or is declared. An inferred\n     * type may change over time (as more code is discovered), whereas a\n     * declared type is a static contract that must be matched.\n     "
    },
    {
        "class_name": "com.google.javascript.jscomp.Var",
        "src_path": "src/com/google/javascript/jscomp/Scope.java",
        "signature": "com.google.javascript.jscomp.Var.input",
        "snippet": "    CompilerInput input;",
        "begin_line": 90,
        "end_line": 90,
        "comment": " Input source "
    },
    {
        "class_name": "com.google.javascript.jscomp.Var",
        "src_path": "src/com/google/javascript/jscomp/Scope.java",
        "signature": "com.google.javascript.jscomp.Var.isDefine",
        "snippet": "    boolean isDefine;",
        "begin_line": 93,
        "end_line": 93,
        "comment": " Whether the variable is a define "
    },
    {
        "class_name": "com.google.javascript.jscomp.Var",
        "src_path": "src/com/google/javascript/jscomp/Scope.java",
        "signature": "com.google.javascript.jscomp.Var.index",
        "snippet": "    int index;",
        "begin_line": 99,
        "end_line": 99,
        "comment": "\n     * The index at which the var is declared. e..g if it's 0, it's the first\n     * declared variable in that scope\n     "
    },
    {
        "class_name": "com.google.javascript.jscomp.Var",
        "src_path": "src/com/google/javascript/jscomp/Scope.java",
        "signature": "com.google.javascript.jscomp.Var.scope",
        "snippet": "    Scope scope;",
        "begin_line": 102,
        "end_line": 102,
        "comment": " The enclosing scope "
    },
    {
        "class_name": "com.google.javascript.jscomp.ConvertToDottedProperties",
        "src_path": "src/com/google/javascript/jscomp/ConvertToDottedProperties.java",
        "signature": "com.google.javascript.jscomp.ConvertToDottedProperties.compiler",
        "snippet": "  private final AbstractCompiler compiler;",
        "begin_line": 33,
        "end_line": 33,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CoalesceVariableNames",
        "src_path": "src/com/google/javascript/jscomp/CoalesceVariableNames.java",
        "signature": "com.google.javascript.jscomp.CoalesceVariableNames.compiler",
        "snippet": "  private final AbstractCompiler compiler;",
        "begin_line": 64,
        "end_line": 64,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CoalesceVariableNames",
        "src_path": "src/com/google/javascript/jscomp/CoalesceVariableNames.java",
        "signature": "com.google.javascript.jscomp.CoalesceVariableNames.colorings",
        "snippet": "  private final Deque<GraphColoring<Var, Void>> colorings;",
        "begin_line": 65,
        "end_line": 65,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CoalesceVariableNames",
        "src_path": "src/com/google/javascript/jscomp/CoalesceVariableNames.java",
        "signature": "com.google.javascript.jscomp.CoalesceVariableNames.usePseudoNames",
        "snippet": "  private final boolean usePseudoNames;",
        "begin_line": 66,
        "end_line": 66,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CoalesceVariableNames",
        "src_path": "src/com/google/javascript/jscomp/CoalesceVariableNames.java",
        "signature": "com.google.javascript.jscomp.CoalesceVariableNames.coloringTieBreaker",
        "snippet": "  private static final Comparator<Var> coloringTieBreaker =\n      new Comparator<Var>() {\n    public int compare(Var v1, Var v2) {\n      return v1.index - v2.index;\n    }\n  };",
        "begin_line": 68,
        "end_line": 73,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CombinedCfgNodeLiveRangeChecker",
        "src_path": "src/com/google/javascript/jscomp/CoalesceVariableNames.java",
        "signature": "com.google.javascript.jscomp.CombinedCfgNodeLiveRangeChecker.callbacks",
        "snippet": "    private final ArrayList<CombinedLiveRangeChecker> callbacks;",
        "begin_line": 292,
        "end_line": 292,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CombinedLiveRangeChecker",
        "src_path": "src/com/google/javascript/jscomp/CoalesceVariableNames.java",
        "signature": "com.google.javascript.jscomp.CombinedLiveRangeChecker.callback1",
        "snippet": "    private final LiveRangeChecker callback1;",
        "begin_line": 317,
        "end_line": 317,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CombinedLiveRangeChecker",
        "src_path": "src/com/google/javascript/jscomp/CoalesceVariableNames.java",
        "signature": "com.google.javascript.jscomp.CombinedLiveRangeChecker.callback2",
        "snippet": "    private final LiveRangeChecker callback2;",
        "begin_line": 318,
        "end_line": 318,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.LiveRangeChecker",
        "src_path": "src/com/google/javascript/jscomp/CoalesceVariableNames.java",
        "signature": "com.google.javascript.jscomp.LiveRangeChecker.defFound",
        "snippet": "    boolean defFound = false;",
        "begin_line": 390,
        "end_line": 390,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.LiveRangeChecker",
        "src_path": "src/com/google/javascript/jscomp/CoalesceVariableNames.java",
        "signature": "com.google.javascript.jscomp.LiveRangeChecker.crossed",
        "snippet": "    boolean crossed = false;",
        "begin_line": 391,
        "end_line": 391,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.LiveRangeChecker",
        "src_path": "src/com/google/javascript/jscomp/CoalesceVariableNames.java",
        "signature": "com.google.javascript.jscomp.LiveRangeChecker.def",
        "snippet": "    private final Var def;",
        "begin_line": 392,
        "end_line": 392,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.LiveRangeChecker",
        "src_path": "src/com/google/javascript/jscomp/CoalesceVariableNames.java",
        "signature": "com.google.javascript.jscomp.LiveRangeChecker.use",
        "snippet": "    private final Var use;",
        "begin_line": 393,
        "end_line": 393,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocTokenStream",
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocTokenStream.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocTokenStream.EOF_CHAR",
        "snippet": "  private final static int\n      EOF_CHAR = -1;",
        "begin_line": 36,
        "end_line": 37,
        "comment": "\n   * For chars - because we need something out-of-range\n   * to check.  (And checking EOF by exception is annoying.)\n   * Note distinction from EOF token type!\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocTokenStream",
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocTokenStream.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocTokenStream.string",
        "snippet": "  private String string = \"\";",
        "begin_line": 456,
        "end_line": 456,
        "comment": " code."
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocTokenStream",
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocTokenStream.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocTokenStream.stringBuffer",
        "snippet": "  private char[] stringBuffer = new char[128];",
        "begin_line": 458,
        "end_line": 458,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocTokenStream",
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocTokenStream.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocTokenStream.stringBufferTop",
        "snippet": "  private int stringBufferTop;",
        "begin_line": 459,
        "end_line": 459,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocTokenStream",
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocTokenStream.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocTokenStream.ungetBuffer",
        "snippet": "  private final int[] ungetBuffer = new int[3];",
        "begin_line": 462,
        "end_line": 462,
        "comment": " Room to backtrace from to < on failed match of the last - in <!--"
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocTokenStream",
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocTokenStream.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocTokenStream.ungetCursor",
        "snippet": "  private int ungetCursor;",
        "begin_line": 463,
        "end_line": 463,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocTokenStream",
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocTokenStream.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocTokenStream.hitEOF",
        "snippet": "  private boolean hitEOF = false;",
        "begin_line": 465,
        "end_line": 465,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocTokenStream",
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocTokenStream.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocTokenStream.lineStart",
        "snippet": "  private int lineStart = 0;",
        "begin_line": 467,
        "end_line": 467,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocTokenStream",
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocTokenStream.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocTokenStream.lineEndChar",
        "snippet": "  private int lineEndChar = -1;",
        "begin_line": 468,
        "end_line": 468,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocTokenStream",
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocTokenStream.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocTokenStream.lineno",
        "snippet": "  int lineno;",
        "begin_line": 469,
        "end_line": 469,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocTokenStream",
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocTokenStream.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocTokenStream.charno",
        "snippet": "  private int charno = -1;",
        "begin_line": 470,
        "end_line": 470,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocTokenStream",
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocTokenStream.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocTokenStream.initCharno",
        "snippet": "  private int initCharno;",
        "begin_line": 471,
        "end_line": 471,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocTokenStream",
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocTokenStream.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocTokenStream.initLineno",
        "snippet": "  private int initLineno;",
        "begin_line": 472,
        "end_line": 472,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocTokenStream",
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocTokenStream.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocTokenStream.sourceString",
        "snippet": "  private String sourceString;",
        "begin_line": 474,
        "end_line": 474,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocTokenStream",
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocTokenStream.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocTokenStream.sourceEnd",
        "snippet": "  private int sourceEnd;",
        "begin_line": 475,
        "end_line": 475,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocTokenStream",
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocTokenStream.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocTokenStream.sourceCursor",
        "snippet": "  int sourceCursor;",
        "begin_line": 479,
        "end_line": 479,
        "comment": " sliding window of the source stream."
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocTokenStream",
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocTokenStream.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocTokenStream.cursor",
        "snippet": "  int cursor;",
        "begin_line": 484,
        "end_line": 484,
        "comment": " Its value is the index of the next character to be scanned."
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocTokenStream",
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocTokenStream.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocTokenStream.tokenBeg",
        "snippet": "  int tokenBeg;",
        "begin_line": 487,
        "end_line": 487,
        "comment": " Record start and end positions of last scanned token."
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocTokenStream",
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocTokenStream.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocTokenStream.tokenEnd",
        "snippet": "  int tokenEnd;",
        "begin_line": 488,
        "end_line": 488,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.RenameLabels",
        "src_path": "src/com/google/javascript/jscomp/RenameLabels.java",
        "signature": "com.google.javascript.jscomp.RenameLabels.compiler",
        "snippet": "  private final AbstractCompiler compiler;",
        "begin_line": 71,
        "end_line": 71,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessLabels",
        "src_path": "src/com/google/javascript/jscomp/RenameLabels.java",
        "signature": "com.google.javascript.jscomp.ProcessLabels.namespaceStack",
        "snippet": "    final Deque<LabelNamespace> namespaceStack = Lists.newLinkedList();",
        "begin_line": 89,
        "end_line": 89,
        "comment": " inner scope, so a new namespace is created each time a scope is entered."
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessLabels",
        "src_path": "src/com/google/javascript/jscomp/RenameLabels.java",
        "signature": "com.google.javascript.jscomp.ProcessLabels.nameGenerator",
        "snippet": "    final NameGenerator nameGenerator =\n        new NameGenerator(new HashSet<String>(), \"\", null);",
        "begin_line": 92,
        "end_line": 93,
        "comment": " NameGenerator is used to create safe label names."
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessLabels",
        "src_path": "src/com/google/javascript/jscomp/RenameLabels.java",
        "signature": "com.google.javascript.jscomp.ProcessLabels.names",
        "snippet": "    final ArrayList<String> names = new ArrayList<String>();",
        "begin_line": 97,
        "end_line": 97,
        "comment": " the second \"b\", etc."
    },
    {
        "class_name": "com.google.javascript.jscomp.LabelInfo",
        "src_path": "src/com/google/javascript/jscomp/RenameLabels.java",
        "signature": "com.google.javascript.jscomp.LabelInfo.referenced",
        "snippet": "    boolean referenced = false;",
        "begin_line": 246,
        "end_line": 246,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.LabelInfo",
        "src_path": "src/com/google/javascript/jscomp/RenameLabels.java",
        "signature": "com.google.javascript.jscomp.LabelInfo.id",
        "snippet": "    final int id;",
        "begin_line": 247,
        "end_line": 247,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.LabelNamespace",
        "src_path": "src/com/google/javascript/jscomp/RenameLabels.java",
        "signature": "com.google.javascript.jscomp.LabelNamespace.renameMap",
        "snippet": "    final Map<String, LabelInfo> renameMap = new HashMap<String, LabelInfo>();",
        "begin_line": 256,
        "end_line": 256,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.MakeDeclaredNamesUnique",
        "src_path": "src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java",
        "signature": "com.google.javascript.jscomp.MakeDeclaredNamesUnique.ARGUMENTS",
        "snippet": "  public static final String ARGUMENTS = \"arguments\";",
        "begin_line": 48,
        "end_line": 48,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.MakeDeclaredNamesUnique",
        "src_path": "src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java",
        "signature": "com.google.javascript.jscomp.MakeDeclaredNamesUnique.nameStack",
        "snippet": "  private Deque<Renamer> nameStack = new ArrayDeque<Renamer>();",
        "begin_line": 49,
        "end_line": 49,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.MakeDeclaredNamesUnique",
        "src_path": "src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java",
        "signature": "com.google.javascript.jscomp.MakeDeclaredNamesUnique.rootRenamer",
        "snippet": "  private final Renamer rootRenamer;",
        "begin_line": 50,
        "end_line": 50,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ContextualRenameInverter",
        "src_path": "src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java",
        "signature": "com.google.javascript.jscomp.ContextualRenameInverter.compiler",
        "snippet": "    private final AbstractCompiler compiler;",
        "begin_line": 238,
        "end_line": 238,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ContextualRenameInverter",
        "src_path": "src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java",
        "signature": "com.google.javascript.jscomp.ContextualRenameInverter.referencedNames",
        "snippet": "    private Set<String> referencedNames = ImmutableSet.of();",
        "begin_line": 241,
        "end_line": 241,
        "comment": " The set of names referenced in the current scope."
    },
    {
        "class_name": "com.google.javascript.jscomp.ContextualRenameInverter",
        "src_path": "src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java",
        "signature": "com.google.javascript.jscomp.ContextualRenameInverter.referenceStack",
        "snippet": "    private Deque<Set<String>> referenceStack = new ArrayDeque<Set<String>>();",
        "begin_line": 244,
        "end_line": 244,
        "comment": " Stack reference sets."
    },
    {
        "class_name": "com.google.javascript.jscomp.ContextualRenameInverter",
        "src_path": "src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java",
        "signature": "com.google.javascript.jscomp.ContextualRenameInverter.nameMap",
        "snippet": "    private Map<String, List<Node>> nameMap = Maps.newHashMap();",
        "begin_line": 247,
        "end_line": 247,
        "comment": " Name are globally unique initially, so we don't need a per-scope map."
    },
    {
        "class_name": "com.google.javascript.jscomp.ContextualRenamer",
        "src_path": "src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java",
        "signature": "com.google.javascript.jscomp.ContextualRenamer.nameUsage",
        "snippet": "    private final Multiset<String> nameUsage;",
        "begin_line": 382,
        "end_line": 382,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ContextualRenamer",
        "src_path": "src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java",
        "signature": "com.google.javascript.jscomp.ContextualRenamer.declarations",
        "snippet": "    private final Map<String, String> declarations = Maps.newHashMap();",
        "begin_line": 383,
        "end_line": 383,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ContextualRenamer",
        "src_path": "src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java",
        "signature": "com.google.javascript.jscomp.ContextualRenamer.global",
        "snippet": "    private final boolean global;",
        "begin_line": 384,
        "end_line": 384,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ContextualRenamer",
        "src_path": "src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java",
        "signature": "com.google.javascript.jscomp.ContextualRenamer.UNIQUE_ID_SEPARATOR",
        "snippet": "    final static String UNIQUE_ID_SEPARATOR = \"$$\";",
        "begin_line": 386,
        "end_line": 386,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineRenamer",
        "src_path": "src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java",
        "signature": "com.google.javascript.jscomp.InlineRenamer.declarations",
        "snippet": "    private final Map<String, String> declarations = Maps.newHashMap();",
        "begin_line": 467,
        "end_line": 467,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineRenamer",
        "src_path": "src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java",
        "signature": "com.google.javascript.jscomp.InlineRenamer.uniqueIdSupplier",
        "snippet": "    private final Supplier<String> uniqueIdSupplier;",
        "begin_line": 468,
        "end_line": 468,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineRenamer",
        "src_path": "src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java",
        "signature": "com.google.javascript.jscomp.InlineRenamer.idPrefix",
        "snippet": "    private final String idPrefix;",
        "begin_line": 469,
        "end_line": 469,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineRenamer",
        "src_path": "src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java",
        "signature": "com.google.javascript.jscomp.InlineRenamer.removeConstness",
        "snippet": "    private final boolean removeConstness;",
        "begin_line": 470,
        "end_line": 470,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.VarCheck",
        "src_path": "src/com/google/javascript/jscomp/VarCheck.java",
        "signature": "com.google.javascript.jscomp.VarCheck.UNDEFINED_VAR_ERROR",
        "snippet": "  static final DiagnosticType UNDEFINED_VAR_ERROR = DiagnosticType.error(\n      \"JSC_UNDEFINED_VARIABLE\",\n      \"variable {0} is undefined\");",
        "begin_line": 36,
        "end_line": 38,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.VarCheck",
        "src_path": "src/com/google/javascript/jscomp/VarCheck.java",
        "signature": "com.google.javascript.jscomp.VarCheck.VIOLATED_MODULE_DEP_ERROR",
        "snippet": "  static final DiagnosticType VIOLATED_MODULE_DEP_ERROR = DiagnosticType.error(\n      \"JSC_VIOLATED_MODULE_DEPENDENCY\",\n      \"module {0} cannot reference {2}, defined in \" +\n      \"module {1}, since {1} loads after {0}\");",
        "begin_line": 40,
        "end_line": 43,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.VarCheck",
        "src_path": "src/com/google/javascript/jscomp/VarCheck.java",
        "signature": "com.google.javascript.jscomp.VarCheck.MISSING_MODULE_DEP_ERROR",
        "snippet": "  static final DiagnosticType MISSING_MODULE_DEP_ERROR = DiagnosticType.warning(\n      \"JSC_MISSING_MODULE_DEPENDENCY\",\n      \"missing module dependency; module {0} should depend \" +\n      \"on module {1} because it references {2}\");",
        "begin_line": 45,
        "end_line": 48,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.VarCheck",
        "src_path": "src/com/google/javascript/jscomp/VarCheck.java",
        "signature": "com.google.javascript.jscomp.VarCheck.STRICT_MODULE_DEP_ERROR",
        "snippet": "  static final DiagnosticType STRICT_MODULE_DEP_ERROR = DiagnosticType.disabled(\n      \"JSC_STRICT_MODULE_DEPENDENCY\",\n      \"module {0} cannot reference {2}, defined in \" +\n      \"module {1}\");",
        "begin_line": 50,
        "end_line": 53,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.VarCheck",
        "src_path": "src/com/google/javascript/jscomp/VarCheck.java",
        "signature": "com.google.javascript.jscomp.VarCheck.NAME_REFERENCE_IN_EXTERNS_ERROR",
        "snippet": "  static final DiagnosticType NAME_REFERENCE_IN_EXTERNS_ERROR =\n    DiagnosticType.warning(\n      \"JSC_NAME_REFERENCE_IN_EXTERNS\",\n      \"accessing name {0} in externs has no effect\");",
        "begin_line": 55,
        "end_line": 58,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.VarCheck",
        "src_path": "src/com/google/javascript/jscomp/VarCheck.java",
        "signature": "com.google.javascript.jscomp.VarCheck.INVALID_FUNCTION_DECL",
        "snippet": "  static final DiagnosticType INVALID_FUNCTION_DECL =\n    DiagnosticType.error(\"JSC_INVALID_FUNCTION_DECL\",\n        \"Syntax error: function declaration must have a name\");",
        "begin_line": 60,
        "end_line": 62,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.VarCheck",
        "src_path": "src/com/google/javascript/jscomp/VarCheck.java",
        "signature": "com.google.javascript.jscomp.VarCheck.synthesizedExternsInput",
        "snippet": "  private CompilerInput synthesizedExternsInput = null;",
        "begin_line": 64,
        "end_line": 64,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.VarCheck",
        "src_path": "src/com/google/javascript/jscomp/VarCheck.java",
        "signature": "com.google.javascript.jscomp.VarCheck.synthesizedExternsRoot",
        "snippet": "  private Node synthesizedExternsRoot = null;",
        "begin_line": 65,
        "end_line": 65,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.VarCheck",
        "src_path": "src/com/google/javascript/jscomp/VarCheck.java",
        "signature": "com.google.javascript.jscomp.VarCheck.compiler",
        "snippet": "  private final AbstractCompiler compiler;",
        "begin_line": 67,
        "end_line": 67,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.VarCheck",
        "src_path": "src/com/google/javascript/jscomp/VarCheck.java",
        "signature": "com.google.javascript.jscomp.VarCheck.sanityCheck",
        "snippet": "  private final boolean sanityCheck;",
        "begin_line": 70,
        "end_line": 70,
        "comment": " Whether this is the post-processing sanity check."
    },
    {
        "class_name": "com.google.javascript.rhino.JSDocInfoBuilder",
        "src_path": "src/com/google/javascript/rhino/JSDocInfoBuilder.java",
        "signature": "com.google.javascript.rhino.JSDocInfoBuilder.currentInfo",
        "snippet": "  private JSDocInfo currentInfo;",
        "begin_line": 57,
        "end_line": 57,
        "comment": " the current JSDoc which is being populated"
    },
    {
        "class_name": "com.google.javascript.rhino.JSDocInfoBuilder",
        "src_path": "src/com/google/javascript/rhino/JSDocInfoBuilder.java",
        "signature": "com.google.javascript.rhino.JSDocInfoBuilder.populated",
        "snippet": "  private boolean populated = false;",
        "begin_line": 60,
        "end_line": 60,
        "comment": " whether the current JSDocInfo has valuable information"
    },
    {
        "class_name": "com.google.javascript.rhino.JSDocInfoBuilder",
        "src_path": "src/com/google/javascript/rhino/JSDocInfoBuilder.java",
        "signature": "com.google.javascript.rhino.JSDocInfoBuilder.parseDocumentation",
        "snippet": "  private boolean parseDocumentation = false;",
        "begin_line": 63,
        "end_line": 63,
        "comment": " whether to include the documentation itself when parsing the JsDoc"
    },
    {
        "class_name": "com.google.javascript.rhino.JSDocInfoBuilder",
        "src_path": "src/com/google/javascript/rhino/JSDocInfoBuilder.java",
        "signature": "com.google.javascript.rhino.JSDocInfoBuilder.currentMarker",
        "snippet": "  private JSDocInfo.Marker currentMarker = null;",
        "begin_line": 66,
        "end_line": 66,
        "comment": " the current marker, if any."
    },
    {
        "class_name": "com.google.javascript.jscomp.CombinedCompilerPass",
        "src_path": "src/com/google/javascript/jscomp/CombinedCompilerPass.java",
        "signature": "com.google.javascript.jscomp.CombinedCompilerPass.callbacks",
        "snippet": "  private final CallbackWrapper[] callbacks;",
        "begin_line": 49,
        "end_line": 49,
        "comment": " The callbacks that this pass combines. "
    },
    {
        "class_name": "com.google.javascript.jscomp.CombinedCompilerPass",
        "src_path": "src/com/google/javascript/jscomp/CombinedCompilerPass.java",
        "signature": "com.google.javascript.jscomp.CombinedCompilerPass.compiler",
        "snippet": "  private final AbstractCompiler compiler;",
        "begin_line": 50,
        "end_line": 50,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CallbackWrapper",
        "src_path": "src/com/google/javascript/jscomp/CombinedCompilerPass.java",
        "signature": "com.google.javascript.jscomp.CallbackWrapper.callback",
        "snippet": "    private final Callback callback;",
        "begin_line": 78,
        "end_line": 78,
        "comment": " The callback being wrapped. Never null. "
    },
    {
        "class_name": "com.google.javascript.jscomp.CallbackWrapper",
        "src_path": "src/com/google/javascript/jscomp/CombinedCompilerPass.java",
        "signature": "com.google.javascript.jscomp.CallbackWrapper.scopedCallback",
        "snippet": "    private final ScopedCallback scopedCallback;",
        "begin_line": 83,
        "end_line": 83,
        "comment": " \n     * if (callback instanceof ScopedCallback), then scopedCallback points\n     * to an instance of ScopedCallback, otherwise scopedCallback points to null\n     "
    },
    {
        "class_name": "com.google.javascript.jscomp.CallbackWrapper",
        "src_path": "src/com/google/javascript/jscomp/CombinedCompilerPass.java",
        "signature": "com.google.javascript.jscomp.CallbackWrapper.waiting",
        "snippet": "    private Node waiting = null;",
        "begin_line": 90,
        "end_line": 90,
        "comment": "\n     * The node that {@link Callback#shouldTraverse(NodeTraversal, Node, Node)}\n     * returned false for. The wrapped callback doesn't receive messages until\n     * after this node is revisited in the post-order traversal.\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 1L;",
        "begin_line": 73,
        "end_line": 73,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.reporter",
        "snippet": "  private final transient ErrorReporter reporter;",
        "begin_line": 80,
        "end_line": 80,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.nativeTypes",
        "snippet": "  private final JSType[] nativeTypes;",
        "begin_line": 85,
        "end_line": 85,
        "comment": " CPU time on bounds checking inside get()."
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.namesToTypes",
        "snippet": "  private final Map<String, JSType> namesToTypes;",
        "begin_line": 87,
        "end_line": 87,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.namespaces",
        "snippet": "  private final Set<String> namespaces = new HashSet<String>();",
        "begin_line": 90,
        "end_line": 90,
        "comment": " Set of namespaces in which types (or other namespaces) exist."
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.enumTypeNames",
        "snippet": "  private final Set<String> enumTypeNames = new HashSet<String>();",
        "begin_line": 105,
        "end_line": 105,
        "comment": " nullable or not."
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.forwardDeclaredTypes",
        "snippet": "  private final Set<String> forwardDeclaredTypes = new HashSet<String>();",
        "begin_line": 110,
        "end_line": 110,
        "comment": " try to type-check them at all."
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.typesIndexedByProperty",
        "snippet": "  private final Map<String, Set<ObjectType>> typesIndexedByProperty =\n      Maps.newHashMap();",
        "begin_line": 114,
        "end_line": 115,
        "comment": " declared."
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.greatestSubtypeByProperty",
        "snippet": "  private final Map<String, JSType> greatestSubtypeByProperty =\n      Maps.newHashMap();",
        "begin_line": 120,
        "end_line": 121,
        "comment": " typesIndexedByProperty."
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.interfaceToImplementors",
        "snippet": "  private final Multimap<String, FunctionType> interfaceToImplementors =\n      HashMultimap.create();",
        "begin_line": 124,
        "end_line": 125,
        "comment": " A map from interface name to types that implement it."
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.unresolvedNamedTypes",
        "snippet": "  private final Multimap<StaticScope<JSType>, NamedType> unresolvedNamedTypes =\n      ArrayListMultimap.create();",
        "begin_line": 128,
        "end_line": 129,
        "comment": " All the unresolved named types."
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.resolvedNamedTypes",
        "snippet": "  private final Multimap<StaticScope<JSType>, NamedType> resolvedNamedTypes =\n      ArrayListMultimap.create();",
        "begin_line": 132,
        "end_line": 133,
        "comment": " All the resolved named types."
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.lastGeneration",
        "snippet": "  private boolean lastGeneration = true;",
        "begin_line": 136,
        "end_line": 136,
        "comment": " NamedType warns about unresolved types in the last generation."
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.templateTypeName",
        "snippet": "  private String templateTypeName;",
        "begin_line": 139,
        "end_line": 139,
        "comment": " The template type name."
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.templateType",
        "snippet": "  private TemplateType templateType;",
        "begin_line": 142,
        "end_line": 142,
        "comment": " The template type."
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.serialVersionUID",
        "snippet": "        private static final long serialVersionUID = 1L;",
        "begin_line": 235,
        "end_line": 235,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.serialVersionUID",
        "snippet": "        private static final long serialVersionUID = 1L;",
        "begin_line": 358,
        "end_line": 358,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.serialVersionUID",
        "snippet": "          private static final long serialVersionUID = 1L;",
        "begin_line": 434,
        "end_line": 434,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.StringType",
        "src_path": "src/com/google/javascript/rhino/jstype/StringType.java",
        "signature": "com.google.javascript.rhino.jstype.StringType.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 1L;",
        "begin_line": 51,
        "end_line": 51,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.NoObjectType",
        "src_path": "src/com/google/javascript/rhino/jstype/NoObjectType.java",
        "signature": "com.google.javascript.rhino.jstype.NoObjectType.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 1L;",
        "begin_line": 67,
        "end_line": 67,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.NoObjectType",
        "src_path": "src/com/google/javascript/rhino/jstype/NoObjectType.java",
        "signature": "com.google.javascript.rhino.jstype.NoObjectType.leastSupertypeVisitor",
        "snippet": "  private final Visitor<JSType> leastSupertypeVisitor =\n      new LeastSupertypeVisitor();",
        "begin_line": 72,
        "end_line": 73,
        "comment": "\n   * Visitor for {@link NoObjectType#getLeastSupertype(JSType)}.\n   "
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.LeastSupertypeVisitor",
        "src_path": "src/com/google/javascript/rhino/jstype/NoObjectType.java",
        "signature": "com.google.javascript.rhino.jstype.LeastSupertypeVisitor.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 1L;",
        "begin_line": 76,
        "end_line": 76,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.NoObjectType",
        "src_path": "src/com/google/javascript/rhino/jstype/NoObjectType.java",
        "signature": "com.google.javascript.rhino.jstype.NoObjectType.greatestSubtypeVisitor",
        "snippet": "  private final Visitor<JSType> greatestSubtypeVisitor =\n      new GreatestSupertypeVisitor();",
        "begin_line": 143,
        "end_line": 144,
        "comment": "\n   * Visitor for {@link NoObjectType#getGreatestSubtype(JSType)}.\n   "
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.GreatestSupertypeVisitor",
        "src_path": "src/com/google/javascript/rhino/jstype/NoObjectType.java",
        "signature": "com.google.javascript.rhino.jstype.GreatestSupertypeVisitor.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 1L;",
        "begin_line": 148,
        "end_line": 148,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.JSSourceFile",
        "src_path": "src/com/google/javascript/jscomp/JSSourceFile.java",
        "signature": "com.google.javascript.jscomp.JSSourceFile.referenced",
        "snippet": "  private SourceFile referenced;",
        "begin_line": 69,
        "end_line": 69,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserRunner",
        "src_path": "src/com/google/javascript/jscomp/parsing/ParserRunner.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserRunner.configResource",
        "snippet": "  private static final String configResource =\n      \"com.google.javascript.jscomp.parsing.ParserConfig\";",
        "begin_line": 37,
        "end_line": 38,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserRunner",
        "src_path": "src/com/google/javascript/jscomp/parsing/ParserRunner.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserRunner.annotationNames",
        "snippet": "  private static Set<String> annotationNames = null;",
        "begin_line": 40,
        "end_line": 40,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.VariableNameGenerator",
        "src_path": "src/com/google/javascript/jscomp/VariableNameGenerator.java",
        "signature": "com.google.javascript.jscomp.VariableNameGenerator.names",
        "snippet": "  private final NameGenerator names;",
        "begin_line": 33,
        "end_line": 33,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessClosurePrimitives",
        "src_path": "src/com/google/javascript/jscomp/ProcessClosurePrimitives.java",
        "signature": "com.google.javascript.jscomp.ProcessClosurePrimitives.NULL_ARGUMENT_ERROR",
        "snippet": "  static final DiagnosticType NULL_ARGUMENT_ERROR = DiagnosticType.error(\n      \"JSC_NULL_ARGUMENT_ERROR\",\n      \"method \\\"{0}\\\" called without an argument\");",
        "begin_line": 43,
        "end_line": 45,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessClosurePrimitives",
        "src_path": "src/com/google/javascript/jscomp/ProcessClosurePrimitives.java",
        "signature": "com.google.javascript.jscomp.ProcessClosurePrimitives.INVALID_ARGUMENT_ERROR",
        "snippet": "  static final DiagnosticType INVALID_ARGUMENT_ERROR = DiagnosticType.error(\n      \"JSC_INVALID_ARGUMENT_ERROR\",\n      \"method \\\"{0}\\\" called with a non-string argument\");",
        "begin_line": 47,
        "end_line": 49,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessClosurePrimitives",
        "src_path": "src/com/google/javascript/jscomp/ProcessClosurePrimitives.java",
        "signature": "com.google.javascript.jscomp.ProcessClosurePrimitives.TOO_MANY_ARGUMENTS_ERROR",
        "snippet": "  static final DiagnosticType TOO_MANY_ARGUMENTS_ERROR = DiagnosticType.error(\n      \"JSC_TOO_MANY_ARGUMENTS_ERROR\",\n      \"method \\\"{0}\\\" called with more than one argument\");",
        "begin_line": 51,
        "end_line": 53,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessClosurePrimitives",
        "src_path": "src/com/google/javascript/jscomp/ProcessClosurePrimitives.java",
        "signature": "com.google.javascript.jscomp.ProcessClosurePrimitives.DUPLICATE_NAMESPACE_ERROR",
        "snippet": "  static final DiagnosticType DUPLICATE_NAMESPACE_ERROR = DiagnosticType.error(\n      \"JSC_DUPLICATE_NAMESPACE_ERROR\",\n      \"namespace \\\"{0}\\\" cannot be provided twice\");",
        "begin_line": 55,
        "end_line": 57,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessClosurePrimitives",
        "src_path": "src/com/google/javascript/jscomp/ProcessClosurePrimitives.java",
        "signature": "com.google.javascript.jscomp.ProcessClosurePrimitives.FUNCTION_NAMESPACE_ERROR",
        "snippet": "  static final DiagnosticType FUNCTION_NAMESPACE_ERROR = DiagnosticType.error(\n      \"JSC_FUNCTION_NAMESPACE_ERROR\",\n      \"\\\"{0}\\\" cannot be both provided and declared as a function\");",
        "begin_line": 59,
        "end_line": 61,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessClosurePrimitives",
        "src_path": "src/com/google/javascript/jscomp/ProcessClosurePrimitives.java",
        "signature": "com.google.javascript.jscomp.ProcessClosurePrimitives.MISSING_PROVIDE_ERROR",
        "snippet": "  static final DiagnosticType MISSING_PROVIDE_ERROR = DiagnosticType.error(\n      \"JSC_MISSING_PROVIDE_ERROR\",\n      \"required \\\"{0}\\\" namespace never provided\");",
        "begin_line": 63,
        "end_line": 65,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessClosurePrimitives",
        "src_path": "src/com/google/javascript/jscomp/ProcessClosurePrimitives.java",
        "signature": "com.google.javascript.jscomp.ProcessClosurePrimitives.LATE_PROVIDE_ERROR",
        "snippet": "  static final DiagnosticType LATE_PROVIDE_ERROR = DiagnosticType.error(\n      \"JSC_LATE_PROVIDE_ERROR\",\n      \"required \\\"{0}\\\" namespace not provided yet\");",
        "begin_line": 67,
        "end_line": 69,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessClosurePrimitives",
        "src_path": "src/com/google/javascript/jscomp/ProcessClosurePrimitives.java",
        "signature": "com.google.javascript.jscomp.ProcessClosurePrimitives.INVALID_PROVIDE_ERROR",
        "snippet": "  static final DiagnosticType INVALID_PROVIDE_ERROR = DiagnosticType.error(\n      \"JSC_INVALID_PROVIDE_ERROR\",\n      \"\\\"{0}\\\" is not a valid JS property name\");",
        "begin_line": 71,
        "end_line": 73,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessClosurePrimitives",
        "src_path": "src/com/google/javascript/jscomp/ProcessClosurePrimitives.java",
        "signature": "com.google.javascript.jscomp.ProcessClosurePrimitives.XMODULE_REQUIRE_ERROR",
        "snippet": "  static final DiagnosticType XMODULE_REQUIRE_ERROR = DiagnosticType.warning(\n      \"JSC_XMODULE_REQUIRE_ERROR\",\n      \"namespace \\\"{0}\\\" provided in module {1} \" +\n      \"but required in module {2}\");",
        "begin_line": 75,
        "end_line": 78,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessClosurePrimitives",
        "src_path": "src/com/google/javascript/jscomp/ProcessClosurePrimitives.java",
        "signature": "com.google.javascript.jscomp.ProcessClosurePrimitives.NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR",
        "snippet": "  static final DiagnosticType NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR =\n      DiagnosticType.error(\n          \"JSC_NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR\",\n      \"goog.setCssNameMapping only takes an object literal with string values\");",
        "begin_line": 80,
        "end_line": 83,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessClosurePrimitives",
        "src_path": "src/com/google/javascript/jscomp/ProcessClosurePrimitives.java",
        "signature": "com.google.javascript.jscomp.ProcessClosurePrimitives.BASE_CLASS_ERROR",
        "snippet": "  static final DiagnosticType BASE_CLASS_ERROR = DiagnosticType.error(\n      \"JSC_BASE_CLASS_ERROR\",\n      \"incorrect use of goog.base: {0}\");",
        "begin_line": 85,
        "end_line": 87,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessClosurePrimitives",
        "src_path": "src/com/google/javascript/jscomp/ProcessClosurePrimitives.java",
        "signature": "com.google.javascript.jscomp.ProcessClosurePrimitives.GOOG",
        "snippet": "  static final String GOOG = \"goog\";",
        "begin_line": 90,
        "end_line": 90,
        "comment": " The root Closure namespace "
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessClosurePrimitives",
        "src_path": "src/com/google/javascript/jscomp/ProcessClosurePrimitives.java",
        "signature": "com.google.javascript.jscomp.ProcessClosurePrimitives.compiler",
        "snippet": "  private final AbstractCompiler compiler;",
        "begin_line": 92,
        "end_line": 92,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessClosurePrimitives",
        "src_path": "src/com/google/javascript/jscomp/ProcessClosurePrimitives.java",
        "signature": "com.google.javascript.jscomp.ProcessClosurePrimitives.moduleGraph",
        "snippet": "  private final JSModuleGraph moduleGraph;",
        "begin_line": 93,
        "end_line": 93,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessClosurePrimitives",
        "src_path": "src/com/google/javascript/jscomp/ProcessClosurePrimitives.java",
        "signature": "com.google.javascript.jscomp.ProcessClosurePrimitives.providedNames",
        "snippet": "  private final Map<String, ProvidedName> providedNames =\n      Maps.newTreeMap();",
        "begin_line": 96,
        "end_line": 97,
        "comment": " The goog.provides must be processed in a deterministic order."
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessClosurePrimitives",
        "src_path": "src/com/google/javascript/jscomp/ProcessClosurePrimitives.java",
        "signature": "com.google.javascript.jscomp.ProcessClosurePrimitives.unrecognizedRequires",
        "snippet": "  private final List<UnrecognizedRequire> unrecognizedRequires =\n      Lists.newArrayList();",
        "begin_line": 99,
        "end_line": 100,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessClosurePrimitives",
        "src_path": "src/com/google/javascript/jscomp/ProcessClosurePrimitives.java",
        "signature": "com.google.javascript.jscomp.ProcessClosurePrimitives.exportedVariables",
        "snippet": "  private final Set<String> exportedVariables = Sets.newHashSet();",
        "begin_line": 101,
        "end_line": 101,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessClosurePrimitives",
        "src_path": "src/com/google/javascript/jscomp/ProcessClosurePrimitives.java",
        "signature": "com.google.javascript.jscomp.ProcessClosurePrimitives.requiresLevel",
        "snippet": "  private final CheckLevel requiresLevel;",
        "begin_line": 102,
        "end_line": 102,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessClosurePrimitives",
        "src_path": "src/com/google/javascript/jscomp/ProcessClosurePrimitives.java",
        "signature": "com.google.javascript.jscomp.ProcessClosurePrimitives.rewriteNewDateGoogNow",
        "snippet": "  private final boolean rewriteNewDateGoogNow;",
        "begin_line": 103,
        "end_line": 103,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ProvidedName",
        "src_path": "src/com/google/javascript/jscomp/ProcessClosurePrimitives.java",
        "signature": "com.google.javascript.jscomp.ProvidedName.namespace",
        "snippet": "    private final String namespace;",
        "begin_line": 661,
        "end_line": 661,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ProvidedName",
        "src_path": "src/com/google/javascript/jscomp/ProcessClosurePrimitives.java",
        "signature": "com.google.javascript.jscomp.ProvidedName.firstNode",
        "snippet": "    private final Node firstNode;",
        "begin_line": 665,
        "end_line": 665,
        "comment": " goog.provided."
    },
    {
        "class_name": "com.google.javascript.jscomp.ProvidedName",
        "src_path": "src/com/google/javascript/jscomp/ProcessClosurePrimitives.java",
        "signature": "com.google.javascript.jscomp.ProvidedName.firstModule",
        "snippet": "    private final JSModule firstModule;",
        "begin_line": 666,
        "end_line": 666,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ProvidedName",
        "src_path": "src/com/google/javascript/jscomp/ProcessClosurePrimitives.java",
        "signature": "com.google.javascript.jscomp.ProvidedName.explicitNode",
        "snippet": "    private Node explicitNode = null;",
        "begin_line": 670,
        "end_line": 670,
        "comment": " if the namespace is always provided implicitly."
    },
    {
        "class_name": "com.google.javascript.jscomp.ProvidedName",
        "src_path": "src/com/google/javascript/jscomp/ProcessClosurePrimitives.java",
        "signature": "com.google.javascript.jscomp.ProvidedName.candidateDefinition",
        "snippet": "    private Node candidateDefinition = null;",
        "begin_line": 673,
        "end_line": 673,
        "comment": " The candidate definition."
    },
    {
        "class_name": "com.google.javascript.jscomp.ProvidedName",
        "src_path": "src/com/google/javascript/jscomp/ProcessClosurePrimitives.java",
        "signature": "com.google.javascript.jscomp.ProvidedName.minimumModule",
        "snippet": "    private JSModule minimumModule = null;",
        "begin_line": 676,
        "end_line": 676,
        "comment": " The minimum module where the provide must appear."
    },
    {
        "class_name": "com.google.javascript.jscomp.ProvidedName",
        "src_path": "src/com/google/javascript/jscomp/ProcessClosurePrimitives.java",
        "signature": "com.google.javascript.jscomp.ProvidedName.replacementNode",
        "snippet": "    private Node replacementNode = null;",
        "begin_line": 679,
        "end_line": 679,
        "comment": " The replacement declaration."
    },
    {
        "class_name": "com.google.javascript.jscomp.UnrecognizedRequire",
        "src_path": "src/com/google/javascript/jscomp/ProcessClosurePrimitives.java",
        "signature": "com.google.javascript.jscomp.UnrecognizedRequire.requireNode",
        "snippet": "    final Node requireNode;",
        "begin_line": 891,
        "end_line": 891,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.UnrecognizedRequire",
        "src_path": "src/com/google/javascript/jscomp/ProcessClosurePrimitives.java",
        "signature": "com.google.javascript.jscomp.UnrecognizedRequire.namespace",
        "snippet": "    final String namespace;",
        "begin_line": 892,
        "end_line": 892,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.UnrecognizedRequire",
        "src_path": "src/com/google/javascript/jscomp/ProcessClosurePrimitives.java",
        "signature": "com.google.javascript.jscomp.UnrecognizedRequire.inputName",
        "snippet": "    final String inputName;",
        "begin_line": 893,
        "end_line": 893,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.AnonymousFunctionNamingPolicy",
        "src_path": "src/com/google/javascript/jscomp/AnonymousFunctionNamingPolicy.java",
        "signature": "com.google.javascript.jscomp.AnonymousFunctionNamingPolicy.reservedCharacters",
        "snippet": "  private final char[] reservedCharacters;",
        "begin_line": 45,
        "end_line": 45,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.UnknownType",
        "src_path": "src/com/google/javascript/rhino/jstype/UnknownType.java",
        "signature": "com.google.javascript.rhino.jstype.UnknownType.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 1L;",
        "begin_line": 54,
        "end_line": 54,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.UnknownType",
        "src_path": "src/com/google/javascript/rhino/jstype/UnknownType.java",
        "signature": "com.google.javascript.rhino.jstype.UnknownType.isChecked",
        "snippet": "  private final boolean isChecked;",
        "begin_line": 57,
        "end_line": 57,
        "comment": " See the explanation of checked unknown types in JSTypeNative."
    },
    {
        "class_name": "com.google.javascript.rhino.ObjToIntMap",
        "src_path": "src/com/google/javascript/rhino/ObjToIntMap.java",
        "signature": "com.google.javascript.rhino.ObjToIntMap.serialVersionUID",
        "snippet": "    static final long serialVersionUID = -1542220580748809402L;",
        "begin_line": 58,
        "end_line": 58,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Iterator",
        "src_path": "src/com/google/javascript/rhino/ObjToIntMap.java",
        "signature": "com.google.javascript.rhino.Iterator.master",
        "snippet": "        ObjToIntMap master;",
        "begin_line": 117,
        "end_line": 117,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Iterator",
        "src_path": "src/com/google/javascript/rhino/ObjToIntMap.java",
        "signature": "com.google.javascript.rhino.Iterator.cursor",
        "snippet": "        private int cursor;",
        "begin_line": 118,
        "end_line": 118,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Iterator",
        "src_path": "src/com/google/javascript/rhino/ObjToIntMap.java",
        "signature": "com.google.javascript.rhino.Iterator.remaining",
        "snippet": "        private int remaining;",
        "begin_line": 119,
        "end_line": 119,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Iterator",
        "src_path": "src/com/google/javascript/rhino/ObjToIntMap.java",
        "signature": "com.google.javascript.rhino.Iterator.keys",
        "snippet": "        private Object[] keys;",
        "begin_line": 120,
        "end_line": 120,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Iterator",
        "src_path": "src/com/google/javascript/rhino/ObjToIntMap.java",
        "signature": "com.google.javascript.rhino.Iterator.values",
        "snippet": "        private int[] values;",
        "begin_line": 121,
        "end_line": 121,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.ObjToIntMap",
        "src_path": "src/com/google/javascript/rhino/ObjToIntMap.java",
        "signature": "com.google.javascript.rhino.ObjToIntMap.A",
        "snippet": "    private static final int A = 0x9e3779b9;",
        "begin_line": 464,
        "end_line": 464,
        "comment": " See Knuth etc."
    },
    {
        "class_name": "com.google.javascript.rhino.ObjToIntMap",
        "src_path": "src/com/google/javascript/rhino/ObjToIntMap.java",
        "signature": "com.google.javascript.rhino.ObjToIntMap.DELETED",
        "snippet": "    private static final Object DELETED = new Object();",
        "begin_line": 466,
        "end_line": 466,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.ObjToIntMap",
        "src_path": "src/com/google/javascript/rhino/ObjToIntMap.java",
        "signature": "com.google.javascript.rhino.ObjToIntMap.keys",
        "snippet": "    private transient Object[] keys;",
        "begin_line": 473,
        "end_line": 473,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.ObjToIntMap",
        "src_path": "src/com/google/javascript/rhino/ObjToIntMap.java",
        "signature": "com.google.javascript.rhino.ObjToIntMap.values",
        "snippet": "    private transient int[] values;",
        "begin_line": 474,
        "end_line": 474,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.ObjToIntMap",
        "src_path": "src/com/google/javascript/rhino/ObjToIntMap.java",
        "signature": "com.google.javascript.rhino.ObjToIntMap.power",
        "snippet": "    private int power;",
        "begin_line": 476,
        "end_line": 476,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.ObjToIntMap",
        "src_path": "src/com/google/javascript/rhino/ObjToIntMap.java",
        "signature": "com.google.javascript.rhino.ObjToIntMap.keyCount",
        "snippet": "    private int keyCount;",
        "begin_line": 477,
        "end_line": 477,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.ObjToIntMap",
        "src_path": "src/com/google/javascript/rhino/ObjToIntMap.java",
        "signature": "com.google.javascript.rhino.ObjToIntMap.occupiedCount",
        "snippet": "    private transient int occupiedCount; // == keyCount + deleted_count",
        "begin_line": 478,
        "end_line": 478,
        "comment": " == keyCount + deleted_count"
    },
    {
        "class_name": "com.google.javascript.rhino.ObjToIntMap",
        "src_path": "src/com/google/javascript/rhino/ObjToIntMap.java",
        "signature": "com.google.javascript.rhino.ObjToIntMap.check",
        "snippet": "    private static final boolean check = false;",
        "begin_line": 481,
        "end_line": 481,
        "comment": " If true, enables consitency checks"
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.FunctionType",
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
        "signature": "com.google.javascript.rhino.jstype.FunctionType.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 1L;",
        "begin_line": 69,
        "end_line": 69,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.FunctionType",
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
        "signature": "com.google.javascript.rhino.jstype.FunctionType.call",
        "snippet": "  private ArrowType call;",
        "begin_line": 80,
        "end_line": 80,
        "comment": "\n   * {@code [[Call]]} property.\n   "
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.FunctionType",
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
        "signature": "com.google.javascript.rhino.jstype.FunctionType.prototype",
        "snippet": "  private FunctionPrototypeType prototype;",
        "begin_line": 89,
        "end_line": 89,
        "comment": "\n   * The {@code prototype} property. This field is lazily initialized by\n   * {@code #getPrototype()}. The most important reason for lazily\n   * initializing this field is that there are cycles in the native types\n   * graph, so some prototypes must temporarily be {@code null} during\n   * the construction of the graph.\n   "
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.FunctionType",
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
        "signature": "com.google.javascript.rhino.jstype.FunctionType.kind",
        "snippet": "  private final Kind kind;",
        "begin_line": 95,
        "end_line": 95,
        "comment": "\n   * Whether a function is a constructor, an interface, or just an ordinary\n   * function.\n   "
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.FunctionType",
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
        "signature": "com.google.javascript.rhino.jstype.FunctionType.typeOfThis",
        "snippet": "  private ObjectType typeOfThis;",
        "begin_line": 100,
        "end_line": 100,
        "comment": "\n   * The type of {@code this} in the scope of this function.\n   "
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.FunctionType",
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
        "signature": "com.google.javascript.rhino.jstype.FunctionType.source",
        "snippet": "  private Node source;",
        "begin_line": 105,
        "end_line": 105,
        "comment": "\n   * The function node which this type represents. It may be {@code null}.\n   "
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.FunctionType",
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
        "signature": "com.google.javascript.rhino.jstype.FunctionType.implementedInterfaces",
        "snippet": "  private List<ObjectType> implementedInterfaces = ImmutableList.of();",
        "begin_line": 111,
        "end_line": 111,
        "comment": "\n   * The interfaces directly implemented by this function.\n   * It is only relevant for constructors. May not be {@code null}.\n   "
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.FunctionType",
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
        "signature": "com.google.javascript.rhino.jstype.FunctionType.subTypes",
        "snippet": "  private List<FunctionType> subTypes;",
        "begin_line": 117,
        "end_line": 117,
        "comment": "\n   * The types which are subtypes of this function. It is only relevant for\n   * constructors and may be {@code null}.\n   "
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.FunctionType",
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
        "signature": "com.google.javascript.rhino.jstype.FunctionType.templateTypeName",
        "snippet": "  private String templateTypeName;",
        "begin_line": 122,
        "end_line": 122,
        "comment": "\n   * The template type name. May be {@code null}.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.RecentChange",
        "src_path": "src/com/google/javascript/jscomp/CodeChangeHandler.java",
        "signature": "com.google.javascript.jscomp.RecentChange.hasChanged",
        "snippet": "    private boolean hasChanged = false;",
        "begin_line": 36,
        "end_line": 36,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Flags",
        "src_path": "src/com/google/javascript/jscomp/CommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.Flags.print_tree",
        "snippet": "    @Option(name = \"--print_tree\",\n        handler = BooleanOptionHandler.class,\n        usage = \"Prints out the parse tree and exits\")\n    private boolean print_tree = false;",
        "begin_line": 78,
        "end_line": 81,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Flags",
        "src_path": "src/com/google/javascript/jscomp/CommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.Flags.compute_phase_ordering",
        "snippet": "    @Option(name = \"--compute_phase_ordering\",\n        handler = BooleanOptionHandler.class,\n        usage = \"Runs the compile job many times, then prints out the \" +\n        \"best phase ordering from this run\")\n    private boolean compute_phase_ordering = false;",
        "begin_line": 83,
        "end_line": 87,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Flags",
        "src_path": "src/com/google/javascript/jscomp/CommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.Flags.print_ast",
        "snippet": "    @Option(name = \"--print_ast\",\n        handler = BooleanOptionHandler.class,\n        usage = \"Prints a dot file describing the internal abstract syntax\"\n        + \" tree and exits\")\n    private boolean print_ast = false;",
        "begin_line": 89,
        "end_line": 93,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Flags",
        "src_path": "src/com/google/javascript/jscomp/CommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.Flags.print_pass_graph",
        "snippet": "    @Option(name = \"--print_pass_graph\",\n        usage = \"Prints a dot file describing the passes that will get run\"\n        + \" and exits\")\n    private boolean print_pass_graph = false;",
        "begin_line": 95,
        "end_line": 98,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Flags",
        "src_path": "src/com/google/javascript/jscomp/CommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.Flags.jscomp_dev_mode",
        "snippet": "    @Option(name = \"--jscomp_dev_mode\",\n        usage = \"Turns on extra sanity checks\",\n        aliases = {\"--dev_mode\"})\n    private CompilerOptions.DevMode jscomp_dev_mode =\n        CompilerOptions.DevMode.OFF;",
        "begin_line": 100,
        "end_line": 104,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Flags",
        "src_path": "src/com/google/javascript/jscomp/CommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.Flags.logging_level",
        "snippet": "    @Option(name = \"--logging_level\",\n        usage = \"The logging level (standard java.util.logging.Level\"\n        + \" values) for Compiler progress. Does not control errors or\"\n        + \" warnings for the JavaScript code under compilation\")\n    private String logging_level = Level.WARNING.getName();",
        "begin_line": 107,
        "end_line": 111,
        "comment": " TODO(nicksantos): Make the next 2 flags package-private."
    },
    {
        "class_name": "com.google.javascript.jscomp.Flags",
        "src_path": "src/com/google/javascript/jscomp/CommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.Flags.externs",
        "snippet": "    @Option(name = \"--externs\",\n        usage = \"The file containing javascript externs. You may specify\"\n        + \" multiple\")\n    private List<String> externs = Lists.newArrayList();",
        "begin_line": 113,
        "end_line": 116,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Flags",
        "src_path": "src/com/google/javascript/jscomp/CommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.Flags.js",
        "snippet": "    @Option(name = \"--js\",\n        usage = \"The javascript filename. You may specify multiple\")\n    private List<String> js = Lists.newArrayList();",
        "begin_line": 118,
        "end_line": 120,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Flags",
        "src_path": "src/com/google/javascript/jscomp/CommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.Flags.js_output_file",
        "snippet": "    @Option(name = \"--js_output_file\",\n        usage = \"Primary output filename. If not specified, output is \" +\n        \"written to stdout\")\n    private String js_output_file = \"\";",
        "begin_line": 122,
        "end_line": 125,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Flags",
        "src_path": "src/com/google/javascript/jscomp/CommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.Flags.module",
        "snippet": "    @Option(name = \"--module\",\n        usage = \"A javascript module specification. The format is \"\n        + \"<name>:<num-js-files>[:[<dep>,...][:]]]. Module names must be \"\n        + \"unique. Each dep is the name of a module that this module \"\n        + \"depends on. Modules must be listed in dependency order, and js \"\n        + \"source files must be listed in the corresponding order. Where \"\n        + \"--module flags occur in relation to --js flags is unimportant\")\n    private List<String> module = Lists.newArrayList();",
        "begin_line": 127,
        "end_line": 134,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Flags",
        "src_path": "src/com/google/javascript/jscomp/CommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.Flags.variable_map_input_file",
        "snippet": "    @Option(name = \"--variable_map_input_file\",\n        usage = \"File containing the serialized version of the variable \"\n        + \"renaming map produced by a previous compilation\")\n    private String variable_map_input_file = \"\";",
        "begin_line": 136,
        "end_line": 139,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Flags",
        "src_path": "src/com/google/javascript/jscomp/CommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.Flags.property_map_input_file",
        "snippet": "    @Option(name = \"--property_map_input_file\",\n        usage = \"File containing the serialized version of the property \"\n        + \"renaming map produced by a previous compilation\")\n    private String property_map_input_file = \"\";",
        "begin_line": 141,
        "end_line": 144,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Flags",
        "src_path": "src/com/google/javascript/jscomp/CommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.Flags.variable_map_output_file",
        "snippet": "    @Option(name = \"--variable_map_output_file\",\n        usage = \"File where the serialized version of the variable \"\n        + \"renaming map produced should be saved\")\n    private String variable_map_output_file = \"\";",
        "begin_line": 146,
        "end_line": 149,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Flags",
        "src_path": "src/com/google/javascript/jscomp/CommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.Flags.create_name_map_files",
        "snippet": "    @Option(name = \"--create_name_map_files\",\n        handler = BooleanOptionHandler.class,\n        usage = \"If true, variable renaming and property renaming map \"\n        + \"files will be produced as {binary name}_vars_map.out and \"\n        + \"{binary name}_props_map.out. Note that this flag cannot be used \"\n        + \"in conjunction with either variable_map_output_file or \"\n        + \"property_map_output_file\")\n    private boolean create_name_map_files = false;",
        "begin_line": 151,
        "end_line": 158,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Flags",
        "src_path": "src/com/google/javascript/jscomp/CommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.Flags.property_map_output_file",
        "snippet": "    @Option(name = \"--property_map_output_file\",\n        usage = \"File where the serialized version of the property \"\n        + \"renaming map produced should be saved\")\n    private String property_map_output_file = \"\";",
        "begin_line": 160,
        "end_line": 163,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Flags",
        "src_path": "src/com/google/javascript/jscomp/CommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.Flags.third_party",
        "snippet": "    @Option(name = \"--third_party\",\n        handler = BooleanOptionHandler.class,\n        usage = \"Check source validity but do not enforce Closure style \"\n        + \"rules and conventions\")\n    private boolean third_party = false;",
        "begin_line": 165,
        "end_line": 169,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Flags",
        "src_path": "src/com/google/javascript/jscomp/CommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.Flags.summary_detail_level",
        "snippet": "    @Option(name = \"--summary_detail_level\",\n        usage = \"Controls how detailed the compilation summary is. Values:\"\n        + \" 0 (never print summary), 1 (print summary only if there are \"\n        + \"errors or warnings), 2 (print summary if type checking is on, \"\n        + \"see --check_types), 3 (always print summary). The default level \"\n        + \"is 1\")\n    private int summary_detail_level = 1;",
        "begin_line": 172,
        "end_line": 178,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Flags",
        "src_path": "src/com/google/javascript/jscomp/CommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.Flags.output_wrapper",
        "snippet": "    @Option(name = \"--output_wrapper\",\n        usage = \"Interpolate output into this string at the place denoted\"\n        + \" by the marker token %output%. See --output_wrapper_marker\")\n    private String output_wrapper = \"\";",
        "begin_line": 180,
        "end_line": 183,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Flags",
        "src_path": "src/com/google/javascript/jscomp/CommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.Flags.output_wrapper_marker",
        "snippet": "    @Option(name = \"--output_wrapper_marker\",\n        usage = \"Use this token as output marker in the value of\"\n        + \" --output_wrapper\")\n    private String output_wrapper_marker = \"%output%\";",
        "begin_line": 185,
        "end_line": 188,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Flags",
        "src_path": "src/com/google/javascript/jscomp/CommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.Flags.module_wrapper",
        "snippet": "    @Option(name = \"--module_wrapper\",\n        usage = \"An output wrapper for a javascript module (optional). \"\n        + \"The format is <name>:<wrapper>. The module name must correspond \"\n        + \"with a module specified using --module. The wrapper must \"\n        + \"contain %s as the code placeholder\")\n    private List<String> module_wrapper = Lists.newArrayList();",
        "begin_line": 190,
        "end_line": 195,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Flags",
        "src_path": "src/com/google/javascript/jscomp/CommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.Flags.module_output_path_prefix",
        "snippet": "    @Option(name = \"--module_output_path_prefix\",\n        usage = \"Prefix for filenames of compiled js modules. \"\n        + \"<module-name>.js will be appended to this prefix. Directories \"\n        + \"will be created as needed. Use with --module\")\n    private String module_output_path_prefix = \"./\";",
        "begin_line": 197,
        "end_line": 201,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Flags",
        "src_path": "src/com/google/javascript/jscomp/CommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.Flags.create_source_map",
        "snippet": "    @Option(name = \"--create_source_map\",\n        usage = \"If specified, a source map file mapping the generated \" +\n        \"source files back to the original source file will be \" +\n        \"output to the specified path. The %outname% placeholder will \" +\n        \"expand to the name of the output file that the source map \" +\n        \"corresponds to.\")\n    private String create_source_map = \"\";",
        "begin_line": 203,
        "end_line": 209,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Flags",
        "src_path": "src/com/google/javascript/jscomp/CommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.Flags.jscomp_error",
        "snippet": "    @Option(name = \"--jscomp_error\",\n        usage = \"Make the named class of warnings an error. Options:\" +\n        DiagnosticGroups.DIAGNOSTIC_GROUP_NAMES)\n    private List<String> jscomp_error = Lists.newArrayList();",
        "begin_line": 211,
        "end_line": 214,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Flags",
        "src_path": "src/com/google/javascript/jscomp/CommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.Flags.jscomp_warning",
        "snippet": "    @Option(name = \"--jscomp_warning\",\n        usage = \"Make the named class of warnings a normal warning. \" +\n        \"Options:\" + DiagnosticGroups.DIAGNOSTIC_GROUP_NAMES)\n    private List<String> jscomp_warning =  Lists.newArrayList();",
        "begin_line": 216,
        "end_line": 219,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Flags",
        "src_path": "src/com/google/javascript/jscomp/CommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.Flags.jscomp_off",
        "snippet": "    @Option(name = \"--jscomp_off\",\n        usage = \"Turn off the named class of warnings. Options:\" +\n        DiagnosticGroups.DIAGNOSTIC_GROUP_NAMES)\n    private List<String> jscomp_off = Lists.newArrayList();",
        "begin_line": 221,
        "end_line": 224,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Flags",
        "src_path": "src/com/google/javascript/jscomp/CommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.Flags.define",
        "snippet": "    @Option(name = \"--define\",\n        aliases = {\"--D\", \"-D\"},\n        usage = \"Override the value of a variable annotated @define. \" +\n        \"The format is <name>[=<val>], where <name> is the name of a @define \" +\n        \"variable and <val> is a boolean, number, or a single-quoted string \" +\n        \"that contains no single quotes. If [=<val>] is omitted, \" +\n        \"the variable is marked true\")\n    private List<String> define = Lists.newArrayList();",
        "begin_line": 226,
        "end_line": 233,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Flags",
        "src_path": "src/com/google/javascript/jscomp/CommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.Flags.charset",
        "snippet": "    @Option(name = \"--charset\",\n        usage = \"Input charset for all files.\")\n    private String charset = \"\";",
        "begin_line": 235,
        "end_line": 237,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Flags",
        "src_path": "src/com/google/javascript/jscomp/CommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.Flags.compilation_level",
        "snippet": "    @Option(name = \"--compilation_level\",\n        usage = \"Specifies the compilation level to use. Options: \" +\n        \"WHITESPACE_ONLY, SIMPLE_OPTIMIZATIONS, ADVANCED_OPTIMIZATIONS\")\n    private CompilationLevel compilation_level =\n        CompilationLevel.SIMPLE_OPTIMIZATIONS;",
        "begin_line": 239,
        "end_line": 243,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Flags",
        "src_path": "src/com/google/javascript/jscomp/CommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.Flags.warning_level",
        "snippet": "    @Option(name = \"--warning_level\",\n        usage = \"Specifies the warning level to use. Options: \" +\n        \"QUIET, DEFAULT, VERBOSE\")\n    private WarningLevel warning_level = WarningLevel.DEFAULT;",
        "begin_line": 245,
        "end_line": 248,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Flags",
        "src_path": "src/com/google/javascript/jscomp/CommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.Flags.use_only_custom_externs",
        "snippet": "    @Option(name = \"--use_only_custom_externs\",\n        handler = BooleanOptionHandler.class,\n        usage = \"Specifies whether the default externs should be excluded\")\n    private boolean use_only_custom_externs = false;",
        "begin_line": 250,
        "end_line": 253,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Flags",
        "src_path": "src/com/google/javascript/jscomp/CommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.Flags.debug",
        "snippet": "    @Option(name = \"--debug\",\n        handler = BooleanOptionHandler.class,\n        usage = \"Enable debugging options\")\n    private boolean debug = false;",
        "begin_line": 255,
        "end_line": 258,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Flags",
        "src_path": "src/com/google/javascript/jscomp/CommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.Flags.formatting",
        "snippet": "    @Option(name = \"--formatting\",\n        usage = \"Specifies which formatting options, if any, should be \"\n        + \"applied to the output JS. Options: \"\n        + \"PRETTY_PRINT, PRINT_INPUT_DELIMITER\")\n    private List<FormattingOption> formatting = Lists.newArrayList();",
        "begin_line": 260,
        "end_line": 264,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Flags",
        "src_path": "src/com/google/javascript/jscomp/CommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.Flags.process_closure_primitives",
        "snippet": "    @Option(name = \"--process_closure_primitives\",\n        handler = BooleanOptionHandler.class,\n        usage = \"Processes built-ins from the Closure library, such as \"\n        + \"goog.require(), goog.provide(), and goog.exportSymbol()\")\n    private boolean process_closure_primitives = true;",
        "begin_line": 266,
        "end_line": 270,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.BooleanOptionHandler",
        "src_path": "src/com/google/javascript/jscomp/CommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.BooleanOptionHandler.TRUES",
        "snippet": "      private static final Set<String> TRUES =\n          Sets.newHashSet(\"true\", \"on\", \"yes\", \"1\");",
        "begin_line": 275,
        "end_line": 276,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.BooleanOptionHandler",
        "src_path": "src/com/google/javascript/jscomp/CommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.BooleanOptionHandler.FALSES",
        "snippet": "      private static final Set<String> FALSES =\n          Sets.newHashSet(\"false\", \"off\", \"no\", \"0\");",
        "begin_line": 277,
        "end_line": 278,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunner",
        "src_path": "src/com/google/javascript/jscomp/CommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunner.flags",
        "snippet": "  private final Flags flags = new Flags();",
        "begin_line": 335,
        "end_line": 335,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.UnreachableCodeElimination",
        "src_path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java",
        "signature": "com.google.javascript.jscomp.UnreachableCodeElimination.logger",
        "snippet": "  private static final Logger logger =\n    Logger.getLogger(UnreachableCodeElimination.class.getName());",
        "begin_line": 47,
        "end_line": 48,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.UnreachableCodeElimination",
        "src_path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java",
        "signature": "com.google.javascript.jscomp.UnreachableCodeElimination.compiler",
        "snippet": "  private final AbstractCompiler compiler;",
        "begin_line": 50,
        "end_line": 50,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.UnreachableCodeElimination",
        "src_path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java",
        "signature": "com.google.javascript.jscomp.UnreachableCodeElimination.removeNoOpStatements",
        "snippet": "  private final boolean removeNoOpStatements;",
        "begin_line": 51,
        "end_line": 51,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.UnreachableCodeElimination",
        "src_path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java",
        "signature": "com.google.javascript.jscomp.UnreachableCodeElimination.cfgStack",
        "snippet": "  Deque<ControlFlowGraph<Node>> cfgStack =\n      new LinkedList<ControlFlowGraph<Node>>();",
        "begin_line": 53,
        "end_line": 54,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.UnreachableCodeElimination",
        "src_path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java",
        "signature": "com.google.javascript.jscomp.UnreachableCodeElimination.curCfg",
        "snippet": "  ControlFlowGraph<Node> curCfg = null;",
        "begin_line": 56,
        "end_line": 56,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Context",
        "src_path": "src/com/google/javascript/rhino/Context.java",
        "signature": "com.google.javascript.rhino.Context.VERSION_UNKNOWN",
        "snippet": "    public static final int VERSION_UNKNOWN =   -1;",
        "begin_line": 80,
        "end_line": 80,
        "comment": "\n     * The unknown version.\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.Context",
        "src_path": "src/com/google/javascript/rhino/Context.java",
        "signature": "com.google.javascript.rhino.Context.VERSION_DEFAULT",
        "snippet": "    public static final int VERSION_DEFAULT =    0;",
        "begin_line": 85,
        "end_line": 85,
        "comment": "\n     * The default version.\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.Context",
        "src_path": "src/com/google/javascript/rhino/Context.java",
        "signature": "com.google.javascript.rhino.Context.VERSION_1_0",
        "snippet": "    public static final int VERSION_1_0 =      100;",
        "begin_line": 90,
        "end_line": 90,
        "comment": "\n     * JavaScript 1.0\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.Context",
        "src_path": "src/com/google/javascript/rhino/Context.java",
        "signature": "com.google.javascript.rhino.Context.VERSION_1_1",
        "snippet": "    public static final int VERSION_1_1 =      110;",
        "begin_line": 95,
        "end_line": 95,
        "comment": "\n     * JavaScript 1.1\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.Context",
        "src_path": "src/com/google/javascript/rhino/Context.java",
        "signature": "com.google.javascript.rhino.Context.VERSION_1_2",
        "snippet": "    public static final int VERSION_1_2 =      120;",
        "begin_line": 100,
        "end_line": 100,
        "comment": "\n     * JavaScript 1.2\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.Context",
        "src_path": "src/com/google/javascript/rhino/Context.java",
        "signature": "com.google.javascript.rhino.Context.VERSION_1_3",
        "snippet": "    public static final int VERSION_1_3 =      130;",
        "begin_line": 105,
        "end_line": 105,
        "comment": "\n     * JavaScript 1.3\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.Context",
        "src_path": "src/com/google/javascript/rhino/Context.java",
        "signature": "com.google.javascript.rhino.Context.VERSION_1_4",
        "snippet": "    public static final int VERSION_1_4 =      140;",
        "begin_line": 110,
        "end_line": 110,
        "comment": "\n     * JavaScript 1.4\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.Context",
        "src_path": "src/com/google/javascript/rhino/Context.java",
        "signature": "com.google.javascript.rhino.Context.VERSION_1_5",
        "snippet": "    public static final int VERSION_1_5 =      150;",
        "begin_line": 115,
        "end_line": 115,
        "comment": "\n     * JavaScript 1.5\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.Context",
        "src_path": "src/com/google/javascript/rhino/Context.java",
        "signature": "com.google.javascript.rhino.Context.VERSION_1_6",
        "snippet": "    public static final int VERSION_1_6 =      160;",
        "begin_line": 120,
        "end_line": 120,
        "comment": "\n     * JavaScript 1.5\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.Context",
        "src_path": "src/com/google/javascript/rhino/Context.java",
        "signature": "com.google.javascript.rhino.Context.FEATURE_NON_ECMA_GET_YEAR",
        "snippet": "    public static final int FEATURE_NON_ECMA_GET_YEAR = 1;",
        "begin_line": 129,
        "end_line": 129,
        "comment": "\n     * Controls behaviour of <tt>Date.prototype.getYear()</tt>.\n     * If <tt>hasFeature(FEATURE_NON_ECMA_GET_YEAR)</tt> returns true,\n     * Date.prototype.getYear subtructs 1900 only if 1900 <= date < 2000.\n     * The default behavior of {@link #hasFeature(int)} is always to subtruct\n     * 1900 as rquired by ECMAScript B.2.4.\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.Context",
        "src_path": "src/com/google/javascript/rhino/Context.java",
        "signature": "com.google.javascript.rhino.Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME",
        "snippet": "    public static final int FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME = 2;",
        "begin_line": 140,
        "end_line": 140,
        "comment": "\n     * Control if member expression as function name extension is available.\n     * If <tt>hasFeature(FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME)</tt> returns\n     * true, allow <tt>function memberExpression(args) { body }</tt> to be\n     * syntax sugar for <tt>memberExpression = function(args) { body }</tt>,\n     * when memberExpression is not a simple identifier.\n     * See ECMAScript-262, section 11.2 for definition of memberExpression.\n     * By default {@link #hasFeature(int)} returns false.\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.Context",
        "src_path": "src/com/google/javascript/rhino/Context.java",
        "signature": "com.google.javascript.rhino.Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER",
        "snippet": "    public static final int FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER = 3;",
        "begin_line": 150,
        "end_line": 150,
        "comment": "\n     * Control if reserved keywords are treated as identifiers.\n     * If <tt>hasFeature(RESERVED_KEYWORD_AS_IDENTIFIER)</tt> returns true,\n     * treat future reserved keyword (see  Ecma-262, section 7.5.3) as ordinary\n     * identifiers but warn about this usage.\n     *\n     * By default {@link #hasFeature(int)} returns false.\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.Context",
        "src_path": "src/com/google/javascript/rhino/Context.java",
        "signature": "com.google.javascript.rhino.Context.FEATURE_TO_STRING_AS_SOURCE",
        "snippet": "    public static final int FEATURE_TO_STRING_AS_SOURCE = 4;",
        "begin_line": 163,
        "end_line": 163,
        "comment": "\n     * Control if <tt>toString()</tt> should returns the same result\n     * as  <tt>toSource()</tt> when applied to objects and arrays.\n     * If <tt>hasFeature(FEATURE_TO_STRING_AS_SOURCE)</tt> returns true,\n     * calling <tt>toString()</tt> on JS objects gives the same result as\n     * calling <tt>toSource()</tt>. That is it returns JS source with code\n     * to create an object with all enumeratable fields of the original object.\n     * <p>\n     * By default {@link #hasFeature(int)} returns true only if\n     * the current JS version is set to {@link #VERSION_1_2}.\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.Context",
        "src_path": "src/com/google/javascript/rhino/Context.java",
        "signature": "com.google.javascript.rhino.Context.FEATURE_PARENT_PROTO_PROPRTIES",
        "snippet": "    public static final int FEATURE_PARENT_PROTO_PROPRTIES = 5;",
        "begin_line": 181,
        "end_line": 181,
        "comment": "\n     * Control if properties <tt>__proto__</tt> and <tt>__parent__</tt>\n     * are treated specially.\n     * If <tt>hasFeature(FEATURE_PARENT_PROTO_PROPRTIES)</tt> returns true,\n     * treat <tt>__parent__</tt> and <tt>__proto__</tt> as special properties.\n     * <p>\n     * The properties allow to query and set scope and prototype chains for the\n     * objects. The special meaning of the properties is available\n     * only when they are used as the right hand side of the dot operator.\n     * For example, while <tt>x.__proto__ = y</tt> changes the prototype\n     * chain of the object <tt>x</tt> to point to <tt>y</tt>,\n     * <tt>x[\"__proto__\"] = y</tt> simply assigns a new value to the property\n     * <tt>__proto__</tt> in <tt>x</tt> even when the feature is on.\n     *\n     * By default {@link #hasFeature(int)} returns true.\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.Context",
        "src_path": "src/com/google/javascript/rhino/Context.java",
        "signature": "com.google.javascript.rhino.Context.FEATURE_E4X",
        "snippet": "    public static final int FEATURE_E4X = 6;",
        "begin_line": 192,
        "end_line": 192,
        "comment": "\n     * Control if support for E4X(ECMAScript for XML) extension is available.\n     * If hasFeature(FEATURE_E4X) returns true, the XML syntax is available.\n     * <p>\n     * By default {@link #hasFeature(int)} returns true if\n     * the current JS version is set to {@link #VERSION_DEFAULT}\n     * or is greater then {@link #VERSION_1_6}.\n     * @since 1.6 Release 1\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.Context",
        "src_path": "src/com/google/javascript/rhino/Context.java",
        "signature": "com.google.javascript.rhino.Context.FEATURE_DYNAMIC_SCOPE",
        "snippet": "    public static final int FEATURE_DYNAMIC_SCOPE = 7;",
        "begin_line": 209,
        "end_line": 209,
        "comment": "\n     * Control if dynamic scope should be used for name access.\n     * If hasFeature(FEATURE_DYNAMIC_SCOPE) returns true, then the name lookup\n     * during name resolution will use the top scope of the script or function\n     * which is at the top of JS execution stack instead of the top scope of the\n     * script or function from the current stack frame if the top scope of\n     * the top stack frame contains the top scope of the current stack frame\n     * on its prototype chain.\n     * <p>\n     * This is useful to define shared scope containing functions that can\n     * be called from scripts and functions using private scopes.\n     * <p>\n     * By default {@link #hasFeature(int)} returns false.\n     * @since 1.6 Release 1\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.Context",
        "src_path": "src/com/google/javascript/rhino/Context.java",
        "signature": "com.google.javascript.rhino.Context.FEATURE_STRICT_VARS",
        "snippet": "    public static final int FEATURE_STRICT_VARS = 8;",
        "begin_line": 221,
        "end_line": 221,
        "comment": "\n     * Control if strict variable mode is enabled.\n     * When the feature is on Rhino reports runtime errors if assignment\n     * to a global variable that does not exist is executed. When the feature\n     * is off such assignments creates new variable in the global scope  as\n     * required by ECMA 262.\n     * <p>\n     * By default {@link #hasFeature(int)} returns false.\n     * @since 1.6 Release 1\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.Context",
        "src_path": "src/com/google/javascript/rhino/Context.java",
        "signature": "com.google.javascript.rhino.Context.FEATURE_STRICT_EVAL",
        "snippet": "    public static final int FEATURE_STRICT_EVAL = 9;",
        "begin_line": 233,
        "end_line": 233,
        "comment": "\n     * Control if strict eval mode is enabled.\n     * When the feature is on Rhino reports runtime errors if non-string\n     * argument is passed to the eval function. When the feature is off\n     * eval simply return non-string argument as is without performing any\n     * evaluation as required by ECMA 262.\n     * <p>\n     * By default {@link #hasFeature(int)} returns false.\n     * @since 1.6 Release 1\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.Context",
        "src_path": "src/com/google/javascript/rhino/Context.java",
        "signature": "com.google.javascript.rhino.Context.FEATURE_LOCATION_INFORMATION_IN_ERROR",
        "snippet": "    public static final int FEATURE_LOCATION_INFORMATION_IN_ERROR = 10;",
        "begin_line": 250,
        "end_line": 250,
        "comment": "\n     * When the feature is on Rhino will add a \"fileName\" and \"lineNumber\"\n     * properties to Error objects automatically. When the feature is off, you\n     * have to explicitly pass them as the second and third argument to the\n     * Error constructor. Note that neither behaviour is fully ECMA 262\n     * compliant (as 262 doesn't specify a three-arg constructor), but keeping\n     * the feature off results in Error objects that don't have\n     * additional non-ECMA properties when constructed using the ECMA-defined\n     * single-arg constructor and is thus desirable if a stricter ECMA\n     * compliance is desired, specifically adherence to the point 15.11.5. of\n     * the standard.\n     * <p>\n     * By default {@link #hasFeature(int)} returns false.\n     * @since 1.6 Release 6\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.Context",
        "src_path": "src/com/google/javascript/rhino/Context.java",
        "signature": "com.google.javascript.rhino.Context.FEATURE_STRICT_MODE",
        "snippet": "    public static final int FEATURE_STRICT_MODE = 11;",
        "begin_line": 261,
        "end_line": 261,
        "comment": "\n     * Controls whether JS 1.5 'strict mode' is enabled.\n     * When the feature is on, Rhino reports more than a dozen different\n     * warnings.  When the feature is off, these warnings are not generated.\n     * FEATURE_STRICT_MODE implies FEATURE_STRICT_VARS and FEATURE_STRICT_EVAL.\n     * <p>\n     * By default {@link #hasFeature(int)} returns false.\n     * @since 1.6 Release 6\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.Context",
        "src_path": "src/com/google/javascript/rhino/Context.java",
        "signature": "com.google.javascript.rhino.Context.FEATURE_WARNING_AS_ERROR",
        "snippet": "    public static final int FEATURE_WARNING_AS_ERROR = 12;",
        "begin_line": 267,
        "end_line": 267,
        "comment": "\n     * Controls whether a warning should be treated as an error.\n     * @since 1.6 Release 6\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.Context",
        "src_path": "src/com/google/javascript/rhino/Context.java",
        "signature": "com.google.javascript.rhino.Context.languageVersionProperty",
        "snippet": "    public static final String languageVersionProperty = \"language version\";",
        "begin_line": 269,
        "end_line": 269,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Context",
        "src_path": "src/com/google/javascript/rhino/Context.java",
        "signature": "com.google.javascript.rhino.Context.errorReporterProperty",
        "snippet": "    public static final String errorReporterProperty   = \"error reporter\";",
        "begin_line": 270,
        "end_line": 270,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Context",
        "src_path": "src/com/google/javascript/rhino/Context.java",
        "signature": "com.google.javascript.rhino.Context.emptyArgs",
        "snippet": "    public static final Object[] emptyArgs = ScriptRuntime.emptyArgs;",
        "begin_line": 275,
        "end_line": 275,
        "comment": "\n     * Convinient value to use as zero-length array of objects.\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.Context",
        "src_path": "src/com/google/javascript/rhino/Context.java",
        "signature": "com.google.javascript.rhino.Context.threadContexts",
        "snippet": "    private static ThreadLocal<Context> threadContexts\n        = new ThreadLocal<Context>();",
        "begin_line": 409,
        "end_line": 410,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Context",
        "src_path": "src/com/google/javascript/rhino/Context.java",
        "signature": "com.google.javascript.rhino.Context.implementationVersion",
        "snippet": "    private static String implementationVersion;",
        "begin_line": 1156,
        "end_line": 1156,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Context",
        "src_path": "src/com/google/javascript/rhino/Context.java",
        "signature": "com.google.javascript.rhino.Context.sealKey",
        "snippet": "    private Object sealKey;",
        "begin_line": 1159,
        "end_line": 1159,
        "comment": "     private boolean sealed;"
    },
    {
        "class_name": "com.google.javascript.rhino.Context",
        "src_path": "src/com/google/javascript/rhino/Context.java",
        "signature": "com.google.javascript.rhino.Context.iterating",
        "snippet": "    ObjToIntMap iterating;",
        "begin_line": 1164,
        "end_line": 1164,
        "comment": " Use ObjToIntMap instead of java.util.HashSet for JDK 1.1 compatibility"
    },
    {
        "class_name": "com.google.javascript.rhino.Context",
        "src_path": "src/com/google/javascript/rhino/Context.java",
        "signature": "com.google.javascript.rhino.Context.interpreterSecurityDomain",
        "snippet": "    Object interpreterSecurityDomain;",
        "begin_line": 1166,
        "end_line": 1166,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Context",
        "src_path": "src/com/google/javascript/rhino/Context.java",
        "signature": "com.google.javascript.rhino.Context.version",
        "snippet": "    int version;",
        "begin_line": 1168,
        "end_line": 1168,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Context",
        "src_path": "src/com/google/javascript/rhino/Context.java",
        "signature": "com.google.javascript.rhino.Context.errorReporter",
        "snippet": "    private ErrorReporter errorReporter;",
        "begin_line": 1170,
        "end_line": 1170,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Context",
        "src_path": "src/com/google/javascript/rhino/Context.java",
        "signature": "com.google.javascript.rhino.Context.locale",
        "snippet": "    private Locale locale;",
        "begin_line": 1171,
        "end_line": 1171,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Context",
        "src_path": "src/com/google/javascript/rhino/Context.java",
        "signature": "com.google.javascript.rhino.Context.generatingDebug",
        "snippet": "    private boolean generatingDebug;",
        "begin_line": 1172,
        "end_line": 1172,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Context",
        "src_path": "src/com/google/javascript/rhino/Context.java",
        "signature": "com.google.javascript.rhino.Context.generatingDebugChanged",
        "snippet": "    private boolean generatingDebugChanged;",
        "begin_line": 1173,
        "end_line": 1173,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Context",
        "src_path": "src/com/google/javascript/rhino/Context.java",
        "signature": "com.google.javascript.rhino.Context.generatingSource",
        "snippet": "    private boolean generatingSource=true;",
        "begin_line": 1174,
        "end_line": 1174,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Context",
        "src_path": "src/com/google/javascript/rhino/Context.java",
        "signature": "com.google.javascript.rhino.Context.compileFunctionsWithDynamicScopeFlag",
        "snippet": "    boolean compileFunctionsWithDynamicScopeFlag;",
        "begin_line": 1175,
        "end_line": 1175,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Context",
        "src_path": "src/com/google/javascript/rhino/Context.java",
        "signature": "com.google.javascript.rhino.Context.useDynamicScope",
        "snippet": "    boolean useDynamicScope;",
        "begin_line": 1176,
        "end_line": 1176,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Context",
        "src_path": "src/com/google/javascript/rhino/Context.java",
        "signature": "com.google.javascript.rhino.Context.debuggerData",
        "snippet": "    private Object debuggerData;",
        "begin_line": 1177,
        "end_line": 1177,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Context",
        "src_path": "src/com/google/javascript/rhino/Context.java",
        "signature": "com.google.javascript.rhino.Context.enterCount",
        "snippet": "    private int enterCount;",
        "begin_line": 1178,
        "end_line": 1178,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Context",
        "src_path": "src/com/google/javascript/rhino/Context.java",
        "signature": "com.google.javascript.rhino.Context.optimizationLevel",
        "snippet": "    private int optimizationLevel;",
        "begin_line": 1179,
        "end_line": 1179,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Context",
        "src_path": "src/com/google/javascript/rhino/Context.java",
        "signature": "com.google.javascript.rhino.Context.propertyListeners",
        "snippet": "    private Object propertyListeners;",
        "begin_line": 1180,
        "end_line": 1180,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Context",
        "src_path": "src/com/google/javascript/rhino/Context.java",
        "signature": "com.google.javascript.rhino.Context.hashtable",
        "snippet": "    private Hashtable<Object, Object> hashtable;",
        "begin_line": 1181,
        "end_line": 1181,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Context",
        "src_path": "src/com/google/javascript/rhino/Context.java",
        "signature": "com.google.javascript.rhino.Context.activationNames",
        "snippet": "    Hashtable<Object, Object> activationNames;",
        "begin_line": 1187,
        "end_line": 1187,
        "comment": "\n     * This is the list of names of objects forcing the creation of\n     * function activation records.\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.Context",
        "src_path": "src/com/google/javascript/rhino/Context.java",
        "signature": "com.google.javascript.rhino.Context.lastInterpreterFrame",
        "snippet": "    Object lastInterpreterFrame;",
        "begin_line": 1190,
        "end_line": 1190,
        "comment": " For the interpreter to store the last frame for error reports etc."
    },
    {
        "class_name": "com.google.javascript.rhino.Context",
        "src_path": "src/com/google/javascript/rhino/Context.java",
        "signature": "com.google.javascript.rhino.Context.previousInterpreterInvocations",
        "snippet": "    ObjArray previousInterpreterInvocations;",
        "begin_line": 1194,
        "end_line": 1194,
        "comment": " interpreter invocations"
    },
    {
        "class_name": "com.google.javascript.rhino.Context",
        "src_path": "src/com/google/javascript/rhino/Context.java",
        "signature": "com.google.javascript.rhino.Context.instructionCount",
        "snippet": "    int instructionCount;",
        "begin_line": 1197,
        "end_line": 1197,
        "comment": " For instruction counting (interpreter only)"
    },
    {
        "class_name": "com.google.javascript.rhino.Context",
        "src_path": "src/com/google/javascript/rhino/Context.java",
        "signature": "com.google.javascript.rhino.Context.instructionThreshold",
        "snippet": "    int instructionThreshold;",
        "begin_line": 1198,
        "end_line": 1198,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Context",
        "src_path": "src/com/google/javascript/rhino/Context.java",
        "signature": "com.google.javascript.rhino.Context.scratchIndex",
        "snippet": "    int scratchIndex;",
        "begin_line": 1201,
        "end_line": 1201,
        "comment": " It can be used to return the second index-like result from function"
    },
    {
        "class_name": "com.google.javascript.rhino.Context",
        "src_path": "src/com/google/javascript/rhino/Context.java",
        "signature": "com.google.javascript.rhino.Context.scratchUint32",
        "snippet": "    long scratchUint32;",
        "begin_line": 1204,
        "end_line": 1204,
        "comment": " It can be used to return the second uint32 result from function"
    },
    {
        "class_name": "com.google.javascript.jscomp.CheckUnreachableCode",
        "src_path": "src/com/google/javascript/jscomp/CheckUnreachableCode.java",
        "signature": "com.google.javascript.jscomp.CheckUnreachableCode.UNREACHABLE_CODE",
        "snippet": "  static final DiagnosticType UNREACHABLE_CODE = DiagnosticType.error(\n      \"JSC_UNREACHABLE_CODE\", \"unreachable code\");",
        "begin_line": 35,
        "end_line": 36,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CheckUnreachableCode",
        "src_path": "src/com/google/javascript/jscomp/CheckUnreachableCode.java",
        "signature": "com.google.javascript.jscomp.CheckUnreachableCode.compiler",
        "snippet": "  private final AbstractCompiler compiler;",
        "begin_line": 38,
        "end_line": 38,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CheckUnreachableCode",
        "src_path": "src/com/google/javascript/jscomp/CheckUnreachableCode.java",
        "signature": "com.google.javascript.jscomp.CheckUnreachableCode.level",
        "snippet": "  private final CheckLevel level;",
        "begin_line": 39,
        "end_line": 39,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.VoidType",
        "src_path": "src/com/google/javascript/rhino/jstype/VoidType.java",
        "signature": "com.google.javascript.rhino.jstype.VoidType.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 1L;",
        "begin_line": 52,
        "end_line": 52,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.AbstractMessageFormatter",
        "src_path": "src/com/google/javascript/jscomp/AbstractMessageFormatter.java",
        "signature": "com.google.javascript.jscomp.AbstractMessageFormatter.source",
        "snippet": "  private final SourceExcerptProvider source;",
        "begin_line": 30,
        "end_line": 30,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.AbstractMessageFormatter",
        "src_path": "src/com/google/javascript/jscomp/AbstractMessageFormatter.java",
        "signature": "com.google.javascript.jscomp.AbstractMessageFormatter.colorize",
        "snippet": "  private boolean colorize;",
        "begin_line": 31,
        "end_line": 31,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.AbstractMessageFormatter",
        "src_path": "src/com/google/javascript/jscomp/AbstractMessageFormatter.java",
        "signature": "com.google.javascript.jscomp.AbstractMessageFormatter.SUPPORTED_COLOR_TERMINALS",
        "snippet": "  private static final Set<String> SUPPORTED_COLOR_TERMINALS =\n      ImmutableSet.of(\"xterm\",\n                      \"xterm-color\",\n                      \"xterm-256color\",\n                      \"screen-bce\");",
        "begin_line": 48,
        "end_line": 52,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.AbstractMessageFormatter",
        "src_path": "src/com/google/javascript/jscomp/AbstractMessageFormatter.java",
        "signature": "com.google.javascript.jscomp.AbstractMessageFormatter.controlCharacter",
        "snippet": "    private final String controlCharacter;",
        "begin_line": 63,
        "end_line": 63,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.sourceString",
        "snippet": "  private final String sourceString;",
        "begin_line": 89,
        "end_line": 89,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.sourceName",
        "snippet": "  private final String sourceName;",
        "begin_line": 90,
        "end_line": 90,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.config",
        "snippet": "  private final Config config;",
        "begin_line": 91,
        "end_line": 91,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.registry",
        "snippet": "  private final JSTypeRegistry registry;",
        "begin_line": 92,
        "end_line": 92,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.errorReporter",
        "snippet": "  private final ErrorReporter errorReporter;",
        "begin_line": 93,
        "end_line": 93,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.transformDispatcher",
        "snippet": "  private final TransformDispatcher transformDispatcher;",
        "begin_line": 94,
        "end_line": 94,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.ALLOWED_DIRECTIVES",
        "snippet": "  private final Set<String> ALLOWED_DIRECTIVES = Sets.newHashSet(\"use strict\");",
        "begin_line": 97,
        "end_line": 97,
        "comment": " non-static for thread safety"
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.nodesWithJsDoc",
        "snippet": "  private final Multimap<String, NodeWithJsDoc> nodesWithJsDoc =\n      LinkedHashMultimap.create();",
        "begin_line": 114,
        "end_line": 115,
        "comment": " on the Node."
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.NodeWithJsDoc",
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "signature": "com.google.javascript.jscomp.parsing.NodeWithJsDoc.node",
        "snippet": "    private Node node = null;",
        "begin_line": 1164,
        "end_line": 1164,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.graph.GraphReachability",
        "src_path": "src/com/google/javascript/jscomp/graph/GraphReachability.java",
        "signature": "com.google.javascript.jscomp.graph.GraphReachability.graph",
        "snippet": "  private final DiGraph<N, E> graph;",
        "begin_line": 37,
        "end_line": 37,
        "comment": " FixedPointGraphTraversal accepts them."
    },
    {
        "class_name": "com.google.javascript.jscomp.graph.GraphReachability",
        "src_path": "src/com/google/javascript/jscomp/graph/GraphReachability.java",
        "signature": "com.google.javascript.jscomp.graph.GraphReachability.REACHABLE",
        "snippet": "  public static final Annotation REACHABLE = new Annotation() {};",
        "begin_line": 70,
        "end_line": 70,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ControlFlowAnalysis",
        "src_path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java",
        "signature": "com.google.javascript.jscomp.ControlFlowAnalysis.compiler",
        "snippet": "  private final AbstractCompiler compiler;",
        "begin_line": 59,
        "end_line": 59,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ControlFlowAnalysis",
        "src_path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java",
        "signature": "com.google.javascript.jscomp.ControlFlowAnalysis.cfg",
        "snippet": "  private ControlFlowGraph<Node> cfg;",
        "begin_line": 61,
        "end_line": 61,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ControlFlowAnalysis",
        "src_path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java",
        "signature": "com.google.javascript.jscomp.ControlFlowAnalysis.astPosition",
        "snippet": "  private Map<Node, Integer> astPosition;",
        "begin_line": 63,
        "end_line": 63,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ControlFlowAnalysis",
        "src_path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java",
        "signature": "com.google.javascript.jscomp.ControlFlowAnalysis.nodePriorities",
        "snippet": "  private Map<DiGraphNode<Node, Branch>, Integer> nodePriorities;",
        "begin_line": 66,
        "end_line": 66,
        "comment": " TODO(nicksantos): should these be node annotations?"
    },
    {
        "class_name": "com.google.javascript.jscomp.ControlFlowAnalysis",
        "src_path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java",
        "signature": "com.google.javascript.jscomp.ControlFlowAnalysis.priorityComparator",
        "snippet": "  private final Comparator<DiGraphNode<Node, Branch>> priorityComparator =\n      new Comparator<DiGraphNode<Node, Branch>>() {\n    @Override\n    public int compare(\n        DiGraphNode<Node, Branch> a, DiGraphNode<Node, Branch> b) {\n      return astPosition.get(a.getValue()) - astPosition.get(b.getValue());\n    }\n  };",
        "begin_line": 71,
        "end_line": 78,
        "comment": " they will often be executed first in the source program."
    },
    {
        "class_name": "com.google.javascript.jscomp.ControlFlowAnalysis",
        "src_path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java",
        "signature": "com.google.javascript.jscomp.ControlFlowAnalysis.astPositionCounter",
        "snippet": "  private int astPositionCounter;",
        "begin_line": 80,
        "end_line": 80,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ControlFlowAnalysis",
        "src_path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java",
        "signature": "com.google.javascript.jscomp.ControlFlowAnalysis.priorityCounter",
        "snippet": "  private int priorityCounter;",
        "begin_line": 81,
        "end_line": 81,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ControlFlowAnalysis",
        "src_path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java",
        "signature": "com.google.javascript.jscomp.ControlFlowAnalysis.shouldTraverseFunctions",
        "snippet": "  private final boolean shouldTraverseFunctions;",
        "begin_line": 83,
        "end_line": 83,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ControlFlowAnalysis",
        "src_path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java",
        "signature": "com.google.javascript.jscomp.ControlFlowAnalysis.root",
        "snippet": "  private Node root;",
        "begin_line": 88,
        "end_line": 88,
        "comment": " on only the externs."
    },
    {
        "class_name": "com.google.javascript.jscomp.ControlFlowAnalysis",
        "src_path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java",
        "signature": "com.google.javascript.jscomp.ControlFlowAnalysis.exceptionHandler",
        "snippet": "  private final Deque<Node> exceptionHandler = new ArrayDeque<Node>();",
        "begin_line": 95,
        "end_line": 95,
        "comment": "\n   * This stack captures the structure of nested TRY blocks. The top of the\n   * stack is the inner most TRY block. A FUNCTION node in this stack implies\n   * that the handler is determined by the caller of the function at runtime.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.ControlFlowAnalysis",
        "src_path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java",
        "signature": "com.google.javascript.jscomp.ControlFlowAnalysis.finallyMap",
        "snippet": "  private final Multimap<Node, Node> finallyMap = HashMultimap.create();",
        "begin_line": 126,
        "end_line": 126,
        "comment": "\n   * This map is used to handle the follow of FINALLY. For example:\n   *\n   * while(x) {\n   *  try {\n   *    try {\n   *      break;\n   *    } catch (a) {\n   *    } finally {\n   *      foo();\n   *    }\n   *    fooFollow();\n   *  } catch (b) {\n   *  } finally {\n   *    bar();\n   *  }\n   *  barFollow();\n   * }\n   * END();\n   *\n   * In this case finallyMap will contain a map from:\n   *    first FINALLY -> bar()\n   *    second FINALLY -> END()\n   *\n   * When we are connecting foo() and bar() to to their respective follow, we\n   * must also look up this map and connect:\n   *   foo() -> bar()\n   *   bar() -> END\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.AstControlFlowGraph",
        "src_path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java",
        "signature": "com.google.javascript.jscomp.AstControlFlowGraph.priorities",
        "snippet": "    private final Map<DiGraphNode<Node, Branch>, Integer> priorities;",
        "begin_line": 945,
        "end_line": 945,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.GoogleCodingConvention",
        "src_path": "src/com/google/javascript/jscomp/GoogleCodingConvention.java",
        "signature": "com.google.javascript.jscomp.GoogleCodingConvention.OPTIONAL_ARG_PREFIX",
        "snippet": "  private static final String OPTIONAL_ARG_PREFIX = \"opt_\";",
        "begin_line": 34,
        "end_line": 34,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.GoogleCodingConvention",
        "src_path": "src/com/google/javascript/jscomp/GoogleCodingConvention.java",
        "signature": "com.google.javascript.jscomp.GoogleCodingConvention.VAR_ARGS_NAME",
        "snippet": "  private static final String VAR_ARGS_NAME = \"var_args\";",
        "begin_line": 36,
        "end_line": 36,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.GoogleCodingConvention",
        "src_path": "src/com/google/javascript/jscomp/GoogleCodingConvention.java",
        "signature": "com.google.javascript.jscomp.GoogleCodingConvention.ENUM_KEY_PATTERN",
        "snippet": "  private static final Pattern ENUM_KEY_PATTERN =\n    Pattern.compile(\"[A-Z0-9][A-Z0-9_]*\");",
        "begin_line": 38,
        "end_line": 39,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.JsAst",
        "src_path": "src/com/google/javascript/jscomp/JsAst.java",
        "signature": "com.google.javascript.jscomp.JsAst.logger_",
        "snippet": "  private static final Logger logger_ = Logger.getLogger(JsAst.class.getName());",
        "begin_line": 36,
        "end_line": 36,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.JsAst",
        "src_path": "src/com/google/javascript/jscomp/JsAst.java",
        "signature": "com.google.javascript.jscomp.JsAst.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 1L;",
        "begin_line": 37,
        "end_line": 37,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.JsAst",
        "src_path": "src/com/google/javascript/jscomp/JsAst.java",
        "signature": "com.google.javascript.jscomp.JsAst.sourceFile",
        "snippet": "  private transient SourceFile sourceFile;",
        "begin_line": 39,
        "end_line": 39,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.JsAst",
        "src_path": "src/com/google/javascript/jscomp/JsAst.java",
        "signature": "com.google.javascript.jscomp.JsAst.fileName",
        "snippet": "  private String fileName;",
        "begin_line": 40,
        "end_line": 40,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.JsAst",
        "src_path": "src/com/google/javascript/jscomp/JsAst.java",
        "signature": "com.google.javascript.jscomp.JsAst.root",
        "snippet": "  private Node root;",
        "begin_line": 41,
        "end_line": 41,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "signature": "com.google.javascript.jscomp.NodeUtil.CONSTRUCTORS_WITHOUT_SIDE_EFFECTS",
        "snippet": "  private static final Set<String> CONSTRUCTORS_WITHOUT_SIDE_EFFECTS =\n      new HashSet<String>(Arrays.asList(\n        \"Array\",\n        \"Date\",\n        \"Error\",\n        \"Object\",\n        \"RegExp\",\n        \"XMLHttpRequest\"));",
        "begin_line": 49,
        "end_line": 56,
        "comment": " the set of builtin constructors that don't have side effects. "
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "signature": "com.google.javascript.jscomp.NodeUtil.CONSTANT_MARKER",
        "snippet": "  public static final String CONSTANT_MARKER = \"$$constant\";",
        "begin_line": 58,
        "end_line": 58,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.VarCollector",
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "signature": "com.google.javascript.jscomp.VarCollector.vars",
        "snippet": "    final Map<String, Node> vars = Maps.newLinkedHashMap();",
        "begin_line": 1643,
        "end_line": 1643,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.MatchNameNode",
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "signature": "com.google.javascript.jscomp.MatchNameNode.name",
        "snippet": "    final String name;",
        "begin_line": 1741,
        "end_line": 1741,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.MatchNodeType",
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "signature": "com.google.javascript.jscomp.MatchNodeType.type",
        "snippet": "    final int type;",
        "begin_line": 1757,
        "end_line": 1757,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.RemoveConstantExpressions",
        "src_path": "src/com/google/javascript/jscomp/RemoveConstantExpressions.java",
        "signature": "com.google.javascript.jscomp.RemoveConstantExpressions.compiler",
        "snippet": "  private final AbstractCompiler compiler;",
        "begin_line": 43,
        "end_line": 43,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.RemoveConstantRValuesCallback",
        "src_path": "src/com/google/javascript/jscomp/RemoveConstantExpressions.java",
        "signature": "com.google.javascript.jscomp.RemoveConstantRValuesCallback.changeProxy",
        "snippet": "    private final AstChangeProxy changeProxy;",
        "begin_line": 62,
        "end_line": 62,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.RemoveConstantRValuesCallback",
        "src_path": "src/com/google/javascript/jscomp/RemoveConstantExpressions.java",
        "signature": "com.google.javascript.jscomp.RemoveConstantRValuesCallback.result",
        "snippet": "    private final Result result = new Result();",
        "begin_line": 63,
        "end_line": 63,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ReportCodeHasChangedListener",
        "src_path": "src/com/google/javascript/jscomp/RemoveConstantExpressions.java",
        "signature": "com.google.javascript.jscomp.ReportCodeHasChangedListener.result",
        "snippet": "    private final Result result;",
        "begin_line": 124,
        "end_line": 124,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ReferenceCollectingCallback",
        "src_path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java",
        "signature": "com.google.javascript.jscomp.ReferenceCollectingCallback.referenceMap",
        "snippet": "  private final Map<Var, ReferenceCollection> referenceMap =\n      Maps.newHashMap();",
        "begin_line": 52,
        "end_line": 53,
        "comment": "\n   * Maps a given variable to a collection of references to that name. Note that\n   * Var objects are not stable across multiple traversals (unlike scope root or\n   * name).\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.ReferenceCollectingCallback",
        "src_path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java",
        "signature": "com.google.javascript.jscomp.ReferenceCollectingCallback.blockStack",
        "snippet": "  private final Deque<BasicBlock> blockStack = new ArrayDeque<BasicBlock>();",
        "begin_line": 58,
        "end_line": 58,
        "comment": "\n   * The stack of basic blocks and scopes the current traversal is in.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.ReferenceCollectingCallback",
        "src_path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java",
        "signature": "com.google.javascript.jscomp.ReferenceCollectingCallback.behavior",
        "snippet": "  private final Behavior behavior;",
        "begin_line": 63,
        "end_line": 63,
        "comment": "\n   * Source of behavior at various points in the traversal.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.ReferenceCollectingCallback",
        "src_path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java",
        "signature": "com.google.javascript.jscomp.ReferenceCollectingCallback.compiler",
        "snippet": "  private final AbstractCompiler compiler;",
        "begin_line": 68,
        "end_line": 68,
        "comment": "\n   * Javascript compiler to use in traversing.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.ReferenceCollectingCallback",
        "src_path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java",
        "signature": "com.google.javascript.jscomp.ReferenceCollectingCallback.varFilter",
        "snippet": "  private final Predicate<Var> varFilter;",
        "begin_line": 73,
        "end_line": 73,
        "comment": "\n   * Only collect references for filtered variables.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.ReferenceCollectingCallback",
        "src_path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java",
        "signature": "com.google.javascript.jscomp.ReferenceCollectingCallback.DO_NOTHING_BEHAVIOR",
        "snippet": "  static Behavior DO_NOTHING_BEHAVIOR = new Behavior() {\n    @Override\n    public void afterExitScope(NodeTraversal t,\n        Map<Var, ReferenceCollection> referenceMap) {}\n  };",
        "begin_line": 216,
        "end_line": 220,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ReferenceCollection",
        "src_path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java",
        "signature": "com.google.javascript.jscomp.ReferenceCollection.references",
        "snippet": "    List<Reference> references = Lists.newArrayList();",
        "begin_line": 228,
        "end_line": 228,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Reference",
        "src_path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java",
        "signature": "com.google.javascript.jscomp.Reference.DECLARATION_PARENTS",
        "snippet": "    private static final Set<Integer> DECLARATION_PARENTS =\n        ImmutableSet.of(Token.VAR, Token.FUNCTION, Token.CATCH);",
        "begin_line": 382,
        "end_line": 383,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Reference",
        "src_path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java",
        "signature": "com.google.javascript.jscomp.Reference.nameNode",
        "snippet": "    private final Node nameNode;",
        "begin_line": 385,
        "end_line": 385,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Reference",
        "src_path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java",
        "signature": "com.google.javascript.jscomp.Reference.parent",
        "snippet": "    private final Node parent;",
        "begin_line": 386,
        "end_line": 386,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Reference",
        "src_path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java",
        "signature": "com.google.javascript.jscomp.Reference.grandparent",
        "snippet": "    private final Node grandparent;",
        "begin_line": 387,
        "end_line": 387,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Reference",
        "src_path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java",
        "signature": "com.google.javascript.jscomp.Reference.basicBlock",
        "snippet": "    private final BasicBlock basicBlock;",
        "begin_line": 388,
        "end_line": 388,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Reference",
        "src_path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java",
        "signature": "com.google.javascript.jscomp.Reference.scope",
        "snippet": "    private final Scope scope;",
        "begin_line": 389,
        "end_line": 389,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Reference",
        "src_path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java",
        "signature": "com.google.javascript.jscomp.Reference.sourceName",
        "snippet": "    private final String sourceName;",
        "begin_line": 390,
        "end_line": 390,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.BasicBlock",
        "src_path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java",
        "signature": "com.google.javascript.jscomp.BasicBlock.parent",
        "snippet": "    private final BasicBlock parent;",
        "begin_line": 502,
        "end_line": 502,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.BasicBlock",
        "src_path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java",
        "signature": "com.google.javascript.jscomp.BasicBlock.isHoisted",
        "snippet": "    private final boolean isHoisted;",
        "begin_line": 508,
        "end_line": 508,
        "comment": "\n     * Determines whether the block may not be part of the normal control flow,\n     * but instead \"hoisted\" to the top of the scope.\n     "
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessDefines",
        "src_path": "src/com/google/javascript/jscomp/ProcessDefines.java",
        "signature": "com.google.javascript.jscomp.ProcessDefines.KNOWN_DEFINES",
        "snippet": "  private static final Set<String> KNOWN_DEFINES =\n      Sets.newHashSet(\"COMPILED\");",
        "begin_line": 51,
        "end_line": 52,
        "comment": "\n   * Defines in this set will not be flagged with \"unknown define\" warnings.\n   * There are legacy flags that always set these defines, even when they\n   * might not be in the binary.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessDefines",
        "src_path": "src/com/google/javascript/jscomp/ProcessDefines.java",
        "signature": "com.google.javascript.jscomp.ProcessDefines.compiler",
        "snippet": "  private final AbstractCompiler compiler;",
        "begin_line": 54,
        "end_line": 54,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessDefines",
        "src_path": "src/com/google/javascript/jscomp/ProcessDefines.java",
        "signature": "com.google.javascript.jscomp.ProcessDefines.dominantReplacements",
        "snippet": "  private final Map<String, Node> dominantReplacements;",
        "begin_line": 55,
        "end_line": 55,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessDefines",
        "src_path": "src/com/google/javascript/jscomp/ProcessDefines.java",
        "signature": "com.google.javascript.jscomp.ProcessDefines.namespace",
        "snippet": "  private GlobalNamespace namespace = null;",
        "begin_line": 57,
        "end_line": 57,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessDefines",
        "src_path": "src/com/google/javascript/jscomp/ProcessDefines.java",
        "signature": "com.google.javascript.jscomp.ProcessDefines.UNKNOWN_DEFINE_WARNING",
        "snippet": "  static final DiagnosticType UNKNOWN_DEFINE_WARNING = DiagnosticType.warning(\n      \"JSC_UNKNOWN_DEFINE_WARNING\",\n      \"unknown @define variable {0}\");",
        "begin_line": 60,
        "end_line": 62,
        "comment": " Warnings"
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessDefines",
        "src_path": "src/com/google/javascript/jscomp/ProcessDefines.java",
        "signature": "com.google.javascript.jscomp.ProcessDefines.INVALID_DEFINE_INIT_ERROR",
        "snippet": "  static final DiagnosticType INVALID_DEFINE_INIT_ERROR =\n      DiagnosticType.error(\n          \"JSC_INVALID_DEFINE_INIT_ERROR\",\n          \"illegal initialization of @define variable {0}\");",
        "begin_line": 65,
        "end_line": 68,
        "comment": " Errors"
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessDefines",
        "src_path": "src/com/google/javascript/jscomp/ProcessDefines.java",
        "signature": "com.google.javascript.jscomp.ProcessDefines.NON_GLOBAL_DEFINE_INIT_ERROR",
        "snippet": "  static final DiagnosticType NON_GLOBAL_DEFINE_INIT_ERROR =\n      DiagnosticType.error(\n          \"JSC_NON_GLOBAL_DEFINE_INIT_ERROR\",\n          \"@define variable {0} assignment must be global\");",
        "begin_line": 70,
        "end_line": 73,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessDefines",
        "src_path": "src/com/google/javascript/jscomp/ProcessDefines.java",
        "signature": "com.google.javascript.jscomp.ProcessDefines.DEFINE_NOT_ASSIGNABLE_ERROR",
        "snippet": "  static final DiagnosticType DEFINE_NOT_ASSIGNABLE_ERROR =\n      DiagnosticType.error(\n          \"@define variable cannot be assigned here\",\n          \"@define variable {0} cannot be assigned due to unsafe code at {1}.\");",
        "begin_line": 75,
        "end_line": 78,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessDefines",
        "src_path": "src/com/google/javascript/jscomp/ProcessDefines.java",
        "signature": "com.google.javascript.jscomp.ProcessDefines.REASON_DEFINE_NOT_ASSIGNABLE",
        "snippet": "  private static final MessageFormat REASON_DEFINE_NOT_ASSIGNABLE =\n      new MessageFormat(\"line {0} of {1}\");",
        "begin_line": 80,
        "end_line": 81,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CollectDefines",
        "src_path": "src/com/google/javascript/jscomp/ProcessDefines.java",
        "signature": "com.google.javascript.jscomp.CollectDefines.compiler",
        "snippet": "    private final AbstractCompiler compiler;",
        "begin_line": 189,
        "end_line": 189,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CollectDefines",
        "src_path": "src/com/google/javascript/jscomp/ProcessDefines.java",
        "signature": "com.google.javascript.jscomp.CollectDefines.assignableDefines",
        "snippet": "    private final Map<String, DefineInfo> assignableDefines;",
        "begin_line": 190,
        "end_line": 190,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CollectDefines",
        "src_path": "src/com/google/javascript/jscomp/ProcessDefines.java",
        "signature": "com.google.javascript.jscomp.CollectDefines.allDefines",
        "snippet": "    private final Map<String, DefineInfo> allDefines;",
        "begin_line": 191,
        "end_line": 191,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CollectDefines",
        "src_path": "src/com/google/javascript/jscomp/ProcessDefines.java",
        "signature": "com.google.javascript.jscomp.CollectDefines.allRefInfo",
        "snippet": "    private final Map<Node, RefInfo> allRefInfo;",
        "begin_line": 192,
        "end_line": 192,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CollectDefines",
        "src_path": "src/com/google/javascript/jscomp/ProcessDefines.java",
        "signature": "com.google.javascript.jscomp.CollectDefines.lvalueToRemoveLater",
        "snippet": "    private Node lvalueToRemoveLater = null;",
        "begin_line": 196,
        "end_line": 196,
        "comment": " we're currently visiting one of the children of the assign."
    },
    {
        "class_name": "com.google.javascript.jscomp.CollectDefines",
        "src_path": "src/com/google/javascript/jscomp/ProcessDefines.java",
        "signature": "com.google.javascript.jscomp.CollectDefines.assignAllowed",
        "snippet": "    private final Deque<Integer> assignAllowed;",
        "begin_line": 201,
        "end_line": 201,
        "comment": " a define is allowed. Otherwise, it's not allowed."
    },
    {
        "class_name": "com.google.javascript.jscomp.RefInfo",
        "src_path": "src/com/google/javascript/jscomp/ProcessDefines.java",
        "signature": "com.google.javascript.jscomp.RefInfo.ref",
        "snippet": "      final Ref ref;",
        "begin_line": 437,
        "end_line": 437,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.RefInfo",
        "src_path": "src/com/google/javascript/jscomp/ProcessDefines.java",
        "signature": "com.google.javascript.jscomp.RefInfo.name",
        "snippet": "      final Name name;",
        "begin_line": 438,
        "end_line": 438,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DefineInfo",
        "src_path": "src/com/google/javascript/jscomp/ProcessDefines.java",
        "signature": "com.google.javascript.jscomp.DefineInfo.initialValueParent",
        "snippet": "    public final Node initialValueParent;",
        "begin_line": 453,
        "end_line": 453,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DefineInfo",
        "src_path": "src/com/google/javascript/jscomp/ProcessDefines.java",
        "signature": "com.google.javascript.jscomp.DefineInfo.initialValue",
        "snippet": "    public final Node initialValue;",
        "begin_line": 454,
        "end_line": 454,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DefineInfo",
        "src_path": "src/com/google/javascript/jscomp/ProcessDefines.java",
        "signature": "com.google.javascript.jscomp.DefineInfo.lastValue",
        "snippet": "    private Node lastValue;",
        "begin_line": 455,
        "end_line": 455,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DefineInfo",
        "src_path": "src/com/google/javascript/jscomp/ProcessDefines.java",
        "signature": "com.google.javascript.jscomp.DefineInfo.isAssignable",
        "snippet": "    private boolean isAssignable;",
        "begin_line": 456,
        "end_line": 456,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DefineInfo",
        "src_path": "src/com/google/javascript/jscomp/ProcessDefines.java",
        "signature": "com.google.javascript.jscomp.DefineInfo.reasonNotAssignable",
        "snippet": "    private String reasonNotAssignable;",
        "begin_line": 457,
        "end_line": 457,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.graph.LinkedDirectedGraph",
        "src_path": "src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java",
        "signature": "com.google.javascript.jscomp.graph.LinkedDirectedGraph.nodes",
        "snippet": "  protected final Map<N, LinkedDirectedGraphNode<N, E>> nodes =\n      Maps.newHashMap();",
        "begin_line": 41,
        "end_line": 42,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.graph.LinkedDirectedGraphNode",
        "src_path": "src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java",
        "signature": "com.google.javascript.jscomp.graph.LinkedDirectedGraphNode.inEdgeList",
        "snippet": "    protected List<DiGraphEdge<N, E>> inEdgeList = Lists.newArrayList();",
        "begin_line": 341,
        "end_line": 341,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.graph.LinkedDirectedGraphNode",
        "src_path": "src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java",
        "signature": "com.google.javascript.jscomp.graph.LinkedDirectedGraphNode.outEdgeList",
        "snippet": "    protected List<DiGraphEdge<N, E>> outEdgeList =\n        Lists.newArrayList();",
        "begin_line": 342,
        "end_line": 343,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.graph.LinkedDirectedGraphNode",
        "src_path": "src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java",
        "signature": "com.google.javascript.jscomp.graph.LinkedDirectedGraphNode.value",
        "snippet": "    protected final N value;",
        "begin_line": 345,
        "end_line": 345,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.graph.LinkedDirectedGraphNode",
        "src_path": "src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java",
        "signature": "com.google.javascript.jscomp.graph.LinkedDirectedGraphNode.annotation",
        "snippet": "    protected Annotation annotation;",
        "begin_line": 347,
        "end_line": 347,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.graph.LinkedDirectedGraphNode",
        "src_path": "src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java",
        "signature": "com.google.javascript.jscomp.graph.LinkedDirectedGraphNode.id",
        "snippet": "    protected int id;",
        "begin_line": 349,
        "end_line": 349,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.graph.LinkedDirectedGraphNode",
        "src_path": "src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java",
        "signature": "com.google.javascript.jscomp.graph.LinkedDirectedGraphNode.totalNodes",
        "snippet": "    private static int totalNodes = 0;",
        "begin_line": 351,
        "end_line": 351,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.graph.NeighborIterator",
        "src_path": "src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java",
        "signature": "com.google.javascript.jscomp.graph.NeighborIterator.in",
        "snippet": "      private final Iterator<DiGraphEdge<N, E>> in = inEdgeList.iterator();",
        "begin_line": 415,
        "end_line": 415,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.graph.NeighborIterator",
        "src_path": "src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java",
        "signature": "com.google.javascript.jscomp.graph.NeighborIterator.out",
        "snippet": "      private final Iterator<DiGraphEdge<N, E>> out = outEdgeList.iterator();",
        "begin_line": 416,
        "end_line": 416,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.graph.LinkedDirectedGraphEdge",
        "src_path": "src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java",
        "signature": "com.google.javascript.jscomp.graph.LinkedDirectedGraphEdge.sourceNode",
        "snippet": "    private DiGraphNode<N, E> sourceNode;",
        "begin_line": 445,
        "end_line": 445,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.graph.LinkedDirectedGraphEdge",
        "src_path": "src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java",
        "signature": "com.google.javascript.jscomp.graph.LinkedDirectedGraphEdge.destNode",
        "snippet": "    private DiGraphNode<N, E> destNode;",
        "begin_line": 447,
        "end_line": 447,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.graph.LinkedDirectedGraphEdge",
        "src_path": "src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java",
        "signature": "com.google.javascript.jscomp.graph.LinkedDirectedGraphEdge.value",
        "snippet": "    protected final E value;",
        "begin_line": 449,
        "end_line": 449,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.graph.LinkedDirectedGraphEdge",
        "src_path": "src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java",
        "signature": "com.google.javascript.jscomp.graph.LinkedDirectedGraphEdge.annotation",
        "snippet": "    protected Annotation annotation;",
        "begin_line": 451,
        "end_line": 451,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DiagnosticGroupWarningsGuard",
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroupWarningsGuard.java",
        "signature": "com.google.javascript.jscomp.DiagnosticGroupWarningsGuard.group",
        "snippet": "  private final DiagnosticGroup group;",
        "begin_line": 27,
        "end_line": 27,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DiagnosticGroupWarningsGuard",
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroupWarningsGuard.java",
        "signature": "com.google.javascript.jscomp.DiagnosticGroupWarningsGuard.level",
        "snippet": "  private final CheckLevel level;",
        "begin_line": 28,
        "end_line": 28,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ParallelCompilerPass",
        "src_path": "src/com/google/javascript/jscomp/ParallelCompilerPass.java",
        "signature": "com.google.javascript.jscomp.ParallelCompilerPass.splitter",
        "snippet": "  private final AstParallelizer splitter;",
        "begin_line": 36,
        "end_line": 36,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ParallelCompilerPass",
        "src_path": "src/com/google/javascript/jscomp/ParallelCompilerPass.java",
        "signature": "com.google.javascript.jscomp.ParallelCompilerPass.compiler",
        "snippet": "  private final AbstractCompiler compiler;",
        "begin_line": 37,
        "end_line": 37,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ParallelCompilerPass",
        "src_path": "src/com/google/javascript/jscomp/ParallelCompilerPass.java",
        "signature": "com.google.javascript.jscomp.ParallelCompilerPass.numWorkers",
        "snippet": "  private final int numWorkers;",
        "begin_line": 38,
        "end_line": 38,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ParallelCompilerPass",
        "src_path": "src/com/google/javascript/jscomp/ParallelCompilerPass.java",
        "signature": "com.google.javascript.jscomp.ParallelCompilerPass.taskSupply",
        "snippet": "  private final Supplier<Task> taskSupply;",
        "begin_line": 39,
        "end_line": 39,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ParallelCompilerPass",
        "src_path": "src/com/google/javascript/jscomp/ParallelCompilerPass.java",
        "signature": "com.google.javascript.jscomp.ParallelCompilerPass.worklist",
        "snippet": "  private List<Node> worklist;",
        "begin_line": 41,
        "end_line": 41,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Result",
        "src_path": "src/com/google/javascript/jscomp/ParallelCompilerPass.java",
        "signature": "com.google.javascript.jscomp.Result.changed",
        "snippet": "    boolean changed = false;",
        "begin_line": 62,
        "end_line": 62,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Result",
        "src_path": "src/com/google/javascript/jscomp/ParallelCompilerPass.java",
        "signature": "com.google.javascript.jscomp.Result.errors",
        "snippet": "    List<JSError> errors = Lists.newArrayList();",
        "begin_line": 63,
        "end_line": 63,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Result",
        "src_path": "src/com/google/javascript/jscomp/ParallelCompilerPass.java",
        "signature": "com.google.javascript.jscomp.Result.exceptions",
        "snippet": "    List<Exception> exceptions = Lists.newArrayList();",
        "begin_line": 64,
        "end_line": 64,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ControlStructureCheck",
        "src_path": "src/com/google/javascript/jscomp/ControlStructureCheck.java",
        "signature": "com.google.javascript.jscomp.ControlStructureCheck.compiler",
        "snippet": "  private AbstractCompiler compiler;",
        "begin_line": 30,
        "end_line": 30,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ControlStructureCheck",
        "src_path": "src/com/google/javascript/jscomp/ControlStructureCheck.java",
        "signature": "com.google.javascript.jscomp.ControlStructureCheck.sourceName",
        "snippet": "  private String sourceName = null;",
        "begin_line": 32,
        "end_line": 32,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ControlStructureCheck",
        "src_path": "src/com/google/javascript/jscomp/ControlStructureCheck.java",
        "signature": "com.google.javascript.jscomp.ControlStructureCheck.USE_OF_WITH",
        "snippet": "  static final DiagnosticType USE_OF_WITH = DiagnosticType.warning(\n      \"JSC_USE_OF_WITH\",\n      \"The use of the 'with' structure should be avoided.\");",
        "begin_line": 34,
        "end_line": 36,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeTraversal",
        "src_path": "src/com/google/javascript/jscomp/NodeTraversal.java",
        "signature": "com.google.javascript.jscomp.NodeTraversal.compiler",
        "snippet": "  private final AbstractCompiler compiler;",
        "begin_line": 41,
        "end_line": 41,
        "comment": " Package protected for tests"
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeTraversal",
        "src_path": "src/com/google/javascript/jscomp/NodeTraversal.java",
        "signature": "com.google.javascript.jscomp.NodeTraversal.callback",
        "snippet": "  private final Callback callback;",
        "begin_line": 42,
        "end_line": 42,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeTraversal",
        "src_path": "src/com/google/javascript/jscomp/NodeTraversal.java",
        "signature": "com.google.javascript.jscomp.NodeTraversal.curNode",
        "snippet": "  private Node curNode;",
        "begin_line": 45,
        "end_line": 45,
        "comment": " Contains the current node"
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeTraversal",
        "src_path": "src/com/google/javascript/jscomp/NodeTraversal.java",
        "signature": "com.google.javascript.jscomp.NodeTraversal.NODE_TRAVERSAL_ERROR",
        "snippet": "  public static final DiagnosticType NODE_TRAVERSAL_ERROR =\n      DiagnosticType.error(\"JSC_NODE_TRAVERSAL_ERROR\", \"{0}\");",
        "begin_line": 47,
        "end_line": 48,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeTraversal",
        "src_path": "src/com/google/javascript/jscomp/NodeTraversal.java",
        "signature": "com.google.javascript.jscomp.NodeTraversal.scopes",
        "snippet": "  private final Deque<Scope> scopes = new ArrayDeque<Scope>();",
        "begin_line": 55,
        "end_line": 55,
        "comment": "\n   * Stack containing the Scopes that have been created. The Scope objects\n   * are lazily created; so the {@code scopeRoots} stack contains the\n   * Nodes for all Scopes that have not been created yet.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeTraversal",
        "src_path": "src/com/google/javascript/jscomp/NodeTraversal.java",
        "signature": "com.google.javascript.jscomp.NodeTraversal.scopeRoots",
        "snippet": "  private final Deque<Node> scopeRoots = new ArrayDeque<Node>();",
        "begin_line": 61,
        "end_line": 61,
        "comment": "\n   * A stack of scope roots. All scopes that have not been created\n   * are represented in this Deque.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeTraversal",
        "src_path": "src/com/google/javascript/jscomp/NodeTraversal.java",
        "signature": "com.google.javascript.jscomp.NodeTraversal.cfgs",
        "snippet": "  Deque<ControlFlowGraph<Node>> cfgs = new LinkedList<ControlFlowGraph<Node>>();",
        "begin_line": 70,
        "end_line": 70,
        "comment": "\n   * Stack of control flow graphs (CFG). There is one CFG per scope. CFGs\n   * are lazily populated: elements are {@code null} until requested by\n   * {@link #getControlFlowGraph()}. Note that {@link ArrayDeque} does not allow\n   * {@code null} elements, so {@link LinkedList} is used instead.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeTraversal",
        "src_path": "src/com/google/javascript/jscomp/NodeTraversal.java",
        "signature": "com.google.javascript.jscomp.NodeTraversal.sourceName",
        "snippet": "  private String sourceName;",
        "begin_line": 73,
        "end_line": 73,
        "comment": " The current source file name "
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeTraversal",
        "src_path": "src/com/google/javascript/jscomp/NodeTraversal.java",
        "signature": "com.google.javascript.jscomp.NodeTraversal.scopeCreator",
        "snippet": "  private ScopeCreator scopeCreator;",
        "begin_line": 76,
        "end_line": 76,
        "comment": " The scope creator "
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeTraversal",
        "src_path": "src/com/google/javascript/jscomp/NodeTraversal.java",
        "signature": "com.google.javascript.jscomp.NodeTraversal.scopeCallback",
        "snippet": "  private ScopedCallback scopeCallback;",
        "begin_line": 79,
        "end_line": 79,
        "comment": " Possible callback for scope entry and exist *"
    },
    {
        "class_name": "com.google.javascript.jscomp.AbstractNodeTypePruningCallback",
        "src_path": "src/com/google/javascript/jscomp/NodeTraversal.java",
        "signature": "com.google.javascript.jscomp.AbstractNodeTypePruningCallback.nodeTypes",
        "snippet": "    private final Set<Integer> nodeTypes;",
        "begin_line": 168,
        "end_line": 168,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.AbstractNodeTypePruningCallback",
        "src_path": "src/com/google/javascript/jscomp/NodeTraversal.java",
        "signature": "com.google.javascript.jscomp.AbstractNodeTypePruningCallback.include",
        "snippet": "    private final boolean include;",
        "begin_line": 169,
        "end_line": 169,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeTraversal",
        "src_path": "src/com/google/javascript/jscomp/NodeTraversal.java",
        "signature": "com.google.javascript.jscomp.NodeTraversal.MISSING_SOURCE",
        "snippet": "  private static final String MISSING_SOURCE = \"[source unknown]\";",
        "begin_line": 288,
        "end_line": 288,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Normalize",
        "src_path": "src/com/google/javascript/jscomp/Normalize.java",
        "signature": "com.google.javascript.jscomp.Normalize.compiler",
        "snippet": "  private final AbstractCompiler compiler;",
        "begin_line": 62,
        "end_line": 62,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Normalize",
        "src_path": "src/com/google/javascript/jscomp/Normalize.java",
        "signature": "com.google.javascript.jscomp.Normalize.assertOnChange",
        "snippet": "  private final boolean assertOnChange;",
        "begin_line": 63,
        "end_line": 63,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Normalize",
        "src_path": "src/com/google/javascript/jscomp/Normalize.java",
        "signature": "com.google.javascript.jscomp.Normalize.CONVERT_WHILE_TO_FOR",
        "snippet": "  private static final boolean CONVERT_WHILE_TO_FOR = true;",
        "begin_line": 64,
        "end_line": 64,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Normalize",
        "src_path": "src/com/google/javascript/jscomp/Normalize.java",
        "signature": "com.google.javascript.jscomp.Normalize.MAKE_LOCAL_NAMES_UNIQUE",
        "snippet": "  static final boolean MAKE_LOCAL_NAMES_UNIQUE = true;",
        "begin_line": 65,
        "end_line": 65,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.PropogateConstantAnnotations",
        "src_path": "src/com/google/javascript/jscomp/Normalize.java",
        "signature": "com.google.javascript.jscomp.PropogateConstantAnnotations.compiler",
        "snippet": "    private final AbstractCompiler compiler;",
        "begin_line": 111,
        "end_line": 111,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.PropogateConstantAnnotations",
        "src_path": "src/com/google/javascript/jscomp/Normalize.java",
        "signature": "com.google.javascript.jscomp.PropogateConstantAnnotations.assertOnChange",
        "snippet": "    private final boolean assertOnChange;",
        "begin_line": 112,
        "end_line": 112,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.VerifyConstants",
        "src_path": "src/com/google/javascript/jscomp/Normalize.java",
        "signature": "com.google.javascript.jscomp.VerifyConstants.compiler",
        "snippet": "    final private AbstractCompiler compiler;",
        "begin_line": 164,
        "end_line": 164,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.VerifyConstants",
        "src_path": "src/com/google/javascript/jscomp/Normalize.java",
        "signature": "com.google.javascript.jscomp.VerifyConstants.checkUserDeclarations",
        "snippet": "    final private boolean checkUserDeclarations;",
        "begin_line": 165,
        "end_line": 165,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.VerifyConstants",
        "src_path": "src/com/google/javascript/jscomp/Normalize.java",
        "signature": "com.google.javascript.jscomp.VerifyConstants.constantMap",
        "snippet": "    private Map<String,Boolean> constantMap = Maps.newHashMap();",
        "begin_line": 182,
        "end_line": 182,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.NormalizeStatements",
        "src_path": "src/com/google/javascript/jscomp/Normalize.java",
        "signature": "com.google.javascript.jscomp.NormalizeStatements.compiler",
        "snippet": "    private final AbstractCompiler compiler;",
        "begin_line": 245,
        "end_line": 245,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.NormalizeStatements",
        "src_path": "src/com/google/javascript/jscomp/Normalize.java",
        "signature": "com.google.javascript.jscomp.NormalizeStatements.assertOnChange",
        "snippet": "    private final boolean assertOnChange;",
        "begin_line": 246,
        "end_line": 246,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.PhaseOptimizer",
        "src_path": "src/com/google/javascript/jscomp/PhaseOptimizer.java",
        "signature": "com.google.javascript.jscomp.PhaseOptimizer.OPTIMAL_ORDER",
        "snippet": "  @VisibleForTesting\n  static final List<String> OPTIMAL_ORDER = ImmutableList.of(\n     \"removeUnreachableCode\",\n     \"removeUnusedVars\",\n     \"foldConstants\",\n     \"deadAssignmentsElimination\",\n     \"inlineVariables\",\n     \"inlineFunctions\",\n     \"removeUnusedPrototypeProperties\",\n     \"minimizeExitPoints\");",
        "begin_line": 38,
        "end_line": 47,
        "comment": " This ordering is computed offline by running with compute_phase_ordering."
    },
    {
        "class_name": "com.google.javascript.jscomp.PhaseOptimizer",
        "src_path": "src/com/google/javascript/jscomp/PhaseOptimizer.java",
        "signature": "com.google.javascript.jscomp.PhaseOptimizer.MAX_LOOPS",
        "snippet": "  static final int MAX_LOOPS = 100;",
        "begin_line": 49,
        "end_line": 49,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.PhaseOptimizer",
        "src_path": "src/com/google/javascript/jscomp/PhaseOptimizer.java",
        "signature": "com.google.javascript.jscomp.PhaseOptimizer.OPTIMIZE_LOOP_ERROR",
        "snippet": "  static final String OPTIMIZE_LOOP_ERROR =\n      \"Fixed point loop exceeded the maximum number of iterations.\";",
        "begin_line": 50,
        "end_line": 51,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.PhaseOptimizer",
        "src_path": "src/com/google/javascript/jscomp/PhaseOptimizer.java",
        "signature": "com.google.javascript.jscomp.PhaseOptimizer.logger",
        "snippet": "  private static final Logger logger =\n      Logger.getLogger(PhaseOptimizer.class.getName());",
        "begin_line": 53,
        "end_line": 54,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.PhaseOptimizer",
        "src_path": "src/com/google/javascript/jscomp/PhaseOptimizer.java",
        "signature": "com.google.javascript.jscomp.PhaseOptimizer.passes",
        "snippet": "  private List<CompilerPass> passes = Lists.newArrayList();",
        "begin_line": 56,
        "end_line": 56,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.PhaseOptimizer",
        "src_path": "src/com/google/javascript/jscomp/PhaseOptimizer.java",
        "signature": "com.google.javascript.jscomp.PhaseOptimizer.compiler",
        "snippet": "  private final AbstractCompiler compiler;",
        "begin_line": 58,
        "end_line": 58,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.PhaseOptimizer",
        "src_path": "src/com/google/javascript/jscomp/PhaseOptimizer.java",
        "signature": "com.google.javascript.jscomp.PhaseOptimizer.tracker",
        "snippet": "  private final PerformanceTracker tracker;",
        "begin_line": 59,
        "end_line": 59,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.PhaseOptimizer",
        "src_path": "src/com/google/javascript/jscomp/PhaseOptimizer.java",
        "signature": "com.google.javascript.jscomp.PhaseOptimizer.recentChange",
        "snippet": "  private final CodeChangeHandler.RecentChange recentChange =\n      new CodeChangeHandler.RecentChange();",
        "begin_line": 60,
        "end_line": 61,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.PhaseOptimizer",
        "src_path": "src/com/google/javascript/jscomp/PhaseOptimizer.java",
        "signature": "com.google.javascript.jscomp.PhaseOptimizer.loopMutex",
        "snippet": "  private boolean loopMutex = false;",
        "begin_line": 62,
        "end_line": 62,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.PhaseOptimizer",
        "src_path": "src/com/google/javascript/jscomp/PhaseOptimizer.java",
        "signature": "com.google.javascript.jscomp.PhaseOptimizer.currentTracer",
        "snippet": "  private Tracer currentTracer = null;",
        "begin_line": 63,
        "end_line": 63,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.PhaseOptimizer",
        "src_path": "src/com/google/javascript/jscomp/PhaseOptimizer.java",
        "signature": "com.google.javascript.jscomp.PhaseOptimizer.currentPassName",
        "snippet": "  private String currentPassName = null;",
        "begin_line": 64,
        "end_line": 64,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.PhaseOptimizer",
        "src_path": "src/com/google/javascript/jscomp/PhaseOptimizer.java",
        "signature": "com.google.javascript.jscomp.PhaseOptimizer.sanityCheck",
        "snippet": "  private PassFactory sanityCheck = null;",
        "begin_line": 65,
        "end_line": 65,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.PhaseOptimizer",
        "src_path": "src/com/google/javascript/jscomp/PhaseOptimizer.java",
        "signature": "com.google.javascript.jscomp.PhaseOptimizer.randomizeLoops",
        "snippet": "  private static boolean randomizeLoops = false;",
        "begin_line": 69,
        "end_line": 69,
        "comment": " phase orderings. They should not be touched by normal compiler runs."
    },
    {
        "class_name": "com.google.javascript.jscomp.PhaseOptimizer",
        "src_path": "src/com/google/javascript/jscomp/PhaseOptimizer.java",
        "signature": "com.google.javascript.jscomp.PhaseOptimizer.loopsRun",
        "snippet": "  private static List<List<String>> loopsRun = Lists.newArrayList();",
        "begin_line": 70,
        "end_line": 70,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.NamedPass",
        "src_path": "src/com/google/javascript/jscomp/PhaseOptimizer.java",
        "signature": "com.google.javascript.jscomp.NamedPass.name",
        "snippet": "    private final String name;",
        "begin_line": 238,
        "end_line": 238,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.PassFactoryDelegate",
        "src_path": "src/com/google/javascript/jscomp/PhaseOptimizer.java",
        "signature": "com.google.javascript.jscomp.PassFactoryDelegate.myCompiler",
        "snippet": "    private final AbstractCompiler myCompiler;",
        "begin_line": 258,
        "end_line": 258,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.PassFactoryDelegate",
        "src_path": "src/com/google/javascript/jscomp/PhaseOptimizer.java",
        "signature": "com.google.javascript.jscomp.PassFactoryDelegate.factory",
        "snippet": "    private final PassFactory factory;",
        "begin_line": 259,
        "end_line": 259,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.LoopInternal",
        "src_path": "src/com/google/javascript/jscomp/PhaseOptimizer.java",
        "signature": "com.google.javascript.jscomp.LoopInternal.myPasses",
        "snippet": "    private final List<NamedPass> myPasses = Lists.newArrayList();",
        "begin_line": 288,
        "end_line": 288,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.LoopInternal",
        "src_path": "src/com/google/javascript/jscomp/PhaseOptimizer.java",
        "signature": "com.google.javascript.jscomp.LoopInternal.myNames",
        "snippet": "    private final Set<String> myNames = Sets.newHashSet();",
        "begin_line": 289,
        "end_line": 289,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Result",
        "src_path": "src/com/google/javascript/jscomp/Result.java",
        "signature": "com.google.javascript.jscomp.Result.success",
        "snippet": "  public final boolean success;",
        "begin_line": 25,
        "end_line": 25,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Result",
        "src_path": "src/com/google/javascript/jscomp/Result.java",
        "signature": "com.google.javascript.jscomp.Result.errors",
        "snippet": "  public final JSError[] errors;",
        "begin_line": 26,
        "end_line": 26,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Result",
        "src_path": "src/com/google/javascript/jscomp/Result.java",
        "signature": "com.google.javascript.jscomp.Result.warnings",
        "snippet": "  public final JSError[] warnings;",
        "begin_line": 27,
        "end_line": 27,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Result",
        "src_path": "src/com/google/javascript/jscomp/Result.java",
        "signature": "com.google.javascript.jscomp.Result.debugLog",
        "snippet": "  public final String debugLog;",
        "begin_line": 28,
        "end_line": 28,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Result",
        "src_path": "src/com/google/javascript/jscomp/Result.java",
        "signature": "com.google.javascript.jscomp.Result.variableMap",
        "snippet": "  public final VariableMap variableMap;",
        "begin_line": 29,
        "end_line": 29,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Result",
        "src_path": "src/com/google/javascript/jscomp/Result.java",
        "signature": "com.google.javascript.jscomp.Result.propertyMap",
        "snippet": "  public final VariableMap propertyMap;",
        "begin_line": 30,
        "end_line": 30,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Result",
        "src_path": "src/com/google/javascript/jscomp/Result.java",
        "signature": "com.google.javascript.jscomp.Result.namedAnonFunctionMap",
        "snippet": "  public final VariableMap namedAnonFunctionMap;",
        "begin_line": 31,
        "end_line": 31,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Result",
        "src_path": "src/com/google/javascript/jscomp/Result.java",
        "signature": "com.google.javascript.jscomp.Result.functionInformationMap",
        "snippet": "  public final FunctionInformationMap functionInformationMap;",
        "begin_line": 32,
        "end_line": 32,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Result",
        "src_path": "src/com/google/javascript/jscomp/Result.java",
        "signature": "com.google.javascript.jscomp.Result.sourceMap",
        "snippet": "  public final SourceMap sourceMap;",
        "begin_line": 33,
        "end_line": 33,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Result",
        "src_path": "src/com/google/javascript/jscomp/Result.java",
        "signature": "com.google.javascript.jscomp.Result.cssNames",
        "snippet": "  public final Map<String, Integer> cssNames;",
        "begin_line": 34,
        "end_line": 34,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Result",
        "src_path": "src/com/google/javascript/jscomp/Result.java",
        "signature": "com.google.javascript.jscomp.Result.externExport",
        "snippet": "  public final String externExport;",
        "begin_line": 35,
        "end_line": 35,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.graph.FixedPointGraphTraversal",
        "src_path": "src/com/google/javascript/jscomp/graph/FixedPointGraphTraversal.java",
        "signature": "com.google.javascript.jscomp.graph.FixedPointGraphTraversal.callback",
        "snippet": "  private final EdgeCallback<N, E> callback;",
        "begin_line": 43,
        "end_line": 43,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.graph.FixedPointGraphTraversal",
        "src_path": "src/com/google/javascript/jscomp/graph/FixedPointGraphTraversal.java",
        "signature": "com.google.javascript.jscomp.graph.FixedPointGraphTraversal.NON_HALTING_ERROR_MSG",
        "snippet": "  public static final String NON_HALTING_ERROR_MSG =\n    \"Fixed point computation not halting\";",
        "begin_line": 45,
        "end_line": 46,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.PassFactory",
        "src_path": "src/com/google/javascript/jscomp/PassFactory.java",
        "signature": "com.google.javascript.jscomp.PassFactory.name",
        "snippet": "  private final String name;",
        "begin_line": 33,
        "end_line": 33,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.PassFactory",
        "src_path": "src/com/google/javascript/jscomp/PassFactory.java",
        "signature": "com.google.javascript.jscomp.PassFactory.isOneTimePass",
        "snippet": "  private final boolean isOneTimePass;",
        "begin_line": 34,
        "end_line": 34,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.PassFactory",
        "src_path": "src/com/google/javascript/jscomp/PassFactory.java",
        "signature": "com.google.javascript.jscomp.PassFactory.isCreated",
        "snippet": "  private boolean isCreated = false;",
        "begin_line": 35,
        "end_line": 35,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineVariables",
        "src_path": "src/com/google/javascript/jscomp/InlineVariables.java",
        "signature": "com.google.javascript.jscomp.InlineVariables.compiler",
        "snippet": "  private final AbstractCompiler compiler;",
        "begin_line": 57,
        "end_line": 57,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineVariables",
        "src_path": "src/com/google/javascript/jscomp/InlineVariables.java",
        "signature": "com.google.javascript.jscomp.InlineVariables.mode",
        "snippet": "  private final Mode mode;",
        "begin_line": 67,
        "end_line": 67,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineVariables",
        "src_path": "src/com/google/javascript/jscomp/InlineVariables.java",
        "signature": "com.google.javascript.jscomp.InlineVariables.inlineAllStrings",
        "snippet": "  private final boolean inlineAllStrings;",
        "begin_line": 70,
        "end_line": 70,
        "comment": " Inlines all strings, even if they increase the size of the gzipped binary."
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineVariables",
        "src_path": "src/com/google/javascript/jscomp/InlineVariables.java",
        "signature": "com.google.javascript.jscomp.InlineVariables.identifyConstants",
        "snippet": "  private final IdentifyConstants identifyConstants = new IdentifyConstants();",
        "begin_line": 72,
        "end_line": 72,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.AliasCandidate",
        "src_path": "src/com/google/javascript/jscomp/InlineVariables.java",
        "signature": "com.google.javascript.jscomp.AliasCandidate.alias",
        "snippet": "    private final Var alias;",
        "begin_line": 129,
        "end_line": 129,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.AliasCandidate",
        "src_path": "src/com/google/javascript/jscomp/InlineVariables.java",
        "signature": "com.google.javascript.jscomp.AliasCandidate.refInfo",
        "snippet": "    private final ReferenceCollection refInfo;",
        "begin_line": 130,
        "end_line": 130,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.InliningBehavior",
        "src_path": "src/com/google/javascript/jscomp/InlineVariables.java",
        "signature": "com.google.javascript.jscomp.InliningBehavior.staleVars",
        "snippet": "    private final Set<Var> staleVars = Sets.newHashSet();",
        "begin_line": 149,
        "end_line": 149,
        "comment": "\n     * A list of variables that should not be inlined, because their\n     * reference information is out of sync with the state of the AST.\n     "
    },
    {
        "class_name": "com.google.javascript.jscomp.InliningBehavior",
        "src_path": "src/com/google/javascript/jscomp/InlineVariables.java",
        "signature": "com.google.javascript.jscomp.InliningBehavior.aliasCandidates",
        "snippet": "    final Map<Node, AliasCandidate> aliasCandidates = Maps.newHashMap();",
        "begin_line": 156,
        "end_line": 156,
        "comment": "\n     * Stored possible aliases of variables that never change, with\n     * all the reference info about those variables. Hashed by the NAME\n     * node of the variable being aliased.\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.JSTypeExpression",
        "src_path": "src/com/google/javascript/rhino/JSTypeExpression.java",
        "signature": "com.google.javascript.rhino.JSTypeExpression.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 1L;",
        "begin_line": 56,
        "end_line": 56,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.JSTypeExpression",
        "src_path": "src/com/google/javascript/rhino/JSTypeExpression.java",
        "signature": "com.google.javascript.rhino.JSTypeExpression.root",
        "snippet": "  private final Node root;",
        "begin_line": 59,
        "end_line": 59,
        "comment": " The root of the AST. "
    },
    {
        "class_name": "com.google.javascript.rhino.JSTypeExpression",
        "src_path": "src/com/google/javascript/rhino/JSTypeExpression.java",
        "signature": "com.google.javascript.rhino.JSTypeExpression.sourceName",
        "snippet": "  private final String sourceName;",
        "begin_line": 62,
        "end_line": 62,
        "comment": " The source name where the type expression appears. "
    },
    {
        "class_name": "com.google.javascript.rhino.JSTypeExpression",
        "src_path": "src/com/google/javascript/rhino/JSTypeExpression.java",
        "signature": "com.google.javascript.rhino.JSTypeExpression.registry",
        "snippet": "  private final JSTypeRegistry registry;",
        "begin_line": 65,
        "end_line": 65,
        "comment": " The type registry to use for resolution. "
    },
    {
        "class_name": "com.google.javascript.jscomp.CodeGenerator",
        "src_path": "src/com/google/javascript/jscomp/CodeGenerator.java",
        "signature": "com.google.javascript.jscomp.CodeGenerator.HEX_CHARS",
        "snippet": "  private static final char[] HEX_CHARS\n      = { '0', '1', '2', '3', '4', '5', '6', '7',\n          '8', '9', 'a', 'b', 'c', 'd', 'e', 'f' };",
        "begin_line": 38,
        "end_line": 40,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CodeGenerator",
        "src_path": "src/com/google/javascript/jscomp/CodeGenerator.java",
        "signature": "com.google.javascript.jscomp.CodeGenerator.cc",
        "snippet": "  private final CodeConsumer cc;",
        "begin_line": 42,
        "end_line": 42,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CodeGenerator",
        "src_path": "src/com/google/javascript/jscomp/CodeGenerator.java",
        "signature": "com.google.javascript.jscomp.CodeGenerator.outputCharsetEncoder",
        "snippet": "  private final CharsetEncoder outputCharsetEncoder;",
        "begin_line": 44,
        "end_line": 44,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CodeGenerator",
        "src_path": "src/com/google/javascript/jscomp/CodeGenerator.java",
        "signature": "com.google.javascript.jscomp.CodeGenerator.validation",
        "snippet": "  private final boolean validation;",
        "begin_line": 49,
        "end_line": 49,
        "comment": " properly normalize the AST (JsMinimizer)."
    },
    {
        "class_name": "com.google.javascript.jscomp.AstChangeProxy",
        "src_path": "src/com/google/javascript/jscomp/AstChangeProxy.java",
        "signature": "com.google.javascript.jscomp.AstChangeProxy.listeners",
        "snippet": "  private final List<ChangeListener> listeners;",
        "begin_line": 46,
        "end_line": 46,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.UnionTypeBuilder",
        "src_path": "src/com/google/javascript/rhino/jstype/UnionTypeBuilder.java",
        "signature": "com.google.javascript.rhino.jstype.UnionTypeBuilder.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 1L;",
        "begin_line": 62,
        "end_line": 62,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.UnionTypeBuilder",
        "src_path": "src/com/google/javascript/rhino/jstype/UnionTypeBuilder.java",
        "signature": "com.google.javascript.rhino.jstype.UnionTypeBuilder.MAX_UNION_SIZE",
        "snippet": "  private static final int MAX_UNION_SIZE = 20;",
        "begin_line": 66,
        "end_line": 66,
        "comment": " then we should just give up and admit that we have no clue."
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.UnionTypeBuilder",
        "src_path": "src/com/google/javascript/rhino/jstype/UnionTypeBuilder.java",
        "signature": "com.google.javascript.rhino.jstype.UnionTypeBuilder.registry",
        "snippet": "  private final JSTypeRegistry registry;",
        "begin_line": 68,
        "end_line": 68,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.UnionTypeBuilder",
        "src_path": "src/com/google/javascript/rhino/jstype/UnionTypeBuilder.java",
        "signature": "com.google.javascript.rhino.jstype.UnionTypeBuilder.alternates",
        "snippet": "  private final List<JSType> alternates = Lists.newArrayList();",
        "begin_line": 69,
        "end_line": 69,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.UnionTypeBuilder",
        "src_path": "src/com/google/javascript/rhino/jstype/UnionTypeBuilder.java",
        "signature": "com.google.javascript.rhino.jstype.UnionTypeBuilder.isAllType",
        "snippet": "  private boolean isAllType = false;",
        "begin_line": 70,
        "end_line": 70,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.UnionTypeBuilder",
        "src_path": "src/com/google/javascript/rhino/jstype/UnionTypeBuilder.java",
        "signature": "com.google.javascript.rhino.jstype.UnionTypeBuilder.isNativeUnknownType",
        "snippet": "  private boolean isNativeUnknownType = false;",
        "begin_line": 71,
        "end_line": 71,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.UnionTypeBuilder",
        "src_path": "src/com/google/javascript/rhino/jstype/UnionTypeBuilder.java",
        "signature": "com.google.javascript.rhino.jstype.UnionTypeBuilder.areAllUnknownsChecked",
        "snippet": "  private boolean areAllUnknownsChecked = true;",
        "begin_line": 72,
        "end_line": 72,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.UnionTypeBuilder",
        "src_path": "src/com/google/javascript/rhino/jstype/UnionTypeBuilder.java",
        "signature": "com.google.javascript.rhino.jstype.UnionTypeBuilder.result",
        "snippet": "  private JSType result = null;",
        "begin_line": 75,
        "end_line": 75,
        "comment": " Memoize the result, in case build() is called multiple times."
    },
    {
        "class_name": "com.google.javascript.jscomp.Tracer",
        "src_path": "src/com/google/javascript/jscomp/Tracer.java",
        "signature": "com.google.javascript.jscomp.Tracer.logger",
        "snippet": "  static final Logger logger =\n      Logger.getLogger(Tracer.class.getName());",
        "begin_line": 181,
        "end_line": 182,
        "comment": " package-private for access from unit tests"
    },
    {
        "class_name": "com.google.javascript.jscomp.Tracer",
        "src_path": "src/com/google/javascript/jscomp/Tracer.java",
        "signature": "com.google.javascript.jscomp.Tracer.defaultPrettyPrint",
        "snippet": "  private static volatile boolean defaultPrettyPrint;",
        "begin_line": 188,
        "end_line": 188,
        "comment": "\n   * Whether pretty printing is enabled. This is intended to be set once\n   * at application startup.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.Tracer",
        "src_path": "src/com/google/javascript/jscomp/Tracer.java",
        "signature": "com.google.javascript.jscomp.Tracer.extraTracingStatistics",
        "snippet": "  private static List<TracingStatistic> extraTracingStatistics =\n      new CopyOnWriteArrayList<TracingStatistic>();",
        "begin_line": 193,
        "end_line": 194,
        "comment": " This list is guaranteed to only increase in length.  It contains a list of additional\n   * statistics that the user wants to keep track of.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.Tracer",
        "src_path": "src/com/google/javascript/jscomp/Tracer.java",
        "signature": "com.google.javascript.jscomp.Tracer.extraTracingValues",
        "snippet": "  private long[] extraTracingValues;",
        "begin_line": 197,
        "end_line": 197,
        "comment": " Values returned by extraTracingStatistics "
    },
    {
        "class_name": "com.google.javascript.jscomp.Tracer",
        "src_path": "src/com/google/javascript/jscomp/Tracer.java",
        "signature": "com.google.javascript.jscomp.Tracer.type",
        "snippet": "  private final @Nullable String type;",
        "begin_line": 200,
        "end_line": 200,
        "comment": " The type for grouping traces, may be null "
    },
    {
        "class_name": "com.google.javascript.jscomp.Tracer",
        "src_path": "src/com/google/javascript/jscomp/Tracer.java",
        "signature": "com.google.javascript.jscomp.Tracer.comment",
        "snippet": "  private final String comment;",
        "begin_line": 203,
        "end_line": 203,
        "comment": " A comment string for the report "
    },
    {
        "class_name": "com.google.javascript.jscomp.Tracer",
        "src_path": "src/com/google/javascript/jscomp/Tracer.java",
        "signature": "com.google.javascript.jscomp.Tracer.startTimeMs",
        "snippet": "  private final long startTimeMs;",
        "begin_line": 206,
        "end_line": 206,
        "comment": " Start time of the trace "
    },
    {
        "class_name": "com.google.javascript.jscomp.Tracer",
        "src_path": "src/com/google/javascript/jscomp/Tracer.java",
        "signature": "com.google.javascript.jscomp.Tracer.stopTimeMs",
        "snippet": "  private long stopTimeMs;",
        "begin_line": 209,
        "end_line": 209,
        "comment": " Stop time of the trace, non-final "
    },
    {
        "class_name": "com.google.javascript.jscomp.Tracer",
        "src_path": "src/com/google/javascript/jscomp/Tracer.java",
        "signature": "com.google.javascript.jscomp.Tracer.startThread",
        "snippet": "  final Thread startThread;",
        "begin_line": 215,
        "end_line": 215,
        "comment": "\n   * Record our starter thread in order to trap Traces that are started in one\n   * thread and stopped in another\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.Tracer",
        "src_path": "src/com/google/javascript/jscomp/Tracer.java",
        "signature": "com.google.javascript.jscomp.Tracer.MAX_TRACE_SIZE",
        "snippet": "  static final int MAX_TRACE_SIZE = 1000;",
        "begin_line": 224,
        "end_line": 224,
        "comment": "\n   * We limit the number of events in a Trace in order to catch memory\n   * leaks (a thread that keeps logging events and never clears them).\n   * This number is arbitrary and can be increased if necessary (though\n   * if there are more than 1000 events then the Tracer is probably being\n   * misused).\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.Tracer",
        "src_path": "src/com/google/javascript/jscomp/Tracer.java",
        "signature": "com.google.javascript.jscomp.Tracer.clock",
        "snippet": "  static InternalClock clock = new InternalClock() {\n    public long currentTimeMillis() {\n      return System.currentTimeMillis();\n    }\n  };",
        "begin_line": 238,
        "end_line": 242,
        "comment": "\n   * Default clock that calls through to the system clock. Can be overridden\n   * in unit tests.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.Stat",
        "src_path": "src/com/google/javascript/jscomp/Tracer.java",
        "signature": "com.google.javascript.jscomp.Stat.count",
        "snippet": "    private int count;",
        "begin_line": 554,
        "end_line": 554,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Stat",
        "src_path": "src/com/google/javascript/jscomp/Tracer.java",
        "signature": "com.google.javascript.jscomp.Stat.silent",
        "snippet": "    private int silent;",
        "begin_line": 555,
        "end_line": 555,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Stat",
        "src_path": "src/com/google/javascript/jscomp/Tracer.java",
        "signature": "com.google.javascript.jscomp.Stat.clockTime",
        "snippet": "    private int clockTime;",
        "begin_line": 556,
        "end_line": 556,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Stat",
        "src_path": "src/com/google/javascript/jscomp/Tracer.java",
        "signature": "com.google.javascript.jscomp.Stat.extraInfo",
        "snippet": "    private int[] extraInfo;",
        "begin_line": 557,
        "end_line": 557,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Tracer",
        "src_path": "src/com/google/javascript/jscomp/Tracer.java",
        "signature": "com.google.javascript.jscomp.Tracer.typeToCountMap",
        "snippet": "  private static @Nullable AtomicTracerStatMap typeToCountMap;",
        "begin_line": 588,
        "end_line": 588,
        "comment": "\n   * This map tracks counts of tracers for each type over all time.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.Tracer",
        "src_path": "src/com/google/javascript/jscomp/Tracer.java",
        "signature": "com.google.javascript.jscomp.Tracer.typeToSilentMap",
        "snippet": "  private static @Nullable AtomicTracerStatMap typeToSilentMap;",
        "begin_line": 593,
        "end_line": 593,
        "comment": "\n   * This map tracks counts of silent tracers for each type over all time.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.Tracer",
        "src_path": "src/com/google/javascript/jscomp/Tracer.java",
        "signature": "com.google.javascript.jscomp.Tracer.typeToTimeMap",
        "snippet": "  private static @Nullable AtomicTracerStatMap typeToTimeMap;",
        "begin_line": 598,
        "end_line": 598,
        "comment": "\n   * This map tracks time (ms) for each type over all time.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.Tracer",
        "src_path": "src/com/google/javascript/jscomp/Tracer.java",
        "signature": "com.google.javascript.jscomp.Tracer.ZERO_STAT",
        "snippet": "  private static final Stat ZERO_STAT = new Stat();",
        "begin_line": 646,
        "end_line": 646,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Event",
        "src_path": "src/com/google/javascript/jscomp/Tracer.java",
        "signature": "com.google.javascript.jscomp.Event.isStart",
        "snippet": "    boolean isStart;   // else is_stop",
        "begin_line": 657,
        "end_line": 657,
        "comment": " else is_stop"
    },
    {
        "class_name": "com.google.javascript.jscomp.Event",
        "src_path": "src/com/google/javascript/jscomp/Tracer.java",
        "signature": "com.google.javascript.jscomp.Event.tracer",
        "snippet": "    Tracer tracer;",
        "begin_line": 658,
        "end_line": 658,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ThreadTrace",
        "src_path": "src/com/google/javascript/jscomp/Tracer.java",
        "signature": "com.google.javascript.jscomp.ThreadTrace.defaultSilenceThreshold",
        "snippet": "    int defaultSilenceThreshold; // non-final",
        "begin_line": 717,
        "end_line": 717,
        "comment": " non-final"
    },
    {
        "class_name": "com.google.javascript.jscomp.ThreadTrace",
        "src_path": "src/com/google/javascript/jscomp/Tracer.java",
        "signature": "com.google.javascript.jscomp.ThreadTrace.events",
        "snippet": "    final ArrayList<Event> events = new ArrayList<Event>();",
        "begin_line": 720,
        "end_line": 720,
        "comment": " The Events corresponding to each startEvent/stopEvent "
    },
    {
        "class_name": "com.google.javascript.jscomp.ThreadTrace",
        "src_path": "src/com/google/javascript/jscomp/Tracer.java",
        "signature": "com.google.javascript.jscomp.ThreadTrace.outstandingEvents",
        "snippet": "    final HashSet<Tracer> outstandingEvents = new HashSet<Tracer>();",
        "begin_line": 723,
        "end_line": 723,
        "comment": " Tracers that have not had their .stop() called "
    },
    {
        "class_name": "com.google.javascript.jscomp.ThreadTrace",
        "src_path": "src/com/google/javascript/jscomp/Tracer.java",
        "signature": "com.google.javascript.jscomp.ThreadTrace.stats",
        "snippet": "    final Map<String, Stat> stats = new HashMap<String, Stat>();",
        "begin_line": 726,
        "end_line": 726,
        "comment": " Map from type to Stat object "
    },
    {
        "class_name": "com.google.javascript.jscomp.ThreadTrace",
        "src_path": "src/com/google/javascript/jscomp/Tracer.java",
        "signature": "com.google.javascript.jscomp.ThreadTrace.isOutstandingEventsTruncated",
        "snippet": "    boolean isOutstandingEventsTruncated = false;",
        "begin_line": 732,
        "end_line": 732,
        "comment": "\n     * True if {@code outstandingEvents} has been cleared because we exceeded\n     * the max trace limit.\n     "
    },
    {
        "class_name": "com.google.javascript.jscomp.ThreadTrace",
        "src_path": "src/com/google/javascript/jscomp/Tracer.java",
        "signature": "com.google.javascript.jscomp.ThreadTrace.isEventsTruncated",
        "snippet": "    boolean isEventsTruncated = false;",
        "begin_line": 738,
        "end_line": 738,
        "comment": "\n     * True if {@code events} has been cleared because we exceeded the max\n     * trace limit.\n     "
    },
    {
        "class_name": "com.google.javascript.jscomp.ThreadTrace",
        "src_path": "src/com/google/javascript/jscomp/Tracer.java",
        "signature": "com.google.javascript.jscomp.ThreadTrace.isInitialized",
        "snippet": "    boolean isInitialized = false;",
        "begin_line": 744,
        "end_line": 744,
        "comment": "\n     * Set to true if {@link Tracer#initCurrentThreadTrace()} was called by\n     * the current thread.\n     "
    },
    {
        "class_name": "com.google.javascript.jscomp.ThreadTrace",
        "src_path": "src/com/google/javascript/jscomp/Tracer.java",
        "signature": "com.google.javascript.jscomp.ThreadTrace.prettyPrint",
        "snippet": "    boolean prettyPrint = false;",
        "begin_line": 749,
        "end_line": 749,
        "comment": "\n     * Whether pretty printing is enabled for the trace.\n     "
    },
    {
        "class_name": "com.google.javascript.jscomp.Tracer",
        "src_path": "src/com/google/javascript/jscomp/Tracer.java",
        "signature": "com.google.javascript.jscomp.Tracer.traces",
        "snippet": "  private static ThreadLocal<ThreadTrace> traces = new ThreadLocal<ThreadTrace>();",
        "begin_line": 962,
        "end_line": 962,
        "comment": " Holds the ThreadTrace for each thread.  "
    },
    {
        "class_name": "com.google.javascript.jscomp.AtomicTracerStatMap",
        "src_path": "src/com/google/javascript/jscomp/Tracer.java",
        "signature": "com.google.javascript.jscomp.AtomicTracerStatMap.map",
        "snippet": "    private ConcurrentMap<String, Long> map = new ConcurrentHashMap<String, Long>();",
        "begin_line": 1037,
        "end_line": 1037,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.PrintStreamErrorManager",
        "src_path": "src/com/google/javascript/jscomp/PrintStreamErrorManager.java",
        "signature": "com.google.javascript.jscomp.PrintStreamErrorManager.formatter",
        "snippet": "  private final MessageFormatter formatter;",
        "begin_line": 35,
        "end_line": 35,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.PrintStreamErrorManager",
        "src_path": "src/com/google/javascript/jscomp/PrintStreamErrorManager.java",
        "signature": "com.google.javascript.jscomp.PrintStreamErrorManager.stream",
        "snippet": "  private final PrintStream stream;",
        "begin_line": 36,
        "end_line": 36,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.PrintStreamErrorManager",
        "src_path": "src/com/google/javascript/jscomp/PrintStreamErrorManager.java",
        "signature": "com.google.javascript.jscomp.PrintStreamErrorManager.summaryDetailLevel",
        "snippet": "  private int summaryDetailLevel = 1;",
        "begin_line": 37,
        "end_line": 37,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Denormalize",
        "src_path": "src/com/google/javascript/jscomp/Denormalize.java",
        "signature": "com.google.javascript.jscomp.Denormalize.compiler",
        "snippet": "  private final AbstractCompiler compiler;",
        "begin_line": 40,
        "end_line": 40,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.StripConstantAnnotations",
        "src_path": "src/com/google/javascript/jscomp/Denormalize.java",
        "signature": "com.google.javascript.jscomp.StripConstantAnnotations.compiler",
        "snippet": "    private AbstractCompiler compiler;",
        "begin_line": 117,
        "end_line": 117,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.RhinoErrorReporter",
        "src_path": "src/com/google/javascript/jscomp/RhinoErrorReporter.java",
        "signature": "com.google.javascript.jscomp.RhinoErrorReporter.PARSE_ERROR",
        "snippet": "  static final DiagnosticType PARSE_ERROR =\n      DiagnosticType.error(\"JSC_PARSE_ERROR\", \"Parse error. {0}\");",
        "begin_line": 35,
        "end_line": 36,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.RhinoErrorReporter",
        "src_path": "src/com/google/javascript/jscomp/RhinoErrorReporter.java",
        "signature": "com.google.javascript.jscomp.RhinoErrorReporter.EXTRA_FILEOVERVIEW",
        "snippet": "  static final DiagnosticType EXTRA_FILEOVERVIEW =\n      DiagnosticType.warning(\"JSC_EXTRA_FILEOVERVIEW\", \"Parse error. {0}\");",
        "begin_line": 40,
        "end_line": 41,
        "comment": " warnings API."
    },
    {
        "class_name": "com.google.javascript.jscomp.RhinoErrorReporter",
        "src_path": "src/com/google/javascript/jscomp/RhinoErrorReporter.java",
        "signature": "com.google.javascript.jscomp.RhinoErrorReporter.TRAILING_COMMA",
        "snippet": "  static final DiagnosticType TRAILING_COMMA =\n      DiagnosticType.error(\"JSC_TRAILING_COMMA\",\n          \"Parse error. Internet Explorer has a non-standard \" +\n          \"intepretation of trailing commas. Arrays will have the wrong \" +\n          \"length and objects will not parse at all.\");",
        "begin_line": 43,
        "end_line": 47,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.RhinoErrorReporter",
        "src_path": "src/com/google/javascript/jscomp/RhinoErrorReporter.java",
        "signature": "com.google.javascript.jscomp.RhinoErrorReporter.DUPLICATE_PARAM",
        "snippet": "  static final DiagnosticType DUPLICATE_PARAM =\n      DiagnosticType.error(\"JSC_DUPLICATE_PARAM\", \"Parse error. {0}\");",
        "begin_line": 49,
        "end_line": 50,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.RhinoErrorReporter",
        "src_path": "src/com/google/javascript/jscomp/RhinoErrorReporter.java",
        "signature": "com.google.javascript.jscomp.RhinoErrorReporter.BAD_JSDOC_ANNOTATION",
        "snippet": "  static final DiagnosticType BAD_JSDOC_ANNOTATION =\n    DiagnosticType.warning(\"JSC_BAD_JSDOC_ANNOTATION\", \"Parse error. {0}\");",
        "begin_line": 52,
        "end_line": 53,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.RhinoErrorReporter",
        "src_path": "src/com/google/javascript/jscomp/RhinoErrorReporter.java",
        "signature": "com.google.javascript.jscomp.RhinoErrorReporter.typeMap",
        "snippet": "  private final Map<String, DiagnosticType> typeMap;",
        "begin_line": 56,
        "end_line": 56,
        "comment": " A map of Rhino messages to their DiagnosticType."
    },
    {
        "class_name": "com.google.javascript.jscomp.RhinoErrorReporter",
        "src_path": "src/com/google/javascript/jscomp/RhinoErrorReporter.java",
        "signature": "com.google.javascript.jscomp.RhinoErrorReporter.compiler",
        "snippet": "  private final AbstractCompiler compiler;",
        "begin_line": 58,
        "end_line": 58,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.UnionType",
        "src_path": "src/com/google/javascript/rhino/jstype/UnionType.java",
        "signature": "com.google.javascript.rhino.jstype.UnionType.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 1L;",
        "begin_line": 67,
        "end_line": 67,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.UnionType",
        "src_path": "src/com/google/javascript/rhino/jstype/UnionType.java",
        "signature": "com.google.javascript.rhino.jstype.UnionType.alternates",
        "snippet": "  Set<JSType> alternates;",
        "begin_line": 69,
        "end_line": 69,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.UnionType",
        "src_path": "src/com/google/javascript/rhino/jstype/UnionType.java",
        "signature": "com.google.javascript.rhino.jstype.UnionType.hashcode",
        "snippet": "  private final int hashcode;",
        "begin_line": 70,
        "end_line": 70,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.BooleanType",
        "src_path": "src/com/google/javascript/rhino/jstype/BooleanType.java",
        "signature": "com.google.javascript.rhino.jstype.BooleanType.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 1L;",
        "begin_line": 51,
        "end_line": 51,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.VariableMap",
        "src_path": "src/com/google/javascript/jscomp/VariableMap.java",
        "signature": "com.google.javascript.jscomp.VariableMap.map",
        "snippet": "  private final Map<String, String> map;",
        "begin_line": 36,
        "end_line": 36,
        "comment": " Maps original source name to new name "
    },
    {
        "class_name": "com.google.javascript.jscomp.VariableMap",
        "src_path": "src/com/google/javascript/jscomp/VariableMap.java",
        "signature": "com.google.javascript.jscomp.VariableMap.reverseMap",
        "snippet": "  private Map<String, String> reverseMap = null;",
        "begin_line": 39,
        "end_line": 39,
        "comment": " Maps new name to source name, lazily initialized "
    },
    {
        "class_name": "com.google.javascript.jscomp.VariableMap",
        "src_path": "src/com/google/javascript/jscomp/VariableMap.java",
        "signature": "com.google.javascript.jscomp.VariableMap.SEPARATOR",
        "snippet": "  private static final char SEPARATOR = ':';",
        "begin_line": 41,
        "end_line": 41,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.FunctionParamBuilder",
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionParamBuilder.java",
        "signature": "com.google.javascript.rhino.jstype.FunctionParamBuilder.registry",
        "snippet": "  private final JSTypeRegistry registry;",
        "begin_line": 51,
        "end_line": 51,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.FunctionParamBuilder",
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionParamBuilder.java",
        "signature": "com.google.javascript.rhino.jstype.FunctionParamBuilder.root",
        "snippet": "  private final Node root = new Node(Token.LP);",
        "begin_line": 52,
        "end_line": 52,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.GoogleCodeRemoval",
        "src_path": "src/com/google/javascript/jscomp/GoogleCodeRemoval.java",
        "signature": "com.google.javascript.jscomp.GoogleCodeRemoval.compiler",
        "snippet": "  private final AbstractCompiler compiler;",
        "begin_line": 42,
        "end_line": 42,
        "comment": " Reference to the JS compiler "
    },
    {
        "class_name": "com.google.javascript.jscomp.GoogleCodeRemoval",
        "src_path": "src/com/google/javascript/jscomp/GoogleCodeRemoval.java",
        "signature": "com.google.javascript.jscomp.GoogleCodeRemoval.ABSTRACT_METHOD_NAME",
        "snippet": "  static final String ABSTRACT_METHOD_NAME = \"goog.abstractMethod\";",
        "begin_line": 45,
        "end_line": 45,
        "comment": " Name used to denote an abstract function "
    },
    {
        "class_name": "com.google.javascript.jscomp.GoogleCodeRemoval",
        "src_path": "src/com/google/javascript/jscomp/GoogleCodeRemoval.java",
        "signature": "com.google.javascript.jscomp.GoogleCodeRemoval.abstractMethodAssignmentNodes",
        "snippet": "  private final List<RemovableAssignment> abstractMethodAssignmentNodes =\n      Lists.newArrayList();",
        "begin_line": 51,
        "end_line": 52,
        "comment": "\n   * List of names referenced in successive generations of finding referenced\n   * nodes\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.RemovableAssignment",
        "src_path": "src/com/google/javascript/jscomp/GoogleCodeRemoval.java",
        "signature": "com.google.javascript.jscomp.RemovableAssignment.node",
        "snippet": "    final Node node;",
        "begin_line": 62,
        "end_line": 62,
        "comment": "\n     * The node\n     "
    },
    {
        "class_name": "com.google.javascript.jscomp.RemovableAssignment",
        "src_path": "src/com/google/javascript/jscomp/GoogleCodeRemoval.java",
        "signature": "com.google.javascript.jscomp.RemovableAssignment.parent",
        "snippet": "    final Node parent;",
        "begin_line": 67,
        "end_line": 67,
        "comment": "\n     * Its parent\n     "
    },
    {
        "class_name": "com.google.javascript.jscomp.RemovableAssignment",
        "src_path": "src/com/google/javascript/jscomp/GoogleCodeRemoval.java",
        "signature": "com.google.javascript.jscomp.RemovableAssignment.assignAncestors",
        "snippet": "    final List<Node> assignAncestors = Lists.newArrayList();",
        "begin_line": 72,
        "end_line": 72,
        "comment": "\n     * Full chain of ASSIGN ancestors\n     "
    },
    {
        "class_name": "com.google.javascript.jscomp.RemovableAssignment",
        "src_path": "src/com/google/javascript/jscomp/GoogleCodeRemoval.java",
        "signature": "com.google.javascript.jscomp.RemovableAssignment.lastAncestor",
        "snippet": "    final Node lastAncestor;",
        "begin_line": 77,
        "end_line": 77,
        "comment": "\n     * The last ancestor\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.ArrowType",
        "src_path": "src/com/google/javascript/rhino/jstype/ArrowType.java",
        "signature": "com.google.javascript.rhino.jstype.ArrowType.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 1L;",
        "begin_line": 54,
        "end_line": 54,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.ArrowType",
        "src_path": "src/com/google/javascript/rhino/jstype/ArrowType.java",
        "signature": "com.google.javascript.rhino.jstype.ArrowType.parameters",
        "snippet": "  final Node parameters;",
        "begin_line": 56,
        "end_line": 56,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.ArrowType",
        "src_path": "src/com/google/javascript/rhino/jstype/ArrowType.java",
        "signature": "com.google.javascript.rhino.jstype.ArrowType.returnType",
        "snippet": "  JSType returnType;",
        "begin_line": 57,
        "end_line": 57,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DiagnosticType",
        "src_path": "src/com/google/javascript/jscomp/DiagnosticType.java",
        "signature": "com.google.javascript.jscomp.DiagnosticType.key",
        "snippet": "  public final String key;",
        "begin_line": 32,
        "end_line": 32,
        "comment": "\n   * The error type. Used as the BugPattern and BugInstance types by\n   * BugBot's XML\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.DiagnosticType",
        "src_path": "src/com/google/javascript/jscomp/DiagnosticType.java",
        "signature": "com.google.javascript.jscomp.DiagnosticType.format",
        "snippet": "  public final MessageFormat format;",
        "begin_line": 35,
        "end_line": 35,
        "comment": " The default way to format errors "
    },
    {
        "class_name": "com.google.javascript.jscomp.DiagnosticType",
        "src_path": "src/com/google/javascript/jscomp/DiagnosticType.java",
        "signature": "com.google.javascript.jscomp.DiagnosticType.defaultLevel",
        "snippet": "  public final CheckLevel defaultLevel;",
        "begin_line": 38,
        "end_line": 38,
        "comment": " Default level "
    },
    {
        "class_name": "com.google.javascript.jscomp.DiagnosticType",
        "src_path": "src/com/google/javascript/jscomp/DiagnosticType.java",
        "signature": "com.google.javascript.jscomp.DiagnosticType.level",
        "snippet": "  public CheckLevel level;",
        "begin_line": 41,
        "end_line": 41,
        "comment": " Reporting level, initially the defaultLevel but may be changed. "
    },
    {
        "class_name": "com.google.javascript.jscomp.OptimizeArgumentsArray",
        "src_path": "src/com/google/javascript/jscomp/OptimizeArgumentsArray.java",
        "signature": "com.google.javascript.jscomp.OptimizeArgumentsArray.ARGUMENTS",
        "snippet": "  private static final String ARGUMENTS = \"arguments\";",
        "begin_line": 50,
        "end_line": 50,
        "comment": " section 10.1.8"
    },
    {
        "class_name": "com.google.javascript.jscomp.OptimizeArgumentsArray",
        "src_path": "src/com/google/javascript/jscomp/OptimizeArgumentsArray.java",
        "signature": "com.google.javascript.jscomp.OptimizeArgumentsArray.PARAMETER_PREFIX",
        "snippet": "  private static final String PARAMETER_PREFIX =\n      \"JSCompiler_OptimizeArgumentsArray_p\";",
        "begin_line": 54,
        "end_line": 55,
        "comment": " use this string as prefix unless the caller specify a different prefix."
    },
    {
        "class_name": "com.google.javascript.jscomp.OptimizeArgumentsArray",
        "src_path": "src/com/google/javascript/jscomp/OptimizeArgumentsArray.java",
        "signature": "com.google.javascript.jscomp.OptimizeArgumentsArray.paramPredix",
        "snippet": "  private final String paramPredix;",
        "begin_line": 58,
        "end_line": 58,
        "comment": " The prefix for the newly introduced parameter name."
    },
    {
        "class_name": "com.google.javascript.jscomp.OptimizeArgumentsArray",
        "src_path": "src/com/google/javascript/jscomp/OptimizeArgumentsArray.java",
        "signature": "com.google.javascript.jscomp.OptimizeArgumentsArray.uniqueId",
        "snippet": "  private int uniqueId = 0;",
        "begin_line": 62,
        "end_line": 62,
        "comment": " unique integer at the end."
    },
    {
        "class_name": "com.google.javascript.jscomp.OptimizeArgumentsArray",
        "src_path": "src/com/google/javascript/jscomp/OptimizeArgumentsArray.java",
        "signature": "com.google.javascript.jscomp.OptimizeArgumentsArray.compiler",
        "snippet": "  private final AbstractCompiler compiler;",
        "begin_line": 65,
        "end_line": 65,
        "comment": " Reference to the compiler object to notify any changes to source code AST."
    },
    {
        "class_name": "com.google.javascript.jscomp.OptimizeArgumentsArray",
        "src_path": "src/com/google/javascript/jscomp/OptimizeArgumentsArray.java",
        "signature": "com.google.javascript.jscomp.OptimizeArgumentsArray.argumentsAccessStack",
        "snippet": "  private final Deque<List<Node>> argumentsAccessStack = Lists.newLinkedList();",
        "begin_line": 68,
        "end_line": 68,
        "comment": " A stack of arguments access list to the corresponding outer functions."
    },
    {
        "class_name": "com.google.javascript.jscomp.OptimizeArgumentsArray",
        "src_path": "src/com/google/javascript/jscomp/OptimizeArgumentsArray.java",
        "signature": "com.google.javascript.jscomp.OptimizeArgumentsArray.currentArgumentsAccess",
        "snippet": "  private List<Node> currentArgumentsAccess = null;",
        "begin_line": 71,
        "end_line": 71,
        "comment": " This stores a list of argument access in the current scope."
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.ObjectType",
        "src_path": "src/com/google/javascript/rhino/jstype/ObjectType.java",
        "signature": "com.google.javascript.rhino.jstype.ObjectType.visited",
        "snippet": "  private boolean visited;",
        "begin_line": 84,
        "end_line": 84,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.ObjectType",
        "src_path": "src/com/google/javascript/rhino/jstype/ObjectType.java",
        "signature": "com.google.javascript.rhino.jstype.ObjectType.docInfo",
        "snippet": "  private JSDocInfo docInfo = null;",
        "begin_line": 85,
        "end_line": 85,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.ObjectType",
        "src_path": "src/com/google/javascript/rhino/jstype/ObjectType.java",
        "signature": "com.google.javascript.rhino.jstype.ObjectType.unknown",
        "snippet": "  private boolean unknown = true;",
        "begin_line": 86,
        "end_line": 86,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.ScriptRuntime",
        "src_path": "src/com/google/javascript/rhino/ScriptRuntime.java",
        "signature": "com.google.javascript.rhino.ScriptRuntime.NaN",
        "snippet": "    public static final double\n        NaN = Double.longBitsToDouble(0x7ff8000000000000L);",
        "begin_line": 82,
        "end_line": 83,
        "comment": " So we use ScriptRuntime.NaN instead of Double.NaN."
    },
    {
        "class_name": "com.google.javascript.rhino.ScriptRuntime",
        "src_path": "src/com/google/javascript/rhino/ScriptRuntime.java",
        "signature": "com.google.javascript.rhino.ScriptRuntime.negativeZero",
        "snippet": "    public static final double\n        negativeZero = Double.longBitsToDouble(0x8000000000000000L);",
        "begin_line": 86,
        "end_line": 87,
        "comment": " A similar problem exists for negative zero."
    },
    {
        "class_name": "com.google.javascript.rhino.ScriptRuntime",
        "src_path": "src/com/google/javascript/rhino/ScriptRuntime.java",
        "signature": "com.google.javascript.rhino.ScriptRuntime.NaNobj",
        "snippet": "    public static final Double NaNobj = new Double(NaN);",
        "begin_line": 89,
        "end_line": 89,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.ScriptRuntime",
        "src_path": "src/com/google/javascript/rhino/ScriptRuntime.java",
        "signature": "com.google.javascript.rhino.ScriptRuntime.emptyArgs",
        "snippet": "    public static final Object[] emptyArgs = new Object[0];",
        "begin_line": 609,
        "end_line": 609,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.ScriptRuntime",
        "src_path": "src/com/google/javascript/rhino/ScriptRuntime.java",
        "signature": "com.google.javascript.rhino.ScriptRuntime.emptyStrings",
        "snippet": "    public static final String[] emptyStrings = new String[0];",
        "begin_line": 610,
        "end_line": 610,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeValidator",
        "src_path": "src/com/google/javascript/jscomp/TypeValidator.java",
        "signature": "com.google.javascript.jscomp.TypeValidator.compiler",
        "snippet": "  private final AbstractCompiler compiler;",
        "begin_line": 59,
        "end_line": 59,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeValidator",
        "src_path": "src/com/google/javascript/jscomp/TypeValidator.java",
        "signature": "com.google.javascript.jscomp.TypeValidator.typeRegistry",
        "snippet": "  private final JSTypeRegistry typeRegistry;",
        "begin_line": 60,
        "end_line": 60,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeValidator",
        "src_path": "src/com/google/javascript/jscomp/TypeValidator.java",
        "signature": "com.google.javascript.jscomp.TypeValidator.allValueTypes",
        "snippet": "  private final JSType allValueTypes;",
        "begin_line": 61,
        "end_line": 61,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeValidator",
        "src_path": "src/com/google/javascript/jscomp/TypeValidator.java",
        "signature": "com.google.javascript.jscomp.TypeValidator.mismatches",
        "snippet": "  private final List<TypeMismatch> mismatches = Lists.newArrayList();",
        "begin_line": 66,
        "end_line": 66,
        "comment": " allowed, that doesn't mean we should invalidate all Cakes."
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeValidator",
        "src_path": "src/com/google/javascript/jscomp/TypeValidator.java",
        "signature": "com.google.javascript.jscomp.TypeValidator.FOUND_REQUIRED",
        "snippet": "  private static final String FOUND_REQUIRED =\n      \"{0}\\n\" +\n      \"found   : {1}\\n\" +\n      \"required: {2}\";",
        "begin_line": 69,
        "end_line": 72,
        "comment": " User warnings"
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeValidator",
        "src_path": "src/com/google/javascript/jscomp/TypeValidator.java",
        "signature": "com.google.javascript.jscomp.TypeValidator.INVALID_CAST",
        "snippet": "  static final DiagnosticType INVALID_CAST =\n      DiagnosticType.warning(\"JSC_INVALID_CAST\",\n          \"invalid cast - must be a subtype or supertype\\n\" +\n          \"from: {0}\\n\" +\n          \"to  : {1}\");",
        "begin_line": 74,
        "end_line": 78,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeValidator",
        "src_path": "src/com/google/javascript/jscomp/TypeValidator.java",
        "signature": "com.google.javascript.jscomp.TypeValidator.TYPE_MISMATCH_WARNING",
        "snippet": "  static final DiagnosticType TYPE_MISMATCH_WARNING =\n      DiagnosticType.warning(\n          \"JSC_TYPE_MISMATCH\",\n          \"{0}\");",
        "begin_line": 80,
        "end_line": 83,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeValidator",
        "src_path": "src/com/google/javascript/jscomp/TypeValidator.java",
        "signature": "com.google.javascript.jscomp.TypeValidator.MISSING_EXTENDS_TAG_WARNING",
        "snippet": "  static final DiagnosticType MISSING_EXTENDS_TAG_WARNING =\n      DiagnosticType.warning(\n          \"JSC_MISSING_EXTENDS_TAG\",\n          \"Missing @extends tag on type {0}\");",
        "begin_line": 85,
        "end_line": 88,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeValidator",
        "src_path": "src/com/google/javascript/jscomp/TypeValidator.java",
        "signature": "com.google.javascript.jscomp.TypeValidator.DUP_VAR_DECLARATION",
        "snippet": "  static final DiagnosticType DUP_VAR_DECLARATION =\n      DiagnosticType.warning(\"JSC_DUP_VAR_DECLARATION\",\n          \"variable {0} redefined with type {1}, \" +\n          \"original definition at {2}:{3} with type {4}\");",
        "begin_line": 90,
        "end_line": 93,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeValidator",
        "src_path": "src/com/google/javascript/jscomp/TypeValidator.java",
        "signature": "com.google.javascript.jscomp.TypeValidator.HIDDEN_PROPERTY_MISMATCH",
        "snippet": "  static final DiagnosticType HIDDEN_PROPERTY_MISMATCH =\n      DiagnosticType.warning(\"JSC_HIDDEN_PROPERTY_MISMATCH\",\n          \"mismatch of the {0} property type and the type \" +\n          \"of the property it overrides from superclass {1}\\n\" +\n          \"original: {2}\\n\" +\n          \"override: {3}\");",
        "begin_line": 95,
        "end_line": 100,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeValidator",
        "src_path": "src/com/google/javascript/jscomp/TypeValidator.java",
        "signature": "com.google.javascript.jscomp.TypeValidator.INTERFACE_METHOD_NOT_IMPLEMENTED",
        "snippet": "  static final DiagnosticType INTERFACE_METHOD_NOT_IMPLEMENTED =\n      DiagnosticType.warning(\n          \"JSC_INTERFACE_METHOD_NOT_IMPLEMENTED\",\n          \"property {0} on interface {1} is not implemented by type {2}\");",
        "begin_line": 102,
        "end_line": 105,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeValidator",
        "src_path": "src/com/google/javascript/jscomp/TypeValidator.java",
        "signature": "com.google.javascript.jscomp.TypeValidator.ALL_DIAGNOSTICS",
        "snippet": "  static final DiagnosticGroup ALL_DIAGNOSTICS = new DiagnosticGroup(\n      INVALID_CAST,\n      TYPE_MISMATCH_WARNING,\n      MISSING_EXTENDS_TAG_WARNING,\n      DUP_VAR_DECLARATION,\n      HIDDEN_PROPERTY_MISMATCH,\n      INTERFACE_METHOD_NOT_IMPLEMENTED);",
        "begin_line": 107,
        "end_line": 113,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeMismatch",
        "src_path": "src/com/google/javascript/jscomp/TypeValidator.java",
        "signature": "com.google.javascript.jscomp.TypeMismatch.typeA",
        "snippet": "    final JSType typeA;",
        "begin_line": 679,
        "end_line": 679,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeMismatch",
        "src_path": "src/com/google/javascript/jscomp/TypeValidator.java",
        "signature": "com.google.javascript.jscomp.TypeMismatch.typeB",
        "snippet": "    final JSType typeB;",
        "begin_line": 680,
        "end_line": 680,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CodeConsumer",
        "src_path": "src/com/google/javascript/jscomp/CodeConsumer.java",
        "signature": "com.google.javascript.jscomp.CodeConsumer.statementNeedsEnded",
        "snippet": "  boolean statementNeedsEnded = false;",
        "begin_line": 33,
        "end_line": 33,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CodeConsumer",
        "src_path": "src/com/google/javascript/jscomp/CodeConsumer.java",
        "signature": "com.google.javascript.jscomp.CodeConsumer.statementStarted",
        "snippet": "  boolean statementStarted = false;",
        "begin_line": 34,
        "end_line": 34,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CodeConsumer",
        "src_path": "src/com/google/javascript/jscomp/CodeConsumer.java",
        "signature": "com.google.javascript.jscomp.CodeConsumer.sawFunction",
        "snippet": "  boolean sawFunction = false;",
        "begin_line": 35,
        "end_line": 35,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ReplaceCssNames",
        "src_path": "src/com/google/javascript/jscomp/ReplaceCssNames.java",
        "signature": "com.google.javascript.jscomp.ReplaceCssNames.GET_CSS_NAME_FUNCTION",
        "snippet": "  static final String GET_CSS_NAME_FUNCTION = \"goog.getCssName\";",
        "begin_line": 60,
        "end_line": 60,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ReplaceCssNames",
        "src_path": "src/com/google/javascript/jscomp/ReplaceCssNames.java",
        "signature": "com.google.javascript.jscomp.ReplaceCssNames.INVALID_NUM_ARGUMENTS_ERROR",
        "snippet": "  static final DiagnosticType INVALID_NUM_ARGUMENTS_ERROR =\n      DiagnosticType.error(\"JSC_GETCSSNAME_NUM_ARGS\",\n          \"goog.getCssName called with \\\"{0}\\\" arguments, expected 1 or 2.\");",
        "begin_line": 62,
        "end_line": 64,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ReplaceCssNames",
        "src_path": "src/com/google/javascript/jscomp/ReplaceCssNames.java",
        "signature": "com.google.javascript.jscomp.ReplaceCssNames.STRING_LITERAL_EXPECTED_ERROR",
        "snippet": "  static final DiagnosticType STRING_LITERAL_EXPECTED_ERROR =\n      DiagnosticType.error(\"JSC_GETCSSNAME_STRING_LITERAL_EXPECTED\",\n          \"goog.getCssName called with invalid argument, string literal \" +\n          \"expected.  Was \\\"{0}\\\".\");",
        "begin_line": 66,
        "end_line": 69,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ReplaceCssNames",
        "src_path": "src/com/google/javascript/jscomp/ReplaceCssNames.java",
        "signature": "com.google.javascript.jscomp.ReplaceCssNames.UNEXPECTED_STRING_LITERAL_ERROR",
        "snippet": "  static final DiagnosticType UNEXPECTED_STRING_LITERAL_ERROR =\n    DiagnosticType.error(\"JSC_GETCSSNAME_UNEXPECTED_STRING_LITERAL\",\n        \"goog.getCssName called with invalid arguments, string literal \" +\n        \"passed as first of two arguments.  Did you mean \" +\n        \"goog.getCssName(\\\"{0}-{1}\\\")?\");",
        "begin_line": 71,
        "end_line": 75,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ReplaceCssNames",
        "src_path": "src/com/google/javascript/jscomp/ReplaceCssNames.java",
        "signature": "com.google.javascript.jscomp.ReplaceCssNames.UNKNOWN_SYMBOL_WARNING",
        "snippet": "  static final DiagnosticType UNKNOWN_SYMBOL_WARNING =\n      DiagnosticType.warning(\"JSC_GETCSSNAME_UNKNOWN_CSS_SYMBOL\",\n         \"goog.getCssName called with unrecognized symbol \\\"{0}\\\" in class \" +\n         \"\\\"{1}\\\".\");",
        "begin_line": 77,
        "end_line": 80,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ReplaceCssNames",
        "src_path": "src/com/google/javascript/jscomp/ReplaceCssNames.java",
        "signature": "com.google.javascript.jscomp.ReplaceCssNames.compiler",
        "snippet": "  private final AbstractCompiler compiler;",
        "begin_line": 83,
        "end_line": 83,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ReplaceCssNames",
        "src_path": "src/com/google/javascript/jscomp/ReplaceCssNames.java",
        "signature": "com.google.javascript.jscomp.ReplaceCssNames.cssNames",
        "snippet": "  private final Map<String, Integer> cssNames;",
        "begin_line": 85,
        "end_line": 85,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ReplaceCssNames",
        "src_path": "src/com/google/javascript/jscomp/ReplaceCssNames.java",
        "signature": "com.google.javascript.jscomp.ReplaceCssNames.symbolMap",
        "snippet": "  private CssRenamingMap symbolMap;",
        "begin_line": 87,
        "end_line": 87,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.NullType",
        "src_path": "src/com/google/javascript/rhino/jstype/NullType.java",
        "signature": "com.google.javascript.rhino.jstype.NullType.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 1L;",
        "begin_line": 52,
        "end_line": 52,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.TokenStream",
        "src_path": "src/com/google/javascript/rhino/TokenStream.java",
        "signature": "com.google.javascript.rhino.TokenStream.EOF_CHAR",
        "snippet": "    private final static int\n        EOF_CHAR = -1;",
        "begin_line": 70,
        "end_line": 71,
        "comment": "\n     * For chars - because we need something out-of-range\n     * to check.  (And checking EOF by exception is annoying.)\n     * Note distinction from EOF token type!\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.TokenStream",
        "src_path": "src/com/google/javascript/rhino/TokenStream.java",
        "signature": "com.google.javascript.rhino.TokenStream.dirtyLine",
        "snippet": "    private boolean dirtyLine;",
        "begin_line": 1655,
        "end_line": 1655,
        "comment": " stuff other than whitespace since start of line"
    },
    {
        "class_name": "com.google.javascript.rhino.TokenStream",
        "src_path": "src/com/google/javascript/rhino/TokenStream.java",
        "signature": "com.google.javascript.rhino.TokenStream.regExpFlags",
        "snippet": "    String regExpFlags;",
        "begin_line": 1657,
        "end_line": 1657,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.TokenStream",
        "src_path": "src/com/google/javascript/rhino/TokenStream.java",
        "signature": "com.google.javascript.rhino.TokenStream.pushbackToken",
        "snippet": "    private int pushbackToken;",
        "begin_line": 1659,
        "end_line": 1659,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.TokenStream",
        "src_path": "src/com/google/javascript/rhino/TokenStream.java",
        "signature": "com.google.javascript.rhino.TokenStream.tokenno",
        "snippet": "    private int tokenno;",
        "begin_line": 1660,
        "end_line": 1660,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.TokenStream",
        "src_path": "src/com/google/javascript/rhino/TokenStream.java",
        "signature": "com.google.javascript.rhino.TokenStream.string",
        "snippet": "    private String string = \"\";",
        "begin_line": 1666,
        "end_line": 1666,
        "comment": " code."
    },
    {
        "class_name": "com.google.javascript.rhino.TokenStream",
        "src_path": "src/com/google/javascript/rhino/TokenStream.java",
        "signature": "com.google.javascript.rhino.TokenStream.number",
        "snippet": "    private double number;",
        "begin_line": 1667,
        "end_line": 1667,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.TokenStream",
        "src_path": "src/com/google/javascript/rhino/TokenStream.java",
        "signature": "com.google.javascript.rhino.TokenStream.stringBuffer",
        "snippet": "    private char[] stringBuffer = new char[128];",
        "begin_line": 1669,
        "end_line": 1669,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.TokenStream",
        "src_path": "src/com/google/javascript/rhino/TokenStream.java",
        "signature": "com.google.javascript.rhino.TokenStream.stringBufferTop",
        "snippet": "    private int stringBufferTop;",
        "begin_line": 1670,
        "end_line": 1670,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.TokenStream",
        "src_path": "src/com/google/javascript/rhino/TokenStream.java",
        "signature": "com.google.javascript.rhino.TokenStream.allStrings",
        "snippet": "    private ObjToIntMap allStrings = new ObjToIntMap(50);",
        "begin_line": 1671,
        "end_line": 1671,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.TokenStream",
        "src_path": "src/com/google/javascript/rhino/TokenStream.java",
        "signature": "com.google.javascript.rhino.TokenStream.ungetBuffer",
        "snippet": "    private final int[] ungetBuffer = new int[3];",
        "begin_line": 1674,
        "end_line": 1674,
        "comment": " Room to backtrace from to < on failed match of the last - in <!--"
    },
    {
        "class_name": "com.google.javascript.rhino.TokenStream",
        "src_path": "src/com/google/javascript/rhino/TokenStream.java",
        "signature": "com.google.javascript.rhino.TokenStream.ungetCursor",
        "snippet": "    private int ungetCursor;",
        "begin_line": 1675,
        "end_line": 1675,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.TokenStream",
        "src_path": "src/com/google/javascript/rhino/TokenStream.java",
        "signature": "com.google.javascript.rhino.TokenStream.hitEOF",
        "snippet": "    private boolean hitEOF = false;",
        "begin_line": 1677,
        "end_line": 1677,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.TokenStream",
        "src_path": "src/com/google/javascript/rhino/TokenStream.java",
        "signature": "com.google.javascript.rhino.TokenStream.lineStart",
        "snippet": "    private int lineStart = 0;",
        "begin_line": 1679,
        "end_line": 1679,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.TokenStream",
        "src_path": "src/com/google/javascript/rhino/TokenStream.java",
        "signature": "com.google.javascript.rhino.TokenStream.lineno",
        "snippet": "    private int lineno;",
        "begin_line": 1680,
        "end_line": 1680,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.TokenStream",
        "src_path": "src/com/google/javascript/rhino/TokenStream.java",
        "signature": "com.google.javascript.rhino.TokenStream.charno",
        "snippet": "    private int charno = -1;",
        "begin_line": 1681,
        "end_line": 1681,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.TokenStream",
        "src_path": "src/com/google/javascript/rhino/TokenStream.java",
        "signature": "com.google.javascript.rhino.TokenStream.lineEndChar",
        "snippet": "    private int lineEndChar = -1;",
        "begin_line": 1682,
        "end_line": 1682,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.TokenStream",
        "src_path": "src/com/google/javascript/rhino/TokenStream.java",
        "signature": "com.google.javascript.rhino.TokenStream.sourceString",
        "snippet": "    private String sourceString;",
        "begin_line": 1684,
        "end_line": 1684,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.TokenStream",
        "src_path": "src/com/google/javascript/rhino/TokenStream.java",
        "signature": "com.google.javascript.rhino.TokenStream.sourceReader",
        "snippet": "    private Reader sourceReader;",
        "begin_line": 1685,
        "end_line": 1685,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.TokenStream",
        "src_path": "src/com/google/javascript/rhino/TokenStream.java",
        "signature": "com.google.javascript.rhino.TokenStream.sourceBuffer",
        "snippet": "    private char[] sourceBuffer;",
        "begin_line": 1686,
        "end_line": 1686,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.TokenStream",
        "src_path": "src/com/google/javascript/rhino/TokenStream.java",
        "signature": "com.google.javascript.rhino.TokenStream.sourceEnd",
        "snippet": "    private int sourceEnd;",
        "begin_line": 1687,
        "end_line": 1687,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.TokenStream",
        "src_path": "src/com/google/javascript/rhino/TokenStream.java",
        "signature": "com.google.javascript.rhino.TokenStream.sourceCursor",
        "snippet": "    private int sourceCursor;",
        "begin_line": 1688,
        "end_line": 1688,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.TokenStream",
        "src_path": "src/com/google/javascript/rhino/TokenStream.java",
        "signature": "com.google.javascript.rhino.TokenStream.xmlIsAttribute",
        "snippet": "    private boolean xmlIsAttribute;",
        "begin_line": 1691,
        "end_line": 1691,
        "comment": " for xml tokenizer"
    },
    {
        "class_name": "com.google.javascript.rhino.TokenStream",
        "src_path": "src/com/google/javascript/rhino/TokenStream.java",
        "signature": "com.google.javascript.rhino.TokenStream.xmlIsTagContent",
        "snippet": "    private boolean xmlIsTagContent;",
        "begin_line": 1692,
        "end_line": 1692,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.TokenStream",
        "src_path": "src/com/google/javascript/rhino/TokenStream.java",
        "signature": "com.google.javascript.rhino.TokenStream.xmlOpenTagsCount",
        "snippet": "    private int xmlOpenTagsCount;",
        "begin_line": 1693,
        "end_line": 1693,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.TokenStream",
        "src_path": "src/com/google/javascript/rhino/TokenStream.java",
        "signature": "com.google.javascript.rhino.TokenStream.parser",
        "snippet": "    private Parser parser;",
        "begin_line": 1695,
        "end_line": 1695,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.RenameVars",
        "src_path": "src/com/google/javascript/jscomp/RenameVars.java",
        "signature": "com.google.javascript.jscomp.RenameVars.compiler",
        "snippet": "  private final AbstractCompiler compiler;",
        "begin_line": 37,
        "end_line": 37,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.RenameVars",
        "src_path": "src/com/google/javascript/jscomp/RenameVars.java",
        "signature": "com.google.javascript.jscomp.RenameVars.globalNameNodes",
        "snippet": "  private final ArrayList<Node> globalNameNodes = new ArrayList<Node>();",
        "begin_line": 40,
        "end_line": 40,
        "comment": " List of global NAME nodes "
    },
    {
        "class_name": "com.google.javascript.jscomp.RenameVars",
        "src_path": "src/com/google/javascript/jscomp/RenameVars.java",
        "signature": "com.google.javascript.jscomp.RenameVars.localNameNodes",
        "snippet": "  private final ArrayList<Node> localNameNodes = new ArrayList<Node>();",
        "begin_line": 43,
        "end_line": 43,
        "comment": " List of local NAME nodes "
    },
    {
        "class_name": "com.google.javascript.jscomp.RenameVars",
        "src_path": "src/com/google/javascript/jscomp/RenameVars.java",
        "signature": "com.google.javascript.jscomp.RenameVars.localTempNames",
        "snippet": "  private final ArrayList<String> localTempNames = new ArrayList<String>();",
        "begin_line": 46,
        "end_line": 46,
        "comment": " List of local names that corresponds to the localNameNodes "
    },
    {
        "class_name": "com.google.javascript.jscomp.RenameVars",
        "src_path": "src/com/google/javascript/jscomp/RenameVars.java",
        "signature": "com.google.javascript.jscomp.RenameVars.externNames",
        "snippet": "  private final Set<String> externNames = new HashSet<String>();",
        "begin_line": 49,
        "end_line": 49,
        "comment": " Set of extern variable names "
    },
    {
        "class_name": "com.google.javascript.jscomp.RenameVars",
        "src_path": "src/com/google/javascript/jscomp/RenameVars.java",
        "signature": "com.google.javascript.jscomp.RenameVars.reservedNames",
        "snippet": "  private final Set<String> reservedNames;",
        "begin_line": 52,
        "end_line": 52,
        "comment": " Set of reserved variable names "
    },
    {
        "class_name": "com.google.javascript.jscomp.RenameVars",
        "src_path": "src/com/google/javascript/jscomp/RenameVars.java",
        "signature": "com.google.javascript.jscomp.RenameVars.renameMap",
        "snippet": "  private final Map<String, String> renameMap = new HashMap<String, String>();",
        "begin_line": 55,
        "end_line": 55,
        "comment": " The renaming map "
    },
    {
        "class_name": "com.google.javascript.jscomp.RenameVars",
        "src_path": "src/com/google/javascript/jscomp/RenameVars.java",
        "signature": "com.google.javascript.jscomp.RenameVars.prevUsedRenameMap",
        "snippet": "  private final VariableMap prevUsedRenameMap;",
        "begin_line": 58,
        "end_line": 58,
        "comment": " The previously used rename map. "
    },
    {
        "class_name": "com.google.javascript.jscomp.RenameVars",
        "src_path": "src/com/google/javascript/jscomp/RenameVars.java",
        "signature": "com.google.javascript.jscomp.RenameVars.prefix",
        "snippet": "  private final String prefix;",
        "begin_line": 61,
        "end_line": 61,
        "comment": " The global name prefix "
    },
    {
        "class_name": "com.google.javascript.jscomp.RenameVars",
        "src_path": "src/com/google/javascript/jscomp/RenameVars.java",
        "signature": "com.google.javascript.jscomp.RenameVars.assignmentCount",
        "snippet": "  private int assignmentCount = 0;",
        "begin_line": 64,
        "end_line": 64,
        "comment": " Counter for each assignment "
    },
    {
        "class_name": "com.google.javascript.jscomp.RenameVars",
        "src_path": "src/com/google/javascript/jscomp/RenameVars.java",
        "signature": "com.google.javascript.jscomp.RenameVars.assignmentLog",
        "snippet": "  private StringBuilder assignmentLog;",
        "begin_line": 67,
        "end_line": 67,
        "comment": " Logs all name assignments "
    },
    {
        "class_name": "com.google.javascript.jscomp.Assignment",
        "src_path": "src/com/google/javascript/jscomp/RenameVars.java",
        "signature": "com.google.javascript.jscomp.Assignment.input",
        "snippet": "    final CompilerInput input;",
        "begin_line": 70,
        "end_line": 70,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Assignment",
        "src_path": "src/com/google/javascript/jscomp/RenameVars.java",
        "signature": "com.google.javascript.jscomp.Assignment.oldName",
        "snippet": "    final String oldName;",
        "begin_line": 71,
        "end_line": 71,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Assignment",
        "src_path": "src/com/google/javascript/jscomp/RenameVars.java",
        "signature": "com.google.javascript.jscomp.Assignment.orderOfOccurrence",
        "snippet": "    final int orderOfOccurrence;",
        "begin_line": 72,
        "end_line": 72,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Assignment",
        "src_path": "src/com/google/javascript/jscomp/RenameVars.java",
        "signature": "com.google.javascript.jscomp.Assignment.newName",
        "snippet": "    String newName;",
        "begin_line": 73,
        "end_line": 73,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Assignment",
        "src_path": "src/com/google/javascript/jscomp/RenameVars.java",
        "signature": "com.google.javascript.jscomp.Assignment.count",
        "snippet": "    int count;                          // Number of times this is referenced",
        "begin_line": 74,
        "end_line": 74,
        "comment": " Number of times this is referenced"
    },
    {
        "class_name": "com.google.javascript.jscomp.RenameVars",
        "src_path": "src/com/google/javascript/jscomp/RenameVars.java",
        "signature": "com.google.javascript.jscomp.RenameVars.assignments",
        "snippet": "  private final SortedMap<String, Assignment> assignments =\n      new TreeMap<String, Assignment>();",
        "begin_line": 96,
        "end_line": 97,
        "comment": " Maps an old name to a new name assignment "
    },
    {
        "class_name": "com.google.javascript.jscomp.RenameVars",
        "src_path": "src/com/google/javascript/jscomp/RenameVars.java",
        "signature": "com.google.javascript.jscomp.RenameVars.localRenamingOnly",
        "snippet": "  private final boolean localRenamingOnly;",
        "begin_line": 100,
        "end_line": 100,
        "comment": " Whether renaming should apply to local variables only. "
    },
    {
        "class_name": "com.google.javascript.jscomp.RenameVars",
        "src_path": "src/com/google/javascript/jscomp/RenameVars.java",
        "signature": "com.google.javascript.jscomp.RenameVars.preserveAnonymousFunctionNames",
        "snippet": "  private boolean preserveAnonymousFunctionNames;",
        "begin_line": 107,
        "end_line": 107,
        "comment": "\n   * Whether anonymous function names should be preserved. Typically, for\n   * debugging purposes.\n   * @see NameAnonymousFunctions\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.RenameVars",
        "src_path": "src/com/google/javascript/jscomp/RenameVars.java",
        "signature": "com.google.javascript.jscomp.RenameVars.generatePseudoNames",
        "snippet": "  private boolean generatePseudoNames;",
        "begin_line": 110,
        "end_line": 110,
        "comment": " Generate pseudo names for variables for debugging purposes "
    },
    {
        "class_name": "com.google.javascript.jscomp.RenameVars",
        "src_path": "src/com/google/javascript/jscomp/RenameVars.java",
        "signature": "com.google.javascript.jscomp.RenameVars.reservedCharacters",
        "snippet": "  private final char[] reservedCharacters;",
        "begin_line": 113,
        "end_line": 113,
        "comment": " Characters that shouldn't be used in variable names. "
    },
    {
        "class_name": "com.google.javascript.jscomp.RenameVars",
        "src_path": "src/com/google/javascript/jscomp/RenameVars.java",
        "signature": "com.google.javascript.jscomp.RenameVars.LOCAL_VAR_PREFIX",
        "snippet": "  private static final String LOCAL_VAR_PREFIX = \"L \";",
        "begin_line": 116,
        "end_line": 116,
        "comment": " A prefix to distinguish temporary local names from global names "
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessVars",
        "src_path": "src/com/google/javascript/jscomp/RenameVars.java",
        "signature": "com.google.javascript.jscomp.ProcessVars.isExternsPass_",
        "snippet": "    private final boolean isExternsPass_;",
        "begin_line": 164,
        "end_line": 164,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.RenameVars",
        "src_path": "src/com/google/javascript/jscomp/RenameVars.java",
        "signature": "com.google.javascript.jscomp.RenameVars.FREQUENCY_COMPARATOR",
        "snippet": "  private static final Comparator<Assignment> FREQUENCY_COMPARATOR =\n    new Comparator<Assignment>() {\n      public int compare(Assignment a1, Assignment a2) {\n        if (a1.count != a2.count) {\n          return a2.count - a1.count;\n        }\n        // Break a tie using the order in which the variable first appears in\n        // the source.\n        return ORDER_OF_OCCURRENCE_COMPARATOR.compare(a1, a2);\n      }\n    };",
        "begin_line": 252,
        "end_line": 262,
        "comment": "\n   * Sorts Assignment objects by their count, breaking ties by their\n   * order of occurrence in the source to ensure a deterministic total\n   * ordering.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.RenameVars",
        "src_path": "src/com/google/javascript/jscomp/RenameVars.java",
        "signature": "com.google.javascript.jscomp.RenameVars.ORDER_OF_OCCURRENCE_COMPARATOR",
        "snippet": "  private static final Comparator<Assignment> ORDER_OF_OCCURRENCE_COMPARATOR =\n    new Comparator<Assignment>() {\n      public int compare(Assignment a1, Assignment a2) {\n        return a1.orderOfOccurrence - a2.orderOfOccurrence;\n      }\n    };",
        "begin_line": 268,
        "end_line": 273,
        "comment": "\n   * Sorts Assignment objects by the order the variable name first appears in\n   * the source.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.CheckSideEffects",
        "src_path": "src/com/google/javascript/jscomp/CheckSideEffects.java",
        "signature": "com.google.javascript.jscomp.CheckSideEffects.USELESS_CODE_ERROR",
        "snippet": "  static final DiagnosticType USELESS_CODE_ERROR = DiagnosticType.warning(\n      \"JSC_USELESS_CODE\",\n      \"Suspicious code. {0}\");",
        "begin_line": 39,
        "end_line": 41,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CheckSideEffects",
        "src_path": "src/com/google/javascript/jscomp/CheckSideEffects.java",
        "signature": "com.google.javascript.jscomp.CheckSideEffects.level",
        "snippet": "  private final CheckLevel level;",
        "begin_line": 43,
        "end_line": 43,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DiagnosticGroups",
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroups.java",
        "signature": "com.google.javascript.jscomp.DiagnosticGroups.groupsByName",
        "snippet": "  private final static Map<String, DiagnosticGroup> groupsByName =\n      Maps.newHashMap();",
        "begin_line": 33,
        "end_line": 34,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DiagnosticGroups",
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroups.java",
        "signature": "com.google.javascript.jscomp.DiagnosticGroups.DIAGNOSTIC_GROUP_NAMES",
        "snippet": "  static final String DIAGNOSTIC_GROUP_NAMES = \"accessControls, checkVars, \" +\n      \"checkTypes, deprecated, fileoverviewTags, invalidCasts, \" +\n      \"missingProperties, nonStandardJsDocs, strictModuleDepCheck, \" +\n      \"undefinedVars, unknownDefines, visibility\";",
        "begin_line": 50,
        "end_line": 53,
        "comment": " be listed on the command-line as an available option."
    },
    {
        "class_name": "com.google.javascript.jscomp.DiagnosticGroups",
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroups.java",
        "signature": "com.google.javascript.jscomp.DiagnosticGroups.DEPRECATED",
        "snippet": "  public static DiagnosticGroup DEPRECATED = DiagnosticGroups\n      .registerGroup(\"deprecated\",\n          new DiagnosticGroup(\n              CheckAccessControls.DEPRECATED_NAME,\n              CheckAccessControls.DEPRECATED_NAME_REASON,\n              CheckAccessControls.DEPRECATED_PROP,\n              CheckAccessControls.DEPRECATED_PROP_REASON,\n              CheckAccessControls.DEPRECATED_CLASS,\n              CheckAccessControls.DEPRECATED_CLASS_REASON));",
        "begin_line": 55,
        "end_line": 63,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DiagnosticGroups",
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroups.java",
        "signature": "com.google.javascript.jscomp.DiagnosticGroups.VISIBILITY",
        "snippet": "  public static DiagnosticGroup VISIBILITY = DiagnosticGroups\n      .registerGroup(\"visibility\",\n          new DiagnosticGroup(\n              CheckAccessControls.BAD_PRIVATE_GLOBAL_ACCESS,\n              CheckAccessControls.BAD_PRIVATE_PROPERTY_ACCESS,\n              CheckAccessControls.BAD_PROTECTED_PROPERTY_ACCESS,\n              CheckAccessControls.PRIVATE_OVERRIDE,\n              CheckAccessControls.VISIBILITY_MISMATCH));",
        "begin_line": 65,
        "end_line": 72,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DiagnosticGroups",
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroups.java",
        "signature": "com.google.javascript.jscomp.DiagnosticGroups.NON_STANDARD_JSDOC",
        "snippet": "  public static DiagnosticGroup NON_STANDARD_JSDOC =\n    DiagnosticGroups.registerGroup(\"nonStandardJsDocs\",\n          new DiagnosticGroup(RhinoErrorReporter.BAD_JSDOC_ANNOTATION));",
        "begin_line": 74,
        "end_line": 76,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DiagnosticGroups",
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroups.java",
        "signature": "com.google.javascript.jscomp.DiagnosticGroups.ACCESS_CONTROLS",
        "snippet": "  public static DiagnosticGroup ACCESS_CONTROLS =\n      DiagnosticGroups.registerGroup(\"accessControls\",\n          new DiagnosticGroup(DEPRECATED, VISIBILITY));",
        "begin_line": 78,
        "end_line": 80,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DiagnosticGroups",
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroups.java",
        "signature": "com.google.javascript.jscomp.DiagnosticGroups.INVALID_CASTS",
        "snippet": "  public static DiagnosticGroup INVALID_CASTS = DiagnosticGroups\n      .registerGroup(\"invalidCasts\",\n          new DiagnosticGroup(TypeValidator.INVALID_CAST));",
        "begin_line": 82,
        "end_line": 84,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DiagnosticGroups",
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroups.java",
        "signature": "com.google.javascript.jscomp.DiagnosticGroups.FILEOVERVIEW_JSDOC",
        "snippet": "  public static DiagnosticGroup FILEOVERVIEW_JSDOC =\n    DiagnosticGroups.registerGroup(\"fileoverviewTags\",\n          new DiagnosticGroup(RhinoErrorReporter.EXTRA_FILEOVERVIEW));",
        "begin_line": 86,
        "end_line": 88,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DiagnosticGroups",
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroups.java",
        "signature": "com.google.javascript.jscomp.DiagnosticGroups.STRICT_MODULE_DEP_CHECK",
        "snippet": "  public static DiagnosticGroup STRICT_MODULE_DEP_CHECK =\n    DiagnosticGroups.registerGroup(\"strictModuleDepCheck\",\n          new DiagnosticGroup(VarCheck.STRICT_MODULE_DEP_ERROR,\n                              CheckGlobalNames.STRICT_MODULE_DEP_QNAME));",
        "begin_line": 90,
        "end_line": 93,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DiagnosticGroups",
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroups.java",
        "signature": "com.google.javascript.jscomp.DiagnosticGroups.UNKNOWN_DEFINES",
        "snippet": "  public static DiagnosticGroup UNKNOWN_DEFINES =\n    DiagnosticGroups.registerGroup(\"unknownDefines\",\n          new DiagnosticGroup(ProcessDefines.UNKNOWN_DEFINE_WARNING));",
        "begin_line": 95,
        "end_line": 97,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DiagnosticGroups",
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroups.java",
        "signature": "com.google.javascript.jscomp.DiagnosticGroups.MISSING_PROPERTIES",
        "snippet": "  public static DiagnosticGroup MISSING_PROPERTIES =\n    DiagnosticGroups.registerGroup(\"missingProperties\",\n          new DiagnosticGroup(TypeCheck.INEXISTENT_PROPERTY));",
        "begin_line": 99,
        "end_line": 101,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DiagnosticGroups",
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroups.java",
        "signature": "com.google.javascript.jscomp.DiagnosticGroups.UNDEFINED_VARIABLES",
        "snippet": "  public static DiagnosticGroup UNDEFINED_VARIABLES =\n      DiagnosticGroups.registerGroup(\"undefinedVars\",\n          new DiagnosticGroup(VarCheck.UNDEFINED_VAR_ERROR));",
        "begin_line": 103,
        "end_line": 105,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DiagnosticGroups",
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroups.java",
        "signature": "com.google.javascript.jscomp.DiagnosticGroups.CHECK_VARIABLES",
        "snippet": "  public static DiagnosticGroup CHECK_VARIABLES =\n      DiagnosticGroups.registerGroup(\"checkVars\",\n          new DiagnosticGroup(\n              VarCheck.UNDEFINED_VAR_ERROR,\n              SyntacticScopeCreator.VAR_MULTIPLY_DECLARED_ERROR));",
        "begin_line": 107,
        "end_line": 111,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DiagnosticGroups",
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroups.java",
        "signature": "com.google.javascript.jscomp.DiagnosticGroups.CHECK_TYPES",
        "snippet": "  public static DiagnosticGroup CHECK_TYPES =\n      DiagnosticGroups.registerGroup(\"checkTypes\",\n          new DiagnosticGroup(\n              TypeValidator.ALL_DIAGNOSTICS,\n              TypeCheck.ALL_DIAGNOSTICS));",
        "begin_line": 113,
        "end_line": 117,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.JSModuleGraph",
        "src_path": "src/com/google/javascript/jscomp/JSModuleGraph.java",
        "signature": "com.google.javascript.jscomp.JSModuleGraph.moduleDepths",
        "snippet": "  private Map<JSModule, Integer> moduleDepths;",
        "begin_line": 47,
        "end_line": 47,
        "comment": "\n   * Map from a module to its depth.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.JSModuleGraph",
        "src_path": "src/com/google/javascript/jscomp/JSModuleGraph.java",
        "signature": "com.google.javascript.jscomp.JSModuleGraph.modulesByDepth",
        "snippet": "  private List<List<JSModule>> modulesByDepth;",
        "begin_line": 53,
        "end_line": 53,
        "comment": "\n   * Lists of modules at each depth. <code>modulesByDepth.get(3)</code> is a\n   * list of the modules at depth 3, for example.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.JSModuleGraph",
        "src_path": "src/com/google/javascript/jscomp/JSModuleGraph.java",
        "signature": "com.google.javascript.jscomp.JSModuleGraph.dependencyMap",
        "snippet": "  private Map<JSModule, Set<JSModule>> dependencyMap = Maps.newHashMap();",
        "begin_line": 67,
        "end_line": 67,
        "comment": "\n   * dependencyMap is a cache of dependencies that makes the dependsOn\n   * function faster.  Each map entry associates a starting\n   * JSModule with the set of JSModules that are transitively dependent on the\n   * starting module.\n   *\n   * If the cache returns null, then the entry hasn't been filled in for that\n   * module.\n   *\n   * dependencyMap should be filled from leaf to root so that\n   * getTransitiveDepsDeepestFirst can use its results directly.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.ModuleDependenceException",
        "src_path": "src/com/google/javascript/jscomp/JSModuleGraph.java",
        "signature": "com.google.javascript.jscomp.ModuleDependenceException.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 1;",
        "begin_line": 286,
        "end_line": 286,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ModuleDependenceException",
        "src_path": "src/com/google/javascript/jscomp/JSModuleGraph.java",
        "signature": "com.google.javascript.jscomp.ModuleDependenceException.module",
        "snippet": "    private final JSModule module;",
        "begin_line": 288,
        "end_line": 288,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ModuleDependenceException",
        "src_path": "src/com/google/javascript/jscomp/JSModuleGraph.java",
        "signature": "com.google.javascript.jscomp.ModuleDependenceException.dependentModule",
        "snippet": "    private final JSModule dependentModule;",
        "begin_line": 289,
        "end_line": 289,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.Config",
        "src_path": "src/com/google/javascript/jscomp/parsing/Config.java",
        "signature": "com.google.javascript.jscomp.parsing.Config.registry",
        "snippet": "  final JSTypeRegistry registry;",
        "begin_line": 36,
        "end_line": 36,
        "comment": "\n   * Central registry for type info.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.Config",
        "src_path": "src/com/google/javascript/jscomp/parsing/Config.java",
        "signature": "com.google.javascript.jscomp.parsing.Config.parseJsDocDocumentation",
        "snippet": "  final boolean parseJsDocDocumentation;",
        "begin_line": 41,
        "end_line": 41,
        "comment": "\n   * Whether to parse the descriptions of jsdoc comments.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.Config",
        "src_path": "src/com/google/javascript/jscomp/parsing/Config.java",
        "signature": "com.google.javascript.jscomp.parsing.Config.isIdeMode",
        "snippet": "  final boolean isIdeMode;",
        "begin_line": 46,
        "end_line": 46,
        "comment": "\n   * Whether we're in ide mode.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.Config",
        "src_path": "src/com/google/javascript/jscomp/parsing/Config.java",
        "signature": "com.google.javascript.jscomp.parsing.Config.annotationNames",
        "snippet": "  final Map<String, Annotation> annotationNames;",
        "begin_line": 52,
        "end_line": 52,
        "comment": "\n   * Recognized JSDoc annotations, mapped from their name to their internal\n   * representation.\n   "
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.NoType",
        "src_path": "src/com/google/javascript/rhino/jstype/NoType.java",
        "signature": "com.google.javascript.rhino.jstype.NoType.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 1L;",
        "begin_line": 63,
        "end_line": 63,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.GlobalNamespace",
        "src_path": "src/com/google/javascript/jscomp/GlobalNamespace.java",
        "signature": "com.google.javascript.jscomp.GlobalNamespace.compiler",
        "snippet": "  private AbstractCompiler compiler;",
        "begin_line": 45,
        "end_line": 45,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.GlobalNamespace",
        "src_path": "src/com/google/javascript/jscomp/GlobalNamespace.java",
        "signature": "com.google.javascript.jscomp.GlobalNamespace.root",
        "snippet": "  private final Node root;",
        "begin_line": 46,
        "end_line": 46,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.GlobalNamespace",
        "src_path": "src/com/google/javascript/jscomp/GlobalNamespace.java",
        "signature": "com.google.javascript.jscomp.GlobalNamespace.externsRoot",
        "snippet": "  private final Node externsRoot;",
        "begin_line": 47,
        "end_line": 47,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.GlobalNamespace",
        "src_path": "src/com/google/javascript/jscomp/GlobalNamespace.java",
        "signature": "com.google.javascript.jscomp.GlobalNamespace.inExterns",
        "snippet": "  private boolean inExterns;",
        "begin_line": 48,
        "end_line": 48,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.GlobalNamespace",
        "src_path": "src/com/google/javascript/jscomp/GlobalNamespace.java",
        "signature": "com.google.javascript.jscomp.GlobalNamespace.externsScope",
        "snippet": "  private Scope externsScope;",
        "begin_line": 49,
        "end_line": 49,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.GlobalNamespace",
        "src_path": "src/com/google/javascript/jscomp/GlobalNamespace.java",
        "signature": "com.google.javascript.jscomp.GlobalNamespace.generated",
        "snippet": "  private boolean generated = false;",
        "begin_line": 50,
        "end_line": 50,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.GlobalNamespace",
        "src_path": "src/com/google/javascript/jscomp/GlobalNamespace.java",
        "signature": "com.google.javascript.jscomp.GlobalNamespace.globalNames",
        "snippet": "  private List<Name> globalNames = new ArrayList<Name>();",
        "begin_line": 53,
        "end_line": 53,
        "comment": " Global namespace tree "
    },
    {
        "class_name": "com.google.javascript.jscomp.GlobalNamespace",
        "src_path": "src/com/google/javascript/jscomp/GlobalNamespace.java",
        "signature": "com.google.javascript.jscomp.GlobalNamespace.nameMap",
        "snippet": "  private Map<String, Name> nameMap = new HashMap<String, Name>();",
        "begin_line": 56,
        "end_line": 56,
        "comment": " Maps names (e.g. \"a.b.c\") to nodes in the global namespace tree "
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeFilter",
        "src_path": "src/com/google/javascript/jscomp/GlobalNamespace.java",
        "signature": "com.google.javascript.jscomp.NodeFilter.newNodes",
        "snippet": "    private final Set<Node> newNodes;",
        "begin_line": 124,
        "end_line": 124,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.BuildGlobalNamespace",
        "src_path": "src/com/google/javascript/jscomp/GlobalNamespace.java",
        "signature": "com.google.javascript.jscomp.BuildGlobalNamespace.nodeFilter",
        "snippet": "    private final Predicate<Node> nodeFilter;",
        "begin_line": 219,
        "end_line": 219,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Name",
        "src_path": "src/com/google/javascript/jscomp/GlobalNamespace.java",
        "signature": "com.google.javascript.jscomp.Name.name",
        "snippet": "    final String name;",
        "begin_line": 762,
        "end_line": 762,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Name",
        "src_path": "src/com/google/javascript/jscomp/GlobalNamespace.java",
        "signature": "com.google.javascript.jscomp.Name.parent",
        "snippet": "    final Name parent;",
        "begin_line": 763,
        "end_line": 763,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Name",
        "src_path": "src/com/google/javascript/jscomp/GlobalNamespace.java",
        "signature": "com.google.javascript.jscomp.Name.props",
        "snippet": "    List<Name> props;",
        "begin_line": 764,
        "end_line": 764,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Name",
        "src_path": "src/com/google/javascript/jscomp/GlobalNamespace.java",
        "signature": "com.google.javascript.jscomp.Name.declaration",
        "snippet": "    Ref declaration;",
        "begin_line": 765,
        "end_line": 765,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Name",
        "src_path": "src/com/google/javascript/jscomp/GlobalNamespace.java",
        "signature": "com.google.javascript.jscomp.Name.refs",
        "snippet": "    List<Ref> refs;",
        "begin_line": 766,
        "end_line": 766,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Name",
        "src_path": "src/com/google/javascript/jscomp/GlobalNamespace.java",
        "signature": "com.google.javascript.jscomp.Name.type",
        "snippet": "    Type type;",
        "begin_line": 767,
        "end_line": 767,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Name",
        "src_path": "src/com/google/javascript/jscomp/GlobalNamespace.java",
        "signature": "com.google.javascript.jscomp.Name.isClassOrEnum",
        "snippet": "    private boolean isClassOrEnum = false;",
        "begin_line": 768,
        "end_line": 768,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Name",
        "src_path": "src/com/google/javascript/jscomp/GlobalNamespace.java",
        "signature": "com.google.javascript.jscomp.Name.hasClassOrEnumDescendant",
        "snippet": "    private boolean hasClassOrEnumDescendant = false;",
        "begin_line": 769,
        "end_line": 769,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Name",
        "src_path": "src/com/google/javascript/jscomp/GlobalNamespace.java",
        "signature": "com.google.javascript.jscomp.Name.globalSets",
        "snippet": "    int globalSets = 0;",
        "begin_line": 770,
        "end_line": 770,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Name",
        "src_path": "src/com/google/javascript/jscomp/GlobalNamespace.java",
        "signature": "com.google.javascript.jscomp.Name.localSets",
        "snippet": "    int localSets = 0;",
        "begin_line": 771,
        "end_line": 771,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Name",
        "src_path": "src/com/google/javascript/jscomp/GlobalNamespace.java",
        "signature": "com.google.javascript.jscomp.Name.aliasingGets",
        "snippet": "    int aliasingGets = 0;",
        "begin_line": 772,
        "end_line": 772,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Name",
        "src_path": "src/com/google/javascript/jscomp/GlobalNamespace.java",
        "signature": "com.google.javascript.jscomp.Name.totalGets",
        "snippet": "    int totalGets = 0;",
        "begin_line": 773,
        "end_line": 773,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Name",
        "src_path": "src/com/google/javascript/jscomp/GlobalNamespace.java",
        "signature": "com.google.javascript.jscomp.Name.callGets",
        "snippet": "    int callGets = 0;",
        "begin_line": 774,
        "end_line": 774,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Name",
        "src_path": "src/com/google/javascript/jscomp/GlobalNamespace.java",
        "signature": "com.google.javascript.jscomp.Name.inExterns",
        "snippet": "    boolean inExterns;",
        "begin_line": 775,
        "end_line": 775,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Name",
        "src_path": "src/com/google/javascript/jscomp/GlobalNamespace.java",
        "signature": "com.google.javascript.jscomp.Name.docInfo",
        "snippet": "    JSDocInfo docInfo = null;",
        "begin_line": 777,
        "end_line": 777,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Ref",
        "src_path": "src/com/google/javascript/jscomp/GlobalNamespace.java",
        "signature": "com.google.javascript.jscomp.Ref.node",
        "snippet": "    Node node;",
        "begin_line": 998,
        "end_line": 998,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Ref",
        "src_path": "src/com/google/javascript/jscomp/GlobalNamespace.java",
        "signature": "com.google.javascript.jscomp.Ref.type",
        "snippet": "    final Type type;",
        "begin_line": 999,
        "end_line": 999,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Ref",
        "src_path": "src/com/google/javascript/jscomp/GlobalNamespace.java",
        "signature": "com.google.javascript.jscomp.Ref.sourceName",
        "snippet": "    final String sourceName;",
        "begin_line": 1000,
        "end_line": 1000,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Ref",
        "src_path": "src/com/google/javascript/jscomp/GlobalNamespace.java",
        "signature": "com.google.javascript.jscomp.Ref.scope",
        "snippet": "    final Scope scope;",
        "begin_line": 1001,
        "end_line": 1001,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Ref",
        "src_path": "src/com/google/javascript/jscomp/GlobalNamespace.java",
        "signature": "com.google.javascript.jscomp.Ref.module",
        "snippet": "    final JSModule module;",
        "begin_line": 1002,
        "end_line": 1002,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Ref",
        "src_path": "src/com/google/javascript/jscomp/GlobalNamespace.java",
        "signature": "com.google.javascript.jscomp.Ref.twin",
        "snippet": "    private Ref twin = null;",
        "begin_line": 1011,
        "end_line": 1011,
        "comment": "\n     * Certain types of references are actually double-refs. For example,\n     * var a = b = 0;\n     * counts as both a \"set\" of b and an \"alias\" of b.\n     *\n     * We create two Refs for this node, and mark them as twins of each other.\n     "
    },
    {
        "class_name": "com.google.javascript.jscomp.NameGenerator",
        "src_path": "src/com/google/javascript/jscomp/NameGenerator.java",
        "signature": "com.google.javascript.jscomp.NameGenerator.FIRST_CHAR",
        "snippet": "  static final char[] FIRST_CHAR =\n    \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ$\".toCharArray();",
        "begin_line": 35,
        "end_line": 36,
        "comment": " Generate short name with this first character "
    },
    {
        "class_name": "com.google.javascript.jscomp.NameGenerator",
        "src_path": "src/com/google/javascript/jscomp/NameGenerator.java",
        "signature": "com.google.javascript.jscomp.NameGenerator.NONFIRST_CHAR",
        "snippet": "  static final char[] NONFIRST_CHAR =\n    \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_0123456789$\"\n        .toCharArray();",
        "begin_line": 39,
        "end_line": 41,
        "comment": " These appear after after the first character "
    },
    {
        "class_name": "com.google.javascript.jscomp.NameGenerator",
        "src_path": "src/com/google/javascript/jscomp/NameGenerator.java",
        "signature": "com.google.javascript.jscomp.NameGenerator.reservedNames",
        "snippet": "  private final Set<String> reservedNames;",
        "begin_line": 43,
        "end_line": 43,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.NameGenerator",
        "src_path": "src/com/google/javascript/jscomp/NameGenerator.java",
        "signature": "com.google.javascript.jscomp.NameGenerator.prefix",
        "snippet": "  private final String prefix;",
        "begin_line": 44,
        "end_line": 44,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.NameGenerator",
        "src_path": "src/com/google/javascript/jscomp/NameGenerator.java",
        "signature": "com.google.javascript.jscomp.NameGenerator.nameCount",
        "snippet": "  private int nameCount;",
        "begin_line": 45,
        "end_line": 45,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.NameGenerator",
        "src_path": "src/com/google/javascript/jscomp/NameGenerator.java",
        "signature": "com.google.javascript.jscomp.NameGenerator.firstChars",
        "snippet": "  private final char[] firstChars;",
        "begin_line": 47,
        "end_line": 47,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.NameGenerator",
        "src_path": "src/com/google/javascript/jscomp/NameGenerator.java",
        "signature": "com.google.javascript.jscomp.NameGenerator.nonFirstChars",
        "snippet": "  private final char[] nonFirstChars;",
        "begin_line": 48,
        "end_line": 48,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.MinimizeExitPoints",
        "src_path": "src/com/google/javascript/jscomp/MinimizeExitPoints.java",
        "signature": "com.google.javascript.jscomp.MinimizeExitPoints.compiler",
        "snippet": "  AbstractCompiler compiler;",
        "begin_line": 38,
        "end_line": 38,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.JSModule",
        "src_path": "src/com/google/javascript/jscomp/JSModule.java",
        "signature": "com.google.javascript.jscomp.JSModule.name",
        "snippet": "  private final String name;",
        "begin_line": 41,
        "end_line": 41,
        "comment": " Module name "
    },
    {
        "class_name": "com.google.javascript.jscomp.JSModule",
        "src_path": "src/com/google/javascript/jscomp/JSModule.java",
        "signature": "com.google.javascript.jscomp.JSModule.inputs",
        "snippet": "  private final List<CompilerInput> inputs = new ArrayList<CompilerInput>();",
        "begin_line": 44,
        "end_line": 44,
        "comment": " Source code inputs "
    },
    {
        "class_name": "com.google.javascript.jscomp.JSModule",
        "src_path": "src/com/google/javascript/jscomp/JSModule.java",
        "signature": "com.google.javascript.jscomp.JSModule.deps",
        "snippet": "  private final List<JSModule> deps = new ArrayList<JSModule>();",
        "begin_line": 47,
        "end_line": 47,
        "comment": " Modules that this module depends on "
    },
    {
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.JSDocInfo.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 1L;",
        "begin_line": 71,
        "end_line": 71,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.LazilyInitializedInfo",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.LazilyInitializedInfo.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 1L;",
        "begin_line": 90,
        "end_line": 90,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.LazilyInitializedInfo",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.LazilyInitializedInfo.baseType",
        "snippet": "    JSTypeExpression baseType = null;",
        "begin_line": 93,
        "end_line": 93,
        "comment": " Function information"
    },
    {
        "class_name": "com.google.javascript.rhino.LazilyInitializedInfo",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.LazilyInitializedInfo.implementedInterfaces",
        "snippet": "    List<JSTypeExpression> implementedInterfaces = null;",
        "begin_line": 94,
        "end_line": 94,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.LazilyInitializedInfo",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.LazilyInitializedInfo.parameters",
        "snippet": "    Map<String, JSTypeExpression> parameters = null;",
        "begin_line": 95,
        "end_line": 95,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.LazilyInitializedInfo",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.LazilyInitializedInfo.thrownTypes",
        "snippet": "    List<JSTypeExpression> thrownTypes = null;",
        "begin_line": 96,
        "end_line": 96,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.LazilyInitializedInfo",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.LazilyInitializedInfo.templateTypeName",
        "snippet": "    String templateTypeName = null;",
        "begin_line": 97,
        "end_line": 97,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.LazilyInitializedInfo",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.LazilyInitializedInfo.description",
        "snippet": "    String description = null;",
        "begin_line": 100,
        "end_line": 100,
        "comment": " Other information"
    },
    {
        "class_name": "com.google.javascript.rhino.LazilyInitializedInfo",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.LazilyInitializedInfo.deprecated",
        "snippet": "    String deprecated = null;",
        "begin_line": 101,
        "end_line": 101,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.LazilyInitializedInfo",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.LazilyInitializedInfo.license",
        "snippet": "    String license = null;",
        "begin_line": 102,
        "end_line": 102,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.LazilyInitializedInfo",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.LazilyInitializedInfo.suppressions",
        "snippet": "    Set<String> suppressions = null;",
        "begin_line": 103,
        "end_line": 103,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.LazilyInitializedDocumentation",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.LazilyInitializedDocumentation.markers",
        "snippet": "    List<Marker> markers = null;",
        "begin_line": 109,
        "end_line": 109,
        "comment": " care of all the lazy-instantiation internally."
    },
    {
        "class_name": "com.google.javascript.rhino.LazilyInitializedDocumentation",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.LazilyInitializedDocumentation.parameters",
        "snippet": "    Map<String, String> parameters = null;",
        "begin_line": 111,
        "end_line": 111,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.LazilyInitializedDocumentation",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.LazilyInitializedDocumentation.throwsDescriptions",
        "snippet": "    Map<JSTypeExpression, String> throwsDescriptions = null;",
        "begin_line": 112,
        "end_line": 112,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.LazilyInitializedDocumentation",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.LazilyInitializedDocumentation.blockDescription",
        "snippet": "    String blockDescription = null;",
        "begin_line": 113,
        "end_line": 113,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.LazilyInitializedDocumentation",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.LazilyInitializedDocumentation.fileOverview",
        "snippet": "    String fileOverview = null;",
        "begin_line": 114,
        "end_line": 114,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.LazilyInitializedDocumentation",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.LazilyInitializedDocumentation.returnDescription",
        "snippet": "    String returnDescription = null;",
        "begin_line": 115,
        "end_line": 115,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.LazilyInitializedDocumentation",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.LazilyInitializedDocumentation.version",
        "snippet": "    String version = null;",
        "begin_line": 116,
        "end_line": 116,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.LazilyInitializedDocumentation",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.LazilyInitializedDocumentation.authors",
        "snippet": "    List<String> authors = null;",
        "begin_line": 118,
        "end_line": 118,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.LazilyInitializedDocumentation",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.LazilyInitializedDocumentation.sees",
        "snippet": "    List<String> sees = null;",
        "begin_line": 119,
        "end_line": 119,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.TypePosition",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.TypePosition.hasBrackets",
        "snippet": "    public boolean hasBrackets = false;",
        "begin_line": 132,
        "end_line": 132,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Marker",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.Marker.annotation",
        "snippet": "    public StringPosition annotation = null;",
        "begin_line": 146,
        "end_line": 146,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Marker",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.Marker.name",
        "snippet": "    public StringPosition name = null;",
        "begin_line": 147,
        "end_line": 147,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Marker",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.Marker.description",
        "snippet": "    public StringPosition description = null;",
        "begin_line": 148,
        "end_line": 148,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Marker",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.Marker.type",
        "snippet": "    public TypePosition type = null;",
        "begin_line": 149,
        "end_line": 149,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.JSDocInfo.info",
        "snippet": "  private LazilyInitializedInfo info = null;",
        "begin_line": 152,
        "end_line": 152,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.JSDocInfo.documentation",
        "snippet": "  private LazilyInitializedDocumentation documentation = null;",
        "begin_line": 154,
        "end_line": 154,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.JSDocInfo.sourceName",
        "snippet": "  private String sourceName = null;",
        "begin_line": 157,
        "end_line": 157,
        "comment": " The source file containing the JSDoc. "
    },
    {
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.JSDocInfo.visibility",
        "snippet": "  private Visibility visibility = null;",
        "begin_line": 159,
        "end_line": 159,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.JSDocInfo.bitset",
        "snippet": "  private int bitset = 0x00;",
        "begin_line": 172,
        "end_line": 172,
        "comment": "\n   * The {@link #isConstant()}, {@link #isConstructor()}, {@link #isInterface},\n   * {@link #isHidden()} and {@link #shouldPreserveTry()} flags as well as\n   * whether the {@link #type} field stores a value for {@link #getType()},\n   * {@link #getReturnType()} or {@link #getEnumParameterType()}.\n   *\n   * @see #setFlag(boolean, int)\n   * @see #getFlag(int)\n   * @see #setType(JSTypeExpression, int)\n   * @see #getType(int)\n   "
    },
    {
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.JSDocInfo.type",
        "snippet": "  private JSTypeExpression type = null;",
        "begin_line": 182,
        "end_line": 182,
        "comment": "\n   * The type for {@link #getType()}, {@link #getReturnType()} or\n   * {@link #getEnumParameterType()}. The knowledge of which one is recorded is\n   * stored in the {@link #bitset} field.\n   *\n   * @see #setType(JSTypeExpression, int)\n   * @see #getType(int)\n   "
    },
    {
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.JSDocInfo.thisType",
        "snippet": "  private JSTypeExpression thisType = null;",
        "begin_line": 187,
        "end_line": 187,
        "comment": "\n   * The type for {@link #getThisType()}.\n   "
    },
    {
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.JSDocInfo.includeDocumentation",
        "snippet": "  private boolean includeDocumentation = false;",
        "begin_line": 194,
        "end_line": 194,
        "comment": "\n   * Whether to include documentation.\n   *\n   * @see JSDocInfo.LazilyInitializedDocumentation\n   "
    },
    {
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.JSDocInfo.MASK_FLAGS",
        "snippet": "  private static final int MASK_FLAGS       = 0x3FFFFFFF;",
        "begin_line": 201,
        "end_line": 201,
        "comment": " Mask all the boolean annotation types"
    },
    {
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.JSDocInfo.MASK_CONSTANT",
        "snippet": "  private static final int MASK_CONSTANT      = 0x00000001; // @const",
        "begin_line": 203,
        "end_line": 203,
        "comment": " @const"
    },
    {
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.JSDocInfo.MASK_CONSTRUCTOR",
        "snippet": "  private static final int MASK_CONSTRUCTOR   = 0x00000002; // @constructor",
        "begin_line": 204,
        "end_line": 204,
        "comment": " @constructor"
    },
    {
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.JSDocInfo.MASK_DEFINE",
        "snippet": "  private static final int MASK_DEFINE        = 0x00000004; // @define",
        "begin_line": 205,
        "end_line": 205,
        "comment": " @define"
    },
    {
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.JSDocInfo.MASK_HIDDEN",
        "snippet": "  private static final int MASK_HIDDEN        = 0x00000008; // @hidden",
        "begin_line": 206,
        "end_line": 206,
        "comment": " @hidden"
    },
    {
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.JSDocInfo.MASK_PRESERVETRY",
        "snippet": "  private static final int MASK_PRESERVETRY   = 0x00000010; // @preserveTry",
        "begin_line": 207,
        "end_line": 207,
        "comment": " @preserveTry"
    },
    {
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.JSDocInfo.MASK_NOCHECK",
        "snippet": "  private static final int MASK_NOCHECK       = 0x00000020; // @notypecheck",
        "begin_line": 208,
        "end_line": 208,
        "comment": " @notypecheck"
    },
    {
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.JSDocInfo.MASK_OVERRIDE",
        "snippet": "  private static final int MASK_OVERRIDE      = 0x00000040; // @override",
        "begin_line": 209,
        "end_line": 209,
        "comment": " @override"
    },
    {
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.JSDocInfo.MASK_NOALIAS",
        "snippet": "  private static final int MASK_NOALIAS       = 0x00000080; // @noalias",
        "begin_line": 210,
        "end_line": 210,
        "comment": " @noalias"
    },
    {
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.JSDocInfo.MASK_DEPRECATED",
        "snippet": "  private static final int MASK_DEPRECATED    = 0x00000100; // @deprecated",
        "begin_line": 211,
        "end_line": 211,
        "comment": " @deprecated"
    },
    {
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.JSDocInfo.MASK_INTERFACE",
        "snippet": "  private static final int MASK_INTERFACE     = 0x00000200; // @interface",
        "begin_line": 212,
        "end_line": 212,
        "comment": " @interface"
    },
    {
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.JSDocInfo.MASK_EXPORT",
        "snippet": "  private static final int MASK_EXPORT        = 0x00000400; // @export",
        "begin_line": 213,
        "end_line": 213,
        "comment": " @export"
    },
    {
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.JSDocInfo.MASK_NOSHADOW",
        "snippet": "  private static final int MASK_NOSHADOW      = 0x00000800; // @noshadow",
        "begin_line": 214,
        "end_line": 214,
        "comment": " @noshadow"
    },
    {
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.JSDocInfo.MASK_FILEOVERVIEW",
        "snippet": "  private static final int MASK_FILEOVERVIEW  = 0x00001000; // @fileoverview",
        "begin_line": 215,
        "end_line": 215,
        "comment": " @fileoverview"
    },
    {
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.JSDocInfo.MASK_IMPLICITCAST",
        "snippet": "  private static final int MASK_IMPLICITCAST  = 0x00002000; // @implicitCast",
        "begin_line": 216,
        "end_line": 216,
        "comment": " @implicitCast"
    },
    {
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.JSDocInfo.MASK_NOSIDEEFFECTS",
        "snippet": "  private static final int MASK_NOSIDEEFFECTS = 0x00004000; // @nosideeffects",
        "begin_line": 217,
        "end_line": 217,
        "comment": " @nosideeffects"
    },
    {
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.JSDocInfo.MASK_EXTERNS",
        "snippet": "  private static final int MASK_EXTERNS       = 0x00008000; // @externs",
        "begin_line": 218,
        "end_line": 218,
        "comment": " @externs"
    },
    {
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.JSDocInfo.MASK_JAVADISPATCH",
        "snippet": "  private static final int MASK_JAVADISPATCH  = 0x00010000; // @javadispath",
        "begin_line": 219,
        "end_line": 219,
        "comment": " @javadispath"
    },
    {
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.JSDocInfo.MASK_TYPEFIELD",
        "snippet": "  private static final int MASK_TYPEFIELD    = 0xE0000000; // 1110...",
        "begin_line": 223,
        "end_line": 223,
        "comment": " 1110..."
    },
    {
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.JSDocInfo.TYPEFIELD_TYPE",
        "snippet": "  private static final int TYPEFIELD_TYPE    = 0x20000000; // 0010...",
        "begin_line": 224,
        "end_line": 224,
        "comment": " 0010..."
    },
    {
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.JSDocInfo.TYPEFIELD_RETURN",
        "snippet": "  private static final int TYPEFIELD_RETURN  = 0x40000000; // 0100...",
        "begin_line": 225,
        "end_line": 225,
        "comment": " 0100..."
    },
    {
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.JSDocInfo.TYPEFIELD_ENUM",
        "snippet": "  private static final int TYPEFIELD_ENUM    = 0x60000000; // 0110...",
        "begin_line": 226,
        "end_line": 226,
        "comment": " 0110..."
    },
    {
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.JSDocInfo.TYPEFIELD_TYPEDEF",
        "snippet": "  private static final int TYPEFIELD_TYPEDEF = 0x80000000; // 1000...",
        "begin_line": 227,
        "end_line": 227,
        "comment": " 1000..."
    },
    {
        "class_name": "com.google.javascript.jscomp.AbstractCommandLineRunner",
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.AbstractCommandLineRunner.config",
        "snippet": "  private final CommandLineConfig config;",
        "begin_line": 80,
        "end_line": 80,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.AbstractCommandLineRunner",
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.AbstractCommandLineRunner.out",
        "snippet": "  private PrintStream out;",
        "begin_line": 82,
        "end_line": 82,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.AbstractCommandLineRunner",
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.AbstractCommandLineRunner.err",
        "snippet": "  private final PrintStream err;",
        "begin_line": 83,
        "end_line": 83,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.AbstractCommandLineRunner",
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.AbstractCommandLineRunner.compiler",
        "snippet": "  private A compiler;",
        "begin_line": 84,
        "end_line": 84,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.AbstractCommandLineRunner",
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.AbstractCommandLineRunner.inputCharset",
        "snippet": "  private static Charset inputCharset;",
        "begin_line": 86,
        "end_line": 86,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.AbstractCommandLineRunner",
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.AbstractCommandLineRunner.NUM_RUNS_TO_DETERMINE_OPTIMAL_ORDER",
        "snippet": "  private static final int NUM_RUNS_TO_DETERMINE_OPTIMAL_ORDER = 100;",
        "begin_line": 89,
        "end_line": 89,
        "comment": " Bookkeeping to measure optimal phase orderings."
    },
    {
        "class_name": "com.google.javascript.jscomp.AbstractCommandLineRunner",
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.AbstractCommandLineRunner.runTimeStats",
        "snippet": "  private final RunTimeStats runTimeStats = new RunTimeStats();",
        "begin_line": 91,
        "end_line": 91,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.FlagUsageException",
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.FlagUsageException.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 1L;",
        "begin_line": 216,
        "end_line": 216,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.RunTimeStats",
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.RunTimeStats.bestRunTime",
        "snippet": "    private long bestRunTime = Long.MAX_VALUE;",
        "begin_line": 900,
        "end_line": 900,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.RunTimeStats",
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.RunTimeStats.worstRunTime",
        "snippet": "    private long worstRunTime = Long.MIN_VALUE;",
        "begin_line": 901,
        "end_line": 901,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.RunTimeStats",
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.RunTimeStats.lastStartTime",
        "snippet": "    private long lastStartTime = 0;",
        "begin_line": 902,
        "end_line": 902,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.RunTimeStats",
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.RunTimeStats.loopedPassesInBestRun",
        "snippet": "    private List<List<String>> loopedPassesInBestRun = null;",
        "begin_line": 903,
        "end_line": 903,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineConfig",
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.CommandLineConfig.printTree",
        "snippet": "    private boolean printTree = false;",
        "begin_line": 950,
        "end_line": 950,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineConfig",
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.CommandLineConfig.computePhaseOrdering",
        "snippet": "    private boolean computePhaseOrdering = false;",
        "begin_line": 958,
        "end_line": 958,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineConfig",
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.CommandLineConfig.printAst",
        "snippet": "    private boolean printAst = false;",
        "begin_line": 969,
        "end_line": 969,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineConfig",
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.CommandLineConfig.printPassGraph",
        "snippet": "    private boolean printPassGraph = false;",
        "begin_line": 980,
        "end_line": 980,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineConfig",
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.CommandLineConfig.jscompDevMode",
        "snippet": "    private CompilerOptions.DevMode jscompDevMode = CompilerOptions.DevMode.OFF;",
        "begin_line": 988,
        "end_line": 988,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineConfig",
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.CommandLineConfig.loggingLevel",
        "snippet": "    private String loggingLevel = Level.WARNING.getName();",
        "begin_line": 996,
        "end_line": 996,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineConfig",
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.CommandLineConfig.externs",
        "snippet": "    private final List<String> externs = Lists.newArrayList();",
        "begin_line": 1008,
        "end_line": 1008,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineConfig",
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.CommandLineConfig.js",
        "snippet": "    private final List<String> js = Lists.newArrayList();",
        "begin_line": 1019,
        "end_line": 1019,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineConfig",
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.CommandLineConfig.jsOutputFile",
        "snippet": "    private String jsOutputFile = \"\";",
        "begin_line": 1030,
        "end_line": 1030,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineConfig",
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.CommandLineConfig.module",
        "snippet": "    private final List<String> module = Lists.newArrayList();",
        "begin_line": 1040,
        "end_line": 1040,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineConfig",
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.CommandLineConfig.variableMapInputFile",
        "snippet": "    private String variableMapInputFile = \"\";",
        "begin_line": 1056,
        "end_line": 1056,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineConfig",
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.CommandLineConfig.propertyMapInputFile",
        "snippet": "    private String propertyMapInputFile = \"\";",
        "begin_line": 1067,
        "end_line": 1067,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineConfig",
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.CommandLineConfig.variableMapOutputFile",
        "snippet": "    private String variableMapOutputFile = \"\";",
        "begin_line": 1078,
        "end_line": 1078,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineConfig",
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.CommandLineConfig.createNameMapFiles",
        "snippet": "    private boolean createNameMapFiles = false;",
        "begin_line": 1089,
        "end_line": 1089,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineConfig",
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.CommandLineConfig.propertyMapOutputFile",
        "snippet": "    private String propertyMapOutputFile = \"\";",
        "begin_line": 1103,
        "end_line": 1103,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineConfig",
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.CommandLineConfig.thirdParty",
        "snippet": "    private boolean thirdParty = false;",
        "begin_line": 1114,
        "end_line": 1114,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineConfig",
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.CommandLineConfig.summaryDetailLevel",
        "snippet": "    private int summaryDetailLevel = 1;",
        "begin_line": 1125,
        "end_line": 1125,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineConfig",
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.CommandLineConfig.outputWrapper",
        "snippet": "    private String outputWrapper = \"\";",
        "begin_line": 1139,
        "end_line": 1139,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineConfig",
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.CommandLineConfig.outputWrapperMarker",
        "snippet": "    private String outputWrapperMarker = \"\";",
        "begin_line": 1150,
        "end_line": 1150,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineConfig",
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.CommandLineConfig.moduleWrapper",
        "snippet": "    private final List<String> moduleWrapper = Lists.newArrayList();",
        "begin_line": 1161,
        "end_line": 1161,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineConfig",
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.CommandLineConfig.moduleOutputPathPrefix",
        "snippet": "    private String moduleOutputPathPrefix = \"\";",
        "begin_line": 1175,
        "end_line": 1175,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineConfig",
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.CommandLineConfig.createSourceMap",
        "snippet": "    private String createSourceMap = \"\";",
        "begin_line": 1187,
        "end_line": 1187,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineConfig",
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.CommandLineConfig.jscompError",
        "snippet": "    private final List<String> jscompError = Lists.newArrayList();",
        "begin_line": 1201,
        "end_line": 1201,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineConfig",
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.CommandLineConfig.jscompWarning",
        "snippet": "    private final List<String> jscompWarning = Lists.newArrayList();",
        "begin_line": 1212,
        "end_line": 1212,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineConfig",
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.CommandLineConfig.jscompOff",
        "snippet": "    private final List<String> jscompOff = Lists.newArrayList();",
        "begin_line": 1223,
        "end_line": 1223,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineConfig",
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.CommandLineConfig.define",
        "snippet": "    private final List<String> define = Lists.newArrayList();",
        "begin_line": 1234,
        "end_line": 1234,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineConfig",
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.CommandLineConfig.charset",
        "snippet": "    private String charset = \"\";",
        "begin_line": 1249,
        "end_line": 1249,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.PassConfig",
        "src_path": "src/com/google/javascript/jscomp/PassConfig.java",
        "signature": "com.google.javascript.jscomp.PassConfig.options",
        "snippet": "  final CompilerOptions options;",
        "begin_line": 36,
        "end_line": 36,
        "comment": " Used by subclasses in this package."
    },
    {
        "class_name": "com.google.javascript.jscomp.PassConfig",
        "src_path": "src/com/google/javascript/jscomp/PassConfig.java",
        "signature": "com.google.javascript.jscomp.PassConfig.typedScopeCreator",
        "snippet": "  MemoizedScopeCreator typedScopeCreator;",
        "begin_line": 43,
        "end_line": 43,
        "comment": "\n   * A memoized version of scopeCreator. It must be memoized so that\n   * we can make two separate passes over the AST, one for inferring types\n   * and one for checking types.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.PassConfig",
        "src_path": "src/com/google/javascript/jscomp/PassConfig.java",
        "signature": "com.google.javascript.jscomp.PassConfig.topScope",
        "snippet": "  Scope topScope = null;",
        "begin_line": 46,
        "end_line": 46,
        "comment": " The global typed scope. "
    },
    {
        "class_name": "com.google.javascript.jscomp.PassConfigDelegate",
        "src_path": "src/com/google/javascript/jscomp/PassConfig.java",
        "signature": "com.google.javascript.jscomp.PassConfigDelegate.delegate",
        "snippet": "    private final PassConfig delegate;",
        "begin_line": 185,
        "end_line": 185,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.State",
        "src_path": "src/com/google/javascript/jscomp/PassConfig.java",
        "signature": "com.google.javascript.jscomp.State.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 1L;",
        "begin_line": 221,
        "end_line": 221,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.State",
        "src_path": "src/com/google/javascript/jscomp/PassConfig.java",
        "signature": "com.google.javascript.jscomp.State.cssNames",
        "snippet": "    final Map<String, Integer> cssNames;",
        "begin_line": 223,
        "end_line": 223,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.State",
        "src_path": "src/com/google/javascript/jscomp/PassConfig.java",
        "signature": "com.google.javascript.jscomp.State.exportedNames",
        "snippet": "    final Set<String> exportedNames;",
        "begin_line": 224,
        "end_line": 224,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.State",
        "src_path": "src/com/google/javascript/jscomp/PassConfig.java",
        "signature": "com.google.javascript.jscomp.State.crossModuleIdGenerator",
        "snippet": "    final CrossModuleMethodMotion.IdGenerator crossModuleIdGenerator;",
        "begin_line": 225,
        "end_line": 225,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.State",
        "src_path": "src/com/google/javascript/jscomp/PassConfig.java",
        "signature": "com.google.javascript.jscomp.State.variableMap",
        "snippet": "    final VariableMap variableMap;",
        "begin_line": 226,
        "end_line": 226,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.State",
        "src_path": "src/com/google/javascript/jscomp/PassConfig.java",
        "signature": "com.google.javascript.jscomp.State.propertyMap",
        "snippet": "    final VariableMap propertyMap;",
        "begin_line": 227,
        "end_line": 227,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.State",
        "src_path": "src/com/google/javascript/jscomp/PassConfig.java",
        "signature": "com.google.javascript.jscomp.State.anonymousFunctionNameMap",
        "snippet": "    final VariableMap anonymousFunctionNameMap;",
        "begin_line": 228,
        "end_line": 228,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.State",
        "src_path": "src/com/google/javascript/jscomp/PassConfig.java",
        "signature": "com.google.javascript.jscomp.State.functionNames",
        "snippet": "    final FunctionNames functionNames;",
        "begin_line": 229,
        "end_line": 229,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.FunctionNode",
        "src_path": "src/com/google/javascript/rhino/FunctionNode.java",
        "signature": "com.google.javascript.rhino.FunctionNode.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 1L;",
        "begin_line": 44,
        "end_line": 44,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.FunctionNode",
        "src_path": "src/com/google/javascript/rhino/FunctionNode.java",
        "signature": "com.google.javascript.rhino.FunctionNode.FUNCTION_STATEMENT",
        "snippet": "    public static final int FUNCTION_STATEMENT            = 1;",
        "begin_line": 83,
        "end_line": 83,
        "comment": "\n     * There are three types of functions that can be defined. The first\n     * is a function statement. This is a function appearing as a top-level\n     * statement (i.e., not nested inside some other statement) in either a\n     * script or a function.\n     *\n     * The second is a function expression, which is a function appearing in\n     * an expression except for the third type, which is...\n     *\n     * The third type is a function expression where the expression is the\n     * top-level expression in an expression statement.\n     *\n     * The three types of functions have different treatment and must be\n     * distinquished.\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.FunctionNode",
        "src_path": "src/com/google/javascript/rhino/FunctionNode.java",
        "signature": "com.google.javascript.rhino.FunctionNode.FUNCTION_EXPRESSION",
        "snippet": "    public static final int FUNCTION_EXPRESSION           = 2;",
        "begin_line": 84,
        "end_line": 84,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.FunctionNode",
        "src_path": "src/com/google/javascript/rhino/FunctionNode.java",
        "signature": "com.google.javascript.rhino.FunctionNode.FUNCTION_EXPRESSION_STATEMENT",
        "snippet": "    public static final int FUNCTION_EXPRESSION_STATEMENT = 3;",
        "begin_line": 85,
        "end_line": 85,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.FunctionNode",
        "src_path": "src/com/google/javascript/rhino/FunctionNode.java",
        "signature": "com.google.javascript.rhino.FunctionNode.functionName",
        "snippet": "    String functionName;",
        "begin_line": 91,
        "end_line": 91,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.FunctionNode",
        "src_path": "src/com/google/javascript/rhino/FunctionNode.java",
        "signature": "com.google.javascript.rhino.FunctionNode.itsNeedsActivation",
        "snippet": "    boolean itsNeedsActivation;",
        "begin_line": 92,
        "end_line": 92,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.FunctionNode",
        "src_path": "src/com/google/javascript/rhino/FunctionNode.java",
        "signature": "com.google.javascript.rhino.FunctionNode.itsFunctionType",
        "snippet": "    int itsFunctionType;",
        "begin_line": 93,
        "end_line": 93,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.FunctionNode",
        "src_path": "src/com/google/javascript/rhino/FunctionNode.java",
        "signature": "com.google.javascript.rhino.FunctionNode.itsIgnoreDynamicScope",
        "snippet": "    boolean itsIgnoreDynamicScope;",
        "begin_line": 94,
        "end_line": 94,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ExtractPrototypeMemberDeclarations",
        "src_path": "src/com/google/javascript/jscomp/ExtractPrototypeMemberDeclarations.java",
        "signature": "com.google.javascript.jscomp.ExtractPrototypeMemberDeclarations.GLOBAL_VAR_DECL_OVERHEAD",
        "snippet": "  private static final int GLOBAL_VAR_DECL_OVERHEAD = \"var t;\".length();",
        "begin_line": 79,
        "end_line": 79,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ExtractPrototypeMemberDeclarations",
        "src_path": "src/com/google/javascript/jscomp/ExtractPrototypeMemberDeclarations.java",
        "signature": "com.google.javascript.jscomp.ExtractPrototypeMemberDeclarations.PER_EXTRACTION_INSTANCE_OVERHEAD",
        "snippet": "  private static final int PER_EXTRACTION_INSTANCE_OVERHEAD =\n      \"t=y.prototype;\".length();",
        "begin_line": 83,
        "end_line": 84,
        "comment": " the prototype object."
    },
    {
        "class_name": "com.google.javascript.jscomp.ExtractPrototypeMemberDeclarations",
        "src_path": "src/com/google/javascript/jscomp/ExtractPrototypeMemberDeclarations.java",
        "signature": "com.google.javascript.jscomp.ExtractPrototypeMemberDeclarations.PER_PROTOTYPE_MEMBER_DELTA",
        "snippet": "  private static final int PER_PROTOTYPE_MEMBER_DELTA =\n      \"t.y=\".length() - \"x[p].y=\".length();",
        "begin_line": 87,
        "end_line": 88,
        "comment": " The gain we get per prototype declaration. Assuming it can be aliased."
    },
    {
        "class_name": "com.google.javascript.jscomp.ExtractPrototypeMemberDeclarations",
        "src_path": "src/com/google/javascript/jscomp/ExtractPrototypeMemberDeclarations.java",
        "signature": "com.google.javascript.jscomp.ExtractPrototypeMemberDeclarations.prototypeAlias",
        "snippet": "  private String prototypeAlias = null;",
        "begin_line": 92,
        "end_line": 92,
        "comment": " object. Of cause, we assume that it'll be renamed by RenameVars."
    },
    {
        "class_name": "com.google.javascript.jscomp.ExtractPrototypeMemberDeclarations",
        "src_path": "src/com/google/javascript/jscomp/ExtractPrototypeMemberDeclarations.java",
        "signature": "com.google.javascript.jscomp.ExtractPrototypeMemberDeclarations.compiler",
        "snippet": "  private final AbstractCompiler compiler;",
        "begin_line": 94,
        "end_line": 94,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.GatherExtractionInfo",
        "src_path": "src/com/google/javascript/jscomp/ExtractPrototypeMemberDeclarations.java",
        "signature": "com.google.javascript.jscomp.GatherExtractionInfo.instances",
        "snippet": "    private List<ExtractionInstance> instances = Lists.newLinkedList();",
        "begin_line": 185,
        "end_line": 185,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.GatherExtractionInfo",
        "src_path": "src/com/google/javascript/jscomp/ExtractPrototypeMemberDeclarations.java",
        "signature": "com.google.javascript.jscomp.GatherExtractionInfo.totalDelta",
        "snippet": "    private int totalDelta = GLOBAL_VAR_DECL_OVERHEAD;",
        "begin_line": 186,
        "end_line": 186,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ExtractionInstance",
        "src_path": "src/com/google/javascript/jscomp/ExtractPrototypeMemberDeclarations.java",
        "signature": "com.google.javascript.jscomp.ExtractionInstance.declarations",
        "snippet": "    LinkedList<PrototypeMemberDeclaration> declarations = Lists.newLinkedList();",
        "begin_line": 233,
        "end_line": 233,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ExtractionInstance",
        "src_path": "src/com/google/javascript/jscomp/ExtractPrototypeMemberDeclarations.java",
        "signature": "com.google.javascript.jscomp.ExtractionInstance.delta",
        "snippet": "    private int delta = 0;",
        "begin_line": 234,
        "end_line": 234,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ExtractionInstance",
        "src_path": "src/com/google/javascript/jscomp/ExtractPrototypeMemberDeclarations.java",
        "signature": "com.google.javascript.jscomp.ExtractionInstance.parent",
        "snippet": "    private final Node parent;",
        "begin_line": 235,
        "end_line": 235,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.PrototypeMemberDeclaration",
        "src_path": "src/com/google/javascript/jscomp/ExtractPrototypeMemberDeclarations.java",
        "signature": "com.google.javascript.jscomp.PrototypeMemberDeclaration.memberName",
        "snippet": "    final String memberName;",
        "begin_line": 268,
        "end_line": 268,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.PrototypeMemberDeclaration",
        "src_path": "src/com/google/javascript/jscomp/ExtractPrototypeMemberDeclarations.java",
        "signature": "com.google.javascript.jscomp.PrototypeMemberDeclaration.node",
        "snippet": "    final Node node;",
        "begin_line": 269,
        "end_line": 269,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.PrototypeMemberDeclaration",
        "src_path": "src/com/google/javascript/jscomp/ExtractPrototypeMemberDeclarations.java",
        "signature": "com.google.javascript.jscomp.PrototypeMemberDeclaration.qualifiedClassName",
        "snippet": "    final String qualifiedClassName;",
        "begin_line": 270,
        "end_line": 270,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.PrototypeMemberDeclaration",
        "src_path": "src/com/google/javascript/jscomp/ExtractPrototypeMemberDeclarations.java",
        "signature": "com.google.javascript.jscomp.PrototypeMemberDeclaration.lhs",
        "snippet": "    final Node lhs;",
        "begin_line": 271,
        "end_line": 271,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ControlFlowGraph",
        "src_path": "src/com/google/javascript/jscomp/ControlFlowGraph.java",
        "signature": "com.google.javascript.jscomp.ControlFlowGraph.implicitReturn",
        "snippet": "  private final DiGraphNode<N, ControlFlowGraph.Branch> implicitReturn;",
        "begin_line": 41,
        "end_line": 41,
        "comment": "\n   * A special node marked by the node value key null to a singleton\n   * \"return\" when control is transfered outside of the current control flow\n   * graph.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.ControlFlowGraph",
        "src_path": "src/com/google/javascript/jscomp/ControlFlowGraph.java",
        "signature": "com.google.javascript.jscomp.ControlFlowGraph.entry",
        "snippet": "  private final DiGraphNode<N, ControlFlowGraph.Branch> entry;",
        "begin_line": 43,
        "end_line": 43,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.SyntacticScopeCreator",
        "src_path": "src/com/google/javascript/jscomp/SyntacticScopeCreator.java",
        "signature": "com.google.javascript.jscomp.SyntacticScopeCreator.compiler",
        "snippet": "  private final AbstractCompiler compiler;",
        "begin_line": 35,
        "end_line": 35,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.SyntacticScopeCreator",
        "src_path": "src/com/google/javascript/jscomp/SyntacticScopeCreator.java",
        "signature": "com.google.javascript.jscomp.SyntacticScopeCreator.scope",
        "snippet": "  private Scope scope;",
        "begin_line": 36,
        "end_line": 36,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.SyntacticScopeCreator",
        "src_path": "src/com/google/javascript/jscomp/SyntacticScopeCreator.java",
        "signature": "com.google.javascript.jscomp.SyntacticScopeCreator.sourceName",
        "snippet": "  private String sourceName;",
        "begin_line": 37,
        "end_line": 37,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.SyntacticScopeCreator",
        "src_path": "src/com/google/javascript/jscomp/SyntacticScopeCreator.java",
        "signature": "com.google.javascript.jscomp.SyntacticScopeCreator.redeclarationHandler",
        "snippet": "  private final RedeclarationHandler redeclarationHandler;",
        "begin_line": 38,
        "end_line": 38,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.SyntacticScopeCreator",
        "src_path": "src/com/google/javascript/jscomp/SyntacticScopeCreator.java",
        "signature": "com.google.javascript.jscomp.SyntacticScopeCreator.ARGUMENTS",
        "snippet": "  private static final String ARGUMENTS = \"arguments\";",
        "begin_line": 42,
        "end_line": 42,
        "comment": " scope, but not explicitly declared."
    },
    {
        "class_name": "com.google.javascript.jscomp.SyntacticScopeCreator",
        "src_path": "src/com/google/javascript/jscomp/SyntacticScopeCreator.java",
        "signature": "com.google.javascript.jscomp.SyntacticScopeCreator.VAR_MULTIPLY_DECLARED_ERROR",
        "snippet": "  public static final DiagnosticType VAR_MULTIPLY_DECLARED_ERROR =\n      DiagnosticType.error(\n          \"JSC_VAR_MULTIPLY_DECLARED_ERROR\",\n          \"Variable {0} first declared in {1}\");",
        "begin_line": 44,
        "end_line": 47,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerInput",
        "src_path": "src/com/google/javascript/jscomp/CompilerInput.java",
        "signature": "com.google.javascript.jscomp.CompilerInput.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 1L;",
        "begin_line": 41,
        "end_line": 41,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerInput",
        "src_path": "src/com/google/javascript/jscomp/CompilerInput.java",
        "signature": "com.google.javascript.jscomp.CompilerInput.module",
        "snippet": "  private JSModule module;",
        "begin_line": 44,
        "end_line": 44,
        "comment": " Info about where the file lives."
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerInput",
        "src_path": "src/com/google/javascript/jscomp/CompilerInput.java",
        "signature": "com.google.javascript.jscomp.CompilerInput.isExtern",
        "snippet": "  private final boolean isExtern;",
        "begin_line": 45,
        "end_line": 45,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerInput",
        "src_path": "src/com/google/javascript/jscomp/CompilerInput.java",
        "signature": "com.google.javascript.jscomp.CompilerInput.name",
        "snippet": "  final private String name;",
        "begin_line": 46,
        "end_line": 46,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerInput",
        "src_path": "src/com/google/javascript/jscomp/CompilerInput.java",
        "signature": "com.google.javascript.jscomp.CompilerInput.ast",
        "snippet": "  private final SourceAst ast;",
        "begin_line": 49,
        "end_line": 49,
        "comment": " The AST."
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerInput",
        "src_path": "src/com/google/javascript/jscomp/CompilerInput.java",
        "signature": "com.google.javascript.jscomp.CompilerInput.provides",
        "snippet": "  private final Set<String> provides = Sets.newHashSet();",
        "begin_line": 52,
        "end_line": 52,
        "comment": " Provided and required symbols."
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerInput",
        "src_path": "src/com/google/javascript/jscomp/CompilerInput.java",
        "signature": "com.google.javascript.jscomp.CompilerInput.requires",
        "snippet": "  private final Set<String> requires = Sets.newHashSet();",
        "begin_line": 53,
        "end_line": 53,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DepsFinder",
        "src_path": "src/com/google/javascript/jscomp/CompilerInput.java",
        "signature": "com.google.javascript.jscomp.DepsFinder.findRequire",
        "snippet": "    private boolean findRequire;",
        "begin_line": 134,
        "end_line": 134,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DepsFinder",
        "src_path": "src/com/google/javascript/jscomp/CompilerInput.java",
        "signature": "com.google.javascript.jscomp.DepsFinder.types",
        "snippet": "    private List<String> types;",
        "begin_line": 135,
        "end_line": 135,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DepsFinder",
        "src_path": "src/com/google/javascript/jscomp/CompilerInput.java",
        "signature": "com.google.javascript.jscomp.DepsFinder.codingConvention",
        "snippet": "    private CodingConvention codingConvention;",
        "begin_line": 136,
        "end_line": 136,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.AllType",
        "src_path": "src/com/google/javascript/rhino/jstype/AllType.java",
        "signature": "com.google.javascript.rhino.jstype.AllType.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 1L;",
        "begin_line": 52,
        "end_line": 52,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.BasicErrorManager",
        "src_path": "src/com/google/javascript/jscomp/BasicErrorManager.java",
        "signature": "com.google.javascript.jscomp.BasicErrorManager.messages",
        "snippet": "  private final SortedSet<ErrorWithLevel> messages =\n      Sets.newTreeSet(new LeveledJSErrorComparator());",
        "begin_line": 40,
        "end_line": 41,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.BasicErrorManager",
        "src_path": "src/com/google/javascript/jscomp/BasicErrorManager.java",
        "signature": "com.google.javascript.jscomp.BasicErrorManager.errorCount",
        "snippet": "  private int errorCount = 0;",
        "begin_line": 42,
        "end_line": 42,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.BasicErrorManager",
        "src_path": "src/com/google/javascript/jscomp/BasicErrorManager.java",
        "signature": "com.google.javascript.jscomp.BasicErrorManager.warningCount",
        "snippet": "  private int warningCount = 0;",
        "begin_line": 43,
        "end_line": 43,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.BasicErrorManager",
        "src_path": "src/com/google/javascript/jscomp/BasicErrorManager.java",
        "signature": "com.google.javascript.jscomp.BasicErrorManager.typedPercent",
        "snippet": "  private double typedPercent = 0.0;",
        "begin_line": 44,
        "end_line": 44,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.LeveledJSErrorComparator",
        "src_path": "src/com/google/javascript/jscomp/BasicErrorManager.java",
        "signature": "com.google.javascript.jscomp.LeveledJSErrorComparator.P1_LT_P2",
        "snippet": "    private static final int P1_LT_P2 = -1;",
        "begin_line": 119,
        "end_line": 119,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.LeveledJSErrorComparator",
        "src_path": "src/com/google/javascript/jscomp/BasicErrorManager.java",
        "signature": "com.google.javascript.jscomp.LeveledJSErrorComparator.P1_GT_P2",
        "snippet": "    private static final int P1_GT_P2 = 1;",
        "begin_line": 120,
        "end_line": 120,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ErrorWithLevel",
        "src_path": "src/com/google/javascript/jscomp/BasicErrorManager.java",
        "signature": "com.google.javascript.jscomp.ErrorWithLevel.error",
        "snippet": "    final JSError error;",
        "begin_line": 176,
        "end_line": 176,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ErrorWithLevel",
        "src_path": "src/com/google/javascript/jscomp/BasicErrorManager.java",
        "signature": "com.google.javascript.jscomp.ErrorWithLevel.level",
        "snippet": "    final CheckLevel level;",
        "begin_line": 177,
        "end_line": 177,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.ErrorFunctionType",
        "src_path": "src/com/google/javascript/rhino/jstype/ErrorFunctionType.java",
        "signature": "com.google.javascript.rhino.jstype.ErrorFunctionType.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 1L;",
        "begin_line": 50,
        "end_line": 50,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DeadAssignmentsElimination",
        "src_path": "src/com/google/javascript/jscomp/DeadAssignmentsElimination.java",
        "signature": "com.google.javascript.jscomp.DeadAssignmentsElimination.compiler",
        "snippet": "  private final AbstractCompiler compiler;",
        "begin_line": 43,
        "end_line": 43,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DeadAssignmentsElimination",
        "src_path": "src/com/google/javascript/jscomp/DeadAssignmentsElimination.java",
        "signature": "com.google.javascript.jscomp.DeadAssignmentsElimination.liveness",
        "snippet": "  private LiveVariablesAnalysis liveness;",
        "begin_line": 44,
        "end_line": 44,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.ObjArray",
        "src_path": "src/com/google/javascript/rhino/ObjArray.java",
        "signature": "com.google.javascript.rhino.ObjArray.serialVersionUID",
        "snippet": "    static final long serialVersionUID = 4174889037736658296L;",
        "begin_line": 52,
        "end_line": 52,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.ObjArray",
        "src_path": "src/com/google/javascript/rhino/ObjArray.java",
        "signature": "com.google.javascript.rhino.ObjArray.size",
        "snippet": "    private int size;",
        "begin_line": 387,
        "end_line": 387,
        "comment": " Number of data elements"
    },
    {
        "class_name": "com.google.javascript.rhino.ObjArray",
        "src_path": "src/com/google/javascript/rhino/ObjArray.java",
        "signature": "com.google.javascript.rhino.ObjArray.FIELDS_STORE_SIZE",
        "snippet": "    private static final int FIELDS_STORE_SIZE = 5;",
        "begin_line": 391,
        "end_line": 391,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.ObjArray",
        "src_path": "src/com/google/javascript/rhino/ObjArray.java",
        "signature": "com.google.javascript.rhino.ObjArray.f0",
        "snippet": "    private transient Object f0, f1, f2, f3, f4;",
        "begin_line": 392,
        "end_line": 392,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.ObjArray",
        "src_path": "src/com/google/javascript/rhino/ObjArray.java",
        "signature": "com.google.javascript.rhino.ObjArray.f1",
        "snippet": "    private transient Object f0, f1, f2, f3, f4;",
        "begin_line": 392,
        "end_line": 392,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.ObjArray",
        "src_path": "src/com/google/javascript/rhino/ObjArray.java",
        "signature": "com.google.javascript.rhino.ObjArray.f2",
        "snippet": "    private transient Object f0, f1, f2, f3, f4;",
        "begin_line": 392,
        "end_line": 392,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.ObjArray",
        "src_path": "src/com/google/javascript/rhino/ObjArray.java",
        "signature": "com.google.javascript.rhino.ObjArray.f3",
        "snippet": "    private transient Object f0, f1, f2, f3, f4;",
        "begin_line": 392,
        "end_line": 392,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.ObjArray",
        "src_path": "src/com/google/javascript/rhino/ObjArray.java",
        "signature": "com.google.javascript.rhino.ObjArray.f4",
        "snippet": "    private transient Object f0, f1, f2, f3, f4;",
        "begin_line": 392,
        "end_line": 392,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.ObjArray",
        "src_path": "src/com/google/javascript/rhino/ObjArray.java",
        "signature": "com.google.javascript.rhino.ObjArray.data",
        "snippet": "    private transient Object[] data;",
        "begin_line": 393,
        "end_line": 393,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CodePrinter",
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "signature": "com.google.javascript.jscomp.CodePrinter.DEFAULT_LINE_LENGTH_THRESHOLD",
        "snippet": "  static final int DEFAULT_LINE_LENGTH_THRESHOLD = 500;",
        "begin_line": 36,
        "end_line": 36,
        "comment": " The number of characters after which we insert a line break in the code"
    },
    {
        "class_name": "com.google.javascript.jscomp.MappedCodePrinter",
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "signature": "com.google.javascript.jscomp.MappedCodePrinter.mappings",
        "snippet": "    final private Stack<Mapping> mappings;",
        "begin_line": 53,
        "end_line": 53,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.MappedCodePrinter",
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "signature": "com.google.javascript.jscomp.MappedCodePrinter.allMappings",
        "snippet": "    final private List<Mapping> allMappings;",
        "begin_line": 54,
        "end_line": 54,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.MappedCodePrinter",
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "signature": "com.google.javascript.jscomp.MappedCodePrinter.createSrcMap",
        "snippet": "    final private boolean createSrcMap;",
        "begin_line": 55,
        "end_line": 55,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Mapping",
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "signature": "com.google.javascript.jscomp.Mapping.node",
        "snippet": "      Node node;",
        "begin_line": 73,
        "end_line": 73,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Mapping",
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "signature": "com.google.javascript.jscomp.Mapping.start",
        "snippet": "      Position start;",
        "begin_line": 74,
        "end_line": 74,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Mapping",
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "signature": "com.google.javascript.jscomp.Mapping.end",
        "snippet": "      Position end;",
        "begin_line": 75,
        "end_line": 75,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.PrettyCodePrinter",
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "signature": "com.google.javascript.jscomp.PrettyCodePrinter.INDENT",
        "snippet": "    static final String INDENT = \"  \";",
        "begin_line": 196,
        "end_line": 196,
        "comment": " The number of characters after which we insert a line break in the code"
    },
    {
        "class_name": "com.google.javascript.jscomp.PrettyCodePrinter",
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "signature": "com.google.javascript.jscomp.PrettyCodePrinter.code",
        "snippet": "    private final StringBuilder code = new StringBuilder(1024);",
        "begin_line": 198,
        "end_line": 198,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.PrettyCodePrinter",
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "signature": "com.google.javascript.jscomp.PrettyCodePrinter.lineLengthThreshold",
        "snippet": "    private final int lineLengthThreshold;",
        "begin_line": 199,
        "end_line": 199,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.PrettyCodePrinter",
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "signature": "com.google.javascript.jscomp.PrettyCodePrinter.indent",
        "snippet": "    private int indent = 0;",
        "begin_line": 200,
        "end_line": 200,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.PrettyCodePrinter",
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "signature": "com.google.javascript.jscomp.PrettyCodePrinter.lineLength",
        "snippet": "    private int lineLength = 0;",
        "begin_line": 201,
        "end_line": 201,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.PrettyCodePrinter",
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "signature": "com.google.javascript.jscomp.PrettyCodePrinter.lineIndex",
        "snippet": "    private int lineIndex = 0;",
        "begin_line": 202,
        "end_line": 202,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CompactCodePrinter",
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "signature": "com.google.javascript.jscomp.CompactCodePrinter.code",
        "snippet": "    private final StringBuilder code = new StringBuilder(1024);",
        "begin_line": 371,
        "end_line": 371,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CompactCodePrinter",
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "signature": "com.google.javascript.jscomp.CompactCodePrinter.lineBreak",
        "snippet": "    private final boolean lineBreak;",
        "begin_line": 373,
        "end_line": 373,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CompactCodePrinter",
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "signature": "com.google.javascript.jscomp.CompactCodePrinter.lineLengthThreshold",
        "snippet": "    private final int lineLengthThreshold;",
        "begin_line": 374,
        "end_line": 374,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CompactCodePrinter",
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "signature": "com.google.javascript.jscomp.CompactCodePrinter.lineIndex",
        "snippet": "    private int lineIndex = 0;",
        "begin_line": 376,
        "end_line": 376,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CompactCodePrinter",
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "signature": "com.google.javascript.jscomp.CompactCodePrinter.lineLength",
        "snippet": "    private int lineLength = 0;",
        "begin_line": 377,
        "end_line": 377,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CompactCodePrinter",
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "signature": "com.google.javascript.jscomp.CompactCodePrinter.lineStartPosition",
        "snippet": "    private int lineStartPosition = 0;",
        "begin_line": 378,
        "end_line": 378,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CompactCodePrinter",
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "signature": "com.google.javascript.jscomp.CompactCodePrinter.preferredBreakPosition",
        "snippet": "    private int preferredBreakPosition = 0;",
        "begin_line": 379,
        "end_line": 379,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Builder",
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "signature": "com.google.javascript.jscomp.Builder.root",
        "snippet": "    private final Node root;",
        "begin_line": 492,
        "end_line": 492,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Builder",
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "signature": "com.google.javascript.jscomp.Builder.prettyPrint",
        "snippet": "    private boolean prettyPrint = false;",
        "begin_line": 493,
        "end_line": 493,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Builder",
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "signature": "com.google.javascript.jscomp.Builder.lineBreak",
        "snippet": "    private boolean lineBreak = false;",
        "begin_line": 494,
        "end_line": 494,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Builder",
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "signature": "com.google.javascript.jscomp.Builder.outputTypes",
        "snippet": "    private boolean outputTypes = false;",
        "begin_line": 495,
        "end_line": 495,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Builder",
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "signature": "com.google.javascript.jscomp.Builder.lineLengthThreshold",
        "snippet": "    private int lineLengthThreshold = DEFAULT_LINE_LENGTH_THRESHOLD;",
        "begin_line": 496,
        "end_line": 496,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Builder",
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "signature": "com.google.javascript.jscomp.Builder.sourceMap",
        "snippet": "    private SourceMap sourceMap = null;",
        "begin_line": 497,
        "end_line": 497,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Builder",
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "signature": "com.google.javascript.jscomp.Builder.outputCharset",
        "snippet": "    private Charset outputCharset = null;",
        "begin_line": 500,
        "end_line": 500,
        "comment": " then just output ASCII."
    },
    {
        "class_name": "com.google.javascript.jscomp.Builder",
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "signature": "com.google.javascript.jscomp.Builder.validation",
        "snippet": "    private boolean validation = true;",
        "begin_line": 501,
        "end_line": 501,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CheckAccidentalSemicolon",
        "src_path": "src/com/google/javascript/jscomp/CheckAccidentalSemicolon.java",
        "signature": "com.google.javascript.jscomp.CheckAccidentalSemicolon.SUSPICIOUS_SEMICOLON",
        "snippet": "  static final DiagnosticType SUSPICIOUS_SEMICOLON = DiagnosticType.warning(\n      \"JSC_SUSPICIOUS_SEMICOLON\",\n      \"If this if/for/while really shouldn't have a body, use {}\");",
        "begin_line": 36,
        "end_line": 38,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CheckAccidentalSemicolon",
        "src_path": "src/com/google/javascript/jscomp/CheckAccidentalSemicolon.java",
        "signature": "com.google.javascript.jscomp.CheckAccidentalSemicolon.level",
        "snippet": "  private final CheckLevel level;",
        "begin_line": 40,
        "end_line": 40,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DiagnosticGroup",
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroup.java",
        "signature": "com.google.javascript.jscomp.DiagnosticGroup.types",
        "snippet": "  private final Set<DiagnosticType> types;",
        "begin_line": 36,
        "end_line": 36,
        "comment": " The set of types represented by this group, hashed by key."
    },
    {
        "class_name": "com.google.javascript.jscomp.DiagnosticGroup",
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroup.java",
        "signature": "com.google.javascript.jscomp.DiagnosticGroup.singletons",
        "snippet": "  private static final Map<DiagnosticType, DiagnosticGroup> singletons =\n      Maps.newHashMap();",
        "begin_line": 53,
        "end_line": 54,
        "comment": " DiagnosticGroups with only a single DiagnosticType."
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.NumberType",
        "src_path": "src/com/google/javascript/rhino/jstype/NumberType.java",
        "signature": "com.google.javascript.rhino.jstype.NumberType.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 1L;",
        "begin_line": 51,
        "end_line": 51,
        "comment": ""
    }
]