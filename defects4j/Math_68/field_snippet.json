[
    {
        "class_name": "org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer",
        "src_path": "src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "signature": "org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer.solvedCols",
        "snippet": "    private int solvedCols;",
        "begin_line": 107,
        "end_line": 107,
        "comment": " Number of solved point. "
    },
    {
        "class_name": "org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer",
        "src_path": "src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "signature": "org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer.diagR",
        "snippet": "    private double[] diagR;",
        "begin_line": 110,
        "end_line": 110,
        "comment": " Diagonal elements of the R matrix in the Q.R. decomposition. "
    },
    {
        "class_name": "org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer",
        "src_path": "src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "signature": "org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer.jacNorm",
        "snippet": "    private double[] jacNorm;",
        "begin_line": 113,
        "end_line": 113,
        "comment": " Norms of the columns of the jacobian matrix. "
    },
    {
        "class_name": "org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer",
        "src_path": "src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "signature": "org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer.beta",
        "snippet": "    private double[] beta;",
        "begin_line": 116,
        "end_line": 116,
        "comment": " Coefficients of the Householder transforms vectors. "
    },
    {
        "class_name": "org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer",
        "src_path": "src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "signature": "org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer.permutation",
        "snippet": "    private int[] permutation;",
        "begin_line": 119,
        "end_line": 119,
        "comment": " Columns permutation array. "
    },
    {
        "class_name": "org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer",
        "src_path": "src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "signature": "org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer.rank",
        "snippet": "    private int rank;",
        "begin_line": 122,
        "end_line": 122,
        "comment": " Rank of the jacobian matrix. "
    },
    {
        "class_name": "org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer",
        "src_path": "src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "signature": "org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer.lmPar",
        "snippet": "    private double lmPar;",
        "begin_line": 125,
        "end_line": 125,
        "comment": " Levenberg-Marquardt parameter. "
    },
    {
        "class_name": "org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer",
        "src_path": "src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "signature": "org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer.lmDir",
        "snippet": "    private double[] lmDir;",
        "begin_line": 128,
        "end_line": 128,
        "comment": " Parameters evolution direction associated with lmPar. "
    },
    {
        "class_name": "org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer",
        "src_path": "src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "signature": "org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer.initialStepBoundFactor",
        "snippet": "    private double initialStepBoundFactor;",
        "begin_line": 131,
        "end_line": 131,
        "comment": " Positive input variable used in determining the initial step bound. "
    },
    {
        "class_name": "org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer",
        "src_path": "src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "signature": "org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer.costRelativeTolerance",
        "snippet": "    private double costRelativeTolerance;",
        "begin_line": 134,
        "end_line": 134,
        "comment": " Desired relative error in the sum of squares. "
    },
    {
        "class_name": "org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer",
        "src_path": "src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "signature": "org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer.parRelativeTolerance",
        "snippet": "    private double parRelativeTolerance;",
        "begin_line": 137,
        "end_line": 137,
        "comment": "  Desired relative error in the approximate solution parameters. "
    },
    {
        "class_name": "org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer",
        "src_path": "src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "signature": "org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer.orthoTolerance",
        "snippet": "    private double orthoTolerance;",
        "begin_line": 141,
        "end_line": 141,
        "comment": " Desired max cosine on the orthogonality between the function vector\n     * and the columns of the jacobian. "
    },
    {
        "class_name": "org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer",
        "src_path": "src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java",
        "signature": "org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer.DEFAULT_MAX_ITERATIONS",
        "snippet": "    public static final int DEFAULT_MAX_ITERATIONS = 100;",
        "begin_line": 46,
        "end_line": 46,
        "comment": " Default maximal number of iterations allowed. "
    },
    {
        "class_name": "org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer",
        "src_path": "src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java",
        "signature": "org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer.checker",
        "snippet": "    protected VectorialConvergenceChecker checker;",
        "begin_line": 49,
        "end_line": 49,
        "comment": " Convergence checker. "
    },
    {
        "class_name": "org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer",
        "src_path": "src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java",
        "signature": "org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer.jacobian",
        "snippet": "    protected double[][] jacobian;",
        "begin_line": 58,
        "end_line": 58,
        "comment": "\n     * Jacobian matrix.\n     * <p>This matrix is in canonical form just after the calls to\n     * {@link #updateJacobian()}, but may be modified by the solver\n     * in the derived class (the {@link LevenbergMarquardtOptimizer\n     * Levenberg-Marquardt optimizer} does this).</p>\n     "
    },
    {
        "class_name": "org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer",
        "src_path": "src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java",
        "signature": "org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer.cols",
        "snippet": "    protected int cols;",
        "begin_line": 61,
        "end_line": 61,
        "comment": " Number of columns of the jacobian matrix. "
    },
    {
        "class_name": "org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer",
        "src_path": "src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java",
        "signature": "org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer.rows",
        "snippet": "    protected int rows;",
        "begin_line": 64,
        "end_line": 64,
        "comment": " Number of rows of the jacobian matrix. "
    },
    {
        "class_name": "org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer",
        "src_path": "src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java",
        "signature": "org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer.targetValues",
        "snippet": "    protected double[] targetValues;",
        "begin_line": 70,
        "end_line": 70,
        "comment": "\n     * Target value for the objective functions at optimum.\n     * @since 2.1\n     "
    },
    {
        "class_name": "org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer",
        "src_path": "src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java",
        "signature": "org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer.residualsWeights",
        "snippet": "    protected double[] residualsWeights;",
        "begin_line": 76,
        "end_line": 76,
        "comment": "\n     * Weight for the least squares cost computation.\n     * @since 2.1\n     "
    },
    {
        "class_name": "org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer",
        "src_path": "src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java",
        "signature": "org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer.point",
        "snippet": "    protected double[] point;",
        "begin_line": 79,
        "end_line": 79,
        "comment": " Current point. "
    },
    {
        "class_name": "org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer",
        "src_path": "src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java",
        "signature": "org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer.objective",
        "snippet": "    protected double[] objective;",
        "begin_line": 82,
        "end_line": 82,
        "comment": " Current objective function value. "
    },
    {
        "class_name": "org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer",
        "src_path": "src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java",
        "signature": "org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer.residuals",
        "snippet": "    protected double[] residuals;",
        "begin_line": 85,
        "end_line": 85,
        "comment": " Current residuals. "
    },
    {
        "class_name": "org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer",
        "src_path": "src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java",
        "signature": "org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer.cost",
        "snippet": "    protected double cost;",
        "begin_line": 88,
        "end_line": 88,
        "comment": " Cost value (square root of the sum of the residuals). "
    },
    {
        "class_name": "org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer",
        "src_path": "src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java",
        "signature": "org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer.maxIterations",
        "snippet": "    private int maxIterations;",
        "begin_line": 91,
        "end_line": 91,
        "comment": " Maximal number of iterations allowed. "
    },
    {
        "class_name": "org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer",
        "src_path": "src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java",
        "signature": "org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer.iterations",
        "snippet": "    private int iterations;",
        "begin_line": 94,
        "end_line": 94,
        "comment": " Number of iterations already performed. "
    },
    {
        "class_name": "org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer",
        "src_path": "src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java",
        "signature": "org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer.maxEvaluations",
        "snippet": "    private int maxEvaluations;",
        "begin_line": 97,
        "end_line": 97,
        "comment": " Maximal number of evaluations allowed. "
    },
    {
        "class_name": "org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer",
        "src_path": "src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java",
        "signature": "org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer.objectiveEvaluations",
        "snippet": "    private int objectiveEvaluations;",
        "begin_line": 100,
        "end_line": 100,
        "comment": " Number of evaluations already performed. "
    },
    {
        "class_name": "org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer",
        "src_path": "src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java",
        "signature": "org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer.jacobianEvaluations",
        "snippet": "    private int jacobianEvaluations;",
        "begin_line": 103,
        "end_line": 103,
        "comment": " Number of jacobian evaluations. "
    },
    {
        "class_name": "org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer",
        "src_path": "src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java",
        "signature": "org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer.function",
        "snippet": "    private DifferentiableMultivariateVectorialFunction function;",
        "begin_line": 106,
        "end_line": 106,
        "comment": " Objective function. "
    },
    {
        "class_name": "org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer",
        "src_path": "src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java",
        "signature": "org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer.jF",
        "snippet": "    private MultivariateMatrixFunction jF;",
        "begin_line": 109,
        "end_line": 109,
        "comment": " Objective function derivatives. "
    },
    {
        "class_name": "org.apache.commons.math.optimization.VectorialPointValuePair",
        "src_path": "src/main/java/org/apache/commons/math/optimization/VectorialPointValuePair.java",
        "signature": "org.apache.commons.math.optimization.VectorialPointValuePair.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 1003888396256744753L;",
        "begin_line": 33,
        "end_line": 33,
        "comment": " Serializable version identifier. "
    },
    {
        "class_name": "org.apache.commons.math.optimization.VectorialPointValuePair",
        "src_path": "src/main/java/org/apache/commons/math/optimization/VectorialPointValuePair.java",
        "signature": "org.apache.commons.math.optimization.VectorialPointValuePair.point",
        "snippet": "    private final double[] point;",
        "begin_line": 36,
        "end_line": 36,
        "comment": " Point coordinates. "
    },
    {
        "class_name": "org.apache.commons.math.optimization.VectorialPointValuePair",
        "src_path": "src/main/java/org/apache/commons/math/optimization/VectorialPointValuePair.java",
        "signature": "org.apache.commons.math.optimization.VectorialPointValuePair.value",
        "snippet": "    private final double[] value;",
        "begin_line": 39,
        "end_line": 39,
        "comment": " Vectorial value of the objective function at the point. "
    },
    {
        "class_name": "org.apache.commons.math.optimization.SimpleVectorialValueChecker",
        "src_path": "src/main/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java",
        "signature": "org.apache.commons.math.optimization.SimpleVectorialValueChecker.DEFAULT_RELATIVE_THRESHOLD",
        "snippet": "    private static final double DEFAULT_RELATIVE_THRESHOLD = 100 * MathUtils.EPSILON;",
        "begin_line": 37,
        "end_line": 37,
        "comment": " Default relative threshold. "
    },
    {
        "class_name": "org.apache.commons.math.optimization.SimpleVectorialValueChecker",
        "src_path": "src/main/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java",
        "signature": "org.apache.commons.math.optimization.SimpleVectorialValueChecker.DEFAULT_ABSOLUTE_THRESHOLD",
        "snippet": "    private static final double DEFAULT_ABSOLUTE_THRESHOLD = 100 * MathUtils.SAFE_MIN;",
        "begin_line": 40,
        "end_line": 40,
        "comment": " Default absolute threshold. "
    },
    {
        "class_name": "org.apache.commons.math.optimization.SimpleVectorialValueChecker",
        "src_path": "src/main/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java",
        "signature": "org.apache.commons.math.optimization.SimpleVectorialValueChecker.relativeThreshold",
        "snippet": "    private final double relativeThreshold;",
        "begin_line": 43,
        "end_line": 43,
        "comment": " Relative tolerance threshold. "
    },
    {
        "class_name": "org.apache.commons.math.optimization.SimpleVectorialValueChecker",
        "src_path": "src/main/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java",
        "signature": "org.apache.commons.math.optimization.SimpleVectorialValueChecker.absoluteThreshold",
        "snippet": "    private final double absoluteThreshold;",
        "begin_line": 46,
        "end_line": 46,
        "comment": " Absolute tolerance threshold. "
    }
]