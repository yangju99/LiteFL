[
    {
        "class_name": "org.apache.commons.lang3.text.ExtendedMessageFormatTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/ExtendedMessageFormatTest.java",
        "signature": "org.apache.commons.lang3.text.ExtendedMessageFormatTest.ExtendedMessageFormatTest(java.lang.String)",
        "snippet": "    public ExtendedMessageFormatTest(String name) {\n        super(name);\n    }\n",
        "begin_line": 54,
        "end_line": 56,
        "comment": "\n     * Create a new test case.\n     *\n     * @param name The name of the test\n     ",
        "child_ranges": [
            "(line 55,col 9)-(line 55,col 20)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.ExtendedMessageFormatTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/ExtendedMessageFormatTest.java",
        "signature": "org.apache.commons.lang3.text.ExtendedMessageFormatTest.setUp()",
        "snippet": "    @Override\n    protected void setUp() throws Exception {\n        super.setUp();\n        registry.put(\"lower\", new LowerCaseFormatFactory());\n        registry.put(\"upper\", new UpperCaseFormatFactory());\n    }\n",
        "begin_line": 58,
        "end_line": 63,
        "comment": "",
        "child_ranges": [
            "(line 60,col 9)-(line 60,col 22)",
            "(line 61,col 9)-(line 61,col 60)",
            "(line 62,col 9)-(line 62,col 60)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.ExtendedMessageFormatTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/ExtendedMessageFormatTest.java",
        "signature": "org.apache.commons.lang3.text.ExtendedMessageFormatTest.testExtendedFormats()",
        "snippet": "    public void testExtendedFormats() {\n        String pattern = \"Lower: {0,lower} Upper: {1,upper}\";\n        ExtendedMessageFormat emf = new ExtendedMessageFormat(pattern, registry);\n        assertPatternsEqual(\"TOPATTERN\", pattern, emf.toPattern());\n        assertEquals(\"Lower: foo Upper: BAR\", emf.format(new Object[] {\"foo\", \"bar\"}));\n        assertEquals(\"Lower: foo Upper: BAR\", emf.format(new Object[] {\"Foo\", \"Bar\"}));\n        assertEquals(\"Lower: foo Upper: BAR\", emf.format(new Object[] {\"FOO\", \"BAR\"}));\n        assertEquals(\"Lower: foo Upper: BAR\", emf.format(new Object[] {\"FOO\", \"bar\"}));\n        assertEquals(\"Lower: foo Upper: BAR\", emf.format(new Object[] {\"foo\", \"BAR\"}));\n    }\n",
        "begin_line": 68,
        "end_line": 77,
        "comment": "\n     * Test extended formats.\n     ",
        "child_ranges": [
            "(line 69,col 9)-(line 69,col 61)",
            "(line 70,col 9)-(line 70,col 81)",
            "(line 71,col 9)-(line 71,col 67)",
            "(line 72,col 9)-(line 72,col 87)",
            "(line 73,col 9)-(line 73,col 87)",
            "(line 74,col 9)-(line 74,col 87)",
            "(line 75,col 9)-(line 75,col 87)",
            "(line 76,col 9)-(line 76,col 87)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.ExtendedMessageFormatTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/ExtendedMessageFormatTest.java",
        "signature": "org.apache.commons.lang3.text.ExtendedMessageFormatTest.testEscapedQuote_LANG_477()",
        "snippet": "    public void testEscapedQuote_LANG_477() {\n        String pattern = \"it''s a {0,lower} 'test'!\";\n        ExtendedMessageFormat emf = new ExtendedMessageFormat(pattern, registry);\n        assertEquals(\"it's a dummy test!\", emf.format(new Object[] {\"DUMMY\"}));\n    }\n",
        "begin_line": 82,
        "end_line": 86,
        "comment": "\n     * Test Bug LANG-477 - out of memory error with escaped quote\n     ",
        "child_ranges": [
            "(line 83,col 9)-(line 83,col 53)",
            "(line 84,col 9)-(line 84,col 81)",
            "(line 85,col 9)-(line 85,col 79)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.ExtendedMessageFormatTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/ExtendedMessageFormatTest.java",
        "signature": "org.apache.commons.lang3.text.ExtendedMessageFormatTest.testExtendedAndBuiltInFormats()",
        "snippet": "    public void testExtendedAndBuiltInFormats() {\n        Calendar cal = Calendar.getInstance();\n        cal.set(2007, Calendar.JANUARY, 23, 18, 33, 05);\n        Object[] args = new Object[] {\"John Doe\", cal.getTime(), new Double(\"12345.67\")};\n        String builtinsPattern = \"DOB: {1,date,short} Salary: {2,number,currency}\";\n        String extendedPattern = \"Name: {0,upper} \";\n        String pattern = extendedPattern + builtinsPattern;\n\n        HashSet<Locale> testLocales = new HashSet<Locale>();\n        testLocales.addAll(Arrays.asList(DateFormat.getAvailableLocales()));\n        testLocales.retainAll(Arrays.asList(NumberFormat.getAvailableLocales()));\n        testLocales.add(null);\n\n        for (Iterator<Locale> l = testLocales.iterator(); l.hasNext();) {\n            Locale locale = l.next();\n            MessageFormat builtins = createMessageFormat(builtinsPattern, locale);\n            String expectedPattern = extendedPattern + builtins.toPattern();\n            DateFormat df = null;\n            NumberFormat nf = null;\n            ExtendedMessageFormat emf = null;\n            if (locale == null) {\n                df = DateFormat.getDateInstance(DateFormat.SHORT);\n                nf = NumberFormat.getCurrencyInstance();\n                emf = new ExtendedMessageFormat(pattern, registry);\n            } else {\n                df = DateFormat.getDateInstance(DateFormat.SHORT, locale);\n                nf = NumberFormat.getCurrencyInstance(locale);\n                emf = new ExtendedMessageFormat(pattern, locale, registry);\n            }\n            StringBuffer expected = new StringBuffer();\n            expected.append(\"Name: \");\n            expected.append(args[0].toString().toUpperCase());\n            expected.append(\" DOB: \");\n            expected.append(df.format(args[1]));\n            expected.append(\" Salary: \");\n            expected.append(nf.format(args[2]));\n            assertPatternsEqual(\"pattern comparison for locale \" + locale, expectedPattern, emf.toPattern());\n            assertEquals(String.valueOf(locale), expected.toString(), emf.format(args));\n        }\n    }\n",
        "begin_line": 91,
        "end_line": 130,
        "comment": "\n     * Test extended and built in formats.\n     ",
        "child_ranges": [
            "(line 92,col 9)-(line 92,col 46)",
            "(line 93,col 9)-(line 93,col 56)",
            "(line 94,col 9)-(line 94,col 89)",
            "(line 95,col 9)-(line 95,col 83)",
            "(line 96,col 9)-(line 96,col 52)",
            "(line 97,col 9)-(line 97,col 59)",
            "(line 99,col 9)-(line 99,col 60)",
            "(line 100,col 9)-(line 100,col 76)",
            "(line 101,col 9)-(line 101,col 81)",
            "(line 102,col 9)-(line 102,col 30)",
            "(line 104,col 9)-(line 129,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.ExtendedMessageFormatTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/ExtendedMessageFormatTest.java",
        "signature": "org.apache.commons.lang3.text.ExtendedMessageFormatTest.testBuiltInChoiceFormat()",
        "snippet": "    public void testBuiltInChoiceFormat() {\n        Object[] values = new Number[] {new Integer(1), new Double(\"2.2\"), new Double(\"1234.5\")};\n        String choicePattern = null;\n        Locale[] availableLocales = ChoiceFormat.getAvailableLocales();\n\n        choicePattern = \"{0,choice,1#One|2#Two|3#Many {0,number}}\";\n        for (int i = 0; i < values.length; i++) {\n            checkBuiltInFormat(values[i] + \": \" + choicePattern, new Object[] {values[i]}, availableLocales);\n        }\n\n        choicePattern = \"{0,choice,1#''One''|2#\\\"Two\\\"|3#''{Many}'' {0,number}}\";\n        for (int i = 0; i < values.length; i++) {\n            checkBuiltInFormat(values[i] + \": \" + choicePattern, new Object[] {values[i]}, availableLocales);\n        }\n    }\n",
        "begin_line": 190,
        "end_line": 204,
        "comment": "\n     * Test the built in choice format.\n     ",
        "child_ranges": [
            "(line 191,col 9)-(line 191,col 97)",
            "(line 192,col 9)-(line 192,col 36)",
            "(line 193,col 9)-(line 193,col 71)",
            "(line 195,col 9)-(line 195,col 67)",
            "(line 196,col 9)-(line 198,col 9)",
            "(line 200,col 9)-(line 200,col 81)",
            "(line 201,col 9)-(line 203,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.ExtendedMessageFormatTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/ExtendedMessageFormatTest.java",
        "signature": "org.apache.commons.lang3.text.ExtendedMessageFormatTest.testBuiltInDateTimeFormat()",
        "snippet": "    public void testBuiltInDateTimeFormat() {\n        Calendar cal = Calendar.getInstance();\n        cal.set(2007, Calendar.JANUARY, 23, 18, 33, 05);\n        Object[] args = new Object[] {cal.getTime()};\n        Locale[] availableLocales = DateFormat.getAvailableLocales();\n\n        checkBuiltInFormat(\"1: {0,date,short}\",    args, availableLocales);\n        checkBuiltInFormat(\"2: {0,date,medium}\",   args, availableLocales);\n        checkBuiltInFormat(\"3: {0,date,long}\",     args, availableLocales);\n        checkBuiltInFormat(\"4: {0,date,full}\",     args, availableLocales);\n        checkBuiltInFormat(\"5: {0,date,d MMM yy}\", args, availableLocales);\n        checkBuiltInFormat(\"6: {0,time,short}\",    args, availableLocales);\n        checkBuiltInFormat(\"7: {0,time,medium}\",   args, availableLocales);\n        checkBuiltInFormat(\"8: {0,time,long}\",     args, availableLocales);\n        checkBuiltInFormat(\"9: {0,time,full}\",     args, availableLocales);\n        checkBuiltInFormat(\"10: {0,time,HH:mm}\",   args, availableLocales);\n        checkBuiltInFormat(\"11: {0,date}\",         args, availableLocales);\n        checkBuiltInFormat(\"12: {0,time}\",         args, availableLocales);\n    }\n",
        "begin_line": 209,
        "end_line": 227,
        "comment": "\n     * Test the built in date/time formats\n     ",
        "child_ranges": [
            "(line 210,col 9)-(line 210,col 46)",
            "(line 211,col 9)-(line 211,col 56)",
            "(line 212,col 9)-(line 212,col 53)",
            "(line 213,col 9)-(line 213,col 69)",
            "(line 215,col 9)-(line 215,col 75)",
            "(line 216,col 9)-(line 216,col 75)",
            "(line 217,col 9)-(line 217,col 75)",
            "(line 218,col 9)-(line 218,col 75)",
            "(line 219,col 9)-(line 219,col 75)",
            "(line 220,col 9)-(line 220,col 75)",
            "(line 221,col 9)-(line 221,col 75)",
            "(line 222,col 9)-(line 222,col 75)",
            "(line 223,col 9)-(line 223,col 75)",
            "(line 224,col 9)-(line 224,col 75)",
            "(line 225,col 9)-(line 225,col 75)",
            "(line 226,col 9)-(line 226,col 75)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.ExtendedMessageFormatTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/ExtendedMessageFormatTest.java",
        "signature": "org.apache.commons.lang3.text.ExtendedMessageFormatTest.testOverriddenBuiltinFormat()",
        "snippet": "    public void testOverriddenBuiltinFormat() {\n        Calendar cal = Calendar.getInstance();\n        cal.set(2007, Calendar.JANUARY, 23);\n        Object[] args = new Object[] {cal.getTime()};\n        Locale[] availableLocales = DateFormat.getAvailableLocales();\n        Map<String, ? extends FormatFactory> registry = Collections.singletonMap(\"date\", new OverrideShortDateFormatFactory());\n\n        //check the non-overridden builtins:\n        checkBuiltInFormat(\"1: {0,date}\", registry,          args, availableLocales);\n        checkBuiltInFormat(\"2: {0,date,medium}\", registry,   args, availableLocales);\n        checkBuiltInFormat(\"3: {0,date,long}\", registry,     args, availableLocales);\n        checkBuiltInFormat(\"4: {0,date,full}\", registry,     args, availableLocales);\n        checkBuiltInFormat(\"5: {0,date,d MMM yy}\", registry, args, availableLocales);\n\n        //check the overridden format:\n        for (int i = -1; i < availableLocales.length; i++) {\n            Locale locale = i < 0 ? null : availableLocales[i];\n            MessageFormat dateDefault = createMessageFormat(\"{0,date}\", locale);\n            String pattern = \"{0,date,short}\";\n            ExtendedMessageFormat dateShort = new ExtendedMessageFormat(pattern, locale, registry);\n            assertEquals(\"overridden date,short format\", dateDefault.format(args), dateShort.format(args));\n            assertEquals(\"overridden date,short pattern\", pattern, dateShort.toPattern());\n        }\n    }\n",
        "begin_line": 229,
        "end_line": 252,
        "comment": "",
        "child_ranges": [
            "(line 230,col 9)-(line 230,col 46)",
            "(line 231,col 9)-(line 231,col 44)",
            "(line 232,col 9)-(line 232,col 53)",
            "(line 233,col 9)-(line 233,col 69)",
            "(line 234,col 9)-(line 234,col 127)",
            "(line 237,col 9)-(line 237,col 85)",
            "(line 238,col 9)-(line 238,col 85)",
            "(line 239,col 9)-(line 239,col 85)",
            "(line 240,col 9)-(line 240,col 85)",
            "(line 241,col 9)-(line 241,col 85)",
            "(line 244,col 9)-(line 251,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.ExtendedMessageFormatTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/ExtendedMessageFormatTest.java",
        "signature": "org.apache.commons.lang3.text.ExtendedMessageFormatTest.testBuiltInNumberFormat()",
        "snippet": "    public void testBuiltInNumberFormat() {\n        Object[] args = new Object[] {new Double(\"6543.21\")};\n        Locale[] availableLocales = NumberFormat.getAvailableLocales();\n        checkBuiltInFormat(\"1: {0,number}\",            args, availableLocales);\n        checkBuiltInFormat(\"2: {0,number,integer}\",    args, availableLocales);\n        checkBuiltInFormat(\"3: {0,number,currency}\",   args, availableLocales);\n        checkBuiltInFormat(\"4: {0,number,percent}\",    args, availableLocales);\n        checkBuiltInFormat(\"5: {0,number,00000.000}\",  args, availableLocales);\n    }\n",
        "begin_line": 257,
        "end_line": 265,
        "comment": "\n     * Test the built in number formats.\n     ",
        "child_ranges": [
            "(line 258,col 9)-(line 258,col 61)",
            "(line 259,col 9)-(line 259,col 71)",
            "(line 260,col 9)-(line 260,col 79)",
            "(line 261,col 9)-(line 261,col 79)",
            "(line 262,col 9)-(line 262,col 79)",
            "(line 263,col 9)-(line 263,col 79)",
            "(line 264,col 9)-(line 264,col 79)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.ExtendedMessageFormatTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/ExtendedMessageFormatTest.java",
        "signature": "org.apache.commons.lang3.text.ExtendedMessageFormatTest.testEqualsHashcode()",
        "snippet": "    public void testEqualsHashcode() {\n        Map<String, ? extends FormatFactory> registry = Collections.singletonMap(\"testfmt\", new LowerCaseFormatFactory());\n        Map<String, ? extends FormatFactory> otherRegitry = Collections.singletonMap(\"testfmt\", new UpperCaseFormatFactory());\n\n        String pattern = \"Pattern: {0,testfmt}\";\n        ExtendedMessageFormat emf = new ExtendedMessageFormat(pattern, Locale.US, registry);\n\n        ExtendedMessageFormat other = null;\n\n        // Same object\n        assertTrue(\"same, equals()\",   emf.equals(emf));\n        assertTrue(\"same, hashcode()\", emf.hashCode() == emf.hashCode());\n\n        // Equal Object\n        other = new ExtendedMessageFormat(pattern, Locale.US, registry);\n        assertTrue(\"equal, equals()\",   emf.equals(other));\n        assertTrue(\"equal, hashcode()\", emf.hashCode() == other.hashCode());\n\n        // Different Class\n        other = new OtherExtendedMessageFormat(pattern, Locale.US, registry);\n        assertFalse(\"class, equals()\",  emf.equals(other));\n        assertTrue(\"class, hashcode()\", emf.hashCode() == other.hashCode()); // same hashcode\n        \n        // Different pattern\n        other = new ExtendedMessageFormat(\"X\" + pattern, Locale.US, registry);\n        assertFalse(\"pattern, equals()\",   emf.equals(other));\n        assertFalse(\"pattern, hashcode()\", emf.hashCode() == other.hashCode());\n\n        // Different registry\n        other = new ExtendedMessageFormat(pattern, Locale.US, otherRegitry);\n        assertFalse(\"registry, equals()\",   emf.equals(other));\n        assertFalse(\"registry, hashcode()\", emf.hashCode() == other.hashCode());\n\n        // Different Locale\n        other = new ExtendedMessageFormat(pattern, Locale.FRANCE, registry);\n        assertFalse(\"locale, equals()\",  emf.equals(other));\n        assertTrue(\"locale, hashcode()\", emf.hashCode() == other.hashCode()); // same hashcode\n    }\n",
        "begin_line": 270,
        "end_line": 307,
        "comment": "\n     * Test equals() and hashcode.\n     ",
        "child_ranges": [
            "(line 271,col 9)-(line 271,col 122)",
            "(line 272,col 9)-(line 272,col 126)",
            "(line 274,col 9)-(line 274,col 48)",
            "(line 275,col 9)-(line 275,col 92)",
            "(line 277,col 9)-(line 277,col 43)",
            "(line 280,col 9)-(line 280,col 56)",
            "(line 281,col 9)-(line 281,col 73)",
            "(line 284,col 9)-(line 284,col 72)",
            "(line 285,col 9)-(line 285,col 59)",
            "(line 286,col 9)-(line 286,col 76)",
            "(line 289,col 9)-(line 289,col 77)",
            "(line 290,col 9)-(line 290,col 59)",
            "(line 291,col 9)-(line 291,col 76)",
            "(line 294,col 9)-(line 294,col 78)",
            "(line 295,col 9)-(line 295,col 62)",
            "(line 296,col 9)-(line 296,col 79)",
            "(line 299,col 9)-(line 299,col 76)",
            "(line 300,col 9)-(line 300,col 63)",
            "(line 301,col 9)-(line 301,col 80)",
            "(line 304,col 9)-(line 304,col 76)",
            "(line 305,col 9)-(line 305,col 60)",
            "(line 306,col 9)-(line 306,col 77)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.ExtendedMessageFormatTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/ExtendedMessageFormatTest.java",
        "signature": "org.apache.commons.lang3.text.ExtendedMessageFormatTest.checkBuiltInFormat(java.lang.String, java.lang.Object[], java.util.Locale[])",
        "snippet": "    private void checkBuiltInFormat(String pattern, Object[] args, Locale[] locales) {\n        checkBuiltInFormat(pattern, null, args, locales);\n    }\n",
        "begin_line": 315,
        "end_line": 317,
        "comment": "\n     * Test a built in format for the specified Locales, plus <code>null</code> Locale.\n     * @param pattern MessageFormat pattern\n     * @param args MessageFormat arguments\n     * @param locales to test\n     ",
        "child_ranges": [
            "(line 316,col 9)-(line 316,col 57)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.ExtendedMessageFormatTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/ExtendedMessageFormatTest.java",
        "signature": "org.apache.commons.lang3.text.ExtendedMessageFormatTest.checkBuiltInFormat(java.lang.String, java.util.Map<java.lang.String, ?>, java.lang.Object[], java.util.Locale[])",
        "snippet": "    private void checkBuiltInFormat(String pattern, Map<String, ?> registry, Object[] args, Locale[] locales) {\n        checkBuiltInFormat(pattern, registry, args, (Locale) null);\n        for (int i = 0; i < locales.length; i++) {\n            checkBuiltInFormat(pattern, registry, args, locales[i]);\n        }\n    }\n",
        "begin_line": 326,
        "end_line": 331,
        "comment": "\n     * Test a built in format for the specified Locales, plus <code>null</code> Locale.\n     * @param pattern MessageFormat pattern\n     * @param registry FormatFactory registry to use\n     * @param args MessageFormat arguments\n     * @param locales to test\n     ",
        "child_ranges": [
            "(line 327,col 9)-(line 327,col 67)",
            "(line 328,col 9)-(line 330,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.ExtendedMessageFormatTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/ExtendedMessageFormatTest.java",
        "signature": "org.apache.commons.lang3.text.ExtendedMessageFormatTest.checkBuiltInFormat(java.lang.String, java.util.Map<java.lang.String, ?>, java.lang.Object[], java.util.Locale)",
        "snippet": "    private void checkBuiltInFormat(String pattern, Map<String, ?> registry, Object[] args, Locale locale) {\n        StringBuffer buffer = new StringBuffer();\n        buffer.append(\"Pattern=[\");\n        buffer.append(pattern);\n        buffer.append(\"], locale=[\");\n        buffer.append(locale);\n        buffer.append(\"]\");\n        MessageFormat mf = createMessageFormat(pattern, locale);\n        // System.out.println(buffer + \", result=[\" + mf.format(args) +\"]\");\n        ExtendedMessageFormat emf = null;\n        if (locale == null) {\n            emf = new ExtendedMessageFormat(pattern);\n        } else {\n            emf = new ExtendedMessageFormat(pattern, locale);\n        }\n        assertEquals(\"format \"    + buffer.toString(), mf.format(args), emf.format(args));\n        assertPatternsEqual(\"toPattern \" + buffer.toString(), mf.toPattern(),  emf.toPattern());\n    }\n",
        "begin_line": 341,
        "end_line": 358,
        "comment": "\n     * Create an ExtendedMessageFormat for the specified pattern and locale and check the\n     * formated output matches the expected result for the parameters.\n     * @param pattern string\n     * @param registry map\n     * @param args Object[]\n     * @param locale Locale\n     ",
        "child_ranges": [
            "(line 342,col 9)-(line 342,col 49)",
            "(line 343,col 9)-(line 343,col 35)",
            "(line 344,col 9)-(line 344,col 31)",
            "(line 345,col 9)-(line 345,col 37)",
            "(line 346,col 9)-(line 346,col 30)",
            "(line 347,col 9)-(line 347,col 27)",
            "(line 348,col 9)-(line 348,col 64)",
            "(line 350,col 9)-(line 350,col 41)",
            "(line 351,col 9)-(line 355,col 9)",
            "(line 356,col 9)-(line 356,col 90)",
            "(line 357,col 9)-(line 357,col 96)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.ExtendedMessageFormatTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/ExtendedMessageFormatTest.java",
        "signature": "org.apache.commons.lang3.text.ExtendedMessageFormatTest.assertPatternsEqual(java.lang.String, java.lang.String, java.lang.String)",
        "snippet": "    private void assertPatternsEqual(String message, String expected, String actual) {\n        if (SystemUtils.isJavaVersionAtLeast(1.4f)) {\n            assertEquals(message, expected, actual);\n        }\n    }\n",
        "begin_line": 361,
        "end_line": 365,
        "comment": "can't trust what MessageFormat does with toPattern() pre 1.4:",
        "child_ranges": [
            "(line 362,col 9)-(line 364,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.ExtendedMessageFormatTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/ExtendedMessageFormatTest.java",
        "signature": "org.apache.commons.lang3.text.ExtendedMessageFormatTest.createMessageFormat(java.lang.String, java.util.Locale)",
        "snippet": "    private MessageFormat createMessageFormat(String pattern, Locale locale) {\n        MessageFormat result = new MessageFormat(pattern);\n        if (locale != null) {\n            result.setLocale(locale);\n            result.applyPattern(pattern);\n        }\n        return result;\n    }\n",
        "begin_line": 373,
        "end_line": 380,
        "comment": "\n     * Replace MessageFormat(String, Locale) constructor (not available until JDK 1.4).\n     * @param pattern string\n     * @param locale Locale\n     * @return MessageFormat\n     ",
        "child_ranges": [
            "(line 374,col 9)-(line 374,col 58)",
            "(line 375,col 9)-(line 378,col 9)",
            "(line 379,col 9)-(line 379,col 22)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.ExtendedMessageFormatTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/ExtendedMessageFormatTest.java",
        "signature": "org.apache.commons.lang3.text.ExtendedMessageFormatTest.LowerCaseFormat.format(java.lang.Object, java.lang.StringBuffer, java.text.FieldPosition)",
        "snippet": "        @Override\n        public StringBuffer format(Object obj, StringBuffer toAppendTo, FieldPosition pos) {\n            return toAppendTo.append(((String)obj).toLowerCase());\n        }\n",
        "begin_line": 388,
        "end_line": 391,
        "comment": "",
        "child_ranges": [
            "(line 390,col 13)-(line 390,col 66)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.ExtendedMessageFormatTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/ExtendedMessageFormatTest.java",
        "signature": "org.apache.commons.lang3.text.ExtendedMessageFormatTest.LowerCaseFormat.parseObject(java.lang.String, java.text.ParsePosition)",
        "snippet": "        @Override\n        public Object parseObject(String source, ParsePosition pos) {throw new UnsupportedOperationException();}\n",
        "begin_line": 392,
        "end_line": 393,
        "comment": "",
        "child_ranges": [
            "(line 393,col 70)-(line 393,col 111)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.ExtendedMessageFormatTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/ExtendedMessageFormatTest.java",
        "signature": "org.apache.commons.lang3.text.ExtendedMessageFormatTest.UpperCaseFormat.format(java.lang.Object, java.lang.StringBuffer, java.text.FieldPosition)",
        "snippet": "        @Override\n        public StringBuffer format(Object obj, StringBuffer toAppendTo, FieldPosition pos) {\n            return toAppendTo.append(((String)obj).toUpperCase());\n        }\n",
        "begin_line": 400,
        "end_line": 403,
        "comment": "",
        "child_ranges": [
            "(line 402,col 13)-(line 402,col 66)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.ExtendedMessageFormatTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/ExtendedMessageFormatTest.java",
        "signature": "org.apache.commons.lang3.text.ExtendedMessageFormatTest.UpperCaseFormat.parseObject(java.lang.String, java.text.ParsePosition)",
        "snippet": "        @Override\n        public Object parseObject(String source, ParsePosition pos) {throw new UnsupportedOperationException();}\n",
        "begin_line": 404,
        "end_line": 405,
        "comment": "",
        "child_ranges": [
            "(line 405,col 70)-(line 405,col 111)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.ExtendedMessageFormatTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/ExtendedMessageFormatTest.java",
        "signature": "org.apache.commons.lang3.text.ExtendedMessageFormatTest.LowerCaseFormatFactory.getFormat(java.lang.String, java.lang.String, java.util.Locale)",
        "snippet": "        public Format getFormat(String name, String arguments, Locale locale) {\n            return LOWER_INSTANCE;\n        }\n",
        "begin_line": 415,
        "end_line": 417,
        "comment": "",
        "child_ranges": [
            "(line 416,col 13)-(line 416,col 34)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.ExtendedMessageFormatTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/ExtendedMessageFormatTest.java",
        "signature": "org.apache.commons.lang3.text.ExtendedMessageFormatTest.UpperCaseFormatFactory.getFormat(java.lang.String, java.lang.String, java.util.Locale)",
        "snippet": "        public Format getFormat(String name, String arguments, Locale locale) {\n            return UPPER_INSTANCE;\n        }\n",
        "begin_line": 424,
        "end_line": 426,
        "comment": "",
        "child_ranges": [
            "(line 425,col 13)-(line 425,col 34)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.ExtendedMessageFormatTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/ExtendedMessageFormatTest.java",
        "signature": "org.apache.commons.lang3.text.ExtendedMessageFormatTest.OverrideShortDateFormatFactory.getFormat(java.lang.String, java.lang.String, java.util.Locale)",
        "snippet": "        public Format getFormat(String name, String arguments, Locale locale) {\n            return !\"short\".equals(arguments) ? null\n                    : locale == null ? DateFormat\n                            .getDateInstance(DateFormat.DEFAULT) : DateFormat\n                            .getDateInstance(DateFormat.DEFAULT, locale);\n        }\n",
        "begin_line": 432,
        "end_line": 437,
        "comment": "",
        "child_ranges": [
            "(line 433,col 13)-(line 436,col 73)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.ExtendedMessageFormatTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/ExtendedMessageFormatTest.java",
        "signature": "org.apache.commons.lang3.text.ExtendedMessageFormatTest.OtherExtendedMessageFormat.OtherExtendedMessageFormat(java.lang.String, java.util.Locale, java.util.Map<java.lang.String, ? extends org.apache.commons.lang3.text.FormatFactory>)",
        "snippet": "        public OtherExtendedMessageFormat(String pattern, Locale locale,\n                Map<String, ? extends FormatFactory> registry) {\n            super(pattern, locale, registry);\n        }\n",
        "begin_line": 444,
        "end_line": 447,
        "comment": "",
        "child_ranges": [
            "(line 446,col 13)-(line 446,col 45)"
        ]
    }
]