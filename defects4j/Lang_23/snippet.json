[
    {
        "name": "StrMatcher.TrimMatcher#416",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/text/StrMatcher.java",
        "class_name": "org.apache.commons.lang3.text.StrMatcher",
        "signature": "org.apache.commons.lang3.text.StrMatcher.TrimMatcher.TrimMatcher()",
        "snippet": "        TrimMatcher() {\n            super();\n        }\n",
        "begin_line": 416,
        "end_line": 418,
        "comment": "\n         * Constructs a new instance of <code>TrimMatcher</code>.\n         ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4472
        },
        "num_failing_tests": 1
    },
    {
        "name": "StrMatcher.NoMatcher#388",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/text/StrMatcher.java",
        "class_name": "org.apache.commons.lang3.text.StrMatcher",
        "signature": "org.apache.commons.lang3.text.StrMatcher.NoMatcher.NoMatcher()",
        "snippet": "        NoMatcher() {\n            super();\n        }\n",
        "begin_line": 388,
        "end_line": 390,
        "comment": "\n         * Constructs a new instance of <code>NoMatcher</code>.\n         ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4472
        },
        "num_failing_tests": 1
    },
    {
        "name": "StrMatcher.CharSetMatcher#283",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/text/StrMatcher.java",
        "class_name": "org.apache.commons.lang3.text.StrMatcher",
        "signature": "org.apache.commons.lang3.text.StrMatcher.CharSetMatcher.CharSetMatcher(char[])",
        "snippet": "        CharSetMatcher(char chars[]) {\n            super();\n            this.chars = chars.clone();\n            Arrays.sort(this.chars);\n        }\n",
        "begin_line": 283,
        "end_line": 287,
        "comment": "\n         * Constructor that creates a matcher from a character array.\n         *\n         * @param chars  the characters to match, must not be null\n         ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4472
        },
        "num_failing_tests": 1
    },
    {
        "name": "StrMatcher.isMatch#298",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/text/StrMatcher.java",
        "class_name": "org.apache.commons.lang3.text.StrMatcher",
        "signature": "org.apache.commons.lang3.text.StrMatcher.CharSetMatcher.isMatch(char[], int, int, int)",
        "snippet": "        @Override\n        public int isMatch(char[] buffer, int pos, int bufferStart, int bufferEnd) {\n            return Arrays.binarySearch(chars, buffer[pos]) >= 0 ? 1 : 0;\n        }\n",
        "begin_line": 298,
        "end_line": 301,
        "comment": "\n         * Returns whether or not the given character matches.\n         *\n         * @param buffer  the text content to match against, do not change\n         * @param pos  the starting position for the match, valid for buffer\n         * @param bufferStart  the first active index in the buffer, valid for buffer\n         * @param bufferEnd  the end index of the active buffer, valid for buffer\n         * @return the number of matching characters, zero for no match\n         ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4472
        },
        "num_failing_tests": 1
    },
    {
        "name": "StrMatcher.CharMatcher#317",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/text/StrMatcher.java",
        "class_name": "org.apache.commons.lang3.text.StrMatcher",
        "signature": "org.apache.commons.lang3.text.StrMatcher.CharMatcher.CharMatcher(char)",
        "snippet": "        CharMatcher(char ch) {\n            super();\n            this.ch = ch;\n        }\n",
        "begin_line": 317,
        "end_line": 320,
        "comment": "\n         * Constructor that creates a matcher that matches a single character.\n         *\n         * @param ch  the character to match\n         ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4472
        },
        "num_failing_tests": 1
    },
    {
        "name": "StrMatcher.splitMatcher#107",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/text/StrMatcher.java",
        "class_name": "org.apache.commons.lang3.text.StrMatcher",
        "signature": "org.apache.commons.lang3.text.StrMatcher.splitMatcher()",
        "snippet": "    public static StrMatcher splitMatcher() {\n        return SPLIT_MATCHER;\n    }\n",
        "begin_line": 107,
        "end_line": 109,
        "comment": "\n     * Matches the same characters as StringTokenizer,\n     * namely space, tab, newline and formfeed.\n     *\n     * @return the split matcher\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4472
        },
        "num_failing_tests": 1
    },
    {
        "name": "StrMatcher.StrMatcher#215",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/text/StrMatcher.java",
        "class_name": "org.apache.commons.lang3.text.StrMatcher",
        "signature": "org.apache.commons.lang3.text.StrMatcher.StrMatcher()",
        "snippet": "    protected StrMatcher() {\n        super();\n    }\n",
        "begin_line": 215,
        "end_line": 217,
        "comment": "\n     * Constructor.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4472
        },
        "num_failing_tests": 1
    },
    {
        "name": "StrMatcher.isMatch#266",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/text/StrMatcher.java",
        "class_name": "org.apache.commons.lang3.text.StrMatcher",
        "signature": "org.apache.commons.lang3.text.StrMatcher.isMatch(char[], int)",
        "snippet": "    public int isMatch(char[] buffer, int pos) {\n        return isMatch(buffer, pos, 0, buffer.length);\n    }\n",
        "begin_line": 266,
        "end_line": 268,
        "comment": "\n     * Returns the number of matching characters, zero for no match.\n     * <p>\n     * This method is called to check for a match.\n     * The parameter <code>pos</code> represents the current position to be\n     * checked in the string <code>buffer</code> (a character array which must\n     * not be changed).\n     * The API guarantees that <code>pos</code> is a valid index for <code>buffer</code>.\n     * <p>\n     * The matching code may check one character or many.\n     * It may check characters preceeding <code>pos</code> as well as those after.\n     * <p>\n     * It must return zero for no match, or a positive number if a match was found.\n     * The number indicates the number of characters that matched.\n     *\n     * @param buffer  the text content to match against, do not change\n     * @param pos  the starting position for the match, valid for buffer\n     * @return the number of matching characters, zero for no match\n     * @since 2.4\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4472
        },
        "num_failing_tests": 1
    },
    {
        "name": "ExtendedMessageFormat.applyPattern#144",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java",
        "class_name": "org.apache.commons.lang3.text.ExtendedMessageFormat",
        "signature": "org.apache.commons.lang3.text.ExtendedMessageFormat.applyPattern(java.lang.String)",
        "snippet": "    @Override\n    public final void applyPattern(String pattern) {\n        if (registry == null) {\n            super.applyPattern(pattern);\n            toPattern = super.toPattern();\n            return;\n        }\n        ArrayList<Format> foundFormats = new ArrayList<Format>();\n        ArrayList<String> foundDescriptions = new ArrayList<String>();\n        StringBuilder stripCustom = new StringBuilder(pattern.length());\n\n        ParsePosition pos = new ParsePosition(0);\n        char[] c = pattern.toCharArray();\n        int fmtCount = 0;\n        while (pos.getIndex() < pattern.length()) {\n            switch (c[pos.getIndex()]) {\n            case QUOTE:\n                appendQuotedString(pattern, pos, stripCustom, true);\n                break;\n            case START_FE:\n                fmtCount++;\n                seekNonWs(pattern, pos);\n                int start = pos.getIndex();\n                int index = readArgumentIndex(pattern, next(pos));\n                stripCustom.append(START_FE).append(index);\n                seekNonWs(pattern, pos);\n                Format format = null;\n                String formatDescription = null;\n                if (c[pos.getIndex()] == START_FMT) {\n                    formatDescription = parseFormatDescription(pattern,\n                            next(pos));\n                    format = getFormat(formatDescription);\n                    if (format == null) {\n                        stripCustom.append(START_FMT).append(formatDescription);\n                    }\n                }\n                foundFormats.add(format);\n                foundDescriptions.add(format == null ? null : formatDescription);\n                Validate.isTrue(foundFormats.size() == fmtCount);\n                Validate.isTrue(foundDescriptions.size() == fmtCount);\n                if (c[pos.getIndex()] != END_FE) {\n                    throw new IllegalArgumentException(\n                            \"Unreadable format element at position \" + start);\n                }\n                //$FALL-THROUGH$\n            default:\n                stripCustom.append(c[pos.getIndex()]);\n                next(pos);\n            }\n        }\n        super.applyPattern(stripCustom.toString());\n        toPattern = insertFormats(super.toPattern(), foundDescriptions);\n        if (containsElements(foundFormats)) {\n            Format[] origFormats = getFormats();\n            // only loop over what we know we have, as MessageFormat on Java 1.3 \n            // seems to provide an extra format element:\n            int i = 0;\n            for (Iterator<Format> it = foundFormats.iterator(); it.hasNext(); i++) {\n                Format f = it.next();\n                if (f != null) {\n                    origFormats[i] = f;\n                }\n            }\n            super.setFormats(origFormats);\n        }\n    }\n",
        "begin_line": 144,
        "end_line": 209,
        "comment": "\n     * Apply the specified pattern.\n     * \n     * @param pattern String\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4472
        },
        "num_failing_tests": 1
    },
    {
        "name": "ExtendedMessageFormat.getFormat#276",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java",
        "class_name": "org.apache.commons.lang3.text.ExtendedMessageFormat",
        "signature": "org.apache.commons.lang3.text.ExtendedMessageFormat.getFormat(java.lang.String)",
        "snippet": "    private Format getFormat(String desc) {\n        if (registry != null) {\n            String name = desc;\n            String args = null;\n            int i = desc.indexOf(START_FMT);\n            if (i > 0) {\n                name = desc.substring(0, i).trim();\n                args = desc.substring(i + 1).trim();\n            }\n            FormatFactory factory = registry.get(name);\n            if (factory != null) {\n                return factory.getFormat(name, args, getLocale());\n            }\n        }\n        return null;\n    }\n",
        "begin_line": 276,
        "end_line": 291,
        "comment": "\n     * Get a custom format from a format description.\n     * \n     * @param desc String\n     * @return Format\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4472
        },
        "num_failing_tests": 1
    },
    {
        "name": "ExtendedMessageFormat.readArgumentIndex#300",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java",
        "class_name": "org.apache.commons.lang3.text.ExtendedMessageFormat",
        "signature": "org.apache.commons.lang3.text.ExtendedMessageFormat.readArgumentIndex(java.lang.String, java.text.ParsePosition)",
        "snippet": "    private int readArgumentIndex(String pattern, ParsePosition pos) {\n        int start = pos.getIndex();\n        seekNonWs(pattern, pos);\n        StringBuffer result = new StringBuffer();\n        boolean error = false;\n        for (; !error && pos.getIndex() < pattern.length(); next(pos)) {\n            char c = pattern.charAt(pos.getIndex());\n            if (Character.isWhitespace(c)) {\n                seekNonWs(pattern, pos);\n                c = pattern.charAt(pos.getIndex());\n                if (c != START_FMT && c != END_FE) {\n                    error = true;\n                    continue;\n                }\n            }\n            if ((c == START_FMT || c == END_FE) && result.length() > 0) {\n                try {\n                    return Integer.parseInt(result.toString());\n                } catch (NumberFormatException e) {\n                    // we've already ensured only digits, so unless something\n                    // outlandishly large was specified we should be okay.\n                }\n            }\n            error = !Character.isDigit(c);\n            result.append(c);\n        }\n        if (error) {\n            throw new IllegalArgumentException(\n                    \"Invalid format argument index at position \" + start + \": \"\n                            + pattern.substring(start, pos.getIndex()));\n        }\n        throw new IllegalArgumentException(\n                \"Unterminated format element at position \" + start);\n    }\n",
        "begin_line": 300,
        "end_line": 333,
        "comment": "\n     * Read the argument index from the current format element\n     * \n     * @param pattern pattern to parse\n     * @param pos current parse position\n     * @return argument index\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4472
        },
        "num_failing_tests": 1
    },
    {
        "name": "ExtendedMessageFormat.parseFormatDescription#342",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java",
        "class_name": "org.apache.commons.lang3.text.ExtendedMessageFormat",
        "signature": "org.apache.commons.lang3.text.ExtendedMessageFormat.parseFormatDescription(java.lang.String, java.text.ParsePosition)",
        "snippet": "    private String parseFormatDescription(String pattern, ParsePosition pos) {\n        int start = pos.getIndex();\n        seekNonWs(pattern, pos);\n        int text = pos.getIndex();\n        int depth = 1;\n        for (; pos.getIndex() < pattern.length(); next(pos)) {\n            switch (pattern.charAt(pos.getIndex())) {\n            case START_FE:\n                depth++;\n                break;\n            case END_FE:\n                depth--;\n                if (depth == 0) {\n                    return pattern.substring(text, pos.getIndex());\n                }\n                break;\n            case QUOTE:\n                getQuotedString(pattern, pos, false);\n                break;\n            }\n        }\n        throw new IllegalArgumentException(\n                \"Unterminated format element at position \" + start);\n    }\n",
        "begin_line": 342,
        "end_line": 365,
        "comment": "\n     * Parse the format component of a format element.\n     * \n     * @param pattern string to parse\n     * @param pos current parse position\n     * @return Format description String\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4472
        },
        "num_failing_tests": 1
    },
    {
        "name": "ExtendedMessageFormat.insertFormats#374",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java",
        "class_name": "org.apache.commons.lang3.text.ExtendedMessageFormat",
        "signature": "org.apache.commons.lang3.text.ExtendedMessageFormat.insertFormats(java.lang.String, java.util.ArrayList<java.lang.String>)",
        "snippet": "    private String insertFormats(String pattern, ArrayList<String> customPatterns) {\n        if (!containsElements(customPatterns)) {\n            return pattern;\n        }\n        StringBuilder sb = new StringBuilder(pattern.length() * 2);\n        ParsePosition pos = new ParsePosition(0);\n        int fe = -1;\n        int depth = 0;\n        while (pos.getIndex() < pattern.length()) {\n            char c = pattern.charAt(pos.getIndex());\n            switch (c) {\n            case QUOTE:\n                appendQuotedString(pattern, pos, sb, false);\n                break;\n            case START_FE:\n                depth++;\n                if (depth == 1) {\n                    fe++;\n                    sb.append(START_FE).append(\n                            readArgumentIndex(pattern, next(pos)));\n                    String customPattern = customPatterns.get(fe);\n                    if (customPattern != null) {\n                        sb.append(START_FMT).append(customPattern);\n                    }\n                }\n                break;\n            case END_FE:\n                depth--;\n                //$FALL-THROUGH$\n            default:\n                sb.append(c);\n                next(pos);\n            }\n        }\n        return sb.toString();\n    }\n",
        "begin_line": 374,
        "end_line": 409,
        "comment": "\n     * Insert formats back into the pattern for toPattern() support.\n     *\n     * @param pattern source\n     * @param customPatterns The custom patterns to re-insert, if any\n     * @return full pattern\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4472
        },
        "num_failing_tests": 1
    },
    {
        "name": "ExtendedMessageFormat.seekNonWs#417",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java",
        "class_name": "org.apache.commons.lang3.text.ExtendedMessageFormat",
        "signature": "org.apache.commons.lang3.text.ExtendedMessageFormat.seekNonWs(java.lang.String, java.text.ParsePosition)",
        "snippet": "    private void seekNonWs(String pattern, ParsePosition pos) {\n        int len = 0;\n        char[] buffer = pattern.toCharArray();\n        do {\n            len = StrMatcher.splitMatcher().isMatch(buffer, pos.getIndex());\n            pos.setIndex(pos.getIndex() + len);\n        } while (len > 0 && pos.getIndex() < pattern.length());\n    }\n",
        "begin_line": 417,
        "end_line": 424,
        "comment": "\n     * Consume whitespace from the current parse position.\n     * \n     * @param pattern String to read\n     * @param pos current position\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4472
        },
        "num_failing_tests": 1
    },
    {
        "name": "ExtendedMessageFormat.next#432",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java",
        "class_name": "org.apache.commons.lang3.text.ExtendedMessageFormat",
        "signature": "org.apache.commons.lang3.text.ExtendedMessageFormat.next(java.text.ParsePosition)",
        "snippet": "    private ParsePosition next(ParsePosition pos) {\n        pos.setIndex(pos.getIndex() + 1);\n        return pos;\n    }\n",
        "begin_line": 432,
        "end_line": 435,
        "comment": "\n     * Convenience method to advance parse position by 1\n     * \n     * @param pos ParsePosition\n     * @return <code>pos</code>\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4472
        },
        "num_failing_tests": 1
    },
    {
        "name": "ExtendedMessageFormat.containsElements#494",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java",
        "class_name": "org.apache.commons.lang3.text.ExtendedMessageFormat",
        "signature": "org.apache.commons.lang3.text.ExtendedMessageFormat.containsElements(java.util.Collection<?>)",
        "snippet": "    private boolean containsElements(Collection<?> coll) {\n        if (coll == null || coll.size() == 0) {\n            return false;\n        }\n        for (Iterator<?> iter = coll.iterator(); iter.hasNext();) {\n            if (iter.next() != null) {\n                return true;\n            }\n        }\n        return false;\n    }\n",
        "begin_line": 494,
        "end_line": 504,
        "comment": "\n     * Learn whether the specified Collection contains non-null elements.\n     * @param coll to check\n     * @return <code>true</code> if some Object was found, <code>false</code> otherwise.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4472
        },
        "num_failing_tests": 1
    },
    {
        "name": "Validate.isTrue#175",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/Validate.java",
        "class_name": "org.apache.commons.lang3.Validate",
        "signature": "org.apache.commons.lang3.Validate.isTrue(boolean)",
        "snippet": "    public static void isTrue(boolean expression) {\n        if (expression == false) {\n            throw new IllegalArgumentException(DEFAULT_IS_TRUE_EX_MESSAGE);\n        }\n    }\n",
        "begin_line": 175,
        "end_line": 179,
        "comment": "\n     * <p>Validate that the argument condition is <code>true</code>; otherwise \n     * throwing an exception. This method is useful when validating according \n     * to an arbitrary boolean expression, such as validating a \n     * primitive number or using your own custom validation expression.</p>\n     *\n     * <pre>\n     * Validate.isTrue(i > 0);\n     * Validate.isTrue(myObject.isOk());</pre>\n     *\n     * <p>The message of the exception is &quot;The validated expression is \n     * false&quot;.</p>\n     * \n     * @param expression the boolean expression to check \n     * @throws IllegalArgumentException if expression is <code>false</code>\n     * @see #isTrue(boolean, String, long)\n     * @see #isTrue(boolean, String, double)\n     * @see #isTrue(boolean, String, Object...)\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4472
        },
        "num_failing_tests": 1
    },
    {
        "name": "ExtendedMessageFormat.ExtendedMessageFormat#124",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java",
        "class_name": "org.apache.commons.lang3.text.ExtendedMessageFormat",
        "signature": "org.apache.commons.lang3.text.ExtendedMessageFormat.ExtendedMessageFormat(java.lang.String, java.util.Locale, java.util.Map<java.lang.String, ? extends org.apache.commons.lang3.text.FormatFactory>)",
        "snippet": "    public ExtendedMessageFormat(String pattern, Locale locale, Map<String, ? extends FormatFactory> registry) {\n        super(DUMMY_PATTERN);\n        setLocale(locale);\n        this.registry = registry;\n        applyPattern(pattern);\n    }\n",
        "begin_line": 124,
        "end_line": 129,
        "comment": "\n     * Create a new ExtendedMessageFormat.\n     * \n     * @param pattern  the pattern to use, not null\n     * @param locale  the locale to use, not null\n     * @param registry  the registry of format factories, may be null\n     * @throws IllegalArgumentException in case of a bad pattern.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3536
        },
        "num_failing_tests": 1
    }
]