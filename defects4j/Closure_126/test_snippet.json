[
    {
        "class_name": "com.google.javascript.jscomp.MinimizeExitPointsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/MinimizeExitPointsTest.java",
        "signature": "com.google.javascript.jscomp.MinimizeExitPointsTest.setUp()",
        "snippet": "  @Override\n  public void setUp() {\n    super.enableLineNumberCheck(true);\n  }\n",
        "begin_line": 26,
        "end_line": 29,
        "comment": "",
        "child_ranges": [
            "(line 28,col 5)-(line 28,col 38)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.MinimizeExitPointsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/MinimizeExitPointsTest.java",
        "signature": "com.google.javascript.jscomp.MinimizeExitPointsTest.getProcessor(com.google.javascript.jscomp.Compiler)",
        "snippet": "  @Override\n  protected CompilerPass getProcessor(final Compiler compiler) {\n    return new CompilerPass() {\n      @Override\n      public void process(Node externs, Node js) {\n        NodeTraversal.traverse(compiler, js, new MinimizeExitPoints(compiler));\n      }\n    };\n  }\n",
        "begin_line": 31,
        "end_line": 39,
        "comment": "",
        "child_ranges": [
            "(line 33,col 5)-(line 38,col 6)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.MinimizeExitPointsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/MinimizeExitPointsTest.java",
        "signature": "com.google.javascript.jscomp.MinimizeExitPointsTest.Anonymous-5a489281-71b2-42f2-9d06-60f6836861f3.process(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "      @Override\n      public void process(Node externs, Node js) {\n        NodeTraversal.traverse(compiler, js, new MinimizeExitPoints(compiler));\n      }\n",
        "begin_line": 34,
        "end_line": 37,
        "comment": "",
        "child_ranges": [
            "(line 36,col 9)-(line 36,col 79)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.MinimizeExitPointsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/MinimizeExitPointsTest.java",
        "signature": "com.google.javascript.jscomp.MinimizeExitPointsTest.getNumRepetitions()",
        "snippet": "  @Override\n  protected int getNumRepetitions() {\n    return 1;\n  }\n",
        "begin_line": 41,
        "end_line": 44,
        "comment": "",
        "child_ranges": [
            "(line 43,col 5)-(line 43,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.MinimizeExitPointsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/MinimizeExitPointsTest.java",
        "signature": "com.google.javascript.jscomp.MinimizeExitPointsTest.foldSame(java.lang.String)",
        "snippet": "  void foldSame(String js) {\n    testSame(js);\n  }\n",
        "begin_line": 46,
        "end_line": 48,
        "comment": "",
        "child_ranges": [
            "(line 47,col 5)-(line 47,col 17)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.MinimizeExitPointsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/MinimizeExitPointsTest.java",
        "signature": "com.google.javascript.jscomp.MinimizeExitPointsTest.fold(java.lang.String, java.lang.String)",
        "snippet": "  void fold(String js, String expected) {\n    test(js, expected);\n  }\n",
        "begin_line": 50,
        "end_line": 52,
        "comment": "",
        "child_ranges": [
            "(line 51,col 5)-(line 51,col 23)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.MinimizeExitPointsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/MinimizeExitPointsTest.java",
        "signature": "com.google.javascript.jscomp.MinimizeExitPointsTest.fold(java.lang.String, java.lang.String, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  void fold(String js, String expected, DiagnosticType warning) {\n    test(js, expected, warning);\n  }\n",
        "begin_line": 54,
        "end_line": 56,
        "comment": "",
        "child_ranges": [
            "(line 55,col 5)-(line 55,col 32)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.MinimizeExitPointsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/MinimizeExitPointsTest.java",
        "signature": "com.google.javascript.jscomp.MinimizeExitPointsTest.testBreakOptimization()",
        "snippet": "  public void testBreakOptimization() throws Exception {\n    fold(\"f:{if(true){a();break f;}else;b();}\",\n         \"f:{if(true){a()}else{b()}}\");\n    fold(\"f:{if(false){a();break f;}else;b();break f;}\",\n         \"f:{if(false){a()}else{b()}}\");\n    fold(\"f:{if(a()){b();break f;}else;c();}\",\n         \"f:{if(a()){b();}else{c();}}\");\n    fold(\"f:{if(a()){b()}else{c();break f;}}\",\n         \"f:{if(a()){b()}else{c();}}\");\n    fold(\"f:{if(a()){b();break f;}else;}\",\n         \"f:{if(a()){b();}else;}\");\n    fold(\"f:{if(a()){break f;}else;}\",\n         \"f:{if(a()){}else;}\");\n\n    fold(\"f:while(a())break f;\",\n         \"f:while(a())break f\");\n    foldSame(\"f:for(x in a())break f\");\n\n    fold(\"f:{while(a())break;}\",\n         \"f:{while(a())break;}\");\n    foldSame(\"f:{for(x in a())break}\");\n\n    fold(\"f:try{break f;}catch(e){break f;}\",\n         \"f:try{}catch(e){}\");\n    fold(\"f:try{if(a()){break f;}else{break f;} break f;}catch(e){}\",\n         \"f:try{if(a()){}else{}}catch(e){}\");\n\n    fold(\"f:g:break f\",\n         \"\");\n    fold(\"f:g:{if(a()){break f;}else{break f;} break f;}\",\n         \"f:g:{if(a()){}else{}}\");\n  }\n",
        "begin_line": 58,
        "end_line": 89,
        "comment": "",
        "child_ranges": [
            "(line 59,col 5)-(line 60,col 39)",
            "(line 61,col 5)-(line 62,col 40)",
            "(line 63,col 5)-(line 64,col 40)",
            "(line 65,col 5)-(line 66,col 39)",
            "(line 67,col 5)-(line 68,col 35)",
            "(line 69,col 5)-(line 70,col 31)",
            "(line 72,col 5)-(line 73,col 32)",
            "(line 74,col 5)-(line 74,col 39)",
            "(line 76,col 5)-(line 77,col 33)",
            "(line 78,col 5)-(line 78,col 39)",
            "(line 80,col 5)-(line 81,col 30)",
            "(line 82,col 5)-(line 83,col 45)",
            "(line 85,col 5)-(line 86,col 13)",
            "(line 87,col 5)-(line 88,col 34)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.MinimizeExitPointsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/MinimizeExitPointsTest.java",
        "signature": "com.google.javascript.jscomp.MinimizeExitPointsTest.testFunctionReturnOptimization()",
        "snippet": "  public void testFunctionReturnOptimization() throws Exception {\n    fold(\"function f(){if(a()){b();if(c())return;}}\",\n         \"function f(){if(a()){b();if(c());}}\");\n    fold(\"function f(){if(x)return; x=3; return; }\",\n         \"function f(){if(x); else x=3}\");\n    fold(\"function f(){if(true){a();return;}else;b();}\",\n         \"function f(){if(true){a();}else{b();}}\");\n    fold(\"function f(){if(false){a();return;}else;b();return;}\",\n         \"function f(){if(false){a();}else{b();}}\");\n    fold(\"function f(){if(a()){b();return;}else;c();}\",\n         \"function f(){if(a()){b();}else{c();}}\");\n    fold(\"function f(){if(a()){b()}else{c();return;}}\",\n         \"function f(){if(a()){b()}else{c();}}\");\n    fold(\"function f(){if(a()){b();return;}else;}\",\n         \"function f(){if(a()){b();}else;}\");\n    fold(\"function f(){if(a()){return;}else{return;} return;}\",\n         \"function f(){if(a()){}else{}}\");\n    fold(\"function f(){if(a()){return;}else{return;} b();}\",\n         \"function f(){if(a()){}else{return;b()}}\");\n    fold(\"function f(){ if (x) return; if (y) return; if (z) return; w(); }\",\n        \" function f() {\" +\n        \"   if (x) {} else { if (y) {} else { if (z) {} else w(); }}\" +\n        \" }\");\n\n    fold(\"function f(){while(a())return;}\",\n         \"function f(){while(a())return}\");\n    foldSame(\"function f(){for(x in a())return}\");\n\n    fold(\"function f(){while(a())break;}\",\n         \"function f(){while(a())break}\");\n    foldSame(\"function f(){for(x in a())break}\");\n\n    fold(\"function f(){try{return;}catch(e){throw 9;}finally{return}}\",\n         \"function f(){try{}catch(e){throw 9;}finally{return}}\");\n    foldSame(\"function f(){try{throw 9;}finally{return;}}\");\n\n    fold(\"function f(){try{return;}catch(e){return;}}\",\n         \"function f(){try{}catch(e){}}\");\n    fold(\"function f(){try{if(a()){return;}else{return;} return;}catch(e){}}\",\n         \"function f(){try{if(a()){}else{}}catch(e){}}\");\n\n    fold(\"function f(){g:return}\",\n         \"function f(){}\");\n    fold(\"function f(){g:if(a()){return;}else{return;} return;}\",\n         \"function f(){g:if(a()){}else{}}\");\n    fold(\"function f(){try{g:if(a()){throw 9;} return;}finally{return}}\",\n         \"function f(){try{g:if(a()){throw 9;}}finally{return}}\");\n  }\n",
        "begin_line": 91,
        "end_line": 138,
        "comment": "",
        "child_ranges": [
            "(line 92,col 5)-(line 93,col 48)",
            "(line 94,col 5)-(line 95,col 42)",
            "(line 96,col 5)-(line 97,col 51)",
            "(line 98,col 5)-(line 99,col 52)",
            "(line 100,col 5)-(line 101,col 50)",
            "(line 102,col 5)-(line 103,col 49)",
            "(line 104,col 5)-(line 105,col 45)",
            "(line 106,col 5)-(line 107,col 42)",
            "(line 108,col 5)-(line 109,col 52)",
            "(line 110,col 5)-(line 113,col 14)",
            "(line 115,col 5)-(line 116,col 43)",
            "(line 117,col 5)-(line 117,col 50)",
            "(line 119,col 5)-(line 120,col 42)",
            "(line 121,col 5)-(line 121,col 49)",
            "(line 123,col 5)-(line 124,col 65)",
            "(line 125,col 5)-(line 125,col 60)",
            "(line 127,col 5)-(line 128,col 42)",
            "(line 129,col 5)-(line 130,col 57)",
            "(line 132,col 5)-(line 133,col 27)",
            "(line 134,col 5)-(line 135,col 44)",
            "(line 136,col 5)-(line 137,col 66)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.MinimizeExitPointsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/MinimizeExitPointsTest.java",
        "signature": "com.google.javascript.jscomp.MinimizeExitPointsTest.testWhileContinueOptimization()",
        "snippet": "  public void testWhileContinueOptimization() throws Exception {\n    fold(\"while(true){if(x)continue; x=3; continue; }\",\n         \"while(true)if(x);else x=3\");\n    foldSame(\"while(true){a();continue;b();}\");\n    fold(\"while(true){if(true){a();continue;}else;b();}\",\n         \"while(true){if(true){a();}else{b()}}\");\n    fold(\"while(true){if(false){a();continue;}else;b();continue;}\",\n         \"while(true){if(false){a()}else{b();}}\");\n    fold(\"while(true){if(a()){b();continue;}else;c();}\",\n         \"while(true){if(a()){b();}else{c();}}\");\n    fold(\"while(true){if(a()){b();}else{c();continue;}}\",\n         \"while(true){if(a()){b();}else{c();}}\");\n    fold(\"while(true){if(a()){b();continue;}else;}\",\n         \"while(true){if(a()){b();}else;}\");\n    fold(\"while(true){if(a()){continue;}else{continue;} continue;}\",\n         \"while(true){if(a()){}else{}}\");\n    fold(\"while(true){if(a()){continue;}else{continue;} b();}\",\n         \"while(true){if(a()){}else{continue;b();}}\");\n\n    fold(\"while(true)while(a())continue;\",\n         \"while(true)while(a());\");\n    fold(\"while(true)for(x in a())continue\",\n         \"while(true)for(x in a());\");\n\n    fold(\"while(true)while(a())break;\",\n         \"while(true)while(a())break\");\n    fold(\"while(true)for(x in a())break\",\n         \"while(true)for(x in a())break\");\n\n    fold(\"while(true){try{continue;}catch(e){continue;}}\",\n         \"while(true){try{}catch(e){}}\");\n    fold(\"while(true){try{if(a()){continue;}else{continue;}\" +\n         \"continue;}catch(e){}}\",\n         \"while(true){try{if(a()){}else{}}catch(e){}}\");\n\n    fold(\"while(true){g:continue}\",\n         \"while(true){}\");\n    // This case could be improved.\n    fold(\"while(true){g:if(a()){continue;}else{continue;} continue;}\",\n         \"while(true){g:if(a());else;}\");\n  }\n",
        "begin_line": 140,
        "end_line": 180,
        "comment": "",
        "child_ranges": [
            "(line 141,col 5)-(line 142,col 38)",
            "(line 143,col 5)-(line 143,col 47)",
            "(line 144,col 5)-(line 145,col 49)",
            "(line 146,col 5)-(line 147,col 50)",
            "(line 148,col 5)-(line 149,col 49)",
            "(line 150,col 5)-(line 151,col 49)",
            "(line 152,col 5)-(line 153,col 44)",
            "(line 154,col 5)-(line 155,col 41)",
            "(line 156,col 5)-(line 157,col 54)",
            "(line 159,col 5)-(line 160,col 35)",
            "(line 161,col 5)-(line 162,col 38)",
            "(line 164,col 5)-(line 165,col 39)",
            "(line 166,col 5)-(line 167,col 42)",
            "(line 169,col 5)-(line 170,col 41)",
            "(line 171,col 5)-(line 173,col 56)",
            "(line 175,col 5)-(line 176,col 26)",
            "(line 178,col 5)-(line 179,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.MinimizeExitPointsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/MinimizeExitPointsTest.java",
        "signature": "com.google.javascript.jscomp.MinimizeExitPointsTest.testDoContinueOptimization()",
        "snippet": "  public void testDoContinueOptimization() throws Exception {\n    fold(\"do{if(x)continue; x=3; continue; }while(true)\",\n         \"do if(x); else x=3; while(true)\");\n    foldSame(\"do{a();continue;b()}while(true)\");\n    fold(\"do{if(true){a();continue;}else;b();}while(true)\",\n         \"do{if(true){a();}else{b();}}while(true)\");\n    fold(\"do{if(false){a();continue;}else;b();continue;}while(true)\",\n         \"do{if(false){a();}else{b();}}while(true)\");\n    fold(\"do{if(a()){b();continue;}else;c();}while(true)\",\n         \"do{if(a()){b();}else{c()}}while(true)\");\n    fold(\"do{if(a()){b();}else{c();continue;}}while(true)\",\n         \"do{if(a()){b();}else{c();}}while(true)\");\n    fold(\"do{if(a()){b();continue;}else;}while(true)\",\n         \"do{if(a()){b();}else;}while(true)\");\n    fold(\"do{if(a()){continue;}else{continue;} continue;}while(true)\",\n         \"do{if(a()){}else{}}while(true)\");\n    fold(\"do{if(a()){continue;}else{continue;} b();}while(true)\",\n         \"do{if(a()){}else{continue; b();}}while(true)\");\n\n    fold(\"do{while(a())continue;}while(true)\",\n         \"do while(a());while(true)\");\n    fold(\"do{for(x in a())continue}while(true)\",\n         \"do for(x in a());while(true)\");\n\n    fold(\"do{while(a())break;}while(true)\",\n         \"do while(a())break;while(true)\");\n    fold(\"do for(x in a())break;while(true)\",\n         \"do for(x in a())break;while(true)\");\n\n    fold(\"do{try{continue;}catch(e){continue;}}while(true)\",\n         \"do{try{}catch(e){}}while(true)\");\n    fold(\"do{try{if(a()){continue;}else{continue;}\" +\n         \"continue;}catch(e){}}while(true)\",\n         \"do{try{if(a()){}else{}}catch(e){}}while(true)\");\n\n    fold(\"do{g:continue}while(true)\",\n         \"do{}while(true)\");\n    // This case could be improved.\n    fold(\"do{g:if(a()){continue;}else{continue;} continue;}while(true)\",\n         \"do{g:if(a());else;}while(true)\");\n\n    fold(\"do { foo(); continue; } while(false)\",\n         \"do { foo(); } while(false)\");\n    fold(\"do { foo(); break; } while(false)\",\n         \"do { foo(); } while(false)\");\n  }\n",
        "begin_line": 182,
        "end_line": 227,
        "comment": "",
        "child_ranges": [
            "(line 183,col 5)-(line 184,col 44)",
            "(line 185,col 5)-(line 185,col 48)",
            "(line 186,col 5)-(line 187,col 52)",
            "(line 188,col 5)-(line 189,col 53)",
            "(line 190,col 5)-(line 191,col 50)",
            "(line 192,col 5)-(line 193,col 51)",
            "(line 194,col 5)-(line 195,col 46)",
            "(line 196,col 5)-(line 197,col 43)",
            "(line 198,col 5)-(line 199,col 57)",
            "(line 201,col 5)-(line 202,col 38)",
            "(line 203,col 5)-(line 204,col 41)",
            "(line 206,col 5)-(line 207,col 43)",
            "(line 208,col 5)-(line 209,col 46)",
            "(line 211,col 5)-(line 212,col 43)",
            "(line 213,col 5)-(line 215,col 58)",
            "(line 217,col 5)-(line 218,col 28)",
            "(line 220,col 5)-(line 221,col 43)",
            "(line 223,col 5)-(line 224,col 39)",
            "(line 225,col 5)-(line 226,col 39)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.MinimizeExitPointsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/MinimizeExitPointsTest.java",
        "signature": "com.google.javascript.jscomp.MinimizeExitPointsTest.testForContinueOptimization()",
        "snippet": "  public void testForContinueOptimization() throws Exception {\n    fold(\"for(x in y){if(x)continue; x=3; continue; }\",\n         \"for(x in y)if(x);else x=3\");\n    foldSame(\"for(x in y){a();continue;b()}\");\n    fold(\"for(x in y){if(true){a();continue;}else;b();}\",\n         \"for(x in y){if(true)a();else b();}\");\n    fold(\"for(x in y){if(false){a();continue;}else;b();continue;}\",\n         \"for(x in y){if(false){a();}else{b()}}\");\n    fold(\"for(x in y){if(a()){b();continue;}else;c();}\",\n         \"for(x in y){if(a()){b();}else{c();}}\");\n    fold(\"for(x in y){if(a()){b();}else{c();continue;}}\",\n         \"for(x in y){if(a()){b();}else{c();}}\");\n    fold(\"for(x=0;x<y;x++){if(a()){b();continue;}else;}\",\n         \"for(x=0;x<y;x++){if(a()){b();}else;}\");\n    fold(\"for(x=0;x<y;x++){if(a()){continue;}else{continue;} continue;}\",\n         \"for(x=0;x<y;x++){if(a()){}else{}}\");\n    fold(\"for(x=0;x<y;x++){if(a()){continue;}else{continue;} b();}\",\n         \"for(x=0;x<y;x++){if(a()){}else{continue; b();}}\");\n\n    fold(\"for(x=0;x<y;x++)while(a())continue;\",\n         \"for(x=0;x<y;x++)while(a());\");\n    fold(\"for(x=0;x<y;x++)for(x in a())continue\",\n         \"for(x=0;x<y;x++)for(x in a());\");\n\n    fold(\"for(x=0;x<y;x++)while(a())break;\",\n         \"for(x=0;x<y;x++)while(a())break\");\n    foldSame(\"for(x=0;x<y;x++)for(x in a())break\");\n\n    fold(\"for(x=0;x<y;x++){try{continue;}catch(e){continue;}}\",\n         \"for(x=0;x<y;x++){try{}catch(e){}}\");\n    fold(\"for(x=0;x<y;x++){try{if(a()){continue;}else{continue;}\" +\n         \"continue;}catch(e){}}\",\n         \"for(x=0;x<y;x++){try{if(a()){}else{}}catch(e){}}\");\n\n    fold(\"for(x=0;x<y;x++){g:continue}\",\n         \"for(x=0;x<y;x++){}\");\n    // This case could be improved.\n    fold(\"for(x=0;x<y;x++){g:if(a()){continue;}else{continue;} continue;}\",\n         \"for(x=0;x<y;x++){g:if(a());else;}\");\n  }\n",
        "begin_line": 229,
        "end_line": 268,
        "comment": "",
        "child_ranges": [
            "(line 230,col 5)-(line 231,col 38)",
            "(line 232,col 5)-(line 232,col 46)",
            "(line 233,col 5)-(line 234,col 47)",
            "(line 235,col 5)-(line 236,col 50)",
            "(line 237,col 5)-(line 238,col 49)",
            "(line 239,col 5)-(line 240,col 49)",
            "(line 241,col 5)-(line 242,col 49)",
            "(line 243,col 5)-(line 244,col 46)",
            "(line 245,col 5)-(line 246,col 60)",
            "(line 248,col 5)-(line 249,col 40)",
            "(line 250,col 5)-(line 251,col 43)",
            "(line 253,col 5)-(line 254,col 44)",
            "(line 255,col 5)-(line 255,col 51)",
            "(line 257,col 5)-(line 258,col 46)",
            "(line 259,col 5)-(line 261,col 61)",
            "(line 263,col 5)-(line 264,col 31)",
            "(line 266,col 5)-(line 267,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.MinimizeExitPointsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/MinimizeExitPointsTest.java",
        "signature": "com.google.javascript.jscomp.MinimizeExitPointsTest.testCodeMotionDoesntBreakFunctionHoisting()",
        "snippet": "  public void testCodeMotionDoesntBreakFunctionHoisting() throws Exception {\n    fold(\"function f() { if (x) return; foo(); function foo() {} }\",\n         \"function f() { if (x); else { function foo() {} foo(); } }\");\n  }\n",
        "begin_line": 270,
        "end_line": 273,
        "comment": "",
        "child_ranges": [
            "(line 271,col 5)-(line 272,col 71)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.MinimizeExitPointsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/MinimizeExitPointsTest.java",
        "signature": "com.google.javascript.jscomp.MinimizeExitPointsTest.testDontRemoveBreakInTryFinally()",
        "snippet": "  public void testDontRemoveBreakInTryFinally() throws Exception {\n    foldSame(\"function f() {b:try{throw 9} finally {break b} return 1;}\");\n  }\n",
        "begin_line": 275,
        "end_line": 277,
        "comment": "",
        "child_ranges": [
            "(line 276,col 5)-(line 276,col 74)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.MinimizeExitPointsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.CompilerTestCase(java.lang.String, boolean)",
        "snippet": "  protected CompilerTestCase(String externs, boolean compareAsTree) {\n    this.externsInputs = ImmutableList.of(\n        SourceFile.fromCode(\"externs\", externs));\n    this.compareAsTree = compareAsTree;\n    this.parseTypeInfo = false;\n  }\n",
        "begin_line": 129,
        "end_line": 134,
        "comment": "\n   * Constructs a test.\n   *\n   * @param externs Externs JS as a string\n   * @param compareAsTree True to compare output & expected as a node tree.\n   *     99% of the time you want to compare as a tree. There are a few\n   *     special cases where you don't, like if you want to test the code\n   *     printing of \"unnatural\" syntax trees. For example,\n   *\n   * <pre>\n   * IF\n   *   IF\n   *     STATEMENT\n   * ELSE\n   *   STATEMENT\n   * </pre>\n   ",
        "child_ranges": [
            "(line 130,col 5)-(line 131,col 49)",
            "(line 132,col 5)-(line 132,col 39)",
            "(line 133,col 5)-(line 133,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.MinimizeExitPointsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.CompilerTestCase(java.lang.String)",
        "snippet": "  protected CompilerTestCase(String externs) {\n    this(externs, true);\n  }\n",
        "begin_line": 140,
        "end_line": 142,
        "comment": "\n   * Constructs a test. Uses AST comparison.\n   * @param externs Externs JS as a string\n   ",
        "child_ranges": [
            "(line 141,col 5)-(line 141,col 24)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.MinimizeExitPointsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.CompilerTestCase()",
        "snippet": "  protected CompilerTestCase() {\n    this(\"\", true);\n  }\n",
        "begin_line": 147,
        "end_line": 149,
        "comment": "\n   * Constructs a test. Uses AST comparison and no externs.\n   ",
        "child_ranges": [
            "(line 148,col 5)-(line 148,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.MinimizeExitPointsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.tearDown()",
        "snippet": "  @Override protected void tearDown() throws Exception {\n    super.tearDown();\n    expectParseWarningsThisTest = false;\n  }\n",
        "begin_line": 151,
        "end_line": 154,
        "comment": "",
        "child_ranges": [
            "(line 152,col 5)-(line 152,col 21)",
            "(line 153,col 5)-(line 153,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.MinimizeExitPointsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.getProcessor(com.google.javascript.jscomp.Compiler)",
        "snippet": "  protected abstract CompilerPass getProcessor(Compiler compiler);\n",
        "begin_line": 162,
        "end_line": 162,
        "comment": "\n   * Gets the compiler pass instance to use for a test.\n   *\n   * @param compiler The compiler\n   * @return The pass to test\n   ",
        "child_ranges": []
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.MinimizeExitPointsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.getOptions()",
        "snippet": "  protected CompilerOptions getOptions() {\n    return getOptions(new CompilerOptions());\n  }\n",
        "begin_line": 169,
        "end_line": 171,
        "comment": "\n   * Gets the compiler options to use for this test. Use getProcessor to\n   * determine what passes should be run.\n   ",
        "child_ranges": [
            "(line 170,col 5)-(line 170,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.MinimizeExitPointsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.getOptions(com.google.javascript.jscomp.CompilerOptions)",
        "snippet": "  protected CompilerOptions getOptions(CompilerOptions options) {\n    if (this.acceptES5) {\n      options.setLanguageIn(LanguageMode.ECMASCRIPT5);\n    }\n\n    // This doesn't affect whether checkSymbols is run--it just affects\n    // whether variable warnings are filtered.\n    options.checkSymbols = true;\n\n    options.setWarningLevel(\n        DiagnosticGroups.MISSING_PROPERTIES, CheckLevel.WARNING);\n    options.setWarningLevel(\n        DiagnosticGroups.INVALID_CASTS, CheckLevel.WARNING);\n    options.setCodingConvention(getCodingConvention());\n    return options;\n  }\n",
        "begin_line": 177,
        "end_line": 192,
        "comment": "\n   * Gets the compiler options to use for this test. Use getProcessor to\n   * determine what passes should be run.\n   ",
        "child_ranges": [
            "(line 178,col 5)-(line 180,col 5)",
            "(line 184,col 5)-(line 184,col 32)",
            "(line 186,col 5)-(line 187,col 65)",
            "(line 188,col 5)-(line 189,col 60)",
            "(line 190,col 5)-(line 190,col 55)",
            "(line 191,col 5)-(line 191,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.MinimizeExitPointsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.getCodingConvention()",
        "snippet": "  protected CodingConvention getCodingConvention() {\n    return new GoogleCodingConvention();\n  }\n",
        "begin_line": 194,
        "end_line": 196,
        "comment": "",
        "child_ranges": [
            "(line 195,col 5)-(line 195,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.MinimizeExitPointsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.setFilename(java.lang.String)",
        "snippet": "  public void setFilename(String filename) {\n    this.filename = filename;\n  }\n",
        "begin_line": 198,
        "end_line": 200,
        "comment": "",
        "child_ranges": [
            "(line 199,col 5)-(line 199,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.MinimizeExitPointsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.getNumRepetitions()",
        "snippet": "  protected int getNumRepetitions() {\n    // Since most compiler passes should be idempotent, we run each pass twice\n    // by default.\n    return 2;\n  }\n",
        "begin_line": 206,
        "end_line": 210,
        "comment": "\n   * Returns the number of times the pass should be run before results are\n   * verified.\n   ",
        "child_ranges": [
            "(line 209,col 5)-(line 209,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.MinimizeExitPointsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.allowSourcelessWarnings()",
        "snippet": "  void allowSourcelessWarnings() {\n    allowSourcelessWarnings = true;\n  }\n",
        "begin_line": 213,
        "end_line": 215,
        "comment": " Expect warnings without source information. ",
        "child_ranges": [
            "(line 214,col 5)-(line 214,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.MinimizeExitPointsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.getLastCompiler()",
        "snippet": "  Compiler getLastCompiler() {\n    return lastCompiler;\n  }\n",
        "begin_line": 218,
        "end_line": 220,
        "comment": " The most recently used JSComp instance. ",
        "child_ranges": [
            "(line 219,col 5)-(line 219,col 24)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.MinimizeExitPointsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.enableEcmaScript5(boolean)",
        "snippet": "  protected void enableEcmaScript5(boolean acceptES5) {\n    this.acceptES5 = acceptES5;\n  }\n",
        "begin_line": 225,
        "end_line": 227,
        "comment": "\n   * Whether to allow ECMASCRIPT5 source parsing.\n   ",
        "child_ranges": [
            "(line 226,col 5)-(line 226,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.MinimizeExitPointsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.allowExternsChanges(boolean)",
        "snippet": "  protected void allowExternsChanges(boolean allowExternsChanges) {\n    this.allowExternsChanges = allowExternsChanges;\n  }\n",
        "begin_line": 232,
        "end_line": 234,
        "comment": "\n   * Whether to allow externs changes.\n   ",
        "child_ranges": [
            "(line 233,col 5)-(line 233,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.MinimizeExitPointsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.enableTypeCheck(com.google.javascript.jscomp.CheckLevel)",
        "snippet": "  public void enableTypeCheck(CheckLevel level) {\n    typeCheckEnabled  = true;\n    typeCheckLevel = level;\n  }\n",
        "begin_line": 244,
        "end_line": 247,
        "comment": "\n   * Perform type checking before running the test pass. This will check\n   * for type errors and annotate nodes with type information.\n   *\n   * @param level the level of severity to report for type errors\n   *\n   * @see TypeCheck\n   ",
        "child_ranges": [
            "(line 245,col 5)-(line 245,col 29)",
            "(line 246,col 5)-(line 246,col 27)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.MinimizeExitPointsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.enableLineNumberCheck(boolean)",
        "snippet": "  public void enableLineNumberCheck(boolean newVal) {\n    checkLineNumbers = newVal;\n  }\n",
        "begin_line": 252,
        "end_line": 254,
        "comment": "\n   * Check to make sure that line numbers were preserved.\n   ",
        "child_ranges": [
            "(line 253,col 5)-(line 253,col 30)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.MinimizeExitPointsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.disableTypeCheck()",
        "snippet": "  void disableTypeCheck() {\n    typeCheckEnabled  = false;\n  }\n",
        "begin_line": 261,
        "end_line": 263,
        "comment": "\n   * Do not run type checking before running the test pass.\n   *\n   * @see TypeCheck\n   ",
        "child_ranges": [
            "(line 262,col 5)-(line 262,col 30)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.MinimizeExitPointsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.enableClosurePass()",
        "snippet": "  void enableClosurePass() {\n    closurePassEnabled = true;\n  }\n",
        "begin_line": 269,
        "end_line": 271,
        "comment": " TODO(nicksantos): Fix other passes to use this when appropriate.",
        "child_ranges": [
            "(line 270,col 5)-(line 270,col 30)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.MinimizeExitPointsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.enableNormalize()",
        "snippet": "  protected void enableNormalize() {\n    enableNormalize(true);\n  }\n",
        "begin_line": 279,
        "end_line": 281,
        "comment": "\n   * Perform AST normalization before running the test pass, and anti-normalize\n   * after running it.\n   *\n   * @see Normalize\n   ",
        "child_ranges": [
            "(line 280,col 5)-(line 280,col 26)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.MinimizeExitPointsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.enableNormalize(boolean)",
        "snippet": "  protected void enableNormalize(boolean normalizeExpected) {\n    normalizeEnabled = true;\n    this.normalizeExpected = normalizeExpected;\n  }\n",
        "begin_line": 291,
        "end_line": 294,
        "comment": "\n   * Perform AST normalization before running the test pass, and anti-normalize\n   * after running it.\n   *\n   * @param normalizeExpected Whether to perform normalization on the\n   * expected JS result.\n   * @see Normalize\n   ",
        "child_ranges": [
            "(line 292,col 5)-(line 292,col 28)",
            "(line 293,col 5)-(line 293,col 47)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.MinimizeExitPointsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.disableNormalize()",
        "snippet": "  protected void disableNormalize() {\n    normalizeEnabled = false;\n  }\n",
        "begin_line": 300,
        "end_line": 302,
        "comment": "\n   * Don't perform AST normalization before running the test pass.\n   * @see Normalize\n   ",
        "child_ranges": [
            "(line 301,col 5)-(line 301,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.MinimizeExitPointsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.enableMarkNoSideEffects()",
        "snippet": "  void enableMarkNoSideEffects() {\n    markNoSideEffects  = true;\n  }\n",
        "begin_line": 309,
        "end_line": 311,
        "comment": "\n   * Run the MarkSideEffectCalls pass before running the test pass.\n   *\n   * @see MarkNoSideEffectCalls\n   ",
        "child_ranges": [
            "(line 310,col 5)-(line 310,col 30)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.MinimizeExitPointsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.enableAstValidation(boolean)",
        "snippet": "  protected void enableAstValidation(boolean validate) {\n    astValidationEnabled = validate;\n  }\n",
        "begin_line": 316,
        "end_line": 318,
        "comment": "\n   * Whether to allow Validate the AST after each run of the pass.\n   ",
        "child_ranges": [
            "(line 317,col 5)-(line 317,col 36)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.MinimizeExitPointsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.setExpectParseWarningsThisTest()",
        "snippet": "  protected void setExpectParseWarningsThisTest() {\n    expectParseWarningsThisTest = true;\n  }\n",
        "begin_line": 321,
        "end_line": 323,
        "comment": " Whether we should ignore parse warnings for the current test method. ",
        "child_ranges": [
            "(line 322,col 5)-(line 322,col 39)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.MinimizeExitPointsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.createTypeCheck(com.google.javascript.jscomp.Compiler, com.google.javascript.jscomp.CheckLevel)",
        "snippet": "  private static TypeCheck createTypeCheck(Compiler compiler,\n      CheckLevel level) {\n    ReverseAbstractInterpreter rai =\n        new SemanticReverseAbstractInterpreter(compiler.getCodingConvention(),\n            compiler.getTypeRegistry());\n\n    return new TypeCheck(compiler, rai, compiler.getTypeRegistry(),\n        level, CheckLevel.OFF);\n  }\n",
        "begin_line": 326,
        "end_line": 334,
        "comment": " Returns a newly created TypeCheck. ",
        "child_ranges": [
            "(line 328,col 5)-(line 330,col 40)",
            "(line 332,col 5)-(line 333,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.MinimizeExitPointsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.lang.String, java.lang.String)",
        "snippet": "  public void test(String js, String expected) {\n    test(js, expected, (DiagnosticType) null);\n  }\n",
        "begin_line": 342,
        "end_line": 344,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output.\n   *\n   * @param js Input\n   * @param expected Expected JS output\n   ",
        "child_ranges": [
            "(line 343,col 5)-(line 343,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.MinimizeExitPointsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.lang.String, java.lang.String, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void test(String js, String expected, DiagnosticType error) {\n    test(js, expected, error, null);\n  }\n",
        "begin_line": 354,
        "end_line": 356,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output,\n   * or that an expected error is encountered.\n   *\n   * @param js Input\n   * @param expected Expected output, or null if an error is expected\n   * @param error Expected error, or null if no error is expected\n   ",
        "child_ranges": [
            "(line 355,col 5)-(line 355,col 36)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.MinimizeExitPointsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.lang.String, java.lang.String, com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType, java.lang.String)",
        "snippet": "  public void test(String js, String expected, DiagnosticType error,\n                   DiagnosticType warning, String description) {\n    test(externsInputs, js, expected, error, warning, description);\n  }\n",
        "begin_line": 369,
        "end_line": 372,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output,\n   * or that an expected error is encountered.\n   *\n   * @param js Input\n   * @param expected Expected output, or null if an error is expected\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   * @param description The content of the error expected\n   ",
        "child_ranges": [
            "(line 371,col 5)-(line 371,col 67)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.MinimizeExitPointsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.lang.String, java.lang.String, com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void test(String js, String expected,\n                   DiagnosticType error, DiagnosticType warning) {\n    test(externsInputs, js, expected, error, warning, null);\n  }\n",
        "begin_line": 384,
        "end_line": 387,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output\n   * and (optionally) that an expected warning is issued. Or, if an error is\n   * expected, this method just verifies that the error is encountered.\n   *\n   * @param js Input\n   * @param expected Expected output, or null if an error is expected\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   ",
        "child_ranges": [
            "(line 386,col 5)-(line 386,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.MinimizeExitPointsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.lang.String, java.lang.String, java.lang.String, com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void test(String externs, String js, String expected,\n                   DiagnosticType error, DiagnosticType warning) {\n    test(externs, js, expected, error, warning, null);\n  }\n",
        "begin_line": 400,
        "end_line": 403,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output\n   * and (optionally) that an expected warning is issued. Or, if an error is\n   * expected, this method just verifies that the error is encountered.\n   *\n   * @param externs Externs input\n   * @param js Input\n   * @param expected Expected output, or null if an error is expected\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   ",
        "child_ranges": [
            "(line 402,col 5)-(line 402,col 54)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.MinimizeExitPointsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.lang.String, java.lang.String, java.lang.String, com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType, java.lang.String)",
        "snippet": "  public void test(String externs, String js, String expected,\n                   DiagnosticType error, DiagnosticType warning,\n                   String description) {\n    List<SourceFile> externsInputs = ImmutableList.of(\n        SourceFile.fromCode(\"externs\", externs));\n    test(externsInputs, js, expected, error, warning, description);\n  }\n",
        "begin_line": 419,
        "end_line": 425,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output\n   * and (optionally) that an expected warning is issued. Or, if an error is\n   * expected, this method just verifies that the error is encountered.\n   *\n   * @param externs Externs input\n   * @param js Input\n   * @param expected Expected output, or null if an error is expected\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   * @param description The description of the expected warning,\n   *      or null if no warning is expected or if the warning's description\n   *      should not be examined\n   ",
        "child_ranges": [
            "(line 422,col 5)-(line 423,col 49)",
            "(line 424,col 5)-(line 424,col 67)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.MinimizeExitPointsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.util.List<com.google.javascript.jscomp.SourceFile>, java.lang.String, java.lang.String, com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType, java.lang.String)",
        "snippet": "  public void test(List<SourceFile> externs, String js, String expected,\n                   DiagnosticType error,\n                   DiagnosticType warning, String description) {\n    Compiler compiler = createCompiler();\n    lastCompiler = compiler;\n\n    CompilerOptions options = getOptions();\n\n    if (this.acceptES5) {\n      options.setLanguageIn(LanguageMode.ECMASCRIPT5);\n    }\n    // Note that in this context, turning on the checkTypes option won't\n    // actually cause the type check to run.\n    options.checkTypes = parseTypeInfo;\n    compiler.init(externs, ImmutableList.of(\n        SourceFile.fromCode(filename, js)), options);\n\n    BaseJSTypeTestCase.addNativeProperties(compiler.getTypeRegistry());\n\n    test(compiler, maybeCreateArray(expected), error, warning, description);\n  }\n",
        "begin_line": 441,
        "end_line": 461,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output\n   * and (optionally) that an expected warning is issued. Or, if an error is\n   * expected, this method just verifies that the error is encountered.\n   *\n   * @param externs Externs inputs\n   * @param js Input\n   * @param expected Expected output, or null if an error is expected\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   * @param description The description of the expected warning,\n   *      or null if no warning is expected or if the warning's description\n   *      should not be examined\n   ",
        "child_ranges": [
            "(line 444,col 5)-(line 444,col 41)",
            "(line 445,col 5)-(line 445,col 28)",
            "(line 447,col 5)-(line 447,col 43)",
            "(line 449,col 5)-(line 451,col 5)",
            "(line 454,col 5)-(line 454,col 39)",
            "(line 455,col 5)-(line 456,col 53)",
            "(line 458,col 5)-(line 458,col 71)",
            "(line 460,col 5)-(line 460,col 76)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.MinimizeExitPointsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.maybeCreateArray(java.lang.String)",
        "snippet": "  private String[] maybeCreateArray(String expected) {\n    if (expected != null) {\n      return new String[] { expected };\n    }\n    return null;\n  }\n",
        "begin_line": 463,
        "end_line": 468,
        "comment": "",
        "child_ranges": [
            "(line 464,col 5)-(line 466,col 5)",
            "(line 467,col 5)-(line 467,col 16)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.MinimizeExitPointsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.lang.String[], java.lang.String[])",
        "snippet": "  public void test(String[] js, String[] expected) {\n    test(js, expected, null);\n  }\n",
        "begin_line": 476,
        "end_line": 478,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output.\n   *\n   * @param js Inputs\n   * @param expected Expected JS output\n   ",
        "child_ranges": [
            "(line 477,col 5)-(line 477,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.MinimizeExitPointsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.lang.String[], java.lang.String[], com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void test(String[] js, String[] expected, DiagnosticType error) {\n    test(js, expected, error, null);\n  }\n",
        "begin_line": 488,
        "end_line": 490,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output,\n   * or that an expected error is encountered.\n   *\n   * @param js Inputs\n   * @param expected Expected JS output\n   * @param error Expected error, or null if no error is expected\n   ",
        "child_ranges": [
            "(line 489,col 5)-(line 489,col 36)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.MinimizeExitPointsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.lang.String[], java.lang.String[], com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void test(String[] js, String[] expected, DiagnosticType error,\n                   DiagnosticType warning) {\n    test(js, expected, error, warning, null);\n  }\n",
        "begin_line": 502,
        "end_line": 505,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output\n   * and (optionally) that an expected warning is issued. Or, if an error is\n   * expected, this method just verifies that the error is encountered.\n   *\n   * @param js Inputs\n   * @param expected Expected JS output\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   ",
        "child_ranges": [
            "(line 504,col 5)-(line 504,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.MinimizeExitPointsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.lang.String[], java.lang.String[], com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType, java.lang.String)",
        "snippet": "  public void test(String[] js, String[] expected, DiagnosticType error,\n                   DiagnosticType warning, String description) {\n    Compiler compiler = createCompiler();\n    lastCompiler = compiler;\n\n    List<SourceFile> inputs = Lists.newArrayList();\n    for (int i = 0; i < js.length; i++) {\n      inputs.add(SourceFile.fromCode(\"input\" + i, js[i]));\n    }\n    compiler.init(externsInputs, inputs, getOptions());\n    test(compiler, expected, error, warning, description);\n  }\n",
        "begin_line": 520,
        "end_line": 531,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output\n   * and (optionally) that an expected warning is issued. Or, if an error is\n   * expected, this method just verifies that the error is encountered.\n   *\n   * @param js Inputs\n   * @param expected Expected JS output\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   * @param description The description of the expected warning,\n   *      or null if no warning is expected or if the warning's description\n   *      should not be examined\n   ",
        "child_ranges": [
            "(line 522,col 5)-(line 522,col 41)",
            "(line 523,col 5)-(line 523,col 28)",
            "(line 525,col 5)-(line 525,col 51)",
            "(line 526,col 5)-(line 528,col 5)",
            "(line 529,col 5)-(line 529,col 55)",
            "(line 530,col 5)-(line 530,col 58)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.MinimizeExitPointsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(com.google.javascript.jscomp.JSModule[], java.lang.String[])",
        "snippet": "  public void test(JSModule[] modules, String[] expected) {\n    test(modules, expected, null);\n  }\n",
        "begin_line": 539,
        "end_line": 541,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output.\n   *\n   * @param modules Module inputs\n   * @param expected Expected JS outputs (one per module)\n   ",
        "child_ranges": [
            "(line 540,col 5)-(line 540,col 34)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.MinimizeExitPointsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(com.google.javascript.jscomp.JSModule[], java.lang.String[], com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void test(JSModule[] modules, String[] expected,\n      DiagnosticType error) {\n    test(modules, expected, error, null);\n  }\n",
        "begin_line": 551,
        "end_line": 554,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output,\n   * or that an expected error is encountered.\n   *\n   * @param modules Module inputs\n   * @param expected Expected JS outputs (one per module)\n   * @param error Expected error, or null if no error is expected\n   ",
        "child_ranges": [
            "(line 553,col 5)-(line 553,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.MinimizeExitPointsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(com.google.javascript.jscomp.JSModule[], java.lang.String[], com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void test(JSModule[] modules, String[] expected,\n                   DiagnosticType error, DiagnosticType warning) {\n    Compiler compiler = createCompiler();\n    lastCompiler = compiler;\n\n    compiler.initModules(\n        externsInputs, Lists.newArrayList(modules), getOptions());\n    test(compiler, expected, error, warning);\n  }\n",
        "begin_line": 566,
        "end_line": 574,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output\n   * and (optionally) that an expected warning is issued. Or, if an error is\n   * expected, this method just verifies that the error is encountered.\n   *\n   * @param modules Module inputs\n   * @param expected Expected JS outputs (one per module)\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   ",
        "child_ranges": [
            "(line 568,col 5)-(line 568,col 41)",
            "(line 569,col 5)-(line 569,col 28)",
            "(line 571,col 5)-(line 572,col 66)",
            "(line 573,col 5)-(line 573,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.MinimizeExitPointsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(java.lang.String)",
        "snippet": "  public void testSame(String js) {\n    test(js, js);\n  }\n",
        "begin_line": 581,
        "end_line": 583,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as its input.\n   *\n   * @param js Input and output\n   ",
        "child_ranges": [
            "(line 582,col 5)-(line 582,col 17)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.MinimizeExitPointsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(java.lang.String, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void testSame(String js, DiagnosticType warning) {\n    test(js, js, null, warning);\n  }\n",
        "begin_line": 592,
        "end_line": 594,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as its input\n   * and (optionally) that an expected warning is issued.\n   *\n   * @param js Input and output\n   * @param warning Expected warning, or null if no warning is expected\n   ",
        "child_ranges": [
            "(line 593,col 5)-(line 593,col 32)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.MinimizeExitPointsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(java.lang.String, com.google.javascript.jscomp.DiagnosticType, boolean)",
        "snippet": "  public void testSame(String js, DiagnosticType diag, boolean error) {\n    if (error) {\n      test(js, js, diag);\n    } else {\n      test(js, js, null, diag);\n    }\n  }\n",
        "begin_line": 604,
        "end_line": 610,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as its input\n   * and (optionally) that an expected warning is issued.\n   *\n   * @param js Input and output\n   * @param diag Expected error or warning, or null if none is expected\n   * @param error true if diag is an error, false if it is a warning\n   ",
        "child_ranges": [
            "(line 605,col 5)-(line 609,col 5)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.MinimizeExitPointsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(java.lang.String, java.lang.String, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void testSame(String externs, String js, DiagnosticType warning) {\n    testSame(externs, js, warning, null);\n  }\n",
        "begin_line": 620,
        "end_line": 622,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as its input\n   * and (optionally) that an expected warning is issued.\n   *\n   * @param externs Externs input\n   * @param js Input and output\n   * @param warning Expected warning, or null if no warning is expected\n   ",
        "child_ranges": [
            "(line 621,col 5)-(line 621,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.MinimizeExitPointsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(java.lang.String, java.lang.String, com.google.javascript.jscomp.DiagnosticType, boolean)",
        "snippet": "  public void testSame(\n      String externs, String js, DiagnosticType diag, boolean error) {\n    if (error) {\n      test(externs, js, js, diag, null);\n    } else {\n      test(externs, js, js, null, diag);\n    }\n  }\n",
        "begin_line": 633,
        "end_line": 640,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as its input\n   * and (optionally) that an expected warning is issued.\n   *\n   * @param externs Externs input\n   * @param js Input and output\n   * @param diag Expected error or warning, or null if none is expected\n   * @param error true if diag is an error, false if it is a warning\n   ",
        "child_ranges": [
            "(line 635,col 5)-(line 639,col 5)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.MinimizeExitPointsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(java.lang.String, java.lang.String, com.google.javascript.jscomp.DiagnosticType, java.lang.String)",
        "snippet": "  public void testSame(String externs, String js, DiagnosticType warning,\n                       String description) {\n    List<SourceFile> externsInputs = ImmutableList.of(\n        SourceFile.fromCode(\"externs\", externs));\n    test(externsInputs, js, js, null, warning, description);\n  }\n",
        "begin_line": 653,
        "end_line": 658,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as its input\n   * and (optionally) that an expected warning and description is issued.\n   *\n   * @param externs Externs input\n   * @param js Input and output\n   * @param warning Expected warning, or null if no warning is expected\n   * @param description The description of the expected warning,\n   *      or null if no warning is expected or if the warning's description\n   *      should not be examined\n   ",
        "child_ranges": [
            "(line 655,col 5)-(line 656,col 49)",
            "(line 657,col 5)-(line 657,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.MinimizeExitPointsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(java.lang.String[])",
        "snippet": "  public void testSame(String[] js) {\n    test(js, js);\n  }\n",
        "begin_line": 665,
        "end_line": 667,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as its input.\n   *\n   * @param js Inputs and outputs\n   ",
        "child_ranges": [
            "(line 666,col 5)-(line 666,col 17)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.MinimizeExitPointsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(java.lang.String[], com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void testSame(String[] js, DiagnosticType error) {\n    test(js, js, error);\n  }\n",
        "begin_line": 676,
        "end_line": 678,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as its input,\n   * and emits the given error.\n   *\n   * @param js Inputs and outputs\n   * @param error Expected error, or null if no error is expected\n   ",
        "child_ranges": [
            "(line 677,col 5)-(line 677,col 24)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.MinimizeExitPointsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(java.lang.String[], com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void testSame(\n      String[] js, DiagnosticType error, DiagnosticType warning) {\n    test(js, js, error, warning);\n  }\n",
        "begin_line": 688,
        "end_line": 691,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as its input,\n   * and emits the given error and warning.\n   *\n   * @param js Inputs and outputs\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   ",
        "child_ranges": [
            "(line 690,col 5)-(line 690,col 33)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.MinimizeExitPointsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(com.google.javascript.jscomp.JSModule[])",
        "snippet": "  public void testSame(JSModule[] modules) {\n    testSame(modules, null);\n  }\n",
        "begin_line": 698,
        "end_line": 700,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as the input.\n   *\n   * @param modules Module inputs\n   ",
        "child_ranges": [
            "(line 699,col 5)-(line 699,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.MinimizeExitPointsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(com.google.javascript.jscomp.JSModule[], com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void testSame(JSModule[] modules, DiagnosticType warning) {\n    try {\n      String[] expected = new String[modules.length];\n      for (int i = 0; i < modules.length; i++) {\n        expected[i] = \"\";\n        for (CompilerInput input : modules[i].getInputs()) {\n          expected[i] += input.getSourceFile().getCode();\n        }\n      }\n      test(modules, expected, null, warning);\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n  }\n",
        "begin_line": 708,
        "end_line": 721,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as the input.\n   *\n   * @param modules Module inputs\n   * @param warning A warning, or null for no expected warning.\n   ",
        "child_ranges": [
            "(line 709,col 5)-(line 720,col 5)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.MinimizeExitPointsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(com.google.javascript.jscomp.Compiler, java.lang.String[], com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  protected void test(Compiler compiler, String[] expected,\n                      DiagnosticType error, DiagnosticType warning) {\n    test(compiler, expected, error, warning, null);\n  }\n",
        "begin_line": 734,
        "end_line": 737,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output\n   * and (optionally) that an expected warning is issued. Or, if an error is\n   * expected, this method just verifies that the error is encountered.\n   *\n   * @param compiler A compiler that has been initialized via\n   *     {@link Compiler#init}\n   * @param expected Expected output, or null if an error is expected\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   ",
        "child_ranges": [
            "(line 736,col 5)-(line 736,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.MinimizeExitPointsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(com.google.javascript.jscomp.Compiler, java.lang.String[], com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType, java.lang.String)",
        "snippet": "  private void test(Compiler compiler, String[] expected,\n                    DiagnosticType error, DiagnosticType warning,\n                    String description) {\n    RecentChange recentChange = new RecentChange();\n    compiler.addChangeHandler(recentChange);\n\n    Node root = compiler.parseInputs();\n    assertTrue(\"Unexpected parse error(s): \" +\n        Joiner.on(\"\\n\").join(compiler.getErrors()), root != null);\n    if (!expectParseWarningsThisTest) {\n      assertTrue(\"Unexpected parse warnings(s): \" +\n          Joiner.on(\"\\n\").join(compiler.getWarnings()),\n          compiler.getWarnings().length == 0);\n    }\n\n    if (astValidationEnabled) {\n      (new AstValidator()).validateRoot(root);\n    }\n    Node externsRoot = root.getFirstChild();\n    Node mainRoot = root.getLastChild();\n\n    // Save the tree for later comparison.\n    Node rootClone = root.cloneTree();\n    Node externsRootClone = rootClone.getFirstChild();\n    Node mainRootClone = rootClone.getLastChild();\n    Map<Node, Node> mtoc = NodeUtil.mapMainToClone(mainRoot, mainRootClone);\n\n    int numRepetitions = getNumRepetitions();\n    ErrorManager[] errorManagers = new ErrorManager[numRepetitions];\n    int aggregateWarningCount = 0;\n    List<JSError> aggregateWarnings = Lists.newArrayList();\n    boolean hasCodeChanged = false;\n\n    assertFalse(\"Code should not change before processing\",\n        recentChange.hasCodeChanged());\n\n    for (int i = 0; i < numRepetitions; ++i) {\n      if (compiler.getErrorCount() == 0) {\n        errorManagers[i] = new BlackHoleErrorManager(compiler);\n\n        // Only run process closure primitives once, if asked.\n        if (closurePassEnabled && i == 0) {\n          recentChange.reset();\n          new ProcessClosurePrimitives(compiler, null, CheckLevel.ERROR)\n              .process(null, mainRoot);\n          hasCodeChanged = hasCodeChanged || recentChange.hasCodeChanged();\n        }\n\n        // Only run the type checking pass once, if asked.\n        // Running it twice can cause unpredictable behavior because duplicate\n        // objects for the same type are created, and the type system\n        // uses reference equality to compare many types.\n        if (typeCheckEnabled && i == 0) {\n          TypeCheck check = createTypeCheck(compiler, typeCheckLevel);\n          check.processForTesting(externsRoot, mainRoot);\n        }\n\n        // Only run the normalize pass once, if asked.\n        if (normalizeEnabled && i == 0) {\n          normalizeActualCode(compiler, externsRoot, mainRoot);\n        }\n\n        if (markNoSideEffects && i == 0) {\n          MarkNoSideEffectCalls mark = new MarkNoSideEffectCalls(compiler);\n          mark.process(externsRoot, mainRoot);\n        }\n\n        recentChange.reset();\n\n        getProcessor(compiler).process(externsRoot, mainRoot);\n        if (astValidationEnabled) {\n          (new AstValidator()).validateRoot(root);\n        }\n        if (checkLineNumbers) {\n          (new LineNumberCheck(compiler)).process(externsRoot, mainRoot);\n        }\n\n        hasCodeChanged = hasCodeChanged || recentChange.hasCodeChanged();\n        aggregateWarningCount += errorManagers[i].getWarningCount();\n        aggregateWarnings.addAll(Lists.newArrayList(compiler.getWarnings()));\n\n        if (normalizeEnabled) {\n          boolean verifyDeclaredConstants = true;\n          new Normalize.VerifyConstants(compiler, verifyDeclaredConstants)\n              .process(externsRoot, mainRoot);\n        }\n      }\n    }\n\n    if (error == null) {\n      assertEquals(\n          \"Unexpected error(s): \" + Joiner.on(\"\\n\").join(compiler.getErrors()),\n          0, compiler.getErrorCount());\n\n      // Verify the symbol table.\n      ErrorManager symbolTableErrorManager =\n          new BlackHoleErrorManager(compiler);\n      Node expectedRoot = null;\n      if (expected != null) {\n        expectedRoot = parseExpectedJs(expected);\n        expectedRoot.detachFromParent();\n      }\n\n      JSError[] stErrors = symbolTableErrorManager.getErrors();\n      if (expectedSymbolTableError != null) {\n        assertEquals(\"There should be one error.\", 1, stErrors.length);\n        assertEquals(expectedSymbolTableError, stErrors[0].getType());\n      } else {\n        assertEquals(\"Unexpected symbol table error(s): \" +\n            Joiner.on(\"\\n\").join(stErrors),\n            0, stErrors.length);\n      }\n\n      if (warning == null) {\n        assertEquals(\n            \"Unexpected warning(s): \" + Joiner.on(\"\\n\").join(aggregateWarnings),\n            0, aggregateWarningCount);\n      } else {\n        assertEquals(\"There should be one warning, repeated \" + numRepetitions +\n            \" time(s).\", numRepetitions, aggregateWarningCount);\n        for (int i = 0; i < numRepetitions; ++i) {\n          JSError[] warnings = errorManagers[i].getWarnings();\n          JSError actual = warnings[0];\n          assertEquals(warning, actual.getType());\n\n          // Make sure that source information is always provided.\n          if (!allowSourcelessWarnings) {\n            assertTrue(\"Missing source file name in warning\",\n                actual.sourceName != null && !actual.sourceName.isEmpty());\n            assertTrue(\"Missing line number in warning\",\n                -1 != actual.lineNumber);\n            assertTrue(\"Missing char number in warning\",\n                -1 != actual.getCharno());\n          }\n\n          if (description != null) {\n            assertEquals(description, actual.description);\n          }\n        }\n      }\n\n      // If we ran normalize on the AST, we must also run normalize on the\n      // clone before checking for changes.\n      if (normalizeEnabled) {\n        normalizeActualCode(compiler, externsRootClone, mainRootClone);\n      }\n\n      boolean codeChange = !mainRootClone.isEquivalentTo(mainRoot);\n      boolean externsChange = !externsRootClone.isEquivalentTo(externsRoot);\n\n      // Generally, externs should not be changed by the compiler passes.\n      if (externsChange && !allowExternsChanges) {\n        String explanation = externsRootClone.checkTreeEquals(externsRoot);\n        fail(\"Unexpected changes to externs\" +\n            \"\\nExpected: \" + compiler.toSource(externsRootClone) +\n            \"\\nResult: \" + compiler.toSource(externsRoot) +\n            \"\\n\" + explanation);\n      }\n\n      if (!codeChange && !externsChange) {\n        assertFalse(\n            \"compiler.reportCodeChange() was called \" +\n            \"even though nothing changed\",\n            hasCodeChanged);\n      } else {\n        assertTrue(\"compiler.reportCodeChange() should have been called\",\n            hasCodeChanged);\n      }\n\n      // Check correctness of the changed-scopes-only traversal\n      NodeUtil.verifyScopeChanges(mtoc, mainRoot, false);\n\n      if (expected != null) {\n        if (compareAsTree) {\n          String explanation = expectedRoot.checkTreeEquals(mainRoot);\n          assertNull(\"\\nExpected: \" + compiler.toSource(expectedRoot) +\n              \"\\nResult: \" + compiler.toSource(mainRoot) +\n              \"\\n\" + explanation, explanation);\n        } else if (expected != null) {\n          assertEquals(\n              Joiner.on(\"\").join(expected), compiler.toSource(mainRoot));\n        }\n      }\n\n      // Verify normalization is not invalidated.\n      Node normalizeCheckRootClone = root.cloneTree();\n      Node normalizeCheckExternsRootClone =\n          normalizeCheckRootClone.getFirstChild();\n      Node normalizeCheckMainRootClone = normalizeCheckRootClone.getLastChild();\n      new PrepareAst(compiler).process(\n          normalizeCheckExternsRootClone, normalizeCheckMainRootClone);\n      String explanation =\n          normalizeCheckMainRootClone.checkTreeEquals(mainRoot);\n      assertNull(\"Node structure normalization invalidated.\\nExpected: \" +\n          compiler.toSource(normalizeCheckMainRootClone) +\n          \"\\nResult: \" + compiler.toSource(mainRoot) +\n          \"\\n\" + explanation, explanation);\n\n      // TODO(johnlenz): enable this for most test cases.\n      // Currently, this invalidates test for while-loops, for-loop\n      // initializers, and other naming.  However, a set of code\n      // (Closure primitive rewrites, etc) runs before the Normalize pass,\n      // so this can't be force on everywhere.\n      if (normalizeEnabled) {\n        new Normalize(compiler, true).process(\n            normalizeCheckExternsRootClone, normalizeCheckMainRootClone);\n        explanation =  normalizeCheckMainRootClone.checkTreeEquals(mainRoot);\n        assertNull(\"Normalization invalidated.\\nExpected: \" +\n            compiler.toSource(normalizeCheckMainRootClone) +\n            \"\\nResult: \" + compiler.toSource(mainRoot) +\n            \"\\n\" + explanation, explanation);\n      }\n    } else {\n      String errors = \"\";\n      for (JSError actualError : compiler.getErrors()) {\n        errors += actualError.description + \"\\n\";\n      }\n      assertEquals(\"There should be one error. \" + errors,\n          1, compiler.getErrorCount());\n      assertEquals(errors, error, compiler.getErrors()[0].getType());\n\n      if (warning != null) {\n        String warnings = \"\";\n        for (JSError actualError : compiler.getWarnings()) {\n          warnings += actualError.description + \"\\n\";\n        }\n        assertEquals(\"There should be one warning. \" + warnings,\n            1, compiler.getWarningCount());\n        assertEquals(warnings, warning, compiler.getWarnings()[0].getType());\n      }\n    }\n  }\n",
        "begin_line": 753,
        "end_line": 984,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output\n   * and (optionally) that an expected warning is issued. Or, if an error is\n   * expected, this method just verifies that the error is encountered.\n   *\n   * @param compiler A compiler that has been initialized via\n   *     {@link Compiler#init}\n   * @param expected Expected output, or null if an error is expected\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   * @param description The description of the expected warning,\n   *      or null if no warning is expected or if the warning's description\n   *      should not be examined\n   ",
        "child_ranges": [
            "(line 756,col 5)-(line 756,col 51)",
            "(line 757,col 5)-(line 757,col 44)",
            "(line 759,col 5)-(line 759,col 39)",
            "(line 760,col 5)-(line 761,col 66)",
            "(line 762,col 5)-(line 766,col 5)",
            "(line 768,col 5)-(line 770,col 5)",
            "(line 771,col 5)-(line 771,col 44)",
            "(line 772,col 5)-(line 772,col 40)",
            "(line 775,col 5)-(line 775,col 38)",
            "(line 776,col 5)-(line 776,col 54)",
            "(line 777,col 5)-(line 777,col 50)",
            "(line 778,col 5)-(line 778,col 76)",
            "(line 780,col 5)-(line 780,col 45)",
            "(line 781,col 5)-(line 781,col 68)",
            "(line 782,col 5)-(line 782,col 34)",
            "(line 783,col 5)-(line 783,col 59)",
            "(line 784,col 5)-(line 784,col 35)",
            "(line 786,col 5)-(line 787,col 39)",
            "(line 789,col 5)-(line 840,col 5)",
            "(line 842,col 5)-(line 983,col 5)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.MinimizeExitPointsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.normalizeActualCode(com.google.javascript.jscomp.Compiler, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  private void normalizeActualCode(\n      Compiler compiler, Node externsRoot, Node mainRoot) {\n    Normalize normalize = new Normalize(compiler, false);\n    normalize.process(externsRoot, mainRoot);\n  }\n",
        "begin_line": 986,
        "end_line": 990,
        "comment": "",
        "child_ranges": [
            "(line 988,col 5)-(line 988,col 57)",
            "(line 989,col 5)-(line 989,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.MinimizeExitPointsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.parseExpectedJs(java.lang.String[])",
        "snippet": "  protected Node parseExpectedJs(String[] expected) {\n    Compiler compiler = createCompiler();\n    List<SourceFile> inputs = Lists.newArrayList();\n    for (int i = 0; i < expected.length; i++) {\n      inputs.add(SourceFile.fromCode(\"expected\" + i, expected[i]));\n    }\n    compiler.init(externsInputs, inputs, getOptions());\n    Node root = compiler.parseInputs();\n    assertTrue(\"Unexpected parse error(s): \" +\n        Joiner.on(\"\\n\").join(compiler.getErrors()), root != null);\n    Node externsRoot = root.getFirstChild();\n    Node mainRoot = externsRoot.getNext();\n    // Only run the normalize pass, if asked.\n    if (normalizeEnabled && normalizeExpected && !compiler.hasErrors()) {\n      Normalize normalize = new Normalize(compiler, false);\n      normalize.process(externsRoot, mainRoot);\n    }\n    return mainRoot;\n  }\n",
        "begin_line": 995,
        "end_line": 1013,
        "comment": "\n   * Parses expected JS inputs and returns the root of the parse tree.\n   ",
        "child_ranges": [
            "(line 996,col 5)-(line 996,col 41)",
            "(line 997,col 5)-(line 997,col 51)",
            "(line 998,col 5)-(line 1000,col 5)",
            "(line 1001,col 5)-(line 1001,col 55)",
            "(line 1002,col 5)-(line 1002,col 39)",
            "(line 1003,col 5)-(line 1004,col 66)",
            "(line 1005,col 5)-(line 1005,col 44)",
            "(line 1006,col 5)-(line 1006,col 42)",
            "(line 1008,col 5)-(line 1011,col 5)",
            "(line 1012,col 5)-(line 1012,col 20)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.MinimizeExitPointsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.parseExpectedJs(java.lang.String)",
        "snippet": "  protected Node parseExpectedJs(String expected) {\n    return parseExpectedJs(new String[] {expected});\n  }\n",
        "begin_line": 1015,
        "end_line": 1017,
        "comment": "",
        "child_ranges": [
            "(line 1016,col 5)-(line 1016,col 52)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.MinimizeExitPointsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.createModuleChain(java.lang.String...)",
        "snippet": "  static JSModule[] createModuleChain(String... inputs) {\n    JSModule[] modules = createModules(inputs);\n    for (int i = 1; i < modules.length; i++) {\n      modules[i].addDependency(modules[i - 1]);\n    }\n    return modules;\n  }\n",
        "begin_line": 1023,
        "end_line": 1029,
        "comment": "\n   * Generates a list of modules from a list of inputs, such that each module\n   * depends on the module before it.\n   ",
        "child_ranges": [
            "(line 1024,col 5)-(line 1024,col 47)",
            "(line 1025,col 5)-(line 1027,col 5)",
            "(line 1028,col 5)-(line 1028,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.MinimizeExitPointsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.createModuleStar(java.lang.String...)",
        "snippet": "  static JSModule[] createModuleStar(String... inputs) {\n    JSModule[] modules = createModules(inputs);\n    for (int i = 1; i < modules.length; i++) {\n      modules[i].addDependency(modules[0]);\n    }\n    return modules;\n  }\n",
        "begin_line": 1035,
        "end_line": 1041,
        "comment": "\n   * Generates a list of modules from a list of inputs, such that each module\n   * depends on the first module.\n   ",
        "child_ranges": [
            "(line 1036,col 5)-(line 1036,col 47)",
            "(line 1037,col 5)-(line 1039,col 5)",
            "(line 1040,col 5)-(line 1040,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.MinimizeExitPointsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.createModuleBush(java.lang.String...)",
        "snippet": "  static JSModule[] createModuleBush(String ... inputs) {\n    Preconditions.checkState(inputs.length > 2);\n    JSModule[] modules = createModules(inputs);\n    for (int i = 1; i < modules.length; i++) {\n      modules[i].addDependency(modules[i == 1 ? 0 : 1]);\n    }\n    return modules;\n  }\n",
        "begin_line": 1048,
        "end_line": 1055,
        "comment": "\n   * Generates a list of modules from a list of inputs, such that modules\n   * form a bush formation. In a bush formation, module 2 depends\n   * on module 1, and all other modules depend on module 2.\n   ",
        "child_ranges": [
            "(line 1049,col 5)-(line 1049,col 48)",
            "(line 1050,col 5)-(line 1050,col 47)",
            "(line 1051,col 5)-(line 1053,col 5)",
            "(line 1054,col 5)-(line 1054,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.MinimizeExitPointsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.createModuleTree(java.lang.String...)",
        "snippet": "  static JSModule[] createModuleTree(String ... inputs) {\n    JSModule[] modules = createModules(inputs);\n    for (int i = 1; i < modules.length; i++) {\n      modules[i].addDependency(modules[(i - 1) / 2]);\n    }\n    return modules;\n  }\n",
        "begin_line": 1062,
        "end_line": 1068,
        "comment": "\n   * Generates a list of modules from a list of inputs, such that modules\n   * form a tree formation. In a tree formation, module N depends on\n   * module `floor(N/2)`, So the modules form a balanced binary tree.\n   ",
        "child_ranges": [
            "(line 1063,col 5)-(line 1063,col 47)",
            "(line 1064,col 5)-(line 1066,col 5)",
            "(line 1067,col 5)-(line 1067,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.MinimizeExitPointsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.createModules(java.lang.String...)",
        "snippet": "  static JSModule[] createModules(String... inputs) {\n    JSModule[] modules = new JSModule[inputs.length];\n    for (int i = 0; i < inputs.length; i++) {\n      JSModule module = modules[i] = new JSModule(\"m\" + i);\n      module.add(SourceFile.fromCode(\"i\" + i, inputs[i]));\n    }\n    return modules;\n  }\n",
        "begin_line": 1074,
        "end_line": 1081,
        "comment": "\n   * Generates a list of modules from a list of inputs. Does not generate any\n   * dependencies between the modules.\n   ",
        "child_ranges": [
            "(line 1075,col 5)-(line 1075,col 53)",
            "(line 1076,col 5)-(line 1079,col 5)",
            "(line 1080,col 5)-(line 1080,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.MinimizeExitPointsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.BlackHoleErrorManager.BlackHoleErrorManager(com.google.javascript.jscomp.Compiler)",
        "snippet": "    private BlackHoleErrorManager(Compiler compiler) {\n      compiler.setErrorManager(this);\n    }\n",
        "begin_line": 1084,
        "end_line": 1086,
        "comment": "",
        "child_ranges": [
            "(line 1085,col 7)-(line 1085,col 37)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.MinimizeExitPointsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.BlackHoleErrorManager.println(com.google.javascript.jscomp.CheckLevel, com.google.javascript.jscomp.JSError)",
        "snippet": "    @Override\n    public void println(CheckLevel level, JSError error) {}\n",
        "begin_line": 1088,
        "end_line": 1089,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.MinimizeExitPointsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.BlackHoleErrorManager.printSummary()",
        "snippet": "    @Override\n    public void printSummary() {}\n",
        "begin_line": 1091,
        "end_line": 1092,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.MinimizeExitPointsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.createCompiler()",
        "snippet": "  Compiler createCompiler() {\n    Compiler compiler = new Compiler();\n    return compiler;\n  }\n",
        "begin_line": 1095,
        "end_line": 1098,
        "comment": "",
        "child_ranges": [
            "(line 1096,col 5)-(line 1096,col 39)",
            "(line 1097,col 5)-(line 1097,col 20)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.MinimizeExitPointsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.setExpectedSymbolTableError(com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  protected void setExpectedSymbolTableError(DiagnosticType type) {\n    this.expectedSymbolTableError = type;\n  }\n",
        "begin_line": 1100,
        "end_line": 1102,
        "comment": "",
        "child_ranges": [
            "(line 1101,col 5)-(line 1101,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.MinimizeExitPointsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.findQualifiedNameNode(java.lang.String, com.google.javascript.rhino.Node)",
        "snippet": "  protected final Node findQualifiedNameNode(final String name, Node root) {\n    final List<Node> matches = Lists.newArrayList();\n    NodeUtil.visitPostOrder(root,\n        new NodeUtil.Visitor() {\n          @Override public void visit(Node n) {\n            if (name.equals(n.getQualifiedName())) {\n              matches.add(n);\n            }\n          }\n        },\n        Predicates.<Node>alwaysTrue());\n    return matches.get(0);\n  }\n",
        "begin_line": 1105,
        "end_line": 1117,
        "comment": " Finds the first matching qualified name node in post-traversal order. ",
        "child_ranges": [
            "(line 1106,col 5)-(line 1106,col 52)",
            "(line 1107,col 5)-(line 1115,col 39)",
            "(line 1116,col 5)-(line 1116,col 26)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.MinimizeExitPointsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.Anonymous-25e8b678-ad15-442d-97ac-a44a32465403.visit(com.google.javascript.rhino.Node)",
        "snippet": "          @Override public void visit(Node n) {\n            if (name.equals(n.getQualifiedName())) {\n              matches.add(n);\n            }\n          }\n",
        "begin_line": 1109,
        "end_line": 1113,
        "comment": "",
        "child_ranges": [
            "(line 1110,col 13)-(line 1112,col 13)"
        ]
    }
]