[
    {
        "class_name": "org.apache.commons.math.estimation.EstimatedParameter",
        "src_path": "src/java/org/apache/commons/math/estimation/EstimatedParameter.java",
        "signature": "org.apache.commons.math.estimation.EstimatedParameter.name",
        "snippet": "  private   String  name;",
        "begin_line": 111,
        "end_line": 111,
        "comment": " Name of the parameter "
    },
    {
        "class_name": "org.apache.commons.math.estimation.EstimatedParameter",
        "src_path": "src/java/org/apache/commons/math/estimation/EstimatedParameter.java",
        "signature": "org.apache.commons.math.estimation.EstimatedParameter.estimate",
        "snippet": "  protected double  estimate;",
        "begin_line": 114,
        "end_line": 114,
        "comment": " Current value of the parameter "
    },
    {
        "class_name": "org.apache.commons.math.estimation.EstimatedParameter",
        "src_path": "src/java/org/apache/commons/math/estimation/EstimatedParameter.java",
        "signature": "org.apache.commons.math.estimation.EstimatedParameter.bound",
        "snippet": "  private   boolean bound;",
        "begin_line": 119,
        "end_line": 119,
        "comment": " Indicator for bound parameters\n   * (ie parameters that should not be estimated)\n   "
    },
    {
        "class_name": "org.apache.commons.math.estimation.EstimatedParameter",
        "src_path": "src/java/org/apache/commons/math/estimation/EstimatedParameter.java",
        "signature": "org.apache.commons.math.estimation.EstimatedParameter.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = -555440800213416949L;",
        "begin_line": 122,
        "end_line": 122,
        "comment": " Serializable version identifier "
    },
    {
        "class_name": "org.apache.commons.math.estimation.WeightedMeasurement",
        "src_path": "src/java/org/apache/commons/math/estimation/WeightedMeasurement.java",
        "signature": "org.apache.commons.math.estimation.WeightedMeasurement.weight",
        "snippet": "  private final double  weight;",
        "begin_line": 159,
        "end_line": 159,
        "comment": " Measurement weight. "
    },
    {
        "class_name": "org.apache.commons.math.estimation.WeightedMeasurement",
        "src_path": "src/java/org/apache/commons/math/estimation/WeightedMeasurement.java",
        "signature": "org.apache.commons.math.estimation.WeightedMeasurement.measuredValue",
        "snippet": "  private final double  measuredValue;",
        "begin_line": 162,
        "end_line": 162,
        "comment": " Value of the measurements. "
    },
    {
        "class_name": "org.apache.commons.math.estimation.WeightedMeasurement",
        "src_path": "src/java/org/apache/commons/math/estimation/WeightedMeasurement.java",
        "signature": "org.apache.commons.math.estimation.WeightedMeasurement.ignored",
        "snippet": "  private       boolean ignored;",
        "begin_line": 165,
        "end_line": 165,
        "comment": " Ignore measurement indicator. "
    },
    {
        "class_name": "org.apache.commons.math.estimation.AbstractEstimator",
        "src_path": "src/java/org/apache/commons/math/estimation/AbstractEstimator.java",
        "signature": "org.apache.commons.math.estimation.AbstractEstimator.measurements",
        "snippet": "    protected WeightedMeasurement[] measurements;",
        "begin_line": 261,
        "end_line": 261,
        "comment": " Array of measurements. "
    },
    {
        "class_name": "org.apache.commons.math.estimation.AbstractEstimator",
        "src_path": "src/java/org/apache/commons/math/estimation/AbstractEstimator.java",
        "signature": "org.apache.commons.math.estimation.AbstractEstimator.parameters",
        "snippet": "    protected EstimatedParameter[] parameters;",
        "begin_line": 264,
        "end_line": 264,
        "comment": " Array of parameters. "
    },
    {
        "class_name": "org.apache.commons.math.estimation.AbstractEstimator",
        "src_path": "src/java/org/apache/commons/math/estimation/AbstractEstimator.java",
        "signature": "org.apache.commons.math.estimation.AbstractEstimator.jacobian",
        "snippet": "    protected double[] jacobian;",
        "begin_line": 273,
        "end_line": 273,
        "comment": " \n     * Jacobian matrix.\n     * <p>This matrix is in canonical form just after the calls to\n     * {@link #updateJacobian()}, but may be modified by the solver\n     * in the derived class (the {@link LevenbergMarquardtEstimator\n     * Levenberg-Marquardt estimator} does this).</p>\n     "
    },
    {
        "class_name": "org.apache.commons.math.estimation.AbstractEstimator",
        "src_path": "src/java/org/apache/commons/math/estimation/AbstractEstimator.java",
        "signature": "org.apache.commons.math.estimation.AbstractEstimator.cols",
        "snippet": "    protected int cols;",
        "begin_line": 276,
        "end_line": 276,
        "comment": " Number of columns of the jacobian matrix. "
    },
    {
        "class_name": "org.apache.commons.math.estimation.AbstractEstimator",
        "src_path": "src/java/org/apache/commons/math/estimation/AbstractEstimator.java",
        "signature": "org.apache.commons.math.estimation.AbstractEstimator.rows",
        "snippet": "    protected int rows;",
        "begin_line": 279,
        "end_line": 279,
        "comment": " Number of rows of the jacobian matrix. "
    },
    {
        "class_name": "org.apache.commons.math.estimation.AbstractEstimator",
        "src_path": "src/java/org/apache/commons/math/estimation/AbstractEstimator.java",
        "signature": "org.apache.commons.math.estimation.AbstractEstimator.residuals",
        "snippet": "    protected double[] residuals;",
        "begin_line": 287,
        "end_line": 287,
        "comment": " Residuals array.\n     * <p>This array is in canonical form just after the calls to\n     * {@link #updateJacobian()}, but may be modified by the solver\n     * in the derived class (the {@link LevenbergMarquardtEstimator\n     * Levenberg-Marquardt estimator} does this).</p>\n     "
    },
    {
        "class_name": "org.apache.commons.math.estimation.AbstractEstimator",
        "src_path": "src/java/org/apache/commons/math/estimation/AbstractEstimator.java",
        "signature": "org.apache.commons.math.estimation.AbstractEstimator.cost",
        "snippet": "    protected double cost;",
        "begin_line": 290,
        "end_line": 290,
        "comment": " Cost value (square root of the sum of the residuals). "
    },
    {
        "class_name": "org.apache.commons.math.estimation.AbstractEstimator",
        "src_path": "src/java/org/apache/commons/math/estimation/AbstractEstimator.java",
        "signature": "org.apache.commons.math.estimation.AbstractEstimator.maxCostEval",
        "snippet": "    private int maxCostEval;",
        "begin_line": 293,
        "end_line": 293,
        "comment": " Maximal allowed number of cost evaluations. "
    },
    {
        "class_name": "org.apache.commons.math.estimation.AbstractEstimator",
        "src_path": "src/java/org/apache/commons/math/estimation/AbstractEstimator.java",
        "signature": "org.apache.commons.math.estimation.AbstractEstimator.costEvaluations",
        "snippet": "    private int costEvaluations;",
        "begin_line": 296,
        "end_line": 296,
        "comment": " Number of cost evaluations. "
    },
    {
        "class_name": "org.apache.commons.math.estimation.AbstractEstimator",
        "src_path": "src/java/org/apache/commons/math/estimation/AbstractEstimator.java",
        "signature": "org.apache.commons.math.estimation.AbstractEstimator.jacobianEvaluations",
        "snippet": "    private int jacobianEvaluations;",
        "begin_line": 299,
        "end_line": 299,
        "comment": " Number of jacobian evaluations. "
    },
    {
        "class_name": "org.apache.commons.math.linear.RealMatrixImpl",
        "src_path": "src/java/org/apache/commons/math/linear/RealMatrixImpl.java",
        "signature": "org.apache.commons.math.linear.RealMatrixImpl.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 4237564493130426188L;",
        "begin_line": 55,
        "end_line": 55,
        "comment": " Serializable version identifier "
    },
    {
        "class_name": "org.apache.commons.math.linear.RealMatrixImpl",
        "src_path": "src/java/org/apache/commons/math/linear/RealMatrixImpl.java",
        "signature": "org.apache.commons.math.linear.RealMatrixImpl.data",
        "snippet": "    private double data[][] = null;",
        "begin_line": 58,
        "end_line": 58,
        "comment": " Entries of the matrix "
    },
    {
        "class_name": "org.apache.commons.math.linear.RealMatrixImpl",
        "src_path": "src/java/org/apache/commons/math/linear/RealMatrixImpl.java",
        "signature": "org.apache.commons.math.linear.RealMatrixImpl.lu",
        "snippet": "    private double lu[][] = null;",
        "begin_line": 63,
        "end_line": 63,
        "comment": " Entries of cached LU decomposition.\n     *  All updates to data (other than luDecompose()) *must* set this to null\n     "
    },
    {
        "class_name": "org.apache.commons.math.linear.RealMatrixImpl",
        "src_path": "src/java/org/apache/commons/math/linear/RealMatrixImpl.java",
        "signature": "org.apache.commons.math.linear.RealMatrixImpl.permutation",
        "snippet": "    private int[] permutation = null;",
        "begin_line": 66,
        "end_line": 66,
        "comment": " Permutation associated with LU decomposition "
    },
    {
        "class_name": "org.apache.commons.math.linear.RealMatrixImpl",
        "src_path": "src/java/org/apache/commons/math/linear/RealMatrixImpl.java",
        "signature": "org.apache.commons.math.linear.RealMatrixImpl.parity",
        "snippet": "    private int parity = 1;",
        "begin_line": 69,
        "end_line": 69,
        "comment": " Parity of the permutation associated with the LU decomposition "
    },
    {
        "class_name": "org.apache.commons.math.linear.RealMatrixImpl",
        "src_path": "src/java/org/apache/commons/math/linear/RealMatrixImpl.java",
        "signature": "org.apache.commons.math.linear.RealMatrixImpl.TOO_SMALL",
        "snippet": "    protected static double TOO_SMALL = 10E-12;",
        "begin_line": 72,
        "end_line": 72,
        "comment": " Bound to determine effective singularity in LU decomposition "
    },
    {
        "class_name": "org.apache.commons.math.estimation.SimpleEstimationProblem",
        "src_path": "src/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java",
        "signature": "org.apache.commons.math.estimation.SimpleEstimationProblem.parameters",
        "snippet": "    private final List parameters;",
        "begin_line": 105,
        "end_line": 105,
        "comment": " Estimated parameters. "
    },
    {
        "class_name": "org.apache.commons.math.estimation.SimpleEstimationProblem",
        "src_path": "src/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java",
        "signature": "org.apache.commons.math.estimation.SimpleEstimationProblem.measurements",
        "snippet": "    private final List measurements;",
        "begin_line": 108,
        "end_line": 108,
        "comment": " Measurements. "
    },
    {
        "class_name": "org.apache.commons.math.estimation.GaussNewtonEstimator",
        "src_path": "src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java",
        "signature": "org.apache.commons.math.estimation.GaussNewtonEstimator.steadyStateThreshold",
        "snippet": "    private double steadyStateThreshold;",
        "begin_line": 175,
        "end_line": 175,
        "comment": " Threshold for cost steady state detection. "
    },
    {
        "class_name": "org.apache.commons.math.estimation.GaussNewtonEstimator",
        "src_path": "src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java",
        "signature": "org.apache.commons.math.estimation.GaussNewtonEstimator.convergence",
        "snippet": "    private double convergence;",
        "begin_line": 178,
        "end_line": 178,
        "comment": " Threshold for cost convergence. "
    },
    {
        "class_name": "org.apache.commons.math.estimation.GaussNewtonEstimator",
        "src_path": "src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java",
        "signature": "org.apache.commons.math.estimation.GaussNewtonEstimator.serialVersionUID",
        "snippet": "     private static final long serialVersionUID = 5485001826076289109L;",
        "begin_line": 181,
        "end_line": 181,
        "comment": " Serializable version identifier "
    }
]