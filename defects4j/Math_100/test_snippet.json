[
    {
        "class_name": "org.apache.commons.math.estimation.GaussNewtonEstimatorTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java",
        "signature": "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.GaussNewtonEstimatorTest(java.lang.String)",
        "snippet": "  public GaussNewtonEstimatorTest(String name) {\n    super(name);\n  }\n",
        "begin_line": 97,
        "end_line": 99,
        "comment": "",
        "child_ranges": [
            "(line 98,col 5)-(line 98,col 16)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.estimation.GaussNewtonEstimatorTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java",
        "signature": "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.testTrivial()",
        "snippet": "  public void testTrivial() throws EstimationException {\n    LinearProblem problem =\n      new LinearProblem(new LinearMeasurement[] {\n        new LinearMeasurement(new double[] {2},\n                              new EstimatedParameter[] {\n                                 new EstimatedParameter(\"p0\", 0)\n                              }, 3.0)\n      });\n    GaussNewtonEstimator estimator = new GaussNewtonEstimator(100, 1.0e-6, 1.0e-6);\n    estimator.estimate(problem);\n    assertEquals(0, estimator.getRMS(problem), 1.0e-10);\n    assertEquals(1.5,\n                 problem.getUnboundParameters()[0].getEstimate(),\n                 1.0e-10);\n   }\n",
        "begin_line": 101,
        "end_line": 115,
        "comment": "",
        "child_ranges": [
            "(line 102,col 5)-(line 108,col 9)",
            "(line 109,col 5)-(line 109,col 83)",
            "(line 110,col 5)-(line 110,col 32)",
            "(line 111,col 5)-(line 111,col 56)",
            "(line 112,col 5)-(line 114,col 26)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.estimation.GaussNewtonEstimatorTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java",
        "signature": "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.testQRColumnsPermutation()",
        "snippet": "  public void testQRColumnsPermutation() throws EstimationException {\n\n    EstimatedParameter[] x = {\n       new EstimatedParameter(\"p0\", 0), new EstimatedParameter(\"p1\", 0)\n    };\n    LinearProblem problem = new LinearProblem(new LinearMeasurement[] {\n      new LinearMeasurement(new double[] { 1.0, -1.0 },\n                            new EstimatedParameter[] { x[0], x[1] },\n                            4.0),\n      new LinearMeasurement(new double[] { 2.0 },\n                            new EstimatedParameter[] { x[1] },\n                            6.0),\n      new LinearMeasurement(new double[] { 1.0, -2.0 },\n                            new EstimatedParameter[] { x[0], x[1] },\n                            1.0)\n    });\n\n    GaussNewtonEstimator estimator = new GaussNewtonEstimator(100, 1.0e-6, 1.0e-6);\n    estimator.estimate(problem);\n    assertEquals(0, estimator.getRMS(problem), 1.0e-10);\n    assertEquals(7.0, x[0].getEstimate(), 1.0e-10);\n    assertEquals(3.0, x[1].getEstimate(), 1.0e-10);\n\n  }\n",
        "begin_line": 117,
        "end_line": 140,
        "comment": "",
        "child_ranges": [
            "(line 119,col 5)-(line 121,col 6)",
            "(line 122,col 5)-(line 132,col 7)",
            "(line 134,col 5)-(line 134,col 83)",
            "(line 135,col 5)-(line 135,col 32)",
            "(line 136,col 5)-(line 136,col 56)",
            "(line 137,col 5)-(line 137,col 51)",
            "(line 138,col 5)-(line 138,col 51)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.estimation.GaussNewtonEstimatorTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java",
        "signature": "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.testNoDependency()",
        "snippet": "  public void testNoDependency() throws EstimationException {\n    EstimatedParameter[] p = new EstimatedParameter[] {\n      new EstimatedParameter(\"p0\", 0),\n      new EstimatedParameter(\"p1\", 0),\n      new EstimatedParameter(\"p2\", 0),\n      new EstimatedParameter(\"p3\", 0),\n      new EstimatedParameter(\"p4\", 0),\n      new EstimatedParameter(\"p5\", 0)\n    };\n    LinearProblem problem = new LinearProblem(new LinearMeasurement[] {\n      new LinearMeasurement(new double[] {2}, new EstimatedParameter[] { p[0] }, 0.0),\n      new LinearMeasurement(new double[] {2}, new EstimatedParameter[] { p[1] }, 1.1),\n      new LinearMeasurement(new double[] {2}, new EstimatedParameter[] { p[2] }, 2.2),\n      new LinearMeasurement(new double[] {2}, new EstimatedParameter[] { p[3] }, 3.3),\n      new LinearMeasurement(new double[] {2}, new EstimatedParameter[] { p[4] }, 4.4),\n      new LinearMeasurement(new double[] {2}, new EstimatedParameter[] { p[5] }, 5.5)\n    });\n  GaussNewtonEstimator estimator = new GaussNewtonEstimator(100, 1.0e-6, 1.0e-6);\n  estimator.estimate(problem);\n  assertEquals(0, estimator.getRMS(problem), 1.0e-10);\n  for (int i = 0; i < p.length; ++i) {\n    assertEquals(0.55 * i, p[i].getEstimate(), 1.0e-10);\n  }\n}\n",
        "begin_line": 142,
        "end_line": 165,
        "comment": "",
        "child_ranges": [
            "(line 143,col 5)-(line 150,col 6)",
            "(line 151,col 5)-(line 158,col 7)",
            "(line 159,col 3)-(line 159,col 81)",
            "(line 160,col 3)-(line 160,col 30)",
            "(line 161,col 3)-(line 161,col 54)",
            "(line 162,col 3)-(line 164,col 3)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.estimation.GaussNewtonEstimatorTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java",
        "signature": "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.testOneSet()",
        "snippet": "  public void testOneSet() throws EstimationException {\n\n    EstimatedParameter[] p = {\n       new EstimatedParameter(\"p0\", 0),\n       new EstimatedParameter(\"p1\", 0),\n       new EstimatedParameter(\"p2\", 0)\n    };\n    LinearProblem problem = new LinearProblem(new LinearMeasurement[] {\n      new LinearMeasurement(new double[] { 1.0 },\n                            new EstimatedParameter[] { p[0] },\n                            1.0),\n      new LinearMeasurement(new double[] { -1.0, 1.0 },\n                            new EstimatedParameter[] { p[0], p[1] },\n                            1.0),\n      new LinearMeasurement(new double[] { -1.0, 1.0 },\n                            new EstimatedParameter[] { p[1], p[2] },\n                            1.0)\n    });\n\n    GaussNewtonEstimator estimator = new GaussNewtonEstimator(100, 1.0e-6, 1.0e-6);\n    estimator.estimate(problem);\n    assertEquals(0, estimator.getRMS(problem), 1.0e-10);\n    assertEquals(1.0, p[0].getEstimate(), 1.0e-10);\n    assertEquals(2.0, p[1].getEstimate(), 1.0e-10);\n    assertEquals(3.0, p[2].getEstimate(), 1.0e-10);\n\n  }\n",
        "begin_line": 167,
        "end_line": 193,
        "comment": "",
        "child_ranges": [
            "(line 169,col 5)-(line 173,col 6)",
            "(line 174,col 5)-(line 184,col 7)",
            "(line 186,col 5)-(line 186,col 83)",
            "(line 187,col 5)-(line 187,col 32)",
            "(line 188,col 5)-(line 188,col 56)",
            "(line 189,col 5)-(line 189,col 51)",
            "(line 190,col 5)-(line 190,col 51)",
            "(line 191,col 5)-(line 191,col 51)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.estimation.GaussNewtonEstimatorTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java",
        "signature": "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.testTwoSets()",
        "snippet": "  public void testTwoSets() throws EstimationException {\n    EstimatedParameter[] p = {\n      new EstimatedParameter(\"p0\", 0),\n      new EstimatedParameter(\"p1\", 1),\n      new EstimatedParameter(\"p2\", 2),\n      new EstimatedParameter(\"p3\", 3),\n      new EstimatedParameter(\"p4\", 4),\n      new EstimatedParameter(\"p5\", 5)\n    };\n\n    double epsilon = 1.0e-7;\n    LinearProblem problem = new LinearProblem(new LinearMeasurement[] {\n\n      // 4 elements sub-problem\n      new LinearMeasurement(new double[] {  2.0,  1.0,  4.0 },\n                            new EstimatedParameter[] { p[0], p[1], p[3] },\n                            2.0),\n      new LinearMeasurement(new double[] { -4.0, -2.0,   3.0, -7.0 },\n                           new EstimatedParameter[] { p[0], p[1], p[2], p[3] },\n                           -9.0),\n      new LinearMeasurement(new double[] {  4.0,  1.0,  -2.0,  8.0 },\n                            new EstimatedParameter[] { p[0], p[1], p[2], p[3] },\n                            2.0),\n      new LinearMeasurement(new double[] { -3.0, -12.0, -1.0 },\n                           new EstimatedParameter[] { p[1], p[2], p[3] },\n                           2.0),\n\n      // 2 elements sub-problem\n      new LinearMeasurement(new double[] { epsilon, 1.0 },\n                            new EstimatedParameter[] { p[4], p[5] },\n                            1.0 + epsilon * epsilon),\n      new LinearMeasurement(new double[] {  1.0, 1.0 },\n                            new EstimatedParameter[] { p[4], p[5] },\n                            2.0)\n\n    });\n\n    GaussNewtonEstimator estimator = new GaussNewtonEstimator(100, 1.0e-6, 1.0e-6);\n    estimator.estimate(problem);\n    assertEquals(0, estimator.getRMS(problem), 1.0e-10);\n    assertEquals( 3.0, p[0].getEstimate(), 1.0e-10);\n    assertEquals( 4.0, p[1].getEstimate(), 1.0e-10);\n    assertEquals(-1.0, p[2].getEstimate(), 1.0e-10);\n    assertEquals(-2.0, p[3].getEstimate(), 1.0e-10);\n    assertEquals( 1.0 + epsilon, p[4].getEstimate(), 1.0e-10);\n    assertEquals( 1.0 - epsilon, p[5].getEstimate(), 1.0e-10);\n\n  }\n",
        "begin_line": 195,
        "end_line": 242,
        "comment": "",
        "child_ranges": [
            "(line 196,col 5)-(line 203,col 6)",
            "(line 205,col 5)-(line 205,col 28)",
            "(line 206,col 5)-(line 230,col 7)",
            "(line 232,col 5)-(line 232,col 83)",
            "(line 233,col 5)-(line 233,col 32)",
            "(line 234,col 5)-(line 234,col 56)",
            "(line 235,col 5)-(line 235,col 52)",
            "(line 236,col 5)-(line 236,col 52)",
            "(line 237,col 5)-(line 237,col 52)",
            "(line 238,col 5)-(line 238,col 52)",
            "(line 239,col 5)-(line 239,col 62)",
            "(line 240,col 5)-(line 240,col 62)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.estimation.GaussNewtonEstimatorTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java",
        "signature": "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.testNonInversible()",
        "snippet": "  public void testNonInversible() throws EstimationException {\n\n    EstimatedParameter[] p = {\n       new EstimatedParameter(\"p0\", 0),\n       new EstimatedParameter(\"p1\", 0),\n       new EstimatedParameter(\"p2\", 0)\n    };\n    LinearMeasurement[] m = new LinearMeasurement[] {\n      new LinearMeasurement(new double[] {  1.0, 2.0, -3.0 },\n                            new EstimatedParameter[] { p[0], p[1], p[2] },\n                            1.0),\n      new LinearMeasurement(new double[] {  2.0, 1.0,  3.0 },\n                            new EstimatedParameter[] { p[0], p[1], p[2] },\n                            1.0),\n      new LinearMeasurement(new double[] { -3.0, -9.0 },\n                            new EstimatedParameter[] { p[0], p[2] },\n                            1.0)\n    };\n    LinearProblem problem = new LinearProblem(m);\n\n    GaussNewtonEstimator estimator = new GaussNewtonEstimator(100, 1.0e-6, 1.0e-6);\n    try {\n      estimator.estimate(problem);\n      fail(\"an exception should have been caught\");\n    } catch (EstimationException ee) {\n      // expected behavior\n    } catch (Exception e) {\n      fail(\"wrong exception type caught\");\n    }\n  }\n",
        "begin_line": 244,
        "end_line": 273,
        "comment": "",
        "child_ranges": [
            "(line 246,col 5)-(line 250,col 6)",
            "(line 251,col 5)-(line 261,col 6)",
            "(line 262,col 5)-(line 262,col 49)",
            "(line 264,col 5)-(line 264,col 83)",
            "(line 265,col 5)-(line 272,col 5)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.estimation.GaussNewtonEstimatorTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java",
        "signature": "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.testIllConditioned()",
        "snippet": "  public void testIllConditioned() throws EstimationException {\n    EstimatedParameter[] p = {\n      new EstimatedParameter(\"p0\", 0),\n      new EstimatedParameter(\"p1\", 1),\n      new EstimatedParameter(\"p2\", 2),\n      new EstimatedParameter(\"p3\", 3)\n    };\n\n    LinearProblem problem1 = new LinearProblem(new LinearMeasurement[] {\n      new LinearMeasurement(new double[] { 10.0, 7.0,  8.0,  7.0 },\n                            new EstimatedParameter[] { p[0], p[1], p[2], p[3] },\n                            32.0),\n      new LinearMeasurement(new double[] {  7.0, 5.0,  6.0,  5.0 },\n                            new EstimatedParameter[] { p[0], p[1], p[2], p[3] },\n                            23.0),\n      new LinearMeasurement(new double[] {  8.0, 6.0, 10.0,  9.0 },\n                            new EstimatedParameter[] { p[0], p[1], p[2], p[3] },\n                            33.0),\n      new LinearMeasurement(new double[] {  7.0, 5.0,  9.0, 10.0 },\n                            new EstimatedParameter[] { p[0], p[1], p[2], p[3] },\n                            31.0)\n    });\n    GaussNewtonEstimator estimator1 = new GaussNewtonEstimator(100, 1.0e-6, 1.0e-6);\n    estimator1.estimate(problem1);\n    assertEquals(0, estimator1.getRMS(problem1), 1.0e-10);\n    assertEquals(1.0, p[0].getEstimate(), 1.0e-10);\n    assertEquals(1.0, p[1].getEstimate(), 1.0e-10);\n    assertEquals(1.0, p[2].getEstimate(), 1.0e-10);\n    assertEquals(1.0, p[3].getEstimate(), 1.0e-10);\n\n    LinearProblem problem2 = new LinearProblem(new LinearMeasurement[] {\n      new LinearMeasurement(new double[] { 10.0, 7.0,  8.1,  7.2 },\n                            new EstimatedParameter[] { p[0], p[1], p[2], p[3] },\n                            32.0),\n      new LinearMeasurement(new double[] {  7.08, 5.04,  6.0,  5.0 },\n                            new EstimatedParameter[] { p[0], p[1], p[2], p[3] },\n                            23.0),\n      new LinearMeasurement(new double[] {  8.0, 5.98, 9.89,  9.0 },\n                             new EstimatedParameter[] { p[0], p[1], p[2], p[3] },\n                            33.0),\n      new LinearMeasurement(new double[] {  6.99, 4.99,  9.0, 9.98 },\n                             new EstimatedParameter[] { p[0], p[1], p[2], p[3] },\n                            31.0)\n    });\n    GaussNewtonEstimator estimator2 = new GaussNewtonEstimator(100, 1.0e-6, 1.0e-6);\n    estimator2.estimate(problem2);\n    assertEquals(0, estimator2.getRMS(problem2), 1.0e-10);\n    assertEquals(-81.0, p[0].getEstimate(), 1.0e-8);\n    assertEquals(137.0, p[1].getEstimate(), 1.0e-8);\n    assertEquals(-34.0, p[2].getEstimate(), 1.0e-8);\n    assertEquals( 22.0, p[3].getEstimate(), 1.0e-8);\n\n  }\n",
        "begin_line": 275,
        "end_line": 327,
        "comment": "",
        "child_ranges": [
            "(line 276,col 5)-(line 281,col 6)",
            "(line 283,col 5)-(line 296,col 7)",
            "(line 297,col 5)-(line 297,col 84)",
            "(line 298,col 5)-(line 298,col 34)",
            "(line 299,col 5)-(line 299,col 58)",
            "(line 300,col 5)-(line 300,col 51)",
            "(line 301,col 5)-(line 301,col 51)",
            "(line 302,col 5)-(line 302,col 51)",
            "(line 303,col 5)-(line 303,col 51)",
            "(line 305,col 5)-(line 318,col 7)",
            "(line 319,col 5)-(line 319,col 84)",
            "(line 320,col 5)-(line 320,col 34)",
            "(line 321,col 5)-(line 321,col 58)",
            "(line 322,col 5)-(line 322,col 52)",
            "(line 323,col 5)-(line 323,col 52)",
            "(line 324,col 5)-(line 324,col 52)",
            "(line 325,col 5)-(line 325,col 52)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.estimation.GaussNewtonEstimatorTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java",
        "signature": "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.testMoreEstimatedParametersSimple()",
        "snippet": "  public void testMoreEstimatedParametersSimple() throws EstimationException {\n\n    EstimatedParameter[] p = {\n       new EstimatedParameter(\"p0\", 7),\n       new EstimatedParameter(\"p1\", 6),\n       new EstimatedParameter(\"p2\", 5),\n       new EstimatedParameter(\"p3\", 4)\n     };\n    LinearProblem problem = new LinearProblem(new LinearMeasurement[] {\n      new LinearMeasurement(new double[] { 3.0, 2.0 },\n                             new EstimatedParameter[] { p[0], p[1] },\n                             7.0),\n      new LinearMeasurement(new double[] { 1.0, -1.0, 1.0 },\n                             new EstimatedParameter[] { p[1], p[2], p[3] },\n                             3.0),\n      new LinearMeasurement(new double[] { 2.0, 1.0 },\n                             new EstimatedParameter[] { p[0], p[2] },\n                             5.0)\n    });\n\n    GaussNewtonEstimator estimator = new GaussNewtonEstimator(100, 1.0e-6, 1.0e-6);\n    try {\n        estimator.estimate(problem);\n        fail(\"an exception should have been caught\");\n    } catch (EstimationException ee) {\n        // expected behavior\n    } catch (Exception e) {\n        fail(\"wrong exception type caught\");\n    }\n\n  }\n",
        "begin_line": 329,
        "end_line": 359,
        "comment": "",
        "child_ranges": [
            "(line 331,col 5)-(line 336,col 7)",
            "(line 337,col 5)-(line 347,col 7)",
            "(line 349,col 5)-(line 349,col 83)",
            "(line 350,col 5)-(line 357,col 5)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.estimation.GaussNewtonEstimatorTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java",
        "signature": "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.testMoreEstimatedParametersUnsorted()",
        "snippet": "  public void testMoreEstimatedParametersUnsorted() throws EstimationException {\n    EstimatedParameter[] p = {\n      new EstimatedParameter(\"p0\", 2),\n      new EstimatedParameter(\"p1\", 2),\n      new EstimatedParameter(\"p2\", 2),\n      new EstimatedParameter(\"p3\", 2),\n      new EstimatedParameter(\"p4\", 2),\n      new EstimatedParameter(\"p5\", 2)\n    };\n    LinearProblem problem = new LinearProblem(new LinearMeasurement[] {\n      new LinearMeasurement(new double[] { 1.0, 1.0 },\n                           new EstimatedParameter[] { p[0], p[1] },\n                           3.0),\n      new LinearMeasurement(new double[] { 1.0, 1.0, 1.0 },\n                           new EstimatedParameter[] { p[2], p[3], p[4] },\n                           12.0),\n      new LinearMeasurement(new double[] { 1.0, -1.0 },\n                           new EstimatedParameter[] { p[4], p[5] },\n                           -1.0),\n      new LinearMeasurement(new double[] { 1.0, -1.0, 1.0 },\n                           new EstimatedParameter[] { p[3], p[2], p[5] },\n                           7.0),\n      new LinearMeasurement(new double[] { 1.0, -1.0 },\n                           new EstimatedParameter[] { p[4], p[3] },\n                           1.0)\n    });\n\n    GaussNewtonEstimator estimator = new GaussNewtonEstimator(100, 1.0e-6, 1.0e-6);\n    try {\n        estimator.estimate(problem);\n        fail(\"an exception should have been caught\");\n    } catch (EstimationException ee) {\n        // expected behavior\n    } catch (Exception e) {\n        fail(\"wrong exception type caught\");\n    }\n\n  }\n",
        "begin_line": 361,
        "end_line": 398,
        "comment": "",
        "child_ranges": [
            "(line 362,col 5)-(line 369,col 6)",
            "(line 370,col 5)-(line 386,col 7)",
            "(line 388,col 5)-(line 388,col 83)",
            "(line 389,col 5)-(line 396,col 5)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.estimation.GaussNewtonEstimatorTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java",
        "signature": "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.testRedundantEquations()",
        "snippet": "  public void testRedundantEquations() throws EstimationException {\n    EstimatedParameter[] p = {\n      new EstimatedParameter(\"p0\", 1),\n      new EstimatedParameter(\"p1\", 1)\n    };\n    LinearProblem problem = new LinearProblem(new LinearMeasurement[] {\n      new LinearMeasurement(new double[] { 1.0, 1.0 },\n                             new EstimatedParameter[] { p[0], p[1] },\n                             3.0),\n      new LinearMeasurement(new double[] { 1.0, -1.0 },\n                             new EstimatedParameter[] { p[0], p[1] },\n                             1.0),\n      new LinearMeasurement(new double[] { 1.0, 3.0 },\n                             new EstimatedParameter[] { p[0], p[1] },\n                             5.0)\n    });\n\n    GaussNewtonEstimator estimator = new GaussNewtonEstimator(100, 1.0e-6, 1.0e-6);\n    estimator.estimate(problem);\n    assertEquals(0, estimator.getRMS(problem), 1.0e-10);\n    EstimatedParameter[] all = problem.getAllParameters();\n    for (int i = 0; i < all.length; ++i) {\n        assertEquals(all[i].getName().equals(\"p0\") ? 2.0 : 1.0,\n                     all[i].getEstimate(), 1.0e-10);\n    }\n\n  }\n",
        "begin_line": 400,
        "end_line": 426,
        "comment": "",
        "child_ranges": [
            "(line 401,col 5)-(line 404,col 6)",
            "(line 405,col 5)-(line 415,col 7)",
            "(line 417,col 5)-(line 417,col 83)",
            "(line 418,col 5)-(line 418,col 32)",
            "(line 419,col 5)-(line 419,col 56)",
            "(line 420,col 5)-(line 420,col 58)",
            "(line 421,col 5)-(line 424,col 5)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.estimation.GaussNewtonEstimatorTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java",
        "signature": "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.testInconsistentEquations()",
        "snippet": "  public void testInconsistentEquations() throws EstimationException {\n    EstimatedParameter[] p = {\n      new EstimatedParameter(\"p0\", 1),\n      new EstimatedParameter(\"p1\", 1)\n    };\n    LinearProblem problem = new LinearProblem(new LinearMeasurement[] {\n      new LinearMeasurement(new double[] { 1.0, 1.0 },\n                            new EstimatedParameter[] { p[0], p[1] },\n                            3.0),\n      new LinearMeasurement(new double[] { 1.0, -1.0 },\n                            new EstimatedParameter[] { p[0], p[1] },\n                            1.0),\n      new LinearMeasurement(new double[] { 1.0, 3.0 },\n                            new EstimatedParameter[] { p[0], p[1] },\n                            4.0)\n    });\n\n    GaussNewtonEstimator estimator = new GaussNewtonEstimator(100, 1.0e-6, 1.0e-6);\n    estimator.estimate(problem);\n    assertTrue(estimator.getRMS(problem) > 0.1);\n\n  }\n",
        "begin_line": 428,
        "end_line": 449,
        "comment": "",
        "child_ranges": [
            "(line 429,col 5)-(line 432,col 6)",
            "(line 433,col 5)-(line 443,col 7)",
            "(line 445,col 5)-(line 445,col 83)",
            "(line 446,col 5)-(line 446,col 32)",
            "(line 447,col 5)-(line 447,col 48)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.estimation.GaussNewtonEstimatorTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java",
        "signature": "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.testBoundParameters()",
        "snippet": "  public void testBoundParameters() throws EstimationException {\n      EstimatedParameter[] p = {\n        new EstimatedParameter(\"unbound0\", 2, false),\n        new EstimatedParameter(\"unbound1\", 2, false),\n        new EstimatedParameter(\"bound\",    2, true)\n      };\n      LinearProblem problem = new LinearProblem(new LinearMeasurement[] {\n        new LinearMeasurement(new double[] { 1.0, 1.0, 1.0 },\n                              new EstimatedParameter[] { p[0], p[1], p[2] },\n                              3.0),\n        new LinearMeasurement(new double[] { 1.0, -1.0, 1.0 },\n                              new EstimatedParameter[] { p[0], p[1], p[2] },\n                              1.0),\n        new LinearMeasurement(new double[] { 1.0, 3.0, 2.0 },\n                              new EstimatedParameter[] { p[0], p[1], p[2] },\n                              7.0)\n      });\n\n      GaussNewtonEstimator estimator = new GaussNewtonEstimator(100, 1.0e-6, 1.0e-6);\n      estimator.estimate(problem);\n      assertTrue(estimator.getRMS(problem) < 1.0e-10);\n      double[][] covariances = estimator.getCovariances(problem);\n      int i0 = 0, i1 = 1;\n      if (problem.getUnboundParameters()[0].getName().endsWith(\"1\")) {\n          i0 = 1;\n          i1 = 0;\n      }\n      assertEquals(11.0 / 24, covariances[i0][i0], 1.0e-10);\n      assertEquals(-3.0 / 24, covariances[i0][i1], 1.0e-10);\n      assertEquals(-3.0 / 24, covariances[i1][i0], 1.0e-10);\n      assertEquals( 3.0 / 24, covariances[i1][i1], 1.0e-10);\n\n      double[] errors = estimator.guessParametersErrors(problem);\n      assertEquals(0, errors[i0], 1.0e-10);\n      assertEquals(0, errors[i1], 1.0e-10);\n\n  }\n",
        "begin_line": 451,
        "end_line": 487,
        "comment": "",
        "child_ranges": [
            "(line 452,col 7)-(line 456,col 8)",
            "(line 457,col 7)-(line 467,col 9)",
            "(line 469,col 7)-(line 469,col 85)",
            "(line 470,col 7)-(line 470,col 34)",
            "(line 471,col 7)-(line 471,col 54)",
            "(line 472,col 7)-(line 472,col 65)",
            "(line 473,col 7)-(line 473,col 25)",
            "(line 474,col 7)-(line 477,col 7)",
            "(line 478,col 7)-(line 478,col 60)",
            "(line 479,col 7)-(line 479,col 60)",
            "(line 480,col 7)-(line 480,col 60)",
            "(line 481,col 7)-(line 481,col 60)",
            "(line 483,col 7)-(line 483,col 65)",
            "(line 484,col 7)-(line 484,col 43)",
            "(line 485,col 7)-(line 485,col 43)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.estimation.GaussNewtonEstimatorTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java",
        "signature": "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.testMaxIterations()",
        "snippet": "  public void testMaxIterations() {\n      Circle circle = new Circle(98.680, 47.345);\n      circle.addPoint( 30.0,  68.0);\n      circle.addPoint( 50.0,  -6.0);\n      circle.addPoint(110.0, -20.0);\n      circle.addPoint( 35.0,  15.0);\n      circle.addPoint( 45.0,  97.0);\n      try {\n        GaussNewtonEstimator estimator = new GaussNewtonEstimator(4, 1.0e-14, 1.0e-14);\n        estimator.estimate(circle);\n        fail(\"an exception should have been caught\");\n      } catch (EstimationException ee) {\n        // expected behavior\n      } catch (Exception e) {\n        fail(\"wrong exception type caught\");\n      }\n    }\n",
        "begin_line": 489,
        "end_line": 505,
        "comment": "",
        "child_ranges": [
            "(line 490,col 7)-(line 490,col 49)",
            "(line 491,col 7)-(line 491,col 36)",
            "(line 492,col 7)-(line 492,col 36)",
            "(line 493,col 7)-(line 493,col 36)",
            "(line 494,col 7)-(line 494,col 36)",
            "(line 495,col 7)-(line 495,col 36)",
            "(line 496,col 7)-(line 504,col 7)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.estimation.GaussNewtonEstimatorTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java",
        "signature": "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.testCircleFitting()",
        "snippet": "  public void testCircleFitting() throws EstimationException {\n      Circle circle = new Circle(98.680, 47.345);\n      circle.addPoint( 30.0,  68.0);\n      circle.addPoint( 50.0,  -6.0);\n      circle.addPoint(110.0, -20.0);\n      circle.addPoint( 35.0,  15.0);\n      circle.addPoint( 45.0,  97.0);\n      GaussNewtonEstimator estimator = new GaussNewtonEstimator(100, 1.0e-10, 1.0e-10);\n      estimator.estimate(circle);\n      double rms = estimator.getRMS(circle);\n      assertEquals(1.768262623567235,  Math.sqrt(circle.getM()) * rms,  1.0e-10);\n      assertEquals(69.96016176931406, circle.getRadius(), 1.0e-10);\n      assertEquals(96.07590211815305, circle.getX(),      1.0e-10);\n      assertEquals(48.13516790438953, circle.getY(),      1.0e-10);\n    }\n",
        "begin_line": 507,
        "end_line": 521,
        "comment": "",
        "child_ranges": [
            "(line 508,col 7)-(line 508,col 49)",
            "(line 509,col 7)-(line 509,col 36)",
            "(line 510,col 7)-(line 510,col 36)",
            "(line 511,col 7)-(line 511,col 36)",
            "(line 512,col 7)-(line 512,col 36)",
            "(line 513,col 7)-(line 513,col 36)",
            "(line 514,col 7)-(line 514,col 87)",
            "(line 515,col 7)-(line 515,col 33)",
            "(line 516,col 7)-(line 516,col 44)",
            "(line 517,col 7)-(line 517,col 81)",
            "(line 518,col 7)-(line 518,col 67)",
            "(line 519,col 7)-(line 519,col 67)",
            "(line 520,col 7)-(line 520,col 67)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.estimation.GaussNewtonEstimatorTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java",
        "signature": "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.testCircleFittingBadInit()",
        "snippet": "  public void testCircleFittingBadInit() throws EstimationException {\n    Circle circle = new Circle(-12, -12);\n    double[][] points = new double[][] {\n      {-0.312967,  0.072366}, {-0.339248,  0.132965}, {-0.379780,  0.202724},\n      {-0.390426,  0.260487}, {-0.361212,  0.328325}, {-0.346039,  0.392619},\n      {-0.280579,  0.444306}, {-0.216035,  0.470009}, {-0.149127,  0.493832},\n      {-0.075133,  0.483271}, {-0.007759,  0.452680}, { 0.060071,  0.410235},\n      { 0.103037,  0.341076}, { 0.118438,  0.273884}, { 0.131293,  0.192201},\n      { 0.115869,  0.129797}, { 0.072223,  0.058396}, { 0.022884,  0.000718},\n      {-0.053355, -0.020405}, {-0.123584, -0.032451}, {-0.216248, -0.032862},\n      {-0.278592, -0.005008}, {-0.337655,  0.056658}, {-0.385899,  0.112526},\n      {-0.405517,  0.186957}, {-0.415374,  0.262071}, {-0.387482,  0.343398},\n      {-0.347322,  0.397943}, {-0.287623,  0.458425}, {-0.223502,  0.475513},\n      {-0.135352,  0.478186}, {-0.061221,  0.483371}, { 0.003711,  0.422737},\n      { 0.065054,  0.375830}, { 0.108108,  0.297099}, { 0.123882,  0.222850},\n      { 0.117729,  0.134382}, { 0.085195,  0.056820}, { 0.029800, -0.019138},\n      {-0.027520, -0.072374}, {-0.102268, -0.091555}, {-0.200299, -0.106578},\n      {-0.292731, -0.091473}, {-0.356288, -0.051108}, {-0.420561,  0.014926},\n      {-0.471036,  0.074716}, {-0.488638,  0.182508}, {-0.485990,  0.254068},\n      {-0.463943,  0.338438}, {-0.406453,  0.404704}, {-0.334287,  0.466119},\n      {-0.254244,  0.503188}, {-0.161548,  0.495769}, {-0.075733,  0.495560},\n      { 0.001375,  0.434937}, { 0.082787,  0.385806}, { 0.115490,  0.323807},\n      { 0.141089,  0.223450}, { 0.138693,  0.131703}, { 0.126415,  0.049174},\n      { 0.066518, -0.010217}, {-0.005184, -0.070647}, {-0.080985, -0.103635},\n      {-0.177377, -0.116887}, {-0.260628, -0.100258}, {-0.335756, -0.056251},\n      {-0.405195, -0.000895}, {-0.444937,  0.085456}, {-0.484357,  0.175597},\n      {-0.472453,  0.248681}, {-0.438580,  0.347463}, {-0.402304,  0.422428},\n      {-0.326777,  0.479438}, {-0.247797,  0.505581}, {-0.152676,  0.519380},\n      {-0.071754,  0.516264}, { 0.015942,  0.472802}, { 0.076608,  0.419077},\n      { 0.127673,  0.330264}, { 0.159951,  0.262150}, { 0.153530,  0.172681},\n      { 0.140653,  0.089229}, { 0.078666,  0.024981}, { 0.023807, -0.037022},\n      {-0.048837, -0.077056}, {-0.127729, -0.075338}, {-0.221271, -0.067526}\n    };\n    for (int i = 0; i < points.length; ++i) {\n      circle.addPoint(points[i][0], points[i][1]);\n    }\n    GaussNewtonEstimator estimator = new GaussNewtonEstimator(100, 1.0e-6, 1.0e-6);\n    try {\n        estimator.estimate(circle);\n        fail(\"an exception should have been caught\");\n    } catch (EstimationException ee) {\n        // expected behavior\n    } catch (Exception e) {\n        fail(\"wrong exception type caught\");\n    }\n}\n",
        "begin_line": 523,
        "end_line": 568,
        "comment": "",
        "child_ranges": [
            "(line 524,col 5)-(line 524,col 41)",
            "(line 525,col 5)-(line 555,col 6)",
            "(line 556,col 5)-(line 558,col 5)",
            "(line 559,col 5)-(line 559,col 83)",
            "(line 560,col 5)-(line 567,col 5)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.estimation.GaussNewtonEstimatorTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java",
        "signature": "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.LinearProblem.LinearProblem(org.apache.commons.math.estimation.GaussNewtonEstimatorTest.LinearMeasurement[])",
        "snippet": "    public LinearProblem(LinearMeasurement[] measurements) {\n      HashSet set = new HashSet();\n      for (int i = 0; i < measurements.length; ++i) {\n        addMeasurement(measurements[i]);\n        EstimatedParameter[] parameters = measurements[i].getParameters();\n        for (int j = 0; j < parameters.length; ++j) {\n          set.add(parameters[j]);\n        }\n      }\n      for (Iterator iterator = set.iterator(); iterator.hasNext();) {\n        addParameter((EstimatedParameter) iterator.next());\n      }\n    }\n",
        "begin_line": 572,
        "end_line": 584,
        "comment": "",
        "child_ranges": [
            "(line 573,col 7)-(line 573,col 34)",
            "(line 574,col 7)-(line 580,col 7)",
            "(line 581,col 7)-(line 583,col 7)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.estimation.GaussNewtonEstimatorTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java",
        "signature": "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.LinearMeasurement.LinearMeasurement(double[], org.apache.commons.math.estimation.EstimatedParameter[], double)",
        "snippet": "    public LinearMeasurement(double[] factors, EstimatedParameter[] parameters,\n                             double setPoint) {\n      super(1.0, setPoint, true);\n      this.factors = factors;\n      this.parameters = parameters;\n      setIgnored(false);\n    }\n",
        "begin_line": 590,
        "end_line": 596,
        "comment": "",
        "child_ranges": [
            "(line 592,col 7)-(line 592,col 33)",
            "(line 593,col 7)-(line 593,col 29)",
            "(line 594,col 7)-(line 594,col 35)",
            "(line 595,col 7)-(line 595,col 24)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.estimation.GaussNewtonEstimatorTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java",
        "signature": "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.LinearMeasurement.getTheoreticalValue()",
        "snippet": "    public double getTheoreticalValue() {\n      double v = 0;\n      for (int i = 0; i < factors.length; ++i) {\n        v += factors[i] * parameters[i].getEstimate();\n      }\n      return v;\n    }\n",
        "begin_line": 598,
        "end_line": 604,
        "comment": "",
        "child_ranges": [
            "(line 599,col 7)-(line 599,col 19)",
            "(line 600,col 7)-(line 602,col 7)",
            "(line 603,col 7)-(line 603,col 15)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.estimation.GaussNewtonEstimatorTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java",
        "signature": "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.LinearMeasurement.getPartial(org.apache.commons.math.estimation.EstimatedParameter)",
        "snippet": "    public double getPartial(EstimatedParameter parameter) {\n      for (int i = 0; i < parameters.length; ++i) {\n        if (parameters[i] == parameter) {\n          return factors[i];\n        }\n      }\n      return 0;\n    }\n",
        "begin_line": 606,
        "end_line": 613,
        "comment": "",
        "child_ranges": [
            "(line 607,col 7)-(line 611,col 7)",
            "(line 612,col 7)-(line 612,col 15)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.estimation.GaussNewtonEstimatorTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java",
        "signature": "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.LinearMeasurement.getParameters()",
        "snippet": "    public EstimatedParameter[] getParameters() {\n      return parameters;\n    }\n",
        "begin_line": 615,
        "end_line": 617,
        "comment": "",
        "child_ranges": [
            "(line 616,col 7)-(line 616,col 24)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.estimation.GaussNewtonEstimatorTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java",
        "signature": "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.Circle.Circle(double, double)",
        "snippet": "    public Circle(double cx, double cy) {\n      this.cx = new EstimatedParameter(\"cx\", cx);\n      this.cy = new EstimatedParameter(new EstimatedParameter(\"cy\", cy));\n      points  = new ArrayList();\n    }\n",
        "begin_line": 627,
        "end_line": 631,
        "comment": "",
        "child_ranges": [
            "(line 628,col 7)-(line 628,col 49)",
            "(line 629,col 7)-(line 629,col 73)",
            "(line 630,col 7)-(line 630,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.estimation.GaussNewtonEstimatorTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java",
        "signature": "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.Circle.addPoint(double, double)",
        "snippet": "    public void addPoint(double px, double py) {\n      points.add(new PointModel(px, py));\n    }\n",
        "begin_line": 633,
        "end_line": 635,
        "comment": "",
        "child_ranges": [
            "(line 634,col 7)-(line 634,col 41)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.estimation.GaussNewtonEstimatorTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java",
        "signature": "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.Circle.getM()",
        "snippet": "    public int getM() {\n      return points.size();\n    }\n",
        "begin_line": 637,
        "end_line": 639,
        "comment": "",
        "child_ranges": [
            "(line 638,col 7)-(line 638,col 27)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.estimation.GaussNewtonEstimatorTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java",
        "signature": "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.Circle.getMeasurements()",
        "snippet": "    public WeightedMeasurement[] getMeasurements() {\n      return (WeightedMeasurement[]) points.toArray(new PointModel[points.size()]);\n    }\n",
        "begin_line": 641,
        "end_line": 643,
        "comment": "",
        "child_ranges": [
            "(line 642,col 7)-(line 642,col 83)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.estimation.GaussNewtonEstimatorTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java",
        "signature": "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.Circle.getAllParameters()",
        "snippet": "    public EstimatedParameter[] getAllParameters() {\n      return new EstimatedParameter[] { cx, cy };\n    }\n",
        "begin_line": 645,
        "end_line": 647,
        "comment": "",
        "child_ranges": [
            "(line 646,col 7)-(line 646,col 49)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.estimation.GaussNewtonEstimatorTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java",
        "signature": "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.Circle.getUnboundParameters()",
        "snippet": "    public EstimatedParameter[] getUnboundParameters() {\n      return new EstimatedParameter[] { cx, cy };\n    }\n",
        "begin_line": 649,
        "end_line": 651,
        "comment": "",
        "child_ranges": [
            "(line 650,col 7)-(line 650,col 49)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.estimation.GaussNewtonEstimatorTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java",
        "signature": "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.Circle.getPartialRadiusX()",
        "snippet": "    public double getPartialRadiusX() {\n      double dRdX = 0;\n      for (Iterator iterator = points.iterator(); iterator.hasNext();) {\n        dRdX += ((PointModel) iterator.next()).getPartialDiX();\n      }\n      return dRdX / points.size();\n    }\n",
        "begin_line": 653,
        "end_line": 659,
        "comment": "",
        "child_ranges": [
            "(line 654,col 7)-(line 654,col 22)",
            "(line 655,col 7)-(line 657,col 7)",
            "(line 658,col 7)-(line 658,col 34)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.estimation.GaussNewtonEstimatorTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java",
        "signature": "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.Circle.getPartialRadiusY()",
        "snippet": "    public double getPartialRadiusY() {\n      double dRdY = 0;\n      for (Iterator iterator = points.iterator(); iterator.hasNext();) {\n        dRdY += ((PointModel) iterator.next()).getPartialDiY();\n      }\n      return dRdY / points.size();\n    }\n",
        "begin_line": 661,
        "end_line": 667,
        "comment": "",
        "child_ranges": [
            "(line 662,col 7)-(line 662,col 22)",
            "(line 663,col 7)-(line 665,col 7)",
            "(line 666,col 7)-(line 666,col 34)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.estimation.GaussNewtonEstimatorTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java",
        "signature": "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.Circle.getRadius()",
        "snippet": "   public double getRadius() {\n      double r = 0;\n      for (Iterator iterator = points.iterator(); iterator.hasNext();) {\n        r += ((PointModel) iterator.next()).getCenterDistance();\n      }\n      return r / points.size();\n    }\n",
        "begin_line": 669,
        "end_line": 675,
        "comment": "",
        "child_ranges": [
            "(line 670,col 7)-(line 670,col 19)",
            "(line 671,col 7)-(line 673,col 7)",
            "(line 674,col 7)-(line 674,col 31)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.estimation.GaussNewtonEstimatorTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java",
        "signature": "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.Circle.getX()",
        "snippet": "    public double getX() {\n      return cx.getEstimate();\n    }\n",
        "begin_line": 677,
        "end_line": 679,
        "comment": "",
        "child_ranges": [
            "(line 678,col 7)-(line 678,col 30)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.estimation.GaussNewtonEstimatorTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java",
        "signature": "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.Circle.getY()",
        "snippet": "    public double getY() {\n      return cy.getEstimate();\n    }\n",
        "begin_line": 681,
        "end_line": 683,
        "comment": "",
        "child_ranges": [
            "(line 682,col 7)-(line 682,col 30)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.estimation.GaussNewtonEstimatorTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java",
        "signature": "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.Circle.PointModel.PointModel(double, double)",
        "snippet": "      public PointModel(double px, double py) {\n        super(1.0, 0.0);\n        this.px = px;\n        this.py = py;\n      }\n",
        "begin_line": 687,
        "end_line": 691,
        "comment": "",
        "child_ranges": [
            "(line 688,col 9)-(line 688,col 24)",
            "(line 689,col 9)-(line 689,col 21)",
            "(line 690,col 9)-(line 690,col 21)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.estimation.GaussNewtonEstimatorTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java",
        "signature": "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.Circle.PointModel.getPartial(org.apache.commons.math.estimation.EstimatedParameter)",
        "snippet": "      public double getPartial(EstimatedParameter parameter) {\n        if (parameter == cx) {\n          return getPartialDiX() - getPartialRadiusX();\n        } else if (parameter == cy) {\n          return getPartialDiY() - getPartialRadiusY();\n        }\n        return 0;\n      }\n",
        "begin_line": 693,
        "end_line": 700,
        "comment": "",
        "child_ranges": [
            "(line 694,col 9)-(line 698,col 9)",
            "(line 699,col 9)-(line 699,col 17)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.estimation.GaussNewtonEstimatorTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java",
        "signature": "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.Circle.PointModel.getCenterDistance()",
        "snippet": "      public double getCenterDistance() {\n        double dx = px - cx.getEstimate();\n        double dy = py - cy.getEstimate();\n        return Math.sqrt(dx * dx + dy * dy);\n      }\n",
        "begin_line": 702,
        "end_line": 706,
        "comment": "",
        "child_ranges": [
            "(line 703,col 9)-(line 703,col 42)",
            "(line 704,col 9)-(line 704,col 42)",
            "(line 705,col 9)-(line 705,col 44)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.estimation.GaussNewtonEstimatorTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java",
        "signature": "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.Circle.PointModel.getPartialDiX()",
        "snippet": "      public double getPartialDiX() {\n        return (cx.getEstimate() - px) / getCenterDistance();\n      }\n",
        "begin_line": 708,
        "end_line": 710,
        "comment": "",
        "child_ranges": [
            "(line 709,col 9)-(line 709,col 61)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.estimation.GaussNewtonEstimatorTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java",
        "signature": "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.Circle.PointModel.getPartialDiY()",
        "snippet": "      public double getPartialDiY() {\n        return (cy.getEstimate() - py) / getCenterDistance();\n      }\n",
        "begin_line": 712,
        "end_line": 714,
        "comment": "",
        "child_ranges": [
            "(line 713,col 9)-(line 713,col 61)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.estimation.GaussNewtonEstimatorTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java",
        "signature": "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.Circle.PointModel.getTheoreticalValue()",
        "snippet": "      public double getTheoreticalValue() {\n        return getCenterDistance() - getRadius();\n      }\n",
        "begin_line": 716,
        "end_line": 718,
        "comment": "",
        "child_ranges": [
            "(line 717,col 9)-(line 717,col 49)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.estimation.GaussNewtonEstimatorTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java",
        "signature": "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.suite()",
        "snippet": "  public static Test suite() {\n    return new TestSuite(GaussNewtonEstimatorTest.class);\n  }\n",
        "begin_line": 732,
        "end_line": 734,
        "comment": "",
        "child_ranges": [
            "(line 733,col 5)-(line 733,col 57)"
        ]
    }
]