[
    {
        "class_name": "org.apache.commons.math.distribution.FDistributionTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/distribution/FDistributionTest.java",
        "signature": "org.apache.commons.math.distribution.FDistributionTest.FDistributionTest(java.lang.String)",
        "snippet": "    public FDistributionTest(String name) {\n        super(name);\n    }\n",
        "begin_line": 33,
        "end_line": 35,
        "comment": "\n     * Constructor for FDistributionTest.\n     * @param name\n     ",
        "child_ranges": [
            "(line 34,col 9)-(line 34,col 20)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.distribution.FDistributionTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/distribution/FDistributionTest.java",
        "signature": "org.apache.commons.math.distribution.FDistributionTest.makeDistribution()",
        "snippet": "    public ContinuousDistribution makeDistribution() {\n        return new FDistributionImpl(5.0, 6.0);\n    }   \n",
        "begin_line": 40,
        "end_line": 42,
        "comment": " Creates the default continuous distribution instance to use in tests. ",
        "child_ranges": [
            "(line 41,col 9)-(line 41,col 47)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.distribution.FDistributionTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/distribution/FDistributionTest.java",
        "signature": "org.apache.commons.math.distribution.FDistributionTest.makeCumulativeTestPoints()",
        "snippet": "    public double[] makeCumulativeTestPoints() {\n        // quantiles computed using R version 1.8.1 (linux version)\n        return new double[] {0.03468084d ,0.09370091d, 0.1433137d,\n            0.2020084d, 0.2937283d, 20.80266d, 8.745895d, 5.987565d, \n            4.387374d, 3.107512d};\n    }\n",
        "begin_line": 45,
        "end_line": 50,
        "comment": " Creates the default cumulative probability distribution test input values ",
        "child_ranges": [
            "(line 47,col 9)-(line 49,col 34)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.distribution.FDistributionTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/distribution/FDistributionTest.java",
        "signature": "org.apache.commons.math.distribution.FDistributionTest.makeCumulativeTestValues()",
        "snippet": "    public double[] makeCumulativeTestValues() {\n        return new double[] {0.001d, 0.01d, 0.025d, 0.05d, 0.1d, 0.999d,\n                0.990d, 0.975d, 0.950d, 0.900d}; \n    }\n",
        "begin_line": 53,
        "end_line": 56,
        "comment": " Creates the default cumulative probability density test expected values ",
        "child_ranges": [
            "(line 54,col 9)-(line 55,col 48)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.distribution.FDistributionTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/distribution/FDistributionTest.java",
        "signature": "org.apache.commons.math.distribution.FDistributionTest.setUp()",
        "snippet": "    protected void setUp() throws Exception {\n        super.setUp();\n        setTolerance(4e-6);\n    }\n",
        "begin_line": 59,
        "end_line": 62,
        "comment": " --------------------- Override tolerance  --------------",
        "child_ranges": [
            "(line 60,col 9)-(line 60,col 22)",
            "(line 61,col 9)-(line 61,col 27)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.distribution.FDistributionTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/distribution/FDistributionTest.java",
        "signature": "org.apache.commons.math.distribution.FDistributionTest.testCumulativeProbabilityExtremes()",
        "snippet": "    public void testCumulativeProbabilityExtremes() throws Exception {\n        setCumulativeTestPoints(new double[] {-2, 0});\n        setCumulativeTestValues(new double[] {0, 0});\n        verifyCumulativeProbabilities();\n    }\n",
        "begin_line": 66,
        "end_line": 70,
        "comment": "",
        "child_ranges": [
            "(line 67,col 9)-(line 67,col 54)",
            "(line 68,col 9)-(line 68,col 53)",
            "(line 69,col 9)-(line 69,col 40)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.distribution.FDistributionTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/distribution/FDistributionTest.java",
        "signature": "org.apache.commons.math.distribution.FDistributionTest.testInverseCumulativeProbabilityExtremes()",
        "snippet": "    public void testInverseCumulativeProbabilityExtremes() throws Exception {\n        setInverseCumulativeTestPoints(new double[] {0, 1});\n        setInverseCumulativeTestValues(new double[] {0, Double.POSITIVE_INFINITY});\n        verifyInverseCumulativeProbabilities();\n    }\n",
        "begin_line": 72,
        "end_line": 76,
        "comment": "",
        "child_ranges": [
            "(line 73,col 9)-(line 73,col 60)",
            "(line 74,col 9)-(line 74,col 83)",
            "(line 75,col 9)-(line 75,col 47)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.distribution.FDistributionTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/distribution/FDistributionTest.java",
        "signature": "org.apache.commons.math.distribution.FDistributionTest.testDfAccessors()",
        "snippet": "    public void testDfAccessors() {\n        FDistribution distribution = (FDistribution) getDistribution();\n        assertEquals(5d, distribution.getNumeratorDegreesOfFreedom(), Double.MIN_VALUE);\n        distribution.setNumeratorDegreesOfFreedom(4d);\n        assertEquals(4d, distribution.getNumeratorDegreesOfFreedom(), Double.MIN_VALUE);\n        assertEquals(6d, distribution.getDenominatorDegreesOfFreedom(), Double.MIN_VALUE);\n        distribution.setDenominatorDegreesOfFreedom(4d);\n        assertEquals(4d, distribution.getDenominatorDegreesOfFreedom(), Double.MIN_VALUE);\n        try {\n            distribution.setNumeratorDegreesOfFreedom(0d);\n            fail(\"Expecting IllegalArgumentException for df = 0\");\n        } catch (IllegalArgumentException ex) {\n            // expected\n        }\n        try {\n            distribution.setDenominatorDegreesOfFreedom(0d);\n            fail(\"Expecting IllegalArgumentException for df = 0\");\n        } catch (IllegalArgumentException ex) {\n            // expected\n        }\n    } \n",
        "begin_line": 78,
        "end_line": 98,
        "comment": "",
        "child_ranges": [
            "(line 79,col 9)-(line 79,col 71)",
            "(line 80,col 9)-(line 80,col 88)",
            "(line 81,col 9)-(line 81,col 54)",
            "(line 82,col 9)-(line 82,col 88)",
            "(line 83,col 9)-(line 83,col 90)",
            "(line 84,col 9)-(line 84,col 56)",
            "(line 85,col 9)-(line 85,col 90)",
            "(line 86,col 9)-(line 91,col 9)",
            "(line 92,col 9)-(line 97,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.distribution.FDistributionTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/distribution/FDistributionTest.java",
        "signature": "org.apache.commons.math.distribution.FDistributionTest.testLargeDegreesOfFreedom()",
        "snippet": "    public void testLargeDegreesOfFreedom() throws Exception {\n        org.apache.commons.math.distribution.FDistributionImpl fd =\n            new org.apache.commons.math.distribution.FDistributionImpl(\n                100000., 100000.);\n        double p = fd.cumulativeProbability(.999);\n        double x = fd.inverseCumulativeProbability(p);\n        assertEquals(.999, x, 1.0e-5);\n    }\n",
        "begin_line": 100,
        "end_line": 107,
        "comment": "",
        "child_ranges": [
            "(line 101,col 9)-(line 103,col 34)",
            "(line 104,col 9)-(line 104,col 50)",
            "(line 105,col 9)-(line 105,col 54)",
            "(line 106,col 9)-(line 106,col 38)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.distribution.FDistributionTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/distribution/FDistributionTest.java",
        "signature": "org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom()",
        "snippet": "    public void testSmallDegreesOfFreedom() throws Exception {\n        org.apache.commons.math.distribution.FDistributionImpl fd =\n            new org.apache.commons.math.distribution.FDistributionImpl(\n                1.0, 1.0);\n        double p = fd.cumulativeProbability(0.975);\n        double x = fd.inverseCumulativeProbability(p);\n        assertEquals(0.975, x, 1.0e-5);\n\n        fd.setDenominatorDegreesOfFreedom(2.0);\n        p = fd.cumulativeProbability(0.975);\n        x = fd.inverseCumulativeProbability(p);\n        assertEquals(0.975, x, 1.0e-5);\n    }\n",
        "begin_line": 109,
        "end_line": 121,
        "comment": "",
        "child_ranges": [
            "(line 110,col 9)-(line 112,col 26)",
            "(line 113,col 9)-(line 113,col 51)",
            "(line 114,col 9)-(line 114,col 54)",
            "(line 115,col 9)-(line 115,col 39)",
            "(line 117,col 9)-(line 117,col 47)",
            "(line 118,col 9)-(line 118,col 44)",
            "(line 119,col 9)-(line 119,col 47)",
            "(line 120,col 9)-(line 120,col 39)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest",
        "child_classes": [
            "org.apache.commons.math.distribution.FDistributionTest"
        ],
        "src_path": "src/test/org/apache/commons/math/distribution/ContinuousDistributionAbstractTest.java",
        "signature": "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.ContinuousDistributionAbstractTest(java.lang.String)",
        "snippet": "    public ContinuousDistributionAbstractTest(String name) {\n        super(name);\n    }\n",
        "begin_line": 83,
        "end_line": 85,
        "comment": "\n     * Constructor for ContinuousDistributionAbstractTest.\n     * @param name\n     ",
        "child_ranges": [
            "(line 84,col 9)-(line 84,col 20)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest",
        "child_classes": [
            "org.apache.commons.math.distribution.FDistributionTest"
        ],
        "src_path": "src/test/org/apache/commons/math/distribution/ContinuousDistributionAbstractTest.java",
        "signature": "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.makeDistribution()",
        "snippet": "    public abstract ContinuousDistribution makeDistribution();\n",
        "begin_line": 90,
        "end_line": 90,
        "comment": " Creates the default continuous distribution instance to use in tests. ",
        "child_ranges": []
    },
    {
        "class_name": "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest",
        "child_classes": [
            "org.apache.commons.math.distribution.FDistributionTest"
        ],
        "src_path": "src/test/org/apache/commons/math/distribution/ContinuousDistributionAbstractTest.java",
        "signature": "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.makeCumulativeTestPoints()",
        "snippet": "    public abstract double[] makeCumulativeTestPoints();\n",
        "begin_line": 93,
        "end_line": 93,
        "comment": " Creates the default cumulative probability density test input values ",
        "child_ranges": []
    },
    {
        "class_name": "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest",
        "child_classes": [
            "org.apache.commons.math.distribution.FDistributionTest"
        ],
        "src_path": "src/test/org/apache/commons/math/distribution/ContinuousDistributionAbstractTest.java",
        "signature": "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.makeCumulativeTestValues()",
        "snippet": "    public abstract double[] makeCumulativeTestValues();\n",
        "begin_line": 96,
        "end_line": 96,
        "comment": " Creates the default cumulative probability density test expected values ",
        "child_ranges": []
    },
    {
        "class_name": "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest",
        "child_classes": [
            "org.apache.commons.math.distribution.FDistributionTest"
        ],
        "src_path": "src/test/org/apache/commons/math/distribution/ContinuousDistributionAbstractTest.java",
        "signature": "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.makeInverseCumulativeTestPoints()",
        "snippet": "    public double[] makeInverseCumulativeTestPoints() {\n        return makeCumulativeTestValues();\n    }\n",
        "begin_line": 101,
        "end_line": 103,
        "comment": " Creates the default inverse cumulative probability test input values ",
        "child_ranges": [
            "(line 102,col 9)-(line 102,col 42)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest",
        "child_classes": [
            "org.apache.commons.math.distribution.FDistributionTest"
        ],
        "src_path": "src/test/org/apache/commons/math/distribution/ContinuousDistributionAbstractTest.java",
        "signature": "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.makeInverseCumulativeTestValues()",
        "snippet": "    public double[] makeInverseCumulativeTestValues() {\n        return makeCumulativeTestPoints();\n    }\n",
        "begin_line": 106,
        "end_line": 108,
        "comment": " Creates the default inverse cumulative probability density test expected values ",
        "child_ranges": [
            "(line 107,col 9)-(line 107,col 42)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest",
        "child_classes": [
            "org.apache.commons.math.distribution.FDistributionTest"
        ],
        "src_path": "src/test/org/apache/commons/math/distribution/ContinuousDistributionAbstractTest.java",
        "signature": "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.setUp()",
        "snippet": "    protected void setUp() throws Exception {\n        super.setUp();\n        distribution = makeDistribution();\n        cumulativeTestPoints = makeCumulativeTestPoints();\n        cumulativeTestValues = makeCumulativeTestValues();\n        inverseCumulativeTestPoints = makeInverseCumulativeTestPoints();\n        inverseCumulativeTestValues = makeInverseCumulativeTestValues();   \n    }\n",
        "begin_line": 115,
        "end_line": 122,
        "comment": "\n     * Setup sets all test instance data to default values \n     ",
        "child_ranges": [
            "(line 116,col 9)-(line 116,col 22)",
            "(line 117,col 9)-(line 117,col 42)",
            "(line 118,col 9)-(line 118,col 58)",
            "(line 119,col 9)-(line 119,col 58)",
            "(line 120,col 9)-(line 120,col 72)",
            "(line 121,col 9)-(line 121,col 72)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest",
        "child_classes": [
            "org.apache.commons.math.distribution.FDistributionTest"
        ],
        "src_path": "src/test/org/apache/commons/math/distribution/ContinuousDistributionAbstractTest.java",
        "signature": "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.tearDown()",
        "snippet": "    protected void tearDown() throws Exception {      \n        super.tearDown();\n        distribution = null;\n        cumulativeTestPoints = null;\n        cumulativeTestValues = null;\n        inverseCumulativeTestPoints = null;\n        inverseCumulativeTestValues = null;   \n    }\n",
        "begin_line": 127,
        "end_line": 134,
        "comment": "\n     * Cleans up test instance data\n     ",
        "child_ranges": [
            "(line 128,col 9)-(line 128,col 25)",
            "(line 129,col 9)-(line 129,col 28)",
            "(line 130,col 9)-(line 130,col 36)",
            "(line 131,col 9)-(line 131,col 36)",
            "(line 132,col 9)-(line 132,col 43)",
            "(line 133,col 9)-(line 133,col 43)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest",
        "child_classes": [
            "org.apache.commons.math.distribution.FDistributionTest"
        ],
        "src_path": "src/test/org/apache/commons/math/distribution/ContinuousDistributionAbstractTest.java",
        "signature": "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.verifyCumulativeProbabilities()",
        "snippet": "    protected void verifyCumulativeProbabilities() throws Exception {\n        for (int i = 0; i < cumulativeTestPoints.length; i++) {\n            TestUtils.assertEquals(\"Incorrect cumulative probability value returned for \" \n                + cumulativeTestPoints[i], cumulativeTestValues[i], \n                distribution.cumulativeProbability(cumulativeTestPoints[i]), \n                getTolerance());\n        }           \n    }\n",
        "begin_line": 142,
        "end_line": 149,
        "comment": "\n     * Verifies that cumulative probability density calculations match expected values\n     * using current test instance data\n     ",
        "child_ranges": [
            "(line 143,col 9)-(line 148,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest",
        "child_classes": [
            "org.apache.commons.math.distribution.FDistributionTest"
        ],
        "src_path": "src/test/org/apache/commons/math/distribution/ContinuousDistributionAbstractTest.java",
        "signature": "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.verifyInverseCumulativeProbabilities()",
        "snippet": "    protected void verifyInverseCumulativeProbabilities() throws Exception {\n        for (int i = 0; i < inverseCumulativeTestPoints.length; i++) {\n            TestUtils.assertEquals(\"Incorrect inverse cumulative probability value returned for \" \n                + inverseCumulativeTestPoints[i], inverseCumulativeTestValues[i], \n                 distribution.inverseCumulativeProbability(inverseCumulativeTestPoints[i]), \n                 getTolerance());\n        }           \n    }\n",
        "begin_line": 155,
        "end_line": 162,
        "comment": "\n     * Verifies that inverse cumulative probability density calculations match expected values\n     * using current test instance data\n     ",
        "child_ranges": [
            "(line 156,col 9)-(line 161,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest",
        "child_classes": [
            "org.apache.commons.math.distribution.FDistributionTest"
        ],
        "src_path": "src/test/org/apache/commons/math/distribution/ContinuousDistributionAbstractTest.java",
        "signature": "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.testCumulativeProbabilities()",
        "snippet": "    public void testCumulativeProbabilities() throws Exception {\n        verifyCumulativeProbabilities();      \n    }\n",
        "begin_line": 170,
        "end_line": 172,
        "comment": "\n     * Verifies that cumulative probability density calculations match expected values\n     * using default test instance data\n     ",
        "child_ranges": [
            "(line 171,col 9)-(line 171,col 40)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest",
        "child_classes": [
            "org.apache.commons.math.distribution.FDistributionTest"
        ],
        "src_path": "src/test/org/apache/commons/math/distribution/ContinuousDistributionAbstractTest.java",
        "signature": "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.testInverseCumulativeProbabilities()",
        "snippet": "    public void testInverseCumulativeProbabilities() throws Exception {\n        verifyInverseCumulativeProbabilities();       \n    }\n",
        "begin_line": 178,
        "end_line": 180,
        "comment": "\n     * Verifies that inverse cumulative probability density calculations match expected values\n     * using default test instance data\n     ",
        "child_ranges": [
            "(line 179,col 9)-(line 179,col 47)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest",
        "child_classes": [
            "org.apache.commons.math.distribution.FDistributionTest"
        ],
        "src_path": "src/test/org/apache/commons/math/distribution/ContinuousDistributionAbstractTest.java",
        "signature": "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.testConsistency()",
        "snippet": "    public void testConsistency() throws Exception {\n        for (int i=1; i < cumulativeTestPoints.length; i++) {\n            \n            // check that cdf(x, x) = 0\n            TestUtils.assertEquals(0d, \n               distribution.cumulativeProbability\n                 (cumulativeTestPoints[i], cumulativeTestPoints[i]), tolerance);\n            \n            // check that P(a < X < b) = P(X < b) - P(X < a)\n            double upper = Math.max(cumulativeTestPoints[i], cumulativeTestPoints[i -1]);\n            double lower = Math.min(cumulativeTestPoints[i], cumulativeTestPoints[i -1]);\n            double diff = distribution.cumulativeProbability(upper) - \n                distribution.cumulativeProbability(lower);\n            double direct = distribution.cumulativeProbability(lower, upper);\n            TestUtils.assertEquals(\"Inconsistent cumulative probabilities for (\" \n                    + lower + \",\" + upper + \")\", diff, direct, tolerance);\n        }\n    }\n",
        "begin_line": 185,
        "end_line": 202,
        "comment": "\n     * Verifies that probability computations are consistent\n     ",
        "child_ranges": [
            "(line 186,col 9)-(line 201,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest",
        "child_classes": [
            "org.apache.commons.math.distribution.FDistributionTest"
        ],
        "src_path": "src/test/org/apache/commons/math/distribution/ContinuousDistributionAbstractTest.java",
        "signature": "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.testIllegalArguments()",
        "snippet": "    public void testIllegalArguments() throws Exception {\n        try {\n            distribution.cumulativeProbability(1, 0);\n            fail(\"Expecting IllegalArgumentException for bad cumulativeProbability interval\");\n        } catch (IllegalArgumentException ex) {\n            // expected\n        }\n        try {\n            distribution.inverseCumulativeProbability(-1);\n            fail(\"Expecting IllegalArgumentException for p = -1\");\n        } catch (IllegalArgumentException ex) {\n            // expected\n        }\n        try {\n            distribution.inverseCumulativeProbability(2);\n            fail(\"Expecting IllegalArgumentException for p = 2\");\n        } catch (IllegalArgumentException ex) {\n            // expected\n        }       \n    }\n",
        "begin_line": 207,
        "end_line": 226,
        "comment": "\n     * Verifies that illegal arguments are correctly handled\n     ",
        "child_ranges": [
            "(line 208,col 9)-(line 213,col 9)",
            "(line 214,col 9)-(line 219,col 9)",
            "(line 220,col 9)-(line 225,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest",
        "child_classes": [
            "org.apache.commons.math.distribution.FDistributionTest"
        ],
        "src_path": "src/test/org/apache/commons/math/distribution/ContinuousDistributionAbstractTest.java",
        "signature": "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.getCumulativeTestPoints()",
        "snippet": "    protected double[] getCumulativeTestPoints() {\n        return cumulativeTestPoints;\n    }\n",
        "begin_line": 232,
        "end_line": 234,
        "comment": "\n     * @return Returns the cumulativeTestPoints.\n     ",
        "child_ranges": [
            "(line 233,col 9)-(line 233,col 36)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest",
        "child_classes": [
            "org.apache.commons.math.distribution.FDistributionTest"
        ],
        "src_path": "src/test/org/apache/commons/math/distribution/ContinuousDistributionAbstractTest.java",
        "signature": "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.setCumulativeTestPoints(double[])",
        "snippet": "    protected void setCumulativeTestPoints(double[] cumulativeTestPoints) {\n        this.cumulativeTestPoints = cumulativeTestPoints;\n    }\n",
        "begin_line": 239,
        "end_line": 241,
        "comment": "\n     * @param cumulativeTestPoints The cumulativeTestPoints to set.\n     ",
        "child_ranges": [
            "(line 240,col 9)-(line 240,col 57)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest",
        "child_classes": [
            "org.apache.commons.math.distribution.FDistributionTest"
        ],
        "src_path": "src/test/org/apache/commons/math/distribution/ContinuousDistributionAbstractTest.java",
        "signature": "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.getCumulativeTestValues()",
        "snippet": "    protected double[] getCumulativeTestValues() {\n        return cumulativeTestValues;\n    }\n",
        "begin_line": 246,
        "end_line": 248,
        "comment": "\n     * @return Returns the cumulativeTestValues.\n     ",
        "child_ranges": [
            "(line 247,col 9)-(line 247,col 36)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest",
        "child_classes": [
            "org.apache.commons.math.distribution.FDistributionTest"
        ],
        "src_path": "src/test/org/apache/commons/math/distribution/ContinuousDistributionAbstractTest.java",
        "signature": "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.setCumulativeTestValues(double[])",
        "snippet": "    protected void setCumulativeTestValues(double[] cumulativeTestValues) {\n        this.cumulativeTestValues = cumulativeTestValues;\n    }\n",
        "begin_line": 253,
        "end_line": 255,
        "comment": "\n     * @param cumulativeTestValues The cumulativeTestValues to set.\n     ",
        "child_ranges": [
            "(line 254,col 9)-(line 254,col 57)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest",
        "child_classes": [
            "org.apache.commons.math.distribution.FDistributionTest"
        ],
        "src_path": "src/test/org/apache/commons/math/distribution/ContinuousDistributionAbstractTest.java",
        "signature": "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.getDistribution()",
        "snippet": "    protected ContinuousDistribution getDistribution() {\n        return distribution;\n    }\n",
        "begin_line": 260,
        "end_line": 262,
        "comment": "\n     * @return Returns the distribution.\n     ",
        "child_ranges": [
            "(line 261,col 9)-(line 261,col 28)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest",
        "child_classes": [
            "org.apache.commons.math.distribution.FDistributionTest"
        ],
        "src_path": "src/test/org/apache/commons/math/distribution/ContinuousDistributionAbstractTest.java",
        "signature": "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.setDistribution(org.apache.commons.math.distribution.ContinuousDistribution)",
        "snippet": "    protected void setDistribution(ContinuousDistribution distribution) {\n        this.distribution = distribution;\n    }\n",
        "begin_line": 267,
        "end_line": 269,
        "comment": "\n     * @param distribution The distribution to set.\n     ",
        "child_ranges": [
            "(line 268,col 9)-(line 268,col 41)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest",
        "child_classes": [
            "org.apache.commons.math.distribution.FDistributionTest"
        ],
        "src_path": "src/test/org/apache/commons/math/distribution/ContinuousDistributionAbstractTest.java",
        "signature": "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.getInverseCumulativeTestPoints()",
        "snippet": "    protected double[] getInverseCumulativeTestPoints() {\n        return inverseCumulativeTestPoints;\n    }\n",
        "begin_line": 274,
        "end_line": 276,
        "comment": "\n     * @return Returns the inverseCumulativeTestPoints.\n     ",
        "child_ranges": [
            "(line 275,col 9)-(line 275,col 43)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest",
        "child_classes": [
            "org.apache.commons.math.distribution.FDistributionTest"
        ],
        "src_path": "src/test/org/apache/commons/math/distribution/ContinuousDistributionAbstractTest.java",
        "signature": "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.setInverseCumulativeTestPoints(double[])",
        "snippet": "    protected void setInverseCumulativeTestPoints(double[] inverseCumulativeTestPoints) {\n        this.inverseCumulativeTestPoints = inverseCumulativeTestPoints;\n    }\n",
        "begin_line": 281,
        "end_line": 283,
        "comment": "\n     * @param inverseCumulativeTestPoints The inverseCumulativeTestPoints to set.\n     ",
        "child_ranges": [
            "(line 282,col 9)-(line 282,col 71)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest",
        "child_classes": [
            "org.apache.commons.math.distribution.FDistributionTest"
        ],
        "src_path": "src/test/org/apache/commons/math/distribution/ContinuousDistributionAbstractTest.java",
        "signature": "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.getInverseCumulativeTestValues()",
        "snippet": "    protected double[] getInverseCumulativeTestValues() {\n        return inverseCumulativeTestValues;\n    }\n",
        "begin_line": 288,
        "end_line": 290,
        "comment": "\n     * @return Returns the inverseCumulativeTestValues.\n     ",
        "child_ranges": [
            "(line 289,col 9)-(line 289,col 43)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest",
        "child_classes": [
            "org.apache.commons.math.distribution.FDistributionTest"
        ],
        "src_path": "src/test/org/apache/commons/math/distribution/ContinuousDistributionAbstractTest.java",
        "signature": "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.setInverseCumulativeTestValues(double[])",
        "snippet": "    protected void setInverseCumulativeTestValues(double[] inverseCumulativeTestValues) {\n        this.inverseCumulativeTestValues = inverseCumulativeTestValues;\n    }\n",
        "begin_line": 295,
        "end_line": 297,
        "comment": "\n     * @param inverseCumulativeTestValues The inverseCumulativeTestValues to set.\n     ",
        "child_ranges": [
            "(line 296,col 9)-(line 296,col 71)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest",
        "child_classes": [
            "org.apache.commons.math.distribution.FDistributionTest"
        ],
        "src_path": "src/test/org/apache/commons/math/distribution/ContinuousDistributionAbstractTest.java",
        "signature": "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.getTolerance()",
        "snippet": "    protected double getTolerance() {\n        return tolerance;\n    }\n",
        "begin_line": 302,
        "end_line": 304,
        "comment": "\n     * @return Returns the tolerance.\n     ",
        "child_ranges": [
            "(line 303,col 9)-(line 303,col 25)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest",
        "child_classes": [
            "org.apache.commons.math.distribution.FDistributionTest"
        ],
        "src_path": "src/test/org/apache/commons/math/distribution/ContinuousDistributionAbstractTest.java",
        "signature": "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.setTolerance(double)",
        "snippet": "    protected void setTolerance(double tolerance) {\n        this.tolerance = tolerance;\n    }\n",
        "begin_line": 309,
        "end_line": 311,
        "comment": "\n     * @param tolerance The tolerance to set.\n     ",
        "child_ranges": [
            "(line 310,col 9)-(line 310,col 35)"
        ]
    }
]