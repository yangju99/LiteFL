[
    {
        "name": "UnivariateRealSolverUtils.bracket#166",
        "is_bug": false,
        "src_path": "src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java",
        "class_name": "org.apache.commons.math.analysis.UnivariateRealSolverUtils",
        "signature": "org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(org.apache.commons.math.analysis.UnivariateRealFunction, double, double, double, int)",
        "snippet": "    public static double[] bracket(UnivariateRealFunction function,\n            double initial, double lowerBound, double upperBound, \n            int maximumIterations) throws ConvergenceException, \n            FunctionEvaluationException {\n        \n        if (function == null) {\n            throw new IllegalArgumentException (\"function is null.\");\n        }\n        if (maximumIterations <= 0)  {\n            throw new IllegalArgumentException\n            (\"bad value for maximumIterations: \" + maximumIterations);\n        }\n        if (initial < lowerBound || initial > upperBound || lowerBound >= upperBound) {\n            throw new IllegalArgumentException\n            (\"Invalid endpoint parameters:  lowerBound=\" + lowerBound + \n              \" initial=\" + initial + \" upperBound=\" + upperBound);\n        }\n        double a = initial;\n        double b = initial;\n        double fa;\n        double fb;\n        int numIterations = 0 ;\n    \n        do {\n            a = Math.max(a - 1.0, lowerBound);\n            b = Math.min(b + 1.0, upperBound);\n            fa = function.value(a);\n            \n            fb = function.value(b);\n            numIterations++ ;\n        } while ((fa * fb > 0.0) && (numIterations < maximumIterations) && \n                ((a > lowerBound) || (b < upperBound)));\n   \n        if (fa * fb >= 0.0 ) {\n            throw new ConvergenceException\n            (\"Number of iterations={0}, maximum iterations={1}, initial={2}, lower bound={3}, upper bound={4}, final a value={5}, final b value={6}, f(a)={7}, f(b)={8}\",\n             new Object[] { Integer.valueOf(numIterations), Integer.valueOf(maximumIterations),\n                            Double.valueOf(initial), Double.valueOf(lowerBound), Double.valueOf(upperBound),\n                            Double.valueOf(a), Double.valueOf(b), Double.valueOf(fa), Double.valueOf(fb) });\n        }\n        \n        return new double[]{a, b};\n    }\n",
        "begin_line": 166,
        "end_line": 208,
        "comment": "\n     * This method attempts to find two values a and b satisfying <ul>\n     * <li> <code> lowerBound <= a < initial < b <= upperBound</code> </li>\n     * <li> <code> f(a) * f(b) < 0 </code> </li>\n     * </ul>\n     * If f is continuous on <code>[a,b],</code> this means that <code>a</code>\n     * and <code>b</code> bracket a root of f.\n     * <p>\n     * The algorithm starts by setting \n     * <code>a := initial -1; b := initial +1,</code> examines the value of the\n     * function at <code>a</code> and <code>b</code> and keeps moving\n     * the endpoints out by one unit each time through a loop that terminates \n     * when one of the following happens: <ul>\n     * <li> <code> f(a) * f(b) < 0 </code> --  success!</li>\n     * <li> <code> a = lower </code> and <code> b = upper</code> \n     * -- ConvergenceException </li>\n     * <li> <code> maximumIterations</code> iterations elapse \n     * -- ConvergenceException </li></ul></p>\n     * \n     * @param function the function\n     * @param initial initial midpoint of interval being expanded to\n     * bracket a root\n     * @param lowerBound lower bound (a is never lower than this value)\n     * @param upperBound upper bound (b never is greater than this\n     * value)\n     * @param maximumIterations maximum number of iterations to perform\n     * @return a two element array holding {a, b}.\n     * @throws ConvergenceException if the algorithm fails to find a and b\n     * satisfying the desired conditions\n     * @throws FunctionEvaluationException if an error occurs evaluating the \n     * function\n     * @throws IllegalArgumentException if function is null, maximumIterations\n     * is not positive, or initial is not between lowerBound and upperBound\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 1.0
        },
        "num_failing_tests": 1
    },
    {
        "name": "FDistributionImpl.getDomainLowerBound#118",
        "is_bug": false,
        "src_path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java",
        "class_name": "org.apache.commons.math.distribution.FDistributionImpl",
        "signature": "org.apache.commons.math.distribution.FDistributionImpl.getDomainLowerBound(double)",
        "snippet": "    protected double getDomainLowerBound(double p) {\n        return 0.0;\n    }\n",
        "begin_line": 118,
        "end_line": 120,
        "comment": "\n     * Access the domain value lower bound, based on <code>p</code>, used to\n     * bracket a CDF root.  This method is used by\n     * {@link #inverseCumulativeProbability(double)} to find critical values.\n     * \n     * @param p the desired probability for the critical value\n     * @return domain value lower bound, i.e.\n     *         P(X &lt; <i>lower bound</i>) &lt; <code>p</code> \n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5773
        },
        "num_failing_tests": 1
    },
    {
        "name": "FDistributionImpl.getDomainUpperBound#131",
        "is_bug": false,
        "src_path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java",
        "class_name": "org.apache.commons.math.distribution.FDistributionImpl",
        "signature": "org.apache.commons.math.distribution.FDistributionImpl.getDomainUpperBound(double)",
        "snippet": "    protected double getDomainUpperBound(double p) {\n        return Double.MAX_VALUE;\n    }\n",
        "begin_line": 131,
        "end_line": 133,
        "comment": "\n     * Access the domain value upper bound, based on <code>p</code>, used to\n     * bracket a CDF root.  This method is used by\n     * {@link #inverseCumulativeProbability(double)} to find critical values.\n     * \n     * @param p the desired probability for the critical value\n     * @return domain value upper bound, i.e.\n     *         P(X &lt; <i>upper bound</i>) &gt; <code>p</code> \n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5773
        },
        "num_failing_tests": 1
    },
    {
        "name": "FDistributionImpl.getInitialDomain#143",
        "is_bug": true,
        "src_path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java",
        "class_name": "org.apache.commons.math.distribution.FDistributionImpl",
        "signature": "org.apache.commons.math.distribution.FDistributionImpl.getInitialDomain(double)",
        "snippet": "    protected double getInitialDomain(double p) {\n        double ret;\n        double d = getDenominatorDegreesOfFreedom();\n            // use mean\n            ret = d / (d - 2.0);\n        return ret;\n    }\n",
        "begin_line": 143,
        "end_line": 149,
        "comment": "\n     * Access the initial domain value, based on <code>p</code>, used to\n     * bracket a CDF root.  This method is used by\n     * {@link #inverseCumulativeProbability(double)} to find critical values.\n     * \n     * @param p the desired probability for the critical value\n     * @return initial domain value\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5773
        },
        "num_failing_tests": 1
    },
    {
        "name": "AbstractContinuousDistribution.inverseCumulativeProbability#59",
        "is_bug": false,
        "src_path": "src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java",
        "class_name": "org.apache.commons.math.distribution.AbstractContinuousDistribution",
        "signature": "org.apache.commons.math.distribution.AbstractContinuousDistribution.inverseCumulativeProbability(double)",
        "snippet": "    public double inverseCumulativeProbability(final double p)\n        throws MathException {\n        if (p < 0.0 || p > 1.0) {\n            throw new IllegalArgumentException(\"p must be between 0.0 and 1.0, inclusive.\");\n        }\n\n        // by default, do simple root finding using bracketing and default solver.\n        // subclasses can overide if there is a better method.\n        UnivariateRealFunction rootFindingFunction =\n            new UnivariateRealFunction() {\n\n            public double value(double x) throws FunctionEvaluationException {\n                try {\n                    return cumulativeProbability(x) - p;\n                } catch (MathException ex) {\n                    throw new FunctionEvaluationException(x, ex.getPattern(), ex.getArguments(), ex);\n                }\n            }\n        };\n              \n        // Try to bracket root, test domain endoints if this fails     \n        double lowerBound = getDomainLowerBound(p);\n        double upperBound = getDomainUpperBound(p);\n        double[] bracket = null;\n        try {\n            bracket = UnivariateRealSolverUtils.bracket(\n                    rootFindingFunction, getInitialDomain(p),\n                    lowerBound, upperBound);\n        }  catch (ConvergenceException ex) {\n            /* \n             * Check domain endpoints to see if one gives value that is within\n             * the default solver's defaultAbsoluteAccuracy of 0 (will be the\n             * case if density has bounded support and p is 0 or 1).\n             * \n             * TODO: expose the default solver, defaultAbsoluteAccuracy as\n             * a constant.\n             */ \n            if (Math.abs(rootFindingFunction.value(lowerBound)) < 1E-6) {\n                return lowerBound;\n            }\n            if (Math.abs(rootFindingFunction.value(upperBound)) < 1E-6) {\n                return upperBound;\n            }     \n            // Failed bracket convergence was not because of corner solution\n            throw new MathException(ex);\n        }\n\n        // find root\n        double root = UnivariateRealSolverUtils.solve(rootFindingFunction,\n                bracket[0],bracket[1]);\n        return root;\n    }\n",
        "begin_line": 59,
        "end_line": 110,
        "comment": "\n     * For this distribution, X, this method returns the critical point x, such\n     * that P(X &lt; x) = <code>p</code>.\n     *\n     * @param p the desired probability\n     * @return x, such that P(X &lt; x) = <code>p</code>\n     * @throws MathException if the inverse cumulative probability can not be\n     *         computed due to convergence or other numerical errors.\n     * @throws IllegalArgumentException if <code>p</code> is not a valid\n     *         probability.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5773
        },
        "num_failing_tests": 1
    },
    {
        "name": "UnivariateRealSolverUtils.bracket#125",
        "is_bug": false,
        "src_path": "src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java",
        "class_name": "org.apache.commons.math.analysis.UnivariateRealSolverUtils",
        "signature": "org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(org.apache.commons.math.analysis.UnivariateRealFunction, double, double, double)",
        "snippet": "    public static double[] bracket(UnivariateRealFunction function, \n            double initial, double lowerBound, double upperBound) \n    throws ConvergenceException, FunctionEvaluationException {\n        return bracket( function, initial, lowerBound, upperBound,\n            Integer.MAX_VALUE ) ;\n    }\n",
        "begin_line": 125,
        "end_line": 130,
        "comment": "\n     * This method attempts to find two values a and b satisfying <ul>\n    * <li> <code> lowerBound <= a < initial < b <= upperBound</code> </li>\n     * <li> <code> f(a) * f(b) < 0 </code></li>\n     * </ul>\n     * If f is continuous on <code>[a,b],</code> this means that <code>a</code>\n     * and <code>b</code> bracket a root of f.\n     * <p>\n     * The algorithm starts by setting \n     * <code>a := initial -1; b := initial +1,</code> examines the value of the\n     * function at <code>a</code> and <code>b</code> and keeps moving\n     * the endpoints out by one unit each time through a loop that terminates \n     * when one of the following happens: <ul>\n     * <li> <code> f(a) * f(b) < 0 </code> --  success!</li>\n     * <li> <code> a = lower </code> and <code> b = upper</code> \n     * -- ConvergenceException </li>\n     * <li> <code> Integer.MAX_VALUE</code> iterations elapse \n     * -- ConvergenceException </li>\n     * </ul></p>\n     * <p>\n     * <strong>Note: </strong> this method can take \n     * <code>Integer.MAX_VALUE</code> iterations to throw a \n     * <code>ConvergenceException.</code>  Unless you are confident that there\n     * is a root between <code>lowerBound</code> and <code>upperBound</code>\n     * near <code>initial,</code> it is better to use \n     * {@link #bracket(UnivariateRealFunction, double, double, double, int)}, \n     * explicitly specifying the maximum number of iterations.</p>\n     *\n     * @param function the function\n     * @param initial initial midpoint of interval being expanded to\n     * bracket a root\n     * @param lowerBound lower bound (a is never lower than this value)\n     * @param upperBound upper bound (b never is greater than this\n     * value)\n     * @return a two element array holding {a, b}\n     * @throws ConvergenceException if a root can not be bracketted\n     * @throws FunctionEvaluationException if an error occurs evaluating the\n     * function\n     * @throws IllegalArgumentException if function is null, maximumIterations\n     * is not positive, or initial is not between lowerBound and upperBound\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5773
        },
        "num_failing_tests": 1
    },
    {
        "name": "FDistributionImpl.inverseCumulativeProbability#98",
        "is_bug": false,
        "src_path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java",
        "class_name": "org.apache.commons.math.distribution.FDistributionImpl",
        "signature": "org.apache.commons.math.distribution.FDistributionImpl.inverseCumulativeProbability(double)",
        "snippet": "    public double inverseCumulativeProbability(final double p) \n        throws MathException {\n        if (p == 0) {\n            return 0d;\n        }\n        if (p == 1) {\n            return Double.POSITIVE_INFINITY;\n        }\n        return super.inverseCumulativeProbability(p);\n    }\n",
        "begin_line": 98,
        "end_line": 107,
        "comment": "\n     * For this distribution, X, this method returns the critical point x, such\n     * that P(X &lt; x) = <code>p</code>.\n     * <p>\n     * Returns 0 for p=0 and <code>Double.POSITIVE_INFINITY</code> for p=1.</p>\n     *\n     * @param p the desired probability\n     * @return x, such that P(X &lt; x) = <code>p</code>\n     * @throws MathException if the inverse cumulative probability can not be\n     *         computed due to convergence or other numerical errors.\n     * @throws IllegalArgumentException if <code>p</code> is not a valid\n     *         probability.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 1
    },
    {
        "name": "FDistributionImpl.cumulativeProbability#70",
        "is_bug": false,
        "src_path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java",
        "class_name": "org.apache.commons.math.distribution.FDistributionImpl",
        "signature": "org.apache.commons.math.distribution.FDistributionImpl.cumulativeProbability(double)",
        "snippet": "    public double cumulativeProbability(double x) throws MathException {\n        double ret;\n        if (x <= 0.0) {\n            ret = 0.0;\n        } else {\n            double n = getNumeratorDegreesOfFreedom();\n            double m = getDenominatorDegreesOfFreedom();\n            \n            ret = Beta.regularizedBeta((n * x) / (m + n * x),\n                0.5 * n,\n                0.5 * m);\n        }\n        return ret;\n    }\n",
        "begin_line": 70,
        "end_line": 83,
        "comment": "\n     * For this distribution, X, this method returns P(X &lt; x).\n     * \n     * The implementation of this method is based on:\n     * <ul>\n     * <li>\n     * <a href=\"http://mathworld.wolfram.com/F-Distribution.html\">\n     * F-Distribution</a>, equation (4).</li>\n     * </ul>\n     * \n     * @param x the value at which the CDF is evaluated.\n     * @return CDF for this distribution. \n     * @throws MathException if the cumulative probability can not be\n     *            computed due to convergence or other numerical errors.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3536
        },
        "num_failing_tests": 1
    },
    {
        "name": "FDistributionImpl.getNumeratorDegreesOfFreedom#169",
        "is_bug": false,
        "src_path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java",
        "class_name": "org.apache.commons.math.distribution.FDistributionImpl",
        "signature": "org.apache.commons.math.distribution.FDistributionImpl.getNumeratorDegreesOfFreedom()",
        "snippet": "    public double getNumeratorDegreesOfFreedom() {\n        return numeratorDegreesOfFreedom;\n    }\n",
        "begin_line": 169,
        "end_line": 171,
        "comment": "\n     * Access the numerator degrees of freedom.\n     * @return the numerator degrees of freedom.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3333
        },
        "num_failing_tests": 1
    },
    {
        "name": "FDistributionImpl.getDenominatorDegreesOfFreedom#191",
        "is_bug": false,
        "src_path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java",
        "class_name": "org.apache.commons.math.distribution.FDistributionImpl",
        "signature": "org.apache.commons.math.distribution.FDistributionImpl.getDenominatorDegreesOfFreedom()",
        "snippet": "    public double getDenominatorDegreesOfFreedom() {\n        return denominatorDegreesOfFreedom;\n    }\n",
        "begin_line": 191,
        "end_line": 193,
        "comment": "\n     * Access the denominator degrees of freedom.\n     * @return the denominator degrees of freedom.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3333
        },
        "num_failing_tests": 1
    },
    {
        "name": "FDistributionImpl.FDistributionImpl#48",
        "is_bug": false,
        "src_path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java",
        "class_name": "org.apache.commons.math.distribution.FDistributionImpl",
        "signature": "org.apache.commons.math.distribution.FDistributionImpl.FDistributionImpl(double, double)",
        "snippet": "    public FDistributionImpl(double numeratorDegreesOfFreedom,\n            double denominatorDegreesOfFreedom) {\n        super();\n        setNumeratorDegreesOfFreedom(numeratorDegreesOfFreedom);\n        setDenominatorDegreesOfFreedom(denominatorDegreesOfFreedom);\n    }\n",
        "begin_line": 48,
        "end_line": 53,
        "comment": "\n     * Create a F distribution using the given degrees of freedom.\n     * @param numeratorDegreesOfFreedom the numerator degrees of freedom.\n     * @param denominatorDegreesOfFreedom the denominator degrees of freedom.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2887
        },
        "num_failing_tests": 1
    },
    {
        "name": "FDistributionImpl.setNumeratorDegreesOfFreedom#157",
        "is_bug": false,
        "src_path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java",
        "class_name": "org.apache.commons.math.distribution.FDistributionImpl",
        "signature": "org.apache.commons.math.distribution.FDistributionImpl.setNumeratorDegreesOfFreedom(double)",
        "snippet": "    public void setNumeratorDegreesOfFreedom(double degreesOfFreedom) {\n        if (degreesOfFreedom <= 0.0) {\n            throw new IllegalArgumentException(\n                \"degrees of freedom must be positive.\");\n        }\n        this.numeratorDegreesOfFreedom = degreesOfFreedom;\n    }\n",
        "begin_line": 157,
        "end_line": 163,
        "comment": "\n     * Modify the numerator degrees of freedom.\n     * @param degreesOfFreedom the new numerator degrees of freedom.\n     * @throws IllegalArgumentException if <code>degreesOfFreedom</code> is not\n     *         positive.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2887
        },
        "num_failing_tests": 1
    },
    {
        "name": "FDistributionImpl.setDenominatorDegreesOfFreedom#179",
        "is_bug": false,
        "src_path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java",
        "class_name": "org.apache.commons.math.distribution.FDistributionImpl",
        "signature": "org.apache.commons.math.distribution.FDistributionImpl.setDenominatorDegreesOfFreedom(double)",
        "snippet": "    public void setDenominatorDegreesOfFreedom(double degreesOfFreedom) {\n        if (degreesOfFreedom <= 0.0) {\n            throw new IllegalArgumentException(\n                \"degrees of freedom must be positive.\");\n        }\n        this.denominatorDegreesOfFreedom = degreesOfFreedom;\n    }\n",
        "begin_line": 179,
        "end_line": 185,
        "comment": "\n     * Modify the denominator degrees of freedom.\n     * @param degreesOfFreedom the new denominator degrees of freedom.\n     * @throws IllegalArgumentException if <code>degreesOfFreedom</code> is not\n     *         positive.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2887
        },
        "num_failing_tests": 1
    },
    {
        "name": "Beta.regularizedBeta#121",
        "is_bug": false,
        "src_path": "src/java/org/apache/commons/math/special/Beta.java",
        "class_name": "org.apache.commons.math.special.Beta",
        "signature": "org.apache.commons.math.special.Beta.regularizedBeta(double, double, double, double, int)",
        "snippet": "    public static double regularizedBeta(double x, final double a,\n        final double b, double epsilon, int maxIterations) throws MathException\n    {\n        double ret;\n\n        if (Double.isNaN(x) || Double.isNaN(a) || Double.isNaN(b) || (x < 0) ||\n            (x > 1) || (a <= 0.0) || (b <= 0.0))\n        {\n            ret = Double.NaN;\n        } else if (x > (a + 1.0) / (a + b + 2.0)) {\n            ret = 1.0 - regularizedBeta(1.0 - x, b, a, epsilon, maxIterations);\n        } else {\n            ContinuedFraction fraction = new ContinuedFraction() {\n\n                private static final long serialVersionUID = -7658917278956100597L;\n\n                protected double getB(int n, double x) {\n                    double ret;\n                    double m;\n                    if (n % 2 == 0) { // even\n                        m = n / 2.0;\n                        ret = (m * (b - m) * x) /\n                            ((a + (2 * m) - 1) * (a + (2 * m)));\n                    } else {\n                        m = (n - 1.0) / 2.0;\n                        ret = -((a + m) * (a + b + m) * x) /\n                                ((a + (2 * m)) * (a + (2 * m) + 1.0));\n                    }\n                    return ret;\n                }\n\n                protected double getA(int n, double x) {\n                    return 1.0;\n                }\n            };\n            ret = Math.exp((a * Math.log(x)) + (b * Math.log(1.0 - x)) -\n                Math.log(a) - logBeta(a, b, epsilon, maxIterations)) *\n                1.0 / fraction.evaluate(x, epsilon, maxIterations);\n        }\n\n        return ret;\n    }\n",
        "begin_line": 121,
        "end_line": 162,
        "comment": "\n     * Returns the regularized beta function I(x, a, b).\n     * \n     * The implementation of this method is based on:\n     * <ul>\n     * <li>\n     * <a href=\"http://mathworld.wolfram.com/RegularizedBetaFunction.html\">\n     * Regularized Beta Function</a>.</li>\n     * <li>\n     * <a href=\"http://functions.wolfram.com/06.21.10.0001.01\">\n     * Regularized Beta Function</a>.</li>\n     * </ul>\n     * \n     * @param x the value.\n     * @param a the a parameter.\n     * @param b the b parameter.\n     * @param epsilon When the absolute value of the nth item in the\n     *                series is less than epsilon the approximation ceases\n     *                to calculate further elements in the series.\n     * @param maxIterations Maximum number of \"iterations\" to complete. \n     * @return the regularized beta function I(x, a, b)\n     * @throws MathException if the algorithm fails to converge.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2673
        },
        "num_failing_tests": 1
    },
    {
        "name": "Beta.getB#137",
        "is_bug": false,
        "src_path": "src/java/org/apache/commons/math/special/Beta.java",
        "class_name": "org.apache.commons.math.special.Beta",
        "signature": "org.apache.commons.math.special.Beta.Anonymous-cff3b8ba-b7a5-45d4-b330-3b856b83c7cd.getB(int, double)",
        "snippet": "                protected double getB(int n, double x) {\n                    double ret;\n                    double m;\n                    if (n % 2 == 0) { // even\n                        m = n / 2.0;\n                        ret = (m * (b - m) * x) /\n                            ((a + (2 * m) - 1) * (a + (2 * m)));\n                    } else {\n                        m = (n - 1.0) / 2.0;\n                        ret = -((a + m) * (a + b + m) * x) /\n                                ((a + (2 * m)) * (a + (2 * m) + 1.0));\n                    }\n                    return ret;\n                }\n",
        "begin_line": 137,
        "end_line": 150,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2673
        },
        "num_failing_tests": 1
    },
    {
        "name": "Beta.getA#152",
        "is_bug": false,
        "src_path": "src/java/org/apache/commons/math/special/Beta.java",
        "class_name": "org.apache.commons.math.special.Beta",
        "signature": "org.apache.commons.math.special.Beta.Anonymous-9ca7b81f-1248-4efe-bd8f-9895aa080a82.getA(int, double)",
        "snippet": "                protected double getA(int n, double x) {\n                    return 1.0;\n                }\n",
        "begin_line": 152,
        "end_line": 154,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2673
        },
        "num_failing_tests": 1
    },
    {
        "name": "Beta.regularizedBeta#56",
        "is_bug": false,
        "src_path": "src/java/org/apache/commons/math/special/Beta.java",
        "class_name": "org.apache.commons.math.special.Beta",
        "signature": "org.apache.commons.math.special.Beta.regularizedBeta(double, double, double)",
        "snippet": "    public static double regularizedBeta(double x, double a, double b)\n        throws MathException\n    {\n        return regularizedBeta(x, a, b, DEFAULT_EPSILON, Integer.MAX_VALUE);\n    }\n",
        "begin_line": 56,
        "end_line": 60,
        "comment": "\n     * Returns the\n     * <a href=\"http://mathworld.wolfram.com/RegularizedBetaFunction.html\">\n     * regularized beta function</a> I(x, a, b).\n     * \n     * @param x the value.\n     * @param a the a parameter.\n     * @param b the b parameter.\n     * @return the regularized beta function I(x, a, b)\n     * @throws MathException if the algorithm fails to converge.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2673
        },
        "num_failing_tests": 1
    },
    {
        "name": "Beta.logBeta#192",
        "is_bug": false,
        "src_path": "src/java/org/apache/commons/math/special/Beta.java",
        "class_name": "org.apache.commons.math.special.Beta",
        "signature": "org.apache.commons.math.special.Beta.logBeta(double, double, double, int)",
        "snippet": "    public static double logBeta(double a, double b, double epsilon,\n        int maxIterations) {\n            \n        double ret;\n\n        if (Double.isNaN(a) || Double.isNaN(b) || (a <= 0.0) || (b <= 0.0)) {\n            ret = Double.NaN;\n        } else {\n            ret = Gamma.logGamma(a) + Gamma.logGamma(b) -\n                Gamma.logGamma(a + b);\n        }\n\n        return ret;\n    }\n",
        "begin_line": 192,
        "end_line": 205,
        "comment": "\n     * Returns the natural logarithm of the beta function B(a, b).\n     *\n     * The implementation of this method is based on:\n     * <ul>\n     * <li><a href=\"http://mathworld.wolfram.com/BetaFunction.html\">\n     * Beta Function</a>, equation (1).</li>\n     * </ul>\n     * \n     * @param a the a parameter.\n     * @param b the b parameter.\n     * @param epsilon When the absolute value of the nth item in the\n     *                series is less than epsilon the approximation ceases\n     *                to calculate further elements in the series.\n     * @param maxIterations Maximum number of \"iterations\" to complete. \n     * @return log(B(a, b))\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2673
        },
        "num_failing_tests": 1
    },
    {
        "name": "ContinuedFraction.ContinuedFraction#50",
        "is_bug": false,
        "src_path": "src/java/org/apache/commons/math/util/ContinuedFraction.java",
        "class_name": "org.apache.commons.math.util.ContinuedFraction",
        "signature": "org.apache.commons.math.util.ContinuedFraction.ContinuedFraction()",
        "snippet": "    protected ContinuedFraction() {\n        super();\n    }\n",
        "begin_line": 50,
        "end_line": 52,
        "comment": "\n     * Default constructor.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2357
        },
        "num_failing_tests": 1
    },
    {
        "name": "ContinuedFraction.evaluate#130",
        "is_bug": false,
        "src_path": "src/java/org/apache/commons/math/util/ContinuedFraction.java",
        "class_name": "org.apache.commons.math.util.ContinuedFraction",
        "signature": "org.apache.commons.math.util.ContinuedFraction.evaluate(double, double, int)",
        "snippet": "    public double evaluate(double x, double epsilon, int maxIterations)\n        throws MathException\n    {\n        double p0 = 1.0;\n        double p1 = getA(0, x);\n        double q0 = 0.0;\n        double q1 = 1.0;\n        double c = p1 / q1;\n        int n = 0;\n        double relativeError = Double.MAX_VALUE;\n        while (n < maxIterations && relativeError > epsilon) {\n            ++n;\n            double a = getA(n, x);\n            double b = getB(n, x);\n            double p2 = a * p1 + b * p0;\n            double q2 = a * q1 + b * q0;\n            if (Double.isInfinite(p2) || Double.isInfinite(q2)) {\n                // need to scale\n                if (a != 0.0) {\n                    p2 = p1 + (b / a * p0);\n                    q2 = q1 + (b / a * q0);\n                } else if (b != 0) {\n                    p2 = (a / b * p1) + p0;\n                    q2 = (a / b * q1) + q0;\n                } else {\n                    // can not scale an convergent is unbounded.\n                    throw new ConvergenceException(\n                        \"Continued fraction convergents diverged to +/- infinity for value {0}\",\n                        new Object[] { Double.valueOf(x) });\n                }\n            }\n            double r = p2 / q2;\n            relativeError = Math.abs(r / c - 1.0);\n                \n            // prepare for next iteration\n            c = p2 / q2;\n            p0 = p1;\n            p1 = p2;\n            q0 = q1;\n            q1 = q2;\n        }\n\n        if (n >= maxIterations) {\n            throw new MaxIterationsExceededException(maxIterations,\n                \"Continued fraction convergents failed to converge for value {0}\",\n                new Object[] { Double.valueOf(x) });\n        }\n\n        return c;\n    }\n",
        "begin_line": 130,
        "end_line": 179,
        "comment": "\n     * <p>\n     * Evaluates the continued fraction at the value x.\n     * </p>\n     * \n     * <p>\n     * The implementation of this method is based on equations 14-17 of:\n     * <ul>\n     * <li>\n     *   Eric W. Weisstein. \"Continued Fraction.\" From MathWorld--A Wolfram Web\n     *   Resource. <a target=\"_blank\"\n     *   href=\"http://mathworld.wolfram.com/ContinuedFraction.html\">\n     *   http://mathworld.wolfram.com/ContinuedFraction.html</a>\n     * </li>\n     * </ul>\n     * The recurrence relationship defined in those equations can result in\n     * very large intermediate results which can result in numerical overflow.\n     * As a means to combat these overflow conditions, the intermediate results\n     * are scaled whenever they threaten to become numerically unstable.</p>\n     *   \n     * @param x the evaluation point.\n     * @param epsilon maximum error allowed.\n     * @param maxIterations maximum number of convergents\n     * @return the value of the continued fraction evaluated at x. \n     * @throws MathException if the algorithm fails to converge.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2357
        },
        "num_failing_tests": 1
    },
    {
        "name": "Gamma.logGamma#87",
        "is_bug": false,
        "src_path": "src/java/org/apache/commons/math/special/Gamma.java",
        "class_name": "org.apache.commons.math.special.Gamma",
        "signature": "org.apache.commons.math.special.Gamma.logGamma(double)",
        "snippet": "    public static double logGamma(double x) {\n        double ret;\n\n        if (Double.isNaN(x) || (x <= 0.0)) {\n            ret = Double.NaN;\n        } else {\n            double g = 607.0 / 128.0;\n            \n            double sum = 0.0;\n            for (int i = lanczos.length - 1; i > 0; --i) {\n                sum = sum + (lanczos[i] / (x + i));\n            }\n            sum = sum + lanczos[0];\n\n            double tmp = x + g + .5;\n            ret = ((x + .5) * Math.log(tmp)) - tmp +\n                HALF_LOG_2_PI + Math.log(sum / x);\n        }\n\n        return ret;\n    }\n",
        "begin_line": 87,
        "end_line": 107,
        "comment": "\n     * Returns the natural logarithm of the gamma function &#915;(x).\n     *\n     * The implementation of this method is based on:\n     * <ul>\n     * <li><a href=\"http://mathworld.wolfram.com/GammaFunction.html\">\n     * Gamma Function</a>, equation (28).</li>\n     * <li><a href=\"http://mathworld.wolfram.com/LanczosApproximation.html\">\n     * Lanczos Approximation</a>, equations (1) through (5).</li>\n     * <li><a href=\"http://my.fit.edu/~gabdo/gamma.txt\">Paul Godfrey, A note on\n     * the computation of the convergent Lanczos complex Gamma approximation\n     * </a></li>\n     * </ul>\n     * \n     * @param x the value.\n     * @return log(&#915;(x))\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2357
        },
        "num_failing_tests": 1
    },
    {
        "name": "AbstractDistribution.AbstractDistribution#37",
        "is_bug": false,
        "src_path": "src/java/org/apache/commons/math/distribution/AbstractDistribution.java",
        "class_name": "org.apache.commons.math.distribution.AbstractDistribution",
        "signature": "org.apache.commons.math.distribution.AbstractDistribution.AbstractDistribution()",
        "snippet": "    protected AbstractDistribution() {\n        super();\n    }\n",
        "begin_line": 37,
        "end_line": 39,
        "comment": "\n     * Default constructor.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2132
        },
        "num_failing_tests": 1
    },
    {
        "name": "AbstractContinuousDistribution.AbstractContinuousDistribution#44",
        "is_bug": false,
        "src_path": "src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java",
        "class_name": "org.apache.commons.math.distribution.AbstractContinuousDistribution",
        "signature": "org.apache.commons.math.distribution.AbstractContinuousDistribution.AbstractContinuousDistribution()",
        "snippet": "    protected AbstractContinuousDistribution() {\n        super();\n    }\n",
        "begin_line": 44,
        "end_line": 46,
        "comment": "\n     * Default constructor.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2132
        },
        "num_failing_tests": 1
    }
]