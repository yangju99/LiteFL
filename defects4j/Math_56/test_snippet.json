[
    {
        "class_name": "org.apache.commons.math.util.MultidimensionalCounterTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/util/MultidimensionalCounterTest.java",
        "signature": "org.apache.commons.math.util.MultidimensionalCounterTest.testPreconditions()",
        "snippet": "    @Test\n    public void testPreconditions() {\n        MultidimensionalCounter c;\n\n        try {\n            c = new MultidimensionalCounter(0, 1);\n            Assert.fail(\"NotStrictlyPositiveException expected\");\n        } catch (NotStrictlyPositiveException e) {\n            // Expected.\n        }\n        try {\n            c = new MultidimensionalCounter(2, 0);\n            Assert.fail(\"NotStrictlyPositiveException expected\");\n        } catch (NotStrictlyPositiveException e) {\n            // Expected.\n        }\n        try {\n            c = new MultidimensionalCounter(-1, 1);\n            Assert.fail(\"NotStrictlyPositiveException expected\");\n        } catch (NotStrictlyPositiveException e) {\n            // Expected.\n        }\n\n        c = new MultidimensionalCounter(2, 3);\n        try {\n            c.getCount(1, 1, 1);\n            Assert.fail(\"DimensionMismatchException expected\");\n        } catch (DimensionMismatchException e) {\n            // Expected.\n        }\n        try {\n            c.getCount(3, 1);\n            Assert.fail(\"OutOfRangeException expected\");\n        } catch (OutOfRangeException e) {\n            // Expected.\n        }\n        try {\n            c.getCount(0, -1);\n            Assert.fail(\"OutOfRangeException expected\");\n        } catch (OutOfRangeException e) {\n            // Expected.\n        }\n        try {\n            c.getCounts(-1);\n            Assert.fail(\"OutOfRangeException expected\");\n        } catch (OutOfRangeException e) {\n            // Expected.\n        }\n        try {\n            c.getCounts(6);\n            Assert.fail(\"OutOfRangeException expected\");\n        } catch (OutOfRangeException e) {\n            // Expected.\n        }\n    }\n",
        "begin_line": 30,
        "end_line": 84,
        "comment": "",
        "child_ranges": [
            "(line 32,col 9)-(line 32,col 34)",
            "(line 34,col 9)-(line 39,col 9)",
            "(line 40,col 9)-(line 45,col 9)",
            "(line 46,col 9)-(line 51,col 9)",
            "(line 53,col 9)-(line 53,col 46)",
            "(line 54,col 9)-(line 59,col 9)",
            "(line 60,col 9)-(line 65,col 9)",
            "(line 66,col 9)-(line 71,col 9)",
            "(line 72,col 9)-(line 77,col 9)",
            "(line 78,col 9)-(line 83,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.util.MultidimensionalCounterTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/util/MultidimensionalCounterTest.java",
        "signature": "org.apache.commons.math.util.MultidimensionalCounterTest.testIteratorPreconditions()",
        "snippet": "    @Test\n    public void testIteratorPreconditions() {\n        MultidimensionalCounter.Iterator iter = (new MultidimensionalCounter(2, 3)).iterator();\n        try {\n            iter.getCount(-1);\n            Assert.fail(\"IndexOutOfBoundsException expected\");\n        } catch (IndexOutOfBoundsException e) {\n            // Expected.\n        }\n        try {\n            iter.getCount(2);\n            Assert.fail(\"IndexOutOfBoundsException expected\");\n        } catch (IndexOutOfBoundsException e) {\n            // Expected.\n        }\n    }\n",
        "begin_line": 86,
        "end_line": 101,
        "comment": "",
        "child_ranges": [
            "(line 88,col 9)-(line 88,col 95)",
            "(line 89,col 9)-(line 94,col 9)",
            "(line 95,col 9)-(line 100,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.util.MultidimensionalCounterTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/util/MultidimensionalCounterTest.java",
        "signature": "org.apache.commons.math.util.MultidimensionalCounterTest.testMulti2UniConversion()",
        "snippet": "    @Test\n    public void testMulti2UniConversion() {\n        final MultidimensionalCounter c = new MultidimensionalCounter(2, 4, 5);\n        Assert.assertEquals(c.getCount(1, 2, 3), 33);\n    }\n",
        "begin_line": 103,
        "end_line": 107,
        "comment": "",
        "child_ranges": [
            "(line 105,col 9)-(line 105,col 79)",
            "(line 106,col 9)-(line 106,col 53)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.util.MultidimensionalCounterTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/util/MultidimensionalCounterTest.java",
        "signature": "org.apache.commons.math.util.MultidimensionalCounterTest.testAccessors()",
        "snippet": "    @Test\n    public void testAccessors() {\n        final int[] originalSize = new int[] {2, 6, 5};\n        final MultidimensionalCounter c = new MultidimensionalCounter(originalSize);\n        final int nDim = c.getDimension();\n        Assert.assertEquals(nDim, originalSize.length);\n\n        final int[] size = c.getSizes();\n        for (int i = 0; i < nDim; i++) {\n            Assert.assertEquals(originalSize[i], size[i]);\n        }\n    }\n",
        "begin_line": 109,
        "end_line": 120,
        "comment": "",
        "child_ranges": [
            "(line 111,col 9)-(line 111,col 55)",
            "(line 112,col 9)-(line 112,col 84)",
            "(line 113,col 9)-(line 113,col 42)",
            "(line 114,col 9)-(line 114,col 55)",
            "(line 116,col 9)-(line 116,col 40)",
            "(line 117,col 9)-(line 119,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.util.MultidimensionalCounterTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/util/MultidimensionalCounterTest.java",
        "signature": "org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency()",
        "snippet": "    @Test\n    public void testIterationConsistency() {\n        final MultidimensionalCounter c = new MultidimensionalCounter(2, 3, 4);\n        final int[][] expected = new int[][] {\n            { 0, 0, 0 },\n            { 0, 0, 1 },\n            { 0, 0, 2 },\n            { 0, 0, 3 },\n            { 0, 1, 0 },\n            { 0, 1, 1 },\n            { 0, 1, 2 },\n            { 0, 1, 3 },\n            { 0, 2, 0 },\n            { 0, 2, 1 },\n            { 0, 2, 2 },\n            { 0, 2, 3 },\n            { 1, 0, 0 },\n            { 1, 0, 1 },\n            { 1, 0, 2 },\n            { 1, 0, 3 },\n            { 1, 1, 0 },\n            { 1, 1, 1 },\n            { 1, 1, 2 },\n            { 1, 1, 3 },\n            { 1, 2, 0 },\n            { 1, 2, 1 },\n            { 1, 2, 2 },\n            { 1, 2, 3 }\n        };\n\n        final int totalSize = c.getSize();\n        final int nDim = c.getDimension();\n        final MultidimensionalCounter.Iterator iter = c.iterator();\n        for (int i = 0; i < totalSize; i++) {\n            if (!iter.hasNext()) {\n                Assert.fail(\"Too short\");\n            }\n            final int uniDimIndex = iter.next();\n            Assert.assertEquals(\"Wrong iteration at \" + i, i, uniDimIndex);\n\n            for (int dimIndex = 0; dimIndex < nDim; dimIndex++) {\n                Assert.assertEquals(\"Wrong multidimensional index for [\" + i + \"][\" + dimIndex + \"]\",\n                                    expected[i][dimIndex], iter.getCount(dimIndex));\n            }\n\n            Assert.assertEquals(\"Wrong unidimensional index for [\" + i + \"]\",\n                                c.getCount(expected[i]), uniDimIndex);\n\n            final int[] indices = c.getCounts(uniDimIndex);\n            for (int dimIndex = 0; dimIndex < nDim; dimIndex++) {\n                Assert.assertEquals(\"Wrong multidimensional index for [\" + i + \"][\" + dimIndex + \"]\",\n                                    expected[i][dimIndex], indices[dimIndex]);\n            }\n        }\n\n        if (iter.hasNext()) {\n            Assert.fail(\"Too long\");\n        }\n    }\n",
        "begin_line": 122,
        "end_line": 180,
        "comment": "",
        "child_ranges": [
            "(line 124,col 9)-(line 124,col 79)",
            "(line 125,col 9)-(line 150,col 10)",
            "(line 152,col 9)-(line 152,col 42)",
            "(line 153,col 9)-(line 153,col 42)",
            "(line 154,col 9)-(line 154,col 67)",
            "(line 155,col 9)-(line 175,col 9)",
            "(line 177,col 9)-(line 179,col 9)"
        ]
    }
]