[
    {
        "class_name": "org.apache.commons.math.distribution.NormalDistributionTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/distribution/NormalDistributionTest.java",
        "signature": "org.apache.commons.math.distribution.NormalDistributionTest.NormalDistributionTest(java.lang.String)",
        "snippet": "    public NormalDistributionTest(String arg0) {\n        super(arg0);\n    }\n",
        "begin_line": 35,
        "end_line": 37,
        "comment": "\n     * Constructor for NormalDistributionTest.\n     * @param arg0\n     ",
        "child_ranges": [
            "(line 36,col 9)-(line 36,col 20)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.distribution.NormalDistributionTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/distribution/NormalDistributionTest.java",
        "signature": "org.apache.commons.math.distribution.NormalDistributionTest.makeDistribution()",
        "snippet": "    @Override\n    public ContinuousDistribution makeDistribution() {\n        return new NormalDistributionImpl(2.1, 1.4);\n    }   \n",
        "begin_line": 42,
        "end_line": 45,
        "comment": " Creates the default continuous distribution instance to use in tests. ",
        "child_ranges": [
            "(line 44,col 9)-(line 44,col 52)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.distribution.NormalDistributionTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/distribution/NormalDistributionTest.java",
        "signature": "org.apache.commons.math.distribution.NormalDistributionTest.makeCumulativeTestPoints()",
        "snippet": "    @Override\n    public double[] makeCumulativeTestPoints() {\n        // quantiles computed using R \n        return new double[] {-2.226325d, -1.156887d, -0.6439496d, -0.2027951d, 0.3058278d, \n                6.426325d, 5.356887d, 4.84395d, 4.402795d, 3.894172d};\n    }\n",
        "begin_line": 48,
        "end_line": 53,
        "comment": " Creates the default cumulative probability distribution test input values ",
        "child_ranges": [
            "(line 51,col 9)-(line 52,col 70)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.distribution.NormalDistributionTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/distribution/NormalDistributionTest.java",
        "signature": "org.apache.commons.math.distribution.NormalDistributionTest.makeCumulativeTestValues()",
        "snippet": "    @Override\n    public double[] makeCumulativeTestValues() {\n        return new double[] {0.001d, 0.01d, 0.025d, 0.05d, 0.1d, 0.999d,\n                0.990d, 0.975d, 0.950d, 0.900d}; \n    }\n",
        "begin_line": 56,
        "end_line": 60,
        "comment": " Creates the default cumulative probability density test expected values ",
        "child_ranges": [
            "(line 58,col 9)-(line 59,col 48)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.distribution.NormalDistributionTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/distribution/NormalDistributionTest.java",
        "signature": "org.apache.commons.math.distribution.NormalDistributionTest.setUp()",
        "snippet": "    @Override\n    protected void setUp() throws Exception {\n        super.setUp();\n        setTolerance(1E-6);\n    }\n",
        "begin_line": 63,
        "end_line": 67,
        "comment": " --------------------- Override tolerance  --------------",
        "child_ranges": [
            "(line 65,col 9)-(line 65,col 22)",
            "(line 66,col 9)-(line 66,col 27)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.distribution.NormalDistributionTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/distribution/NormalDistributionTest.java",
        "signature": "org.apache.commons.math.distribution.NormalDistributionTest.verifyQuantiles()",
        "snippet": "    private void verifyQuantiles() throws Exception {\n        NormalDistribution distribution = (NormalDistribution) getDistribution();\n        double mu = distribution.getMean();\n        double sigma = distribution.getStandardDeviation();\n        setCumulativeTestPoints( new double[] {mu - 2 *sigma, mu - sigma, \n                mu, mu + sigma, mu +2 * sigma,  mu +3 * sigma, mu + 4 * sigma,\n                mu + 5 * sigma});\n        // Quantiles computed using R (same as Mathematica)\n        setCumulativeTestValues(new double[] {0.02275013, 0.1586553, 0.5, 0.8413447, \n                0.9772499, 0.9986501, 0.9999683,  0.9999997});\n        verifyCumulativeProbabilities();       \n    }\n",
        "begin_line": 71,
        "end_line": 82,
        "comment": "",
        "child_ranges": [
            "(line 72,col 9)-(line 72,col 81)",
            "(line 73,col 9)-(line 73,col 43)",
            "(line 74,col 9)-(line 74,col 59)",
            "(line 75,col 9)-(line 77,col 33)",
            "(line 79,col 9)-(line 80,col 62)",
            "(line 81,col 9)-(line 81,col 40)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.distribution.NormalDistributionTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/distribution/NormalDistributionTest.java",
        "signature": "org.apache.commons.math.distribution.NormalDistributionTest.testQuantiles()",
        "snippet": "    public void testQuantiles() throws Exception {\n        verifyQuantiles();\n        setDistribution(new NormalDistributionImpl(0, 1));\n        verifyQuantiles();\n        setDistribution(new NormalDistributionImpl(0, 0.1));\n        verifyQuantiles();\n    }\n",
        "begin_line": 84,
        "end_line": 90,
        "comment": "",
        "child_ranges": [
            "(line 85,col 9)-(line 85,col 26)",
            "(line 86,col 9)-(line 86,col 58)",
            "(line 87,col 9)-(line 87,col 26)",
            "(line 88,col 9)-(line 88,col 60)",
            "(line 89,col 9)-(line 89,col 26)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.distribution.NormalDistributionTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/distribution/NormalDistributionTest.java",
        "signature": "org.apache.commons.math.distribution.NormalDistributionTest.testInverseCumulativeProbabilityExtremes()",
        "snippet": "    public void testInverseCumulativeProbabilityExtremes() throws Exception {\n        setInverseCumulativeTestPoints(new double[] {0, 1});\n        setInverseCumulativeTestValues(\n                new double[] {Double.NEGATIVE_INFINITY, Double.POSITIVE_INFINITY});\n        verifyInverseCumulativeProbabilities();\n    }\n",
        "begin_line": 92,
        "end_line": 97,
        "comment": "",
        "child_ranges": [
            "(line 93,col 9)-(line 93,col 60)",
            "(line 94,col 9)-(line 95,col 83)",
            "(line 96,col 9)-(line 96,col 47)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.distribution.NormalDistributionTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/distribution/NormalDistributionTest.java",
        "signature": "org.apache.commons.math.distribution.NormalDistributionTest.testGetMean()",
        "snippet": "    public void testGetMean() {\n        NormalDistribution distribution = (NormalDistribution) getDistribution();\n        assertEquals(2.1, distribution.getMean(), 0);\n    }\n",
        "begin_line": 99,
        "end_line": 102,
        "comment": "",
        "child_ranges": [
            "(line 100,col 9)-(line 100,col 81)",
            "(line 101,col 9)-(line 101,col 53)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.distribution.NormalDistributionTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/distribution/NormalDistributionTest.java",
        "signature": "org.apache.commons.math.distribution.NormalDistributionTest.testSetMean()",
        "snippet": "    public void testSetMean() throws Exception {\n        double mu = Math.random();\n        NormalDistribution distribution = (NormalDistribution) getDistribution();\n        distribution.setMean(mu);\n        verifyQuantiles();\n    }\n",
        "begin_line": 104,
        "end_line": 109,
        "comment": "",
        "child_ranges": [
            "(line 105,col 9)-(line 105,col 34)",
            "(line 106,col 9)-(line 106,col 81)",
            "(line 107,col 9)-(line 107,col 33)",
            "(line 108,col 9)-(line 108,col 26)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.distribution.NormalDistributionTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/distribution/NormalDistributionTest.java",
        "signature": "org.apache.commons.math.distribution.NormalDistributionTest.testGetStandardDeviation()",
        "snippet": "    public void testGetStandardDeviation() {\n        NormalDistribution distribution = (NormalDistribution) getDistribution();\n        assertEquals(1.4, distribution.getStandardDeviation(), 0);  \n    }\n",
        "begin_line": 111,
        "end_line": 114,
        "comment": "",
        "child_ranges": [
            "(line 112,col 9)-(line 112,col 81)",
            "(line 113,col 9)-(line 113,col 66)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.distribution.NormalDistributionTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/distribution/NormalDistributionTest.java",
        "signature": "org.apache.commons.math.distribution.NormalDistributionTest.testSetStandardDeviation()",
        "snippet": "    public void testSetStandardDeviation() throws Exception {\n        double sigma = 0.1d + Math.random();\n        NormalDistribution distribution = (NormalDistribution) getDistribution();\n        distribution.setStandardDeviation(sigma);\n        assertEquals(sigma, distribution.getStandardDeviation(), 0);\n        verifyQuantiles();\n        try {\n            distribution.setStandardDeviation(0);\n            fail(\"Expecting IllegalArgumentException for sd = 0\");\n        } catch (IllegalArgumentException ex) {\n            // Expected\n        }\n    }\n",
        "begin_line": 116,
        "end_line": 128,
        "comment": "",
        "child_ranges": [
            "(line 117,col 9)-(line 117,col 44)",
            "(line 118,col 9)-(line 118,col 81)",
            "(line 119,col 9)-(line 119,col 49)",
            "(line 120,col 9)-(line 120,col 68)",
            "(line 121,col 9)-(line 121,col 26)",
            "(line 122,col 9)-(line 127,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.distribution.NormalDistributionTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/distribution/NormalDistributionTest.java",
        "signature": "org.apache.commons.math.distribution.NormalDistributionTest.testDensity()",
        "snippet": "    public void testDensity() {\n        double [] x = new double[]{-2, -1, 0, 1, 2};\n        // R 2.5: print(dnorm(c(-2,-1,0,1,2)), digits=10)\n        checkDensity(0, 1, x, new double[]{0.05399096651, 0.24197072452, 0.39894228040, 0.24197072452, 0.05399096651});\n        // R 2.5: print(dnorm(c(-2,-1,0,1,2), mean=1.1), digits=10) \n        checkDensity(1.1, 1, x, new double[]{0.003266819056,0.043983595980,0.217852177033,0.396952547477,0.266085249899});\n    }\n",
        "begin_line": 130,
        "end_line": 136,
        "comment": "",
        "child_ranges": [
            "(line 131,col 9)-(line 131,col 52)",
            "(line 133,col 9)-(line 133,col 119)",
            "(line 135,col 9)-(line 135,col 122)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.distribution.NormalDistributionTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/distribution/NormalDistributionTest.java",
        "signature": "org.apache.commons.math.distribution.NormalDistributionTest.checkDensity(double, double, double[], double[])",
        "snippet": "    private void checkDensity(double mean, double sd, double[] x, double[] expected) {\n        NormalDistribution d = new NormalDistributionImpl(mean, sd);\n        for (int i = 0; i < x.length; i++) {\n            assertEquals(expected[i], d.density(x[i]), 1e-9);\n        }\n    }\n",
        "begin_line": 138,
        "end_line": 143,
        "comment": "",
        "child_ranges": [
            "(line 139,col 9)-(line 139,col 68)",
            "(line 140,col 9)-(line 142,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.distribution.NormalDistributionTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/distribution/NormalDistributionTest.java",
        "signature": "org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues()",
        "snippet": "    public void testExtremeValues() throws Exception {\n        NormalDistribution distribution = (NormalDistribution) getDistribution();\n        distribution.setMean(0);\n        distribution.setStandardDeviation(1);\n        for (int i = 0; i < 100; i+=5) { // make sure no convergence exception\n            double lowerTail = distribution.cumulativeProbability(-i);\n            double upperTail = distribution.cumulativeProbability(i);\n            if (i < 10) { // make sure not top-coded\n                assertTrue(lowerTail > 0.0d);\n                assertTrue(upperTail < 1.0d);\n            }\n            else { // make sure top coding not reversed\n                assertTrue(lowerTail < 0.00001);\n                assertTrue(upperTail > 0.99999);\n            }\n        } \n   }\n",
        "begin_line": 149,
        "end_line": 165,
        "comment": "\n     * Check to make sure top-coding of extreme values works correctly.\n     * Verifies fix for JIRA MATH-167\n     ",
        "child_ranges": [
            "(line 150,col 9)-(line 150,col 81)",
            "(line 151,col 9)-(line 151,col 32)",
            "(line 152,col 9)-(line 152,col 45)",
            "(line 153,col 9)-(line 164,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.distribution.NormalDistributionTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/distribution/NormalDistributionTest.java",
        "signature": "org.apache.commons.math.distribution.NormalDistributionTest.testMath280()",
        "snippet": "    public void testMath280() throws MathException {\n        NormalDistribution normal = new NormalDistributionImpl(0,1);\n        double result = normal.inverseCumulativeProbability(0.9772498680518209);\n        assertEquals(2.0, result, 1.0e-12);\n    }\n",
        "begin_line": 167,
        "end_line": 171,
        "comment": "",
        "child_ranges": [
            "(line 168,col 9)-(line 168,col 68)",
            "(line 169,col 9)-(line 169,col 80)",
            "(line 170,col 9)-(line 170,col 43)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest",
        "child_classes": [
            "org.apache.commons.math.distribution.NormalDistributionTest"
        ],
        "src_path": "src/test/org/apache/commons/math/distribution/ContinuousDistributionAbstractTest.java",
        "signature": "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.ContinuousDistributionAbstractTest(java.lang.String)",
        "snippet": "    public ContinuousDistributionAbstractTest(String name) {\n        super(name);\n    }\n",
        "begin_line": 83,
        "end_line": 85,
        "comment": "\n     * Constructor for ContinuousDistributionAbstractTest.\n     * @param name\n     ",
        "child_ranges": [
            "(line 84,col 9)-(line 84,col 20)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest",
        "child_classes": [
            "org.apache.commons.math.distribution.NormalDistributionTest"
        ],
        "src_path": "src/test/org/apache/commons/math/distribution/ContinuousDistributionAbstractTest.java",
        "signature": "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.makeDistribution()",
        "snippet": "    public abstract ContinuousDistribution makeDistribution();\n",
        "begin_line": 90,
        "end_line": 90,
        "comment": " Creates the default continuous distribution instance to use in tests. ",
        "child_ranges": []
    },
    {
        "class_name": "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest",
        "child_classes": [
            "org.apache.commons.math.distribution.NormalDistributionTest"
        ],
        "src_path": "src/test/org/apache/commons/math/distribution/ContinuousDistributionAbstractTest.java",
        "signature": "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.makeCumulativeTestPoints()",
        "snippet": "    public abstract double[] makeCumulativeTestPoints();\n",
        "begin_line": 93,
        "end_line": 93,
        "comment": " Creates the default cumulative probability density test input values ",
        "child_ranges": []
    },
    {
        "class_name": "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest",
        "child_classes": [
            "org.apache.commons.math.distribution.NormalDistributionTest"
        ],
        "src_path": "src/test/org/apache/commons/math/distribution/ContinuousDistributionAbstractTest.java",
        "signature": "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.makeCumulativeTestValues()",
        "snippet": "    public abstract double[] makeCumulativeTestValues();\n",
        "begin_line": 96,
        "end_line": 96,
        "comment": " Creates the default cumulative probability density test expected values ",
        "child_ranges": []
    },
    {
        "class_name": "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest",
        "child_classes": [
            "org.apache.commons.math.distribution.NormalDistributionTest"
        ],
        "src_path": "src/test/org/apache/commons/math/distribution/ContinuousDistributionAbstractTest.java",
        "signature": "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.makeInverseCumulativeTestPoints()",
        "snippet": "    public double[] makeInverseCumulativeTestPoints() {\n        return makeCumulativeTestValues();\n    }\n",
        "begin_line": 101,
        "end_line": 103,
        "comment": " Creates the default inverse cumulative probability test input values ",
        "child_ranges": [
            "(line 102,col 9)-(line 102,col 42)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest",
        "child_classes": [
            "org.apache.commons.math.distribution.NormalDistributionTest"
        ],
        "src_path": "src/test/org/apache/commons/math/distribution/ContinuousDistributionAbstractTest.java",
        "signature": "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.makeInverseCumulativeTestValues()",
        "snippet": "    public double[] makeInverseCumulativeTestValues() {\n        return makeCumulativeTestPoints();\n    }\n",
        "begin_line": 106,
        "end_line": 108,
        "comment": " Creates the default inverse cumulative probability density test expected values ",
        "child_ranges": [
            "(line 107,col 9)-(line 107,col 42)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest",
        "child_classes": [
            "org.apache.commons.math.distribution.NormalDistributionTest"
        ],
        "src_path": "src/test/org/apache/commons/math/distribution/ContinuousDistributionAbstractTest.java",
        "signature": "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.setUp()",
        "snippet": "    @Override\n    protected void setUp() throws Exception {\n        super.setUp();\n        distribution = makeDistribution();\n        cumulativeTestPoints = makeCumulativeTestPoints();\n        cumulativeTestValues = makeCumulativeTestValues();\n        inverseCumulativeTestPoints = makeInverseCumulativeTestPoints();\n        inverseCumulativeTestValues = makeInverseCumulativeTestValues();   \n    }\n",
        "begin_line": 115,
        "end_line": 123,
        "comment": "\n     * Setup sets all test instance data to default values \n     ",
        "child_ranges": [
            "(line 117,col 9)-(line 117,col 22)",
            "(line 118,col 9)-(line 118,col 42)",
            "(line 119,col 9)-(line 119,col 58)",
            "(line 120,col 9)-(line 120,col 58)",
            "(line 121,col 9)-(line 121,col 72)",
            "(line 122,col 9)-(line 122,col 72)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest",
        "child_classes": [
            "org.apache.commons.math.distribution.NormalDistributionTest"
        ],
        "src_path": "src/test/org/apache/commons/math/distribution/ContinuousDistributionAbstractTest.java",
        "signature": "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.tearDown()",
        "snippet": "    @Override\n    protected void tearDown() throws Exception {      \n        super.tearDown();\n        distribution = null;\n        cumulativeTestPoints = null;\n        cumulativeTestValues = null;\n        inverseCumulativeTestPoints = null;\n        inverseCumulativeTestValues = null;   \n    }\n",
        "begin_line": 128,
        "end_line": 136,
        "comment": "\n     * Cleans up test instance data\n     ",
        "child_ranges": [
            "(line 130,col 9)-(line 130,col 25)",
            "(line 131,col 9)-(line 131,col 28)",
            "(line 132,col 9)-(line 132,col 36)",
            "(line 133,col 9)-(line 133,col 36)",
            "(line 134,col 9)-(line 134,col 43)",
            "(line 135,col 9)-(line 135,col 43)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest",
        "child_classes": [
            "org.apache.commons.math.distribution.NormalDistributionTest"
        ],
        "src_path": "src/test/org/apache/commons/math/distribution/ContinuousDistributionAbstractTest.java",
        "signature": "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.verifyCumulativeProbabilities()",
        "snippet": "    protected void verifyCumulativeProbabilities() throws Exception {\n        for (int i = 0; i < cumulativeTestPoints.length; i++) {\n            TestUtils.assertEquals(\"Incorrect cumulative probability value returned for \" \n                + cumulativeTestPoints[i], cumulativeTestValues[i], \n                distribution.cumulativeProbability(cumulativeTestPoints[i]), \n                getTolerance());\n        }           \n    }\n",
        "begin_line": 144,
        "end_line": 151,
        "comment": "\n     * Verifies that cumulative probability density calculations match expected values\n     * using current test instance data\n     ",
        "child_ranges": [
            "(line 145,col 9)-(line 150,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest",
        "child_classes": [
            "org.apache.commons.math.distribution.NormalDistributionTest"
        ],
        "src_path": "src/test/org/apache/commons/math/distribution/ContinuousDistributionAbstractTest.java",
        "signature": "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.verifyInverseCumulativeProbabilities()",
        "snippet": "    protected void verifyInverseCumulativeProbabilities() throws Exception {\n        for (int i = 0; i < inverseCumulativeTestPoints.length; i++) {\n            TestUtils.assertEquals(\"Incorrect inverse cumulative probability value returned for \" \n                + inverseCumulativeTestPoints[i], inverseCumulativeTestValues[i], \n                 distribution.inverseCumulativeProbability(inverseCumulativeTestPoints[i]), \n                 getTolerance());\n        }           \n    }\n",
        "begin_line": 157,
        "end_line": 164,
        "comment": "\n     * Verifies that inverse cumulative probability density calculations match expected values\n     * using current test instance data\n     ",
        "child_ranges": [
            "(line 158,col 9)-(line 163,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest",
        "child_classes": [
            "org.apache.commons.math.distribution.NormalDistributionTest"
        ],
        "src_path": "src/test/org/apache/commons/math/distribution/ContinuousDistributionAbstractTest.java",
        "signature": "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.testCumulativeProbabilities()",
        "snippet": "    public void testCumulativeProbabilities() throws Exception {\n        verifyCumulativeProbabilities();      \n    }\n",
        "begin_line": 172,
        "end_line": 174,
        "comment": "\n     * Verifies that cumulative probability density calculations match expected values\n     * using default test instance data\n     ",
        "child_ranges": [
            "(line 173,col 9)-(line 173,col 40)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest",
        "child_classes": [
            "org.apache.commons.math.distribution.NormalDistributionTest"
        ],
        "src_path": "src/test/org/apache/commons/math/distribution/ContinuousDistributionAbstractTest.java",
        "signature": "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.testInverseCumulativeProbabilities()",
        "snippet": "    public void testInverseCumulativeProbabilities() throws Exception {\n        verifyInverseCumulativeProbabilities();       \n    }\n",
        "begin_line": 180,
        "end_line": 182,
        "comment": "\n     * Verifies that inverse cumulative probability density calculations match expected values\n     * using default test instance data\n     ",
        "child_ranges": [
            "(line 181,col 9)-(line 181,col 47)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest",
        "child_classes": [
            "org.apache.commons.math.distribution.NormalDistributionTest"
        ],
        "src_path": "src/test/org/apache/commons/math/distribution/ContinuousDistributionAbstractTest.java",
        "signature": "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.testConsistency()",
        "snippet": "    public void testConsistency() throws Exception {\n        for (int i=1; i < cumulativeTestPoints.length; i++) {\n            \n            // check that cdf(x, x) = 0\n            TestUtils.assertEquals(0d, \n               distribution.cumulativeProbability\n                 (cumulativeTestPoints[i], cumulativeTestPoints[i]), tolerance);\n            \n            // check that P(a < X < b) = P(X < b) - P(X < a)\n            double upper = Math.max(cumulativeTestPoints[i], cumulativeTestPoints[i -1]);\n            double lower = Math.min(cumulativeTestPoints[i], cumulativeTestPoints[i -1]);\n            double diff = distribution.cumulativeProbability(upper) - \n                distribution.cumulativeProbability(lower);\n            double direct = distribution.cumulativeProbability(lower, upper);\n            TestUtils.assertEquals(\"Inconsistent cumulative probabilities for (\" \n                    + lower + \",\" + upper + \")\", diff, direct, tolerance);\n        }\n    }\n",
        "begin_line": 187,
        "end_line": 204,
        "comment": "\n     * Verifies that probability computations are consistent\n     ",
        "child_ranges": [
            "(line 188,col 9)-(line 203,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest",
        "child_classes": [
            "org.apache.commons.math.distribution.NormalDistributionTest"
        ],
        "src_path": "src/test/org/apache/commons/math/distribution/ContinuousDistributionAbstractTest.java",
        "signature": "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.testIllegalArguments()",
        "snippet": "    public void testIllegalArguments() throws Exception {\n        try {\n            distribution.cumulativeProbability(1, 0);\n            fail(\"Expecting IllegalArgumentException for bad cumulativeProbability interval\");\n        } catch (IllegalArgumentException ex) {\n            // expected\n        }\n        try {\n            distribution.inverseCumulativeProbability(-1);\n            fail(\"Expecting IllegalArgumentException for p = -1\");\n        } catch (IllegalArgumentException ex) {\n            // expected\n        }\n        try {\n            distribution.inverseCumulativeProbability(2);\n            fail(\"Expecting IllegalArgumentException for p = 2\");\n        } catch (IllegalArgumentException ex) {\n            // expected\n        }       \n    }\n",
        "begin_line": 209,
        "end_line": 228,
        "comment": "\n     * Verifies that illegal arguments are correctly handled\n     ",
        "child_ranges": [
            "(line 210,col 9)-(line 215,col 9)",
            "(line 216,col 9)-(line 221,col 9)",
            "(line 222,col 9)-(line 227,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest",
        "child_classes": [
            "org.apache.commons.math.distribution.NormalDistributionTest"
        ],
        "src_path": "src/test/org/apache/commons/math/distribution/ContinuousDistributionAbstractTest.java",
        "signature": "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.getCumulativeTestPoints()",
        "snippet": "    protected double[] getCumulativeTestPoints() {\n        return cumulativeTestPoints;\n    }\n",
        "begin_line": 234,
        "end_line": 236,
        "comment": "\n     * @return Returns the cumulativeTestPoints.\n     ",
        "child_ranges": [
            "(line 235,col 9)-(line 235,col 36)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest",
        "child_classes": [
            "org.apache.commons.math.distribution.NormalDistributionTest"
        ],
        "src_path": "src/test/org/apache/commons/math/distribution/ContinuousDistributionAbstractTest.java",
        "signature": "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.setCumulativeTestPoints(double[])",
        "snippet": "    protected void setCumulativeTestPoints(double[] cumulativeTestPoints) {\n        this.cumulativeTestPoints = cumulativeTestPoints;\n    }\n",
        "begin_line": 241,
        "end_line": 243,
        "comment": "\n     * @param cumulativeTestPoints The cumulativeTestPoints to set.\n     ",
        "child_ranges": [
            "(line 242,col 9)-(line 242,col 57)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest",
        "child_classes": [
            "org.apache.commons.math.distribution.NormalDistributionTest"
        ],
        "src_path": "src/test/org/apache/commons/math/distribution/ContinuousDistributionAbstractTest.java",
        "signature": "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.getCumulativeTestValues()",
        "snippet": "    protected double[] getCumulativeTestValues() {\n        return cumulativeTestValues;\n    }\n",
        "begin_line": 248,
        "end_line": 250,
        "comment": "\n     * @return Returns the cumulativeTestValues.\n     ",
        "child_ranges": [
            "(line 249,col 9)-(line 249,col 36)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest",
        "child_classes": [
            "org.apache.commons.math.distribution.NormalDistributionTest"
        ],
        "src_path": "src/test/org/apache/commons/math/distribution/ContinuousDistributionAbstractTest.java",
        "signature": "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.setCumulativeTestValues(double[])",
        "snippet": "    protected void setCumulativeTestValues(double[] cumulativeTestValues) {\n        this.cumulativeTestValues = cumulativeTestValues;\n    }\n",
        "begin_line": 255,
        "end_line": 257,
        "comment": "\n     * @param cumulativeTestValues The cumulativeTestValues to set.\n     ",
        "child_ranges": [
            "(line 256,col 9)-(line 256,col 57)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest",
        "child_classes": [
            "org.apache.commons.math.distribution.NormalDistributionTest"
        ],
        "src_path": "src/test/org/apache/commons/math/distribution/ContinuousDistributionAbstractTest.java",
        "signature": "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.getDistribution()",
        "snippet": "    protected ContinuousDistribution getDistribution() {\n        return distribution;\n    }\n",
        "begin_line": 262,
        "end_line": 264,
        "comment": "\n     * @return Returns the distribution.\n     ",
        "child_ranges": [
            "(line 263,col 9)-(line 263,col 28)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest",
        "child_classes": [
            "org.apache.commons.math.distribution.NormalDistributionTest"
        ],
        "src_path": "src/test/org/apache/commons/math/distribution/ContinuousDistributionAbstractTest.java",
        "signature": "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.setDistribution(org.apache.commons.math.distribution.ContinuousDistribution)",
        "snippet": "    protected void setDistribution(ContinuousDistribution distribution) {\n        this.distribution = distribution;\n    }\n",
        "begin_line": 269,
        "end_line": 271,
        "comment": "\n     * @param distribution The distribution to set.\n     ",
        "child_ranges": [
            "(line 270,col 9)-(line 270,col 41)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest",
        "child_classes": [
            "org.apache.commons.math.distribution.NormalDistributionTest"
        ],
        "src_path": "src/test/org/apache/commons/math/distribution/ContinuousDistributionAbstractTest.java",
        "signature": "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.getInverseCumulativeTestPoints()",
        "snippet": "    protected double[] getInverseCumulativeTestPoints() {\n        return inverseCumulativeTestPoints;\n    }\n",
        "begin_line": 276,
        "end_line": 278,
        "comment": "\n     * @return Returns the inverseCumulativeTestPoints.\n     ",
        "child_ranges": [
            "(line 277,col 9)-(line 277,col 43)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest",
        "child_classes": [
            "org.apache.commons.math.distribution.NormalDistributionTest"
        ],
        "src_path": "src/test/org/apache/commons/math/distribution/ContinuousDistributionAbstractTest.java",
        "signature": "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.setInverseCumulativeTestPoints(double[])",
        "snippet": "    protected void setInverseCumulativeTestPoints(double[] inverseCumulativeTestPoints) {\n        this.inverseCumulativeTestPoints = inverseCumulativeTestPoints;\n    }\n",
        "begin_line": 283,
        "end_line": 285,
        "comment": "\n     * @param inverseCumulativeTestPoints The inverseCumulativeTestPoints to set.\n     ",
        "child_ranges": [
            "(line 284,col 9)-(line 284,col 71)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest",
        "child_classes": [
            "org.apache.commons.math.distribution.NormalDistributionTest"
        ],
        "src_path": "src/test/org/apache/commons/math/distribution/ContinuousDistributionAbstractTest.java",
        "signature": "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.getInverseCumulativeTestValues()",
        "snippet": "    protected double[] getInverseCumulativeTestValues() {\n        return inverseCumulativeTestValues;\n    }\n",
        "begin_line": 290,
        "end_line": 292,
        "comment": "\n     * @return Returns the inverseCumulativeTestValues.\n     ",
        "child_ranges": [
            "(line 291,col 9)-(line 291,col 43)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest",
        "child_classes": [
            "org.apache.commons.math.distribution.NormalDistributionTest"
        ],
        "src_path": "src/test/org/apache/commons/math/distribution/ContinuousDistributionAbstractTest.java",
        "signature": "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.setInverseCumulativeTestValues(double[])",
        "snippet": "    protected void setInverseCumulativeTestValues(double[] inverseCumulativeTestValues) {\n        this.inverseCumulativeTestValues = inverseCumulativeTestValues;\n    }\n",
        "begin_line": 297,
        "end_line": 299,
        "comment": "\n     * @param inverseCumulativeTestValues The inverseCumulativeTestValues to set.\n     ",
        "child_ranges": [
            "(line 298,col 9)-(line 298,col 71)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest",
        "child_classes": [
            "org.apache.commons.math.distribution.NormalDistributionTest"
        ],
        "src_path": "src/test/org/apache/commons/math/distribution/ContinuousDistributionAbstractTest.java",
        "signature": "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.getTolerance()",
        "snippet": "    protected double getTolerance() {\n        return tolerance;\n    }\n",
        "begin_line": 304,
        "end_line": 306,
        "comment": "\n     * @return Returns the tolerance.\n     ",
        "child_ranges": [
            "(line 305,col 9)-(line 305,col 25)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest",
        "child_classes": [
            "org.apache.commons.math.distribution.NormalDistributionTest"
        ],
        "src_path": "src/test/org/apache/commons/math/distribution/ContinuousDistributionAbstractTest.java",
        "signature": "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.setTolerance(double)",
        "snippet": "    protected void setTolerance(double tolerance) {\n        this.tolerance = tolerance;\n    }\n",
        "begin_line": 311,
        "end_line": 313,
        "comment": "\n     * @param tolerance The tolerance to set.\n     ",
        "child_ranges": [
            "(line 312,col 9)-(line 312,col 35)"
        ]
    }
]