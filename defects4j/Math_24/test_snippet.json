[
    {
        "class_name": "org.apache.commons.math3.optimization.univariate.BrentOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optimization/univariate/BrentOptimizerTest.java",
        "signature": "org.apache.commons.math3.optimization.univariate.BrentOptimizerTest.testSinMin()",
        "snippet": "    @Test\n    public void testSinMin() {\n        UnivariateFunction f = new Sin();\n        UnivariateOptimizer optimizer = new BrentOptimizer(1e-10, 1e-14);\n        Assert.assertEquals(3 * Math.PI / 2, optimizer.optimize(200, f, GoalType.MINIMIZE, 4, 5).getPoint(), 1e-8);\n        Assert.assertTrue(optimizer.getEvaluations() <= 50);\n        Assert.assertEquals(200, optimizer.getMaxEvaluations());\n        Assert.assertEquals(3 * Math.PI / 2, optimizer.optimize(200, f, GoalType.MINIMIZE, 1, 5).getPoint(), 1e-8);\n        Assert.assertTrue(optimizer.getEvaluations() <= 100);\n        Assert.assertTrue(optimizer.getEvaluations() >= 15);\n        try {\n            optimizer.optimize(10, f, GoalType.MINIMIZE, 4, 5);\n            Assert.fail(\"an exception should have been thrown\");\n        } catch (TooManyEvaluationsException fee) {\n            // expected\n        }\n    }\n",
        "begin_line": 40,
        "end_line": 56,
        "comment": "",
        "child_ranges": [
            "(line 42,col 9)-(line 42,col 41)",
            "(line 43,col 9)-(line 43,col 73)",
            "(line 44,col 9)-(line 44,col 115)",
            "(line 45,col 9)-(line 45,col 60)",
            "(line 46,col 9)-(line 46,col 64)",
            "(line 47,col 9)-(line 47,col 115)",
            "(line 48,col 9)-(line 48,col 61)",
            "(line 49,col 9)-(line 49,col 60)",
            "(line 50,col 9)-(line 55,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optimization.univariate.BrentOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optimization/univariate/BrentOptimizerTest.java",
        "signature": "org.apache.commons.math3.optimization.univariate.BrentOptimizerTest.testSinMinWithValueChecker()",
        "snippet": "    @Test\n    public void testSinMinWithValueChecker() {\n        final UnivariateFunction f = new Sin();\n        final ConvergenceChecker<UnivariatePointValuePair> checker = new SimpleUnivariateValueChecker(1e-5, 1e-14);\n        // The default stopping criterion of Brent's algorithm should not\n        // pass, but the search will stop at the given relative tolerance\n        // for the function value.\n        final UnivariateOptimizer optimizer = new BrentOptimizer(1e-10, 1e-14, checker);\n        final UnivariatePointValuePair result = optimizer.optimize(200, f, GoalType.MINIMIZE, 4, 5);\n        Assert.assertEquals(3 * Math.PI / 2, result.getPoint(), 1e-3);\n    }\n",
        "begin_line": 58,
        "end_line": 68,
        "comment": "",
        "child_ranges": [
            "(line 60,col 9)-(line 60,col 47)",
            "(line 61,col 9)-(line 61,col 115)",
            "(line 65,col 9)-(line 65,col 88)",
            "(line 66,col 9)-(line 66,col 100)",
            "(line 67,col 9)-(line 67,col 70)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optimization.univariate.BrentOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optimization/univariate/BrentOptimizerTest.java",
        "signature": "org.apache.commons.math3.optimization.univariate.BrentOptimizerTest.testBoundaries()",
        "snippet": "    @Test\n    public void testBoundaries() {\n        final double lower = -1.0;\n        final double upper = +1.0;\n        UnivariateFunction f = new UnivariateFunction() {            \n            public double value(double x) {\n                if (x < lower) {\n                    throw new NumberIsTooSmallException(x, lower, true);\n                } else if (x > upper) {\n                    throw new NumberIsTooLargeException(x, upper, true);\n                } else {\n                    return x;\n                }\n            }\n        };\n        UnivariateOptimizer optimizer = new BrentOptimizer(1e-10, 1e-14);\n        Assert.assertEquals(lower,\n                            optimizer.optimize(100, f, GoalType.MINIMIZE, lower, upper).getPoint(),\n                            1.0e-8);\n        Assert.assertEquals(upper,\n                            optimizer.optimize(100, f, GoalType.MAXIMIZE, lower, upper).getPoint(),\n                            1.0e-8);\n    }\n",
        "begin_line": 70,
        "end_line": 92,
        "comment": "",
        "child_ranges": [
            "(line 72,col 9)-(line 72,col 34)",
            "(line 73,col 9)-(line 73,col 34)",
            "(line 74,col 9)-(line 84,col 10)",
            "(line 85,col 9)-(line 85,col 73)",
            "(line 86,col 9)-(line 88,col 36)",
            "(line 89,col 9)-(line 91,col 36)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optimization.univariate.BrentOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optimization/univariate/BrentOptimizerTest.java",
        "signature": "org.apache.commons.math3.optimization.univariate.BrentOptimizerTest.Anonymous-ce1d1440-aa7a-4f2f-a15c-36e1bda0b7fb.value(double)",
        "snippet": "            public double value(double x) {\n                if (x < lower) {\n                    throw new NumberIsTooSmallException(x, lower, true);\n                } else if (x > upper) {\n                    throw new NumberIsTooLargeException(x, upper, true);\n                } else {\n                    return x;\n                }\n            }\n",
        "begin_line": 75,
        "end_line": 83,
        "comment": "",
        "child_ranges": [
            "(line 76,col 17)-(line 82,col 17)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optimization.univariate.BrentOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optimization/univariate/BrentOptimizerTest.java",
        "signature": "org.apache.commons.math3.optimization.univariate.BrentOptimizerTest.testQuinticMin()",
        "snippet": "    @Test\n    public void testQuinticMin() {\n        // The function has local minima at -0.27195613 and 0.82221643.\n        UnivariateFunction f = new QuinticFunction();\n        UnivariateOptimizer optimizer = new BrentOptimizer(1e-10, 1e-14);\n        Assert.assertEquals(-0.27195613, optimizer.optimize(200, f, GoalType.MINIMIZE, -0.3, -0.2).getPoint(), 1.0e-8);\n        Assert.assertEquals( 0.82221643, optimizer.optimize(200, f, GoalType.MINIMIZE,  0.3,  0.9).getPoint(), 1.0e-8);\n        Assert.assertTrue(optimizer.getEvaluations() <= 50);\n\n        // search in a large interval\n        Assert.assertEquals(-0.27195613, optimizer.optimize(200, f, GoalType.MINIMIZE, -1.0, 0.2).getPoint(), 1.0e-8);\n        Assert.assertTrue(optimizer.getEvaluations() <= 50);\n    }\n",
        "begin_line": 94,
        "end_line": 106,
        "comment": "",
        "child_ranges": [
            "(line 97,col 9)-(line 97,col 53)",
            "(line 98,col 9)-(line 98,col 73)",
            "(line 99,col 9)-(line 99,col 119)",
            "(line 100,col 9)-(line 100,col 119)",
            "(line 101,col 9)-(line 101,col 60)",
            "(line 104,col 9)-(line 104,col 118)",
            "(line 105,col 9)-(line 105,col 60)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optimization.univariate.BrentOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optimization/univariate/BrentOptimizerTest.java",
        "signature": "org.apache.commons.math3.optimization.univariate.BrentOptimizerTest.testQuinticMinStatistics()",
        "snippet": "    @Test\n    public void testQuinticMinStatistics() {\n        // The function has local minima at -0.27195613 and 0.82221643.\n        UnivariateFunction f = new QuinticFunction();\n        UnivariateOptimizer optimizer = new BrentOptimizer(1e-11, 1e-14);\n\n        final DescriptiveStatistics[] stat = new DescriptiveStatistics[2];\n        for (int i = 0; i < stat.length; i++) {\n            stat[i] = new DescriptiveStatistics();\n        }\n\n        final double min = -0.75;\n        final double max = 0.25;\n        final int nSamples = 200;\n        final double delta = (max - min) / nSamples;\n        for (int i = 0; i < nSamples; i++) {\n            final double start = min + i * delta;\n            stat[0].addValue(optimizer.optimize(40, f, GoalType.MINIMIZE, min, max, start).getPoint());\n            stat[1].addValue(optimizer.getEvaluations());\n        }\n\n        final double meanOptValue = stat[0].getMean();\n        final double medianEval = stat[1].getPercentile(50);\n        Assert.assertTrue(meanOptValue > -0.2719561281);\n        Assert.assertTrue(meanOptValue < -0.2719561280);\n        Assert.assertEquals(23, (int) medianEval);\n    }\n",
        "begin_line": 108,
        "end_line": 134,
        "comment": "",
        "child_ranges": [
            "(line 111,col 9)-(line 111,col 53)",
            "(line 112,col 9)-(line 112,col 73)",
            "(line 114,col 9)-(line 114,col 74)",
            "(line 115,col 9)-(line 117,col 9)",
            "(line 119,col 9)-(line 119,col 33)",
            "(line 120,col 9)-(line 120,col 32)",
            "(line 121,col 9)-(line 121,col 33)",
            "(line 122,col 9)-(line 122,col 52)",
            "(line 123,col 9)-(line 127,col 9)",
            "(line 129,col 9)-(line 129,col 54)",
            "(line 130,col 9)-(line 130,col 60)",
            "(line 131,col 9)-(line 131,col 56)",
            "(line 132,col 9)-(line 132,col 56)",
            "(line 133,col 9)-(line 133,col 50)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optimization.univariate.BrentOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optimization/univariate/BrentOptimizerTest.java",
        "signature": "org.apache.commons.math3.optimization.univariate.BrentOptimizerTest.testQuinticMax()",
        "snippet": "    @Test\n    public void testQuinticMax() {\n        // The quintic function has zeros at 0, +-0.5 and +-1.\n        // The function has a local maximum at 0.27195613.\n        UnivariateFunction f = new QuinticFunction();\n        UnivariateOptimizer optimizer = new BrentOptimizer(1e-12, 1e-14);\n        Assert.assertEquals(0.27195613, optimizer.optimize(100, f, GoalType.MAXIMIZE, 0.2, 0.3).getPoint(), 1e-8);\n        try {\n            optimizer.optimize(5, f, GoalType.MAXIMIZE, 0.2, 0.3);\n            Assert.fail(\"an exception should have been thrown\");\n        } catch (TooManyEvaluationsException miee) {\n            // expected\n        }\n    }\n",
        "begin_line": 136,
        "end_line": 149,
        "comment": "",
        "child_ranges": [
            "(line 140,col 9)-(line 140,col 53)",
            "(line 141,col 9)-(line 141,col 73)",
            "(line 142,col 9)-(line 142,col 114)",
            "(line 143,col 9)-(line 148,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optimization.univariate.BrentOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optimization/univariate/BrentOptimizerTest.java",
        "signature": "org.apache.commons.math3.optimization.univariate.BrentOptimizerTest.testMinEndpoints()",
        "snippet": "    @Test\n    public void testMinEndpoints() {\n        UnivariateFunction f = new Sin();\n        UnivariateOptimizer optimizer = new BrentOptimizer(1e-8, 1e-14);\n\n        // endpoint is minimum\n        double result = optimizer.optimize(50, f, GoalType.MINIMIZE, 3 * Math.PI / 2, 5).getPoint();\n        Assert.assertEquals(3 * Math.PI / 2, result, 1e-6);\n\n        result = optimizer.optimize(50, f, GoalType.MINIMIZE, 4, 3 * Math.PI / 2).getPoint();\n        Assert.assertEquals(3 * Math.PI / 2, result, 1e-6);\n    }\n",
        "begin_line": 151,
        "end_line": 162,
        "comment": "",
        "child_ranges": [
            "(line 153,col 9)-(line 153,col 41)",
            "(line 154,col 9)-(line 154,col 72)",
            "(line 157,col 9)-(line 157,col 100)",
            "(line 158,col 9)-(line 158,col 59)",
            "(line 160,col 9)-(line 160,col 93)",
            "(line 161,col 9)-(line 161,col 59)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optimization.univariate.BrentOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optimization/univariate/BrentOptimizerTest.java",
        "signature": "org.apache.commons.math3.optimization.univariate.BrentOptimizerTest.testMath832()",
        "snippet": "    @Test\n    public void testMath832() {\n        final UnivariateFunction f = new UnivariateFunction() {\n                public double value(double x) {\n                    final double sqrtX = FastMath.sqrt(x);\n                    final double a = 1e2 * sqrtX;\n                    final double b = 1e6 / x;\n                    final double c = 1e4 / sqrtX;\n\n                    return a + b + c;\n                }\n            };\n\n        UnivariateOptimizer optimizer = new BrentOptimizer(1e-10, 1e-8);\n        final double result = optimizer.optimize(1483,\n                                                 f,\n                                                 GoalType.MINIMIZE,\n                                                 Double.MIN_VALUE,\n                                                 Double.MAX_VALUE).getPoint();\n\n        Assert.assertEquals(804.9355825, result, 1e-6);\n    }\n",
        "begin_line": 164,
        "end_line": 185,
        "comment": "",
        "child_ranges": [
            "(line 166,col 9)-(line 175,col 14)",
            "(line 177,col 9)-(line 177,col 72)",
            "(line 178,col 9)-(line 182,col 78)",
            "(line 184,col 9)-(line 184,col 55)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optimization.univariate.BrentOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optimization/univariate/BrentOptimizerTest.java",
        "signature": "org.apache.commons.math3.optimization.univariate.BrentOptimizerTest.Anonymous-910c0b05-8895-487f-b5a2-7b23e271f7e3.value(double)",
        "snippet": "                public double value(double x) {\n                    final double sqrtX = FastMath.sqrt(x);\n                    final double a = 1e2 * sqrtX;\n                    final double b = 1e6 / x;\n                    final double c = 1e4 / sqrtX;\n\n                    return a + b + c;\n                }\n",
        "begin_line": 167,
        "end_line": 174,
        "comment": "",
        "child_ranges": [
            "(line 168,col 21)-(line 168,col 58)",
            "(line 169,col 21)-(line 169,col 49)",
            "(line 170,col 21)-(line 170,col 45)",
            "(line 171,col 21)-(line 171,col 49)",
            "(line 173,col 21)-(line 173,col 37)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optimization.univariate.BrentOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optimization/univariate/BrentOptimizerTest.java",
        "signature": "org.apache.commons.math3.optimization.univariate.BrentOptimizerTest.testMath855()",
        "snippet": "    @Test\n    public void testMath855() {\n        final double minSin = 3 * Math.PI / 2;\n        final double offset = 1e-8;\n        final double delta = 1e-7;\n        final UnivariateFunction f1 = new Sin();\n        final UnivariateFunction f2 = new StepFunction(new double[] { minSin, minSin + offset, minSin + 5 * offset },\n                                                       new double[] { 0, -1, 0 });\n        final UnivariateFunction f = FunctionUtils.add(f1, f2);\n        final UnivariateOptimizer optimizer = new BrentOptimizer(1e-8, 1e-100);\n        final UnivariatePointValuePair result\n            = optimizer.optimize(200, f, GoalType.MINIMIZE, minSin - 6.789 * delta, minSin + 9.876 * delta);\n        final int numEval = optimizer.getEvaluations();\n\n        final double sol = result.getPoint();\n        final double expected = 4.712389027602411;\n\n        // System.out.println(\"min=\" + (minSin + offset) + \" f=\" + f.value(minSin + offset));\n        // System.out.println(\"sol=\" + sol + \" f=\" + f.value(sol));\n        // System.out.println(\"exp=\" + expected + \" f=\" + f.value(expected));\n\n        Assert.assertTrue(\"Best point not reported\", f.value(sol) <= f.value(expected));\n    }\n",
        "begin_line": 192,
        "end_line": 214,
        "comment": "\n     * Contrived example showing that prior to the resolution of MATH-855,\n     * the algorithm, by always returning the last evaluated point, would\n     * sometimes not report the best point it had found.\n     ",
        "child_ranges": [
            "(line 194,col 9)-(line 194,col 46)",
            "(line 195,col 9)-(line 195,col 35)",
            "(line 196,col 9)-(line 196,col 34)",
            "(line 197,col 9)-(line 197,col 48)",
            "(line 198,col 9)-(line 199,col 82)",
            "(line 200,col 9)-(line 200,col 63)",
            "(line 201,col 9)-(line 201,col 79)",
            "(line 202,col 9)-(line 203,col 108)",
            "(line 204,col 9)-(line 204,col 55)",
            "(line 206,col 9)-(line 206,col 45)",
            "(line 207,col 9)-(line 207,col 50)",
            "(line 213,col 9)-(line 213,col 88)"
        ]
    }
]