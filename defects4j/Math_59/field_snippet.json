[
    {
        "class_name": "org.apache.commons.math.util.FastMath",
        "src_path": "src/main/java/org/apache/commons/math/util/FastMath.java",
        "signature": "org.apache.commons.math.util.FastMath.PI",
        "snippet": "    public static final double PI = 105414357.0 / 33554432.0 + 1.984187159361080883e-9;",
        "begin_line": 27,
        "end_line": 27,
        "comment": " Archimede's constant PI, ratio of circle circumference to diameter. "
    },
    {
        "class_name": "org.apache.commons.math.util.FastMath",
        "src_path": "src/main/java/org/apache/commons/math/util/FastMath.java",
        "signature": "org.apache.commons.math.util.FastMath.E",
        "snippet": "    public static final double E = 2850325.0 / 1048576.0 + 8.254840070411028747e-8;",
        "begin_line": 30,
        "end_line": 30,
        "comment": " Napier's constant e, base of the natural logarithm. "
    },
    {
        "class_name": "org.apache.commons.math.util.FastMath",
        "src_path": "src/main/java/org/apache/commons/math/util/FastMath.java",
        "signature": "org.apache.commons.math.util.FastMath.EXP_INT_TABLE_A",
        "snippet": "    private static final double EXP_INT_TABLE_A[] = new double[1500];",
        "begin_line": 35,
        "end_line": 35,
        "comment": " Exponential evaluated at integer values,\n     * exp(x) =  expIntTableA[x + 750] + expIntTableB[x+750].\n     "
    },
    {
        "class_name": "org.apache.commons.math.util.FastMath",
        "src_path": "src/main/java/org/apache/commons/math/util/FastMath.java",
        "signature": "org.apache.commons.math.util.FastMath.EXP_INT_TABLE_B",
        "snippet": "    private static final double EXP_INT_TABLE_B[] = new double[1500];",
        "begin_line": 40,
        "end_line": 40,
        "comment": " Exponential evaluated at integer values,\n     * exp(x) =  expIntTableA[x + 750] + expIntTableB[x+750]\n     "
    },
    {
        "class_name": "org.apache.commons.math.util.FastMath",
        "src_path": "src/main/java/org/apache/commons/math/util/FastMath.java",
        "signature": "org.apache.commons.math.util.FastMath.EXP_FRAC_TABLE_A",
        "snippet": "    private static final double EXP_FRAC_TABLE_A[] = new double[1025];",
        "begin_line": 45,
        "end_line": 45,
        "comment": " Exponential over the range of 0 - 1 in increments of 2^-10\n     * exp(x/1024) =  expFracTableA[x] + expFracTableB[x].\n     "
    },
    {
        "class_name": "org.apache.commons.math.util.FastMath",
        "src_path": "src/main/java/org/apache/commons/math/util/FastMath.java",
        "signature": "org.apache.commons.math.util.FastMath.EXP_FRAC_TABLE_B",
        "snippet": "    private static final double EXP_FRAC_TABLE_B[] = new double[1025];",
        "begin_line": 50,
        "end_line": 50,
        "comment": " Exponential over the range of 0 - 1 in increments of 2^-10\n     * exp(x/1024) =  expFracTableA[x] + expFracTableB[x].\n     "
    },
    {
        "class_name": "org.apache.commons.math.util.FastMath",
        "src_path": "src/main/java/org/apache/commons/math/util/FastMath.java",
        "signature": "org.apache.commons.math.util.FastMath.FACT",
        "snippet": "    private static final double FACT[] = new double[20];",
        "begin_line": 53,
        "end_line": 53,
        "comment": " Factorial table, for Taylor series expansions. "
    },
    {
        "class_name": "org.apache.commons.math.util.FastMath",
        "src_path": "src/main/java/org/apache/commons/math/util/FastMath.java",
        "signature": "org.apache.commons.math.util.FastMath.LN_MANT",
        "snippet": "    private static final double LN_MANT[][] = new double[1024][];",
        "begin_line": 56,
        "end_line": 56,
        "comment": " Extended precision logarithm table over the range 1 - 2 in increments of 2^-10. "
    },
    {
        "class_name": "org.apache.commons.math.util.FastMath",
        "src_path": "src/main/java/org/apache/commons/math/util/FastMath.java",
        "signature": "org.apache.commons.math.util.FastMath.LN_2_A",
        "snippet": "    private static final double LN_2_A = 0.693147063255310059;",
        "begin_line": 59,
        "end_line": 59,
        "comment": " log(2) (high bits). "
    },
    {
        "class_name": "org.apache.commons.math.util.FastMath",
        "src_path": "src/main/java/org/apache/commons/math/util/FastMath.java",
        "signature": "org.apache.commons.math.util.FastMath.LN_2_B",
        "snippet": "    private static final double LN_2_B = 1.17304635250823482e-7;",
        "begin_line": 62,
        "end_line": 62,
        "comment": " log(2) (low bits). "
    },
    {
        "class_name": "org.apache.commons.math.util.FastMath",
        "src_path": "src/main/java/org/apache/commons/math/util/FastMath.java",
        "signature": "org.apache.commons.math.util.FastMath.LN_SPLIT_COEF",
        "snippet": "    private static final double LN_SPLIT_COEF[][] = {\n        {2.0, 0.0},\n        {0.6666666269302368, 3.9736429850260626E-8},\n        {0.3999999761581421, 2.3841857910019882E-8},\n        {0.2857142686843872, 1.7029898543501842E-8},\n        {0.2222222089767456, 1.3245471311735498E-8},\n        {0.1818181574344635, 2.4384203044354907E-8},\n        {0.1538461446762085, 9.140260083262505E-9},\n        {0.13333332538604736, 9.220590270857665E-9},\n        {0.11764700710773468, 1.2393345855018391E-8},\n        {0.10526403784751892, 8.251545029714408E-9},\n        {0.0952233225107193, 1.2675934823758863E-8},\n        {0.08713622391223907, 1.1430250008909141E-8},\n        {0.07842259109020233, 2.404307984052299E-9},\n        {0.08371849358081818, 1.176342548272881E-8},\n        {0.030589580535888672, 1.2958646899018938E-9},\n        {0.14982303977012634, 1.225743062930824E-8},\n    };",
        "begin_line": 65,
        "end_line": 82,
        "comment": " Coefficients for slowLog. "
    },
    {
        "class_name": "org.apache.commons.math.util.FastMath",
        "src_path": "src/main/java/org/apache/commons/math/util/FastMath.java",
        "signature": "org.apache.commons.math.util.FastMath.LN_QUICK_COEF",
        "snippet": "    private static final double LN_QUICK_COEF[][] = {\n        {1.0, 5.669184079525E-24},\n        {-0.25, -0.25},\n        {0.3333333134651184, 1.986821492305628E-8},\n        {-0.25, -6.663542893624021E-14},\n        {0.19999998807907104, 1.1921056801463227E-8},\n        {-0.1666666567325592, -7.800414592973399E-9},\n        {0.1428571343421936, 5.650007086920087E-9},\n        {-0.12502530217170715, -7.44321345601866E-11},\n        {0.11113807559013367, 9.219544613762692E-9},\n    };",
        "begin_line": 85,
        "end_line": 95,
        "comment": " Coefficients for log, when input 0.99 < x < 1.01. "
    },
    {
        "class_name": "org.apache.commons.math.util.FastMath",
        "src_path": "src/main/java/org/apache/commons/math/util/FastMath.java",
        "signature": "org.apache.commons.math.util.FastMath.LN_HI_PREC_COEF",
        "snippet": "    private static final double LN_HI_PREC_COEF[][] = {\n        {1.0, -6.032174644509064E-23},\n        {-0.25, -0.25},\n        {0.3333333134651184, 1.9868161777724352E-8},\n        {-0.2499999701976776, -2.957007209750105E-8},\n        {0.19999954104423523, 1.5830993332061267E-10},\n        {-0.16624879837036133, -2.6033824355191673E-8}\n    };",
        "begin_line": 98,
        "end_line": 105,
        "comment": " Coefficients for log in the range of 1.0 < x < 1.0 + 2^-10. "
    },
    {
        "class_name": "org.apache.commons.math.util.FastMath",
        "src_path": "src/main/java/org/apache/commons/math/util/FastMath.java",
        "signature": "org.apache.commons.math.util.FastMath.SINE_TABLE_A",
        "snippet": "    private static final double SINE_TABLE_A[] = new double[14];",
        "begin_line": 108,
        "end_line": 108,
        "comment": " Sine table (high bits). "
    },
    {
        "class_name": "org.apache.commons.math.util.FastMath",
        "src_path": "src/main/java/org/apache/commons/math/util/FastMath.java",
        "signature": "org.apache.commons.math.util.FastMath.SINE_TABLE_B",
        "snippet": "    private static final double SINE_TABLE_B[] = new double[14];",
        "begin_line": 111,
        "end_line": 111,
        "comment": " Sine table (low bits). "
    },
    {
        "class_name": "org.apache.commons.math.util.FastMath",
        "src_path": "src/main/java/org/apache/commons/math/util/FastMath.java",
        "signature": "org.apache.commons.math.util.FastMath.COSINE_TABLE_A",
        "snippet": "    private static final double COSINE_TABLE_A[] = new double[14];",
        "begin_line": 114,
        "end_line": 114,
        "comment": " Cosine table (high bits). "
    },
    {
        "class_name": "org.apache.commons.math.util.FastMath",
        "src_path": "src/main/java/org/apache/commons/math/util/FastMath.java",
        "signature": "org.apache.commons.math.util.FastMath.COSINE_TABLE_B",
        "snippet": "    private static final double COSINE_TABLE_B[] = new double[14];",
        "begin_line": 117,
        "end_line": 117,
        "comment": " Cosine table (low bits). "
    },
    {
        "class_name": "org.apache.commons.math.util.FastMath",
        "src_path": "src/main/java/org/apache/commons/math/util/FastMath.java",
        "signature": "org.apache.commons.math.util.FastMath.TANGENT_TABLE_A",
        "snippet": "    private static final double TANGENT_TABLE_A[] = new double[14];",
        "begin_line": 120,
        "end_line": 120,
        "comment": " Tangent table, used by atan() (high bits). "
    },
    {
        "class_name": "org.apache.commons.math.util.FastMath",
        "src_path": "src/main/java/org/apache/commons/math/util/FastMath.java",
        "signature": "org.apache.commons.math.util.FastMath.TANGENT_TABLE_B",
        "snippet": "    private static final double TANGENT_TABLE_B[] = new double[14];",
        "begin_line": 123,
        "end_line": 123,
        "comment": " Tangent table, used by atan() (low bits). "
    },
    {
        "class_name": "org.apache.commons.math.util.FastMath",
        "src_path": "src/main/java/org/apache/commons/math/util/FastMath.java",
        "signature": "org.apache.commons.math.util.FastMath.RECIP_2PI",
        "snippet": "    private static long RECIP_2PI[] = new long[] {\n        (0x28be60dbL << 32) | 0x9391054aL,\n        (0x7f09d5f4L << 32) | 0x7d4d3770L,\n        (0x36d8a566L << 32) | 0x4f10e410L,\n        (0x7f9458eaL << 32) | 0xf7aef158L,\n        (0x6dc91b8eL << 32) | 0x909374b8L,\n        (0x01924bbaL << 32) | 0x82746487L,\n        (0x3f877ac7L << 32) | 0x2c4a69cfL,\n        (0xba208d7dL << 32) | 0x4baed121L,\n        (0x3a671c09L << 32) | 0xad17df90L,\n        (0x4e64758eL << 32) | 0x60d4ce7dL,\n        (0x272117e2L << 32) | 0xef7e4a0eL,\n        (0xc7fe25ffL << 32) | 0xf7816603L,\n        (0xfbcbc462L << 32) | 0xd6829b47L,\n        (0xdb4d9fb3L << 32) | 0xc9f2c26dL,\n        (0xd3d18fd9L << 32) | 0xa797fa8bL,\n        (0x5d49eeb1L << 32) | 0xfaf97c5eL,\n        (0xcf41ce7dL << 32) | 0xe294a4baL,\n         0x9afed7ecL << 32  };",
        "begin_line": 126,
        "end_line": 144,
        "comment": " Bits of 1/(2*pi), need for reducePayneHanek(). "
    },
    {
        "class_name": "org.apache.commons.math.util.FastMath",
        "src_path": "src/main/java/org/apache/commons/math/util/FastMath.java",
        "signature": "org.apache.commons.math.util.FastMath.PI_O_4_BITS",
        "snippet": "    private static long PI_O_4_BITS[] = new long[] {\n        (0xc90fdaa2L << 32) | 0x2168c234L,\n        (0xc4c6628bL << 32) | 0x80dc1cd1L };",
        "begin_line": 147,
        "end_line": 149,
        "comment": " Bits of pi/4, need for reducePayneHanek(). "
    },
    {
        "class_name": "org.apache.commons.math.util.FastMath",
        "src_path": "src/main/java/org/apache/commons/math/util/FastMath.java",
        "signature": "org.apache.commons.math.util.FastMath.EIGHTHES",
        "snippet": "    private static final double EIGHTHES[] = {0, 0.125, 0.25, 0.375, 0.5, 0.625, 0.75, 0.875, 1.0, 1.125, 1.25, 1.375, 1.5, 1.625};",
        "begin_line": 155,
        "end_line": 155,
        "comment": " Eighths.\n     * This is used by sinQ, because its faster to do a table lookup than\n     * a multiply in this time-critical routine\n     "
    },
    {
        "class_name": "org.apache.commons.math.util.FastMath",
        "src_path": "src/main/java/org/apache/commons/math/util/FastMath.java",
        "signature": "org.apache.commons.math.util.FastMath.CBRTTWO",
        "snippet": "    private static final double CBRTTWO[] = { 0.6299605249474366,\n                                            0.7937005259840998,\n                                            1.0,\n                                            1.2599210498948732,\n                                            1.5874010519681994 };",
        "begin_line": 158,
        "end_line": 162,
        "comment": " Table of 2^((n+2)/3) "
    },
    {
        "class_name": "org.apache.commons.math.random.BitsStreamGenerator",
        "src_path": "src/main/java/org/apache/commons/math/random/BitsStreamGenerator.java",
        "signature": "org.apache.commons.math.random.BitsStreamGenerator.nextGaussian",
        "snippet": "    private double nextGaussian;",
        "begin_line": 31,
        "end_line": 31,
        "comment": " Next gaussian. "
    },
    {
        "class_name": "org.apache.commons.math.dfp.DfpField",
        "src_path": "src/main/java/org/apache/commons/math/dfp/DfpField.java",
        "signature": "org.apache.commons.math.dfp.DfpField.FLAG_INVALID",
        "snippet": "    public static final int FLAG_INVALID   =  1;",
        "begin_line": 60,
        "end_line": 60,
        "comment": " IEEE 854-1987 flag for invalid operation. "
    },
    {
        "class_name": "org.apache.commons.math.dfp.DfpField",
        "src_path": "src/main/java/org/apache/commons/math/dfp/DfpField.java",
        "signature": "org.apache.commons.math.dfp.DfpField.FLAG_DIV_ZERO",
        "snippet": "    public static final int FLAG_DIV_ZERO  =  2;",
        "begin_line": 63,
        "end_line": 63,
        "comment": " IEEE 854-1987 flag for division by zero. "
    },
    {
        "class_name": "org.apache.commons.math.dfp.DfpField",
        "src_path": "src/main/java/org/apache/commons/math/dfp/DfpField.java",
        "signature": "org.apache.commons.math.dfp.DfpField.FLAG_OVERFLOW",
        "snippet": "    public static final int FLAG_OVERFLOW  =  4;",
        "begin_line": 66,
        "end_line": 66,
        "comment": " IEEE 854-1987 flag for overflow. "
    },
    {
        "class_name": "org.apache.commons.math.dfp.DfpField",
        "src_path": "src/main/java/org/apache/commons/math/dfp/DfpField.java",
        "signature": "org.apache.commons.math.dfp.DfpField.FLAG_UNDERFLOW",
        "snippet": "    public static final int FLAG_UNDERFLOW =  8;",
        "begin_line": 69,
        "end_line": 69,
        "comment": " IEEE 854-1987 flag for underflow. "
    },
    {
        "class_name": "org.apache.commons.math.dfp.DfpField",
        "src_path": "src/main/java/org/apache/commons/math/dfp/DfpField.java",
        "signature": "org.apache.commons.math.dfp.DfpField.FLAG_INEXACT",
        "snippet": "    public static final int FLAG_INEXACT   = 16;",
        "begin_line": 72,
        "end_line": 72,
        "comment": " IEEE 854-1987 flag for inexact result. "
    },
    {
        "class_name": "org.apache.commons.math.dfp.DfpField",
        "src_path": "src/main/java/org/apache/commons/math/dfp/DfpField.java",
        "signature": "org.apache.commons.math.dfp.DfpField.sqr2String",
        "snippet": "    private static String sqr2String;",
        "begin_line": 75,
        "end_line": 75,
        "comment": " High precision string representation of &radic;2. "
    },
    {
        "class_name": "org.apache.commons.math.dfp.DfpField",
        "src_path": "src/main/java/org/apache/commons/math/dfp/DfpField.java",
        "signature": "org.apache.commons.math.dfp.DfpField.sqr2ReciprocalString",
        "snippet": "    private static String sqr2ReciprocalString;",
        "begin_line": 78,
        "end_line": 78,
        "comment": " High precision string representation of &radic;2 / 2. "
    },
    {
        "class_name": "org.apache.commons.math.dfp.DfpField",
        "src_path": "src/main/java/org/apache/commons/math/dfp/DfpField.java",
        "signature": "org.apache.commons.math.dfp.DfpField.sqr3String",
        "snippet": "    private static String sqr3String;",
        "begin_line": 81,
        "end_line": 81,
        "comment": " High precision string representation of &radic;3. "
    },
    {
        "class_name": "org.apache.commons.math.dfp.DfpField",
        "src_path": "src/main/java/org/apache/commons/math/dfp/DfpField.java",
        "signature": "org.apache.commons.math.dfp.DfpField.sqr3ReciprocalString",
        "snippet": "    private static String sqr3ReciprocalString;",
        "begin_line": 84,
        "end_line": 84,
        "comment": " High precision string representation of &radic;3 / 3. "
    },
    {
        "class_name": "org.apache.commons.math.dfp.DfpField",
        "src_path": "src/main/java/org/apache/commons/math/dfp/DfpField.java",
        "signature": "org.apache.commons.math.dfp.DfpField.piString",
        "snippet": "    private static String piString;",
        "begin_line": 87,
        "end_line": 87,
        "comment": " High precision string representation of &pi;. "
    },
    {
        "class_name": "org.apache.commons.math.dfp.DfpField",
        "src_path": "src/main/java/org/apache/commons/math/dfp/DfpField.java",
        "signature": "org.apache.commons.math.dfp.DfpField.eString",
        "snippet": "    private static String eString;",
        "begin_line": 90,
        "end_line": 90,
        "comment": " High precision string representation of e. "
    },
    {
        "class_name": "org.apache.commons.math.dfp.DfpField",
        "src_path": "src/main/java/org/apache/commons/math/dfp/DfpField.java",
        "signature": "org.apache.commons.math.dfp.DfpField.ln2String",
        "snippet": "    private static String ln2String;",
        "begin_line": 93,
        "end_line": 93,
        "comment": " High precision string representation of ln(2). "
    },
    {
        "class_name": "org.apache.commons.math.dfp.DfpField",
        "src_path": "src/main/java/org/apache/commons/math/dfp/DfpField.java",
        "signature": "org.apache.commons.math.dfp.DfpField.ln5String",
        "snippet": "    private static String ln5String;",
        "begin_line": 96,
        "end_line": 96,
        "comment": " High precision string representation of ln(5). "
    },
    {
        "class_name": "org.apache.commons.math.dfp.DfpField",
        "src_path": "src/main/java/org/apache/commons/math/dfp/DfpField.java",
        "signature": "org.apache.commons.math.dfp.DfpField.ln10String",
        "snippet": "    private static String ln10String;",
        "begin_line": 99,
        "end_line": 99,
        "comment": " High precision string representation of ln(10). "
    },
    {
        "class_name": "org.apache.commons.math.dfp.DfpField",
        "src_path": "src/main/java/org/apache/commons/math/dfp/DfpField.java",
        "signature": "org.apache.commons.math.dfp.DfpField.radixDigits",
        "snippet": "    private final int radixDigits;",
        "begin_line": 105,
        "end_line": 105,
        "comment": " The number of radix digits.\n     * Note these depend on the radix which is 10000 digits,\n     * so each one is equivalent to 4 decimal digits.\n     "
    },
    {
        "class_name": "org.apache.commons.math.dfp.DfpField",
        "src_path": "src/main/java/org/apache/commons/math/dfp/DfpField.java",
        "signature": "org.apache.commons.math.dfp.DfpField.zero",
        "snippet": "    private final Dfp zero;",
        "begin_line": 108,
        "end_line": 108,
        "comment": " A {@link Dfp} with value 0. "
    },
    {
        "class_name": "org.apache.commons.math.dfp.DfpField",
        "src_path": "src/main/java/org/apache/commons/math/dfp/DfpField.java",
        "signature": "org.apache.commons.math.dfp.DfpField.one",
        "snippet": "    private final Dfp one;",
        "begin_line": 111,
        "end_line": 111,
        "comment": " A {@link Dfp} with value 1. "
    },
    {
        "class_name": "org.apache.commons.math.dfp.DfpField",
        "src_path": "src/main/java/org/apache/commons/math/dfp/DfpField.java",
        "signature": "org.apache.commons.math.dfp.DfpField.two",
        "snippet": "    private final Dfp two;",
        "begin_line": 114,
        "end_line": 114,
        "comment": " A {@link Dfp} with value 2. "
    },
    {
        "class_name": "org.apache.commons.math.dfp.DfpField",
        "src_path": "src/main/java/org/apache/commons/math/dfp/DfpField.java",
        "signature": "org.apache.commons.math.dfp.DfpField.sqr2",
        "snippet": "    private final Dfp sqr2;",
        "begin_line": 117,
        "end_line": 117,
        "comment": " A {@link Dfp} with value &radic;2. "
    },
    {
        "class_name": "org.apache.commons.math.dfp.DfpField",
        "src_path": "src/main/java/org/apache/commons/math/dfp/DfpField.java",
        "signature": "org.apache.commons.math.dfp.DfpField.sqr2Split",
        "snippet": "    private final Dfp[] sqr2Split;",
        "begin_line": 120,
        "end_line": 120,
        "comment": " A two elements {@link Dfp} array with value &radic;2 split in two pieces. "
    },
    {
        "class_name": "org.apache.commons.math.dfp.DfpField",
        "src_path": "src/main/java/org/apache/commons/math/dfp/DfpField.java",
        "signature": "org.apache.commons.math.dfp.DfpField.sqr2Reciprocal",
        "snippet": "    private final Dfp sqr2Reciprocal;",
        "begin_line": 123,
        "end_line": 123,
        "comment": " A {@link Dfp} with value &radic;2 / 2. "
    },
    {
        "class_name": "org.apache.commons.math.dfp.DfpField",
        "src_path": "src/main/java/org/apache/commons/math/dfp/DfpField.java",
        "signature": "org.apache.commons.math.dfp.DfpField.sqr3",
        "snippet": "    private final Dfp sqr3;",
        "begin_line": 126,
        "end_line": 126,
        "comment": " A {@link Dfp} with value &radic;3. "
    },
    {
        "class_name": "org.apache.commons.math.dfp.DfpField",
        "src_path": "src/main/java/org/apache/commons/math/dfp/DfpField.java",
        "signature": "org.apache.commons.math.dfp.DfpField.sqr3Reciprocal",
        "snippet": "    private final Dfp sqr3Reciprocal;",
        "begin_line": 129,
        "end_line": 129,
        "comment": " A {@link Dfp} with value &radic;3 / 3. "
    },
    {
        "class_name": "org.apache.commons.math.dfp.DfpField",
        "src_path": "src/main/java/org/apache/commons/math/dfp/DfpField.java",
        "signature": "org.apache.commons.math.dfp.DfpField.pi",
        "snippet": "    private final Dfp pi;",
        "begin_line": 132,
        "end_line": 132,
        "comment": " A {@link Dfp} with value &pi;. "
    },
    {
        "class_name": "org.apache.commons.math.dfp.DfpField",
        "src_path": "src/main/java/org/apache/commons/math/dfp/DfpField.java",
        "signature": "org.apache.commons.math.dfp.DfpField.piSplit",
        "snippet": "    private final Dfp[] piSplit;",
        "begin_line": 135,
        "end_line": 135,
        "comment": " A two elements {@link Dfp} array with value &pi; split in two pieces. "
    },
    {
        "class_name": "org.apache.commons.math.dfp.DfpField",
        "src_path": "src/main/java/org/apache/commons/math/dfp/DfpField.java",
        "signature": "org.apache.commons.math.dfp.DfpField.e",
        "snippet": "    private final Dfp e;",
        "begin_line": 138,
        "end_line": 138,
        "comment": " A {@link Dfp} with value e. "
    },
    {
        "class_name": "org.apache.commons.math.dfp.DfpField",
        "src_path": "src/main/java/org/apache/commons/math/dfp/DfpField.java",
        "signature": "org.apache.commons.math.dfp.DfpField.eSplit",
        "snippet": "    private final Dfp[] eSplit;",
        "begin_line": 141,
        "end_line": 141,
        "comment": " A two elements {@link Dfp} array with value e split in two pieces. "
    },
    {
        "class_name": "org.apache.commons.math.dfp.DfpField",
        "src_path": "src/main/java/org/apache/commons/math/dfp/DfpField.java",
        "signature": "org.apache.commons.math.dfp.DfpField.ln2",
        "snippet": "    private final Dfp ln2;",
        "begin_line": 144,
        "end_line": 144,
        "comment": " A {@link Dfp} with value ln(2). "
    },
    {
        "class_name": "org.apache.commons.math.dfp.DfpField",
        "src_path": "src/main/java/org/apache/commons/math/dfp/DfpField.java",
        "signature": "org.apache.commons.math.dfp.DfpField.ln2Split",
        "snippet": "    private final Dfp[] ln2Split;",
        "begin_line": 147,
        "end_line": 147,
        "comment": " A two elements {@link Dfp} array with value ln(2) split in two pieces. "
    },
    {
        "class_name": "org.apache.commons.math.dfp.DfpField",
        "src_path": "src/main/java/org/apache/commons/math/dfp/DfpField.java",
        "signature": "org.apache.commons.math.dfp.DfpField.ln5",
        "snippet": "    private final Dfp ln5;",
        "begin_line": 150,
        "end_line": 150,
        "comment": " A {@link Dfp} with value ln(5). "
    },
    {
        "class_name": "org.apache.commons.math.dfp.DfpField",
        "src_path": "src/main/java/org/apache/commons/math/dfp/DfpField.java",
        "signature": "org.apache.commons.math.dfp.DfpField.ln5Split",
        "snippet": "    private final Dfp[] ln5Split;",
        "begin_line": 153,
        "end_line": 153,
        "comment": " A two elements {@link Dfp} array with value ln(5) split in two pieces. "
    },
    {
        "class_name": "org.apache.commons.math.dfp.DfpField",
        "src_path": "src/main/java/org/apache/commons/math/dfp/DfpField.java",
        "signature": "org.apache.commons.math.dfp.DfpField.ln10",
        "snippet": "    private final Dfp ln10;",
        "begin_line": 156,
        "end_line": 156,
        "comment": " A {@link Dfp} with value ln(10). "
    },
    {
        "class_name": "org.apache.commons.math.dfp.DfpField",
        "src_path": "src/main/java/org/apache/commons/math/dfp/DfpField.java",
        "signature": "org.apache.commons.math.dfp.DfpField.rMode",
        "snippet": "    private RoundingMode rMode;",
        "begin_line": 159,
        "end_line": 159,
        "comment": " Current rounding mode. "
    },
    {
        "class_name": "org.apache.commons.math.dfp.DfpField",
        "src_path": "src/main/java/org/apache/commons/math/dfp/DfpField.java",
        "signature": "org.apache.commons.math.dfp.DfpField.ieeeFlags",
        "snippet": "    private int ieeeFlags;",
        "begin_line": 162,
        "end_line": 162,
        "comment": " IEEE 854-1987 signals. "
    },
    {
        "class_name": "org.apache.commons.math.dfp.Dfp",
        "src_path": "src/main/java/org/apache/commons/math/dfp/Dfp.java",
        "signature": "org.apache.commons.math.dfp.Dfp.RADIX",
        "snippet": "    public static final int RADIX = 10000;",
        "begin_line": 99,
        "end_line": 99,
        "comment": " The radix, or base of this system.  Set to 10000 "
    },
    {
        "class_name": "org.apache.commons.math.dfp.Dfp",
        "src_path": "src/main/java/org/apache/commons/math/dfp/Dfp.java",
        "signature": "org.apache.commons.math.dfp.Dfp.MIN_EXP",
        "snippet": "    public static final int MIN_EXP = -32767;",
        "begin_line": 103,
        "end_line": 103,
        "comment": " The minimum exponent before underflow is signaled.  Flush to zero\n     *  occurs at minExp-DIGITS "
    },
    {
        "class_name": "org.apache.commons.math.dfp.Dfp",
        "src_path": "src/main/java/org/apache/commons/math/dfp/Dfp.java",
        "signature": "org.apache.commons.math.dfp.Dfp.MAX_EXP",
        "snippet": "    public static final int MAX_EXP =  32768;",
        "begin_line": 107,
        "end_line": 107,
        "comment": " The maximum exponent before overflow is signaled and results flushed\n     *  to infinity "
    },
    {
        "class_name": "org.apache.commons.math.dfp.Dfp",
        "src_path": "src/main/java/org/apache/commons/math/dfp/Dfp.java",
        "signature": "org.apache.commons.math.dfp.Dfp.ERR_SCALE",
        "snippet": "    public static final int ERR_SCALE = 32760;",
        "begin_line": 110,
        "end_line": 110,
        "comment": " The amount under/overflows are scaled by before going to trap handler "
    },
    {
        "class_name": "org.apache.commons.math.dfp.Dfp",
        "src_path": "src/main/java/org/apache/commons/math/dfp/Dfp.java",
        "signature": "org.apache.commons.math.dfp.Dfp.FINITE",
        "snippet": "    public static final byte FINITE = 0;",
        "begin_line": 113,
        "end_line": 113,
        "comment": " Indicator value for normal finite numbers. "
    },
    {
        "class_name": "org.apache.commons.math.dfp.Dfp",
        "src_path": "src/main/java/org/apache/commons/math/dfp/Dfp.java",
        "signature": "org.apache.commons.math.dfp.Dfp.INFINITE",
        "snippet": "    public static final byte INFINITE = 1;",
        "begin_line": 116,
        "end_line": 116,
        "comment": " Indicator value for Infinity. "
    },
    {
        "class_name": "org.apache.commons.math.dfp.Dfp",
        "src_path": "src/main/java/org/apache/commons/math/dfp/Dfp.java",
        "signature": "org.apache.commons.math.dfp.Dfp.SNAN",
        "snippet": "    public static final byte SNAN = 2;",
        "begin_line": 119,
        "end_line": 119,
        "comment": " Indicator value for signaling NaN. "
    },
    {
        "class_name": "org.apache.commons.math.dfp.Dfp",
        "src_path": "src/main/java/org/apache/commons/math/dfp/Dfp.java",
        "signature": "org.apache.commons.math.dfp.Dfp.QNAN",
        "snippet": "    public static final byte QNAN = 3;",
        "begin_line": 122,
        "end_line": 122,
        "comment": " Indicator value for quiet NaN. "
    },
    {
        "class_name": "org.apache.commons.math.dfp.Dfp",
        "src_path": "src/main/java/org/apache/commons/math/dfp/Dfp.java",
        "signature": "org.apache.commons.math.dfp.Dfp.NAN_STRING",
        "snippet": "    private static final String NAN_STRING = \"NaN\";",
        "begin_line": 125,
        "end_line": 125,
        "comment": " String for NaN representation. "
    },
    {
        "class_name": "org.apache.commons.math.dfp.Dfp",
        "src_path": "src/main/java/org/apache/commons/math/dfp/Dfp.java",
        "signature": "org.apache.commons.math.dfp.Dfp.POS_INFINITY_STRING",
        "snippet": "    private static final String POS_INFINITY_STRING = \"Infinity\";",
        "begin_line": 128,
        "end_line": 128,
        "comment": " String for positive infinity representation. "
    },
    {
        "class_name": "org.apache.commons.math.dfp.Dfp",
        "src_path": "src/main/java/org/apache/commons/math/dfp/Dfp.java",
        "signature": "org.apache.commons.math.dfp.Dfp.NEG_INFINITY_STRING",
        "snippet": "    private static final String NEG_INFINITY_STRING = \"-Infinity\";",
        "begin_line": 131,
        "end_line": 131,
        "comment": " String for negative infinity representation. "
    },
    {
        "class_name": "org.apache.commons.math.dfp.Dfp",
        "src_path": "src/main/java/org/apache/commons/math/dfp/Dfp.java",
        "signature": "org.apache.commons.math.dfp.Dfp.ADD_TRAP",
        "snippet": "    private static final String ADD_TRAP = \"add\";",
        "begin_line": 134,
        "end_line": 134,
        "comment": " Name for traps triggered by addition. "
    },
    {
        "class_name": "org.apache.commons.math.dfp.Dfp",
        "src_path": "src/main/java/org/apache/commons/math/dfp/Dfp.java",
        "signature": "org.apache.commons.math.dfp.Dfp.MULTIPLY_TRAP",
        "snippet": "    private static final String MULTIPLY_TRAP = \"multiply\";",
        "begin_line": 137,
        "end_line": 137,
        "comment": " Name for traps triggered by multiplication. "
    },
    {
        "class_name": "org.apache.commons.math.dfp.Dfp",
        "src_path": "src/main/java/org/apache/commons/math/dfp/Dfp.java",
        "signature": "org.apache.commons.math.dfp.Dfp.DIVIDE_TRAP",
        "snippet": "    private static final String DIVIDE_TRAP = \"divide\";",
        "begin_line": 140,
        "end_line": 140,
        "comment": " Name for traps triggered by division. "
    },
    {
        "class_name": "org.apache.commons.math.dfp.Dfp",
        "src_path": "src/main/java/org/apache/commons/math/dfp/Dfp.java",
        "signature": "org.apache.commons.math.dfp.Dfp.SQRT_TRAP",
        "snippet": "    private static final String SQRT_TRAP = \"sqrt\";",
        "begin_line": 143,
        "end_line": 143,
        "comment": " Name for traps triggered by square root. "
    },
    {
        "class_name": "org.apache.commons.math.dfp.Dfp",
        "src_path": "src/main/java/org/apache/commons/math/dfp/Dfp.java",
        "signature": "org.apache.commons.math.dfp.Dfp.ALIGN_TRAP",
        "snippet": "    private static final String ALIGN_TRAP = \"align\";",
        "begin_line": 146,
        "end_line": 146,
        "comment": " Name for traps triggered by alignment. "
    },
    {
        "class_name": "org.apache.commons.math.dfp.Dfp",
        "src_path": "src/main/java/org/apache/commons/math/dfp/Dfp.java",
        "signature": "org.apache.commons.math.dfp.Dfp.TRUNC_TRAP",
        "snippet": "    private static final String TRUNC_TRAP = \"trunc\";",
        "begin_line": 149,
        "end_line": 149,
        "comment": " Name for traps triggered by truncation. "
    },
    {
        "class_name": "org.apache.commons.math.dfp.Dfp",
        "src_path": "src/main/java/org/apache/commons/math/dfp/Dfp.java",
        "signature": "org.apache.commons.math.dfp.Dfp.NEXT_AFTER_TRAP",
        "snippet": "    private static final String NEXT_AFTER_TRAP = \"nextAfter\";",
        "begin_line": 152,
        "end_line": 152,
        "comment": " Name for traps triggered by nextAfter. "
    },
    {
        "class_name": "org.apache.commons.math.dfp.Dfp",
        "src_path": "src/main/java/org/apache/commons/math/dfp/Dfp.java",
        "signature": "org.apache.commons.math.dfp.Dfp.LESS_THAN_TRAP",
        "snippet": "    private static final String LESS_THAN_TRAP = \"lessThan\";",
        "begin_line": 155,
        "end_line": 155,
        "comment": " Name for traps triggered by lessThan. "
    },
    {
        "class_name": "org.apache.commons.math.dfp.Dfp",
        "src_path": "src/main/java/org/apache/commons/math/dfp/Dfp.java",
        "signature": "org.apache.commons.math.dfp.Dfp.GREATER_THAN_TRAP",
        "snippet": "    private static final String GREATER_THAN_TRAP = \"greaterThan\";",
        "begin_line": 158,
        "end_line": 158,
        "comment": " Name for traps triggered by greaterThan. "
    },
    {
        "class_name": "org.apache.commons.math.dfp.Dfp",
        "src_path": "src/main/java/org/apache/commons/math/dfp/Dfp.java",
        "signature": "org.apache.commons.math.dfp.Dfp.NEW_INSTANCE_TRAP",
        "snippet": "    private static final String NEW_INSTANCE_TRAP = \"newInstance\";",
        "begin_line": 161,
        "end_line": 161,
        "comment": " Name for traps triggered by newInstance. "
    },
    {
        "class_name": "org.apache.commons.math.dfp.Dfp",
        "src_path": "src/main/java/org/apache/commons/math/dfp/Dfp.java",
        "signature": "org.apache.commons.math.dfp.Dfp.mant",
        "snippet": "    protected int[] mant;",
        "begin_line": 164,
        "end_line": 164,
        "comment": " Mantissa. "
    },
    {
        "class_name": "org.apache.commons.math.dfp.Dfp",
        "src_path": "src/main/java/org/apache/commons/math/dfp/Dfp.java",
        "signature": "org.apache.commons.math.dfp.Dfp.sign",
        "snippet": "    protected byte sign;",
        "begin_line": 167,
        "end_line": 167,
        "comment": " Sign bit: & for positive, -1 for negative. "
    },
    {
        "class_name": "org.apache.commons.math.dfp.Dfp",
        "src_path": "src/main/java/org/apache/commons/math/dfp/Dfp.java",
        "signature": "org.apache.commons.math.dfp.Dfp.exp",
        "snippet": "    protected int exp;",
        "begin_line": 170,
        "end_line": 170,
        "comment": " Exponent. "
    },
    {
        "class_name": "org.apache.commons.math.dfp.Dfp",
        "src_path": "src/main/java/org/apache/commons/math/dfp/Dfp.java",
        "signature": "org.apache.commons.math.dfp.Dfp.nans",
        "snippet": "    protected byte nans;",
        "begin_line": 173,
        "end_line": 173,
        "comment": " Indicator for non-finite / non-number values. "
    },
    {
        "class_name": "org.apache.commons.math.dfp.Dfp",
        "src_path": "src/main/java/org/apache/commons/math/dfp/Dfp.java",
        "signature": "org.apache.commons.math.dfp.Dfp.field",
        "snippet": "    private final DfpField field;",
        "begin_line": 176,
        "end_line": 176,
        "comment": " Factory building similar Dfp's. "
    },
    {
        "class_name": "org.apache.commons.math.random.MersenneTwister",
        "src_path": "src/main/java/org/apache/commons/math/random/MersenneTwister.java",
        "signature": "org.apache.commons.math.random.MersenneTwister.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 8661194735290153518L;",
        "begin_line": 85,
        "end_line": 85,
        "comment": " Serializable version identifier. "
    },
    {
        "class_name": "org.apache.commons.math.random.MersenneTwister",
        "src_path": "src/main/java/org/apache/commons/math/random/MersenneTwister.java",
        "signature": "org.apache.commons.math.random.MersenneTwister.N",
        "snippet": "    private static final int   N     = 624;",
        "begin_line": 88,
        "end_line": 88,
        "comment": " Size of the bytes pool. "
    },
    {
        "class_name": "org.apache.commons.math.random.MersenneTwister",
        "src_path": "src/main/java/org/apache/commons/math/random/MersenneTwister.java",
        "signature": "org.apache.commons.math.random.MersenneTwister.M",
        "snippet": "    private static final int   M     = 397;",
        "begin_line": 91,
        "end_line": 91,
        "comment": " Period second parameter. "
    },
    {
        "class_name": "org.apache.commons.math.random.MersenneTwister",
        "src_path": "src/main/java/org/apache/commons/math/random/MersenneTwister.java",
        "signature": "org.apache.commons.math.random.MersenneTwister.MAG01",
        "snippet": "    private static final int[] MAG01 = { 0x0, 0x9908b0df };",
        "begin_line": 94,
        "end_line": 94,
        "comment": " X * MATRIX_A for X = {0, 1}. "
    },
    {
        "class_name": "org.apache.commons.math.random.MersenneTwister",
        "src_path": "src/main/java/org/apache/commons/math/random/MersenneTwister.java",
        "signature": "org.apache.commons.math.random.MersenneTwister.mt",
        "snippet": "    private int[] mt;",
        "begin_line": 97,
        "end_line": 97,
        "comment": " Bytes pool. "
    },
    {
        "class_name": "org.apache.commons.math.random.MersenneTwister",
        "src_path": "src/main/java/org/apache/commons/math/random/MersenneTwister.java",
        "signature": "org.apache.commons.math.random.MersenneTwister.mti",
        "snippet": "    private int   mti;",
        "begin_line": 100,
        "end_line": 100,
        "comment": " Current index in the bytes pool. "
    }
]