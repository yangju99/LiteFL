[
    {
        "class_name": "org.apache.commons.math.util.FastMathTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/util/FastMathTest.java",
        "signature": "org.apache.commons.math.util.FastMathTest.setUp()",
        "snippet": "    @Before\n    public void setUp() {\n        field = new DfpField(40);\n        generator = new MersenneTwister(6176597458463500194l);\n    }\n",
        "begin_line": 37,
        "end_line": 41,
        "comment": "",
        "child_ranges": [
            "(line 39,col 9)-(line 39,col 33)",
            "(line 40,col 9)-(line 40,col 62)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.util.FastMathTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/util/FastMathTest.java",
        "signature": "org.apache.commons.math.util.FastMathTest.testMinMaxDouble()",
        "snippet": "    @Test\n    public void testMinMaxDouble() {\n        double[][] pairs = {\n            { -50.0, 50.0 },\n            {  Double.POSITIVE_INFINITY, 1.0 },\n            {  Double.NEGATIVE_INFINITY, 1.0 },\n            {  Double.NaN, 1.0 },\n            {  Double.POSITIVE_INFINITY, 0.0 },\n            {  Double.NEGATIVE_INFINITY, 0.0 },\n            {  Double.NaN, 0.0 },\n            {  Double.NaN, Double.NEGATIVE_INFINITY },\n            {  Double.NaN, Double.POSITIVE_INFINITY },\n            { MathUtils.SAFE_MIN, MathUtils.EPSILON }\n        };\n        for (double[] pair : pairs) {\n            Assert.assertEquals(\"min(\" + pair[0] + \", \" + pair[1] + \")\",\n                                Math.min(pair[0], pair[1]),\n                                FastMath.min(pair[0], pair[1]),\n                                MathUtils.EPSILON);\n            Assert.assertEquals(\"min(\" + pair[1] + \", \" + pair[0] + \")\",\n                                Math.min(pair[1], pair[0]),\n                                FastMath.min(pair[1], pair[0]),\n                                MathUtils.EPSILON);\n            Assert.assertEquals(\"max(\" + pair[0] + \", \" + pair[1] + \")\",\n                                Math.max(pair[0], pair[1]),\n                                FastMath.max(pair[0], pair[1]),\n                                MathUtils.EPSILON);\n            Assert.assertEquals(\"max(\" + pair[1] + \", \" + pair[0] + \")\",\n                                Math.max(pair[1], pair[0]),\n                                FastMath.max(pair[1], pair[0]),\n                                MathUtils.EPSILON);\n        }\n    }\n",
        "begin_line": 43,
        "end_line": 75,
        "comment": "",
        "child_ranges": [
            "(line 45,col 9)-(line 56,col 10)",
            "(line 57,col 9)-(line 74,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.util.FastMathTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/util/FastMathTest.java",
        "signature": "org.apache.commons.math.util.FastMathTest.testMinMaxFloat()",
        "snippet": "    @Test\n    public void testMinMaxFloat() {\n        float[][] pairs = {\n            { -50.0f, 50.0f },\n            {  Float.POSITIVE_INFINITY, 1.0f },\n            {  Float.NEGATIVE_INFINITY, 1.0f },\n            {  Float.NaN, 1.0f },\n            {  Float.POSITIVE_INFINITY, 0.0f },\n            {  Float.NEGATIVE_INFINITY, 0.0f },\n            {  Float.NaN, 0.0f },\n            {  Float.NaN, Float.NEGATIVE_INFINITY },\n            {  Float.NaN, Float.POSITIVE_INFINITY }\n        };\n        for (float[] pair : pairs) {\n            Assert.assertEquals(\"min(\" + pair[0] + \", \" + pair[1] + \")\",\n                                Math.min(pair[0], pair[1]),\n                                FastMath.min(pair[0], pair[1]),\n                                MathUtils.EPSILON);\n            Assert.assertEquals(\"min(\" + pair[1] + \", \" + pair[0] + \")\",\n                                Math.min(pair[1], pair[0]),\n                                FastMath.min(pair[1], pair[0]),\n                                MathUtils.EPSILON);\n            Assert.assertEquals(\"max(\" + pair[0] + \", \" + pair[1] + \")\",\n                                Math.max(pair[0], pair[1]),\n                                FastMath.max(pair[0], pair[1]),\n                                MathUtils.EPSILON);\n            Assert.assertEquals(\"max(\" + pair[1] + \", \" + pair[0] + \")\",\n                                Math.max(pair[1], pair[0]),\n                                FastMath.max(pair[1], pair[0]),\n                                MathUtils.EPSILON);\n        }\n    }\n",
        "begin_line": 77,
        "end_line": 108,
        "comment": "",
        "child_ranges": [
            "(line 79,col 9)-(line 89,col 10)",
            "(line 90,col 9)-(line 107,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.util.FastMathTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/util/FastMathTest.java",
        "signature": "org.apache.commons.math.util.FastMathTest.testConstants()",
        "snippet": "    @Test\n    public void testConstants() {\n        Assert.assertEquals(Math.PI, FastMath.PI, 1.0e-20);\n        Assert.assertEquals(Math.E, FastMath.E, 1.0e-20);\n    }\n",
        "begin_line": 110,
        "end_line": 114,
        "comment": "",
        "child_ranges": [
            "(line 112,col 9)-(line 112,col 59)",
            "(line 113,col 9)-(line 113,col 57)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.util.FastMathTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/util/FastMathTest.java",
        "signature": "org.apache.commons.math.util.FastMathTest.testAtan2()",
        "snippet": "    @Test\n    public void testAtan2() {\n        double y1 = 1.2713504628280707e10;\n        double x1 = -5.674940885228782e-10;\n        Assert.assertEquals(Math.atan2(y1, x1), FastMath.atan2(y1, x1), 2 * MathUtils.EPSILON);\n        double y2 = 0.0;\n        double x2 = Double.POSITIVE_INFINITY;\n        Assert.assertEquals(Math.atan2(y2, x2), FastMath.atan2(y2, x2), MathUtils.SAFE_MIN);\n    }\n",
        "begin_line": 116,
        "end_line": 124,
        "comment": "",
        "child_ranges": [
            "(line 118,col 9)-(line 118,col 42)",
            "(line 119,col 9)-(line 119,col 43)",
            "(line 120,col 9)-(line 120,col 95)",
            "(line 121,col 9)-(line 121,col 24)",
            "(line 122,col 9)-(line 122,col 45)",
            "(line 123,col 9)-(line 123,col 92)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.util.FastMathTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/util/FastMathTest.java",
        "signature": "org.apache.commons.math.util.FastMathTest.testHyperbolic()",
        "snippet": "    @Test\n    public void testHyperbolic() {\n        double maxErr = 0;\n        for (double x = -30; x < 30; x += 0.001) {\n            double tst = FastMath.sinh(x);\n            double ref = Math.sinh(x);\n            maxErr = FastMath.max(maxErr, FastMath.abs(ref - tst) / FastMath.ulp(ref));\n        }\n        Assert.assertEquals(0, maxErr, 2);\n\n        maxErr = 0;\n        for (double x = -30; x < 30; x += 0.001) {\n            double tst = FastMath.cosh(x);\n            double ref = Math.cosh(x);\n            maxErr = FastMath.max(maxErr, FastMath.abs(ref - tst) / FastMath.ulp(ref));\n        }\n        Assert.assertEquals(0, maxErr, 2);\n\n        maxErr = 0;\n        for (double x = -0.5; x < 0.5; x += 0.001) {\n            double tst = FastMath.tanh(x);\n            double ref = Math.tanh(x);\n            maxErr = FastMath.max(maxErr, FastMath.abs(ref - tst) / FastMath.ulp(ref));\n        }\n        Assert.assertEquals(0, maxErr, 4);\n\n    }\n",
        "begin_line": 126,
        "end_line": 152,
        "comment": "",
        "child_ranges": [
            "(line 128,col 9)-(line 128,col 26)",
            "(line 129,col 9)-(line 133,col 9)",
            "(line 134,col 9)-(line 134,col 42)",
            "(line 136,col 9)-(line 136,col 19)",
            "(line 137,col 9)-(line 141,col 9)",
            "(line 142,col 9)-(line 142,col 42)",
            "(line 144,col 9)-(line 144,col 19)",
            "(line 145,col 9)-(line 149,col 9)",
            "(line 150,col 9)-(line 150,col 42)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.util.FastMathTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/util/FastMathTest.java",
        "signature": "org.apache.commons.math.util.FastMathTest.testHyperbolicInverses()",
        "snippet": "    @Test\n    public void testHyperbolicInverses() {\n        double maxErr = 0;\n        for (double x = -30; x < 30; x += 0.01) {\n            maxErr = FastMath.max(maxErr, FastMath.abs(x - FastMath.sinh(FastMath.asinh(x))) / (2 * FastMath.ulp(x)));\n        }\n        Assert.assertEquals(0, maxErr, 3);\n\n        maxErr = 0;\n        for (double x = 1; x < 30; x += 0.01) {\n            maxErr = FastMath.max(maxErr, FastMath.abs(x - FastMath.cosh(FastMath.acosh(x))) / (2 * FastMath.ulp(x)));\n        }\n        Assert.assertEquals(0, maxErr, 2);\n\n        maxErr = 0;\n        for (double x = -1 + MathUtils.EPSILON; x < 1 - MathUtils.EPSILON; x += 0.0001) {\n            maxErr = FastMath.max(maxErr, FastMath.abs(x - FastMath.tanh(FastMath.atanh(x))) / (2 * FastMath.ulp(x)));\n        }\n        Assert.assertEquals(0, maxErr, 2);\n\n    }\n",
        "begin_line": 154,
        "end_line": 174,
        "comment": "",
        "child_ranges": [
            "(line 156,col 9)-(line 156,col 26)",
            "(line 157,col 9)-(line 159,col 9)",
            "(line 160,col 9)-(line 160,col 42)",
            "(line 162,col 9)-(line 162,col 19)",
            "(line 163,col 9)-(line 165,col 9)",
            "(line 166,col 9)-(line 166,col 42)",
            "(line 168,col 9)-(line 168,col 19)",
            "(line 169,col 9)-(line 171,col 9)",
            "(line 172,col 9)-(line 172,col 42)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.util.FastMathTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/util/FastMathTest.java",
        "signature": "org.apache.commons.math.util.FastMathTest.testLogAccuracy()",
        "snippet": "    @Test\n    public void testLogAccuracy() {\n        double maxerrulp = 0.0;\n\n        for (int i = 0; i < NUMBER_OF_TRIALS; i++) {\n            double x = Math.exp(generator.nextDouble() * 1416.0 - 708.0) * generator.nextDouble();\n            // double x = generator.nextDouble()*2.0;\n            double tst = FastMath.log(x);\n            double ref = DfpMath.log(field.newDfp(x)).toDouble();\n            double err = (tst - ref) / ref;\n\n            if (err != 0.0) {\n                double ulp = Math.abs(ref -\n                                      Double.longBitsToDouble((Double\n                                          .doubleToLongBits(ref) ^ 1)));\n                double errulp = field.newDfp(tst).subtract(DfpMath.log(field.newDfp(x))).divide(field.newDfp(ulp)).toDouble();\n//                System.out.println(x + \"\\t\" + tst + \"\\t\" + ref + \"\\t\" + err + \"\\t\" + errulp);\n\n                maxerrulp = Math.max(maxerrulp, Math.abs(errulp));\n            }\n        }\n\n        Assert.assertTrue(\"log() had errors in excess of \" + MAX_ERROR_ULP + \" ULP\", maxerrulp < MAX_ERROR_ULP);\n    }\n",
        "begin_line": 176,
        "end_line": 199,
        "comment": "",
        "child_ranges": [
            "(line 178,col 9)-(line 178,col 31)",
            "(line 180,col 9)-(line 196,col 9)",
            "(line 198,col 9)-(line 198,col 112)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.util.FastMathTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/util/FastMathTest.java",
        "signature": "org.apache.commons.math.util.FastMathTest.testLog10Accuracy()",
        "snippet": "    @Test\n    public void testLog10Accuracy() {\n        double maxerrulp = 0.0;\n\n        for (int i = 0; i < NUMBER_OF_TRIALS; i++) {\n            double x = Math.exp(generator.nextDouble() * 1416.0 - 708.0) * generator.nextDouble();\n            // double x = generator.nextDouble()*2.0;\n            double tst = FastMath.log10(x);\n            double ref = DfpMath.log(field.newDfp(x)).divide(DfpMath.log(field.newDfp(\"10\"))).toDouble();\n            double err = (tst - ref) / ref;\n\n            if (err != 0.0) {\n                double ulp = Math.abs(ref -\n                                      Double.longBitsToDouble((Double.doubleToLongBits(ref) ^ 1)));\n                double errulp = field.newDfp(tst).subtract(DfpMath.log(field.newDfp(x)).divide(DfpMath.log(field.newDfp(\"10\")))).divide(field.newDfp(ulp)).toDouble();\n//                System.out.println(x + \"\\t\" + tst + \"\\t\" + ref + \"\\t\" + err + \"\\t\" + errulp);\n\n                maxerrulp = Math.max(maxerrulp, Math.abs(errulp));\n            }\n        }\n\n        Assert.assertTrue(\"log10() had errors in excess of \" + MAX_ERROR_ULP + \" ULP\", maxerrulp < MAX_ERROR_ULP);\n    }\n",
        "begin_line": 201,
        "end_line": 223,
        "comment": "",
        "child_ranges": [
            "(line 203,col 9)-(line 203,col 31)",
            "(line 205,col 9)-(line 220,col 9)",
            "(line 222,col 9)-(line 222,col 114)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.util.FastMathTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/util/FastMathTest.java",
        "signature": "org.apache.commons.math.util.FastMathTest.testLog1pAccuracy()",
        "snippet": "    @Test\n    public void testLog1pAccuracy() {\n        double maxerrulp = 0.0;\n\n        for (int i = 0; i < NUMBER_OF_TRIALS; i++) {\n            double x = Math.exp(generator.nextDouble() * 10.0 - 5.0) * generator.nextDouble();\n            // double x = generator.nextDouble()*2.0;\n            double tst = FastMath.log1p(x);\n            double ref = DfpMath.log(field.newDfp(x).add(field.getOne())).toDouble();\n            double err = (tst - ref) / ref;\n\n            if (err != 0.0) {\n                double ulp = Math.abs(ref -\n                                      Double.longBitsToDouble((Double.doubleToLongBits(ref) ^ 1)));\n                double errulp = field.newDfp(tst).subtract(DfpMath.log(field.newDfp(x).add(field.getOne()))).divide(field.newDfp(ulp)).toDouble();\n//                System.out.println(x + \"\\t\" + tst + \"\\t\" + ref + \"\\t\" + err + \"\\t\" + errulp);\n\n                maxerrulp = Math.max(maxerrulp, Math.abs(errulp));\n            }\n        }\n\n        Assert.assertTrue(\"log1p() had errors in excess of \" + MAX_ERROR_ULP + \" ULP\", maxerrulp < MAX_ERROR_ULP);\n    }\n",
        "begin_line": 225,
        "end_line": 247,
        "comment": "",
        "child_ranges": [
            "(line 227,col 9)-(line 227,col 31)",
            "(line 229,col 9)-(line 244,col 9)",
            "(line 246,col 9)-(line 246,col 114)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.util.FastMathTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/util/FastMathTest.java",
        "signature": "org.apache.commons.math.util.FastMathTest.testLogSpecialCases()",
        "snippet": "    @Test\n    public void testLogSpecialCases() {\n        double x;\n\n        x = FastMath.log(0.0);\n        if (x != Double.NEGATIVE_INFINITY)\n            throw new RuntimeException(\"Log of zero should be -Inf\");\n\n        x = FastMath.log(-0.0);\n        if (x != Double.NEGATIVE_INFINITY)\n            throw new RuntimeException(\"Log of zero should be -Inf\");\n\n        x = FastMath.log(Double.NaN);\n        if (x == x)\n            throw new RuntimeException(\"Log of NaN should be NaN\");\n\n        x = FastMath.log(-1.0);\n        if (x == x)\n            throw new RuntimeException(\"Log of negative number should be NaN\");\n\n        x = FastMath.log(Double.MIN_VALUE);\n        if (x != -744.4400719213812)\n            throw new RuntimeException(\n                                       \"Log of Double.MIN_VALUE should be -744.4400719213812\");\n\n        x = FastMath.log(-1.0);\n        if (x == x)\n            throw new RuntimeException(\"Log of negative number should be NaN\");\n\n        x = FastMath.log(Double.POSITIVE_INFINITY);\n        if (x != Double.POSITIVE_INFINITY)\n            throw new RuntimeException(\"Log of infinity should be infinity\");\n    }\n",
        "begin_line": 249,
        "end_line": 281,
        "comment": "",
        "child_ranges": [
            "(line 251,col 9)-(line 251,col 17)",
            "(line 253,col 9)-(line 253,col 30)",
            "(line 254,col 9)-(line 255,col 69)",
            "(line 257,col 9)-(line 257,col 31)",
            "(line 258,col 9)-(line 259,col 69)",
            "(line 261,col 9)-(line 261,col 37)",
            "(line 262,col 9)-(line 263,col 67)",
            "(line 265,col 9)-(line 265,col 31)",
            "(line 266,col 9)-(line 267,col 79)",
            "(line 269,col 9)-(line 269,col 43)",
            "(line 270,col 9)-(line 272,col 95)",
            "(line 274,col 9)-(line 274,col 31)",
            "(line 275,col 9)-(line 276,col 79)",
            "(line 278,col 9)-(line 278,col 51)",
            "(line 279,col 9)-(line 280,col 77)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.util.FastMathTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/util/FastMathTest.java",
        "signature": "org.apache.commons.math.util.FastMathTest.testExpSpecialCases()",
        "snippet": "    @Test\n    public void testExpSpecialCases() {\n        double x;\n\n        /* Smallest value that will round up to Double.MIN_VALUE */\n        x = FastMath.exp(-745.1332191019411);\n        if (x != Double.MIN_VALUE)\n            throw new RuntimeException(\n                                       \"exp(-745.1332191019411) should be Double.MIN_VALUE\");\n\n        x = FastMath.exp(-745.1332191019412);\n        if (x != 0.0)\n            throw new RuntimeException(\"exp(-745.1332191019412) should be 0.0\");\n\n        x = FastMath.exp(Double.NaN);\n        if (x == x)\n            throw new RuntimeException(\"exp of NaN should be NaN\");\n\n        x = FastMath.exp(Double.POSITIVE_INFINITY);\n        if (x != Double.POSITIVE_INFINITY)\n            throw new RuntimeException(\"exp of infinity should be infinity\");\n\n        x = FastMath.exp(Double.NEGATIVE_INFINITY);\n        if (x != 0.0)\n            throw new RuntimeException(\"exp of -infinity should be 0.0\");\n\n        x = FastMath.exp(1.0);\n        if (x != Math.E)\n            throw new RuntimeException(\"exp(1) should be Math.E\");\n    }\n",
        "begin_line": 283,
        "end_line": 312,
        "comment": "",
        "child_ranges": [
            "(line 285,col 9)-(line 285,col 17)",
            "(line 288,col 9)-(line 288,col 45)",
            "(line 289,col 9)-(line 291,col 93)",
            "(line 293,col 9)-(line 293,col 45)",
            "(line 294,col 9)-(line 295,col 80)",
            "(line 297,col 9)-(line 297,col 37)",
            "(line 298,col 9)-(line 299,col 67)",
            "(line 301,col 9)-(line 301,col 51)",
            "(line 302,col 9)-(line 303,col 77)",
            "(line 305,col 9)-(line 305,col 51)",
            "(line 306,col 9)-(line 307,col 73)",
            "(line 309,col 9)-(line 309,col 30)",
            "(line 310,col 9)-(line 311,col 66)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.util.FastMathTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/util/FastMathTest.java",
        "signature": "org.apache.commons.math.util.FastMathTest.testPowSpecialCases()",
        "snippet": "    @Test\n    public void testPowSpecialCases() {\n        double x;\n\n        x = FastMath.pow(-1.0, 0.0);\n        if (x != 1.0)\n            throw new RuntimeException(\"pow(x, 0) should be 1.0\");\n\n        x = FastMath.pow(-1.0, -0.0);\n        if (x != 1.0)\n            throw new RuntimeException(\"pow(x, -0) should be 1.0\");\n\n        x = FastMath.pow(Math.PI, 1.0);\n        if (x != Math.PI)\n            throw new RuntimeException(\"pow(PI, 1.0) should be PI\");\n\n        x = FastMath.pow(-Math.PI, 1.0);\n        if (x != -Math.PI)\n            throw new RuntimeException(\"pow(-PI, 1.0) should be PI\");\n\n        x = FastMath.pow(Math.PI, Double.NaN);\n        if (x == x)\n            throw new RuntimeException(\"pow(PI, NaN) should be NaN\");\n\n        x = FastMath.pow(Double.NaN, Math.PI);\n        if (x == x)\n            throw new RuntimeException(\"pow(NaN, PI) should be NaN\");\n\n        x = FastMath.pow(2.0, Double.POSITIVE_INFINITY);\n        if (x != Double.POSITIVE_INFINITY)\n            throw new RuntimeException(\"pow(2.0, Infinity) should be Infinity\");\n\n        x = FastMath.pow(0.5, Double.NEGATIVE_INFINITY);\n        if (x != Double.POSITIVE_INFINITY)\n            throw new RuntimeException(\"pow(0.5, -Infinity) should be Infinity\");\n\n        x = FastMath.pow(0.5, Double.POSITIVE_INFINITY);\n        if (x != 0.0)\n            throw new RuntimeException(\"pow(0.5, Infinity) should be 0.0\");\n\n        x = FastMath.pow(2.0, Double.NEGATIVE_INFINITY);\n        if (x != 0.0)\n            throw new RuntimeException(\"pow(2.0, -Infinity) should be 0.0\");\n\n        x = FastMath.pow(0.0, 0.5);\n        if (x != 0.0)\n            throw new RuntimeException(\"pow(0.0, 0.5) should be 0.0\");\n\n        x = FastMath.pow(Double.POSITIVE_INFINITY, -0.5);\n        if (x != 0.0)\n            throw new RuntimeException(\"pow(Inf, -0.5) should be 0.0\");\n\n        x = FastMath.pow(0.0, -0.5);\n        if (x != Double.POSITIVE_INFINITY)\n            throw new RuntimeException(\"pow(0.0, -0.5) should be Inf\");\n\n        x = FastMath.pow(Double.POSITIVE_INFINITY, 0.5);\n        if (x != Double.POSITIVE_INFINITY)\n            throw new RuntimeException(\"pow(Inf, 0.5) should be Inf\");\n\n        x = FastMath.pow(-0.0, -3.0);\n        if (x != Double.NEGATIVE_INFINITY)\n            throw new RuntimeException(\"pow(-0.0, -3.0) should be -Inf\");\n\n        x = FastMath.pow(Double.NEGATIVE_INFINITY, 3.0);\n        if (x != Double.NEGATIVE_INFINITY)\n            throw new RuntimeException(\"pow(-Inf, -3.0) should be -Inf\");\n\n        x = FastMath.pow(-0.0, -3.5);\n        if (x != Double.POSITIVE_INFINITY)\n            throw new RuntimeException(\"pow(-0.0, -3.5) should be Inf\");\n\n        x = FastMath.pow(Double.POSITIVE_INFINITY, 3.5);\n        if (x != Double.POSITIVE_INFINITY)\n            throw new RuntimeException(\"pow(Inf, 3.5) should be Inf\");\n\n        x = FastMath.pow(-2.0, 3.0);\n        if (x != -8.0)\n            throw new RuntimeException(\"pow(-2.0, 3.0) should be -8.0\");\n\n        x = FastMath.pow(-2.0, 3.5);\n        if (x == x)\n            throw new RuntimeException(\"pow(-2.0, 3.5) should be NaN\");\n    }\n",
        "begin_line": 314,
        "end_line": 397,
        "comment": "",
        "child_ranges": [
            "(line 316,col 9)-(line 316,col 17)",
            "(line 318,col 9)-(line 318,col 36)",
            "(line 319,col 9)-(line 320,col 66)",
            "(line 322,col 9)-(line 322,col 37)",
            "(line 323,col 9)-(line 324,col 67)",
            "(line 326,col 9)-(line 326,col 39)",
            "(line 327,col 9)-(line 328,col 68)",
            "(line 330,col 9)-(line 330,col 40)",
            "(line 331,col 9)-(line 332,col 69)",
            "(line 334,col 9)-(line 334,col 46)",
            "(line 335,col 9)-(line 336,col 69)",
            "(line 338,col 9)-(line 338,col 46)",
            "(line 339,col 9)-(line 340,col 69)",
            "(line 342,col 9)-(line 342,col 56)",
            "(line 343,col 9)-(line 344,col 80)",
            "(line 346,col 9)-(line 346,col 56)",
            "(line 347,col 9)-(line 348,col 81)",
            "(line 350,col 9)-(line 350,col 56)",
            "(line 351,col 9)-(line 352,col 75)",
            "(line 354,col 9)-(line 354,col 56)",
            "(line 355,col 9)-(line 356,col 76)",
            "(line 358,col 9)-(line 358,col 35)",
            "(line 359,col 9)-(line 360,col 70)",
            "(line 362,col 9)-(line 362,col 57)",
            "(line 363,col 9)-(line 364,col 71)",
            "(line 366,col 9)-(line 366,col 36)",
            "(line 367,col 9)-(line 368,col 71)",
            "(line 370,col 9)-(line 370,col 56)",
            "(line 371,col 9)-(line 372,col 70)",
            "(line 374,col 9)-(line 374,col 37)",
            "(line 375,col 9)-(line 376,col 73)",
            "(line 378,col 9)-(line 378,col 56)",
            "(line 379,col 9)-(line 380,col 73)",
            "(line 382,col 9)-(line 382,col 37)",
            "(line 383,col 9)-(line 384,col 72)",
            "(line 386,col 9)-(line 386,col 56)",
            "(line 387,col 9)-(line 388,col 70)",
            "(line 390,col 9)-(line 390,col 36)",
            "(line 391,col 9)-(line 392,col 72)",
            "(line 394,col 9)-(line 394,col 36)",
            "(line 395,col 9)-(line 396,col 71)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.util.FastMathTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/util/FastMathTest.java",
        "signature": "org.apache.commons.math.util.FastMathTest.testAtan2SpecialCases()",
        "snippet": "    @Test\n    public void testAtan2SpecialCases() {\n        double x;\n\n        x = FastMath.atan2(Double.NaN, 0.0);\n        if (x == x)\n            throw new RuntimeException(\"atan2(NaN, 0.0) should be NaN\");\n\n        x = FastMath.atan2(0.0, Double.NaN);\n        if (x == x)\n            throw new RuntimeException(\"atan2(0.0, NaN) should be NaN\");\n\n        x = FastMath.atan2(0.0, 0.0);\n        if (x != 0.0 || 1 / x != Double.POSITIVE_INFINITY)\n            throw new RuntimeException(\"atan2(0.0, 0.0) should be 0.0\");\n\n        x = FastMath.atan2(0.0, 0.001);\n        if (x != 0.0 || 1 / x != Double.POSITIVE_INFINITY)\n            throw new RuntimeException(\"atan2(0.0, 0.001) should be 0.0\");\n\n        x = FastMath.atan2(0.1, Double.POSITIVE_INFINITY);\n        if (x != 0.0 || 1 / x != Double.POSITIVE_INFINITY)\n            throw new RuntimeException(\"atan2(0.1, +Inf) should be 0.0\");\n\n        x = FastMath.atan2(-0.0, 0.0);\n        if (x != 0.0 || 1 / x != Double.NEGATIVE_INFINITY)\n            throw new RuntimeException(\"atan2(-0.0, 0.0) should be -0.0\");\n\n        x = FastMath.atan2(-0.0, 0.001);\n        if (x != 0.0 || 1 / x != Double.NEGATIVE_INFINITY)\n            throw new RuntimeException(\"atan2(-0.0, 0.001) should be -0.0\");\n\n        x = FastMath.atan2(-0.1, Double.POSITIVE_INFINITY);\n        if (x != 0.0 || 1 / x != Double.NEGATIVE_INFINITY)\n            throw new RuntimeException(\"atan2(-0.0, +Inf) should be -0.0\");\n\n        x = FastMath.atan2(0.0, -0.0);\n        if (x != Math.PI)\n            throw new RuntimeException(\"atan2(0.0, -0.0) should be PI\");\n\n        x = FastMath.atan2(0.1, Double.NEGATIVE_INFINITY);\n        if (x != Math.PI)\n            throw new RuntimeException(\"atan2(0.1, -Inf) should be PI\");\n\n        x = FastMath.atan2(-0.0, -0.0);\n        if (x != -Math.PI)\n            throw new RuntimeException(\"atan2(-0.0, -0.0) should be -PI\");\n\n        x = FastMath.atan2(-0.1, Double.NEGATIVE_INFINITY);\n        if (x != -Math.PI)\n            throw new RuntimeException(\"atan2(0.1, -Inf) should be -PI\");\n\n        x = FastMath.atan2(0.1, 0.0);\n        if (x != Math.PI / 2)\n            throw new RuntimeException(\"atan2(0.1, 0.0) should be PI/2\");\n\n        x = FastMath.atan2(0.1, -0.0);\n        if (x != Math.PI / 2)\n            throw new RuntimeException(\"atan2(0.1, -0.0) should be PI/2\");\n\n        x = FastMath.atan2(Double.POSITIVE_INFINITY, 0.1);\n        if (x != Math.PI / 2)\n            throw new RuntimeException(\"atan2(Inf, 0.1) should be PI/2\");\n\n        x = FastMath.atan2(Double.POSITIVE_INFINITY, -0.1);\n        if (x != Math.PI / 2)\n            throw new RuntimeException(\"atan2(Inf, -0.1) should be PI/2\");\n\n        x = FastMath.atan2(-0.1, 0.0);\n        if (x != -Math.PI / 2)\n            throw new RuntimeException(\"atan2(-0.1, 0.0) should be -PI/2\");\n\n        x = FastMath.atan2(-0.1, -0.0);\n        if (x != -Math.PI / 2)\n            throw new RuntimeException(\"atan2(-0.1, -0.0) should be -PI/2\");\n\n        x = FastMath.atan2(Double.NEGATIVE_INFINITY, 0.1);\n        if (x != -Math.PI / 2)\n            throw new RuntimeException(\"atan2(-Inf, 0.1) should be -PI/2\");\n\n        x = FastMath.atan2(Double.NEGATIVE_INFINITY, -0.1);\n        if (x != -Math.PI / 2)\n            throw new RuntimeException(\"atan2(-Inf, -0.1) should be -PI/2\");\n\n        x = FastMath.atan2(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);\n        if (x != Math.PI / 4)\n            throw new RuntimeException(\"atan2(Inf, Inf) should be PI/4\");\n\n        x = FastMath.atan2(Double.POSITIVE_INFINITY, Double.NEGATIVE_INFINITY);\n        if (x != Math.PI * 3.0 / 4.0)\n            throw new RuntimeException(\"atan2(Inf, -Inf) should be PI * 3/4\");\n\n        x = FastMath.atan2(Double.NEGATIVE_INFINITY, Double.POSITIVE_INFINITY);\n        if (x != -Math.PI / 4)\n            throw new RuntimeException(\"atan2(-Inf, Inf) should be -PI/4\");\n\n        x = FastMath.atan2(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY);\n        if (x != -Math.PI * 3.0 / 4.0)\n            throw new RuntimeException(\"atan2(-Inf, -Inf) should be -PI * 3/4\");\n    }\n",
        "begin_line": 399,
        "end_line": 498,
        "comment": "",
        "child_ranges": [
            "(line 401,col 9)-(line 401,col 17)",
            "(line 403,col 9)-(line 403,col 44)",
            "(line 404,col 9)-(line 405,col 72)",
            "(line 407,col 9)-(line 407,col 44)",
            "(line 408,col 9)-(line 409,col 72)",
            "(line 411,col 9)-(line 411,col 37)",
            "(line 412,col 9)-(line 413,col 72)",
            "(line 415,col 9)-(line 415,col 39)",
            "(line 416,col 9)-(line 417,col 74)",
            "(line 419,col 9)-(line 419,col 58)",
            "(line 420,col 9)-(line 421,col 73)",
            "(line 423,col 9)-(line 423,col 38)",
            "(line 424,col 9)-(line 425,col 74)",
            "(line 427,col 9)-(line 427,col 40)",
            "(line 428,col 9)-(line 429,col 76)",
            "(line 431,col 9)-(line 431,col 59)",
            "(line 432,col 9)-(line 433,col 75)",
            "(line 435,col 9)-(line 435,col 38)",
            "(line 436,col 9)-(line 437,col 72)",
            "(line 439,col 9)-(line 439,col 58)",
            "(line 440,col 9)-(line 441,col 72)",
            "(line 443,col 9)-(line 443,col 39)",
            "(line 444,col 9)-(line 445,col 74)",
            "(line 447,col 9)-(line 447,col 59)",
            "(line 448,col 9)-(line 449,col 73)",
            "(line 451,col 9)-(line 451,col 37)",
            "(line 452,col 9)-(line 453,col 73)",
            "(line 455,col 9)-(line 455,col 38)",
            "(line 456,col 9)-(line 457,col 74)",
            "(line 459,col 9)-(line 459,col 58)",
            "(line 460,col 9)-(line 461,col 73)",
            "(line 463,col 9)-(line 463,col 59)",
            "(line 464,col 9)-(line 465,col 74)",
            "(line 467,col 9)-(line 467,col 38)",
            "(line 468,col 9)-(line 469,col 75)",
            "(line 471,col 9)-(line 471,col 39)",
            "(line 472,col 9)-(line 473,col 76)",
            "(line 475,col 9)-(line 475,col 58)",
            "(line 476,col 9)-(line 477,col 75)",
            "(line 479,col 9)-(line 479,col 59)",
            "(line 480,col 9)-(line 481,col 76)",
            "(line 483,col 9)-(line 483,col 79)",
            "(line 484,col 9)-(line 485,col 73)",
            "(line 487,col 9)-(line 487,col 79)",
            "(line 488,col 9)-(line 489,col 78)",
            "(line 491,col 9)-(line 491,col 79)",
            "(line 492,col 9)-(line 493,col 75)",
            "(line 495,col 9)-(line 495,col 79)",
            "(line 496,col 9)-(line 497,col 80)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.util.FastMathTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/util/FastMathTest.java",
        "signature": "org.apache.commons.math.util.FastMathTest.testPowAccuracy()",
        "snippet": "    @Test\n    public void testPowAccuracy() {\n        double maxerrulp = 0.0;\n\n        for (int i = 0; i < NUMBER_OF_TRIALS; i++) {\n            double x = (generator.nextDouble() * 2.0 + 0.25);\n            double y = (generator.nextDouble() * 1200.0 - 600.0) * generator.nextDouble();\n            /*\n             * double x = FastMath.floor(generator.nextDouble()*1024.0 - 512.0); double\n             * y; if (x != 0) y = FastMath.floor(512.0 / FastMath.abs(x)); else\n             * y = generator.nextDouble()*1200.0; y = y - y/2; x = FastMath.pow(2.0, x) *\n             * generator.nextDouble(); y = y * generator.nextDouble();\n             */\n\n            // double x = generator.nextDouble()*2.0;\n            double tst = FastMath.pow(x, y);\n            double ref = DfpMath.pow(field.newDfp(x), field.newDfp(y)).toDouble();\n            double err = (tst - ref) / ref;\n\n            if (err != 0) {\n                double ulp = Math.abs(ref -\n                                      Double.longBitsToDouble((Double\n                                          .doubleToLongBits(ref) ^ 1)));\n                double errulp = field.newDfp(tst).subtract(DfpMath.pow(field.newDfp(x), field.newDfp(y))).divide(field.newDfp(ulp)).toDouble();\n//                System.out.println(x + \"\\t\" + y + \"\\t\" + tst + \"\\t\" + ref + \"\\t\" + err + \"\\t\" + errulp);\n\n                maxerrulp = Math.max(maxerrulp, Math.abs(errulp));\n            }\n        }\n\n        Assert.assertTrue(\"pow() had errors in excess of \" + MAX_ERROR_ULP + \" ULP\", maxerrulp < MAX_ERROR_ULP);\n    }\n",
        "begin_line": 500,
        "end_line": 531,
        "comment": "",
        "child_ranges": [
            "(line 502,col 9)-(line 502,col 31)",
            "(line 504,col 9)-(line 528,col 9)",
            "(line 530,col 9)-(line 530,col 112)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.util.FastMathTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/util/FastMathTest.java",
        "signature": "org.apache.commons.math.util.FastMathTest.testExpAccuracy()",
        "snippet": "    @Test\n    public void testExpAccuracy() {\n        double maxerrulp = 0.0;\n\n        for (int i = 0; i < NUMBER_OF_TRIALS; i++) {\n            /* double x = 1.0 + i/1024.0/2.0; */\n            double x = ((generator.nextDouble() * 1416.0) - 708.0) * generator.nextDouble();\n            // double x = (generator.nextDouble() * 20.0) - 10.0;\n            // double x = ((generator.nextDouble() * 2.0) - 1.0) * generator.nextDouble();\n            /* double x = 3.0 / 512.0 * i - 3.0; */\n            double tst = FastMath.exp(x);\n            double ref = DfpMath.exp(field.newDfp(x)).toDouble();\n            double err = (tst - ref) / ref;\n\n            if (err != 0) {\n                double ulp = Math.abs(ref -\n                                      Double.longBitsToDouble((Double.doubleToLongBits(ref) ^ 1)));\n                double errulp = field.newDfp(tst).subtract(DfpMath.exp(field.newDfp(x))).divide(field.newDfp(ulp)).toDouble();\n//                System.out.println(x + \"\\t\" + tst + \"\\t\" + ref + \"\\t\" + err + \"\\t\" + errulp);\n\n                maxerrulp = Math.max(maxerrulp, Math.abs(errulp));\n            }\n        }\n\n        Assert.assertTrue(\"exp() had errors in excess of \" + MAX_ERROR_ULP + \" ULP\", maxerrulp < MAX_ERROR_ULP);\n    }\n",
        "begin_line": 533,
        "end_line": 558,
        "comment": "",
        "child_ranges": [
            "(line 535,col 9)-(line 535,col 31)",
            "(line 537,col 9)-(line 555,col 9)",
            "(line 557,col 9)-(line 557,col 112)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.util.FastMathTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/util/FastMathTest.java",
        "signature": "org.apache.commons.math.util.FastMathTest.testSinAccuracy()",
        "snippet": "    @Test\n    public void testSinAccuracy() {\n        double maxerrulp = 0.0;\n\n        for (int i = 0; i < NUMBER_OF_TRIALS; i++) {\n            /* double x = 1.0 + i/1024.0/2.0; */\n            // double x = ((generator.nextDouble() * 1416.0) - 708.0) * generator.nextDouble();\n            double x = ((generator.nextDouble() * Math.PI) - Math.PI / 2.0) *\n                       Math.pow(2, 21) * generator.nextDouble();\n            // double x = (generator.nextDouble() * 20.0) - 10.0;\n            // double x = ((generator.nextDouble() * 2.0) - 1.0) * generator.nextDouble();\n            /* double x = 3.0 / 512.0 * i - 3.0; */\n            double tst = FastMath.sin(x);\n            double ref = DfpMath.sin(field.newDfp(x)).toDouble();\n            double err = (tst - ref) / ref;\n\n            if (err != 0) {\n                double ulp = Math.abs(ref -\n                                      Double.longBitsToDouble((Double.doubleToLongBits(ref) ^ 1)));\n                double errulp = field.newDfp(tst).subtract(DfpMath.sin(field.newDfp(x))).divide(field.newDfp(ulp)).toDouble();\n//                System.out.println(x + \"\\t\" + tst + \"\\t\" + ref + \"\\t\" + err + \"\\t\" + errulp);\n\n                maxerrulp = Math.max(maxerrulp, Math.abs(errulp));\n            }\n        }\n\n        Assert.assertTrue(\"sin() had errors in excess of \" + MAX_ERROR_ULP + \" ULP\", maxerrulp < MAX_ERROR_ULP);\n    }\n",
        "begin_line": 560,
        "end_line": 587,
        "comment": "",
        "child_ranges": [
            "(line 562,col 9)-(line 562,col 31)",
            "(line 564,col 9)-(line 584,col 9)",
            "(line 586,col 9)-(line 586,col 112)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.util.FastMathTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/util/FastMathTest.java",
        "signature": "org.apache.commons.math.util.FastMathTest.testCosAccuracy()",
        "snippet": "    @Test\n    public void testCosAccuracy() {\n        double maxerrulp = 0.0;\n\n        for (int i = 0; i < NUMBER_OF_TRIALS; i++) {\n            /* double x = 1.0 + i/1024.0/2.0; */\n            // double x = ((generator.nextDouble() * 1416.0) - 708.0) * generator.nextDouble();\n            double x = ((generator.nextDouble() * Math.PI) - Math.PI / 2.0) *\n                       Math.pow(2, 21) * generator.nextDouble();\n            // double x = (generator.nextDouble() * 20.0) - 10.0;\n            // double x = ((generator.nextDouble() * 2.0) - 1.0) * generator.nextDouble();\n            /* double x = 3.0 / 512.0 * i - 3.0; */\n            double tst = FastMath.cos(x);\n            double ref = DfpMath.cos(field.newDfp(x)).toDouble();\n            double err = (tst - ref) / ref;\n\n            if (err != 0) {\n                double ulp = Math.abs(ref -\n                                      Double.longBitsToDouble((Double.doubleToLongBits(ref) ^ 1)));\n                double errulp = field.newDfp(tst).subtract(DfpMath.cos(field.newDfp(x))).divide(field.newDfp(ulp)).toDouble();\n//                System.out.println(x + \"\\t\" + tst + \"\\t\" + ref + \"\\t\" + err + \"\\t\" + errulp);\n\n                maxerrulp = Math.max(maxerrulp, Math.abs(errulp));\n            }\n        }\n\n        Assert.assertTrue(\"cos() had errors in excess of \" + MAX_ERROR_ULP + \" ULP\", maxerrulp < MAX_ERROR_ULP);\n    }\n",
        "begin_line": 589,
        "end_line": 616,
        "comment": "",
        "child_ranges": [
            "(line 591,col 9)-(line 591,col 31)",
            "(line 593,col 9)-(line 613,col 9)",
            "(line 615,col 9)-(line 615,col 112)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.util.FastMathTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/util/FastMathTest.java",
        "signature": "org.apache.commons.math.util.FastMathTest.testTanAccuracy()",
        "snippet": "    @Test\n    public void testTanAccuracy() {\n        double maxerrulp = 0.0;\n\n        for (int i = 0; i < NUMBER_OF_TRIALS; i++) {\n            /* double x = 1.0 + i/1024.0/2.0; */\n            // double x = ((generator.nextDouble() * 1416.0) - 708.0) * generator.nextDouble();\n            double x = ((generator.nextDouble() * Math.PI) - Math.PI / 2.0) *\n                       Math.pow(2, 12) * generator.nextDouble();\n            // double x = (generator.nextDouble() * 20.0) - 10.0;\n            // double x = ((generator.nextDouble() * 2.0) - 1.0) * generator.nextDouble();\n            /* double x = 3.0 / 512.0 * i - 3.0; */\n            double tst = FastMath.tan(x);\n            double ref = DfpMath.tan(field.newDfp(x)).toDouble();\n            double err = (tst - ref) / ref;\n\n            if (err != 0) {\n                double ulp = Math.abs(ref -\n                                      Double.longBitsToDouble((Double.doubleToLongBits(ref) ^ 1)));\n                double errulp = field.newDfp(tst).subtract(DfpMath.tan(field.newDfp(x))).divide(field.newDfp(ulp)).toDouble();\n//                System.out.println(x + \"\\t\" + tst + \"\\t\" + ref + \"\\t\" + err + \"\\t\" + errulp);\n\n                maxerrulp = Math.max(maxerrulp, Math.abs(errulp));\n            }\n        }\n\n        Assert.assertTrue(\"tan() had errors in excess of \" + MAX_ERROR_ULP + \" ULP\", maxerrulp < MAX_ERROR_ULP);\n    }\n",
        "begin_line": 618,
        "end_line": 645,
        "comment": "",
        "child_ranges": [
            "(line 620,col 9)-(line 620,col 31)",
            "(line 622,col 9)-(line 642,col 9)",
            "(line 644,col 9)-(line 644,col 112)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.util.FastMathTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/util/FastMathTest.java",
        "signature": "org.apache.commons.math.util.FastMathTest.testAtanAccuracy()",
        "snippet": "    @Test\n    public void testAtanAccuracy() {\n        double maxerrulp = 0.0;\n\n        for (int i = 0; i < NUMBER_OF_TRIALS; i++) {\n            /* double x = 1.0 + i/1024.0/2.0; */\n            // double x = ((generator.nextDouble() * 1416.0) - 708.0) * generator.nextDouble();\n            // double x = ((generator.nextDouble() * Math.PI) - Math.PI/2.0) *\n            // generator.nextDouble();\n            double x = ((generator.nextDouble() * 16.0) - 8.0) * generator.nextDouble();\n\n            // double x = (generator.nextDouble() * 20.0) - 10.0;\n            // double x = ((generator.nextDouble() * 2.0) - 1.0) * generator.nextDouble();\n            /* double x = 3.0 / 512.0 * i - 3.0; */\n            double tst = FastMath.atan(x);\n            double ref = DfpMath.atan(field.newDfp(x)).toDouble();\n            double err = (tst - ref) / ref;\n\n            if (err != 0) {\n                double ulp = Math.abs(ref -\n                                      Double.longBitsToDouble((Double.doubleToLongBits(ref) ^ 1)));\n                double errulp = field.newDfp(tst).subtract(DfpMath.atan(field.newDfp(x))).divide(field.newDfp(ulp)).toDouble();\n//                System.out.println(x + \"\\t\" + tst + \"\\t\" + ref + \"\\t\" + err + \"\\t\" + errulp);\n\n                maxerrulp = Math.max(maxerrulp, Math.abs(errulp));\n            }\n        }\n\n        Assert.assertTrue(\"atan() had errors in excess of \" + MAX_ERROR_ULP + \" ULP\", maxerrulp < MAX_ERROR_ULP);\n    }\n",
        "begin_line": 647,
        "end_line": 676,
        "comment": "",
        "child_ranges": [
            "(line 649,col 9)-(line 649,col 31)",
            "(line 651,col 9)-(line 673,col 9)",
            "(line 675,col 9)-(line 675,col 113)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.util.FastMathTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/util/FastMathTest.java",
        "signature": "org.apache.commons.math.util.FastMathTest.testAtan2Accuracy()",
        "snippet": "    @Test\n    public void testAtan2Accuracy() {\n        double maxerrulp = 0.0;\n\n        for (int i = 0; i < NUMBER_OF_TRIALS; i++) {\n            /* double x = 1.0 + i/1024.0/2.0; */\n            // double x = ((generator.nextDouble() * 1416.0) - 708.0) * generator.nextDouble();\n            double x = generator.nextDouble() - 0.5;\n            double y = generator.nextDouble() - 0.5;\n            // double x = (generator.nextDouble() * 20.0) - 10.0;\n            // double x = ((generator.nextDouble() * 2.0) - 1.0) * generator.nextDouble();\n            /* double x = 3.0 / 512.0 * i - 3.0; */\n            double tst = FastMath.atan2(y, x);\n            Dfp refdfp = DfpMath.atan(field.newDfp(y)\n                .divide(field.newDfp(x)));\n            /* Make adjustments for sign */\n            if (x < 0.0) {\n                if (y > 0.0)\n                    refdfp = field.getPi().add(refdfp);\n                else\n                    refdfp = refdfp.subtract(field.getPi());\n            }\n\n            double ref = refdfp.toDouble();\n            double err = (tst - ref) / ref;\n\n            if (err != 0) {\n                double ulp = Math.abs(ref -\n                                      Double.longBitsToDouble((Double\n                                          .doubleToLongBits(ref) ^ 1)));\n                double errulp = field.newDfp(tst).subtract(refdfp).divide(field.newDfp(ulp)).toDouble();\n//                System.out.println(x + \"\\t\" + y + \"\\t\" + tst + \"\\t\" + ref + \"\\t\" + errulp);\n\n                maxerrulp = Math.max(maxerrulp, Math.abs(errulp));\n            }\n        }\n\n        Assert.assertTrue(\"atan2() had errors in excess of \" + MAX_ERROR_ULP + \" ULP\", maxerrulp < MAX_ERROR_ULP);\n    }\n",
        "begin_line": 678,
        "end_line": 716,
        "comment": "",
        "child_ranges": [
            "(line 680,col 9)-(line 680,col 31)",
            "(line 682,col 9)-(line 713,col 9)",
            "(line 715,col 9)-(line 715,col 114)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.util.FastMathTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/util/FastMathTest.java",
        "signature": "org.apache.commons.math.util.FastMathTest.testExpm1Accuracy()",
        "snippet": "    @Test\n    public void testExpm1Accuracy() {\n        double maxerrulp = 0.0;\n\n        for (int i = 0; i < NUMBER_OF_TRIALS; i++) {\n            /* double x = 1.0 + i/1024.0/2.0; */\n            // double x = (generator.nextDouble() * 20.0) - 10.0;\n            double x = ((generator.nextDouble() * 16.0) - 8.0) * generator.nextDouble();\n            /* double x = 3.0 / 512.0 * i - 3.0; */\n            double tst = FastMath.expm1(x);\n            double ref = DfpMath.exp(field.newDfp(x)).subtract(field.getOne()).toDouble();\n            double err = (tst - ref) / ref;\n\n            if (err != 0) {\n                double ulp = Math.abs(ref -\n                                      Double.longBitsToDouble((Double\n                                          .doubleToLongBits(ref) ^ 1)));\n                double errulp = field.newDfp(tst).subtract(DfpMath.exp(field.newDfp(x)).subtract(field.getOne())).divide(field.newDfp(ulp)).toDouble();\n//                System.out.println(x + \"\\t\" + tst + \"\\t\" + ref + \"\\t\" + err + \"\\t\" + errulp);\n\n                maxerrulp = Math.max(maxerrulp, Math.abs(errulp));\n            }\n        }\n\n        Assert.assertTrue(\"expm1() had errors in excess of \" + MAX_ERROR_ULP + \" ULP\", maxerrulp < MAX_ERROR_ULP);\n    }\n",
        "begin_line": 718,
        "end_line": 743,
        "comment": "",
        "child_ranges": [
            "(line 720,col 9)-(line 720,col 31)",
            "(line 722,col 9)-(line 740,col 9)",
            "(line 742,col 9)-(line 742,col 114)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.util.FastMathTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/util/FastMathTest.java",
        "signature": "org.apache.commons.math.util.FastMathTest.testAsinAccuracy()",
        "snippet": "    @Test\n    public void testAsinAccuracy() {\n        double maxerrulp = 0.0;\n\n        for (int i=0; i<10000; i++) {\n            double x = ((generator.nextDouble() * 2.0) - 1.0) * generator.nextDouble(); \n\n            double tst = FastMath.asin(x);\n            double ref = DfpMath.asin(field.newDfp(x)).toDouble();\n            double err = (tst - ref) / ref;\n\n            if (err != 0) {\n                double ulp = Math.abs(ref - Double.longBitsToDouble((Double.doubleToLongBits(ref) ^ 1)));\n                double errulp = field.newDfp(tst).subtract(DfpMath.asin(field.newDfp(x))).divide(field.newDfp(ulp)).toDouble();\n                //System.out.println(x+\"\\t\"+tst+\"\\t\"+ref+\"\\t\"+err+\"\\t\"+errulp);\n\n                maxerrulp = Math.max(maxerrulp, Math.abs(errulp));\n            }\n        }\n\n        Assert.assertTrue(\"asin() had errors in excess of \" + MAX_ERROR_ULP + \" ULP\", maxerrulp < MAX_ERROR_ULP);\n    }\n",
        "begin_line": 745,
        "end_line": 766,
        "comment": "",
        "child_ranges": [
            "(line 747,col 9)-(line 747,col 31)",
            "(line 749,col 9)-(line 763,col 9)",
            "(line 765,col 9)-(line 765,col 113)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.util.FastMathTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/util/FastMathTest.java",
        "signature": "org.apache.commons.math.util.FastMathTest.testAcosAccuracy()",
        "snippet": "    @Test\n    public void testAcosAccuracy() {\n        double maxerrulp = 0.0;\n\n        for (int i=0; i<10000; i++) {\n            double x = ((generator.nextDouble() * 2.0) - 1.0) * generator.nextDouble(); \n\n            double tst = FastMath.acos(x);\n            double ref = DfpMath.acos(field.newDfp(x)).toDouble();\n            double err = (tst - ref) / ref;\n\n            if (err != 0) {\n                double ulp = Math.abs(ref - Double.longBitsToDouble((Double.doubleToLongBits(ref) ^ 1)));\n                double errulp = field.newDfp(tst).subtract(DfpMath.acos(field.newDfp(x))).divide(field.newDfp(ulp)).toDouble();\n                //System.out.println(x+\"\\t\"+tst+\"\\t\"+ref+\"\\t\"+err+\"\\t\"+errulp);\n\n                maxerrulp = Math.max(maxerrulp, Math.abs(errulp));\n            }\n        }\n\n        Assert.assertTrue(\"acos() had errors in excess of \" + MAX_ERROR_ULP + \" ULP\", maxerrulp < MAX_ERROR_ULP);\n    }\n",
        "begin_line": 768,
        "end_line": 789,
        "comment": "",
        "child_ranges": [
            "(line 770,col 9)-(line 770,col 31)",
            "(line 772,col 9)-(line 786,col 9)",
            "(line 788,col 9)-(line 788,col 113)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.util.FastMathTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/util/FastMathTest.java",
        "signature": "org.apache.commons.math.util.FastMathTest.cosh(org.apache.commons.math.dfp.Dfp)",
        "snippet": "    private Dfp cosh(Dfp x) {\n      return DfpMath.exp(x).add(DfpMath.exp(x.negate())).divide(2);\n    }\n",
        "begin_line": 791,
        "end_line": 793,
        "comment": "",
        "child_ranges": [
            "(line 792,col 7)-(line 792,col 67)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.util.FastMathTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/util/FastMathTest.java",
        "signature": "org.apache.commons.math.util.FastMathTest.sinh(org.apache.commons.math.dfp.Dfp)",
        "snippet": "    private Dfp sinh(Dfp x) {\n      return DfpMath.exp(x).subtract(DfpMath.exp(x.negate())).divide(2);\n    }\n",
        "begin_line": 795,
        "end_line": 797,
        "comment": "",
        "child_ranges": [
            "(line 796,col 7)-(line 796,col 72)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.util.FastMathTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/util/FastMathTest.java",
        "signature": "org.apache.commons.math.util.FastMathTest.tanh(org.apache.commons.math.dfp.Dfp)",
        "snippet": "    private Dfp tanh(Dfp x) {\n      return sinh(x).divide(cosh(x));\n    }\n",
        "begin_line": 799,
        "end_line": 801,
        "comment": "",
        "child_ranges": [
            "(line 800,col 7)-(line 800,col 37)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.util.FastMathTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/util/FastMathTest.java",
        "signature": "org.apache.commons.math.util.FastMathTest.testSinhAccuracy()",
        "snippet": "    @Test\n    public void testSinhAccuracy() {\n        double maxerrulp = 0.0;\n\n        for (int i=0; i<10000; i++) {\n            double x = ((generator.nextDouble() * 16.0) - 8.0) * generator.nextDouble(); \n\n            double tst = FastMath.sinh(x);\n            double ref = sinh(field.newDfp(x)).toDouble();\n            double err = (tst - ref) / ref;\n\n            if (err != 0) {\n                double ulp = Math.abs(ref - Double.longBitsToDouble((Double.doubleToLongBits(ref) ^ 1)));\n                double errulp = field.newDfp(tst).subtract(sinh(field.newDfp(x))).divide(field.newDfp(ulp)).toDouble(); \n                //System.out.println(x+\"\\t\"+tst+\"\\t\"+ref+\"\\t\"+err+\"\\t\"+errulp); \n                maxerrulp = Math.max(maxerrulp, Math.abs(errulp));\n            }\n        }\n\n        Assert.assertTrue(\"sinh() had errors in excess of \" + MAX_ERROR_ULP + \" ULP\", maxerrulp < MAX_ERROR_ULP);\n    }\n",
        "begin_line": 803,
        "end_line": 823,
        "comment": "",
        "child_ranges": [
            "(line 805,col 9)-(line 805,col 31)",
            "(line 807,col 9)-(line 820,col 9)",
            "(line 822,col 9)-(line 822,col 113)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.util.FastMathTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/util/FastMathTest.java",
        "signature": "org.apache.commons.math.util.FastMathTest.testCoshAccuracy()",
        "snippet": "    @Test\n    public void testCoshAccuracy() {\n        double maxerrulp = 0.0;\n\n        for (int i=0; i<10000; i++) {\n            double x = ((generator.nextDouble() * 16.0) - 8.0) * generator.nextDouble(); \n\n            double tst = FastMath.cosh(x);\n            double ref = cosh(field.newDfp(x)).toDouble();\n            double err = (tst - ref) / ref;\n\n            if (err != 0) {\n                double ulp = Math.abs(ref - Double.longBitsToDouble((Double.doubleToLongBits(ref) ^ 1)));\n                double errulp = field.newDfp(tst).subtract(cosh(field.newDfp(x))).divide(field.newDfp(ulp)).toDouble(); \n                //System.out.println(x+\"\\t\"+tst+\"\\t\"+ref+\"\\t\"+err+\"\\t\"+errulp); \n                maxerrulp = Math.max(maxerrulp, Math.abs(errulp));\n            }\n        }\n\n        Assert.assertTrue(\"cosh() had errors in excess of \" + MAX_ERROR_ULP + \" ULP\", maxerrulp < MAX_ERROR_ULP);\n    }\n",
        "begin_line": 825,
        "end_line": 845,
        "comment": "",
        "child_ranges": [
            "(line 827,col 9)-(line 827,col 31)",
            "(line 829,col 9)-(line 842,col 9)",
            "(line 844,col 9)-(line 844,col 113)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.util.FastMathTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/util/FastMathTest.java",
        "signature": "org.apache.commons.math.util.FastMathTest.testTanhAccuracy()",
        "snippet": "    @Test\n    public void testTanhAccuracy() {\n        double maxerrulp = 0.0;\n\n        for (int i=0; i<10000; i++) {\n            double x = ((generator.nextDouble() * 16.0) - 8.0) * generator.nextDouble(); \n\n            double tst = FastMath.tanh(x);\n            double ref = tanh(field.newDfp(x)).toDouble();\n            double err = (tst - ref) / ref;\n\n            if (err != 0) {\n                double ulp = Math.abs(ref - Double.longBitsToDouble((Double.doubleToLongBits(ref) ^ 1)));\n                double errulp = field.newDfp(tst).subtract(tanh(field.newDfp(x))).divide(field.newDfp(ulp)).toDouble(); \n                //System.out.println(x+\"\\t\"+tst+\"\\t\"+ref+\"\\t\"+err+\"\\t\"+errulp); \n                maxerrulp = Math.max(maxerrulp, Math.abs(errulp));\n            }\n        }\n\n        Assert.assertTrue(\"tanh() had errors in excess of \" + MAX_ERROR_ULP + \" ULP\", maxerrulp < MAX_ERROR_ULP);\n    }\n",
        "begin_line": 847,
        "end_line": 867,
        "comment": "",
        "child_ranges": [
            "(line 849,col 9)-(line 849,col 31)",
            "(line 851,col 9)-(line 864,col 9)",
            "(line 866,col 9)-(line 866,col 113)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.util.FastMathTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/util/FastMathTest.java",
        "signature": "org.apache.commons.math.util.FastMathTest.testCbrtAccuracy()",
        "snippet": "    @Test\n    public void testCbrtAccuracy() {\n        double maxerrulp = 0.0;\n\n        for (int i=0; i<10000; i++) {\n            double x = ((generator.nextDouble() * 200.0) - 100.0) * generator.nextDouble(); \n\n            double tst = FastMath.cbrt(x);\n            double ref = cbrt(field.newDfp(x)).toDouble();\n            double err = (tst - ref) / ref;\n\n            if (err != 0) {\n                double ulp = Math.abs(ref - Double.longBitsToDouble((Double.doubleToLongBits(ref) ^ 1)));\n                double errulp = field.newDfp(tst).subtract(cbrt(field.newDfp(x))).divide(field.newDfp(ulp)).toDouble(); \n                //System.out.println(x+\"\\t\"+tst+\"\\t\"+ref+\"\\t\"+err+\"\\t\"+errulp); \n                maxerrulp = Math.max(maxerrulp, Math.abs(errulp));\n            }\n        }\n\n        Assert.assertTrue(\"cbrt() had errors in excess of \" + MAX_ERROR_ULP + \" ULP\", maxerrulp < MAX_ERROR_ULP);\n    }\n",
        "begin_line": 869,
        "end_line": 889,
        "comment": "",
        "child_ranges": [
            "(line 871,col 9)-(line 871,col 31)",
            "(line 873,col 9)-(line 886,col 9)",
            "(line 888,col 9)-(line 888,col 113)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.util.FastMathTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/util/FastMathTest.java",
        "signature": "org.apache.commons.math.util.FastMathTest.cbrt(org.apache.commons.math.dfp.Dfp)",
        "snippet": "    private Dfp cbrt(Dfp x) {\n      boolean negative=false;\n\n      if (x.lessThan(field.getZero())) {\n          negative = true;\n          x = x.negate();\n      }\n\n      Dfp y = DfpMath.pow(x, field.getOne().divide(3));\n\n      if (negative) {\n          y = y.negate();\n      }\n\n      return y;\n    }\n",
        "begin_line": 891,
        "end_line": 906,
        "comment": "",
        "child_ranges": [
            "(line 892,col 7)-(line 892,col 29)",
            "(line 894,col 7)-(line 897,col 7)",
            "(line 899,col 7)-(line 899,col 55)",
            "(line 901,col 7)-(line 903,col 7)",
            "(line 905,col 7)-(line 905,col 15)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.util.FastMathTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/util/FastMathTest.java",
        "signature": "org.apache.commons.math.util.FastMathTest.testToDegrees()",
        "snippet": "    @Test\n    public void testToDegrees() {\n        double maxerrulp = 0.0;\n        for (int i = 0; i < NUMBER_OF_TRIALS; i++) {\n            double x = generator.nextDouble();\n            double tst = field.newDfp(x).multiply(180).divide(field.getPi()).toDouble();\n            double ref = FastMath.toDegrees(x);\n            double err = (tst - ref) / ref;\n\n            if (err != 0) {\n                double ulp = Math.abs(ref -\n                                      Double.longBitsToDouble((Double.doubleToLongBits(ref) ^ 1)));\n                double errulp = field.newDfp(tst).subtract(DfpMath.exp(field.newDfp(x)).subtract(field.getOne())).divide(field.newDfp(ulp)).toDouble();\n//                System.out.println(x + \"\\t\" + tst + \"\\t\" + ref + \"\\t\" + err + \"\\t\" + errulp);\n\n                maxerrulp = Math.max(maxerrulp, Math.abs(errulp));\n            }\n        }\n        Assert.assertTrue(\"toDegrees() had errors in excess of \" + MAX_ERROR_ULP + \" ULP\", maxerrulp < MAX_ERROR_ULP);\n\n    }\n",
        "begin_line": 908,
        "end_line": 928,
        "comment": "",
        "child_ranges": [
            "(line 910,col 9)-(line 910,col 31)",
            "(line 911,col 9)-(line 925,col 9)",
            "(line 926,col 9)-(line 926,col 118)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.util.FastMathTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/util/FastMathTest.java",
        "signature": "org.apache.commons.math.util.FastMathTest.testToRadians()",
        "snippet": "    @Test\n    public void testToRadians() {\n        double maxerrulp = 0.0;\n        for (int i = 0; i < NUMBER_OF_TRIALS; i++) {\n            double x = generator.nextDouble();\n            double tst = field.newDfp(x).multiply(field.getPi()).divide(180).toDouble();\n            double ref = FastMath.toRadians(x);\n            double err = (tst - ref) / ref;\n\n            if (err != 0) {\n                double ulp = Math.abs(ref -\n                                      Double.longBitsToDouble((Double\n                                          .doubleToLongBits(ref) ^ 1)));\n                double errulp = field.newDfp(tst).subtract(DfpMath.exp(field.newDfp(x)).subtract(field.getOne())).divide(field.newDfp(ulp)).toDouble();\n//                System.out.println(x + \"\\t\" + tst + \"\\t\" + ref + \"\\t\" + err + \"\\t\" + errulp);\n\n                maxerrulp = Math.max(maxerrulp, Math.abs(errulp));\n            }\n        }\n        Assert.assertTrue(\"toRadians() had errors in excess of \" + MAX_ERROR_ULP + \" ULP\", maxerrulp < MAX_ERROR_ULP);\n\n    }\n",
        "begin_line": 930,
        "end_line": 951,
        "comment": "",
        "child_ranges": [
            "(line 932,col 9)-(line 932,col 31)",
            "(line 933,col 9)-(line 948,col 9)",
            "(line 949,col 9)-(line 949,col 118)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.util.FastMathTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/util/FastMathTest.java",
        "signature": "org.apache.commons.math.util.FastMathTest.testPerformance()",
        "snippet": "    @Ignore\n    @Test\n    public void testPerformance() {\n        final int numberOfRuns = 10000000;\n        for (int j = 0; j < 10; j++) {\n            double x = 0;\n            long time = System.currentTimeMillis();\n            for (int i = 0; i < numberOfRuns; i++)\n                x += StrictMath.log(Math.PI + i/* 1.0 + i/1e9 */);\n            time = System.currentTimeMillis() - time;\n            System.out.print(\"StrictMath.log \" + time + \"\\t\" + x + \"\\t\");\n\n            x = 0;\n            time = System.currentTimeMillis();\n            for (int i = 0; i < numberOfRuns; i++)\n                x += FastMath.log(Math.PI + i/* 1.0 + i/1e9 */);\n            time = System.currentTimeMillis() - time;\n            System.out.println(\"FastMath.log \" + time + \"\\t\" + x);\n\n            x = 0;\n            time = System.currentTimeMillis();\n            for (int i = 0; i < numberOfRuns; i++)\n                x += StrictMath.pow(Math.PI + i / 1e6, i / 1e6);\n            time = System.currentTimeMillis() - time;\n            System.out.print(\"StrictMath.pow \" + time + \"\\t\" + x + \"\\t\");\n\n            x = 0;\n            time = System.currentTimeMillis();\n            for (int i = 0; i < numberOfRuns; i++)\n                x += FastMath.pow(Math.PI + i / 1e6, i / 1e6);\n            time = System.currentTimeMillis() - time;\n            System.out.println(\"FastMath.pow \" + time + \"\\t\" + x);\n\n            x = 0;\n            time = System.currentTimeMillis();\n            for (int i = 0; i < numberOfRuns; i++)\n                x += StrictMath.exp(i / 1000000.0);\n            time = System.currentTimeMillis() - time;\n            System.out.print(\"StrictMath.exp \" + time + \"\\t\" + x + \"\\t\");\n\n            x = 0;\n            time = System.currentTimeMillis();\n            for (int i = 0; i < numberOfRuns; i++)\n                x += FastMath.exp(i / 1000000.0);\n            time = System.currentTimeMillis() - time;\n            System.out.println(\"FastMath.exp \" + time + \"\\t\" + x);\n\n            x = 0;\n            time = System.currentTimeMillis();\n            for (int i = 0; i < numberOfRuns; i++)\n                x += StrictMath.sin(i / 1000000.0);\n            time = System.currentTimeMillis() - time;\n            System.out.print(\"StrictMath.sin \" + time + \"\\t\" + x + \"\\t\");\n\n            x = 0;\n            time = System.currentTimeMillis();\n            for (int i = 0; i < numberOfRuns; i++)\n                x += FastMath.sin(i / 1000000.0);\n            time = System.currentTimeMillis() - time;\n            System.out.println(\"FastMath.sin \" + time + \"\\t\" + x);\n\n            x = 0;\n            time = System.currentTimeMillis();\n            for (int i = 0; i < numberOfRuns; i++)\n                x += StrictMath.asin(i / 10000000.0);\n            time = System.currentTimeMillis() - time;\n            System.out.print(\"StrictMath.asin \" + time + \"\\t\" + x + \"\\t\");\n\n            x = 0;\n            time = System.currentTimeMillis();\n            for (int i = 0; i < numberOfRuns; i++)\n                x += FastMath.asin(i / 10000000.0);\n            time = System.currentTimeMillis() - time;\n            System.out.println(\"FastMath.asin \" + time + \"\\t\" + x);\n\n            x = 0;\n            time = System.currentTimeMillis();\n            for (int i = 0; i < numberOfRuns; i++)\n                x += StrictMath.cos(i / 1000000.0);\n            time = System.currentTimeMillis() - time;\n            System.out.print(\"StrictMath.cos \" + time + \"\\t\" + x + \"\\t\");\n\n            x = 0;\n            time = System.currentTimeMillis();\n            for (int i = 0; i < numberOfRuns; i++)\n                x += FastMath.cos(i / 1000000.0);\n            time = System.currentTimeMillis() - time;\n            System.out.println(\"FastMath.cos \" + time + \"\\t\" + x);\n\n            x = 0;\n            time = System.currentTimeMillis();\n            for (int i = 0; i < numberOfRuns; i++)\n                x += StrictMath.acos(i / 10000000.0);\n            time = System.currentTimeMillis() - time;\n            System.out.print(\"StrictMath.acos \" + time + \"\\t\" + x + \"\\t\");\n\n            x = 0;\n            time = System.currentTimeMillis();\n            for (int i = 0; i < numberOfRuns; i++)\n                x += FastMath.acos(i / 10000000.0);\n            time = System.currentTimeMillis() - time;\n            System.out.println(\"FastMath.acos \" + time + \"\\t\" + x);\n\n            x = 0;\n            time = System.currentTimeMillis();\n            for (int i = 0; i < numberOfRuns; i++)\n                x += StrictMath.tan(i / 1000000.0);\n            time = System.currentTimeMillis() - time;\n            System.out.print(\"StrictMath.tan \" + time + \"\\t\" + x + \"\\t\");\n\n            x = 0;\n            time = System.currentTimeMillis();\n            for (int i = 0; i < numberOfRuns; i++)\n                x += FastMath.tan(i / 1000000.0);\n            time = System.currentTimeMillis() - time;\n            System.out.println(\"FastMath.tan \" + time + \"\\t\" + x);\n\n            x = 0;\n            time = System.currentTimeMillis();\n            for (int i = 0; i < numberOfRuns; i++)\n                x += StrictMath.atan(i / 1000000.0);\n            time = System.currentTimeMillis() - time;\n            System.out.print(\"StrictMath.atan \" + time + \"\\t\" + x + \"\\t\");\n\n            x = 0;\n            time = System.currentTimeMillis();\n            for (int i = 0; i < numberOfRuns; i++)\n                x += FastMath.atan(i / 1000000.0);\n            time = System.currentTimeMillis() - time;\n            System.out.println(\"FastMath.atan \" + time + \"\\t\" + x);\n\n            x = 0;\n            time = System.currentTimeMillis();\n            for (int i = 0; i < numberOfRuns; i++)\n                x += StrictMath.cbrt(i / 1000000.0);\n            time = System.currentTimeMillis() - time;\n            System.out.print(\"StrictMath.cbrt \" + time + \"\\t\" + x + \"\\t\");\n\n            x = 0;\n            time = System.currentTimeMillis();\n            for (int i = 0; i < numberOfRuns; i++)\n                x += FastMath.cbrt(i / 1000000.0);\n            time = System.currentTimeMillis() - time;\n            System.out.println(\"FastMath.cbrt \" + time + \"\\t\" + x);\n\n            x = 0;\n            time = System.currentTimeMillis();\n            for (int i = 0; i < numberOfRuns; i++)\n                x += StrictMath.cosh(i / 1000000.0);\n            time = System.currentTimeMillis() - time;\n            System.out.print(\"StrictMath.cosh \" + time + \"\\t\" + x + \"\\t\");\n\n            x = 0;\n            time = System.currentTimeMillis();\n            for (int i = 0; i < numberOfRuns; i++)\n                x += FastMath.cosh(i / 1000000.0);\n            time = System.currentTimeMillis() - time;\n            System.out.println(\"FastMath.cosh \" + time + \"\\t\" + x);\n\n            x = 0;\n            time = System.currentTimeMillis();\n            for (int i = 0; i < numberOfRuns; i++)\n                x += StrictMath.sinh(i / 1000000.0);\n            time = System.currentTimeMillis() - time;\n            System.out.print(\"StrictMath.sinh \" + time + \"\\t\" + x + \"\\t\");\n\n            x = 0;\n            time = System.currentTimeMillis();\n            for (int i = 0; i < numberOfRuns; i++)\n                x += FastMath.sinh(i / 1000000.0);\n            time = System.currentTimeMillis() - time;\n            System.out.println(\"FastMath.sinh \" + time + \"\\t\" + x);\n\n            x = 0;\n            time = System.currentTimeMillis();\n            for (int i = 0; i < numberOfRuns; i++)\n                x += StrictMath.tanh(i / 1000000.0);\n            time = System.currentTimeMillis() - time;\n            System.out.print(\"StrictMath.tanh \" + time + \"\\t\" + x + \"\\t\");\n\n            x = 0;\n            time = System.currentTimeMillis();\n            for (int i = 0; i < numberOfRuns; i++)\n                x += FastMath.tanh(i / 1000000.0);\n            time = System.currentTimeMillis() - time;\n            System.out.println(\"FastMath.tanh \" + time + \"\\t\" + x);\n\n            x = 0;\n            time = System.currentTimeMillis();\n            for (int i = 0; i < numberOfRuns; i++)\n                x += StrictMath.expm1(-i / 100000.0);\n            time = System.currentTimeMillis() - time;\n            System.out.print(\"StrictMath.expm1 \" + time + \"\\t\" + x + \"\\t\");\n\n            x = 0;\n            time = System.currentTimeMillis();\n            for (int i = 0; i < numberOfRuns; i++)\n                x += FastMath.expm1(-i / 100000.0);\n            time = System.currentTimeMillis() - time;\n            System.out.println(\"FastMath.expm1 \" + time + \"\\t\" + x);\n\n            x = 0;\n            time = System.currentTimeMillis();\n            for (int i = 0; i < numberOfRuns; i++)\n                x += FastMath.expm1(-i / 100000.0);\n            time = System.currentTimeMillis() - time;\n            System.out.println(\"FastMath.expm1 \" + time + \"\\t\" + x);\n        }\n    }\n",
        "begin_line": 953,
        "end_line": 1161,
        "comment": "",
        "child_ranges": [
            "(line 956,col 9)-(line 956,col 42)",
            "(line 957,col 9)-(line 1160,col 9)"
        ]
    }
]