[
    {
        "class_name": "org.apache.commons.math.util.MathUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/util/MathUtilsTest.java",
        "signature": "org.apache.commons.math.util.MathUtilsTest.MathUtilsTest(java.lang.String)",
        "snippet": "    public MathUtilsTest(String name) {\n        super(name);\n    }\n",
        "begin_line": 36,
        "end_line": 38,
        "comment": "",
        "child_ranges": [
            "(line 37,col 9)-(line 37,col 20)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.util.MathUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/util/MathUtilsTest.java",
        "signature": "org.apache.commons.math.util.MathUtilsTest.binomialCoefficient(int, int)",
        "snippet": "    private long binomialCoefficient(int n, int k) throws ArithmeticException {\n        if (binomialCache.size() > n) {\n            Long cachedResult = binomialCache.get(n).get(Integer.valueOf(k));\n            if (cachedResult != null) {\n                return cachedResult.longValue();\n            }\n        }\n        long result = -1;\n        if ((n == k) || (k == 0)) {\n            result = 1;\n        } else if ((k == 1) || (k == n - 1)) {\n            result = n;\n        } else {\n            // Reduce stack depth for larger values of n\n            if (k < n - 100) {\n                binomialCoefficient(n - 100, k);\n            }\n            if (k > 100) {\n                binomialCoefficient(n - 100, k - 100);\n            }\n            result = MathUtils.addAndCheck(binomialCoefficient(n - 1, k - 1),\n                binomialCoefficient(n - 1, k));\n        }\n        if (result == -1) {\n            throw new ArithmeticException(\n                \"error computing binomial coefficient\");\n        }\n        for (int i = binomialCache.size(); i < n + 1; i++) {\n            binomialCache.add(new HashMap<Integer, Long>());\n        }\n        binomialCache.get(n).put(Integer.valueOf(k), Long.valueOf(result));\n        return result;\n    }\n",
        "begin_line": 46,
        "end_line": 78,
        "comment": "\n     * Exact (caching) recursive implementation to test against\n     ",
        "child_ranges": [
            "(line 47,col 9)-(line 52,col 9)",
            "(line 53,col 9)-(line 53,col 25)",
            "(line 54,col 9)-(line 68,col 9)",
            "(line 69,col 9)-(line 72,col 9)",
            "(line 73,col 9)-(line 75,col 9)",
            "(line 76,col 9)-(line 76,col 75)",
            "(line 77,col 9)-(line 77,col 22)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.util.MathUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/util/MathUtilsTest.java",
        "signature": "org.apache.commons.math.util.MathUtilsTest.factorial(int)",
        "snippet": "    private long factorial(int n) {\n        long result = 1;\n        for (int i = 2; i <= n; i++) {\n            result *= i;\n        }\n        return result;\n    }\n",
        "begin_line": 83,
        "end_line": 89,
        "comment": "\n     * Exact direct multiplication implementation to test against\n     ",
        "child_ranges": [
            "(line 84,col 9)-(line 84,col 24)",
            "(line 85,col 9)-(line 87,col 9)",
            "(line 88,col 9)-(line 88,col 22)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.util.MathUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/util/MathUtilsTest.java",
        "signature": "org.apache.commons.math.util.MathUtilsTest.test0Choose0()",
        "snippet": "    public void test0Choose0() {\n        assertEquals(MathUtils.binomialCoefficientDouble(0, 0), 1d, 0);\n        assertEquals(MathUtils.binomialCoefficientLog(0, 0), 0d, 0);\n        assertEquals(MathUtils.binomialCoefficient(0, 0), 1);\n    }\n",
        "begin_line": 92,
        "end_line": 96,
        "comment": " Verify that b(0,0) = 1 ",
        "child_ranges": [
            "(line 93,col 9)-(line 93,col 71)",
            "(line 94,col 9)-(line 94,col 68)",
            "(line 95,col 9)-(line 95,col 61)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.util.MathUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/util/MathUtilsTest.java",
        "signature": "org.apache.commons.math.util.MathUtilsTest.testAddAndCheck()",
        "snippet": "    public void testAddAndCheck() {\n        int big = Integer.MAX_VALUE;\n        int bigNeg = Integer.MIN_VALUE;\n        assertEquals(big, MathUtils.addAndCheck(big, 0));\n        try {\n            MathUtils.addAndCheck(big, 1);\n            fail(\"Expecting ArithmeticException\");\n        } catch (ArithmeticException ex) {\n        }\n        try {\n            MathUtils.addAndCheck(bigNeg, -1);\n            fail(\"Expecting ArithmeticException\");\n        } catch (ArithmeticException ex) {\n        }\n    }\n",
        "begin_line": 98,
        "end_line": 112,
        "comment": "",
        "child_ranges": [
            "(line 99,col 9)-(line 99,col 36)",
            "(line 100,col 9)-(line 100,col 39)",
            "(line 101,col 9)-(line 101,col 57)",
            "(line 102,col 9)-(line 106,col 9)",
            "(line 107,col 9)-(line 111,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.util.MathUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/util/MathUtilsTest.java",
        "signature": "org.apache.commons.math.util.MathUtilsTest.testAddAndCheckLong()",
        "snippet": "    public void testAddAndCheckLong() {\n        long max = Long.MAX_VALUE;\n        long min = Long.MIN_VALUE;\n        assertEquals(max, MathUtils.addAndCheck(max, 0L));\n        assertEquals(min, MathUtils.addAndCheck(min, 0L));\n        assertEquals(max, MathUtils.addAndCheck(0L, max));\n        assertEquals(min, MathUtils.addAndCheck(0L, min));\n        assertEquals(1, MathUtils.addAndCheck(-1L, 2L));\n        assertEquals(1, MathUtils.addAndCheck(2L, -1L));\n        assertEquals(-3, MathUtils.addAndCheck(-2L, -1L));\n        assertEquals(min, MathUtils.addAndCheck(min + 1, -1L));\n        testAddAndCheckLongFailure(max, 1L);\n        testAddAndCheckLongFailure(min, -1L);\n        testAddAndCheckLongFailure(1L, max);\n        testAddAndCheckLongFailure(-1L, min);\n    }\n",
        "begin_line": 114,
        "end_line": 129,
        "comment": "",
        "child_ranges": [
            "(line 115,col 9)-(line 115,col 34)",
            "(line 116,col 9)-(line 116,col 34)",
            "(line 117,col 9)-(line 117,col 58)",
            "(line 118,col 9)-(line 118,col 58)",
            "(line 119,col 9)-(line 119,col 58)",
            "(line 120,col 9)-(line 120,col 58)",
            "(line 121,col 9)-(line 121,col 56)",
            "(line 122,col 9)-(line 122,col 56)",
            "(line 123,col 9)-(line 123,col 58)",
            "(line 124,col 9)-(line 124,col 63)",
            "(line 125,col 9)-(line 125,col 44)",
            "(line 126,col 9)-(line 126,col 45)",
            "(line 127,col 9)-(line 127,col 44)",
            "(line 128,col 9)-(line 128,col 45)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.util.MathUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/util/MathUtilsTest.java",
        "signature": "org.apache.commons.math.util.MathUtilsTest.testAddAndCheckLongFailure(long, long)",
        "snippet": "    private void testAddAndCheckLongFailure(long a, long b) {\n        try {\n            MathUtils.addAndCheck(a, b);\n            fail(\"Expecting ArithmeticException\");\n        } catch (ArithmeticException ex) {\n            // success\n        }\n    }\n",
        "begin_line": 131,
        "end_line": 138,
        "comment": "",
        "child_ranges": [
            "(line 132,col 9)-(line 137,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.util.MathUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/util/MathUtilsTest.java",
        "signature": "org.apache.commons.math.util.MathUtilsTest.testBinomialCoefficient()",
        "snippet": "    public void testBinomialCoefficient() {\n        long[] bcoef5 = {\n            1,\n            5,\n            10,\n            10,\n            5,\n            1 };\n        long[] bcoef6 = {\n            1,\n            6,\n            15,\n            20,\n            15,\n            6,\n            1 };\n        for (int i = 0; i < 6; i++) {\n            assertEquals(\"5 choose \" + i, bcoef5[i], MathUtils.binomialCoefficient(5, i));\n        }\n        for (int i = 0; i < 7; i++) {\n            assertEquals(\"6 choose \" + i, bcoef6[i], MathUtils.binomialCoefficient(6, i));\n        }\n\n        for (int n = 1; n < 10; n++) {\n            for (int k = 0; k <= n; k++) {\n                assertEquals(n + \" choose \" + k, binomialCoefficient(n, k), MathUtils.binomialCoefficient(n, k));\n                assertEquals(n + \" choose \" + k, binomialCoefficient(n, k), MathUtils.binomialCoefficientDouble(n, k), Double.MIN_VALUE);\n                assertEquals(n + \" choose \" + k, FastMath.log(binomialCoefficient(n, k)), MathUtils.binomialCoefficientLog(n, k), 10E-12);\n            }\n        }\n\n        int[] n = { 34, 66, 100, 1500, 1500 };\n        int[] k = { 17, 33, 10, 1500 - 4, 4 };\n        for (int i = 0; i < n.length; i++) {\n            long expected = binomialCoefficient(n[i], k[i]);\n            assertEquals(n[i] + \" choose \" + k[i], expected,\n                MathUtils.binomialCoefficient(n[i], k[i]));\n            assertEquals(n[i] + \" choose \" + k[i], expected,\n                MathUtils.binomialCoefficientDouble(n[i], k[i]), 0.0);\n            assertEquals(\"log(\" + n[i] + \" choose \" + k[i] + \")\", FastMath.log(expected),\n                MathUtils.binomialCoefficientLog(n[i], k[i]), 0.0);\n        }\n    }\n",
        "begin_line": 140,
        "end_line": 182,
        "comment": "",
        "child_ranges": [
            "(line 141,col 9)-(line 147,col 16)",
            "(line 148,col 9)-(line 155,col 16)",
            "(line 156,col 9)-(line 158,col 9)",
            "(line 159,col 9)-(line 161,col 9)",
            "(line 163,col 9)-(line 169,col 9)",
            "(line 171,col 9)-(line 171,col 46)",
            "(line 172,col 9)-(line 172,col 46)",
            "(line 173,col 9)-(line 181,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.util.MathUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/util/MathUtilsTest.java",
        "signature": "org.apache.commons.math.util.MathUtilsTest.testBinomialCoefficientLarge()",
        "snippet": "    public void testBinomialCoefficientLarge() throws Exception {\n        // This tests all legal and illegal values for n <= 200.\n        for (int n = 0; n <= 200; n++) {\n            for (int k = 0; k <= n; k++) {\n                long ourResult = -1;\n                long exactResult = -1;\n                boolean shouldThrow = false;\n                boolean didThrow = false;\n                try {\n                    ourResult = MathUtils.binomialCoefficient(n, k);\n                } catch (ArithmeticException ex) {\n                    didThrow = true;\n                }\n                try {\n                    exactResult = binomialCoefficient(n, k);\n                } catch (ArithmeticException ex) {\n                    shouldThrow = true;\n                }\n                assertEquals(n + \" choose \" + k, exactResult, ourResult);\n                assertEquals(n + \" choose \" + k, shouldThrow, didThrow);\n                assertTrue(n + \" choose \" + k, (n > 66 || !didThrow));\n\n                if (!shouldThrow && exactResult > 1) {\n                    assertEquals(n + \" choose \" + k, 1.,\n                        MathUtils.binomialCoefficientDouble(n, k) / exactResult, 1e-10);\n                    assertEquals(n + \" choose \" + k, 1,\n                        MathUtils.binomialCoefficientLog(n, k) / FastMath.log(exactResult), 1e-10);\n                }\n            }\n        }\n\n        long ourResult = MathUtils.binomialCoefficient(300, 3);\n        long exactResult = binomialCoefficient(300, 3);\n        assertEquals(exactResult, ourResult);\n\n        ourResult = MathUtils.binomialCoefficient(700, 697);\n        exactResult = binomialCoefficient(700, 697);\n        assertEquals(exactResult, ourResult);\n\n        // This one should throw\n        try {\n            MathUtils.binomialCoefficient(700, 300);\n            fail(\"Expecting ArithmeticException\");\n        } catch (ArithmeticException ex) {\n            // Expected\n        }\n\n        int n = 10000;\n        ourResult = MathUtils.binomialCoefficient(n, 3);\n        exactResult = binomialCoefficient(n, 3);\n        assertEquals(exactResult, ourResult);\n        assertEquals(1, MathUtils.binomialCoefficientDouble(n, 3) / exactResult, 1e-10);\n        assertEquals(1, MathUtils.binomialCoefficientLog(n, 3) / FastMath.log(exactResult), 1e-10);\n\n    }\n",
        "begin_line": 188,
        "end_line": 242,
        "comment": "\n     * Tests correctness for large n and sharpness of upper bound in API doc\n     * JIRA: MATH-241\n     ",
        "child_ranges": [
            "(line 190,col 9)-(line 217,col 9)",
            "(line 219,col 9)-(line 219,col 63)",
            "(line 220,col 9)-(line 220,col 55)",
            "(line 221,col 9)-(line 221,col 45)",
            "(line 223,col 9)-(line 223,col 60)",
            "(line 224,col 9)-(line 224,col 52)",
            "(line 225,col 9)-(line 225,col 45)",
            "(line 228,col 9)-(line 233,col 9)",
            "(line 235,col 9)-(line 235,col 22)",
            "(line 236,col 9)-(line 236,col 56)",
            "(line 237,col 9)-(line 237,col 48)",
            "(line 238,col 9)-(line 238,col 45)",
            "(line 239,col 9)-(line 239,col 88)",
            "(line 240,col 9)-(line 240,col 99)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.util.MathUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/util/MathUtilsTest.java",
        "signature": "org.apache.commons.math.util.MathUtilsTest.testBinomialCoefficientFail()",
        "snippet": "    public void testBinomialCoefficientFail() {\n        try {\n            MathUtils.binomialCoefficient(4, 5);\n            fail(\"expecting IllegalArgumentException\");\n        } catch (IllegalArgumentException ex) {\n            // ignored\n        }\n\n        try {\n            MathUtils.binomialCoefficientDouble(4, 5);\n            fail(\"expecting IllegalArgumentException\");\n        } catch (IllegalArgumentException ex) {\n            // ignored\n        }\n\n        try {\n            MathUtils.binomialCoefficientLog(4, 5);\n            fail(\"expecting IllegalArgumentException\");\n        } catch (IllegalArgumentException ex) {\n            // ignored\n        }\n\n        try {\n            MathUtils.binomialCoefficient(-1, -2);\n            fail(\"expecting IllegalArgumentException\");\n        } catch (IllegalArgumentException ex) {\n            // ignored\n        }\n        try {\n            MathUtils.binomialCoefficientDouble(-1, -2);\n            fail(\"expecting IllegalArgumentException\");\n        } catch (IllegalArgumentException ex) {\n            // ignored\n        }\n        try {\n            MathUtils.binomialCoefficientLog(-1, -2);\n            fail(\"expecting IllegalArgumentException\");\n        } catch (IllegalArgumentException ex) {\n            // ignored\n        }\n\n        try {\n            MathUtils.binomialCoefficient(67, 30);\n            fail(\"expecting ArithmeticException\");\n        } catch (ArithmeticException ex) {\n            // ignored\n        }\n        try {\n            MathUtils.binomialCoefficient(67, 34);\n            fail(\"expecting ArithmeticException\");\n        } catch (ArithmeticException ex) {\n            // ignored\n        }\n        double x = MathUtils.binomialCoefficientDouble(1030, 515);\n        assertTrue(\"expecting infinite binomial coefficient\", Double\n            .isInfinite(x));\n    }\n",
        "begin_line": 244,
        "end_line": 300,
        "comment": "",
        "child_ranges": [
            "(line 245,col 9)-(line 250,col 9)",
            "(line 252,col 9)-(line 257,col 9)",
            "(line 259,col 9)-(line 264,col 9)",
            "(line 266,col 9)-(line 271,col 9)",
            "(line 272,col 9)-(line 277,col 9)",
            "(line 278,col 9)-(line 283,col 9)",
            "(line 285,col 9)-(line 290,col 9)",
            "(line 291,col 9)-(line 296,col 9)",
            "(line 297,col 9)-(line 297,col 66)",
            "(line 298,col 9)-(line 299,col 28)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.util.MathUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/util/MathUtilsTest.java",
        "signature": "org.apache.commons.math.util.MathUtilsTest.testCompareTo()",
        "snippet": "    public void testCompareTo() {\n      assertEquals(0, MathUtils.compareTo(152.33, 152.32, .011));\n      assertTrue(MathUtils.compareTo(152.308, 152.32, .011) < 0);\n      assertTrue(MathUtils.compareTo(152.33, 152.318, .011) > 0);\n    }\n",
        "begin_line": 302,
        "end_line": 306,
        "comment": "",
        "child_ranges": [
            "(line 303,col 7)-(line 303,col 65)",
            "(line 304,col 7)-(line 304,col 65)",
            "(line 305,col 7)-(line 305,col 65)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.util.MathUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/util/MathUtilsTest.java",
        "signature": "org.apache.commons.math.util.MathUtilsTest.testCosh()",
        "snippet": "    public void testCosh() {\n        double x = 3.0;\n        double expected = 10.06766;\n        assertEquals(expected, MathUtils.cosh(x), 1.0e-5);\n    }\n",
        "begin_line": 308,
        "end_line": 312,
        "comment": "",
        "child_ranges": [
            "(line 309,col 9)-(line 309,col 23)",
            "(line 310,col 9)-(line 310,col 35)",
            "(line 311,col 9)-(line 311,col 58)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.util.MathUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/util/MathUtilsTest.java",
        "signature": "org.apache.commons.math.util.MathUtilsTest.testCoshNaN()",
        "snippet": "    public void testCoshNaN() {\n        assertTrue(Double.isNaN(MathUtils.cosh(Double.NaN)));\n    }\n",
        "begin_line": 314,
        "end_line": 316,
        "comment": "",
        "child_ranges": [
            "(line 315,col 9)-(line 315,col 61)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.util.MathUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/util/MathUtilsTest.java",
        "signature": "org.apache.commons.math.util.MathUtilsTest.testEqualsIncludingNaN()",
        "snippet": "    public void testEqualsIncludingNaN() {\n        double[] testArray = {\n            Double.NaN,\n            Double.POSITIVE_INFINITY,\n            Double.NEGATIVE_INFINITY,\n            1d,\n            0d };\n        for (int i = 0; i < testArray.length; i++) {\n            for (int j = 0; j < testArray.length; j++) {\n                if (i == j) {\n                    assertTrue(MathUtils.equalsIncludingNaN(testArray[i], testArray[j]));\n                    assertTrue(MathUtils.equalsIncludingNaN(testArray[j], testArray[i]));\n                } else {\n                    assertTrue(!MathUtils.equalsIncludingNaN(testArray[i], testArray[j]));\n                    assertTrue(!MathUtils.equalsIncludingNaN(testArray[j], testArray[i]));\n                }\n            }\n        }\n    }\n",
        "begin_line": 318,
        "end_line": 336,
        "comment": "",
        "child_ranges": [
            "(line 319,col 9)-(line 324,col 17)",
            "(line 325,col 9)-(line 335,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.util.MathUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/util/MathUtilsTest.java",
        "signature": "org.apache.commons.math.util.MathUtilsTest.testEqualsWithAllowedDelta()",
        "snippet": "    public void testEqualsWithAllowedDelta() {\n        assertTrue(MathUtils.equals(153.0000, 153.0000, .0625));\n        assertTrue(MathUtils.equals(153.0000, 153.0625, .0625));\n        assertTrue(MathUtils.equals(152.9375, 153.0000, .0625));\n        assertFalse(MathUtils.equals(Double.NaN, Double.NaN, 1.0));\n        assertTrue(MathUtils.equals(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, 1.0));\n        assertTrue(MathUtils.equals(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, 1.0));\n        assertFalse(MathUtils.equals(Double.NEGATIVE_INFINITY, Double.POSITIVE_INFINITY, 1.0));\n        assertFalse(MathUtils.equals(153.0000, 153.0625, .0624));\n        assertFalse(MathUtils.equals(152.9374, 153.0000, .0625));\n    }\n",
        "begin_line": 338,
        "end_line": 348,
        "comment": "",
        "child_ranges": [
            "(line 339,col 9)-(line 339,col 64)",
            "(line 340,col 9)-(line 340,col 64)",
            "(line 341,col 9)-(line 341,col 64)",
            "(line 342,col 9)-(line 342,col 67)",
            "(line 343,col 9)-(line 343,col 94)",
            "(line 344,col 9)-(line 344,col 94)",
            "(line 345,col 9)-(line 345,col 95)",
            "(line 346,col 9)-(line 346,col 65)",
            "(line 347,col 9)-(line 347,col 65)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.util.MathUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/util/MathUtilsTest.java",
        "signature": "org.apache.commons.math.util.MathUtilsTest.testEqualsIncludingNaNWithAllowedDelta()",
        "snippet": "    public void testEqualsIncludingNaNWithAllowedDelta() {\n        assertTrue(MathUtils.equalsIncludingNaN(153.0000, 153.0000, .0625));\n        assertTrue(MathUtils.equalsIncludingNaN(153.0000, 153.0625, .0625));\n        assertTrue(MathUtils.equalsIncludingNaN(152.9375, 153.0000, .0625));\n        assertTrue(MathUtils.equalsIncludingNaN(Double.NaN, Double.NaN, 1.0));\n        assertTrue(MathUtils.equalsIncludingNaN(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, 1.0));\n        assertTrue(MathUtils.equalsIncludingNaN(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, 1.0));\n        assertFalse(MathUtils.equalsIncludingNaN(Double.NEGATIVE_INFINITY, Double.POSITIVE_INFINITY, 1.0));\n        assertFalse(MathUtils.equalsIncludingNaN(153.0000, 153.0625, .0624));\n        assertFalse(MathUtils.equalsIncludingNaN(152.9374, 153.0000, .0625));\n    }\n",
        "begin_line": 350,
        "end_line": 360,
        "comment": "",
        "child_ranges": [
            "(line 351,col 9)-(line 351,col 76)",
            "(line 352,col 9)-(line 352,col 76)",
            "(line 353,col 9)-(line 353,col 76)",
            "(line 354,col 9)-(line 354,col 78)",
            "(line 355,col 9)-(line 355,col 106)",
            "(line 356,col 9)-(line 356,col 106)",
            "(line 357,col 9)-(line 357,col 107)",
            "(line 358,col 9)-(line 358,col 77)",
            "(line 359,col 9)-(line 359,col 77)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.util.MathUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/util/MathUtilsTest.java",
        "signature": "org.apache.commons.math.util.MathUtilsTest.testEqualsWithAllowedUlps()",
        "snippet": "    public void testEqualsWithAllowedUlps() {\n        assertTrue(MathUtils.equals(0.0, -0.0, 1));\n\n        assertTrue(MathUtils.equals(1.0, 1 + FastMath.ulp(1d), 1));\n        assertFalse(MathUtils.equals(1.0, 1 + 2 * FastMath.ulp(1d), 1));\n\n        final double nUp1 = FastMath.nextAfter(1d, Double.POSITIVE_INFINITY);\n        final double nnUp1 = FastMath.nextAfter(nUp1, Double.POSITIVE_INFINITY);\n        assertTrue(MathUtils.equals(1.0, nUp1, 1));\n        assertTrue(MathUtils.equals(nUp1, nnUp1, 1));\n        assertFalse(MathUtils.equals(1.0, nnUp1, 1));\n\n        assertTrue(MathUtils.equals(0.0, FastMath.ulp(0d), 1));\n        assertTrue(MathUtils.equals(0.0, -FastMath.ulp(0d), 1));\n\n        assertTrue(MathUtils.equals(153.0, 153.0, 1));\n\n        assertTrue(MathUtils.equals(153.0, 153.00000000000003, 1));\n        assertFalse(MathUtils.equals(153.0, 153.00000000000006, 1));\n        assertTrue(MathUtils.equals(153.0, 152.99999999999997, 1));\n        assertFalse(MathUtils.equals(153, 152.99999999999994, 1));\n\n        assertTrue(MathUtils.equals(-128.0, -127.99999999999999, 1));\n        assertFalse(MathUtils.equals(-128.0, -127.99999999999997, 1));\n        assertTrue(MathUtils.equals(-128.0, -128.00000000000003, 1));\n        assertFalse(MathUtils.equals(-128.0, -128.00000000000006, 1));\n\n        assertTrue(MathUtils.equals(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, 1));\n        assertTrue(MathUtils.equals(Double.MAX_VALUE, Double.POSITIVE_INFINITY, 1));\n\n        assertTrue(MathUtils.equals(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, 1));\n        assertTrue(MathUtils.equals(-Double.MAX_VALUE, Double.NEGATIVE_INFINITY, 1));\n\n        assertFalse(MathUtils.equals(Double.NaN, Double.NaN, 1));\n\n        assertFalse(MathUtils.equals(Double.NEGATIVE_INFINITY, Double.POSITIVE_INFINITY, 100000));\n    }\n",
        "begin_line": 362,
        "end_line": 398,
        "comment": "",
        "child_ranges": [
            "(line 363,col 9)-(line 363,col 51)",
            "(line 365,col 9)-(line 365,col 67)",
            "(line 366,col 9)-(line 366,col 72)",
            "(line 368,col 9)-(line 368,col 77)",
            "(line 369,col 9)-(line 369,col 80)",
            "(line 370,col 9)-(line 370,col 51)",
            "(line 371,col 9)-(line 371,col 53)",
            "(line 372,col 9)-(line 372,col 53)",
            "(line 374,col 9)-(line 374,col 63)",
            "(line 375,col 9)-(line 375,col 64)",
            "(line 377,col 9)-(line 377,col 54)",
            "(line 379,col 9)-(line 379,col 67)",
            "(line 380,col 9)-(line 380,col 68)",
            "(line 381,col 9)-(line 381,col 67)",
            "(line 382,col 9)-(line 382,col 66)",
            "(line 384,col 9)-(line 384,col 69)",
            "(line 385,col 9)-(line 385,col 70)",
            "(line 386,col 9)-(line 386,col 69)",
            "(line 387,col 9)-(line 387,col 70)",
            "(line 389,col 9)-(line 389,col 92)",
            "(line 390,col 9)-(line 390,col 84)",
            "(line 392,col 9)-(line 392,col 92)",
            "(line 393,col 9)-(line 393,col 85)",
            "(line 395,col 9)-(line 395,col 65)",
            "(line 397,col 9)-(line 397,col 98)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.util.MathUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/util/MathUtilsTest.java",
        "signature": "org.apache.commons.math.util.MathUtilsTest.testEqualsIncludingNaNWithAllowedUlps()",
        "snippet": "    public void testEqualsIncludingNaNWithAllowedUlps() {\n        assertTrue(MathUtils.equalsIncludingNaN(0.0, -0.0, 1));\n\n        assertTrue(MathUtils.equalsIncludingNaN(1.0, 1 + FastMath.ulp(1d), 1));\n        assertFalse(MathUtils.equalsIncludingNaN(1.0, 1 + 2 * FastMath.ulp(1d), 1));\n\n        final double nUp1 = FastMath.nextAfter(1d, Double.POSITIVE_INFINITY);\n        final double nnUp1 = FastMath.nextAfter(nUp1, Double.POSITIVE_INFINITY);\n        assertTrue(MathUtils.equalsIncludingNaN(1.0, nUp1, 1));\n        assertTrue(MathUtils.equalsIncludingNaN(nUp1, nnUp1, 1));\n        assertFalse(MathUtils.equalsIncludingNaN(1.0, nnUp1, 1));\n\n        assertTrue(MathUtils.equalsIncludingNaN(0.0, FastMath.ulp(0d), 1));\n        assertTrue(MathUtils.equalsIncludingNaN(0.0, -FastMath.ulp(0d), 1));\n\n        assertTrue(MathUtils.equalsIncludingNaN(153.0, 153.0, 1));\n\n        assertTrue(MathUtils.equalsIncludingNaN(153.0, 153.00000000000003, 1));\n        assertFalse(MathUtils.equalsIncludingNaN(153.0, 153.00000000000006, 1));\n        assertTrue(MathUtils.equalsIncludingNaN(153.0, 152.99999999999997, 1));\n        assertFalse(MathUtils.equalsIncludingNaN(153, 152.99999999999994, 1));\n\n        assertTrue(MathUtils.equalsIncludingNaN(-128.0, -127.99999999999999, 1));\n        assertFalse(MathUtils.equalsIncludingNaN(-128.0, -127.99999999999997, 1));\n        assertTrue(MathUtils.equalsIncludingNaN(-128.0, -128.00000000000003, 1));\n        assertFalse(MathUtils.equalsIncludingNaN(-128.0, -128.00000000000006, 1));\n\n        assertTrue(MathUtils.equalsIncludingNaN(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, 1));\n        assertTrue(MathUtils.equalsIncludingNaN(Double.MAX_VALUE, Double.POSITIVE_INFINITY, 1));\n\n        assertTrue(MathUtils.equalsIncludingNaN(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, 1));\n        assertTrue(MathUtils.equalsIncludingNaN(-Double.MAX_VALUE, Double.NEGATIVE_INFINITY, 1));\n\n        assertTrue(MathUtils.equalsIncludingNaN(Double.NaN, Double.NaN, 1));\n\n        assertFalse(MathUtils.equalsIncludingNaN(Double.NEGATIVE_INFINITY, Double.POSITIVE_INFINITY, 100000));\n    }\n",
        "begin_line": 400,
        "end_line": 436,
        "comment": "",
        "child_ranges": [
            "(line 401,col 9)-(line 401,col 63)",
            "(line 403,col 9)-(line 403,col 79)",
            "(line 404,col 9)-(line 404,col 84)",
            "(line 406,col 9)-(line 406,col 77)",
            "(line 407,col 9)-(line 407,col 80)",
            "(line 408,col 9)-(line 408,col 63)",
            "(line 409,col 9)-(line 409,col 65)",
            "(line 410,col 9)-(line 410,col 65)",
            "(line 412,col 9)-(line 412,col 75)",
            "(line 413,col 9)-(line 413,col 76)",
            "(line 415,col 9)-(line 415,col 66)",
            "(line 417,col 9)-(line 417,col 79)",
            "(line 418,col 9)-(line 418,col 80)",
            "(line 419,col 9)-(line 419,col 79)",
            "(line 420,col 9)-(line 420,col 78)",
            "(line 422,col 9)-(line 422,col 81)",
            "(line 423,col 9)-(line 423,col 82)",
            "(line 424,col 9)-(line 424,col 81)",
            "(line 425,col 9)-(line 425,col 82)",
            "(line 427,col 9)-(line 427,col 104)",
            "(line 428,col 9)-(line 428,col 96)",
            "(line 430,col 9)-(line 430,col 104)",
            "(line 431,col 9)-(line 431,col 97)",
            "(line 433,col 9)-(line 433,col 76)",
            "(line 435,col 9)-(line 435,col 110)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.util.MathUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/util/MathUtilsTest.java",
        "signature": "org.apache.commons.math.util.MathUtilsTest.testArrayEquals()",
        "snippet": "    public void testArrayEquals() {\n        assertFalse(MathUtils.equals(new double[] { 1d }, null));\n        assertFalse(MathUtils.equals(null, new double[] { 1d }));\n        assertTrue(MathUtils.equals((double[]) null, (double[]) null));\n\n        assertFalse(MathUtils.equals(new double[] { 1d }, new double[0]));\n        assertTrue(MathUtils.equals(new double[] { 1d }, new double[] { 1d }));\n        assertTrue(MathUtils.equals(new double[] {\n                                      Double.POSITIVE_INFINITY,\n                                      Double.NEGATIVE_INFINITY, 1d, 0d\n                                    }, new double[] {\n                                      Double.POSITIVE_INFINITY,\n                                      Double.NEGATIVE_INFINITY, 1d, 0d\n                                    }));\n        assertFalse(MathUtils.equals(new double[] { Double.NaN },\n                                     new double[] { Double.NaN }));\n        assertFalse(MathUtils.equals(new double[] { Double.POSITIVE_INFINITY },\n                                     new double[] { Double.NEGATIVE_INFINITY }));\n        assertFalse(MathUtils.equals(new double[] { 1d },\n                                     new double[] { FastMath.nextAfter(FastMath.nextAfter(1d, 2d), 2d) }));\n\n    }\n",
        "begin_line": 442,
        "end_line": 463,
        "comment": "\n     * @deprecated To be removed in release 3.0 (replaced by {@link\n     * #testArrayEqualsIncludingNaN()}.\n     ",
        "child_ranges": [
            "(line 443,col 9)-(line 443,col 65)",
            "(line 444,col 9)-(line 444,col 65)",
            "(line 445,col 9)-(line 445,col 71)",
            "(line 447,col 9)-(line 447,col 74)",
            "(line 448,col 9)-(line 448,col 79)",
            "(line 449,col 9)-(line 455,col 40)",
            "(line 456,col 9)-(line 457,col 67)",
            "(line 458,col 9)-(line 459,col 81)",
            "(line 460,col 9)-(line 461,col 107)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.util.MathUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/util/MathUtilsTest.java",
        "signature": "org.apache.commons.math.util.MathUtilsTest.testArrayEqualsIncludingNaN()",
        "snippet": "    public void testArrayEqualsIncludingNaN() {\n        assertFalse(MathUtils.equalsIncludingNaN(new double[] { 1d }, null));\n        assertFalse(MathUtils.equalsIncludingNaN(null, new double[] { 1d }));\n        assertTrue(MathUtils.equalsIncludingNaN((double[]) null, (double[]) null));\n\n        assertFalse(MathUtils.equalsIncludingNaN(new double[] { 1d }, new double[0]));\n        assertTrue(MathUtils.equalsIncludingNaN(new double[] { 1d }, new double[] { 1d }));\n        assertTrue(MathUtils.equalsIncludingNaN(new double[] {\n                    Double.NaN, Double.POSITIVE_INFINITY,\n                    Double.NEGATIVE_INFINITY, 1d, 0d\n                }, new double[] {\n                    Double.NaN, Double.POSITIVE_INFINITY,\n                    Double.NEGATIVE_INFINITY, 1d, 0d\n                }));\n        assertFalse(MathUtils.equalsIncludingNaN(new double[] { Double.POSITIVE_INFINITY },\n                                                 new double[] { Double.NEGATIVE_INFINITY }));\n        assertFalse(MathUtils.equalsIncludingNaN(new double[] { 1d },\n                                                 new double[] { FastMath.nextAfter(FastMath.nextAfter(1d, 2d), 2d) }));\n    }\n",
        "begin_line": 465,
        "end_line": 483,
        "comment": "",
        "child_ranges": [
            "(line 466,col 9)-(line 466,col 77)",
            "(line 467,col 9)-(line 467,col 77)",
            "(line 468,col 9)-(line 468,col 83)",
            "(line 470,col 9)-(line 470,col 86)",
            "(line 471,col 9)-(line 471,col 91)",
            "(line 472,col 9)-(line 478,col 20)",
            "(line 479,col 9)-(line 480,col 93)",
            "(line 481,col 9)-(line 482,col 119)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.util.MathUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/util/MathUtilsTest.java",
        "signature": "org.apache.commons.math.util.MathUtilsTest.testFactorial()",
        "snippet": "    public void testFactorial() {\n        for (int i = 1; i < 21; i++) {\n            assertEquals(i + \"! \", factorial(i), MathUtils.factorial(i));\n            assertEquals(i + \"! \", factorial(i), MathUtils.factorialDouble(i), Double.MIN_VALUE);\n            assertEquals(i + \"! \", FastMath.log(factorial(i)), MathUtils.factorialLog(i), 10E-12);\n        }\n\n        assertEquals(\"0\", 1, MathUtils.factorial(0));\n        assertEquals(\"0\", 1.0d, MathUtils.factorialDouble(0), 1E-14);\n        assertEquals(\"0\", 0.0d, MathUtils.factorialLog(0), 1E-14);\n    }\n",
        "begin_line": 485,
        "end_line": 495,
        "comment": "",
        "child_ranges": [
            "(line 486,col 9)-(line 490,col 9)",
            "(line 492,col 9)-(line 492,col 53)",
            "(line 493,col 9)-(line 493,col 69)",
            "(line 494,col 9)-(line 494,col 66)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.util.MathUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/util/MathUtilsTest.java",
        "signature": "org.apache.commons.math.util.MathUtilsTest.testFactorialFail()",
        "snippet": "    public void testFactorialFail() {\n        try {\n            MathUtils.factorial(-1);\n            fail(\"expecting IllegalArgumentException\");\n        } catch (IllegalArgumentException ex) {\n            // ignored\n        }\n        try {\n            MathUtils.factorialDouble(-1);\n            fail(\"expecting IllegalArgumentException\");\n        } catch (IllegalArgumentException ex) {\n            // ignored\n        }\n        try {\n            MathUtils.factorialLog(-1);\n            fail(\"expecting IllegalArgumentException\");\n        } catch (IllegalArgumentException ex) {\n            // ignored\n        }\n        try {\n            MathUtils.factorial(21);\n            fail(\"expecting ArithmeticException\");\n        } catch (ArithmeticException ex) {\n            // ignored\n        }\n        assertTrue(\"expecting infinite factorial value\", Double.isInfinite(MathUtils.factorialDouble(171)));\n    }\n",
        "begin_line": 497,
        "end_line": 523,
        "comment": "",
        "child_ranges": [
            "(line 498,col 9)-(line 503,col 9)",
            "(line 504,col 9)-(line 509,col 9)",
            "(line 510,col 9)-(line 515,col 9)",
            "(line 516,col 9)-(line 521,col 9)",
            "(line 522,col 9)-(line 522,col 108)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.util.MathUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/util/MathUtilsTest.java",
        "signature": "org.apache.commons.math.util.MathUtilsTest.testGcd()",
        "snippet": "    public void testGcd() {\n        int a = 30;\n        int b = 50;\n        int c = 77;\n\n        assertEquals(0, MathUtils.gcd(0, 0));\n\n        assertEquals(b, MathUtils.gcd(0, b));\n        assertEquals(a, MathUtils.gcd(a, 0));\n        assertEquals(b, MathUtils.gcd(0, -b));\n        assertEquals(a, MathUtils.gcd(-a, 0));\n\n        assertEquals(10, MathUtils.gcd(a, b));\n        assertEquals(10, MathUtils.gcd(-a, b));\n        assertEquals(10, MathUtils.gcd(a, -b));\n        assertEquals(10, MathUtils.gcd(-a, -b));\n\n        assertEquals(1, MathUtils.gcd(a, c));\n        assertEquals(1, MathUtils.gcd(-a, c));\n        assertEquals(1, MathUtils.gcd(a, -c));\n        assertEquals(1, MathUtils.gcd(-a, -c));\n\n        assertEquals(3 * (1<<15), MathUtils.gcd(3 * (1<<20), 9 * (1<<15)));\n\n        assertEquals(Integer.MAX_VALUE, MathUtils.gcd(Integer.MAX_VALUE, 0));\n        assertEquals(Integer.MAX_VALUE, MathUtils.gcd(-Integer.MAX_VALUE, 0));\n        assertEquals(1<<30, MathUtils.gcd(1<<30, -Integer.MIN_VALUE));\n        try {\n            // gcd(Integer.MIN_VALUE, 0) > Integer.MAX_VALUE\n            MathUtils.gcd(Integer.MIN_VALUE, 0);\n            fail(\"expecting ArithmeticException\");\n        } catch (ArithmeticException expected) {\n            // expected\n        }\n        try {\n            // gcd(0, Integer.MIN_VALUE) > Integer.MAX_VALUE\n            MathUtils.gcd(0, Integer.MIN_VALUE);\n            fail(\"expecting ArithmeticException\");\n        } catch (ArithmeticException expected) {\n            // expected\n        }\n        try {\n            // gcd(Integer.MIN_VALUE, Integer.MIN_VALUE) > Integer.MAX_VALUE\n            MathUtils.gcd(Integer.MIN_VALUE, Integer.MIN_VALUE);\n            fail(\"expecting ArithmeticException\");\n        } catch (ArithmeticException expected) {\n            // expected\n        }\n    }\n",
        "begin_line": 525,
        "end_line": 573,
        "comment": "",
        "child_ranges": [
            "(line 526,col 9)-(line 526,col 19)",
            "(line 527,col 9)-(line 527,col 19)",
            "(line 528,col 9)-(line 528,col 19)",
            "(line 530,col 9)-(line 530,col 45)",
            "(line 532,col 9)-(line 532,col 45)",
            "(line 533,col 9)-(line 533,col 45)",
            "(line 534,col 9)-(line 534,col 46)",
            "(line 535,col 9)-(line 535,col 46)",
            "(line 537,col 9)-(line 537,col 46)",
            "(line 538,col 9)-(line 538,col 47)",
            "(line 539,col 9)-(line 539,col 47)",
            "(line 540,col 9)-(line 540,col 48)",
            "(line 542,col 9)-(line 542,col 45)",
            "(line 543,col 9)-(line 543,col 46)",
            "(line 544,col 9)-(line 544,col 46)",
            "(line 545,col 9)-(line 545,col 47)",
            "(line 547,col 9)-(line 547,col 75)",
            "(line 549,col 9)-(line 549,col 77)",
            "(line 550,col 9)-(line 550,col 78)",
            "(line 551,col 9)-(line 551,col 70)",
            "(line 552,col 9)-(line 558,col 9)",
            "(line 559,col 9)-(line 565,col 9)",
            "(line 566,col 9)-(line 572,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.util.MathUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/util/MathUtilsTest.java",
        "signature": "org.apache.commons.math.util.MathUtilsTest.testGcdLong()",
        "snippet": "    public void  testGcdLong(){\n        long a = 30;\n        long b = 50;\n        long c = 77;\n\n        assertEquals(0, MathUtils.gcd(0L, 0));\n\n        assertEquals(b, MathUtils.gcd(0, b));\n        assertEquals(a, MathUtils.gcd(a, 0));\n        assertEquals(b, MathUtils.gcd(0, -b));\n        assertEquals(a, MathUtils.gcd(-a, 0));\n\n        assertEquals(10, MathUtils.gcd(a, b));\n        assertEquals(10, MathUtils.gcd(-a, b));\n        assertEquals(10, MathUtils.gcd(a, -b));\n        assertEquals(10, MathUtils.gcd(-a, -b));\n\n        assertEquals(1, MathUtils.gcd(a, c));\n        assertEquals(1, MathUtils.gcd(-a, c));\n        assertEquals(1, MathUtils.gcd(a, -c));\n        assertEquals(1, MathUtils.gcd(-a, -c));\n\n        assertEquals(3L * (1L<<45), MathUtils.gcd(3L * (1L<<50), 9L * (1L<<45)));\n\n        assertEquals(1L<<45, MathUtils.gcd(1L<<45, Long.MIN_VALUE));\n\n        assertEquals(Long.MAX_VALUE, MathUtils.gcd(Long.MAX_VALUE, 0L));\n        assertEquals(Long.MAX_VALUE, MathUtils.gcd(-Long.MAX_VALUE, 0L));\n        assertEquals(1, MathUtils.gcd(60247241209L, 153092023L));\n        try {\n            // gcd(Long.MIN_VALUE, 0) > Long.MAX_VALUE\n            MathUtils.gcd(Long.MIN_VALUE, 0);\n            fail(\"expecting ArithmeticException\");\n        } catch (ArithmeticException expected) {\n            // expected\n        }\n        try {\n            // gcd(0, Long.MIN_VALUE) > Long.MAX_VALUE\n            MathUtils.gcd(0, Long.MIN_VALUE);\n            fail(\"expecting ArithmeticException\");\n        } catch (ArithmeticException expected) {\n            // expected\n        }\n        try {\n            // gcd(Long.MIN_VALUE, Long.MIN_VALUE) > Long.MAX_VALUE\n            MathUtils.gcd(Long.MIN_VALUE, Long.MIN_VALUE);\n            fail(\"expecting ArithmeticException\");\n        } catch (ArithmeticException expected) {\n            // expected\n        }\n    }\n",
        "begin_line": 575,
        "end_line": 625,
        "comment": "",
        "child_ranges": [
            "(line 576,col 9)-(line 576,col 20)",
            "(line 577,col 9)-(line 577,col 20)",
            "(line 578,col 9)-(line 578,col 20)",
            "(line 580,col 9)-(line 580,col 46)",
            "(line 582,col 9)-(line 582,col 45)",
            "(line 583,col 9)-(line 583,col 45)",
            "(line 584,col 9)-(line 584,col 46)",
            "(line 585,col 9)-(line 585,col 46)",
            "(line 587,col 9)-(line 587,col 46)",
            "(line 588,col 9)-(line 588,col 47)",
            "(line 589,col 9)-(line 589,col 47)",
            "(line 590,col 9)-(line 590,col 48)",
            "(line 592,col 9)-(line 592,col 45)",
            "(line 593,col 9)-(line 593,col 46)",
            "(line 594,col 9)-(line 594,col 46)",
            "(line 595,col 9)-(line 595,col 47)",
            "(line 597,col 9)-(line 597,col 81)",
            "(line 599,col 9)-(line 599,col 68)",
            "(line 601,col 9)-(line 601,col 72)",
            "(line 602,col 9)-(line 602,col 73)",
            "(line 603,col 9)-(line 603,col 65)",
            "(line 604,col 9)-(line 610,col 9)",
            "(line 611,col 9)-(line 617,col 9)",
            "(line 618,col 9)-(line 624,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.util.MathUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/util/MathUtilsTest.java",
        "signature": "org.apache.commons.math.util.MathUtilsTest.testGcdConsistency()",
        "snippet": "    public void testGcdConsistency() {\n        int[] primeList = {19, 23, 53, 67, 73, 79, 101, 103, 111, 131};\n        ArrayList<Integer> primes = new ArrayList<Integer>();\n        for (int i = 0; i < primeList.length; i++) {\n            primes.add(Integer.valueOf(primeList[i]));\n        }\n        RandomDataImpl randomData = new RandomDataImpl();\n        for (int i = 0; i < 20; i++) {\n            Object[] sample = randomData.nextSample(primes, 4);\n            int p1 = ((Integer) sample[0]).intValue();\n            int p2 = ((Integer) sample[1]).intValue();\n            int p3 = ((Integer) sample[2]).intValue();\n            int p4 = ((Integer) sample[3]).intValue();\n            int i1 = p1 * p2 * p3;\n            int i2 = p1 * p2 * p4;\n            int gcd = p1 * p2;\n            assertEquals(gcd, MathUtils.gcd(i1, i2));\n            long l1 = i1;\n            long l2 = i2;\n            assertEquals(gcd, MathUtils.gcd(l1, l2));\n        }\n    }\n",
        "begin_line": 627,
        "end_line": 648,
        "comment": "",
        "child_ranges": [
            "(line 628,col 9)-(line 628,col 71)",
            "(line 629,col 9)-(line 629,col 61)",
            "(line 630,col 9)-(line 632,col 9)",
            "(line 633,col 9)-(line 633,col 57)",
            "(line 634,col 9)-(line 647,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.util.MathUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/util/MathUtilsTest.java",
        "signature": "org.apache.commons.math.util.MathUtilsTest.testHash()",
        "snippet": "    public void testHash() {\n        double[] testArray = {\n            Double.NaN,\n            Double.POSITIVE_INFINITY,\n            Double.NEGATIVE_INFINITY,\n            1d,\n            0d,\n            1E-14,\n            (1 + 1E-14),\n            Double.MIN_VALUE,\n            Double.MAX_VALUE };\n        for (int i = 0; i < testArray.length; i++) {\n            for (int j = 0; j < testArray.length; j++) {\n                if (i == j) {\n                    assertEquals(MathUtils.hash(testArray[i]), MathUtils.hash(testArray[j]));\n                    assertEquals(MathUtils.hash(testArray[j]), MathUtils.hash(testArray[i]));\n                } else {\n                    assertTrue(MathUtils.hash(testArray[i]) != MathUtils.hash(testArray[j]));\n                    assertTrue(MathUtils.hash(testArray[j]) != MathUtils.hash(testArray[i]));\n                }\n            }\n        }\n    }\n",
        "begin_line": 650,
        "end_line": 672,
        "comment": "",
        "child_ranges": [
            "(line 651,col 9)-(line 660,col 31)",
            "(line 661,col 9)-(line 671,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.util.MathUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/util/MathUtilsTest.java",
        "signature": "org.apache.commons.math.util.MathUtilsTest.testArrayHash()",
        "snippet": "    public void testArrayHash() {\n        assertEquals(0, MathUtils.hash((double[]) null));\n        assertEquals(MathUtils.hash(new double[] {\n                                      Double.NaN, Double.POSITIVE_INFINITY,\n                                      Double.NEGATIVE_INFINITY, 1d, 0d\n                                    }),\n                     MathUtils.hash(new double[] {\n                                      Double.NaN, Double.POSITIVE_INFINITY,\n                                      Double.NEGATIVE_INFINITY, 1d, 0d\n                                    }));\n        assertFalse(MathUtils.hash(new double[] { 1d }) ==\n                    MathUtils.hash(new double[] { FastMath.nextAfter(1d, 2d) }));\n        assertFalse(MathUtils.hash(new double[] { 1d }) ==\n                    MathUtils.hash(new double[] { 1d, 1d }));\n    }\n",
        "begin_line": 674,
        "end_line": 688,
        "comment": "",
        "child_ranges": [
            "(line 675,col 9)-(line 675,col 57)",
            "(line 676,col 9)-(line 683,col 40)",
            "(line 684,col 9)-(line 685,col 81)",
            "(line 686,col 9)-(line 687,col 61)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.util.MathUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/util/MathUtilsTest.java",
        "signature": "org.apache.commons.math.util.MathUtilsTest.testPermutedArrayHash()",
        "snippet": "    public void testPermutedArrayHash() {\n        double[] original = new double[10];\n        double[] permuted = new double[10];\n        RandomDataImpl random = new RandomDataImpl();\n\n        // Generate 10 distinct random values\n        for (int i = 0; i < 10; i++) {\n            original[i] = random.nextUniform(i + 0.5, i + 0.75);\n        }\n\n        // Generate a random permutation, making sure it is not the identity\n        boolean isIdentity = true;\n        do {\n            int[] permutation = random.nextPermutation(10, 10);\n            for (int i = 0; i < 10; i++) {\n                if (i != permutation[i]) {\n                    isIdentity = false;\n                }\n                permuted[i] = original[permutation[i]];\n            }\n        } while (isIdentity);\n\n        // Verify that permuted array has different hash\n        assertFalse(MathUtils.hash(original) == MathUtils.hash(permuted));\n    }\n",
        "begin_line": 693,
        "end_line": 717,
        "comment": "\n     * Make sure that permuted arrays do not hash to the same value.\n     ",
        "child_ranges": [
            "(line 694,col 9)-(line 694,col 43)",
            "(line 695,col 9)-(line 695,col 43)",
            "(line 696,col 9)-(line 696,col 53)",
            "(line 699,col 9)-(line 701,col 9)",
            "(line 704,col 9)-(line 704,col 34)",
            "(line 705,col 9)-(line 713,col 29)",
            "(line 716,col 9)-(line 716,col 74)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.util.MathUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/util/MathUtilsTest.java",
        "signature": "org.apache.commons.math.util.MathUtilsTest.testIndicatorByte()",
        "snippet": "    public void testIndicatorByte() {\n        assertEquals((byte)1, MathUtils.indicator((byte)2));\n        assertEquals((byte)1, MathUtils.indicator((byte)0));\n        assertEquals((byte)(-1), MathUtils.indicator((byte)(-2)));\n    }\n",
        "begin_line": 719,
        "end_line": 723,
        "comment": "",
        "child_ranges": [
            "(line 720,col 9)-(line 720,col 60)",
            "(line 721,col 9)-(line 721,col 60)",
            "(line 722,col 9)-(line 722,col 66)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.util.MathUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/util/MathUtilsTest.java",
        "signature": "org.apache.commons.math.util.MathUtilsTest.testIndicatorDouble()",
        "snippet": "    public void testIndicatorDouble() {\n        double delta = 0.0;\n        assertEquals(1.0, MathUtils.indicator(2.0), delta);\n        assertEquals(1.0, MathUtils.indicator(0.0), delta);\n        assertEquals(-1.0, MathUtils.indicator(-2.0), delta);\n        assertEquals(Double.NaN, MathUtils.indicator(Double.NaN));\n    }\n",
        "begin_line": 725,
        "end_line": 731,
        "comment": "",
        "child_ranges": [
            "(line 726,col 9)-(line 726,col 27)",
            "(line 727,col 9)-(line 727,col 59)",
            "(line 728,col 9)-(line 728,col 59)",
            "(line 729,col 9)-(line 729,col 61)",
            "(line 730,col 9)-(line 730,col 66)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.util.MathUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/util/MathUtilsTest.java",
        "signature": "org.apache.commons.math.util.MathUtilsTest.testIndicatorFloat()",
        "snippet": "    public void testIndicatorFloat() {\n        float delta = 0.0F;\n        assertEquals(1.0F, MathUtils.indicator(2.0F), delta);\n        assertEquals(1.0F, MathUtils.indicator(0.0F), delta);\n        assertEquals(-1.0F, MathUtils.indicator(-2.0F), delta);\n    }\n",
        "begin_line": 733,
        "end_line": 738,
        "comment": "",
        "child_ranges": [
            "(line 734,col 9)-(line 734,col 27)",
            "(line 735,col 9)-(line 735,col 61)",
            "(line 736,col 9)-(line 736,col 61)",
            "(line 737,col 9)-(line 737,col 63)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.util.MathUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/util/MathUtilsTest.java",
        "signature": "org.apache.commons.math.util.MathUtilsTest.testIndicatorInt()",
        "snippet": "    public void testIndicatorInt() {\n        assertEquals(1, MathUtils.indicator((2)));\n        assertEquals(1, MathUtils.indicator((0)));\n        assertEquals((-1), MathUtils.indicator((-2)));\n    }\n",
        "begin_line": 740,
        "end_line": 744,
        "comment": "",
        "child_ranges": [
            "(line 741,col 9)-(line 741,col 50)",
            "(line 742,col 9)-(line 742,col 50)",
            "(line 743,col 9)-(line 743,col 54)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.util.MathUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/util/MathUtilsTest.java",
        "signature": "org.apache.commons.math.util.MathUtilsTest.testIndicatorLong()",
        "snippet": "    public void testIndicatorLong() {\n        assertEquals(1L, MathUtils.indicator(2L));\n        assertEquals(1L, MathUtils.indicator(0L));\n        assertEquals(-1L, MathUtils.indicator(-2L));\n    }\n",
        "begin_line": 746,
        "end_line": 750,
        "comment": "",
        "child_ranges": [
            "(line 747,col 9)-(line 747,col 50)",
            "(line 748,col 9)-(line 748,col 50)",
            "(line 749,col 9)-(line 749,col 52)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.util.MathUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/util/MathUtilsTest.java",
        "signature": "org.apache.commons.math.util.MathUtilsTest.testIndicatorShort()",
        "snippet": "    public void testIndicatorShort() {\n        assertEquals((short)1, MathUtils.indicator((short)2));\n        assertEquals((short)1, MathUtils.indicator((short)0));\n        assertEquals((short)(-1), MathUtils.indicator((short)(-2)));\n    }\n",
        "begin_line": 752,
        "end_line": 756,
        "comment": "",
        "child_ranges": [
            "(line 753,col 9)-(line 753,col 62)",
            "(line 754,col 9)-(line 754,col 62)",
            "(line 755,col 9)-(line 755,col 68)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.util.MathUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/util/MathUtilsTest.java",
        "signature": "org.apache.commons.math.util.MathUtilsTest.testLcm()",
        "snippet": "    public void testLcm() {\n        int a = 30;\n        int b = 50;\n        int c = 77;\n\n        assertEquals(0, MathUtils.lcm(0, b));\n        assertEquals(0, MathUtils.lcm(a, 0));\n        assertEquals(b, MathUtils.lcm(1, b));\n        assertEquals(a, MathUtils.lcm(a, 1));\n        assertEquals(150, MathUtils.lcm(a, b));\n        assertEquals(150, MathUtils.lcm(-a, b));\n        assertEquals(150, MathUtils.lcm(a, -b));\n        assertEquals(150, MathUtils.lcm(-a, -b));\n        assertEquals(2310, MathUtils.lcm(a, c));\n\n        // Assert that no intermediate value overflows:\n        // The naive implementation of lcm(a,b) would be (a*b)/gcd(a,b)\n        assertEquals((1<<20)*15, MathUtils.lcm((1<<20)*3, (1<<20)*5));\n\n        // Special case\n        assertEquals(0, MathUtils.lcm(0, 0));\n\n        try {\n            // lcm == abs(MIN_VALUE) cannot be represented as a nonnegative int\n            MathUtils.lcm(Integer.MIN_VALUE, 1);\n            fail(\"Expecting ArithmeticException\");\n        } catch (ArithmeticException expected) {\n            // expected\n        }\n\n        try {\n            // lcm == abs(MIN_VALUE) cannot be represented as a nonnegative int\n            MathUtils.lcm(Integer.MIN_VALUE, 1<<20);\n            fail(\"Expecting ArithmeticException\");\n        } catch (ArithmeticException expected) {\n            // expected\n        }\n\n        try {\n            MathUtils.lcm(Integer.MAX_VALUE, Integer.MAX_VALUE - 1);\n            fail(\"Expecting ArithmeticException\");\n        } catch (ArithmeticException expected) {\n            // expected\n        }\n    }\n",
        "begin_line": 758,
        "end_line": 802,
        "comment": "",
        "child_ranges": [
            "(line 759,col 9)-(line 759,col 19)",
            "(line 760,col 9)-(line 760,col 19)",
            "(line 761,col 9)-(line 761,col 19)",
            "(line 763,col 9)-(line 763,col 45)",
            "(line 764,col 9)-(line 764,col 45)",
            "(line 765,col 9)-(line 765,col 45)",
            "(line 766,col 9)-(line 766,col 45)",
            "(line 767,col 9)-(line 767,col 47)",
            "(line 768,col 9)-(line 768,col 48)",
            "(line 769,col 9)-(line 769,col 48)",
            "(line 770,col 9)-(line 770,col 49)",
            "(line 771,col 9)-(line 771,col 48)",
            "(line 775,col 9)-(line 775,col 70)",
            "(line 778,col 9)-(line 778,col 45)",
            "(line 780,col 9)-(line 786,col 9)",
            "(line 788,col 9)-(line 794,col 9)",
            "(line 796,col 9)-(line 801,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.util.MathUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/util/MathUtilsTest.java",
        "signature": "org.apache.commons.math.util.MathUtilsTest.testLcmLong()",
        "snippet": "    public void testLcmLong() {\n        long a = 30;\n        long b = 50;\n        long c = 77;\n\n        assertEquals(0, MathUtils.lcm(0, b));\n        assertEquals(0, MathUtils.lcm(a, 0));\n        assertEquals(b, MathUtils.lcm(1, b));\n        assertEquals(a, MathUtils.lcm(a, 1));\n        assertEquals(150, MathUtils.lcm(a, b));\n        assertEquals(150, MathUtils.lcm(-a, b));\n        assertEquals(150, MathUtils.lcm(a, -b));\n        assertEquals(150, MathUtils.lcm(-a, -b));\n        assertEquals(2310, MathUtils.lcm(a, c));\n\n        assertEquals(Long.MAX_VALUE, MathUtils.lcm(60247241209L, 153092023L));\n\n        // Assert that no intermediate value overflows:\n        // The naive implementation of lcm(a,b) would be (a*b)/gcd(a,b)\n        assertEquals((1L<<50)*15, MathUtils.lcm((1L<<45)*3, (1L<<50)*5));\n\n        // Special case\n        assertEquals(0L, MathUtils.lcm(0L, 0L));\n\n        try {\n            // lcm == abs(MIN_VALUE) cannot be represented as a nonnegative int\n            MathUtils.lcm(Long.MIN_VALUE, 1);\n            fail(\"Expecting ArithmeticException\");\n        } catch (ArithmeticException expected) {\n            // expected\n        }\n\n        try {\n            // lcm == abs(MIN_VALUE) cannot be represented as a nonnegative int\n            MathUtils.lcm(Long.MIN_VALUE, 1<<20);\n            fail(\"Expecting ArithmeticException\");\n        } catch (ArithmeticException expected) {\n            // expected\n        }\n\n        assertEquals((long) Integer.MAX_VALUE * (Integer.MAX_VALUE - 1),\n            MathUtils.lcm((long)Integer.MAX_VALUE, Integer.MAX_VALUE - 1));\n        try {\n            MathUtils.lcm(Long.MAX_VALUE, Long.MAX_VALUE - 1);\n            fail(\"Expecting ArithmeticException\");\n        } catch (ArithmeticException expected) {\n            // expected\n        }\n    }\n",
        "begin_line": 804,
        "end_line": 852,
        "comment": "",
        "child_ranges": [
            "(line 805,col 9)-(line 805,col 20)",
            "(line 806,col 9)-(line 806,col 20)",
            "(line 807,col 9)-(line 807,col 20)",
            "(line 809,col 9)-(line 809,col 45)",
            "(line 810,col 9)-(line 810,col 45)",
            "(line 811,col 9)-(line 811,col 45)",
            "(line 812,col 9)-(line 812,col 45)",
            "(line 813,col 9)-(line 813,col 47)",
            "(line 814,col 9)-(line 814,col 48)",
            "(line 815,col 9)-(line 815,col 48)",
            "(line 816,col 9)-(line 816,col 49)",
            "(line 817,col 9)-(line 817,col 48)",
            "(line 819,col 9)-(line 819,col 78)",
            "(line 823,col 9)-(line 823,col 73)",
            "(line 826,col 9)-(line 826,col 48)",
            "(line 828,col 9)-(line 834,col 9)",
            "(line 836,col 9)-(line 842,col 9)",
            "(line 844,col 9)-(line 845,col 75)",
            "(line 846,col 9)-(line 851,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.util.MathUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/util/MathUtilsTest.java",
        "signature": "org.apache.commons.math.util.MathUtilsTest.testLog()",
        "snippet": "    public void testLog() {\n        assertEquals(2.0, MathUtils.log(2, 4), 0);\n        assertEquals(3.0, MathUtils.log(2, 8), 0);\n        assertTrue(Double.isNaN(MathUtils.log(-1, 1)));\n        assertTrue(Double.isNaN(MathUtils.log(1, -1)));\n        assertTrue(Double.isNaN(MathUtils.log(0, 0)));\n        assertEquals(0, MathUtils.log(0, 10), 0);\n        assertEquals(Double.NEGATIVE_INFINITY, MathUtils.log(10, 0), 0);\n    }\n",
        "begin_line": 854,
        "end_line": 862,
        "comment": "",
        "child_ranges": [
            "(line 855,col 9)-(line 855,col 50)",
            "(line 856,col 9)-(line 856,col 50)",
            "(line 857,col 9)-(line 857,col 55)",
            "(line 858,col 9)-(line 858,col 55)",
            "(line 859,col 9)-(line 859,col 54)",
            "(line 860,col 9)-(line 860,col 49)",
            "(line 861,col 9)-(line 861,col 72)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.util.MathUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/util/MathUtilsTest.java",
        "signature": "org.apache.commons.math.util.MathUtilsTest.testMulAndCheck()",
        "snippet": "    public void testMulAndCheck() {\n        int big = Integer.MAX_VALUE;\n        int bigNeg = Integer.MIN_VALUE;\n        assertEquals(big, MathUtils.mulAndCheck(big, 1));\n        try {\n            MathUtils.mulAndCheck(big, 2);\n            fail(\"Expecting ArithmeticException\");\n        } catch (ArithmeticException ex) {\n        }\n        try {\n            MathUtils.mulAndCheck(bigNeg, 2);\n            fail(\"Expecting ArithmeticException\");\n        } catch (ArithmeticException ex) {\n        }\n    }\n",
        "begin_line": 864,
        "end_line": 878,
        "comment": "",
        "child_ranges": [
            "(line 865,col 9)-(line 865,col 36)",
            "(line 866,col 9)-(line 866,col 39)",
            "(line 867,col 9)-(line 867,col 57)",
            "(line 868,col 9)-(line 872,col 9)",
            "(line 873,col 9)-(line 877,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.util.MathUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/util/MathUtilsTest.java",
        "signature": "org.apache.commons.math.util.MathUtilsTest.testMulAndCheckLong()",
        "snippet": "    public void testMulAndCheckLong() {\n        long max = Long.MAX_VALUE;\n        long min = Long.MIN_VALUE;\n        assertEquals(max, MathUtils.mulAndCheck(max, 1L));\n        assertEquals(min, MathUtils.mulAndCheck(min, 1L));\n        assertEquals(0L, MathUtils.mulAndCheck(max, 0L));\n        assertEquals(0L, MathUtils.mulAndCheck(min, 0L));\n        assertEquals(max, MathUtils.mulAndCheck(1L, max));\n        assertEquals(min, MathUtils.mulAndCheck(1L, min));\n        assertEquals(0L, MathUtils.mulAndCheck(0L, max));\n        assertEquals(0L, MathUtils.mulAndCheck(0L, min));\n        assertEquals(1L, MathUtils.mulAndCheck(-1L, -1L));\n        assertEquals(min, MathUtils.mulAndCheck(min / 2, 2));\n        testMulAndCheckLongFailure(max, 2L);\n        testMulAndCheckLongFailure(2L, max);\n        testMulAndCheckLongFailure(min, 2L);\n        testMulAndCheckLongFailure(2L, min);\n        testMulAndCheckLongFailure(min, -1L);\n        testMulAndCheckLongFailure(-1L, min);\n    }\n",
        "begin_line": 880,
        "end_line": 899,
        "comment": "",
        "child_ranges": [
            "(line 881,col 9)-(line 881,col 34)",
            "(line 882,col 9)-(line 882,col 34)",
            "(line 883,col 9)-(line 883,col 58)",
            "(line 884,col 9)-(line 884,col 58)",
            "(line 885,col 9)-(line 885,col 57)",
            "(line 886,col 9)-(line 886,col 57)",
            "(line 887,col 9)-(line 887,col 58)",
            "(line 888,col 9)-(line 888,col 58)",
            "(line 889,col 9)-(line 889,col 57)",
            "(line 890,col 9)-(line 890,col 57)",
            "(line 891,col 9)-(line 891,col 58)",
            "(line 892,col 9)-(line 892,col 61)",
            "(line 893,col 9)-(line 893,col 44)",
            "(line 894,col 9)-(line 894,col 44)",
            "(line 895,col 9)-(line 895,col 44)",
            "(line 896,col 9)-(line 896,col 44)",
            "(line 897,col 9)-(line 897,col 45)",
            "(line 898,col 9)-(line 898,col 45)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.util.MathUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/util/MathUtilsTest.java",
        "signature": "org.apache.commons.math.util.MathUtilsTest.testMulAndCheckLongFailure(long, long)",
        "snippet": "    private void testMulAndCheckLongFailure(long a, long b) {\n        try {\n            MathUtils.mulAndCheck(a, b);\n            fail(\"Expecting ArithmeticException\");\n        } catch (ArithmeticException ex) {\n            // success\n        }\n    }\n",
        "begin_line": 901,
        "end_line": 908,
        "comment": "",
        "child_ranges": [
            "(line 902,col 9)-(line 907,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.util.MathUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/util/MathUtilsTest.java",
        "signature": "org.apache.commons.math.util.MathUtilsTest.testNextAfter()",
        "snippet": "    public void testNextAfter() {\n        // 0x402fffffffffffff 0x404123456789abcd -> 4030000000000000\n        assertEquals(16.0, FastMath.nextAfter(15.999999999999998, 34.27555555555555), 0.0);\n\n        // 0xc02fffffffffffff 0x404123456789abcd -> c02ffffffffffffe\n        assertEquals(-15.999999999999996, FastMath.nextAfter(-15.999999999999998, 34.27555555555555), 0.0);\n\n        // 0x402fffffffffffff 0x400123456789abcd -> 402ffffffffffffe\n        assertEquals(15.999999999999996, FastMath.nextAfter(15.999999999999998, 2.142222222222222), 0.0);\n\n        // 0xc02fffffffffffff 0x400123456789abcd -> c02ffffffffffffe\n        assertEquals(-15.999999999999996, FastMath.nextAfter(-15.999999999999998, 2.142222222222222), 0.0);\n\n        // 0x4020000000000000 0x404123456789abcd -> 4020000000000001\n        assertEquals(8.000000000000002, FastMath.nextAfter(8.0, 34.27555555555555), 0.0);\n\n        // 0xc020000000000000 0x404123456789abcd -> c01fffffffffffff\n        assertEquals(-7.999999999999999, FastMath.nextAfter(-8.0, 34.27555555555555), 0.0);\n\n        // 0x4020000000000000 0x400123456789abcd -> 401fffffffffffff\n        assertEquals(7.999999999999999, FastMath.nextAfter(8.0, 2.142222222222222), 0.0);\n\n        // 0xc020000000000000 0x400123456789abcd -> c01fffffffffffff\n        assertEquals(-7.999999999999999, FastMath.nextAfter(-8.0, 2.142222222222222), 0.0);\n\n        // 0x3f2e43753d36a223 0x3f2e43753d36a224 -> 3f2e43753d36a224\n        assertEquals(2.308922399667661E-4, FastMath.nextAfter(2.3089223996676606E-4, 2.308922399667661E-4), 0.0);\n\n        // 0x3f2e43753d36a223 0x3f2e43753d36a223 -> 3f2e43753d36a224\n        assertEquals(2.308922399667661E-4, FastMath.nextAfter(2.3089223996676606E-4, 2.3089223996676606E-4), 0.0);\n\n        // 0x3f2e43753d36a223 0x3f2e43753d36a222 -> 3f2e43753d36a222\n        assertEquals(2.3089223996676603E-4, FastMath.nextAfter(2.3089223996676606E-4, 2.3089223996676603E-4), 0.0);\n\n        // 0x3f2e43753d36a223 0xbf2e43753d36a224 -> 3f2e43753d36a222\n        assertEquals(2.3089223996676603E-4, FastMath.nextAfter(2.3089223996676606E-4, -2.308922399667661E-4), 0.0);\n\n        // 0x3f2e43753d36a223 0xbf2e43753d36a223 -> 3f2e43753d36a222\n        assertEquals(2.3089223996676603E-4, FastMath.nextAfter(2.3089223996676606E-4, -2.3089223996676606E-4), 0.0);\n\n        // 0x3f2e43753d36a223 0xbf2e43753d36a222 -> 3f2e43753d36a222\n        assertEquals(2.3089223996676603E-4, FastMath.nextAfter(2.3089223996676606E-4, -2.3089223996676603E-4), 0.0);\n\n        // 0xbf2e43753d36a223 0x3f2e43753d36a224 -> bf2e43753d36a222\n        assertEquals(-2.3089223996676603E-4, FastMath.nextAfter(-2.3089223996676606E-4, 2.308922399667661E-4), 0.0);\n\n        // 0xbf2e43753d36a223 0x3f2e43753d36a223 -> bf2e43753d36a222\n        assertEquals(-2.3089223996676603E-4, FastMath.nextAfter(-2.3089223996676606E-4, 2.3089223996676606E-4), 0.0);\n\n        // 0xbf2e43753d36a223 0x3f2e43753d36a222 -> bf2e43753d36a222\n        assertEquals(-2.3089223996676603E-4, FastMath.nextAfter(-2.3089223996676606E-4, 2.3089223996676603E-4), 0.0);\n\n        // 0xbf2e43753d36a223 0xbf2e43753d36a224 -> bf2e43753d36a224\n        assertEquals(-2.308922399667661E-4, FastMath.nextAfter(-2.3089223996676606E-4, -2.308922399667661E-4), 0.0);\n\n        // 0xbf2e43753d36a223 0xbf2e43753d36a223 -> bf2e43753d36a224\n        assertEquals(-2.308922399667661E-4, FastMath.nextAfter(-2.3089223996676606E-4, -2.3089223996676606E-4), 0.0);\n\n        // 0xbf2e43753d36a223 0xbf2e43753d36a222 -> bf2e43753d36a222\n        assertEquals(-2.3089223996676603E-4, FastMath.nextAfter(-2.3089223996676606E-4, -2.3089223996676603E-4), 0.0);\n\n    }\n",
        "begin_line": 910,
        "end_line": 971,
        "comment": "",
        "child_ranges": [
            "(line 912,col 9)-(line 912,col 91)",
            "(line 915,col 9)-(line 915,col 107)",
            "(line 918,col 9)-(line 918,col 105)",
            "(line 921,col 9)-(line 921,col 107)",
            "(line 924,col 9)-(line 924,col 89)",
            "(line 927,col 9)-(line 927,col 91)",
            "(line 930,col 9)-(line 930,col 89)",
            "(line 933,col 9)-(line 933,col 91)",
            "(line 936,col 9)-(line 936,col 113)",
            "(line 939,col 9)-(line 939,col 114)",
            "(line 942,col 9)-(line 942,col 115)",
            "(line 945,col 9)-(line 945,col 115)",
            "(line 948,col 9)-(line 948,col 116)",
            "(line 951,col 9)-(line 951,col 116)",
            "(line 954,col 9)-(line 954,col 116)",
            "(line 957,col 9)-(line 957,col 117)",
            "(line 960,col 9)-(line 960,col 117)",
            "(line 963,col 9)-(line 963,col 116)",
            "(line 966,col 9)-(line 966,col 117)",
            "(line 969,col 9)-(line 969,col 118)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.util.MathUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/util/MathUtilsTest.java",
        "signature": "org.apache.commons.math.util.MathUtilsTest.testNextAfterSpecialCases()",
        "snippet": "    public void testNextAfterSpecialCases() {\n        assertTrue(Double.isInfinite(FastMath.nextAfter(Double.NEGATIVE_INFINITY, 0)));\n        assertTrue(Double.isInfinite(FastMath.nextAfter(Double.POSITIVE_INFINITY, 0)));\n        assertTrue(Double.isNaN(FastMath.nextAfter(Double.NaN, 0)));\n        assertTrue(Double.isInfinite(FastMath.nextAfter(Double.MAX_VALUE, Double.POSITIVE_INFINITY)));\n        assertTrue(Double.isInfinite(FastMath.nextAfter(-Double.MAX_VALUE, Double.NEGATIVE_INFINITY)));\n        assertEquals(Double.MIN_VALUE, FastMath.nextAfter(0, 1), 0);\n        assertEquals(-Double.MIN_VALUE, FastMath.nextAfter(0, -1), 0);\n        assertEquals(0, FastMath.nextAfter(Double.MIN_VALUE, -1), 0);\n        assertEquals(0, FastMath.nextAfter(-Double.MIN_VALUE, 1), 0);\n    }\n",
        "begin_line": 973,
        "end_line": 983,
        "comment": "",
        "child_ranges": [
            "(line 974,col 9)-(line 974,col 87)",
            "(line 975,col 9)-(line 975,col 87)",
            "(line 976,col 9)-(line 976,col 68)",
            "(line 977,col 9)-(line 977,col 102)",
            "(line 978,col 9)-(line 978,col 103)",
            "(line 979,col 9)-(line 979,col 68)",
            "(line 980,col 9)-(line 980,col 70)",
            "(line 981,col 9)-(line 981,col 69)",
            "(line 982,col 9)-(line 982,col 69)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.util.MathUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/util/MathUtilsTest.java",
        "signature": "org.apache.commons.math.util.MathUtilsTest.testScalb()",
        "snippet": "    public void testScalb() {\n        assertEquals( 0.0, MathUtils.scalb(0.0, 5), 1.0e-15);\n        assertEquals(32.0, MathUtils.scalb(1.0, 5), 1.0e-15);\n        assertEquals(1.0 / 32.0, MathUtils.scalb(1.0,  -5), 1.0e-15);\n        assertEquals(FastMath.PI, MathUtils.scalb(FastMath.PI, 0), 1.0e-15);\n        assertTrue(Double.isInfinite(MathUtils.scalb(Double.POSITIVE_INFINITY, 1)));\n        assertTrue(Double.isInfinite(MathUtils.scalb(Double.NEGATIVE_INFINITY, 1)));\n        assertTrue(Double.isNaN(MathUtils.scalb(Double.NaN, 1)));\n    }\n",
        "begin_line": 985,
        "end_line": 993,
        "comment": "",
        "child_ranges": [
            "(line 986,col 9)-(line 986,col 61)",
            "(line 987,col 9)-(line 987,col 61)",
            "(line 988,col 9)-(line 988,col 69)",
            "(line 989,col 9)-(line 989,col 76)",
            "(line 990,col 9)-(line 990,col 84)",
            "(line 991,col 9)-(line 991,col 84)",
            "(line 992,col 9)-(line 992,col 65)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.util.MathUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/util/MathUtilsTest.java",
        "signature": "org.apache.commons.math.util.MathUtilsTest.testNormalizeAngle()",
        "snippet": "    public void testNormalizeAngle() {\n        for (double a = -15.0; a <= 15.0; a += 0.1) {\n            for (double b = -15.0; b <= 15.0; b += 0.2) {\n                double c = MathUtils.normalizeAngle(a, b);\n                assertTrue((b - FastMath.PI) <= c);\n                assertTrue(c <= (b + FastMath.PI));\n                double twoK = FastMath.rint((a - c) / FastMath.PI);\n                assertEquals(c, a - twoK * FastMath.PI, 1.0e-14);\n            }\n        }\n    }\n",
        "begin_line": 995,
        "end_line": 1005,
        "comment": "",
        "child_ranges": [
            "(line 996,col 9)-(line 1004,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.util.MathUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/util/MathUtilsTest.java",
        "signature": "org.apache.commons.math.util.MathUtilsTest.testNormalizeArray()",
        "snippet": "    public void testNormalizeArray() {\n        double[] testValues1 = new double[] {1, 1, 2};\n        TestUtils.assertEquals(\n                new double[] {.25, .25, .5},\n                MathUtils.normalizeArray(testValues1, 1),\n                Double.MIN_VALUE);\n\n        double[] testValues2 = new double[] {-1, -1, 1};\n        TestUtils.assertEquals(\n                new double[] {1, 1, -1},\n                MathUtils.normalizeArray(testValues2, 1),\n                Double.MIN_VALUE);\n\n        // Ignore NaNs\n        double[] testValues3 = new double[] {-1, -1, Double.NaN, 1, Double.NaN};\n        TestUtils.assertEquals(\n                new double[] {1, 1,Double.NaN, -1, Double.NaN},\n                MathUtils.normalizeArray(testValues3, 1),\n                Double.MIN_VALUE);\n\n        // Zero sum -> ArithmeticException\n        double[] zeroSum = new double[] {-1, 1};\n        try {\n            MathUtils.normalizeArray(zeroSum, 1);\n            fail(\"expecting ArithmeticException\");\n        } catch (ArithmeticException ex) {}\n\n        // Infinite elements -> ArithmeticException\n        double[] hasInf = new double[] {1, 2, 1, Double.NEGATIVE_INFINITY};\n        try {\n            MathUtils.normalizeArray(hasInf, 1);\n            fail(\"expecting ArithmeticException\");\n        } catch (ArithmeticException ex) {}\n\n        // Infinite target -> IllegalArgumentException\n        try {\n            MathUtils.normalizeArray(testValues1, Double.POSITIVE_INFINITY);\n            fail(\"expecting IllegalArgumentException\");\n        } catch (IllegalArgumentException ex) {}\n\n        // NaN target -> IllegalArgumentException\n        try {\n            MathUtils.normalizeArray(testValues1, Double.NaN);\n            fail(\"expecting IllegalArgumentException\");\n        } catch (IllegalArgumentException ex) {}\n\n    }\n",
        "begin_line": 1007,
        "end_line": 1053,
        "comment": "",
        "child_ranges": [
            "(line 1008,col 9)-(line 1008,col 54)",
            "(line 1009,col 9)-(line 1012,col 34)",
            "(line 1014,col 9)-(line 1014,col 56)",
            "(line 1015,col 9)-(line 1018,col 34)",
            "(line 1021,col 9)-(line 1021,col 80)",
            "(line 1022,col 9)-(line 1025,col 34)",
            "(line 1028,col 9)-(line 1028,col 48)",
            "(line 1029,col 9)-(line 1032,col 43)",
            "(line 1035,col 9)-(line 1035,col 75)",
            "(line 1036,col 9)-(line 1039,col 43)",
            "(line 1042,col 9)-(line 1045,col 48)",
            "(line 1048,col 9)-(line 1051,col 48)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.util.MathUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/util/MathUtilsTest.java",
        "signature": "org.apache.commons.math.util.MathUtilsTest.testRoundDouble()",
        "snippet": "    public void testRoundDouble() {\n        double x = 1.234567890;\n        assertEquals(1.23, MathUtils.round(x, 2), 0.0);\n        assertEquals(1.235, MathUtils.round(x, 3), 0.0);\n        assertEquals(1.2346, MathUtils.round(x, 4), 0.0);\n\n        // JIRA MATH-151\n        assertEquals(39.25, MathUtils.round(39.245, 2), 0.0);\n        assertEquals(39.24, MathUtils.round(39.245, 2, BigDecimal.ROUND_DOWN), 0.0);\n        double xx = 39.0;\n        xx = xx + 245d / 1000d;\n        assertEquals(39.25, MathUtils.round(xx, 2), 0.0);\n\n        // BZ 35904\n        assertEquals(30.1d, MathUtils.round(30.095d, 2), 0.0d);\n        assertEquals(30.1d, MathUtils.round(30.095d, 1), 0.0d);\n        assertEquals(33.1d, MathUtils.round(33.095d, 1), 0.0d);\n        assertEquals(33.1d, MathUtils.round(33.095d, 2), 0.0d);\n        assertEquals(50.09d, MathUtils.round(50.085d, 2), 0.0d);\n        assertEquals(50.19d, MathUtils.round(50.185d, 2), 0.0d);\n        assertEquals(50.01d, MathUtils.round(50.005d, 2), 0.0d);\n        assertEquals(30.01d, MathUtils.round(30.005d, 2), 0.0d);\n        assertEquals(30.65d, MathUtils.round(30.645d, 2), 0.0d);\n\n        assertEquals(1.24, MathUtils.round(x, 2, BigDecimal.ROUND_CEILING), 0.0);\n        assertEquals(1.235, MathUtils.round(x, 3, BigDecimal.ROUND_CEILING), 0.0);\n        assertEquals(1.2346, MathUtils.round(x, 4, BigDecimal.ROUND_CEILING), 0.0);\n        assertEquals(-1.23, MathUtils.round(-x, 2, BigDecimal.ROUND_CEILING), 0.0);\n        assertEquals(-1.234, MathUtils.round(-x, 3, BigDecimal.ROUND_CEILING), 0.0);\n        assertEquals(-1.2345, MathUtils.round(-x, 4, BigDecimal.ROUND_CEILING), 0.0);\n\n        assertEquals(1.23, MathUtils.round(x, 2, BigDecimal.ROUND_DOWN), 0.0);\n        assertEquals(1.234, MathUtils.round(x, 3, BigDecimal.ROUND_DOWN), 0.0);\n        assertEquals(1.2345, MathUtils.round(x, 4, BigDecimal.ROUND_DOWN), 0.0);\n        assertEquals(-1.23, MathUtils.round(-x, 2, BigDecimal.ROUND_DOWN), 0.0);\n        assertEquals(-1.234, MathUtils.round(-x, 3, BigDecimal.ROUND_DOWN), 0.0);\n        assertEquals(-1.2345, MathUtils.round(-x, 4, BigDecimal.ROUND_DOWN), 0.0);\n\n        assertEquals(1.23, MathUtils.round(x, 2, BigDecimal.ROUND_FLOOR), 0.0);\n        assertEquals(1.234, MathUtils.round(x, 3, BigDecimal.ROUND_FLOOR), 0.0);\n        assertEquals(1.2345, MathUtils.round(x, 4, BigDecimal.ROUND_FLOOR), 0.0);\n        assertEquals(-1.24, MathUtils.round(-x, 2, BigDecimal.ROUND_FLOOR), 0.0);\n        assertEquals(-1.235, MathUtils.round(-x, 3, BigDecimal.ROUND_FLOOR), 0.0);\n        assertEquals(-1.2346, MathUtils.round(-x, 4, BigDecimal.ROUND_FLOOR), 0.0);\n\n        assertEquals(1.23, MathUtils.round(x, 2, BigDecimal.ROUND_HALF_DOWN), 0.0);\n        assertEquals(1.235, MathUtils.round(x, 3, BigDecimal.ROUND_HALF_DOWN), 0.0);\n        assertEquals(1.2346, MathUtils.round(x, 4, BigDecimal.ROUND_HALF_DOWN), 0.0);\n        assertEquals(-1.23, MathUtils.round(-x, 2, BigDecimal.ROUND_HALF_DOWN), 0.0);\n        assertEquals(-1.235, MathUtils.round(-x, 3, BigDecimal.ROUND_HALF_DOWN), 0.0);\n        assertEquals(-1.2346, MathUtils.round(-x, 4, BigDecimal.ROUND_HALF_DOWN), 0.0);\n        assertEquals(1.234, MathUtils.round(1.2345, 3, BigDecimal.ROUND_HALF_DOWN), 0.0);\n        assertEquals(-1.234, MathUtils.round(-1.2345, 3, BigDecimal.ROUND_HALF_DOWN), 0.0);\n\n        assertEquals(1.23, MathUtils.round(x, 2, BigDecimal.ROUND_HALF_EVEN), 0.0);\n        assertEquals(1.235, MathUtils.round(x, 3, BigDecimal.ROUND_HALF_EVEN), 0.0);\n        assertEquals(1.2346, MathUtils.round(x, 4, BigDecimal.ROUND_HALF_EVEN), 0.0);\n        assertEquals(-1.23, MathUtils.round(-x, 2, BigDecimal.ROUND_HALF_EVEN), 0.0);\n        assertEquals(-1.235, MathUtils.round(-x, 3, BigDecimal.ROUND_HALF_EVEN), 0.0);\n        assertEquals(-1.2346, MathUtils.round(-x, 4, BigDecimal.ROUND_HALF_EVEN), 0.0);\n        assertEquals(1.234, MathUtils.round(1.2345, 3, BigDecimal.ROUND_HALF_EVEN), 0.0);\n        assertEquals(-1.234, MathUtils.round(-1.2345, 3, BigDecimal.ROUND_HALF_EVEN), 0.0);\n        assertEquals(1.236, MathUtils.round(1.2355, 3, BigDecimal.ROUND_HALF_EVEN), 0.0);\n        assertEquals(-1.236, MathUtils.round(-1.2355, 3, BigDecimal.ROUND_HALF_EVEN), 0.0);\n\n        assertEquals(1.23, MathUtils.round(x, 2, BigDecimal.ROUND_HALF_UP), 0.0);\n        assertEquals(1.235, MathUtils.round(x, 3, BigDecimal.ROUND_HALF_UP), 0.0);\n        assertEquals(1.2346, MathUtils.round(x, 4, BigDecimal.ROUND_HALF_UP), 0.0);\n        assertEquals(-1.23, MathUtils.round(-x, 2, BigDecimal.ROUND_HALF_UP), 0.0);\n        assertEquals(-1.235, MathUtils.round(-x, 3, BigDecimal.ROUND_HALF_UP), 0.0);\n        assertEquals(-1.2346, MathUtils.round(-x, 4, BigDecimal.ROUND_HALF_UP), 0.0);\n        assertEquals(1.235, MathUtils.round(1.2345, 3, BigDecimal.ROUND_HALF_UP), 0.0);\n        assertEquals(-1.235, MathUtils.round(-1.2345, 3, BigDecimal.ROUND_HALF_UP), 0.0);\n\n        assertEquals(-1.23, MathUtils.round(-1.23, 2, BigDecimal.ROUND_UNNECESSARY), 0.0);\n        assertEquals(1.23, MathUtils.round(1.23, 2, BigDecimal.ROUND_UNNECESSARY), 0.0);\n\n        try {\n            MathUtils.round(1.234, 2, BigDecimal.ROUND_UNNECESSARY);\n            fail();\n        } catch (ArithmeticException ex) {\n            // success\n        }\n\n        assertEquals(1.24, MathUtils.round(x, 2, BigDecimal.ROUND_UP), 0.0);\n        assertEquals(1.235, MathUtils.round(x, 3, BigDecimal.ROUND_UP), 0.0);\n        assertEquals(1.2346, MathUtils.round(x, 4, BigDecimal.ROUND_UP), 0.0);\n        assertEquals(-1.24, MathUtils.round(-x, 2, BigDecimal.ROUND_UP), 0.0);\n        assertEquals(-1.235, MathUtils.round(-x, 3, BigDecimal.ROUND_UP), 0.0);\n        assertEquals(-1.2346, MathUtils.round(-x, 4, BigDecimal.ROUND_UP), 0.0);\n\n        try {\n            MathUtils.round(1.234, 2, 1923);\n            fail();\n        } catch (IllegalArgumentException ex) {\n            // success\n        }\n\n        // MATH-151\n        assertEquals(39.25, MathUtils.round(39.245, 2, BigDecimal.ROUND_HALF_UP), 0.0);\n\n        // special values\n        TestUtils.assertEquals(Double.NaN, MathUtils.round(Double.NaN, 2), 0.0);\n        assertEquals(0.0, MathUtils.round(0.0, 2), 0.0);\n        assertEquals(Double.POSITIVE_INFINITY, MathUtils.round(Double.POSITIVE_INFINITY, 2), 0.0);\n        assertEquals(Double.NEGATIVE_INFINITY, MathUtils.round(Double.NEGATIVE_INFINITY, 2), 0.0);\n    }\n",
        "begin_line": 1055,
        "end_line": 1161,
        "comment": "",
        "child_ranges": [
            "(line 1056,col 9)-(line 1056,col 31)",
            "(line 1057,col 9)-(line 1057,col 55)",
            "(line 1058,col 9)-(line 1058,col 56)",
            "(line 1059,col 9)-(line 1059,col 57)",
            "(line 1062,col 9)-(line 1062,col 61)",
            "(line 1063,col 9)-(line 1063,col 84)",
            "(line 1064,col 9)-(line 1064,col 25)",
            "(line 1065,col 9)-(line 1065,col 31)",
            "(line 1066,col 9)-(line 1066,col 57)",
            "(line 1069,col 9)-(line 1069,col 63)",
            "(line 1070,col 9)-(line 1070,col 63)",
            "(line 1071,col 9)-(line 1071,col 63)",
            "(line 1072,col 9)-(line 1072,col 63)",
            "(line 1073,col 9)-(line 1073,col 64)",
            "(line 1074,col 9)-(line 1074,col 64)",
            "(line 1075,col 9)-(line 1075,col 64)",
            "(line 1076,col 9)-(line 1076,col 64)",
            "(line 1077,col 9)-(line 1077,col 64)",
            "(line 1079,col 9)-(line 1079,col 81)",
            "(line 1080,col 9)-(line 1080,col 82)",
            "(line 1081,col 9)-(line 1081,col 83)",
            "(line 1082,col 9)-(line 1082,col 83)",
            "(line 1083,col 9)-(line 1083,col 84)",
            "(line 1084,col 9)-(line 1084,col 85)",
            "(line 1086,col 9)-(line 1086,col 78)",
            "(line 1087,col 9)-(line 1087,col 79)",
            "(line 1088,col 9)-(line 1088,col 80)",
            "(line 1089,col 9)-(line 1089,col 80)",
            "(line 1090,col 9)-(line 1090,col 81)",
            "(line 1091,col 9)-(line 1091,col 82)",
            "(line 1093,col 9)-(line 1093,col 79)",
            "(line 1094,col 9)-(line 1094,col 80)",
            "(line 1095,col 9)-(line 1095,col 81)",
            "(line 1096,col 9)-(line 1096,col 81)",
            "(line 1097,col 9)-(line 1097,col 82)",
            "(line 1098,col 9)-(line 1098,col 83)",
            "(line 1100,col 9)-(line 1100,col 83)",
            "(line 1101,col 9)-(line 1101,col 84)",
            "(line 1102,col 9)-(line 1102,col 85)",
            "(line 1103,col 9)-(line 1103,col 85)",
            "(line 1104,col 9)-(line 1104,col 86)",
            "(line 1105,col 9)-(line 1105,col 87)",
            "(line 1106,col 9)-(line 1106,col 89)",
            "(line 1107,col 9)-(line 1107,col 91)",
            "(line 1109,col 9)-(line 1109,col 83)",
            "(line 1110,col 9)-(line 1110,col 84)",
            "(line 1111,col 9)-(line 1111,col 85)",
            "(line 1112,col 9)-(line 1112,col 85)",
            "(line 1113,col 9)-(line 1113,col 86)",
            "(line 1114,col 9)-(line 1114,col 87)",
            "(line 1115,col 9)-(line 1115,col 89)",
            "(line 1116,col 9)-(line 1116,col 91)",
            "(line 1117,col 9)-(line 1117,col 89)",
            "(line 1118,col 9)-(line 1118,col 91)",
            "(line 1120,col 9)-(line 1120,col 81)",
            "(line 1121,col 9)-(line 1121,col 82)",
            "(line 1122,col 9)-(line 1122,col 83)",
            "(line 1123,col 9)-(line 1123,col 83)",
            "(line 1124,col 9)-(line 1124,col 84)",
            "(line 1125,col 9)-(line 1125,col 85)",
            "(line 1126,col 9)-(line 1126,col 87)",
            "(line 1127,col 9)-(line 1127,col 89)",
            "(line 1129,col 9)-(line 1129,col 90)",
            "(line 1130,col 9)-(line 1130,col 88)",
            "(line 1132,col 9)-(line 1137,col 9)",
            "(line 1139,col 9)-(line 1139,col 76)",
            "(line 1140,col 9)-(line 1140,col 77)",
            "(line 1141,col 9)-(line 1141,col 78)",
            "(line 1142,col 9)-(line 1142,col 78)",
            "(line 1143,col 9)-(line 1143,col 79)",
            "(line 1144,col 9)-(line 1144,col 80)",
            "(line 1146,col 9)-(line 1151,col 9)",
            "(line 1154,col 9)-(line 1154,col 87)",
            "(line 1157,col 9)-(line 1157,col 80)",
            "(line 1158,col 9)-(line 1158,col 56)",
            "(line 1159,col 9)-(line 1159,col 98)",
            "(line 1160,col 9)-(line 1160,col 98)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.util.MathUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/util/MathUtilsTest.java",
        "signature": "org.apache.commons.math.util.MathUtilsTest.testRoundFloat()",
        "snippet": "    public void testRoundFloat() {\n        float x = 1.234567890f;\n        assertEquals(1.23f, MathUtils.round(x, 2), 0.0);\n        assertEquals(1.235f, MathUtils.round(x, 3), 0.0);\n        assertEquals(1.2346f, MathUtils.round(x, 4), 0.0);\n\n        // BZ 35904\n        assertEquals(30.1f, MathUtils.round(30.095f, 2), 0.0f);\n        assertEquals(30.1f, MathUtils.round(30.095f, 1), 0.0f);\n        assertEquals(50.09f, MathUtils.round(50.085f, 2), 0.0f);\n        assertEquals(50.19f, MathUtils.round(50.185f, 2), 0.0f);\n        assertEquals(50.01f, MathUtils.round(50.005f, 2), 0.0f);\n        assertEquals(30.01f, MathUtils.round(30.005f, 2), 0.0f);\n        assertEquals(30.65f, MathUtils.round(30.645f, 2), 0.0f);\n\n        assertEquals(1.24f, MathUtils.round(x, 2, BigDecimal.ROUND_CEILING), 0.0);\n        assertEquals(1.235f, MathUtils.round(x, 3, BigDecimal.ROUND_CEILING), 0.0);\n        assertEquals(1.2346f, MathUtils.round(x, 4, BigDecimal.ROUND_CEILING), 0.0);\n        assertEquals(-1.23f, MathUtils.round(-x, 2, BigDecimal.ROUND_CEILING), 0.0);\n        assertEquals(-1.234f, MathUtils.round(-x, 3, BigDecimal.ROUND_CEILING), 0.0);\n        assertEquals(-1.2345f, MathUtils.round(-x, 4, BigDecimal.ROUND_CEILING), 0.0);\n\n        assertEquals(1.23f, MathUtils.round(x, 2, BigDecimal.ROUND_DOWN), 0.0);\n        assertEquals(1.234f, MathUtils.round(x, 3, BigDecimal.ROUND_DOWN), 0.0);\n        assertEquals(1.2345f, MathUtils.round(x, 4, BigDecimal.ROUND_DOWN), 0.0);\n        assertEquals(-1.23f, MathUtils.round(-x, 2, BigDecimal.ROUND_DOWN), 0.0);\n        assertEquals(-1.234f, MathUtils.round(-x, 3, BigDecimal.ROUND_DOWN), 0.0);\n        assertEquals(-1.2345f, MathUtils.round(-x, 4, BigDecimal.ROUND_DOWN), 0.0);\n\n        assertEquals(1.23f, MathUtils.round(x, 2, BigDecimal.ROUND_FLOOR), 0.0);\n        assertEquals(1.234f, MathUtils.round(x, 3, BigDecimal.ROUND_FLOOR), 0.0);\n        assertEquals(1.2345f, MathUtils.round(x, 4, BigDecimal.ROUND_FLOOR), 0.0);\n        assertEquals(-1.24f, MathUtils.round(-x, 2, BigDecimal.ROUND_FLOOR), 0.0);\n        assertEquals(-1.235f, MathUtils.round(-x, 3, BigDecimal.ROUND_FLOOR), 0.0);\n        assertEquals(-1.2346f, MathUtils.round(-x, 4, BigDecimal.ROUND_FLOOR), 0.0);\n\n        assertEquals(1.23f, MathUtils.round(x, 2, BigDecimal.ROUND_HALF_DOWN), 0.0);\n        assertEquals(1.235f, MathUtils.round(x, 3, BigDecimal.ROUND_HALF_DOWN), 0.0);\n        assertEquals(1.2346f, MathUtils.round(x, 4, BigDecimal.ROUND_HALF_DOWN), 0.0);\n        assertEquals(-1.23f, MathUtils.round(-x, 2, BigDecimal.ROUND_HALF_DOWN), 0.0);\n        assertEquals(-1.235f, MathUtils.round(-x, 3, BigDecimal.ROUND_HALF_DOWN), 0.0);\n        assertEquals(-1.2346f, MathUtils.round(-x, 4, BigDecimal.ROUND_HALF_DOWN), 0.0);\n        assertEquals(1.234f, MathUtils.round(1.2345f, 3, BigDecimal.ROUND_HALF_DOWN), 0.0);\n        assertEquals(-1.234f, MathUtils.round(-1.2345f, 3, BigDecimal.ROUND_HALF_DOWN), 0.0);\n\n        assertEquals(1.23f, MathUtils.round(x, 2, BigDecimal.ROUND_HALF_EVEN), 0.0);\n        assertEquals(1.235f, MathUtils.round(x, 3, BigDecimal.ROUND_HALF_EVEN), 0.0);\n        assertEquals(1.2346f, MathUtils.round(x, 4, BigDecimal.ROUND_HALF_EVEN), 0.0);\n        assertEquals(-1.23f, MathUtils.round(-x, 2, BigDecimal.ROUND_HALF_EVEN), 0.0);\n        assertEquals(-1.235f, MathUtils.round(-x, 3, BigDecimal.ROUND_HALF_EVEN), 0.0);\n        assertEquals(-1.2346f, MathUtils.round(-x, 4, BigDecimal.ROUND_HALF_EVEN), 0.0);\n        assertEquals(1.234f, MathUtils.round(1.2345f, 3, BigDecimal.ROUND_HALF_EVEN), 0.0);\n        assertEquals(-1.234f, MathUtils.round(-1.2345f, 3, BigDecimal.ROUND_HALF_EVEN), 0.0);\n        assertEquals(1.236f, MathUtils.round(1.2355f, 3, BigDecimal.ROUND_HALF_EVEN), 0.0);\n        assertEquals(-1.236f, MathUtils.round(-1.2355f, 3, BigDecimal.ROUND_HALF_EVEN), 0.0);\n\n        assertEquals(1.23f, MathUtils.round(x, 2, BigDecimal.ROUND_HALF_UP), 0.0);\n        assertEquals(1.235f, MathUtils.round(x, 3, BigDecimal.ROUND_HALF_UP), 0.0);\n        assertEquals(1.2346f, MathUtils.round(x, 4, BigDecimal.ROUND_HALF_UP), 0.0);\n        assertEquals(-1.23f, MathUtils.round(-x, 2, BigDecimal.ROUND_HALF_UP), 0.0);\n        assertEquals(-1.235f, MathUtils.round(-x, 3, BigDecimal.ROUND_HALF_UP), 0.0);\n        assertEquals(-1.2346f, MathUtils.round(-x, 4, BigDecimal.ROUND_HALF_UP), 0.0);\n        assertEquals(1.235f, MathUtils.round(1.2345f, 3, BigDecimal.ROUND_HALF_UP), 0.0);\n        assertEquals(-1.235f, MathUtils.round(-1.2345f, 3, BigDecimal.ROUND_HALF_UP), 0.0);\n\n        assertEquals(-1.23f, MathUtils.round(-1.23f, 2, BigDecimal.ROUND_UNNECESSARY), 0.0);\n        assertEquals(1.23f, MathUtils.round(1.23f, 2, BigDecimal.ROUND_UNNECESSARY), 0.0);\n\n        try {\n            MathUtils.round(1.234f, 2, BigDecimal.ROUND_UNNECESSARY);\n            fail();\n        } catch (ArithmeticException ex) {\n            // success\n        }\n\n        assertEquals(1.24f, MathUtils.round(x, 2, BigDecimal.ROUND_UP), 0.0);\n        assertEquals(1.235f, MathUtils.round(x, 3, BigDecimal.ROUND_UP), 0.0);\n        assertEquals(1.2346f, MathUtils.round(x, 4, BigDecimal.ROUND_UP), 0.0);\n        assertEquals(-1.24f, MathUtils.round(-x, 2, BigDecimal.ROUND_UP), 0.0);\n        assertEquals(-1.235f, MathUtils.round(-x, 3, BigDecimal.ROUND_UP), 0.0);\n        assertEquals(-1.2346f, MathUtils.round(-x, 4, BigDecimal.ROUND_UP), 0.0);\n\n        try {\n            MathUtils.round(1.234f, 2, 1923);\n            fail();\n        } catch (IllegalArgumentException ex) {\n            // success\n        }\n\n        // special values\n        TestUtils.assertEquals(Float.NaN, MathUtils.round(Float.NaN, 2), 0.0f);\n        assertEquals(0.0f, MathUtils.round(0.0f, 2), 0.0f);\n        assertEquals(Float.POSITIVE_INFINITY, MathUtils.round(Float.POSITIVE_INFINITY, 2), 0.0f);\n        assertEquals(Float.NEGATIVE_INFINITY, MathUtils.round(Float.NEGATIVE_INFINITY, 2), 0.0f);\n    }\n",
        "begin_line": 1163,
        "end_line": 1257,
        "comment": "",
        "child_ranges": [
            "(line 1164,col 9)-(line 1164,col 31)",
            "(line 1165,col 9)-(line 1165,col 56)",
            "(line 1166,col 9)-(line 1166,col 57)",
            "(line 1167,col 9)-(line 1167,col 58)",
            "(line 1170,col 9)-(line 1170,col 63)",
            "(line 1171,col 9)-(line 1171,col 63)",
            "(line 1172,col 9)-(line 1172,col 64)",
            "(line 1173,col 9)-(line 1173,col 64)",
            "(line 1174,col 9)-(line 1174,col 64)",
            "(line 1175,col 9)-(line 1175,col 64)",
            "(line 1176,col 9)-(line 1176,col 64)",
            "(line 1178,col 9)-(line 1178,col 82)",
            "(line 1179,col 9)-(line 1179,col 83)",
            "(line 1180,col 9)-(line 1180,col 84)",
            "(line 1181,col 9)-(line 1181,col 84)",
            "(line 1182,col 9)-(line 1182,col 85)",
            "(line 1183,col 9)-(line 1183,col 86)",
            "(line 1185,col 9)-(line 1185,col 79)",
            "(line 1186,col 9)-(line 1186,col 80)",
            "(line 1187,col 9)-(line 1187,col 81)",
            "(line 1188,col 9)-(line 1188,col 81)",
            "(line 1189,col 9)-(line 1189,col 82)",
            "(line 1190,col 9)-(line 1190,col 83)",
            "(line 1192,col 9)-(line 1192,col 80)",
            "(line 1193,col 9)-(line 1193,col 81)",
            "(line 1194,col 9)-(line 1194,col 82)",
            "(line 1195,col 9)-(line 1195,col 82)",
            "(line 1196,col 9)-(line 1196,col 83)",
            "(line 1197,col 9)-(line 1197,col 84)",
            "(line 1199,col 9)-(line 1199,col 84)",
            "(line 1200,col 9)-(line 1200,col 85)",
            "(line 1201,col 9)-(line 1201,col 86)",
            "(line 1202,col 9)-(line 1202,col 86)",
            "(line 1203,col 9)-(line 1203,col 87)",
            "(line 1204,col 9)-(line 1204,col 88)",
            "(line 1205,col 9)-(line 1205,col 91)",
            "(line 1206,col 9)-(line 1206,col 93)",
            "(line 1208,col 9)-(line 1208,col 84)",
            "(line 1209,col 9)-(line 1209,col 85)",
            "(line 1210,col 9)-(line 1210,col 86)",
            "(line 1211,col 9)-(line 1211,col 86)",
            "(line 1212,col 9)-(line 1212,col 87)",
            "(line 1213,col 9)-(line 1213,col 88)",
            "(line 1214,col 9)-(line 1214,col 91)",
            "(line 1215,col 9)-(line 1215,col 93)",
            "(line 1216,col 9)-(line 1216,col 91)",
            "(line 1217,col 9)-(line 1217,col 93)",
            "(line 1219,col 9)-(line 1219,col 82)",
            "(line 1220,col 9)-(line 1220,col 83)",
            "(line 1221,col 9)-(line 1221,col 84)",
            "(line 1222,col 9)-(line 1222,col 84)",
            "(line 1223,col 9)-(line 1223,col 85)",
            "(line 1224,col 9)-(line 1224,col 86)",
            "(line 1225,col 9)-(line 1225,col 89)",
            "(line 1226,col 9)-(line 1226,col 91)",
            "(line 1228,col 9)-(line 1228,col 92)",
            "(line 1229,col 9)-(line 1229,col 90)",
            "(line 1231,col 9)-(line 1236,col 9)",
            "(line 1238,col 9)-(line 1238,col 77)",
            "(line 1239,col 9)-(line 1239,col 78)",
            "(line 1240,col 9)-(line 1240,col 79)",
            "(line 1241,col 9)-(line 1241,col 79)",
            "(line 1242,col 9)-(line 1242,col 80)",
            "(line 1243,col 9)-(line 1243,col 81)",
            "(line 1245,col 9)-(line 1250,col 9)",
            "(line 1253,col 9)-(line 1253,col 79)",
            "(line 1254,col 9)-(line 1254,col 59)",
            "(line 1255,col 9)-(line 1255,col 97)",
            "(line 1256,col 9)-(line 1256,col 97)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.util.MathUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/util/MathUtilsTest.java",
        "signature": "org.apache.commons.math.util.MathUtilsTest.testSignByte()",
        "snippet": "    public void testSignByte() {\n        assertEquals((byte) 1, MathUtils.sign((byte) 2));\n        assertEquals((byte) 0, MathUtils.sign((byte) 0));\n        assertEquals((byte) (-1), MathUtils.sign((byte) (-2)));\n    }\n",
        "begin_line": 1259,
        "end_line": 1263,
        "comment": "",
        "child_ranges": [
            "(line 1260,col 9)-(line 1260,col 57)",
            "(line 1261,col 9)-(line 1261,col 57)",
            "(line 1262,col 9)-(line 1262,col 63)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.util.MathUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/util/MathUtilsTest.java",
        "signature": "org.apache.commons.math.util.MathUtilsTest.testSignDouble()",
        "snippet": "    public void testSignDouble() {\n        double delta = 0.0;\n        assertEquals(1.0, MathUtils.sign(2.0), delta);\n        assertEquals(0.0, MathUtils.sign(0.0), delta);\n        assertEquals(-1.0, MathUtils.sign(-2.0), delta);\n        TestUtils.assertSame(-0. / 0., MathUtils.sign(Double.NaN));\n    }\n",
        "begin_line": 1265,
        "end_line": 1271,
        "comment": "",
        "child_ranges": [
            "(line 1266,col 9)-(line 1266,col 27)",
            "(line 1267,col 9)-(line 1267,col 54)",
            "(line 1268,col 9)-(line 1268,col 54)",
            "(line 1269,col 9)-(line 1269,col 56)",
            "(line 1270,col 9)-(line 1270,col 67)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.util.MathUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/util/MathUtilsTest.java",
        "signature": "org.apache.commons.math.util.MathUtilsTest.testSignFloat()",
        "snippet": "    public void testSignFloat() {\n        float delta = 0.0F;\n        assertEquals(1.0F, MathUtils.sign(2.0F), delta);\n        assertEquals(0.0F, MathUtils.sign(0.0F), delta);\n        assertEquals(-1.0F, MathUtils.sign(-2.0F), delta);\n        TestUtils.assertSame(Float.NaN, MathUtils.sign(Float.NaN));\n    }\n",
        "begin_line": 1273,
        "end_line": 1279,
        "comment": "",
        "child_ranges": [
            "(line 1274,col 9)-(line 1274,col 27)",
            "(line 1275,col 9)-(line 1275,col 56)",
            "(line 1276,col 9)-(line 1276,col 56)",
            "(line 1277,col 9)-(line 1277,col 58)",
            "(line 1278,col 9)-(line 1278,col 67)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.util.MathUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/util/MathUtilsTest.java",
        "signature": "org.apache.commons.math.util.MathUtilsTest.testSignInt()",
        "snippet": "    public void testSignInt() {\n        assertEquals(1, MathUtils.sign(2));\n        assertEquals(0, MathUtils.sign(0));\n        assertEquals((-1), MathUtils.sign((-2)));\n    }\n",
        "begin_line": 1281,
        "end_line": 1285,
        "comment": "",
        "child_ranges": [
            "(line 1282,col 9)-(line 1282,col 43)",
            "(line 1283,col 9)-(line 1283,col 43)",
            "(line 1284,col 9)-(line 1284,col 49)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.util.MathUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/util/MathUtilsTest.java",
        "signature": "org.apache.commons.math.util.MathUtilsTest.testSignLong()",
        "snippet": "    public void testSignLong() {\n        assertEquals(1L, MathUtils.sign(2L));\n        assertEquals(0L, MathUtils.sign(0L));\n        assertEquals(-1L, MathUtils.sign(-2L));\n    }\n",
        "begin_line": 1287,
        "end_line": 1291,
        "comment": "",
        "child_ranges": [
            "(line 1288,col 9)-(line 1288,col 45)",
            "(line 1289,col 9)-(line 1289,col 45)",
            "(line 1290,col 9)-(line 1290,col 47)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.util.MathUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/util/MathUtilsTest.java",
        "signature": "org.apache.commons.math.util.MathUtilsTest.testSignShort()",
        "snippet": "    public void testSignShort() {\n        assertEquals((short) 1, MathUtils.sign((short) 2));\n        assertEquals((short) 0, MathUtils.sign((short) 0));\n        assertEquals((short) (-1), MathUtils.sign((short) (-2)));\n    }\n",
        "begin_line": 1293,
        "end_line": 1297,
        "comment": "",
        "child_ranges": [
            "(line 1294,col 9)-(line 1294,col 59)",
            "(line 1295,col 9)-(line 1295,col 59)",
            "(line 1296,col 9)-(line 1296,col 65)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.util.MathUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/util/MathUtilsTest.java",
        "signature": "org.apache.commons.math.util.MathUtilsTest.testSinh()",
        "snippet": "    public void testSinh() {\n        double x = 3.0;\n        double expected = 10.01787;\n        assertEquals(expected, MathUtils.sinh(x), 1.0e-5);\n    }\n",
        "begin_line": 1299,
        "end_line": 1303,
        "comment": "",
        "child_ranges": [
            "(line 1300,col 9)-(line 1300,col 23)",
            "(line 1301,col 9)-(line 1301,col 35)",
            "(line 1302,col 9)-(line 1302,col 58)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.util.MathUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/util/MathUtilsTest.java",
        "signature": "org.apache.commons.math.util.MathUtilsTest.testSinhNaN()",
        "snippet": "    public void testSinhNaN() {\n        assertTrue(Double.isNaN(MathUtils.sinh(Double.NaN)));\n    }\n",
        "begin_line": 1305,
        "end_line": 1307,
        "comment": "",
        "child_ranges": [
            "(line 1306,col 9)-(line 1306,col 61)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.util.MathUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/util/MathUtilsTest.java",
        "signature": "org.apache.commons.math.util.MathUtilsTest.testSubAndCheck()",
        "snippet": "    public void testSubAndCheck() {\n        int big = Integer.MAX_VALUE;\n        int bigNeg = Integer.MIN_VALUE;\n        assertEquals(big, MathUtils.subAndCheck(big, 0));\n        assertEquals(bigNeg + 1, MathUtils.subAndCheck(bigNeg, -1));\n        assertEquals(-1, MathUtils.subAndCheck(bigNeg, -big));\n        try {\n            MathUtils.subAndCheck(big, -1);\n            fail(\"Expecting ArithmeticException\");\n        } catch (ArithmeticException ex) {\n        }\n        try {\n            MathUtils.subAndCheck(bigNeg, 1);\n            fail(\"Expecting ArithmeticException\");\n        } catch (ArithmeticException ex) {\n        }\n    }\n",
        "begin_line": 1309,
        "end_line": 1325,
        "comment": "",
        "child_ranges": [
            "(line 1310,col 9)-(line 1310,col 36)",
            "(line 1311,col 9)-(line 1311,col 39)",
            "(line 1312,col 9)-(line 1312,col 57)",
            "(line 1313,col 9)-(line 1313,col 68)",
            "(line 1314,col 9)-(line 1314,col 62)",
            "(line 1315,col 9)-(line 1319,col 9)",
            "(line 1320,col 9)-(line 1324,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.util.MathUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/util/MathUtilsTest.java",
        "signature": "org.apache.commons.math.util.MathUtilsTest.testSubAndCheckErrorMessage()",
        "snippet": "    public void testSubAndCheckErrorMessage() {\n        int big = Integer.MAX_VALUE;\n        try {\n            MathUtils.subAndCheck(big, -1);\n            fail(\"Expecting ArithmeticException\");\n        } catch (ArithmeticException ex) {\n            assertTrue(ex.getMessage().length() > 1);\n        }\n    }\n",
        "begin_line": 1327,
        "end_line": 1335,
        "comment": "",
        "child_ranges": [
            "(line 1328,col 9)-(line 1328,col 36)",
            "(line 1329,col 9)-(line 1334,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.util.MathUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/util/MathUtilsTest.java",
        "signature": "org.apache.commons.math.util.MathUtilsTest.testSubAndCheckLong()",
        "snippet": "    public void testSubAndCheckLong() {\n        long max = Long.MAX_VALUE;\n        long min = Long.MIN_VALUE;\n        assertEquals(max, MathUtils.subAndCheck(max, 0));\n        assertEquals(min, MathUtils.subAndCheck(min, 0));\n        assertEquals(-max, MathUtils.subAndCheck(0, max));\n        assertEquals(min + 1, MathUtils.subAndCheck(min, -1));\n        // min == -1-max\n        assertEquals(-1, MathUtils.subAndCheck(-max - 1, -max));\n        assertEquals(max, MathUtils.subAndCheck(-1, -1 - max));\n        testSubAndCheckLongFailure(0L, min);\n        testSubAndCheckLongFailure(max, -1L);\n        testSubAndCheckLongFailure(min, 1L);\n    }\n",
        "begin_line": 1337,
        "end_line": 1350,
        "comment": "",
        "child_ranges": [
            "(line 1338,col 9)-(line 1338,col 34)",
            "(line 1339,col 9)-(line 1339,col 34)",
            "(line 1340,col 9)-(line 1340,col 57)",
            "(line 1341,col 9)-(line 1341,col 57)",
            "(line 1342,col 9)-(line 1342,col 58)",
            "(line 1343,col 9)-(line 1343,col 62)",
            "(line 1345,col 9)-(line 1345,col 64)",
            "(line 1346,col 9)-(line 1346,col 63)",
            "(line 1347,col 9)-(line 1347,col 44)",
            "(line 1348,col 9)-(line 1348,col 45)",
            "(line 1349,col 9)-(line 1349,col 44)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.util.MathUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/util/MathUtilsTest.java",
        "signature": "org.apache.commons.math.util.MathUtilsTest.testSubAndCheckLongFailure(long, long)",
        "snippet": "    private void testSubAndCheckLongFailure(long a, long b) {\n        try {\n            MathUtils.subAndCheck(a, b);\n            fail(\"Expecting ArithmeticException\");\n        } catch (ArithmeticException ex) {\n            // success\n        }\n\n    }\n",
        "begin_line": 1352,
        "end_line": 1360,
        "comment": "",
        "child_ranges": [
            "(line 1353,col 9)-(line 1358,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.util.MathUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/util/MathUtilsTest.java",
        "signature": "org.apache.commons.math.util.MathUtilsTest.testPow()",
        "snippet": "    public void testPow() {\n\n        assertEquals(1801088541, MathUtils.pow(21, 7));\n        assertEquals(1, MathUtils.pow(21, 0));\n        try {\n            MathUtils.pow(21, -7);\n            fail(\"Expecting IllegalArgumentException\");\n        } catch (IllegalArgumentException e) {\n            // expected behavior\n        }\n\n        assertEquals(1801088541, MathUtils.pow(21, 7l));\n        assertEquals(1, MathUtils.pow(21, 0l));\n        try {\n            MathUtils.pow(21, -7l);\n            fail(\"Expecting IllegalArgumentException\");\n        } catch (IllegalArgumentException e) {\n            // expected behavior\n        }\n\n        assertEquals(1801088541l, MathUtils.pow(21l, 7));\n        assertEquals(1l, MathUtils.pow(21l, 0));\n        try {\n            MathUtils.pow(21l, -7);\n            fail(\"Expecting IllegalArgumentException\");\n        } catch (IllegalArgumentException e) {\n            // expected behavior\n        }\n\n        assertEquals(1801088541l, MathUtils.pow(21l, 7l));\n        assertEquals(1l, MathUtils.pow(21l, 0l));\n        try {\n            MathUtils.pow(21l, -7l);\n            fail(\"Expecting IllegalArgumentException\");\n        } catch (IllegalArgumentException e) {\n            // expected behavior\n        }\n\n        BigInteger twentyOne = BigInteger.valueOf(21l);\n        assertEquals(BigInteger.valueOf(1801088541l), MathUtils.pow(twentyOne, 7));\n        assertEquals(BigInteger.ONE, MathUtils.pow(twentyOne, 0));\n        try {\n            MathUtils.pow(twentyOne, -7);\n            fail(\"Expecting IllegalArgumentException\");\n        } catch (IllegalArgumentException e) {\n            // expected behavior\n        }\n\n        assertEquals(BigInteger.valueOf(1801088541l), MathUtils.pow(twentyOne, 7l));\n        assertEquals(BigInteger.ONE, MathUtils.pow(twentyOne, 0l));\n        try {\n            MathUtils.pow(twentyOne, -7l);\n            fail(\"Expecting IllegalArgumentException\");\n        } catch (IllegalArgumentException e) {\n            // expected behavior\n        }\n\n        assertEquals(BigInteger.valueOf(1801088541l), MathUtils.pow(twentyOne, BigInteger.valueOf(7l)));\n        assertEquals(BigInteger.ONE, MathUtils.pow(twentyOne, BigInteger.ZERO));\n        try {\n            MathUtils.pow(twentyOne, BigInteger.valueOf(-7l));\n            fail(\"Expecting IllegalArgumentException\");\n        } catch (IllegalArgumentException e) {\n            // expected behavior\n        }\n\n        BigInteger bigOne =\n            new BigInteger(\"1543786922199448028351389769265814882661837148\" +\n                           \"4763915343722775611762713982220306372888519211\" +\n                           \"560905579993523402015636025177602059044911261\");\n        assertEquals(bigOne, MathUtils.pow(twentyOne, 103));\n        assertEquals(bigOne, MathUtils.pow(twentyOne, 103l));\n        assertEquals(bigOne, MathUtils.pow(twentyOne, BigInteger.valueOf(103l)));\n\n    }\n",
        "begin_line": 1362,
        "end_line": 1436,
        "comment": "",
        "child_ranges": [
            "(line 1364,col 9)-(line 1364,col 55)",
            "(line 1365,col 9)-(line 1365,col 46)",
            "(line 1366,col 9)-(line 1371,col 9)",
            "(line 1373,col 9)-(line 1373,col 56)",
            "(line 1374,col 9)-(line 1374,col 47)",
            "(line 1375,col 9)-(line 1380,col 9)",
            "(line 1382,col 9)-(line 1382,col 57)",
            "(line 1383,col 9)-(line 1383,col 48)",
            "(line 1384,col 9)-(line 1389,col 9)",
            "(line 1391,col 9)-(line 1391,col 58)",
            "(line 1392,col 9)-(line 1392,col 49)",
            "(line 1393,col 9)-(line 1398,col 9)",
            "(line 1400,col 9)-(line 1400,col 55)",
            "(line 1401,col 9)-(line 1401,col 83)",
            "(line 1402,col 9)-(line 1402,col 66)",
            "(line 1403,col 9)-(line 1408,col 9)",
            "(line 1410,col 9)-(line 1410,col 84)",
            "(line 1411,col 9)-(line 1411,col 67)",
            "(line 1412,col 9)-(line 1417,col 9)",
            "(line 1419,col 9)-(line 1419,col 104)",
            "(line 1420,col 9)-(line 1420,col 80)",
            "(line 1421,col 9)-(line 1426,col 9)",
            "(line 1428,col 9)-(line 1431,col 76)",
            "(line 1432,col 9)-(line 1432,col 60)",
            "(line 1433,col 9)-(line 1433,col 61)",
            "(line 1434,col 9)-(line 1434,col 81)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.util.MathUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/util/MathUtilsTest.java",
        "signature": "org.apache.commons.math.util.MathUtilsTest.testL1DistanceDouble()",
        "snippet": "    public void testL1DistanceDouble() {\n        double[] p1 = { 2.5,  0.0 };\n        double[] p2 = { -0.5, 4.0 };\n        assertEquals(7.0, MathUtils.distance1(p1, p2));\n    }\n",
        "begin_line": 1438,
        "end_line": 1442,
        "comment": "",
        "child_ranges": [
            "(line 1439,col 9)-(line 1439,col 36)",
            "(line 1440,col 9)-(line 1440,col 36)",
            "(line 1441,col 9)-(line 1441,col 55)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.util.MathUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/util/MathUtilsTest.java",
        "signature": "org.apache.commons.math.util.MathUtilsTest.testL1DistanceInt()",
        "snippet": "    public void testL1DistanceInt() {\n        int[] p1 = { 3, 0 };\n        int[] p2 = { 0, 4 };\n        assertEquals(7, MathUtils.distance1(p1, p2));\n    }\n",
        "begin_line": 1444,
        "end_line": 1448,
        "comment": "",
        "child_ranges": [
            "(line 1445,col 9)-(line 1445,col 28)",
            "(line 1446,col 9)-(line 1446,col 28)",
            "(line 1447,col 9)-(line 1447,col 53)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.util.MathUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/util/MathUtilsTest.java",
        "signature": "org.apache.commons.math.util.MathUtilsTest.testL2DistanceDouble()",
        "snippet": "    public void testL2DistanceDouble() {\n        double[] p1 = { 2.5,  0.0 };\n        double[] p2 = { -0.5, 4.0 };\n        assertEquals(5.0, MathUtils.distance(p1, p2));\n    }\n",
        "begin_line": 1450,
        "end_line": 1454,
        "comment": "",
        "child_ranges": [
            "(line 1451,col 9)-(line 1451,col 36)",
            "(line 1452,col 9)-(line 1452,col 36)",
            "(line 1453,col 9)-(line 1453,col 54)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.util.MathUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/util/MathUtilsTest.java",
        "signature": "org.apache.commons.math.util.MathUtilsTest.testL2DistanceInt()",
        "snippet": "    public void testL2DistanceInt() {\n        int[] p1 = { 3, 0 };\n        int[] p2 = { 0, 4 };\n        assertEquals(5.0, MathUtils.distance(p1, p2));\n    }\n",
        "begin_line": 1456,
        "end_line": 1460,
        "comment": "",
        "child_ranges": [
            "(line 1457,col 9)-(line 1457,col 28)",
            "(line 1458,col 9)-(line 1458,col 28)",
            "(line 1459,col 9)-(line 1459,col 54)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.util.MathUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/util/MathUtilsTest.java",
        "signature": "org.apache.commons.math.util.MathUtilsTest.testLInfDistanceDouble()",
        "snippet": "    public void testLInfDistanceDouble() {\n        double[] p1 = { 2.5,  0.0 };\n        double[] p2 = { -0.5, 4.0 };\n        assertEquals(4.0, MathUtils.distanceInf(p1, p2));\n    }\n",
        "begin_line": 1462,
        "end_line": 1466,
        "comment": "",
        "child_ranges": [
            "(line 1463,col 9)-(line 1463,col 36)",
            "(line 1464,col 9)-(line 1464,col 36)",
            "(line 1465,col 9)-(line 1465,col 57)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.util.MathUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/util/MathUtilsTest.java",
        "signature": "org.apache.commons.math.util.MathUtilsTest.testLInfDistanceInt()",
        "snippet": "    public void testLInfDistanceInt() {\n        int[] p1 = { 3, 0 };\n        int[] p2 = { 0, 4 };\n        assertEquals(4, MathUtils.distanceInf(p1, p2));\n    }\n",
        "begin_line": 1468,
        "end_line": 1472,
        "comment": "",
        "child_ranges": [
            "(line 1469,col 9)-(line 1469,col 28)",
            "(line 1470,col 9)-(line 1470,col 28)",
            "(line 1471,col 9)-(line 1471,col 55)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.util.MathUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/util/MathUtilsTest.java",
        "signature": "org.apache.commons.math.util.MathUtilsTest.testCheckOrder()",
        "snippet": "    public void testCheckOrder() {\n        MathUtils.checkOrder(new double[] {-15, -5.5, -1, 2, 15},\n                             MathUtils.OrderDirection.INCREASING, true);\n        MathUtils.checkOrder(new double[] {-15, -5.5, -1, 2, 2},\n                             MathUtils.OrderDirection.INCREASING, false);\n        MathUtils.checkOrder(new double[] {3, -5.5, -11, -27.5},\n                             MathUtils.OrderDirection.DECREASING, true);\n        MathUtils.checkOrder(new double[] {3, 0, 0, -5.5, -11, -27.5},\n                             MathUtils.OrderDirection.DECREASING, false);\n\n        try {\n            MathUtils.checkOrder(new double[] {-15, -5.5, -1, -1, 2, 15},\n                                 MathUtils.OrderDirection.INCREASING, true);\n            fail(\"an exception should have been thrown\");\n        } catch (NonMonotonousSequenceException e) {\n            // Expected\n        }\n        try {\n            MathUtils.checkOrder(new double[] {-15, -5.5, -1, -2, 2},\n                                 MathUtils.OrderDirection.INCREASING, false);\n            fail(\"an exception should have been thrown\");\n        } catch (NonMonotonousSequenceException e) {\n            // Expected\n        }\n        try {\n            MathUtils.checkOrder(new double[] {3, 3, -5.5, -11, -27.5},\n                                 MathUtils.OrderDirection.DECREASING, true);\n            fail(\"an exception should have been thrown\");\n        } catch (NonMonotonousSequenceException e) {\n            // Expected\n        }\n        try {\n            MathUtils.checkOrder(new double[] {3, -1, 0, -5.5, -11, -27.5},\n                                 MathUtils.OrderDirection.DECREASING, false);\n            fail(\"an exception should have been thrown\");\n        } catch (NonMonotonousSequenceException e) {\n            // Expected\n        }\n    }\n",
        "begin_line": 1474,
        "end_line": 1512,
        "comment": "",
        "child_ranges": [
            "(line 1475,col 9)-(line 1476,col 72)",
            "(line 1477,col 9)-(line 1478,col 73)",
            "(line 1479,col 9)-(line 1480,col 72)",
            "(line 1481,col 9)-(line 1482,col 73)",
            "(line 1484,col 9)-(line 1490,col 9)",
            "(line 1491,col 9)-(line 1497,col 9)",
            "(line 1498,col 9)-(line 1504,col 9)",
            "(line 1505,col 9)-(line 1511,col 9)"
        ]
    }
]