[
    {
        "class_name": "org.joda.time.field.TestFieldUtils",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/field/TestFieldUtils.java",
        "signature": "org.joda.time.field.TestFieldUtils.main(java.lang.String[])",
        "snippet": "    public static void main(String[] args) {\n        junit.textui.TestRunner.run(suite());\n    }\n",
        "begin_line": 27,
        "end_line": 29,
        "comment": "",
        "child_ranges": [
            "(line 28,col 9)-(line 28,col 45)"
        ]
    },
    {
        "class_name": "org.joda.time.field.TestFieldUtils",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/field/TestFieldUtils.java",
        "signature": "org.joda.time.field.TestFieldUtils.suite()",
        "snippet": "    public static TestSuite suite() {\n        return new TestSuite(TestFieldUtils.class);\n    }\n",
        "begin_line": 31,
        "end_line": 33,
        "comment": "",
        "child_ranges": [
            "(line 32,col 9)-(line 32,col 51)"
        ]
    },
    {
        "class_name": "org.joda.time.field.TestFieldUtils",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/field/TestFieldUtils.java",
        "signature": "org.joda.time.field.TestFieldUtils.TestFieldUtils(java.lang.String)",
        "snippet": "    public TestFieldUtils(String name) {\n        super(name);\n    }\n",
        "begin_line": 35,
        "end_line": 37,
        "comment": "",
        "child_ranges": [
            "(line 36,col 9)-(line 36,col 20)"
        ]
    },
    {
        "class_name": "org.joda.time.field.TestFieldUtils",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/field/TestFieldUtils.java",
        "signature": "org.joda.time.field.TestFieldUtils.testSafeAddInt()",
        "snippet": "    public void testSafeAddInt() {\n        assertEquals(0, FieldUtils.safeAdd(0, 0));\n\n        assertEquals(5, FieldUtils.safeAdd(2, 3));\n        assertEquals(-1, FieldUtils.safeAdd(2, -3));\n        assertEquals(1, FieldUtils.safeAdd(-2, 3));\n        assertEquals(-5, FieldUtils.safeAdd(-2, -3));\n\n        assertEquals(Integer.MAX_VALUE - 1, FieldUtils.safeAdd(Integer.MAX_VALUE, -1));\n        assertEquals(Integer.MIN_VALUE + 1, FieldUtils.safeAdd(Integer.MIN_VALUE, 1));\n\n        assertEquals(-1, FieldUtils.safeAdd(Integer.MIN_VALUE, Integer.MAX_VALUE));\n        assertEquals(-1, FieldUtils.safeAdd(Integer.MAX_VALUE, Integer.MIN_VALUE));\n\n        try {\n            FieldUtils.safeAdd(Integer.MAX_VALUE, 1);\n            fail();\n        } catch (ArithmeticException e) {\n        }\n\n        try {\n            FieldUtils.safeAdd(Integer.MAX_VALUE, 100);\n            fail();\n        } catch (ArithmeticException e) {\n        }\n\n        try {\n            FieldUtils.safeAdd(Integer.MAX_VALUE, Integer.MAX_VALUE);\n            fail();\n        } catch (ArithmeticException e) {\n        }\n\n        try {\n            FieldUtils.safeAdd(Integer.MIN_VALUE, -1);\n            fail();\n        } catch (ArithmeticException e) {\n        }\n\n        try {\n            FieldUtils.safeAdd(Integer.MIN_VALUE, -100);\n            fail();\n        } catch (ArithmeticException e) {\n        }\n\n        try {\n            FieldUtils.safeAdd(Integer.MIN_VALUE, Integer.MIN_VALUE);\n            fail();\n        } catch (ArithmeticException e) {\n        }\n    }\n",
        "begin_line": 39,
        "end_line": 88,
        "comment": "",
        "child_ranges": [
            "(line 40,col 9)-(line 40,col 50)",
            "(line 42,col 9)-(line 42,col 50)",
            "(line 43,col 9)-(line 43,col 52)",
            "(line 44,col 9)-(line 44,col 51)",
            "(line 45,col 9)-(line 45,col 53)",
            "(line 47,col 9)-(line 47,col 87)",
            "(line 48,col 9)-(line 48,col 86)",
            "(line 50,col 9)-(line 50,col 83)",
            "(line 51,col 9)-(line 51,col 83)",
            "(line 53,col 9)-(line 57,col 9)",
            "(line 59,col 9)-(line 63,col 9)",
            "(line 65,col 9)-(line 69,col 9)",
            "(line 71,col 9)-(line 75,col 9)",
            "(line 77,col 9)-(line 81,col 9)",
            "(line 83,col 9)-(line 87,col 9)"
        ]
    },
    {
        "class_name": "org.joda.time.field.TestFieldUtils",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/field/TestFieldUtils.java",
        "signature": "org.joda.time.field.TestFieldUtils.testSafeAddLong()",
        "snippet": "    public void testSafeAddLong() {\n        assertEquals(0L, FieldUtils.safeAdd(0L, 0L));\n\n        assertEquals(5L, FieldUtils.safeAdd(2L, 3L));\n        assertEquals(-1L, FieldUtils.safeAdd(2L, -3L));\n        assertEquals(1L, FieldUtils.safeAdd(-2L, 3L));\n        assertEquals(-5L, FieldUtils.safeAdd(-2L, -3L));\n\n        assertEquals(Long.MAX_VALUE - 1, FieldUtils.safeAdd(Long.MAX_VALUE, -1L));\n        assertEquals(Long.MIN_VALUE + 1, FieldUtils.safeAdd(Long.MIN_VALUE, 1L));\n\n        assertEquals(-1, FieldUtils.safeAdd(Long.MIN_VALUE, Long.MAX_VALUE));\n        assertEquals(-1, FieldUtils.safeAdd(Long.MAX_VALUE, Long.MIN_VALUE));\n\n        try {\n            FieldUtils.safeAdd(Long.MAX_VALUE, 1L);\n            fail();\n        } catch (ArithmeticException e) {\n        }\n\n        try {\n            FieldUtils.safeAdd(Long.MAX_VALUE, 100L);\n            fail();\n        } catch (ArithmeticException e) {\n        }\n\n        try {\n            FieldUtils.safeAdd(Long.MAX_VALUE, Long.MAX_VALUE);\n            fail();\n        } catch (ArithmeticException e) {\n        }\n\n        try {\n            FieldUtils.safeAdd(Long.MIN_VALUE, -1L);\n            fail();\n        } catch (ArithmeticException e) {\n        }\n\n        try {\n            FieldUtils.safeAdd(Long.MIN_VALUE, -100L);\n            fail();\n        } catch (ArithmeticException e) {\n        }\n\n        try {\n            FieldUtils.safeAdd(Long.MIN_VALUE, Long.MIN_VALUE);\n            fail();\n        } catch (ArithmeticException e) {\n        }\n    }\n",
        "begin_line": 90,
        "end_line": 139,
        "comment": "",
        "child_ranges": [
            "(line 91,col 9)-(line 91,col 53)",
            "(line 93,col 9)-(line 93,col 53)",
            "(line 94,col 9)-(line 94,col 55)",
            "(line 95,col 9)-(line 95,col 54)",
            "(line 96,col 9)-(line 96,col 56)",
            "(line 98,col 9)-(line 98,col 82)",
            "(line 99,col 9)-(line 99,col 81)",
            "(line 101,col 9)-(line 101,col 77)",
            "(line 102,col 9)-(line 102,col 77)",
            "(line 104,col 9)-(line 108,col 9)",
            "(line 110,col 9)-(line 114,col 9)",
            "(line 116,col 9)-(line 120,col 9)",
            "(line 122,col 9)-(line 126,col 9)",
            "(line 128,col 9)-(line 132,col 9)",
            "(line 134,col 9)-(line 138,col 9)"
        ]
    },
    {
        "class_name": "org.joda.time.field.TestFieldUtils",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/field/TestFieldUtils.java",
        "signature": "org.joda.time.field.TestFieldUtils.testSafeSubtractLong()",
        "snippet": "    public void testSafeSubtractLong() {\n        assertEquals(0L, FieldUtils.safeSubtract(0L, 0L));\n\n        assertEquals(-1L, FieldUtils.safeSubtract(2L, 3L));\n        assertEquals(5L, FieldUtils.safeSubtract(2L, -3L));\n        assertEquals(-5L, FieldUtils.safeSubtract(-2L, 3L));\n        assertEquals(1L, FieldUtils.safeSubtract(-2L, -3L));\n\n        assertEquals(Long.MAX_VALUE - 1, FieldUtils.safeSubtract(Long.MAX_VALUE, 1L));\n        assertEquals(Long.MIN_VALUE + 1, FieldUtils.safeSubtract(Long.MIN_VALUE, -1L));\n\n        assertEquals(0, FieldUtils.safeSubtract(Long.MIN_VALUE, Long.MIN_VALUE));\n        assertEquals(0, FieldUtils.safeSubtract(Long.MAX_VALUE, Long.MAX_VALUE));\n\n        try {\n            FieldUtils.safeSubtract(Long.MIN_VALUE, 1L);\n            fail();\n        } catch (ArithmeticException e) {\n        }\n\n        try {\n            FieldUtils.safeSubtract(Long.MIN_VALUE, 100L);\n            fail();\n        } catch (ArithmeticException e) {\n        }\n\n        try {\n            FieldUtils.safeSubtract(Long.MIN_VALUE, Long.MAX_VALUE);\n            fail();\n        } catch (ArithmeticException e) {\n        }\n\n        try {\n            FieldUtils.safeSubtract(Long.MAX_VALUE, -1L);\n            fail();\n        } catch (ArithmeticException e) {\n        }\n\n        try {\n            FieldUtils.safeSubtract(Long.MAX_VALUE, -100L);\n            fail();\n        } catch (ArithmeticException e) {\n        }\n\n        try {\n            FieldUtils.safeSubtract(Long.MAX_VALUE, Long.MIN_VALUE);\n            fail();\n        } catch (ArithmeticException e) {\n        }\n    }\n",
        "begin_line": 141,
        "end_line": 190,
        "comment": "",
        "child_ranges": [
            "(line 142,col 9)-(line 142,col 58)",
            "(line 144,col 9)-(line 144,col 59)",
            "(line 145,col 9)-(line 145,col 59)",
            "(line 146,col 9)-(line 146,col 60)",
            "(line 147,col 9)-(line 147,col 60)",
            "(line 149,col 9)-(line 149,col 86)",
            "(line 150,col 9)-(line 150,col 87)",
            "(line 152,col 9)-(line 152,col 81)",
            "(line 153,col 9)-(line 153,col 81)",
            "(line 155,col 9)-(line 159,col 9)",
            "(line 161,col 9)-(line 165,col 9)",
            "(line 167,col 9)-(line 171,col 9)",
            "(line 173,col 9)-(line 177,col 9)",
            "(line 179,col 9)-(line 183,col 9)",
            "(line 185,col 9)-(line 189,col 9)"
        ]
    },
    {
        "class_name": "org.joda.time.field.TestFieldUtils",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/field/TestFieldUtils.java",
        "signature": "org.joda.time.field.TestFieldUtils.testSafeMultiplyLongLong()",
        "snippet": "    public void testSafeMultiplyLongLong() {\n        assertEquals(0L, FieldUtils.safeMultiply(0L, 0L));\n        \n        assertEquals(1L, FieldUtils.safeMultiply(1L, 1L));\n        assertEquals(3L, FieldUtils.safeMultiply(1L, 3L));\n        assertEquals(3L, FieldUtils.safeMultiply(3L, 1L));\n        \n        assertEquals(6L, FieldUtils.safeMultiply(2L, 3L));\n        assertEquals(-6L, FieldUtils.safeMultiply(2L, -3L));\n        assertEquals(-6L, FieldUtils.safeMultiply(-2L, 3L));\n        assertEquals(6L, FieldUtils.safeMultiply(-2L, -3L));\n        \n        assertEquals(Long.MAX_VALUE, FieldUtils.safeMultiply(Long.MAX_VALUE, 1L));\n        assertEquals(Long.MIN_VALUE, FieldUtils.safeMultiply(Long.MIN_VALUE, 1L));\n        assertEquals(-Long.MAX_VALUE, FieldUtils.safeMultiply(Long.MAX_VALUE, -1L));\n        \n        try {\n            FieldUtils.safeMultiply(Long.MIN_VALUE, -1L);\n            fail();\n        } catch (ArithmeticException e) {\n        }\n        \n        try {\n            FieldUtils.safeMultiply(-1L, Long.MIN_VALUE);\n            fail();\n        } catch (ArithmeticException e) {\n        }\n      \n        try {\n            FieldUtils.safeMultiply(Long.MIN_VALUE, 100L);\n            fail();\n        } catch (ArithmeticException e) {\n        }\n        \n        try {\n            FieldUtils.safeMultiply(Long.MIN_VALUE, Long.MAX_VALUE);\n            fail();\n        } catch (ArithmeticException e) {\n        }\n        \n        try {\n            FieldUtils.safeMultiply(Long.MAX_VALUE, Long.MIN_VALUE);\n            fail();\n        } catch (ArithmeticException e) {\n        }\n    }\n",
        "begin_line": 193,
        "end_line": 238,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 194,col 9)-(line 194,col 58)",
            "(line 196,col 9)-(line 196,col 58)",
            "(line 197,col 9)-(line 197,col 58)",
            "(line 198,col 9)-(line 198,col 58)",
            "(line 200,col 9)-(line 200,col 58)",
            "(line 201,col 9)-(line 201,col 60)",
            "(line 202,col 9)-(line 202,col 60)",
            "(line 203,col 9)-(line 203,col 60)",
            "(line 205,col 9)-(line 205,col 82)",
            "(line 206,col 9)-(line 206,col 82)",
            "(line 207,col 9)-(line 207,col 84)",
            "(line 209,col 9)-(line 213,col 9)",
            "(line 215,col 9)-(line 219,col 9)",
            "(line 221,col 9)-(line 225,col 9)",
            "(line 227,col 9)-(line 231,col 9)",
            "(line 233,col 9)-(line 237,col 9)"
        ]
    },
    {
        "class_name": "org.joda.time.field.TestFieldUtils",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/field/TestFieldUtils.java",
        "signature": "org.joda.time.field.TestFieldUtils.testSafeMultiplyLongInt()",
        "snippet": "    public void testSafeMultiplyLongInt() {\n        assertEquals(0L, FieldUtils.safeMultiply(0L, 0));\n        \n        assertEquals(1L, FieldUtils.safeMultiply(1L, 1));\n        assertEquals(3L, FieldUtils.safeMultiply(1L, 3));\n        assertEquals(3L, FieldUtils.safeMultiply(3L, 1));\n        \n        assertEquals(6L, FieldUtils.safeMultiply(2L, 3));\n        assertEquals(-6L, FieldUtils.safeMultiply(2L, -3));\n        assertEquals(-6L, FieldUtils.safeMultiply(-2L, 3));\n        assertEquals(6L, FieldUtils.safeMultiply(-2L, -3));\n        \n        assertEquals(-1L * Integer.MIN_VALUE, FieldUtils.safeMultiply(-1L, Integer.MIN_VALUE));\n        \n        assertEquals(Long.MAX_VALUE, FieldUtils.safeMultiply(Long.MAX_VALUE, 1));\n        assertEquals(Long.MIN_VALUE, FieldUtils.safeMultiply(Long.MIN_VALUE, 1));\n        assertEquals(-Long.MAX_VALUE, FieldUtils.safeMultiply(Long.MAX_VALUE, -1));\n        \n        try {\n            FieldUtils.safeMultiply(Long.MIN_VALUE, -1);\n            fail();\n        } catch (ArithmeticException e) {\n        }\n        \n        try {\n            FieldUtils.safeMultiply(Long.MIN_VALUE, 100);\n            fail();\n        } catch (ArithmeticException e) {\n        }\n        \n        try {\n            FieldUtils.safeMultiply(Long.MIN_VALUE, Integer.MAX_VALUE);\n            fail();\n        } catch (ArithmeticException e) {\n        }\n        \n        try {\n            FieldUtils.safeMultiply(Long.MAX_VALUE, Integer.MIN_VALUE);\n            fail();\n        } catch (ArithmeticException e) {\n        }\n    }\n",
        "begin_line": 241,
        "end_line": 282,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 242,col 9)-(line 242,col 57)",
            "(line 244,col 9)-(line 244,col 57)",
            "(line 245,col 9)-(line 245,col 57)",
            "(line 246,col 9)-(line 246,col 57)",
            "(line 248,col 9)-(line 248,col 57)",
            "(line 249,col 9)-(line 249,col 59)",
            "(line 250,col 9)-(line 250,col 59)",
            "(line 251,col 9)-(line 251,col 59)",
            "(line 253,col 9)-(line 253,col 95)",
            "(line 255,col 9)-(line 255,col 81)",
            "(line 256,col 9)-(line 256,col 81)",
            "(line 257,col 9)-(line 257,col 83)",
            "(line 259,col 9)-(line 263,col 9)",
            "(line 265,col 9)-(line 269,col 9)",
            "(line 271,col 9)-(line 275,col 9)",
            "(line 277,col 9)-(line 281,col 9)"
        ]
    }
]