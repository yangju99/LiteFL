[
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testBug1949424()",
        "snippet": "  public void testBug1949424() {\n    CompilerOptions options = createCompilerOptions();\n    options.collapseProperties = true;\n    options.closurePass = true;\n    test(options, CLOSURE_BOILERPLATE + \"goog.provide('FOO'); FOO.bar = 3;\",\n         CLOSURE_COMPILED + \"var FOO$bar = 3;\");\n  }\n",
        "begin_line": 41,
        "end_line": 47,
        "comment": "",
        "child_ranges": [
            "(line 42,col 5)-(line 42,col 54)",
            "(line 43,col 5)-(line 43,col 38)",
            "(line 44,col 5)-(line 44,col 31)",
            "(line 45,col 5)-(line 46,col 48)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testBug1949424_v2()",
        "snippet": "  public void testBug1949424_v2() {\n    CompilerOptions options = createCompilerOptions();\n    options.collapseProperties = true;\n    options.closurePass = true;\n    test(options, CLOSURE_BOILERPLATE + \"goog.provide('FOO.BAR'); FOO.BAR = 3;\",\n         CLOSURE_COMPILED + \"var FOO$BAR = 3;\");\n  }\n",
        "begin_line": 49,
        "end_line": 55,
        "comment": "",
        "child_ranges": [
            "(line 50,col 5)-(line 50,col 54)",
            "(line 51,col 5)-(line 51,col 38)",
            "(line 52,col 5)-(line 52,col 31)",
            "(line 53,col 5)-(line 54,col 48)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testBug1956277()",
        "snippet": "  public void testBug1956277() {\n    CompilerOptions options = createCompilerOptions();\n    options.collapseProperties = true;\n    options.inlineVariables = true;\n    test(options, \"var CONST = {}; CONST.bar = null;\" +\n         \"function f(url) { CONST.bar = url; }\",\n         \"var CONST$bar = null; function f(url) { CONST$bar = url; }\");\n  }\n",
        "begin_line": 57,
        "end_line": 64,
        "comment": "",
        "child_ranges": [
            "(line 58,col 5)-(line 58,col 54)",
            "(line 59,col 5)-(line 59,col 38)",
            "(line 60,col 5)-(line 60,col 35)",
            "(line 61,col 5)-(line 63,col 71)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testBug1962380()",
        "snippet": "  public void testBug1962380() {\n    CompilerOptions options = createCompilerOptions();\n    options.collapseProperties = true;\n    options.inlineVariables = true;\n    options.generateExports = true;\n    test(options,\n         CLOSURE_BOILERPLATE + \"/** @export */ goog.CONSTANT = 1;\" +\n         \"var x = goog.CONSTANT;\",\n         \"(function() {})('goog.CONSTANT', 1);\" +\n         \"var x = 1;\");\n  }\n",
        "begin_line": 66,
        "end_line": 76,
        "comment": "",
        "child_ranges": [
            "(line 67,col 5)-(line 67,col 54)",
            "(line 68,col 5)-(line 68,col 38)",
            "(line 69,col 5)-(line 69,col 35)",
            "(line 70,col 5)-(line 70,col 35)",
            "(line 71,col 5)-(line 75,col 23)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testBug2410122()",
        "snippet": "  public void testBug2410122() {\n    CompilerOptions options = createCompilerOptions();\n    options.generateExports = true;\n    options.closurePass = true;\n    test(options,\n         \"var goog = {};\" +\n         \"function F() {}\" +\n         \"/** @export */ function G() { goog.base(this); } \" +\n         \"goog.inherits(G, F);\",\n         \"var goog = {};\" +\n         \"function F() {}\" +\n         \"function G() { F.call(this); } \" +\n         \"goog.inherits(G, F); goog.exportSymbol('G', G);\");\n  }\n",
        "begin_line": 78,
        "end_line": 91,
        "comment": "",
        "child_ranges": [
            "(line 79,col 5)-(line 79,col 54)",
            "(line 80,col 5)-(line 80,col 35)",
            "(line 81,col 5)-(line 81,col 31)",
            "(line 82,col 5)-(line 90,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testIssue90()",
        "snippet": "  public void testIssue90() {\n    CompilerOptions options = createCompilerOptions();\n    options.foldConstants = true;\n    options.inlineVariables = true;\n    options.removeDeadCode = true;\n    test(options,\n         \"var x; x && alert(1);\",\n         \"\");\n  }\n",
        "begin_line": 93,
        "end_line": 101,
        "comment": "",
        "child_ranges": [
            "(line 94,col 5)-(line 94,col 54)",
            "(line 95,col 5)-(line 95,col 33)",
            "(line 96,col 5)-(line 96,col 35)",
            "(line 97,col 5)-(line 97,col 34)",
            "(line 98,col 5)-(line 100,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testClosurePassOff()",
        "snippet": "  public void testClosurePassOff() {\n    CompilerOptions options = createCompilerOptions();\n    options.closurePass = false;\n    testSame(\n        options,\n        \"var goog = {}; goog.require = function(x) {}; goog.require('foo');\");\n    testSame(\n        options,\n        \"var goog = {}; goog.getCssName = function(x) {};\" +\n        \"goog.getCssName('foo');\");\n  }\n",
        "begin_line": 103,
        "end_line": 113,
        "comment": "",
        "child_ranges": [
            "(line 104,col 5)-(line 104,col 54)",
            "(line 105,col 5)-(line 105,col 32)",
            "(line 106,col 5)-(line 108,col 78)",
            "(line 109,col 5)-(line 112,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testClosurePassOn()",
        "snippet": "  public void testClosurePassOn() {\n    CompilerOptions options = createCompilerOptions();\n    options.closurePass = true;\n    test(\n        options,\n        \"var goog = {}; goog.require = function(x) {}; goog.require('foo');\",\n        ProcessClosurePrimitives.MISSING_PROVIDE_ERROR);\n    test(\n        options,\n        \"/** @define {boolean} */ var COMPILED = false;\" +\n        \"var goog = {}; goog.getCssName = function(x) {};\" +\n        \"goog.getCssName('foo');\",\n        \"var COMPILED = true;\" +\n        \"var goog = {}; goog.getCssName = function(x) {};\" +\n        \"'foo';\");\n  }\n",
        "begin_line": 115,
        "end_line": 130,
        "comment": "",
        "child_ranges": [
            "(line 116,col 5)-(line 116,col 54)",
            "(line 117,col 5)-(line 117,col 31)",
            "(line 118,col 5)-(line 121,col 56)",
            "(line 122,col 5)-(line 129,col 18)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testCssNameCheck()",
        "snippet": "  public void testCssNameCheck() {\n    CompilerOptions options = createCompilerOptions();\n    options.closurePass = true;\n    options.checkMissingGetCssNameLevel = CheckLevel.ERROR;\n    options.checkMissingGetCssNameBlacklist = \"foo\";\n    test(options, \"var x = 'foo';\",\n         CheckMissingGetCssName.MISSING_GETCSSNAME);\n  }\n",
        "begin_line": 132,
        "end_line": 139,
        "comment": "",
        "child_ranges": [
            "(line 133,col 5)-(line 133,col 54)",
            "(line 134,col 5)-(line 134,col 31)",
            "(line 135,col 5)-(line 135,col 59)",
            "(line 136,col 5)-(line 136,col 52)",
            "(line 137,col 5)-(line 138,col 52)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testBug2592659()",
        "snippet": "  public void testBug2592659() {\n    CompilerOptions options = createCompilerOptions();\n    options.closurePass = true;\n    options.checkTypes = true;\n    options.checkMissingGetCssNameLevel = CheckLevel.WARNING;\n    options.checkMissingGetCssNameBlacklist = \"foo\";\n    test(options,\n        \"var goog = {};\\n\" +\n        \"/**\\n\" +\n        \" * @param {string} className\\n\" +\n        \" * @param {string=} opt_modifier\\n\" +\n        \" * @return {string}\\n\" +\n        \"*/\\n\" +\n        \"goog.getCssName = function(className, opt_modifier) {}\\n\" +\n        \"var x = goog.getCssName(123, 'a');\",\n        TypeValidator.TYPE_MISMATCH_WARNING);\n  }\n",
        "begin_line": 141,
        "end_line": 157,
        "comment": "",
        "child_ranges": [
            "(line 142,col 5)-(line 142,col 54)",
            "(line 143,col 5)-(line 143,col 31)",
            "(line 144,col 5)-(line 144,col 30)",
            "(line 145,col 5)-(line 145,col 61)",
            "(line 146,col 5)-(line 146,col 52)",
            "(line 147,col 5)-(line 156,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testTypedefBeforeOwner1()",
        "snippet": "  public void testTypedefBeforeOwner1() {\n    CompilerOptions options = createCompilerOptions();\n    options.closurePass = true;\n    test(options,\n         \"goog.provide('foo.Bar.Type');\\n\" +\n         \"goog.provide('foo.Bar');\\n\" +\n         \"/** @typedef {number} */ foo.Bar.Type;\\n\" +\n         \"foo.Bar = function() {};\",\n         \"var foo = {}; foo.Bar.Type; foo.Bar = function() {};\");\n  }\n",
        "begin_line": 159,
        "end_line": 168,
        "comment": "",
        "child_ranges": [
            "(line 160,col 5)-(line 160,col 54)",
            "(line 161,col 5)-(line 161,col 31)",
            "(line 162,col 5)-(line 167,col 65)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testTypedefBeforeOwner2()",
        "snippet": "  public void testTypedefBeforeOwner2() {\n    CompilerOptions options = createCompilerOptions();\n    options.closurePass = true;\n    options.collapseProperties = true;\n    test(options,\n         \"goog.provide('foo.Bar.Type');\\n\" +\n         \"goog.provide('foo.Bar');\\n\" +\n         \"/** @typedef {number} */ foo.Bar.Type;\\n\" +\n         \"foo.Bar = function() {};\",\n         \"var foo$Bar$Type; var foo$Bar = function() {};\");\n  }\n",
        "begin_line": 170,
        "end_line": 180,
        "comment": "",
        "child_ranges": [
            "(line 171,col 5)-(line 171,col 54)",
            "(line 172,col 5)-(line 172,col 31)",
            "(line 173,col 5)-(line 173,col 38)",
            "(line 174,col 5)-(line 179,col 59)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testExportedNames()",
        "snippet": "  public void testExportedNames() {\n    CompilerOptions options = createCompilerOptions();\n    options.closurePass = true;\n    options.variableRenaming = VariableRenamingPolicy.ALL;\n    test(options,\n         \"/** @define {boolean} */ var COMPILED = false;\" +\n         \"var goog = {}; goog.exportSymbol('b', goog);\",\n         \"var a = true; var c = {}; c.exportSymbol('b', c);\");\n    test(options,\n         \"/** @define {boolean} */ var COMPILED = false;\" +\n         \"var goog = {}; goog.exportSymbol('a', goog);\",\n         \"var b = true; var c = {}; c.exportSymbol('a', c);\");\n  }\n",
        "begin_line": 182,
        "end_line": 194,
        "comment": "",
        "child_ranges": [
            "(line 183,col 5)-(line 183,col 54)",
            "(line 184,col 5)-(line 184,col 31)",
            "(line 185,col 5)-(line 185,col 58)",
            "(line 186,col 5)-(line 189,col 62)",
            "(line 190,col 5)-(line 193,col 62)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testCheckGlobalThisOn()",
        "snippet": "  public void testCheckGlobalThisOn() {\n    CompilerOptions options = createCompilerOptions();\n    options.checkSuspiciousCode = true;\n    options.checkGlobalThisLevel = CheckLevel.ERROR;\n    test(options, \"function f() { this.y = 3; }\", CheckGlobalThis.GLOBAL_THIS);\n  }\n",
        "begin_line": 196,
        "end_line": 201,
        "comment": "",
        "child_ranges": [
            "(line 197,col 5)-(line 197,col 54)",
            "(line 198,col 5)-(line 198,col 39)",
            "(line 199,col 5)-(line 199,col 52)",
            "(line 200,col 5)-(line 200,col 79)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testSusiciousCodeOff()",
        "snippet": "  public void testSusiciousCodeOff() {\n    CompilerOptions options = createCompilerOptions();\n    options.checkSuspiciousCode = false;\n    options.checkGlobalThisLevel = CheckLevel.ERROR;\n    test(options, \"function f() { this.y = 3; }\", CheckGlobalThis.GLOBAL_THIS);\n  }\n",
        "begin_line": 203,
        "end_line": 208,
        "comment": "",
        "child_ranges": [
            "(line 204,col 5)-(line 204,col 54)",
            "(line 205,col 5)-(line 205,col 40)",
            "(line 206,col 5)-(line 206,col 52)",
            "(line 207,col 5)-(line 207,col 79)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testCheckGlobalThisOff()",
        "snippet": "  public void testCheckGlobalThisOff() {\n    CompilerOptions options = createCompilerOptions();\n    options.checkSuspiciousCode = true;\n    options.checkGlobalThisLevel = CheckLevel.OFF;\n    testSame(options, \"function f() { this.y = 3; }\");\n  }\n",
        "begin_line": 210,
        "end_line": 215,
        "comment": "",
        "child_ranges": [
            "(line 211,col 5)-(line 211,col 54)",
            "(line 212,col 5)-(line 212,col 39)",
            "(line 213,col 5)-(line 213,col 50)",
            "(line 214,col 5)-(line 214,col 54)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testCheckRequiresAndCheckProvidesOff()",
        "snippet": "  public void testCheckRequiresAndCheckProvidesOff() {\n    testSame(createCompilerOptions(), new String[] {\n      \"/** @constructor */ function Foo() {}\",\n      \"new Foo();\"\n    });\n  }\n",
        "begin_line": 217,
        "end_line": 222,
        "comment": "",
        "child_ranges": [
            "(line 218,col 5)-(line 221,col 7)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testCheckRequiresOn()",
        "snippet": "  public void testCheckRequiresOn() {\n    CompilerOptions options = createCompilerOptions();\n    options.checkRequires = CheckLevel.ERROR;\n    test(options, new String[] {\n      \"/** @constructor */ function Foo() {}\",\n      \"new Foo();\"\n    }, CheckRequiresForConstructors.MISSING_REQUIRE_WARNING);\n  }\n",
        "begin_line": 224,
        "end_line": 231,
        "comment": "",
        "child_ranges": [
            "(line 225,col 5)-(line 225,col 54)",
            "(line 226,col 5)-(line 226,col 45)",
            "(line 227,col 5)-(line 230,col 61)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testCheckProvidesOn()",
        "snippet": "  public void testCheckProvidesOn() {\n    CompilerOptions options = createCompilerOptions();\n    options.checkProvides = CheckLevel.ERROR;\n    test(options, new String[] {\n      \"/** @constructor */ function Foo() {}\",\n      \"new Foo();\"\n    }, CheckProvides.MISSING_PROVIDE_WARNING);\n  }\n",
        "begin_line": 233,
        "end_line": 240,
        "comment": "",
        "child_ranges": [
            "(line 234,col 5)-(line 234,col 54)",
            "(line 235,col 5)-(line 235,col 45)",
            "(line 236,col 5)-(line 239,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testGenerateExportsOff()",
        "snippet": "  public void testGenerateExportsOff() {\n    testSame(createCompilerOptions(), \"/** @export */ function f() {}\");\n  }\n",
        "begin_line": 242,
        "end_line": 244,
        "comment": "",
        "child_ranges": [
            "(line 243,col 5)-(line 243,col 72)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testGenerateExportsOn()",
        "snippet": "  public void testGenerateExportsOn() {\n    CompilerOptions options = createCompilerOptions();\n    options.generateExports = true;\n    test(options, \"/** @export */ function f() {}\",\n         \"/** @export */ function f() {} goog.exportSymbol('f', f);\");\n  }\n",
        "begin_line": 246,
        "end_line": 251,
        "comment": "",
        "child_ranges": [
            "(line 247,col 5)-(line 247,col 54)",
            "(line 248,col 5)-(line 248,col 35)",
            "(line 249,col 5)-(line 250,col 70)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testExportTestFunctionsOff()",
        "snippet": "  public void testExportTestFunctionsOff() {\n    testSame(createCompilerOptions(), \"function testFoo() {}\");\n  }\n",
        "begin_line": 253,
        "end_line": 255,
        "comment": "",
        "child_ranges": [
            "(line 254,col 5)-(line 254,col 63)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testExportTestFunctionsOn()",
        "snippet": "  public void testExportTestFunctionsOn() {\n    CompilerOptions options = createCompilerOptions();\n    options.exportTestFunctions = true;\n    test(options, \"function testFoo() {}\",\n         \"/** @export */ function testFoo() {}\" +\n         \"goog.exportSymbol('testFoo', testFoo);\");\n  }\n",
        "begin_line": 257,
        "end_line": 263,
        "comment": "",
        "child_ranges": [
            "(line 258,col 5)-(line 258,col 54)",
            "(line 259,col 5)-(line 259,col 39)",
            "(line 260,col 5)-(line 262,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testExpose()",
        "snippet": "  public void testExpose() {\n    CompilerOptions options = createCompilerOptions();\n    CompilationLevel.ADVANCED_OPTIMIZATIONS\n        .setOptionsForCompilationLevel(options);\n    test(options,\n         \"var x = {eeny: 1, /** @expose */ meeny: 2};\" +\n         \"/** @constructor */ var Foo = function() {};\" +\n         \"/** @expose */  Foo.prototype.miny = 3;\" +\n         \"Foo.prototype.moe = 4;\" +\n         \"function moe(a, b) { return a.meeny + b.miny; }\" +\n         \"window['x'] = x;\" +\n         \"window['Foo'] = Foo;\" +\n         \"window['moe'] = moe;\",\n         \"function a(){}\" +\n         \"a.prototype.miny=3;\" +\n         \"window.x={a:1,meeny:2};\" +\n         \"window.Foo=a;\" +\n         \"window.moe=function(b,c){\" +\n         \"  return b.meeny+c.miny\" +\n         \"}\");\n  }\n",
        "begin_line": 265,
        "end_line": 285,
        "comment": "",
        "child_ranges": [
            "(line 266,col 5)-(line 266,col 54)",
            "(line 267,col 5)-(line 268,col 48)",
            "(line 269,col 5)-(line 284,col 14)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testCheckSymbolsOff()",
        "snippet": "  public void testCheckSymbolsOff() {\n    CompilerOptions options = createCompilerOptions();\n    testSame(options, \"x = 3;\");\n  }\n",
        "begin_line": 287,
        "end_line": 290,
        "comment": "",
        "child_ranges": [
            "(line 288,col 5)-(line 288,col 54)",
            "(line 289,col 5)-(line 289,col 32)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testCheckSymbolsOn()",
        "snippet": "  public void testCheckSymbolsOn() {\n    CompilerOptions options = createCompilerOptions();\n    options.checkSymbols = true;\n    test(options, \"x = 3;\", VarCheck.UNDEFINED_VAR_ERROR);\n  }\n",
        "begin_line": 292,
        "end_line": 296,
        "comment": "",
        "child_ranges": [
            "(line 293,col 5)-(line 293,col 54)",
            "(line 294,col 5)-(line 294,col 32)",
            "(line 295,col 5)-(line 295,col 58)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testCheckReferencesOff()",
        "snippet": "  public void testCheckReferencesOff() {\n    CompilerOptions options = createCompilerOptions();\n    testSame(options, \"x = 3; var x = 5;\");\n  }\n",
        "begin_line": 298,
        "end_line": 301,
        "comment": "",
        "child_ranges": [
            "(line 299,col 5)-(line 299,col 54)",
            "(line 300,col 5)-(line 300,col 43)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testCheckReferencesOn()",
        "snippet": "  public void testCheckReferencesOn() {\n    CompilerOptions options = createCompilerOptions();\n    options.aggressiveVarCheck = CheckLevel.ERROR;\n    test(options, \"x = 3; var x = 5;\",\n         VariableReferenceCheck.UNDECLARED_REFERENCE);\n  }\n",
        "begin_line": 303,
        "end_line": 308,
        "comment": "",
        "child_ranges": [
            "(line 304,col 5)-(line 304,col 54)",
            "(line 305,col 5)-(line 305,col 50)",
            "(line 306,col 5)-(line 307,col 54)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testInferTypes()",
        "snippet": "  public void testInferTypes() {\n    CompilerOptions options = createCompilerOptions();\n    options.inferTypes = true;\n    options.checkTypes = false;\n    options.closurePass = true;\n\n    test(options,\n        CLOSURE_BOILERPLATE +\n        \"goog.provide('Foo'); /** @enum */ Foo = {a: 3};\",\n        TypeCheck.ENUM_NOT_CONSTANT);\n    assertTrue(lastCompiler.getErrorManager().getTypedPercent() == 0);\n\n    // This does not generate a warning.\n    test(options, \"/** @type {number} */ var n = window.name;\",\n        \"var n = window.name;\");\n    assertTrue(lastCompiler.getErrorManager().getTypedPercent() == 0);\n  }\n",
        "begin_line": 310,
        "end_line": 326,
        "comment": "",
        "child_ranges": [
            "(line 311,col 5)-(line 311,col 54)",
            "(line 312,col 5)-(line 312,col 30)",
            "(line 313,col 5)-(line 313,col 31)",
            "(line 314,col 5)-(line 314,col 31)",
            "(line 316,col 5)-(line 319,col 37)",
            "(line 320,col 5)-(line 320,col 70)",
            "(line 323,col 5)-(line 324,col 32)",
            "(line 325,col 5)-(line 325,col 70)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testTypeCheckAndInference()",
        "snippet": "  public void testTypeCheckAndInference() {\n    CompilerOptions options = createCompilerOptions();\n    options.checkTypes = true;\n    test(options, \"/** @type {number} */ var n = window.name;\",\n         TypeValidator.TYPE_MISMATCH_WARNING);\n    assertTrue(lastCompiler.getErrorManager().getTypedPercent() > 0);\n  }\n",
        "begin_line": 328,
        "end_line": 334,
        "comment": "",
        "child_ranges": [
            "(line 329,col 5)-(line 329,col 54)",
            "(line 330,col 5)-(line 330,col 30)",
            "(line 331,col 5)-(line 332,col 46)",
            "(line 333,col 5)-(line 333,col 69)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testTypeNameParser()",
        "snippet": "  public void testTypeNameParser() {\n    CompilerOptions options = createCompilerOptions();\n    options.checkTypes = true;\n    test(options, \"/** @type {n} */ var n = window.name;\",\n         RhinoErrorReporter.TYPE_PARSE_ERROR);\n  }\n",
        "begin_line": 336,
        "end_line": 341,
        "comment": "",
        "child_ranges": [
            "(line 337,col 5)-(line 337,col 54)",
            "(line 338,col 5)-(line 338,col 30)",
            "(line 339,col 5)-(line 340,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testMemoizedTypedScopeCreator()",
        "snippet": "  public void testMemoizedTypedScopeCreator() {\n    CompilerOptions options = createCompilerOptions();\n    options.checkTypes = true;\n    options.ambiguateProperties = true;\n    options.propertyRenaming = PropertyRenamingPolicy.ALL_UNQUOTED;\n    test(options, \"function someTest() {\\n\"\n        + \"  /** @constructor */\\n\"\n        + \"  function Foo() { this.instProp = 3; }\\n\"\n        + \"  Foo.prototype.protoProp = function(a, b) {};\\n\"\n        + \"  /** @constructor\\n @extends Foo */\\n\"\n        + \"  function Bar() {}\\n\"\n        + \"  goog.inherits(Bar, Foo);\\n\"\n        + \"  var o = new Bar();\\n\"\n        + \"  o.protoProp(o.protoProp, o.instProp);\\n\"\n        + \"}\",\n        \"function someTest() {\\n\"\n        + \"  function Foo() { this.b = 3; }\\n\"\n        + \"  Foo.prototype.a = function(a, b) {};\\n\"\n        + \"  function Bar() {}\\n\"\n        + \"  goog.c(Bar, Foo);\\n\"\n        + \"  var o = new Bar();\\n\"\n        + \"  o.a(o.a, o.b);\\n\"\n        + \"}\");\n  }\n",
        "begin_line": 348,
        "end_line": 371,
        "comment": " o.a(o.a, o.a), which is bad.",
        "child_ranges": [
            "(line 349,col 5)-(line 349,col 54)",
            "(line 350,col 5)-(line 350,col 30)",
            "(line 351,col 5)-(line 351,col 39)",
            "(line 352,col 5)-(line 352,col 67)",
            "(line 353,col 5)-(line 370,col 15)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testCheckTypes()",
        "snippet": "  public void testCheckTypes() {\n    CompilerOptions options = createCompilerOptions();\n    options.checkTypes = true;\n    test(options, \"var x = x || {}; x.f = function() {}; x.f(3);\",\n         TypeCheck.WRONG_ARGUMENT_COUNT);\n  }\n",
        "begin_line": 373,
        "end_line": 378,
        "comment": "",
        "child_ranges": [
            "(line 374,col 5)-(line 374,col 54)",
            "(line 375,col 5)-(line 375,col 30)",
            "(line 376,col 5)-(line 377,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testReplaceCssNames()",
        "snippet": "  public void testReplaceCssNames() {\n    CompilerOptions options = createCompilerOptions();\n    options.closurePass = true;\n    options.gatherCssNames = true;\n    test(options, \"/** @define {boolean} */\\n\"\n         + \"var COMPILED = false;\\n\"\n         + \"goog.setCssNameMapping({'foo':'bar'});\\n\"\n         + \"function getCss() {\\n\"\n         + \"  return goog.getCssName('foo');\\n\"\n         + \"}\",\n         \"var COMPILED = true;\\n\"\n         + \"function getCss() {\\n\"\n         + \"  return \\\"bar\\\";\"\n         + \"}\");\n    assertEquals(\n        ImmutableMap.of(\"foo\", new Integer(1)),\n        lastCompiler.getPassConfig().getIntermediateState().cssNames);\n  }\n",
        "begin_line": 380,
        "end_line": 397,
        "comment": "",
        "child_ranges": [
            "(line 381,col 5)-(line 381,col 54)",
            "(line 382,col 5)-(line 382,col 31)",
            "(line 383,col 5)-(line 383,col 34)",
            "(line 384,col 5)-(line 393,col 16)",
            "(line 394,col 5)-(line 396,col 70)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testRemoveClosureAsserts()",
        "snippet": "  public void testRemoveClosureAsserts() {\n    CompilerOptions options = createCompilerOptions();\n    options.closurePass = true;\n    testSame(options,\n        \"var goog = {};\"\n        + \"goog.asserts.assert(goog);\");\n    options.removeClosureAsserts = true;\n    test(options,\n        \"var goog = {};\"\n        + \"goog.asserts.assert(goog);\",\n        \"var goog = {};\");\n  }\n",
        "begin_line": 399,
        "end_line": 410,
        "comment": "",
        "child_ranges": [
            "(line 400,col 5)-(line 400,col 54)",
            "(line 401,col 5)-(line 401,col 31)",
            "(line 402,col 5)-(line 404,col 40)",
            "(line 405,col 5)-(line 405,col 40)",
            "(line 406,col 5)-(line 409,col 26)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testDeprecation()",
        "snippet": "  public void testDeprecation() {\n    String code = \"/** @deprecated */ function f() { } function g() { f(); }\";\n\n    CompilerOptions options = createCompilerOptions();\n    testSame(options, code);\n\n    options.setWarningLevel(DiagnosticGroups.DEPRECATED, CheckLevel.ERROR);\n    testSame(options, code);\n\n    options.checkTypes = true;\n    test(options, code, CheckAccessControls.DEPRECATED_NAME);\n  }\n",
        "begin_line": 412,
        "end_line": 423,
        "comment": "",
        "child_ranges": [
            "(line 413,col 5)-(line 413,col 78)",
            "(line 415,col 5)-(line 415,col 54)",
            "(line 416,col 5)-(line 416,col 28)",
            "(line 418,col 5)-(line 418,col 75)",
            "(line 419,col 5)-(line 419,col 28)",
            "(line 421,col 5)-(line 421,col 30)",
            "(line 422,col 5)-(line 422,col 61)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testVisibility()",
        "snippet": "  public void testVisibility() {\n    String[] code = {\n        \"/** @private */ function f() { }\",\n        \"function g() { f(); }\"\n    };\n\n    CompilerOptions options = createCompilerOptions();\n    testSame(options, code);\n\n    options.setWarningLevel(DiagnosticGroups.VISIBILITY, CheckLevel.ERROR);\n    testSame(options, code);\n\n    options.checkTypes = true;\n    test(options, code, CheckAccessControls.BAD_PRIVATE_GLOBAL_ACCESS);\n  }\n",
        "begin_line": 425,
        "end_line": 439,
        "comment": "",
        "child_ranges": [
            "(line 426,col 5)-(line 429,col 6)",
            "(line 431,col 5)-(line 431,col 54)",
            "(line 432,col 5)-(line 432,col 28)",
            "(line 434,col 5)-(line 434,col 75)",
            "(line 435,col 5)-(line 435,col 28)",
            "(line 437,col 5)-(line 437,col 30)",
            "(line 438,col 5)-(line 438,col 71)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testUnreachableCode()",
        "snippet": "  public void testUnreachableCode() {\n    String code = \"function f() { return \\n 3; }\";\n\n    CompilerOptions options = createCompilerOptions();\n    testSame(options, code);\n\n    options.checkUnreachableCode = CheckLevel.ERROR;\n    test(options, code, CheckUnreachableCode.UNREACHABLE_CODE);\n  }\n",
        "begin_line": 441,
        "end_line": 449,
        "comment": "",
        "child_ranges": [
            "(line 442,col 5)-(line 442,col 50)",
            "(line 444,col 5)-(line 444,col 54)",
            "(line 445,col 5)-(line 445,col 28)",
            "(line 447,col 5)-(line 447,col 52)",
            "(line 448,col 5)-(line 448,col 63)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testMissingReturn()",
        "snippet": "  public void testMissingReturn() {\n    String code =\n        \"/** @return {number} */ function f() { if (f) { return 3; } }\";\n\n    CompilerOptions options = createCompilerOptions();\n    testSame(options, code);\n\n    options.checkMissingReturn = CheckLevel.ERROR;\n    testSame(options, code);\n\n    options.checkTypes = true;\n    test(options, code, CheckMissingReturn.MISSING_RETURN_STATEMENT);\n  }\n",
        "begin_line": 451,
        "end_line": 463,
        "comment": "",
        "child_ranges": [
            "(line 452,col 5)-(line 453,col 72)",
            "(line 455,col 5)-(line 455,col 54)",
            "(line 456,col 5)-(line 456,col 28)",
            "(line 458,col 5)-(line 458,col 50)",
            "(line 459,col 5)-(line 459,col 28)",
            "(line 461,col 5)-(line 461,col 30)",
            "(line 462,col 5)-(line 462,col 69)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testIdGenerators()",
        "snippet": "  public void testIdGenerators() {\n    String code =  \"function f() {} f('id');\";\n\n    CompilerOptions options = createCompilerOptions();\n    testSame(options, code);\n\n    options.idGenerators = Sets.newHashSet(\"f\");\n    test(options, code, \"function f() {} 'a';\");\n  }\n",
        "begin_line": 465,
        "end_line": 473,
        "comment": "",
        "child_ranges": [
            "(line 466,col 5)-(line 466,col 46)",
            "(line 468,col 5)-(line 468,col 54)",
            "(line 469,col 5)-(line 469,col 28)",
            "(line 471,col 5)-(line 471,col 48)",
            "(line 472,col 5)-(line 472,col 48)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testOptimizeArgumentsArray()",
        "snippet": "  public void testOptimizeArgumentsArray() {\n    String code =  \"function f() { return arguments[0]; }\";\n\n    CompilerOptions options = createCompilerOptions();\n    testSame(options, code);\n\n    options.optimizeArgumentsArray = true;\n    String argName = \"JSCompiler_OptimizeArgumentsArray_p0\";\n    test(options, code,\n         \"function f(\" + argName + \") { return \" + argName + \"; }\");\n  }\n",
        "begin_line": 475,
        "end_line": 485,
        "comment": "",
        "child_ranges": [
            "(line 476,col 5)-(line 476,col 59)",
            "(line 478,col 5)-(line 478,col 54)",
            "(line 479,col 5)-(line 479,col 28)",
            "(line 481,col 5)-(line 481,col 42)",
            "(line 482,col 5)-(line 482,col 60)",
            "(line 483,col 5)-(line 484,col 68)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testOptimizeParameters()",
        "snippet": "  public void testOptimizeParameters() {\n    String code = \"function f(a) { return a; } f(true);\";\n\n    CompilerOptions options = createCompilerOptions();\n    testSame(options, code);\n\n    options.optimizeParameters = true;\n    test(options, code, \"function f() { var a = true; return a;} f();\");\n  }\n",
        "begin_line": 487,
        "end_line": 495,
        "comment": "",
        "child_ranges": [
            "(line 488,col 5)-(line 488,col 57)",
            "(line 490,col 5)-(line 490,col 54)",
            "(line 491,col 5)-(line 491,col 28)",
            "(line 493,col 5)-(line 493,col 38)",
            "(line 494,col 5)-(line 494,col 72)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testOptimizeReturns()",
        "snippet": "  public void testOptimizeReturns() {\n    String code = \"function f(a) { return a; } f(true);\";\n\n    CompilerOptions options = createCompilerOptions();\n    testSame(options, code);\n\n    options.optimizeReturns = true;\n    test(options, code, \"function f(a) {return;} f(true);\");\n  }\n",
        "begin_line": 497,
        "end_line": 505,
        "comment": "",
        "child_ranges": [
            "(line 498,col 5)-(line 498,col 57)",
            "(line 500,col 5)-(line 500,col 54)",
            "(line 501,col 5)-(line 501,col 28)",
            "(line 503,col 5)-(line 503,col 35)",
            "(line 504,col 5)-(line 504,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testRemoveAbstractMethods()",
        "snippet": "  public void testRemoveAbstractMethods() {\n    String code = CLOSURE_BOILERPLATE +\n        \"var x = {}; x.foo = goog.abstractMethod; x.bar = 3;\";\n\n    CompilerOptions options = createCompilerOptions();\n    testSame(options, code);\n\n    options.closurePass = true;\n    options.collapseProperties = true;\n    test(options, code, CLOSURE_COMPILED + \" var x$bar = 3;\");\n  }\n",
        "begin_line": 507,
        "end_line": 517,
        "comment": "",
        "child_ranges": [
            "(line 508,col 5)-(line 509,col 62)",
            "(line 511,col 5)-(line 511,col 54)",
            "(line 512,col 5)-(line 512,col 28)",
            "(line 514,col 5)-(line 514,col 31)",
            "(line 515,col 5)-(line 515,col 38)",
            "(line 516,col 5)-(line 516,col 62)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testCollapseProperties1()",
        "snippet": "  public void testCollapseProperties1() {\n    String code =\n        \"var x = {}; x.FOO = 5; x.bar = 3;\";\n\n    CompilerOptions options = createCompilerOptions();\n    testSame(options, code);\n\n    options.collapseProperties = true;\n    test(options, code, \"var x$FOO = 5; var x$bar = 3;\");\n  }\n",
        "begin_line": 519,
        "end_line": 528,
        "comment": "",
        "child_ranges": [
            "(line 520,col 5)-(line 521,col 44)",
            "(line 523,col 5)-(line 523,col 54)",
            "(line 524,col 5)-(line 524,col 28)",
            "(line 526,col 5)-(line 526,col 38)",
            "(line 527,col 5)-(line 527,col 57)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testCollapseProperties2()",
        "snippet": "  public void testCollapseProperties2() {\n    String code =\n        \"var x = {}; x.FOO = 5; x.bar = 3;\";\n\n    CompilerOptions options = createCompilerOptions();\n    testSame(options, code);\n\n    options.collapseProperties = true;\n    options.collapseObjectLiterals = true;\n    test(options, code, \"var x$FOO = 5; var x$bar = 3;\");\n  }\n",
        "begin_line": 530,
        "end_line": 540,
        "comment": "",
        "child_ranges": [
            "(line 531,col 5)-(line 532,col 44)",
            "(line 534,col 5)-(line 534,col 54)",
            "(line 535,col 5)-(line 535,col 28)",
            "(line 537,col 5)-(line 537,col 38)",
            "(line 538,col 5)-(line 538,col 42)",
            "(line 539,col 5)-(line 539,col 57)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testCollapseObjectLiteral1()",
        "snippet": "  public void testCollapseObjectLiteral1() {\n    // Verify collapseObjectLiterals does nothing in global scope\n    String code = \"var x = {}; x.FOO = 5; x.bar = 3;\";\n\n    CompilerOptions options = createCompilerOptions();\n    testSame(options, code);\n\n    options.collapseObjectLiterals = true;\n    testSame(options, code);\n  }\n",
        "begin_line": 542,
        "end_line": 551,
        "comment": "",
        "child_ranges": [
            "(line 544,col 5)-(line 544,col 54)",
            "(line 546,col 5)-(line 546,col 54)",
            "(line 547,col 5)-(line 547,col 28)",
            "(line 549,col 5)-(line 549,col 42)",
            "(line 550,col 5)-(line 550,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testCollapseObjectLiteral2()",
        "snippet": "  public void testCollapseObjectLiteral2() {\n    String code =\n        \"function f() {var x = {}; x.FOO = 5; x.bar = 3;}\";\n\n    CompilerOptions options = createCompilerOptions();\n    testSame(options, code);\n\n    options.collapseObjectLiterals = true;\n    test(options, code,\n        \"function f(){\" +\n        \"var JSCompiler_object_inline_FOO_0;\" +\n        \"var JSCompiler_object_inline_bar_1;\" +\n        \"JSCompiler_object_inline_FOO_0=5;\" +\n        \"JSCompiler_object_inline_bar_1=3}\");\n  }\n",
        "begin_line": 553,
        "end_line": 567,
        "comment": "",
        "child_ranges": [
            "(line 554,col 5)-(line 555,col 59)",
            "(line 557,col 5)-(line 557,col 54)",
            "(line 558,col 5)-(line 558,col 28)",
            "(line 560,col 5)-(line 560,col 42)",
            "(line 561,col 5)-(line 566,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testTightenTypesWithoutTypeCheck()",
        "snippet": "  public void testTightenTypesWithoutTypeCheck() {\n    CompilerOptions options = createCompilerOptions();\n    options.tightenTypes = true;\n    test(options, \"\", DefaultPassConfig.TIGHTEN_TYPES_WITHOUT_TYPE_CHECK);\n  }\n",
        "begin_line": 569,
        "end_line": 573,
        "comment": "",
        "child_ranges": [
            "(line 570,col 5)-(line 570,col 54)",
            "(line 571,col 5)-(line 571,col 32)",
            "(line 572,col 5)-(line 572,col 74)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testDisambiguateProperties()",
        "snippet": "  public void testDisambiguateProperties() {\n    String code =\n        \"/** @constructor */ function Foo(){} Foo.prototype.bar = 3;\" +\n        \"/** @constructor */ function Baz(){} Baz.prototype.bar = 3;\";\n\n    CompilerOptions options = createCompilerOptions();\n    testSame(options, code);\n\n    options.disambiguateProperties = true;\n    options.checkTypes = true;\n    test(options, code,\n         \"function Foo(){} Foo.prototype.Foo_prototype$bar = 3;\" +\n         \"function Baz(){} Baz.prototype.Baz_prototype$bar = 3;\");\n  }\n",
        "begin_line": 575,
        "end_line": 588,
        "comment": "",
        "child_ranges": [
            "(line 576,col 5)-(line 578,col 70)",
            "(line 580,col 5)-(line 580,col 54)",
            "(line 581,col 5)-(line 581,col 28)",
            "(line 583,col 5)-(line 583,col 42)",
            "(line 584,col 5)-(line 584,col 30)",
            "(line 585,col 5)-(line 587,col 66)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testMarkPureCalls()",
        "snippet": "  public void testMarkPureCalls() {\n    String testCode = \"function foo() {} foo();\";\n    CompilerOptions options = createCompilerOptions();\n    options.removeDeadCode = true;\n\n    testSame(options, testCode);\n\n    options.computeFunctionSideEffects = true;\n    test(options, testCode, \"function foo() {}\");\n  }\n",
        "begin_line": 590,
        "end_line": 599,
        "comment": "",
        "child_ranges": [
            "(line 591,col 5)-(line 591,col 49)",
            "(line 592,col 5)-(line 592,col 54)",
            "(line 593,col 5)-(line 593,col 34)",
            "(line 595,col 5)-(line 595,col 32)",
            "(line 597,col 5)-(line 597,col 46)",
            "(line 598,col 5)-(line 598,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testMarkNoSideEffects()",
        "snippet": "  public void testMarkNoSideEffects() {\n    String testCode = \"noSideEffects();\";\n    CompilerOptions options = createCompilerOptions();\n    options.removeDeadCode = true;\n\n    testSame(options, testCode);\n\n    options.markNoSideEffectCalls = true;\n    test(options, testCode, \"\");\n  }\n",
        "begin_line": 601,
        "end_line": 610,
        "comment": "",
        "child_ranges": [
            "(line 602,col 5)-(line 602,col 41)",
            "(line 603,col 5)-(line 603,col 54)",
            "(line 604,col 5)-(line 604,col 34)",
            "(line 606,col 5)-(line 606,col 32)",
            "(line 608,col 5)-(line 608,col 41)",
            "(line 609,col 5)-(line 609,col 32)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testChainedCalls()",
        "snippet": "  public void testChainedCalls() {\n    CompilerOptions options = createCompilerOptions();\n    options.chainCalls = true;\n    test(\n        options,\n        \"/** @constructor */ function Foo() {} \" +\n        \"Foo.prototype.bar = function() { return this; }; \" +\n        \"var f = new Foo();\" +\n        \"f.bar(); \" +\n        \"f.bar(); \",\n        \"function Foo() {} \" +\n        \"Foo.prototype.bar = function() { return this; }; \" +\n        \"var f = new Foo();\" +\n        \"f.bar().bar();\");\n  }\n",
        "begin_line": 612,
        "end_line": 626,
        "comment": "",
        "child_ranges": [
            "(line 613,col 5)-(line 613,col 54)",
            "(line 614,col 5)-(line 614,col 30)",
            "(line 615,col 5)-(line 625,col 26)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testExtraAnnotationNames()",
        "snippet": "  public void testExtraAnnotationNames() {\n    CompilerOptions options = createCompilerOptions();\n    options.setExtraAnnotationNames(Sets.newHashSet(\"TagA\", \"TagB\"));\n    test(\n        options,\n        \"/** @TagA */ var f = new Foo(); /** @TagB */ f.bar();\",\n        \"var f = new Foo(); f.bar();\");\n  }\n",
        "begin_line": 628,
        "end_line": 635,
        "comment": "",
        "child_ranges": [
            "(line 629,col 5)-(line 629,col 54)",
            "(line 630,col 5)-(line 630,col 69)",
            "(line 631,col 5)-(line 634,col 39)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testDevirtualizePrototypeMethods()",
        "snippet": "  public void testDevirtualizePrototypeMethods() {\n    CompilerOptions options = createCompilerOptions();\n    options.devirtualizePrototypeMethods = true;\n    test(\n        options,\n        \"/** @constructor */ var Foo = function() {}; \" +\n        \"Foo.prototype.bar = function() {};\" +\n        \"(new Foo()).bar();\",\n        \"var Foo = function() {};\" +\n        \"var JSCompiler_StaticMethods_bar = \" +\n        \"    function(JSCompiler_StaticMethods_bar$self) {};\" +\n        \"JSCompiler_StaticMethods_bar(new Foo());\");\n  }\n",
        "begin_line": 637,
        "end_line": 649,
        "comment": "",
        "child_ranges": [
            "(line 638,col 5)-(line 638,col 54)",
            "(line 639,col 5)-(line 639,col 48)",
            "(line 640,col 5)-(line 648,col 52)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testCheckConsts()",
        "snippet": "  public void testCheckConsts() {\n    CompilerOptions options = createCompilerOptions();\n    options.inlineConstantVars = true;\n    test(options, \"var FOO = true; FOO = false\",\n        ConstCheck.CONST_REASSIGNED_VALUE_ERROR);\n  }\n",
        "begin_line": 651,
        "end_line": 656,
        "comment": "",
        "child_ranges": [
            "(line 652,col 5)-(line 652,col 54)",
            "(line 653,col 5)-(line 653,col 38)",
            "(line 654,col 5)-(line 655,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testAllChecksOn()",
        "snippet": "  public void testAllChecksOn() {\n    CompilerOptions options = createCompilerOptions();\n    options.checkSuspiciousCode = true;\n    options.checkControlStructures = true;\n    options.checkRequires = CheckLevel.ERROR;\n    options.checkProvides = CheckLevel.ERROR;\n    options.generateExports = true;\n    options.exportTestFunctions = true;\n    options.closurePass = true;\n    options.checkMissingGetCssNameLevel = CheckLevel.ERROR;\n    options.checkMissingGetCssNameBlacklist = \"goog\";\n    options.syntheticBlockStartMarker = \"synStart\";\n    options.syntheticBlockEndMarker = \"synEnd\";\n    options.checkSymbols = true;\n    options.aggressiveVarCheck = CheckLevel.ERROR;\n    options.processObjectPropertyString = true;\n    options.collapseProperties = true;\n    test(options, CLOSURE_BOILERPLATE, CLOSURE_COMPILED);\n  }\n",
        "begin_line": 658,
        "end_line": 676,
        "comment": "",
        "child_ranges": [
            "(line 659,col 5)-(line 659,col 54)",
            "(line 660,col 5)-(line 660,col 39)",
            "(line 661,col 5)-(line 661,col 42)",
            "(line 662,col 5)-(line 662,col 45)",
            "(line 663,col 5)-(line 663,col 45)",
            "(line 664,col 5)-(line 664,col 35)",
            "(line 665,col 5)-(line 665,col 39)",
            "(line 666,col 5)-(line 666,col 31)",
            "(line 667,col 5)-(line 667,col 59)",
            "(line 668,col 5)-(line 668,col 53)",
            "(line 669,col 5)-(line 669,col 51)",
            "(line 670,col 5)-(line 670,col 47)",
            "(line 671,col 5)-(line 671,col 32)",
            "(line 672,col 5)-(line 672,col 50)",
            "(line 673,col 5)-(line 673,col 47)",
            "(line 674,col 5)-(line 674,col 38)",
            "(line 675,col 5)-(line 675,col 57)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testTypeCheckingWithSyntheticBlocks()",
        "snippet": "  public void testTypeCheckingWithSyntheticBlocks() {\n    CompilerOptions options = createCompilerOptions();\n    options.syntheticBlockStartMarker = \"synStart\";\n    options.syntheticBlockEndMarker = \"synEnd\";\n    options.checkTypes = true;\n\n    // We used to have a bug where the CFG drew an\n    // edge straight from synStart to f(progress).\n    // If that happens, then progress will get type {number|undefined}.\n    testSame(\n        options,\n        \"/** @param {number} x */ function f(x) {}\" +\n        \"function g() {\" +\n        \" synStart('foo');\" +\n        \" var progress = 1;\" +\n        \" f(progress);\" +\n        \" synEnd('foo');\" +\n        \"}\");\n  }\n",
        "begin_line": 678,
        "end_line": 696,
        "comment": "",
        "child_ranges": [
            "(line 679,col 5)-(line 679,col 54)",
            "(line 680,col 5)-(line 680,col 51)",
            "(line 681,col 5)-(line 681,col 47)",
            "(line 682,col 5)-(line 682,col 30)",
            "(line 687,col 5)-(line 695,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testCompilerDoesNotBlowUpIfUndefinedSymbols()",
        "snippet": "  public void testCompilerDoesNotBlowUpIfUndefinedSymbols() {\n    CompilerOptions options = createCompilerOptions();\n    options.checkSymbols = true;\n\n    // Disable the undefined variable check.\n    options.setWarningLevel(\n        DiagnosticGroup.forType(VarCheck.UNDEFINED_VAR_ERROR),\n        CheckLevel.OFF);\n\n    // The compiler used to throw an IllegalStateException on this.\n    testSame(options, \"var x = {foo: y};\");\n  }\n",
        "begin_line": 698,
        "end_line": 709,
        "comment": "",
        "child_ranges": [
            "(line 699,col 5)-(line 699,col 54)",
            "(line 700,col 5)-(line 700,col 32)",
            "(line 703,col 5)-(line 705,col 24)",
            "(line 708,col 5)-(line 708,col 43)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testConstantTagsMustAlwaysBeRemoved()",
        "snippet": "  public void testConstantTagsMustAlwaysBeRemoved() {\n    CompilerOptions options = createCompilerOptions();\n\n    options.variableRenaming = VariableRenamingPolicy.LOCAL;\n    String originalText = \"var G_GEO_UNKNOWN_ADDRESS=1;\\n\" +\n        \"function foo() {\" +\n        \"  var localVar = 2;\\n\" +\n        \"  if (G_GEO_UNKNOWN_ADDRESS == localVar) {\\n\" +\n        \"    alert(\\\"A\\\"); }}\";\n    String expectedText = \"var G_GEO_UNKNOWN_ADDRESS=1;\" +\n        \"function foo(){var a=2;if(G_GEO_UNKNOWN_ADDRESS==a){alert(\\\"A\\\")}}\";\n\n    test(options, originalText, expectedText);\n  }\n",
        "begin_line": 714,
        "end_line": 727,
        "comment": " we finish.",
        "child_ranges": [
            "(line 715,col 5)-(line 715,col 54)",
            "(line 717,col 5)-(line 717,col 60)",
            "(line 718,col 5)-(line 722,col 31)",
            "(line 723,col 5)-(line 724,col 77)",
            "(line 726,col 5)-(line 726,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testClosurePassPreservesJsDoc()",
        "snippet": "  public void testClosurePassPreservesJsDoc() {\n    CompilerOptions options = createCompilerOptions();\n    options.checkTypes = true;\n    options.closurePass = true;\n\n    test(options,\n         CLOSURE_BOILERPLATE +\n         \"goog.provide('Foo'); /** @constructor */ Foo = function() {};\" +\n         \"var x = new Foo();\",\n         \"var COMPILED=true;var goog={};goog.exportSymbol=function(){};\" +\n         \"var Foo=function(){};var x=new Foo\");\n    test(options,\n         CLOSURE_BOILERPLATE +\n         \"goog.provide('Foo'); /** @enum */ Foo = {a: 3};\",\n         TypeCheck.ENUM_NOT_CONSTANT);\n  }\n",
        "begin_line": 729,
        "end_line": 744,
        "comment": "",
        "child_ranges": [
            "(line 730,col 5)-(line 730,col 54)",
            "(line 731,col 5)-(line 731,col 30)",
            "(line 732,col 5)-(line 732,col 31)",
            "(line 734,col 5)-(line 739,col 47)",
            "(line 740,col 5)-(line 743,col 38)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testProvidedNamespaceIsConst()",
        "snippet": "  public void testProvidedNamespaceIsConst() {\n    CompilerOptions options = createCompilerOptions();\n    options.closurePass = true;\n    options.inlineConstantVars = true;\n    options.collapseProperties = true;\n    test(options,\n         \"var goog = {}; goog.provide('foo'); \" +\n         \"function f() { foo = {};}\",\n         \"var foo = {}; function f() { foo = {}; }\",\n         ConstCheck.CONST_REASSIGNED_VALUE_ERROR);\n  }\n",
        "begin_line": 746,
        "end_line": 756,
        "comment": "",
        "child_ranges": [
            "(line 747,col 5)-(line 747,col 54)",
            "(line 748,col 5)-(line 748,col 31)",
            "(line 749,col 5)-(line 749,col 38)",
            "(line 750,col 5)-(line 750,col 38)",
            "(line 751,col 5)-(line 755,col 50)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testProvidedNamespaceIsConst2()",
        "snippet": "  public void testProvidedNamespaceIsConst2() {\n    CompilerOptions options = createCompilerOptions();\n    options.closurePass = true;\n    options.inlineConstantVars = true;\n    options.collapseProperties = true;\n    test(options,\n         \"var goog = {}; goog.provide('foo.bar'); \" +\n         \"function f() { foo.bar = {};}\",\n         \"var foo$bar = {};\" +\n         \"function f() { foo$bar = {}; }\",\n         ConstCheck.CONST_REASSIGNED_VALUE_ERROR);\n  }\n",
        "begin_line": 758,
        "end_line": 769,
        "comment": "",
        "child_ranges": [
            "(line 759,col 5)-(line 759,col 54)",
            "(line 760,col 5)-(line 760,col 31)",
            "(line 761,col 5)-(line 761,col 38)",
            "(line 762,col 5)-(line 762,col 38)",
            "(line 763,col 5)-(line 768,col 50)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testProvidedNamespaceIsConst3()",
        "snippet": "  public void testProvidedNamespaceIsConst3() {\n    CompilerOptions options = createCompilerOptions();\n    options.closurePass = true;\n    options.inlineConstantVars = true;\n    options.collapseProperties = true;\n    test(options,\n         \"var goog = {}; \" +\n         \"goog.provide('foo.bar'); goog.provide('foo.bar.baz'); \" +\n         \"/** @constructor */ foo.bar = function() {};\" +\n         \"/** @constructor */ foo.bar.baz = function() {};\",\n         \"var foo$bar = function(){};\" +\n         \"var foo$bar$baz = function(){};\");\n  }\n",
        "begin_line": 771,
        "end_line": 783,
        "comment": "",
        "child_ranges": [
            "(line 772,col 5)-(line 772,col 54)",
            "(line 773,col 5)-(line 773,col 31)",
            "(line 774,col 5)-(line 774,col 38)",
            "(line 775,col 5)-(line 775,col 38)",
            "(line 776,col 5)-(line 782,col 44)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testProvidedNamespaceIsConst4()",
        "snippet": "  public void testProvidedNamespaceIsConst4() {\n    CompilerOptions options = createCompilerOptions();\n    options.closurePass = true;\n    options.inlineConstantVars = true;\n    options.collapseProperties = true;\n    test(options,\n         \"var goog = {}; goog.provide('foo.Bar'); \" +\n         \"var foo = {}; foo.Bar = {};\",\n         \"var foo = {}; var foo = {}; foo.Bar = {};\");\n  }\n",
        "begin_line": 785,
        "end_line": 794,
        "comment": "",
        "child_ranges": [
            "(line 786,col 5)-(line 786,col 54)",
            "(line 787,col 5)-(line 787,col 31)",
            "(line 788,col 5)-(line 788,col 38)",
            "(line 789,col 5)-(line 789,col 38)",
            "(line 790,col 5)-(line 793,col 54)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testProvidedNamespaceIsConst5()",
        "snippet": "  public void testProvidedNamespaceIsConst5() {\n    CompilerOptions options = createCompilerOptions();\n    options.closurePass = true;\n    options.inlineConstantVars = true;\n    options.collapseProperties = true;\n    test(options,\n         \"var goog = {}; goog.provide('foo.Bar'); \" +\n         \"foo = {}; foo.Bar = {};\",\n         \"var foo = {}; foo = {}; foo.Bar = {};\");\n  }\n",
        "begin_line": 796,
        "end_line": 805,
        "comment": "",
        "child_ranges": [
            "(line 797,col 5)-(line 797,col 54)",
            "(line 798,col 5)-(line 798,col 31)",
            "(line 799,col 5)-(line 799,col 38)",
            "(line 800,col 5)-(line 800,col 38)",
            "(line 801,col 5)-(line 804,col 50)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testProcessDefinesAlwaysOn()",
        "snippet": "  public void testProcessDefinesAlwaysOn() {\n    test(createCompilerOptions(),\n         \"/** @define {boolean} */ var HI = true; HI = false;\",\n         \"var HI = false;false;\");\n  }\n",
        "begin_line": 807,
        "end_line": 811,
        "comment": "",
        "child_ranges": [
            "(line 808,col 5)-(line 810,col 34)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testProcessDefinesAdditionalReplacements()",
        "snippet": "  public void testProcessDefinesAdditionalReplacements() {\n    CompilerOptions options = createCompilerOptions();\n    options.setDefineToBooleanLiteral(\"HI\", false);\n    test(options,\n         \"/** @define {boolean} */ var HI = true;\",\n         \"var HI = false;\");\n  }\n",
        "begin_line": 813,
        "end_line": 819,
        "comment": "",
        "child_ranges": [
            "(line 814,col 5)-(line 814,col 54)",
            "(line 815,col 5)-(line 815,col 51)",
            "(line 816,col 5)-(line 818,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testReplaceMessages()",
        "snippet": "  public void testReplaceMessages() {\n    CompilerOptions options = createCompilerOptions();\n    String prefix = \"var goog = {}; goog.getMsg = function() {};\";\n    testSame(options, prefix + \"var MSG_HI = goog.getMsg('hi');\");\n\n    options.messageBundle = new EmptyMessageBundle();\n    test(options,\n        prefix + \"/** @desc xyz */ var MSG_HI = goog.getMsg('hi');\",\n        prefix + \"var MSG_HI = 'hi';\");\n  }\n",
        "begin_line": 821,
        "end_line": 830,
        "comment": "",
        "child_ranges": [
            "(line 822,col 5)-(line 822,col 54)",
            "(line 823,col 5)-(line 823,col 66)",
            "(line 824,col 5)-(line 824,col 66)",
            "(line 826,col 5)-(line 826,col 53)",
            "(line 827,col 5)-(line 829,col 39)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testCheckGlobalNames()",
        "snippet": "  public void testCheckGlobalNames() {\n    CompilerOptions options = createCompilerOptions();\n    options.checkGlobalNamesLevel = CheckLevel.ERROR;\n    test(options, \"var x = {}; var y = x.z;\",\n         CheckGlobalNames.UNDEFINED_NAME_WARNING);\n  }\n",
        "begin_line": 832,
        "end_line": 837,
        "comment": "",
        "child_ranges": [
            "(line 833,col 5)-(line 833,col 54)",
            "(line 834,col 5)-(line 834,col 53)",
            "(line 835,col 5)-(line 836,col 50)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testInlineGetters()",
        "snippet": "  public void testInlineGetters() {\n    CompilerOptions options = createCompilerOptions();\n    String code =\n        \"function Foo() {} Foo.prototype.bar = function() { return 3; };\" +\n        \"var x = new Foo(); x.bar();\";\n\n    testSame(options, code);\n    options.inlineGetters = true;\n\n    test(options, code,\n         \"function Foo() {} Foo.prototype.bar = function() { return 3 };\" +\n         \"var x = new Foo(); 3;\");\n  }\n",
        "begin_line": 839,
        "end_line": 851,
        "comment": "",
        "child_ranges": [
            "(line 840,col 5)-(line 840,col 54)",
            "(line 841,col 5)-(line 843,col 38)",
            "(line 845,col 5)-(line 845,col 28)",
            "(line 846,col 5)-(line 846,col 33)",
            "(line 848,col 5)-(line 850,col 34)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testInlineGettersWithAmbiguate()",
        "snippet": "  public void testInlineGettersWithAmbiguate() {\n    CompilerOptions options = createCompilerOptions();\n\n    String code =\n        \"/** @constructor */\" +\n        \"function Foo() {}\" +\n        \"/** @type {number} */ Foo.prototype.field;\" +\n        \"Foo.prototype.getField = function() { return this.field; };\" +\n        \"/** @constructor */\" +\n        \"function Bar() {}\" +\n        \"/** @type {string} */ Bar.prototype.field;\" +\n        \"Bar.prototype.getField = function() { return this.field; };\" +\n        \"new Foo().getField();\" +\n        \"new Bar().getField();\";\n\n    testSame(options, code);\n\n    options.inlineGetters = true;\n\n    test(options, code,\n        \"function Foo() {}\" +\n        \"Foo.prototype.field;\" +\n        \"Foo.prototype.getField = function() { return this.field; };\" +\n        \"function Bar() {}\" +\n        \"Bar.prototype.field;\" +\n        \"Bar.prototype.getField = function() { return this.field; };\" +\n        \"new Foo().field;\" +\n        \"new Bar().field;\");\n\n    options.checkTypes = true;\n    options.ambiguateProperties = true;\n\n    // Propagating the wrong type information may cause ambiguate properties\n    // to generate bad code.\n    testSame(options, code);\n  }\n",
        "begin_line": 853,
        "end_line": 888,
        "comment": "",
        "child_ranges": [
            "(line 854,col 5)-(line 854,col 54)",
            "(line 856,col 5)-(line 866,col 32)",
            "(line 868,col 5)-(line 868,col 28)",
            "(line 870,col 5)-(line 870,col 33)",
            "(line 872,col 5)-(line 880,col 28)",
            "(line 882,col 5)-(line 882,col 30)",
            "(line 883,col 5)-(line 883,col 39)",
            "(line 887,col 5)-(line 887,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testInlineVariables()",
        "snippet": "  public void testInlineVariables() {\n    CompilerOptions options = createCompilerOptions();\n    String code = \"function foo() {} var x = 3; foo(x);\";\n    testSame(options, code);\n\n    options.inlineVariables = true;\n    test(options, code, \"(function foo() {})(3);\");\n\n    options.propertyRenaming = PropertyRenamingPolicy.HEURISTIC;\n    test(options, code, DefaultPassConfig.CANNOT_USE_PROTOTYPE_AND_VAR);\n  }\n",
        "begin_line": 890,
        "end_line": 900,
        "comment": "",
        "child_ranges": [
            "(line 891,col 5)-(line 891,col 54)",
            "(line 892,col 5)-(line 892,col 57)",
            "(line 893,col 5)-(line 893,col 28)",
            "(line 895,col 5)-(line 895,col 35)",
            "(line 896,col 5)-(line 896,col 51)",
            "(line 898,col 5)-(line 898,col 64)",
            "(line 899,col 5)-(line 899,col 72)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testInlineConstants()",
        "snippet": "  public void testInlineConstants() {\n    CompilerOptions options = createCompilerOptions();\n    String code = \"function foo() {} var x = 3; foo(x); var YYY = 4; foo(YYY);\";\n    testSame(options, code);\n\n    options.inlineConstantVars = true;\n    test(options, code, \"function foo() {} var x = 3; foo(x); foo(4);\");\n  }\n",
        "begin_line": 902,
        "end_line": 909,
        "comment": "",
        "child_ranges": [
            "(line 903,col 5)-(line 903,col 54)",
            "(line 904,col 5)-(line 904,col 80)",
            "(line 905,col 5)-(line 905,col 28)",
            "(line 907,col 5)-(line 907,col 38)",
            "(line 908,col 5)-(line 908,col 72)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testMinimizeExits()",
        "snippet": "  public void testMinimizeExits() {\n    CompilerOptions options = createCompilerOptions();\n    String code =\n        \"function f() {\" +\n        \"  if (window.foo) return; window.h(); \" +\n        \"}\";\n    testSame(options, code);\n\n    options.foldConstants = true;\n    test(\n        options, code,\n        \"function f() {\" +\n        \"  window.foo || window.h(); \" +\n        \"}\");\n  }\n",
        "begin_line": 911,
        "end_line": 925,
        "comment": "",
        "child_ranges": [
            "(line 912,col 5)-(line 912,col 54)",
            "(line 913,col 5)-(line 916,col 12)",
            "(line 917,col 5)-(line 917,col 28)",
            "(line 919,col 5)-(line 919,col 33)",
            "(line 920,col 5)-(line 924,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testFoldConstants()",
        "snippet": "  public void testFoldConstants() {\n    CompilerOptions options = createCompilerOptions();\n    String code = \"if (true) { window.foo(); }\";\n    testSame(options, code);\n\n    options.foldConstants = true;\n    test(options, code, \"window.foo();\");\n  }\n",
        "begin_line": 927,
        "end_line": 934,
        "comment": "",
        "child_ranges": [
            "(line 928,col 5)-(line 928,col 54)",
            "(line 929,col 5)-(line 929,col 48)",
            "(line 930,col 5)-(line 930,col 28)",
            "(line 932,col 5)-(line 932,col 33)",
            "(line 933,col 5)-(line 933,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testRemoveUnreachableCode()",
        "snippet": "  public void testRemoveUnreachableCode() {\n    CompilerOptions options = createCompilerOptions();\n    String code = \"function f() { return; f(); }\";\n    testSame(options, code);\n\n    options.removeDeadCode = true;\n    test(options, code, \"function f() {}\");\n  }\n",
        "begin_line": 936,
        "end_line": 943,
        "comment": "",
        "child_ranges": [
            "(line 937,col 5)-(line 937,col 54)",
            "(line 938,col 5)-(line 938,col 50)",
            "(line 939,col 5)-(line 939,col 28)",
            "(line 941,col 5)-(line 941,col 34)",
            "(line 942,col 5)-(line 942,col 43)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testRemoveUnusedPrototypeProperties1()",
        "snippet": "  public void testRemoveUnusedPrototypeProperties1() {\n    CompilerOptions options = createCompilerOptions();\n    String code = \"function Foo() {} \" +\n        \"Foo.prototype.bar = function() { return new Foo(); };\";\n    testSame(options, code);\n\n    options.removeUnusedPrototypeProperties = true;\n    test(options, code, \"function Foo() {}\");\n  }\n",
        "begin_line": 945,
        "end_line": 953,
        "comment": "",
        "child_ranges": [
            "(line 946,col 5)-(line 946,col 54)",
            "(line 947,col 5)-(line 948,col 64)",
            "(line 949,col 5)-(line 949,col 28)",
            "(line 951,col 5)-(line 951,col 51)",
            "(line 952,col 5)-(line 952,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testRemoveUnusedPrototypeProperties2()",
        "snippet": "  public void testRemoveUnusedPrototypeProperties2() {\n    CompilerOptions options = createCompilerOptions();\n    String code = \"function Foo() {} \" +\n        \"Foo.prototype.bar = function() { return new Foo(); };\" +\n        \"function f(x) { x.bar(); }\";\n    testSame(options, code);\n\n    options.removeUnusedPrototypeProperties = true;\n    testSame(options, code);\n\n    options.removeUnusedVars = true;\n    test(options, code, \"\");\n  }\n",
        "begin_line": 955,
        "end_line": 967,
        "comment": "",
        "child_ranges": [
            "(line 956,col 5)-(line 956,col 54)",
            "(line 957,col 5)-(line 959,col 37)",
            "(line 960,col 5)-(line 960,col 28)",
            "(line 962,col 5)-(line 962,col 51)",
            "(line 963,col 5)-(line 963,col 28)",
            "(line 965,col 5)-(line 965,col 36)",
            "(line 966,col 5)-(line 966,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testSmartNamePass()",
        "snippet": "  public void testSmartNamePass() {\n    CompilerOptions options = createCompilerOptions();\n    String code = \"function Foo() { this.bar(); } \" +\n        \"Foo.prototype.bar = function() { return Foo(); };\";\n    testSame(options, code);\n\n    options.smartNameRemoval = true;\n    test(options, code, \"\");\n  }\n",
        "begin_line": 969,
        "end_line": 977,
        "comment": "",
        "child_ranges": [
            "(line 970,col 5)-(line 970,col 54)",
            "(line 971,col 5)-(line 972,col 60)",
            "(line 973,col 5)-(line 973,col 28)",
            "(line 975,col 5)-(line 975,col 36)",
            "(line 976,col 5)-(line 976,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testDeadAssignmentsElimination()",
        "snippet": "  public void testDeadAssignmentsElimination() {\n    CompilerOptions options = createCompilerOptions();\n    String code = \"function f() { var x = 3; 4; x = 5; return x; } f(); \";\n    testSame(options, code);\n\n    options.deadAssignmentElimination = true;\n    testSame(options, code);\n\n    options.removeUnusedVars = true;\n    test(options, code, \"function f() { var x = 3; 4; x = 5; return x; } f();\");\n  }\n",
        "begin_line": 979,
        "end_line": 989,
        "comment": "",
        "child_ranges": [
            "(line 980,col 5)-(line 980,col 54)",
            "(line 981,col 5)-(line 981,col 74)",
            "(line 982,col 5)-(line 982,col 28)",
            "(line 984,col 5)-(line 984,col 45)",
            "(line 985,col 5)-(line 985,col 28)",
            "(line 987,col 5)-(line 987,col 36)",
            "(line 988,col 5)-(line 988,col 80)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testInlineFunctions()",
        "snippet": "  public void testInlineFunctions() {\n    CompilerOptions options = createCompilerOptions();\n    String code = \"function f() { return 3; } f(); \";\n    testSame(options, code);\n\n    options.inlineFunctions = true;\n    test(options, code, \"3;\");\n  }\n",
        "begin_line": 991,
        "end_line": 998,
        "comment": "",
        "child_ranges": [
            "(line 992,col 5)-(line 992,col 54)",
            "(line 993,col 5)-(line 993,col 53)",
            "(line 994,col 5)-(line 994,col 28)",
            "(line 996,col 5)-(line 996,col 35)",
            "(line 997,col 5)-(line 997,col 30)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testRemoveUnusedVars1()",
        "snippet": "  public void testRemoveUnusedVars1() {\n    CompilerOptions options = createCompilerOptions();\n    String code = \"function f(x) {} f();\";\n    testSame(options, code);\n\n    options.removeUnusedVars = true;\n    test(options, code, \"function f() {} f();\");\n  }\n",
        "begin_line": 1000,
        "end_line": 1007,
        "comment": "",
        "child_ranges": [
            "(line 1001,col 5)-(line 1001,col 54)",
            "(line 1002,col 5)-(line 1002,col 42)",
            "(line 1003,col 5)-(line 1003,col 28)",
            "(line 1005,col 5)-(line 1005,col 36)",
            "(line 1006,col 5)-(line 1006,col 48)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testRemoveUnusedVars2()",
        "snippet": "  public void testRemoveUnusedVars2() {\n    CompilerOptions options = createCompilerOptions();\n    String code = \"(function f(x) {})();var g = function() {}; g();\";\n    testSame(options, code);\n\n    options.removeUnusedVars = true;\n    test(options, code, \"(function() {})();var g = function() {}; g();\");\n\n    options.anonymousFunctionNaming = AnonymousFunctionNamingPolicy.UNMAPPED;\n    test(options, code, \"(function f() {})();var g = function $g$() {}; g();\");\n  }\n",
        "begin_line": 1009,
        "end_line": 1019,
        "comment": "",
        "child_ranges": [
            "(line 1010,col 5)-(line 1010,col 54)",
            "(line 1011,col 5)-(line 1011,col 69)",
            "(line 1012,col 5)-(line 1012,col 28)",
            "(line 1014,col 5)-(line 1014,col 36)",
            "(line 1015,col 5)-(line 1015,col 73)",
            "(line 1017,col 5)-(line 1017,col 77)",
            "(line 1018,col 5)-(line 1018,col 79)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testCrossModuleCodeMotion()",
        "snippet": "  public void testCrossModuleCodeMotion() {\n    CompilerOptions options = createCompilerOptions();\n    String[] code = new String[] {\n      \"var x = 1;\",\n      \"x;\",\n    };\n    testSame(options, code);\n\n    options.crossModuleCodeMotion = true;\n    test(options, code, new String[] {\n      \"\",\n      \"var x = 1; x;\",\n    });\n  }\n",
        "begin_line": 1021,
        "end_line": 1034,
        "comment": "",
        "child_ranges": [
            "(line 1022,col 5)-(line 1022,col 54)",
            "(line 1023,col 5)-(line 1026,col 6)",
            "(line 1027,col 5)-(line 1027,col 28)",
            "(line 1029,col 5)-(line 1029,col 41)",
            "(line 1030,col 5)-(line 1033,col 7)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testCrossModuleMethodMotion()",
        "snippet": "  public void testCrossModuleMethodMotion() {\n    CompilerOptions options = createCompilerOptions();\n    String[] code = new String[] {\n      \"var Foo = function() {}; Foo.prototype.bar = function() {};\" +\n      \"var x = new Foo();\",\n      \"x.bar();\",\n    };\n    testSame(options, code);\n\n    options.crossModuleMethodMotion = true;\n    test(options, code, new String[] {\n      CrossModuleMethodMotion.STUB_DECLARATIONS +\n      \"var Foo = function() {};\" +\n      \"Foo.prototype.bar=JSCompiler_stubMethod(0); var x=new Foo;\",\n      \"Foo.prototype.bar=JSCompiler_unstubMethod(0,function(){}); x.bar()\",\n    });\n  }\n",
        "begin_line": 1036,
        "end_line": 1052,
        "comment": "",
        "child_ranges": [
            "(line 1037,col 5)-(line 1037,col 54)",
            "(line 1038,col 5)-(line 1042,col 6)",
            "(line 1043,col 5)-(line 1043,col 28)",
            "(line 1045,col 5)-(line 1045,col 43)",
            "(line 1046,col 5)-(line 1051,col 7)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testFlowSensitiveInlineVariables1()",
        "snippet": "  public void testFlowSensitiveInlineVariables1() {\n    CompilerOptions options = createCompilerOptions();\n    String code = \"function f() { var x = 3; x = 5; return x; }\";\n    testSame(options, code);\n\n    options.flowSensitiveInlineVariables = true;\n    test(options, code, \"function f() { var x = 3; return 5; }\");\n\n    String unusedVar = \"function f() { var x; x = 5; return x; } f()\";\n    test(options, unusedVar, \"function f() { var x; return 5; } f()\");\n\n    options.removeUnusedVars = true;\n    test(options, unusedVar, \"function f() { return 5; } f()\");\n  }\n",
        "begin_line": 1054,
        "end_line": 1067,
        "comment": "",
        "child_ranges": [
            "(line 1055,col 5)-(line 1055,col 54)",
            "(line 1056,col 5)-(line 1056,col 65)",
            "(line 1057,col 5)-(line 1057,col 28)",
            "(line 1059,col 5)-(line 1059,col 48)",
            "(line 1060,col 5)-(line 1060,col 65)",
            "(line 1062,col 5)-(line 1062,col 70)",
            "(line 1063,col 5)-(line 1063,col 70)",
            "(line 1065,col 5)-(line 1065,col 36)",
            "(line 1066,col 5)-(line 1066,col 63)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testFlowSensitiveInlineVariables2()",
        "snippet": "  public void testFlowSensitiveInlineVariables2() {\n    CompilerOptions options = createCompilerOptions();\n    CompilationLevel.SIMPLE_OPTIMIZATIONS\n        .setOptionsForCompilationLevel(options);\n    test(options,\n        \"function f () {\\n\" +\n        \"    var ab = 0;\\n\" +\n        \"    ab += '-';\\n\" +\n        \"    alert(ab);\\n\" +\n        \"}\",\n        \"function f () {\\n\" +\n        \"    alert('0-');\\n\" +\n        \"}\");\n  }\n",
        "begin_line": 1069,
        "end_line": 1082,
        "comment": "",
        "child_ranges": [
            "(line 1070,col 5)-(line 1070,col 54)",
            "(line 1071,col 5)-(line 1072,col 48)",
            "(line 1073,col 5)-(line 1081,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testCollapseAnonymousFunctions()",
        "snippet": "  public void testCollapseAnonymousFunctions() {\n    CompilerOptions options = createCompilerOptions();\n    String code = \"var f = function() {};\";\n    testSame(options, code);\n\n    options.collapseAnonymousFunctions = true;\n    test(options, code, \"function f() {}\");\n  }\n",
        "begin_line": 1084,
        "end_line": 1091,
        "comment": "",
        "child_ranges": [
            "(line 1085,col 5)-(line 1085,col 54)",
            "(line 1086,col 5)-(line 1086,col 43)",
            "(line 1087,col 5)-(line 1087,col 28)",
            "(line 1089,col 5)-(line 1089,col 46)",
            "(line 1090,col 5)-(line 1090,col 43)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testMoveFunctionDeclarations()",
        "snippet": "  public void testMoveFunctionDeclarations() {\n    CompilerOptions options = createCompilerOptions();\n    String code = \"var x = f(); function f() { return 3; }\";\n    testSame(options, code);\n\n    options.moveFunctionDeclarations = true;\n    test(options, code, \"function f() { return 3; } var x = f();\");\n  }\n",
        "begin_line": 1093,
        "end_line": 1100,
        "comment": "",
        "child_ranges": [
            "(line 1094,col 5)-(line 1094,col 54)",
            "(line 1095,col 5)-(line 1095,col 60)",
            "(line 1096,col 5)-(line 1096,col 28)",
            "(line 1098,col 5)-(line 1098,col 44)",
            "(line 1099,col 5)-(line 1099,col 67)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testNameAnonymousFunctions()",
        "snippet": "  public void testNameAnonymousFunctions() {\n    CompilerOptions options = createCompilerOptions();\n    String code = \"var f = function() {};\";\n    testSame(options, code);\n\n    options.anonymousFunctionNaming = AnonymousFunctionNamingPolicy.MAPPED;\n    test(options, code, \"var f = function $() {}\");\n    assertNotNull(lastCompiler.getResult().namedAnonFunctionMap);\n\n    options.anonymousFunctionNaming = AnonymousFunctionNamingPolicy.UNMAPPED;\n    test(options, code, \"var f = function $f$() {}\");\n    assertNull(lastCompiler.getResult().namedAnonFunctionMap);\n  }\n",
        "begin_line": 1102,
        "end_line": 1114,
        "comment": "",
        "child_ranges": [
            "(line 1103,col 5)-(line 1103,col 54)",
            "(line 1104,col 5)-(line 1104,col 43)",
            "(line 1105,col 5)-(line 1105,col 28)",
            "(line 1107,col 5)-(line 1107,col 75)",
            "(line 1108,col 5)-(line 1108,col 51)",
            "(line 1109,col 5)-(line 1109,col 65)",
            "(line 1111,col 5)-(line 1111,col 77)",
            "(line 1112,col 5)-(line 1112,col 53)",
            "(line 1113,col 5)-(line 1113,col 62)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testNameAnonymousFunctionsWithVarRemoval()",
        "snippet": "  public void testNameAnonymousFunctionsWithVarRemoval() {\n    CompilerOptions options = createCompilerOptions();\n    options.setRemoveUnusedVariables(CompilerOptions.Reach.LOCAL_ONLY);\n    options.setInlineVariables(true);\n    String code = \"var f = function longName() {}; var g = function() {};\" +\n        \"function longerName() {} var i = longerName;\";\n    test(options, code,\n         \"var f = function() {}; var g = function() {}; \" +\n         \"var i = function() {};\");\n\n    options.anonymousFunctionNaming = AnonymousFunctionNamingPolicy.MAPPED;\n    test(options, code,\n         \"var f = function longName() {}; var g = function $() {};\" +\n         \"var i = function longerName(){};\");\n    assertNotNull(lastCompiler.getResult().namedAnonFunctionMap);\n\n    options.anonymousFunctionNaming = AnonymousFunctionNamingPolicy.UNMAPPED;\n    test(options, code,\n         \"var f = function longName() {}; var g = function $g$() {};\" +\n         \"var i = function longerName(){};\");\n    assertNull(lastCompiler.getResult().namedAnonFunctionMap);\n  }\n",
        "begin_line": 1116,
        "end_line": 1137,
        "comment": "",
        "child_ranges": [
            "(line 1117,col 5)-(line 1117,col 54)",
            "(line 1118,col 5)-(line 1118,col 71)",
            "(line 1119,col 5)-(line 1119,col 37)",
            "(line 1120,col 5)-(line 1121,col 55)",
            "(line 1122,col 5)-(line 1124,col 35)",
            "(line 1126,col 5)-(line 1126,col 75)",
            "(line 1127,col 5)-(line 1129,col 45)",
            "(line 1130,col 5)-(line 1130,col 65)",
            "(line 1132,col 5)-(line 1132,col 77)",
            "(line 1133,col 5)-(line 1135,col 45)",
            "(line 1136,col 5)-(line 1136,col 62)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testExtractPrototypeMemberDeclarations()",
        "snippet": "  public void testExtractPrototypeMemberDeclarations() {\n    CompilerOptions options = createCompilerOptions();\n    String code = \"var f = function() {};\";\n    String expected = \"var a; var b = function() {}; a = b.prototype;\";\n    for (int i = 0; i < 10; i++) {\n      code += \"f.prototype.a = \" + i + \";\";\n      expected += \"a.a = \" + i + \";\";\n    }\n    testSame(options, code);\n\n    options.extractPrototypeMemberDeclarations = true;\n    options.variableRenaming = VariableRenamingPolicy.ALL;\n    test(options, code, expected);\n\n    options.propertyRenaming = PropertyRenamingPolicy.HEURISTIC;\n    options.variableRenaming = VariableRenamingPolicy.OFF;\n    testSame(options, code);\n  }\n",
        "begin_line": 1139,
        "end_line": 1156,
        "comment": "",
        "child_ranges": [
            "(line 1140,col 5)-(line 1140,col 54)",
            "(line 1141,col 5)-(line 1141,col 43)",
            "(line 1142,col 5)-(line 1142,col 71)",
            "(line 1143,col 5)-(line 1146,col 5)",
            "(line 1147,col 5)-(line 1147,col 28)",
            "(line 1149,col 5)-(line 1149,col 54)",
            "(line 1150,col 5)-(line 1150,col 58)",
            "(line 1151,col 5)-(line 1151,col 34)",
            "(line 1153,col 5)-(line 1153,col 64)",
            "(line 1154,col 5)-(line 1154,col 58)",
            "(line 1155,col 5)-(line 1155,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testDevirtualizationAndExtractPrototypeMemberDeclarations()",
        "snippet": "  public void testDevirtualizationAndExtractPrototypeMemberDeclarations() {\n    CompilerOptions options = createCompilerOptions();\n    options.devirtualizePrototypeMethods = true;\n    options.collapseAnonymousFunctions = true;\n    options.extractPrototypeMemberDeclarations = true;\n    options.variableRenaming = VariableRenamingPolicy.ALL;\n    String code = \"var f = function() {};\";\n    String expected = \"var a; function b() {} a = b.prototype;\";\n    for (int i = 0; i < 10; i++) {\n      code += \"f.prototype.argz = function() {arguments};\";\n      code += \"f.prototype.devir\" + i + \" = function() {};\";\n\n      char letter = (char) ('d' + i);\n      expected += \"a.argz = function() {arguments};\";\n      expected += \"function \" + letter + \"(c){}\";\n    }\n\n    code += \"var F = new f(); F.argz();\";\n    expected += \"var n = new b(); n.argz();\";\n\n    for (int i = 0; i < 10; i++) {\n      code += \"F.devir\" + i + \"();\";\n\n      char letter = (char) ('d' + i);\n      expected += letter + \"(n);\";\n    }\n    test(options, code, expected);\n  }\n",
        "begin_line": 1158,
        "end_line": 1185,
        "comment": "",
        "child_ranges": [
            "(line 1159,col 5)-(line 1159,col 54)",
            "(line 1160,col 5)-(line 1160,col 48)",
            "(line 1161,col 5)-(line 1161,col 46)",
            "(line 1162,col 5)-(line 1162,col 54)",
            "(line 1163,col 5)-(line 1163,col 58)",
            "(line 1164,col 5)-(line 1164,col 43)",
            "(line 1165,col 5)-(line 1165,col 64)",
            "(line 1166,col 5)-(line 1173,col 5)",
            "(line 1175,col 5)-(line 1175,col 41)",
            "(line 1176,col 5)-(line 1176,col 45)",
            "(line 1178,col 5)-(line 1183,col 5)",
            "(line 1184,col 5)-(line 1184,col 34)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testCoalesceVariableNames()",
        "snippet": "  public void testCoalesceVariableNames() {\n    CompilerOptions options = createCompilerOptions();\n    String code = \"function f() {var x = 3; var y = x; var z = y; return z;}\";\n    testSame(options, code);\n\n    options.coalesceVariableNames = true;\n    test(options, code,\n         \"function f() {var x = 3; x = x; x = x; return x;}\");\n  }\n",
        "begin_line": 1187,
        "end_line": 1195,
        "comment": "",
        "child_ranges": [
            "(line 1188,col 5)-(line 1188,col 54)",
            "(line 1189,col 5)-(line 1189,col 78)",
            "(line 1190,col 5)-(line 1190,col 28)",
            "(line 1192,col 5)-(line 1192,col 41)",
            "(line 1193,col 5)-(line 1194,col 62)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testPropertyRenaming()",
        "snippet": "  public void testPropertyRenaming() {\n    CompilerOptions options = createCompilerOptions();\n    options.propertyAffinity = true;\n    String code =\n        \"function f() { return this.foo + this['bar'] + this.Baz; }\" +\n        \"f.prototype.bar = 3; f.prototype.Baz = 3;\";\n    String heuristic =\n        \"function f() { return this.foo + this['bar'] + this.a; }\" +\n        \"f.prototype.bar = 3; f.prototype.a = 3;\";\n    String aggHeuristic =\n        \"function f() { return this.foo + this['b'] + this.a; } \" +\n        \"f.prototype.b = 3; f.prototype.a = 3;\";\n    String all =\n        \"function f() { return this.b + this['bar'] + this.a; }\" +\n        \"f.prototype.c = 3; f.prototype.a = 3;\";\n    testSame(options, code);\n\n    options.propertyRenaming = PropertyRenamingPolicy.HEURISTIC;\n    test(options, code, heuristic);\n\n    options.propertyRenaming = PropertyRenamingPolicy.AGGRESSIVE_HEURISTIC;\n    test(options, code, aggHeuristic);\n\n    options.propertyRenaming = PropertyRenamingPolicy.ALL_UNQUOTED;\n    test(options, code, all);\n  }\n",
        "begin_line": 1197,
        "end_line": 1222,
        "comment": "",
        "child_ranges": [
            "(line 1198,col 5)-(line 1198,col 54)",
            "(line 1199,col 5)-(line 1199,col 36)",
            "(line 1200,col 5)-(line 1202,col 52)",
            "(line 1203,col 5)-(line 1205,col 50)",
            "(line 1206,col 5)-(line 1208,col 48)",
            "(line 1209,col 5)-(line 1211,col 48)",
            "(line 1212,col 5)-(line 1212,col 28)",
            "(line 1214,col 5)-(line 1214,col 64)",
            "(line 1215,col 5)-(line 1215,col 35)",
            "(line 1217,col 5)-(line 1217,col 75)",
            "(line 1218,col 5)-(line 1218,col 38)",
            "(line 1220,col 5)-(line 1220,col 67)",
            "(line 1221,col 5)-(line 1221,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testConvertToDottedProperties()",
        "snippet": "  public void testConvertToDottedProperties() {\n    CompilerOptions options = createCompilerOptions();\n    String code =\n        \"function f() { return this['bar']; } f.prototype.bar = 3;\";\n    String expected =\n        \"function f() { return this.bar; } f.prototype.a = 3;\";\n    testSame(options, code);\n\n    options.convertToDottedProperties = true;\n    options.propertyRenaming = PropertyRenamingPolicy.ALL_UNQUOTED;\n    test(options, code, expected);\n  }\n",
        "begin_line": 1224,
        "end_line": 1235,
        "comment": "",
        "child_ranges": [
            "(line 1225,col 5)-(line 1225,col 54)",
            "(line 1226,col 5)-(line 1227,col 68)",
            "(line 1228,col 5)-(line 1229,col 63)",
            "(line 1230,col 5)-(line 1230,col 28)",
            "(line 1232,col 5)-(line 1232,col 45)",
            "(line 1233,col 5)-(line 1233,col 67)",
            "(line 1234,col 5)-(line 1234,col 34)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testRewriteFunctionExpressions()",
        "snippet": "  public void testRewriteFunctionExpressions() {\n    CompilerOptions options = createCompilerOptions();\n    String code = \"var a = function() {};\";\n    String expected = \"function JSCompiler_emptyFn(){return function(){}} \" +\n        \"var a = JSCompiler_emptyFn();\";\n    for (int i = 0; i < 10; i++) {\n      code += \"a = function() {};\";\n      expected += \"a = JSCompiler_emptyFn();\";\n    }\n    testSame(options, code);\n\n    options.rewriteFunctionExpressions = true;\n    test(options, code, expected);\n  }\n",
        "begin_line": 1237,
        "end_line": 1250,
        "comment": "",
        "child_ranges": [
            "(line 1238,col 5)-(line 1238,col 54)",
            "(line 1239,col 5)-(line 1239,col 43)",
            "(line 1240,col 5)-(line 1241,col 40)",
            "(line 1242,col 5)-(line 1245,col 5)",
            "(line 1246,col 5)-(line 1246,col 28)",
            "(line 1248,col 5)-(line 1248,col 46)",
            "(line 1249,col 5)-(line 1249,col 34)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testAliasAllStrings()",
        "snippet": "  public void testAliasAllStrings() {\n    CompilerOptions options = createCompilerOptions();\n    String code = \"function f() { return 'a'; }\";\n    String expected = \"var $$S_a = 'a'; function f() { return $$S_a; }\";\n    testSame(options, code);\n\n    options.aliasAllStrings = true;\n    test(options, code, expected);\n  }\n",
        "begin_line": 1252,
        "end_line": 1260,
        "comment": "",
        "child_ranges": [
            "(line 1253,col 5)-(line 1253,col 54)",
            "(line 1254,col 5)-(line 1254,col 49)",
            "(line 1255,col 5)-(line 1255,col 72)",
            "(line 1256,col 5)-(line 1256,col 28)",
            "(line 1258,col 5)-(line 1258,col 35)",
            "(line 1259,col 5)-(line 1259,col 34)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testAliasExterns()",
        "snippet": "  public void testAliasExterns() {\n    CompilerOptions options = createCompilerOptions();\n    String code = \"function f() { return window + window + window + window; }\";\n    String expected = \"var GLOBAL_window = window;\" +\n        \"function f() { return GLOBAL_window + GLOBAL_window + \" +\n        \"               GLOBAL_window + GLOBAL_window; }\";\n    testSame(options, code);\n\n    options.aliasExternals = true;\n    test(options, code, expected);\n  }\n",
        "begin_line": 1262,
        "end_line": 1272,
        "comment": "",
        "child_ranges": [
            "(line 1263,col 5)-(line 1263,col 54)",
            "(line 1264,col 5)-(line 1264,col 79)",
            "(line 1265,col 5)-(line 1267,col 58)",
            "(line 1268,col 5)-(line 1268,col 28)",
            "(line 1270,col 5)-(line 1270,col 34)",
            "(line 1271,col 5)-(line 1271,col 34)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testAliasKeywords()",
        "snippet": "  public void testAliasKeywords() {\n    CompilerOptions options = createCompilerOptions();\n    String code =\n        \"function f() { return true + true + true + true + true + true; }\";\n    String expected = \"var JSCompiler_alias_TRUE = true;\" +\n        \"function f() { return JSCompiler_alias_TRUE + \" +\n        \"    JSCompiler_alias_TRUE + JSCompiler_alias_TRUE + \" +\n        \"    JSCompiler_alias_TRUE + JSCompiler_alias_TRUE + \" +\n        \"    JSCompiler_alias_TRUE; }\";\n    testSame(options, code);\n\n    options.aliasKeywords = true;\n    test(options, code, expected);\n  }\n",
        "begin_line": 1274,
        "end_line": 1287,
        "comment": "",
        "child_ranges": [
            "(line 1275,col 5)-(line 1275,col 54)",
            "(line 1276,col 5)-(line 1277,col 75)",
            "(line 1278,col 5)-(line 1282,col 39)",
            "(line 1283,col 5)-(line 1283,col 28)",
            "(line 1285,col 5)-(line 1285,col 33)",
            "(line 1286,col 5)-(line 1286,col 34)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testRenameVars1()",
        "snippet": "  public void testRenameVars1() {\n    CompilerOptions options = createCompilerOptions();\n    String code =\n        \"var abc = 3; function f() { var xyz = 5; return abc + xyz; }\";\n    String local = \"var abc = 3; function f() { var a = 5; return abc + a; }\";\n    String all = \"var a = 3; function c() { var b = 5; return a + b; }\";\n    testSame(options, code);\n\n    options.variableRenaming = VariableRenamingPolicy.LOCAL;\n    test(options, code, local);\n\n    options.variableRenaming = VariableRenamingPolicy.ALL;\n    test(options, code, all);\n\n    options.reserveRawExports = true;\n  }\n",
        "begin_line": 1289,
        "end_line": 1304,
        "comment": "",
        "child_ranges": [
            "(line 1290,col 5)-(line 1290,col 54)",
            "(line 1291,col 5)-(line 1292,col 71)",
            "(line 1293,col 5)-(line 1293,col 78)",
            "(line 1294,col 5)-(line 1294,col 72)",
            "(line 1295,col 5)-(line 1295,col 28)",
            "(line 1297,col 5)-(line 1297,col 60)",
            "(line 1298,col 5)-(line 1298,col 31)",
            "(line 1300,col 5)-(line 1300,col 58)",
            "(line 1301,col 5)-(line 1301,col 29)",
            "(line 1303,col 5)-(line 1303,col 37)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testRenameVars2()",
        "snippet": "  public void testRenameVars2() {\n    CompilerOptions options = createCompilerOptions();\n    options.variableRenaming = VariableRenamingPolicy.ALL;\n\n    String code =     \"var abc = 3; function f() { window['a'] = 5; }\";\n    String noexport = \"var a = 3;   function b() { window['a'] = 5; }\";\n    String export =   \"var b = 3;   function c() { window['a'] = 5; }\";\n\n    options.reserveRawExports = false;\n    test(options, code, noexport);\n\n    options.reserveRawExports = true;\n    test(options, code, export);\n  }\n",
        "begin_line": 1306,
        "end_line": 1319,
        "comment": "",
        "child_ranges": [
            "(line 1307,col 5)-(line 1307,col 54)",
            "(line 1308,col 5)-(line 1308,col 58)",
            "(line 1310,col 5)-(line 1310,col 71)",
            "(line 1311,col 5)-(line 1311,col 71)",
            "(line 1312,col 5)-(line 1312,col 71)",
            "(line 1314,col 5)-(line 1314,col 38)",
            "(line 1315,col 5)-(line 1315,col 34)",
            "(line 1317,col 5)-(line 1317,col 37)",
            "(line 1318,col 5)-(line 1318,col 32)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testShadowVaribles()",
        "snippet": "  public void testShadowVaribles() {\n    CompilerOptions options = createCompilerOptions();\n    options.variableRenaming = VariableRenamingPolicy.LOCAL;\n    options.shadowVariables = true;\n    String code =     \"var f = function(x) { return function(y) {}}\";\n    String expected = \"var f = function(a) { return function(a) {}}\";\n    test(options, code, expected);\n  }\n",
        "begin_line": 1321,
        "end_line": 1328,
        "comment": "",
        "child_ranges": [
            "(line 1322,col 5)-(line 1322,col 54)",
            "(line 1323,col 5)-(line 1323,col 60)",
            "(line 1324,col 5)-(line 1324,col 35)",
            "(line 1325,col 5)-(line 1325,col 69)",
            "(line 1326,col 5)-(line 1326,col 69)",
            "(line 1327,col 5)-(line 1327,col 34)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testRenameLabels()",
        "snippet": "  public void testRenameLabels() {\n    CompilerOptions options = createCompilerOptions();\n    String code = \"longLabel: while (true) { break longLabel; }\";\n    String expected = \"a: while (true) { break a; }\";\n    testSame(options, code);\n\n    options.labelRenaming = true;\n    test(options, code, expected);\n  }\n",
        "begin_line": 1330,
        "end_line": 1338,
        "comment": "",
        "child_ranges": [
            "(line 1331,col 5)-(line 1331,col 54)",
            "(line 1332,col 5)-(line 1332,col 65)",
            "(line 1333,col 5)-(line 1333,col 53)",
            "(line 1334,col 5)-(line 1334,col 28)",
            "(line 1336,col 5)-(line 1336,col 33)",
            "(line 1337,col 5)-(line 1337,col 34)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testBadBreakStatementInIdeMode()",
        "snippet": "  public void testBadBreakStatementInIdeMode() {\n    // Ensure that type-checking doesn't crash, even if the CFG is malformed.\n    // This can happen in IDE mode.\n    CompilerOptions options = createCompilerOptions();\n    options.ideMode = true;\n    options.checkTypes = true;\n    test(options,\n         \"function f() { try { } catch(e) { break; } }\",\n         RhinoErrorReporter.PARSE_ERROR);\n  }\n",
        "begin_line": 1340,
        "end_line": 1349,
        "comment": "",
        "child_ranges": [
            "(line 1343,col 5)-(line 1343,col 54)",
            "(line 1344,col 5)-(line 1344,col 27)",
            "(line 1345,col 5)-(line 1345,col 30)",
            "(line 1346,col 5)-(line 1348,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testIssue63SourceMap()",
        "snippet": "  public void testIssue63SourceMap() {\n    CompilerOptions options = createCompilerOptions();\n    String code = \"var a;\";\n\n    options.skipAllPasses = true;\n    options.sourceMapOutputPath = \"./src.map\";\n\n    Compiler compiler = compile(options, code);\n    compiler.toSource();\n  }\n",
        "begin_line": 1351,
        "end_line": 1360,
        "comment": "",
        "child_ranges": [
            "(line 1352,col 5)-(line 1352,col 54)",
            "(line 1353,col 5)-(line 1353,col 27)",
            "(line 1355,col 5)-(line 1355,col 33)",
            "(line 1356,col 5)-(line 1356,col 46)",
            "(line 1358,col 5)-(line 1358,col 47)",
            "(line 1359,col 5)-(line 1359,col 24)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testRegExp1()",
        "snippet": "  public void testRegExp1() {\n    CompilerOptions options = createCompilerOptions();\n    options.foldConstants = true;\n\n    String code = \"/(a)/.test(\\\"a\\\");\";\n\n    testSame(options, code);\n\n    options.computeFunctionSideEffects = true;\n\n    String expected = \"\";\n\n    test(options, code, expected);\n  }\n",
        "begin_line": 1362,
        "end_line": 1375,
        "comment": "",
        "child_ranges": [
            "(line 1363,col 5)-(line 1363,col 54)",
            "(line 1364,col 5)-(line 1364,col 33)",
            "(line 1366,col 5)-(line 1366,col 39)",
            "(line 1368,col 5)-(line 1368,col 28)",
            "(line 1370,col 5)-(line 1370,col 46)",
            "(line 1372,col 5)-(line 1372,col 25)",
            "(line 1374,col 5)-(line 1374,col 34)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testRegExp2()",
        "snippet": "  public void testRegExp2() {\n    CompilerOptions options = createCompilerOptions();\n\n    options.foldConstants = true;\n\n    String code = \"/(a)/.test(\\\"a\\\");var a = RegExp.$1\";\n\n    testSame(options, code);\n\n    options.computeFunctionSideEffects = true;\n\n    test(options, code, CheckRegExp.REGEXP_REFERENCE);\n\n    options.setWarningLevel(DiagnosticGroups.CHECK_REGEXP, CheckLevel.OFF);\n\n    testSame(options, code);\n  }\n",
        "begin_line": 1377,
        "end_line": 1393,
        "comment": "",
        "child_ranges": [
            "(line 1378,col 5)-(line 1378,col 54)",
            "(line 1380,col 5)-(line 1380,col 33)",
            "(line 1382,col 5)-(line 1382,col 56)",
            "(line 1384,col 5)-(line 1384,col 28)",
            "(line 1386,col 5)-(line 1386,col 46)",
            "(line 1388,col 5)-(line 1388,col 54)",
            "(line 1390,col 5)-(line 1390,col 75)",
            "(line 1392,col 5)-(line 1392,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testFoldLocals1()",
        "snippet": "  public void testFoldLocals1() {\n    CompilerOptions options = createCompilerOptions();\n\n    options.foldConstants = true;\n\n    // An external object, whose constructor has no side-effects,\n    // and whose method \"go\" only modifies the object.\n    String code = \"new Widget().go();\";\n\n    testSame(options, code);\n\n    options.computeFunctionSideEffects = true;\n\n    test(options, code, \"\");\n  }\n",
        "begin_line": 1395,
        "end_line": 1409,
        "comment": "",
        "child_ranges": [
            "(line 1396,col 5)-(line 1396,col 54)",
            "(line 1398,col 5)-(line 1398,col 33)",
            "(line 1402,col 5)-(line 1402,col 39)",
            "(line 1404,col 5)-(line 1404,col 28)",
            "(line 1406,col 5)-(line 1406,col 46)",
            "(line 1408,col 5)-(line 1408,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testFoldLocals2()",
        "snippet": "  public void testFoldLocals2() {\n    CompilerOptions options = createCompilerOptions();\n\n    options.foldConstants = true;\n    options.checkTypes = true;\n\n    // An external function that returns a local object that the\n    // method \"go\" that only modifies the object.\n    String code = \"widgetToken().go();\";\n\n    testSame(options, code);\n\n    options.computeFunctionSideEffects = true;\n\n    test(options, code, \"widgetToken()\");\n  }\n",
        "begin_line": 1411,
        "end_line": 1426,
        "comment": "",
        "child_ranges": [
            "(line 1412,col 5)-(line 1412,col 54)",
            "(line 1414,col 5)-(line 1414,col 33)",
            "(line 1415,col 5)-(line 1415,col 30)",
            "(line 1419,col 5)-(line 1419,col 40)",
            "(line 1421,col 5)-(line 1421,col 28)",
            "(line 1423,col 5)-(line 1423,col 46)",
            "(line 1425,col 5)-(line 1425,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testFoldLocals3()",
        "snippet": "  public void testFoldLocals3() {\n    CompilerOptions options = createCompilerOptions();\n\n    options.foldConstants = true;\n\n    // A function \"f\" who returns a known local object, and a method that\n    // modifies only modifies that.\n    String definition = \"function f(){return new Widget()}\";\n    String call = \"f().go();\";\n    String code = definition + call;\n\n    testSame(options, code);\n\n    options.computeFunctionSideEffects = true;\n\n    // BROKEN\n    //test(options, code, definition);\n    testSame(options, code);\n  }\n",
        "begin_line": 1429,
        "end_line": 1447,
        "comment": "",
        "child_ranges": [
            "(line 1430,col 5)-(line 1430,col 54)",
            "(line 1432,col 5)-(line 1432,col 33)",
            "(line 1436,col 5)-(line 1436,col 60)",
            "(line 1437,col 5)-(line 1437,col 30)",
            "(line 1438,col 5)-(line 1438,col 36)",
            "(line 1440,col 5)-(line 1440,col 28)",
            "(line 1442,col 5)-(line 1442,col 46)",
            "(line 1446,col 5)-(line 1446,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testFoldLocals4()",
        "snippet": "  public void testFoldLocals4() {\n    CompilerOptions options = createCompilerOptions();\n\n    options.foldConstants = true;\n\n    String code = \"/** @constructor */\\n\"\n        + \"function InternalWidget(){this.x = 1;}\"\n        + \"InternalWidget.prototype.internalGo = function (){this.x = 2};\"\n        + \"new InternalWidget().internalGo();\";\n\n    testSame(options, code);\n\n    options.computeFunctionSideEffects = true;\n\n    String optimized = \"\"\n      + \"function InternalWidget(){this.x = 1;}\"\n      + \"InternalWidget.prototype.internalGo = function (){this.x = 2};\";\n\n    test(options, code, optimized);\n  }\n",
        "begin_line": 1449,
        "end_line": 1468,
        "comment": "",
        "child_ranges": [
            "(line 1450,col 5)-(line 1450,col 54)",
            "(line 1452,col 5)-(line 1452,col 33)",
            "(line 1454,col 5)-(line 1457,col 47)",
            "(line 1459,col 5)-(line 1459,col 28)",
            "(line 1461,col 5)-(line 1461,col 46)",
            "(line 1463,col 5)-(line 1465,col 73)",
            "(line 1467,col 5)-(line 1467,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testFoldLocals5()",
        "snippet": "  public void testFoldLocals5() {\n    CompilerOptions options = createCompilerOptions();\n\n    options.foldConstants = true;\n\n    String code = \"\"\n        + \"function fn(){var a={};a.x={};return a}\"\n        + \"fn().x.y = 1;\";\n\n    // \"fn\" returns a unescaped local object, we should be able to fold it,\n    // but we don't currently.\n    String result = \"\"\n        + \"function fn(){var a={x:{}};return a}\"\n        + \"fn().x.y = 1;\";\n\n    test(options, code, result);\n\n    options.computeFunctionSideEffects = true;\n\n    test(options, code, result);\n  }\n",
        "begin_line": 1470,
        "end_line": 1490,
        "comment": "",
        "child_ranges": [
            "(line 1471,col 5)-(line 1471,col 54)",
            "(line 1473,col 5)-(line 1473,col 33)",
            "(line 1475,col 5)-(line 1477,col 26)",
            "(line 1481,col 5)-(line 1483,col 26)",
            "(line 1485,col 5)-(line 1485,col 32)",
            "(line 1487,col 5)-(line 1487,col 46)",
            "(line 1489,col 5)-(line 1489,col 32)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testFoldLocals6()",
        "snippet": "  public void testFoldLocals6() {\n    CompilerOptions options = createCompilerOptions();\n\n    options.foldConstants = true;\n\n    String code = \"\"\n        + \"function fn(){return {}}\"\n        + \"fn().x.y = 1;\";\n\n    testSame(options, code);\n\n    options.computeFunctionSideEffects = true;\n\n    testSame(options, code);\n  }\n",
        "begin_line": 1492,
        "end_line": 1506,
        "comment": "",
        "child_ranges": [
            "(line 1493,col 5)-(line 1493,col 54)",
            "(line 1495,col 5)-(line 1495,col 33)",
            "(line 1497,col 5)-(line 1499,col 26)",
            "(line 1501,col 5)-(line 1501,col 28)",
            "(line 1503,col 5)-(line 1503,col 46)",
            "(line 1505,col 5)-(line 1505,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testFoldLocals7()",
        "snippet": "  public void testFoldLocals7() {\n    CompilerOptions options = createCompilerOptions();\n\n    options.foldConstants = true;\n\n    String code = \"\"\n        + \"function InternalWidget(){return [];}\"\n        + \"Array.prototype.internalGo = function (){this.x = 2};\"\n        + \"InternalWidget().internalGo();\";\n\n    testSame(options, code);\n\n    options.computeFunctionSideEffects = true;\n\n    String optimized = \"\"\n      + \"function InternalWidget(){return [];}\"\n      + \"Array.prototype.internalGo = function (){this.x = 2};\";\n\n    test(options, code, optimized);\n  }\n",
        "begin_line": 1508,
        "end_line": 1527,
        "comment": "",
        "child_ranges": [
            "(line 1509,col 5)-(line 1509,col 54)",
            "(line 1511,col 5)-(line 1511,col 33)",
            "(line 1513,col 5)-(line 1516,col 43)",
            "(line 1518,col 5)-(line 1518,col 28)",
            "(line 1520,col 5)-(line 1520,col 46)",
            "(line 1522,col 5)-(line 1524,col 64)",
            "(line 1526,col 5)-(line 1526,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testVarDeclarationsIntoFor()",
        "snippet": "  public void testVarDeclarationsIntoFor() {\n    CompilerOptions options = createCompilerOptions();\n\n    options.collapseVariableDeclarations = false;\n\n    String code = \"var a = 1; for (var b = 2; ;) {}\";\n\n    testSame(options, code);\n\n    options.collapseVariableDeclarations = false;\n\n    test(options, code, \"for (var a = 1, b = 2; ;) {}\");\n  }\n",
        "begin_line": 1529,
        "end_line": 1541,
        "comment": "",
        "child_ranges": [
            "(line 1530,col 5)-(line 1530,col 54)",
            "(line 1532,col 5)-(line 1532,col 49)",
            "(line 1534,col 5)-(line 1534,col 53)",
            "(line 1536,col 5)-(line 1536,col 28)",
            "(line 1538,col 5)-(line 1538,col 49)",
            "(line 1540,col 5)-(line 1540,col 56)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testExploitAssigns()",
        "snippet": "  public void testExploitAssigns() {\n    CompilerOptions options = createCompilerOptions();\n\n    options.collapseVariableDeclarations = false;\n\n    String code = \"a = 1; b = a; c = b\";\n\n    testSame(options, code);\n\n    options.collapseVariableDeclarations = true;\n\n    test(options, code, \"c=b=a=1\");\n  }\n",
        "begin_line": 1543,
        "end_line": 1555,
        "comment": "",
        "child_ranges": [
            "(line 1544,col 5)-(line 1544,col 54)",
            "(line 1546,col 5)-(line 1546,col 49)",
            "(line 1548,col 5)-(line 1548,col 40)",
            "(line 1550,col 5)-(line 1550,col 28)",
            "(line 1552,col 5)-(line 1552,col 48)",
            "(line 1554,col 5)-(line 1554,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testRecoverOnBadExterns()",
        "snippet": "  public void testRecoverOnBadExterns() throws Exception {\n    // This test is for a bug in a very narrow set of circumstances:\n    // 1) externs validation has to be off.\n    // 2) aliasExternals has to be on.\n    // 3) The user has to reference a \"normal\" variable in externs.\n    // This case is handled at checking time by injecting a\n    // synthetic extern variable, and adding a \"@suppress {duplicate}\" to\n    // the normal code at compile time. But optimizations may remove that\n    // annotation, so we need to make sure that the variable declarations\n    // are de-duped before that happens.\n    CompilerOptions options = createCompilerOptions();\n\n    options.aliasExternals = true;\n    externs = ImmutableList.of(\n        SourceFile.fromCode(\"externs\", \"extern.foo\"));\n\n    test(options,\n         \"var extern; \" +\n         \"function f() { return extern + extern + extern + extern; }\",\n         \"var extern; \" +\n         \"function f() { return extern + extern + extern + extern; }\",\n         VarCheck.UNDEFINED_EXTERN_VAR_ERROR);\n  }\n",
        "begin_line": 1557,
        "end_line": 1579,
        "comment": "",
        "child_ranges": [
            "(line 1567,col 5)-(line 1567,col 54)",
            "(line 1569,col 5)-(line 1569,col 34)",
            "(line 1570,col 5)-(line 1571,col 54)",
            "(line 1573,col 5)-(line 1578,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testDuplicateVariablesInExterns()",
        "snippet": "  public void testDuplicateVariablesInExterns() {\n    CompilerOptions options = createCompilerOptions();\n    options.checkSymbols = true;\n    externs = ImmutableList.of(\n        SourceFile.fromCode(\"externs\",\n            \"var externs = {}; /** @suppress {duplicate} */ var externs = {};\"));\n    testSame(options, \"\");\n  }\n",
        "begin_line": 1581,
        "end_line": 1588,
        "comment": "",
        "child_ranges": [
            "(line 1582,col 5)-(line 1582,col 54)",
            "(line 1583,col 5)-(line 1583,col 32)",
            "(line 1584,col 5)-(line 1586,col 81)",
            "(line 1587,col 5)-(line 1587,col 26)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testLanguageMode()",
        "snippet": "  public void testLanguageMode() {\n    CompilerOptions options = createCompilerOptions();\n    options.setLanguageIn(LanguageMode.ECMASCRIPT3);\n\n    String code = \"var a = {get f(){}}\";\n\n    Compiler compiler = compile(options, code);\n    checkUnexpectedErrorsOrWarnings(compiler, 1);\n    assertEquals(\n        \"JSC_PARSE_ERROR. Parse error. \" +\n        \"getters are not supported in older versions of JS. \" +\n        \"If you are targeting newer versions of JS, \" +\n        \"set the appropriate language_in option. \" +\n        \"at i0 line 1 : 0\",\n        compiler.getErrors()[0].toString());\n\n    options.setLanguageIn(LanguageMode.ECMASCRIPT5);\n\n    testSame(options, code);\n\n    options.setLanguageIn(LanguageMode.ECMASCRIPT5_STRICT);\n\n    testSame(options, code);\n  }\n",
        "begin_line": 1590,
        "end_line": 1613,
        "comment": "",
        "child_ranges": [
            "(line 1591,col 5)-(line 1591,col 54)",
            "(line 1592,col 5)-(line 1592,col 52)",
            "(line 1594,col 5)-(line 1594,col 40)",
            "(line 1596,col 5)-(line 1596,col 47)",
            "(line 1597,col 5)-(line 1597,col 49)",
            "(line 1598,col 5)-(line 1604,col 44)",
            "(line 1606,col 5)-(line 1606,col 52)",
            "(line 1608,col 5)-(line 1608,col 28)",
            "(line 1610,col 5)-(line 1610,col 59)",
            "(line 1612,col 5)-(line 1612,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testLanguageMode2()",
        "snippet": "  public void testLanguageMode2() {\n    CompilerOptions options = createCompilerOptions();\n    options.setLanguageIn(LanguageMode.ECMASCRIPT3);\n    options.setWarningLevel(DiagnosticGroups.ES5_STRICT, CheckLevel.OFF);\n\n    String code = \"var a  = 2; delete a;\";\n\n    testSame(options, code);\n\n    options.setLanguageIn(LanguageMode.ECMASCRIPT5);\n\n    testSame(options, code);\n\n    options.setLanguageIn(LanguageMode.ECMASCRIPT5_STRICT);\n\n    test(options,\n        code,\n        code,\n        StrictModeCheck.DELETE_VARIABLE);\n  }\n",
        "begin_line": 1615,
        "end_line": 1634,
        "comment": "",
        "child_ranges": [
            "(line 1616,col 5)-(line 1616,col 54)",
            "(line 1617,col 5)-(line 1617,col 52)",
            "(line 1618,col 5)-(line 1618,col 73)",
            "(line 1620,col 5)-(line 1620,col 42)",
            "(line 1622,col 5)-(line 1622,col 28)",
            "(line 1624,col 5)-(line 1624,col 52)",
            "(line 1626,col 5)-(line 1626,col 28)",
            "(line 1628,col 5)-(line 1628,col 59)",
            "(line 1630,col 5)-(line 1633,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testIssue598()",
        "snippet": "  public void testIssue598() {\n    CompilerOptions options = createCompilerOptions();\n    options.setLanguageIn(LanguageMode.ECMASCRIPT5_STRICT);\n    WarningLevel.VERBOSE.setOptionsForWarningLevel(options);\n\n    options.setLanguageIn(LanguageMode.ECMASCRIPT5);\n\n    String code =\n        \"'use strict';\\n\" +\n        \"function App() {}\\n\" +\n        \"App.prototype = {\\n\" +\n        \"  get appData() { return this.appData_; },\\n\" +\n        \"  set appData(data) { this.appData_ = data; }\\n\" +\n        \"};\";\n\n    Compiler compiler = compile(options, code);\n    testSame(options, code);\n  }\n",
        "begin_line": 1636,
        "end_line": 1653,
        "comment": "",
        "child_ranges": [
            "(line 1637,col 5)-(line 1637,col 54)",
            "(line 1638,col 5)-(line 1638,col 59)",
            "(line 1639,col 5)-(line 1639,col 60)",
            "(line 1641,col 5)-(line 1641,col 52)",
            "(line 1643,col 5)-(line 1649,col 13)",
            "(line 1651,col 5)-(line 1651,col 47)",
            "(line 1652,col 5)-(line 1652,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testIssue701()",
        "snippet": "  public void testIssue701() {\n    // Check ASCII art in license comments.\n    String ascii = \"/**\\n\" +\n        \" * @preserve\\n\" +\n        \"   This\\n\" +\n        \"     is\\n\" +\n        \"       ASCII    ART\\n\" +\n        \"*/\";\n    String result = \"/*\\n\\n\" +\n        \"   This\\n\" +\n        \"     is\\n\" +\n        \"       ASCII    ART\\n\" +\n        \"*/\\n\";\n    testSame(createCompilerOptions(), ascii);\n    assertEquals(result, lastCompiler.toSource());\n  }\n",
        "begin_line": 1655,
        "end_line": 1670,
        "comment": "",
        "child_ranges": [
            "(line 1657,col 5)-(line 1662,col 13)",
            "(line 1663,col 5)-(line 1667,col 15)",
            "(line 1668,col 5)-(line 1668,col 45)",
            "(line 1669,col 5)-(line 1669,col 50)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testIssue724()",
        "snippet": "  public void testIssue724() {\n    CompilerOptions options = createCompilerOptions();\n    CompilationLevel.ADVANCED_OPTIMIZATIONS\n        .setOptionsForCompilationLevel(options);\n    String code =\n        \"isFunction = function(functionToCheck) {\" +\n        \"  var getType = {};\" +\n        \"  return functionToCheck && \" +\n        \"      getType.toString.apply(functionToCheck) === \" +\n        \"     '[object Function]';\" +\n        \"};\";\n    String result =\n        \"isFunction=function(a){var b={};\" +\n        \"return a&&\\\"[object Function]\\\"===b.b.a(a)}\";\n\n    test(options, code, result);\n  }\n",
        "begin_line": 1672,
        "end_line": 1688,
        "comment": "",
        "child_ranges": [
            "(line 1673,col 5)-(line 1673,col 54)",
            "(line 1674,col 5)-(line 1675,col 48)",
            "(line 1676,col 5)-(line 1682,col 13)",
            "(line 1683,col 5)-(line 1685,col 54)",
            "(line 1687,col 5)-(line 1687,col 32)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testIssue730()",
        "snippet": "  public void testIssue730() {\n    CompilerOptions options = createCompilerOptions();\n    CompilationLevel.ADVANCED_OPTIMIZATIONS\n        .setOptionsForCompilationLevel(options);\n\n    String code =\n        \"/** @constructor */function A() {this.foo = 0; Object.seal(this);}\\n\" +\n        \"/** @constructor */function B() {this.a = new A();}\\n\" +\n        \"B.prototype.dostuff = function() {this.a.foo++;alert('hi');}\\n\" +\n        \"new B().dostuff();\\n\";\n\n    test(options,\n        code,\n        \"function a(){this.b=0;Object.seal(this)}\" +\n        \"(new function(){this.a=new a}).a.b++;\" +\n        \"alert(\\\"hi\\\")\");\n\n    options.removeUnusedClassProperties = true;\n\n    // This is still a problem when removeUnusedClassProperties are enabled.\n    test(options,\n        code,\n        \"function a(){Object.seal(this)}\" +\n        \"(new function(){this.a=new a}).a.b++;\" +\n        \"alert(\\\"hi\\\")\");\n  }\n",
        "begin_line": 1690,
        "end_line": 1715,
        "comment": "",
        "child_ranges": [
            "(line 1691,col 5)-(line 1691,col 54)",
            "(line 1692,col 5)-(line 1693,col 48)",
            "(line 1695,col 5)-(line 1699,col 31)",
            "(line 1701,col 5)-(line 1705,col 25)",
            "(line 1707,col 5)-(line 1707,col 47)",
            "(line 1710,col 5)-(line 1714,col 25)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testCoaleseVariables()",
        "snippet": "  public void testCoaleseVariables() {\n    CompilerOptions options = createCompilerOptions();\n\n    options.foldConstants = false;\n    options.coalesceVariableNames = true;\n\n    String code =\n        \"function f(a) {\" +\n        \"  if (a) {\" +\n        \"    return a;\" +\n        \"  } else {\" +\n        \"    var b = a;\" +\n        \"    return b;\" +\n        \"  }\" +\n        \"  return a;\" +\n        \"}\";\n    String expected =\n        \"function f(a) {\" +\n        \"  if (a) {\" +\n        \"    return a;\" +\n        \"  } else {\" +\n        \"    a = a;\" +\n        \"    return a;\" +\n        \"  }\" +\n        \"  return a;\" +\n        \"}\";\n\n    test(options, code, expected);\n\n    options.foldConstants = true;\n    options.coalesceVariableNames = false;\n\n    code =\n        \"function f(a) {\" +\n        \"  if (a) {\" +\n        \"    return a;\" +\n        \"  } else {\" +\n        \"    var b = a;\" +\n        \"    return b;\" +\n        \"  }\" +\n        \"  return a;\" +\n        \"}\";\n    expected =\n        \"function f(a) {\" +\n        \"  if (!a) {\" +\n        \"    var b = a;\" +\n        \"    return b;\" +\n        \"  }\" +\n        \"  return a;\" +\n        \"}\";\n\n    test(options, code, expected);\n\n    options.foldConstants = true;\n    options.coalesceVariableNames = true;\n\n    expected =\n      \"function f(a) {\" +\n      \"  return a;\" +\n      \"}\";\n\n    test(options, code, expected);\n  }\n",
        "begin_line": 1717,
        "end_line": 1779,
        "comment": "",
        "child_ranges": [
            "(line 1718,col 5)-(line 1718,col 54)",
            "(line 1720,col 5)-(line 1720,col 34)",
            "(line 1721,col 5)-(line 1721,col 41)",
            "(line 1723,col 5)-(line 1732,col 12)",
            "(line 1733,col 5)-(line 1742,col 12)",
            "(line 1744,col 5)-(line 1744,col 34)",
            "(line 1746,col 5)-(line 1746,col 33)",
            "(line 1747,col 5)-(line 1747,col 42)",
            "(line 1749,col 5)-(line 1758,col 12)",
            "(line 1759,col 5)-(line 1766,col 12)",
            "(line 1768,col 5)-(line 1768,col 34)",
            "(line 1770,col 5)-(line 1770,col 33)",
            "(line 1771,col 5)-(line 1771,col 41)",
            "(line 1773,col 5)-(line 1776,col 10)",
            "(line 1778,col 5)-(line 1778,col 34)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testLateStatementFusion()",
        "snippet": "  public void testLateStatementFusion() {\n    CompilerOptions options = createCompilerOptions();\n    options.foldConstants = true;\n    test(options,\n        \"while(a){a();if(b){b();b()}}\",\n        \"for(;a;)a(),b&&(b(),b())\");\n  }\n",
        "begin_line": 1781,
        "end_line": 1787,
        "comment": "",
        "child_ranges": [
            "(line 1782,col 5)-(line 1782,col 54)",
            "(line 1783,col 5)-(line 1783,col 33)",
            "(line 1784,col 5)-(line 1786,col 36)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testLateConstantReordering()",
        "snippet": "  public void testLateConstantReordering() {\n    CompilerOptions options = createCompilerOptions();\n    options.foldConstants = true;\n    test(options,\n        \"if (x < 1 || x > 1 || 1 < x || 1 > x) { alert(x) }\",\n        \"   (1 > x || 1 < x || 1 < x || 1 > x) && alert(x) \");\n  }\n",
        "begin_line": 1789,
        "end_line": 1795,
        "comment": "",
        "child_ranges": [
            "(line 1790,col 5)-(line 1790,col 54)",
            "(line 1791,col 5)-(line 1791,col 33)",
            "(line 1792,col 5)-(line 1794,col 62)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testsyntheticBlockOnDeadAssignments()",
        "snippet": "  public void testsyntheticBlockOnDeadAssignments() {\n    CompilerOptions options = createCompilerOptions();\n    options.deadAssignmentElimination = true;\n    options.removeUnusedVars = true;\n    options.syntheticBlockStartMarker = \"START\";\n    options.syntheticBlockEndMarker = \"END\";\n    test(options, \"var x; x = 1; START(); x = 1;END();x()\",\n                  \"var x; x = 1;{START();{x = 1}END()}x()\");\n  }\n",
        "begin_line": 1797,
        "end_line": 1805,
        "comment": "",
        "child_ranges": [
            "(line 1798,col 5)-(line 1798,col 54)",
            "(line 1799,col 5)-(line 1799,col 45)",
            "(line 1800,col 5)-(line 1800,col 36)",
            "(line 1801,col 5)-(line 1801,col 48)",
            "(line 1802,col 5)-(line 1802,col 44)",
            "(line 1803,col 5)-(line 1804,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testBug4152835()",
        "snippet": "  public void testBug4152835() {\n    CompilerOptions options = createCompilerOptions();\n    options.foldConstants = true;\n    options.syntheticBlockStartMarker = \"START\";\n    options.syntheticBlockEndMarker = \"END\";\n    test(options, \"START();END()\", \"{START();{}END()}\");\n  }\n",
        "begin_line": 1807,
        "end_line": 1813,
        "comment": "",
        "child_ranges": [
            "(line 1808,col 5)-(line 1808,col 54)",
            "(line 1809,col 5)-(line 1809,col 33)",
            "(line 1810,col 5)-(line 1810,col 48)",
            "(line 1811,col 5)-(line 1811,col 44)",
            "(line 1812,col 5)-(line 1812,col 56)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testBug5786871()",
        "snippet": "  public void testBug5786871() {\n    CompilerOptions options = createCompilerOptions();\n    options.ideMode = true;\n    test(options, \"function () {}\", RhinoErrorReporter.PARSE_ERROR);\n  }\n",
        "begin_line": 1815,
        "end_line": 1819,
        "comment": "",
        "child_ranges": [
            "(line 1816,col 5)-(line 1816,col 54)",
            "(line 1817,col 5)-(line 1817,col 27)",
            "(line 1818,col 5)-(line 1818,col 68)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testIssue378()",
        "snippet": "  public void testIssue378() {\n    CompilerOptions options = createCompilerOptions();\n    options.inlineVariables = true;\n    options.flowSensitiveInlineVariables = true;\n    testSame(options, \"function f(c) {var f = c; arguments[0] = this;\" +\n                      \"    f.apply(this, arguments); return this;}\");\n  }\n",
        "begin_line": 1821,
        "end_line": 1827,
        "comment": "",
        "child_ranges": [
            "(line 1822,col 5)-(line 1822,col 54)",
            "(line 1823,col 5)-(line 1823,col 35)",
            "(line 1824,col 5)-(line 1824,col 48)",
            "(line 1825,col 5)-(line 1826,col 69)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testIssue550()",
        "snippet": "  public void testIssue550() {\n    CompilerOptions options = createCompilerOptions();\n    CompilationLevel.SIMPLE_OPTIMIZATIONS\n        .setOptionsForCompilationLevel(options);\n    options.foldConstants = true;\n    options.inlineVariables = true;\n    options.flowSensitiveInlineVariables = true;\n    test(options,\n        \"function f(h) {\\n\" +\n        \"  var a = h;\\n\" +\n        \"  a = a + 'x';\\n\" +\n        \"  a = a + 'y';\\n\" +\n        \"  return a;\\n\" +\n        \"}\",\n        \"function f(a) {return a + 'xy'}\");\n  }\n",
        "begin_line": 1829,
        "end_line": 1844,
        "comment": "",
        "child_ranges": [
            "(line 1830,col 5)-(line 1830,col 54)",
            "(line 1831,col 5)-(line 1832,col 48)",
            "(line 1833,col 5)-(line 1833,col 33)",
            "(line 1834,col 5)-(line 1834,col 35)",
            "(line 1835,col 5)-(line 1835,col 48)",
            "(line 1836,col 5)-(line 1843,col 43)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testIssue284()",
        "snippet": "  public void testIssue284() {\n    CompilerOptions options = createCompilerOptions();\n    options.smartNameRemoval = true;\n    test(options,\n        \"var goog = {};\" +\n        \"goog.inherits = function(x, y) {};\" +\n        \"var ns = {};\" +\n        \"/** @constructor */\" +\n        \"ns.PageSelectionModel = function() {};\" +\n        \"/** @constructor */\" +\n        \"ns.PageSelectionModel.FooEvent = function() {};\" +\n        \"/** @constructor */\" +\n        \"ns.PageSelectionModel.SelectEvent = function() {};\" +\n        \"goog.inherits(ns.PageSelectionModel.ChangeEvent,\" +\n        \"    ns.PageSelectionModel.FooEvent);\",\n        \"\");\n  }\n",
        "begin_line": 1846,
        "end_line": 1862,
        "comment": "",
        "child_ranges": [
            "(line 1847,col 5)-(line 1847,col 54)",
            "(line 1848,col 5)-(line 1848,col 36)",
            "(line 1849,col 5)-(line 1861,col 12)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testIssue772()",
        "snippet": "  public void testIssue772() throws Exception {\n    CompilerOptions options = createCompilerOptions();\n    options.closurePass = true;\n    options.checkTypes = true;\n    test(\n        options,\n        \"/** @const */ var a = {};\" +\n        \"/** @const */ a.b = {};\" +\n        \"/** @const */ a.b.c = {};\" +\n        \"goog.scope(function() {\" +\n        \"  var b = a.b;\" +\n        \"  var c = b.c;\" +\n        \"  /** @typedef {string} */\" +\n        \"  c.MyType;\" +\n        \"  /** @param {c.MyType} x The variable. */\" +\n        \"  c.myFunc = function(x) {};\" +\n        \"});\",\n        \"/** @const */ var a = {};\" +\n        \"/** @const */ a.b = {};\" +\n        \"/** @const */ a.b.c = {};\" +\n        \"a.b.c.MyType;\" +\n        \"a.b.c.myFunc = function(x) {};\");\n  }\n",
        "begin_line": 1864,
        "end_line": 1886,
        "comment": "",
        "child_ranges": [
            "(line 1865,col 5)-(line 1865,col 54)",
            "(line 1866,col 5)-(line 1866,col 31)",
            "(line 1867,col 5)-(line 1867,col 30)",
            "(line 1868,col 5)-(line 1885,col 42)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testCodingConvention()",
        "snippet": "  public void testCodingConvention() {\n    Compiler compiler = new Compiler();\n    compiler.initOptions(new CompilerOptions());\n    assertEquals(\n      compiler.getCodingConvention().getClass().toString(),\n      ClosureCodingConvention.class.toString());\n  }\n",
        "begin_line": 1888,
        "end_line": 1894,
        "comment": "",
        "child_ranges": [
            "(line 1889,col 5)-(line 1889,col 39)",
            "(line 1890,col 5)-(line 1890,col 48)",
            "(line 1891,col 5)-(line 1893,col 48)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testJQueryStringSplitLoops()",
        "snippet": "  public void testJQueryStringSplitLoops() {\n    CompilerOptions options = createCompilerOptions();\n    options.foldConstants = true;\n    test(options,\n      \"var x=['1','2','3','4','5','6','7']\",\n      \"var x='1234567'.split('')\");\n\n    options = createCompilerOptions();\n    options.foldConstants = true;\n    options.computeFunctionSideEffects = false;\n    options.removeUnusedVars = true;\n\n    // If we do splits too early, it would add a side-effect to x.\n    test(options,\n      \"var x=['1','2','3','4','5','6','7']\",\n      \"\");\n\n  }\n",
        "begin_line": 1896,
        "end_line": 1913,
        "comment": "",
        "child_ranges": [
            "(line 1897,col 5)-(line 1897,col 54)",
            "(line 1898,col 5)-(line 1898,col 33)",
            "(line 1899,col 5)-(line 1901,col 35)",
            "(line 1903,col 5)-(line 1903,col 38)",
            "(line 1904,col 5)-(line 1904,col 33)",
            "(line 1905,col 5)-(line 1905,col 47)",
            "(line 1906,col 5)-(line 1906,col 36)",
            "(line 1909,col 5)-(line 1911,col 10)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testAlwaysRunSafetyCheck()",
        "snippet": "  public void testAlwaysRunSafetyCheck() {\n    CompilerOptions options = createCompilerOptions();\n    options.checkSymbols = false;\n    options.customPasses = ArrayListMultimap.create();\n    options.customPasses.put(\n        CustomPassExecutionTime.BEFORE_OPTIMIZATIONS,\n        new CompilerPass() {\n          @Override public void process(Node externs, Node root) {\n            Node var = root.getLastChild().getFirstChild();\n            assertEquals(Token.VAR, var.getType());\n            var.detachFromParent();\n          }\n        });\n    try {\n      test(options,\n           \"var x = 3; function f() { return x + z; }\",\n           \"function f() { return x + z; }\");\n      fail(\"Expected run-time exception\");\n    } catch (RuntimeException e) {\n      assertTrue(e.getMessage().indexOf(\"Unexpected variable x\") != -1);\n    }\n  }\n",
        "begin_line": 1915,
        "end_line": 1936,
        "comment": "",
        "child_ranges": [
            "(line 1916,col 5)-(line 1916,col 54)",
            "(line 1917,col 5)-(line 1917,col 33)",
            "(line 1918,col 5)-(line 1918,col 54)",
            "(line 1919,col 5)-(line 1927,col 11)",
            "(line 1928,col 5)-(line 1935,col 5)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.Anonymous-51846a8e-3035-40d0-b971-7d17aa97df13.process(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "          @Override public void process(Node externs, Node root) {\n            Node var = root.getLastChild().getFirstChild();\n            assertEquals(Token.VAR, var.getType());\n            var.detachFromParent();\n          }\n",
        "begin_line": 1922,
        "end_line": 1926,
        "comment": "",
        "child_ranges": [
            "(line 1923,col 13)-(line 1923,col 59)",
            "(line 1924,col 13)-(line 1924,col 51)",
            "(line 1925,col 13)-(line 1925,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testSuppressEs5StrictWarning()",
        "snippet": "  public void testSuppressEs5StrictWarning() {\n    CompilerOptions options = createCompilerOptions();\n    options.setWarningLevel(DiagnosticGroups.ES5_STRICT, CheckLevel.WARNING);\n    testSame(options,\n        \"/** @suppress{es5Strict} */\\n\" +\n        \"function f() { var arguments; }\");\n  }\n",
        "begin_line": 1938,
        "end_line": 1944,
        "comment": "",
        "child_ranges": [
            "(line 1939,col 5)-(line 1939,col 54)",
            "(line 1940,col 5)-(line 1940,col 77)",
            "(line 1941,col 5)-(line 1943,col 43)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testCheckProvidesWarning()",
        "snippet": "  public void testCheckProvidesWarning() {\n    CompilerOptions options = createCompilerOptions();\n    options.setWarningLevel(DiagnosticGroups.CHECK_PROVIDES, CheckLevel.WARNING);\n    options.setCheckProvides(CheckLevel.WARNING);\n    test(options,\n        \"/** @constructor */\\n\" +\n        \"function f() { var arguments; }\",\n        DiagnosticType.warning(\"JSC_MISSING_PROVIDE\", \"missing goog.provide(''{0}'')\"));\n  }\n",
        "begin_line": 1946,
        "end_line": 1954,
        "comment": "",
        "child_ranges": [
            "(line 1947,col 5)-(line 1947,col 54)",
            "(line 1948,col 5)-(line 1948,col 81)",
            "(line 1949,col 5)-(line 1949,col 49)",
            "(line 1950,col 5)-(line 1953,col 88)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testSuppressCheckProvidesWarning()",
        "snippet": "  public void testSuppressCheckProvidesWarning() {\n    CompilerOptions options = createCompilerOptions();\n    options.setWarningLevel(DiagnosticGroups.CHECK_PROVIDES, CheckLevel.WARNING);\n    options.setCheckProvides(CheckLevel.WARNING);\n    testSame(options,\n        \"/** @constructor\\n\" +\n        \" *  @suppress{checkProvides} */\\n\" +\n        \"function f() { var arguments; }\");\n  }\n",
        "begin_line": 1956,
        "end_line": 1964,
        "comment": "",
        "child_ranges": [
            "(line 1957,col 5)-(line 1957,col 54)",
            "(line 1958,col 5)-(line 1958,col 81)",
            "(line 1959,col 5)-(line 1959,col 49)",
            "(line 1960,col 5)-(line 1963,col 43)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testRenamePrefixNamespace()",
        "snippet": "  public void testRenamePrefixNamespace() {\n    String code =\n        \"var x = {}; x.FOO = 5; x.bar = 3;\";\n\n    CompilerOptions options = createCompilerOptions();\n    testSame(options, code);\n\n    options.collapseProperties = true;\n    options.renamePrefixNamespace = \"_\";\n    test(options, code, \"_.x$FOO = 5; _.x$bar = 3;\");\n  }\n",
        "begin_line": 1966,
        "end_line": 1976,
        "comment": "",
        "child_ranges": [
            "(line 1967,col 5)-(line 1968,col 44)",
            "(line 1970,col 5)-(line 1970,col 54)",
            "(line 1971,col 5)-(line 1971,col 28)",
            "(line 1973,col 5)-(line 1973,col 38)",
            "(line 1974,col 5)-(line 1974,col 40)",
            "(line 1975,col 5)-(line 1975,col 53)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testRenamePrefixNamespaceActivatesMoveFunctionDeclarations()",
        "snippet": "  public void testRenamePrefixNamespaceActivatesMoveFunctionDeclarations() {\n    CompilerOptions options = createCompilerOptions();\n    String code = \"var x = f; function f() { return 3; }\";\n    testSame(options, code);\n    assertFalse(options.moveFunctionDeclarations);\n    options.renamePrefixNamespace = \"_\";\n    test(options, code, \"_.f = function() { return 3; }; _.x = _.f;\");\n  }\n",
        "begin_line": 1978,
        "end_line": 1985,
        "comment": "",
        "child_ranges": [
            "(line 1979,col 5)-(line 1979,col 54)",
            "(line 1980,col 5)-(line 1980,col 58)",
            "(line 1981,col 5)-(line 1981,col 28)",
            "(line 1982,col 5)-(line 1982,col 50)",
            "(line 1983,col 5)-(line 1983,col 40)",
            "(line 1984,col 5)-(line 1984,col 70)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testBrokenNameSpace()",
        "snippet": "  public void testBrokenNameSpace() {\n    CompilerOptions options = createCompilerOptions();\n    String code = \"var goog; goog.provide('i.am.on.a.Horse');\" +\n                  \"i.am.on.a.Horse = function() {};\" +\n                  \"i.am.on.a.Horse.prototype.x = function() {};\" +\n                  \"i.am.on.a.Boat.prototype.y = function() {}\";\n    options.closurePass = true;\n    options.collapseProperties = true;\n    options.smartNameRemoval = true;\n    test(options, code, \"\");\n  }\n",
        "begin_line": 1987,
        "end_line": 1997,
        "comment": "",
        "child_ranges": [
            "(line 1988,col 5)-(line 1988,col 54)",
            "(line 1989,col 5)-(line 1992,col 63)",
            "(line 1993,col 5)-(line 1993,col 31)",
            "(line 1994,col 5)-(line 1994,col 38)",
            "(line 1995,col 5)-(line 1995,col 36)",
            "(line 1996,col 5)-(line 1996,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testNamelessParameter()",
        "snippet": "  public void testNamelessParameter() {\n    CompilerOptions options = createCompilerOptions();\n    CompilationLevel.ADVANCED_OPTIMIZATIONS\n        .setOptionsForCompilationLevel(options);\n    String code =\n        \"var impl_0;\" +\n        \"$load($init());\" +\n        \"function $load(){\" +\n        \"  window['f'] = impl_0;\" +\n        \"}\" +\n        \"function $init() {\" +\n        \"  impl_0 = {};\" +\n        \"}\";\n    String result =\n        \"window.f = {};\";\n    test(options, code, result);\n  }\n",
        "begin_line": 1999,
        "end_line": 2015,
        "comment": "",
        "child_ranges": [
            "(line 2000,col 5)-(line 2000,col 54)",
            "(line 2001,col 5)-(line 2002,col 48)",
            "(line 2003,col 5)-(line 2011,col 12)",
            "(line 2012,col 5)-(line 2013,col 25)",
            "(line 2014,col 5)-(line 2014,col 32)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testHiddenSideEffect()",
        "snippet": "  public void testHiddenSideEffect() {\n    CompilerOptions options = createCompilerOptions();\n    CompilationLevel.ADVANCED_OPTIMIZATIONS\n        .setOptionsForCompilationLevel(options);\n    options.setAliasExternals(true);\n    String code =\n        \"window.offsetWidth;\";\n    String result =\n        \"window.offsetWidth;\";\n    test(options, code, result);\n  }\n",
        "begin_line": 2017,
        "end_line": 2027,
        "comment": "",
        "child_ranges": [
            "(line 2018,col 5)-(line 2018,col 54)",
            "(line 2019,col 5)-(line 2020,col 48)",
            "(line 2021,col 5)-(line 2021,col 36)",
            "(line 2022,col 5)-(line 2023,col 30)",
            "(line 2024,col 5)-(line 2025,col 30)",
            "(line 2026,col 5)-(line 2026,col 32)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testNegativeZero()",
        "snippet": "  public void testNegativeZero() {\n    CompilerOptions options = createCompilerOptions();\n    CompilationLevel.ADVANCED_OPTIMIZATIONS\n        .setOptionsForCompilationLevel(options);\n    test(options,\n        \"function bar(x) { return x; }\\n\" +\n        \"function foo(x) { print(x / bar(0));\\n\" +\n        \"                 print(x / bar(-0)); }\\n\" +\n        \"foo(3);\",\n        \"print(3/0);print(3/-0);\");\n  }\n",
        "begin_line": 2029,
        "end_line": 2039,
        "comment": "",
        "child_ranges": [
            "(line 2030,col 5)-(line 2030,col 54)",
            "(line 2031,col 5)-(line 2032,col 48)",
            "(line 2033,col 5)-(line 2038,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testSingletonGetter1()",
        "snippet": "  public void testSingletonGetter1() {\n    CompilerOptions options = createCompilerOptions();\n    CompilationLevel.ADVANCED_OPTIMIZATIONS\n        .setOptionsForCompilationLevel(options);\n    options.setCodingConvention(new ClosureCodingConvention());\n    test(options,\n        \"/** @const */\\n\" +\n        \"var goog = goog || {};\\n\" +\n        \"goog.addSingletonGetter = function(ctor) {\\n\" +\n        \"  ctor.getInstance = function() {\\n\" +\n        \"    return ctor.instance_ || (ctor.instance_ = new ctor());\\n\" +\n        \"  };\\n\" +\n        \"};\" +\n        \"function Foo() {}\\n\" +\n        \"goog.addSingletonGetter(Foo);\" +\n        \"Foo.prototype.bar = 1;\" +\n        \"function Bar() {}\\n\" +\n        \"goog.addSingletonGetter(Bar);\" +\n        \"Bar.prototype.bar = 1;\",\n        \"\");\n  }\n",
        "begin_line": 2041,
        "end_line": 2061,
        "comment": "",
        "child_ranges": [
            "(line 2042,col 5)-(line 2042,col 54)",
            "(line 2043,col 5)-(line 2044,col 48)",
            "(line 2045,col 5)-(line 2045,col 63)",
            "(line 2046,col 5)-(line 2060,col 12)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testIncompleteFunction1()",
        "snippet": "  public void testIncompleteFunction1() {\n    CompilerOptions options = createCompilerOptions();\n    options.ideMode = true;\n    DiagnosticType[] warnings = new DiagnosticType[]{\n        RhinoErrorReporter.PARSE_ERROR,\n        RhinoErrorReporter.PARSE_ERROR};\n    test(options,\n        new String[] { \"var foo = {bar: function(e) }\" },\n        new String[] { \"var foo = {bar: function(e){}};\" },\n        warnings\n    );\n  }\n",
        "begin_line": 2063,
        "end_line": 2074,
        "comment": "",
        "child_ranges": [
            "(line 2064,col 5)-(line 2064,col 54)",
            "(line 2065,col 5)-(line 2065,col 27)",
            "(line 2066,col 5)-(line 2068,col 40)",
            "(line 2069,col 5)-(line 2073,col 6)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testIncompleteFunction2()",
        "snippet": "  public void testIncompleteFunction2() {\n    CompilerOptions options = createCompilerOptions();\n    options.ideMode = true;\n    DiagnosticType[] warnings = new DiagnosticType[]{\n        RhinoErrorReporter.PARSE_ERROR,\n        RhinoErrorReporter.PARSE_ERROR,\n        RhinoErrorReporter.PARSE_ERROR,\n        RhinoErrorReporter.PARSE_ERROR,\n        RhinoErrorReporter.PARSE_ERROR,\n        RhinoErrorReporter.PARSE_ERROR};\n    test(options,\n        new String[] { \"function hi\" },\n        new String[] { \"function hi() {}\" },\n        warnings\n    );\n  }\n",
        "begin_line": 2076,
        "end_line": 2091,
        "comment": "",
        "child_ranges": [
            "(line 2077,col 5)-(line 2077,col 54)",
            "(line 2078,col 5)-(line 2078,col 27)",
            "(line 2079,col 5)-(line 2085,col 40)",
            "(line 2086,col 5)-(line 2090,col 6)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testSortingOff()",
        "snippet": "  public void testSortingOff() {\n    CompilerOptions options = new CompilerOptions();\n    options.closurePass = true;\n    options.setCodingConvention(new ClosureCodingConvention());\n    test(options,\n         new String[] {\n           \"goog.require('goog.beer');\",\n           \"goog.provide('goog.beer');\"\n         },\n         ProcessClosurePrimitives.LATE_PROVIDE_ERROR);\n  }\n",
        "begin_line": 2093,
        "end_line": 2103,
        "comment": "",
        "child_ranges": [
            "(line 2094,col 5)-(line 2094,col 52)",
            "(line 2095,col 5)-(line 2095,col 31)",
            "(line 2096,col 5)-(line 2096,col 63)",
            "(line 2097,col 5)-(line 2102,col 54)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testUnboundedArrayLiteralInfiniteLoop()",
        "snippet": "  public void testUnboundedArrayLiteralInfiniteLoop() {\n    CompilerOptions options = createCompilerOptions();\n    options.ideMode = true;\n    test(options,\n         \"var x = [1, 2\",\n         \"var x = [1, 2]\",\n         RhinoErrorReporter.PARSE_ERROR);\n  }\n",
        "begin_line": 2105,
        "end_line": 2112,
        "comment": "",
        "child_ranges": [
            "(line 2106,col 5)-(line 2106,col 54)",
            "(line 2107,col 5)-(line 2107,col 27)",
            "(line 2108,col 5)-(line 2111,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testProvideRequireSameFile()",
        "snippet": "  public void testProvideRequireSameFile() throws Exception {\n    CompilerOptions options = createCompilerOptions();\n    options.setDependencyOptions(\n        new DependencyOptions()\n        .setDependencySorting(true));\n    options.closurePass = true;\n    test(\n        options,\n        \"goog.provide('x');\\ngoog.require('x');\",\n        \"var x = {};\");\n  }\n",
        "begin_line": 2114,
        "end_line": 2124,
        "comment": "",
        "child_ranges": [
            "(line 2115,col 5)-(line 2115,col 54)",
            "(line 2116,col 5)-(line 2118,col 37)",
            "(line 2119,col 5)-(line 2119,col 31)",
            "(line 2120,col 5)-(line 2123,col 23)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testDependencySorting()",
        "snippet": "  public void testDependencySorting() throws Exception {\n    CompilerOptions options = createCompilerOptions();\n    options.setDependencyOptions(\n        new DependencyOptions()\n        .setDependencySorting(true));\n    test(\n        options,\n        new String[] {\n          \"goog.require('x');\",\n          \"goog.provide('x');\",\n        },\n        new String[] {\n          \"goog.provide('x');\",\n          \"goog.require('x');\",\n\n          // For complicated reasons involving modules,\n          // the compiler creates a synthetic source file.\n          \"\",\n        });\n  }\n",
        "begin_line": 2126,
        "end_line": 2145,
        "comment": "",
        "child_ranges": [
            "(line 2127,col 5)-(line 2127,col 54)",
            "(line 2128,col 5)-(line 2130,col 37)",
            "(line 2131,col 5)-(line 2144,col 11)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testStrictWarningsGuard()",
        "snippet": "  public void testStrictWarningsGuard() throws Exception {\n    CompilerOptions options = createCompilerOptions();\n    options.checkTypes = true;\n    options.addWarningsGuard(new StrictWarningsGuard());\n\n    Compiler compiler = compile(options,\n        \"/** @return {number} */ function f() { return true; }\");\n    assertEquals(1, compiler.getErrors().length);\n    assertEquals(0, compiler.getWarnings().length);\n  }\n",
        "begin_line": 2147,
        "end_line": 2156,
        "comment": "",
        "child_ranges": [
            "(line 2148,col 5)-(line 2148,col 54)",
            "(line 2149,col 5)-(line 2149,col 30)",
            "(line 2150,col 5)-(line 2150,col 56)",
            "(line 2152,col 5)-(line 2153,col 65)",
            "(line 2154,col 5)-(line 2154,col 49)",
            "(line 2155,col 5)-(line 2155,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testStrictWarningsGuardEmergencyMode()",
        "snippet": "  public void testStrictWarningsGuardEmergencyMode() throws Exception {\n    CompilerOptions options = createCompilerOptions();\n    options.checkTypes = true;\n    options.addWarningsGuard(new StrictWarningsGuard());\n    options.useEmergencyFailSafe();\n\n    Compiler compiler = compile(options,\n        \"/** @return {number} */ function f() { return true; }\");\n    assertEquals(0, compiler.getErrors().length);\n    assertEquals(1, compiler.getWarnings().length);\n  }\n",
        "begin_line": 2158,
        "end_line": 2168,
        "comment": "",
        "child_ranges": [
            "(line 2159,col 5)-(line 2159,col 54)",
            "(line 2160,col 5)-(line 2160,col 30)",
            "(line 2161,col 5)-(line 2161,col 56)",
            "(line 2162,col 5)-(line 2162,col 35)",
            "(line 2164,col 5)-(line 2165,col 65)",
            "(line 2166,col 5)-(line 2166,col 49)",
            "(line 2167,col 5)-(line 2167,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testInlineProperties()",
        "snippet": "  public void testInlineProperties() {\n    CompilerOptions options = createCompilerOptions();\n    CompilationLevel level = CompilationLevel.ADVANCED_OPTIMIZATIONS;\n    level.setOptionsForCompilationLevel(options);\n    level.setTypeBasedOptimizationOptions(options);\n\n    String code = \"\" +\n        \"var ns = {};\\n\" +\n        \"/** @constructor */\\n\" +\n        \"ns.C = function () {this.someProperty = 1}\\n\" +\n        \"alert(new ns.C().someProperty + new ns.C().someProperty);\\n\";\n    assertTrue(options.inlineProperties);\n    assertTrue(options.collapseProperties);\n    // CollapseProperties used to prevent inlining this property.\n    test(options, code, \"alert(2);\");\n  }\n",
        "begin_line": 2170,
        "end_line": 2185,
        "comment": "",
        "child_ranges": [
            "(line 2171,col 5)-(line 2171,col 54)",
            "(line 2172,col 5)-(line 2172,col 69)",
            "(line 2173,col 5)-(line 2173,col 49)",
            "(line 2174,col 5)-(line 2174,col 51)",
            "(line 2176,col 5)-(line 2180,col 70)",
            "(line 2181,col 5)-(line 2181,col 41)",
            "(line 2182,col 5)-(line 2182,col 43)",
            "(line 2184,col 5)-(line 2184,col 37)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testCheckConstants1()",
        "snippet": "  public void testCheckConstants1() {\n    CompilerOptions options = createCompilerOptions();\n    CompilationLevel level = CompilationLevel.SIMPLE_OPTIMIZATIONS;\n    level.setOptionsForCompilationLevel(options);\n    WarningLevel warnings = WarningLevel.QUIET;\n    warnings.setOptionsForWarningLevel(options);\n\n    String code = \"\" +\n        \"var foo; foo();\\n\" +\n        \"/** @const */\\n\" +\n        \"var x = 1; foo(); x = 2;\\n\";\n    test(options, code, code);\n  }\n",
        "begin_line": 2187,
        "end_line": 2199,
        "comment": "",
        "child_ranges": [
            "(line 2188,col 5)-(line 2188,col 54)",
            "(line 2189,col 5)-(line 2189,col 67)",
            "(line 2190,col 5)-(line 2190,col 49)",
            "(line 2191,col 5)-(line 2191,col 47)",
            "(line 2192,col 5)-(line 2192,col 48)",
            "(line 2194,col 5)-(line 2197,col 37)",
            "(line 2198,col 5)-(line 2198,col 30)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testCheckConstants2()",
        "snippet": "  public void testCheckConstants2() {\n    CompilerOptions options = createCompilerOptions();\n    CompilationLevel level = CompilationLevel.SIMPLE_OPTIMIZATIONS;\n    level.setOptionsForCompilationLevel(options);\n    WarningLevel warnings = WarningLevel.DEFAULT;\n    warnings.setOptionsForWarningLevel(options);\n\n    String code = \"\" +\n        \"var foo;\\n\" +\n        \"/** @const */\\n\" +\n        \"var x = 1; foo(); x = 2;\\n\";\n    test(options, code, ConstCheck.CONST_REASSIGNED_VALUE_ERROR);\n  }\n",
        "begin_line": 2201,
        "end_line": 2213,
        "comment": "",
        "child_ranges": [
            "(line 2202,col 5)-(line 2202,col 54)",
            "(line 2203,col 5)-(line 2203,col 67)",
            "(line 2204,col 5)-(line 2204,col 49)",
            "(line 2205,col 5)-(line 2205,col 49)",
            "(line 2206,col 5)-(line 2206,col 48)",
            "(line 2208,col 5)-(line 2211,col 37)",
            "(line 2212,col 5)-(line 2212,col 65)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.createCompilerOptions()",
        "snippet": "  @Override\n  protected CompilerOptions createCompilerOptions() {\n    CompilerOptions options = new CompilerOptions();\n    options.setCodingConvention(new GoogleCodingConvention());\n    return options;\n  }\n",
        "begin_line": 2216,
        "end_line": 2221,
        "comment": " Creates a CompilerOptions object with google coding conventions. ",
        "child_ranges": [
            "(line 2218,col 5)-(line 2218,col 52)",
            "(line 2219,col 5)-(line 2219,col 62)",
            "(line 2220,col 5)-(line 2220,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ScopedAliasesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ScopedAliasesTest.java",
        "signature": "com.google.javascript.jscomp.ScopedAliasesTest.ScopedAliasesTest()",
        "snippet": "  public ScopedAliasesTest() {\n    super(EXTERNS);\n  }\n",
        "begin_line": 47,
        "end_line": 49,
        "comment": "",
        "child_ranges": [
            "(line 48,col 5)-(line 48,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ScopedAliasesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ScopedAliasesTest.java",
        "signature": "com.google.javascript.jscomp.ScopedAliasesTest.testScoped(java.lang.String, java.lang.String)",
        "snippet": "  private void testScoped(String code, String expected) {\n    test(GOOG_SCOPE_START_BLOCK + code + GOOG_SCOPE_END_BLOCK, expected);\n  }\n",
        "begin_line": 51,
        "end_line": 53,
        "comment": "",
        "child_ranges": [
            "(line 52,col 5)-(line 52,col 73)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ScopedAliasesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ScopedAliasesTest.java",
        "signature": "com.google.javascript.jscomp.ScopedAliasesTest.testScopedNoChanges(java.lang.String, java.lang.String)",
        "snippet": "  private void testScopedNoChanges(String aliases, String code) {\n    testScoped(aliases + code, code);\n  }\n",
        "begin_line": 55,
        "end_line": 57,
        "comment": "",
        "child_ranges": [
            "(line 56,col 5)-(line 56,col 37)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ScopedAliasesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ScopedAliasesTest.java",
        "signature": "com.google.javascript.jscomp.ScopedAliasesTest.testOneLevel()",
        "snippet": "  public void testOneLevel() {\n    testScoped(\"var g = goog;g.dom.createElement(g.dom.TagName.DIV);\",\n        \"goog.dom.createElement(goog.dom.TagName.DIV);\");\n  }\n",
        "begin_line": 59,
        "end_line": 62,
        "comment": "",
        "child_ranges": [
            "(line 60,col 5)-(line 61,col 57)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ScopedAliasesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ScopedAliasesTest.java",
        "signature": "com.google.javascript.jscomp.ScopedAliasesTest.testTwoLevel()",
        "snippet": "  public void testTwoLevel() {\n    testScoped(\"var d = goog.dom;d.createElement(d.TagName.DIV);\",\n               \"goog.dom.createElement(goog.dom.TagName.DIV);\");\n  }\n",
        "begin_line": 64,
        "end_line": 67,
        "comment": "",
        "child_ranges": [
            "(line 65,col 5)-(line 66,col 64)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ScopedAliasesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ScopedAliasesTest.java",
        "signature": "com.google.javascript.jscomp.ScopedAliasesTest.testTransitive()",
        "snippet": "  public void testTransitive() {\n    testScoped(\"var d = goog.dom;var DIV = d.TagName.DIV;d.createElement(DIV);\",\n        \"goog.dom.createElement(goog.dom.TagName.DIV);\");\n  }\n",
        "begin_line": 69,
        "end_line": 72,
        "comment": "",
        "child_ranges": [
            "(line 70,col 5)-(line 71,col 57)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ScopedAliasesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ScopedAliasesTest.java",
        "signature": "com.google.javascript.jscomp.ScopedAliasesTest.testTransitiveInSameVar()",
        "snippet": "  public void testTransitiveInSameVar() {\n    testScoped(\"var d = goog.dom, DIV = d.TagName.DIV;d.createElement(DIV);\",\n        \"goog.dom.createElement(goog.dom.TagName.DIV);\");\n  }\n",
        "begin_line": 74,
        "end_line": 77,
        "comment": "",
        "child_ranges": [
            "(line 75,col 5)-(line 76,col 57)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ScopedAliasesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ScopedAliasesTest.java",
        "signature": "com.google.javascript.jscomp.ScopedAliasesTest.testMultipleTransitive()",
        "snippet": "  public void testMultipleTransitive() {\n    testScoped(\n        \"var g=goog;var d=g.dom;var t=d.TagName;var DIV=t.DIV;\" +\n            \"d.createElement(DIV);\",\n        \"goog.dom.createElement(goog.dom.TagName.DIV);\");\n  }\n",
        "begin_line": 79,
        "end_line": 84,
        "comment": "",
        "child_ranges": [
            "(line 80,col 5)-(line 83,col 57)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ScopedAliasesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ScopedAliasesTest.java",
        "signature": "com.google.javascript.jscomp.ScopedAliasesTest.testFourLevel()",
        "snippet": "  public void testFourLevel() {\n    testScoped(\"var DIV = goog.dom.TagName.DIV;goog.dom.createElement(DIV);\",\n        \"goog.dom.createElement(goog.dom.TagName.DIV);\");\n  }\n",
        "begin_line": 86,
        "end_line": 89,
        "comment": "",
        "child_ranges": [
            "(line 87,col 5)-(line 88,col 57)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ScopedAliasesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ScopedAliasesTest.java",
        "signature": "com.google.javascript.jscomp.ScopedAliasesTest.testWorksInClosures()",
        "snippet": "  public void testWorksInClosures() {\n    testScoped(\n        \"var DIV = goog.dom.TagName.DIV;\" +\n            \"goog.x = function() {goog.dom.createElement(DIV);};\",\n        \"goog.x = function() {goog.dom.createElement(goog.dom.TagName.DIV);};\");\n  }\n",
        "begin_line": 91,
        "end_line": 96,
        "comment": "",
        "child_ranges": [
            "(line 92,col 5)-(line 95,col 80)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ScopedAliasesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ScopedAliasesTest.java",
        "signature": "com.google.javascript.jscomp.ScopedAliasesTest.testOverridden()",
        "snippet": "  public void testOverridden() {\n    // Test that the alias doesn't get unaliased when it's overridden by a\n    // parameter.\n    testScopedNoChanges(\n        \"var g = goog;\", \"goog.x = function(g) {g.z()};\");\n    // Same for a local.\n    testScopedNoChanges(\n        \"var g = goog;\", \"goog.x = function() {var g = {}; g.z()};\");\n  }\n",
        "begin_line": 98,
        "end_line": 106,
        "comment": "",
        "child_ranges": [
            "(line 101,col 5)-(line 102,col 58)",
            "(line 104,col 5)-(line 105,col 69)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ScopedAliasesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ScopedAliasesTest.java",
        "signature": "com.google.javascript.jscomp.ScopedAliasesTest.testTwoScopes()",
        "snippet": "  public void testTwoScopes() {\n    test(\n        \"goog.scope(function() {var g = goog;g.method()});\" +\n        \"goog.scope(function() {g.method();});\",\n        \"goog.method();g.method();\");\n  }\n",
        "begin_line": 108,
        "end_line": 113,
        "comment": "",
        "child_ranges": [
            "(line 109,col 5)-(line 112,col 37)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ScopedAliasesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ScopedAliasesTest.java",
        "signature": "com.google.javascript.jscomp.ScopedAliasesTest.testTwoSymbolsInTwoScopes()",
        "snippet": "  public void testTwoSymbolsInTwoScopes() {\n    test(\n        \"var goog = {};\" +\n        \"goog.scope(function() { var g = goog; g.Foo = function() {}; });\" +\n        \"goog.scope(function() { \" +\n        \"  var Foo = goog.Foo; goog.bar = function() { return new Foo(); };\" +\n        \"});\",\n        \"var goog = {};\" +\n        \"goog.Foo = function() {};\" +\n        \"goog.bar = function() { return new goog.Foo(); };\");\n  }\n",
        "begin_line": 115,
        "end_line": 125,
        "comment": "",
        "child_ranges": [
            "(line 116,col 5)-(line 124,col 61)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ScopedAliasesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ScopedAliasesTest.java",
        "signature": "com.google.javascript.jscomp.ScopedAliasesTest.testAliasOfSymbolInGoogScope()",
        "snippet": "  public void testAliasOfSymbolInGoogScope() {\n    test(\n        \"var goog = {};\" +\n        \"goog.scope(function() {\" +\n        \"  var g = goog;\" +\n        \"  g.Foo = function() {};\" +\n        \"  var Foo = g.Foo;\" +\n        \"  Foo.prototype.bar = function() {};\" +\n        \"});\",\n        \"var goog = {}; goog.Foo = function() {};\" +\n        \"goog.Foo.prototype.bar = function() {};\");\n  }\n",
        "begin_line": 127,
        "end_line": 138,
        "comment": "",
        "child_ranges": [
            "(line 128,col 5)-(line 137,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ScopedAliasesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ScopedAliasesTest.java",
        "signature": "com.google.javascript.jscomp.ScopedAliasesTest.testScopedFunctionReturnThis()",
        "snippet": "  public void testScopedFunctionReturnThis() {\n    test(\"goog.scope(function() { \" +\n         \"  var g = goog; g.f = function() { return this; };\" +\n         \"});\",\n         \"goog.f = function() { return this; };\");\n  }\n",
        "begin_line": 140,
        "end_line": 145,
        "comment": "",
        "child_ranges": [
            "(line 141,col 5)-(line 144,col 50)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ScopedAliasesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ScopedAliasesTest.java",
        "signature": "com.google.javascript.jscomp.ScopedAliasesTest.testScopedFunctionAssignsToVar()",
        "snippet": "  public void testScopedFunctionAssignsToVar() {\n    test(\"goog.scope(function() { \" +\n         \"  var g = goog; g.f = function(x) { x = 3; return x; };\" +\n         \"});\",\n         \"goog.f = function(x) { x = 3; return x; };\");\n  }\n",
        "begin_line": 147,
        "end_line": 152,
        "comment": "",
        "child_ranges": [
            "(line 148,col 5)-(line 151,col 55)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ScopedAliasesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ScopedAliasesTest.java",
        "signature": "com.google.javascript.jscomp.ScopedAliasesTest.testScopedFunctionThrows()",
        "snippet": "  public void testScopedFunctionThrows() {\n    test(\"goog.scope(function() { \" +\n         \"  var g = goog; g.f = function() { throw 'error'; };\" +\n         \"});\",\n         \"goog.f = function() { throw 'error'; };\");\n  }\n",
        "begin_line": 154,
        "end_line": 159,
        "comment": "",
        "child_ranges": [
            "(line 155,col 5)-(line 158,col 52)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ScopedAliasesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ScopedAliasesTest.java",
        "signature": "com.google.javascript.jscomp.ScopedAliasesTest.testPropertiesNotChanged()",
        "snippet": "  public void testPropertiesNotChanged() {\n    testScopedNoChanges(\"var x = goog.dom;\", \"y.x();\");\n  }\n",
        "begin_line": 161,
        "end_line": 163,
        "comment": "",
        "child_ranges": [
            "(line 162,col 5)-(line 162,col 55)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ScopedAliasesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ScopedAliasesTest.java",
        "signature": "com.google.javascript.jscomp.ScopedAliasesTest.testShadowedVar()",
        "snippet": "  public void testShadowedVar() {\n    test(\"var Popup = {};\" +\n         \"var OtherPopup = {};\" +\n         \"goog.scope(function() {\" +\n         \"  var Popup = OtherPopup;\" +\n         \"  Popup.newMethod = function() { return new Popup(); };\" +\n         \"});\",\n         \"var Popup = {};\" +\n         \"var OtherPopup = {};\" +\n         \"OtherPopup.newMethod = function() { return new OtherPopup(); };\");\n  }\n",
        "begin_line": 165,
        "end_line": 175,
        "comment": "",
        "child_ranges": [
            "(line 166,col 5)-(line 174,col 76)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ScopedAliasesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ScopedAliasesTest.java",
        "signature": "com.google.javascript.jscomp.ScopedAliasesTest.testShadowedScopedVar()",
        "snippet": "  public void testShadowedScopedVar() {\n    test(\"var goog = {};\" +\n         \"goog.bar = {};\" +\n         \"goog.scope(function() {\" +\n         \"  var bar = goog.bar;\" +\n         // This is bogus, because when the aliases are expanded, goog will\n         // shadow goog.bar.\n         \"  bar.newMethod = function(goog) { return goog + bar; };\" +\n         \"});\",\n         \"var goog={};\" +\n         \"goog.bar={};\" +\n         \"goog.bar.newMethod=function(goog$$1){return goog$$1 + goog.bar}\");\n  }\n",
        "begin_line": 177,
        "end_line": 189,
        "comment": "",
        "child_ranges": [
            "(line 178,col 5)-(line 188,col 76)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ScopedAliasesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ScopedAliasesTest.java",
        "signature": "com.google.javascript.jscomp.ScopedAliasesTest.testShadowedScopedVarTwoScopes()",
        "snippet": "  public void testShadowedScopedVarTwoScopes() {\n    test(\"var goog = {};\" +\n         \"goog.bar = {};\" +\n         \"goog.scope(function() {\" +\n         \"  var bar = goog.bar;\" +\n         \"  bar.newMethod = function(goog, a) { return bar + a; };\" +\n         \"});\" +\n         \"goog.scope(function() {\" +\n         \"  var bar = goog.bar;\" +\n         \"  bar.newMethod2 = function(goog, b) { return bar + b; };\" +\n         \"});\",\n         \"var goog={};\" +\n         \"goog.bar={};\" +\n         \"goog.bar.newMethod=function(goog$$1, a){return goog.bar + a};\" +\n         \"goog.bar.newMethod2=function(goog$$1, b){return goog.bar + b};\");\n  }\n",
        "begin_line": 191,
        "end_line": 206,
        "comment": "",
        "child_ranges": [
            "(line 192,col 5)-(line 205,col 75)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ScopedAliasesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ScopedAliasesTest.java",
        "signature": "com.google.javascript.jscomp.ScopedAliasesTest.testUsingObjectLiteralToEscapeScoping()",
        "snippet": "  public void testUsingObjectLiteralToEscapeScoping() {\n    // There are many ways to shoot yourself in the foot with goog.scope\n    // and make the compiler generate bad code. We generally don't care.\n    //\n    // We only try to protect against accidental mis-use, not deliberate\n    // mis-use.\n    test(\n        \"var goog = {};\" +\n        \"goog.bar = {};\" +\n        \"goog.scope(function() {\" +\n        \"  var bar = goog.bar;\" +\n        \"  var baz = goog.bar.baz;\" +\n        \"  goog.foo = function() {\" +\n        \"    goog.bar = {baz: 3};\" +\n        \"    return baz;\" +\n        \"  };\" +\n        \"});\",\n        \"var goog = {};\" +\n        \"goog.bar = {};\" +\n        \"goog.foo = function(){\" +\n        \"  goog.bar = {baz:3};\" +\n        \"  return goog.bar.baz;\" +\n        \"};\");\n  }\n",
        "begin_line": 208,
        "end_line": 231,
        "comment": "",
        "child_ranges": [
            "(line 214,col 5)-(line 230,col 14)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ScopedAliasesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ScopedAliasesTest.java",
        "signature": "com.google.javascript.jscomp.ScopedAliasesTest.testTypes(java.lang.String, java.lang.String)",
        "snippet": "  private void testTypes(String aliases, String code) {\n    testScopedNoChanges(aliases, code);\n    verifyTypes();\n  }\n",
        "begin_line": 233,
        "end_line": 236,
        "comment": "",
        "child_ranges": [
            "(line 234,col 5)-(line 234,col 39)",
            "(line 235,col 5)-(line 235,col 18)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ScopedAliasesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ScopedAliasesTest.java",
        "signature": "com.google.javascript.jscomp.ScopedAliasesTest.verifyTypes()",
        "snippet": "  private void verifyTypes() {\n    Compiler lastCompiler = getLastCompiler();\n    new TypeVerifyingPass(lastCompiler).process(lastCompiler.externsRoot,\n        lastCompiler.jsRoot);\n  }\n",
        "begin_line": 238,
        "end_line": 242,
        "comment": "",
        "child_ranges": [
            "(line 239,col 5)-(line 239,col 46)",
            "(line 240,col 5)-(line 241,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ScopedAliasesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ScopedAliasesTest.java",
        "signature": "com.google.javascript.jscomp.ScopedAliasesTest.testJsDocType()",
        "snippet": "  public void testJsDocType() {\n    testTypes(\n        \"var x = goog.Timer;\",\n        \"\"\n        + \"/** @type {x} */ types.actual;\"\n        + \"/** @type {goog.Timer} */ types.expected;\");\n  }\n",
        "begin_line": 244,
        "end_line": 250,
        "comment": "",
        "child_ranges": [
            "(line 245,col 5)-(line 249,col 55)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ScopedAliasesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ScopedAliasesTest.java",
        "signature": "com.google.javascript.jscomp.ScopedAliasesTest.testJsDocParameter()",
        "snippet": "  public void testJsDocParameter() {\n    testTypes(\n        \"var x = goog.Timer;\",\n        \"\"\n        + \"/** @param {x} a */ types.actual;\"\n        + \"/** @param {goog.Timer} a */ types.expected;\");\n  }\n",
        "begin_line": 252,
        "end_line": 258,
        "comment": "",
        "child_ranges": [
            "(line 253,col 5)-(line 257,col 58)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ScopedAliasesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ScopedAliasesTest.java",
        "signature": "com.google.javascript.jscomp.ScopedAliasesTest.testJsDocExtends()",
        "snippet": "  public void testJsDocExtends() {\n    testTypes(\n        \"var x = goog.Timer;\",\n        \"\"\n        + \"/** @extends {x} */ types.actual;\"\n        + \"/** @extends {goog.Timer} */ types.expected;\");\n  }\n",
        "begin_line": 260,
        "end_line": 266,
        "comment": "",
        "child_ranges": [
            "(line 261,col 5)-(line 265,col 58)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ScopedAliasesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ScopedAliasesTest.java",
        "signature": "com.google.javascript.jscomp.ScopedAliasesTest.testJsDocImplements()",
        "snippet": "  public void testJsDocImplements() {\n    testTypes(\n        \"var x = goog.Timer;\",\n        \"\"\n        + \"/** @implements {x} */ types.actual;\"\n        + \"/** @implements {goog.Timer} */ types.expected;\");\n  }\n",
        "begin_line": 268,
        "end_line": 274,
        "comment": "",
        "child_ranges": [
            "(line 269,col 5)-(line 273,col 61)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ScopedAliasesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ScopedAliasesTest.java",
        "signature": "com.google.javascript.jscomp.ScopedAliasesTest.testJsDocEnum()",
        "snippet": "  public void testJsDocEnum() {\n    testTypes(\n        \"var x = goog.Timer;\",\n        \"\"\n        + \"/** @enum {x} */ types.actual;\"\n        + \"/** @enum {goog.Timer} */ types.expected;\");\n  }\n",
        "begin_line": 276,
        "end_line": 282,
        "comment": "",
        "child_ranges": [
            "(line 277,col 5)-(line 281,col 55)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ScopedAliasesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ScopedAliasesTest.java",
        "signature": "com.google.javascript.jscomp.ScopedAliasesTest.testJsDocReturn()",
        "snippet": "  public void testJsDocReturn() {\n    testTypes(\n        \"var x = goog.Timer;\",\n        \"\"\n        + \"/** @return {x} */ types.actual;\"\n        + \"/** @return {goog.Timer} */ types.expected;\");\n  }\n",
        "begin_line": 284,
        "end_line": 290,
        "comment": "",
        "child_ranges": [
            "(line 285,col 5)-(line 289,col 57)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ScopedAliasesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ScopedAliasesTest.java",
        "signature": "com.google.javascript.jscomp.ScopedAliasesTest.testJsDocThis()",
        "snippet": "  public void testJsDocThis() {\n    testTypes(\n        \"var x = goog.Timer;\",\n        \"\"\n        + \"/** @this {x} */ types.actual;\"\n        + \"/** @this {goog.Timer} */ types.expected;\");\n  }\n",
        "begin_line": 292,
        "end_line": 298,
        "comment": "",
        "child_ranges": [
            "(line 293,col 5)-(line 297,col 55)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ScopedAliasesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ScopedAliasesTest.java",
        "signature": "com.google.javascript.jscomp.ScopedAliasesTest.testJsDocThrows()",
        "snippet": "  public void testJsDocThrows() {\n    testTypes(\n        \"var x = goog.Timer;\",\n        \"\"\n        + \"/** @throws {x} */ types.actual;\"\n        + \"/** @throws {goog.Timer} */ types.expected;\");\n  }\n",
        "begin_line": 300,
        "end_line": 306,
        "comment": "",
        "child_ranges": [
            "(line 301,col 5)-(line 305,col 57)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ScopedAliasesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ScopedAliasesTest.java",
        "signature": "com.google.javascript.jscomp.ScopedAliasesTest.testJsDocSubType()",
        "snippet": "  public void testJsDocSubType() {\n    testTypes(\n        \"var x = goog.Timer;\",\n        \"\"\n        + \"/** @type {x.Enum} */ types.actual;\"\n        + \"/** @type {goog.Timer.Enum} */ types.expected;\");\n  }\n",
        "begin_line": 308,
        "end_line": 314,
        "comment": "",
        "child_ranges": [
            "(line 309,col 5)-(line 313,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ScopedAliasesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ScopedAliasesTest.java",
        "signature": "com.google.javascript.jscomp.ScopedAliasesTest.testJsDocTypedef()",
        "snippet": "  public void testJsDocTypedef() {\n    testTypes(\n        \"var x = goog.Timer;\",\n        \"\"\n        + \"/** @typedef {x} */ types.actual;\"\n        + \"/** @typedef {goog.Timer} */ types.expected;\");\n  }\n",
        "begin_line": 316,
        "end_line": 322,
        "comment": "",
        "child_ranges": [
            "(line 317,col 5)-(line 321,col 58)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ScopedAliasesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ScopedAliasesTest.java",
        "signature": "com.google.javascript.jscomp.ScopedAliasesTest.testArrayJsDoc()",
        "snippet": "  public void testArrayJsDoc() {\n    testTypes(\n        \"var x = goog.Timer;\",\n        \"\"\n        + \"/** @type {Array.<x>} */ types.actual;\"\n        + \"/** @type {Array.<goog.Timer>} */ types.expected;\");\n  }\n",
        "begin_line": 324,
        "end_line": 330,
        "comment": "",
        "child_ranges": [
            "(line 325,col 5)-(line 329,col 63)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ScopedAliasesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ScopedAliasesTest.java",
        "signature": "com.google.javascript.jscomp.ScopedAliasesTest.testObjectJsDoc()",
        "snippet": "  public void testObjectJsDoc() {\n    testTypes(\n        \"var x = goog.Timer;\",\n        \"\"\n        + \"/** @type {{someKey: x}} */ types.actual;\"\n        + \"/** @type {{someKey: goog.Timer}} */ types.expected;\");\n    testTypes(\n        \"var x = goog.Timer;\",\n        \"\"\n        + \"/** @type {{x: number}} */ types.actual;\"\n        + \"/** @type {{x: number}} */ types.expected;\");\n  }\n",
        "begin_line": 332,
        "end_line": 343,
        "comment": "",
        "child_ranges": [
            "(line 333,col 5)-(line 337,col 66)",
            "(line 338,col 5)-(line 342,col 56)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ScopedAliasesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ScopedAliasesTest.java",
        "signature": "com.google.javascript.jscomp.ScopedAliasesTest.testUnionJsDoc()",
        "snippet": "  public void testUnionJsDoc() {\n    testTypes(\n        \"var x = goog.Timer;\",\n        \"\"\n        + \"/** @type {x|Object} */ types.actual;\"\n        + \"/** @type {goog.Timer|Object} */ types.expected;\");\n  }\n",
        "begin_line": 345,
        "end_line": 351,
        "comment": "",
        "child_ranges": [
            "(line 346,col 5)-(line 350,col 62)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ScopedAliasesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ScopedAliasesTest.java",
        "signature": "com.google.javascript.jscomp.ScopedAliasesTest.testFunctionJsDoc()",
        "snippet": "  public void testFunctionJsDoc() {\n    testTypes(\n        \"var x = goog.Timer;\",\n        \"\"\n        + \"/** @type {function(x) : void} */ types.actual;\"\n        + \"/** @type {function(goog.Timer) : void} */ types.expected;\");\n    testTypes(\n        \"var x = goog.Timer;\",\n        \"\"\n        + \"/** @type {function() : x} */ types.actual;\"\n        + \"/** @type {function() : goog.Timer} */ types.expected;\");\n  }\n",
        "begin_line": 353,
        "end_line": 364,
        "comment": "",
        "child_ranges": [
            "(line 354,col 5)-(line 358,col 72)",
            "(line 359,col 5)-(line 363,col 68)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ScopedAliasesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ScopedAliasesTest.java",
        "signature": "com.google.javascript.jscomp.ScopedAliasesTest.testForwardJsDoc()",
        "snippet": "  public void testForwardJsDoc() {\n    testScoped(\n        \"/**\\n\" +\n        \" * @constructor\\n\" +\n        \" */\\n\" +\n        \"foo.Foo = function() {};\" +\n        \"/** @param {Foo.Bar} x */ foo.Foo.actual = function(x) {3};\" +\n        \"var Foo = foo.Foo;\" +\n        \"/** @constructor */ Foo.Bar = function() {};\" +\n        \"/** @param {foo.Foo.Bar} x */ foo.Foo.expected = function(x) {};\",\n\n        \"/**\\n\" +\n        \" * @constructor\\n\" +\n        \" */\\n\" +\n        \"foo.Foo = function() {};\" +\n        \"/** @param {foo.Foo.Bar} x */ foo.Foo.actual = function(x) {3};\" +\n        \"/** @constructor */ foo.Foo.Bar = function() {};\" +\n        \"/** @param {foo.Foo.Bar} x */ foo.Foo.expected = function(x) {};\");\n    verifyTypes();\n  }\n",
        "begin_line": 366,
        "end_line": 385,
        "comment": "",
        "child_ranges": [
            "(line 367,col 5)-(line 383,col 76)",
            "(line 384,col 5)-(line 384,col 18)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ScopedAliasesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ScopedAliasesTest.java",
        "signature": "com.google.javascript.jscomp.ScopedAliasesTest.testTestTypes()",
        "snippet": "  public void testTestTypes() {\n    try {\n      testTypes(\n          \"var x = goog.Timer;\",\n          \"\"\n          + \"/** @type {function() : x} */ types.actual;\"\n          + \"/** @type {function() : wrong.wrong} */ types.expected;\");\n      fail(\"Test types should fail here.\");\n    } catch (AssertionError e) {\n    }\n  }\n",
        "begin_line": 387,
        "end_line": 397,
        "comment": "",
        "child_ranges": [
            "(line 388,col 5)-(line 396,col 5)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ScopedAliasesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ScopedAliasesTest.java",
        "signature": "com.google.javascript.jscomp.ScopedAliasesTest.testNullType()",
        "snippet": "  public void testNullType() {\n    testTypes(\n        \"var x = goog.Timer;\",\n        \"/** @param draggable */ types.actual;\"\n        + \"/** @param draggable */ types.expected;\");\n  }\n",
        "begin_line": 399,
        "end_line": 404,
        "comment": "",
        "child_ranges": [
            "(line 400,col 5)-(line 403,col 53)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ScopedAliasesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ScopedAliasesTest.java",
        "signature": "com.google.javascript.jscomp.ScopedAliasesTest.testIssue772()",
        "snippet": "  public void testIssue772() {\n    testTypes(\n        \"var b = a.b;\" +\n        \"var c = b.c;\",\n        \"/** @param {c.MyType} x */ types.actual;\" +\n        \"/** @param {a.b.c.MyType} x */ types.expected;\");\n  }\n",
        "begin_line": 406,
        "end_line": 412,
        "comment": "",
        "child_ranges": [
            "(line 407,col 5)-(line 411,col 58)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ScopedAliasesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ScopedAliasesTest.java",
        "signature": "com.google.javascript.jscomp.ScopedAliasesTest.testFailure(java.lang.String, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  private void testFailure(String code, DiagnosticType expectedError) {\n    test(code, null, expectedError);\n  }\n",
        "begin_line": 418,
        "end_line": 420,
        "comment": "",
        "child_ranges": [
            "(line 419,col 5)-(line 419,col 36)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ScopedAliasesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ScopedAliasesTest.java",
        "signature": "com.google.javascript.jscomp.ScopedAliasesTest.testScopedFailure(java.lang.String, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  private void testScopedFailure(String code, DiagnosticType expectedError) {\n    test(\"goog.scope(function() {\" + code + \"});\", null, expectedError);\n  }\n",
        "begin_line": 422,
        "end_line": 424,
        "comment": "",
        "child_ranges": [
            "(line 423,col 5)-(line 423,col 72)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ScopedAliasesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ScopedAliasesTest.java",
        "signature": "com.google.javascript.jscomp.ScopedAliasesTest.testScopedThis()",
        "snippet": "  public void testScopedThis() {\n    testScopedFailure(\"this.y = 10;\", ScopedAliases.GOOG_SCOPE_REFERENCES_THIS);\n    testScopedFailure(\"var x = this;\",\n        ScopedAliases.GOOG_SCOPE_REFERENCES_THIS);\n    testScopedFailure(\"fn(this);\", ScopedAliases.GOOG_SCOPE_REFERENCES_THIS);\n  }\n",
        "begin_line": 426,
        "end_line": 431,
        "comment": "",
        "child_ranges": [
            "(line 427,col 5)-(line 427,col 80)",
            "(line 428,col 5)-(line 429,col 50)",
            "(line 430,col 5)-(line 430,col 77)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ScopedAliasesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ScopedAliasesTest.java",
        "signature": "com.google.javascript.jscomp.ScopedAliasesTest.testAliasRedefinition()",
        "snippet": "  public void testAliasRedefinition() {\n    testScopedFailure(\"var x = goog.dom; x = goog.events;\",\n        ScopedAliases.GOOG_SCOPE_ALIAS_REDEFINED);\n  }\n",
        "begin_line": 433,
        "end_line": 436,
        "comment": "",
        "child_ranges": [
            "(line 434,col 5)-(line 435,col 50)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ScopedAliasesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ScopedAliasesTest.java",
        "signature": "com.google.javascript.jscomp.ScopedAliasesTest.testAliasNonRedefinition()",
        "snippet": "  public void testAliasNonRedefinition() {\n    test(\"var y = {}; goog.scope(function() { goog.dom = y; });\",\n         \"var y = {}; goog.dom = y;\");\n  }\n",
        "begin_line": 438,
        "end_line": 441,
        "comment": "",
        "child_ranges": [
            "(line 439,col 5)-(line 440,col 38)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ScopedAliasesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ScopedAliasesTest.java",
        "signature": "com.google.javascript.jscomp.ScopedAliasesTest.testScopedReturn()",
        "snippet": "  public void testScopedReturn() {\n    testScopedFailure(\"return;\", ScopedAliases.GOOG_SCOPE_USES_RETURN);\n    testScopedFailure(\"var x = goog.dom; return;\",\n        ScopedAliases.GOOG_SCOPE_USES_RETURN);\n  }\n",
        "begin_line": 443,
        "end_line": 447,
        "comment": "",
        "child_ranges": [
            "(line 444,col 5)-(line 444,col 71)",
            "(line 445,col 5)-(line 446,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ScopedAliasesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ScopedAliasesTest.java",
        "signature": "com.google.javascript.jscomp.ScopedAliasesTest.testScopedThrow()",
        "snippet": "  public void testScopedThrow() {\n    testScopedFailure(\"throw 'error';\", ScopedAliases.GOOG_SCOPE_USES_THROW);\n  }\n",
        "begin_line": 449,
        "end_line": 451,
        "comment": "",
        "child_ranges": [
            "(line 450,col 5)-(line 450,col 77)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ScopedAliasesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ScopedAliasesTest.java",
        "signature": "com.google.javascript.jscomp.ScopedAliasesTest.testUsedImproperly()",
        "snippet": "  public void testUsedImproperly() {\n    testFailure(\"var x = goog.scope(function() {});\",\n        ScopedAliases.GOOG_SCOPE_USED_IMPROPERLY);\n  }\n",
        "begin_line": 453,
        "end_line": 456,
        "comment": "",
        "child_ranges": [
            "(line 454,col 5)-(line 455,col 50)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ScopedAliasesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ScopedAliasesTest.java",
        "signature": "com.google.javascript.jscomp.ScopedAliasesTest.testBadParameters()",
        "snippet": "  public void testBadParameters() {\n    testFailure(\"goog.scope()\", ScopedAliases.GOOG_SCOPE_HAS_BAD_PARAMETERS);\n    testFailure(\"goog.scope(10)\", ScopedAliases.GOOG_SCOPE_HAS_BAD_PARAMETERS);\n    testFailure(\"goog.scope(function() {}, 10)\",\n        ScopedAliases.GOOG_SCOPE_HAS_BAD_PARAMETERS);\n    testFailure(\"goog.scope(function z() {})\",\n        ScopedAliases.GOOG_SCOPE_HAS_BAD_PARAMETERS);\n    testFailure(\"goog.scope(function(a, b, c) {})\",\n        ScopedAliases.GOOG_SCOPE_HAS_BAD_PARAMETERS);\n  }\n",
        "begin_line": 458,
        "end_line": 467,
        "comment": "",
        "child_ranges": [
            "(line 459,col 5)-(line 459,col 77)",
            "(line 460,col 5)-(line 460,col 79)",
            "(line 461,col 5)-(line 462,col 53)",
            "(line 463,col 5)-(line 464,col 53)",
            "(line 465,col 5)-(line 466,col 53)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ScopedAliasesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ScopedAliasesTest.java",
        "signature": "com.google.javascript.jscomp.ScopedAliasesTest.testNonAliasLocal()",
        "snippet": "  public void testNonAliasLocal() {\n    testScopedFailure(\"var x = 10\", ScopedAliases.GOOG_SCOPE_NON_ALIAS_LOCAL);\n    testScopedFailure(\"var x = goog.dom + 10\",\n        ScopedAliases.GOOG_SCOPE_NON_ALIAS_LOCAL);\n    testScopedFailure(\"var x = goog['dom']\",\n        ScopedAliases.GOOG_SCOPE_NON_ALIAS_LOCAL);\n    testScopedFailure(\"var x = goog.dom, y = 10\",\n        ScopedAliases.GOOG_SCOPE_NON_ALIAS_LOCAL);\n    testScopedFailure(\"function f() {}\",\n        ScopedAliases.GOOG_SCOPE_NON_ALIAS_LOCAL);\n  }\n",
        "begin_line": 469,
        "end_line": 479,
        "comment": "",
        "child_ranges": [
            "(line 470,col 5)-(line 470,col 78)",
            "(line 471,col 5)-(line 472,col 50)",
            "(line 473,col 5)-(line 474,col 50)",
            "(line 475,col 5)-(line 476,col 50)",
            "(line 477,col 5)-(line 478,col 50)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ScopedAliasesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ScopedAliasesTest.java",
        "signature": "com.google.javascript.jscomp.ScopedAliasesTest.testNoGoogScope()",
        "snippet": "  public void testNoGoogScope() {\n    String fullJsCode =\n        \"var g = goog;\\n g.dom.createElement(g.dom.TagName.DIV);\";\n    TransformationHandlerSpy spy = new TransformationHandlerSpy();\n    transformationHandler = spy;\n    test(fullJsCode, fullJsCode);\n\n    assertTrue(spy.observedPositions.isEmpty());\n  }\n",
        "begin_line": 483,
        "end_line": 491,
        "comment": " TODO(tylerg) : update these to EasyMock style tests once available",
        "child_ranges": [
            "(line 484,col 5)-(line 485,col 66)",
            "(line 486,col 5)-(line 486,col 66)",
            "(line 487,col 5)-(line 487,col 32)",
            "(line 488,col 5)-(line 488,col 33)",
            "(line 490,col 5)-(line 490,col 48)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ScopedAliasesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ScopedAliasesTest.java",
        "signature": "com.google.javascript.jscomp.ScopedAliasesTest.testRecordOneAlias()",
        "snippet": "  public void testRecordOneAlias() {\n    String fullJsCode = GOOG_SCOPE_START_BLOCK\n        + \"var g = goog;\\n g.dom.createElement(g.dom.TagName.DIV);\\n\"\n        + GOOG_SCOPE_END_BLOCK;\n    String expectedJsCode = \"goog.dom.createElement(goog.dom.TagName.DIV);\\n\";\n\n    TransformationHandlerSpy spy = new TransformationHandlerSpy();\n    transformationHandler = spy;\n    test(fullJsCode, expectedJsCode);\n\n    assertTrue(spy.observedPositions.containsKey(\"testcode\"));\n    List<SourcePosition<AliasTransformation>> positions =\n        spy.observedPositions.get(\"testcode\");\n    assertEquals(1, positions.size());\n    verifyAliasTransformationPosition(1, 0, 2, 1, positions.get(0));\n\n    assertEquals(1, spy.constructedAliases.size());\n    AliasSpy aliasSpy = (AliasSpy) spy.constructedAliases.get(0);\n    assertEquals(\"goog\", aliasSpy.observedDefinitions.get(\"g\"));\n  }\n",
        "begin_line": 493,
        "end_line": 512,
        "comment": "",
        "child_ranges": [
            "(line 494,col 5)-(line 496,col 31)",
            "(line 497,col 5)-(line 497,col 78)",
            "(line 499,col 5)-(line 499,col 66)",
            "(line 500,col 5)-(line 500,col 32)",
            "(line 501,col 5)-(line 501,col 37)",
            "(line 503,col 5)-(line 503,col 62)",
            "(line 504,col 5)-(line 505,col 46)",
            "(line 506,col 5)-(line 506,col 38)",
            "(line 507,col 5)-(line 507,col 68)",
            "(line 509,col 5)-(line 509,col 51)",
            "(line 510,col 5)-(line 510,col 65)",
            "(line 511,col 5)-(line 511,col 64)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ScopedAliasesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ScopedAliasesTest.java",
        "signature": "com.google.javascript.jscomp.ScopedAliasesTest.testRecordMultipleAliases()",
        "snippet": "  public void testRecordMultipleAliases() {\n    String fullJsCode = GOOG_SCOPE_START_BLOCK\n        + \"var g = goog;\\n var b= g.bar;\\n var f = goog.something.foo;\"\n        + \"g.dom.createElement(g.dom.TagName.DIV);\\n b.foo();\"\n        + GOOG_SCOPE_END_BLOCK;\n    String expectedJsCode =\n        \"goog.dom.createElement(goog.dom.TagName.DIV);\\n goog.bar.foo();\";\n    TransformationHandlerSpy spy = new TransformationHandlerSpy();\n    transformationHandler = spy;\n    test(fullJsCode, expectedJsCode);\n\n    assertTrue(spy.observedPositions.containsKey(\"testcode\"));\n    List<SourcePosition<AliasTransformation>> positions =\n        spy.observedPositions.get(\"testcode\");\n    assertEquals(1, positions.size());\n    verifyAliasTransformationPosition(1, 0, 3, 1, positions.get(0));\n\n    assertEquals(1, spy.constructedAliases.size());\n    AliasSpy aliasSpy = (AliasSpy) spy.constructedAliases.get(0);\n    assertEquals(\"goog\", aliasSpy.observedDefinitions.get(\"g\"));\n    assertEquals(\"g.bar\", aliasSpy.observedDefinitions.get(\"b\"));\n    assertEquals(\"goog.something.foo\", aliasSpy.observedDefinitions.get(\"f\"));\n  }\n",
        "begin_line": 514,
        "end_line": 536,
        "comment": "",
        "child_ranges": [
            "(line 515,col 5)-(line 518,col 31)",
            "(line 519,col 5)-(line 520,col 74)",
            "(line 521,col 5)-(line 521,col 66)",
            "(line 522,col 5)-(line 522,col 32)",
            "(line 523,col 5)-(line 523,col 37)",
            "(line 525,col 5)-(line 525,col 62)",
            "(line 526,col 5)-(line 527,col 46)",
            "(line 528,col 5)-(line 528,col 38)",
            "(line 529,col 5)-(line 529,col 68)",
            "(line 531,col 5)-(line 531,col 51)",
            "(line 532,col 5)-(line 532,col 65)",
            "(line 533,col 5)-(line 533,col 64)",
            "(line 534,col 5)-(line 534,col 65)",
            "(line 535,col 5)-(line 535,col 78)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ScopedAliasesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ScopedAliasesTest.java",
        "signature": "com.google.javascript.jscomp.ScopedAliasesTest.testRecordAliasFromMultipleGoogScope()",
        "snippet": "  public void testRecordAliasFromMultipleGoogScope() {\n    String firstGoogScopeBlock = GOOG_SCOPE_START_BLOCK\n        + \"\\n var g = goog;\\n g.dom.createElement(g.dom.TagName.DIV);\\n\"\n        + GOOG_SCOPE_END_BLOCK;\n    String fullJsCode = firstGoogScopeBlock + \"\\n\\nvar l = abc.def;\\n\\n\"\n        + GOOG_SCOPE_START_BLOCK\n        + \"\\n var z = namespace.Zoo;\\n z.getAnimals(l);\\n\"\n        + GOOG_SCOPE_END_BLOCK;\n\n    String expectedJsCode = \"goog.dom.createElement(goog.dom.TagName.DIV);\\n\"\n        + \"\\n\\nvar l = abc.def;\\n\\n\" + \"\\n namespace.Zoo.getAnimals(l);\\n\";\n\n    TransformationHandlerSpy spy = new TransformationHandlerSpy();\n    transformationHandler = spy;\n    test(fullJsCode, expectedJsCode);\n\n\n    assertTrue(spy.observedPositions.containsKey(\"testcode\"));\n    List<SourcePosition<AliasTransformation>> positions =\n        spy.observedPositions.get(\"testcode\");\n    assertEquals(2, positions.size());\n\n    verifyAliasTransformationPosition(1, 0, 6, 0, positions.get(0));\n\n    verifyAliasTransformationPosition(8, 0, 11, 4, positions.get(1));\n\n    assertEquals(2, spy.constructedAliases.size());\n    AliasSpy aliasSpy = (AliasSpy) spy.constructedAliases.get(0);\n    assertEquals(\"goog\", aliasSpy.observedDefinitions.get(\"g\"));\n\n    aliasSpy = (AliasSpy) spy.constructedAliases.get(1);\n    assertEquals(\"namespace.Zoo\", aliasSpy.observedDefinitions.get(\"z\"));\n  }\n",
        "begin_line": 538,
        "end_line": 570,
        "comment": "",
        "child_ranges": [
            "(line 539,col 5)-(line 541,col 31)",
            "(line 542,col 5)-(line 545,col 31)",
            "(line 547,col 5)-(line 548,col 75)",
            "(line 550,col 5)-(line 550,col 66)",
            "(line 551,col 5)-(line 551,col 32)",
            "(line 552,col 5)-(line 552,col 37)",
            "(line 555,col 5)-(line 555,col 62)",
            "(line 556,col 5)-(line 557,col 46)",
            "(line 558,col 5)-(line 558,col 38)",
            "(line 560,col 5)-(line 560,col 68)",
            "(line 562,col 5)-(line 562,col 69)",
            "(line 564,col 5)-(line 564,col 51)",
            "(line 565,col 5)-(line 565,col 65)",
            "(line 566,col 5)-(line 566,col 64)",
            "(line 568,col 5)-(line 568,col 56)",
            "(line 569,col 5)-(line 569,col 73)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ScopedAliasesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ScopedAliasesTest.java",
        "signature": "com.google.javascript.jscomp.ScopedAliasesTest.verifyAliasTransformationPosition(int, int, int, int, com.google.javascript.rhino.SourcePosition<com.google.javascript.jscomp.CompilerOptions.AliasTransformation>)",
        "snippet": "  private void verifyAliasTransformationPosition(int startLine, int startChar,\n      int endLine, int endChar, SourcePosition<AliasTransformation> pos) {\n    assertEquals(startLine, pos.getStartLine());\n    assertEquals(startChar, pos.getPositionOnStartLine());\n    assertTrue(\n        \"expected endline >= \" + endLine + \".  Found \" + pos.getEndLine(),\n        pos.getEndLine() >= endLine);\n    assertTrue(\"expected endChar >= \" + endChar + \".  Found \"\n        + pos.getPositionOnEndLine(), pos.getPositionOnEndLine() >= endChar);\n  }\n",
        "begin_line": 572,
        "end_line": 581,
        "comment": "",
        "child_ranges": [
            "(line 574,col 5)-(line 574,col 48)",
            "(line 575,col 5)-(line 575,col 58)",
            "(line 576,col 5)-(line 578,col 37)",
            "(line 579,col 5)-(line 580,col 77)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ScopedAliasesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ScopedAliasesTest.java",
        "signature": "com.google.javascript.jscomp.ScopedAliasesTest.getProcessor(com.google.javascript.jscomp.Compiler)",
        "snippet": "  @Override\n  protected ScopedAliases getProcessor(Compiler compiler) {\n    return new ScopedAliases(compiler, null, transformationHandler);\n  }\n",
        "begin_line": 583,
        "end_line": 586,
        "comment": "",
        "child_ranges": [
            "(line 585,col 5)-(line 585,col 68)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ScopedAliasesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ScopedAliasesTest.java",
        "signature": "com.google.javascript.jscomp.ScopedAliasesTest.TransformationHandlerSpy.logAliasTransformation(java.lang.String, com.google.javascript.rhino.SourcePosition<com.google.javascript.jscomp.CompilerOptions.AliasTransformation>)",
        "snippet": "    @Override\n    public AliasTransformation logAliasTransformation(\n        String sourceFile, SourcePosition<AliasTransformation> position) {\n      if(!observedPositions.containsKey(sourceFile)) {\n        observedPositions.put(sourceFile,\n            Lists.<SourcePosition<AliasTransformation>> newArrayList());\n      }\n      observedPositions.get(sourceFile).add(position);\n      AliasTransformation spy = new AliasSpy();\n      constructedAliases.add(spy);\n      return spy;\n    }\n",
        "begin_line": 597,
        "end_line": 608,
        "comment": "",
        "child_ranges": [
            "(line 600,col 7)-(line 603,col 7)",
            "(line 604,col 7)-(line 604,col 54)",
            "(line 605,col 7)-(line 605,col 47)",
            "(line 606,col 7)-(line 606,col 34)",
            "(line 607,col 7)-(line 607,col 17)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ScopedAliasesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ScopedAliasesTest.java",
        "signature": "com.google.javascript.jscomp.ScopedAliasesTest.AliasSpy.addAlias(java.lang.String, java.lang.String)",
        "snippet": "    @Override\n    public void addAlias(String alias, String definition) {\n      observedDefinitions.put(alias, definition);\n    }\n",
        "begin_line": 614,
        "end_line": 617,
        "comment": "",
        "child_ranges": [
            "(line 616,col 7)-(line 616,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ScopedAliasesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ScopedAliasesTest.java",
        "signature": "com.google.javascript.jscomp.ScopedAliasesTest.TypeVerifyingPass.TypeVerifyingPass(com.google.javascript.jscomp.Compiler)",
        "snippet": "    public TypeVerifyingPass(Compiler compiler) {\n      this.compiler = compiler;\n    }\n",
        "begin_line": 625,
        "end_line": 627,
        "comment": "",
        "child_ranges": [
            "(line 626,col 7)-(line 626,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ScopedAliasesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ScopedAliasesTest.java",
        "signature": "com.google.javascript.jscomp.ScopedAliasesTest.TypeVerifyingPass.process(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "    @Override\n    public void process(Node externs, Node root) {\n      NodeTraversal.traverse(compiler, root, this);\n    }\n",
        "begin_line": 629,
        "end_line": 632,
        "comment": "",
        "child_ranges": [
            "(line 631,col 7)-(line 631,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ScopedAliasesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ScopedAliasesTest.java",
        "signature": "com.google.javascript.jscomp.ScopedAliasesTest.TypeVerifyingPass.shouldTraverse(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "    @Override\n    public boolean shouldTraverse(NodeTraversal nodeTraversal, Node n,\n        Node parent) {\n      return true;\n    }\n",
        "begin_line": 634,
        "end_line": 638,
        "comment": "",
        "child_ranges": [
            "(line 637,col 7)-(line 637,col 18)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ScopedAliasesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ScopedAliasesTest.java",
        "signature": "com.google.javascript.jscomp.ScopedAliasesTest.TypeVerifyingPass.visit(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "    @Override\n    public void visit(NodeTraversal t, Node n, Node parent) {\n      JSDocInfo info = n.getJSDocInfo();\n      if (info != null) {\n        Collection<Node> typeNodes = info.getTypeNodes();\n        if (typeNodes.size() > 0) {\n          if (actualTypes != null) {\n            List<Node> expectedTypes = Lists.newArrayList();\n            for (Node typeNode : info.getTypeNodes()) {\n              expectedTypes.add(typeNode);\n            }\n            assertEquals(\"Wrong number of JsDoc types\",\n                expectedTypes.size(), actualTypes.size());\n            for (int i = 0; i < expectedTypes.size(); i++) {\n              assertNull(\n                  expectedTypes.get(i).checkTreeEquals(actualTypes.get(i)));\n            }\n          } else {\n            actualTypes = Lists.newArrayList();\n            for (Node typeNode : info.getTypeNodes()) {\n              actualTypes.add(typeNode);\n            }\n          }\n        }\n      }\n    }\n",
        "begin_line": 640,
        "end_line": 665,
        "comment": "",
        "child_ranges": [
            "(line 642,col 7)-(line 642,col 40)",
            "(line 643,col 7)-(line 664,col 7)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.IntegrationTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTestCase.java",
        "signature": "com.google.javascript.jscomp.IntegrationTestCase.setUp()",
        "snippet": "  @Override\n  public void setUp() {\n    externs = DEFAULT_EXTERNS;\n    lastCompiler = null;\n  }\n",
        "begin_line": 56,
        "end_line": 60,
        "comment": "",
        "child_ranges": [
            "(line 58,col 5)-(line 58,col 30)",
            "(line 59,col 5)-(line 59,col 24)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.IntegrationTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTestCase.java",
        "signature": "com.google.javascript.jscomp.IntegrationTestCase.testSame(com.google.javascript.jscomp.CompilerOptions, java.lang.String)",
        "snippet": "  protected void testSame(CompilerOptions options, String original) {\n    testSame(options, new String[] { original });\n  }\n",
        "begin_line": 62,
        "end_line": 64,
        "comment": "",
        "child_ranges": [
            "(line 63,col 5)-(line 63,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.IntegrationTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTestCase.java",
        "signature": "com.google.javascript.jscomp.IntegrationTestCase.testSame(com.google.javascript.jscomp.CompilerOptions, java.lang.String[])",
        "snippet": "  protected void testSame(CompilerOptions options, String[] original) {\n    test(options, original, original);\n  }\n",
        "begin_line": 66,
        "end_line": 68,
        "comment": "",
        "child_ranges": [
            "(line 67,col 5)-(line 67,col 38)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.IntegrationTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTestCase.java",
        "signature": "com.google.javascript.jscomp.IntegrationTestCase.test(com.google.javascript.jscomp.CompilerOptions, java.lang.String, java.lang.String)",
        "snippet": "  protected void test(CompilerOptions options,\n      String original, String compiled) {\n    test(options, new String[] { original }, new String[] { compiled });\n  }\n",
        "begin_line": 74,
        "end_line": 77,
        "comment": "\n   * Asserts that when compiling with the given compiler options,\n   * {@code original} is transformed into {@code compiled}.\n   ",
        "child_ranges": [
            "(line 76,col 5)-(line 76,col 72)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.IntegrationTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTestCase.java",
        "signature": "com.google.javascript.jscomp.IntegrationTestCase.test(com.google.javascript.jscomp.CompilerOptions, java.lang.String[], java.lang.String[])",
        "snippet": "  protected void test(CompilerOptions options,\n      String[] original, String[] compiled) {\n    Compiler compiler = compile(options, original);\n    assertEquals(\"Expected no warnings or errors\\n\" +\n        \"Errors: \\n\" + Joiner.on(\"\\n\").join(compiler.getErrors()) +\n        \"Warnings: \\n\" + Joiner.on(\"\\n\").join(compiler.getWarnings()),\n        0, compiler.getErrors().length + compiler.getWarnings().length);\n\n    Node root = compiler.getRoot().getLastChild();\n    Node expectedRoot = parse(compiled, options);\n    String explanation = expectedRoot.checkTreeEquals(root);\n    assertNull(\"\\nExpected: \" + compiler.toSource(expectedRoot) +\n        \"\\nResult: \" + compiler.toSource(root) +\n        \"\\n\" + explanation, explanation);\n  }\n",
        "begin_line": 83,
        "end_line": 97,
        "comment": "\n   * Asserts that when compiling with the given compiler options,\n   * {@code original} is transformed into {@code compiled}.\n   ",
        "child_ranges": [
            "(line 85,col 5)-(line 85,col 51)",
            "(line 86,col 5)-(line 89,col 72)",
            "(line 91,col 5)-(line 91,col 50)",
            "(line 92,col 5)-(line 92,col 49)",
            "(line 93,col 5)-(line 93,col 60)",
            "(line 94,col 5)-(line 96,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.IntegrationTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTestCase.java",
        "signature": "com.google.javascript.jscomp.IntegrationTestCase.test(com.google.javascript.jscomp.CompilerOptions, java.lang.String, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  protected void test(CompilerOptions options,\n      String original, DiagnosticType warning) {\n    test(options, new String[] { original }, warning);\n  }\n",
        "begin_line": 103,
        "end_line": 106,
        "comment": "\n   * Asserts that when compiling with the given compiler options,\n   * there is an error or warning.\n   ",
        "child_ranges": [
            "(line 105,col 5)-(line 105,col 54)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.IntegrationTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTestCase.java",
        "signature": "com.google.javascript.jscomp.IntegrationTestCase.test(com.google.javascript.jscomp.CompilerOptions, java.lang.String, java.lang.String, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  protected void test(CompilerOptions options,\n      String original, String compiled, DiagnosticType warning) {\n    test(options, new String[] { original }, new String[] { compiled },\n         warning);\n  }\n",
        "begin_line": 108,
        "end_line": 112,
        "comment": "",
        "child_ranges": [
            "(line 110,col 5)-(line 111,col 18)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.IntegrationTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTestCase.java",
        "signature": "com.google.javascript.jscomp.IntegrationTestCase.test(com.google.javascript.jscomp.CompilerOptions, java.lang.String[], com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  protected void test(CompilerOptions options,\n      String[] original, DiagnosticType warning) {\n    test(options, original, null, warning);\n  }\n",
        "begin_line": 114,
        "end_line": 117,
        "comment": "",
        "child_ranges": [
            "(line 116,col 5)-(line 116,col 43)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.IntegrationTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTestCase.java",
        "signature": "com.google.javascript.jscomp.IntegrationTestCase.test(com.google.javascript.jscomp.CompilerOptions, java.lang.String[], java.lang.String[], com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  protected void test(CompilerOptions options,\n      String[] original, String[] compiled, DiagnosticType warning) {\n    Compiler compiler = compile(options, original);\n    checkUnexpectedErrorsOrWarnings(compiler, 1);\n    assertEquals(\"Expected exactly one warning or error\",\n        1, compiler.getErrors().length + compiler.getWarnings().length);\n    if (compiler.getErrors().length > 0) {\n      assertEquals(warning, compiler.getErrors()[0].getType());\n    } else {\n      assertEquals(warning, compiler.getWarnings()[0].getType());\n    }\n\n    if (compiled != null) {\n      Node root = compiler.getRoot().getLastChild();\n      Node expectedRoot = parse(compiled, options);\n      String explanation = expectedRoot.checkTreeEquals(root);\n      assertNull(\"\\nExpected: \" + compiler.toSource(expectedRoot) +\n          \"\\nResult: \" + compiler.toSource(root) +\n          \"\\n\" + explanation, explanation);\n    }\n  }\n",
        "begin_line": 123,
        "end_line": 143,
        "comment": "\n   * Asserts that when compiling with the given compiler options,\n   * there is an error or warning.\n   ",
        "child_ranges": [
            "(line 125,col 5)-(line 125,col 51)",
            "(line 126,col 5)-(line 126,col 49)",
            "(line 127,col 5)-(line 128,col 72)",
            "(line 129,col 5)-(line 133,col 5)",
            "(line 135,col 5)-(line 142,col 5)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.IntegrationTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTestCase.java",
        "signature": "com.google.javascript.jscomp.IntegrationTestCase.test(com.google.javascript.jscomp.CompilerOptions, java.lang.String[], java.lang.String[], com.google.javascript.jscomp.DiagnosticType[])",
        "snippet": "  protected void test(CompilerOptions options,\n      String[] original, String[] compiled, DiagnosticType[] warnings) {\n    Compiler compiler = compile(options, original);\n    checkUnexpectedErrorsOrWarnings(compiler, warnings.length);\n\n    if (compiled != null) {\n      Node root = compiler.getRoot().getLastChild();\n      Node expectedRoot = parse(compiled, options);\n      String explanation = expectedRoot.checkTreeEquals(root);\n      assertNull(\"\\nExpected: \" + compiler.toSource(expectedRoot) +\n          \"\\nResult: \" + compiler.toSource(root) +\n          \"\\n\" + explanation, explanation);\n    }\n  }\n",
        "begin_line": 149,
        "end_line": 162,
        "comment": "\n   * Asserts that when compiling with the given compiler options,\n   * there is an error or warning.\n   ",
        "child_ranges": [
            "(line 151,col 5)-(line 151,col 51)",
            "(line 152,col 5)-(line 152,col 63)",
            "(line 154,col 5)-(line 161,col 5)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.IntegrationTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTestCase.java",
        "signature": "com.google.javascript.jscomp.IntegrationTestCase.checkUnexpectedErrorsOrWarnings(com.google.javascript.jscomp.Compiler, int)",
        "snippet": "  protected void checkUnexpectedErrorsOrWarnings(\n      Compiler compiler, int expected) {\n    int actual = compiler.getErrors().length + compiler.getWarnings().length;\n    if (actual != expected) {\n      String msg = \"\";\n      for (JSError err : compiler.getErrors()) {\n        msg += \"Error:\" + err.toString() + \"\\n\";\n      }\n      for (JSError err : compiler.getWarnings()) {\n        msg += \"Warning:\" + err.toString() + \"\\n\";\n      }\n      assertEquals(\"Unexpected warnings or errors.\\n \" + msg,\n        expected, actual);\n    }\n  }\n",
        "begin_line": 164,
        "end_line": 178,
        "comment": "",
        "child_ranges": [
            "(line 166,col 5)-(line 166,col 77)",
            "(line 167,col 5)-(line 177,col 5)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.IntegrationTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTestCase.java",
        "signature": "com.google.javascript.jscomp.IntegrationTestCase.compile(com.google.javascript.jscomp.CompilerOptions, java.lang.String)",
        "snippet": "  protected Compiler compile(CompilerOptions options, String original) {\n    return compile(options, new String[] { original });\n  }\n",
        "begin_line": 180,
        "end_line": 182,
        "comment": "",
        "child_ranges": [
            "(line 181,col 5)-(line 181,col 55)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.IntegrationTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTestCase.java",
        "signature": "com.google.javascript.jscomp.IntegrationTestCase.compile(com.google.javascript.jscomp.CompilerOptions, java.lang.String[])",
        "snippet": "  protected Compiler compile(CompilerOptions options, String[] original) {\n    Compiler compiler = lastCompiler = new Compiler();\n    List<SourceFile> inputs = Lists.newArrayList();\n    for (int i = 0; i < original.length; i++) {\n      inputs.add(SourceFile.fromCode(\"input\" + i, original[i]));\n    }\n    compiler.compileModules(\n        externs, Lists.newArrayList(CompilerTestCase.createModuleChain(original)),\n        options);\n    return compiler;\n  }\n",
        "begin_line": 184,
        "end_line": 194,
        "comment": "",
        "child_ranges": [
            "(line 185,col 5)-(line 185,col 54)",
            "(line 186,col 5)-(line 186,col 51)",
            "(line 187,col 5)-(line 189,col 5)",
            "(line 190,col 5)-(line 192,col 17)",
            "(line 193,col 5)-(line 193,col 20)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.IntegrationTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTestCase.java",
        "signature": "com.google.javascript.jscomp.IntegrationTestCase.parse(java.lang.String[], com.google.javascript.jscomp.CompilerOptions)",
        "snippet": "  protected Node parse(String[] original, CompilerOptions options) {\n    Compiler compiler = new Compiler();\n    List<SourceFile> inputs = Lists.newArrayList();\n    for (int i = 0; i < original.length; i++) {\n      inputs.add(SourceFile.fromCode(\"input\" + i, original[i]));\n    }\n    compiler.init(externs, inputs, options);\n    checkUnexpectedErrorsOrWarnings(compiler, 0);\n    Node all = compiler.parseInputs();\n    checkUnexpectedErrorsOrWarnings(compiler, 0);\n    Node n = all.getLastChild();\n    Node externs = all.getFirstChild();\n\n    (new CreateSyntheticBlocks(\n        compiler, \"synStart\", \"synEnd\")).process(externs, n);\n    (new Normalize(compiler, false)).process(externs, n);\n    (MakeDeclaredNamesUnique.getContextualRenameInverter(compiler)).process(\n        externs, n);\n    (new Denormalize(compiler)).process(externs, n);\n    return n;\n  }\n",
        "begin_line": 196,
        "end_line": 216,
        "comment": "",
        "child_ranges": [
            "(line 197,col 5)-(line 197,col 39)",
            "(line 198,col 5)-(line 198,col 51)",
            "(line 199,col 5)-(line 201,col 5)",
            "(line 202,col 5)-(line 202,col 44)",
            "(line 203,col 5)-(line 203,col 49)",
            "(line 204,col 5)-(line 204,col 38)",
            "(line 205,col 5)-(line 205,col 49)",
            "(line 206,col 5)-(line 206,col 32)",
            "(line 207,col 5)-(line 207,col 39)",
            "(line 209,col 5)-(line 210,col 61)",
            "(line 211,col 5)-(line 211,col 57)",
            "(line 212,col 5)-(line 213,col 20)",
            "(line 214,col 5)-(line 214,col 52)",
            "(line 215,col 5)-(line 215,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.IntegrationTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTestCase.java",
        "signature": "com.google.javascript.jscomp.IntegrationTestCase.createCompilerOptions()",
        "snippet": "  abstract CompilerOptions createCompilerOptions();\n",
        "begin_line": 219,
        "end_line": 219,
        "comment": " Creates a CompilerOptions object with google coding conventions. ",
        "child_ranges": []
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ScopedAliasesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.CompilerTestCase(java.lang.String, boolean)",
        "snippet": "  protected CompilerTestCase(String externs, boolean compareAsTree) {\n    this.externsInputs = ImmutableList.of(\n        SourceFile.fromCode(\"externs\", externs));\n    this.compareAsTree = compareAsTree;\n    this.parseTypeInfo = false;\n  }\n",
        "begin_line": 126,
        "end_line": 131,
        "comment": "\n   * Constructs a test.\n   *\n   * @param externs Externs JS as a string\n   * @param compareAsTree True to compare output & expected as a node tree.\n   *     99% of the time you want to compare as a tree. There are a few\n   *     special cases where you don't, like if you want to test the code\n   *     printing of \"unnatural\" syntax trees. For example,\n   *\n   * <pre>\n   * IF\n   *   IF\n   *     STATEMENT\n   * ELSE\n   *   STATEMENT\n   * </pre>\n   ",
        "child_ranges": [
            "(line 127,col 5)-(line 128,col 49)",
            "(line 129,col 5)-(line 129,col 39)",
            "(line 130,col 5)-(line 130,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ScopedAliasesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.CompilerTestCase(java.lang.String)",
        "snippet": "  protected CompilerTestCase(String externs) {\n    this(externs, true);\n  }\n",
        "begin_line": 137,
        "end_line": 139,
        "comment": "\n   * Constructs a test. Uses AST comparison.\n   * @param externs Externs JS as a string\n   ",
        "child_ranges": [
            "(line 138,col 5)-(line 138,col 24)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ScopedAliasesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.CompilerTestCase()",
        "snippet": "  protected CompilerTestCase() {\n    this(\"\", true);\n  }\n",
        "begin_line": 144,
        "end_line": 146,
        "comment": "\n   * Constructs a test. Uses AST comparison and no externs.\n   ",
        "child_ranges": [
            "(line 145,col 5)-(line 145,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ScopedAliasesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.getProcessor(com.google.javascript.jscomp.Compiler)",
        "snippet": "  protected abstract CompilerPass getProcessor(Compiler compiler);\n",
        "begin_line": 154,
        "end_line": 154,
        "comment": "\n   * Gets the compiler pass instance to use for a test.\n   *\n   * @param compiler The compiler\n   * @return The pass to test\n   ",
        "child_ranges": []
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ScopedAliasesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.getOptions()",
        "snippet": "  protected CompilerOptions getOptions() {\n    return getOptions(new CompilerOptions());\n  }\n",
        "begin_line": 161,
        "end_line": 163,
        "comment": "\n   * Gets the compiler options to use for this test. Use getProcessor to\n   * determine what passes should be run.\n   ",
        "child_ranges": [
            "(line 162,col 5)-(line 162,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ScopedAliasesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.getOptions(com.google.javascript.jscomp.CompilerOptions)",
        "snippet": "  protected CompilerOptions getOptions(CompilerOptions options) {\n    if (this.acceptES5) {\n      options.setLanguageIn(LanguageMode.ECMASCRIPT5);\n    }\n\n    // This doesn't affect whether checkSymbols is run--it just affects\n    // whether variable warnings are filtered.\n    options.checkSymbols = true;\n\n    options.setWarningLevel(\n        DiagnosticGroups.MISSING_PROPERTIES, CheckLevel.WARNING);\n    options.setCodingConvention(getCodingConvention());\n    return options;\n  }\n",
        "begin_line": 169,
        "end_line": 182,
        "comment": "\n   * Gets the compiler options to use for this test. Use getProcessor to\n   * determine what passes should be run.\n   ",
        "child_ranges": [
            "(line 170,col 5)-(line 172,col 5)",
            "(line 176,col 5)-(line 176,col 32)",
            "(line 178,col 5)-(line 179,col 65)",
            "(line 180,col 5)-(line 180,col 55)",
            "(line 181,col 5)-(line 181,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ScopedAliasesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.getCodingConvention()",
        "snippet": "  protected CodingConvention getCodingConvention() {\n    return new GoogleCodingConvention();\n  }\n",
        "begin_line": 184,
        "end_line": 186,
        "comment": "",
        "child_ranges": [
            "(line 185,col 5)-(line 185,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ScopedAliasesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.setFilename(java.lang.String)",
        "snippet": "  public void setFilename(String filename) {\n    this.filename = filename;\n  }\n",
        "begin_line": 188,
        "end_line": 190,
        "comment": "",
        "child_ranges": [
            "(line 189,col 5)-(line 189,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ScopedAliasesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.getNumRepetitions()",
        "snippet": "  protected int getNumRepetitions() {\n    // Since most compiler passes should be idempotent, we run each pass twice\n    // by default.\n    return 2;\n  }\n",
        "begin_line": 196,
        "end_line": 200,
        "comment": "\n   * Returns the number of times the pass should be run before results are\n   * verified.\n   ",
        "child_ranges": [
            "(line 199,col 5)-(line 199,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ScopedAliasesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.allowSourcelessWarnings()",
        "snippet": "  void allowSourcelessWarnings() {\n    allowSourcelessWarnings = true;\n  }\n",
        "begin_line": 203,
        "end_line": 205,
        "comment": " Expect warnings without source information. ",
        "child_ranges": [
            "(line 204,col 5)-(line 204,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ScopedAliasesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.getLastCompiler()",
        "snippet": "  Compiler getLastCompiler() {\n    return lastCompiler;\n  }\n",
        "begin_line": 208,
        "end_line": 210,
        "comment": " The most recently used JSComp instance. ",
        "child_ranges": [
            "(line 209,col 5)-(line 209,col 24)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ScopedAliasesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.enableEcmaScript5(boolean)",
        "snippet": "  protected void enableEcmaScript5(boolean acceptES5) {\n    this.acceptES5 = acceptES5;\n  }\n",
        "begin_line": 215,
        "end_line": 217,
        "comment": "\n   * Whether to allow ECMASCRIPT5 source parsing.\n   ",
        "child_ranges": [
            "(line 216,col 5)-(line 216,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ScopedAliasesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.allowExternsChanges(boolean)",
        "snippet": "  protected void allowExternsChanges(boolean allowExternsChanges) {\n    this.allowExternsChanges = allowExternsChanges;\n  }\n",
        "begin_line": 222,
        "end_line": 224,
        "comment": "\n   * Whether to allow externs changes.\n   ",
        "child_ranges": [
            "(line 223,col 5)-(line 223,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ScopedAliasesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.enableTypeCheck(com.google.javascript.jscomp.CheckLevel)",
        "snippet": "  public void enableTypeCheck(CheckLevel level) {\n    typeCheckEnabled  = true;\n    typeCheckLevel = level;\n  }\n",
        "begin_line": 234,
        "end_line": 237,
        "comment": "\n   * Perform type checking before running the test pass. This will check\n   * for type errors and annotate nodes with type information.\n   *\n   * @param level the level of severity to report for type errors\n   *\n   * @see TypeCheck\n   ",
        "child_ranges": [
            "(line 235,col 5)-(line 235,col 29)",
            "(line 236,col 5)-(line 236,col 27)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ScopedAliasesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.enableLineNumberCheck(boolean)",
        "snippet": "  public void enableLineNumberCheck(boolean newVal) {\n    checkLineNumbers = newVal;\n  }\n",
        "begin_line": 242,
        "end_line": 244,
        "comment": "\n   * Check to make sure that line numbers were preserved.\n   ",
        "child_ranges": [
            "(line 243,col 5)-(line 243,col 30)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ScopedAliasesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.disableTypeCheck()",
        "snippet": "  void disableTypeCheck() {\n    typeCheckEnabled  = false;\n  }\n",
        "begin_line": 251,
        "end_line": 253,
        "comment": "\n   * Do not run type checking before running the test pass.\n   *\n   * @see TypeCheck\n   ",
        "child_ranges": [
            "(line 252,col 5)-(line 252,col 30)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ScopedAliasesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.enableClosurePass()",
        "snippet": "  void enableClosurePass() {\n    closurePassEnabled = true;\n  }\n",
        "begin_line": 259,
        "end_line": 261,
        "comment": " TODO(nicksantos): Fix other passes to use this when appropriate.",
        "child_ranges": [
            "(line 260,col 5)-(line 260,col 30)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ScopedAliasesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.enableNormalize()",
        "snippet": "  protected void enableNormalize() {\n    enableNormalize(true);\n  }\n",
        "begin_line": 269,
        "end_line": 271,
        "comment": "\n   * Perform AST normalization before running the test pass, and anti-normalize\n   * after running it.\n   *\n   * @see Normalize\n   ",
        "child_ranges": [
            "(line 270,col 5)-(line 270,col 26)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ScopedAliasesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.enableNormalize(boolean)",
        "snippet": "  protected void enableNormalize(boolean normalizeExpected) {\n    normalizeEnabled = true;\n    this.normalizeExpected = normalizeExpected;\n  }\n",
        "begin_line": 281,
        "end_line": 284,
        "comment": "\n   * Perform AST normalization before running the test pass, and anti-normalize\n   * after running it.\n   *\n   * @param normalizeExpected Whether to perform normalization on the\n   * expected JS result.\n   * @see Normalize\n   ",
        "child_ranges": [
            "(line 282,col 5)-(line 282,col 28)",
            "(line 283,col 5)-(line 283,col 47)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ScopedAliasesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.disableNormalize()",
        "snippet": "  protected void disableNormalize() {\n    normalizeEnabled = false;\n  }\n",
        "begin_line": 290,
        "end_line": 292,
        "comment": "\n   * Don't perform AST normalization before running the test pass.\n   * @see Normalize\n   ",
        "child_ranges": [
            "(line 291,col 5)-(line 291,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ScopedAliasesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.enableMarkNoSideEffects()",
        "snippet": "  void enableMarkNoSideEffects() {\n    markNoSideEffects  = true;\n  }\n",
        "begin_line": 299,
        "end_line": 301,
        "comment": "\n   * Run the MarkSideEffectCalls pass before running the test pass.\n   *\n   * @see MarkNoSideEffectCalls\n   ",
        "child_ranges": [
            "(line 300,col 5)-(line 300,col 30)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ScopedAliasesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.enableAstValidation(boolean)",
        "snippet": "  protected void enableAstValidation(boolean validate) {\n    astValidationEnabled = validate;\n  }\n",
        "begin_line": 306,
        "end_line": 308,
        "comment": "\n   * Whether to allow Validate the AST after each run of the pass.\n   ",
        "child_ranges": [
            "(line 307,col 5)-(line 307,col 36)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ScopedAliasesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.createTypeCheck(com.google.javascript.jscomp.Compiler, com.google.javascript.jscomp.CheckLevel)",
        "snippet": "  private static TypeCheck createTypeCheck(Compiler compiler,\n      CheckLevel level) {\n    ReverseAbstractInterpreter rai =\n        new SemanticReverseAbstractInterpreter(compiler.getCodingConvention(),\n            compiler.getTypeRegistry());\n\n    return new TypeCheck(compiler, rai, compiler.getTypeRegistry(),\n        level, CheckLevel.OFF);\n  }\n",
        "begin_line": 311,
        "end_line": 319,
        "comment": " Returns a newly created TypeCheck. ",
        "child_ranges": [
            "(line 313,col 5)-(line 315,col 40)",
            "(line 317,col 5)-(line 318,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ScopedAliasesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.lang.String, java.lang.String)",
        "snippet": "  public void test(String js, String expected) {\n    test(js, expected, (DiagnosticType) null);\n  }\n",
        "begin_line": 327,
        "end_line": 329,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output.\n   *\n   * @param js Input\n   * @param expected Expected JS output\n   ",
        "child_ranges": [
            "(line 328,col 5)-(line 328,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ScopedAliasesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.lang.String, java.lang.String, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void test(String js, String expected, DiagnosticType error) {\n    test(js, expected, error, null);\n  }\n",
        "begin_line": 339,
        "end_line": 341,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output,\n   * or that an expected error is encountered.\n   *\n   * @param js Input\n   * @param expected Expected output, or null if an error is expected\n   * @param error Expected error, or null if no error is expected\n   ",
        "child_ranges": [
            "(line 340,col 5)-(line 340,col 36)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ScopedAliasesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.lang.String, java.lang.String, com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType, java.lang.String)",
        "snippet": "  public void test(String js, String expected, DiagnosticType error,\n                   DiagnosticType warning, String description) {\n    test(externsInputs, js, expected, error, warning, description);\n  }\n",
        "begin_line": 354,
        "end_line": 357,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output,\n   * or that an expected error is encountered.\n   *\n   * @param js Input\n   * @param expected Expected output, or null if an error is expected\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   * @param description The content of the error expected\n   ",
        "child_ranges": [
            "(line 356,col 5)-(line 356,col 67)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ScopedAliasesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.lang.String, java.lang.String, com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void test(String js, String expected,\n                   DiagnosticType error, DiagnosticType warning) {\n    test(externsInputs, js, expected, error, warning, null);\n  }\n",
        "begin_line": 369,
        "end_line": 372,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output\n   * and (optionally) that an expected warning is issued. Or, if an error is\n   * expected, this method just verifies that the error is encountered.\n   *\n   * @param js Input\n   * @param expected Expected output, or null if an error is expected\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   ",
        "child_ranges": [
            "(line 371,col 5)-(line 371,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ScopedAliasesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.lang.String, java.lang.String, java.lang.String, com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void test(String externs, String js, String expected,\n                   DiagnosticType error, DiagnosticType warning) {\n    test(externs, js, expected, error, warning, null);\n  }\n",
        "begin_line": 385,
        "end_line": 388,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output\n   * and (optionally) that an expected warning is issued. Or, if an error is\n   * expected, this method just verifies that the error is encountered.\n   *\n   * @param externs Externs input\n   * @param js Input\n   * @param expected Expected output, or null if an error is expected\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   ",
        "child_ranges": [
            "(line 387,col 5)-(line 387,col 54)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ScopedAliasesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.lang.String, java.lang.String, java.lang.String, com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType, java.lang.String)",
        "snippet": "  public void test(String externs, String js, String expected,\n                   DiagnosticType error, DiagnosticType warning,\n                   String description) {\n    List<SourceFile> externsInputs = ImmutableList.of(\n        SourceFile.fromCode(\"externs\", externs));\n    test(externsInputs, js, expected, error, warning, description);\n  }\n",
        "begin_line": 404,
        "end_line": 410,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output\n   * and (optionally) that an expected warning is issued. Or, if an error is\n   * expected, this method just verifies that the error is encountered.\n   *\n   * @param externs Externs input\n   * @param js Input\n   * @param expected Expected output, or null if an error is expected\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   * @param description The description of the expected warning,\n   *      or null if no warning is expected or if the warning's description\n   *      should not be examined\n   ",
        "child_ranges": [
            "(line 407,col 5)-(line 408,col 49)",
            "(line 409,col 5)-(line 409,col 67)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ScopedAliasesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.util.List<com.google.javascript.jscomp.SourceFile>, java.lang.String, java.lang.String, com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType, java.lang.String)",
        "snippet": "  public void test(List<SourceFile> externs, String js, String expected,\n                   DiagnosticType error,\n                   DiagnosticType warning, String description) {\n    Compiler compiler = createCompiler();\n    lastCompiler = compiler;\n\n    CompilerOptions options = getOptions();\n\n    if (this.acceptES5) {\n      options.setLanguageIn(LanguageMode.ECMASCRIPT5);\n    }\n    // Note that in this context, turning on the checkTypes option won't\n    // actually cause the type check to run.\n    options.checkTypes = parseTypeInfo;\n    compiler.init(externs, ImmutableList.of(\n        SourceFile.fromCode(filename, js)), options);\n\n    BaseJSTypeTestCase.addNativeProperties(compiler.getTypeRegistry());\n\n    test(compiler, new String[] { expected }, error, warning, description);\n  }\n",
        "begin_line": 426,
        "end_line": 446,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output\n   * and (optionally) that an expected warning is issued. Or, if an error is\n   * expected, this method just verifies that the error is encountered.\n   *\n   * @param externs Externs inputs\n   * @param js Input\n   * @param expected Expected output, or null if an error is expected\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   * @param description The description of the expected warning,\n   *      or null if no warning is expected or if the warning's description\n   *      should not be examined\n   ",
        "child_ranges": [
            "(line 429,col 5)-(line 429,col 41)",
            "(line 430,col 5)-(line 430,col 28)",
            "(line 432,col 5)-(line 432,col 43)",
            "(line 434,col 5)-(line 436,col 5)",
            "(line 439,col 5)-(line 439,col 39)",
            "(line 440,col 5)-(line 441,col 53)",
            "(line 443,col 5)-(line 443,col 71)",
            "(line 445,col 5)-(line 445,col 75)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ScopedAliasesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.lang.String[], java.lang.String[])",
        "snippet": "  public void test(String[] js, String[] expected) {\n    test(js, expected, null);\n  }\n",
        "begin_line": 454,
        "end_line": 456,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output.\n   *\n   * @param js Inputs\n   * @param expected Expected JS output\n   ",
        "child_ranges": [
            "(line 455,col 5)-(line 455,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ScopedAliasesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.lang.String[], java.lang.String[], com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void test(String[] js, String[] expected, DiagnosticType error) {\n    test(js, expected, error, null);\n  }\n",
        "begin_line": 466,
        "end_line": 468,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output,\n   * or that an expected error is encountered.\n   *\n   * @param js Inputs\n   * @param expected Expected JS output\n   * @param error Expected error, or null if no error is expected\n   ",
        "child_ranges": [
            "(line 467,col 5)-(line 467,col 36)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ScopedAliasesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.lang.String[], java.lang.String[], com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void test(String[] js, String[] expected, DiagnosticType error,\n                   DiagnosticType warning) {\n    test(js, expected, error, warning, null);\n  }\n",
        "begin_line": 480,
        "end_line": 483,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output\n   * and (optionally) that an expected warning is issued. Or, if an error is\n   * expected, this method just verifies that the error is encountered.\n   *\n   * @param js Inputs\n   * @param expected Expected JS output\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   ",
        "child_ranges": [
            "(line 482,col 5)-(line 482,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ScopedAliasesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.lang.String[], java.lang.String[], com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType, java.lang.String)",
        "snippet": "  public void test(String[] js, String[] expected, DiagnosticType error,\n                   DiagnosticType warning, String description) {\n    Compiler compiler = createCompiler();\n    lastCompiler = compiler;\n\n    List<SourceFile> inputs = Lists.newArrayList();\n    for (int i = 0; i < js.length; i++) {\n      inputs.add(SourceFile.fromCode(\"input\" + i, js[i]));\n    }\n    compiler.init(externsInputs, inputs, getOptions());\n    test(compiler, expected, error, warning, description);\n  }\n",
        "begin_line": 498,
        "end_line": 509,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output\n   * and (optionally) that an expected warning is issued. Or, if an error is\n   * expected, this method just verifies that the error is encountered.\n   *\n   * @param js Inputs\n   * @param expected Expected JS output\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   * @param description The description of the expected warning,\n   *      or null if no warning is expected or if the warning's description\n   *      should not be examined\n   ",
        "child_ranges": [
            "(line 500,col 5)-(line 500,col 41)",
            "(line 501,col 5)-(line 501,col 28)",
            "(line 503,col 5)-(line 503,col 51)",
            "(line 504,col 5)-(line 506,col 5)",
            "(line 507,col 5)-(line 507,col 55)",
            "(line 508,col 5)-(line 508,col 58)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ScopedAliasesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(com.google.javascript.jscomp.JSModule[], java.lang.String[])",
        "snippet": "  public void test(JSModule[] modules, String[] expected) {\n    test(modules, expected, null);\n  }\n",
        "begin_line": 517,
        "end_line": 519,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output.\n   *\n   * @param modules Module inputs\n   * @param expected Expected JS outputs (one per module)\n   ",
        "child_ranges": [
            "(line 518,col 5)-(line 518,col 34)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ScopedAliasesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(com.google.javascript.jscomp.JSModule[], java.lang.String[], com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void test(JSModule[] modules, String[] expected,\n      DiagnosticType error) {\n    test(modules, expected, error, null);\n  }\n",
        "begin_line": 529,
        "end_line": 532,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output,\n   * or that an expected error is encountered.\n   *\n   * @param modules Module inputs\n   * @param expected Expected JS outputs (one per module)\n   * @param error Expected error, or null if no error is expected\n   ",
        "child_ranges": [
            "(line 531,col 5)-(line 531,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ScopedAliasesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(com.google.javascript.jscomp.JSModule[], java.lang.String[], com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void test(JSModule[] modules, String[] expected,\n                   DiagnosticType error, DiagnosticType warning) {\n    Compiler compiler = createCompiler();\n    lastCompiler = compiler;\n\n    compiler.initModules(\n        externsInputs, Lists.newArrayList(modules), getOptions());\n    test(compiler, expected, error, warning);\n  }\n",
        "begin_line": 544,
        "end_line": 552,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output\n   * and (optionally) that an expected warning is issued. Or, if an error is\n   * expected, this method just verifies that the error is encountered.\n   *\n   * @param modules Module inputs\n   * @param expected Expected JS outputs (one per module)\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   ",
        "child_ranges": [
            "(line 546,col 5)-(line 546,col 41)",
            "(line 547,col 5)-(line 547,col 28)",
            "(line 549,col 5)-(line 550,col 66)",
            "(line 551,col 5)-(line 551,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ScopedAliasesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(java.lang.String)",
        "snippet": "  public void testSame(String js) {\n    test(js, js);\n  }\n",
        "begin_line": 559,
        "end_line": 561,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as its input.\n   *\n   * @param js Input and output\n   ",
        "child_ranges": [
            "(line 560,col 5)-(line 560,col 17)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ScopedAliasesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(java.lang.String, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void testSame(String js, DiagnosticType warning) {\n    test(js, js, null, warning);\n  }\n",
        "begin_line": 570,
        "end_line": 572,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as its input\n   * and (optionally) that an expected warning is issued.\n   *\n   * @param js Input and output\n   * @param warning Expected warning, or null if no warning is expected\n   ",
        "child_ranges": [
            "(line 571,col 5)-(line 571,col 32)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ScopedAliasesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(java.lang.String, com.google.javascript.jscomp.DiagnosticType, boolean)",
        "snippet": "  public void testSame(String js, DiagnosticType diag, boolean error) {\n    if (error) {\n      test(js, js, diag);\n    } else {\n      test(js, js, null, diag);\n    }\n  }\n",
        "begin_line": 582,
        "end_line": 588,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as its input\n   * and (optionally) that an expected warning is issued.\n   *\n   * @param js Input and output\n   * @param diag Expected error or warning, or null if none is expected\n   * @param error true if diag is an error, false if it is a warning\n   ",
        "child_ranges": [
            "(line 583,col 5)-(line 587,col 5)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ScopedAliasesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(java.lang.String, java.lang.String, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void testSame(String externs, String js, DiagnosticType warning) {\n    testSame(externs, js, warning, null);\n  }\n",
        "begin_line": 598,
        "end_line": 600,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as its input\n   * and (optionally) that an expected warning is issued.\n   *\n   * @param externs Externs input\n   * @param js Input and output\n   * @param warning Expected warning, or null if no warning is expected\n   ",
        "child_ranges": [
            "(line 599,col 5)-(line 599,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ScopedAliasesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(java.lang.String, java.lang.String, com.google.javascript.jscomp.DiagnosticType, boolean)",
        "snippet": "  public void testSame(\n      String externs, String js, DiagnosticType diag, boolean error) {\n    if (error) {\n      test(externs, js, js, diag, null);\n    } else {\n      test(externs, js, js, null, diag);\n    }\n  }\n",
        "begin_line": 611,
        "end_line": 618,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as its input\n   * and (optionally) that an expected warning is issued.\n   *\n   * @param externs Externs input\n   * @param js Input and output\n   * @param diag Expected error or warning, or null if none is expected\n   * @param error true if diag is an error, false if it is a warning\n   ",
        "child_ranges": [
            "(line 613,col 5)-(line 617,col 5)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ScopedAliasesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(java.lang.String, java.lang.String, com.google.javascript.jscomp.DiagnosticType, java.lang.String)",
        "snippet": "  public void testSame(String externs, String js, DiagnosticType warning,\n                       String description) {\n    List<SourceFile> externsInputs = ImmutableList.of(\n        SourceFile.fromCode(\"externs\", externs));\n    test(externsInputs, js, js, null, warning, description);\n  }\n",
        "begin_line": 631,
        "end_line": 636,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as its input\n   * and (optionally) that an expected warning and description is issued.\n   *\n   * @param externs Externs input\n   * @param js Input and output\n   * @param warning Expected warning, or null if no warning is expected\n   * @param description The description of the expected warning,\n   *      or null if no warning is expected or if the warning's description\n   *      should not be examined\n   ",
        "child_ranges": [
            "(line 633,col 5)-(line 634,col 49)",
            "(line 635,col 5)-(line 635,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ScopedAliasesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(java.lang.String[])",
        "snippet": "  public void testSame(String[] js) {\n    test(js, js);\n  }\n",
        "begin_line": 643,
        "end_line": 645,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as its input.\n   *\n   * @param js Inputs and outputs\n   ",
        "child_ranges": [
            "(line 644,col 5)-(line 644,col 17)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ScopedAliasesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(java.lang.String[], com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void testSame(String[] js, DiagnosticType error) {\n    test(js, js, error);\n  }\n",
        "begin_line": 654,
        "end_line": 656,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as its input,\n   * and emits the given error.\n   *\n   * @param js Inputs and outputs\n   * @param error Expected error, or null if no error is expected\n   ",
        "child_ranges": [
            "(line 655,col 5)-(line 655,col 24)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ScopedAliasesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(java.lang.String[], com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void testSame(\n      String[] js, DiagnosticType error, DiagnosticType warning) {\n    test(js, js, error, warning);\n  }\n",
        "begin_line": 666,
        "end_line": 669,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as its input,\n   * and emits the given error and warning.\n   *\n   * @param js Inputs and outputs\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   ",
        "child_ranges": [
            "(line 668,col 5)-(line 668,col 33)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ScopedAliasesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(com.google.javascript.jscomp.JSModule[])",
        "snippet": "  public void testSame(JSModule[] modules) {\n    testSame(modules, null);\n  }\n",
        "begin_line": 676,
        "end_line": 678,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as the input.\n   *\n   * @param modules Module inputs\n   ",
        "child_ranges": [
            "(line 677,col 5)-(line 677,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ScopedAliasesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(com.google.javascript.jscomp.JSModule[], com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void testSame(JSModule[] modules, DiagnosticType warning) {\n    try {\n      String[] expected = new String[modules.length];\n      for (int i = 0; i < modules.length; i++) {\n        expected[i] = \"\";\n        for (CompilerInput input : modules[i].getInputs()) {\n          expected[i] += input.getSourceFile().getCode();\n        }\n      }\n      test(modules, expected, null, warning);\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n  }\n",
        "begin_line": 686,
        "end_line": 699,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as the input.\n   *\n   * @param modules Module inputs\n   * @param warning A warning, or null for no expected warning.\n   ",
        "child_ranges": [
            "(line 687,col 5)-(line 698,col 5)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ScopedAliasesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(com.google.javascript.jscomp.Compiler, java.lang.String[], com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  protected void test(Compiler compiler, String[] expected,\n                      DiagnosticType error, DiagnosticType warning) {\n    test(compiler, expected, error, warning, null);\n  }\n",
        "begin_line": 712,
        "end_line": 715,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output\n   * and (optionally) that an expected warning is issued. Or, if an error is\n   * expected, this method just verifies that the error is encountered.\n   *\n   * @param compiler A compiler that has been initialized via\n   *     {@link Compiler#init}\n   * @param expected Expected output, or null if an error is expected\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   ",
        "child_ranges": [
            "(line 714,col 5)-(line 714,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ScopedAliasesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(com.google.javascript.jscomp.Compiler, java.lang.String[], com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType, java.lang.String)",
        "snippet": "  private void test(Compiler compiler, String[] expected,\n                    DiagnosticType error, DiagnosticType warning,\n                    String description) {\n    RecentChange recentChange = new RecentChange();\n    compiler.addChangeHandler(recentChange);\n\n    Node root = compiler.parseInputs();\n    assertTrue(\"Unexpected parse error(s): \" +\n        Joiner.on(\"\\n\").join(compiler.getErrors()), root != null);\n\n    if (astValidationEnabled) {\n      (new AstValidator()).validateRoot(root);\n    }\n    Node externsRoot = root.getFirstChild();\n    Node mainRoot = root.getLastChild();\n\n    // Save the tree for later comparison.\n    Node rootClone = root.cloneTree();\n    Node externsRootClone = rootClone.getFirstChild();\n    Node mainRootClone = rootClone.getLastChild();\n\n    int numRepetitions = getNumRepetitions();\n    ErrorManager[] errorManagers = new ErrorManager[numRepetitions];\n    int aggregateWarningCount = 0;\n    List<JSError> aggregateWarnings = Lists.newArrayList();\n    boolean hasCodeChanged = false;\n\n    assertFalse(\"Code should not change before processing\",\n        recentChange.hasCodeChanged());\n\n    for (int i = 0; i < numRepetitions; ++i) {\n      if (compiler.getErrorCount() == 0) {\n        errorManagers[i] = new BlackHoleErrorManager(compiler);\n\n        // Only run process closure primitives once, if asked.\n        if (closurePassEnabled && i == 0) {\n          recentChange.reset();\n          new ProcessClosurePrimitives(compiler, null, CheckLevel.ERROR, true)\n              .process(null, mainRoot);\n          hasCodeChanged = hasCodeChanged || recentChange.hasCodeChanged();\n        }\n\n        // Only run the type checking pass once, if asked.\n        // Running it twice can cause unpredictable behavior because duplicate\n        // objects for the same type are created, and the type system\n        // uses reference equality to compare many types.\n        if (typeCheckEnabled && i == 0) {\n          TypeCheck check = createTypeCheck(compiler, typeCheckLevel);\n          check.processForTesting(externsRoot, mainRoot);\n        }\n\n        // Only run the normalize pass once, if asked.\n        if (normalizeEnabled && i == 0) {\n          normalizeActualCode(compiler, externsRoot, mainRoot);\n        }\n\n        if (markNoSideEffects && i == 0) {\n          MarkNoSideEffectCalls mark = new MarkNoSideEffectCalls(compiler);\n          mark.process(externsRoot, mainRoot);\n        }\n\n        recentChange.reset();\n\n        getProcessor(compiler).process(externsRoot, mainRoot);\n        if (astValidationEnabled) {\n          (new AstValidator()).validateRoot(root);\n        }\n        if (checkLineNumbers) {\n          (new LineNumberCheck(compiler)).process(externsRoot, mainRoot);\n        }\n\n        hasCodeChanged = hasCodeChanged || recentChange.hasCodeChanged();\n        aggregateWarningCount += errorManagers[i].getWarningCount();\n        aggregateWarnings.addAll(Lists.newArrayList(compiler.getWarnings()));\n\n        if (normalizeEnabled) {\n          boolean verifyDeclaredConstants = true;\n          new Normalize.VerifyConstants(compiler, verifyDeclaredConstants)\n              .process(externsRoot, mainRoot);\n        }\n      }\n    }\n\n    if (error == null) {\n      assertEquals(\n          \"Unexpected error(s): \" + Joiner.on(\"\\n\").join(compiler.getErrors()),\n          0, compiler.getErrorCount());\n\n      // Verify the symbol table.\n      ErrorManager symbolTableErrorManager =\n          new BlackHoleErrorManager(compiler);\n      Node expectedRoot = parseExpectedJs(expected);\n      expectedRoot.detachFromParent();\n\n      JSError[] stErrors = symbolTableErrorManager.getErrors();\n      if (expectedSymbolTableError != null) {\n        assertEquals(\"There should be one error.\", 1, stErrors.length);\n        assertEquals(expectedSymbolTableError, stErrors[0].getType());\n      } else {\n        assertEquals(\"Unexpected symbol table error(s): \" +\n            Joiner.on(\"\\n\").join(stErrors),\n            0, stErrors.length);\n      }\n\n      if (warning == null) {\n        assertEquals(\n            \"Unexpected warning(s): \" + Joiner.on(\"\\n\").join(aggregateWarnings),\n            0, aggregateWarningCount);\n      } else {\n        assertEquals(\"There should be one warning, repeated \" + numRepetitions +\n            \" time(s).\", numRepetitions, aggregateWarningCount);\n        for (int i = 0; i < numRepetitions; ++i) {\n          JSError[] warnings = errorManagers[i].getWarnings();\n          JSError actual = warnings[0];\n          assertEquals(warning, actual.getType());\n\n          // Make sure that source information is always provided.\n          if (!allowSourcelessWarnings) {\n            assertTrue(\"Missing source file name in warning\",\n                actual.sourceName != null && !actual.sourceName.isEmpty());\n            assertTrue(\"Missing line number in warning\",\n                -1 != actual.lineNumber);\n            assertTrue(\"Missing char number in warning\",\n                -1 != actual.getCharno());\n          }\n\n          if (description != null) {\n            assertEquals(description, actual.description);\n          }\n        }\n      }\n\n      if (normalizeEnabled) {\n        normalizeActualCode(compiler, externsRootClone, mainRootClone);\n      }\n\n      boolean codeChange = !mainRootClone.isEquivalentTo(mainRoot);\n      boolean externsChange = !externsRootClone.isEquivalentTo(externsRoot);\n\n      // Generally, externs should not be change by the compiler passes.\n      if (externsChange && !allowExternsChanges) {\n        String explanation = externsRootClone.checkTreeEquals(externsRoot);\n        fail(\"Unexpected changes to externs\" +\n            \"\\nExpected: \" + compiler.toSource(externsRootClone) +\n            \"\\nResult: \" + compiler.toSource(externsRoot) +\n            \"\\n\" + explanation);\n      }\n\n      if (!codeChange && !externsChange) {\n        assertFalse(\n            \"compiler.reportCodeChange() was called \" +\n            \"even though nothing changed\",\n            hasCodeChanged);\n      } else {\n        assertTrue(\"compiler.reportCodeChange() should have been called\",\n            hasCodeChanged);\n      }\n\n      if (compareAsTree) {\n        String explanation = expectedRoot.checkTreeEquals(mainRoot);\n        assertNull(\"\\nExpected: \" + compiler.toSource(expectedRoot) +\n            \"\\nResult: \" + compiler.toSource(mainRoot) +\n            \"\\n\" + explanation, explanation);\n      } else if (expected != null) {\n        assertEquals(\n            Joiner.on(\"\").join(expected), compiler.toSource(mainRoot));\n      }\n\n      // Verify normalization is not invalidated.\n      Node normalizeCheckRootClone = root.cloneTree();\n      Node normalizeCheckExternsRootClone = root.getFirstChild();\n      Node normalizeCheckMainRootClone = root.getLastChild();\n      new PrepareAst(compiler).process(\n          normalizeCheckExternsRootClone, normalizeCheckMainRootClone);\n      String explanation =\n          normalizeCheckMainRootClone.checkTreeEquals(mainRoot);\n      assertNull(\"Node structure normalization invalidated.\\nExpected: \" +\n          compiler.toSource(normalizeCheckMainRootClone) +\n          \"\\nResult: \" + compiler.toSource(mainRoot) +\n          \"\\n\" + explanation, explanation);\n\n      // TODO(johnlenz): enable this for most test cases.\n      // Currently, this invalidates test for while-loops, for-loop\n      // initializers, and other naming.  However, a set of code\n      // (FoldConstants, etc) runs before the Normalize pass, so this can't be\n      // force on everywhere.\n      if (normalizeEnabled) {\n        new Normalize(compiler, true).process(\n            normalizeCheckExternsRootClone, normalizeCheckMainRootClone);\n        explanation =  normalizeCheckMainRootClone.checkTreeEquals(mainRoot);\n        assertNull(\"Normalization invalidated.\\nExpected: \" +\n            compiler.toSource(normalizeCheckMainRootClone) +\n            \"\\nResult: \" + compiler.toSource(mainRoot) +\n            \"\\n\" + explanation, explanation);\n      }\n    } else {\n      String errors = \"\";\n      for (JSError actualError : compiler.getErrors()) {\n        errors += actualError.description + \"\\n\";\n      }\n      assertEquals(\"There should be one error. \" + errors,\n          1, compiler.getErrorCount());\n      assertEquals(errors, error, compiler.getErrors()[0].getType());\n\n      if (warning != null) {\n        String warnings = \"\";\n        for (JSError actualError : compiler.getWarnings()) {\n          warnings += actualError.description + \"\\n\";\n        }\n        assertEquals(\"There should be one warning. \" + warnings,\n            1, compiler.getWarningCount());\n        assertEquals(warnings, warning, compiler.getWarnings()[0].getType());\n      }\n    }\n  }\n",
        "begin_line": 732,
        "end_line": 946,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output\n   * and (optionally) that an expected warning is issued. Or, if an error is\n   * expected, this method just verifies that the error is encountered.\n   *\n   * @param compiler A compiler that has been initialized via\n   *     {@link Compiler#init}\n   * @param expected Expected output, or null if an error is expected\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   * @param description The description of the expected warning,\n   *      or null if no warning is expected or if the warning's description\n   *      should not be examined\n   ",
        "child_ranges": [
            "(line 735,col 5)-(line 735,col 51)",
            "(line 736,col 5)-(line 736,col 44)",
            "(line 738,col 5)-(line 738,col 39)",
            "(line 739,col 5)-(line 740,col 66)",
            "(line 742,col 5)-(line 744,col 5)",
            "(line 745,col 5)-(line 745,col 44)",
            "(line 746,col 5)-(line 746,col 40)",
            "(line 749,col 5)-(line 749,col 38)",
            "(line 750,col 5)-(line 750,col 54)",
            "(line 751,col 5)-(line 751,col 50)",
            "(line 753,col 5)-(line 753,col 45)",
            "(line 754,col 5)-(line 754,col 68)",
            "(line 755,col 5)-(line 755,col 34)",
            "(line 756,col 5)-(line 756,col 59)",
            "(line 757,col 5)-(line 757,col 35)",
            "(line 759,col 5)-(line 760,col 39)",
            "(line 762,col 5)-(line 813,col 5)",
            "(line 815,col 5)-(line 945,col 5)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ScopedAliasesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.normalizeActualCode(com.google.javascript.jscomp.Compiler, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  private void normalizeActualCode(\n      Compiler compiler, Node externsRoot, Node mainRoot) {\n    Normalize normalize = new Normalize(compiler, false);\n    normalize.process(externsRoot, mainRoot);\n  }\n",
        "begin_line": 948,
        "end_line": 952,
        "comment": "",
        "child_ranges": [
            "(line 950,col 5)-(line 950,col 57)",
            "(line 951,col 5)-(line 951,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ScopedAliasesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.parseExpectedJs(java.lang.String[])",
        "snippet": "  protected Node parseExpectedJs(String[] expected) {\n    Compiler compiler = createCompiler();\n    List<SourceFile> inputs = Lists.newArrayList();\n    for (int i = 0; i < expected.length; i++) {\n      inputs.add(SourceFile.fromCode(\"expected\" + i, expected[i]));\n    }\n    compiler.init(externsInputs, inputs, getOptions());\n    Node root = compiler.parseInputs();\n    assertTrue(\"Unexpected parse error(s): \" +\n        Joiner.on(\"\\n\").join(compiler.getErrors()), root != null);\n    Node externsRoot = root.getFirstChild();\n    Node mainRoot = externsRoot.getNext();\n    // Only run the normalize pass, if asked.\n    if (normalizeEnabled && normalizeExpected && !compiler.hasErrors()) {\n      Normalize normalize = new Normalize(compiler, false);\n      normalize.process(externsRoot, mainRoot);\n    }\n    return mainRoot;\n  }\n",
        "begin_line": 957,
        "end_line": 975,
        "comment": "\n   * Parses expected JS inputs and returns the root of the parse tree.\n   ",
        "child_ranges": [
            "(line 958,col 5)-(line 958,col 41)",
            "(line 959,col 5)-(line 959,col 51)",
            "(line 960,col 5)-(line 962,col 5)",
            "(line 963,col 5)-(line 963,col 55)",
            "(line 964,col 5)-(line 964,col 39)",
            "(line 965,col 5)-(line 966,col 66)",
            "(line 967,col 5)-(line 967,col 44)",
            "(line 968,col 5)-(line 968,col 42)",
            "(line 970,col 5)-(line 973,col 5)",
            "(line 974,col 5)-(line 974,col 20)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ScopedAliasesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.parseExpectedJs(java.lang.String)",
        "snippet": "  protected Node parseExpectedJs(String expected) {\n    return parseExpectedJs(new String[] {expected});\n  }\n",
        "begin_line": 977,
        "end_line": 979,
        "comment": "",
        "child_ranges": [
            "(line 978,col 5)-(line 978,col 52)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ScopedAliasesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.createModuleChain(java.lang.String...)",
        "snippet": "  static JSModule[] createModuleChain(String... inputs) {\n    JSModule[] modules = createModules(inputs);\n    for (int i = 1; i < modules.length; i++) {\n      modules[i].addDependency(modules[i - 1]);\n    }\n    return modules;\n  }\n",
        "begin_line": 985,
        "end_line": 991,
        "comment": "\n   * Generates a list of modules from a list of inputs, such that each module\n   * depends on the module before it.\n   ",
        "child_ranges": [
            "(line 986,col 5)-(line 986,col 47)",
            "(line 987,col 5)-(line 989,col 5)",
            "(line 990,col 5)-(line 990,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ScopedAliasesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.createModuleStar(java.lang.String...)",
        "snippet": "  static JSModule[] createModuleStar(String... inputs) {\n    JSModule[] modules = createModules(inputs);\n    for (int i = 1; i < modules.length; i++) {\n      modules[i].addDependency(modules[0]);\n    }\n    return modules;\n  }\n",
        "begin_line": 997,
        "end_line": 1003,
        "comment": "\n   * Generates a list of modules from a list of inputs, such that each module\n   * depends on the first module.\n   ",
        "child_ranges": [
            "(line 998,col 5)-(line 998,col 47)",
            "(line 999,col 5)-(line 1001,col 5)",
            "(line 1002,col 5)-(line 1002,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ScopedAliasesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.createModuleBush(java.lang.String...)",
        "snippet": "  static JSModule[] createModuleBush(String ... inputs) {\n    Preconditions.checkState(inputs.length > 2);\n    JSModule[] modules = createModules(inputs);\n    for (int i = 1; i < modules.length; i++) {\n      modules[i].addDependency(modules[i == 1 ? 0 : 1]);\n    }\n    return modules;\n  }\n",
        "begin_line": 1010,
        "end_line": 1017,
        "comment": "\n   * Generates a list of modules from a list of inputs, such that modules\n   * form a bush formation. In a bush formation, module 2 depends\n   * on module 1, and all other modules depend on module 2.\n   ",
        "child_ranges": [
            "(line 1011,col 5)-(line 1011,col 48)",
            "(line 1012,col 5)-(line 1012,col 47)",
            "(line 1013,col 5)-(line 1015,col 5)",
            "(line 1016,col 5)-(line 1016,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ScopedAliasesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.createModuleTree(java.lang.String...)",
        "snippet": "  static JSModule[] createModuleTree(String ... inputs) {\n    JSModule[] modules = createModules(inputs);\n    for (int i = 1; i < modules.length; i++) {\n      modules[i].addDependency(modules[(i - 1) / 2]);\n    }\n    return modules;\n  }\n",
        "begin_line": 1024,
        "end_line": 1030,
        "comment": "\n   * Generates a list of modules from a list of inputs, such that modules\n   * form a tree formation. In a tree formation, module N depends on\n   * module `floor(N/2)`, So the modules form a balanced binary tree.\n   ",
        "child_ranges": [
            "(line 1025,col 5)-(line 1025,col 47)",
            "(line 1026,col 5)-(line 1028,col 5)",
            "(line 1029,col 5)-(line 1029,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ScopedAliasesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.createModules(java.lang.String...)",
        "snippet": "  static JSModule[] createModules(String... inputs) {\n    JSModule[] modules = new JSModule[inputs.length];\n    for (int i = 0; i < inputs.length; i++) {\n      JSModule module = modules[i] = new JSModule(\"m\" + i);\n      module.add(SourceFile.fromCode(\"i\" + i, inputs[i]));\n    }\n    return modules;\n  }\n",
        "begin_line": 1036,
        "end_line": 1043,
        "comment": "\n   * Generates a list of modules from a list of inputs. Does not generate any\n   * dependencies between the modules.\n   ",
        "child_ranges": [
            "(line 1037,col 5)-(line 1037,col 53)",
            "(line 1038,col 5)-(line 1041,col 5)",
            "(line 1042,col 5)-(line 1042,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ScopedAliasesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.BlackHoleErrorManager.BlackHoleErrorManager(com.google.javascript.jscomp.Compiler)",
        "snippet": "    private BlackHoleErrorManager(Compiler compiler) {\n      compiler.setErrorManager(this);\n    }\n",
        "begin_line": 1046,
        "end_line": 1048,
        "comment": "",
        "child_ranges": [
            "(line 1047,col 7)-(line 1047,col 37)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ScopedAliasesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.BlackHoleErrorManager.println(com.google.javascript.jscomp.CheckLevel, com.google.javascript.jscomp.JSError)",
        "snippet": "    @Override\n    public void println(CheckLevel level, JSError error) {}\n",
        "begin_line": 1050,
        "end_line": 1051,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ScopedAliasesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.BlackHoleErrorManager.printSummary()",
        "snippet": "    @Override\n    public void printSummary() {}\n",
        "begin_line": 1053,
        "end_line": 1054,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ScopedAliasesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.createCompiler()",
        "snippet": "  Compiler createCompiler() {\n    Compiler compiler = new Compiler();\n    return compiler;\n  }\n",
        "begin_line": 1057,
        "end_line": 1060,
        "comment": "",
        "child_ranges": [
            "(line 1058,col 5)-(line 1058,col 39)",
            "(line 1059,col 5)-(line 1059,col 20)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ScopedAliasesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.setExpectedSymbolTableError(com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  protected void setExpectedSymbolTableError(DiagnosticType type) {\n    this.expectedSymbolTableError = type;\n  }\n",
        "begin_line": 1062,
        "end_line": 1064,
        "comment": "",
        "child_ranges": [
            "(line 1063,col 5)-(line 1063,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ScopedAliasesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.findQualifiedNameNode(java.lang.String, com.google.javascript.rhino.Node)",
        "snippet": "  protected final Node findQualifiedNameNode(final String name, Node root) {\n    final List<Node> matches = Lists.newArrayList();\n    NodeUtil.visitPostOrder(root,\n        new NodeUtil.Visitor() {\n          @Override public void visit(Node n) {\n            if (name.equals(n.getQualifiedName())) {\n              matches.add(n);\n            }\n          }\n        },\n        Predicates.<Node>alwaysTrue());\n    return matches.get(0);\n  }\n",
        "begin_line": 1067,
        "end_line": 1079,
        "comment": " Finds the first matching qualified name node in post-traversal order. ",
        "child_ranges": [
            "(line 1068,col 5)-(line 1068,col 52)",
            "(line 1069,col 5)-(line 1077,col 39)",
            "(line 1078,col 5)-(line 1078,col 26)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ScopedAliasesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.Anonymous-1c24aecd-15e9-4de0-a726-cad02c1329b7.visit(com.google.javascript.rhino.Node)",
        "snippet": "          @Override public void visit(Node n) {\n            if (name.equals(n.getQualifiedName())) {\n              matches.add(n);\n            }\n          }\n",
        "begin_line": 1071,
        "end_line": 1075,
        "comment": "",
        "child_ranges": [
            "(line 1072,col 13)-(line 1074,col 13)"
        ]
    }
]