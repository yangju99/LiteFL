[
    {
        "class_name": "org.jfree.chart.plot.junit.ValueMarkerTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/ValueMarkerTests.java",
        "signature": "org.jfree.chart.plot.junit.ValueMarkerTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(ValueMarkerTests.class);\n    }\n",
        "begin_line": 89,
        "end_line": 91,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 90,col 9)-(line 90,col 53)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.ValueMarkerTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/ValueMarkerTests.java",
        "signature": "org.jfree.chart.plot.junit.ValueMarkerTests.ValueMarkerTests(java.lang.String)",
        "snippet": "    public ValueMarkerTests(String name) {\n        super(name);\n    }\n",
        "begin_line": 98,
        "end_line": 100,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 99,col 9)-(line 99,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.ValueMarkerTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/ValueMarkerTests.java",
        "signature": "org.jfree.chart.plot.junit.ValueMarkerTests.testEquals()",
        "snippet": "    public void testEquals() {\n        \n        Marker m1 = new ValueMarker(45.0);\n        Marker m2 = new ValueMarker(45.0);\n        assertTrue(m1.equals(m2));\n        assertTrue(m2.equals(m1));\n        \n        m1.setPaint(new GradientPaint(1.0f, 2.0f, Color.green, \n                3.0f, 4.0f, Color.red));\n        assertFalse(m1.equals(m2));\n        m2.setPaint(new GradientPaint(1.0f, 2.0f, Color.green, \n                3.0f, 4.0f, Color.red));\n        assertTrue(m1.equals(m2));\n        \n        BasicStroke stroke = new BasicStroke(2.2f);\n        m1.setStroke(stroke);\n        assertFalse(m1.equals(m2));\n        m2.setStroke(stroke);\n        assertTrue(m1.equals(m2));\n        \n        m1.setOutlinePaint(new GradientPaint(4.0f, 3.0f, Color.yellow, \n                2.0f, 1.0f, Color.white));\n        assertFalse(m1.equals(m2));\n        m2.setOutlinePaint(new GradientPaint(4.0f, 3.0f, Color.yellow, \n                2.0f, 1.0f, Color.white));\n        assertTrue(m1.equals(m2));\n        \n        m1.setOutlineStroke(stroke);\n        assertFalse(m1.equals(m2));\n        m2.setOutlineStroke(stroke);\n        assertTrue(m1.equals(m2));\n\n        m1.setAlpha(0.1f);\n        assertFalse(m1.equals(m2));\n        m2.setAlpha(0.1f);\n        assertTrue(m1.equals(m2));\n        \n        m1.setLabel(\"New Label\");\n        assertFalse(m1.equals(m2));\n        m2.setLabel(\"New Label\");\n        assertTrue(m1.equals(m2));\n        \n        m1.setLabelFont(new Font(\"SansSerif\", Font.PLAIN, 10));\n        assertFalse(m1.equals(m2));\n        m2.setLabelFont(new Font(\"SansSerif\", Font.PLAIN, 10));\n        assertTrue(m1.equals(m2));\n\n        m1.setLabelPaint(new GradientPaint(1.0f, 2.0f, Color.blue, \n                3.0f, 4.0f, Color.yellow));\n        assertFalse(m1.equals(m2));\n        m2.setLabelPaint(new GradientPaint(1.0f, 2.0f, Color.blue, \n                3.0f, 4.0f, Color.yellow));\n        assertTrue(m1.equals(m2));\n\n        m1.setLabelAnchor(RectangleAnchor.TOP_RIGHT);\n        assertFalse(m1.equals(m2));\n        m2.setLabelAnchor(RectangleAnchor.TOP_RIGHT);\n        assertTrue(m1.equals(m2));\n        \n        m1.setLabelTextAnchor(TextAnchor.BASELINE_RIGHT);\n        assertFalse(m1.equals(m2));\n        m2.setLabelTextAnchor(TextAnchor.BASELINE_RIGHT);\n        assertTrue(m1.equals(m2));\n        \n        m1.setLabelOffset(new RectangleInsets(10.0, 10.0, 10.0, 10.0));\n        assertFalse(m1.equals(m2));\n        m2.setLabelOffset(new RectangleInsets(10.0, 10.0, 10.0, 10.0));\n        assertTrue(m1.equals(m2));\n        \n        m1.setLabelOffsetType(LengthAdjustmentType.EXPAND);\n        assertFalse(m1.equals(m2));\n        m2.setLabelOffsetType(LengthAdjustmentType.EXPAND);\n        assertTrue(m1.equals(m2));\n        \n        m1 = new ValueMarker(12.3);\n        m2 = new ValueMarker(45.6);\n        assertFalse(m1.equals(m2));\n        m2 = new ValueMarker(12.3);\n        assertTrue(m1.equals(m2));\n        \n    }\n",
        "begin_line": 105,
        "end_line": 185,
        "comment": "\n     * Confirm that the equals method can distinguish all the required fields.\n     ",
        "child_ranges": [
            "(line 107,col 9)-(line 107,col 42)",
            "(line 108,col 9)-(line 108,col 42)",
            "(line 109,col 9)-(line 109,col 34)",
            "(line 110,col 9)-(line 110,col 34)",
            "(line 112,col 9)-(line 113,col 40)",
            "(line 114,col 9)-(line 114,col 35)",
            "(line 115,col 9)-(line 116,col 40)",
            "(line 117,col 9)-(line 117,col 34)",
            "(line 119,col 9)-(line 119,col 51)",
            "(line 120,col 9)-(line 120,col 29)",
            "(line 121,col 9)-(line 121,col 35)",
            "(line 122,col 9)-(line 122,col 29)",
            "(line 123,col 9)-(line 123,col 34)",
            "(line 125,col 9)-(line 126,col 42)",
            "(line 127,col 9)-(line 127,col 35)",
            "(line 128,col 9)-(line 129,col 42)",
            "(line 130,col 9)-(line 130,col 34)",
            "(line 132,col 9)-(line 132,col 36)",
            "(line 133,col 9)-(line 133,col 35)",
            "(line 134,col 9)-(line 134,col 36)",
            "(line 135,col 9)-(line 135,col 34)",
            "(line 137,col 9)-(line 137,col 26)",
            "(line 138,col 9)-(line 138,col 35)",
            "(line 139,col 9)-(line 139,col 26)",
            "(line 140,col 9)-(line 140,col 34)",
            "(line 142,col 9)-(line 142,col 33)",
            "(line 143,col 9)-(line 143,col 35)",
            "(line 144,col 9)-(line 144,col 33)",
            "(line 145,col 9)-(line 145,col 34)",
            "(line 147,col 9)-(line 147,col 63)",
            "(line 148,col 9)-(line 148,col 35)",
            "(line 149,col 9)-(line 149,col 63)",
            "(line 150,col 9)-(line 150,col 34)",
            "(line 152,col 9)-(line 153,col 43)",
            "(line 154,col 9)-(line 154,col 35)",
            "(line 155,col 9)-(line 156,col 43)",
            "(line 157,col 9)-(line 157,col 34)",
            "(line 159,col 9)-(line 159,col 53)",
            "(line 160,col 9)-(line 160,col 35)",
            "(line 161,col 9)-(line 161,col 53)",
            "(line 162,col 9)-(line 162,col 34)",
            "(line 164,col 9)-(line 164,col 57)",
            "(line 165,col 9)-(line 165,col 35)",
            "(line 166,col 9)-(line 166,col 57)",
            "(line 167,col 9)-(line 167,col 34)",
            "(line 169,col 9)-(line 169,col 71)",
            "(line 170,col 9)-(line 170,col 35)",
            "(line 171,col 9)-(line 171,col 71)",
            "(line 172,col 9)-(line 172,col 34)",
            "(line 174,col 9)-(line 174,col 59)",
            "(line 175,col 9)-(line 175,col 35)",
            "(line 176,col 9)-(line 176,col 59)",
            "(line 177,col 9)-(line 177,col 34)",
            "(line 179,col 9)-(line 179,col 35)",
            "(line 180,col 9)-(line 180,col 35)",
            "(line 181,col 9)-(line 181,col 35)",
            "(line 182,col 9)-(line 182,col 35)",
            "(line 183,col 9)-(line 183,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.ValueMarkerTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/ValueMarkerTests.java",
        "signature": "org.jfree.chart.plot.junit.ValueMarkerTests.testCloning()",
        "snippet": "    public void testCloning() {\n        ValueMarker m1 = new ValueMarker(25.0);\n        ValueMarker m2 = null;\n        try {\n            m2 = (ValueMarker) m1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            e.printStackTrace();\n        }\n        assertTrue(m1 != m2);\n        assertTrue(m1.getClass() == m2.getClass());\n        assertTrue(m1.equals(m2));\n    }\n",
        "begin_line": 190,
        "end_line": 202,
        "comment": "\n     * Confirm that cloning works.\n     ",
        "child_ranges": [
            "(line 191,col 9)-(line 191,col 47)",
            "(line 192,col 9)-(line 192,col 30)",
            "(line 193,col 9)-(line 198,col 9)",
            "(line 199,col 9)-(line 199,col 29)",
            "(line 200,col 9)-(line 200,col 51)",
            "(line 201,col 9)-(line 201,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.ValueMarkerTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/ValueMarkerTests.java",
        "signature": "org.jfree.chart.plot.junit.ValueMarkerTests.testSerialization()",
        "snippet": "    public void testSerialization() {\n\n        ValueMarker m1 = new ValueMarker(25.0);\n        ValueMarker m2 = null;\n\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(m1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(\n                    new ByteArrayInputStream(buffer.toByteArray()));\n            m2 = (ValueMarker) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            e.printStackTrace();\n        }\n        boolean b = m1.equals(m2);\n        assertTrue(b);\n\n    }\n",
        "begin_line": 207,
        "end_line": 229,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 209,col 9)-(line 209,col 47)",
            "(line 210,col 9)-(line 210,col 30)",
            "(line 212,col 9)-(line 225,col 9)",
            "(line 226,col 9)-(line 226,col 34)",
            "(line 227,col 9)-(line 227,col 22)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.ValueMarkerTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/ValueMarkerTests.java",
        "signature": "org.jfree.chart.plot.junit.ValueMarkerTests.testGetSetValue()",
        "snippet": "    public void testGetSetValue() {\n        ValueMarker m = new ValueMarker(1.1);\n        m.addChangeListener(this);\n        this.lastEvent = null;\n        assertEquals(1.1, m.getValue(), EPSILON);\n        m.setValue(33.3);\n        assertEquals(33.3, m.getValue(), EPSILON);\n        assertEquals(m, this.lastEvent.getMarker());\n    }\n",
        "begin_line": 236,
        "end_line": 244,
        "comment": "\n     * Some checks for the getValue() and setValue() methods.\n     ",
        "child_ranges": [
            "(line 237,col 9)-(line 237,col 45)",
            "(line 238,col 9)-(line 238,col 34)",
            "(line 239,col 9)-(line 239,col 30)",
            "(line 240,col 9)-(line 240,col 49)",
            "(line 241,col 9)-(line 241,col 25)",
            "(line 242,col 9)-(line 242,col 50)",
            "(line 243,col 9)-(line 243,col 52)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.ValueMarkerTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/ValueMarkerTests.java",
        "signature": "org.jfree.chart.plot.junit.ValueMarkerTests.markerChanged(org.jfree.chart.event.MarkerChangeEvent)",
        "snippet": "    public void markerChanged(MarkerChangeEvent event) {\n        this.lastEvent = event;\n    }\n",
        "begin_line": 246,
        "end_line": 248,
        "comment": "",
        "child_ranges": [
            "(line 247,col 9)-(line 247,col 31)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.ValueMarkerTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/ValueMarkerTests.java",
        "signature": "org.jfree.chart.plot.junit.ValueMarkerTests.test1802195()",
        "snippet": "    public void test1802195() {\n\n        ValueMarker m1 = new ValueMarker(25.0);\n        ValueMarker m2 = null;\n\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(m1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(\n                    new ByteArrayInputStream(buffer.toByteArray()));\n            m2 = (ValueMarker) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            e.printStackTrace();\n        }\n        boolean b = m1.equals(m2);\n        assertTrue(b);\n\n        boolean pass = true;\n        try {\n            m2.setValue(-10.0);\n        }\n        catch (NullPointerException e) {\n            pass = false;\n        }\n        assertTrue(pass);\n\n    }\n",
        "begin_line": 253,
        "end_line": 284,
        "comment": "\n     * A test for bug 1802195.\n     ",
        "child_ranges": [
            "(line 255,col 9)-(line 255,col 47)",
            "(line 256,col 9)-(line 256,col 30)",
            "(line 258,col 9)-(line 271,col 9)",
            "(line 272,col 9)-(line 272,col 34)",
            "(line 273,col 9)-(line 273,col 22)",
            "(line 275,col 9)-(line 275,col 28)",
            "(line 276,col 9)-(line 281,col 9)",
            "(line 282,col 9)-(line 282,col 25)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.ValueMarkerTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/ValueMarkerTests.java",
        "signature": "org.jfree.chart.plot.junit.ValueMarkerTests.test1808376()",
        "snippet": "    public void test1808376() {\n        Stroke stroke = new BasicStroke(1.0f);\n        Stroke outlineStroke = new BasicStroke(2.0f);\n        ValueMarker m = new ValueMarker(1.0, Color.red, stroke, Color.blue, \n                outlineStroke, 0.5f);\n        assertEquals(1.0, m.getValue(), EPSILON);\n        assertEquals(Color.red, m.getPaint());\n        assertEquals(stroke, m.getStroke());\n        assertEquals(Color.blue, m.getOutlinePaint());\n        assertEquals(outlineStroke, m.getOutlineStroke());\n        assertEquals(0.5f, m.getAlpha(), EPSILON);\n    }\n",
        "begin_line": 289,
        "end_line": 300,
        "comment": "\n     * A test for bug report 1808376.\n     ",
        "child_ranges": [
            "(line 290,col 9)-(line 290,col 46)",
            "(line 291,col 9)-(line 291,col 53)",
            "(line 292,col 9)-(line 293,col 37)",
            "(line 294,col 9)-(line 294,col 49)",
            "(line 295,col 9)-(line 295,col 46)",
            "(line 296,col 9)-(line 296,col 44)",
            "(line 297,col 9)-(line 297,col 54)",
            "(line 298,col 9)-(line 298,col 58)",
            "(line 299,col 9)-(line 299,col 50)"
        ]
    }
]