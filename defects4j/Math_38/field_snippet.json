[
    {
        "class_name": "org.apache.commons.math.linear.FractionMatrixConverter",
        "src_path": "src/main/java/org/apache/commons/math/linear/MatrixUtils.java",
        "signature": "org.apache.commons.math.linear.FractionMatrixConverter.data",
        "snippet": "        private double[][] data;",
        "begin_line": 528,
        "end_line": 528,
        "comment": " Converted array. "
    },
    {
        "class_name": "org.apache.commons.math.linear.BigFractionMatrixConverter",
        "src_path": "src/main/java/org/apache/commons/math/linear/MatrixUtils.java",
        "signature": "org.apache.commons.math.linear.BigFractionMatrixConverter.data",
        "snippet": "        private double[][] data;",
        "begin_line": 573,
        "end_line": 573,
        "comment": " Converted array. "
    },
    {
        "class_name": "org.apache.commons.math.optimization.direct.BaseAbstractMultivariateOptimizer",
        "src_path": "src/main/java/org/apache/commons/math/optimization/direct/BaseAbstractMultivariateOptimizer.java",
        "signature": "org.apache.commons.math.optimization.direct.BaseAbstractMultivariateOptimizer.evaluations",
        "snippet": "    protected final Incrementor evaluations = new Incrementor();",
        "begin_line": 44,
        "end_line": 44,
        "comment": " Evaluations counter. "
    },
    {
        "class_name": "org.apache.commons.math.optimization.direct.BaseAbstractMultivariateOptimizer",
        "src_path": "src/main/java/org/apache/commons/math/optimization/direct/BaseAbstractMultivariateOptimizer.java",
        "signature": "org.apache.commons.math.optimization.direct.BaseAbstractMultivariateOptimizer.checker",
        "snippet": "    private ConvergenceChecker<RealPointValuePair> checker;",
        "begin_line": 46,
        "end_line": 46,
        "comment": " Convergence checker. "
    },
    {
        "class_name": "org.apache.commons.math.optimization.direct.BaseAbstractMultivariateOptimizer",
        "src_path": "src/main/java/org/apache/commons/math/optimization/direct/BaseAbstractMultivariateOptimizer.java",
        "signature": "org.apache.commons.math.optimization.direct.BaseAbstractMultivariateOptimizer.goal",
        "snippet": "    private GoalType goal;",
        "begin_line": 48,
        "end_line": 48,
        "comment": " Type of optimization. "
    },
    {
        "class_name": "org.apache.commons.math.optimization.direct.BaseAbstractMultivariateOptimizer",
        "src_path": "src/main/java/org/apache/commons/math/optimization/direct/BaseAbstractMultivariateOptimizer.java",
        "signature": "org.apache.commons.math.optimization.direct.BaseAbstractMultivariateOptimizer.start",
        "snippet": "    private double[] start;",
        "begin_line": 50,
        "end_line": 50,
        "comment": " Initial guess. "
    },
    {
        "class_name": "org.apache.commons.math.optimization.direct.BaseAbstractMultivariateOptimizer",
        "src_path": "src/main/java/org/apache/commons/math/optimization/direct/BaseAbstractMultivariateOptimizer.java",
        "signature": "org.apache.commons.math.optimization.direct.BaseAbstractMultivariateOptimizer.function",
        "snippet": "    private MultivariateFunction function;",
        "begin_line": 52,
        "end_line": 52,
        "comment": " Objective function. "
    },
    {
        "class_name": "org.apache.commons.math.optimization.direct.BOBYQAOptimizer",
        "src_path": "src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java",
        "signature": "org.apache.commons.math.optimization.direct.BOBYQAOptimizer.MINIMUM_PROBLEM_DIMENSION",
        "snippet": "    public static final int MINIMUM_PROBLEM_DIMENSION = 2;",
        "begin_line": 56,
        "end_line": 56,
        "comment": " Minimum dimension of the problem: {@value} "
    },
    {
        "class_name": "org.apache.commons.math.optimization.direct.BOBYQAOptimizer",
        "src_path": "src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java",
        "signature": "org.apache.commons.math.optimization.direct.BOBYQAOptimizer.DEFAULT_INITIAL_RADIUS",
        "snippet": "    public static final double DEFAULT_INITIAL_RADIUS = 10.0;",
        "begin_line": 58,
        "end_line": 58,
        "comment": " Default value for {@link #initialTrustRegionRadius}: {@value} . "
    },
    {
        "class_name": "org.apache.commons.math.optimization.direct.BOBYQAOptimizer",
        "src_path": "src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java",
        "signature": "org.apache.commons.math.optimization.direct.BOBYQAOptimizer.DEFAULT_STOPPING_RADIUS",
        "snippet": "    public static final double DEFAULT_STOPPING_RADIUS = 1E-8;",
        "begin_line": 60,
        "end_line": 60,
        "comment": " Default value for {@link #stoppingTrustRegionRadius}: {@value} . "
    },
    {
        "class_name": "org.apache.commons.math.optimization.direct.BOBYQAOptimizer",
        "src_path": "src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java",
        "signature": "org.apache.commons.math.optimization.direct.BOBYQAOptimizer.ZERO",
        "snippet": "    private static final double ZERO = 0d;",
        "begin_line": 62,
        "end_line": 62,
        "comment": ""
    },
    {
        "class_name": "org.apache.commons.math.optimization.direct.BOBYQAOptimizer",
        "src_path": "src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java",
        "signature": "org.apache.commons.math.optimization.direct.BOBYQAOptimizer.ONE",
        "snippet": "    private static final double ONE = 1d;",
        "begin_line": 63,
        "end_line": 63,
        "comment": ""
    },
    {
        "class_name": "org.apache.commons.math.optimization.direct.BOBYQAOptimizer",
        "src_path": "src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java",
        "signature": "org.apache.commons.math.optimization.direct.BOBYQAOptimizer.TWO",
        "snippet": "    private static final double TWO = 2d;",
        "begin_line": 64,
        "end_line": 64,
        "comment": ""
    },
    {
        "class_name": "org.apache.commons.math.optimization.direct.BOBYQAOptimizer",
        "src_path": "src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java",
        "signature": "org.apache.commons.math.optimization.direct.BOBYQAOptimizer.TEN",
        "snippet": "    private static final double TEN = 10d;",
        "begin_line": 65,
        "end_line": 65,
        "comment": ""
    },
    {
        "class_name": "org.apache.commons.math.optimization.direct.BOBYQAOptimizer",
        "src_path": "src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java",
        "signature": "org.apache.commons.math.optimization.direct.BOBYQAOptimizer.SIXTEEN",
        "snippet": "    private static final double SIXTEEN = 16d;",
        "begin_line": 66,
        "end_line": 66,
        "comment": ""
    },
    {
        "class_name": "org.apache.commons.math.optimization.direct.BOBYQAOptimizer",
        "src_path": "src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java",
        "signature": "org.apache.commons.math.optimization.direct.BOBYQAOptimizer.TWO_HUNDRED_FIFTY",
        "snippet": "    private static final double TWO_HUNDRED_FIFTY = 250d;",
        "begin_line": 67,
        "end_line": 67,
        "comment": ""
    },
    {
        "class_name": "org.apache.commons.math.optimization.direct.BOBYQAOptimizer",
        "src_path": "src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java",
        "signature": "org.apache.commons.math.optimization.direct.BOBYQAOptimizer.MINUS_ONE",
        "snippet": "    private static final double MINUS_ONE = -ONE;",
        "begin_line": 68,
        "end_line": 68,
        "comment": ""
    },
    {
        "class_name": "org.apache.commons.math.optimization.direct.BOBYQAOptimizer",
        "src_path": "src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java",
        "signature": "org.apache.commons.math.optimization.direct.BOBYQAOptimizer.HALF",
        "snippet": "    private static final double HALF = ONE / 2;",
        "begin_line": 69,
        "end_line": 69,
        "comment": ""
    },
    {
        "class_name": "org.apache.commons.math.optimization.direct.BOBYQAOptimizer",
        "src_path": "src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java",
        "signature": "org.apache.commons.math.optimization.direct.BOBYQAOptimizer.ONE_OVER_FOUR",
        "snippet": "    private static final double ONE_OVER_FOUR = ONE / 4;",
        "begin_line": 70,
        "end_line": 70,
        "comment": ""
    },
    {
        "class_name": "org.apache.commons.math.optimization.direct.BOBYQAOptimizer",
        "src_path": "src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java",
        "signature": "org.apache.commons.math.optimization.direct.BOBYQAOptimizer.ONE_OVER_EIGHT",
        "snippet": "    private static final double ONE_OVER_EIGHT = ONE / 8;",
        "begin_line": 71,
        "end_line": 71,
        "comment": ""
    },
    {
        "class_name": "org.apache.commons.math.optimization.direct.BOBYQAOptimizer",
        "src_path": "src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java",
        "signature": "org.apache.commons.math.optimization.direct.BOBYQAOptimizer.ONE_OVER_TEN",
        "snippet": "    private static final double ONE_OVER_TEN = ONE / 10;",
        "begin_line": 72,
        "end_line": 72,
        "comment": ""
    },
    {
        "class_name": "org.apache.commons.math.optimization.direct.BOBYQAOptimizer",
        "src_path": "src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java",
        "signature": "org.apache.commons.math.optimization.direct.BOBYQAOptimizer.ONE_OVER_A_THOUSAND",
        "snippet": "    private static final double ONE_OVER_A_THOUSAND = ONE / 1000;",
        "begin_line": 73,
        "end_line": 73,
        "comment": ""
    },
    {
        "class_name": "org.apache.commons.math.optimization.direct.BOBYQAOptimizer",
        "src_path": "src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java",
        "signature": "org.apache.commons.math.optimization.direct.BOBYQAOptimizer.numberOfInterpolationPoints",
        "snippet": "    private final int numberOfInterpolationPoints;",
        "begin_line": 78,
        "end_line": 78,
        "comment": "\n     * numberOfInterpolationPoints XXX\n     "
    },
    {
        "class_name": "org.apache.commons.math.optimization.direct.BOBYQAOptimizer",
        "src_path": "src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java",
        "signature": "org.apache.commons.math.optimization.direct.BOBYQAOptimizer.initialTrustRegionRadius",
        "snippet": "    private double initialTrustRegionRadius;",
        "begin_line": 82,
        "end_line": 82,
        "comment": "\n     * initialTrustRegionRadius XXX\n     "
    },
    {
        "class_name": "org.apache.commons.math.optimization.direct.BOBYQAOptimizer",
        "src_path": "src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java",
        "signature": "org.apache.commons.math.optimization.direct.BOBYQAOptimizer.stoppingTrustRegionRadius",
        "snippet": "    private final double stoppingTrustRegionRadius;",
        "begin_line": 86,
        "end_line": 86,
        "comment": "\n     * stoppingTrustRegionRadius XXX\n     "
    },
    {
        "class_name": "org.apache.commons.math.optimization.direct.BOBYQAOptimizer",
        "src_path": "src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java",
        "signature": "org.apache.commons.math.optimization.direct.BOBYQAOptimizer.isMinimize",
        "snippet": "    private boolean isMinimize;",
        "begin_line": 88,
        "end_line": 88,
        "comment": " Goal type (minimize or maximize). "
    },
    {
        "class_name": "org.apache.commons.math.optimization.direct.BOBYQAOptimizer",
        "src_path": "src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java",
        "signature": "org.apache.commons.math.optimization.direct.BOBYQAOptimizer.currentBest",
        "snippet": "    private ArrayRealVector currentBest;",
        "begin_line": 94,
        "end_line": 94,
        "comment": "\n     * Current best values for the variables to be optimized.\n     * The vector will be changed in-place to contain the values of the least\n     * calculated objective function values.\n     "
    },
    {
        "class_name": "org.apache.commons.math.optimization.direct.BOBYQAOptimizer",
        "src_path": "src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java",
        "signature": "org.apache.commons.math.optimization.direct.BOBYQAOptimizer.boundDifference",
        "snippet": "    private double[] boundDifference;",
        "begin_line": 96,
        "end_line": 96,
        "comment": " Differences between the upper and lower bounds. "
    },
    {
        "class_name": "org.apache.commons.math.optimization.direct.BOBYQAOptimizer",
        "src_path": "src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java",
        "signature": "org.apache.commons.math.optimization.direct.BOBYQAOptimizer.trustRegionCenterInterpolationPointIndex",
        "snippet": "    private int trustRegionCenterInterpolationPointIndex;",
        "begin_line": 100,
        "end_line": 100,
        "comment": "\n     * Index of the interpolation point at the trust region center.\n     "
    },
    {
        "class_name": "org.apache.commons.math.optimization.direct.BOBYQAOptimizer",
        "src_path": "src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java",
        "signature": "org.apache.commons.math.optimization.direct.BOBYQAOptimizer.bMatrix",
        "snippet": "    private Array2DRowRealMatrix bMatrix;",
        "begin_line": 106,
        "end_line": 106,
        "comment": "\n     * Last <em>n</em> columns of matrix H (where <em>n</em> is the dimension\n     * of the problem).\n     * XXX \"bmat\" in the original code.\n     "
    },
    {
        "class_name": "org.apache.commons.math.optimization.direct.BOBYQAOptimizer",
        "src_path": "src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java",
        "signature": "org.apache.commons.math.optimization.direct.BOBYQAOptimizer.zMatrix",
        "snippet": "    private Array2DRowRealMatrix zMatrix;",
        "begin_line": 113,
        "end_line": 113,
        "comment": "\n     * Factorization of the leading <em>npt</em> square submatrix of H, this\n     * factorization being Z Z<sup>T</sup>, which provides both the correct\n     * rank and positive semi-definiteness.\n     * XXX \"zmat\" in the original code.\n     "
    },
    {
        "class_name": "org.apache.commons.math.optimization.direct.BOBYQAOptimizer",
        "src_path": "src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java",
        "signature": "org.apache.commons.math.optimization.direct.BOBYQAOptimizer.interpolationPoints",
        "snippet": "    private Array2DRowRealMatrix interpolationPoints;",
        "begin_line": 118,
        "end_line": 118,
        "comment": "\n     * Coordinates of the interpolation points relative to {@link #originShift}.\n     * XXX \"xpt\" in the original code.\n     "
    },
    {
        "class_name": "org.apache.commons.math.optimization.direct.BOBYQAOptimizer",
        "src_path": "src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java",
        "signature": "org.apache.commons.math.optimization.direct.BOBYQAOptimizer.originShift",
        "snippet": "    private ArrayRealVector originShift;",
        "begin_line": 124,
        "end_line": 124,
        "comment": "\n     * Shift of origin that should reduce the contributions from rounding\n     * errors to values of the model and Lagrange functions.\n     * XXX \"xbase\" in the original code.\n     "
    },
    {
        "class_name": "org.apache.commons.math.optimization.direct.BOBYQAOptimizer",
        "src_path": "src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java",
        "signature": "org.apache.commons.math.optimization.direct.BOBYQAOptimizer.fAtInterpolationPoints",
        "snippet": "    private ArrayRealVector fAtInterpolationPoints;",
        "begin_line": 129,
        "end_line": 129,
        "comment": "\n     * Values of the objective function at the interpolation points.\n     * XXX \"fval\" in the original code.\n     "
    },
    {
        "class_name": "org.apache.commons.math.optimization.direct.BOBYQAOptimizer",
        "src_path": "src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java",
        "signature": "org.apache.commons.math.optimization.direct.BOBYQAOptimizer.trustRegionCenterOffset",
        "snippet": "    private ArrayRealVector trustRegionCenterOffset;",
        "begin_line": 134,
        "end_line": 134,
        "comment": "\n     * Displacement from {@link #originShift} of the trust region center.\n     * XXX \"xopt\" in the original code.\n     "
    },
    {
        "class_name": "org.apache.commons.math.optimization.direct.BOBYQAOptimizer",
        "src_path": "src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java",
        "signature": "org.apache.commons.math.optimization.direct.BOBYQAOptimizer.gradientAtTrustRegionCenter",
        "snippet": "    private ArrayRealVector gradientAtTrustRegionCenter;",
        "begin_line": 140,
        "end_line": 140,
        "comment": "\n     * Gradient of the quadratic model at {@link #originShift} +\n     * {@link #trustRegionCenterOffset}.\n     * XXX \"gopt\" in the original code.\n     "
    },
    {
        "class_name": "org.apache.commons.math.optimization.direct.BOBYQAOptimizer",
        "src_path": "src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java",
        "signature": "org.apache.commons.math.optimization.direct.BOBYQAOptimizer.lowerDifference",
        "snippet": "    private ArrayRealVector lowerDifference;",
        "begin_line": 151,
        "end_line": 151,
        "comment": "\n     * Differences {@link #getLowerBound()} - {@link #originShift}.\n     * All the components of every {@link #trustRegionCenterOffset} are going\n     * to satisfy the bounds<br/>\n     * {@link #getLowerBound() lowerBound}<sub>i</sub> &le;\n     * {@link #trustRegionCenterOffset}<sub>i</sub>,<br/>\n     * with appropriate equalities when {@link #trustRegionCenterOffset} is\n     * on a constraint boundary.\n     * XXX \"sl\" in the original code.\n     "
    },
    {
        "class_name": "org.apache.commons.math.optimization.direct.BOBYQAOptimizer",
        "src_path": "src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java",
        "signature": "org.apache.commons.math.optimization.direct.BOBYQAOptimizer.upperDifference",
        "snippet": "    private ArrayRealVector upperDifference;",
        "begin_line": 162,
        "end_line": 162,
        "comment": "\n     * Differences {@link #getUpperBound()} - {@link #originShift}\n     * All the components of every {@link #trustRegionCenterOffset} are going\n     * to satisfy the bounds<br/>\n     *  {@link #trustRegionCenterOffset}<sub>i</sub> &le;\n     *  {@link #getUpperBound() upperBound}<sub>i</sub>,<br/>\n     * with appropriate equalities when {@link #trustRegionCenterOffset} is\n     * on a constraint boundary.\n     * XXX \"su\" in the original code.\n     "
    },
    {
        "class_name": "org.apache.commons.math.optimization.direct.BOBYQAOptimizer",
        "src_path": "src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java",
        "signature": "org.apache.commons.math.optimization.direct.BOBYQAOptimizer.modelSecondDerivativesParameters",
        "snippet": "    private ArrayRealVector modelSecondDerivativesParameters;",
        "begin_line": 167,
        "end_line": 167,
        "comment": " \n     * Parameters of the implicit second derivatives of the quadratic model.\n     * XXX \"pq\" in the original code.\n     "
    },
    {
        "class_name": "org.apache.commons.math.optimization.direct.BOBYQAOptimizer",
        "src_path": "src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java",
        "signature": "org.apache.commons.math.optimization.direct.BOBYQAOptimizer.newPoint",
        "snippet": "    private ArrayRealVector newPoint;",
        "begin_line": 178,
        "end_line": 178,
        "comment": "\n     * Point chosen by function {@link #trsbox(double,ArrayRealVector,\n     * ArrayRealVector, ArrayRealVector,ArrayRealVector,ArrayRealVector) trsbox}\n     * or {@link #altmov(int,double) altmov}.\n     * Usually {@link #originShift} + {@link #newPoint} is the vector of\n     * variables for the next evaluation of the objective function.\n     * It also satisfies the constraints indicated in {@link #lowerDifference}\n     * and {@link #upperDifference}.\n     * XXX \"xnew\" in the original code.\n     "
    },
    {
        "class_name": "org.apache.commons.math.optimization.direct.BOBYQAOptimizer",
        "src_path": "src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java",
        "signature": "org.apache.commons.math.optimization.direct.BOBYQAOptimizer.alternativeNewPoint",
        "snippet": "    private ArrayRealVector alternativeNewPoint;",
        "begin_line": 186,
        "end_line": 186,
        "comment": "\n     * Alternative to {@link #newPoint}, chosen by\n     * {@link #altmov(int,double) altmov}.\n     * It may replace {@link #newPoint} in order to increase the denominator\n     * in the {@link #update() updating procedure}.\n     * XXX \"xalt\" in the original code.\n     "
    },
    {
        "class_name": "org.apache.commons.math.optimization.direct.BOBYQAOptimizer",
        "src_path": "src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java",
        "signature": "org.apache.commons.math.optimization.direct.BOBYQAOptimizer.trialStepPoint",
        "snippet": "    private ArrayRealVector trialStepPoint;",
        "begin_line": 192,
        "end_line": 192,
        "comment": "\n     * Trial step from {@link #trustRegionCenterOffset} which is usually\n     * {@link #newPoint} - {@link #trustRegionCenterOffset}.\n     * XXX \"d__\" in the original code.\n     "
    },
    {
        "class_name": "org.apache.commons.math.optimization.direct.BOBYQAOptimizer",
        "src_path": "src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java",
        "signature": "org.apache.commons.math.optimization.direct.BOBYQAOptimizer.lagrangeValuesAtNewPoint",
        "snippet": "    private ArrayRealVector lagrangeValuesAtNewPoint;",
        "begin_line": 197,
        "end_line": 197,
        "comment": "\n     * Values of the Lagrange functions at a new point.\n     * XXX \"vlag\" in the original code.\n     "
    },
    {
        "class_name": "org.apache.commons.math.optimization.direct.BOBYQAOptimizer",
        "src_path": "src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java",
        "signature": "org.apache.commons.math.optimization.direct.BOBYQAOptimizer.modelSecondDerivativesValues",
        "snippet": "    private ArrayRealVector modelSecondDerivativesValues;",
        "begin_line": 202,
        "end_line": 202,
        "comment": "\n     * Explicit second derivatives of the quadratic model.\n     * XXX \"hq\" in the original code.\n     "
    },
    {
        "class_name": "org.apache.commons.math.optimization.direct.PathIsExploredException",
        "src_path": "src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java",
        "signature": "org.apache.commons.math.optimization.direct.PathIsExploredException.serialVersionUID",
        "snippet": "        private static final long serialVersionUID = 745350979634801853L;",
        "begin_line": 2473,
        "end_line": 2473,
        "comment": ""
    },
    {
        "class_name": "org.apache.commons.math.optimization.direct.PathIsExploredException",
        "src_path": "src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java",
        "signature": "org.apache.commons.math.optimization.direct.PathIsExploredException.PATH_IS_EXPLORED",
        "snippet": "        private static final String PATH_IS_EXPLORED\n            = \"If this exception is thrown, just remove it from the code\";",
        "begin_line": 2475,
        "end_line": 2476,
        "comment": ""
    },
    {
        "class_name": "org.apache.commons.math.linear.ArrayRealVector",
        "src_path": "src/main/java/org/apache/commons/math/linear/ArrayRealVector.java",
        "signature": "org.apache.commons.math.linear.ArrayRealVector.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -1097961340710804027L;",
        "begin_line": 39,
        "end_line": 39,
        "comment": " Serializable version identifier. "
    },
    {
        "class_name": "org.apache.commons.math.linear.ArrayRealVector",
        "src_path": "src/main/java/org/apache/commons/math/linear/ArrayRealVector.java",
        "signature": "org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT",
        "snippet": "    private static final RealVectorFormat DEFAULT_FORMAT = RealVectorFormat.getInstance();",
        "begin_line": 41,
        "end_line": 41,
        "comment": " Default format. "
    },
    {
        "class_name": "org.apache.commons.math.linear.ArrayRealVector",
        "src_path": "src/main/java/org/apache/commons/math/linear/ArrayRealVector.java",
        "signature": "org.apache.commons.math.linear.ArrayRealVector.data",
        "snippet": "    protected double data[];",
        "begin_line": 43,
        "end_line": 43,
        "comment": " Entries of the vector. "
    },
    {
        "class_name": "org.apache.commons.math.linear.AbstractRealMatrix",
        "src_path": "src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java",
        "signature": "org.apache.commons.math.linear.AbstractRealMatrix.endRow",
        "snippet": "            private double endRow;",
        "begin_line": 235,
        "end_line": 235,
        "comment": " Last row index. "
    },
    {
        "class_name": "org.apache.commons.math.linear.AbstractRealMatrix",
        "src_path": "src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java",
        "signature": "org.apache.commons.math.linear.AbstractRealMatrix.columnSum",
        "snippet": "            private double columnSum;",
        "begin_line": 238,
        "end_line": 238,
        "comment": " Sum of absolute values on one column. "
    },
    {
        "class_name": "org.apache.commons.math.linear.AbstractRealMatrix",
        "src_path": "src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java",
        "signature": "org.apache.commons.math.linear.AbstractRealMatrix.maxColSum",
        "snippet": "            private double maxColSum;",
        "begin_line": 241,
        "end_line": 241,
        "comment": " Maximal sum across all columns. "
    },
    {
        "class_name": "org.apache.commons.math.linear.AbstractRealMatrix",
        "src_path": "src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java",
        "signature": "org.apache.commons.math.linear.AbstractRealMatrix.sum",
        "snippet": "            private double sum;",
        "begin_line": 273,
        "end_line": 273,
        "comment": " Sum of squared entries. "
    },
    {
        "class_name": "org.apache.commons.math.linear.AbstractRealMatrix",
        "src_path": "src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java",
        "signature": "org.apache.commons.math.linear.AbstractRealMatrix.startRow",
        "snippet": "            private int startRow;",
        "begin_line": 348,
        "end_line": 348,
        "comment": " Initial row index. "
    },
    {
        "class_name": "org.apache.commons.math.linear.AbstractRealMatrix",
        "src_path": "src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java",
        "signature": "org.apache.commons.math.linear.AbstractRealMatrix.startColumn",
        "snippet": "            private int startColumn;",
        "begin_line": 351,
        "end_line": 351,
        "comment": " Initial column index. "
    },
    {
        "class_name": "org.apache.commons.math.linear.Array2DRowRealMatrix",
        "src_path": "src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java",
        "signature": "org.apache.commons.math.linear.Array2DRowRealMatrix.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -1067294169172445528L;",
        "begin_line": 37,
        "end_line": 37,
        "comment": " Serializable version identifier. "
    },
    {
        "class_name": "org.apache.commons.math.linear.Array2DRowRealMatrix",
        "src_path": "src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java",
        "signature": "org.apache.commons.math.linear.Array2DRowRealMatrix.data",
        "snippet": "    protected double data[][];",
        "begin_line": 39,
        "end_line": 39,
        "comment": " Entries of the matrix. "
    },
    {
        "class_name": "org.apache.commons.math.linear.RealVectorFormat",
        "src_path": "src/main/java/org/apache/commons/math/linear/RealVectorFormat.java",
        "signature": "org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX",
        "snippet": "    private static final String DEFAULT_PREFIX = \"{\";",
        "begin_line": 47,
        "end_line": 47,
        "comment": " The default prefix: \"{\". "
    },
    {
        "class_name": "org.apache.commons.math.linear.RealVectorFormat",
        "src_path": "src/main/java/org/apache/commons/math/linear/RealVectorFormat.java",
        "signature": "org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX",
        "snippet": "    private static final String DEFAULT_SUFFIX = \"}\";",
        "begin_line": 49,
        "end_line": 49,
        "comment": " The default suffix: \"}\". "
    },
    {
        "class_name": "org.apache.commons.math.linear.RealVectorFormat",
        "src_path": "src/main/java/org/apache/commons/math/linear/RealVectorFormat.java",
        "signature": "org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR",
        "snippet": "    private static final String DEFAULT_SEPARATOR = \"; \";",
        "begin_line": 51,
        "end_line": 51,
        "comment": " The default separator: \", \". "
    },
    {
        "class_name": "org.apache.commons.math.linear.RealVectorFormat",
        "src_path": "src/main/java/org/apache/commons/math/linear/RealVectorFormat.java",
        "signature": "org.apache.commons.math.linear.RealVectorFormat.prefix",
        "snippet": "    private final String prefix;",
        "begin_line": 53,
        "end_line": 53,
        "comment": " Prefix. "
    },
    {
        "class_name": "org.apache.commons.math.linear.RealVectorFormat",
        "src_path": "src/main/java/org/apache/commons/math/linear/RealVectorFormat.java",
        "signature": "org.apache.commons.math.linear.RealVectorFormat.suffix",
        "snippet": "    private final String suffix;",
        "begin_line": 55,
        "end_line": 55,
        "comment": " Suffix. "
    },
    {
        "class_name": "org.apache.commons.math.linear.RealVectorFormat",
        "src_path": "src/main/java/org/apache/commons/math/linear/RealVectorFormat.java",
        "signature": "org.apache.commons.math.linear.RealVectorFormat.separator",
        "snippet": "    private final String separator;",
        "begin_line": 57,
        "end_line": 57,
        "comment": " Separator. "
    },
    {
        "class_name": "org.apache.commons.math.linear.RealVectorFormat",
        "src_path": "src/main/java/org/apache/commons/math/linear/RealVectorFormat.java",
        "signature": "org.apache.commons.math.linear.RealVectorFormat.trimmedPrefix",
        "snippet": "    private final String trimmedPrefix;",
        "begin_line": 59,
        "end_line": 59,
        "comment": " Trimmed prefix. "
    },
    {
        "class_name": "org.apache.commons.math.linear.RealVectorFormat",
        "src_path": "src/main/java/org/apache/commons/math/linear/RealVectorFormat.java",
        "signature": "org.apache.commons.math.linear.RealVectorFormat.trimmedSuffix",
        "snippet": "    private final String trimmedSuffix;",
        "begin_line": 61,
        "end_line": 61,
        "comment": " Trimmed suffix. "
    },
    {
        "class_name": "org.apache.commons.math.linear.RealVectorFormat",
        "src_path": "src/main/java/org/apache/commons/math/linear/RealVectorFormat.java",
        "signature": "org.apache.commons.math.linear.RealVectorFormat.trimmedSeparator",
        "snippet": "    private final String trimmedSeparator;",
        "begin_line": 63,
        "end_line": 63,
        "comment": " Trimmed separator. "
    },
    {
        "class_name": "org.apache.commons.math.linear.RealVectorFormat",
        "src_path": "src/main/java/org/apache/commons/math/linear/RealVectorFormat.java",
        "signature": "org.apache.commons.math.linear.RealVectorFormat.format",
        "snippet": "    private final NumberFormat format;",
        "begin_line": 65,
        "end_line": 65,
        "comment": " The format used for components. "
    },
    {
        "class_name": "org.apache.commons.math.optimization.RealPointValuePair",
        "src_path": "src/main/java/org/apache/commons/math/optimization/RealPointValuePair.java",
        "signature": "org.apache.commons.math.optimization.RealPointValuePair.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 1003888396256744753L;",
        "begin_line": 33,
        "end_line": 33,
        "comment": " Serializable version identifier. "
    },
    {
        "class_name": "org.apache.commons.math.optimization.RealPointValuePair",
        "src_path": "src/main/java/org/apache/commons/math/optimization/RealPointValuePair.java",
        "signature": "org.apache.commons.math.optimization.RealPointValuePair.point",
        "snippet": "    private final double[] point;",
        "begin_line": 35,
        "end_line": 35,
        "comment": " Point coordinates. "
    },
    {
        "class_name": "org.apache.commons.math.optimization.RealPointValuePair",
        "src_path": "src/main/java/org/apache/commons/math/optimization/RealPointValuePair.java",
        "signature": "org.apache.commons.math.optimization.RealPointValuePair.value",
        "snippet": "    private final double value;",
        "begin_line": 37,
        "end_line": 37,
        "comment": " Value of the objective function at the point. "
    },
    {
        "class_name": "org.apache.commons.math.optimization.direct.BaseAbstractMultivariateSimpleBoundsOptimizer",
        "src_path": "src/main/java/org/apache/commons/math/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer.java",
        "signature": "org.apache.commons.math.optimization.direct.BaseAbstractMultivariateSimpleBoundsOptimizer.lowerBound",
        "snippet": "    private double[] lowerBound;",
        "begin_line": 47,
        "end_line": 47,
        "comment": " Lower bounds. "
    },
    {
        "class_name": "org.apache.commons.math.optimization.direct.BaseAbstractMultivariateSimpleBoundsOptimizer",
        "src_path": "src/main/java/org/apache/commons/math/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer.java",
        "signature": "org.apache.commons.math.optimization.direct.BaseAbstractMultivariateSimpleBoundsOptimizer.upperBound",
        "snippet": "    private double[] upperBound;",
        "begin_line": 49,
        "end_line": 49,
        "comment": " Upper bounds. "
    },
    {
        "class_name": "org.apache.commons.math.optimization.AbstractConvergenceChecker",
        "src_path": "src/main/java/org/apache/commons/math/optimization/AbstractConvergenceChecker.java",
        "signature": "org.apache.commons.math.optimization.AbstractConvergenceChecker.DEFAULT_RELATIVE_THRESHOLD",
        "snippet": "    private static final double DEFAULT_RELATIVE_THRESHOLD = 100 * Precision.EPSILON;",
        "begin_line": 35,
        "end_line": 35,
        "comment": "\n     * Default relative threshold.\n     "
    },
    {
        "class_name": "org.apache.commons.math.optimization.AbstractConvergenceChecker",
        "src_path": "src/main/java/org/apache/commons/math/optimization/AbstractConvergenceChecker.java",
        "signature": "org.apache.commons.math.optimization.AbstractConvergenceChecker.DEFAULT_ABSOLUTE_THRESHOLD",
        "snippet": "    private static final double DEFAULT_ABSOLUTE_THRESHOLD = 100 * Precision.SAFE_MIN;",
        "begin_line": 39,
        "end_line": 39,
        "comment": "\n     * Default absolute threshold.\n     "
    },
    {
        "class_name": "org.apache.commons.math.optimization.AbstractConvergenceChecker",
        "src_path": "src/main/java/org/apache/commons/math/optimization/AbstractConvergenceChecker.java",
        "signature": "org.apache.commons.math.optimization.AbstractConvergenceChecker.relativeThreshold",
        "snippet": "    private final double relativeThreshold;",
        "begin_line": 43,
        "end_line": 43,
        "comment": "\n     * Relative tolerance threshold.\n     "
    },
    {
        "class_name": "org.apache.commons.math.optimization.AbstractConvergenceChecker",
        "src_path": "src/main/java/org/apache/commons/math/optimization/AbstractConvergenceChecker.java",
        "signature": "org.apache.commons.math.optimization.AbstractConvergenceChecker.absoluteThreshold",
        "snippet": "    private final double absoluteThreshold;",
        "begin_line": 47,
        "end_line": 47,
        "comment": "\n     * Absolute tolerance threshold.\n     "
    },
    {
        "class_name": "org.apache.commons.math.util.Incrementor",
        "src_path": "src/main/java/org/apache/commons/math/util/Incrementor.java",
        "signature": "org.apache.commons.math.util.Incrementor.maximalCount",
        "snippet": "    private int maximalCount;",
        "begin_line": 36,
        "end_line": 36,
        "comment": "\n     * Upper limit for the counter.\n     "
    },
    {
        "class_name": "org.apache.commons.math.util.Incrementor",
        "src_path": "src/main/java/org/apache/commons/math/util/Incrementor.java",
        "signature": "org.apache.commons.math.util.Incrementor.count",
        "snippet": "    private int count = 0;",
        "begin_line": 40,
        "end_line": 40,
        "comment": "\n     * Current count.\n     "
    },
    {
        "class_name": "org.apache.commons.math.util.Incrementor",
        "src_path": "src/main/java/org/apache/commons/math/util/Incrementor.java",
        "signature": "org.apache.commons.math.util.Incrementor.maxCountCallback",
        "snippet": "    private final MaxCountExceededCallback maxCountCallback;",
        "begin_line": 44,
        "end_line": 44,
        "comment": "\n     * Function called at counter exhaustion.\n     "
    }
]