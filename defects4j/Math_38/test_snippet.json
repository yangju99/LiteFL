[
    {
        "class_name": "org.apache.commons.math.optimization.direct.BOBYQAOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizerTest.java",
        "signature": "org.apache.commons.math.optimization.direct.BOBYQAOptimizerTest.testInitOutOfBounds()",
        "snippet": "    @Test(expected=NumberIsTooLargeException.class)\n    public void testInitOutOfBounds() {\n        double[] startPoint = point(DIM, 3);\n        double[][] boundaries = boundaries(DIM, -1, 2);\n        doTest(new Rosen(), startPoint, boundaries,\n                GoalType.MINIMIZE, \n                1e-13, 1e-6, 2000, null);\n    }\n",
        "begin_line": 39,
        "end_line": 46,
        "comment": "",
        "child_ranges": [
            "(line 41,col 9)-(line 41,col 44)",
            "(line 42,col 9)-(line 42,col 55)",
            "(line 43,col 9)-(line 45,col 41)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.optimization.direct.BOBYQAOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizerTest.java",
        "signature": "org.apache.commons.math.optimization.direct.BOBYQAOptimizerTest.testBoundariesDimensionMismatch()",
        "snippet": "    @Test(expected=DimensionMismatchException.class)\n    public void testBoundariesDimensionMismatch() {\n        double[] startPoint = point(DIM, 0.5);\n        double[][] boundaries = boundaries(DIM + 1, -1, 2);\n        doTest(new Rosen(), startPoint, boundaries,\n               GoalType.MINIMIZE, \n               1e-13, 1e-6, 2000, null);\n    }\n",
        "begin_line": 48,
        "end_line": 55,
        "comment": "",
        "child_ranges": [
            "(line 50,col 9)-(line 50,col 46)",
            "(line 51,col 9)-(line 51,col 59)",
            "(line 52,col 9)-(line 54,col 40)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.optimization.direct.BOBYQAOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizerTest.java",
        "signature": "org.apache.commons.math.optimization.direct.BOBYQAOptimizerTest.testProblemDimensionTooSmall()",
        "snippet": "    @Test(expected=NumberIsTooSmallException.class)\n    public void testProblemDimensionTooSmall() {\n        double[] startPoint = point(1, 0.5);\n        doTest(new Rosen(), startPoint, null,\n               GoalType.MINIMIZE,\n               1e-13, 1e-6, 2000, null);\n    }\n",
        "begin_line": 57,
        "end_line": 63,
        "comment": "",
        "child_ranges": [
            "(line 59,col 9)-(line 59,col 44)",
            "(line 60,col 9)-(line 62,col 40)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.optimization.direct.BOBYQAOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizerTest.java",
        "signature": "org.apache.commons.math.optimization.direct.BOBYQAOptimizerTest.testMaxEvaluations()",
        "snippet": "    @Test(expected=TooManyEvaluationsException.class)\n    public void testMaxEvaluations() {\n        final int lowMaxEval = 2;\n        double[] startPoint = point(DIM, 0.1);\n        double[][] boundaries = null;\n        doTest(new Rosen(), startPoint, boundaries,\n               GoalType.MINIMIZE, \n               1e-13, 1e-6, lowMaxEval, null);\n     }\n",
        "begin_line": 65,
        "end_line": 73,
        "comment": "",
        "child_ranges": [
            "(line 67,col 9)-(line 67,col 33)",
            "(line 68,col 9)-(line 68,col 46)",
            "(line 69,col 9)-(line 69,col 37)",
            "(line 70,col 9)-(line 72,col 46)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.optimization.direct.BOBYQAOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizerTest.java",
        "signature": "org.apache.commons.math.optimization.direct.BOBYQAOptimizerTest.testRosen()",
        "snippet": "    @Test\n    public void testRosen() {\n        double[] startPoint = point(DIM,0.1);\n        double[][] boundaries = null;\n        RealPointValuePair expected = new RealPointValuePair(point(DIM,1.0),0.0);\n        doTest(new Rosen(), startPoint, boundaries,\n                GoalType.MINIMIZE, \n                1e-13, 1e-6, 2000, expected);\n     }\n",
        "begin_line": 75,
        "end_line": 83,
        "comment": "",
        "child_ranges": [
            "(line 77,col 9)-(line 77,col 45)",
            "(line 78,col 9)-(line 78,col 37)",
            "(line 79,col 9)-(line 79,col 81)",
            "(line 80,col 9)-(line 82,col 45)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.optimization.direct.BOBYQAOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizerTest.java",
        "signature": "org.apache.commons.math.optimization.direct.BOBYQAOptimizerTest.testMaximize()",
        "snippet": "    @Test\n    public void testMaximize() {\n        double[] startPoint = point(DIM,1.0);\n        double[][] boundaries = null;\n        RealPointValuePair expected = new RealPointValuePair(point(DIM,0.0),1.0);\n        doTest(new MinusElli(), startPoint, boundaries,\n                GoalType.MAXIMIZE, \n                2e-10, 5e-6, 1000, expected);\n        boundaries = boundaries(DIM,-0.3,0.3); \n        startPoint = point(DIM,0.1);\n        doTest(new MinusElli(), startPoint, boundaries,\n                GoalType.MAXIMIZE, \n                2e-10, 5e-6, 1000, expected);\n    }\n",
        "begin_line": 85,
        "end_line": 98,
        "comment": "",
        "child_ranges": [
            "(line 87,col 9)-(line 87,col 45)",
            "(line 88,col 9)-(line 88,col 37)",
            "(line 89,col 9)-(line 89,col 81)",
            "(line 90,col 9)-(line 92,col 45)",
            "(line 93,col 9)-(line 93,col 46)",
            "(line 94,col 9)-(line 94,col 36)",
            "(line 95,col 9)-(line 97,col 45)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.optimization.direct.BOBYQAOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizerTest.java",
        "signature": "org.apache.commons.math.optimization.direct.BOBYQAOptimizerTest.testEllipse()",
        "snippet": "    @Test\n    public void testEllipse() {\n        double[] startPoint = point(DIM,1.0);\n        double[][] boundaries = null;\n        RealPointValuePair expected =\n            new RealPointValuePair(point(DIM,0.0),0.0);\n        doTest(new Elli(), startPoint, boundaries,\n                GoalType.MINIMIZE, \n                1e-13, 1e-6, 1000, expected);\n     }\n",
        "begin_line": 100,
        "end_line": 109,
        "comment": "",
        "child_ranges": [
            "(line 102,col 9)-(line 102,col 45)",
            "(line 103,col 9)-(line 103,col 37)",
            "(line 104,col 9)-(line 105,col 55)",
            "(line 106,col 9)-(line 108,col 45)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.optimization.direct.BOBYQAOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizerTest.java",
        "signature": "org.apache.commons.math.optimization.direct.BOBYQAOptimizerTest.testElliRotated()",
        "snippet": "    @Test\n    public void testElliRotated() {\n        double[] startPoint = point(DIM,1.0);\n        double[][] boundaries = null;\n        RealPointValuePair expected =\n            new RealPointValuePair(point(DIM,0.0),0.0);\n        doTest(new ElliRotated(), startPoint, boundaries,\n                GoalType.MINIMIZE, \n                1e-12, 1e-6, 10000, expected);\n    }\n",
        "begin_line": 111,
        "end_line": 120,
        "comment": "",
        "child_ranges": [
            "(line 113,col 9)-(line 113,col 45)",
            "(line 114,col 9)-(line 114,col 37)",
            "(line 115,col 9)-(line 116,col 55)",
            "(line 117,col 9)-(line 119,col 46)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.optimization.direct.BOBYQAOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizerTest.java",
        "signature": "org.apache.commons.math.optimization.direct.BOBYQAOptimizerTest.testCigar()",
        "snippet": "    @Test\n    public void testCigar() {\n        double[] startPoint = point(DIM,1.0);\n        double[][] boundaries = null;\n        RealPointValuePair expected =\n            new RealPointValuePair(point(DIM,0.0),0.0);\n        doTest(new Cigar(), startPoint, boundaries,\n                GoalType.MINIMIZE, \n                1e-13, 1e-6, 100, expected);\n    }\n",
        "begin_line": 122,
        "end_line": 131,
        "comment": "",
        "child_ranges": [
            "(line 124,col 9)-(line 124,col 45)",
            "(line 125,col 9)-(line 125,col 37)",
            "(line 126,col 9)-(line 127,col 55)",
            "(line 128,col 9)-(line 130,col 44)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.optimization.direct.BOBYQAOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizerTest.java",
        "signature": "org.apache.commons.math.optimization.direct.BOBYQAOptimizerTest.testTwoAxes()",
        "snippet": "    @Test\n    public void testTwoAxes() {\n        double[] startPoint = point(DIM,1.0);\n        double[][] boundaries = null;\n        RealPointValuePair expected =\n            new RealPointValuePair(point(DIM,0.0),0.0);\n        doTest(new TwoAxes(), startPoint, boundaries,\n                GoalType.MINIMIZE, 2*\n                1e-13, 1e-6, 100, expected);\n     }\n",
        "begin_line": 133,
        "end_line": 142,
        "comment": "",
        "child_ranges": [
            "(line 135,col 9)-(line 135,col 45)",
            "(line 136,col 9)-(line 136,col 37)",
            "(line 137,col 9)-(line 138,col 55)",
            "(line 139,col 9)-(line 141,col 44)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.optimization.direct.BOBYQAOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizerTest.java",
        "signature": "org.apache.commons.math.optimization.direct.BOBYQAOptimizerTest.testCigTab()",
        "snippet": "    @Test\n    public void testCigTab() {\n        double[] startPoint = point(DIM,1.0);\n        double[][] boundaries = null;\n        RealPointValuePair expected =\n            new RealPointValuePair(point(DIM,0.0),0.0);\n        doTest(new CigTab(), startPoint, boundaries,\n                GoalType.MINIMIZE, \n                1e-13, 5e-5, 100, expected);\n     }\n",
        "begin_line": 144,
        "end_line": 153,
        "comment": "",
        "child_ranges": [
            "(line 146,col 9)-(line 146,col 45)",
            "(line 147,col 9)-(line 147,col 37)",
            "(line 148,col 9)-(line 149,col 55)",
            "(line 150,col 9)-(line 152,col 44)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.optimization.direct.BOBYQAOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizerTest.java",
        "signature": "org.apache.commons.math.optimization.direct.BOBYQAOptimizerTest.testSphere()",
        "snippet": "    @Test\n    public void testSphere() {\n        double[] startPoint = point(DIM,1.0);\n        double[][] boundaries = null;\n        RealPointValuePair expected =\n            new RealPointValuePair(point(DIM,0.0),0.0);\n        doTest(new Sphere(), startPoint, boundaries,\n                GoalType.MINIMIZE, \n                1e-13, 1e-6, 100, expected);\n    }\n",
        "begin_line": 155,
        "end_line": 164,
        "comment": "",
        "child_ranges": [
            "(line 157,col 9)-(line 157,col 45)",
            "(line 158,col 9)-(line 158,col 37)",
            "(line 159,col 9)-(line 160,col 55)",
            "(line 161,col 9)-(line 163,col 44)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.optimization.direct.BOBYQAOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizerTest.java",
        "signature": "org.apache.commons.math.optimization.direct.BOBYQAOptimizerTest.testTablet()",
        "snippet": "    @Test\n    public void testTablet() {\n        double[] startPoint = point(DIM,1.0); \n        double[][] boundaries = null;\n        RealPointValuePair expected =\n            new RealPointValuePair(point(DIM,0.0),0.0);\n        doTest(new Tablet(), startPoint, boundaries,\n                GoalType.MINIMIZE, \n                1e-13, 1e-6, 100, expected);\n    }\n",
        "begin_line": 166,
        "end_line": 175,
        "comment": "",
        "child_ranges": [
            "(line 168,col 9)-(line 168,col 45)",
            "(line 169,col 9)-(line 169,col 37)",
            "(line 170,col 9)-(line 171,col 55)",
            "(line 172,col 9)-(line 174,col 44)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.optimization.direct.BOBYQAOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizerTest.java",
        "signature": "org.apache.commons.math.optimization.direct.BOBYQAOptimizerTest.testDiffPow()",
        "snippet": "    @Test\n    public void testDiffPow() {}\n",
        "begin_line": 177,
        "end_line": 178,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.apache.commons.math.optimization.direct.BOBYQAOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizerTest.java",
        "signature": "org.apache.commons.math.optimization.direct.BOBYQAOptimizerTest.testSsDiffPow()",
        "snippet": "    @Test\n    public void testSsDiffPow() {\n        double[] startPoint = point(DIM/2,1.0);\n        double[][] boundaries = null;\n        RealPointValuePair expected =\n            new RealPointValuePair(point(DIM/2,0.0),0.0);\n        doTest(new SsDiffPow(), startPoint, boundaries,\n                GoalType.MINIMIZE, \n                1e-2, 1.3e-1, 50000, expected);\n    }\n",
        "begin_line": 191,
        "end_line": 200,
        "comment": "",
        "child_ranges": [
            "(line 193,col 9)-(line 193,col 47)",
            "(line 194,col 9)-(line 194,col 37)",
            "(line 195,col 9)-(line 196,col 57)",
            "(line 197,col 9)-(line 199,col 47)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.optimization.direct.BOBYQAOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizerTest.java",
        "signature": "org.apache.commons.math.optimization.direct.BOBYQAOptimizerTest.testAckley()",
        "snippet": "    @Test\n    public void testAckley() {}\n",
        "begin_line": 202,
        "end_line": 203,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.apache.commons.math.optimization.direct.BOBYQAOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizerTest.java",
        "signature": "org.apache.commons.math.optimization.direct.BOBYQAOptimizerTest.testRastrigin()",
        "snippet": "    @Test\n    public void testRastrigin() {\n        double[] startPoint = point(DIM,1.0);\n\n        double[][] boundaries = null;\n        RealPointValuePair expected =\n            new RealPointValuePair(point(DIM,0.0),0.0);\n        doTest(new Rastrigin(), startPoint, boundaries,\n                GoalType.MINIMIZE, \n                1e-13, 1e-6, 1000, expected);\n    }\n",
        "begin_line": 216,
        "end_line": 226,
        "comment": "",
        "child_ranges": [
            "(line 218,col 9)-(line 218,col 45)",
            "(line 220,col 9)-(line 220,col 37)",
            "(line 221,col 9)-(line 222,col 55)",
            "(line 223,col 9)-(line 225,col 45)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.optimization.direct.BOBYQAOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizerTest.java",
        "signature": "org.apache.commons.math.optimization.direct.BOBYQAOptimizerTest.testConstrainedRosen()",
        "snippet": "    @Test\n    public void testConstrainedRosen() {\n        double[] startPoint = point(DIM,0.1);\n\n        double[][] boundaries = boundaries(DIM,-1,2);\n        RealPointValuePair expected =\n            new RealPointValuePair(point(DIM,1.0),0.0);\n        doTest(new Rosen(), startPoint, boundaries,\n                GoalType.MINIMIZE,\n                1e-13, 1e-6, 2000, expected);\n    }\n",
        "begin_line": 228,
        "end_line": 238,
        "comment": "",
        "child_ranges": [
            "(line 230,col 9)-(line 230,col 45)",
            "(line 232,col 9)-(line 232,col 53)",
            "(line 233,col 9)-(line 234,col 55)",
            "(line 235,col 9)-(line 237,col 45)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.optimization.direct.BOBYQAOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizerTest.java",
        "signature": "org.apache.commons.math.optimization.direct.BOBYQAOptimizerTest.testConstrainedRosenWithMoreInterpolationPoints()",
        "snippet": "    @Test\n    public void testConstrainedRosenWithMoreInterpolationPoints() {\n        final double[] startPoint = point(DIM, 0.1);\n        final double[][] boundaries = boundaries(DIM, -1, 2);\n        final RealPointValuePair expected = new RealPointValuePair(point(DIM, 1.0), 0.0);\n\n        // This should have been 78 because in the code the hard limit is\n        // said to be\n        //   ((DIM + 1) * (DIM + 2)) / 2 - (2 * DIM + 1)\n        // i.e. 78 in this case, but the test fails for 48, 59, 62, 63, 64,\n        // 65, 66, ...\n        final int maxAdditionalPoints = 47;\n\n        for (int num = 1; num <= maxAdditionalPoints; num++) {\n            doTest(new Rosen(), startPoint, boundaries,\n                   GoalType.MINIMIZE,\n                   1e-12, 1e-6, 2000,\n                   num,\n                   expected,\n                   \"num=\" + num);\n        }\n    }\n",
        "begin_line": 241,
        "end_line": 262,
        "comment": " See MATH-728",
        "child_ranges": [
            "(line 243,col 9)-(line 243,col 52)",
            "(line 244,col 9)-(line 244,col 61)",
            "(line 245,col 9)-(line 245,col 89)",
            "(line 252,col 9)-(line 252,col 43)",
            "(line 254,col 9)-(line 261,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.optimization.direct.BOBYQAOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizerTest.java",
        "signature": "org.apache.commons.math.optimization.direct.BOBYQAOptimizerTest.doTest(org.apache.commons.math.analysis.MultivariateFunction, double[], double[][], org.apache.commons.math.optimization.GoalType, double, double, int, org.apache.commons.math.optimization.RealPointValuePair)",
        "snippet": "    private void doTest(MultivariateFunction func,\n                        double[] startPoint,\n                        double[][] boundaries,\n                        GoalType goal,\n                        double fTol,\n                        double pointTol,\n                        int maxEvaluations,\n                        RealPointValuePair expected) {\n        doTest(func,\n               startPoint,\n               boundaries,\n               goal,\n               fTol,\n               pointTol,\n               maxEvaluations,\n               0,\n               expected,\n               \"\");\n    }\n",
        "begin_line": 274,
        "end_line": 292,
        "comment": "\n     * @param func Function to optimize.\n     * @param startPoint Starting point.\n     * @param boundaries Upper / lower point limit.\n     * @param goal Minimization or maximization.\n     * @param fTol Tolerance relative error on the objective function.\n     * @param pointTol Tolerance for checking that the optimum is correct.\n     * @param maxEvaluations Maximum number of evaluations.\n     * @param expected Expected point / value.\n     ",
        "child_ranges": [
            "(line 282,col 9)-(line 291,col 19)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.optimization.direct.BOBYQAOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizerTest.java",
        "signature": "org.apache.commons.math.optimization.direct.BOBYQAOptimizerTest.doTest(org.apache.commons.math.analysis.MultivariateFunction, double[], double[][], org.apache.commons.math.optimization.GoalType, double, double, int, int, org.apache.commons.math.optimization.RealPointValuePair, java.lang.String)",
        "snippet": "    private void doTest(MultivariateFunction func,\n                        double[] startPoint,\n                        double[][] boundaries,\n                        GoalType goal,\n                        double fTol,\n                        double pointTol,\n                        int maxEvaluations,\n                        int additionalInterpolationPoints,\n                        RealPointValuePair expected,\n                        String assertMsg) {\n\n        System.out.println(func.getClass().getName() + \" BEGIN\"); // XXX\n\n        int dim = startPoint.length;\n//        MultivariateOptimizer optim =\n//            new PowellOptimizer(1e-13, Math.ulp(1d));\n//        RealPointValuePair result = optim.optimize(100000, func, goal, startPoint);\n        final double[] lB = boundaries == null ? null : boundaries[0];\n        final double[] uB = boundaries == null ? null : boundaries[1];\n        final int numIterpolationPoints = 2 * dim + 1 + additionalInterpolationPoints;\n        BOBYQAOptimizer optim = new BOBYQAOptimizer(numIterpolationPoints);\n        RealPointValuePair result = optim.optimize(maxEvaluations, func, goal, startPoint, lB, uB);\n//        System.out.println(func.getClass().getName() + \" = \" \n//              + optim.getEvaluations() + \" f(\");\n//        for (double x: result.getPoint())  System.out.print(x + \" \");\n//        System.out.println(\") = \" +  result.getValue());\n        Assert.assertEquals(assertMsg, expected.getValue(), result.getValue(), fTol);\n        for (int i = 0; i < dim; i++) {\n            Assert.assertEquals(expected.getPoint()[i],\n                                result.getPoint()[i], pointTol);\n        }\n\n        System.out.println(func.getClass().getName() + \" END\"); // XXX\n    }\n",
        "begin_line": 306,
        "end_line": 339,
        "comment": "\n     * @param func Function to optimize.\n     * @param startPoint Starting point.\n     * @param boundaries Upper / lower point limit.\n     * @param goal Minimization or maximization.\n     * @param fTol Tolerance relative error on the objective function.\n     * @param pointTol Tolerance for checking that the optimum is correct.\n     * @param maxEvaluations Maximum number of evaluations.\n     * @param additionalInterpolationPoints Number of interpolation to used\n     * in addition to the default (2 * dim + 1).\n     * @param expected Expected point / value.\n     ",
        "child_ranges": [
            "(line 317,col 9)-(line 317,col 65)",
            "(line 319,col 9)-(line 319,col 36)",
            "(line 323,col 9)-(line 323,col 70)",
            "(line 324,col 9)-(line 324,col 70)",
            "(line 325,col 9)-(line 325,col 86)",
            "(line 326,col 9)-(line 326,col 75)",
            "(line 327,col 9)-(line 327,col 99)",
            "(line 332,col 9)-(line 332,col 85)",
            "(line 333,col 9)-(line 336,col 9)",
            "(line 338,col 9)-(line 338,col 63)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.optimization.direct.BOBYQAOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizerTest.java",
        "signature": "org.apache.commons.math.optimization.direct.BOBYQAOptimizerTest.point(int, double)",
        "snippet": "    private static double[] point(int n, double value) {\n        double[] ds = new double[n];\n        Arrays.fill(ds, value);\n        return ds;\n    }\n",
        "begin_line": 341,
        "end_line": 345,
        "comment": "",
        "child_ranges": [
            "(line 342,col 9)-(line 342,col 36)",
            "(line 343,col 9)-(line 343,col 31)",
            "(line 344,col 9)-(line 344,col 18)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.optimization.direct.BOBYQAOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizerTest.java",
        "signature": "org.apache.commons.math.optimization.direct.BOBYQAOptimizerTest.boundaries(int, double, double)",
        "snippet": "    private static double[][] boundaries(int dim,\n            double lower, double upper) {\n        double[][] boundaries = new double[2][dim];\n        for (int i = 0; i < dim; i++)\n            boundaries[0][i] = lower;\n        for (int i = 0; i < dim; i++)\n            boundaries[1][i] = upper;\n        return boundaries;\n    }\n",
        "begin_line": 347,
        "end_line": 355,
        "comment": "",
        "child_ranges": [
            "(line 349,col 9)-(line 349,col 51)",
            "(line 350,col 9)-(line 351,col 37)",
            "(line 352,col 9)-(line 353,col 37)",
            "(line 354,col 9)-(line 354,col 26)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.optimization.direct.BOBYQAOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizerTest.java",
        "signature": "org.apache.commons.math.optimization.direct.BOBYQAOptimizerTest.Sphere.value(double[])",
        "snippet": "        public double value(double[] x) {\n            double f = 0;\n            for (int i = 0; i < x.length; ++i)\n                f += x[i] * x[i];\n            return f;\n        }\n",
        "begin_line": 359,
        "end_line": 364,
        "comment": "",
        "child_ranges": [
            "(line 360,col 13)-(line 360,col 25)",
            "(line 361,col 13)-(line 362,col 33)",
            "(line 363,col 13)-(line 363,col 21)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.optimization.direct.BOBYQAOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizerTest.java",
        "signature": "org.apache.commons.math.optimization.direct.BOBYQAOptimizerTest.Cigar.Cigar()",
        "snippet": "        Cigar() {\n            this(1e3);\n        }\n",
        "begin_line": 370,
        "end_line": 372,
        "comment": "",
        "child_ranges": [
            "(line 371,col 13)-(line 371,col 22)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.optimization.direct.BOBYQAOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizerTest.java",
        "signature": "org.apache.commons.math.optimization.direct.BOBYQAOptimizerTest.Cigar.Cigar(double)",
        "snippet": "        Cigar(double axisratio) {\n            factor = axisratio * axisratio;\n        }\n",
        "begin_line": 374,
        "end_line": 376,
        "comment": "",
        "child_ranges": [
            "(line 375,col 13)-(line 375,col 43)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.optimization.direct.BOBYQAOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizerTest.java",
        "signature": "org.apache.commons.math.optimization.direct.BOBYQAOptimizerTest.Cigar.value(double[])",
        "snippet": "        public double value(double[] x) {\n            double f = x[0] * x[0];\n            for (int i = 1; i < x.length; ++i)\n                f += factor * x[i] * x[i];\n            return f;\n        }\n",
        "begin_line": 378,
        "end_line": 383,
        "comment": "",
        "child_ranges": [
            "(line 379,col 13)-(line 379,col 35)",
            "(line 380,col 13)-(line 381,col 42)",
            "(line 382,col 13)-(line 382,col 21)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.optimization.direct.BOBYQAOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizerTest.java",
        "signature": "org.apache.commons.math.optimization.direct.BOBYQAOptimizerTest.Tablet.Tablet()",
        "snippet": "        Tablet() {\n            this(1e3);\n        }\n",
        "begin_line": 389,
        "end_line": 391,
        "comment": "",
        "child_ranges": [
            "(line 390,col 13)-(line 390,col 22)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.optimization.direct.BOBYQAOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizerTest.java",
        "signature": "org.apache.commons.math.optimization.direct.BOBYQAOptimizerTest.Tablet.Tablet(double)",
        "snippet": "        Tablet(double axisratio) {\n            factor = axisratio * axisratio;\n        }\n",
        "begin_line": 393,
        "end_line": 395,
        "comment": "",
        "child_ranges": [
            "(line 394,col 13)-(line 394,col 43)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.optimization.direct.BOBYQAOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizerTest.java",
        "signature": "org.apache.commons.math.optimization.direct.BOBYQAOptimizerTest.Tablet.value(double[])",
        "snippet": "        public double value(double[] x) {\n            double f = factor * x[0] * x[0];\n            for (int i = 1; i < x.length; ++i)\n                f += x[i] * x[i];\n            return f;\n        }\n",
        "begin_line": 397,
        "end_line": 402,
        "comment": "",
        "child_ranges": [
            "(line 398,col 13)-(line 398,col 44)",
            "(line 399,col 13)-(line 400,col 33)",
            "(line 401,col 13)-(line 401,col 21)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.optimization.direct.BOBYQAOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizerTest.java",
        "signature": "org.apache.commons.math.optimization.direct.BOBYQAOptimizerTest.CigTab.CigTab()",
        "snippet": "        CigTab() {\n            this(1e4);\n        }\n",
        "begin_line": 408,
        "end_line": 410,
        "comment": "",
        "child_ranges": [
            "(line 409,col 13)-(line 409,col 22)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.optimization.direct.BOBYQAOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizerTest.java",
        "signature": "org.apache.commons.math.optimization.direct.BOBYQAOptimizerTest.CigTab.CigTab(double)",
        "snippet": "        CigTab(double axisratio) {\n            factor = axisratio;\n        }\n",
        "begin_line": 412,
        "end_line": 414,
        "comment": "",
        "child_ranges": [
            "(line 413,col 13)-(line 413,col 31)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.optimization.direct.BOBYQAOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizerTest.java",
        "signature": "org.apache.commons.math.optimization.direct.BOBYQAOptimizerTest.CigTab.value(double[])",
        "snippet": "        public double value(double[] x) {\n            int end = x.length - 1;\n            double f = x[0] * x[0] / factor + factor * x[end] * x[end];\n            for (int i = 1; i < end; ++i)\n                f += x[i] * x[i];\n            return f;\n        }\n",
        "begin_line": 416,
        "end_line": 422,
        "comment": "",
        "child_ranges": [
            "(line 417,col 13)-(line 417,col 35)",
            "(line 418,col 13)-(line 418,col 71)",
            "(line 419,col 13)-(line 420,col 33)",
            "(line 421,col 13)-(line 421,col 21)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.optimization.direct.BOBYQAOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizerTest.java",
        "signature": "org.apache.commons.math.optimization.direct.BOBYQAOptimizerTest.TwoAxes.TwoAxes()",
        "snippet": "        TwoAxes() {\n            this(1e6);\n        }\n",
        "begin_line": 429,
        "end_line": 431,
        "comment": "",
        "child_ranges": [
            "(line 430,col 13)-(line 430,col 22)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.optimization.direct.BOBYQAOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizerTest.java",
        "signature": "org.apache.commons.math.optimization.direct.BOBYQAOptimizerTest.TwoAxes.TwoAxes(double)",
        "snippet": "        TwoAxes(double axisratio) {\n            factor = axisratio * axisratio;\n        }\n",
        "begin_line": 433,
        "end_line": 435,
        "comment": "",
        "child_ranges": [
            "(line 434,col 13)-(line 434,col 43)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.optimization.direct.BOBYQAOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizerTest.java",
        "signature": "org.apache.commons.math.optimization.direct.BOBYQAOptimizerTest.TwoAxes.value(double[])",
        "snippet": "        public double value(double[] x) {\n            double f = 0;\n            for (int i = 0; i < x.length; ++i)\n                f += (i < x.length / 2 ? factor : 1) * x[i] * x[i];\n            return f;\n        }\n",
        "begin_line": 437,
        "end_line": 442,
        "comment": "",
        "child_ranges": [
            "(line 438,col 13)-(line 438,col 25)",
            "(line 439,col 13)-(line 440,col 67)",
            "(line 441,col 13)-(line 441,col 21)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.optimization.direct.BOBYQAOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizerTest.java",
        "signature": "org.apache.commons.math.optimization.direct.BOBYQAOptimizerTest.ElliRotated.ElliRotated()",
        "snippet": "        ElliRotated() {\n            this(1e3);\n        }\n",
        "begin_line": 449,
        "end_line": 451,
        "comment": "",
        "child_ranges": [
            "(line 450,col 13)-(line 450,col 22)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.optimization.direct.BOBYQAOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizerTest.java",
        "signature": "org.apache.commons.math.optimization.direct.BOBYQAOptimizerTest.ElliRotated.ElliRotated(double)",
        "snippet": "        ElliRotated(double axisratio) {\n            factor = axisratio * axisratio;\n        }\n",
        "begin_line": 453,
        "end_line": 455,
        "comment": "",
        "child_ranges": [
            "(line 454,col 13)-(line 454,col 43)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.optimization.direct.BOBYQAOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizerTest.java",
        "signature": "org.apache.commons.math.optimization.direct.BOBYQAOptimizerTest.ElliRotated.value(double[])",
        "snippet": "        public double value(double[] x) {\n            double f = 0;\n            x = B.Rotate(x);\n            for (int i = 0; i < x.length; ++i)\n                f += Math.pow(factor, i / (x.length - 1.)) * x[i] * x[i];\n            return f;\n        }\n",
        "begin_line": 457,
        "end_line": 463,
        "comment": "",
        "child_ranges": [
            "(line 458,col 13)-(line 458,col 25)",
            "(line 459,col 13)-(line 459,col 28)",
            "(line 460,col 13)-(line 461,col 73)",
            "(line 462,col 13)-(line 462,col 21)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.optimization.direct.BOBYQAOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizerTest.java",
        "signature": "org.apache.commons.math.optimization.direct.BOBYQAOptimizerTest.Elli.Elli()",
        "snippet": "        Elli() {\n            this(1e3);\n        }\n",
        "begin_line": 470,
        "end_line": 472,
        "comment": "",
        "child_ranges": [
            "(line 471,col 13)-(line 471,col 22)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.optimization.direct.BOBYQAOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizerTest.java",
        "signature": "org.apache.commons.math.optimization.direct.BOBYQAOptimizerTest.Elli.Elli(double)",
        "snippet": "        Elli(double axisratio) {\n            factor = axisratio * axisratio;\n        }\n",
        "begin_line": 474,
        "end_line": 476,
        "comment": "",
        "child_ranges": [
            "(line 475,col 13)-(line 475,col 43)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.optimization.direct.BOBYQAOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizerTest.java",
        "signature": "org.apache.commons.math.optimization.direct.BOBYQAOptimizerTest.Elli.value(double[])",
        "snippet": "        public double value(double[] x) {\n            double f = 0;\n            for (int i = 0; i < x.length; ++i)\n                f += Math.pow(factor, i / (x.length - 1.)) * x[i] * x[i];\n            return f;\n        }\n",
        "begin_line": 478,
        "end_line": 483,
        "comment": "",
        "child_ranges": [
            "(line 479,col 13)-(line 479,col 25)",
            "(line 480,col 13)-(line 481,col 73)",
            "(line 482,col 13)-(line 482,col 21)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.optimization.direct.BOBYQAOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizerTest.java",
        "signature": "org.apache.commons.math.optimization.direct.BOBYQAOptimizerTest.MinusElli.value(double[])",
        "snippet": "        public double value(double[] x) {\n            return 1.0 - elli.value(x);\n        }\n",
        "begin_line": 488,
        "end_line": 490,
        "comment": "",
        "child_ranges": [
            "(line 489,col 13)-(line 489,col 39)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.optimization.direct.BOBYQAOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizerTest.java",
        "signature": "org.apache.commons.math.optimization.direct.BOBYQAOptimizerTest.DiffPow.value(double[])",
        "snippet": "        public double value(double[] x) {\n            double f = 0;\n            for (int i = 0; i < x.length; ++i)\n                f += Math.pow(Math.abs(x[i]), 2. + 10 * (double) i\n                        / (x.length - 1.));\n//            System.out.print(\"\" + (fcount++) + \") \");\n//            for (int i = 0; i < x.length; i++)\n//                System.out.print(x[i] +  \" \");\n//            System.out.println(\" = \" + f);\n            return f;\n        }\n",
        "begin_line": 495,
        "end_line": 505,
        "comment": "        private int fcount = 0;",
        "child_ranges": [
            "(line 496,col 13)-(line 496,col 25)",
            "(line 497,col 13)-(line 499,col 43)",
            "(line 504,col 13)-(line 504,col 21)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.optimization.direct.BOBYQAOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizerTest.java",
        "signature": "org.apache.commons.math.optimization.direct.BOBYQAOptimizerTest.SsDiffPow.value(double[])",
        "snippet": "        public double value(double[] x) {\n            double f = Math.pow(new DiffPow().value(x), 0.25);\n            return f;\n        }\n",
        "begin_line": 510,
        "end_line": 513,
        "comment": "",
        "child_ranges": [
            "(line 511,col 13)-(line 511,col 62)",
            "(line 512,col 13)-(line 512,col 21)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.optimization.direct.BOBYQAOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizerTest.java",
        "signature": "org.apache.commons.math.optimization.direct.BOBYQAOptimizerTest.Rosen.value(double[])",
        "snippet": "        public double value(double[] x) {\n            double f = 0;\n            for (int i = 0; i < x.length - 1; ++i)\n                f += 1e2 * (x[i] * x[i] - x[i + 1]) * (x[i] * x[i] - x[i + 1])\n                + (x[i] - 1.) * (x[i] - 1.);\n            return f;\n        }\n",
        "begin_line": 518,
        "end_line": 524,
        "comment": "",
        "child_ranges": [
            "(line 519,col 13)-(line 519,col 25)",
            "(line 520,col 13)-(line 522,col 44)",
            "(line 523,col 13)-(line 523,col 21)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.optimization.direct.BOBYQAOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizerTest.java",
        "signature": "org.apache.commons.math.optimization.direct.BOBYQAOptimizerTest.Ackley.Ackley(double)",
        "snippet": "        Ackley(double axra) {\n            axisratio = axra;\n        }\n",
        "begin_line": 530,
        "end_line": 532,
        "comment": "",
        "child_ranges": [
            "(line 531,col 13)-(line 531,col 29)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.optimization.direct.BOBYQAOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizerTest.java",
        "signature": "org.apache.commons.math.optimization.direct.BOBYQAOptimizerTest.Ackley.Ackley()",
        "snippet": "        public Ackley() {\n            this(1);\n        }\n",
        "begin_line": 534,
        "end_line": 536,
        "comment": "",
        "child_ranges": [
            "(line 535,col 13)-(line 535,col 20)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.optimization.direct.BOBYQAOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizerTest.java",
        "signature": "org.apache.commons.math.optimization.direct.BOBYQAOptimizerTest.Ackley.value(double[])",
        "snippet": "        public double value(double[] x) {\n            double f = 0;\n            double res2 = 0;\n            double fac = 0;\n            for (int i = 0; i < x.length; ++i) {\n                fac = Math.pow(axisratio, (i - 1.) / (x.length - 1.));\n                f += fac * fac * x[i] * x[i];\n                res2 += Math.cos(2. * Math.PI * fac * x[i]);\n            }\n            f = (20. - 20. * Math.exp(-0.2 * Math.sqrt(f / x.length))\n                    + Math.exp(1.) - Math.exp(res2 / x.length));\n            return f;\n        }\n",
        "begin_line": 538,
        "end_line": 550,
        "comment": "",
        "child_ranges": [
            "(line 539,col 13)-(line 539,col 25)",
            "(line 540,col 13)-(line 540,col 28)",
            "(line 541,col 13)-(line 541,col 27)",
            "(line 542,col 13)-(line 546,col 13)",
            "(line 547,col 13)-(line 548,col 64)",
            "(line 549,col 13)-(line 549,col 21)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.optimization.direct.BOBYQAOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizerTest.java",
        "signature": "org.apache.commons.math.optimization.direct.BOBYQAOptimizerTest.Rastrigin.Rastrigin()",
        "snippet": "        Rastrigin() {\n            this(1, 10);\n        }\n",
        "begin_line": 558,
        "end_line": 560,
        "comment": "",
        "child_ranges": [
            "(line 559,col 13)-(line 559,col 24)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.optimization.direct.BOBYQAOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizerTest.java",
        "signature": "org.apache.commons.math.optimization.direct.BOBYQAOptimizerTest.Rastrigin.Rastrigin(double, double)",
        "snippet": "        Rastrigin(double axisratio, double amplitude) {\n            this.axisratio = axisratio;\n            this.amplitude = amplitude;\n        }\n",
        "begin_line": 562,
        "end_line": 565,
        "comment": "",
        "child_ranges": [
            "(line 563,col 13)-(line 563,col 39)",
            "(line 564,col 13)-(line 564,col 39)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.optimization.direct.BOBYQAOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizerTest.java",
        "signature": "org.apache.commons.math.optimization.direct.BOBYQAOptimizerTest.Rastrigin.value(double[])",
        "snippet": "        public double value(double[] x) {\n            double f = 0;\n            double fac;\n            for (int i = 0; i < x.length; ++i) {\n                fac = Math.pow(axisratio, (i - 1.) / (x.length - 1.));\n                if (i == 0 && x[i] < 0)\n                    fac *= 1.;\n                f += fac * fac * x[i] * x[i] + amplitude\n                * (1. - Math.cos(2. * Math.PI * fac * x[i]));\n            }\n            return f;\n        }\n",
        "begin_line": 567,
        "end_line": 578,
        "comment": "",
        "child_ranges": [
            "(line 568,col 13)-(line 568,col 25)",
            "(line 569,col 13)-(line 569,col 23)",
            "(line 570,col 13)-(line 576,col 13)",
            "(line 577,col 13)-(line 577,col 21)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.optimization.direct.BOBYQAOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizerTest.java",
        "signature": "org.apache.commons.math.optimization.direct.BOBYQAOptimizerTest.Basis.Rotate(double[])",
        "snippet": "        double[] Rotate(double[] x) {\n            GenBasis(x.length);\n            double[] y = new double[x.length];\n            for (int i = 0; i < x.length; ++i) {\n                y[i] = 0;\n                for (int j = 0; j < x.length; ++j)\n                    y[i] += basis[i][j] * x[j];\n            }\n            return y;\n        }\n",
        "begin_line": 585,
        "end_line": 594,
        "comment": "",
        "child_ranges": [
            "(line 586,col 13)-(line 586,col 31)",
            "(line 587,col 13)-(line 587,col 46)",
            "(line 588,col 13)-(line 592,col 13)",
            "(line 593,col 13)-(line 593,col 21)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.optimization.direct.BOBYQAOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizerTest.java",
        "signature": "org.apache.commons.math.optimization.direct.BOBYQAOptimizerTest.Basis.GenBasis(int)",
        "snippet": "        void GenBasis(int DIM) {\n            if (basis != null ? basis.length == DIM : false)\n                return;\n\n            double sp;\n            int i, j, k;\n\n            /* generate orthogonal basis */\n            basis = new double[DIM][DIM];\n            for (i = 0; i < DIM; ++i) {\n                /* sample components gaussian */\n                for (j = 0; j < DIM; ++j)\n                    basis[i][j] = rand.nextGaussian();\n                /* substract projection of previous vectors */\n                for (j = i - 1; j >= 0; --j) {\n                    for (sp = 0., k = 0; k < DIM; ++k)\n                        sp += basis[i][k] * basis[j][k]; /* scalar product */\n                    for (k = 0; k < DIM; ++k)\n                        basis[i][k] -= sp * basis[j][k]; /* substract */\n                }\n                /* normalize */\n                for (sp = 0., k = 0; k < DIM; ++k)\n                    sp += basis[i][k] * basis[i][k]; /* squared norm */\n                for (k = 0; k < DIM; ++k)\n                    basis[i][k] /= Math.sqrt(sp);\n            }\n        }\n",
        "begin_line": 596,
        "end_line": 622,
        "comment": "",
        "child_ranges": [
            "(line 597,col 13)-(line 598,col 23)",
            "(line 600,col 13)-(line 600,col 22)",
            "(line 601,col 13)-(line 601,col 24)",
            "(line 604,col 13)-(line 604,col 41)",
            "(line 605,col 13)-(line 621,col 13)"
        ]
    }
]