[
    {
        "class_name": "org.joda.time.TestDuration_Basics",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDuration_Basics.java",
        "signature": "org.joda.time.TestDuration_Basics.main(java.lang.String[])",
        "snippet": "    public static void main(String[] args) {\n        junit.textui.TestRunner.run(suite());\n    }\n",
        "begin_line": 72,
        "end_line": 74,
        "comment": "",
        "child_ranges": [
            "(line 73,col 9)-(line 73,col 45)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDuration_Basics",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDuration_Basics.java",
        "signature": "org.joda.time.TestDuration_Basics.suite()",
        "snippet": "    public static TestSuite suite() {\n        return new TestSuite(TestDuration_Basics.class);\n    }\n",
        "begin_line": 76,
        "end_line": 78,
        "comment": "",
        "child_ranges": [
            "(line 77,col 9)-(line 77,col 56)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDuration_Basics",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDuration_Basics.java",
        "signature": "org.joda.time.TestDuration_Basics.TestDuration_Basics(java.lang.String)",
        "snippet": "    public TestDuration_Basics(String name) {\n        super(name);\n    }\n",
        "begin_line": 80,
        "end_line": 82,
        "comment": "",
        "child_ranges": [
            "(line 81,col 9)-(line 81,col 20)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDuration_Basics",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDuration_Basics.java",
        "signature": "org.joda.time.TestDuration_Basics.setUp()",
        "snippet": "    protected void setUp() throws Exception {\n        DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);\n        originalDateTimeZone = DateTimeZone.getDefault();\n        originalTimeZone = TimeZone.getDefault();\n        originalLocale = Locale.getDefault();\n        DateTimeZone.setDefault(LONDON);\n        TimeZone.setDefault(TimeZone.getTimeZone(\"Europe/London\"));\n        Locale.setDefault(Locale.UK);\n    }\n",
        "begin_line": 84,
        "end_line": 92,
        "comment": "",
        "child_ranges": [
            "(line 85,col 9)-(line 85,col 59)",
            "(line 86,col 9)-(line 86,col 57)",
            "(line 87,col 9)-(line 87,col 49)",
            "(line 88,col 9)-(line 88,col 45)",
            "(line 89,col 9)-(line 89,col 40)",
            "(line 90,col 9)-(line 90,col 67)",
            "(line 91,col 9)-(line 91,col 37)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDuration_Basics",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDuration_Basics.java",
        "signature": "org.joda.time.TestDuration_Basics.tearDown()",
        "snippet": "    protected void tearDown() throws Exception {\n        DateTimeUtils.setCurrentMillisSystem();\n        DateTimeZone.setDefault(originalDateTimeZone);\n        TimeZone.setDefault(originalTimeZone);\n        Locale.setDefault(originalLocale);\n        originalDateTimeZone = null;\n        originalTimeZone = null;\n        originalLocale = null;\n    }\n",
        "begin_line": 94,
        "end_line": 102,
        "comment": "",
        "child_ranges": [
            "(line 95,col 9)-(line 95,col 47)",
            "(line 96,col 9)-(line 96,col 54)",
            "(line 97,col 9)-(line 97,col 46)",
            "(line 98,col 9)-(line 98,col 42)",
            "(line 99,col 9)-(line 99,col 36)",
            "(line 100,col 9)-(line 100,col 32)",
            "(line 101,col 9)-(line 101,col 30)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDuration_Basics",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDuration_Basics.java",
        "signature": "org.joda.time.TestDuration_Basics.testTest()",
        "snippet": "    public void testTest() {\n        assertEquals(\"2002-06-09T00:00:00.000Z\", new Instant(TEST_TIME_NOW).toString());\n        assertEquals(\"2002-04-05T12:24:00.000Z\", new Instant(TEST_TIME1).toString());\n        assertEquals(\"2003-05-06T14:28:00.000Z\", new Instant(TEST_TIME2).toString());\n    }\n",
        "begin_line": 105,
        "end_line": 109,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 106,col 9)-(line 106,col 88)",
            "(line 107,col 9)-(line 107,col 85)",
            "(line 108,col 9)-(line 108,col 85)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDuration_Basics",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDuration_Basics.java",
        "signature": "org.joda.time.TestDuration_Basics.testGetMillis()",
        "snippet": "    public void testGetMillis() {\n        Duration test = new Duration(0L);\n        assertEquals(0, test.getMillis());\n        \n        test = new Duration(1234567890L);\n        assertEquals(1234567890L, test.getMillis());\n    }\n",
        "begin_line": 112,
        "end_line": 118,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 113,col 9)-(line 113,col 41)",
            "(line 114,col 9)-(line 114,col 42)",
            "(line 116,col 9)-(line 116,col 41)",
            "(line 117,col 9)-(line 117,col 52)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDuration_Basics",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDuration_Basics.java",
        "signature": "org.joda.time.TestDuration_Basics.testEqualsHashCode()",
        "snippet": "    public void testEqualsHashCode() {\n        Duration test1 = new Duration(123L);\n        Duration test2 = new Duration(123L);\n        assertEquals(true, test1.equals(test2));\n        assertEquals(true, test2.equals(test1));\n        assertEquals(true, test1.equals(test1));\n        assertEquals(true, test2.equals(test2));\n        assertEquals(true, test1.hashCode() == test2.hashCode());\n        assertEquals(true, test1.hashCode() == test1.hashCode());\n        assertEquals(true, test2.hashCode() == test2.hashCode());\n        \n        Duration test3 = new Duration(321L);\n        assertEquals(false, test1.equals(test3));\n        assertEquals(false, test2.equals(test3));\n        assertEquals(false, test3.equals(test1));\n        assertEquals(false, test3.equals(test2));\n        assertEquals(false, test1.hashCode() == test3.hashCode());\n        assertEquals(false, test2.hashCode() == test3.hashCode());\n        \n        assertEquals(false, test1.equals(\"Hello\"));\n        assertEquals(true, test1.equals(new MockDuration(123L)));\n    }\n",
        "begin_line": 120,
        "end_line": 141,
        "comment": "",
        "child_ranges": [
            "(line 121,col 9)-(line 121,col 44)",
            "(line 122,col 9)-(line 122,col 44)",
            "(line 123,col 9)-(line 123,col 48)",
            "(line 124,col 9)-(line 124,col 48)",
            "(line 125,col 9)-(line 125,col 48)",
            "(line 126,col 9)-(line 126,col 48)",
            "(line 127,col 9)-(line 127,col 65)",
            "(line 128,col 9)-(line 128,col 65)",
            "(line 129,col 9)-(line 129,col 65)",
            "(line 131,col 9)-(line 131,col 44)",
            "(line 132,col 9)-(line 132,col 49)",
            "(line 133,col 9)-(line 133,col 49)",
            "(line 134,col 9)-(line 134,col 49)",
            "(line 135,col 9)-(line 135,col 49)",
            "(line 136,col 9)-(line 136,col 66)",
            "(line 137,col 9)-(line 137,col 66)",
            "(line 139,col 9)-(line 139,col 51)",
            "(line 140,col 9)-(line 140,col 65)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDuration_Basics",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDuration_Basics.java",
        "signature": "org.joda.time.TestDuration_Basics.MockDuration.MockDuration(long)",
        "snippet": "        public MockDuration(long value) {\n            super();\n            iValue = value;\n        }\n",
        "begin_line": 145,
        "end_line": 148,
        "comment": "",
        "child_ranges": [
            "(line 146,col 13)-(line 146,col 20)",
            "(line 147,col 13)-(line 147,col 27)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDuration_Basics",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDuration_Basics.java",
        "signature": "org.joda.time.TestDuration_Basics.MockDuration.getMillis()",
        "snippet": "        public long getMillis() {\n            return iValue;\n        }\n",
        "begin_line": 149,
        "end_line": 151,
        "comment": "",
        "child_ranges": [
            "(line 150,col 13)-(line 150,col 26)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDuration_Basics",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDuration_Basics.java",
        "signature": "org.joda.time.TestDuration_Basics.testCompareTo()",
        "snippet": "    public void testCompareTo() {\n        Duration test1 = new Duration(123L);\n        Duration test1a = new Duration(123L);\n        assertEquals(0, test1.compareTo(test1a));\n        assertEquals(0, test1a.compareTo(test1));\n        assertEquals(0, test1.compareTo(test1));\n        assertEquals(0, test1a.compareTo(test1a));\n        \n        Duration test2 = new Duration(321L);\n        assertEquals(-1, test1.compareTo(test2));\n        assertEquals(+1, test2.compareTo(test1));\n        \n        assertEquals(+1, test2.compareTo(new MockDuration(123L)));\n        assertEquals(0, test1.compareTo(new MockDuration(123L)));\n        \n        try {\n            test1.compareTo(null);\n            fail();\n        } catch (NullPointerException ex) {}\n//        try {\n//            test1.compareTo(new Long(123L));\n//            fail();\n//        } catch (ClassCastException ex) {}\n    }\n",
        "begin_line": 154,
        "end_line": 177,
        "comment": "",
        "child_ranges": [
            "(line 155,col 9)-(line 155,col 44)",
            "(line 156,col 9)-(line 156,col 45)",
            "(line 157,col 9)-(line 157,col 49)",
            "(line 158,col 9)-(line 158,col 49)",
            "(line 159,col 9)-(line 159,col 48)",
            "(line 160,col 9)-(line 160,col 50)",
            "(line 162,col 9)-(line 162,col 44)",
            "(line 163,col 9)-(line 163,col 49)",
            "(line 164,col 9)-(line 164,col 49)",
            "(line 166,col 9)-(line 166,col 66)",
            "(line 167,col 9)-(line 167,col 65)",
            "(line 169,col 9)-(line 172,col 44)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDuration_Basics",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDuration_Basics.java",
        "signature": "org.joda.time.TestDuration_Basics.testIsEqual()",
        "snippet": "    public void testIsEqual() {\n        Duration test1 = new Duration(123L);\n        Duration test1a = new Duration(123L);\n        assertEquals(true, test1.isEqual(test1a));\n        assertEquals(true, test1a.isEqual(test1));\n        assertEquals(true, test1.isEqual(test1));\n        assertEquals(true, test1a.isEqual(test1a));\n        \n        Duration test2 = new Duration(321L);\n        assertEquals(false, test1.isEqual(test2));\n        assertEquals(false, test2.isEqual(test1));\n        \n        assertEquals(false, test2.isEqual(new MockDuration(123L)));\n        assertEquals(true, test1.isEqual(new MockDuration(123L)));\n        assertEquals(false, test1.isEqual(null));\n        assertEquals(true, new Duration(0L).isEqual(null));\n    }\n",
        "begin_line": 179,
        "end_line": 195,
        "comment": "",
        "child_ranges": [
            "(line 180,col 9)-(line 180,col 44)",
            "(line 181,col 9)-(line 181,col 45)",
            "(line 182,col 9)-(line 182,col 50)",
            "(line 183,col 9)-(line 183,col 50)",
            "(line 184,col 9)-(line 184,col 49)",
            "(line 185,col 9)-(line 185,col 51)",
            "(line 187,col 9)-(line 187,col 44)",
            "(line 188,col 9)-(line 188,col 50)",
            "(line 189,col 9)-(line 189,col 50)",
            "(line 191,col 9)-(line 191,col 67)",
            "(line 192,col 9)-(line 192,col 66)",
            "(line 193,col 9)-(line 193,col 49)",
            "(line 194,col 9)-(line 194,col 59)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDuration_Basics",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDuration_Basics.java",
        "signature": "org.joda.time.TestDuration_Basics.testIsBefore()",
        "snippet": "    public void testIsBefore() {\n        Duration test1 = new Duration(123L);\n        Duration test1a = new Duration(123L);\n        assertEquals(false, test1.isShorterThan(test1a));\n        assertEquals(false, test1a.isShorterThan(test1));\n        assertEquals(false, test1.isShorterThan(test1));\n        assertEquals(false, test1a.isShorterThan(test1a));\n        \n        Duration test2 = new Duration(321L);\n        assertEquals(true, test1.isShorterThan(test2));\n        assertEquals(false, test2.isShorterThan(test1));\n        \n        assertEquals(false, test2.isShorterThan(new MockDuration(123L)));\n        assertEquals(false, test1.isShorterThan(new MockDuration(123L)));\n        assertEquals(false, test1.isShorterThan(null));\n        assertEquals(false, new Duration(0L).isShorterThan(null));\n    }\n",
        "begin_line": 197,
        "end_line": 213,
        "comment": "",
        "child_ranges": [
            "(line 198,col 9)-(line 198,col 44)",
            "(line 199,col 9)-(line 199,col 45)",
            "(line 200,col 9)-(line 200,col 57)",
            "(line 201,col 9)-(line 201,col 57)",
            "(line 202,col 9)-(line 202,col 56)",
            "(line 203,col 9)-(line 203,col 58)",
            "(line 205,col 9)-(line 205,col 44)",
            "(line 206,col 9)-(line 206,col 55)",
            "(line 207,col 9)-(line 207,col 56)",
            "(line 209,col 9)-(line 209,col 73)",
            "(line 210,col 9)-(line 210,col 73)",
            "(line 211,col 9)-(line 211,col 55)",
            "(line 212,col 9)-(line 212,col 66)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDuration_Basics",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDuration_Basics.java",
        "signature": "org.joda.time.TestDuration_Basics.testIsAfter()",
        "snippet": "    public void testIsAfter() {\n        Duration test1 = new Duration(123L);\n        Duration test1a = new Duration(123L);\n        assertEquals(false, test1.isLongerThan(test1a));\n        assertEquals(false, test1a.isLongerThan(test1));\n        assertEquals(false, test1.isLongerThan(test1));\n        assertEquals(false, test1a.isLongerThan(test1a));\n        \n        Duration test2 = new Duration(321L);\n        assertEquals(false, test1.isLongerThan(test2));\n        assertEquals(true, test2.isLongerThan(test1));\n        \n        assertEquals(true, test2.isLongerThan(new MockDuration(123L)));\n        assertEquals(false, test1.isLongerThan(new MockDuration(123L)));\n        assertEquals(true, test1.isLongerThan(null));\n        assertEquals(false, new Duration(0L).isLongerThan(null));\n    }\n",
        "begin_line": 215,
        "end_line": 231,
        "comment": "",
        "child_ranges": [
            "(line 216,col 9)-(line 216,col 44)",
            "(line 217,col 9)-(line 217,col 45)",
            "(line 218,col 9)-(line 218,col 56)",
            "(line 219,col 9)-(line 219,col 56)",
            "(line 220,col 9)-(line 220,col 55)",
            "(line 221,col 9)-(line 221,col 57)",
            "(line 223,col 9)-(line 223,col 44)",
            "(line 224,col 9)-(line 224,col 55)",
            "(line 225,col 9)-(line 225,col 54)",
            "(line 227,col 9)-(line 227,col 71)",
            "(line 228,col 9)-(line 228,col 72)",
            "(line 229,col 9)-(line 229,col 53)",
            "(line 230,col 9)-(line 230,col 65)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDuration_Basics",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDuration_Basics.java",
        "signature": "org.joda.time.TestDuration_Basics.testSerialization()",
        "snippet": "    public void testSerialization() throws Exception {\n        Duration test = new Duration(123L);\n        \n        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n        ObjectOutputStream oos = new ObjectOutputStream(baos);\n        oos.writeObject(test);\n        byte[] bytes = baos.toByteArray();\n        oos.close();\n        \n        ByteArrayInputStream bais = new ByteArrayInputStream(bytes);\n        ObjectInputStream ois = new ObjectInputStream(bais);\n        Duration result = (Duration) ois.readObject();\n        ois.close();\n        \n        assertEquals(test, result);\n    }\n",
        "begin_line": 234,
        "end_line": 249,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 235,col 9)-(line 235,col 43)",
            "(line 237,col 9)-(line 237,col 65)",
            "(line 238,col 9)-(line 238,col 62)",
            "(line 239,col 9)-(line 239,col 30)",
            "(line 240,col 9)-(line 240,col 42)",
            "(line 241,col 9)-(line 241,col 20)",
            "(line 243,col 9)-(line 243,col 68)",
            "(line 244,col 9)-(line 244,col 60)",
            "(line 245,col 9)-(line 245,col 54)",
            "(line 246,col 9)-(line 246,col 20)",
            "(line 248,col 9)-(line 248,col 35)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDuration_Basics",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDuration_Basics.java",
        "signature": "org.joda.time.TestDuration_Basics.testGetStandardSeconds()",
        "snippet": "    public void testGetStandardSeconds() {\n        Duration test = new Duration(0L);\n        assertEquals(0, test.getStandardSeconds());\n        test = new Duration(1L);\n        assertEquals(0, test.getStandardSeconds());\n        test = new Duration(999L);\n        assertEquals(0, test.getStandardSeconds());\n        test = new Duration(1000L);\n        assertEquals(1, test.getStandardSeconds());\n        test = new Duration(1001L);\n        assertEquals(1, test.getStandardSeconds());\n        test = new Duration(1999L);\n        assertEquals(1, test.getStandardSeconds());\n        test = new Duration(2000L);\n        assertEquals(2, test.getStandardSeconds());\n        test = new Duration(-1L);\n        assertEquals(0, test.getStandardSeconds());\n        test = new Duration(-999L);\n        assertEquals(0, test.getStandardSeconds());\n        test = new Duration(-1000L);\n        assertEquals(-1, test.getStandardSeconds());\n    }\n",
        "begin_line": 252,
        "end_line": 273,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 253,col 9)-(line 253,col 41)",
            "(line 254,col 9)-(line 254,col 51)",
            "(line 255,col 9)-(line 255,col 32)",
            "(line 256,col 9)-(line 256,col 51)",
            "(line 257,col 9)-(line 257,col 34)",
            "(line 258,col 9)-(line 258,col 51)",
            "(line 259,col 9)-(line 259,col 35)",
            "(line 260,col 9)-(line 260,col 51)",
            "(line 261,col 9)-(line 261,col 35)",
            "(line 262,col 9)-(line 262,col 51)",
            "(line 263,col 9)-(line 263,col 35)",
            "(line 264,col 9)-(line 264,col 51)",
            "(line 265,col 9)-(line 265,col 35)",
            "(line 266,col 9)-(line 266,col 51)",
            "(line 267,col 9)-(line 267,col 33)",
            "(line 268,col 9)-(line 268,col 51)",
            "(line 269,col 9)-(line 269,col 35)",
            "(line 270,col 9)-(line 270,col 51)",
            "(line 271,col 9)-(line 271,col 36)",
            "(line 272,col 9)-(line 272,col 52)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDuration_Basics",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDuration_Basics.java",
        "signature": "org.joda.time.TestDuration_Basics.testToString()",
        "snippet": "    public void testToString() {\n        long length = (365L + 2L * 30L + 3L * 7L + 4L) * DateTimeConstants.MILLIS_PER_DAY +\n            5L * DateTimeConstants.MILLIS_PER_HOUR +\n            6L * DateTimeConstants.MILLIS_PER_MINUTE +\n            7L * DateTimeConstants.MILLIS_PER_SECOND + 845L;\n        Duration test = new Duration(length);\n        assertEquals(\"PT\" + (length / 1000) + \".\" + (length % 1000) + \"S\", test.toString());\n        \n        assertEquals(\"PT0S\", new Duration(0L).toString());\n        assertEquals(\"PT10S\", new Duration(10000L).toString());\n        assertEquals(\"PT1S\", new Duration(1000L).toString());\n        assertEquals(\"PT12.345S\", new Duration(12345L).toString());\n        assertEquals(\"PT-12.345S\", new Duration(-12345L).toString());\n        assertEquals(\"PT-1.123S\", new Duration(-1123L).toString());\n        assertEquals(\"PT-0.123S\", new Duration(-123L).toString());\n        assertEquals(\"PT-0.012S\", new Duration(-12L).toString());\n        assertEquals(\"PT-0.001S\", new Duration(-1L).toString());\n    }\n",
        "begin_line": 276,
        "end_line": 293,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 277,col 9)-(line 280,col 60)",
            "(line 281,col 9)-(line 281,col 45)",
            "(line 282,col 9)-(line 282,col 92)",
            "(line 284,col 9)-(line 284,col 58)",
            "(line 285,col 9)-(line 285,col 63)",
            "(line 286,col 9)-(line 286,col 61)",
            "(line 287,col 9)-(line 287,col 67)",
            "(line 288,col 9)-(line 288,col 69)",
            "(line 289,col 9)-(line 289,col 67)",
            "(line 290,col 9)-(line 290,col 66)",
            "(line 291,col 9)-(line 291,col 65)",
            "(line 292,col 9)-(line 292,col 64)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDuration_Basics",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDuration_Basics.java",
        "signature": "org.joda.time.TestDuration_Basics.testToDuration1()",
        "snippet": "    public void testToDuration1() {\n        Duration test = new Duration(123L);\n        Duration result = test.toDuration();\n        assertSame(test, result);\n    }\n",
        "begin_line": 296,
        "end_line": 300,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 297,col 9)-(line 297,col 43)",
            "(line 298,col 9)-(line 298,col 44)",
            "(line 299,col 9)-(line 299,col 33)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDuration_Basics",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDuration_Basics.java",
        "signature": "org.joda.time.TestDuration_Basics.testToDuration2()",
        "snippet": "    public void testToDuration2() {\n        MockDuration test = new MockDuration(123L);\n        Duration result = test.toDuration();\n        assertNotSame(test, result);\n        assertEquals(test, result);\n    }\n",
        "begin_line": 302,
        "end_line": 307,
        "comment": "",
        "child_ranges": [
            "(line 303,col 9)-(line 303,col 51)",
            "(line 304,col 9)-(line 304,col 44)",
            "(line 305,col 9)-(line 305,col 36)",
            "(line 306,col 9)-(line 306,col 35)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDuration_Basics",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDuration_Basics.java",
        "signature": "org.joda.time.TestDuration_Basics.testToStandardDays()",
        "snippet": "    public void testToStandardDays() {\n        Duration test = new Duration(0L);\n        assertEquals(Days.days(0), test.toStandardDays());\n        test = new Duration(1L);\n        assertEquals(Days.days(0), test.toStandardDays());\n        test = new Duration(24 * 60 * 60000L - 1);\n        assertEquals(Days.days(0), test.toStandardDays());\n        test = new Duration(24 * 60 * 60000L);\n        assertEquals(Days.days(1), test.toStandardDays());\n        test = new Duration(24 * 60 * 60000L + 1);\n        assertEquals(Days.days(1), test.toStandardDays());\n        test = new Duration(2 * 24 * 60 * 60000L - 1);\n        assertEquals(Days.days(1), test.toStandardDays());\n        test = new Duration(2 * 24 * 60 * 60000L);\n        assertEquals(Days.days(2), test.toStandardDays());\n        test = new Duration(-1L);\n        assertEquals(Days.days(0), test.toStandardDays());\n        test = new Duration(-24 * 60 * 60000L + 1);\n        assertEquals(Days.days(0), test.toStandardDays());\n        test = new Duration(-24 * 60 * 60000L);\n        assertEquals(Days.days(-1), test.toStandardDays());\n    }\n",
        "begin_line": 310,
        "end_line": 331,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 311,col 9)-(line 311,col 41)",
            "(line 312,col 9)-(line 312,col 58)",
            "(line 313,col 9)-(line 313,col 32)",
            "(line 314,col 9)-(line 314,col 58)",
            "(line 315,col 9)-(line 315,col 50)",
            "(line 316,col 9)-(line 316,col 58)",
            "(line 317,col 9)-(line 317,col 46)",
            "(line 318,col 9)-(line 318,col 58)",
            "(line 319,col 9)-(line 319,col 50)",
            "(line 320,col 9)-(line 320,col 58)",
            "(line 321,col 9)-(line 321,col 54)",
            "(line 322,col 9)-(line 322,col 58)",
            "(line 323,col 9)-(line 323,col 50)",
            "(line 324,col 9)-(line 324,col 58)",
            "(line 325,col 9)-(line 325,col 33)",
            "(line 326,col 9)-(line 326,col 58)",
            "(line 327,col 9)-(line 327,col 51)",
            "(line 328,col 9)-(line 328,col 58)",
            "(line 329,col 9)-(line 329,col 47)",
            "(line 330,col 9)-(line 330,col 59)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDuration_Basics",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDuration_Basics.java",
        "signature": "org.joda.time.TestDuration_Basics.testToStandardDays_overflow()",
        "snippet": "    public void testToStandardDays_overflow() {\n        Duration test = new Duration((((long) Integer.MAX_VALUE) + 1) * 24L * 60L * 60000L);\n        try {\n            test.toStandardDays();\n            fail();\n        } catch (ArithmeticException ex) {\n            // expected\n        }\n    }\n",
        "begin_line": 333,
        "end_line": 341,
        "comment": "",
        "child_ranges": [
            "(line 334,col 9)-(line 334,col 92)",
            "(line 335,col 9)-(line 340,col 9)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDuration_Basics",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDuration_Basics.java",
        "signature": "org.joda.time.TestDuration_Basics.testToStandardHours()",
        "snippet": "    public void testToStandardHours() {\n        Duration test = new Duration(0L);\n        assertEquals(Hours.hours(0), test.toStandardHours());\n        test = new Duration(1L);\n        assertEquals(Hours.hours(0), test.toStandardHours());\n        test = new Duration(3600000L - 1);\n        assertEquals(Hours.hours(0), test.toStandardHours());\n        test = new Duration(3600000L);\n        assertEquals(Hours.hours(1), test.toStandardHours());\n        test = new Duration(3600000L + 1);\n        assertEquals(Hours.hours(1), test.toStandardHours());\n        test = new Duration(2 * 3600000L - 1);\n        assertEquals(Hours.hours(1), test.toStandardHours());\n        test = new Duration(2 * 3600000L);\n        assertEquals(Hours.hours(2), test.toStandardHours());\n        test = new Duration(-1L);\n        assertEquals(Hours.hours(0), test.toStandardHours());\n        test = new Duration(-3600000L + 1);\n        assertEquals(Hours.hours(0), test.toStandardHours());\n        test = new Duration(-3600000L);\n        assertEquals(Hours.hours(-1), test.toStandardHours());\n    }\n",
        "begin_line": 344,
        "end_line": 365,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 345,col 9)-(line 345,col 41)",
            "(line 346,col 9)-(line 346,col 61)",
            "(line 347,col 9)-(line 347,col 32)",
            "(line 348,col 9)-(line 348,col 61)",
            "(line 349,col 9)-(line 349,col 42)",
            "(line 350,col 9)-(line 350,col 61)",
            "(line 351,col 9)-(line 351,col 38)",
            "(line 352,col 9)-(line 352,col 61)",
            "(line 353,col 9)-(line 353,col 42)",
            "(line 354,col 9)-(line 354,col 61)",
            "(line 355,col 9)-(line 355,col 46)",
            "(line 356,col 9)-(line 356,col 61)",
            "(line 357,col 9)-(line 357,col 42)",
            "(line 358,col 9)-(line 358,col 61)",
            "(line 359,col 9)-(line 359,col 33)",
            "(line 360,col 9)-(line 360,col 61)",
            "(line 361,col 9)-(line 361,col 43)",
            "(line 362,col 9)-(line 362,col 61)",
            "(line 363,col 9)-(line 363,col 39)",
            "(line 364,col 9)-(line 364,col 62)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDuration_Basics",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDuration_Basics.java",
        "signature": "org.joda.time.TestDuration_Basics.testToStandardHours_overflow()",
        "snippet": "    public void testToStandardHours_overflow() {\n        Duration test = new Duration(((long) Integer.MAX_VALUE) * 3600000L + 3600000L);\n        try {\n            test.toStandardHours();\n            fail();\n        } catch (ArithmeticException ex) {\n            // expected\n        }\n    }\n",
        "begin_line": 367,
        "end_line": 375,
        "comment": "",
        "child_ranges": [
            "(line 368,col 9)-(line 368,col 87)",
            "(line 369,col 9)-(line 374,col 9)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDuration_Basics",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDuration_Basics.java",
        "signature": "org.joda.time.TestDuration_Basics.testToStandardMinutes()",
        "snippet": "    public void testToStandardMinutes() {\n        Duration test = new Duration(0L);\n        assertEquals(Minutes.minutes(0), test.toStandardMinutes());\n        test = new Duration(1L);\n        assertEquals(Minutes.minutes(0), test.toStandardMinutes());\n        test = new Duration(60000L - 1);\n        assertEquals(Minutes.minutes(0), test.toStandardMinutes());\n        test = new Duration(60000L);\n        assertEquals(Minutes.minutes(1), test.toStandardMinutes());\n        test = new Duration(60000L + 1);\n        assertEquals(Minutes.minutes(1), test.toStandardMinutes());\n        test = new Duration(2 * 60000L - 1);\n        assertEquals(Minutes.minutes(1), test.toStandardMinutes());\n        test = new Duration(2 * 60000L);\n        assertEquals(Minutes.minutes(2), test.toStandardMinutes());\n        test = new Duration(-1L);\n        assertEquals(Minutes.minutes(0), test.toStandardMinutes());\n        test = new Duration(-60000L + 1);\n        assertEquals(Minutes.minutes(0), test.toStandardMinutes());\n        test = new Duration(-60000L);\n        assertEquals(Minutes.minutes(-1), test.toStandardMinutes());\n    }\n",
        "begin_line": 378,
        "end_line": 399,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 379,col 9)-(line 379,col 41)",
            "(line 380,col 9)-(line 380,col 67)",
            "(line 381,col 9)-(line 381,col 32)",
            "(line 382,col 9)-(line 382,col 67)",
            "(line 383,col 9)-(line 383,col 40)",
            "(line 384,col 9)-(line 384,col 67)",
            "(line 385,col 9)-(line 385,col 36)",
            "(line 386,col 9)-(line 386,col 67)",
            "(line 387,col 9)-(line 387,col 40)",
            "(line 388,col 9)-(line 388,col 67)",
            "(line 389,col 9)-(line 389,col 44)",
            "(line 390,col 9)-(line 390,col 67)",
            "(line 391,col 9)-(line 391,col 40)",
            "(line 392,col 9)-(line 392,col 67)",
            "(line 393,col 9)-(line 393,col 33)",
            "(line 394,col 9)-(line 394,col 67)",
            "(line 395,col 9)-(line 395,col 41)",
            "(line 396,col 9)-(line 396,col 67)",
            "(line 397,col 9)-(line 397,col 37)",
            "(line 398,col 9)-(line 398,col 68)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDuration_Basics",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDuration_Basics.java",
        "signature": "org.joda.time.TestDuration_Basics.testToStandardMinutes_overflow()",
        "snippet": "    public void testToStandardMinutes_overflow() {\n        Duration test = new Duration(((long) Integer.MAX_VALUE) * 60000L + 60000L);\n        try {\n            test.toStandardMinutes();\n            fail();\n        } catch (ArithmeticException ex) {\n            // expected\n        }\n    }\n",
        "begin_line": 401,
        "end_line": 409,
        "comment": "",
        "child_ranges": [
            "(line 402,col 9)-(line 402,col 83)",
            "(line 403,col 9)-(line 408,col 9)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDuration_Basics",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDuration_Basics.java",
        "signature": "org.joda.time.TestDuration_Basics.testToStandardSeconds()",
        "snippet": "    public void testToStandardSeconds() {\n        Duration test = new Duration(0L);\n        assertEquals(Seconds.seconds(0), test.toStandardSeconds());\n        test = new Duration(1L);\n        assertEquals(Seconds.seconds(0), test.toStandardSeconds());\n        test = new Duration(999L);\n        assertEquals(Seconds.seconds(0), test.toStandardSeconds());\n        test = new Duration(1000L);\n        assertEquals(Seconds.seconds(1), test.toStandardSeconds());\n        test = new Duration(1001L);\n        assertEquals(Seconds.seconds(1), test.toStandardSeconds());\n        test = new Duration(1999L);\n        assertEquals(Seconds.seconds(1), test.toStandardSeconds());\n        test = new Duration(2000L);\n        assertEquals(Seconds.seconds(2), test.toStandardSeconds());\n        test = new Duration(-1L);\n        assertEquals(Seconds.seconds(0), test.toStandardSeconds());\n        test = new Duration(-999L);\n        assertEquals(Seconds.seconds(0), test.toStandardSeconds());\n        test = new Duration(-1000L);\n        assertEquals(Seconds.seconds(-1), test.toStandardSeconds());\n    }\n",
        "begin_line": 412,
        "end_line": 433,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 413,col 9)-(line 413,col 41)",
            "(line 414,col 9)-(line 414,col 67)",
            "(line 415,col 9)-(line 415,col 32)",
            "(line 416,col 9)-(line 416,col 67)",
            "(line 417,col 9)-(line 417,col 34)",
            "(line 418,col 9)-(line 418,col 67)",
            "(line 419,col 9)-(line 419,col 35)",
            "(line 420,col 9)-(line 420,col 67)",
            "(line 421,col 9)-(line 421,col 35)",
            "(line 422,col 9)-(line 422,col 67)",
            "(line 423,col 9)-(line 423,col 35)",
            "(line 424,col 9)-(line 424,col 67)",
            "(line 425,col 9)-(line 425,col 35)",
            "(line 426,col 9)-(line 426,col 67)",
            "(line 427,col 9)-(line 427,col 33)",
            "(line 428,col 9)-(line 428,col 67)",
            "(line 429,col 9)-(line 429,col 35)",
            "(line 430,col 9)-(line 430,col 67)",
            "(line 431,col 9)-(line 431,col 36)",
            "(line 432,col 9)-(line 432,col 68)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDuration_Basics",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDuration_Basics.java",
        "signature": "org.joda.time.TestDuration_Basics.testToStandardSeconds_overflow()",
        "snippet": "    public void testToStandardSeconds_overflow() {\n        Duration test = new Duration(((long) Integer.MAX_VALUE) * 1000L + 1000L);\n        try {\n            test.toStandardSeconds();\n            fail();\n        } catch (ArithmeticException ex) {\n            // expected\n        }\n    }\n",
        "begin_line": 435,
        "end_line": 443,
        "comment": "",
        "child_ranges": [
            "(line 436,col 9)-(line 436,col 81)",
            "(line 437,col 9)-(line 442,col 9)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDuration_Basics",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDuration_Basics.java",
        "signature": "org.joda.time.TestDuration_Basics.testToPeriod()",
        "snippet": "    public void testToPeriod() {\n        DateTimeZone zone = DateTimeZone.getDefault();\n        try {\n            DateTimeZone.setDefault(DateTimeZone.forID(\"Europe/Paris\"));\n            long length =\n                (4L + (3L * 7L) + (2L * 30L) + 365L) * DateTimeConstants.MILLIS_PER_DAY +\n                5L * DateTimeConstants.MILLIS_PER_HOUR +\n                6L * DateTimeConstants.MILLIS_PER_MINUTE +\n                7L * DateTimeConstants.MILLIS_PER_SECOND + 8L;\n            Duration dur = new Duration(length);\n            Period test = dur.toPeriod();\n            assertEquals(0, test.getYears());  // (4 + (3 * 7) + (2 * 30) + 365) == 450\n            assertEquals(0, test.getMonths());\n            assertEquals(0, test.getWeeks());\n            assertEquals(0, test.getDays());\n            assertEquals((450 * 24) + 5, test.getHours());\n            assertEquals(6, test.getMinutes());\n            assertEquals(7, test.getSeconds());\n            assertEquals(8, test.getMillis());\n        } finally {\n            DateTimeZone.setDefault(zone);\n        }\n    }\n",
        "begin_line": 446,
        "end_line": 468,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 447,col 9)-(line 447,col 54)",
            "(line 448,col 9)-(line 467,col 9)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDuration_Basics",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDuration_Basics.java",
        "signature": "org.joda.time.TestDuration_Basics.testToPeriod_fixedZone()",
        "snippet": "    public void testToPeriod_fixedZone() throws Throwable {\n        DateTimeZone zone = DateTimeZone.getDefault();\n        try {\n            DateTimeZone.setDefault(DateTimeZone.forOffsetHours(2));\n            long length =\n                (4L + (3L * 7L) + (2L * 30L) + 365L) * DateTimeConstants.MILLIS_PER_DAY +\n                5L * DateTimeConstants.MILLIS_PER_HOUR +\n                6L * DateTimeConstants.MILLIS_PER_MINUTE +\n                7L * DateTimeConstants.MILLIS_PER_SECOND + 8L;\n            Duration dur = new Duration(length);\n            Period test = dur.toPeriod();\n            assertEquals(0, test.getYears());  // (4 + (3 * 7) + (2 * 30) + 365) == 450\n            assertEquals(0, test.getMonths());\n            assertEquals(0, test.getWeeks());\n            assertEquals(0, test.getDays());\n            assertEquals((450 * 24) + 5, test.getHours());\n            assertEquals(6, test.getMinutes());\n            assertEquals(7, test.getSeconds());\n            assertEquals(8, test.getMillis());\n        } finally {\n            DateTimeZone.setDefault(zone);\n        }\n    }\n",
        "begin_line": 470,
        "end_line": 492,
        "comment": "",
        "child_ranges": [
            "(line 471,col 9)-(line 471,col 54)",
            "(line 472,col 9)-(line 491,col 9)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDuration_Basics",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDuration_Basics.java",
        "signature": "org.joda.time.TestDuration_Basics.testToPeriod_PeriodType()",
        "snippet": "    public void testToPeriod_PeriodType() {\n        long length =\n            (4L + (3L * 7L) + (2L * 30L) + 365L) * DateTimeConstants.MILLIS_PER_DAY +\n            5L * DateTimeConstants.MILLIS_PER_HOUR +\n            6L * DateTimeConstants.MILLIS_PER_MINUTE +\n            7L * DateTimeConstants.MILLIS_PER_SECOND + 8L;\n        Duration test = new Duration(length);\n        Period result = test.toPeriod(PeriodType.standard().withMillisRemoved());\n        assertEquals(new Period(test, PeriodType.standard().withMillisRemoved()), result);\n        assertEquals(new Period(test.getMillis(), PeriodType.standard().withMillisRemoved()), result);\n    }\n",
        "begin_line": 495,
        "end_line": 505,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 496,col 9)-(line 500,col 58)",
            "(line 501,col 9)-(line 501,col 45)",
            "(line 502,col 9)-(line 502,col 81)",
            "(line 503,col 9)-(line 503,col 90)",
            "(line 504,col 9)-(line 504,col 102)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDuration_Basics",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDuration_Basics.java",
        "signature": "org.joda.time.TestDuration_Basics.testToPeriod_Chronology()",
        "snippet": "    public void testToPeriod_Chronology() {\n        long length =\n            (4L + (3L * 7L) + (2L * 30L) + 365L) * DateTimeConstants.MILLIS_PER_DAY +\n            5L * DateTimeConstants.MILLIS_PER_HOUR +\n            6L * DateTimeConstants.MILLIS_PER_MINUTE +\n            7L * DateTimeConstants.MILLIS_PER_SECOND + 8L;\n        Duration test = new Duration(length);\n        Period result = test.toPeriod(ISOChronology.getInstanceUTC());\n        assertEquals(new Period(test, ISOChronology.getInstanceUTC()), result);\n        assertEquals(new Period(test.getMillis(), ISOChronology.getInstanceUTC()), result);\n    }\n",
        "begin_line": 508,
        "end_line": 518,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 509,col 9)-(line 513,col 58)",
            "(line 514,col 9)-(line 514,col 45)",
            "(line 515,col 9)-(line 515,col 70)",
            "(line 516,col 9)-(line 516,col 79)",
            "(line 517,col 9)-(line 517,col 91)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDuration_Basics",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDuration_Basics.java",
        "signature": "org.joda.time.TestDuration_Basics.testToPeriod_PeriodType_Chronology()",
        "snippet": "    public void testToPeriod_PeriodType_Chronology() {\n        long length =\n            (4L + (3L * 7L) + (2L * 30L) + 365L) * DateTimeConstants.MILLIS_PER_DAY +\n            5L * DateTimeConstants.MILLIS_PER_HOUR +\n            6L * DateTimeConstants.MILLIS_PER_MINUTE +\n            7L * DateTimeConstants.MILLIS_PER_SECOND + 8L;\n        Duration test = new Duration(length);\n        Period result = test.toPeriod(PeriodType.standard().withMillisRemoved(), ISOChronology.getInstanceUTC());\n        assertEquals(new Period(test, PeriodType.standard().withMillisRemoved(), ISOChronology.getInstanceUTC()), result);\n        assertEquals(new Period(test.getMillis(), PeriodType.standard().withMillisRemoved(), ISOChronology.getInstanceUTC()), result);\n    }\n",
        "begin_line": 521,
        "end_line": 531,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 522,col 9)-(line 526,col 58)",
            "(line 527,col 9)-(line 527,col 45)",
            "(line 528,col 9)-(line 528,col 113)",
            "(line 529,col 9)-(line 529,col 122)",
            "(line 530,col 9)-(line 530,col 134)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDuration_Basics",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDuration_Basics.java",
        "signature": "org.joda.time.TestDuration_Basics.testToPeriodFrom()",
        "snippet": "    public void testToPeriodFrom() {\n        long length =\n            (4L + (3L * 7L) + (2L * 30L) + 365L) * DateTimeConstants.MILLIS_PER_DAY +\n            5L * DateTimeConstants.MILLIS_PER_HOUR +\n            6L * DateTimeConstants.MILLIS_PER_MINUTE +\n            7L * DateTimeConstants.MILLIS_PER_SECOND + 8L;\n        Duration test = new Duration(length);\n        DateTime dt = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n        Period result = test.toPeriodFrom(dt);\n        assertEquals(new Period(dt, test), result);\n    }\n",
        "begin_line": 534,
        "end_line": 544,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 535,col 9)-(line 539,col 58)",
            "(line 540,col 9)-(line 540,col 45)",
            "(line 541,col 9)-(line 541,col 59)",
            "(line 542,col 9)-(line 542,col 46)",
            "(line 543,col 9)-(line 543,col 51)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDuration_Basics",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDuration_Basics.java",
        "signature": "org.joda.time.TestDuration_Basics.testToPeriodFrom_PeriodType()",
        "snippet": "    public void testToPeriodFrom_PeriodType() {\n        long length =\n            (4L + (3L * 7L) + (2L * 30L) + 365L) * DateTimeConstants.MILLIS_PER_DAY +\n            5L * DateTimeConstants.MILLIS_PER_HOUR +\n            6L * DateTimeConstants.MILLIS_PER_MINUTE +\n            7L * DateTimeConstants.MILLIS_PER_SECOND + 8L;\n        Duration test = new Duration(length);\n        DateTime dt = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n        Period result = test.toPeriodFrom(dt, PeriodType.standard().withMillisRemoved());\n        assertEquals(new Period(dt, test, PeriodType.standard().withMillisRemoved()), result);\n    }\n",
        "begin_line": 547,
        "end_line": 557,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 548,col 9)-(line 552,col 58)",
            "(line 553,col 9)-(line 553,col 45)",
            "(line 554,col 9)-(line 554,col 59)",
            "(line 555,col 9)-(line 555,col 89)",
            "(line 556,col 9)-(line 556,col 94)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDuration_Basics",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDuration_Basics.java",
        "signature": "org.joda.time.TestDuration_Basics.testToPeriodTo()",
        "snippet": "    public void testToPeriodTo() {\n        long length =\n            (4L + (3L * 7L) + (2L * 30L) + 365L) * DateTimeConstants.MILLIS_PER_DAY +\n            5L * DateTimeConstants.MILLIS_PER_HOUR +\n            6L * DateTimeConstants.MILLIS_PER_MINUTE +\n            7L * DateTimeConstants.MILLIS_PER_SECOND + 8L;\n        Duration test = new Duration(length);\n        DateTime dt = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n        Period result = test.toPeriodTo(dt);\n        assertEquals(new Period(test, dt), result);\n    }\n",
        "begin_line": 560,
        "end_line": 570,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 561,col 9)-(line 565,col 58)",
            "(line 566,col 9)-(line 566,col 45)",
            "(line 567,col 9)-(line 567,col 59)",
            "(line 568,col 9)-(line 568,col 44)",
            "(line 569,col 9)-(line 569,col 51)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDuration_Basics",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDuration_Basics.java",
        "signature": "org.joda.time.TestDuration_Basics.testToPeriodTo_PeriodType()",
        "snippet": "    public void testToPeriodTo_PeriodType() {\n        long length =\n            (4L + (3L * 7L) + (2L * 30L) + 365L) * DateTimeConstants.MILLIS_PER_DAY +\n            5L * DateTimeConstants.MILLIS_PER_HOUR +\n            6L * DateTimeConstants.MILLIS_PER_MINUTE +\n            7L * DateTimeConstants.MILLIS_PER_SECOND + 8L;\n        Duration test = new Duration(length);\n        DateTime dt = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n        Period result = test.toPeriodTo(dt, PeriodType.standard().withMillisRemoved());\n        assertEquals(new Period(test, dt, PeriodType.standard().withMillisRemoved()), result);\n    }\n",
        "begin_line": 573,
        "end_line": 583,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 574,col 9)-(line 578,col 58)",
            "(line 579,col 9)-(line 579,col 45)",
            "(line 580,col 9)-(line 580,col 59)",
            "(line 581,col 9)-(line 581,col 87)",
            "(line 582,col 9)-(line 582,col 94)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDuration_Basics",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDuration_Basics.java",
        "signature": "org.joda.time.TestDuration_Basics.testToIntervalFrom()",
        "snippet": "    public void testToIntervalFrom() {\n        long length =\n            (4L + (3L * 7L) + (2L * 30L) + 365L) * DateTimeConstants.MILLIS_PER_DAY +\n            5L * DateTimeConstants.MILLIS_PER_HOUR +\n            6L * DateTimeConstants.MILLIS_PER_MINUTE +\n            7L * DateTimeConstants.MILLIS_PER_SECOND + 8L;\n        Duration test = new Duration(length);\n        DateTime dt = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n        Interval result = test.toIntervalFrom(dt);\n        assertEquals(new Interval(dt, test), result);\n    }\n",
        "begin_line": 586,
        "end_line": 596,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 587,col 9)-(line 591,col 58)",
            "(line 592,col 9)-(line 592,col 45)",
            "(line 593,col 9)-(line 593,col 59)",
            "(line 594,col 9)-(line 594,col 50)",
            "(line 595,col 9)-(line 595,col 53)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDuration_Basics",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDuration_Basics.java",
        "signature": "org.joda.time.TestDuration_Basics.testToIntervalTo()",
        "snippet": "    public void testToIntervalTo() {\n        long length =\n            (4L + (3L * 7L) + (2L * 30L) + 365L) * DateTimeConstants.MILLIS_PER_DAY +\n            5L * DateTimeConstants.MILLIS_PER_HOUR +\n            6L * DateTimeConstants.MILLIS_PER_MINUTE +\n            7L * DateTimeConstants.MILLIS_PER_SECOND + 8L;\n        Duration test = new Duration(length);\n        DateTime dt = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n        Interval result = test.toIntervalTo(dt);\n        assertEquals(new Interval(test, dt), result);\n    }\n",
        "begin_line": 599,
        "end_line": 609,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 600,col 9)-(line 604,col 58)",
            "(line 605,col 9)-(line 605,col 45)",
            "(line 606,col 9)-(line 606,col 59)",
            "(line 607,col 9)-(line 607,col 48)",
            "(line 608,col 9)-(line 608,col 53)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDuration_Basics",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDuration_Basics.java",
        "signature": "org.joda.time.TestDuration_Basics.testWithMillis1()",
        "snippet": "    public void testWithMillis1() {\n        Duration test = new Duration(123L);\n        Duration result = test.withMillis(123L);\n        assertSame(test, result);\n    }\n",
        "begin_line": 612,
        "end_line": 616,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 613,col 9)-(line 613,col 43)",
            "(line 614,col 9)-(line 614,col 48)",
            "(line 615,col 9)-(line 615,col 33)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDuration_Basics",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDuration_Basics.java",
        "signature": "org.joda.time.TestDuration_Basics.testWithMillis2()",
        "snippet": "    public void testWithMillis2() {\n        Duration test = new Duration(123L);\n        Duration result = test.withMillis(1234567890L);\n        assertEquals(1234567890L, result.getMillis());\n    }\n",
        "begin_line": 618,
        "end_line": 622,
        "comment": "",
        "child_ranges": [
            "(line 619,col 9)-(line 619,col 43)",
            "(line 620,col 9)-(line 620,col 55)",
            "(line 621,col 9)-(line 621,col 54)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDuration_Basics",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDuration_Basics.java",
        "signature": "org.joda.time.TestDuration_Basics.testWithDurationAdded_long_int1()",
        "snippet": "    public void testWithDurationAdded_long_int1() {\n        Duration test = new Duration(123L);\n        Duration result = test.withDurationAdded(8000L, 1);\n        assertEquals(8123L, result.getMillis());\n    }\n",
        "begin_line": 625,
        "end_line": 629,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 626,col 9)-(line 626,col 43)",
            "(line 627,col 9)-(line 627,col 59)",
            "(line 628,col 9)-(line 628,col 48)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDuration_Basics",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDuration_Basics.java",
        "signature": "org.joda.time.TestDuration_Basics.testWithDurationAdded_long_int2()",
        "snippet": "    public void testWithDurationAdded_long_int2() {\n        Duration test = new Duration(123L);\n        Duration result = test.withDurationAdded(8000L, 2);\n        assertEquals(16123L, result.getMillis());\n    }\n",
        "begin_line": 631,
        "end_line": 635,
        "comment": "",
        "child_ranges": [
            "(line 632,col 9)-(line 632,col 43)",
            "(line 633,col 9)-(line 633,col 59)",
            "(line 634,col 9)-(line 634,col 49)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDuration_Basics",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDuration_Basics.java",
        "signature": "org.joda.time.TestDuration_Basics.testWithDurationAdded_long_int3()",
        "snippet": "    public void testWithDurationAdded_long_int3() {\n        Duration test = new Duration(123L);\n        Duration result = test.withDurationAdded(8000L, -1);\n        assertEquals((123L - 8000L), result.getMillis());\n    }\n",
        "begin_line": 637,
        "end_line": 641,
        "comment": "",
        "child_ranges": [
            "(line 638,col 9)-(line 638,col 43)",
            "(line 639,col 9)-(line 639,col 60)",
            "(line 640,col 9)-(line 640,col 57)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDuration_Basics",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDuration_Basics.java",
        "signature": "org.joda.time.TestDuration_Basics.testWithDurationAdded_long_int4()",
        "snippet": "    public void testWithDurationAdded_long_int4() {\n        Duration test = new Duration(123L);\n        Duration result = test.withDurationAdded(0L, 1);\n        assertSame(test, result);\n    }\n",
        "begin_line": 643,
        "end_line": 647,
        "comment": "",
        "child_ranges": [
            "(line 644,col 9)-(line 644,col 43)",
            "(line 645,col 9)-(line 645,col 56)",
            "(line 646,col 9)-(line 646,col 33)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDuration_Basics",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDuration_Basics.java",
        "signature": "org.joda.time.TestDuration_Basics.testWithDurationAdded_long_int5()",
        "snippet": "    public void testWithDurationAdded_long_int5() {\n        Duration test = new Duration(123L);\n        Duration result = test.withDurationAdded(8000L, 0);\n        assertSame(test, result);\n    }\n",
        "begin_line": 649,
        "end_line": 653,
        "comment": "",
        "child_ranges": [
            "(line 650,col 9)-(line 650,col 43)",
            "(line 651,col 9)-(line 651,col 59)",
            "(line 652,col 9)-(line 652,col 33)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDuration_Basics",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDuration_Basics.java",
        "signature": "org.joda.time.TestDuration_Basics.testPlus_long1()",
        "snippet": "    public void testPlus_long1() {\n        Duration test = new Duration(123L);\n        Duration result = test.plus(8000L);\n        assertEquals(8123L, result.getMillis());\n    }\n",
        "begin_line": 656,
        "end_line": 660,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 657,col 9)-(line 657,col 43)",
            "(line 658,col 9)-(line 658,col 43)",
            "(line 659,col 9)-(line 659,col 48)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDuration_Basics",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDuration_Basics.java",
        "signature": "org.joda.time.TestDuration_Basics.testPlus_long2()",
        "snippet": "    public void testPlus_long2() {\n        Duration test = new Duration(123L);\n        Duration result = test.plus(0L);\n        assertSame(test, result);\n    }\n",
        "begin_line": 662,
        "end_line": 666,
        "comment": "",
        "child_ranges": [
            "(line 663,col 9)-(line 663,col 43)",
            "(line 664,col 9)-(line 664,col 40)",
            "(line 665,col 9)-(line 665,col 33)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDuration_Basics",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDuration_Basics.java",
        "signature": "org.joda.time.TestDuration_Basics.testMinus_long1()",
        "snippet": "    public void testMinus_long1() {\n        Duration test = new Duration(123L);\n        Duration result = test.minus(8000L);\n        assertEquals(123L - 8000L, result.getMillis());\n    }\n",
        "begin_line": 669,
        "end_line": 673,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 670,col 9)-(line 670,col 43)",
            "(line 671,col 9)-(line 671,col 44)",
            "(line 672,col 9)-(line 672,col 55)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDuration_Basics",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDuration_Basics.java",
        "signature": "org.joda.time.TestDuration_Basics.testMinus_long2()",
        "snippet": "    public void testMinus_long2() {\n        Duration test = new Duration(123L);\n        Duration result = test.minus(0L);\n        assertSame(test, result);\n    }\n",
        "begin_line": 675,
        "end_line": 679,
        "comment": "",
        "child_ranges": [
            "(line 676,col 9)-(line 676,col 43)",
            "(line 677,col 9)-(line 677,col 41)",
            "(line 678,col 9)-(line 678,col 33)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDuration_Basics",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDuration_Basics.java",
        "signature": "org.joda.time.TestDuration_Basics.testWithDurationAdded_RD_int1()",
        "snippet": "    public void testWithDurationAdded_RD_int1() {\n        Duration test = new Duration(123L);\n        Duration result = test.withDurationAdded(new Duration(8000L), 1);\n        assertEquals(8123L, result.getMillis());\n    }\n",
        "begin_line": 682,
        "end_line": 686,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 683,col 9)-(line 683,col 43)",
            "(line 684,col 9)-(line 684,col 73)",
            "(line 685,col 9)-(line 685,col 48)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDuration_Basics",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDuration_Basics.java",
        "signature": "org.joda.time.TestDuration_Basics.testWithDurationAdded_RD_int2()",
        "snippet": "    public void testWithDurationAdded_RD_int2() {\n        Duration test = new Duration(123L);\n        Duration result = test.withDurationAdded(new Duration(8000L), 2);\n        assertEquals(16123L, result.getMillis());\n    }\n",
        "begin_line": 688,
        "end_line": 692,
        "comment": "",
        "child_ranges": [
            "(line 689,col 9)-(line 689,col 43)",
            "(line 690,col 9)-(line 690,col 73)",
            "(line 691,col 9)-(line 691,col 49)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDuration_Basics",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDuration_Basics.java",
        "signature": "org.joda.time.TestDuration_Basics.testWithDurationAdded_RD_int3()",
        "snippet": "    public void testWithDurationAdded_RD_int3() {\n        Duration test = new Duration(123L);\n        Duration result = test.withDurationAdded(new Duration(8000L), -1);\n        assertEquals((123L - 8000L), result.getMillis());\n    }\n",
        "begin_line": 694,
        "end_line": 698,
        "comment": "",
        "child_ranges": [
            "(line 695,col 9)-(line 695,col 43)",
            "(line 696,col 9)-(line 696,col 74)",
            "(line 697,col 9)-(line 697,col 57)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDuration_Basics",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDuration_Basics.java",
        "signature": "org.joda.time.TestDuration_Basics.testWithDurationAdded_RD_int4()",
        "snippet": "    public void testWithDurationAdded_RD_int4() {\n        Duration test = new Duration(123L);\n        Duration result = test.withDurationAdded(new Duration(0L), 1);\n        assertSame(test, result);\n    }\n",
        "begin_line": 700,
        "end_line": 704,
        "comment": "",
        "child_ranges": [
            "(line 701,col 9)-(line 701,col 43)",
            "(line 702,col 9)-(line 702,col 70)",
            "(line 703,col 9)-(line 703,col 33)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDuration_Basics",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDuration_Basics.java",
        "signature": "org.joda.time.TestDuration_Basics.testWithDurationAdded_RD_int5()",
        "snippet": "    public void testWithDurationAdded_RD_int5() {\n        Duration test = new Duration(123L);\n        Duration result = test.withDurationAdded(new Duration(8000L), 0);\n        assertSame(test, result);\n    }\n",
        "begin_line": 706,
        "end_line": 710,
        "comment": "",
        "child_ranges": [
            "(line 707,col 9)-(line 707,col 43)",
            "(line 708,col 9)-(line 708,col 73)",
            "(line 709,col 9)-(line 709,col 33)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDuration_Basics",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDuration_Basics.java",
        "signature": "org.joda.time.TestDuration_Basics.testWithDurationAdded_RD_int6()",
        "snippet": "    public void testWithDurationAdded_RD_int6() {\n        Duration test = new Duration(123L);\n        Duration result = test.withDurationAdded(null, 0);\n        assertSame(test, result);\n    }\n",
        "begin_line": 712,
        "end_line": 716,
        "comment": "",
        "child_ranges": [
            "(line 713,col 9)-(line 713,col 43)",
            "(line 714,col 9)-(line 714,col 58)",
            "(line 715,col 9)-(line 715,col 33)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDuration_Basics",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDuration_Basics.java",
        "signature": "org.joda.time.TestDuration_Basics.testPlus_RD1()",
        "snippet": "    public void testPlus_RD1() {\n        Duration test = new Duration(123L);\n        Duration result = test.plus(new Duration(8000L));\n        assertEquals(8123L, result.getMillis());\n    }\n",
        "begin_line": 719,
        "end_line": 723,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 720,col 9)-(line 720,col 43)",
            "(line 721,col 9)-(line 721,col 57)",
            "(line 722,col 9)-(line 722,col 48)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDuration_Basics",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDuration_Basics.java",
        "signature": "org.joda.time.TestDuration_Basics.testPlus_RD2()",
        "snippet": "    public void testPlus_RD2() {\n        Duration test = new Duration(123L);\n        Duration result = test.plus(new Duration(0L));\n        assertSame(test, result);\n    }\n",
        "begin_line": 725,
        "end_line": 729,
        "comment": "",
        "child_ranges": [
            "(line 726,col 9)-(line 726,col 43)",
            "(line 727,col 9)-(line 727,col 54)",
            "(line 728,col 9)-(line 728,col 33)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDuration_Basics",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDuration_Basics.java",
        "signature": "org.joda.time.TestDuration_Basics.testPlus_RD3()",
        "snippet": "    public void testPlus_RD3() {\n        Duration test = new Duration(123L);\n        Duration result = test.plus(null);\n        assertSame(test, result);\n    }\n",
        "begin_line": 731,
        "end_line": 735,
        "comment": "",
        "child_ranges": [
            "(line 732,col 9)-(line 732,col 43)",
            "(line 733,col 9)-(line 733,col 42)",
            "(line 734,col 9)-(line 734,col 33)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDuration_Basics",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDuration_Basics.java",
        "signature": "org.joda.time.TestDuration_Basics.testMinus_RD1()",
        "snippet": "    public void testMinus_RD1() {\n        Duration test = new Duration(123L);\n        Duration result = test.minus(new Duration(8000L));\n        assertEquals(123L - 8000L, result.getMillis());\n    }\n",
        "begin_line": 738,
        "end_line": 742,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 739,col 9)-(line 739,col 43)",
            "(line 740,col 9)-(line 740,col 58)",
            "(line 741,col 9)-(line 741,col 55)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDuration_Basics",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDuration_Basics.java",
        "signature": "org.joda.time.TestDuration_Basics.testMinus_RD2()",
        "snippet": "    public void testMinus_RD2() {\n        Duration test = new Duration(123L);\n        Duration result = test.minus(new Duration(0L));\n        assertSame(test, result);\n    }\n",
        "begin_line": 744,
        "end_line": 748,
        "comment": "",
        "child_ranges": [
            "(line 745,col 9)-(line 745,col 43)",
            "(line 746,col 9)-(line 746,col 55)",
            "(line 747,col 9)-(line 747,col 33)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDuration_Basics",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDuration_Basics.java",
        "signature": "org.joda.time.TestDuration_Basics.testMinus_RD3()",
        "snippet": "    public void testMinus_RD3() {\n        Duration test = new Duration(123L);\n        Duration result = test.minus(null);\n        assertSame(test, result);\n    }\n",
        "begin_line": 750,
        "end_line": 754,
        "comment": "",
        "child_ranges": [
            "(line 751,col 9)-(line 751,col 43)",
            "(line 752,col 9)-(line 752,col 43)",
            "(line 753,col 9)-(line 753,col 33)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDuration_Basics",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDuration_Basics.java",
        "signature": "org.joda.time.TestDuration_Basics.testMutableDuration()",
        "snippet": "    public void testMutableDuration() {\n        // no MutableDuration, so...\n        MockMutableDuration test = new MockMutableDuration(123L);\n        assertEquals(123L, test.getMillis());\n        \n        test.setMillis(2345L);\n        assertEquals(2345L, test.getMillis());\n    }\n",
        "begin_line": 757,
        "end_line": 764,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 759,col 9)-(line 759,col 65)",
            "(line 760,col 9)-(line 760,col 45)",
            "(line 762,col 9)-(line 762,col 30)",
            "(line 763,col 9)-(line 763,col 46)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDuration_Basics",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDuration_Basics.java",
        "signature": "org.joda.time.TestDuration_Basics.MockMutableDuration.MockMutableDuration(long)",
        "snippet": "        public MockMutableDuration(long duration) {\n            super(duration);\n        }\n",
        "begin_line": 767,
        "end_line": 769,
        "comment": "",
        "child_ranges": [
            "(line 768,col 13)-(line 768,col 28)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDuration_Basics",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDuration_Basics.java",
        "signature": "org.joda.time.TestDuration_Basics.MockMutableDuration.setMillis(long)",
        "snippet": "        public void setMillis(long duration) {\n            super.setMillis(duration);\n        }\n",
        "begin_line": 770,
        "end_line": 772,
        "comment": "",
        "child_ranges": [
            "(line 771,col 13)-(line 771,col 38)"
        ]
    },
    {
        "class_name": "org.joda.time.TestPeriod_Constructors",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestPeriod_Constructors.java",
        "signature": "org.joda.time.TestPeriod_Constructors.main(java.lang.String[])",
        "snippet": "    public static void main(String[] args) {\n        junit.textui.TestRunner.run(suite());\n    }\n",
        "begin_line": 55,
        "end_line": 57,
        "comment": "",
        "child_ranges": [
            "(line 56,col 9)-(line 56,col 45)"
        ]
    },
    {
        "class_name": "org.joda.time.TestPeriod_Constructors",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestPeriod_Constructors.java",
        "signature": "org.joda.time.TestPeriod_Constructors.suite()",
        "snippet": "    public static TestSuite suite() {\n        return new TestSuite(TestPeriod_Constructors.class);\n    }\n",
        "begin_line": 59,
        "end_line": 61,
        "comment": "",
        "child_ranges": [
            "(line 60,col 9)-(line 60,col 60)"
        ]
    },
    {
        "class_name": "org.joda.time.TestPeriod_Constructors",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestPeriod_Constructors.java",
        "signature": "org.joda.time.TestPeriod_Constructors.TestPeriod_Constructors(java.lang.String)",
        "snippet": "    public TestPeriod_Constructors(String name) {\n        super(name);\n    }\n",
        "begin_line": 63,
        "end_line": 65,
        "comment": "",
        "child_ranges": [
            "(line 64,col 9)-(line 64,col 20)"
        ]
    },
    {
        "class_name": "org.joda.time.TestPeriod_Constructors",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestPeriod_Constructors.java",
        "signature": "org.joda.time.TestPeriod_Constructors.setUp()",
        "snippet": "    protected void setUp() throws Exception {\n        DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);\n        originalDateTimeZone = DateTimeZone.getDefault();\n        originalTimeZone = TimeZone.getDefault();\n        originalLocale = Locale.getDefault();\n        DateTimeZone.setDefault(LONDON);\n        TimeZone.setDefault(TimeZone.getTimeZone(\"Europe/London\"));\n        Locale.setDefault(Locale.UK);\n    }\n",
        "begin_line": 67,
        "end_line": 75,
        "comment": "",
        "child_ranges": [
            "(line 68,col 9)-(line 68,col 59)",
            "(line 69,col 9)-(line 69,col 57)",
            "(line 70,col 9)-(line 70,col 49)",
            "(line 71,col 9)-(line 71,col 45)",
            "(line 72,col 9)-(line 72,col 40)",
            "(line 73,col 9)-(line 73,col 67)",
            "(line 74,col 9)-(line 74,col 37)"
        ]
    },
    {
        "class_name": "org.joda.time.TestPeriod_Constructors",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestPeriod_Constructors.java",
        "signature": "org.joda.time.TestPeriod_Constructors.tearDown()",
        "snippet": "    protected void tearDown() throws Exception {\n        DateTimeUtils.setCurrentMillisSystem();\n        DateTimeZone.setDefault(originalDateTimeZone);\n        TimeZone.setDefault(originalTimeZone);\n        Locale.setDefault(originalLocale);\n        originalDateTimeZone = null;\n        originalTimeZone = null;\n        originalLocale = null;\n    }\n",
        "begin_line": 77,
        "end_line": 85,
        "comment": "",
        "child_ranges": [
            "(line 78,col 9)-(line 78,col 47)",
            "(line 79,col 9)-(line 79,col 54)",
            "(line 80,col 9)-(line 80,col 46)",
            "(line 81,col 9)-(line 81,col 42)",
            "(line 82,col 9)-(line 82,col 36)",
            "(line 83,col 9)-(line 83,col 32)",
            "(line 84,col 9)-(line 84,col 30)"
        ]
    },
    {
        "class_name": "org.joda.time.TestPeriod_Constructors",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestPeriod_Constructors.java",
        "signature": "org.joda.time.TestPeriod_Constructors.testConstants()",
        "snippet": "    public void testConstants() throws Throwable {\n        Period test = Period.ZERO;\n        assertEquals(PeriodType.standard(), test.getPeriodType());\n        assertEquals(0, test.getYears());\n        assertEquals(0, test.getMonths());\n        assertEquals(0, test.getWeeks());\n        assertEquals(0, test.getDays());\n        assertEquals(0, test.getHours());\n        assertEquals(0, test.getMinutes());\n        assertEquals(0, test.getSeconds());\n        assertEquals(0, test.getMillis());\n    }\n",
        "begin_line": 88,
        "end_line": 99,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 89,col 9)-(line 89,col 34)",
            "(line 90,col 9)-(line 90,col 66)",
            "(line 91,col 9)-(line 91,col 41)",
            "(line 92,col 9)-(line 92,col 42)",
            "(line 93,col 9)-(line 93,col 41)",
            "(line 94,col 9)-(line 94,col 40)",
            "(line 95,col 9)-(line 95,col 41)",
            "(line 96,col 9)-(line 96,col 43)",
            "(line 97,col 9)-(line 97,col 43)",
            "(line 98,col 9)-(line 98,col 42)"
        ]
    },
    {
        "class_name": "org.joda.time.TestPeriod_Constructors",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestPeriod_Constructors.java",
        "signature": "org.joda.time.TestPeriod_Constructors.testParse_noFormatter()",
        "snippet": "    public void testParse_noFormatter() throws Throwable {\n        assertEquals(new Period(1, 2, 3, 4, 5, 6, 7, 890), Period.parse(\"P1Y2M3W4DT5H6M7.890S\"));\n    }\n",
        "begin_line": 102,
        "end_line": 104,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 103,col 9)-(line 103,col 97)"
        ]
    },
    {
        "class_name": "org.joda.time.TestPeriod_Constructors",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestPeriod_Constructors.java",
        "signature": "org.joda.time.TestPeriod_Constructors.testConstructor1()",
        "snippet": "    public void testConstructor1() throws Throwable {\n        Period test = new Period();\n        assertEquals(PeriodType.standard(), test.getPeriodType());\n        assertEquals(0, test.getYears());\n        assertEquals(0, test.getMonths());\n        assertEquals(0, test.getWeeks());\n        assertEquals(0, test.getDays());\n        assertEquals(0, test.getHours());\n        assertEquals(0, test.getMinutes());\n        assertEquals(0, test.getSeconds());\n        assertEquals(0, test.getMillis());\n    }\n",
        "begin_line": 107,
        "end_line": 118,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 108,col 9)-(line 108,col 35)",
            "(line 109,col 9)-(line 109,col 66)",
            "(line 110,col 9)-(line 110,col 41)",
            "(line 111,col 9)-(line 111,col 42)",
            "(line 112,col 9)-(line 112,col 41)",
            "(line 113,col 9)-(line 113,col 40)",
            "(line 114,col 9)-(line 114,col 41)",
            "(line 115,col 9)-(line 115,col 43)",
            "(line 116,col 9)-(line 116,col 43)",
            "(line 117,col 9)-(line 117,col 42)"
        ]
    },
    {
        "class_name": "org.joda.time.TestPeriod_Constructors",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestPeriod_Constructors.java",
        "signature": "org.joda.time.TestPeriod_Constructors.testConstructor_long1()",
        "snippet": "    public void testConstructor_long1() throws Throwable {\n        long length = 4 * DateTimeConstants.MILLIS_PER_DAY +\n                5 * DateTimeConstants.MILLIS_PER_HOUR +\n                6 * DateTimeConstants.MILLIS_PER_MINUTE +\n                7 * DateTimeConstants.MILLIS_PER_SECOND + 8;\n        Period test = new Period(length);\n        assertEquals(PeriodType.standard(), test.getPeriodType());\n        assertEquals(0, test.getYears());\n        assertEquals(0, test.getMonths());\n        assertEquals(0, test.getWeeks());\n        assertEquals(0, test.getDays());\n        assertEquals((4 * 24) + 5, test.getHours());\n        assertEquals(6, test.getMinutes());\n        assertEquals(7, test.getSeconds());\n        assertEquals(8, test.getMillis());\n    }\n",
        "begin_line": 121,
        "end_line": 136,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 122,col 9)-(line 125,col 60)",
            "(line 126,col 9)-(line 126,col 41)",
            "(line 127,col 9)-(line 127,col 66)",
            "(line 128,col 9)-(line 128,col 41)",
            "(line 129,col 9)-(line 129,col 42)",
            "(line 130,col 9)-(line 130,col 41)",
            "(line 131,col 9)-(line 131,col 40)",
            "(line 132,col 9)-(line 132,col 52)",
            "(line 133,col 9)-(line 133,col 43)",
            "(line 134,col 9)-(line 134,col 43)",
            "(line 135,col 9)-(line 135,col 42)"
        ]
    },
    {
        "class_name": "org.joda.time.TestPeriod_Constructors",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestPeriod_Constructors.java",
        "signature": "org.joda.time.TestPeriod_Constructors.testConstructor_long2()",
        "snippet": "    public void testConstructor_long2() throws Throwable {\n        long length =\n                5 * DateTimeConstants.MILLIS_PER_HOUR +\n                6 * DateTimeConstants.MILLIS_PER_MINUTE +\n                7 * DateTimeConstants.MILLIS_PER_SECOND + 8;\n        Period test = new Period(length);\n        assertEquals(PeriodType.standard(), test.getPeriodType());\n        assertEquals(0, test.getYears());\n        assertEquals(0, test.getMonths());\n        assertEquals(0, test.getWeeks());\n        assertEquals(0, test.getDays());\n        assertEquals(5, test.getHours());\n        assertEquals(6, test.getMinutes());\n        assertEquals(7, test.getSeconds());\n        assertEquals(8, test.getMillis());\n    }\n",
        "begin_line": 138,
        "end_line": 153,
        "comment": "",
        "child_ranges": [
            "(line 139,col 9)-(line 142,col 60)",
            "(line 143,col 9)-(line 143,col 41)",
            "(line 144,col 9)-(line 144,col 66)",
            "(line 145,col 9)-(line 145,col 41)",
            "(line 146,col 9)-(line 146,col 42)",
            "(line 147,col 9)-(line 147,col 41)",
            "(line 148,col 9)-(line 148,col 40)",
            "(line 149,col 9)-(line 149,col 41)",
            "(line 150,col 9)-(line 150,col 43)",
            "(line 151,col 9)-(line 151,col 43)",
            "(line 152,col 9)-(line 152,col 42)"
        ]
    },
    {
        "class_name": "org.joda.time.TestPeriod_Constructors",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestPeriod_Constructors.java",
        "signature": "org.joda.time.TestPeriod_Constructors.testConstructor_long3()",
        "snippet": "    public void testConstructor_long3() throws Throwable {\n        long length =\n            (4L + (3L * 7L) + (2L * 30L) + 365L) * DateTimeConstants.MILLIS_PER_DAY +\n            5L * DateTimeConstants.MILLIS_PER_HOUR +\n            6L * DateTimeConstants.MILLIS_PER_MINUTE +\n            7L * DateTimeConstants.MILLIS_PER_SECOND + 8L;\n        Period test = new Period(length);\n        assertEquals(PeriodType.standard(), test.getPeriodType());\n        // only time fields are precise in AllType\n        assertEquals(0, test.getYears());  // (4 + (3 * 7) + (2 * 30) + 365) == 450\n        assertEquals(0, test.getMonths());\n        assertEquals(0, test.getWeeks());\n        assertEquals(0, test.getDays());\n        assertEquals((450 * 24) + 5, test.getHours());\n        assertEquals(6, test.getMinutes());\n        assertEquals(7, test.getSeconds());\n        assertEquals(8, test.getMillis());\n    }\n",
        "begin_line": 155,
        "end_line": 172,
        "comment": "",
        "child_ranges": [
            "(line 156,col 9)-(line 160,col 58)",
            "(line 161,col 9)-(line 161,col 41)",
            "(line 162,col 9)-(line 162,col 66)",
            "(line 164,col 9)-(line 164,col 41)",
            "(line 165,col 9)-(line 165,col 42)",
            "(line 166,col 9)-(line 166,col 41)",
            "(line 167,col 9)-(line 167,col 40)",
            "(line 168,col 9)-(line 168,col 54)",
            "(line 169,col 9)-(line 169,col 43)",
            "(line 170,col 9)-(line 170,col 43)",
            "(line 171,col 9)-(line 171,col 42)"
        ]
    },
    {
        "class_name": "org.joda.time.TestPeriod_Constructors",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestPeriod_Constructors.java",
        "signature": "org.joda.time.TestPeriod_Constructors.testConstructor_long_fixedZone()",
        "snippet": "    public void testConstructor_long_fixedZone() throws Throwable {\n        DateTimeZone zone = DateTimeZone.getDefault();\n        try {\n            DateTimeZone.setDefault(DateTimeZone.forOffsetHours(2));\n            long length =\n                (4L + (3L * 7L) + (2L * 30L) + 365L) * DateTimeConstants.MILLIS_PER_DAY +\n                5L * DateTimeConstants.MILLIS_PER_HOUR +\n                6L * DateTimeConstants.MILLIS_PER_MINUTE +\n                7L * DateTimeConstants.MILLIS_PER_SECOND + 8L;\n            Period test = new Period(length);\n            assertEquals(PeriodType.standard(), test.getPeriodType());\n            // only time fields are precise in AllType\n            assertEquals(0, test.getYears());  // (4 + (3 * 7) + (2 * 30) + 365) == 450\n            assertEquals(0, test.getMonths());\n            assertEquals(0, test.getWeeks());\n            assertEquals(0, test.getDays());\n            assertEquals((450 * 24) + 5, test.getHours());\n            assertEquals(6, test.getMinutes());\n            assertEquals(7, test.getSeconds());\n            assertEquals(8, test.getMillis());\n        } finally {\n            DateTimeZone.setDefault(zone);\n        }\n    }\n",
        "begin_line": 174,
        "end_line": 197,
        "comment": "",
        "child_ranges": [
            "(line 175,col 9)-(line 175,col 54)",
            "(line 176,col 9)-(line 196,col 9)"
        ]
    },
    {
        "class_name": "org.joda.time.TestPeriod_Constructors",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestPeriod_Constructors.java",
        "signature": "org.joda.time.TestPeriod_Constructors.testConstructor_long_PeriodType1()",
        "snippet": "    public void testConstructor_long_PeriodType1() throws Throwable {\n        long length = 4 * DateTimeConstants.MILLIS_PER_DAY +\n                5 * DateTimeConstants.MILLIS_PER_HOUR +\n                6 * DateTimeConstants.MILLIS_PER_MINUTE +\n                7 * DateTimeConstants.MILLIS_PER_SECOND + 8;\n        Period test = new Period(length, (PeriodType) null);\n        assertEquals(PeriodType.standard(), test.getPeriodType());\n        assertEquals(0, test.getYears());\n        assertEquals(0, test.getMonths());\n        assertEquals(0, test.getWeeks());\n        assertEquals(0, test.getDays());\n        assertEquals((4 * 24) + 5, test.getHours());\n        assertEquals(6, test.getMinutes());\n        assertEquals(7, test.getSeconds());\n        assertEquals(8, test.getMillis());\n    }\n",
        "begin_line": 200,
        "end_line": 215,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 201,col 9)-(line 204,col 60)",
            "(line 205,col 9)-(line 205,col 60)",
            "(line 206,col 9)-(line 206,col 66)",
            "(line 207,col 9)-(line 207,col 41)",
            "(line 208,col 9)-(line 208,col 42)",
            "(line 209,col 9)-(line 209,col 41)",
            "(line 210,col 9)-(line 210,col 40)",
            "(line 211,col 9)-(line 211,col 52)",
            "(line 212,col 9)-(line 212,col 43)",
            "(line 213,col 9)-(line 213,col 43)",
            "(line 214,col 9)-(line 214,col 42)"
        ]
    },
    {
        "class_name": "org.joda.time.TestPeriod_Constructors",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestPeriod_Constructors.java",
        "signature": "org.joda.time.TestPeriod_Constructors.testConstructor_long_PeriodType2()",
        "snippet": "    public void testConstructor_long_PeriodType2() throws Throwable {\n        long length = 4 * DateTimeConstants.MILLIS_PER_DAY +\n                5 * DateTimeConstants.MILLIS_PER_HOUR +\n                6 * DateTimeConstants.MILLIS_PER_MINUTE +\n                7 * DateTimeConstants.MILLIS_PER_SECOND + 8;\n        Period test = new Period(length, PeriodType.millis());\n        assertEquals(PeriodType.millis(), test.getPeriodType());\n        assertEquals(0, test.getYears());\n        assertEquals(0, test.getMonths());\n        assertEquals(0, test.getWeeks());\n        assertEquals(0, test.getDays());\n        assertEquals(0, test.getHours());\n        assertEquals(0, test.getMinutes());\n        assertEquals(0, test.getSeconds());\n        assertEquals(length, test.getMillis());\n    }\n",
        "begin_line": 217,
        "end_line": 232,
        "comment": "",
        "child_ranges": [
            "(line 218,col 9)-(line 221,col 60)",
            "(line 222,col 9)-(line 222,col 62)",
            "(line 223,col 9)-(line 223,col 64)",
            "(line 224,col 9)-(line 224,col 41)",
            "(line 225,col 9)-(line 225,col 42)",
            "(line 226,col 9)-(line 226,col 41)",
            "(line 227,col 9)-(line 227,col 40)",
            "(line 228,col 9)-(line 228,col 41)",
            "(line 229,col 9)-(line 229,col 43)",
            "(line 230,col 9)-(line 230,col 43)",
            "(line 231,col 9)-(line 231,col 47)"
        ]
    },
    {
        "class_name": "org.joda.time.TestPeriod_Constructors",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestPeriod_Constructors.java",
        "signature": "org.joda.time.TestPeriod_Constructors.testConstructor_long_PeriodType3()",
        "snippet": "    public void testConstructor_long_PeriodType3() throws Throwable {\n        long length = 4 * DateTimeConstants.MILLIS_PER_DAY +\n                5 * DateTimeConstants.MILLIS_PER_HOUR +\n                6 * DateTimeConstants.MILLIS_PER_MINUTE +\n                7 * DateTimeConstants.MILLIS_PER_SECOND + 8;\n        Period test = new Period(length, PeriodType.dayTime());\n        assertEquals(PeriodType.dayTime(), test.getPeriodType());\n        assertEquals(0, test.getYears());\n        assertEquals(0, test.getMonths());\n        assertEquals(0, test.getWeeks());\n        assertEquals(0, test.getDays());\n        assertEquals((4 * 24) + 5, test.getHours());\n        assertEquals(6, test.getMinutes());\n        assertEquals(7, test.getSeconds());\n        assertEquals(8, test.getMillis());\n    }\n",
        "begin_line": 234,
        "end_line": 249,
        "comment": "",
        "child_ranges": [
            "(line 235,col 9)-(line 238,col 60)",
            "(line 239,col 9)-(line 239,col 63)",
            "(line 240,col 9)-(line 240,col 65)",
            "(line 241,col 9)-(line 241,col 41)",
            "(line 242,col 9)-(line 242,col 42)",
            "(line 243,col 9)-(line 243,col 41)",
            "(line 244,col 9)-(line 244,col 40)",
            "(line 245,col 9)-(line 245,col 52)",
            "(line 246,col 9)-(line 246,col 43)",
            "(line 247,col 9)-(line 247,col 43)",
            "(line 248,col 9)-(line 248,col 42)"
        ]
    },
    {
        "class_name": "org.joda.time.TestPeriod_Constructors",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestPeriod_Constructors.java",
        "signature": "org.joda.time.TestPeriod_Constructors.testConstructor_long_PeriodType4()",
        "snippet": "    public void testConstructor_long_PeriodType4() throws Throwable {\n        long length =\n                5 * DateTimeConstants.MILLIS_PER_HOUR +\n                6 * DateTimeConstants.MILLIS_PER_MINUTE +\n                7 * DateTimeConstants.MILLIS_PER_SECOND + 8;\n        Period test = new Period(length, PeriodType.standard().withMillisRemoved());\n        assertEquals(PeriodType.standard().withMillisRemoved(), test.getPeriodType());\n        assertEquals(0, test.getYears());\n        assertEquals(0, test.getMonths());\n        assertEquals(0, test.getWeeks());\n        assertEquals(0, test.getDays());\n        assertEquals(5, test.getHours());\n        assertEquals(6, test.getMinutes());\n        assertEquals(7, test.getSeconds());\n        assertEquals(0, test.getMillis());\n    }\n",
        "begin_line": 251,
        "end_line": 266,
        "comment": "",
        "child_ranges": [
            "(line 252,col 9)-(line 255,col 60)",
            "(line 256,col 9)-(line 256,col 84)",
            "(line 257,col 9)-(line 257,col 86)",
            "(line 258,col 9)-(line 258,col 41)",
            "(line 259,col 9)-(line 259,col 42)",
            "(line 260,col 9)-(line 260,col 41)",
            "(line 261,col 9)-(line 261,col 40)",
            "(line 262,col 9)-(line 262,col 41)",
            "(line 263,col 9)-(line 263,col 43)",
            "(line 264,col 9)-(line 264,col 43)",
            "(line 265,col 9)-(line 265,col 42)"
        ]
    },
    {
        "class_name": "org.joda.time.TestPeriod_Constructors",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestPeriod_Constructors.java",
        "signature": "org.joda.time.TestPeriod_Constructors.testConstructor_long_Chronology1()",
        "snippet": "    public void testConstructor_long_Chronology1() throws Throwable {\n        long length = 4 * DateTimeConstants.MILLIS_PER_DAY +\n                5 * DateTimeConstants.MILLIS_PER_HOUR +\n                6 * DateTimeConstants.MILLIS_PER_MINUTE +\n                7 * DateTimeConstants.MILLIS_PER_SECOND + 8;\n        Period test = new Period(length, ISOChronology.getInstance());\n        assertEquals(PeriodType.standard(), test.getPeriodType());\n        assertEquals(0, test.getYears());\n        assertEquals(0, test.getMonths());\n        assertEquals(0, test.getWeeks());\n        assertEquals(0, test.getDays());\n        assertEquals((4 * 24) + 5, test.getHours());\n        assertEquals(6, test.getMinutes());\n        assertEquals(7, test.getSeconds());\n        assertEquals(8, test.getMillis());\n    }\n",
        "begin_line": 269,
        "end_line": 284,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 270,col 9)-(line 273,col 60)",
            "(line 274,col 9)-(line 274,col 70)",
            "(line 275,col 9)-(line 275,col 66)",
            "(line 276,col 9)-(line 276,col 41)",
            "(line 277,col 9)-(line 277,col 42)",
            "(line 278,col 9)-(line 278,col 41)",
            "(line 279,col 9)-(line 279,col 40)",
            "(line 280,col 9)-(line 280,col 52)",
            "(line 281,col 9)-(line 281,col 43)",
            "(line 282,col 9)-(line 282,col 43)",
            "(line 283,col 9)-(line 283,col 42)"
        ]
    },
    {
        "class_name": "org.joda.time.TestPeriod_Constructors",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestPeriod_Constructors.java",
        "signature": "org.joda.time.TestPeriod_Constructors.testConstructor_long_Chronology2()",
        "snippet": "    public void testConstructor_long_Chronology2() throws Throwable {\n        long length = 4 * DateTimeConstants.MILLIS_PER_DAY +\n                5 * DateTimeConstants.MILLIS_PER_HOUR +\n                6 * DateTimeConstants.MILLIS_PER_MINUTE +\n                7 * DateTimeConstants.MILLIS_PER_SECOND + 8;\n        Period test = new Period(length, ISOChronology.getInstanceUTC());\n        assertEquals(PeriodType.standard(), test.getPeriodType());\n        assertEquals(0, test.getYears());\n        assertEquals(0, test.getMonths());\n        assertEquals(0, test.getWeeks());\n        assertEquals(4, test.getDays());\n        assertEquals(5, test.getHours());\n        assertEquals(6, test.getMinutes());\n        assertEquals(7, test.getSeconds());\n        assertEquals(8, test.getMillis());\n    }\n",
        "begin_line": 286,
        "end_line": 301,
        "comment": "",
        "child_ranges": [
            "(line 287,col 9)-(line 290,col 60)",
            "(line 291,col 9)-(line 291,col 73)",
            "(line 292,col 9)-(line 292,col 66)",
            "(line 293,col 9)-(line 293,col 41)",
            "(line 294,col 9)-(line 294,col 42)",
            "(line 295,col 9)-(line 295,col 41)",
            "(line 296,col 9)-(line 296,col 40)",
            "(line 297,col 9)-(line 297,col 41)",
            "(line 298,col 9)-(line 298,col 43)",
            "(line 299,col 9)-(line 299,col 43)",
            "(line 300,col 9)-(line 300,col 42)"
        ]
    },
    {
        "class_name": "org.joda.time.TestPeriod_Constructors",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestPeriod_Constructors.java",
        "signature": "org.joda.time.TestPeriod_Constructors.testConstructor_long_Chronology3()",
        "snippet": "    public void testConstructor_long_Chronology3() throws Throwable {\n        long length = 4 * DateTimeConstants.MILLIS_PER_DAY +\n                5 * DateTimeConstants.MILLIS_PER_HOUR +\n                6 * DateTimeConstants.MILLIS_PER_MINUTE +\n                7 * DateTimeConstants.MILLIS_PER_SECOND + 8;\n        Period test = new Period(length, (Chronology) null);\n        assertEquals(PeriodType.standard(), test.getPeriodType());\n        assertEquals(0, test.getYears());\n        assertEquals(0, test.getMonths());\n        assertEquals(0, test.getWeeks());\n        assertEquals(0, test.getDays());\n        assertEquals((4 * 24) + 5, test.getHours());\n        assertEquals(6, test.getMinutes());\n        assertEquals(7, test.getSeconds());\n        assertEquals(8, test.getMillis());\n    }\n",
        "begin_line": 303,
        "end_line": 318,
        "comment": "",
        "child_ranges": [
            "(line 304,col 9)-(line 307,col 60)",
            "(line 308,col 9)-(line 308,col 60)",
            "(line 309,col 9)-(line 309,col 66)",
            "(line 310,col 9)-(line 310,col 41)",
            "(line 311,col 9)-(line 311,col 42)",
            "(line 312,col 9)-(line 312,col 41)",
            "(line 313,col 9)-(line 313,col 40)",
            "(line 314,col 9)-(line 314,col 52)",
            "(line 315,col 9)-(line 315,col 43)",
            "(line 316,col 9)-(line 316,col 43)",
            "(line 317,col 9)-(line 317,col 42)"
        ]
    },
    {
        "class_name": "org.joda.time.TestPeriod_Constructors",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestPeriod_Constructors.java",
        "signature": "org.joda.time.TestPeriod_Constructors.testConstructor_long_PeriodType_Chronology1()",
        "snippet": "    public void testConstructor_long_PeriodType_Chronology1() throws Throwable {\n        long length = 4 * DateTimeConstants.MILLIS_PER_DAY +\n                5 * DateTimeConstants.MILLIS_PER_HOUR +\n                6 * DateTimeConstants.MILLIS_PER_MINUTE +\n                7 * DateTimeConstants.MILLIS_PER_SECOND + 8;\n        Period test = new Period(length, PeriodType.time().withMillisRemoved(), ISOChronology.getInstance());\n        assertEquals(PeriodType.time().withMillisRemoved(), test.getPeriodType());\n        assertEquals(0, test.getYears());\n        assertEquals(0, test.getMonths());\n        assertEquals(0, test.getWeeks());\n        assertEquals(0, test.getDays());\n        assertEquals((4 * 24) + 5, test.getHours());\n        assertEquals(6, test.getMinutes());\n        assertEquals(7, test.getSeconds());\n        assertEquals(0, test.getMillis());\n    }\n",
        "begin_line": 321,
        "end_line": 336,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 322,col 9)-(line 325,col 60)",
            "(line 326,col 9)-(line 326,col 109)",
            "(line 327,col 9)-(line 327,col 82)",
            "(line 328,col 9)-(line 328,col 41)",
            "(line 329,col 9)-(line 329,col 42)",
            "(line 330,col 9)-(line 330,col 41)",
            "(line 331,col 9)-(line 331,col 40)",
            "(line 332,col 9)-(line 332,col 52)",
            "(line 333,col 9)-(line 333,col 43)",
            "(line 334,col 9)-(line 334,col 43)",
            "(line 335,col 9)-(line 335,col 42)"
        ]
    },
    {
        "class_name": "org.joda.time.TestPeriod_Constructors",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestPeriod_Constructors.java",
        "signature": "org.joda.time.TestPeriod_Constructors.testConstructor_long_PeriodType_Chronology2()",
        "snippet": "    public void testConstructor_long_PeriodType_Chronology2() throws Throwable {\n        long length = 4 * DateTimeConstants.MILLIS_PER_DAY +\n                5 * DateTimeConstants.MILLIS_PER_HOUR +\n                6 * DateTimeConstants.MILLIS_PER_MINUTE +\n                7 * DateTimeConstants.MILLIS_PER_SECOND + 8;\n        Period test = new Period(length, PeriodType.standard(), ISOChronology.getInstanceUTC());\n        assertEquals(PeriodType.standard(), test.getPeriodType());\n        assertEquals(0, test.getYears());\n        assertEquals(0, test.getMonths());\n        assertEquals(0, test.getWeeks());\n        assertEquals(4, test.getDays());\n        assertEquals(5, test.getHours());\n        assertEquals(6, test.getMinutes());\n        assertEquals(7, test.getSeconds());\n        assertEquals(8, test.getMillis());\n    }\n",
        "begin_line": 338,
        "end_line": 353,
        "comment": "",
        "child_ranges": [
            "(line 339,col 9)-(line 342,col 60)",
            "(line 343,col 9)-(line 343,col 96)",
            "(line 344,col 9)-(line 344,col 66)",
            "(line 345,col 9)-(line 345,col 41)",
            "(line 346,col 9)-(line 346,col 42)",
            "(line 347,col 9)-(line 347,col 41)",
            "(line 348,col 9)-(line 348,col 40)",
            "(line 349,col 9)-(line 349,col 41)",
            "(line 350,col 9)-(line 350,col 43)",
            "(line 351,col 9)-(line 351,col 43)",
            "(line 352,col 9)-(line 352,col 42)"
        ]
    },
    {
        "class_name": "org.joda.time.TestPeriod_Constructors",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestPeriod_Constructors.java",
        "signature": "org.joda.time.TestPeriod_Constructors.testConstructor_long_PeriodType_Chronology3()",
        "snippet": "    public void testConstructor_long_PeriodType_Chronology3() throws Throwable {\n        long length = 4 * DateTimeConstants.MILLIS_PER_DAY +\n                5 * DateTimeConstants.MILLIS_PER_HOUR +\n                6 * DateTimeConstants.MILLIS_PER_MINUTE +\n                7 * DateTimeConstants.MILLIS_PER_SECOND + 8;\n        Period test = new Period(length, PeriodType.standard(), (Chronology) null);\n        assertEquals(PeriodType.standard(), test.getPeriodType());\n        assertEquals(0, test.getYears());\n        assertEquals(0, test.getMonths());\n        assertEquals(0, test.getWeeks());\n        assertEquals(0, test.getDays());\n        assertEquals((4 * 24) + 5, test.getHours());\n        assertEquals(6, test.getMinutes());\n        assertEquals(7, test.getSeconds());\n        assertEquals(8, test.getMillis());\n    }\n",
        "begin_line": 355,
        "end_line": 370,
        "comment": "",
        "child_ranges": [
            "(line 356,col 9)-(line 359,col 60)",
            "(line 360,col 9)-(line 360,col 83)",
            "(line 361,col 9)-(line 361,col 66)",
            "(line 362,col 9)-(line 362,col 41)",
            "(line 363,col 9)-(line 363,col 42)",
            "(line 364,col 9)-(line 364,col 41)",
            "(line 365,col 9)-(line 365,col 40)",
            "(line 366,col 9)-(line 366,col 52)",
            "(line 367,col 9)-(line 367,col 43)",
            "(line 368,col 9)-(line 368,col 43)",
            "(line 369,col 9)-(line 369,col 42)"
        ]
    },
    {
        "class_name": "org.joda.time.TestPeriod_Constructors",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestPeriod_Constructors.java",
        "signature": "org.joda.time.TestPeriod_Constructors.testConstructor_long_PeriodType_Chronology4()",
        "snippet": "    public void testConstructor_long_PeriodType_Chronology4() throws Throwable {\n        long length = 4 * DateTimeConstants.MILLIS_PER_DAY +\n                5 * DateTimeConstants.MILLIS_PER_HOUR +\n                6 * DateTimeConstants.MILLIS_PER_MINUTE +\n                7 * DateTimeConstants.MILLIS_PER_SECOND + 8;\n        Period test = new Period(length, (PeriodType) null, (Chronology) null);\n        assertEquals(PeriodType.standard(), test.getPeriodType());\n        assertEquals(0, test.getYears());\n        assertEquals(0, test.getMonths());\n        assertEquals(0, test.getWeeks());\n        assertEquals(0, test.getDays());\n        assertEquals((4 * 24) + 5, test.getHours());\n        assertEquals(6, test.getMinutes());\n        assertEquals(7, test.getSeconds());\n        assertEquals(8, test.getMillis());\n    }\n",
        "begin_line": 372,
        "end_line": 387,
        "comment": "",
        "child_ranges": [
            "(line 373,col 9)-(line 376,col 60)",
            "(line 377,col 9)-(line 377,col 79)",
            "(line 378,col 9)-(line 378,col 66)",
            "(line 379,col 9)-(line 379,col 41)",
            "(line 380,col 9)-(line 380,col 42)",
            "(line 381,col 9)-(line 381,col 41)",
            "(line 382,col 9)-(line 382,col 40)",
            "(line 383,col 9)-(line 383,col 52)",
            "(line 384,col 9)-(line 384,col 43)",
            "(line 385,col 9)-(line 385,col 43)",
            "(line 386,col 9)-(line 386,col 42)"
        ]
    },
    {
        "class_name": "org.joda.time.TestPeriod_Constructors",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestPeriod_Constructors.java",
        "signature": "org.joda.time.TestPeriod_Constructors.testConstructor_4int1()",
        "snippet": "    public void testConstructor_4int1() throws Throwable {\n        Period test = new Period(5, 6, 7, 8);\n        assertEquals(PeriodType.standard(), test.getPeriodType());\n        assertEquals(0, test.getYears());\n        assertEquals(0, test.getMonths());\n        assertEquals(0, test.getWeeks());\n        assertEquals(0, test.getDays());\n        assertEquals(5, test.getHours());\n        assertEquals(6, test.getMinutes());\n        assertEquals(7, test.getSeconds());\n        assertEquals(8, test.getMillis());\n    }\n",
        "begin_line": 393,
        "end_line": 404,
        "comment": "\n     * Test constructor (4ints)\n     ",
        "child_ranges": [
            "(line 394,col 9)-(line 394,col 45)",
            "(line 395,col 9)-(line 395,col 66)",
            "(line 396,col 9)-(line 396,col 41)",
            "(line 397,col 9)-(line 397,col 42)",
            "(line 398,col 9)-(line 398,col 41)",
            "(line 399,col 9)-(line 399,col 40)",
            "(line 400,col 9)-(line 400,col 41)",
            "(line 401,col 9)-(line 401,col 43)",
            "(line 402,col 9)-(line 402,col 43)",
            "(line 403,col 9)-(line 403,col 42)"
        ]
    },
    {
        "class_name": "org.joda.time.TestPeriod_Constructors",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestPeriod_Constructors.java",
        "signature": "org.joda.time.TestPeriod_Constructors.testConstructor_8int1()",
        "snippet": "    public void testConstructor_8int1() throws Throwable {\n        Period test = new Period(1, 2, 3, 4, 5, 6, 7, 8);\n        assertEquals(PeriodType.standard(), test.getPeriodType());\n        assertEquals(1, test.getYears());\n        assertEquals(2, test.getMonths());\n        assertEquals(3, test.getWeeks());\n        assertEquals(4, test.getDays());\n        assertEquals(5, test.getHours());\n        assertEquals(6, test.getMinutes());\n        assertEquals(7, test.getSeconds());\n        assertEquals(8, test.getMillis());\n    }\n",
        "begin_line": 410,
        "end_line": 421,
        "comment": "\n     * Test constructor (8ints)\n     ",
        "child_ranges": [
            "(line 411,col 9)-(line 411,col 57)",
            "(line 412,col 9)-(line 412,col 66)",
            "(line 413,col 9)-(line 413,col 41)",
            "(line 414,col 9)-(line 414,col 42)",
            "(line 415,col 9)-(line 415,col 41)",
            "(line 416,col 9)-(line 416,col 40)",
            "(line 417,col 9)-(line 417,col 41)",
            "(line 418,col 9)-(line 418,col 43)",
            "(line 419,col 9)-(line 419,col 43)",
            "(line 420,col 9)-(line 420,col 42)"
        ]
    },
    {
        "class_name": "org.joda.time.TestPeriod_Constructors",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestPeriod_Constructors.java",
        "signature": "org.joda.time.TestPeriod_Constructors.testConstructor_8int__PeriodType1()",
        "snippet": "    public void testConstructor_8int__PeriodType1() throws Throwable {\n        Period test = new Period(1, 2, 3, 4, 5, 6, 7, 8, null);\n        assertEquals(PeriodType.standard(), test.getPeriodType());\n        assertEquals(1, test.getYears());\n        assertEquals(2, test.getMonths());\n        assertEquals(3, test.getWeeks());\n        assertEquals(4, test.getDays());\n        assertEquals(5, test.getHours());\n        assertEquals(6, test.getMinutes());\n        assertEquals(7, test.getSeconds());\n        assertEquals(8, test.getMillis());\n    }\n",
        "begin_line": 427,
        "end_line": 438,
        "comment": "\n     * Test constructor (8ints)\n     ",
        "child_ranges": [
            "(line 428,col 9)-(line 428,col 63)",
            "(line 429,col 9)-(line 429,col 66)",
            "(line 430,col 9)-(line 430,col 41)",
            "(line 431,col 9)-(line 431,col 42)",
            "(line 432,col 9)-(line 432,col 41)",
            "(line 433,col 9)-(line 433,col 40)",
            "(line 434,col 9)-(line 434,col 41)",
            "(line 435,col 9)-(line 435,col 43)",
            "(line 436,col 9)-(line 436,col 43)",
            "(line 437,col 9)-(line 437,col 42)"
        ]
    },
    {
        "class_name": "org.joda.time.TestPeriod_Constructors",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestPeriod_Constructors.java",
        "signature": "org.joda.time.TestPeriod_Constructors.testConstructor_8int__PeriodType2()",
        "snippet": "    public void testConstructor_8int__PeriodType2() throws Throwable {\n        Period test = new Period(0, 0, 0, 0, 5, 6, 7, 8, PeriodType.dayTime());\n        assertEquals(PeriodType.dayTime(), test.getPeriodType());\n        assertEquals(0, test.getYears());\n        assertEquals(0, test.getMonths());\n        assertEquals(0, test.getWeeks());\n        assertEquals(0, test.getDays());\n        assertEquals(5, test.getHours());\n        assertEquals(6, test.getMinutes());\n        assertEquals(7, test.getSeconds());\n        assertEquals(8, test.getMillis());\n    }\n",
        "begin_line": 440,
        "end_line": 451,
        "comment": "",
        "child_ranges": [
            "(line 441,col 9)-(line 441,col 79)",
            "(line 442,col 9)-(line 442,col 65)",
            "(line 443,col 9)-(line 443,col 41)",
            "(line 444,col 9)-(line 444,col 42)",
            "(line 445,col 9)-(line 445,col 41)",
            "(line 446,col 9)-(line 446,col 40)",
            "(line 447,col 9)-(line 447,col 41)",
            "(line 448,col 9)-(line 448,col 43)",
            "(line 449,col 9)-(line 449,col 43)",
            "(line 450,col 9)-(line 450,col 42)"
        ]
    },
    {
        "class_name": "org.joda.time.TestPeriod_Constructors",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestPeriod_Constructors.java",
        "signature": "org.joda.time.TestPeriod_Constructors.testConstructor_8int__PeriodType3()",
        "snippet": "    public void testConstructor_8int__PeriodType3() throws Throwable {\n        try {\n            new Period(1, 2, 3, 4, 5, 6, 7, 8, PeriodType.dayTime());\n            fail();\n        } catch (IllegalArgumentException ex) {}\n    }\n",
        "begin_line": 453,
        "end_line": 458,
        "comment": "",
        "child_ranges": [
            "(line 454,col 9)-(line 457,col 48)"
        ]
    },
    {
        "class_name": "org.joda.time.TestPeriod_Constructors",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestPeriod_Constructors.java",
        "signature": "org.joda.time.TestPeriod_Constructors.testConstructor_long_long1()",
        "snippet": "    public void testConstructor_long_long1() throws Throwable {\n        DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n        DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1);\n        Period test = new Period(dt1.getMillis(), dt2.getMillis());\n        assertEquals(PeriodType.standard(), test.getPeriodType());\n        assertEquals(1, test.getYears());\n        assertEquals(1, test.getMonths());\n        assertEquals(0, test.getWeeks());\n        assertEquals(1, test.getDays());\n        assertEquals(1, test.getHours());\n        assertEquals(1, test.getMinutes());\n        assertEquals(1, test.getSeconds());\n        assertEquals(1, test.getMillis());\n    }\n",
        "begin_line": 461,
        "end_line": 474,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 462,col 9)-(line 462,col 60)",
            "(line 463,col 9)-(line 463,col 61)",
            "(line 464,col 9)-(line 464,col 67)",
            "(line 465,col 9)-(line 465,col 66)",
            "(line 466,col 9)-(line 466,col 41)",
            "(line 467,col 9)-(line 467,col 42)",
            "(line 468,col 9)-(line 468,col 41)",
            "(line 469,col 9)-(line 469,col 40)",
            "(line 470,col 9)-(line 470,col 41)",
            "(line 471,col 9)-(line 471,col 43)",
            "(line 472,col 9)-(line 472,col 43)",
            "(line 473,col 9)-(line 473,col 42)"
        ]
    },
    {
        "class_name": "org.joda.time.TestPeriod_Constructors",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestPeriod_Constructors.java",
        "signature": "org.joda.time.TestPeriod_Constructors.testConstructor_long_long2()",
        "snippet": "    public void testConstructor_long_long2() throws Throwable {\n        DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n        DateTime dt2 = new DateTime(2005, 7, 17, 1, 1, 1, 1);\n        Period test = new Period(dt1.getMillis(), dt2.getMillis());\n        assertEquals(PeriodType.standard(), test.getPeriodType());\n        assertEquals(1, test.getYears());\n        assertEquals(1, test.getMonths());\n        assertEquals(1, test.getWeeks());\n        assertEquals(1, test.getDays());\n        assertEquals(1, test.getHours());\n        assertEquals(1, test.getMinutes());\n        assertEquals(1, test.getSeconds());\n        assertEquals(1, test.getMillis());\n    }\n",
        "begin_line": 476,
        "end_line": 489,
        "comment": "",
        "child_ranges": [
            "(line 477,col 9)-(line 477,col 60)",
            "(line 478,col 9)-(line 478,col 61)",
            "(line 479,col 9)-(line 479,col 67)",
            "(line 480,col 9)-(line 480,col 66)",
            "(line 481,col 9)-(line 481,col 41)",
            "(line 482,col 9)-(line 482,col 42)",
            "(line 483,col 9)-(line 483,col 41)",
            "(line 484,col 9)-(line 484,col 40)",
            "(line 485,col 9)-(line 485,col 41)",
            "(line 486,col 9)-(line 486,col 43)",
            "(line 487,col 9)-(line 487,col 43)",
            "(line 488,col 9)-(line 488,col 42)"
        ]
    },
    {
        "class_name": "org.joda.time.TestPeriod_Constructors",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestPeriod_Constructors.java",
        "signature": "org.joda.time.TestPeriod_Constructors.testConstructor_long_long_PeriodType1()",
        "snippet": "    public void testConstructor_long_long_PeriodType1() throws Throwable {\n        DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n        DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1);\n        Period test = new Period(dt1.getMillis(), dt2.getMillis(), (PeriodType) null);\n        assertEquals(PeriodType.standard(), test.getPeriodType());\n        assertEquals(1, test.getYears());\n        assertEquals(1, test.getMonths());\n        assertEquals(0, test.getWeeks());\n        assertEquals(1, test.getDays());\n        assertEquals(1, test.getHours());\n        assertEquals(1, test.getMinutes());\n        assertEquals(1, test.getSeconds());\n        assertEquals(1, test.getMillis());\n    }\n",
        "begin_line": 492,
        "end_line": 505,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 493,col 9)-(line 493,col 60)",
            "(line 494,col 9)-(line 494,col 61)",
            "(line 495,col 9)-(line 495,col 86)",
            "(line 496,col 9)-(line 496,col 66)",
            "(line 497,col 9)-(line 497,col 41)",
            "(line 498,col 9)-(line 498,col 42)",
            "(line 499,col 9)-(line 499,col 41)",
            "(line 500,col 9)-(line 500,col 40)",
            "(line 501,col 9)-(line 501,col 41)",
            "(line 502,col 9)-(line 502,col 43)",
            "(line 503,col 9)-(line 503,col 43)",
            "(line 504,col 9)-(line 504,col 42)"
        ]
    },
    {
        "class_name": "org.joda.time.TestPeriod_Constructors",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestPeriod_Constructors.java",
        "signature": "org.joda.time.TestPeriod_Constructors.testConstructor_long_long_PeriodType2()",
        "snippet": "    public void testConstructor_long_long_PeriodType2() throws Throwable {\n        DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n        DateTime dt2 = new DateTime(2004, 7, 10, 1, 1, 1, 1);\n        Period test = new Period(dt1.getMillis(), dt2.getMillis(), PeriodType.dayTime());\n        assertEquals(PeriodType.dayTime(), test.getPeriodType());\n        assertEquals(0, test.getYears());\n        assertEquals(0, test.getMonths());\n        assertEquals(0, test.getWeeks());\n        assertEquals(31, test.getDays());\n        assertEquals(1, test.getHours());\n        assertEquals(1, test.getMinutes());\n        assertEquals(1, test.getSeconds());\n        assertEquals(1, test.getMillis());\n    }\n",
        "begin_line": 507,
        "end_line": 520,
        "comment": "",
        "child_ranges": [
            "(line 508,col 9)-(line 508,col 60)",
            "(line 509,col 9)-(line 509,col 61)",
            "(line 510,col 9)-(line 510,col 89)",
            "(line 511,col 9)-(line 511,col 65)",
            "(line 512,col 9)-(line 512,col 41)",
            "(line 513,col 9)-(line 513,col 42)",
            "(line 514,col 9)-(line 514,col 41)",
            "(line 515,col 9)-(line 515,col 41)",
            "(line 516,col 9)-(line 516,col 41)",
            "(line 517,col 9)-(line 517,col 43)",
            "(line 518,col 9)-(line 518,col 43)",
            "(line 519,col 9)-(line 519,col 42)"
        ]
    },
    {
        "class_name": "org.joda.time.TestPeriod_Constructors",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestPeriod_Constructors.java",
        "signature": "org.joda.time.TestPeriod_Constructors.testConstructor_long_long_PeriodType3()",
        "snippet": "    public void testConstructor_long_long_PeriodType3() throws Throwable {\n        DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n        DateTime dt2 = new DateTime(2004, 6, 9, 1, 1, 1, 1);\n        Period test = new Period(dt1.getMillis(), dt2.getMillis(), PeriodType.standard().withMillisRemoved());\n        assertEquals(PeriodType.standard().withMillisRemoved(), test.getPeriodType());\n        assertEquals(0, test.getYears());\n        assertEquals(0, test.getMonths());\n        assertEquals(0, test.getWeeks());\n        assertEquals(0, test.getDays());\n        assertEquals(1, test.getHours());\n        assertEquals(1, test.getMinutes());\n        assertEquals(1, test.getSeconds());\n        assertEquals(0, test.getMillis());\n    }\n",
        "begin_line": 522,
        "end_line": 535,
        "comment": "",
        "child_ranges": [
            "(line 523,col 9)-(line 523,col 60)",
            "(line 524,col 9)-(line 524,col 60)",
            "(line 525,col 9)-(line 525,col 110)",
            "(line 526,col 9)-(line 526,col 86)",
            "(line 527,col 9)-(line 527,col 41)",
            "(line 528,col 9)-(line 528,col 42)",
            "(line 529,col 9)-(line 529,col 41)",
            "(line 530,col 9)-(line 530,col 40)",
            "(line 531,col 9)-(line 531,col 41)",
            "(line 532,col 9)-(line 532,col 43)",
            "(line 533,col 9)-(line 533,col 43)",
            "(line 534,col 9)-(line 534,col 42)"
        ]
    },
    {
        "class_name": "org.joda.time.TestPeriod_Constructors",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestPeriod_Constructors.java",
        "signature": "org.joda.time.TestPeriod_Constructors.testToPeriod_PeriodType3()",
        "snippet": "    public void testToPeriod_PeriodType3() {\n        DateTime dt1 = new DateTime(2004, 6, 9, 7, 8, 9, 10);\n        DateTime dt2 = new DateTime(2005, 6, 9, 12, 14, 16, 18);\n        Period test = new Period(dt1.getMillis(), dt2.getMillis(), PeriodType.yearWeekDayTime());\n        \n        assertEquals(PeriodType.yearWeekDayTime(), test.getPeriodType());\n        assertEquals(1, test.getYears());  // tests using years and not weekyears\n        assertEquals(0, test.getMonths());\n        assertEquals(0, test.getWeeks());\n        assertEquals(0, test.getDays());\n        assertEquals(5, test.getHours());\n        assertEquals(6, test.getMinutes());\n        assertEquals(7, test.getSeconds());\n        assertEquals(8, test.getMillis());\n    }\n",
        "begin_line": 537,
        "end_line": 551,
        "comment": "",
        "child_ranges": [
            "(line 538,col 9)-(line 538,col 61)",
            "(line 539,col 9)-(line 539,col 64)",
            "(line 540,col 9)-(line 540,col 97)",
            "(line 542,col 9)-(line 542,col 73)",
            "(line 543,col 9)-(line 543,col 41)",
            "(line 544,col 9)-(line 544,col 42)",
            "(line 545,col 9)-(line 545,col 41)",
            "(line 546,col 9)-(line 546,col 40)",
            "(line 547,col 9)-(line 547,col 41)",
            "(line 548,col 9)-(line 548,col 43)",
            "(line 549,col 9)-(line 549,col 43)",
            "(line 550,col 9)-(line 550,col 42)"
        ]
    },
    {
        "class_name": "org.joda.time.TestPeriod_Constructors",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestPeriod_Constructors.java",
        "signature": "org.joda.time.TestPeriod_Constructors.testConstructor_long_long_Chronology1()",
        "snippet": "    public void testConstructor_long_long_Chronology1() throws Throwable {\n        DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0, CopticChronology.getInstance());\n        DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1, CopticChronology.getInstance());\n        Period test = new Period(dt1.getMillis(), dt2.getMillis(), CopticChronology.getInstance());\n        assertEquals(PeriodType.standard(), test.getPeriodType());\n        assertEquals(1, test.getYears());\n        assertEquals(1, test.getMonths());\n        assertEquals(0, test.getWeeks());\n        assertEquals(1, test.getDays());\n        assertEquals(1, test.getHours());\n        assertEquals(1, test.getMinutes());\n        assertEquals(1, test.getSeconds());\n        assertEquals(1, test.getMillis());\n    }\n",
        "begin_line": 554,
        "end_line": 567,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 555,col 9)-(line 555,col 92)",
            "(line 556,col 9)-(line 556,col 93)",
            "(line 557,col 9)-(line 557,col 99)",
            "(line 558,col 9)-(line 558,col 66)",
            "(line 559,col 9)-(line 559,col 41)",
            "(line 560,col 9)-(line 560,col 42)",
            "(line 561,col 9)-(line 561,col 41)",
            "(line 562,col 9)-(line 562,col 40)",
            "(line 563,col 9)-(line 563,col 41)",
            "(line 564,col 9)-(line 564,col 43)",
            "(line 565,col 9)-(line 565,col 43)",
            "(line 566,col 9)-(line 566,col 42)"
        ]
    },
    {
        "class_name": "org.joda.time.TestPeriod_Constructors",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestPeriod_Constructors.java",
        "signature": "org.joda.time.TestPeriod_Constructors.testConstructor_long_long_Chronology2()",
        "snippet": "    public void testConstructor_long_long_Chronology2() throws Throwable {\n        DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n        DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1);\n        Period test = new Period(dt1.getMillis(), dt2.getMillis(), (Chronology) null);\n        assertEquals(PeriodType.standard(), test.getPeriodType());\n        assertEquals(1, test.getYears());\n        assertEquals(1, test.getMonths());\n        assertEquals(0, test.getWeeks());\n        assertEquals(1, test.getDays());\n        assertEquals(1, test.getHours());\n        assertEquals(1, test.getMinutes());\n        assertEquals(1, test.getSeconds());\n        assertEquals(1, test.getMillis());\n    }\n",
        "begin_line": 569,
        "end_line": 582,
        "comment": "",
        "child_ranges": [
            "(line 570,col 9)-(line 570,col 60)",
            "(line 571,col 9)-(line 571,col 61)",
            "(line 572,col 9)-(line 572,col 86)",
            "(line 573,col 9)-(line 573,col 66)",
            "(line 574,col 9)-(line 574,col 41)",
            "(line 575,col 9)-(line 575,col 42)",
            "(line 576,col 9)-(line 576,col 41)",
            "(line 577,col 9)-(line 577,col 40)",
            "(line 578,col 9)-(line 578,col 41)",
            "(line 579,col 9)-(line 579,col 43)",
            "(line 580,col 9)-(line 580,col 43)",
            "(line 581,col 9)-(line 581,col 42)"
        ]
    },
    {
        "class_name": "org.joda.time.TestPeriod_Constructors",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestPeriod_Constructors.java",
        "signature": "org.joda.time.TestPeriod_Constructors.testConstructor_long_long_PeriodType_Chronology1()",
        "snippet": "    public void testConstructor_long_long_PeriodType_Chronology1() throws Throwable {\n        DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0, CopticChronology.getInstance());\n        DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1, CopticChronology.getInstance());\n        Period test = new Period(dt1.getMillis(), dt2.getMillis(), (PeriodType) null, CopticChronology.getInstance());\n        assertEquals(PeriodType.standard(), test.getPeriodType());\n        assertEquals(1, test.getYears());\n        assertEquals(1, test.getMonths());\n        assertEquals(0, test.getWeeks());\n        assertEquals(1, test.getDays());\n        assertEquals(1, test.getHours());\n        assertEquals(1, test.getMinutes());\n        assertEquals(1, test.getSeconds());\n        assertEquals(1, test.getMillis());\n    }\n",
        "begin_line": 585,
        "end_line": 598,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 586,col 9)-(line 586,col 92)",
            "(line 587,col 9)-(line 587,col 93)",
            "(line 588,col 9)-(line 588,col 118)",
            "(line 589,col 9)-(line 589,col 66)",
            "(line 590,col 9)-(line 590,col 41)",
            "(line 591,col 9)-(line 591,col 42)",
            "(line 592,col 9)-(line 592,col 41)",
            "(line 593,col 9)-(line 593,col 40)",
            "(line 594,col 9)-(line 594,col 41)",
            "(line 595,col 9)-(line 595,col 43)",
            "(line 596,col 9)-(line 596,col 43)",
            "(line 597,col 9)-(line 597,col 42)"
        ]
    },
    {
        "class_name": "org.joda.time.TestPeriod_Constructors",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestPeriod_Constructors.java",
        "signature": "org.joda.time.TestPeriod_Constructors.testConstructor_long_long_PeriodType_Chronology2()",
        "snippet": "    public void testConstructor_long_long_PeriodType_Chronology2() throws Throwable {\n        DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n        DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1);\n        Period test = new Period(dt1.getMillis(), dt2.getMillis(), (PeriodType) null, null);\n        assertEquals(PeriodType.standard(), test.getPeriodType());\n        assertEquals(1, test.getYears());\n        assertEquals(1, test.getMonths());\n        assertEquals(0, test.getWeeks());\n        assertEquals(1, test.getDays());\n        assertEquals(1, test.getHours());\n        assertEquals(1, test.getMinutes());\n        assertEquals(1, test.getSeconds());\n        assertEquals(1, test.getMillis());\n    }\n",
        "begin_line": 600,
        "end_line": 613,
        "comment": "",
        "child_ranges": [
            "(line 601,col 9)-(line 601,col 60)",
            "(line 602,col 9)-(line 602,col 61)",
            "(line 603,col 9)-(line 603,col 92)",
            "(line 604,col 9)-(line 604,col 66)",
            "(line 605,col 9)-(line 605,col 41)",
            "(line 606,col 9)-(line 606,col 42)",
            "(line 607,col 9)-(line 607,col 41)",
            "(line 608,col 9)-(line 608,col 40)",
            "(line 609,col 9)-(line 609,col 41)",
            "(line 610,col 9)-(line 610,col 43)",
            "(line 611,col 9)-(line 611,col 43)",
            "(line 612,col 9)-(line 612,col 42)"
        ]
    },
    {
        "class_name": "org.joda.time.TestPeriod_Constructors",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestPeriod_Constructors.java",
        "signature": "org.joda.time.TestPeriod_Constructors.testConstructor_RI_RI1()",
        "snippet": "    public void testConstructor_RI_RI1() throws Throwable {\n        DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n        DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1);\n        Period test = new Period(dt1, dt2);\n        assertEquals(PeriodType.standard(), test.getPeriodType());\n        assertEquals(1, test.getYears());\n        assertEquals(1, test.getMonths());\n        assertEquals(0, test.getWeeks());\n        assertEquals(1, test.getDays());\n        assertEquals(1, test.getHours());\n        assertEquals(1, test.getMinutes());\n        assertEquals(1, test.getSeconds());\n        assertEquals(1, test.getMillis());\n    }\n",
        "begin_line": 616,
        "end_line": 629,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 617,col 9)-(line 617,col 60)",
            "(line 618,col 9)-(line 618,col 61)",
            "(line 619,col 9)-(line 619,col 43)",
            "(line 620,col 9)-(line 620,col 66)",
            "(line 621,col 9)-(line 621,col 41)",
            "(line 622,col 9)-(line 622,col 42)",
            "(line 623,col 9)-(line 623,col 41)",
            "(line 624,col 9)-(line 624,col 40)",
            "(line 625,col 9)-(line 625,col 41)",
            "(line 626,col 9)-(line 626,col 43)",
            "(line 627,col 9)-(line 627,col 43)",
            "(line 628,col 9)-(line 628,col 42)"
        ]
    },
    {
        "class_name": "org.joda.time.TestPeriod_Constructors",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestPeriod_Constructors.java",
        "signature": "org.joda.time.TestPeriod_Constructors.testConstructor_RI_RI2()",
        "snippet": "    public void testConstructor_RI_RI2() throws Throwable {\n        DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n        DateTime dt2 = new DateTime(2005, 7, 17, 1, 1, 1, 1);\n        Period test = new Period(dt1, dt2);\n        assertEquals(PeriodType.standard(), test.getPeriodType());\n        assertEquals(1, test.getYears());\n        assertEquals(1, test.getMonths());\n        assertEquals(1, test.getWeeks());\n        assertEquals(1, test.getDays());\n        assertEquals(1, test.getHours());\n        assertEquals(1, test.getMinutes());\n        assertEquals(1, test.getSeconds());\n        assertEquals(1, test.getMillis());\n    }\n",
        "begin_line": 631,
        "end_line": 644,
        "comment": "",
        "child_ranges": [
            "(line 632,col 9)-(line 632,col 60)",
            "(line 633,col 9)-(line 633,col 61)",
            "(line 634,col 9)-(line 634,col 43)",
            "(line 635,col 9)-(line 635,col 66)",
            "(line 636,col 9)-(line 636,col 41)",
            "(line 637,col 9)-(line 637,col 42)",
            "(line 638,col 9)-(line 638,col 41)",
            "(line 639,col 9)-(line 639,col 40)",
            "(line 640,col 9)-(line 640,col 41)",
            "(line 641,col 9)-(line 641,col 43)",
            "(line 642,col 9)-(line 642,col 43)",
            "(line 643,col 9)-(line 643,col 42)"
        ]
    },
    {
        "class_name": "org.joda.time.TestPeriod_Constructors",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestPeriod_Constructors.java",
        "signature": "org.joda.time.TestPeriod_Constructors.testConstructor_RI_RI3()",
        "snippet": "    public void testConstructor_RI_RI3() throws Throwable {\n        DateTime dt1 = null;  // 2002-06-09T01:00+01:00\n        DateTime dt2 = new DateTime(2005, 7, 17, 1, 1, 1, 1);\n        Period test = new Period(dt1, dt2);\n        assertEquals(PeriodType.standard(), test.getPeriodType());\n        assertEquals(3, test.getYears());\n        assertEquals(1, test.getMonths());\n        assertEquals(1, test.getWeeks());\n        assertEquals(1, test.getDays());\n        assertEquals(0, test.getHours());\n        assertEquals(1, test.getMinutes());\n        assertEquals(1, test.getSeconds());\n        assertEquals(1, test.getMillis());\n    }\n",
        "begin_line": 646,
        "end_line": 659,
        "comment": "",
        "child_ranges": [
            "(line 647,col 9)-(line 647,col 28)",
            "(line 648,col 9)-(line 648,col 61)",
            "(line 649,col 9)-(line 649,col 43)",
            "(line 650,col 9)-(line 650,col 66)",
            "(line 651,col 9)-(line 651,col 41)",
            "(line 652,col 9)-(line 652,col 42)",
            "(line 653,col 9)-(line 653,col 41)",
            "(line 654,col 9)-(line 654,col 40)",
            "(line 655,col 9)-(line 655,col 41)",
            "(line 656,col 9)-(line 656,col 43)",
            "(line 657,col 9)-(line 657,col 43)",
            "(line 658,col 9)-(line 658,col 42)"
        ]
    },
    {
        "class_name": "org.joda.time.TestPeriod_Constructors",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestPeriod_Constructors.java",
        "signature": "org.joda.time.TestPeriod_Constructors.testConstructor_RI_RI4()",
        "snippet": "    public void testConstructor_RI_RI4() throws Throwable {\n        DateTime dt1 = new DateTime(2005, 7, 17, 1, 1, 1, 1);\n        DateTime dt2 = null;  // 2002-06-09T01:00+01:00\n        Period test = new Period(dt1, dt2);\n        assertEquals(PeriodType.standard(), test.getPeriodType());\n        assertEquals(-3, test.getYears());\n        assertEquals(-1, test.getMonths());\n        assertEquals(-1, test.getWeeks());\n        assertEquals(-1, test.getDays());\n        assertEquals(0, test.getHours());\n        assertEquals(-1, test.getMinutes());\n        assertEquals(-1, test.getSeconds());\n        assertEquals(-1, test.getMillis());\n    }\n",
        "begin_line": 661,
        "end_line": 674,
        "comment": "",
        "child_ranges": [
            "(line 662,col 9)-(line 662,col 61)",
            "(line 663,col 9)-(line 663,col 28)",
            "(line 664,col 9)-(line 664,col 43)",
            "(line 665,col 9)-(line 665,col 66)",
            "(line 666,col 9)-(line 666,col 42)",
            "(line 667,col 9)-(line 667,col 43)",
            "(line 668,col 9)-(line 668,col 42)",
            "(line 669,col 9)-(line 669,col 41)",
            "(line 670,col 9)-(line 670,col 41)",
            "(line 671,col 9)-(line 671,col 44)",
            "(line 672,col 9)-(line 672,col 44)",
            "(line 673,col 9)-(line 673,col 43)"
        ]
    },
    {
        "class_name": "org.joda.time.TestPeriod_Constructors",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestPeriod_Constructors.java",
        "signature": "org.joda.time.TestPeriod_Constructors.testConstructor_RI_RI5()",
        "snippet": "    public void testConstructor_RI_RI5() throws Throwable {\n        DateTime dt1 = null;  // 2002-06-09T01:00+01:00\n        DateTime dt2 = null;  // 2002-06-09T01:00+01:00\n        Period test = new Period(dt1, dt2);\n        assertEquals(PeriodType.standard(), test.getPeriodType());\n        assertEquals(0, test.getYears());\n        assertEquals(0, test.getMonths());\n        assertEquals(0, test.getWeeks());\n        assertEquals(0, test.getDays());\n        assertEquals(0, test.getHours());\n        assertEquals(0, test.getMinutes());\n        assertEquals(0, test.getSeconds());\n        assertEquals(0, test.getMillis());\n    }\n",
        "begin_line": 676,
        "end_line": 689,
        "comment": "",
        "child_ranges": [
            "(line 677,col 9)-(line 677,col 28)",
            "(line 678,col 9)-(line 678,col 28)",
            "(line 679,col 9)-(line 679,col 43)",
            "(line 680,col 9)-(line 680,col 66)",
            "(line 681,col 9)-(line 681,col 41)",
            "(line 682,col 9)-(line 682,col 42)",
            "(line 683,col 9)-(line 683,col 41)",
            "(line 684,col 9)-(line 684,col 40)",
            "(line 685,col 9)-(line 685,col 41)",
            "(line 686,col 9)-(line 686,col 43)",
            "(line 687,col 9)-(line 687,col 43)",
            "(line 688,col 9)-(line 688,col 42)"
        ]
    },
    {
        "class_name": "org.joda.time.TestPeriod_Constructors",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestPeriod_Constructors.java",
        "signature": "org.joda.time.TestPeriod_Constructors.testConstructor_RI_RI_PeriodType1()",
        "snippet": "    public void testConstructor_RI_RI_PeriodType1() throws Throwable {\n        DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n        DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1);\n        Period test = new Period(dt1, dt2, null);\n        assertEquals(PeriodType.standard(), test.getPeriodType());\n        assertEquals(1, test.getYears());\n        assertEquals(1, test.getMonths());\n        assertEquals(0, test.getWeeks());\n        assertEquals(1, test.getDays());\n        assertEquals(1, test.getHours());\n        assertEquals(1, test.getMinutes());\n        assertEquals(1, test.getSeconds());\n        assertEquals(1, test.getMillis());\n    }\n",
        "begin_line": 692,
        "end_line": 705,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 693,col 9)-(line 693,col 60)",
            "(line 694,col 9)-(line 694,col 61)",
            "(line 695,col 9)-(line 695,col 49)",
            "(line 696,col 9)-(line 696,col 66)",
            "(line 697,col 9)-(line 697,col 41)",
            "(line 698,col 9)-(line 698,col 42)",
            "(line 699,col 9)-(line 699,col 41)",
            "(line 700,col 9)-(line 700,col 40)",
            "(line 701,col 9)-(line 701,col 41)",
            "(line 702,col 9)-(line 702,col 43)",
            "(line 703,col 9)-(line 703,col 43)",
            "(line 704,col 9)-(line 704,col 42)"
        ]
    },
    {
        "class_name": "org.joda.time.TestPeriod_Constructors",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestPeriod_Constructors.java",
        "signature": "org.joda.time.TestPeriod_Constructors.testConstructor_RI_RI_PeriodType2()",
        "snippet": "    public void testConstructor_RI_RI_PeriodType2() throws Throwable {\n        DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n        DateTime dt2 = new DateTime(2004, 7, 10, 1, 1, 1, 1);\n        Period test = new Period(dt1, dt2, PeriodType.dayTime());\n        assertEquals(PeriodType.dayTime(), test.getPeriodType());\n        assertEquals(0, test.getYears());\n        assertEquals(0, test.getMonths());\n        assertEquals(0, test.getWeeks());\n        assertEquals(31, test.getDays());\n        assertEquals(1, test.getHours());\n        assertEquals(1, test.getMinutes());\n        assertEquals(1, test.getSeconds());\n        assertEquals(1, test.getMillis());\n    }\n",
        "begin_line": 707,
        "end_line": 720,
        "comment": "",
        "child_ranges": [
            "(line 708,col 9)-(line 708,col 60)",
            "(line 709,col 9)-(line 709,col 61)",
            "(line 710,col 9)-(line 710,col 65)",
            "(line 711,col 9)-(line 711,col 65)",
            "(line 712,col 9)-(line 712,col 41)",
            "(line 713,col 9)-(line 713,col 42)",
            "(line 714,col 9)-(line 714,col 41)",
            "(line 715,col 9)-(line 715,col 41)",
            "(line 716,col 9)-(line 716,col 41)",
            "(line 717,col 9)-(line 717,col 43)",
            "(line 718,col 9)-(line 718,col 43)",
            "(line 719,col 9)-(line 719,col 42)"
        ]
    },
    {
        "class_name": "org.joda.time.TestPeriod_Constructors",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestPeriod_Constructors.java",
        "signature": "org.joda.time.TestPeriod_Constructors.testConstructor_RI_RI_PeriodType3()",
        "snippet": "    public void testConstructor_RI_RI_PeriodType3() throws Throwable {\n        DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n        DateTime dt2 = new DateTime(2004, 6, 9, 1, 1, 1, 1);\n        Period test = new Period(dt1, dt2, PeriodType.standard().withMillisRemoved());\n        assertEquals(PeriodType.standard().withMillisRemoved(), test.getPeriodType());\n        assertEquals(0, test.getYears());\n        assertEquals(0, test.getMonths());\n        assertEquals(0, test.getWeeks());\n        assertEquals(0, test.getDays());\n        assertEquals(1, test.getHours());\n        assertEquals(1, test.getMinutes());\n        assertEquals(1, test.getSeconds());\n        assertEquals(0, test.getMillis());\n    }\n",
        "begin_line": 722,
        "end_line": 735,
        "comment": "",
        "child_ranges": [
            "(line 723,col 9)-(line 723,col 60)",
            "(line 724,col 9)-(line 724,col 60)",
            "(line 725,col 9)-(line 725,col 86)",
            "(line 726,col 9)-(line 726,col 86)",
            "(line 727,col 9)-(line 727,col 41)",
            "(line 728,col 9)-(line 728,col 42)",
            "(line 729,col 9)-(line 729,col 41)",
            "(line 730,col 9)-(line 730,col 40)",
            "(line 731,col 9)-(line 731,col 41)",
            "(line 732,col 9)-(line 732,col 43)",
            "(line 733,col 9)-(line 733,col 43)",
            "(line 734,col 9)-(line 734,col 42)"
        ]
    },
    {
        "class_name": "org.joda.time.TestPeriod_Constructors",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestPeriod_Constructors.java",
        "signature": "org.joda.time.TestPeriod_Constructors.testConstructor_RI_RI_PeriodType4()",
        "snippet": "    public void testConstructor_RI_RI_PeriodType4() throws Throwable {\n        DateTime dt1 = null;  // 2002-06-09T01:00+01:00\n        DateTime dt2 = new DateTime(2005, 7, 17, 1, 1, 1, 1);\n        Period test = new Period(dt1, dt2, PeriodType.standard());\n        assertEquals(PeriodType.standard(), test.getPeriodType());\n        assertEquals(3, test.getYears());\n        assertEquals(1, test.getMonths());\n        assertEquals(1, test.getWeeks());\n        assertEquals(1, test.getDays());\n        assertEquals(0, test.getHours());\n        assertEquals(1, test.getMinutes());\n        assertEquals(1, test.getSeconds());\n        assertEquals(1, test.getMillis());\n    }\n",
        "begin_line": 737,
        "end_line": 750,
        "comment": "",
        "child_ranges": [
            "(line 738,col 9)-(line 738,col 28)",
            "(line 739,col 9)-(line 739,col 61)",
            "(line 740,col 9)-(line 740,col 66)",
            "(line 741,col 9)-(line 741,col 66)",
            "(line 742,col 9)-(line 742,col 41)",
            "(line 743,col 9)-(line 743,col 42)",
            "(line 744,col 9)-(line 744,col 41)",
            "(line 745,col 9)-(line 745,col 40)",
            "(line 746,col 9)-(line 746,col 41)",
            "(line 747,col 9)-(line 747,col 43)",
            "(line 748,col 9)-(line 748,col 43)",
            "(line 749,col 9)-(line 749,col 42)"
        ]
    },
    {
        "class_name": "org.joda.time.TestPeriod_Constructors",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestPeriod_Constructors.java",
        "signature": "org.joda.time.TestPeriod_Constructors.testConstructor_RI_RI_PeriodType5()",
        "snippet": "    public void testConstructor_RI_RI_PeriodType5() throws Throwable {\n        DateTime dt1 = null;  // 2002-06-09T01:00+01:00\n        DateTime dt2 = null;  // 2002-06-09T01:00+01:00\n        Period test = new Period(dt1, dt2, PeriodType.standard());\n        assertEquals(PeriodType.standard(), test.getPeriodType());\n        assertEquals(0, test.getYears());\n        assertEquals(0, test.getMonths());\n        assertEquals(0, test.getWeeks());\n        assertEquals(0, test.getDays());\n        assertEquals(0, test.getHours());\n        assertEquals(0, test.getMinutes());\n        assertEquals(0, test.getSeconds());\n        assertEquals(0, test.getMillis());\n    }\n",
        "begin_line": 752,
        "end_line": 765,
        "comment": "",
        "child_ranges": [
            "(line 753,col 9)-(line 753,col 28)",
            "(line 754,col 9)-(line 754,col 28)",
            "(line 755,col 9)-(line 755,col 66)",
            "(line 756,col 9)-(line 756,col 66)",
            "(line 757,col 9)-(line 757,col 41)",
            "(line 758,col 9)-(line 758,col 42)",
            "(line 759,col 9)-(line 759,col 41)",
            "(line 760,col 9)-(line 760,col 40)",
            "(line 761,col 9)-(line 761,col 41)",
            "(line 762,col 9)-(line 762,col 43)",
            "(line 763,col 9)-(line 763,col 43)",
            "(line 764,col 9)-(line 764,col 42)"
        ]
    },
    {
        "class_name": "org.joda.time.TestPeriod_Constructors",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestPeriod_Constructors.java",
        "signature": "org.joda.time.TestPeriod_Constructors.testConstructor_RP_RP1()",
        "snippet": "    public void testConstructor_RP_RP1() throws Throwable {\n        YearMonthDay dt1 = new YearMonthDay(2004, 6, 9);\n        YearMonthDay dt2 = new YearMonthDay(2005, 7, 10);\n        Period test = new Period(dt1, dt2);\n        assertEquals(PeriodType.standard(), test.getPeriodType());\n        assertEquals(1, test.getYears());\n        assertEquals(1, test.getMonths());\n        assertEquals(0, test.getWeeks());\n        assertEquals(1, test.getDays());\n        assertEquals(0, test.getHours());\n        assertEquals(0, test.getMinutes());\n        assertEquals(0, test.getSeconds());\n        assertEquals(0, test.getMillis());\n    }\n",
        "begin_line": 768,
        "end_line": 781,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 769,col 9)-(line 769,col 56)",
            "(line 770,col 9)-(line 770,col 57)",
            "(line 771,col 9)-(line 771,col 43)",
            "(line 772,col 9)-(line 772,col 66)",
            "(line 773,col 9)-(line 773,col 41)",
            "(line 774,col 9)-(line 774,col 42)",
            "(line 775,col 9)-(line 775,col 41)",
            "(line 776,col 9)-(line 776,col 40)",
            "(line 777,col 9)-(line 777,col 41)",
            "(line 778,col 9)-(line 778,col 43)",
            "(line 779,col 9)-(line 779,col 43)",
            "(line 780,col 9)-(line 780,col 42)"
        ]
    },
    {
        "class_name": "org.joda.time.TestPeriod_Constructors",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestPeriod_Constructors.java",
        "signature": "org.joda.time.TestPeriod_Constructors.testConstructor_RP_RP2()",
        "snippet": "    public void testConstructor_RP_RP2() throws Throwable {\n        YearMonthDay dt1 = new YearMonthDay(2004, 6, 9);\n        YearMonthDay dt2 = new YearMonthDay(2005, 5, 17);\n        Period test = new Period(dt1, dt2);\n        assertEquals(PeriodType.standard(), test.getPeriodType());\n        assertEquals(0, test.getYears());\n        assertEquals(11, test.getMonths());\n        assertEquals(1, test.getWeeks());\n        assertEquals(1, test.getDays());\n        assertEquals(0, test.getHours());\n        assertEquals(0, test.getMinutes());\n        assertEquals(0, test.getSeconds());\n        assertEquals(0, test.getMillis());\n    }\n",
        "begin_line": 783,
        "end_line": 796,
        "comment": "",
        "child_ranges": [
            "(line 784,col 9)-(line 784,col 56)",
            "(line 785,col 9)-(line 785,col 57)",
            "(line 786,col 9)-(line 786,col 43)",
            "(line 787,col 9)-(line 787,col 66)",
            "(line 788,col 9)-(line 788,col 41)",
            "(line 789,col 9)-(line 789,col 43)",
            "(line 790,col 9)-(line 790,col 41)",
            "(line 791,col 9)-(line 791,col 40)",
            "(line 792,col 9)-(line 792,col 41)",
            "(line 793,col 9)-(line 793,col 43)",
            "(line 794,col 9)-(line 794,col 43)",
            "(line 795,col 9)-(line 795,col 42)"
        ]
    },
    {
        "class_name": "org.joda.time.TestPeriod_Constructors",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestPeriod_Constructors.java",
        "signature": "org.joda.time.TestPeriod_Constructors.testConstructor_RP_RP2Local()",
        "snippet": "    public void testConstructor_RP_RP2Local() throws Throwable {\n        LocalDate dt1 = new LocalDate(2004, 6, 9);\n        LocalDate dt2 = new LocalDate(2005, 5, 17);\n        Period test = new Period(dt1, dt2);\n        assertEquals(PeriodType.standard(), test.getPeriodType());\n        assertEquals(0, test.getYears());\n        assertEquals(11, test.getMonths());\n        assertEquals(1, test.getWeeks());\n        assertEquals(1, test.getDays());\n        assertEquals(0, test.getHours());\n        assertEquals(0, test.getMinutes());\n        assertEquals(0, test.getSeconds());\n        assertEquals(0, test.getMillis());\n    }\n",
        "begin_line": 798,
        "end_line": 811,
        "comment": "",
        "child_ranges": [
            "(line 799,col 9)-(line 799,col 50)",
            "(line 800,col 9)-(line 800,col 51)",
            "(line 801,col 9)-(line 801,col 43)",
            "(line 802,col 9)-(line 802,col 66)",
            "(line 803,col 9)-(line 803,col 41)",
            "(line 804,col 9)-(line 804,col 43)",
            "(line 805,col 9)-(line 805,col 41)",
            "(line 806,col 9)-(line 806,col 40)",
            "(line 807,col 9)-(line 807,col 41)",
            "(line 808,col 9)-(line 808,col 43)",
            "(line 809,col 9)-(line 809,col 43)",
            "(line 810,col 9)-(line 810,col 42)"
        ]
    },
    {
        "class_name": "org.joda.time.TestPeriod_Constructors",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestPeriod_Constructors.java",
        "signature": "org.joda.time.TestPeriod_Constructors.testConstructor_RP_RP3()",
        "snippet": "    public void testConstructor_RP_RP3() throws Throwable {\n        YearMonthDay dt1 = null;\n        YearMonthDay dt2 = new YearMonthDay(2005, 7, 17);\n        try {\n            new Period(dt1, dt2);\n            fail();\n        } catch (IllegalArgumentException ex) {}\n    }\n",
        "begin_line": 813,
        "end_line": 820,
        "comment": "",
        "child_ranges": [
            "(line 814,col 9)-(line 814,col 32)",
            "(line 815,col 9)-(line 815,col 57)",
            "(line 816,col 9)-(line 819,col 48)"
        ]
    },
    {
        "class_name": "org.joda.time.TestPeriod_Constructors",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestPeriod_Constructors.java",
        "signature": "org.joda.time.TestPeriod_Constructors.testConstructor_RP_RP4()",
        "snippet": "    public void testConstructor_RP_RP4() throws Throwable {\n        YearMonthDay dt1 = new YearMonthDay(2005, 7, 17);\n        YearMonthDay dt2 = null;\n        try {\n            new Period(dt1, dt2);\n            fail();\n        } catch (IllegalArgumentException ex) {}\n    }\n",
        "begin_line": 822,
        "end_line": 829,
        "comment": "",
        "child_ranges": [
            "(line 823,col 9)-(line 823,col 57)",
            "(line 824,col 9)-(line 824,col 32)",
            "(line 825,col 9)-(line 828,col 48)"
        ]
    },
    {
        "class_name": "org.joda.time.TestPeriod_Constructors",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestPeriod_Constructors.java",
        "signature": "org.joda.time.TestPeriod_Constructors.testConstructor_RP_RP5()",
        "snippet": "    public void testConstructor_RP_RP5() throws Throwable {\n        YearMonthDay dt1 = null;\n        YearMonthDay dt2 = null;\n        try {\n            new Period(dt1, dt2);\n            fail();\n        } catch (IllegalArgumentException ex) {}\n    }\n",
        "begin_line": 831,
        "end_line": 838,
        "comment": "",
        "child_ranges": [
            "(line 832,col 9)-(line 832,col 32)",
            "(line 833,col 9)-(line 833,col 32)",
            "(line 834,col 9)-(line 837,col 48)"
        ]
    },
    {
        "class_name": "org.joda.time.TestPeriod_Constructors",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestPeriod_Constructors.java",
        "signature": "org.joda.time.TestPeriod_Constructors.testConstructor_RP_RP6()",
        "snippet": "    public void testConstructor_RP_RP6() throws Throwable {\n        YearMonthDay dt1 = new YearMonthDay(2005, 7, 17);\n        TimeOfDay dt2 = new TimeOfDay(10, 20, 30, 40);\n        try {\n            new Period(dt1, dt2);\n            fail();\n        } catch (IllegalArgumentException ex) {}\n    }\n",
        "begin_line": 840,
        "end_line": 847,
        "comment": "",
        "child_ranges": [
            "(line 841,col 9)-(line 841,col 57)",
            "(line 842,col 9)-(line 842,col 54)",
            "(line 843,col 9)-(line 846,col 48)"
        ]
    },
    {
        "class_name": "org.joda.time.TestPeriod_Constructors",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestPeriod_Constructors.java",
        "signature": "org.joda.time.TestPeriod_Constructors.testConstructor_RP_RP7()",
        "snippet": "    public void testConstructor_RP_RP7() throws Throwable {\n        Partial dt1 = new Partial().with(DateTimeFieldType.year(), 2005).with(DateTimeFieldType.monthOfYear(), 12);\n        Partial dt2 = new Partial().with(DateTimeFieldType.year(), 2005).with(DateTimeFieldType.hourOfDay(), 14);\n        try {\n            new Period(dt1, dt2);\n            fail();\n        } catch (IllegalArgumentException ex) {}\n    }\n",
        "begin_line": 849,
        "end_line": 856,
        "comment": "",
        "child_ranges": [
            "(line 850,col 9)-(line 850,col 115)",
            "(line 851,col 9)-(line 851,col 113)",
            "(line 852,col 9)-(line 855,col 48)"
        ]
    },
    {
        "class_name": "org.joda.time.TestPeriod_Constructors",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestPeriod_Constructors.java",
        "signature": "org.joda.time.TestPeriod_Constructors.testConstructor_RP_RP8()",
        "snippet": "    public void testConstructor_RP_RP8() throws Throwable {\n        Partial dt1 = new Partial().with(DateTimeFieldType.year(), 2005).with(DateTimeFieldType.hourOfDay(), 12);\n        Partial dt2 = new Partial().with(DateTimeFieldType.year(), 2005).with(DateTimeFieldType.hourOfDay(), 14);\n        try {\n            new Period(dt1, dt2);\n            fail();\n        } catch (IllegalArgumentException ex) {}\n    }\n",
        "begin_line": 858,
        "end_line": 865,
        "comment": "",
        "child_ranges": [
            "(line 859,col 9)-(line 859,col 113)",
            "(line 860,col 9)-(line 860,col 113)",
            "(line 861,col 9)-(line 864,col 48)"
        ]
    },
    {
        "class_name": "org.joda.time.TestPeriod_Constructors",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestPeriod_Constructors.java",
        "signature": "org.joda.time.TestPeriod_Constructors.testConstructor_RP_RP_PeriodType1()",
        "snippet": "    public void testConstructor_RP_RP_PeriodType1() throws Throwable {\n        YearMonthDay dt1 = new YearMonthDay(2004, 6, 9);\n        YearMonthDay dt2 = new YearMonthDay(2005, 7, 10);\n        Period test = new Period(dt1, dt2, PeriodType.standard());\n        assertEquals(PeriodType.standard(), test.getPeriodType());\n        assertEquals(1, test.getYears());\n        assertEquals(1, test.getMonths());\n        assertEquals(0, test.getWeeks());\n        assertEquals(1, test.getDays());\n        assertEquals(0, test.getHours());\n        assertEquals(0, test.getMinutes());\n        assertEquals(0, test.getSeconds());\n        assertEquals(0, test.getMillis());\n    }\n",
        "begin_line": 868,
        "end_line": 881,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 869,col 9)-(line 869,col 56)",
            "(line 870,col 9)-(line 870,col 57)",
            "(line 871,col 9)-(line 871,col 66)",
            "(line 872,col 9)-(line 872,col 66)",
            "(line 873,col 9)-(line 873,col 41)",
            "(line 874,col 9)-(line 874,col 42)",
            "(line 875,col 9)-(line 875,col 41)",
            "(line 876,col 9)-(line 876,col 40)",
            "(line 877,col 9)-(line 877,col 41)",
            "(line 878,col 9)-(line 878,col 43)",
            "(line 879,col 9)-(line 879,col 43)",
            "(line 880,col 9)-(line 880,col 42)"
        ]
    },
    {
        "class_name": "org.joda.time.TestPeriod_Constructors",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestPeriod_Constructors.java",
        "signature": "org.joda.time.TestPeriod_Constructors.testConstructor_RP_RP_PeriodType2()",
        "snippet": "    public void testConstructor_RP_RP_PeriodType2() throws Throwable {\n        YearMonthDay dt1 = new YearMonthDay(2004, 6, 9);\n        YearMonthDay dt2 = new YearMonthDay(2005, 5, 17);\n        Period test = new Period(dt1, dt2, PeriodType.yearMonthDay());\n        assertEquals(PeriodType.yearMonthDay(), test.getPeriodType());\n        assertEquals(0, test.getYears());\n        assertEquals(11, test.getMonths());\n        assertEquals(0, test.getWeeks());\n        assertEquals(8, test.getDays());\n        assertEquals(0, test.getHours());\n        assertEquals(0, test.getMinutes());\n        assertEquals(0, test.getSeconds());\n        assertEquals(0, test.getMillis());\n    }\n",
        "begin_line": 883,
        "end_line": 896,
        "comment": "",
        "child_ranges": [
            "(line 884,col 9)-(line 884,col 56)",
            "(line 885,col 9)-(line 885,col 57)",
            "(line 886,col 9)-(line 886,col 70)",
            "(line 887,col 9)-(line 887,col 70)",
            "(line 888,col 9)-(line 888,col 41)",
            "(line 889,col 9)-(line 889,col 43)",
            "(line 890,col 9)-(line 890,col 41)",
            "(line 891,col 9)-(line 891,col 40)",
            "(line 892,col 9)-(line 892,col 41)",
            "(line 893,col 9)-(line 893,col 43)",
            "(line 894,col 9)-(line 894,col 43)",
            "(line 895,col 9)-(line 895,col 42)"
        ]
    },
    {
        "class_name": "org.joda.time.TestPeriod_Constructors",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestPeriod_Constructors.java",
        "signature": "org.joda.time.TestPeriod_Constructors.testConstructor_RP_RP_PeriodType2Local()",
        "snippet": "    public void testConstructor_RP_RP_PeriodType2Local() throws Throwable {\n        LocalDate dt1 = new LocalDate(2004, 6, 9);\n        LocalDate dt2 = new LocalDate(2005, 5, 17);\n        Period test = new Period(dt1, dt2, PeriodType.yearMonthDay());\n        assertEquals(PeriodType.yearMonthDay(), test.getPeriodType());\n        assertEquals(0, test.getYears());\n        assertEquals(11, test.getMonths());\n        assertEquals(0, test.getWeeks());\n        assertEquals(8, test.getDays());\n        assertEquals(0, test.getHours());\n        assertEquals(0, test.getMinutes());\n        assertEquals(0, test.getSeconds());\n        assertEquals(0, test.getMillis());\n    }\n",
        "begin_line": 898,
        "end_line": 911,
        "comment": "",
        "child_ranges": [
            "(line 899,col 9)-(line 899,col 50)",
            "(line 900,col 9)-(line 900,col 51)",
            "(line 901,col 9)-(line 901,col 70)",
            "(line 902,col 9)-(line 902,col 70)",
            "(line 903,col 9)-(line 903,col 41)",
            "(line 904,col 9)-(line 904,col 43)",
            "(line 905,col 9)-(line 905,col 41)",
            "(line 906,col 9)-(line 906,col 40)",
            "(line 907,col 9)-(line 907,col 41)",
            "(line 908,col 9)-(line 908,col 43)",
            "(line 909,col 9)-(line 909,col 43)",
            "(line 910,col 9)-(line 910,col 42)"
        ]
    },
    {
        "class_name": "org.joda.time.TestPeriod_Constructors",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestPeriod_Constructors.java",
        "signature": "org.joda.time.TestPeriod_Constructors.testConstructor_RP_RP_PeriodType3()",
        "snippet": "    public void testConstructor_RP_RP_PeriodType3() throws Throwable {\n        YearMonthDay dt1 = null;\n        YearMonthDay dt2 = new YearMonthDay(2005, 7, 17);\n        try {\n            new Period(dt1, dt2, PeriodType.standard());\n            fail();\n        } catch (IllegalArgumentException ex) {}\n    }\n",
        "begin_line": 913,
        "end_line": 920,
        "comment": "",
        "child_ranges": [
            "(line 914,col 9)-(line 914,col 32)",
            "(line 915,col 9)-(line 915,col 57)",
            "(line 916,col 9)-(line 919,col 48)"
        ]
    },
    {
        "class_name": "org.joda.time.TestPeriod_Constructors",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestPeriod_Constructors.java",
        "signature": "org.joda.time.TestPeriod_Constructors.testConstructor_RP_RP_PeriodType4()",
        "snippet": "    public void testConstructor_RP_RP_PeriodType4() throws Throwable {\n        YearMonthDay dt1 = new YearMonthDay(2005, 7, 17);\n        YearMonthDay dt2 = null;\n        try {\n            new Period(dt1, dt2);\n            fail();\n        } catch (IllegalArgumentException ex) {}\n    }\n",
        "begin_line": 922,
        "end_line": 929,
        "comment": "",
        "child_ranges": [
            "(line 923,col 9)-(line 923,col 57)",
            "(line 924,col 9)-(line 924,col 32)",
            "(line 925,col 9)-(line 928,col 48)"
        ]
    },
    {
        "class_name": "org.joda.time.TestPeriod_Constructors",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestPeriod_Constructors.java",
        "signature": "org.joda.time.TestPeriod_Constructors.testConstructor_RP_RP_PeriodType5()",
        "snippet": "    public void testConstructor_RP_RP_PeriodType5() throws Throwable {\n        YearMonthDay dt1 = null;\n        YearMonthDay dt2 = null;\n        try {\n            new Period(dt1, dt2, PeriodType.standard());\n            fail();\n        } catch (IllegalArgumentException ex) {}\n    }\n",
        "begin_line": 931,
        "end_line": 938,
        "comment": "",
        "child_ranges": [
            "(line 932,col 9)-(line 932,col 32)",
            "(line 933,col 9)-(line 933,col 32)",
            "(line 934,col 9)-(line 937,col 48)"
        ]
    },
    {
        "class_name": "org.joda.time.TestPeriod_Constructors",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestPeriod_Constructors.java",
        "signature": "org.joda.time.TestPeriod_Constructors.testConstructor_RP_RP_PeriodType6()",
        "snippet": "    public void testConstructor_RP_RP_PeriodType6() throws Throwable {\n        YearMonthDay dt1 = new YearMonthDay(2005, 7, 17);\n        TimeOfDay dt2 = new TimeOfDay(10, 20, 30, 40);\n        try {\n            new Period(dt1, dt2, PeriodType.standard());\n            fail();\n        } catch (IllegalArgumentException ex) {}\n    }\n",
        "begin_line": 940,
        "end_line": 947,
        "comment": "",
        "child_ranges": [
            "(line 941,col 9)-(line 941,col 57)",
            "(line 942,col 9)-(line 942,col 54)",
            "(line 943,col 9)-(line 946,col 48)"
        ]
    },
    {
        "class_name": "org.joda.time.TestPeriod_Constructors",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestPeriod_Constructors.java",
        "signature": "org.joda.time.TestPeriod_Constructors.testConstructor_RP_RP_PeriodType7()",
        "snippet": "    public void testConstructor_RP_RP_PeriodType7() throws Throwable {\n        Partial dt1 = new Partial().with(DateTimeFieldType.year(), 2005).with(DateTimeFieldType.monthOfYear(), 12);\n        Partial dt2 = new Partial().with(DateTimeFieldType.year(), 2005).with(DateTimeFieldType.hourOfDay(), 14);\n        try {\n            new Period(dt1, dt2, PeriodType.standard());\n            fail();\n        } catch (IllegalArgumentException ex) {}\n    }\n",
        "begin_line": 949,
        "end_line": 956,
        "comment": "",
        "child_ranges": [
            "(line 950,col 9)-(line 950,col 115)",
            "(line 951,col 9)-(line 951,col 113)",
            "(line 952,col 9)-(line 955,col 48)"
        ]
    },
    {
        "class_name": "org.joda.time.TestPeriod_Constructors",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestPeriod_Constructors.java",
        "signature": "org.joda.time.TestPeriod_Constructors.testConstructor_RP_RP_PeriodType8()",
        "snippet": "    public void testConstructor_RP_RP_PeriodType8() throws Throwable {\n        Partial dt1 = new Partial().with(DateTimeFieldType.year(), 2005).with(DateTimeFieldType.hourOfDay(), 12);\n        Partial dt2 = new Partial().with(DateTimeFieldType.year(), 2005).with(DateTimeFieldType.hourOfDay(), 14);\n        try {\n            new Period(dt1, dt2, PeriodType.standard());\n            fail();\n        } catch (IllegalArgumentException ex) {}\n    }\n",
        "begin_line": 958,
        "end_line": 965,
        "comment": "",
        "child_ranges": [
            "(line 959,col 9)-(line 959,col 113)",
            "(line 960,col 9)-(line 960,col 113)",
            "(line 961,col 9)-(line 964,col 48)"
        ]
    },
    {
        "class_name": "org.joda.time.TestPeriod_Constructors",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestPeriod_Constructors.java",
        "signature": "org.joda.time.TestPeriod_Constructors.testConstructor_RI_RD1()",
        "snippet": "    public void testConstructor_RI_RD1() throws Throwable {\n        DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n        DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1);\n        Duration dur = new Interval(dt1, dt2).toDuration();\n        Period test = new Period(dt1, dur);\n        assertEquals(PeriodType.standard(), test.getPeriodType());\n        assertEquals(1, test.getYears());\n        assertEquals(1, test.getMonths());\n        assertEquals(0, test.getWeeks());\n        assertEquals(1, test.getDays());\n        assertEquals(1, test.getHours());\n        assertEquals(1, test.getMinutes());\n        assertEquals(1, test.getSeconds());\n        assertEquals(1, test.getMillis());\n    }\n",
        "begin_line": 968,
        "end_line": 982,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 969,col 9)-(line 969,col 60)",
            "(line 970,col 9)-(line 970,col 61)",
            "(line 971,col 9)-(line 971,col 59)",
            "(line 972,col 9)-(line 972,col 43)",
            "(line 973,col 9)-(line 973,col 66)",
            "(line 974,col 9)-(line 974,col 41)",
            "(line 975,col 9)-(line 975,col 42)",
            "(line 976,col 9)-(line 976,col 41)",
            "(line 977,col 9)-(line 977,col 40)",
            "(line 978,col 9)-(line 978,col 41)",
            "(line 979,col 9)-(line 979,col 43)",
            "(line 980,col 9)-(line 980,col 43)",
            "(line 981,col 9)-(line 981,col 42)"
        ]
    },
    {
        "class_name": "org.joda.time.TestPeriod_Constructors",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestPeriod_Constructors.java",
        "signature": "org.joda.time.TestPeriod_Constructors.testConstructor_RI_RD2()",
        "snippet": "    public void testConstructor_RI_RD2() throws Throwable {\n        DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n        Duration dur = null;\n        Period test = new Period(dt1, dur);\n        assertEquals(PeriodType.standard(), test.getPeriodType());\n        assertEquals(0, test.getYears());\n        assertEquals(0, test.getMonths());\n        assertEquals(0, test.getWeeks());\n        assertEquals(0, test.getDays());\n        assertEquals(0, test.getHours());\n        assertEquals(0, test.getMinutes());\n        assertEquals(0, test.getSeconds());\n        assertEquals(0, test.getMillis());\n    }\n",
        "begin_line": 984,
        "end_line": 997,
        "comment": "",
        "child_ranges": [
            "(line 985,col 9)-(line 985,col 60)",
            "(line 986,col 9)-(line 986,col 28)",
            "(line 987,col 9)-(line 987,col 43)",
            "(line 988,col 9)-(line 988,col 66)",
            "(line 989,col 9)-(line 989,col 41)",
            "(line 990,col 9)-(line 990,col 42)",
            "(line 991,col 9)-(line 991,col 41)",
            "(line 992,col 9)-(line 992,col 40)",
            "(line 993,col 9)-(line 993,col 41)",
            "(line 994,col 9)-(line 994,col 43)",
            "(line 995,col 9)-(line 995,col 43)",
            "(line 996,col 9)-(line 996,col 42)"
        ]
    },
    {
        "class_name": "org.joda.time.TestPeriod_Constructors",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestPeriod_Constructors.java",
        "signature": "org.joda.time.TestPeriod_Constructors.testConstructor_RI_RD_PeriodType1()",
        "snippet": "    public void testConstructor_RI_RD_PeriodType1() throws Throwable {\n        DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n        DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1);\n        Duration dur = new Interval(dt1, dt2).toDuration();\n        Period test = new Period(dt1, dur, PeriodType.yearDayTime());\n        assertEquals(PeriodType.yearDayTime(), test.getPeriodType());\n        assertEquals(1, test.getYears());\n        assertEquals(0, test.getMonths());\n        assertEquals(0, test.getWeeks());\n        assertEquals(31, test.getDays());\n        assertEquals(1, test.getHours());\n        assertEquals(1, test.getMinutes());\n        assertEquals(1, test.getSeconds());\n        assertEquals(1, test.getMillis());\n    }\n",
        "begin_line": 1000,
        "end_line": 1014,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 1001,col 9)-(line 1001,col 60)",
            "(line 1002,col 9)-(line 1002,col 61)",
            "(line 1003,col 9)-(line 1003,col 59)",
            "(line 1004,col 9)-(line 1004,col 69)",
            "(line 1005,col 9)-(line 1005,col 69)",
            "(line 1006,col 9)-(line 1006,col 41)",
            "(line 1007,col 9)-(line 1007,col 42)",
            "(line 1008,col 9)-(line 1008,col 41)",
            "(line 1009,col 9)-(line 1009,col 41)",
            "(line 1010,col 9)-(line 1010,col 41)",
            "(line 1011,col 9)-(line 1011,col 43)",
            "(line 1012,col 9)-(line 1012,col 43)",
            "(line 1013,col 9)-(line 1013,col 42)"
        ]
    },
    {
        "class_name": "org.joda.time.TestPeriod_Constructors",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestPeriod_Constructors.java",
        "signature": "org.joda.time.TestPeriod_Constructors.testConstructor_RI_RD_PeriodType2()",
        "snippet": "    public void testConstructor_RI_RD_PeriodType2() throws Throwable {\n        DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n        Duration dur = null;\n        Period test = new Period(dt1, dur, (PeriodType) null);\n        assertEquals(PeriodType.standard(), test.getPeriodType());\n        assertEquals(0, test.getYears());\n        assertEquals(0, test.getMonths());\n        assertEquals(0, test.getWeeks());\n        assertEquals(0, test.getDays());\n        assertEquals(0, test.getHours());\n        assertEquals(0, test.getMinutes());\n        assertEquals(0, test.getSeconds());\n        assertEquals(0, test.getMillis());\n    }\n",
        "begin_line": 1016,
        "end_line": 1029,
        "comment": "",
        "child_ranges": [
            "(line 1017,col 9)-(line 1017,col 60)",
            "(line 1018,col 9)-(line 1018,col 28)",
            "(line 1019,col 9)-(line 1019,col 62)",
            "(line 1020,col 9)-(line 1020,col 66)",
            "(line 1021,col 9)-(line 1021,col 41)",
            "(line 1022,col 9)-(line 1022,col 42)",
            "(line 1023,col 9)-(line 1023,col 41)",
            "(line 1024,col 9)-(line 1024,col 40)",
            "(line 1025,col 9)-(line 1025,col 41)",
            "(line 1026,col 9)-(line 1026,col 43)",
            "(line 1027,col 9)-(line 1027,col 43)",
            "(line 1028,col 9)-(line 1028,col 42)"
        ]
    },
    {
        "class_name": "org.joda.time.TestPeriod_Constructors",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestPeriod_Constructors.java",
        "signature": "org.joda.time.TestPeriod_Constructors.testConstructor_RD_RI1()",
        "snippet": "    public void testConstructor_RD_RI1() throws Throwable {\n        DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n        DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1);\n        Duration dur = new Interval(dt1, dt2).toDuration();\n        Period test = new Period(dur, dt2);\n        assertEquals(PeriodType.standard(), test.getPeriodType());\n        assertEquals(1, test.getYears());\n        assertEquals(1, test.getMonths());\n        assertEquals(0, test.getWeeks());\n        assertEquals(1, test.getDays());\n        assertEquals(1, test.getHours());\n        assertEquals(1, test.getMinutes());\n        assertEquals(1, test.getSeconds());\n        assertEquals(1, test.getMillis());\n    }\n",
        "begin_line": 1032,
        "end_line": 1046,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 1033,col 9)-(line 1033,col 60)",
            "(line 1034,col 9)-(line 1034,col 61)",
            "(line 1035,col 9)-(line 1035,col 59)",
            "(line 1036,col 9)-(line 1036,col 43)",
            "(line 1037,col 9)-(line 1037,col 66)",
            "(line 1038,col 9)-(line 1038,col 41)",
            "(line 1039,col 9)-(line 1039,col 42)",
            "(line 1040,col 9)-(line 1040,col 41)",
            "(line 1041,col 9)-(line 1041,col 40)",
            "(line 1042,col 9)-(line 1042,col 41)",
            "(line 1043,col 9)-(line 1043,col 43)",
            "(line 1044,col 9)-(line 1044,col 43)",
            "(line 1045,col 9)-(line 1045,col 42)"
        ]
    },
    {
        "class_name": "org.joda.time.TestPeriod_Constructors",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestPeriod_Constructors.java",
        "signature": "org.joda.time.TestPeriod_Constructors.testConstructor_RD_RI2()",
        "snippet": "    public void testConstructor_RD_RI2() throws Throwable {\n        DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n        Duration dur = null;\n        Period test = new Period(dur, dt1);\n        assertEquals(PeriodType.standard(), test.getPeriodType());\n        assertEquals(0, test.getYears());\n        assertEquals(0, test.getMonths());\n        assertEquals(0, test.getWeeks());\n        assertEquals(0, test.getDays());\n        assertEquals(0, test.getHours());\n        assertEquals(0, test.getMinutes());\n        assertEquals(0, test.getSeconds());\n        assertEquals(0, test.getMillis());\n    }\n",
        "begin_line": 1048,
        "end_line": 1061,
        "comment": "",
        "child_ranges": [
            "(line 1049,col 9)-(line 1049,col 60)",
            "(line 1050,col 9)-(line 1050,col 28)",
            "(line 1051,col 9)-(line 1051,col 43)",
            "(line 1052,col 9)-(line 1052,col 66)",
            "(line 1053,col 9)-(line 1053,col 41)",
            "(line 1054,col 9)-(line 1054,col 42)",
            "(line 1055,col 9)-(line 1055,col 41)",
            "(line 1056,col 9)-(line 1056,col 40)",
            "(line 1057,col 9)-(line 1057,col 41)",
            "(line 1058,col 9)-(line 1058,col 43)",
            "(line 1059,col 9)-(line 1059,col 43)",
            "(line 1060,col 9)-(line 1060,col 42)"
        ]
    },
    {
        "class_name": "org.joda.time.TestPeriod_Constructors",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestPeriod_Constructors.java",
        "signature": "org.joda.time.TestPeriod_Constructors.testConstructor_RD_RI_PeriodType1()",
        "snippet": "    public void testConstructor_RD_RI_PeriodType1() throws Throwable {\n        DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n        DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1);\n        Duration dur = new Interval(dt1, dt2).toDuration();\n        Period test = new Period(dur, dt2, PeriodType.yearDayTime());\n        assertEquals(PeriodType.yearDayTime(), test.getPeriodType());\n        assertEquals(1, test.getYears());\n        assertEquals(0, test.getMonths());\n        assertEquals(0, test.getWeeks());\n        assertEquals(31, test.getDays());\n        assertEquals(1, test.getHours());\n        assertEquals(1, test.getMinutes());\n        assertEquals(1, test.getSeconds());\n        assertEquals(1, test.getMillis());\n    }\n",
        "begin_line": 1064,
        "end_line": 1078,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 1065,col 9)-(line 1065,col 60)",
            "(line 1066,col 9)-(line 1066,col 61)",
            "(line 1067,col 9)-(line 1067,col 59)",
            "(line 1068,col 9)-(line 1068,col 69)",
            "(line 1069,col 9)-(line 1069,col 69)",
            "(line 1070,col 9)-(line 1070,col 41)",
            "(line 1071,col 9)-(line 1071,col 42)",
            "(line 1072,col 9)-(line 1072,col 41)",
            "(line 1073,col 9)-(line 1073,col 41)",
            "(line 1074,col 9)-(line 1074,col 41)",
            "(line 1075,col 9)-(line 1075,col 43)",
            "(line 1076,col 9)-(line 1076,col 43)",
            "(line 1077,col 9)-(line 1077,col 42)"
        ]
    },
    {
        "class_name": "org.joda.time.TestPeriod_Constructors",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestPeriod_Constructors.java",
        "signature": "org.joda.time.TestPeriod_Constructors.testConstructor_RD_RI_PeriodType2()",
        "snippet": "    public void testConstructor_RD_RI_PeriodType2() throws Throwable {\n        DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n        Duration dur = null;\n        Period test = new Period(dur, dt1, (PeriodType) null);\n        assertEquals(PeriodType.standard(), test.getPeriodType());\n        assertEquals(0, test.getYears());\n        assertEquals(0, test.getMonths());\n        assertEquals(0, test.getWeeks());\n        assertEquals(0, test.getDays());\n        assertEquals(0, test.getHours());\n        assertEquals(0, test.getMinutes());\n        assertEquals(0, test.getSeconds());\n        assertEquals(0, test.getMillis());\n    }\n",
        "begin_line": 1080,
        "end_line": 1093,
        "comment": "",
        "child_ranges": [
            "(line 1081,col 9)-(line 1081,col 60)",
            "(line 1082,col 9)-(line 1082,col 28)",
            "(line 1083,col 9)-(line 1083,col 62)",
            "(line 1084,col 9)-(line 1084,col 66)",
            "(line 1085,col 9)-(line 1085,col 41)",
            "(line 1086,col 9)-(line 1086,col 42)",
            "(line 1087,col 9)-(line 1087,col 41)",
            "(line 1088,col 9)-(line 1088,col 40)",
            "(line 1089,col 9)-(line 1089,col 41)",
            "(line 1090,col 9)-(line 1090,col 43)",
            "(line 1091,col 9)-(line 1091,col 43)",
            "(line 1092,col 9)-(line 1092,col 42)"
        ]
    },
    {
        "class_name": "org.joda.time.TestPeriod_Constructors",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestPeriod_Constructors.java",
        "signature": "org.joda.time.TestPeriod_Constructors.testConstructor_Object1()",
        "snippet": "    public void testConstructor_Object1() throws Throwable {\n        Period test = new Period(\"P1Y2M3D\");\n        assertEquals(PeriodType.standard(), test.getPeriodType());\n        assertEquals(1, test.getYears());\n        assertEquals(2, test.getMonths());\n        assertEquals(0, test.getWeeks());\n        assertEquals(3, test.getDays());\n        assertEquals(0, test.getHours());\n        assertEquals(0, test.getMinutes());\n        assertEquals(0, test.getSeconds());\n        assertEquals(0, test.getMillis());\n    }\n",
        "begin_line": 1099,
        "end_line": 1110,
        "comment": "\n     * Test constructor (Object)\n     ",
        "child_ranges": [
            "(line 1100,col 9)-(line 1100,col 44)",
            "(line 1101,col 9)-(line 1101,col 66)",
            "(line 1102,col 9)-(line 1102,col 41)",
            "(line 1103,col 9)-(line 1103,col 42)",
            "(line 1104,col 9)-(line 1104,col 41)",
            "(line 1105,col 9)-(line 1105,col 40)",
            "(line 1106,col 9)-(line 1106,col 41)",
            "(line 1107,col 9)-(line 1107,col 43)",
            "(line 1108,col 9)-(line 1108,col 43)",
            "(line 1109,col 9)-(line 1109,col 42)"
        ]
    },
    {
        "class_name": "org.joda.time.TestPeriod_Constructors",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestPeriod_Constructors.java",
        "signature": "org.joda.time.TestPeriod_Constructors.testConstructor_Object2()",
        "snippet": "    public void testConstructor_Object2() throws Throwable {\n        Period test = new Period((Object) null);\n        assertEquals(PeriodType.standard(), test.getPeriodType());\n        assertEquals(0, test.getYears());\n        assertEquals(0, test.getMonths());\n        assertEquals(0, test.getWeeks());\n        assertEquals(0, test.getDays());\n        assertEquals(0, test.getHours());\n        assertEquals(0, test.getMinutes());\n        assertEquals(0, test.getSeconds());\n        assertEquals(0, test.getMillis());\n    }\n",
        "begin_line": 1112,
        "end_line": 1123,
        "comment": "",
        "child_ranges": [
            "(line 1113,col 9)-(line 1113,col 48)",
            "(line 1114,col 9)-(line 1114,col 66)",
            "(line 1115,col 9)-(line 1115,col 41)",
            "(line 1116,col 9)-(line 1116,col 42)",
            "(line 1117,col 9)-(line 1117,col 41)",
            "(line 1118,col 9)-(line 1118,col 40)",
            "(line 1119,col 9)-(line 1119,col 41)",
            "(line 1120,col 9)-(line 1120,col 43)",
            "(line 1121,col 9)-(line 1121,col 43)",
            "(line 1122,col 9)-(line 1122,col 42)"
        ]
    },
    {
        "class_name": "org.joda.time.TestPeriod_Constructors",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestPeriod_Constructors.java",
        "signature": "org.joda.time.TestPeriod_Constructors.testConstructor_Object3()",
        "snippet": "    public void testConstructor_Object3() throws Throwable {\n        Period test = new Period(new Period(0, 0, 0, 0, 1, 2, 3, 4, PeriodType.dayTime()));\n        assertEquals(PeriodType.dayTime(), test.getPeriodType());\n        assertEquals(0, test.getYears());\n        assertEquals(0, test.getMonths());\n        assertEquals(0, test.getWeeks());\n        assertEquals(0, test.getDays());\n        assertEquals(1, test.getHours());\n        assertEquals(2, test.getMinutes());\n        assertEquals(3, test.getSeconds());\n        assertEquals(4, test.getMillis());\n    }\n",
        "begin_line": 1125,
        "end_line": 1136,
        "comment": "",
        "child_ranges": [
            "(line 1126,col 9)-(line 1126,col 91)",
            "(line 1127,col 9)-(line 1127,col 65)",
            "(line 1128,col 9)-(line 1128,col 41)",
            "(line 1129,col 9)-(line 1129,col 42)",
            "(line 1130,col 9)-(line 1130,col 41)",
            "(line 1131,col 9)-(line 1131,col 40)",
            "(line 1132,col 9)-(line 1132,col 41)",
            "(line 1133,col 9)-(line 1133,col 43)",
            "(line 1134,col 9)-(line 1134,col 43)",
            "(line 1135,col 9)-(line 1135,col 42)"
        ]
    },
    {
        "class_name": "org.joda.time.TestPeriod_Constructors",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestPeriod_Constructors.java",
        "signature": "org.joda.time.TestPeriod_Constructors.testConstructor_Object4()",
        "snippet": "    public void testConstructor_Object4() throws Throwable {\n        Period base = new Period(1, 1, 0, 1, 1, 1, 1, 1, PeriodType.standard());\n        Period test = new Period(base);\n        assertEquals(PeriodType.standard(), test.getPeriodType());\n        assertEquals(1, test.getYears());\n        assertEquals(1, test.getMonths());\n        assertEquals(0, test.getWeeks());\n        assertEquals(1, test.getDays());\n        assertEquals(1, test.getHours());\n        assertEquals(1, test.getMinutes());\n        assertEquals(1, test.getSeconds());\n        assertEquals(1, test.getMillis());\n    }\n",
        "begin_line": 1138,
        "end_line": 1150,
        "comment": "",
        "child_ranges": [
            "(line 1139,col 9)-(line 1139,col 80)",
            "(line 1140,col 9)-(line 1140,col 39)",
            "(line 1141,col 9)-(line 1141,col 66)",
            "(line 1142,col 9)-(line 1142,col 41)",
            "(line 1143,col 9)-(line 1143,col 42)",
            "(line 1144,col 9)-(line 1144,col 41)",
            "(line 1145,col 9)-(line 1145,col 40)",
            "(line 1146,col 9)-(line 1146,col 41)",
            "(line 1147,col 9)-(line 1147,col 43)",
            "(line 1148,col 9)-(line 1148,col 43)",
            "(line 1149,col 9)-(line 1149,col 42)"
        ]
    },
    {
        "class_name": "org.joda.time.TestPeriod_Constructors",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestPeriod_Constructors.java",
        "signature": "org.joda.time.TestPeriod_Constructors.testConstructor_Object_PeriodType1()",
        "snippet": "    public void testConstructor_Object_PeriodType1() throws Throwable {\n        Period test = new Period(\"P1Y2M3D\", PeriodType.yearMonthDayTime());\n        assertEquals(PeriodType.yearMonthDayTime(), test.getPeriodType());\n        assertEquals(1, test.getYears());\n        assertEquals(2, test.getMonths());\n        assertEquals(0, test.getWeeks());\n        assertEquals(3, test.getDays());\n        assertEquals(0, test.getHours());\n        assertEquals(0, test.getMinutes());\n        assertEquals(0, test.getSeconds());\n        assertEquals(0, test.getMillis());\n    }\n",
        "begin_line": 1156,
        "end_line": 1167,
        "comment": "\n     * Test constructor (Object)\n     ",
        "child_ranges": [
            "(line 1157,col 9)-(line 1157,col 75)",
            "(line 1158,col 9)-(line 1158,col 74)",
            "(line 1159,col 9)-(line 1159,col 41)",
            "(line 1160,col 9)-(line 1160,col 42)",
            "(line 1161,col 9)-(line 1161,col 41)",
            "(line 1162,col 9)-(line 1162,col 40)",
            "(line 1163,col 9)-(line 1163,col 41)",
            "(line 1164,col 9)-(line 1164,col 43)",
            "(line 1165,col 9)-(line 1165,col 43)",
            "(line 1166,col 9)-(line 1166,col 42)"
        ]
    },
    {
        "class_name": "org.joda.time.TestPeriod_Constructors",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestPeriod_Constructors.java",
        "signature": "org.joda.time.TestPeriod_Constructors.testConstructor_Object_PeriodType2()",
        "snippet": "    public void testConstructor_Object_PeriodType2() throws Throwable {\n        Period test = new Period((Object) null, PeriodType.yearMonthDayTime());\n        assertEquals(PeriodType.yearMonthDayTime(), test.getPeriodType());\n        assertEquals(0, test.getYears());\n        assertEquals(0, test.getMonths());\n        assertEquals(0, test.getWeeks());\n        assertEquals(0, test.getDays());\n        assertEquals(0, test.getHours());\n        assertEquals(0, test.getMinutes());\n        assertEquals(0, test.getSeconds());\n        assertEquals(0, test.getMillis());\n    }\n",
        "begin_line": 1169,
        "end_line": 1180,
        "comment": "",
        "child_ranges": [
            "(line 1170,col 9)-(line 1170,col 79)",
            "(line 1171,col 9)-(line 1171,col 74)",
            "(line 1172,col 9)-(line 1172,col 41)",
            "(line 1173,col 9)-(line 1173,col 42)",
            "(line 1174,col 9)-(line 1174,col 41)",
            "(line 1175,col 9)-(line 1175,col 40)",
            "(line 1176,col 9)-(line 1176,col 41)",
            "(line 1177,col 9)-(line 1177,col 43)",
            "(line 1178,col 9)-(line 1178,col 43)",
            "(line 1179,col 9)-(line 1179,col 42)"
        ]
    },
    {
        "class_name": "org.joda.time.TestPeriod_Constructors",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestPeriod_Constructors.java",
        "signature": "org.joda.time.TestPeriod_Constructors.testConstructor_Object_PeriodType3()",
        "snippet": "    public void testConstructor_Object_PeriodType3() throws Throwable {\n        Period test = new Period(new Period(0, 0, 0, 0, 1, 2, 3, 4, PeriodType.dayTime()), PeriodType.yearMonthDayTime());\n        assertEquals(PeriodType.yearMonthDayTime(), test.getPeriodType());\n        assertEquals(0, test.getYears());\n        assertEquals(0, test.getMonths());\n        assertEquals(0, test.getWeeks());\n        assertEquals(0, test.getDays());\n        assertEquals(1, test.getHours());\n        assertEquals(2, test.getMinutes());\n        assertEquals(3, test.getSeconds());\n        assertEquals(4, test.getMillis());\n    }\n",
        "begin_line": 1182,
        "end_line": 1193,
        "comment": "",
        "child_ranges": [
            "(line 1183,col 9)-(line 1183,col 122)",
            "(line 1184,col 9)-(line 1184,col 74)",
            "(line 1185,col 9)-(line 1185,col 41)",
            "(line 1186,col 9)-(line 1186,col 42)",
            "(line 1187,col 9)-(line 1187,col 41)",
            "(line 1188,col 9)-(line 1188,col 40)",
            "(line 1189,col 9)-(line 1189,col 41)",
            "(line 1190,col 9)-(line 1190,col 43)",
            "(line 1191,col 9)-(line 1191,col 43)",
            "(line 1192,col 9)-(line 1192,col 42)"
        ]
    },
    {
        "class_name": "org.joda.time.TestPeriod_Constructors",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestPeriod_Constructors.java",
        "signature": "org.joda.time.TestPeriod_Constructors.testConstructor_Object_PeriodType4()",
        "snippet": "    public void testConstructor_Object_PeriodType4() throws Throwable {\n        Period test = new Period(new Period(0, 0, 0, 0, 1, 2, 3, 4, PeriodType.dayTime()), (PeriodType) null);\n        assertEquals(PeriodType.dayTime(), test.getPeriodType());\n        assertEquals(0, test.getYears());\n        assertEquals(0, test.getMonths());\n        assertEquals(0, test.getWeeks());\n        assertEquals(0, test.getDays());\n        assertEquals(1, test.getHours());\n        assertEquals(2, test.getMinutes());\n        assertEquals(3, test.getSeconds());\n        assertEquals(4, test.getMillis());\n    }\n",
        "begin_line": 1195,
        "end_line": 1206,
        "comment": "",
        "child_ranges": [
            "(line 1196,col 9)-(line 1196,col 110)",
            "(line 1197,col 9)-(line 1197,col 65)",
            "(line 1198,col 9)-(line 1198,col 41)",
            "(line 1199,col 9)-(line 1199,col 42)",
            "(line 1200,col 9)-(line 1200,col 41)",
            "(line 1201,col 9)-(line 1201,col 40)",
            "(line 1202,col 9)-(line 1202,col 41)",
            "(line 1203,col 9)-(line 1203,col 43)",
            "(line 1204,col 9)-(line 1204,col 43)",
            "(line 1205,col 9)-(line 1205,col 42)"
        ]
    },
    {
        "class_name": "org.joda.time.TestPeriod_Constructors",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestPeriod_Constructors.java",
        "signature": "org.joda.time.TestPeriod_Constructors.testFactoryYears()",
        "snippet": "    public void testFactoryYears() throws Throwable {\n        Period test = Period.years(6);\n        assertEquals(PeriodType.standard(), test.getPeriodType());\n        assertEquals(6, test.getYears());\n        assertEquals(0, test.getMonths());\n        assertEquals(0, test.getWeeks());\n        assertEquals(0, test.getDays());\n        assertEquals(0, test.getHours());\n        assertEquals(0, test.getMinutes());\n        assertEquals(0, test.getSeconds());\n        assertEquals(0, test.getMillis());\n    }\n",
        "begin_line": 1209,
        "end_line": 1220,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 1210,col 9)-(line 1210,col 38)",
            "(line 1211,col 9)-(line 1211,col 66)",
            "(line 1212,col 9)-(line 1212,col 41)",
            "(line 1213,col 9)-(line 1213,col 42)",
            "(line 1214,col 9)-(line 1214,col 41)",
            "(line 1215,col 9)-(line 1215,col 40)",
            "(line 1216,col 9)-(line 1216,col 41)",
            "(line 1217,col 9)-(line 1217,col 43)",
            "(line 1218,col 9)-(line 1218,col 43)",
            "(line 1219,col 9)-(line 1219,col 42)"
        ]
    },
    {
        "class_name": "org.joda.time.TestPeriod_Constructors",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestPeriod_Constructors.java",
        "signature": "org.joda.time.TestPeriod_Constructors.testFactoryMonths()",
        "snippet": "    public void testFactoryMonths() throws Throwable {\n        Period test = Period.months(6);\n        assertEquals(PeriodType.standard(), test.getPeriodType());\n        assertEquals(0, test.getYears());\n        assertEquals(6, test.getMonths());\n        assertEquals(0, test.getWeeks());\n        assertEquals(0, test.getDays());\n        assertEquals(0, test.getHours());\n        assertEquals(0, test.getMinutes());\n        assertEquals(0, test.getSeconds());\n        assertEquals(0, test.getMillis());\n    }\n",
        "begin_line": 1222,
        "end_line": 1233,
        "comment": "",
        "child_ranges": [
            "(line 1223,col 9)-(line 1223,col 39)",
            "(line 1224,col 9)-(line 1224,col 66)",
            "(line 1225,col 9)-(line 1225,col 41)",
            "(line 1226,col 9)-(line 1226,col 42)",
            "(line 1227,col 9)-(line 1227,col 41)",
            "(line 1228,col 9)-(line 1228,col 40)",
            "(line 1229,col 9)-(line 1229,col 41)",
            "(line 1230,col 9)-(line 1230,col 43)",
            "(line 1231,col 9)-(line 1231,col 43)",
            "(line 1232,col 9)-(line 1232,col 42)"
        ]
    },
    {
        "class_name": "org.joda.time.TestPeriod_Constructors",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestPeriod_Constructors.java",
        "signature": "org.joda.time.TestPeriod_Constructors.testFactoryWeeks()",
        "snippet": "    public void testFactoryWeeks() throws Throwable {\n        Period test = Period.weeks(6);\n        assertEquals(PeriodType.standard(), test.getPeriodType());\n        assertEquals(0, test.getYears());\n        assertEquals(0, test.getMonths());\n        assertEquals(6, test.getWeeks());\n        assertEquals(0, test.getDays());\n        assertEquals(0, test.getHours());\n        assertEquals(0, test.getMinutes());\n        assertEquals(0, test.getSeconds());\n        assertEquals(0, test.getMillis());\n    }\n",
        "begin_line": 1235,
        "end_line": 1246,
        "comment": "",
        "child_ranges": [
            "(line 1236,col 9)-(line 1236,col 38)",
            "(line 1237,col 9)-(line 1237,col 66)",
            "(line 1238,col 9)-(line 1238,col 41)",
            "(line 1239,col 9)-(line 1239,col 42)",
            "(line 1240,col 9)-(line 1240,col 41)",
            "(line 1241,col 9)-(line 1241,col 40)",
            "(line 1242,col 9)-(line 1242,col 41)",
            "(line 1243,col 9)-(line 1243,col 43)",
            "(line 1244,col 9)-(line 1244,col 43)",
            "(line 1245,col 9)-(line 1245,col 42)"
        ]
    },
    {
        "class_name": "org.joda.time.TestPeriod_Constructors",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestPeriod_Constructors.java",
        "signature": "org.joda.time.TestPeriod_Constructors.testFactoryDays()",
        "snippet": "    public void testFactoryDays() throws Throwable {\n        Period test = Period.days(6);\n        assertEquals(PeriodType.standard(), test.getPeriodType());\n        assertEquals(0, test.getYears());\n        assertEquals(0, test.getMonths());\n        assertEquals(0, test.getWeeks());\n        assertEquals(6, test.getDays());\n        assertEquals(0, test.getHours());\n        assertEquals(0, test.getMinutes());\n        assertEquals(0, test.getSeconds());\n        assertEquals(0, test.getMillis());\n    }\n",
        "begin_line": 1248,
        "end_line": 1259,
        "comment": "",
        "child_ranges": [
            "(line 1249,col 9)-(line 1249,col 37)",
            "(line 1250,col 9)-(line 1250,col 66)",
            "(line 1251,col 9)-(line 1251,col 41)",
            "(line 1252,col 9)-(line 1252,col 42)",
            "(line 1253,col 9)-(line 1253,col 41)",
            "(line 1254,col 9)-(line 1254,col 40)",
            "(line 1255,col 9)-(line 1255,col 41)",
            "(line 1256,col 9)-(line 1256,col 43)",
            "(line 1257,col 9)-(line 1257,col 43)",
            "(line 1258,col 9)-(line 1258,col 42)"
        ]
    },
    {
        "class_name": "org.joda.time.TestPeriod_Constructors",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestPeriod_Constructors.java",
        "signature": "org.joda.time.TestPeriod_Constructors.testFactoryHours()",
        "snippet": "    public void testFactoryHours() throws Throwable {\n        Period test = Period.hours(6);\n        assertEquals(PeriodType.standard(), test.getPeriodType());\n        assertEquals(0, test.getYears());\n        assertEquals(0, test.getMonths());\n        assertEquals(0, test.getWeeks());\n        assertEquals(0, test.getDays());\n        assertEquals(6, test.getHours());\n        assertEquals(0, test.getMinutes());\n        assertEquals(0, test.getSeconds());\n        assertEquals(0, test.getMillis());\n    }\n",
        "begin_line": 1261,
        "end_line": 1272,
        "comment": "",
        "child_ranges": [
            "(line 1262,col 9)-(line 1262,col 38)",
            "(line 1263,col 9)-(line 1263,col 66)",
            "(line 1264,col 9)-(line 1264,col 41)",
            "(line 1265,col 9)-(line 1265,col 42)",
            "(line 1266,col 9)-(line 1266,col 41)",
            "(line 1267,col 9)-(line 1267,col 40)",
            "(line 1268,col 9)-(line 1268,col 41)",
            "(line 1269,col 9)-(line 1269,col 43)",
            "(line 1270,col 9)-(line 1270,col 43)",
            "(line 1271,col 9)-(line 1271,col 42)"
        ]
    },
    {
        "class_name": "org.joda.time.TestPeriod_Constructors",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestPeriod_Constructors.java",
        "signature": "org.joda.time.TestPeriod_Constructors.testFactoryMinutes()",
        "snippet": "    public void testFactoryMinutes() throws Throwable {\n        Period test = Period.minutes(6);\n        assertEquals(PeriodType.standard(), test.getPeriodType());\n        assertEquals(0, test.getYears());\n        assertEquals(0, test.getMonths());\n        assertEquals(0, test.getWeeks());\n        assertEquals(0, test.getDays());\n        assertEquals(0, test.getHours());\n        assertEquals(6, test.getMinutes());\n        assertEquals(0, test.getSeconds());\n        assertEquals(0, test.getMillis());\n    }\n",
        "begin_line": 1274,
        "end_line": 1285,
        "comment": "",
        "child_ranges": [
            "(line 1275,col 9)-(line 1275,col 40)",
            "(line 1276,col 9)-(line 1276,col 66)",
            "(line 1277,col 9)-(line 1277,col 41)",
            "(line 1278,col 9)-(line 1278,col 42)",
            "(line 1279,col 9)-(line 1279,col 41)",
            "(line 1280,col 9)-(line 1280,col 40)",
            "(line 1281,col 9)-(line 1281,col 41)",
            "(line 1282,col 9)-(line 1282,col 43)",
            "(line 1283,col 9)-(line 1283,col 43)",
            "(line 1284,col 9)-(line 1284,col 42)"
        ]
    },
    {
        "class_name": "org.joda.time.TestPeriod_Constructors",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestPeriod_Constructors.java",
        "signature": "org.joda.time.TestPeriod_Constructors.testFactorySeconds()",
        "snippet": "    public void testFactorySeconds() throws Throwable {\n        Period test = Period.seconds(6);\n        assertEquals(PeriodType.standard(), test.getPeriodType());\n        assertEquals(0, test.getYears());\n        assertEquals(0, test.getMonths());\n        assertEquals(0, test.getWeeks());\n        assertEquals(0, test.getDays());\n        assertEquals(0, test.getHours());\n        assertEquals(0, test.getMinutes());\n        assertEquals(6, test.getSeconds());\n        assertEquals(0, test.getMillis());\n    }\n",
        "begin_line": 1287,
        "end_line": 1298,
        "comment": "",
        "child_ranges": [
            "(line 1288,col 9)-(line 1288,col 40)",
            "(line 1289,col 9)-(line 1289,col 66)",
            "(line 1290,col 9)-(line 1290,col 41)",
            "(line 1291,col 9)-(line 1291,col 42)",
            "(line 1292,col 9)-(line 1292,col 41)",
            "(line 1293,col 9)-(line 1293,col 40)",
            "(line 1294,col 9)-(line 1294,col 41)",
            "(line 1295,col 9)-(line 1295,col 43)",
            "(line 1296,col 9)-(line 1296,col 43)",
            "(line 1297,col 9)-(line 1297,col 42)"
        ]
    },
    {
        "class_name": "org.joda.time.TestPeriod_Constructors",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestPeriod_Constructors.java",
        "signature": "org.joda.time.TestPeriod_Constructors.testFactoryMillis()",
        "snippet": "    public void testFactoryMillis() throws Throwable {\n        Period test = Period.millis(6);\n        assertEquals(PeriodType.standard(), test.getPeriodType());\n        assertEquals(0, test.getYears());\n        assertEquals(0, test.getMonths());\n        assertEquals(0, test.getWeeks());\n        assertEquals(0, test.getDays());\n        assertEquals(0, test.getHours());\n        assertEquals(0, test.getMinutes());\n        assertEquals(0, test.getSeconds());\n        assertEquals(6, test.getMillis());\n    }\n",
        "begin_line": 1300,
        "end_line": 1311,
        "comment": "",
        "child_ranges": [
            "(line 1301,col 9)-(line 1301,col 39)",
            "(line 1302,col 9)-(line 1302,col 66)",
            "(line 1303,col 9)-(line 1303,col 41)",
            "(line 1304,col 9)-(line 1304,col 42)",
            "(line 1305,col 9)-(line 1305,col 41)",
            "(line 1306,col 9)-(line 1306,col 40)",
            "(line 1307,col 9)-(line 1307,col 41)",
            "(line 1308,col 9)-(line 1308,col 43)",
            "(line 1309,col 9)-(line 1309,col 43)",
            "(line 1310,col 9)-(line 1310,col 42)"
        ]
    },
    {
        "class_name": "org.joda.time.TestPeriod_Constructors",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestPeriod_Constructors.java",
        "signature": "org.joda.time.TestPeriod_Constructors.testFactoryFieldDifference1()",
        "snippet": "    public void testFactoryFieldDifference1() throws Throwable {\n        YearMonthDay start = new YearMonthDay(2005, 4, 9);\n        DateTimeFieldType[] types = new DateTimeFieldType[] {\n            DateTimeFieldType.year(),\n            DateTimeFieldType.monthOfYear(),\n            DateTimeFieldType.dayOfMonth(),\n        };\n        Partial end = new Partial(types, new int[] {2004, 6, 7});\n        Period test = Period.fieldDifference(start, end);\n        assertEquals(PeriodType.yearMonthDay(), test.getPeriodType());\n        assertEquals(-1, test.getYears());\n        assertEquals(2, test.getMonths());\n        assertEquals(0, test.getWeeks());\n        assertEquals(-2, test.getDays());\n        assertEquals(0, test.getHours());\n        assertEquals(0, test.getMinutes());\n        assertEquals(0, test.getSeconds());\n        assertEquals(0, test.getMillis());\n    }\n",
        "begin_line": 1314,
        "end_line": 1332,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 1315,col 9)-(line 1315,col 58)",
            "(line 1316,col 9)-(line 1320,col 10)",
            "(line 1321,col 9)-(line 1321,col 65)",
            "(line 1322,col 9)-(line 1322,col 57)",
            "(line 1323,col 9)-(line 1323,col 70)",
            "(line 1324,col 9)-(line 1324,col 42)",
            "(line 1325,col 9)-(line 1325,col 42)",
            "(line 1326,col 9)-(line 1326,col 41)",
            "(line 1327,col 9)-(line 1327,col 41)",
            "(line 1328,col 9)-(line 1328,col 41)",
            "(line 1329,col 9)-(line 1329,col 43)",
            "(line 1330,col 9)-(line 1330,col 43)",
            "(line 1331,col 9)-(line 1331,col 42)"
        ]
    },
    {
        "class_name": "org.joda.time.TestPeriod_Constructors",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestPeriod_Constructors.java",
        "signature": "org.joda.time.TestPeriod_Constructors.testFactoryFieldDifference2()",
        "snippet": "    public void testFactoryFieldDifference2() throws Throwable {\n        YearMonthDay ymd = new YearMonthDay(2005, 4, 9);\n        try {\n            Period.fieldDifference(ymd, (ReadablePartial) null);\n            fail();\n        } catch (IllegalArgumentException ex) {}\n        try {\n            Period.fieldDifference((ReadablePartial) null, ymd);\n            fail();\n        } catch (IllegalArgumentException ex) {}\n    }\n",
        "begin_line": 1334,
        "end_line": 1344,
        "comment": "",
        "child_ranges": [
            "(line 1335,col 9)-(line 1335,col 56)",
            "(line 1336,col 9)-(line 1339,col 48)",
            "(line 1340,col 9)-(line 1343,col 48)"
        ]
    },
    {
        "class_name": "org.joda.time.TestPeriod_Constructors",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestPeriod_Constructors.java",
        "signature": "org.joda.time.TestPeriod_Constructors.testFactoryFieldDifference3()",
        "snippet": "    public void testFactoryFieldDifference3() throws Throwable {\n        YearMonthDay start = new YearMonthDay(2005, 4, 9);\n        TimeOfDay endTime = new TimeOfDay(12, 30, 40, 0);\n        try {\n            Period.fieldDifference(start, endTime);\n            fail();\n        } catch (IllegalArgumentException ex) {}\n    }\n",
        "begin_line": 1346,
        "end_line": 1353,
        "comment": "",
        "child_ranges": [
            "(line 1347,col 9)-(line 1347,col 58)",
            "(line 1348,col 9)-(line 1348,col 57)",
            "(line 1349,col 9)-(line 1352,col 48)"
        ]
    },
    {
        "class_name": "org.joda.time.TestPeriod_Constructors",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestPeriod_Constructors.java",
        "signature": "org.joda.time.TestPeriod_Constructors.testFactoryFieldDifference4()",
        "snippet": "    public void testFactoryFieldDifference4() throws Throwable {\n        DateTimeFieldType[] types = new DateTimeFieldType[] {\n            DateTimeFieldType.year(),\n            DateTimeFieldType.monthOfYear(),\n            DateTimeFieldType.dayOfWeek(),\n        };\n        YearMonthDay start = new YearMonthDay(2005, 4, 9);\n        Partial end = new Partial(types, new int[] {1, 2, 3});\n        try {\n            Period.fieldDifference(start, end);\n            fail();\n        } catch (IllegalArgumentException ex) {}\n    }\n",
        "begin_line": 1355,
        "end_line": 1367,
        "comment": "",
        "child_ranges": [
            "(line 1356,col 9)-(line 1360,col 10)",
            "(line 1361,col 9)-(line 1361,col 58)",
            "(line 1362,col 9)-(line 1362,col 62)",
            "(line 1363,col 9)-(line 1366,col 48)"
        ]
    },
    {
        "class_name": "org.joda.time.TestPeriod_Constructors",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestPeriod_Constructors.java",
        "signature": "org.joda.time.TestPeriod_Constructors.testFactoryFieldDifference5()",
        "snippet": "    public void testFactoryFieldDifference5() throws Throwable {\n        DateTimeFieldType[] types = new DateTimeFieldType[] {\n            DateTimeFieldType.year(),\n            DateTimeFieldType.dayOfMonth(),\n            DateTimeFieldType.dayOfWeek(),\n        };\n        Partial start = new Partial(types, new int[] {1, 2, 3});\n        Partial end = new Partial(types, new int[] {1, 2, 3});\n        try {\n            Period.fieldDifference(start, end);\n            fail();\n        } catch (IllegalArgumentException ex) {}\n    }\n",
        "begin_line": 1369,
        "end_line": 1381,
        "comment": "",
        "child_ranges": [
            "(line 1370,col 9)-(line 1374,col 10)",
            "(line 1375,col 9)-(line 1375,col 64)",
            "(line 1376,col 9)-(line 1376,col 62)",
            "(line 1377,col 9)-(line 1380,col 48)"
        ]
    }
]