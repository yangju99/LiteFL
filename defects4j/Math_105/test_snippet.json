[
    {
        "class_name": "org.apache.commons.math.stat.regression.SimpleRegressionTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/stat/regression/SimpleRegressionTest.java",
        "signature": "org.apache.commons.math.stat.regression.SimpleRegressionTest.SimpleRegressionTest(java.lang.String)",
        "snippet": "    public SimpleRegressionTest(String name) {\n        super(name);\n    }\n",
        "begin_line": 71,
        "end_line": 73,
        "comment": "",
        "child_ranges": [
            "(line 72,col 9)-(line 72,col 20)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.stat.regression.SimpleRegressionTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/stat/regression/SimpleRegressionTest.java",
        "signature": "org.apache.commons.math.stat.regression.SimpleRegressionTest.setUp()",
        "snippet": "    public void setUp() {\n    }\n",
        "begin_line": 75,
        "end_line": 76,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.apache.commons.math.stat.regression.SimpleRegressionTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/stat/regression/SimpleRegressionTest.java",
        "signature": "org.apache.commons.math.stat.regression.SimpleRegressionTest.suite()",
        "snippet": "    public static Test suite() {\n        TestSuite suite = new TestSuite(SimpleRegressionTest.class);\n        suite.setName(\"BivariateRegression Tests\");\n        return suite;\n    }\n",
        "begin_line": 78,
        "end_line": 82,
        "comment": "",
        "child_ranges": [
            "(line 79,col 9)-(line 79,col 68)",
            "(line 80,col 9)-(line 80,col 51)",
            "(line 81,col 9)-(line 81,col 21)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.stat.regression.SimpleRegressionTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/stat/regression/SimpleRegressionTest.java",
        "signature": "org.apache.commons.math.stat.regression.SimpleRegressionTest.testNorris()",
        "snippet": "    public void testNorris() {\n        SimpleRegression regression = new SimpleRegression();\n        for (int i = 0; i < data.length; i++) {\n            regression.addData(data[i][1], data[i][0]);\n        }\n        // Tests against certified values from  \n        // http://www.itl.nist.gov/div898/strd/lls/data/LINKS/DATA/Norris.dat\n        assertEquals(\"slope\", 1.00211681802045, regression.getSlope(), 10E-12);\n        assertEquals(\"slope std err\", 0.429796848199937E-03,\n                regression.getSlopeStdErr(),10E-12);\n        assertEquals(\"number of observations\", 36, regression.getN());\n        assertEquals( \"intercept\", -0.262323073774029,\n            regression.getIntercept(),10E-12);\n        assertEquals(\"std err intercept\", 0.232818234301152,\n            regression.getInterceptStdErr(),10E-12);\n        assertEquals(\"r-square\", 0.999993745883712,\n            regression.getRSquare(), 10E-12);\n        assertEquals(\"SSR\", 4255954.13232369,\n            regression.getRegressionSumSquares(), 10E-9);\n        assertEquals(\"MSE\", 0.782864662630069,\n            regression.getMeanSquareError(), 10E-10);\n        assertEquals(\"SSE\", 26.6173985294224,\n            regression.getSumSquaredErrors(),10E-9);\n        // ------------  End certified data tests\n          \n        assertEquals( \"predict(0)\",  -0.262323073774029,\n            regression.predict(0), 10E-12);\n        assertEquals(\"predict(1)\", 1.00211681802045 - 0.262323073774029,\n            regression.predict(1), 10E-12);\n    }\n",
        "begin_line": 84,
        "end_line": 113,
        "comment": "",
        "child_ranges": [
            "(line 85,col 9)-(line 85,col 61)",
            "(line 86,col 9)-(line 88,col 9)",
            "(line 91,col 9)-(line 91,col 79)",
            "(line 92,col 9)-(line 93,col 52)",
            "(line 94,col 9)-(line 94,col 70)",
            "(line 95,col 9)-(line 96,col 46)",
            "(line 97,col 9)-(line 98,col 52)",
            "(line 99,col 9)-(line 100,col 45)",
            "(line 101,col 9)-(line 102,col 57)",
            "(line 103,col 9)-(line 104,col 53)",
            "(line 105,col 9)-(line 106,col 52)",
            "(line 109,col 9)-(line 110,col 43)",
            "(line 111,col 9)-(line 112,col 43)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.stat.regression.SimpleRegressionTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/stat/regression/SimpleRegressionTest.java",
        "signature": "org.apache.commons.math.stat.regression.SimpleRegressionTest.testCorr()",
        "snippet": "    public void testCorr() {\n        SimpleRegression regression = new SimpleRegression();\n        regression.addData(corrData);\n        assertEquals(\"number of observations\", 17, regression.getN());\n        assertEquals(\"r-square\", .896123, regression.getRSquare(), 10E-6);\n        assertEquals(\"r\", -0.94663767742, regression.getR(), 1E-10);\n    }\n",
        "begin_line": 115,
        "end_line": 121,
        "comment": "",
        "child_ranges": [
            "(line 116,col 9)-(line 116,col 61)",
            "(line 117,col 9)-(line 117,col 37)",
            "(line 118,col 9)-(line 118,col 70)",
            "(line 119,col 9)-(line 119,col 74)",
            "(line 120,col 9)-(line 120,col 68)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.stat.regression.SimpleRegressionTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/stat/regression/SimpleRegressionTest.java",
        "signature": "org.apache.commons.math.stat.regression.SimpleRegressionTest.testNaNs()",
        "snippet": "    public void testNaNs() {\n        SimpleRegression regression = new SimpleRegression();\n        assertTrue(\"intercept not NaN\", Double.isNaN(regression.getIntercept()));\n        assertTrue(\"slope not NaN\", Double.isNaN(regression.getSlope()));\n        assertTrue(\"slope std err not NaN\", Double.isNaN(regression.getSlopeStdErr()));\n        assertTrue(\"intercept std err not NaN\", Double.isNaN(regression.getInterceptStdErr()));\n        assertTrue(\"MSE not NaN\", Double.isNaN(regression.getMeanSquareError()));\n        assertTrue(\"e not NaN\", Double.isNaN(regression.getR()));\n        assertTrue(\"r-square not NaN\", Double.isNaN(regression.getRSquare()));\n        assertTrue( \"RSS not NaN\", Double.isNaN(regression.getRegressionSumSquares()));\n        assertTrue(\"SSE not NaN\",Double.isNaN(regression.getSumSquaredErrors()));\n        assertTrue(\"SSTO not NaN\", Double.isNaN(regression.getTotalSumSquares()));\n        assertTrue(\"predict not NaN\", Double.isNaN(regression.predict(0)));\n\n        regression.addData(1, 2);\n        regression.addData(1, 3);\n\n        // No x variation, so these should still blow...\n        assertTrue(\"intercept not NaN\", Double.isNaN(regression.getIntercept()));\n        assertTrue(\"slope not NaN\", Double.isNaN(regression.getSlope()));\n        assertTrue(\"slope std err not NaN\", Double.isNaN(regression.getSlopeStdErr()));\n        assertTrue(\"intercept std err not NaN\", Double.isNaN(regression.getInterceptStdErr()));\n        assertTrue(\"MSE not NaN\", Double.isNaN(regression.getMeanSquareError()));\n        assertTrue(\"e not NaN\", Double.isNaN(regression.getR()));\n        assertTrue(\"r-square not NaN\", Double.isNaN(regression.getRSquare()));\n        assertTrue(\"RSS not NaN\", Double.isNaN(regression.getRegressionSumSquares()));\n        assertTrue(\"SSE not NaN\", Double.isNaN(regression.getSumSquaredErrors()));\n        assertTrue(\"predict not NaN\", Double.isNaN(regression.predict(0)));\n\n        // but SSTO should be OK\n        assertTrue(\"SSTO NaN\", !Double.isNaN(regression.getTotalSumSquares()));\n\n        regression = new SimpleRegression();\n\n        regression.addData(1, 2);\n        regression.addData(3, 3);\n\n        // All should be OK except MSE, s(b0), s(b1) which need one more df \n        assertTrue(\"interceptNaN\", !Double.isNaN(regression.getIntercept()));\n        assertTrue(\"slope NaN\", !Double.isNaN(regression.getSlope()));\n        assertTrue (\"slope std err not NaN\", Double.isNaN(regression.getSlopeStdErr()));\n        assertTrue(\"intercept std err not NaN\", Double.isNaN(regression.getInterceptStdErr()));\n        assertTrue(\"MSE not NaN\", Double.isNaN(regression.getMeanSquareError()));\n        assertTrue(\"r NaN\", !Double.isNaN(regression.getR()));\n        assertTrue(\"r-square NaN\", !Double.isNaN(regression.getRSquare()));\n        assertTrue(\"RSS NaN\", !Double.isNaN(regression.getRegressionSumSquares()));\n        assertTrue(\"SSE NaN\", !Double.isNaN(regression.getSumSquaredErrors()));\n        assertTrue(\"SSTO NaN\", !Double.isNaN(regression.getTotalSumSquares()));\n        assertTrue(\"predict NaN\", !Double.isNaN(regression.predict(0)));\n\n        regression.addData(1, 4);\n\n        // MSE, MSE, s(b0), s(b1) should all be OK now\n        assertTrue(\"MSE NaN\", !Double.isNaN(regression.getMeanSquareError()));\n        assertTrue(\"slope std err NaN\", !Double.isNaN(regression.getSlopeStdErr()));\n        assertTrue(\"intercept std err NaN\", !Double.isNaN(regression.getInterceptStdErr()));\n    }\n",
        "begin_line": 123,
        "end_line": 179,
        "comment": "",
        "child_ranges": [
            "(line 124,col 9)-(line 124,col 61)",
            "(line 125,col 9)-(line 125,col 81)",
            "(line 126,col 9)-(line 126,col 73)",
            "(line 127,col 9)-(line 127,col 87)",
            "(line 128,col 9)-(line 128,col 95)",
            "(line 129,col 9)-(line 129,col 81)",
            "(line 130,col 9)-(line 130,col 65)",
            "(line 131,col 9)-(line 131,col 78)",
            "(line 132,col 9)-(line 132,col 87)",
            "(line 133,col 9)-(line 133,col 81)",
            "(line 134,col 9)-(line 134,col 82)",
            "(line 135,col 9)-(line 135,col 75)",
            "(line 137,col 9)-(line 137,col 33)",
            "(line 138,col 9)-(line 138,col 33)",
            "(line 141,col 9)-(line 141,col 81)",
            "(line 142,col 9)-(line 142,col 73)",
            "(line 143,col 9)-(line 143,col 87)",
            "(line 144,col 9)-(line 144,col 95)",
            "(line 145,col 9)-(line 145,col 81)",
            "(line 146,col 9)-(line 146,col 65)",
            "(line 147,col 9)-(line 147,col 78)",
            "(line 148,col 9)-(line 148,col 86)",
            "(line 149,col 9)-(line 149,col 82)",
            "(line 150,col 9)-(line 150,col 75)",
            "(line 153,col 9)-(line 153,col 79)",
            "(line 155,col 9)-(line 155,col 44)",
            "(line 157,col 9)-(line 157,col 33)",
            "(line 158,col 9)-(line 158,col 33)",
            "(line 161,col 9)-(line 161,col 77)",
            "(line 162,col 9)-(line 162,col 70)",
            "(line 163,col 9)-(line 163,col 88)",
            "(line 164,col 9)-(line 164,col 95)",
            "(line 165,col 9)-(line 165,col 81)",
            "(line 166,col 9)-(line 166,col 62)",
            "(line 167,col 9)-(line 167,col 75)",
            "(line 168,col 9)-(line 168,col 83)",
            "(line 169,col 9)-(line 169,col 79)",
            "(line 170,col 9)-(line 170,col 79)",
            "(line 171,col 9)-(line 171,col 72)",
            "(line 173,col 9)-(line 173,col 33)",
            "(line 176,col 9)-(line 176,col 78)",
            "(line 177,col 9)-(line 177,col 84)",
            "(line 178,col 9)-(line 178,col 92)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.stat.regression.SimpleRegressionTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/stat/regression/SimpleRegressionTest.java",
        "signature": "org.apache.commons.math.stat.regression.SimpleRegressionTest.testClear()",
        "snippet": "    public void testClear() {\n        SimpleRegression regression = new SimpleRegression();\n        regression.addData(corrData);\n        assertEquals(\"number of observations\", 17, regression.getN());\n        regression.clear();\n        assertEquals(\"number of observations\", 0, regression.getN());\n        regression.addData(corrData);\n        assertEquals(\"r-square\", .896123, regression.getRSquare(), 10E-6);\n        regression.addData(data);\n        assertEquals(\"number of observations\", 53, regression.getN());\n    }\n",
        "begin_line": 181,
        "end_line": 191,
        "comment": "",
        "child_ranges": [
            "(line 182,col 9)-(line 182,col 61)",
            "(line 183,col 9)-(line 183,col 37)",
            "(line 184,col 9)-(line 184,col 70)",
            "(line 185,col 9)-(line 185,col 27)",
            "(line 186,col 9)-(line 186,col 69)",
            "(line 187,col 9)-(line 187,col 37)",
            "(line 188,col 9)-(line 188,col 74)",
            "(line 189,col 9)-(line 189,col 33)",
            "(line 190,col 9)-(line 190,col 70)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.stat.regression.SimpleRegressionTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/stat/regression/SimpleRegressionTest.java",
        "signature": "org.apache.commons.math.stat.regression.SimpleRegressionTest.testInference()",
        "snippet": "    public void testInference() throws Exception {\n        //----------  verified against R, version 1.8.1 -----\n        // infData\n        SimpleRegression regression = new SimpleRegression();\n        regression.addData(infData);\n        assertEquals(\"slope std err\", 0.011448491,\n                regression.getSlopeStdErr(), 1E-10);\n        assertEquals(\"std err intercept\", 0.286036932,\n                regression.getInterceptStdErr(),1E-8);\n        assertEquals(\"significance\", 4.596e-07,\n                regression.getSignificance(),1E-8);    \n        assertEquals(\"slope conf interval half-width\", 0.0270713794287, \n                regression.getSlopeConfidenceInterval(),1E-8);\n        // infData2\n        regression = new SimpleRegression();\n        regression.addData(infData2);\n        assertEquals(\"slope std err\", 1.07260253,\n                regression.getSlopeStdErr(), 1E-8);\n        assertEquals(\"std err intercept\",4.17718672,\n                regression.getInterceptStdErr(),1E-8);\n        assertEquals(\"significance\", 0.261829133982,\n                regression.getSignificance(),1E-11);    \n        assertEquals(\"slope conf interval half-width\", 2.97802204827, \n                regression.getSlopeConfidenceInterval(),1E-8);\n        //------------- End R-verified tests -------------------------------\n        \n        //FIXME: get a real example to test against with alpha = .01\n        assertTrue(\"tighter means wider\",\n                regression.getSlopeConfidenceInterval() < regression.getSlopeConfidenceInterval(0.01));\n     \n        try {\n            double x = regression.getSlopeConfidenceInterval(1);\n            fail(\"expecting IllegalArgumentException for alpha = 1\");\n        } catch (IllegalArgumentException ex) {\n            ;\n        }  \n\n    }\n",
        "begin_line": 193,
        "end_line": 230,
        "comment": "",
        "child_ranges": [
            "(line 196,col 9)-(line 196,col 61)",
            "(line 197,col 9)-(line 197,col 36)",
            "(line 198,col 9)-(line 199,col 52)",
            "(line 200,col 9)-(line 201,col 54)",
            "(line 202,col 9)-(line 203,col 51)",
            "(line 204,col 9)-(line 205,col 62)",
            "(line 207,col 9)-(line 207,col 44)",
            "(line 208,col 9)-(line 208,col 37)",
            "(line 209,col 9)-(line 210,col 51)",
            "(line 211,col 9)-(line 212,col 54)",
            "(line 213,col 9)-(line 214,col 52)",
            "(line 215,col 9)-(line 216,col 62)",
            "(line 220,col 9)-(line 221,col 103)",
            "(line 223,col 9)-(line 228,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.stat.regression.SimpleRegressionTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/stat/regression/SimpleRegressionTest.java",
        "signature": "org.apache.commons.math.stat.regression.SimpleRegressionTest.testPerfect()",
        "snippet": "    public void testPerfect() throws Exception {\n        SimpleRegression regression = new SimpleRegression();\n        int n = 100;\n        for (int i = 0; i < n; i++) {\n            regression.addData(((double) i) / (n - 1), i);\n        }\n        assertEquals(0.0, regression.getSignificance(), 1.0e-5);\n        assertTrue(regression.getSlope() > 0.0);\n        assertTrue(regression.getSumSquaredErrors() >= 0.0);\n    }\n",
        "begin_line": 232,
        "end_line": 241,
        "comment": "",
        "child_ranges": [
            "(line 233,col 9)-(line 233,col 61)",
            "(line 234,col 9)-(line 234,col 20)",
            "(line 235,col 9)-(line 237,col 9)",
            "(line 238,col 9)-(line 238,col 64)",
            "(line 239,col 9)-(line 239,col 48)",
            "(line 240,col 9)-(line 240,col 60)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.stat.regression.SimpleRegressionTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/stat/regression/SimpleRegressionTest.java",
        "signature": "org.apache.commons.math.stat.regression.SimpleRegressionTest.testPerfectNegative()",
        "snippet": "    public void testPerfectNegative() throws Exception {\n        SimpleRegression regression = new SimpleRegression();\n        int n = 100;\n        for (int i = 0; i < n; i++) {\n            regression.addData(- ((double) i) / (n - 1), i);\n        }\n   \n        assertEquals(0.0, regression.getSignificance(), 1.0e-5);\n        assertTrue(regression.getSlope() < 0.0);   \n    }\n",
        "begin_line": 243,
        "end_line": 252,
        "comment": "",
        "child_ranges": [
            "(line 244,col 9)-(line 244,col 61)",
            "(line 245,col 9)-(line 245,col 20)",
            "(line 246,col 9)-(line 248,col 9)",
            "(line 250,col 9)-(line 250,col 64)",
            "(line 251,col 9)-(line 251,col 48)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.stat.regression.SimpleRegressionTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/stat/regression/SimpleRegressionTest.java",
        "signature": "org.apache.commons.math.stat.regression.SimpleRegressionTest.testRandom()",
        "snippet": "    public void testRandom() throws Exception {\n        SimpleRegression regression = new SimpleRegression();\n        Random random = new Random(1);\n        int n = 100;\n        for (int i = 0; i < n; i++) {\n            regression.addData(((double) i) / (n - 1), random.nextDouble());\n        }\n\n        assertTrue( 0.0 < regression.getSignificance()\n                    && regression.getSignificance() < 1.0);       \n    }\n",
        "begin_line": 254,
        "end_line": 264,
        "comment": "",
        "child_ranges": [
            "(line 255,col 9)-(line 255,col 61)",
            "(line 256,col 9)-(line 256,col 38)",
            "(line 257,col 9)-(line 257,col 20)",
            "(line 258,col 9)-(line 260,col 9)",
            "(line 262,col 9)-(line 263,col 59)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.stat.regression.SimpleRegressionTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/stat/regression/SimpleRegressionTest.java",
        "signature": "org.apache.commons.math.stat.regression.SimpleRegressionTest.testSSENonNegative()",
        "snippet": "    public void testSSENonNegative() {\n        double[] y = { 8915.102, 8919.302, 8923.502 };\n        double[] x = { 1.107178495E2, 1.107264895E2, 1.107351295E2 };\n        SimpleRegression reg = new SimpleRegression();\n        for (int i = 0; i < x.length; i++) {\n            reg.addData(x[i], y[i]);\n        }\n        assertTrue(reg.getSumSquaredErrors() >= 0.0);\n    } \n",
        "begin_line": 268,
        "end_line": 276,
        "comment": " Jira MATH-85 = Bugzilla 39432",
        "child_ranges": [
            "(line 269,col 9)-(line 269,col 54)",
            "(line 270,col 9)-(line 270,col 69)",
            "(line 271,col 9)-(line 271,col 54)",
            "(line 272,col 9)-(line 274,col 9)",
            "(line 275,col 9)-(line 275,col 53)"
        ]
    }
]