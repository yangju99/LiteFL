[
    {
        "class_name": "com.google.javascript.jscomp.CodePrinterTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CodePrinterTest.java",
        "signature": "com.google.javascript.jscomp.CodePrinterTest.parse(java.lang.String)",
        "snippet": "  static Node parse(String js) {\n    return parse(js, false);\n  }\n",
        "begin_line": 27,
        "end_line": 29,
        "comment": "",
        "child_ranges": [
            "(line 28,col 5)-(line 28,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CodePrinterTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CodePrinterTest.java",
        "signature": "com.google.javascript.jscomp.CodePrinterTest.parse(java.lang.String, boolean)",
        "snippet": "  static Node parse(String js, boolean checkTypes) {\n    Compiler compiler = new Compiler();\n    CompilerOptions options = new CompilerOptions();\n    // Allow getters and setters.\n    options.setLanguageIn(LanguageMode.ECMASCRIPT5);\n    compiler.initOptions(options);\n    Node n = compiler.parseTestCode(js);\n\n    if (checkTypes) {\n      DefaultPassConfig passConfig = new DefaultPassConfig(null);\n      CompilerPass typeResolver = passConfig.resolveTypes.create(compiler);\n      Node externs = new Node(Token.SCRIPT);\n      externs.setInputId(new InputId(\"externs\"));\n      externs.setIsSyntheticBlock(true);\n      Node externAndJsRoot = new Node(Token.BLOCK, externs, n);\n      externAndJsRoot.setIsSyntheticBlock(true);\n      typeResolver.process(externs, n);\n      CompilerPass inferTypes = passConfig.inferTypes.create(compiler);\n      inferTypes.process(externs, n);\n    }\n\n    checkUnexpectedErrorsOrWarnings(compiler, 0);\n    return n;\n  }\n",
        "begin_line": 31,
        "end_line": 54,
        "comment": "",
        "child_ranges": [
            "(line 32,col 5)-(line 32,col 39)",
            "(line 33,col 5)-(line 33,col 52)",
            "(line 35,col 5)-(line 35,col 52)",
            "(line 36,col 5)-(line 36,col 34)",
            "(line 37,col 5)-(line 37,col 40)",
            "(line 39,col 5)-(line 50,col 5)",
            "(line 52,col 5)-(line 52,col 49)",
            "(line 53,col 5)-(line 53,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CodePrinterTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CodePrinterTest.java",
        "signature": "com.google.javascript.jscomp.CodePrinterTest.checkUnexpectedErrorsOrWarnings(com.google.javascript.jscomp.Compiler, int)",
        "snippet": "  private static void checkUnexpectedErrorsOrWarnings(\n      Compiler compiler, int expected) {\n    int actual = compiler.getErrors().length + compiler.getWarnings().length;\n    if (actual != expected) {\n      String msg = \"\";\n      for (JSError err : compiler.getErrors()) {\n        msg += \"Error:\" + err.toString() + \"\\n\";\n      }\n      for (JSError err : compiler.getWarnings()) {\n        msg += \"Warning:\" + err.toString() + \"\\n\";\n      }\n      assertEquals(\"Unexpected warnings or errors.\\n \" + msg, expected, actual);\n    }\n  }\n",
        "begin_line": 56,
        "end_line": 69,
        "comment": "",
        "child_ranges": [
            "(line 58,col 5)-(line 58,col 77)",
            "(line 59,col 5)-(line 68,col 5)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CodePrinterTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CodePrinterTest.java",
        "signature": "com.google.javascript.jscomp.CodePrinterTest.parsePrint(java.lang.String, boolean, int)",
        "snippet": "  String parsePrint(String js, boolean prettyprint, int lineThreshold) {\n    return new CodePrinter.Builder(parse(js)).setPrettyPrint(prettyprint)\n        .setLineLengthThreshold(lineThreshold).build();\n  }\n",
        "begin_line": 71,
        "end_line": 74,
        "comment": "",
        "child_ranges": [
            "(line 72,col 5)-(line 73,col 55)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CodePrinterTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CodePrinterTest.java",
        "signature": "com.google.javascript.jscomp.CodePrinterTest.parsePrint(java.lang.String, boolean, boolean, int)",
        "snippet": "  String parsePrint(String js, boolean prettyprint, boolean lineBreak,\n      int lineThreshold) {\n    return new CodePrinter.Builder(parse(js)).setPrettyPrint(prettyprint)\n        .setLineLengthThreshold(lineThreshold).setLineBreak(lineBreak).build();\n  }\n",
        "begin_line": 76,
        "end_line": 80,
        "comment": "",
        "child_ranges": [
            "(line 78,col 5)-(line 79,col 79)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CodePrinterTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CodePrinterTest.java",
        "signature": "com.google.javascript.jscomp.CodePrinterTest.parsePrint(java.lang.String, boolean, boolean, int, boolean)",
        "snippet": "  String parsePrint(String js, boolean prettyprint, boolean lineBreak,\n      int lineThreshold, boolean outputTypes) {\n    return new CodePrinter.Builder(parse(js, true)).setPrettyPrint(prettyprint)\n        .setOutputTypes(outputTypes)\n        .setLineLengthThreshold(lineThreshold).setLineBreak(lineBreak)\n        .build();\n  }\n",
        "begin_line": 82,
        "end_line": 88,
        "comment": "",
        "child_ranges": [
            "(line 84,col 5)-(line 87,col 17)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CodePrinterTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CodePrinterTest.java",
        "signature": "com.google.javascript.jscomp.CodePrinterTest.parsePrint(java.lang.String, boolean, boolean, int, boolean, boolean)",
        "snippet": "  String parsePrint(String js, boolean prettyprint, boolean lineBreak,\n                    int lineThreshold, boolean outputTypes,\n                    boolean tagAsStrict) {\n    return new CodePrinter.Builder(parse(js, true)).setPrettyPrint(prettyprint)\n        .setOutputTypes(outputTypes)\n        .setLineLengthThreshold(lineThreshold).setLineBreak(lineBreak)\n        .setTagAsStrict(tagAsStrict)\n        .build();\n  }\n",
        "begin_line": 90,
        "end_line": 98,
        "comment": "",
        "child_ranges": [
            "(line 93,col 5)-(line 97,col 17)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CodePrinterTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CodePrinterTest.java",
        "signature": "com.google.javascript.jscomp.CodePrinterTest.printNode(com.google.javascript.rhino.Node)",
        "snippet": "  String printNode(Node n) {\n    return new CodePrinter.Builder(n).setLineLengthThreshold(\n        CodePrinter.DEFAULT_LINE_LENGTH_THRESHOLD).build();\n  }\n",
        "begin_line": 101,
        "end_line": 104,
        "comment": "",
        "child_ranges": [
            "(line 102,col 5)-(line 103,col 59)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CodePrinterTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CodePrinterTest.java",
        "signature": "com.google.javascript.jscomp.CodePrinterTest.assertPrintNode(java.lang.String, com.google.javascript.rhino.Node)",
        "snippet": "  void assertPrintNode(String expectedJs, Node ast) {\n    assertEquals(expectedJs, printNode(ast));\n  }\n",
        "begin_line": 106,
        "end_line": 108,
        "comment": "",
        "child_ranges": [
            "(line 107,col 5)-(line 107,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CodePrinterTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CodePrinterTest.java",
        "signature": "com.google.javascript.jscomp.CodePrinterTest.testPrint()",
        "snippet": "  public void testPrint() {\n    assertPrint(\"10 + a + b\", \"10+a+b\");\n    assertPrint(\"10 + (30*50)\", \"10+30*50\");\n    assertPrint(\"with(x) { x + 3; }\", \"with(x)x+3\");\n    assertPrint(\"\\\"aa'a\\\"\", \"\\\"aa'a\\\"\");\n    assertPrint(\"\\\"aa\\\\\\\"a\\\"\", \"'aa\\\"a'\");\n    assertPrint(\"function foo()\\n{return 10;}\", \"function foo(){return 10}\");\n    assertPrint(\"a instanceof b\", \"a instanceof b\");\n    assertPrint(\"typeof(a)\", \"typeof a\");\n    assertPrint(\n        \"var foo = x ? { a : 1 } : {a: 3, b:4, \\\"default\\\": 5, \\\"foo-bar\\\": 6}\",\n        \"var foo=x?{a:1}:{a:3,b:4,\\\"default\\\":5,\\\"foo-bar\\\":6}\");\n\n    // Safari: needs ';' at the end of a throw statement\n    assertPrint(\"function foo(){throw 'error';}\",\n        \"function foo(){throw\\\"error\\\";}\");\n    // Safari 3 needs a \"{\" around a single function\n    assertPrint(\"if (true) function foo(){return}\",\n        \"if(true){function foo(){return}}\");\n\n    assertPrint(\"var x = 10; { var y = 20; }\", \"var x=10;var y=20\");\n\n    assertPrint(\"while (x-- > 0);\", \"while(x-- >0);\");\n    assertPrint(\"x-- >> 1\", \"x-- >>1\");\n\n    assertPrint(\"(function () {})(); \",\n        \"(function(){})()\");\n\n    // Associativity\n    assertPrint(\"var a,b,c,d;a || (b&& c) && (a || d)\",\n        \"var a,b,c,d;a||b&&c&&(a||d)\");\n    assertPrint(\"var a,b,c; a || (b || c); a * (b * c); a | (b | c)\",\n        \"var a,b,c;a||b||c;a*b*c;a|b|c\");\n    assertPrint(\"var a,b,c; a / b / c;a / (b / c); a - (b - c);\",\n        \"var a,b,c;a/b/c;a/(b/c);a-(b-c)\");\n    assertPrint(\"var a,b; a = b = 3;\",\n        \"var a,b;a=b=3\");\n    assertPrint(\"var a,b,c,d; a = (b = c = (d = 3));\",\n        \"var a,b,c,d;a=b=c=d=3\");\n    assertPrint(\"var a,b,c; a += (b = c += 3);\",\n        \"var a,b,c;a+=b=c+=3\");\n    assertPrint(\"var a,b,c; a *= (b -= c);\",\n        \"var a,b,c;a*=b-=c\");\n\n    // Break scripts\n    assertPrint(\"'<script>'\", \"\\\"<script>\\\"\");\n    assertPrint(\"'</script>'\", \"\\\"<\\\\/script>\\\"\");\n    assertPrint(\"\\\"</script> </SCRIPT>\\\"\", \"\\\"<\\\\/script> <\\\\/SCRIPT>\\\"\");\n\n    assertPrint(\"'-->'\", \"\\\"--\\\\>\\\"\");\n    assertPrint(\"']]>'\", \"\\\"]]\\\\>\\\"\");\n    assertPrint(\"' --></script>'\", \"\\\" --\\\\><\\\\/script>\\\"\");\n\n    assertPrint(\"/--> <\\\\/script>/g\", \"/--\\\\> <\\\\/script>/g\");\n\n    // Break HTML start comments. Certain versions of Webkit\n    // begin an HTML comment when they see this.\n    assertPrint(\"'<!-- I am a string -->'\", \"\\\"<\\\\!-- I am a string --\\\\>\\\"\");\n\n    // Precedence\n    assertPrint(\"a ? delete b[0] : 3\", \"a?delete b[0]:3\");\n    assertPrint(\"(delete a[0])/10\", \"delete a[0]/10\");\n\n    // optional '()' for new\n\n    // simple new\n    assertPrint(\"new A\", \"new A\");\n    assertPrint(\"new A()\", \"new A\");\n    assertPrint(\"new A('x')\", \"new A(\\\"x\\\")\");\n\n    // calling instance method directly after new\n    assertPrint(\"new A().a()\", \"(new A).a()\");\n    assertPrint(\"(new A).a()\", \"(new A).a()\");\n\n    // this case should be fixed\n    assertPrint(\"new A('y').a()\", \"(new A(\\\"y\\\")).a()\");\n\n    // internal class\n    assertPrint(\"new A.B\", \"new A.B\");\n    assertPrint(\"new A.B()\", \"new A.B\");\n    assertPrint(\"new A.B('z')\", \"new A.B(\\\"z\\\")\");\n\n    // calling instance method directly after new internal class\n    assertPrint(\"(new A.B).a()\", \"(new A.B).a()\");\n    assertPrint(\"new A.B().a()\", \"(new A.B).a()\");\n    // this case should be fixed\n    assertPrint(\"new A.B('w').a()\", \"(new A.B(\\\"w\\\")).a()\");\n\n    // Operators: make sure we don't convert binary + and unary + into ++\n    assertPrint(\"x + +y\", \"x+ +y\");\n    assertPrint(\"x - (-y)\", \"x- -y\");\n    assertPrint(\"x++ +y\", \"x++ +y\");\n    assertPrint(\"x-- -y\", \"x-- -y\");\n    assertPrint(\"x++ -y\", \"x++-y\");\n\n    // Label\n    assertPrint(\"foo:for(;;){break foo;}\", \"foo:for(;;)break foo\");\n    assertPrint(\"foo:while(1){continue foo;}\", \"foo:while(1)continue foo\");\n\n    // Object literals.\n    assertPrint(\"({})\", \"({})\");\n    assertPrint(\"var x = {};\", \"var x={}\");\n    assertPrint(\"({}).x\", \"({}).x\");\n    assertPrint(\"({})['x']\", \"({})[\\\"x\\\"]\");\n    assertPrint(\"({}) instanceof Object\", \"({})instanceof Object\");\n    assertPrint(\"({}) || 1\", \"({})||1\");\n    assertPrint(\"1 || ({})\", \"1||{}\");\n    assertPrint(\"({}) ? 1 : 2\", \"({})?1:2\");\n    assertPrint(\"0 ? ({}) : 2\", \"0?{}:2\");\n    assertPrint(\"0 ? 1 : ({})\", \"0?1:{}\");\n    assertPrint(\"typeof ({})\", \"typeof{}\");\n    assertPrint(\"f({})\", \"f({})\");\n\n    // Anonymous function expressions.\n    assertPrint(\"(function(){})\", \"(function(){})\");\n    assertPrint(\"(function(){})()\", \"(function(){})()\");\n    assertPrint(\"(function(){})instanceof Object\",\n        \"(function(){})instanceof Object\");\n    assertPrint(\"(function(){}).bind().call()\",\n        \"(function(){}).bind().call()\");\n    assertPrint(\"var x = function() { };\", \"var x=function(){}\");\n    assertPrint(\"var x = function() { }();\", \"var x=function(){}()\");\n    assertPrint(\"(function() {}), 2\", \"(function(){}),2\");\n\n    // Name functions expression.\n    assertPrint(\"(function f(){})\", \"(function f(){})\");\n\n    // Function declaration.\n    assertPrint(\"function f(){}\", \"function f(){}\");\n\n    // Make sure we don't treat non-latin character escapes as raw strings.\n    assertPrint(\"({ 'a': 4, '\\\\u0100': 4 })\", \"({\\\"a\\\":4,\\\"\\\\u0100\\\":4})\");\n    assertPrint(\"({ a: 4, '\\\\u0100': 4 })\", \"({a:4,\\\"\\\\u0100\\\":4})\");\n\n    // Test if statement and for statements with single statements in body.\n    assertPrint(\"if (true) { alert();}\", \"if(true)alert()\");\n    assertPrint(\"if (false) {} else {alert(\\\"a\\\");}\",\n        \"if(false);else alert(\\\"a\\\")\");\n    assertPrint(\"for(;;) { alert();};\", \"for(;;)alert()\");\n\n    assertPrint(\"do { alert(); } while(true);\",\n        \"do alert();while(true)\");\n    assertPrint(\"myLabel: { alert();}\",\n        \"myLabel:alert()\");\n    assertPrint(\"myLabel: for(;;) continue myLabel;\",\n        \"myLabel:for(;;)continue myLabel\");\n\n    // Test nested var statement\n    assertPrint(\"if (true) var x; x = 4;\", \"if(true)var x;x=4\");\n\n    // Non-latin identifier. Make sure we keep them escaped.\n    assertPrint(\"\\\\u00fb\", \"\\\\u00fb\");\n    assertPrint(\"\\\\u00fa=1\", \"\\\\u00fa=1\");\n    assertPrint(\"function \\\\u00f9(){}\", \"function \\\\u00f9(){}\");\n    assertPrint(\"x.\\\\u00f8\", \"x.\\\\u00f8\");\n    assertPrint(\"x.\\\\u00f8\", \"x.\\\\u00f8\");\n    assertPrint(\"abc\\\\u4e00\\\\u4e01jkl\", \"abc\\\\u4e00\\\\u4e01jkl\");\n\n    // Test the right-associative unary operators for spurious parens\n    assertPrint(\"! ! true\", \"!!true\");\n    assertPrint(\"!(!(true))\", \"!!true\");\n    assertPrint(\"typeof(void(0))\", \"typeof void 0\");\n    assertPrint(\"typeof(void(!0))\", \"typeof void!0\");\n    assertPrint(\"+ - + + - + 3\", \"+-+ +-+3\"); // chained unary plus/minus\n    assertPrint(\"+(--x)\", \"+--x\");\n    assertPrint(\"-(++x)\", \"-++x\");\n\n    // needs a space to prevent an ambiguous parse\n    assertPrint(\"-(--x)\", \"- --x\");\n    assertPrint(\"!(~~5)\", \"!~~5\");\n    assertPrint(\"~(a/b)\", \"~(a/b)\");\n\n    // Preserve parens to overcome greedy binding of NEW\n    assertPrint(\"new (foo.bar()).factory(baz)\", \"new (foo.bar().factory)(baz)\");\n    assertPrint(\"new (bar()).factory(baz)\", \"new (bar().factory)(baz)\");\n    assertPrint(\"new (new foobar(x)).factory(baz)\",\n        \"new (new foobar(x)).factory(baz)\");\n\n    // Make sure that HOOK is right associative\n    assertPrint(\"a ? b : (c ? d : e)\", \"a?b:c?d:e\");\n    assertPrint(\"a ? (b ? c : d) : e\", \"a?b?c:d:e\");\n    assertPrint(\"(a ? b : c) ? d : e\", \"(a?b:c)?d:e\");\n\n    // Test nested ifs\n    assertPrint(\"if (x) if (y); else;\", \"if(x)if(y);else;\");\n\n    // Test comma.\n    assertPrint(\"a,b,c\", \"a,b,c\");\n    assertPrint(\"(a,b),c\", \"a,b,c\");\n    assertPrint(\"a,(b,c)\", \"a,b,c\");\n    assertPrint(\"x=a,b,c\", \"x=a,b,c\");\n    assertPrint(\"x=(a,b),c\", \"x=(a,b),c\");\n    assertPrint(\"x=a,(b,c)\", \"x=a,b,c\");\n    assertPrint(\"x=a,y=b,z=c\", \"x=a,y=b,z=c\");\n    assertPrint(\"x=(a,y=b,z=c)\", \"x=(a,y=b,z=c)\");\n    assertPrint(\"x=[a,b,c,d]\", \"x=[a,b,c,d]\");\n    assertPrint(\"x=[(a,b,c),d]\", \"x=[(a,b,c),d]\");\n    assertPrint(\"x=[(a,(b,c)),d]\", \"x=[(a,b,c),d]\");\n    assertPrint(\"x=[a,(b,c,d)]\", \"x=[a,(b,c,d)]\");\n    assertPrint(\"var x=(a,b)\", \"var x=(a,b)\");\n    assertPrint(\"var x=a,b,c\", \"var x=a,b,c\");\n    assertPrint(\"var x=(a,b),c\", \"var x=(a,b),c\");\n    assertPrint(\"var x=a,b=(c,d)\", \"var x=a,b=(c,d)\");\n    assertPrint(\"foo(a,b,c,d)\", \"foo(a,b,c,d)\");\n    assertPrint(\"foo((a,b,c),d)\", \"foo((a,b,c),d)\");\n    assertPrint(\"foo((a,(b,c)),d)\", \"foo((a,b,c),d)\");\n    assertPrint(\"f(a+b,(c,d,(e,f,g)))\", \"f(a+b,(c,d,e,f,g))\");\n    assertPrint(\"({}) , 1 , 2\", \"({}),1,2\");\n    assertPrint(\"({}) , {} , {}\", \"({}),{},{}\");\n\n    // EMPTY nodes\n    assertPrint(\"if (x){}\", \"if(x);\");\n    assertPrint(\"if(x);\", \"if(x);\");\n    assertPrint(\"if(x)if(y);\", \"if(x)if(y);\");\n    assertPrint(\"if(x){if(y);}\", \"if(x)if(y);\");\n    assertPrint(\"if(x){if(y){};;;}\", \"if(x)if(y);\");\n    assertPrint(\"if(x){;;function y(){};;}\", \"if(x){function y(){}}\");\n  }\n",
        "begin_line": 110,
        "end_line": 327,
        "comment": "",
        "child_ranges": [
            "(line 111,col 5)-(line 111,col 40)",
            "(line 112,col 5)-(line 112,col 44)",
            "(line 113,col 5)-(line 113,col 52)",
            "(line 114,col 5)-(line 114,col 40)",
            "(line 115,col 5)-(line 115,col 42)",
            "(line 116,col 5)-(line 116,col 77)",
            "(line 117,col 5)-(line 117,col 52)",
            "(line 118,col 5)-(line 118,col 41)",
            "(line 119,col 5)-(line 121,col 65)",
            "(line 124,col 5)-(line 125,col 43)",
            "(line 127,col 5)-(line 128,col 44)",
            "(line 130,col 5)-(line 130,col 68)",
            "(line 132,col 5)-(line 132,col 54)",
            "(line 133,col 5)-(line 133,col 39)",
            "(line 135,col 5)-(line 136,col 28)",
            "(line 139,col 5)-(line 140,col 39)",
            "(line 141,col 5)-(line 142,col 41)",
            "(line 143,col 5)-(line 144,col 43)",
            "(line 145,col 5)-(line 146,col 25)",
            "(line 147,col 5)-(line 148,col 33)",
            "(line 149,col 5)-(line 150,col 31)",
            "(line 151,col 5)-(line 152,col 29)",
            "(line 155,col 5)-(line 155,col 46)",
            "(line 156,col 5)-(line 156,col 50)",
            "(line 157,col 5)-(line 157,col 74)",
            "(line 159,col 5)-(line 159,col 38)",
            "(line 160,col 5)-(line 160,col 38)",
            "(line 161,col 5)-(line 161,col 60)",
            "(line 163,col 5)-(line 163,col 62)",
            "(line 167,col 5)-(line 167,col 78)",
            "(line 170,col 5)-(line 170,col 58)",
            "(line 171,col 5)-(line 171,col 54)",
            "(line 176,col 5)-(line 176,col 34)",
            "(line 177,col 5)-(line 177,col 36)",
            "(line 178,col 5)-(line 178,col 46)",
            "(line 181,col 5)-(line 181,col 46)",
            "(line 182,col 5)-(line 182,col 46)",
            "(line 185,col 5)-(line 185,col 56)",
            "(line 188,col 5)-(line 188,col 38)",
            "(line 189,col 5)-(line 189,col 40)",
            "(line 190,col 5)-(line 190,col 50)",
            "(line 193,col 5)-(line 193,col 50)",
            "(line 194,col 5)-(line 194,col 50)",
            "(line 196,col 5)-(line 196,col 60)",
            "(line 199,col 5)-(line 199,col 35)",
            "(line 200,col 5)-(line 200,col 37)",
            "(line 201,col 5)-(line 201,col 36)",
            "(line 202,col 5)-(line 202,col 36)",
            "(line 203,col 5)-(line 203,col 35)",
            "(line 206,col 5)-(line 206,col 67)",
            "(line 207,col 5)-(line 207,col 75)",
            "(line 210,col 5)-(line 210,col 32)",
            "(line 211,col 5)-(line 211,col 43)",
            "(line 212,col 5)-(line 212,col 36)",
            "(line 213,col 5)-(line 213,col 44)",
            "(line 214,col 5)-(line 214,col 67)",
            "(line 215,col 5)-(line 215,col 40)",
            "(line 216,col 5)-(line 216,col 38)",
            "(line 217,col 5)-(line 217,col 44)",
            "(line 218,col 5)-(line 218,col 42)",
            "(line 219,col 5)-(line 219,col 42)",
            "(line 220,col 5)-(line 220,col 43)",
            "(line 221,col 5)-(line 221,col 34)",
            "(line 224,col 5)-(line 224,col 52)",
            "(line 225,col 5)-(line 225,col 56)",
            "(line 226,col 5)-(line 227,col 43)",
            "(line 228,col 5)-(line 229,col 40)",
            "(line 230,col 5)-(line 230,col 65)",
            "(line 231,col 5)-(line 231,col 69)",
            "(line 232,col 5)-(line 232,col 58)",
            "(line 235,col 5)-(line 235,col 56)",
            "(line 238,col 5)-(line 238,col 52)",
            "(line 241,col 5)-(line 241,col 75)",
            "(line 242,col 5)-(line 242,col 69)",
            "(line 245,col 5)-(line 245,col 60)",
            "(line 246,col 5)-(line 247,col 39)",
            "(line 248,col 5)-(line 248,col 58)",
            "(line 250,col 5)-(line 251,col 34)",
            "(line 252,col 5)-(line 253,col 27)",
            "(line 254,col 5)-(line 255,col 43)",
            "(line 258,col 5)-(line 258,col 64)",
            "(line 261,col 5)-(line 261,col 38)",
            "(line 262,col 5)-(line 262,col 42)",
            "(line 263,col 5)-(line 263,col 64)",
            "(line 264,col 5)-(line 264,col 42)",
            "(line 265,col 5)-(line 265,col 42)",
            "(line 266,col 5)-(line 266,col 64)",
            "(line 269,col 5)-(line 269,col 38)",
            "(line 270,col 5)-(line 270,col 40)",
            "(line 271,col 5)-(line 271,col 52)",
            "(line 272,col 5)-(line 272,col 53)",
            "(line 273,col 5)-(line 273,col 45)",
            "(line 274,col 5)-(line 274,col 34)",
            "(line 275,col 5)-(line 275,col 34)",
            "(line 278,col 5)-(line 278,col 35)",
            "(line 279,col 5)-(line 279,col 34)",
            "(line 280,col 5)-(line 280,col 36)",
            "(line 283,col 5)-(line 283,col 80)",
            "(line 284,col 5)-(line 284,col 72)",
            "(line 285,col 5)-(line 286,col 44)",
            "(line 289,col 5)-(line 289,col 52)",
            "(line 290,col 5)-(line 290,col 52)",
            "(line 291,col 5)-(line 291,col 54)",
            "(line 294,col 5)-(line 294,col 60)",
            "(line 297,col 5)-(line 297,col 34)",
            "(line 298,col 5)-(line 298,col 36)",
            "(line 299,col 5)-(line 299,col 36)",
            "(line 300,col 5)-(line 300,col 38)",
            "(line 301,col 5)-(line 301,col 42)",
            "(line 302,col 5)-(line 302,col 40)",
            "(line 303,col 5)-(line 303,col 46)",
            "(line 304,col 5)-(line 304,col 50)",
            "(line 305,col 5)-(line 305,col 46)",
            "(line 306,col 5)-(line 306,col 50)",
            "(line 307,col 5)-(line 307,col 52)",
            "(line 308,col 5)-(line 308,col 50)",
            "(line 309,col 5)-(line 309,col 46)",
            "(line 310,col 5)-(line 310,col 46)",
            "(line 311,col 5)-(line 311,col 50)",
            "(line 312,col 5)-(line 312,col 54)",
            "(line 313,col 5)-(line 313,col 48)",
            "(line 314,col 5)-(line 314,col 52)",
            "(line 315,col 5)-(line 315,col 54)",
            "(line 316,col 5)-(line 316,col 62)",
            "(line 317,col 5)-(line 317,col 44)",
            "(line 318,col 5)-(line 318,col 48)",
            "(line 321,col 5)-(line 321,col 38)",
            "(line 322,col 5)-(line 322,col 36)",
            "(line 323,col 5)-(line 323,col 46)",
            "(line 324,col 5)-(line 324,col 48)",
            "(line 325,col 5)-(line 325,col 52)",
            "(line 326,col 5)-(line 326,col 70)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CodePrinterTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CodePrinterTest.java",
        "signature": "com.google.javascript.jscomp.CodePrinterTest.testPrintArray()",
        "snippet": "  public void testPrintArray() {\n    assertPrint(\"[void 0, void 0]\", \"[void 0,void 0]\");\n    assertPrint(\"[undefined, undefined]\", \"[undefined,undefined]\");\n    assertPrint(\"[ , , , undefined]\", \"[,,,undefined]\");\n    assertPrint(\"[ , , , 0]\", \"[,,,0]\");\n  }\n",
        "begin_line": 329,
        "end_line": 334,
        "comment": "",
        "child_ranges": [
            "(line 330,col 5)-(line 330,col 55)",
            "(line 331,col 5)-(line 331,col 67)",
            "(line 332,col 5)-(line 332,col 56)",
            "(line 333,col 5)-(line 333,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CodePrinterTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CodePrinterTest.java",
        "signature": "com.google.javascript.jscomp.CodePrinterTest.testHook()",
        "snippet": "  public void testHook() {\n    assertPrint(\"a ? b = 1 : c = 2\", \"a?b=1:c=2\");\n    assertPrint(\"x = a ? b = 1 : c = 2\", \"x=a?b=1:c=2\");\n    assertPrint(\"(x = a) ? b = 1 : c = 2\", \"(x=a)?b=1:c=2\");\n\n    assertPrint(\"x, a ? b = 1 : c = 2\", \"x,a?b=1:c=2\");\n    assertPrint(\"x, (a ? b = 1 : c = 2)\", \"x,a?b=1:c=2\");\n    assertPrint(\"(x, a) ? b = 1 : c = 2\", \"(x,a)?b=1:c=2\");\n\n    assertPrint(\"a ? (x, b) : c = 2\", \"a?(x,b):c=2\");\n    assertPrint(\"a ? b = 1 : (x,c)\", \"a?b=1:(x,c)\");\n\n    assertPrint(\"a ? b = 1 : c = 2 + x\", \"a?b=1:c=2+x\");\n    assertPrint(\"(a ? b = 1 : c = 2) + x\", \"(a?b=1:c=2)+x\");\n    assertPrint(\"a ? b = 1 : (c = 2) + x\", \"a?b=1:(c=2)+x\");\n\n    assertPrint(\"a ? (b?1:2) : 3\", \"a?b?1:2:3\");\n  }\n",
        "begin_line": 336,
        "end_line": 353,
        "comment": "",
        "child_ranges": [
            "(line 337,col 5)-(line 337,col 50)",
            "(line 338,col 5)-(line 338,col 56)",
            "(line 339,col 5)-(line 339,col 60)",
            "(line 341,col 5)-(line 341,col 55)",
            "(line 342,col 5)-(line 342,col 57)",
            "(line 343,col 5)-(line 343,col 59)",
            "(line 345,col 5)-(line 345,col 53)",
            "(line 346,col 5)-(line 346,col 52)",
            "(line 348,col 5)-(line 348,col 56)",
            "(line 349,col 5)-(line 349,col 60)",
            "(line 350,col 5)-(line 350,col 60)",
            "(line 352,col 5)-(line 352,col 48)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CodePrinterTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CodePrinterTest.java",
        "signature": "com.google.javascript.jscomp.CodePrinterTest.testPrintInOperatorInForLoop()",
        "snippet": "  public void testPrintInOperatorInForLoop() {\n    // Check for in expression in for's init expression.\n    // Check alone, with + (higher precedence), with ?: (lower precedence),\n    // and with conditional.\n    assertPrint(\"var a={}; for (var i = (\\\"length\\\" in a); i;) {}\",\n        \"var a={};for(var i=(\\\"length\\\"in a);i;);\");\n    assertPrint(\"var a={}; for (var i = (\\\"length\\\" in a) ? 0 : 1; i;) {}\",\n        \"var a={};for(var i=(\\\"length\\\"in a)?0:1;i;);\");\n    assertPrint(\"var a={}; for (var i = (\\\"length\\\" in a) + 1; i;) {}\",\n        \"var a={};for(var i=(\\\"length\\\"in a)+1;i;);\");\n    assertPrint(\"var a={};for (var i = (\\\"length\\\" in a|| \\\"size\\\" in a);;);\",\n        \"var a={};for(var i=(\\\"length\\\"in a)||(\\\"size\\\"in a);;);\");\n    assertPrint(\"var a={};for (var i = a || a || (\\\"size\\\" in a);;);\",\n        \"var a={};for(var i=a||a||(\\\"size\\\"in a);;);\");\n\n    // Test works with unary operators and calls.\n    assertPrint(\"var a={}; for (var i = -(\\\"length\\\" in a); i;) {}\",\n        \"var a={};for(var i=-(\\\"length\\\"in a);i;);\");\n    assertPrint(\"var a={};function b_(p){ return p;};\" +\n        \"for(var i=1,j=b_(\\\"length\\\" in a);;) {}\",\n        \"var a={};function b_(p){return p}\" +\n            \"for(var i=1,j=b_(\\\"length\\\"in a);;);\");\n\n    // Test we correctly handle an in operator in the test clause.\n    assertPrint(\"var a={}; for (;(\\\"length\\\" in a);) {}\",\n        \"var a={};for(;\\\"length\\\"in a;);\");\n  }\n",
        "begin_line": 355,
        "end_line": 381,
        "comment": "",
        "child_ranges": [
            "(line 359,col 5)-(line 360,col 52)",
            "(line 361,col 5)-(line 362,col 56)",
            "(line 363,col 5)-(line 364,col 54)",
            "(line 365,col 5)-(line 366,col 67)",
            "(line 367,col 5)-(line 368,col 55)",
            "(line 371,col 5)-(line 372,col 53)",
            "(line 373,col 5)-(line 376,col 52)",
            "(line 379,col 5)-(line 380,col 43)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CodePrinterTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CodePrinterTest.java",
        "signature": "com.google.javascript.jscomp.CodePrinterTest.testLiteralProperty()",
        "snippet": "  public void testLiteralProperty() {\n    assertPrint(\"(64).toString()\", \"(64).toString()\");\n  }\n",
        "begin_line": 383,
        "end_line": 385,
        "comment": "",
        "child_ranges": [
            "(line 384,col 5)-(line 384,col 54)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CodePrinterTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CodePrinterTest.java",
        "signature": "com.google.javascript.jscomp.CodePrinterTest.assertPrint(java.lang.String, java.lang.String)",
        "snippet": "  private void assertPrint(String js, String expected) {\n    parse(expected); // validate the expected string is valid js\n    assertEquals(expected,\n        parsePrint(js, false, CodePrinter.DEFAULT_LINE_LENGTH_THRESHOLD));\n  }\n",
        "begin_line": 387,
        "end_line": 391,
        "comment": "",
        "child_ranges": [
            "(line 388,col 5)-(line 388,col 20)",
            "(line 389,col 5)-(line 390,col 74)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CodePrinterTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CodePrinterTest.java",
        "signature": "com.google.javascript.jscomp.CodePrinterTest.testAmbiguousElseClauses()",
        "snippet": "  public void testAmbiguousElseClauses() {\n    assertPrintNode(\"if(x)if(y);else;\",\n        new Node(Token.IF,\n            Node.newString(Token.NAME, \"x\"),\n            new Node(Token.BLOCK,\n                new Node(Token.IF,\n                    Node.newString(Token.NAME, \"y\"),\n                    new Node(Token.BLOCK),\n\n                    // ELSE clause for the inner if\n                    new Node(Token.BLOCK)))));\n\n    assertPrintNode(\"if(x){if(y);}else;\",\n        new Node(Token.IF,\n            Node.newString(Token.NAME, \"x\"),\n            new Node(Token.BLOCK,\n                new Node(Token.IF,\n                    Node.newString(Token.NAME, \"y\"),\n                    new Node(Token.BLOCK))),\n\n            // ELSE clause for the outer if\n            new Node(Token.BLOCK)));\n\n    assertPrintNode(\"if(x)if(y);else{if(z);}else;\",\n        new Node(Token.IF,\n            Node.newString(Token.NAME, \"x\"),\n            new Node(Token.BLOCK,\n                new Node(Token.IF,\n                    Node.newString(Token.NAME, \"y\"),\n                    new Node(Token.BLOCK),\n                    new Node(Token.BLOCK,\n                        new Node(Token.IF,\n                            Node.newString(Token.NAME, \"z\"),\n                            new Node(Token.BLOCK))))),\n\n            // ELSE clause for the outermost if\n            new Node(Token.BLOCK)));\n  }\n",
        "begin_line": 395,
        "end_line": 432,
        "comment": " else clause with the wrong if clause.",
        "child_ranges": [
            "(line 396,col 5)-(line 405,col 46)",
            "(line 407,col 5)-(line 416,col 36)",
            "(line 418,col 5)-(line 431,col 36)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CodePrinterTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CodePrinterTest.java",
        "signature": "com.google.javascript.jscomp.CodePrinterTest.testLineBreak()",
        "snippet": "  public void testLineBreak() {\n    // line break after function if in a statement context\n    assertLineBreak(\"function a() {}\\n\" +\n        \"function b() {}\",\n        \"function a(){}\\n\" +\n        \"function b(){}\\n\");\n\n    // line break after ; after a function\n    assertLineBreak(\"var a = {};\\n\" +\n        \"a.foo = function () {}\\n\" +\n        \"function b() {}\",\n        \"var a={};a.foo=function(){};\\n\" +\n        \"function b(){}\\n\");\n\n    // break after comma after a function\n    assertLineBreak(\"var a = {\\n\" +\n        \"  b: function() {},\\n\" +\n        \"  c: function() {}\\n\" +\n        \"};\\n\" +\n        \"alert(a);\",\n\n        \"var a={b:function(){},\\n\" +\n        \"c:function(){}};\\n\" +\n        \"alert(a)\");\n  }\n",
        "begin_line": 434,
        "end_line": 458,
        "comment": "",
        "child_ranges": [
            "(line 436,col 5)-(line 439,col 28)",
            "(line 442,col 5)-(line 446,col 28)",
            "(line 449,col 5)-(line 457,col 20)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CodePrinterTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CodePrinterTest.java",
        "signature": "com.google.javascript.jscomp.CodePrinterTest.assertLineBreak(java.lang.String, java.lang.String)",
        "snippet": "  private void assertLineBreak(String js, String expected) {\n    assertEquals(expected,\n        parsePrint(js, false, true,\n            CodePrinter.DEFAULT_LINE_LENGTH_THRESHOLD));\n  }\n",
        "begin_line": 460,
        "end_line": 464,
        "comment": "",
        "child_ranges": [
            "(line 461,col 5)-(line 463,col 56)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CodePrinterTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CodePrinterTest.java",
        "signature": "com.google.javascript.jscomp.CodePrinterTest.testPrettyPrinter()",
        "snippet": "  public void testPrettyPrinter() {\n    // Ensure that the pretty printer inserts line breaks at appropriate\n    // places.\n    assertPrettyPrint(\"(function(){})();\",\"(function() {\\n})();\\n\");\n    assertPrettyPrint(\"var a = (function() {});alert(a);\",\n        \"var a = function() {\\n};\\nalert(a);\\n\");\n\n    // Check we correctly handle putting brackets around all if clauses so\n    // we can put breakpoints inside statements.\n    assertPrettyPrint(\"if (1) {}\",\n        \"if(1) {\\n\" +\n        \"}\\n\");\n    assertPrettyPrint(\"if (1) {alert(\\\"\\\");}\",\n        \"if(1) {\\n\" +\n        \"  alert(\\\"\\\")\\n\" +\n        \"}\\n\");\n    assertPrettyPrint(\"if (1)alert(\\\"\\\");\",\n        \"if(1) {\\n\" +\n        \"  alert(\\\"\\\")\\n\" +\n        \"}\\n\");\n    assertPrettyPrint(\"if (1) {alert();alert();}\",\n        \"if(1) {\\n\" +\n        \"  alert();\\n\" +\n        \"  alert()\\n\" +\n        \"}\\n\");\n\n    // Don't add blocks if they weren't there already.\n    assertPrettyPrint(\"label: alert();\",\n        \"label:alert();\\n\");\n\n    // But if statements and loops get blocks automagically.\n    assertPrettyPrint(\"if (1) alert();\",\n        \"if(1) {\\n\" +\n        \"  alert()\\n\" +\n        \"}\\n\");\n    assertPrettyPrint(\"for (;;) alert();\",\n        \"for(;;) {\\n\" +\n        \"  alert()\\n\" +\n        \"}\\n\");\n\n    assertPrettyPrint(\"while (1) alert();\",\n        \"while(1) {\\n\" +\n        \"  alert()\\n\" +\n        \"}\\n\");\n\n    // Do we put else clauses in blocks?\n    assertPrettyPrint(\"if (1) {} else {alert(a);}\",\n        \"if(1) {\\n\" +\n        \"}else {\\n  alert(a)\\n}\\n\");\n\n    // Do we add blocks to else clauses?\n    assertPrettyPrint(\"if (1) alert(a); else alert(b);\",\n        \"if(1) {\\n\" +\n        \"  alert(a)\\n\" +\n        \"}else {\\n\" +\n        \"  alert(b)\\n\" +\n        \"}\\n\");\n\n    // Do we put for bodies in blocks?\n    assertPrettyPrint(\"for(;;) { alert();}\",\n        \"for(;;) {\\n\" +\n         \"  alert()\\n\" +\n         \"}\\n\");\n    assertPrettyPrint(\"for(;;) {}\",\n        \"for(;;) {\\n\" +\n        \"}\\n\");\n    assertPrettyPrint(\"for(;;) { alert(); alert(); }\",\n        \"for(;;) {\\n\" +\n        \"  alert();\\n\" +\n        \"  alert()\\n\" +\n        \"}\\n\");\n\n    // How about do loops?\n    assertPrettyPrint(\"do { alert(); } while(true);\",\n        \"do {\\n\" +\n        \"  alert()\\n\" +\n        \"}while(true);\\n\");\n\n    // label?\n    assertPrettyPrint(\"myLabel: { alert();}\",\n        \"myLabel: {\\n\" +\n        \"  alert()\\n\" +\n        \"}\\n\");\n\n    // Don't move the label on a loop, because then break {label} and\n    // continue {label} won't work.\n    assertPrettyPrint(\"myLabel: for(;;) continue myLabel;\",\n        \"myLabel:for(;;) {\\n\" +\n        \"  continue myLabel\\n\" +\n        \"}\\n\");\n\n    assertPrettyPrint(\"var a;\", \"var a;\\n\");\n  }\n",
        "begin_line": 466,
        "end_line": 558,
        "comment": "",
        "child_ranges": [
            "(line 469,col 5)-(line 469,col 68)",
            "(line 470,col 5)-(line 471,col 49)",
            "(line 475,col 5)-(line 477,col 15)",
            "(line 478,col 5)-(line 481,col 15)",
            "(line 482,col 5)-(line 485,col 15)",
            "(line 486,col 5)-(line 490,col 15)",
            "(line 493,col 5)-(line 494,col 28)",
            "(line 497,col 5)-(line 500,col 15)",
            "(line 501,col 5)-(line 504,col 15)",
            "(line 506,col 5)-(line 509,col 15)",
            "(line 512,col 5)-(line 514,col 36)",
            "(line 517,col 5)-(line 522,col 15)",
            "(line 525,col 5)-(line 528,col 16)",
            "(line 529,col 5)-(line 531,col 15)",
            "(line 532,col 5)-(line 536,col 15)",
            "(line 539,col 5)-(line 542,col 27)",
            "(line 545,col 5)-(line 548,col 15)",
            "(line 552,col 5)-(line 555,col 15)",
            "(line 557,col 5)-(line 557,col 44)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CodePrinterTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CodePrinterTest.java",
        "signature": "com.google.javascript.jscomp.CodePrinterTest.testPrettyPrinter2()",
        "snippet": "  public void testPrettyPrinter2() {\n    assertPrettyPrint(\n        \"if(true) f();\",\n        \"if(true) {\\n\" +\n        \"  f()\\n\" +\n        \"}\\n\");\n\n    assertPrettyPrint(\n        \"if (true) { f() } else { g() }\",\n        \"if(true) {\\n\" +\n        \"  f()\\n\" +\n        \"}else {\\n\" +\n        \"  g()\\n\" +\n        \"}\\n\");\n\n    assertPrettyPrint(\n        \"if(true) f(); for(;;) g();\",\n        \"if(true) {\\n\" +\n        \"  f()\\n\" +\n        \"}\\n\" +\n        \"for(;;) {\\n\" +\n        \"  g()\\n\" +\n        \"}\\n\");\n  }\n",
        "begin_line": 560,
        "end_line": 583,
        "comment": "",
        "child_ranges": [
            "(line 561,col 5)-(line 565,col 15)",
            "(line 567,col 5)-(line 573,col 15)",
            "(line 575,col 5)-(line 582,col 15)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CodePrinterTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CodePrinterTest.java",
        "signature": "com.google.javascript.jscomp.CodePrinterTest.testPrettyPrinter3()",
        "snippet": "  public void testPrettyPrinter3() {\n    assertPrettyPrint(\n        \"try {} catch(e) {}if (1) {alert();alert();}\",\n        \"try {\\n\" +\n        \"}catch(e) {\\n\" +\n        \"}\\n\" +\n        \"if(1) {\\n\" +\n        \"  alert();\\n\" +\n        \"  alert()\\n\" +\n        \"}\\n\");\n\n    assertPrettyPrint(\n        \"try {} finally {}if (1) {alert();alert();}\",\n        \"try {\\n\" +\n        \"}finally {\\n\" +\n        \"}\\n\" +\n        \"if(1) {\\n\" +\n        \"  alert();\\n\" +\n        \"  alert()\\n\" +\n        \"}\\n\");\n\n    assertPrettyPrint(\n        \"try {} catch(e) {} finally {} if (1) {alert();alert();}\",\n        \"try {\\n\" +\n        \"}catch(e) {\\n\" +\n        \"}finally {\\n\" +\n        \"}\\n\" +\n        \"if(1) {\\n\" +\n        \"  alert();\\n\" +\n        \"  alert()\\n\" +\n        \"}\\n\");\n  }\n",
        "begin_line": 585,
        "end_line": 616,
        "comment": "",
        "child_ranges": [
            "(line 586,col 5)-(line 594,col 15)",
            "(line 596,col 5)-(line 604,col 15)",
            "(line 606,col 5)-(line 615,col 15)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CodePrinterTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CodePrinterTest.java",
        "signature": "com.google.javascript.jscomp.CodePrinterTest.testPrettyPrinter4()",
        "snippet": "  public void testPrettyPrinter4() {\n    assertPrettyPrint(\n        \"function f() {}if (1) {alert();}\",\n        \"function f() {\\n\" +\n        \"}\\n\" +\n        \"if(1) {\\n\" +\n        \"  alert()\\n\" +\n        \"}\\n\");\n\n    assertPrettyPrint(\n        \"var f = function() {};if (1) {alert();}\",\n        \"var f = function() {\\n\" +\n        \"};\\n\" +\n        \"if(1) {\\n\" +\n        \"  alert()\\n\" +\n        \"}\\n\");\n\n    assertPrettyPrint(\n        \"(function() {})();if (1) {alert();}\",\n        \"(function() {\\n\" +\n        \"})();\\n\" +\n        \"if(1) {\\n\" +\n        \"  alert()\\n\" +\n        \"}\\n\");\n\n    assertPrettyPrint(\n        \"(function() {alert();alert();})();if (1) {alert();}\",\n        \"(function() {\\n\" +\n        \"  alert();\\n\" +\n        \"  alert()\\n\" +\n        \"})();\\n\" +\n        \"if(1) {\\n\" +\n        \"  alert()\\n\" +\n        \"}\\n\");\n  }\n",
        "begin_line": 618,
        "end_line": 652,
        "comment": "",
        "child_ranges": [
            "(line 619,col 5)-(line 625,col 15)",
            "(line 627,col 5)-(line 633,col 15)",
            "(line 635,col 5)-(line 641,col 15)",
            "(line 643,col 5)-(line 651,col 15)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CodePrinterTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CodePrinterTest.java",
        "signature": "com.google.javascript.jscomp.CodePrinterTest.testTypeAnnotations()",
        "snippet": "  public void testTypeAnnotations() {\n    assertTypeAnnotations(\n        \"/** @constructor */ function Foo(){}\",\n        \"/**\\n * @return {undefined}\\n * @constructor\\n */\\n\"\n        + \"function Foo() {\\n}\\n\");\n  }\n",
        "begin_line": 654,
        "end_line": 659,
        "comment": "",
        "child_ranges": [
            "(line 655,col 5)-(line 658,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CodePrinterTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CodePrinterTest.java",
        "signature": "com.google.javascript.jscomp.CodePrinterTest.testTypeAnnotationsTypeDef()",
        "snippet": "  public void testTypeAnnotationsTypeDef() {\n    // TODO(johnlenz): It would be nice if there were some way to preserve\n    // typedefs but currently they are resolved into the basic types in the\n    // type registry.\n    assertTypeAnnotations(\n        \"/** @typedef {Array.<number>} */ goog.java.Long;\\n\"\n        + \"/** @param {!goog.java.Long} a*/\\n\"\n        + \"function f(a){};\\n\",\n        \"goog.java.Long;\\n\"\n        + \"/**\\n\"\n        + \" * @param {(Array|null)} a\\n\"\n        + \" * @return {undefined}\\n\"\n        + \" */\\n\"\n        + \"function f(a) {\\n}\\n\");\n  }\n",
        "begin_line": 661,
        "end_line": 675,
        "comment": "",
        "child_ranges": [
            "(line 665,col 5)-(line 674,col 34)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CodePrinterTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CodePrinterTest.java",
        "signature": "com.google.javascript.jscomp.CodePrinterTest.testTypeAnnotationsAssign()",
        "snippet": "  public void testTypeAnnotationsAssign() {\n    assertTypeAnnotations(\"/** @constructor */ var Foo = function(){}\",\n        \"/**\\n * @return {undefined}\\n * @constructor\\n */\\n\"\n        + \"var Foo = function() {\\n};\\n\");\n  }\n",
        "begin_line": 677,
        "end_line": 681,
        "comment": "",
        "child_ranges": [
            "(line 678,col 5)-(line 680,col 42)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CodePrinterTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CodePrinterTest.java",
        "signature": "com.google.javascript.jscomp.CodePrinterTest.testTypeAnnotationsNamespace()",
        "snippet": "  public void testTypeAnnotationsNamespace() {\n    assertTypeAnnotations(\"var a = {};\"\n        + \"/** @constructor */ a.Foo = function(){}\",\n        \"var a = {};\\n\"\n        + \"/**\\n * @return {undefined}\\n * @constructor\\n */\\n\"\n        + \"a.Foo = function() {\\n};\\n\");\n  }\n",
        "begin_line": 683,
        "end_line": 689,
        "comment": "",
        "child_ranges": [
            "(line 684,col 5)-(line 688,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CodePrinterTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CodePrinterTest.java",
        "signature": "com.google.javascript.jscomp.CodePrinterTest.testTypeAnnotationsMemberSubclass()",
        "snippet": "  public void testTypeAnnotationsMemberSubclass() {\n    assertTypeAnnotations(\"var a = {};\"\n        + \"/** @constructor */ a.Foo = function(){};\"\n        + \"/** @constructor \\n @extends {a.Foo} */ a.Bar = function(){}\",\n        \"var a = {};\\n\"\n        + \"/**\\n * @return {undefined}\\n * @constructor\\n */\\n\"\n        + \"a.Foo = function() {\\n};\\n\"\n        + \"/**\\n * @return {undefined}\\n * @extends {a.Foo}\\n\"\n        + \" * @constructor\\n */\\n\"\n        + \"a.Bar = function() {\\n};\\n\");\n  }\n",
        "begin_line": 691,
        "end_line": 701,
        "comment": "",
        "child_ranges": [
            "(line 692,col 5)-(line 700,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CodePrinterTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CodePrinterTest.java",
        "signature": "com.google.javascript.jscomp.CodePrinterTest.testTypeAnnotationsInterface()",
        "snippet": "  public void testTypeAnnotationsInterface() {\n    assertTypeAnnotations(\"var a = {};\"\n        + \"/** @interface */ a.Foo = function(){};\"\n        + \"/** @interface \\n @extends {a.Foo} */ a.Bar = function(){}\",\n        \"var a = {};\\n\"\n        + \"/**\\n * @interface\\n */\\n\"\n        + \"a.Foo = function() {\\n};\\n\"\n        + \"/**\\n * @extends {a.Foo}\\n\"\n        + \" * @interface\\n */\\n\"\n        + \"a.Bar = function() {\\n};\\n\");\n  }\n",
        "begin_line": 703,
        "end_line": 713,
        "comment": "",
        "child_ranges": [
            "(line 704,col 5)-(line 712,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CodePrinterTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CodePrinterTest.java",
        "signature": "com.google.javascript.jscomp.CodePrinterTest.testTypeAnnotationsMultipleInterface()",
        "snippet": "  public void testTypeAnnotationsMultipleInterface() {\n    assertTypeAnnotations(\"var a = {};\"\n        + \"/** @interface */ a.Foo1 = function(){};\"\n        + \"/** @interface */ a.Foo2 = function(){};\"\n        + \"/** @interface \\n @extends {a.Foo1} \\n @extends {a.Foo2} */\"\n        + \"a.Bar = function(){}\",\n        \"var a = {};\\n\"\n        + \"/**\\n * @interface\\n */\\n\"\n        + \"a.Foo1 = function() {\\n};\\n\"\n        + \"/**\\n * @interface\\n */\\n\"\n        + \"a.Foo2 = function() {\\n};\\n\"\n        + \"/**\\n * @extends {a.Foo1}\\n\"\n        + \" * @extends {a.Foo2}\\n\"\n        + \" * @interface\\n */\\n\"\n        + \"a.Bar = function() {\\n};\\n\");\n  }\n",
        "begin_line": 715,
        "end_line": 730,
        "comment": "",
        "child_ranges": [
            "(line 716,col 5)-(line 729,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CodePrinterTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CodePrinterTest.java",
        "signature": "com.google.javascript.jscomp.CodePrinterTest.testTypeAnnotationsMember()",
        "snippet": "  public void testTypeAnnotationsMember() {\n    assertTypeAnnotations(\"var a = {};\"\n        + \"/** @constructor */ a.Foo = function(){}\"\n        + \"/** @param {string} foo\\n\"\n        + \"  * @return {number} */\\n\"\n        + \"a.Foo.prototype.foo = function(foo) { return 3; };\"\n        + \"/** @type {string|undefined} */\"\n        + \"a.Foo.prototype.bar = '';\",\n        \"var a = {};\\n\"\n        + \"/**\\n * @return {undefined}\\n * @constructor\\n */\\n\"\n        + \"a.Foo = function() {\\n};\\n\"\n        + \"/**\\n\"\n        + \" * @param {string} foo\\n\"\n        + \" * @return {number}\\n\"\n        + \" */\\n\"\n        + \"a.Foo.prototype.foo = function(foo) {\\n  return 3\\n};\\n\"\n        + \"/** @type {string} */\\n\"\n        + \"a.Foo.prototype.bar = \\\"\\\";\\n\");\n  }\n",
        "begin_line": 732,
        "end_line": 750,
        "comment": "",
        "child_ranges": [
            "(line 733,col 5)-(line 749,col 43)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CodePrinterTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CodePrinterTest.java",
        "signature": "com.google.javascript.jscomp.CodePrinterTest.testTypeAnnotationsImplements()",
        "snippet": "  public void testTypeAnnotationsImplements() {\n    assertTypeAnnotations(\"var a = {};\"\n        + \"/** @constructor */ a.Foo = function(){};\\n\"\n        + \"/** @interface */ a.I = function(){};\\n\"\n        + \"/** @interface */ a.I2 = function(){};\\n\"\n        + \"/** @constructor \\n @extends {a.Foo}\\n\"\n        + \" * @implements {a.I} \\n @implements {a.I2}\\n\"\n        + \"*/ a.Bar = function(){}\",\n        \"var a = {};\\n\"\n        + \"/**\\n * @return {undefined}\\n * @constructor\\n */\\n\"\n        + \"a.Foo = function() {\\n};\\n\"\n        + \"/**\\n * @interface\\n */\\n\"\n        + \"a.I = function() {\\n};\\n\"\n        + \"/**\\n * @interface\\n */\\n\"\n        + \"a.I2 = function() {\\n};\\n\"\n        + \"/**\\n * @return {undefined}\\n * @extends {a.Foo}\\n\"\n        + \" * @implements {a.I}\\n\"\n        + \" * @implements {a.I2}\\n * @constructor\\n */\\n\"\n        + \"a.Bar = function() {\\n};\\n\");\n  }\n",
        "begin_line": 752,
        "end_line": 771,
        "comment": "",
        "child_ranges": [
            "(line 753,col 5)-(line 770,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CodePrinterTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CodePrinterTest.java",
        "signature": "com.google.javascript.jscomp.CodePrinterTest.testTypeAnnotationsDispatcher1()",
        "snippet": "  public void testTypeAnnotationsDispatcher1() {\n    assertTypeAnnotations(\n        \"var a = {};\\n\" +\n        \"/** \\n\" +\n        \" * @constructor \\n\" +\n        \" * @javadispatch \\n\" +\n        \" */\\n\" +\n        \"a.Foo = function(){}\",\n        \"var a = {};\\n\" +\n        \"/**\\n\" +\n        \" * @return {undefined}\\n\" +\n        \" * @constructor\\n\" +\n        \" * @javadispatch\\n\" +\n        \" */\\n\" +\n        \"a.Foo = function() {\\n\" +\n        \"};\\n\");\n  }\n",
        "begin_line": 773,
        "end_line": 789,
        "comment": "",
        "child_ranges": [
            "(line 774,col 5)-(line 788,col 16)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CodePrinterTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CodePrinterTest.java",
        "signature": "com.google.javascript.jscomp.CodePrinterTest.testTypeAnnotationsDispatcher2()",
        "snippet": "  public void testTypeAnnotationsDispatcher2() {\n    assertTypeAnnotations(\n        \"var a = {};\\n\" +\n        \"/** \\n\" +\n        \" * @constructor \\n\" +\n        \" */\\n\" +\n        \"a.Foo = function(){}\\n\" +\n        \"/**\\n\" +\n        \" * @javadispatch\\n\" +\n        \" */\\n\" +\n        \"a.Foo.prototype.foo = function() {};\",\n\n        \"var a = {};\\n\" +\n        \"/**\\n\" +\n        \" * @return {undefined}\\n\" +\n        \" * @constructor\\n\" +\n        \" */\\n\" +\n        \"a.Foo = function() {\\n\" +\n        \"};\\n\" +\n        \"/**\\n\" +\n        \" * @return {undefined}\\n\" +\n        \" * @javadispatch\\n\" +\n        \" */\\n\" +\n        \"a.Foo.prototype.foo = function() {\\n\" +\n        \"};\\n\");\n  }\n",
        "begin_line": 791,
        "end_line": 816,
        "comment": "",
        "child_ranges": [
            "(line 792,col 5)-(line 815,col 16)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CodePrinterTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CodePrinterTest.java",
        "signature": "com.google.javascript.jscomp.CodePrinterTest.testU2UFunctionTypeAnnotation()",
        "snippet": "  public void testU2UFunctionTypeAnnotation() {\n    assertTypeAnnotations(\n        \"/** @type {!Function} */ var x = function() {}\",\n        \"/**\\n * @constructor\\n */\\nvar x = function() {\\n};\\n\");\n  }\n",
        "begin_line": 818,
        "end_line": 822,
        "comment": "",
        "child_ranges": [
            "(line 819,col 5)-(line 821,col 65)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CodePrinterTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CodePrinterTest.java",
        "signature": "com.google.javascript.jscomp.CodePrinterTest.testEmitUnknownParamTypesAsAllType()",
        "snippet": "  public void testEmitUnknownParamTypesAsAllType() {\n    assertTypeAnnotations(\n        \"var a = function(x) {}\",\n        \"/**\\n\" +\n        \" * @param {*} x\\n\" +\n        \" * @return {undefined}\\n\" +\n        \" */\\n\" +\n        \"var a = function(x) {\\n};\\n\");\n  }\n",
        "begin_line": 824,
        "end_line": 832,
        "comment": "",
        "child_ranges": [
            "(line 825,col 5)-(line 831,col 39)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CodePrinterTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CodePrinterTest.java",
        "signature": "com.google.javascript.jscomp.CodePrinterTest.testOptionalTypesAnnotation()",
        "snippet": "  public void testOptionalTypesAnnotation() {\n    assertTypeAnnotations(\n        \"/**\\n\" +\n        \" * @param {string=} x \\n\" +\n        \" */\\n\" +\n        \"var a = function(x) {}\",\n        \"/**\\n\" +\n        \" * @param {string=} x\\n\" +\n        \" * @return {undefined}\\n\" +\n        \" */\\n\" +\n        \"var a = function(x) {\\n};\\n\");\n  }\n",
        "begin_line": 834,
        "end_line": 845,
        "comment": "",
        "child_ranges": [
            "(line 835,col 5)-(line 844,col 39)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CodePrinterTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CodePrinterTest.java",
        "signature": "com.google.javascript.jscomp.CodePrinterTest.testVariableArgumentsTypesAnnotation()",
        "snippet": "  public void testVariableArgumentsTypesAnnotation() {\n    assertTypeAnnotations(\n        \"/**\\n\" +\n        \" * @param {...string} x \\n\" +\n        \" */\\n\" +\n        \"var a = function(x) {}\",\n        \"/**\\n\" +\n        \" * @param {...string} x\\n\" +\n        \" * @return {undefined}\\n\" +\n        \" */\\n\" +\n        \"var a = function(x) {\\n};\\n\");\n  }\n",
        "begin_line": 847,
        "end_line": 858,
        "comment": "",
        "child_ranges": [
            "(line 848,col 5)-(line 857,col 39)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CodePrinterTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CodePrinterTest.java",
        "signature": "com.google.javascript.jscomp.CodePrinterTest.testTempConstructor()",
        "snippet": "  public void testTempConstructor() {\n    assertTypeAnnotations(\n        \"var x = function() {\\n/**\\n * @constructor\\n */\\nfunction t1() {}\\n\" +\n        \" /**\\n * @constructor\\n */\\nfunction t2() {}\\n\" +\n        \" t1.prototype = t2.prototype}\",\n        \"/**\\n * @return {undefined}\\n */\\nvar x = function() {\\n\" +\n        \"  /**\\n * @return {undefined}\\n * @constructor\\n */\\n\" +\n        \"function t1() {\\n  }\\n\" +\n        \"  /**\\n * @return {undefined}\\n * @constructor\\n */\\n\" +\n        \"function t2() {\\n  }\\n\" +\n        \"  t1.prototype = t2.prototype\\n};\\n\"\n    );\n  }\n",
        "begin_line": 860,
        "end_line": 872,
        "comment": "",
        "child_ranges": [
            "(line 861,col 5)-(line 871,col 6)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CodePrinterTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CodePrinterTest.java",
        "signature": "com.google.javascript.jscomp.CodePrinterTest.assertPrettyPrint(java.lang.String, java.lang.String)",
        "snippet": "  private void assertPrettyPrint(String js, String expected) {\n    assertEquals(expected,\n        parsePrint(js, true, false,\n            CodePrinter.DEFAULT_LINE_LENGTH_THRESHOLD));\n  }\n",
        "begin_line": 874,
        "end_line": 878,
        "comment": "",
        "child_ranges": [
            "(line 875,col 5)-(line 877,col 56)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CodePrinterTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CodePrinterTest.java",
        "signature": "com.google.javascript.jscomp.CodePrinterTest.assertTypeAnnotations(java.lang.String, java.lang.String)",
        "snippet": "  private void assertTypeAnnotations(String js, String expected) {\n    assertEquals(expected,\n        parsePrint(js, true, false,\n            CodePrinter.DEFAULT_LINE_LENGTH_THRESHOLD, true));\n  }\n",
        "begin_line": 880,
        "end_line": 884,
        "comment": "",
        "child_ranges": [
            "(line 881,col 5)-(line 883,col 62)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CodePrinterTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CodePrinterTest.java",
        "signature": "com.google.javascript.jscomp.CodePrinterTest.testSubtraction()",
        "snippet": "  public void testSubtraction() {\n    Compiler compiler = new Compiler();\n    Node n = compiler.parseTestCode(\"x - -4\");\n    assertEquals(0, compiler.getErrorCount());\n\n    assertEquals(\n        \"x- -4\",\n        new CodePrinter.Builder(n).setLineLengthThreshold(\n            CodePrinter.DEFAULT_LINE_LENGTH_THRESHOLD).build());\n  }\n",
        "begin_line": 886,
        "end_line": 895,
        "comment": "",
        "child_ranges": [
            "(line 887,col 5)-(line 887,col 39)",
            "(line 888,col 5)-(line 888,col 46)",
            "(line 889,col 5)-(line 889,col 46)",
            "(line 891,col 5)-(line 894,col 64)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CodePrinterTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CodePrinterTest.java",
        "signature": "com.google.javascript.jscomp.CodePrinterTest.testFunctionWithCall()",
        "snippet": "  public void testFunctionWithCall() {\n    assertPrint(\n        \"var user = new function() {\"\n        + \"alert(\\\"foo\\\")}\",\n        \"var user=new function(){\"\n        + \"alert(\\\"foo\\\")}\");\n    assertPrint(\n        \"var user = new function() {\"\n        + \"this.name = \\\"foo\\\";\"\n        + \"this.local = function(){alert(this.name)};}\",\n        \"var user=new function(){\"\n        + \"this.name=\\\"foo\\\";\"\n        + \"this.local=function(){alert(this.name)}}\");\n  }\n",
        "begin_line": 897,
        "end_line": 910,
        "comment": "",
        "child_ranges": [
            "(line 898,col 5)-(line 902,col 29)",
            "(line 903,col 5)-(line 909,col 54)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CodePrinterTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CodePrinterTest.java",
        "signature": "com.google.javascript.jscomp.CodePrinterTest.testLineLength()",
        "snippet": "  public void testLineLength() {\n    // list\n    assertLineLength(\"var aba,bcb,cdc\",\n        \"var aba,bcb,\" +\n        \"\\ncdc\");\n\n    // operators, and two breaks\n    assertLineLength(\n        \"\\\"foo\\\"+\\\"bar,baz,bomb\\\"+\\\"whee\\\"+\\\";long-string\\\"\\n+\\\"aaa\\\"\",\n        \"\\\"foo\\\"+\\\"bar,baz,bomb\\\"+\" +\n        \"\\n\\\"whee\\\"+\\\";long-string\\\"+\" +\n        \"\\n\\\"aaa\\\"\");\n\n    // assignment\n    assertLineLength(\"var abazaba=1234\",\n        \"var abazaba=\" +\n        \"\\n1234\");\n\n    // statements\n    assertLineLength(\"var abab=1;var bab=2\",\n        \"var abab=1;\" +\n        \"\\nvar bab=2\");\n\n    // don't break regexes\n    assertLineLength(\"var a=/some[reg](ex),with.*we?rd|chars/i;var b=a\",\n        \"var a=/some[reg](ex),with.*we?rd|chars/i;\" +\n        \"\\nvar b=a\");\n\n    // don't break strings\n    assertLineLength(\"var a=\\\"foo,{bar};baz\\\";var b=a\",\n        \"var a=\\\"foo,{bar};baz\\\";\" +\n        \"\\nvar b=a\");\n\n    // don't break before post inc/dec\n    assertLineLength(\"var a=\\\"a\\\";a++;var b=\\\"bbb\\\";\",\n        \"var a=\\\"a\\\";a++;\\n\" +\n        \"var b=\\\"bbb\\\"\");\n  }\n",
        "begin_line": 912,
        "end_line": 949,
        "comment": "",
        "child_ranges": [
            "(line 914,col 5)-(line 916,col 17)",
            "(line 919,col 5)-(line 923,col 21)",
            "(line 926,col 5)-(line 928,col 18)",
            "(line 931,col 5)-(line 933,col 23)",
            "(line 936,col 5)-(line 938,col 21)",
            "(line 941,col 5)-(line 943,col 21)",
            "(line 946,col 5)-(line 948,col 25)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CodePrinterTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CodePrinterTest.java",
        "signature": "com.google.javascript.jscomp.CodePrinterTest.assertLineLength(java.lang.String, java.lang.String)",
        "snippet": "  private void assertLineLength(String js, String expected) {\n    assertEquals(expected,\n        parsePrint(js, false, true, 10));\n  }\n",
        "begin_line": 951,
        "end_line": 954,
        "comment": "",
        "child_ranges": [
            "(line 952,col 5)-(line 953,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CodePrinterTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CodePrinterTest.java",
        "signature": "com.google.javascript.jscomp.CodePrinterTest.testParsePrintParse()",
        "snippet": "  public void testParsePrintParse() {\n    testReparse(\"3;\");\n    testReparse(\"var a = b;\");\n    testReparse(\"var x, y, z;\");\n    testReparse(\"try { foo() } catch(e) { bar() }\");\n    testReparse(\"try { foo() } catch(e) { bar() } finally { stuff() }\");\n    testReparse(\"try { foo() } finally { stuff() }\");\n    testReparse(\"throw 'me'\");\n    testReparse(\"function foo(a) { return a + 4; }\");\n    testReparse(\"function foo() { return; }\");\n    testReparse(\"var a = function(a, b) { foo(); return a + b; }\");\n    testReparse(\"b = [3, 4, 'paul', \\\"Buchhe it\\\",,5];\");\n    testReparse(\"v = (5, 6, 7, 8)\");\n    testReparse(\"d = 34.0; x = 0; y = .3; z = -22\");\n    testReparse(\"d = -x; t = !x + ~y;\");\n    testReparse(\"'hi'; /* just a test */ stuff(a,b) \\n\" +\n            \" foo(); // and another \\n\" +\n            \" bar();\");\n    testReparse(\"a = b++ + ++c; a = b++-++c; a = - --b; a = - ++b;\");\n    testReparse(\"a++; b= a++; b = ++a; b = a--; b = --a; a+=2; b-=5\");\n    testReparse(\"a = (2 + 3) * 4;\");\n    testReparse(\"a = 1 + (2 + 3) + 4;\");\n    testReparse(\"x = a ? b : c; x = a ? (b,3,5) : (foo(),bar());\");\n    testReparse(\"a = b | c || d ^ e \" +\n            \"&& f & !g != h << i <= j < k >>> l > m * n % !o\");\n    testReparse(\"a == b; a != b; a === b; a == b == a;\" +\n            \" (a == b) == a; a == (b == a);\");\n    testReparse(\"if (a > b) a = b; if (b < 3) a = 3; else c = 4;\");\n    testReparse(\"if (a == b) { a++; } if (a == 0) { a++; } else { a --; }\");\n    testReparse(\"for (var i in a) b += i;\");\n    testReparse(\"for (var i = 0; i < 10; i++){ b /= 2;\" +\n            \" if (b == 2)break;else continue;}\");\n    testReparse(\"for (x = 0; x < 10; x++) a /= 2;\");\n    testReparse(\"for (;;) a++;\");\n    testReparse(\"while(true) { blah(); }while(true) blah();\");\n    testReparse(\"do stuff(); while(a>b);\");\n    testReparse(\"[0, null, , true, false, this];\");\n    testReparse(\"s.replace(/absc/, 'X').replace(/ab/gi, 'Y');\");\n    testReparse(\"new Foo; new Bar(a, b,c);\");\n    testReparse(\"with(foo()) { x = z; y = t; } with(bar()) a = z;\");\n    testReparse(\"delete foo['bar']; delete foo;\");\n    testReparse(\"var x = { 'a':'paul', 1:'3', 2:(3,4) };\");\n    testReparse(\"switch(a) { case 2: case 3: stuff(); break;\" +\n        \"case 4: morestuff(); break; default: done();}\");\n    testReparse(\"x = foo['bar'] + foo['my stuff'] + foo[bar] + f.stuff;\");\n    testReparse(\"a.v = b.v; x['foo'] = y['zoo'];\");\n    testReparse(\"'test' in x; 3 in x; a in x;\");\n    testReparse(\"'foo\\\"bar' + \\\"foo'c\\\" + 'stuff\\\\n and \\\\\\\\more'\");\n    testReparse(\"x.__proto__;\");\n  }\n",
        "begin_line": 956,
        "end_line": 1005,
        "comment": "",
        "child_ranges": [
            "(line 957,col 5)-(line 957,col 22)",
            "(line 958,col 5)-(line 958,col 30)",
            "(line 959,col 5)-(line 959,col 32)",
            "(line 960,col 5)-(line 960,col 52)",
            "(line 961,col 5)-(line 961,col 72)",
            "(line 962,col 5)-(line 962,col 53)",
            "(line 963,col 5)-(line 963,col 30)",
            "(line 964,col 5)-(line 964,col 53)",
            "(line 965,col 5)-(line 965,col 46)",
            "(line 966,col 5)-(line 966,col 67)",
            "(line 967,col 5)-(line 967,col 57)",
            "(line 968,col 5)-(line 968,col 36)",
            "(line 969,col 5)-(line 969,col 52)",
            "(line 970,col 5)-(line 970,col 40)",
            "(line 971,col 5)-(line 973,col 23)",
            "(line 974,col 5)-(line 974,col 69)",
            "(line 975,col 5)-(line 975,col 70)",
            "(line 976,col 5)-(line 976,col 36)",
            "(line 977,col 5)-(line 977,col 40)",
            "(line 978,col 5)-(line 978,col 67)",
            "(line 979,col 5)-(line 980,col 63)",
            "(line 981,col 5)-(line 982,col 46)",
            "(line 983,col 5)-(line 983,col 67)",
            "(line 984,col 5)-(line 984,col 76)",
            "(line 985,col 5)-(line 985,col 44)",
            "(line 986,col 5)-(line 987,col 49)",
            "(line 988,col 5)-(line 988,col 52)",
            "(line 989,col 5)-(line 989,col 33)",
            "(line 990,col 5)-(line 990,col 62)",
            "(line 991,col 5)-(line 991,col 43)",
            "(line 992,col 5)-(line 992,col 51)",
            "(line 993,col 5)-(line 993,col 64)",
            "(line 994,col 5)-(line 994,col 45)",
            "(line 995,col 5)-(line 995,col 68)",
            "(line 996,col 5)-(line 996,col 50)",
            "(line 997,col 5)-(line 997,col 59)",
            "(line 998,col 5)-(line 999,col 57)",
            "(line 1000,col 5)-(line 1000,col 74)",
            "(line 1001,col 5)-(line 1001,col 51)",
            "(line 1002,col 5)-(line 1002,col 48)",
            "(line 1003,col 5)-(line 1003,col 68)",
            "(line 1004,col 5)-(line 1004,col 32)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CodePrinterTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CodePrinterTest.java",
        "signature": "com.google.javascript.jscomp.CodePrinterTest.testReparse(java.lang.String)",
        "snippet": "  private void testReparse(String code) {\n    Compiler compiler = new Compiler();\n    Node parse1 = parse(code);\n    Node parse2 = parse(new CodePrinter.Builder(parse1).build());\n    String explanation = parse1.checkTreeEquals(parse2);\n    assertNull(\"\\nExpected: \" + compiler.toSource(parse1) +\n        \"\\nResult: \" + compiler.toSource(parse2) +\n        \"\\n\" + explanation, explanation);\n  }\n",
        "begin_line": 1007,
        "end_line": 1015,
        "comment": "",
        "child_ranges": [
            "(line 1008,col 5)-(line 1008,col 39)",
            "(line 1009,col 5)-(line 1009,col 30)",
            "(line 1010,col 5)-(line 1010,col 65)",
            "(line 1011,col 5)-(line 1011,col 56)",
            "(line 1012,col 5)-(line 1014,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CodePrinterTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CodePrinterTest.java",
        "signature": "com.google.javascript.jscomp.CodePrinterTest.testDoLoopIECompatiblity()",
        "snippet": "  public void testDoLoopIECompatiblity() {\n    // Do loops within IFs cause syntax errors in IE6 and IE7.\n    assertPrint(\"function f(){if(e1){do foo();while(e2)}else foo()}\",\n        \"function f(){if(e1){do foo();while(e2)}else foo()}\");\n\n    assertPrint(\"function f(){if(e1)do foo();while(e2)else foo()}\",\n        \"function f(){if(e1){do foo();while(e2)}else foo()}\");\n\n    assertPrint(\"if(x){do{foo()}while(y)}else bar()\",\n        \"if(x){do foo();while(y)}else bar()\");\n\n    assertPrint(\"if(x)do{foo()}while(y);else bar()\",\n        \"if(x){do foo();while(y)}else bar()\");\n\n    assertPrint(\"if(x){do{foo()}while(y)}\",\n        \"if(x){do foo();while(y)}\");\n\n    assertPrint(\"if(x)do{foo()}while(y);\",\n        \"if(x){do foo();while(y)}\");\n\n    assertPrint(\"if(x)A:do{foo()}while(y);\",\n        \"if(x){A:do foo();while(y)}\");\n\n    assertPrint(\"var i = 0;a: do{b: do{i++;break b;} while(0);} while(0);\",\n        \"var i=0;a:do{b:do{i++;break b}while(0)}while(0)\");\n  }\n",
        "begin_line": 1017,
        "end_line": 1042,
        "comment": "",
        "child_ranges": [
            "(line 1019,col 5)-(line 1020,col 62)",
            "(line 1022,col 5)-(line 1023,col 62)",
            "(line 1025,col 5)-(line 1026,col 46)",
            "(line 1028,col 5)-(line 1029,col 46)",
            "(line 1031,col 5)-(line 1032,col 36)",
            "(line 1034,col 5)-(line 1035,col 36)",
            "(line 1037,col 5)-(line 1038,col 38)",
            "(line 1040,col 5)-(line 1041,col 59)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CodePrinterTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CodePrinterTest.java",
        "signature": "com.google.javascript.jscomp.CodePrinterTest.testFunctionSafariCompatiblity()",
        "snippet": "  public void testFunctionSafariCompatiblity() {\n    // Functions within IFs cause syntax errors on Safari.\n    assertPrint(\"function f(){if(e1){function goo(){return true}}else foo()}\",\n        \"function f(){if(e1){function goo(){return true}}else foo()}\");\n\n    assertPrint(\"function f(){if(e1)function goo(){return true}else foo()}\",\n        \"function f(){if(e1){function goo(){return true}}else foo()}\");\n\n    assertPrint(\"if(e1){function goo(){return true}}\",\n        \"if(e1){function goo(){return true}}\");\n\n    assertPrint(\"if(e1)function goo(){return true}\",\n        \"if(e1){function goo(){return true}}\");\n\n    assertPrint(\"if(e1)A:function goo(){return true}\",\n        \"if(e1){A:function goo(){return true}}\");\n  }\n",
        "begin_line": 1044,
        "end_line": 1060,
        "comment": "",
        "child_ranges": [
            "(line 1046,col 5)-(line 1047,col 71)",
            "(line 1049,col 5)-(line 1050,col 71)",
            "(line 1052,col 5)-(line 1053,col 47)",
            "(line 1055,col 5)-(line 1056,col 47)",
            "(line 1058,col 5)-(line 1059,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CodePrinterTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CodePrinterTest.java",
        "signature": "com.google.javascript.jscomp.CodePrinterTest.testExponents()",
        "snippet": "  public void testExponents() {\n    assertPrintNumber(\"1\", 1);\n    assertPrintNumber(\"10\", 10);\n    assertPrintNumber(\"100\", 100);\n    assertPrintNumber(\"1E3\", 1000);\n    assertPrintNumber(\"1E4\", 10000);\n    assertPrintNumber(\"1E5\", 100000);\n    assertPrintNumber(\"-1\", -1);\n    assertPrintNumber(\"-10\", -10);\n    assertPrintNumber(\"-100\", -100);\n    assertPrintNumber(\"-1E3\", -1000);\n    assertPrintNumber(\"-12341234E4\", -123412340000L);\n    assertPrintNumber(\"1E18\", 1000000000000000000L);\n    assertPrintNumber(\"1E5\", 100000.0);\n    assertPrintNumber(\"100000.1\", 100000.1);\n\n    assertPrintNumber(\"1.0E-6\", 0.000001);\n  }\n",
        "begin_line": 1062,
        "end_line": 1079,
        "comment": "",
        "child_ranges": [
            "(line 1063,col 5)-(line 1063,col 30)",
            "(line 1064,col 5)-(line 1064,col 32)",
            "(line 1065,col 5)-(line 1065,col 34)",
            "(line 1066,col 5)-(line 1066,col 35)",
            "(line 1067,col 5)-(line 1067,col 36)",
            "(line 1068,col 5)-(line 1068,col 37)",
            "(line 1069,col 5)-(line 1069,col 32)",
            "(line 1070,col 5)-(line 1070,col 34)",
            "(line 1071,col 5)-(line 1071,col 36)",
            "(line 1072,col 5)-(line 1072,col 37)",
            "(line 1073,col 5)-(line 1073,col 53)",
            "(line 1074,col 5)-(line 1074,col 52)",
            "(line 1075,col 5)-(line 1075,col 39)",
            "(line 1076,col 5)-(line 1076,col 44)",
            "(line 1078,col 5)-(line 1078,col 42)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CodePrinterTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CodePrinterTest.java",
        "signature": "com.google.javascript.jscomp.CodePrinterTest.assertPrintNumber(java.lang.String, double)",
        "snippet": "  private void assertPrintNumber(String expected, double number) {\n    assertPrint(String.valueOf(number), expected);\n    assertPrintNode(expected, Node.newNumber(number));\n  }\n",
        "begin_line": 1083,
        "end_line": 1086,
        "comment": " negative numbers do not parse consistently from strings.",
        "child_ranges": [
            "(line 1084,col 5)-(line 1084,col 50)",
            "(line 1085,col 5)-(line 1085,col 54)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CodePrinterTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CodePrinterTest.java",
        "signature": "com.google.javascript.jscomp.CodePrinterTest.assertPrintNumber(java.lang.String, int)",
        "snippet": "  private void assertPrintNumber(String expected, int number) {\n    assertPrint(String.valueOf(number), expected);\n    assertPrintNode(expected, Node.newNumber(number));\n  }\n",
        "begin_line": 1088,
        "end_line": 1091,
        "comment": "",
        "child_ranges": [
            "(line 1089,col 5)-(line 1089,col 50)",
            "(line 1090,col 5)-(line 1090,col 54)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CodePrinterTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CodePrinterTest.java",
        "signature": "com.google.javascript.jscomp.CodePrinterTest.testDirectEval()",
        "snippet": "  public void testDirectEval() {\n    assertPrint(\"eval('1');\", \"eval(\\\"1\\\")\");\n  }\n",
        "begin_line": 1093,
        "end_line": 1095,
        "comment": "",
        "child_ranges": [
            "(line 1094,col 5)-(line 1094,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CodePrinterTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CodePrinterTest.java",
        "signature": "com.google.javascript.jscomp.CodePrinterTest.testIndirectEval()",
        "snippet": "  public void testIndirectEval() {\n    Node n = parse(\"eval('1');\");\n    assertPrintNode(\"eval(\\\"1\\\")\", n);\n    n.getFirstChild().getFirstChild().getFirstChild().putBooleanProp(\n        Node.DIRECT_EVAL, false);\n    assertPrintNode(\"(0,eval)(\\\"1\\\")\", n);\n  }\n",
        "begin_line": 1097,
        "end_line": 1103,
        "comment": "",
        "child_ranges": [
            "(line 1098,col 5)-(line 1098,col 33)",
            "(line 1099,col 5)-(line 1099,col 38)",
            "(line 1100,col 5)-(line 1101,col 33)",
            "(line 1102,col 5)-(line 1102,col 42)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CodePrinterTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CodePrinterTest.java",
        "signature": "com.google.javascript.jscomp.CodePrinterTest.testFreeCall1()",
        "snippet": "  public void testFreeCall1() {\n    assertPrint(\"foo(a);\", \"foo(a)\");\n    assertPrint(\"x.foo(a);\", \"x.foo(a)\");\n  }\n",
        "begin_line": 1105,
        "end_line": 1108,
        "comment": "",
        "child_ranges": [
            "(line 1106,col 5)-(line 1106,col 37)",
            "(line 1107,col 5)-(line 1107,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CodePrinterTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CodePrinterTest.java",
        "signature": "com.google.javascript.jscomp.CodePrinterTest.testFreeCall2()",
        "snippet": "  public void testFreeCall2() {\n    Node n = parse(\"foo(a);\");\n    assertPrintNode(\"foo(a)\", n);\n    Node call =  n.getFirstChild().getFirstChild();\n    assertTrue(call.isCall());\n    call.putBooleanProp(Node.FREE_CALL, true);\n    assertPrintNode(\"foo(a)\", n);\n  }\n",
        "begin_line": 1110,
        "end_line": 1117,
        "comment": "",
        "child_ranges": [
            "(line 1111,col 5)-(line 1111,col 30)",
            "(line 1112,col 5)-(line 1112,col 33)",
            "(line 1113,col 5)-(line 1113,col 51)",
            "(line 1114,col 5)-(line 1114,col 30)",
            "(line 1115,col 5)-(line 1115,col 46)",
            "(line 1116,col 5)-(line 1116,col 33)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CodePrinterTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CodePrinterTest.java",
        "signature": "com.google.javascript.jscomp.CodePrinterTest.testFreeCall3()",
        "snippet": "  public void testFreeCall3() {\n    Node n = parse(\"x.foo(a);\");\n    assertPrintNode(\"x.foo(a)\", n);\n    Node call =  n.getFirstChild().getFirstChild();\n    assertTrue(call.isCall());\n    call.putBooleanProp(Node.FREE_CALL, true);\n    assertPrintNode(\"(0,x.foo)(a)\", n);\n  }\n",
        "begin_line": 1119,
        "end_line": 1126,
        "comment": "",
        "child_ranges": [
            "(line 1120,col 5)-(line 1120,col 32)",
            "(line 1121,col 5)-(line 1121,col 35)",
            "(line 1122,col 5)-(line 1122,col 51)",
            "(line 1123,col 5)-(line 1123,col 30)",
            "(line 1124,col 5)-(line 1124,col 46)",
            "(line 1125,col 5)-(line 1125,col 39)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CodePrinterTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CodePrinterTest.java",
        "signature": "com.google.javascript.jscomp.CodePrinterTest.testPrintScript()",
        "snippet": "  public void testPrintScript() {\n    // Verify that SCRIPT nodes not marked as synthetic are printed as\n    // blocks.\n    Node ast = new Node(Token.SCRIPT,\n        new Node(Token.EXPR_RESULT, Node.newString(\"f\")),\n        new Node(Token.EXPR_RESULT, Node.newString(\"g\")));\n    String result = new CodePrinter.Builder(ast).setPrettyPrint(true).build();\n    assertEquals(\"\\\"f\\\";\\n\\\"g\\\";\\n\", result);\n  }\n",
        "begin_line": 1128,
        "end_line": 1136,
        "comment": "",
        "child_ranges": [
            "(line 1131,col 5)-(line 1133,col 58)",
            "(line 1134,col 5)-(line 1134,col 78)",
            "(line 1135,col 5)-(line 1135,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CodePrinterTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CodePrinterTest.java",
        "signature": "com.google.javascript.jscomp.CodePrinterTest.testObjectLit()",
        "snippet": "  public void testObjectLit() {\n    assertPrint(\"({x:1})\", \"({x:1})\");\n    assertPrint(\"var x=({x:1})\", \"var x={x:1}\");\n    assertPrint(\"var x={'x':1}\", \"var x={\\\"x\\\":1}\");\n    assertPrint(\"var x={1:1}\", \"var x={1:1}\");\n  }\n",
        "begin_line": 1138,
        "end_line": 1143,
        "comment": "",
        "child_ranges": [
            "(line 1139,col 5)-(line 1139,col 38)",
            "(line 1140,col 5)-(line 1140,col 48)",
            "(line 1141,col 5)-(line 1141,col 52)",
            "(line 1142,col 5)-(line 1142,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CodePrinterTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CodePrinterTest.java",
        "signature": "com.google.javascript.jscomp.CodePrinterTest.testObjectLit2()",
        "snippet": "  public void testObjectLit2() {\n    assertPrint(\"var x={1:1}\", \"var x={1:1}\");\n    assertPrint(\"var x={'1':1}\", \"var x={1:1}\");\n    assertPrint(\"var x={'1.0':1}\", \"var x={\\\"1.0\\\":1}\");\n    assertPrint(\"var x={1.5:1}\", \"var x={\\\"1.5\\\":1}\");\n\n  }\n",
        "begin_line": 1145,
        "end_line": 1151,
        "comment": "",
        "child_ranges": [
            "(line 1146,col 5)-(line 1146,col 46)",
            "(line 1147,col 5)-(line 1147,col 48)",
            "(line 1148,col 5)-(line 1148,col 56)",
            "(line 1149,col 5)-(line 1149,col 54)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CodePrinterTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CodePrinterTest.java",
        "signature": "com.google.javascript.jscomp.CodePrinterTest.testObjectLit3()",
        "snippet": "  public void testObjectLit3() {\n    assertPrint(\"var x={3E9:1}\",\n                \"var x={3E9:1}\");\n    assertPrint(\"var x={'3000000000':1}\", // More than 31 bits\n                \"var x={3E9:1}\");\n    assertPrint(\"var x={'3000000001':1}\",\n                \"var x={3000000001:1}\");\n    assertPrint(\"var x={'6000000001':1}\",  // More than 32 bits\n                \"var x={6000000001:1}\");\n    assertPrint(\"var x={\\\"12345678901234567\\\":1}\",  // More than 53 bits\n                \"var x={\\\"12345678901234567\\\":1}\");\n  }\n",
        "begin_line": 1153,
        "end_line": 1164,
        "comment": "",
        "child_ranges": [
            "(line 1154,col 5)-(line 1155,col 33)",
            "(line 1156,col 5)-(line 1157,col 33)",
            "(line 1158,col 5)-(line 1159,col 40)",
            "(line 1160,col 5)-(line 1161,col 40)",
            "(line 1162,col 5)-(line 1163,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CodePrinterTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CodePrinterTest.java",
        "signature": "com.google.javascript.jscomp.CodePrinterTest.testObjectLit4()",
        "snippet": "  public void testObjectLit4() {\n    // More than 128 bits.\n    assertPrint(\n        \"var x={\\\"123456789012345671234567890123456712345678901234567\\\":1}\",\n        \"var x={\\\"123456789012345671234567890123456712345678901234567\\\":1}\");\n  }\n",
        "begin_line": 1166,
        "end_line": 1171,
        "comment": "",
        "child_ranges": [
            "(line 1168,col 5)-(line 1170,col 77)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CodePrinterTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CodePrinterTest.java",
        "signature": "com.google.javascript.jscomp.CodePrinterTest.testGetter()",
        "snippet": "  public void testGetter() {\n    assertPrint(\"var x = {}\", \"var x={}\");\n    assertPrint(\"var x = {get a() {return 1}}\", \"var x={get a(){return 1}}\");\n    assertPrint(\n      \"var x = {get a() {}, get b(){}}\",\n      \"var x={get a(){},get b(){}}\");\n\n    assertPrint(\n      \"var x = {get 'a'() {return 1}}\",\n      \"var x={get \\\"a\\\"(){return 1}}\");\n\n    assertPrint(\n      \"var x = {get 1() {return 1}}\",\n      \"var x={get 1(){return 1}}\");\n\n    assertPrint(\n      \"var x = {get \\\"()\\\"() {return 1}}\",\n      \"var x={get \\\"()\\\"(){return 1}}\");\n  }\n",
        "begin_line": 1173,
        "end_line": 1191,
        "comment": "",
        "child_ranges": [
            "(line 1174,col 5)-(line 1174,col 42)",
            "(line 1175,col 5)-(line 1175,col 77)",
            "(line 1176,col 5)-(line 1178,col 37)",
            "(line 1180,col 5)-(line 1182,col 39)",
            "(line 1184,col 5)-(line 1186,col 35)",
            "(line 1188,col 5)-(line 1190,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CodePrinterTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CodePrinterTest.java",
        "signature": "com.google.javascript.jscomp.CodePrinterTest.testSetter()",
        "snippet": "  public void testSetter() {\n    assertPrint(\"var x = {}\", \"var x={}\");\n    assertPrint(\n       \"var x = {set a(y) {return 1}}\",\n       \"var x={set a(y){return 1}}\");\n\n    assertPrint(\n      \"var x = {get 'a'() {return 1}}\",\n      \"var x={get \\\"a\\\"(){return 1}}\");\n\n    assertPrint(\n      \"var x = {set 1(y) {return 1}}\",\n      \"var x={set 1(y){return 1}}\");\n\n    assertPrint(\n      \"var x = {set \\\"(x)\\\"(y) {return 1}}\",\n      \"var x={set \\\"(x)\\\"(y){return 1}}\");\n  }\n",
        "begin_line": 1193,
        "end_line": 1210,
        "comment": "",
        "child_ranges": [
            "(line 1194,col 5)-(line 1194,col 42)",
            "(line 1195,col 5)-(line 1197,col 37)",
            "(line 1199,col 5)-(line 1201,col 39)",
            "(line 1203,col 5)-(line 1205,col 36)",
            "(line 1207,col 5)-(line 1209,col 42)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CodePrinterTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CodePrinterTest.java",
        "signature": "com.google.javascript.jscomp.CodePrinterTest.testNegCollapse()",
        "snippet": "  public void testNegCollapse() {\n    // Collapse the negative symbol on numbers at generation time,\n    // to match the Rhino behavior.\n    assertPrint(\"var x = - - 2;\", \"var x=2\");\n    assertPrint(\"var x = - (2);\", \"var x=-2\");\n  }\n",
        "begin_line": 1212,
        "end_line": 1217,
        "comment": "",
        "child_ranges": [
            "(line 1215,col 5)-(line 1215,col 45)",
            "(line 1216,col 5)-(line 1216,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CodePrinterTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CodePrinterTest.java",
        "signature": "com.google.javascript.jscomp.CodePrinterTest.testStrict()",
        "snippet": "  public void testStrict() {\n    String result = parsePrint(\"var x\", false, false, 0, false, true);\n    assertEquals(\"'use strict';var x\", result);\n  }\n",
        "begin_line": 1219,
        "end_line": 1222,
        "comment": "",
        "child_ranges": [
            "(line 1220,col 5)-(line 1220,col 70)",
            "(line 1221,col 5)-(line 1221,col 47)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CodePrinterTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CodePrinterTest.java",
        "signature": "com.google.javascript.jscomp.CodePrinterTest.testArrayLiteral()",
        "snippet": "  public void testArrayLiteral() {\n    assertPrint(\"var x = [,];\",\"var x=[,]\");\n    assertPrint(\"var x = [,,];\",\"var x=[,,]\");\n    assertPrint(\"var x = [,s,,];\",\"var x=[,s,,]\");\n    assertPrint(\"var x = [,s];\",\"var x=[,s]\");\n    assertPrint(\"var x = [s,];\",\"var x=[s]\");\n  }\n",
        "begin_line": 1224,
        "end_line": 1230,
        "comment": "",
        "child_ranges": [
            "(line 1225,col 5)-(line 1225,col 44)",
            "(line 1226,col 5)-(line 1226,col 46)",
            "(line 1227,col 5)-(line 1227,col 50)",
            "(line 1228,col 5)-(line 1228,col 46)",
            "(line 1229,col 5)-(line 1229,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CodePrinterTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CodePrinterTest.java",
        "signature": "com.google.javascript.jscomp.CodePrinterTest.testZero()",
        "snippet": "  public void testZero() {\n    assertPrint(\"var x ='\\\\0';\", \"var x=\\\"\\\\x00\\\"\");\n    assertPrint(\"var x ='\\\\x00';\", \"var x=\\\"\\\\x00\\\"\");\n    assertPrint(\"var x ='\\\\u0000';\", \"var x=\\\"\\\\x00\\\"\");\n    assertPrint(\"var x ='\\\\u00003';\", \"var x=\\\"\\\\x003\\\"\");\n  }\n",
        "begin_line": 1232,
        "end_line": 1237,
        "comment": "",
        "child_ranges": [
            "(line 1233,col 5)-(line 1233,col 52)",
            "(line 1234,col 5)-(line 1234,col 54)",
            "(line 1235,col 5)-(line 1235,col 56)",
            "(line 1236,col 5)-(line 1236,col 58)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CodePrinterTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CodePrinterTest.java",
        "signature": "com.google.javascript.jscomp.CodePrinterTest.testUnicode()",
        "snippet": "  public void testUnicode() {\n    assertPrint(\"var x ='\\\\x0f';\", \"var x=\\\"\\\\u000f\\\"\");\n    assertPrint(\"var x ='\\\\x68';\", \"var x=\\\"h\\\"\");\n    assertPrint(\"var x ='\\\\x7f';\", \"var x=\\\"\\\\u007f\\\"\");\n  }\n",
        "begin_line": 1239,
        "end_line": 1243,
        "comment": "",
        "child_ranges": [
            "(line 1240,col 5)-(line 1240,col 56)",
            "(line 1241,col 5)-(line 1241,col 50)",
            "(line 1242,col 5)-(line 1242,col 56)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CodePrinterTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CodePrinterTest.java",
        "signature": "com.google.javascript.jscomp.CodePrinterTest.testUnicodeKeyword()",
        "snippet": "  public void testUnicodeKeyword() {\n    // keyword \"if\"\n    assertPrint(\"var \\\\u0069\\\\u0066 = 1;\", \"var i\\\\u0066=1\");\n    // keyword \"var\"\n    assertPrint(\"var v\\\\u0061\\\\u0072 = 1;\", \"var va\\\\u0072=1\");\n    // all are keyword \"while\"\n    assertPrint(\"var w\\\\u0068\\\\u0069\\\\u006C\\\\u0065 = 1;\"\n        + \"\\\\u0077\\\\u0068il\\\\u0065 = 2;\"\n        + \"\\\\u0077h\\\\u0069le = 3;\",\n        \"var whil\\\\u0065=1;whil\\\\u0065=2;whil\\\\u0065=3\");\n  }\n",
        "begin_line": 1245,
        "end_line": 1255,
        "comment": "",
        "child_ranges": [
            "(line 1247,col 5)-(line 1247,col 61)",
            "(line 1249,col 5)-(line 1249,col 63)",
            "(line 1251,col 5)-(line 1254,col 57)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CodePrinterTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CodePrinterTest.java",
        "signature": "com.google.javascript.jscomp.CodePrinterTest.testNumericKeys()",
        "snippet": "  public void testNumericKeys() {\n    assertPrint(\"var x = {010: 1};\", \"var x={8:1}\");\n    assertPrint(\"var x = {'010': 1};\", \"var x={\\\"010\\\":1}\");\n\n    assertPrint(\"var x = {0x10: 1};\", \"var x={16:1}\");\n    assertPrint(\"var x = {'0x10': 1};\", \"var x={\\\"0x10\\\":1}\");\n\n    // I was surprised at this result too.\n    assertPrint(\"var x = {.2: 1};\", \"var x={\\\"0.2\\\":1}\");\n    assertPrint(\"var x = {'.2': 1};\", \"var x={\\\".2\\\":1}\");\n\n    assertPrint(\"var x = {0.2: 1};\", \"var x={\\\"0.2\\\":1}\");\n    assertPrint(\"var x = {'0.2': 1};\", \"var x={\\\"0.2\\\":1}\");\n  }\n",
        "begin_line": 1257,
        "end_line": 1270,
        "comment": "",
        "child_ranges": [
            "(line 1258,col 5)-(line 1258,col 52)",
            "(line 1259,col 5)-(line 1259,col 60)",
            "(line 1261,col 5)-(line 1261,col 54)",
            "(line 1262,col 5)-(line 1262,col 62)",
            "(line 1265,col 5)-(line 1265,col 57)",
            "(line 1266,col 5)-(line 1266,col 58)",
            "(line 1268,col 5)-(line 1268,col 58)",
            "(line 1269,col 5)-(line 1269,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CodePrinterTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CodePrinterTest.java",
        "signature": "com.google.javascript.jscomp.CodePrinterTest.testIssue582()",
        "snippet": "  public void testIssue582() {\n    assertPrint(\"var x = -0.0;\", \"var x=-0.0\");\n  }\n",
        "begin_line": 1272,
        "end_line": 1274,
        "comment": "",
        "child_ranges": [
            "(line 1273,col 5)-(line 1273,col 47)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CodePrinterTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CodePrinterTest.java",
        "signature": "com.google.javascript.jscomp.CodePrinterTest.testIssue601()",
        "snippet": "  public void testIssue601() {\n    assertPrint(\"'\\\\v' == 'v'\", \"\\\"\\\\v\\\"==\\\"v\\\"\");\n    assertPrint(\"'\\\\u000B' == '\\\\v'\", \"\\\"\\\\x0B\\\"==\\\"\\\\v\\\"\");\n    assertPrint(\"'\\\\x0B' == '\\\\v'\", \"\\\"\\\\x0B\\\"==\\\"\\\\v\\\"\");\n  }\n",
        "begin_line": 1276,
        "end_line": 1280,
        "comment": "",
        "child_ranges": [
            "(line 1277,col 5)-(line 1277,col 50)",
            "(line 1278,col 5)-(line 1278,col 60)",
            "(line 1279,col 5)-(line 1279,col 58)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CodePrinterTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CodePrinterTest.java",
        "signature": "com.google.javascript.jscomp.CodePrinterTest.testIssue620()",
        "snippet": "  public void testIssue620() {\n    assertPrint(\"alert(/ / / / /);\", \"alert(/ // / /)\");\n    assertPrint(\"alert(/ // / /);\", \"alert(/ // / /)\");\n  }\n",
        "begin_line": 1282,
        "end_line": 1285,
        "comment": "",
        "child_ranges": [
            "(line 1283,col 5)-(line 1283,col 56)",
            "(line 1284,col 5)-(line 1284,col 55)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CodePrinterTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CodePrinterTest.java",
        "signature": "com.google.javascript.jscomp.CodePrinterTest.testIssue5746867()",
        "snippet": "  public void testIssue5746867() {\n    assertPrint(\"var a = { '$\\\\\\\\' : 5 };\", \"var a={\\\"$\\\\\\\\\\\":5}\");\n  }\n",
        "begin_line": 1287,
        "end_line": 1289,
        "comment": "",
        "child_ranges": [
            "(line 1288,col 5)-(line 1288,col 67)"
        ]
    }
]