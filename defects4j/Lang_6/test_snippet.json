[
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.Anonymous-2578c890-0fe5-4e5b-a464-06a76c159406.toString()",
        "snippet": "            @Override\n            public String toString() {\n                return null;\n            }\n",
        "begin_line": 81,
        "end_line": 84,
        "comment": "",
        "child_ranges": [
            "(line 83,col 17)-(line 83,col 28)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.testConstructor()",
        "snippet": "    @Test\n    public void testConstructor() {\n        assertNotNull(new StringUtils());\n        Constructor<?>[] cons = StringUtils.class.getDeclaredConstructors();\n        assertEquals(1, cons.length);\n        assertTrue(Modifier.isPublic(cons[0].getModifiers()));\n        assertTrue(Modifier.isPublic(StringUtils.class.getModifiers()));\n        assertFalse(Modifier.isFinal(StringUtils.class.getModifiers()));\n    }\n",
        "begin_line": 111,
        "end_line": 119,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 113,col 9)-(line 113,col 41)",
            "(line 114,col 9)-(line 114,col 76)",
            "(line 115,col 9)-(line 115,col 37)",
            "(line 116,col 9)-(line 116,col 62)",
            "(line 117,col 9)-(line 117,col 72)",
            "(line 118,col 9)-(line 118,col 72)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.testCaseFunctions()",
        "snippet": "    @Test\n    public void testCaseFunctions() {\n        assertEquals(null, StringUtils.upperCase(null));\n        assertEquals(null, StringUtils.upperCase(null, Locale.ENGLISH));\n        assertEquals(null, StringUtils.lowerCase(null));\n        assertEquals(null, StringUtils.lowerCase(null, Locale.ENGLISH));\n        assertEquals(null, StringUtils.capitalize(null));\n        assertEquals(null, StringUtils.uncapitalize(null));\n\n        assertEquals(\"capitalize(empty-string) failed\",\n                     \"\", StringUtils.capitalize(\"\") );\n        assertEquals(\"capitalize(single-char-string) failed\",\n                \"X\", StringUtils.capitalize(\"x\") );\n        \n        assertEquals(\"uncapitalize(String) failed\",\n                     FOO_UNCAP, StringUtils.uncapitalize(FOO_CAP) );\n        assertEquals(\"uncapitalize(empty-string) failed\",\n                     \"\", StringUtils.uncapitalize(\"\") );\n        assertEquals(\"uncapitalize(single-char-string) failed\",\n                \"x\", StringUtils.uncapitalize(\"X\") );\n                     \n        // reflection type of tests: Sentences.\n        assertEquals(\"uncapitalize(capitalize(String)) failed\",\n                     SENTENCE_UNCAP, StringUtils.uncapitalize(StringUtils.capitalize(SENTENCE_UNCAP)) );\n        assertEquals(\"capitalize(uncapitalize(String)) failed\",\n                     SENTENCE_CAP, StringUtils.capitalize(StringUtils.uncapitalize(SENTENCE_CAP)) );\n\n        // reflection type of tests: One word.\n        assertEquals(\"uncapitalize(capitalize(String)) failed\",\n                     FOO_UNCAP, StringUtils.uncapitalize(StringUtils.capitalize(FOO_UNCAP)) );\n        assertEquals(\"capitalize(uncapitalize(String)) failed\",\n                     FOO_CAP, StringUtils.capitalize(StringUtils.uncapitalize(FOO_CAP)) );\n\n        assertEquals(\"upperCase(String) failed\",\n                     \"FOO TEST THING\", StringUtils.upperCase(\"fOo test THING\") );\n        assertEquals(\"upperCase(empty-string) failed\",\n                     \"\", StringUtils.upperCase(\"\") );\n        assertEquals(\"lowerCase(String) failed\",\n                     \"foo test thing\", StringUtils.lowerCase(\"fOo test THING\") );\n        assertEquals(\"lowerCase(empty-string) failed\",\n                     \"\", StringUtils.lowerCase(\"\") );\n\n        assertEquals(\"upperCase(String, Locale) failed\",\n                     \"FOO TEST THING\", StringUtils.upperCase(\"fOo test THING\", Locale.ENGLISH) );\n        assertEquals(\"upperCase(empty-string, Locale) failed\",\n                     \"\", StringUtils.upperCase(\"\", Locale.ENGLISH) );\n        assertEquals(\"lowerCase(String, Locale) failed\",\n                     \"foo test thing\", StringUtils.lowerCase(\"fOo test THING\", Locale.ENGLISH) );\n        assertEquals(\"lowerCase(empty-string, Locale) failed\",\n                     \"\", StringUtils.lowerCase(\"\", Locale.ENGLISH) );\n    }\n",
        "begin_line": 122,
        "end_line": 172,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 124,col 9)-(line 124,col 56)",
            "(line 125,col 9)-(line 125,col 72)",
            "(line 126,col 9)-(line 126,col 56)",
            "(line 127,col 9)-(line 127,col 72)",
            "(line 128,col 9)-(line 128,col 57)",
            "(line 129,col 9)-(line 129,col 59)",
            "(line 131,col 9)-(line 132,col 54)",
            "(line 133,col 9)-(line 134,col 51)",
            "(line 136,col 9)-(line 137,col 68)",
            "(line 138,col 9)-(line 139,col 56)",
            "(line 140,col 9)-(line 141,col 53)",
            "(line 144,col 9)-(line 145,col 104)",
            "(line 146,col 9)-(line 147,col 100)",
            "(line 150,col 9)-(line 151,col 94)",
            "(line 152,col 9)-(line 153,col 90)",
            "(line 155,col 9)-(line 156,col 81)",
            "(line 157,col 9)-(line 158,col 53)",
            "(line 159,col 9)-(line 160,col 81)",
            "(line 161,col 9)-(line 162,col 53)",
            "(line 164,col 9)-(line 165,col 97)",
            "(line 166,col 9)-(line 167,col 69)",
            "(line 168,col 9)-(line 169,col 97)",
            "(line 170,col 9)-(line 171,col 69)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.testSwapCase_String()",
        "snippet": "    @Test\n    public void testSwapCase_String() {\n        assertEquals(null, StringUtils.swapCase(null));\n        assertEquals(\"\", StringUtils.swapCase(\"\"));\n        assertEquals(\"  \", StringUtils.swapCase(\"  \"));\n        \n        assertEquals(\"i\", WordUtils.swapCase(\"I\") );\n        assertEquals(\"I\", WordUtils.swapCase(\"i\") );\n        assertEquals(\"I AM HERE 123\", StringUtils.swapCase(\"i am here 123\") );\n        assertEquals(\"i aM hERE 123\", StringUtils.swapCase(\"I Am Here 123\") );\n        assertEquals(\"I AM here 123\", StringUtils.swapCase(\"i am HERE 123\") );\n        assertEquals(\"i am here 123\", StringUtils.swapCase(\"I AM HERE 123\") );\n        \n        String test = \"This String contains a TitleCase character: \\u01C8\";\n        String expect = \"tHIS sTRING CONTAINS A tITLEcASE CHARACTER: \\u01C9\";\n        assertEquals(expect, WordUtils.swapCase(test));\n    }\n",
        "begin_line": 174,
        "end_line": 190,
        "comment": "",
        "child_ranges": [
            "(line 176,col 9)-(line 176,col 55)",
            "(line 177,col 9)-(line 177,col 51)",
            "(line 178,col 9)-(line 178,col 55)",
            "(line 180,col 9)-(line 180,col 52)",
            "(line 181,col 9)-(line 181,col 52)",
            "(line 182,col 9)-(line 182,col 78)",
            "(line 183,col 9)-(line 183,col 78)",
            "(line 184,col 9)-(line 184,col 78)",
            "(line 185,col 9)-(line 185,col 78)",
            "(line 187,col 9)-(line 187,col 75)",
            "(line 188,col 9)-(line 188,col 77)",
            "(line 189,col 9)-(line 189,col 55)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.testJoin_Objects()",
        "snippet": "    @Test\n    public void testJoin_Objects() {\n        assertEquals(\"abc\", StringUtils.join(\"a\", \"b\", \"c\"));\n        assertEquals(\"a\",   StringUtils.join(null, \"\", \"a\"));\n        assertEquals(null,  StringUtils.join((Object[])null));\n    }\n",
        "begin_line": 193,
        "end_line": 198,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 195,col 9)-(line 195,col 61)",
            "(line 196,col 9)-(line 196,col 61)",
            "(line 197,col 9)-(line 197,col 62)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.testJoin_Objectarray()",
        "snippet": "    @Test\n    public void testJoin_Objectarray() {\n//        assertEquals(null, StringUtils.join(null)); // generates warning\n        assertEquals(null, StringUtils.join((Object[]) null)); // equivalent explicit cast\n        // test additional varargs calls\n        assertEquals(\"\", StringUtils.join()); // empty array\n        assertEquals(\"\", StringUtils.join((Object) null)); // => new Object[]{null}\n\n        assertEquals(\"\", StringUtils.join(EMPTY_ARRAY_LIST));\n        assertEquals(\"\", StringUtils.join(NULL_ARRAY_LIST));\n        assertEquals(\"null\", StringUtils.join(NULL_TO_STRING_LIST));\n        assertEquals(\"abc\", StringUtils.join(new String[] {\"a\", \"b\", \"c\"}));\n        assertEquals(\"a\", StringUtils.join(new String[] {null, \"a\", \"\"}));\n        assertEquals(\"foo\", StringUtils.join(MIXED_ARRAY_LIST));\n        assertEquals(\"foo2\", StringUtils.join(MIXED_TYPE_LIST));\n    }\n",
        "begin_line": 200,
        "end_line": 215,
        "comment": "",
        "child_ranges": [
            "(line 203,col 9)-(line 203,col 62)",
            "(line 205,col 9)-(line 205,col 45)",
            "(line 206,col 9)-(line 206,col 58)",
            "(line 208,col 9)-(line 208,col 61)",
            "(line 209,col 9)-(line 209,col 60)",
            "(line 210,col 9)-(line 210,col 68)",
            "(line 211,col 9)-(line 211,col 76)",
            "(line 212,col 9)-(line 212,col 74)",
            "(line 213,col 9)-(line 213,col 64)",
            "(line 214,col 9)-(line 214,col 64)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.testJoin_ArrayCharSeparator()",
        "snippet": "    @Test\n    public void testJoin_ArrayCharSeparator() {\n        assertEquals(null, StringUtils.join((Object[]) null, ','));\n        assertEquals(TEXT_LIST_CHAR, StringUtils.join(ARRAY_LIST, SEPARATOR_CHAR));\n        assertEquals(\"\", StringUtils.join(EMPTY_ARRAY_LIST, SEPARATOR_CHAR));\n        assertEquals(\";;foo\", StringUtils.join(MIXED_ARRAY_LIST, SEPARATOR_CHAR));\n        assertEquals(\"foo;2\", StringUtils.join(MIXED_TYPE_LIST, SEPARATOR_CHAR));\n\n        assertEquals(\"/\", StringUtils.join(MIXED_ARRAY_LIST, '/', 0, MIXED_ARRAY_LIST.length-1));\n        assertEquals(\"foo\", StringUtils.join(MIXED_TYPE_LIST, '/', 0, 1));\n        assertEquals(\"null\", StringUtils.join(NULL_TO_STRING_LIST,'/', 0, 1));\n        assertEquals(\"foo/2\", StringUtils.join(MIXED_TYPE_LIST, '/', 0, 2));\n        assertEquals(\"2\", StringUtils.join(MIXED_TYPE_LIST, '/', 1, 2));\n        assertEquals(\"\", StringUtils.join(MIXED_TYPE_LIST, '/', 2, 1));\n    }\n",
        "begin_line": 217,
        "end_line": 231,
        "comment": "",
        "child_ranges": [
            "(line 219,col 9)-(line 219,col 67)",
            "(line 220,col 9)-(line 220,col 83)",
            "(line 221,col 9)-(line 221,col 77)",
            "(line 222,col 9)-(line 222,col 82)",
            "(line 223,col 9)-(line 223,col 81)",
            "(line 225,col 9)-(line 225,col 97)",
            "(line 226,col 9)-(line 226,col 74)",
            "(line 227,col 9)-(line 227,col 78)",
            "(line 228,col 9)-(line 228,col 76)",
            "(line 229,col 9)-(line 229,col 72)",
            "(line 230,col 9)-(line 230,col 71)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.testJoin_ArrayOfChars()",
        "snippet": "    @Test\n    public void testJoin_ArrayOfChars() {\n        assertEquals(null, StringUtils.join((char[]) null, ','));\n        assertEquals(\"1;2\", StringUtils.join(CHAR_PRIM_LIST, SEPARATOR_CHAR));\n        assertEquals(\"2\", StringUtils.join(CHAR_PRIM_LIST, SEPARATOR_CHAR, 1, 2));\n    }\n",
        "begin_line": 233,
        "end_line": 238,
        "comment": "",
        "child_ranges": [
            "(line 235,col 9)-(line 235,col 65)",
            "(line 236,col 9)-(line 236,col 78)",
            "(line 237,col 9)-(line 237,col 82)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.testJoin_ArrayOfBytes()",
        "snippet": "    @Test\n    public void testJoin_ArrayOfBytes() {\n        assertEquals(null, StringUtils.join((byte[]) null, ','));\n        assertEquals(\"1;2\", StringUtils.join(BYTE_PRIM_LIST, SEPARATOR_CHAR));\n        assertEquals(\"2\", StringUtils.join(BYTE_PRIM_LIST, SEPARATOR_CHAR, 1, 2));\n    }\n",
        "begin_line": 240,
        "end_line": 245,
        "comment": "",
        "child_ranges": [
            "(line 242,col 9)-(line 242,col 65)",
            "(line 243,col 9)-(line 243,col 78)",
            "(line 244,col 9)-(line 244,col 82)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.testJoin_ArrayOfInts()",
        "snippet": "    @Test\n    public void testJoin_ArrayOfInts() {\n        assertEquals(null, StringUtils.join((int[]) null, ','));\n        assertEquals(\"1;2\", StringUtils.join(INT_PRIM_LIST, SEPARATOR_CHAR));\n        assertEquals(\"2\", StringUtils.join(INT_PRIM_LIST, SEPARATOR_CHAR, 1, 2));\n    }\n",
        "begin_line": 247,
        "end_line": 252,
        "comment": "",
        "child_ranges": [
            "(line 249,col 9)-(line 249,col 64)",
            "(line 250,col 9)-(line 250,col 77)",
            "(line 251,col 9)-(line 251,col 81)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.testJoin_ArrayOfLongs()",
        "snippet": "    @Test\n    public void testJoin_ArrayOfLongs() {\n        assertEquals(null, StringUtils.join((long[]) null, ','));\n        assertEquals(\"1;2\", StringUtils.join(LONG_PRIM_LIST, SEPARATOR_CHAR));\n        assertEquals(\"2\", StringUtils.join(LONG_PRIM_LIST, SEPARATOR_CHAR, 1, 2));\n    }\n",
        "begin_line": 254,
        "end_line": 259,
        "comment": "",
        "child_ranges": [
            "(line 256,col 9)-(line 256,col 65)",
            "(line 257,col 9)-(line 257,col 78)",
            "(line 258,col 9)-(line 258,col 82)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.testJoin_ArrayOfFloats()",
        "snippet": "    @Test\n    public void testJoin_ArrayOfFloats() {\n        assertEquals(null, StringUtils.join((float[]) null, ','));\n        assertEquals(\"1.0;2.0\", StringUtils.join(FLOAT_PRIM_LIST, SEPARATOR_CHAR));\n        assertEquals(\"2.0\", StringUtils.join(FLOAT_PRIM_LIST, SEPARATOR_CHAR, 1, 2));\n    }\n",
        "begin_line": 261,
        "end_line": 266,
        "comment": "",
        "child_ranges": [
            "(line 263,col 9)-(line 263,col 66)",
            "(line 264,col 9)-(line 264,col 83)",
            "(line 265,col 9)-(line 265,col 85)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.testJoin_ArrayOfDoubles()",
        "snippet": "    @Test\n    public void testJoin_ArrayOfDoubles() {\n        assertEquals(null, StringUtils.join((double[]) null, ','));\n        assertEquals(\"1.0;2.0\", StringUtils.join(DOUBLE_PRIM_LIST, SEPARATOR_CHAR));\n        assertEquals(\"2.0\", StringUtils.join(DOUBLE_PRIM_LIST, SEPARATOR_CHAR, 1, 2));\n    }\n",
        "begin_line": 268,
        "end_line": 273,
        "comment": "",
        "child_ranges": [
            "(line 270,col 9)-(line 270,col 67)",
            "(line 271,col 9)-(line 271,col 84)",
            "(line 272,col 9)-(line 272,col 86)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.testJoin_ArrayOfShorts()",
        "snippet": "    @Test\n    public void testJoin_ArrayOfShorts() {\n        assertEquals(null, StringUtils.join((short[]) null, ','));\n        assertEquals(\"1;2\", StringUtils.join(SHORT_PRIM_LIST, SEPARATOR_CHAR));\n        assertEquals(\"2\", StringUtils.join(SHORT_PRIM_LIST, SEPARATOR_CHAR, 1, 2));\n    }\n",
        "begin_line": 275,
        "end_line": 280,
        "comment": "",
        "child_ranges": [
            "(line 277,col 9)-(line 277,col 66)",
            "(line 278,col 9)-(line 278,col 79)",
            "(line 279,col 9)-(line 279,col 83)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.testJoin_ArrayString()",
        "snippet": "    @Test\n    public void testJoin_ArrayString() {\n        assertEquals(null, StringUtils.join((Object[]) null, null));\n        assertEquals(TEXT_LIST_NOSEP, StringUtils.join(ARRAY_LIST, null));\n        assertEquals(TEXT_LIST_NOSEP, StringUtils.join(ARRAY_LIST, \"\"));\n        \n        assertEquals(\"\", StringUtils.join(NULL_ARRAY_LIST, null));\n        \n        assertEquals(\"\", StringUtils.join(EMPTY_ARRAY_LIST, null));\n        assertEquals(\"\", StringUtils.join(EMPTY_ARRAY_LIST, \"\"));\n        assertEquals(\"\", StringUtils.join(EMPTY_ARRAY_LIST, SEPARATOR));\n\n        assertEquals(TEXT_LIST, StringUtils.join(ARRAY_LIST, SEPARATOR));\n        assertEquals(\",,foo\", StringUtils.join(MIXED_ARRAY_LIST, SEPARATOR));\n        assertEquals(\"foo,2\", StringUtils.join(MIXED_TYPE_LIST, SEPARATOR));\n\n        assertEquals(\"/\", StringUtils.join(MIXED_ARRAY_LIST, \"/\", 0, MIXED_ARRAY_LIST.length-1));\n        assertEquals(\"\", StringUtils.join(MIXED_ARRAY_LIST, \"\", 0, MIXED_ARRAY_LIST.length-1));\n        assertEquals(\"foo\", StringUtils.join(MIXED_TYPE_LIST, \"/\", 0, 1));\n        assertEquals(\"foo/2\", StringUtils.join(MIXED_TYPE_LIST, \"/\", 0, 2));\n        assertEquals(\"2\", StringUtils.join(MIXED_TYPE_LIST, \"/\", 1, 2));\n        assertEquals(\"\", StringUtils.join(MIXED_TYPE_LIST, \"/\", 2, 1));\n    }\n",
        "begin_line": 282,
        "end_line": 304,
        "comment": "",
        "child_ranges": [
            "(line 284,col 9)-(line 284,col 68)",
            "(line 285,col 9)-(line 285,col 74)",
            "(line 286,col 9)-(line 286,col 72)",
            "(line 288,col 9)-(line 288,col 66)",
            "(line 290,col 9)-(line 290,col 67)",
            "(line 291,col 9)-(line 291,col 65)",
            "(line 292,col 9)-(line 292,col 72)",
            "(line 294,col 9)-(line 294,col 73)",
            "(line 295,col 9)-(line 295,col 77)",
            "(line 296,col 9)-(line 296,col 76)",
            "(line 298,col 9)-(line 298,col 97)",
            "(line 299,col 9)-(line 299,col 95)",
            "(line 300,col 9)-(line 300,col 74)",
            "(line 301,col 9)-(line 301,col 76)",
            "(line 302,col 9)-(line 302,col 72)",
            "(line 303,col 9)-(line 303,col 71)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.testJoin_IteratorChar()",
        "snippet": "    @Test\n    public void testJoin_IteratorChar() {\n        assertEquals(null, StringUtils.join((Iterator<?>) null, ','));\n        assertEquals(TEXT_LIST_CHAR, StringUtils.join(Arrays.asList(ARRAY_LIST).iterator(), SEPARATOR_CHAR));\n        assertEquals(\"\", StringUtils.join(Arrays.asList(NULL_ARRAY_LIST).iterator(), SEPARATOR_CHAR));\n        assertEquals(\"\", StringUtils.join(Arrays.asList(EMPTY_ARRAY_LIST).iterator(), SEPARATOR_CHAR));\n        assertEquals(\"foo\", StringUtils.join(Collections.singleton(\"foo\").iterator(), 'x'));\n    }\n",
        "begin_line": 306,
        "end_line": 313,
        "comment": "",
        "child_ranges": [
            "(line 308,col 9)-(line 308,col 70)",
            "(line 309,col 9)-(line 309,col 109)",
            "(line 310,col 9)-(line 310,col 102)",
            "(line 311,col 9)-(line 311,col 103)",
            "(line 312,col 9)-(line 312,col 92)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.testJoin_IteratorString()",
        "snippet": "    @Test\n    public void testJoin_IteratorString() {\n        assertEquals(null, StringUtils.join((Iterator<?>) null, null));\n        assertEquals(TEXT_LIST_NOSEP, StringUtils.join(Arrays.asList(ARRAY_LIST).iterator(), null));\n        assertEquals(TEXT_LIST_NOSEP, StringUtils.join(Arrays.asList(ARRAY_LIST).iterator(), \"\"));\n        assertEquals(\"foo\", StringUtils.join(Collections.singleton(\"foo\").iterator(), \"x\"));\n        assertEquals(\"foo\", StringUtils.join(Collections.singleton(\"foo\").iterator(), null));\n\n        assertEquals(\"\", StringUtils.join(Arrays.asList(NULL_ARRAY_LIST).iterator(), null));\n        \n        assertEquals(\"\", StringUtils.join(Arrays.asList(EMPTY_ARRAY_LIST).iterator(), null));\n        assertEquals(\"\", StringUtils.join(Arrays.asList(EMPTY_ARRAY_LIST).iterator(), \"\"));\n        assertEquals(\"\", StringUtils.join(Arrays.asList(EMPTY_ARRAY_LIST).iterator(), SEPARATOR));\n        \n        assertEquals(TEXT_LIST, StringUtils.join(Arrays.asList(ARRAY_LIST).iterator(), SEPARATOR));\n    }\n",
        "begin_line": 315,
        "end_line": 330,
        "comment": "",
        "child_ranges": [
            "(line 317,col 9)-(line 317,col 71)",
            "(line 318,col 9)-(line 318,col 100)",
            "(line 319,col 9)-(line 319,col 98)",
            "(line 320,col 9)-(line 320,col 92)",
            "(line 321,col 9)-(line 321,col 93)",
            "(line 323,col 9)-(line 323,col 92)",
            "(line 325,col 9)-(line 325,col 93)",
            "(line 326,col 9)-(line 326,col 91)",
            "(line 327,col 9)-(line 327,col 98)",
            "(line 329,col 9)-(line 329,col 99)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.testJoin_IterableChar()",
        "snippet": "    @Test\n    public void testJoin_IterableChar() {\n        assertEquals(null, StringUtils.join((Iterable<?>) null, ','));\n        assertEquals(TEXT_LIST_CHAR, StringUtils.join(Arrays.asList(ARRAY_LIST), SEPARATOR_CHAR));\n        assertEquals(\"\", StringUtils.join(Arrays.asList(NULL_ARRAY_LIST), SEPARATOR_CHAR));\n        assertEquals(\"\", StringUtils.join(Arrays.asList(EMPTY_ARRAY_LIST), SEPARATOR_CHAR));\n        assertEquals(\"foo\", StringUtils.join(Collections.singleton(\"foo\"), 'x'));\n    }\n",
        "begin_line": 332,
        "end_line": 339,
        "comment": "",
        "child_ranges": [
            "(line 334,col 9)-(line 334,col 70)",
            "(line 335,col 9)-(line 335,col 98)",
            "(line 336,col 9)-(line 336,col 91)",
            "(line 337,col 9)-(line 337,col 92)",
            "(line 338,col 9)-(line 338,col 81)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.testJoin_IterableString()",
        "snippet": "    @Test\n    public void testJoin_IterableString() {\n        assertEquals(null, StringUtils.join((Iterable<?>) null, null));\n        assertEquals(TEXT_LIST_NOSEP, StringUtils.join(Arrays.asList(ARRAY_LIST), null));\n        assertEquals(TEXT_LIST_NOSEP, StringUtils.join(Arrays.asList(ARRAY_LIST), \"\"));\n        assertEquals(\"foo\", StringUtils.join(Collections.singleton(\"foo\"), \"x\"));\n        assertEquals(\"foo\", StringUtils.join(Collections.singleton(\"foo\"), null));\n\n        assertEquals(\"\", StringUtils.join(Arrays.asList(NULL_ARRAY_LIST), null));\n\n        assertEquals(\"\", StringUtils.join(Arrays.asList(EMPTY_ARRAY_LIST), null));\n        assertEquals(\"\", StringUtils.join(Arrays.asList(EMPTY_ARRAY_LIST), \"\"));\n        assertEquals(\"\", StringUtils.join(Arrays.asList(EMPTY_ARRAY_LIST), SEPARATOR));\n\n        assertEquals(TEXT_LIST, StringUtils.join(Arrays.asList(ARRAY_LIST), SEPARATOR));\n    }\n",
        "begin_line": 341,
        "end_line": 356,
        "comment": "",
        "child_ranges": [
            "(line 343,col 9)-(line 343,col 71)",
            "(line 344,col 9)-(line 344,col 89)",
            "(line 345,col 9)-(line 345,col 87)",
            "(line 346,col 9)-(line 346,col 81)",
            "(line 347,col 9)-(line 347,col 82)",
            "(line 349,col 9)-(line 349,col 81)",
            "(line 351,col 9)-(line 351,col 82)",
            "(line 352,col 9)-(line 352,col 80)",
            "(line 353,col 9)-(line 353,col 87)",
            "(line 355,col 9)-(line 355,col 88)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.testSplit_String()",
        "snippet": "    @Test\n    public void testSplit_String() {\n        assertArrayEquals(null, StringUtils.split(null));\n        assertEquals(0, StringUtils.split(\"\").length);\n        \n        String str = \"a b  .c\";\n        String[] res = StringUtils.split(str);\n        assertEquals(3, res.length);\n        assertEquals(\"a\", res[0]);\n        assertEquals(\"b\", res[1]);\n        assertEquals(\".c\", res[2]);\n        \n        str = \" a \";\n        res = StringUtils.split(str);\n        assertEquals(1, res.length);\n        assertEquals(\"a\", res[0]);\n        \n        str = \"a\" + WHITESPACE + \"b\" + NON_WHITESPACE + \"c\";\n        res = StringUtils.split(str);\n        assertEquals(2, res.length);\n        assertEquals(\"a\", res[0]);\n        assertEquals(\"b\" + NON_WHITESPACE + \"c\", res[1]);                       \n    }\n",
        "begin_line": 358,
        "end_line": 380,
        "comment": "",
        "child_ranges": [
            "(line 360,col 9)-(line 360,col 57)",
            "(line 361,col 9)-(line 361,col 54)",
            "(line 363,col 9)-(line 363,col 31)",
            "(line 364,col 9)-(line 364,col 46)",
            "(line 365,col 9)-(line 365,col 36)",
            "(line 366,col 9)-(line 366,col 34)",
            "(line 367,col 9)-(line 367,col 34)",
            "(line 368,col 9)-(line 368,col 35)",
            "(line 370,col 9)-(line 370,col 20)",
            "(line 371,col 9)-(line 371,col 37)",
            "(line 372,col 9)-(line 372,col 36)",
            "(line 373,col 9)-(line 373,col 34)",
            "(line 375,col 9)-(line 375,col 60)",
            "(line 376,col 9)-(line 376,col 37)",
            "(line 377,col 9)-(line 377,col 36)",
            "(line 378,col 9)-(line 378,col 34)",
            "(line 379,col 9)-(line 379,col 57)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.testSplit_StringChar()",
        "snippet": "    @Test\n    public void testSplit_StringChar() {\n        assertArrayEquals(null, StringUtils.split(null, '.'));\n        assertEquals(0, StringUtils.split(\"\", '.').length);\n\n        String str = \"a.b.. c\";\n        String[] res = StringUtils.split(str, '.');\n        assertEquals(3, res.length);\n        assertEquals(\"a\", res[0]);\n        assertEquals(\"b\", res[1]);\n        assertEquals(\" c\", res[2]);\n            \n        str = \".a.\";\n        res = StringUtils.split(str, '.');\n        assertEquals(1, res.length);\n        assertEquals(\"a\", res[0]);\n        \n        str = \"a b c\";\n        res = StringUtils.split(str,' ');\n        assertEquals(3, res.length);\n        assertEquals(\"a\", res[0]);\n        assertEquals(\"b\", res[1]);\n        assertEquals(\"c\", res[2]);\n    }\n",
        "begin_line": 382,
        "end_line": 405,
        "comment": "",
        "child_ranges": [
            "(line 384,col 9)-(line 384,col 62)",
            "(line 385,col 9)-(line 385,col 59)",
            "(line 387,col 9)-(line 387,col 31)",
            "(line 388,col 9)-(line 388,col 51)",
            "(line 389,col 9)-(line 389,col 36)",
            "(line 390,col 9)-(line 390,col 34)",
            "(line 391,col 9)-(line 391,col 34)",
            "(line 392,col 9)-(line 392,col 35)",
            "(line 394,col 9)-(line 394,col 20)",
            "(line 395,col 9)-(line 395,col 42)",
            "(line 396,col 9)-(line 396,col 36)",
            "(line 397,col 9)-(line 397,col 34)",
            "(line 399,col 9)-(line 399,col 22)",
            "(line 400,col 9)-(line 400,col 41)",
            "(line 401,col 9)-(line 401,col 36)",
            "(line 402,col 9)-(line 402,col 34)",
            "(line 403,col 9)-(line 403,col 34)",
            "(line 404,col 9)-(line 404,col 34)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.testSplit_StringString_StringStringInt()",
        "snippet": "    @Test\n    public void testSplit_StringString_StringStringInt() {\n        assertArrayEquals(null, StringUtils.split(null, \".\"));\n        assertArrayEquals(null, StringUtils.split(null, \".\", 3));\n        \n        assertEquals(0, StringUtils.split(\"\", \".\").length);\n        assertEquals(0, StringUtils.split(\"\", \".\", 3).length);\n        \n        innerTestSplit('.', \".\", ' ');\n        innerTestSplit('.', \".\", ',');\n        innerTestSplit('.', \".,\", 'x');\n        for (int i = 0; i < WHITESPACE.length(); i++) {\n            for (int j = 0; j < NON_WHITESPACE.length(); j++) {\n                innerTestSplit(WHITESPACE.charAt(i), null, NON_WHITESPACE.charAt(j));\n                innerTestSplit(WHITESPACE.charAt(i), String.valueOf(WHITESPACE.charAt(i)), NON_WHITESPACE.charAt(j));\n            }\n        }\n        \n        String[] results;\n        String[] expectedResults = {\"ab\", \"de fg\"};\n        results = StringUtils.split(\"ab   de fg\", null, 2);\n        assertEquals(expectedResults.length, results.length);\n        for (int i = 0; i < expectedResults.length; i++) {\n            assertEquals(expectedResults[i], results[i]);\n        }\n        \n        String[] expectedResults2 = {\"ab\", \"cd:ef\"};\n        results = StringUtils.split(\"ab:cd:ef\",\":\", 2);\n        assertEquals(expectedResults2.length, results.length);\n        for (int i = 0; i < expectedResults2.length; i++) {\n            assertEquals(expectedResults2[i], results[i]);\n        }\n    }\n",
        "begin_line": 407,
        "end_line": 439,
        "comment": "",
        "child_ranges": [
            "(line 409,col 9)-(line 409,col 62)",
            "(line 410,col 9)-(line 410,col 65)",
            "(line 412,col 9)-(line 412,col 59)",
            "(line 413,col 9)-(line 413,col 62)",
            "(line 415,col 9)-(line 415,col 38)",
            "(line 416,col 9)-(line 416,col 38)",
            "(line 417,col 9)-(line 417,col 39)",
            "(line 418,col 9)-(line 423,col 9)",
            "(line 425,col 9)-(line 425,col 25)",
            "(line 426,col 9)-(line 426,col 51)",
            "(line 427,col 9)-(line 427,col 59)",
            "(line 428,col 9)-(line 428,col 61)",
            "(line 429,col 9)-(line 431,col 9)",
            "(line 433,col 9)-(line 433,col 52)",
            "(line 434,col 9)-(line 434,col 55)",
            "(line 435,col 9)-(line 435,col 62)",
            "(line 436,col 9)-(line 438,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.innerTestSplit(char, java.lang.String, char)",
        "snippet": "    private void innerTestSplit(char separator, String sepStr, char noMatch) {\n        String msg = \"Failed on separator hex(\" + Integer.toHexString(separator) +\n            \"), noMatch hex(\" + Integer.toHexString(noMatch) + \"), sepStr(\" + sepStr + \")\";\n        \n        final String str = \"a\" + separator + \"b\" + separator + separator + noMatch + \"c\";\n        String[] res;\n        // (str, sepStr)\n        res = StringUtils.split(str, sepStr);\n        assertEquals(msg, 3, res.length);\n        assertEquals(msg, \"a\", res[0]);\n        assertEquals(msg, \"b\", res[1]);\n        assertEquals(msg, noMatch + \"c\", res[2]);\n        \n        final String str2 = separator + \"a\" + separator;\n        res = StringUtils.split(str2, sepStr);\n        assertEquals(msg, 1, res.length);\n        assertEquals(msg, \"a\", res[0]);\n\n        res = StringUtils.split(str, sepStr, -1);\n        assertEquals(msg, 3, res.length);\n        assertEquals(msg, \"a\", res[0]);\n        assertEquals(msg, \"b\", res[1]);\n        assertEquals(msg, noMatch + \"c\", res[2]);\n        \n        res = StringUtils.split(str, sepStr, 0);\n        assertEquals(msg, 3, res.length);\n        assertEquals(msg, \"a\", res[0]);\n        assertEquals(msg, \"b\", res[1]);\n        assertEquals(msg, noMatch + \"c\", res[2]);\n        \n        res = StringUtils.split(str, sepStr, 1);\n        assertEquals(msg, 1, res.length);\n        assertEquals(msg, str, res[0]);\n        \n        res = StringUtils.split(str, sepStr, 2);\n        assertEquals(msg, 2, res.length);\n        assertEquals(msg, \"a\", res[0]);\n        assertEquals(msg, str.substring(2), res[1]);\n    }\n",
        "begin_line": 441,
        "end_line": 479,
        "comment": "",
        "child_ranges": [
            "(line 442,col 9)-(line 443,col 91)",
            "(line 445,col 9)-(line 445,col 89)",
            "(line 446,col 9)-(line 446,col 21)",
            "(line 448,col 9)-(line 448,col 45)",
            "(line 449,col 9)-(line 449,col 41)",
            "(line 450,col 9)-(line 450,col 39)",
            "(line 451,col 9)-(line 451,col 39)",
            "(line 452,col 9)-(line 452,col 49)",
            "(line 454,col 9)-(line 454,col 56)",
            "(line 455,col 9)-(line 455,col 46)",
            "(line 456,col 9)-(line 456,col 41)",
            "(line 457,col 9)-(line 457,col 39)",
            "(line 459,col 9)-(line 459,col 49)",
            "(line 460,col 9)-(line 460,col 41)",
            "(line 461,col 9)-(line 461,col 39)",
            "(line 462,col 9)-(line 462,col 39)",
            "(line 463,col 9)-(line 463,col 49)",
            "(line 465,col 9)-(line 465,col 48)",
            "(line 466,col 9)-(line 466,col 41)",
            "(line 467,col 9)-(line 467,col 39)",
            "(line 468,col 9)-(line 468,col 39)",
            "(line 469,col 9)-(line 469,col 49)",
            "(line 471,col 9)-(line 471,col 48)",
            "(line 472,col 9)-(line 472,col 41)",
            "(line 473,col 9)-(line 473,col 39)",
            "(line 475,col 9)-(line 475,col 48)",
            "(line 476,col 9)-(line 476,col 41)",
            "(line 477,col 9)-(line 477,col 39)",
            "(line 478,col 9)-(line 478,col 52)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.testSplitByWholeString_StringStringBoolean()",
        "snippet": "    @Test\n    public void testSplitByWholeString_StringStringBoolean() {\n        assertArrayEquals( null, StringUtils.splitByWholeSeparator( null, \".\" ) ) ;\n\n        assertEquals( 0, StringUtils.splitByWholeSeparator( \"\", \".\" ).length ) ;\n\n        String stringToSplitOnNulls = \"ab   de fg\" ;\n        String[] splitOnNullExpectedResults = { \"ab\", \"de\", \"fg\" } ;\n\n        String[] splitOnNullResults = StringUtils.splitByWholeSeparator( stringToSplitOnNulls, null ) ;\n        assertEquals( splitOnNullExpectedResults.length, splitOnNullResults.length ) ;\n        for ( int i = 0 ; i < splitOnNullExpectedResults.length ; i+= 1 ) {\n            assertEquals( splitOnNullExpectedResults[i], splitOnNullResults[i] ) ;\n        }\n\n        String stringToSplitOnCharactersAndString = \"abstemiouslyaeiouyabstemiously\" ;\n\n        String[] splitOnStringExpectedResults = { \"abstemiously\", \"abstemiously\" } ;\n        String[] splitOnStringResults = StringUtils.splitByWholeSeparator( stringToSplitOnCharactersAndString, \"aeiouy\" ) ;\n        assertEquals( splitOnStringExpectedResults.length, splitOnStringResults.length ) ;\n        for ( int i = 0 ; i < splitOnStringExpectedResults.length ; i+= 1 ) {\n            assertEquals( splitOnStringExpectedResults[i], splitOnStringResults[i] ) ;\n        }\n\n        String[] splitWithMultipleSeparatorExpectedResults = {\"ab\", \"cd\", \"ef\"};\n        String[] splitWithMultipleSeparator = StringUtils.splitByWholeSeparator(\"ab:cd::ef\", \":\");\n        assertEquals( splitWithMultipleSeparatorExpectedResults.length, splitWithMultipleSeparator.length );\n        for( int i = 0; i < splitWithMultipleSeparatorExpectedResults.length ; i++ ) {\n            assertEquals( splitWithMultipleSeparatorExpectedResults[i], splitWithMultipleSeparator[i] ) ;\n        }\n    }\n",
        "begin_line": 481,
        "end_line": 511,
        "comment": "",
        "child_ranges": [
            "(line 483,col 9)-(line 483,col 83)",
            "(line 485,col 9)-(line 485,col 80)",
            "(line 487,col 9)-(line 487,col 52)",
            "(line 488,col 9)-(line 488,col 68)",
            "(line 490,col 9)-(line 490,col 103)",
            "(line 491,col 9)-(line 491,col 86)",
            "(line 492,col 9)-(line 494,col 9)",
            "(line 496,col 9)-(line 496,col 86)",
            "(line 498,col 9)-(line 498,col 84)",
            "(line 499,col 9)-(line 499,col 123)",
            "(line 500,col 9)-(line 500,col 90)",
            "(line 501,col 9)-(line 503,col 9)",
            "(line 505,col 9)-(line 505,col 80)",
            "(line 506,col 9)-(line 506,col 98)",
            "(line 507,col 9)-(line 507,col 108)",
            "(line 508,col 9)-(line 510,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.testSplitByWholeString_StringStringBooleanInt()",
        "snippet": "    @Test\n    public void testSplitByWholeString_StringStringBooleanInt() {\n        assertArrayEquals( null, StringUtils.splitByWholeSeparator( null, \".\", 3 ) ) ;\n\n        assertEquals( 0, StringUtils.splitByWholeSeparator( \"\", \".\", 3 ).length ) ;\n\n        String stringToSplitOnNulls = \"ab   de fg\" ;\n        String[] splitOnNullExpectedResults = { \"ab\", \"de fg\" } ;\n        //String[] splitOnNullExpectedResults = { \"ab\", \"de\" } ;\n\n        String[] splitOnNullResults = StringUtils.splitByWholeSeparator( stringToSplitOnNulls, null, 2 ) ;\n        assertEquals( splitOnNullExpectedResults.length, splitOnNullResults.length ) ;\n        for ( int i = 0 ; i < splitOnNullExpectedResults.length ; i+= 1 ) {\n            assertEquals( splitOnNullExpectedResults[i], splitOnNullResults[i] ) ;\n        }\n\n        String stringToSplitOnCharactersAndString = \"abstemiouslyaeiouyabstemiouslyaeiouyabstemiously\" ;\n\n        String[] splitOnStringExpectedResults = { \"abstemiously\", \"abstemiouslyaeiouyabstemiously\" } ;\n        //String[] splitOnStringExpectedResults = { \"abstemiously\", \"abstemiously\" } ;\n        String[] splitOnStringResults = StringUtils.splitByWholeSeparator( stringToSplitOnCharactersAndString, \"aeiouy\", 2 ) ;\n        assertEquals( splitOnStringExpectedResults.length, splitOnStringResults.length ) ;\n        for ( int i = 0 ; i < splitOnStringExpectedResults.length ; i++ ) {\n            assertEquals( splitOnStringExpectedResults[i], splitOnStringResults[i] ) ;\n        }\n    }\n",
        "begin_line": 513,
        "end_line": 538,
        "comment": "",
        "child_ranges": [
            "(line 515,col 9)-(line 515,col 86)",
            "(line 517,col 9)-(line 517,col 83)",
            "(line 519,col 9)-(line 519,col 52)",
            "(line 520,col 9)-(line 520,col 65)",
            "(line 523,col 9)-(line 523,col 106)",
            "(line 524,col 9)-(line 524,col 86)",
            "(line 525,col 9)-(line 527,col 9)",
            "(line 529,col 9)-(line 529,col 104)",
            "(line 531,col 9)-(line 531,col 102)",
            "(line 533,col 9)-(line 533,col 126)",
            "(line 534,col 9)-(line 534,col 90)",
            "(line 535,col 9)-(line 537,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.testSplitByWholeSeparatorPreserveAllTokens_StringStringInt()",
        "snippet": "    @Test\n    public void testSplitByWholeSeparatorPreserveAllTokens_StringStringInt() {\n        assertArrayEquals( null, StringUtils.splitByWholeSeparatorPreserveAllTokens( null, \".\", -1 ) ) ;\n\n        assertEquals( 0, StringUtils.splitByWholeSeparatorPreserveAllTokens( \"\", \".\", -1 ).length ) ;\n\n        // test whitespace\n        String input = \"ab   de fg\" ;\n        String[] expected = new String[] { \"ab\", \"\", \"\", \"de\", \"fg\" } ;\n\n        String[] actual = StringUtils.splitByWholeSeparatorPreserveAllTokens( input, null, -1 ) ;\n        assertEquals( expected.length, actual.length ) ;\n        for ( int i = 0 ; i < actual.length ; i+= 1 ) {\n            assertEquals( expected[i], actual[i] );\n        }\n\n        // test delimiter singlechar\n        input = \"1::2:::3::::4\";\n        expected = new String[] { \"1\", \"\", \"2\", \"\", \"\", \"3\", \"\", \"\", \"\", \"4\" };\n\n        actual = StringUtils.splitByWholeSeparatorPreserveAllTokens( input, \":\", -1 ) ;\n        assertEquals( expected.length, actual.length ) ;\n        for ( int i = 0 ; i < actual.length ; i+= 1 ) {\n            assertEquals( expected[i], actual[i] );\n        }\n\n        // test delimiter multichar\n        input = \"1::2:::3::::4\";\n        expected = new String[] { \"1\", \"2\", \":3\", \"\", \"4\" };\n\n        actual = StringUtils.splitByWholeSeparatorPreserveAllTokens( input, \"::\", -1 ) ;\n        assertEquals( expected.length, actual.length ) ;\n        for ( int i = 0 ; i < actual.length ; i+= 1 ) {\n            assertEquals( expected[i], actual[i] );\n        }\n\n        // test delimiter char with max\n        input = \"1::2::3:4\";\n        expected = new String[] { \"1\", \"\", \"2\", \":3:4\" };\n\n        actual = StringUtils.splitByWholeSeparatorPreserveAllTokens( input, \":\", 4 ) ;\n        assertEquals( expected.length, actual.length ) ;\n        for ( int i = 0 ; i < actual.length ; i+= 1 ) {\n            assertEquals( expected[i], actual[i] );\n        }\n    }\n",
        "begin_line": 540,
        "end_line": 585,
        "comment": "",
        "child_ranges": [
            "(line 542,col 9)-(line 542,col 104)",
            "(line 544,col 9)-(line 544,col 101)",
            "(line 547,col 9)-(line 547,col 37)",
            "(line 548,col 9)-(line 548,col 71)",
            "(line 550,col 9)-(line 550,col 97)",
            "(line 551,col 9)-(line 551,col 56)",
            "(line 552,col 9)-(line 554,col 9)",
            "(line 557,col 9)-(line 557,col 32)",
            "(line 558,col 9)-(line 558,col 79)",
            "(line 560,col 9)-(line 560,col 87)",
            "(line 561,col 9)-(line 561,col 56)",
            "(line 562,col 9)-(line 564,col 9)",
            "(line 567,col 9)-(line 567,col 32)",
            "(line 568,col 9)-(line 568,col 60)",
            "(line 570,col 9)-(line 570,col 88)",
            "(line 571,col 9)-(line 571,col 56)",
            "(line 572,col 9)-(line 574,col 9)",
            "(line 577,col 9)-(line 577,col 28)",
            "(line 578,col 9)-(line 578,col 57)",
            "(line 580,col 9)-(line 580,col 86)",
            "(line 581,col 9)-(line 581,col 56)",
            "(line 582,col 9)-(line 584,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.testSplitPreserveAllTokens_String()",
        "snippet": "    @Test\n    public void testSplitPreserveAllTokens_String() {\n        assertArrayEquals(null, StringUtils.splitPreserveAllTokens(null));\n        assertEquals(0, StringUtils.splitPreserveAllTokens(\"\").length);\n        \n        String str = \"abc def\";\n        String[] res = StringUtils.splitPreserveAllTokens(str);\n        assertEquals(2, res.length);\n        assertEquals(\"abc\", res[0]);\n        assertEquals(\"def\", res[1]);\n        \n        str = \"abc  def\";\n        res = StringUtils.splitPreserveAllTokens(str);\n        assertEquals(3, res.length);\n        assertEquals(\"abc\", res[0]);\n        assertEquals(\"\", res[1]);\n        assertEquals(\"def\", res[2]);\n        \n        str = \" abc \";\n        res = StringUtils.splitPreserveAllTokens(str);\n        assertEquals(3, res.length);\n        assertEquals(\"\", res[0]);\n        assertEquals(\"abc\", res[1]);\n        assertEquals(\"\", res[2]);\n        \n        str = \"a b .c\";\n        res = StringUtils.splitPreserveAllTokens(str);\n        assertEquals(3, res.length);\n        assertEquals(\"a\", res[0]);\n        assertEquals(\"b\", res[1]);\n        assertEquals(\".c\", res[2]);\n        \n        str = \" a b .c\";\n        res = StringUtils.splitPreserveAllTokens(str);\n        assertEquals(4, res.length);\n        assertEquals(\"\", res[0]);\n        assertEquals(\"a\", res[1]);\n        assertEquals(\"b\", res[2]);\n        assertEquals(\".c\", res[3]);\n        \n        str = \"a  b  .c\";\n        res = StringUtils.splitPreserveAllTokens(str);\n        assertEquals(5, res.length);\n        assertEquals(\"a\", res[0]);\n        assertEquals(\"\", res[1]);\n        assertEquals(\"b\", res[2]);\n        assertEquals(\"\", res[3]);\n        assertEquals(\".c\", res[4]);\n        \n        str = \" a  \";\n        res = StringUtils.splitPreserveAllTokens(str);\n        assertEquals(4, res.length);\n        assertEquals(\"\", res[0]);\n        assertEquals(\"a\", res[1]);\n        assertEquals(\"\", res[2]);\n        assertEquals(\"\", res[3]);\n\n        str = \" a  b\";\n        res = StringUtils.splitPreserveAllTokens(str);\n        assertEquals(4, res.length);\n        assertEquals(\"\", res[0]);\n        assertEquals(\"a\", res[1]);\n        assertEquals(\"\", res[2]);\n        assertEquals(\"b\", res[3]);\n\n        str = \"a\" + WHITESPACE + \"b\" + NON_WHITESPACE + \"c\";\n        res = StringUtils.splitPreserveAllTokens(str);\n        assertEquals(WHITESPACE.length() + 1, res.length);\n        assertEquals(\"a\", res[0]);\n        for(int i = 1; i < WHITESPACE.length()-1; i++)\n        {\n          assertEquals(\"\", res[i]);\n        }\n        assertEquals(\"b\" + NON_WHITESPACE + \"c\", res[WHITESPACE.length()]);                       \n    }\n",
        "begin_line": 587,
        "end_line": 661,
        "comment": "",
        "child_ranges": [
            "(line 589,col 9)-(line 589,col 74)",
            "(line 590,col 9)-(line 590,col 71)",
            "(line 592,col 9)-(line 592,col 31)",
            "(line 593,col 9)-(line 593,col 63)",
            "(line 594,col 9)-(line 594,col 36)",
            "(line 595,col 9)-(line 595,col 36)",
            "(line 596,col 9)-(line 596,col 36)",
            "(line 598,col 9)-(line 598,col 25)",
            "(line 599,col 9)-(line 599,col 54)",
            "(line 600,col 9)-(line 600,col 36)",
            "(line 601,col 9)-(line 601,col 36)",
            "(line 602,col 9)-(line 602,col 33)",
            "(line 603,col 9)-(line 603,col 36)",
            "(line 605,col 9)-(line 605,col 22)",
            "(line 606,col 9)-(line 606,col 54)",
            "(line 607,col 9)-(line 607,col 36)",
            "(line 608,col 9)-(line 608,col 33)",
            "(line 609,col 9)-(line 609,col 36)",
            "(line 610,col 9)-(line 610,col 33)",
            "(line 612,col 9)-(line 612,col 23)",
            "(line 613,col 9)-(line 613,col 54)",
            "(line 614,col 9)-(line 614,col 36)",
            "(line 615,col 9)-(line 615,col 34)",
            "(line 616,col 9)-(line 616,col 34)",
            "(line 617,col 9)-(line 617,col 35)",
            "(line 619,col 9)-(line 619,col 24)",
            "(line 620,col 9)-(line 620,col 54)",
            "(line 621,col 9)-(line 621,col 36)",
            "(line 622,col 9)-(line 622,col 33)",
            "(line 623,col 9)-(line 623,col 34)",
            "(line 624,col 9)-(line 624,col 34)",
            "(line 625,col 9)-(line 625,col 35)",
            "(line 627,col 9)-(line 627,col 25)",
            "(line 628,col 9)-(line 628,col 54)",
            "(line 629,col 9)-(line 629,col 36)",
            "(line 630,col 9)-(line 630,col 34)",
            "(line 631,col 9)-(line 631,col 33)",
            "(line 632,col 9)-(line 632,col 34)",
            "(line 633,col 9)-(line 633,col 33)",
            "(line 634,col 9)-(line 634,col 35)",
            "(line 636,col 9)-(line 636,col 21)",
            "(line 637,col 9)-(line 637,col 54)",
            "(line 638,col 9)-(line 638,col 36)",
            "(line 639,col 9)-(line 639,col 33)",
            "(line 640,col 9)-(line 640,col 34)",
            "(line 641,col 9)-(line 641,col 33)",
            "(line 642,col 9)-(line 642,col 33)",
            "(line 644,col 9)-(line 644,col 22)",
            "(line 645,col 9)-(line 645,col 54)",
            "(line 646,col 9)-(line 646,col 36)",
            "(line 647,col 9)-(line 647,col 33)",
            "(line 648,col 9)-(line 648,col 34)",
            "(line 649,col 9)-(line 649,col 33)",
            "(line 650,col 9)-(line 650,col 34)",
            "(line 652,col 9)-(line 652,col 60)",
            "(line 653,col 9)-(line 653,col 54)",
            "(line 654,col 9)-(line 654,col 58)",
            "(line 655,col 9)-(line 655,col 34)",
            "(line 656,col 9)-(line 659,col 9)",
            "(line 660,col 9)-(line 660,col 75)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.testSplitPreserveAllTokens_StringChar()",
        "snippet": "    @Test\n    public void testSplitPreserveAllTokens_StringChar() {\n        assertArrayEquals(null, StringUtils.splitPreserveAllTokens(null, '.'));\n        assertEquals(0, StringUtils.splitPreserveAllTokens(\"\", '.').length);\n\n        String str = \"a.b. c\";\n        String[] res = StringUtils.splitPreserveAllTokens(str, '.');\n        assertEquals(3, res.length);\n        assertEquals(\"a\", res[0]);\n        assertEquals(\"b\", res[1]);\n        assertEquals(\" c\", res[2]);\n            \n        str = \"a.b.. c\";\n        res = StringUtils.splitPreserveAllTokens(str, '.');\n        assertEquals(4, res.length);\n        assertEquals(\"a\", res[0]);\n        assertEquals(\"b\", res[1]);\n        assertEquals(\"\", res[2]);\n        assertEquals(\" c\", res[3]);\n\n        str = \".a.\";\n        res = StringUtils.splitPreserveAllTokens(str, '.');\n        assertEquals(3, res.length);\n        assertEquals(\"\", res[0]);\n        assertEquals(\"a\", res[1]);\n        assertEquals(\"\", res[2]);\n       \n        str = \".a..\";\n        res = StringUtils.splitPreserveAllTokens(str, '.');\n        assertEquals(4, res.length);\n        assertEquals(\"\", res[0]);\n        assertEquals(\"a\", res[1]);\n        assertEquals(\"\", res[2]);\n        assertEquals(\"\", res[3]);\n        \n        str = \"..a.\";\n        res = StringUtils.splitPreserveAllTokens(str, '.');\n        assertEquals(4, res.length);\n        assertEquals(\"\", res[0]);\n        assertEquals(\"\", res[1]);\n        assertEquals(\"a\", res[2]);\n        assertEquals(\"\", res[3]);\n        \n        str = \"..a\";\n        res = StringUtils.splitPreserveAllTokens(str, '.');\n        assertEquals(3, res.length);\n        assertEquals(\"\", res[0]);\n        assertEquals(\"\", res[1]);\n        assertEquals(\"a\", res[2]);\n        \n        str = \"a b c\";\n        res = StringUtils.splitPreserveAllTokens(str,' ');\n        assertEquals(3, res.length);\n        assertEquals(\"a\", res[0]);\n        assertEquals(\"b\", res[1]);\n        assertEquals(\"c\", res[2]);\n\n        str = \"a  b  c\";\n        res = StringUtils.splitPreserveAllTokens(str,' ');\n        assertEquals(5, res.length);\n        assertEquals(\"a\", res[0]);\n        assertEquals(\"\", res[1]);\n        assertEquals(\"b\", res[2]);\n        assertEquals(\"\", res[3]);\n        assertEquals(\"c\", res[4]);\n        \n        str = \" a b c\";\n        res = StringUtils.splitPreserveAllTokens(str,' ');\n        assertEquals(4, res.length);\n        assertEquals(\"\", res[0]);\n        assertEquals(\"a\", res[1]);\n        assertEquals(\"b\", res[2]);\n        assertEquals(\"c\", res[3]);\n\n        str = \"  a b c\";\n        res = StringUtils.splitPreserveAllTokens(str,' ');\n        assertEquals(5, res.length);\n        assertEquals(\"\", res[0]);\n        assertEquals(\"\", res[1]);\n        assertEquals(\"a\", res[2]);\n        assertEquals(\"b\", res[3]);\n        assertEquals(\"c\", res[4]);\n\n        str = \"a b c \";\n        res = StringUtils.splitPreserveAllTokens(str,' ');\n        assertEquals(4, res.length);\n        assertEquals(\"a\", res[0]);\n        assertEquals(\"b\", res[1]);\n        assertEquals(\"c\", res[2]);\n        assertEquals(\"\", res[3]);\n\n        str = \"a b c  \";\n        res = StringUtils.splitPreserveAllTokens(str,' ');\n        assertEquals(5, res.length);\n        assertEquals(\"a\", res[0]);\n        assertEquals(\"b\", res[1]);\n        assertEquals(\"c\", res[2]);\n        assertEquals(\"\", res[3]);\n        assertEquals(\"\", res[3]);\n\n        // Match example in javadoc\n        {\n          String[] results;\n          String[] expectedResults = {\"a\", \"\", \"b\", \"c\"};\n          results = StringUtils.splitPreserveAllTokens(\"a..b.c\",'.');\n          assertEquals(expectedResults.length, results.length);\n          for (int i = 0; i < expectedResults.length; i++) {\n              assertEquals(expectedResults[i], results[i]);\n          }\n        }\n    }\n",
        "begin_line": 663,
        "end_line": 773,
        "comment": "",
        "child_ranges": [
            "(line 665,col 9)-(line 665,col 79)",
            "(line 666,col 9)-(line 666,col 76)",
            "(line 668,col 9)-(line 668,col 30)",
            "(line 669,col 9)-(line 669,col 68)",
            "(line 670,col 9)-(line 670,col 36)",
            "(line 671,col 9)-(line 671,col 34)",
            "(line 672,col 9)-(line 672,col 34)",
            "(line 673,col 9)-(line 673,col 35)",
            "(line 675,col 9)-(line 675,col 24)",
            "(line 676,col 9)-(line 676,col 59)",
            "(line 677,col 9)-(line 677,col 36)",
            "(line 678,col 9)-(line 678,col 34)",
            "(line 679,col 9)-(line 679,col 34)",
            "(line 680,col 9)-(line 680,col 33)",
            "(line 681,col 9)-(line 681,col 35)",
            "(line 683,col 9)-(line 683,col 20)",
            "(line 684,col 9)-(line 684,col 59)",
            "(line 685,col 9)-(line 685,col 36)",
            "(line 686,col 9)-(line 686,col 33)",
            "(line 687,col 9)-(line 687,col 34)",
            "(line 688,col 9)-(line 688,col 33)",
            "(line 690,col 9)-(line 690,col 21)",
            "(line 691,col 9)-(line 691,col 59)",
            "(line 692,col 9)-(line 692,col 36)",
            "(line 693,col 9)-(line 693,col 33)",
            "(line 694,col 9)-(line 694,col 34)",
            "(line 695,col 9)-(line 695,col 33)",
            "(line 696,col 9)-(line 696,col 33)",
            "(line 698,col 9)-(line 698,col 21)",
            "(line 699,col 9)-(line 699,col 59)",
            "(line 700,col 9)-(line 700,col 36)",
            "(line 701,col 9)-(line 701,col 33)",
            "(line 702,col 9)-(line 702,col 33)",
            "(line 703,col 9)-(line 703,col 34)",
            "(line 704,col 9)-(line 704,col 33)",
            "(line 706,col 9)-(line 706,col 20)",
            "(line 707,col 9)-(line 707,col 59)",
            "(line 708,col 9)-(line 708,col 36)",
            "(line 709,col 9)-(line 709,col 33)",
            "(line 710,col 9)-(line 710,col 33)",
            "(line 711,col 9)-(line 711,col 34)",
            "(line 713,col 9)-(line 713,col 22)",
            "(line 714,col 9)-(line 714,col 58)",
            "(line 715,col 9)-(line 715,col 36)",
            "(line 716,col 9)-(line 716,col 34)",
            "(line 717,col 9)-(line 717,col 34)",
            "(line 718,col 9)-(line 718,col 34)",
            "(line 720,col 9)-(line 720,col 24)",
            "(line 721,col 9)-(line 721,col 58)",
            "(line 722,col 9)-(line 722,col 36)",
            "(line 723,col 9)-(line 723,col 34)",
            "(line 724,col 9)-(line 724,col 33)",
            "(line 725,col 9)-(line 725,col 34)",
            "(line 726,col 9)-(line 726,col 33)",
            "(line 727,col 9)-(line 727,col 34)",
            "(line 729,col 9)-(line 729,col 23)",
            "(line 730,col 9)-(line 730,col 58)",
            "(line 731,col 9)-(line 731,col 36)",
            "(line 732,col 9)-(line 732,col 33)",
            "(line 733,col 9)-(line 733,col 34)",
            "(line 734,col 9)-(line 734,col 34)",
            "(line 735,col 9)-(line 735,col 34)",
            "(line 737,col 9)-(line 737,col 24)",
            "(line 738,col 9)-(line 738,col 58)",
            "(line 739,col 9)-(line 739,col 36)",
            "(line 740,col 9)-(line 740,col 33)",
            "(line 741,col 9)-(line 741,col 33)",
            "(line 742,col 9)-(line 742,col 34)",
            "(line 743,col 9)-(line 743,col 34)",
            "(line 744,col 9)-(line 744,col 34)",
            "(line 746,col 9)-(line 746,col 23)",
            "(line 747,col 9)-(line 747,col 58)",
            "(line 748,col 9)-(line 748,col 36)",
            "(line 749,col 9)-(line 749,col 34)",
            "(line 750,col 9)-(line 750,col 34)",
            "(line 751,col 9)-(line 751,col 34)",
            "(line 752,col 9)-(line 752,col 33)",
            "(line 754,col 9)-(line 754,col 24)",
            "(line 755,col 9)-(line 755,col 58)",
            "(line 756,col 9)-(line 756,col 36)",
            "(line 757,col 9)-(line 757,col 34)",
            "(line 758,col 9)-(line 758,col 34)",
            "(line 759,col 9)-(line 759,col 34)",
            "(line 760,col 9)-(line 760,col 33)",
            "(line 761,col 9)-(line 761,col 33)",
            "(line 764,col 9)-(line 772,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.testSplitPreserveAllTokens_StringString_StringStringInt()",
        "snippet": "    @Test\n    public void testSplitPreserveAllTokens_StringString_StringStringInt() {\n        assertArrayEquals(null, StringUtils.splitPreserveAllTokens(null, \".\"));\n        assertArrayEquals(null, StringUtils.splitPreserveAllTokens(null, \".\", 3));\n        \n        assertEquals(0, StringUtils.splitPreserveAllTokens(\"\", \".\").length);\n        assertEquals(0, StringUtils.splitPreserveAllTokens(\"\", \".\", 3).length);\n        \n        innerTestSplitPreserveAllTokens('.', \".\", ' ');\n        innerTestSplitPreserveAllTokens('.', \".\", ',');\n        innerTestSplitPreserveAllTokens('.', \".,\", 'x');\n        for (int i = 0; i < WHITESPACE.length(); i++) {\n            for (int j = 0; j < NON_WHITESPACE.length(); j++) {\n                innerTestSplitPreserveAllTokens(WHITESPACE.charAt(i), null, NON_WHITESPACE.charAt(j));\n                innerTestSplitPreserveAllTokens(WHITESPACE.charAt(i), String.valueOf(WHITESPACE.charAt(i)), NON_WHITESPACE.charAt(j));\n            }\n        }\n\n        {\n          String[] results;\n          String[] expectedResults = {\"ab\", \"de fg\"};\n          results = StringUtils.splitPreserveAllTokens(\"ab de fg\", null, 2);\n          assertEquals(expectedResults.length, results.length);\n          for (int i = 0; i < expectedResults.length; i++) {\n              assertEquals(expectedResults[i], results[i]);\n          }\n        }\n\n        {\n          String[] results;\n          String[] expectedResults = {\"ab\", \"  de fg\"};\n          results = StringUtils.splitPreserveAllTokens(\"ab   de fg\", null, 2);\n          assertEquals(expectedResults.length, results.length);\n          for (int i = 0; i < expectedResults.length; i++) {\n              assertEquals(expectedResults[i], results[i]);\n          }\n        }\n        \n        {\n          String[] results;\n          String[] expectedResults = {\"ab\", \"::de:fg\"};\n          results = StringUtils.splitPreserveAllTokens(\"ab:::de:fg\", \":\", 2);\n          assertEquals(expectedResults.length, results.length);\n          for (int i = 0; i < expectedResults.length; i++) {\n              assertEquals(expectedResults[i], results[i]);\n          }\n        }\n        \n        {\n          String[] results;\n          String[] expectedResults = {\"ab\", \"\", \" de fg\"};\n          results = StringUtils.splitPreserveAllTokens(\"ab   de fg\", null, 3);\n          assertEquals(expectedResults.length, results.length);\n          for (int i = 0; i < expectedResults.length; i++) {\n              assertEquals(expectedResults[i], results[i]);\n          }\n        }\n        \n        {\n          String[] results;\n          String[] expectedResults = {\"ab\", \"\", \"\", \"de fg\"};\n          results = StringUtils.splitPreserveAllTokens(\"ab   de fg\", null, 4);\n          assertEquals(expectedResults.length, results.length);\n          for (int i = 0; i < expectedResults.length; i++) {\n              assertEquals(expectedResults[i], results[i]);\n          }\n        }\n\n        {\n          String[] expectedResults = {\"ab\", \"cd:ef\"};\n          String[] results;\n          results = StringUtils.splitPreserveAllTokens(\"ab:cd:ef\",\":\", 2);\n          assertEquals(expectedResults.length, results.length);\n          for (int i = 0; i < expectedResults.length; i++) {\n              assertEquals(expectedResults[i], results[i]);\n          }\n        }\n\n        {\n          String[] results;\n          String[] expectedResults = {\"ab\", \":cd:ef\"};\n          results = StringUtils.splitPreserveAllTokens(\"ab::cd:ef\",\":\", 2);\n          assertEquals(expectedResults.length, results.length);\n          for (int i = 0; i < expectedResults.length; i++) {\n              assertEquals(expectedResults[i], results[i]);\n          }\n        }\n\n        {\n          String[] results;\n          String[] expectedResults = {\"ab\", \"\", \":cd:ef\"};\n          results = StringUtils.splitPreserveAllTokens(\"ab:::cd:ef\",\":\", 3);\n          assertEquals(expectedResults.length, results.length);\n          for (int i = 0; i < expectedResults.length; i++) {\n              assertEquals(expectedResults[i], results[i]);\n          }\n        }\n\n        {\n          String[] results;\n          String[] expectedResults = {\"ab\", \"\", \"\", \"cd:ef\"};\n          results = StringUtils.splitPreserveAllTokens(\"ab:::cd:ef\",\":\", 4);\n          assertEquals(expectedResults.length, results.length);\n          for (int i = 0; i < expectedResults.length; i++) {\n              assertEquals(expectedResults[i], results[i]);\n          }\n        }\n\n        {\n          String[] results;\n          String[] expectedResults = {\"\", \"ab\", \"\", \"\", \"cd:ef\"};\n          results = StringUtils.splitPreserveAllTokens(\":ab:::cd:ef\",\":\", 5);\n          assertEquals(expectedResults.length, results.length);\n          for (int i = 0; i < expectedResults.length; i++) {\n              assertEquals(expectedResults[i], results[i]);\n          }\n        }\n        \n        {\n          String[] results;\n          String[] expectedResults = {\"\", \"\", \"ab\", \"\", \"\", \"cd:ef\"};\n          results = StringUtils.splitPreserveAllTokens(\"::ab:::cd:ef\",\":\", 6);\n          assertEquals(expectedResults.length, results.length);\n          for (int i = 0; i < expectedResults.length; i++) {\n              assertEquals(expectedResults[i], results[i]);\n          }\n        }\n        \n    }\n",
        "begin_line": 775,
        "end_line": 903,
        "comment": "",
        "child_ranges": [
            "(line 777,col 9)-(line 777,col 79)",
            "(line 778,col 9)-(line 778,col 82)",
            "(line 780,col 9)-(line 780,col 76)",
            "(line 781,col 9)-(line 781,col 79)",
            "(line 783,col 9)-(line 783,col 55)",
            "(line 784,col 9)-(line 784,col 55)",
            "(line 785,col 9)-(line 785,col 56)",
            "(line 786,col 9)-(line 791,col 9)",
            "(line 793,col 9)-(line 801,col 9)",
            "(line 803,col 9)-(line 811,col 9)",
            "(line 813,col 9)-(line 821,col 9)",
            "(line 823,col 9)-(line 831,col 9)",
            "(line 833,col 9)-(line 841,col 9)",
            "(line 843,col 9)-(line 851,col 9)",
            "(line 853,col 9)-(line 861,col 9)",
            "(line 863,col 9)-(line 871,col 9)",
            "(line 873,col 9)-(line 881,col 9)",
            "(line 883,col 9)-(line 891,col 9)",
            "(line 893,col 9)-(line 901,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.innerTestSplitPreserveAllTokens(char, java.lang.String, char)",
        "snippet": "    private void innerTestSplitPreserveAllTokens(char separator, String sepStr, char noMatch) {\n        String msg = \"Failed on separator hex(\" + Integer.toHexString(separator) +\n            \"), noMatch hex(\" + Integer.toHexString(noMatch) + \"), sepStr(\" + sepStr + \")\";\n        \n        final String str = \"a\" + separator + \"b\" + separator + separator + noMatch + \"c\";\n        String[] res;\n        // (str, sepStr)\n        res = StringUtils.splitPreserveAllTokens(str, sepStr);\n        assertEquals(msg, 4, res.length);\n        assertEquals(msg, \"a\", res[0]);\n        assertEquals(msg, \"b\", res[1]);\n        assertEquals(msg, \"\", res[2]);\n        assertEquals(msg, noMatch + \"c\", res[3]);\n        \n        final String str2 = separator + \"a\" + separator;\n        res = StringUtils.splitPreserveAllTokens(str2, sepStr);\n        assertEquals(msg, 3, res.length);\n        assertEquals(msg, \"\", res[0]);\n        assertEquals(msg, \"a\", res[1]);\n        assertEquals(msg, \"\", res[2]);\n\n        res = StringUtils.splitPreserveAllTokens(str, sepStr, -1);\n        assertEquals(msg, 4, res.length);\n        assertEquals(msg, \"a\", res[0]);\n        assertEquals(msg, \"b\", res[1]);\n        assertEquals(msg, \"\", res[2]);\n        assertEquals(msg, noMatch + \"c\", res[3]);\n        \n        res = StringUtils.splitPreserveAllTokens(str, sepStr, 0);\n        assertEquals(msg, 4, res.length);\n        assertEquals(msg, \"a\", res[0]);\n        assertEquals(msg, \"b\", res[1]);\n        assertEquals(msg, \"\", res[2]);\n        assertEquals(msg, noMatch + \"c\", res[3]);\n        \n        res = StringUtils.splitPreserveAllTokens(str, sepStr, 1);\n        assertEquals(msg, 1, res.length);\n        assertEquals(msg, str, res[0]);\n        \n        res = StringUtils.splitPreserveAllTokens(str, sepStr, 2);\n        assertEquals(msg, 2, res.length);\n        assertEquals(msg, \"a\", res[0]);\n        assertEquals(msg, str.substring(2), res[1]);\n    }\n",
        "begin_line": 905,
        "end_line": 948,
        "comment": "",
        "child_ranges": [
            "(line 906,col 9)-(line 907,col 91)",
            "(line 909,col 9)-(line 909,col 89)",
            "(line 910,col 9)-(line 910,col 21)",
            "(line 912,col 9)-(line 912,col 62)",
            "(line 913,col 9)-(line 913,col 41)",
            "(line 914,col 9)-(line 914,col 39)",
            "(line 915,col 9)-(line 915,col 39)",
            "(line 916,col 9)-(line 916,col 38)",
            "(line 917,col 9)-(line 917,col 49)",
            "(line 919,col 9)-(line 919,col 56)",
            "(line 920,col 9)-(line 920,col 63)",
            "(line 921,col 9)-(line 921,col 41)",
            "(line 922,col 9)-(line 922,col 38)",
            "(line 923,col 9)-(line 923,col 39)",
            "(line 924,col 9)-(line 924,col 38)",
            "(line 926,col 9)-(line 926,col 66)",
            "(line 927,col 9)-(line 927,col 41)",
            "(line 928,col 9)-(line 928,col 39)",
            "(line 929,col 9)-(line 929,col 39)",
            "(line 930,col 9)-(line 930,col 38)",
            "(line 931,col 9)-(line 931,col 49)",
            "(line 933,col 9)-(line 933,col 65)",
            "(line 934,col 9)-(line 934,col 41)",
            "(line 935,col 9)-(line 935,col 39)",
            "(line 936,col 9)-(line 936,col 39)",
            "(line 937,col 9)-(line 937,col 38)",
            "(line 938,col 9)-(line 938,col 49)",
            "(line 940,col 9)-(line 940,col 65)",
            "(line 941,col 9)-(line 941,col 41)",
            "(line 942,col 9)-(line 942,col 39)",
            "(line 944,col 9)-(line 944,col 65)",
            "(line 945,col 9)-(line 945,col 41)",
            "(line 946,col 9)-(line 946,col 39)",
            "(line 947,col 9)-(line 947,col 52)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.testSplitByCharacterType()",
        "snippet": "    @Test\n    public void testSplitByCharacterType() {\n        assertNull(StringUtils.splitByCharacterType(null));\n        assertEquals(0, StringUtils.splitByCharacterType(\"\").length);\n        \n        assertTrue(ArrayUtils.isEquals(new String[] { \"ab\", \" \", \"de\", \" \",\n        \"fg\" }, StringUtils.splitByCharacterType(\"ab de fg\")));\n        \n        assertTrue(ArrayUtils.isEquals(new String[] { \"ab\", \"   \", \"de\", \" \",\n        \"fg\" }, StringUtils.splitByCharacterType(\"ab   de fg\")));\n        \n        assertTrue(ArrayUtils.isEquals(new String[] { \"ab\", \":\", \"cd\", \":\",\n        \"ef\" }, StringUtils.splitByCharacterType(\"ab:cd:ef\")));\n        \n        assertTrue(ArrayUtils.isEquals(new String[] { \"number\", \"5\" },\n                StringUtils.splitByCharacterType(\"number5\")));\n        \n        assertTrue(ArrayUtils.isEquals(new String[] { \"foo\", \"B\", \"ar\" },\n                StringUtils.splitByCharacterType(\"fooBar\")));\n        \n        assertTrue(ArrayUtils.isEquals(new String[] { \"foo\", \"200\", \"B\", \"ar\" },\n                StringUtils.splitByCharacterType(\"foo200Bar\")));\n        \n        assertTrue(ArrayUtils.isEquals(new String[] { \"ASFR\", \"ules\" },\n                StringUtils.splitByCharacterType(\"ASFRules\")));\n    }\n",
        "begin_line": 950,
        "end_line": 975,
        "comment": "",
        "child_ranges": [
            "(line 952,col 9)-(line 952,col 59)",
            "(line 953,col 9)-(line 953,col 69)",
            "(line 955,col 9)-(line 956,col 63)",
            "(line 958,col 9)-(line 959,col 65)",
            "(line 961,col 9)-(line 962,col 63)",
            "(line 964,col 9)-(line 965,col 62)",
            "(line 967,col 9)-(line 968,col 61)",
            "(line 970,col 9)-(line 971,col 64)",
            "(line 973,col 9)-(line 974,col 63)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.testSplitByCharacterTypeCamelCase()",
        "snippet": "    @Test\n    public void testSplitByCharacterTypeCamelCase() {\n        assertNull(StringUtils.splitByCharacterTypeCamelCase(null));\n        assertEquals(0, StringUtils.splitByCharacterTypeCamelCase(\"\").length);\n\n        assertTrue(ArrayUtils.isEquals(new String[] { \"ab\", \" \", \"de\", \" \",\n                \"fg\" }, StringUtils.splitByCharacterTypeCamelCase(\"ab de fg\")));\n\n        assertTrue(ArrayUtils.isEquals(new String[] { \"ab\", \"   \", \"de\", \" \",\n                \"fg\" }, StringUtils.splitByCharacterTypeCamelCase(\"ab   de fg\")));\n\n        assertTrue(ArrayUtils.isEquals(new String[] { \"ab\", \":\", \"cd\", \":\",\n                \"ef\" }, StringUtils.splitByCharacterTypeCamelCase(\"ab:cd:ef\")));\n        \n        assertTrue(ArrayUtils.isEquals(new String[] { \"number\", \"5\" },\n                StringUtils.splitByCharacterTypeCamelCase(\"number5\")));\n\n        assertTrue(ArrayUtils.isEquals(new String[] { \"foo\", \"Bar\" },\n                StringUtils.splitByCharacterTypeCamelCase(\"fooBar\")));\n\n        assertTrue(ArrayUtils.isEquals(new String[] { \"foo\", \"200\", \"Bar\" },\n                StringUtils.splitByCharacterTypeCamelCase(\"foo200Bar\")));\n\n        assertTrue(ArrayUtils.isEquals(new String[] { \"ASF\", \"Rules\" },\n                StringUtils.splitByCharacterTypeCamelCase(\"ASFRules\")));\n    }\n",
        "begin_line": 977,
        "end_line": 1002,
        "comment": "",
        "child_ranges": [
            "(line 979,col 9)-(line 979,col 68)",
            "(line 980,col 9)-(line 980,col 78)",
            "(line 982,col 9)-(line 983,col 80)",
            "(line 985,col 9)-(line 986,col 82)",
            "(line 988,col 9)-(line 989,col 80)",
            "(line 991,col 9)-(line 992,col 71)",
            "(line 994,col 9)-(line 995,col 70)",
            "(line 997,col 9)-(line 998,col 73)",
            "(line 1000,col 9)-(line 1001,col 72)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.testDeleteWhitespace_String()",
        "snippet": "    @Test\n    public void testDeleteWhitespace_String() {\n        assertEquals(null, StringUtils.deleteWhitespace(null));\n        assertEquals(\"\", StringUtils.deleteWhitespace(\"\"));\n        assertEquals(\"\", StringUtils.deleteWhitespace(\"  \\u000C  \\t\\t\\u001F\\n\\n \\u000B  \"));\n        assertEquals(\"\", StringUtils.deleteWhitespace(StringUtilsTest.WHITESPACE));\n        assertEquals(StringUtilsTest.NON_WHITESPACE, StringUtils.deleteWhitespace(StringUtilsTest.NON_WHITESPACE));\n        // Note: u-2007 and u-000A both cause problems in the source code\n        // it should ignore 2007 but delete 000A\n        assertEquals(\"\\u00A0\\u202F\", StringUtils.deleteWhitespace(\"  \\u00A0  \\t\\t\\n\\n \\u202F  \"));\n        assertEquals(\"\\u00A0\\u202F\", StringUtils.deleteWhitespace(\"\\u00A0\\u202F\"));\n        assertEquals(\"test\", StringUtils.deleteWhitespace(\"\\u000Bt  \\t\\n\\u0009e\\rs\\n\\n   \\tt\"));\n    }\n",
        "begin_line": 1004,
        "end_line": 1016,
        "comment": "",
        "child_ranges": [
            "(line 1006,col 9)-(line 1006,col 63)",
            "(line 1007,col 9)-(line 1007,col 59)",
            "(line 1008,col 9)-(line 1008,col 92)",
            "(line 1009,col 9)-(line 1009,col 83)",
            "(line 1010,col 9)-(line 1010,col 115)",
            "(line 1013,col 9)-(line 1013,col 98)",
            "(line 1014,col 9)-(line 1014,col 83)",
            "(line 1015,col 9)-(line 1015,col 96)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.testLang623()",
        "snippet": "    @Test\n    public void testLang623() {\n        assertEquals(\"t\", StringUtils.replaceChars(\"\\u00DE\", '\\u00DE', 't'));\n        assertEquals(\"t\", StringUtils.replaceChars(\"\\u00FE\", '\\u00FE', 't'));\n    }\n",
        "begin_line": 1018,
        "end_line": 1022,
        "comment": "",
        "child_ranges": [
            "(line 1020,col 9)-(line 1020,col 77)",
            "(line 1021,col 9)-(line 1021,col 77)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.testReplace_StringStringString()",
        "snippet": "    @Test\n    public void testReplace_StringStringString() {\n        assertEquals(null, StringUtils.replace(null, null, null));\n        assertEquals(null, StringUtils.replace(null, null, \"any\"));\n        assertEquals(null, StringUtils.replace(null, \"any\", null));\n        assertEquals(null, StringUtils.replace(null, \"any\", \"any\"));\n\n        assertEquals(\"\", StringUtils.replace(\"\", null, null));\n        assertEquals(\"\", StringUtils.replace(\"\", null, \"any\"));\n        assertEquals(\"\", StringUtils.replace(\"\", \"any\", null));\n        assertEquals(\"\", StringUtils.replace(\"\", \"any\", \"any\"));\n\n        assertEquals(\"FOO\", StringUtils.replace(\"FOO\", \"\", \"any\"));\n        assertEquals(\"FOO\", StringUtils.replace(\"FOO\", null, \"any\"));\n        assertEquals(\"FOO\", StringUtils.replace(\"FOO\", \"F\", null));\n        assertEquals(\"FOO\", StringUtils.replace(\"FOO\", null, null));\n\n        assertEquals(\"\", StringUtils.replace(\"foofoofoo\", \"foo\", \"\"));\n        assertEquals(\"barbarbar\", StringUtils.replace(\"foofoofoo\", \"foo\", \"bar\"));\n        assertEquals(\"farfarfar\", StringUtils.replace(\"foofoofoo\", \"oo\", \"ar\"));\n    }\n",
        "begin_line": 1024,
        "end_line": 1044,
        "comment": "",
        "child_ranges": [
            "(line 1026,col 9)-(line 1026,col 66)",
            "(line 1027,col 9)-(line 1027,col 67)",
            "(line 1028,col 9)-(line 1028,col 67)",
            "(line 1029,col 9)-(line 1029,col 68)",
            "(line 1031,col 9)-(line 1031,col 62)",
            "(line 1032,col 9)-(line 1032,col 63)",
            "(line 1033,col 9)-(line 1033,col 63)",
            "(line 1034,col 9)-(line 1034,col 64)",
            "(line 1036,col 9)-(line 1036,col 67)",
            "(line 1037,col 9)-(line 1037,col 69)",
            "(line 1038,col 9)-(line 1038,col 67)",
            "(line 1039,col 9)-(line 1039,col 68)",
            "(line 1041,col 9)-(line 1041,col 70)",
            "(line 1042,col 9)-(line 1042,col 82)",
            "(line 1043,col 9)-(line 1043,col 80)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.testReplacePattern()",
        "snippet": "    @Test\n    public void testReplacePattern() {\n        assertEquals(\"X\", StringUtils.replacePattern(\"<A>\\nxy\\n</A>\", \"<A>.*</A>\", \"X\"));\n    }\n",
        "begin_line": 1046,
        "end_line": 1049,
        "comment": "",
        "child_ranges": [
            "(line 1048,col 9)-(line 1048,col 89)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.testRemovePattern()",
        "snippet": "    @Test\n    public void testRemovePattern() {\n        assertEquals(\"\", StringUtils.removePattern(\"<A>x\\\\ny</A>\", \"<A>.*</A>\"));\n    }\n",
        "begin_line": 1051,
        "end_line": 1054,
        "comment": "",
        "child_ranges": [
            "(line 1053,col 9)-(line 1053,col 81)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.testReplace_StringStringStringInt()",
        "snippet": "    @Test\n    public void testReplace_StringStringStringInt() {\n        assertEquals(null, StringUtils.replace(null, null, null, 2));\n        assertEquals(null, StringUtils.replace(null, null, \"any\", 2));\n        assertEquals(null, StringUtils.replace(null, \"any\", null, 2));\n        assertEquals(null, StringUtils.replace(null, \"any\", \"any\", 2));\n\n        assertEquals(\"\", StringUtils.replace(\"\", null, null, 2));\n        assertEquals(\"\", StringUtils.replace(\"\", null, \"any\", 2));\n        assertEquals(\"\", StringUtils.replace(\"\", \"any\", null, 2));\n        assertEquals(\"\", StringUtils.replace(\"\", \"any\", \"any\", 2));\n        \n        String str = new String(new char[] {'o', 'o', 'f', 'o', 'o'});\n        assertSame(str, StringUtils.replace(str, \"x\", \"\", -1));\n        \n        assertEquals(\"f\", StringUtils.replace(\"oofoo\", \"o\", \"\", -1));\n        assertEquals(\"oofoo\", StringUtils.replace(\"oofoo\", \"o\", \"\", 0));\n        assertEquals(\"ofoo\", StringUtils.replace(\"oofoo\", \"o\", \"\", 1));\n        assertEquals(\"foo\", StringUtils.replace(\"oofoo\", \"o\", \"\", 2));\n        assertEquals(\"fo\", StringUtils.replace(\"oofoo\", \"o\", \"\", 3));\n        assertEquals(\"f\", StringUtils.replace(\"oofoo\", \"o\", \"\", 4));\n        \n        assertEquals(\"f\", StringUtils.replace(\"oofoo\", \"o\", \"\", -5));\n        assertEquals(\"f\", StringUtils.replace(\"oofoo\", \"o\", \"\", 1000));\n    }\n",
        "begin_line": 1056,
        "end_line": 1080,
        "comment": "",
        "child_ranges": [
            "(line 1058,col 9)-(line 1058,col 69)",
            "(line 1059,col 9)-(line 1059,col 70)",
            "(line 1060,col 9)-(line 1060,col 70)",
            "(line 1061,col 9)-(line 1061,col 71)",
            "(line 1063,col 9)-(line 1063,col 65)",
            "(line 1064,col 9)-(line 1064,col 66)",
            "(line 1065,col 9)-(line 1065,col 66)",
            "(line 1066,col 9)-(line 1066,col 67)",
            "(line 1068,col 9)-(line 1068,col 70)",
            "(line 1069,col 9)-(line 1069,col 63)",
            "(line 1071,col 9)-(line 1071,col 69)",
            "(line 1072,col 9)-(line 1072,col 72)",
            "(line 1073,col 9)-(line 1073,col 71)",
            "(line 1074,col 9)-(line 1074,col 70)",
            "(line 1075,col 9)-(line 1075,col 69)",
            "(line 1076,col 9)-(line 1076,col 68)",
            "(line 1078,col 9)-(line 1078,col 69)",
            "(line 1079,col 9)-(line 1079,col 71)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.testReplaceOnce_StringStringString()",
        "snippet": "    @Test\n    public void testReplaceOnce_StringStringString() {\n        assertEquals(null, StringUtils.replaceOnce(null, null, null));\n        assertEquals(null, StringUtils.replaceOnce(null, null, \"any\"));\n        assertEquals(null, StringUtils.replaceOnce(null, \"any\", null));\n        assertEquals(null, StringUtils.replaceOnce(null, \"any\", \"any\"));\n\n        assertEquals(\"\", StringUtils.replaceOnce(\"\", null, null));\n        assertEquals(\"\", StringUtils.replaceOnce(\"\", null, \"any\"));\n        assertEquals(\"\", StringUtils.replaceOnce(\"\", \"any\", null));\n        assertEquals(\"\", StringUtils.replaceOnce(\"\", \"any\", \"any\"));\n\n        assertEquals(\"FOO\", StringUtils.replaceOnce(\"FOO\", \"\", \"any\"));\n        assertEquals(\"FOO\", StringUtils.replaceOnce(\"FOO\", null, \"any\"));\n        assertEquals(\"FOO\", StringUtils.replaceOnce(\"FOO\", \"F\", null));\n        assertEquals(\"FOO\", StringUtils.replaceOnce(\"FOO\", null, null));\n\n        assertEquals(\"foofoo\", StringUtils.replaceOnce(\"foofoofoo\", \"foo\", \"\"));\n    }\n",
        "begin_line": 1082,
        "end_line": 1100,
        "comment": "",
        "child_ranges": [
            "(line 1084,col 9)-(line 1084,col 70)",
            "(line 1085,col 9)-(line 1085,col 71)",
            "(line 1086,col 9)-(line 1086,col 71)",
            "(line 1087,col 9)-(line 1087,col 72)",
            "(line 1089,col 9)-(line 1089,col 66)",
            "(line 1090,col 9)-(line 1090,col 67)",
            "(line 1091,col 9)-(line 1091,col 67)",
            "(line 1092,col 9)-(line 1092,col 68)",
            "(line 1094,col 9)-(line 1094,col 71)",
            "(line 1095,col 9)-(line 1095,col 73)",
            "(line 1096,col 9)-(line 1096,col 71)",
            "(line 1097,col 9)-(line 1097,col 72)",
            "(line 1099,col 9)-(line 1099,col 80)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.testReplace_StringStringArrayStringArray()",
        "snippet": "    @Test\n    public void testReplace_StringStringArrayStringArray() {\n        //JAVADOC TESTS START\n        assertNull(StringUtils.replaceEach(null, new String[]{\"a\"}, new String[]{\"b\"}));\n        assertEquals(StringUtils.replaceEach(\"\", new String[]{\"a\"}, new String[]{\"b\"}),\"\");\n        assertEquals(StringUtils.replaceEach(\"aba\", null, null),\"aba\");\n        assertEquals(StringUtils.replaceEach(\"aba\", new String[0], null),\"aba\");\n        assertEquals(StringUtils.replaceEach(\"aba\", null, new String[0]),\"aba\");\n        assertEquals(StringUtils.replaceEach(\"aba\", new String[]{\"a\"}, null),\"aba\");\n\n        assertEquals(StringUtils.replaceEach(\"aba\", new String[]{\"a\"}, new String[]{\"\"}),\"b\");\n        assertEquals(StringUtils.replaceEach(\"aba\", new String[]{null}, new String[]{\"a\"}),\"aba\");\n        assertEquals(StringUtils.replaceEach(\"abcde\", new String[]{\"ab\", \"d\"}, new String[]{\"w\", \"t\"}),\"wcte\");\n        assertEquals(StringUtils.replaceEach(\"abcde\", new String[]{\"ab\", \"d\"}, new String[]{\"d\", \"t\"}),\"dcte\");\n        //JAVADOC TESTS END\n\n        assertEquals(\"bcc\", StringUtils.replaceEach(\"abc\", new String[]{\"a\", \"b\"}, new String[]{\"b\", \"c\"}));\n        assertEquals(\"q651.506bera\", StringUtils.replaceEach(\"d216.102oren\",\n            new String[]{\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \n                \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"A\", \"B\", \"C\", \"D\", \n                \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\", \"Q\", \"R\", \"S\", \"T\", \n                \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"},\n            new String[]{\"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"a\", \n                \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"N\", \"O\", \"P\", \"Q\", \n                \"R\", \"S\", \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \n                \"H\", \"I\", \"J\", \"K\", \"L\", \"M\", \"5\", \"6\", \"7\", \"8\", \"9\", \"1\", \"2\", \"3\", \"4\"}));\n\n        // Test null safety inside arrays - LANG-552\n        assertEquals(StringUtils.replaceEach(\"aba\", new String[]{\"a\"}, new String[]{null}),\"aba\");\n        assertEquals(StringUtils.replaceEach(\"aba\", new String[]{\"a\", \"b\"}, new String[]{\"c\", null}),\"cbc\");\n    }\n",
        "begin_line": 1105,
        "end_line": 1135,
        "comment": "\n     * Test method for 'StringUtils.replaceEach(String, String[], String[])'\n     ",
        "child_ranges": [
            "(line 1108,col 9)-(line 1108,col 88)",
            "(line 1109,col 9)-(line 1109,col 91)",
            "(line 1110,col 9)-(line 1110,col 71)",
            "(line 1111,col 9)-(line 1111,col 80)",
            "(line 1112,col 9)-(line 1112,col 80)",
            "(line 1113,col 9)-(line 1113,col 84)",
            "(line 1115,col 9)-(line 1115,col 94)",
            "(line 1116,col 9)-(line 1116,col 98)",
            "(line 1117,col 9)-(line 1117,col 111)",
            "(line 1118,col 9)-(line 1118,col 111)",
            "(line 1121,col 9)-(line 1121,col 108)",
            "(line 1122,col 9)-(line 1130,col 93)",
            "(line 1133,col 9)-(line 1133,col 98)",
            "(line 1134,col 9)-(line 1134,col 108)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.testReplace_StringStringArrayStringArrayBoolean()",
        "snippet": "    @Test\n    public void testReplace_StringStringArrayStringArrayBoolean() {\n        //JAVADOC TESTS START\n        assertNull(StringUtils.replaceEachRepeatedly(null, new String[]{\"a\"}, new String[]{\"b\"}));\n        assertEquals(StringUtils.replaceEachRepeatedly(\"\", new String[]{\"a\"}, new String[]{\"b\"}),\"\");\n        assertEquals(StringUtils.replaceEachRepeatedly(\"aba\", null, null),\"aba\");\n        assertEquals(StringUtils.replaceEachRepeatedly(\"aba\", new String[0], null),\"aba\");\n        assertEquals(StringUtils.replaceEachRepeatedly(\"aba\", null, new String[0]),\"aba\");\n        assertEquals(StringUtils.replaceEachRepeatedly(\"aba\", new String[0], null),\"aba\");\n\n        assertEquals(StringUtils.replaceEachRepeatedly(\"aba\", new String[]{\"a\"}, new String[]{\"\"}),\"b\");\n        assertEquals(StringUtils.replaceEachRepeatedly(\"aba\", new String[]{null}, new String[]{\"a\"}),\"aba\");\n        assertEquals(StringUtils.replaceEachRepeatedly(\"abcde\", new String[]{\"ab\", \"d\"}, new String[]{\"w\", \"t\"}),\"wcte\");\n        assertEquals(StringUtils.replaceEachRepeatedly(\"abcde\", new String[]{\"ab\", \"d\"}, new String[]{\"d\", \"t\"}),\"tcte\");\n\n        try {\n            StringUtils.replaceEachRepeatedly(\"abcde\", new String[]{\"ab\", \"d\"}, new String[]{\"d\", \"ab\"});\n            fail(\"Should be a circular reference\");\n        } catch (IllegalStateException e) {}\n\n        //JAVADOC TESTS END\n    }\n",
        "begin_line": 1140,
        "end_line": 1161,
        "comment": "\n     * Test method for 'StringUtils.replaceEachRepeatedly(String, String[], String[])'\n     ",
        "child_ranges": [
            "(line 1143,col 9)-(line 1143,col 98)",
            "(line 1144,col 9)-(line 1144,col 101)",
            "(line 1145,col 9)-(line 1145,col 81)",
            "(line 1146,col 9)-(line 1146,col 90)",
            "(line 1147,col 9)-(line 1147,col 90)",
            "(line 1148,col 9)-(line 1148,col 90)",
            "(line 1150,col 9)-(line 1150,col 104)",
            "(line 1151,col 9)-(line 1151,col 108)",
            "(line 1152,col 9)-(line 1152,col 121)",
            "(line 1153,col 9)-(line 1153,col 121)",
            "(line 1155,col 9)-(line 1158,col 44)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.testReplaceChars_StringCharChar()",
        "snippet": "    @Test\n    public void testReplaceChars_StringCharChar() {\n        assertEquals(null, StringUtils.replaceChars(null, 'b', 'z'));\n        assertEquals(\"\", StringUtils.replaceChars(\"\", 'b', 'z'));\n        assertEquals(\"azcza\", StringUtils.replaceChars(\"abcba\", 'b', 'z'));\n        assertEquals(\"abcba\", StringUtils.replaceChars(\"abcba\", 'x', 'z'));\n    }\n",
        "begin_line": 1163,
        "end_line": 1169,
        "comment": "",
        "child_ranges": [
            "(line 1165,col 9)-(line 1165,col 69)",
            "(line 1166,col 9)-(line 1166,col 65)",
            "(line 1167,col 9)-(line 1167,col 75)",
            "(line 1168,col 9)-(line 1168,col 75)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.testReplaceChars_StringStringString()",
        "snippet": "    @Test\n    public void testReplaceChars_StringStringString() {\n        assertEquals(null, StringUtils.replaceChars(null, null, null));\n        assertEquals(null, StringUtils.replaceChars(null, \"\", null));\n        assertEquals(null, StringUtils.replaceChars(null, \"a\", null));\n        assertEquals(null, StringUtils.replaceChars(null, null, \"\"));\n        assertEquals(null, StringUtils.replaceChars(null, null, \"x\"));\n        \n        assertEquals(\"\", StringUtils.replaceChars(\"\", null, null));\n        assertEquals(\"\", StringUtils.replaceChars(\"\", \"\", null));\n        assertEquals(\"\", StringUtils.replaceChars(\"\", \"a\", null));\n        assertEquals(\"\", StringUtils.replaceChars(\"\", null, \"\"));\n        assertEquals(\"\", StringUtils.replaceChars(\"\", null, \"x\"));\n\n        assertEquals(\"abc\", StringUtils.replaceChars(\"abc\", null, null));\n        assertEquals(\"abc\", StringUtils.replaceChars(\"abc\", null, \"\"));\n        assertEquals(\"abc\", StringUtils.replaceChars(\"abc\", null, \"x\"));\n        \n        assertEquals(\"abc\", StringUtils.replaceChars(\"abc\", \"\", null));\n        assertEquals(\"abc\", StringUtils.replaceChars(\"abc\", \"\", \"\"));\n        assertEquals(\"abc\", StringUtils.replaceChars(\"abc\", \"\", \"x\"));\n        \n        assertEquals(\"ac\", StringUtils.replaceChars(\"abc\", \"b\", null));\n        assertEquals(\"ac\", StringUtils.replaceChars(\"abc\", \"b\", \"\"));\n        assertEquals(\"axc\", StringUtils.replaceChars(\"abc\", \"b\", \"x\"));\n        \n        assertEquals(\"ayzya\", StringUtils.replaceChars(\"abcba\", \"bc\", \"yz\"));\n        assertEquals(\"ayya\", StringUtils.replaceChars(\"abcba\", \"bc\", \"y\"));\n        assertEquals(\"ayzya\", StringUtils.replaceChars(\"abcba\", \"bc\", \"yzx\"));\n        \n        assertEquals(\"abcba\", StringUtils.replaceChars(\"abcba\", \"z\", \"w\"));\n        assertSame(\"abcba\", StringUtils.replaceChars(\"abcba\", \"z\", \"w\"));\n        \n        // Javadoc examples:\n        assertEquals(\"jelly\", StringUtils.replaceChars(\"hello\", \"ho\", \"jy\"));\n        assertEquals(\"ayzya\", StringUtils.replaceChars(\"abcba\", \"bc\", \"yz\"));\n        assertEquals(\"ayya\", StringUtils.replaceChars(\"abcba\", \"bc\", \"y\"));\n        assertEquals(\"ayzya\", StringUtils.replaceChars(\"abcba\", \"bc\", \"yzx\"));\n        \n        // From http://issues.apache.org/bugzilla/show_bug.cgi?id=25454\n        assertEquals(\"bcc\", StringUtils.replaceChars(\"abc\", \"ab\", \"bc\"));\n        assertEquals(\"q651.506bera\", StringUtils.replaceChars(\"d216.102oren\",\n            \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ123456789\",\n            \"nopqrstuvwxyzabcdefghijklmNOPQRSTUVWXYZABCDEFGHIJKLM567891234\"));\n    }\n",
        "begin_line": 1171,
        "end_line": 1215,
        "comment": "",
        "child_ranges": [
            "(line 1173,col 9)-(line 1173,col 71)",
            "(line 1174,col 9)-(line 1174,col 69)",
            "(line 1175,col 9)-(line 1175,col 70)",
            "(line 1176,col 9)-(line 1176,col 69)",
            "(line 1177,col 9)-(line 1177,col 70)",
            "(line 1179,col 9)-(line 1179,col 67)",
            "(line 1180,col 9)-(line 1180,col 65)",
            "(line 1181,col 9)-(line 1181,col 66)",
            "(line 1182,col 9)-(line 1182,col 65)",
            "(line 1183,col 9)-(line 1183,col 66)",
            "(line 1185,col 9)-(line 1185,col 73)",
            "(line 1186,col 9)-(line 1186,col 71)",
            "(line 1187,col 9)-(line 1187,col 72)",
            "(line 1189,col 9)-(line 1189,col 71)",
            "(line 1190,col 9)-(line 1190,col 69)",
            "(line 1191,col 9)-(line 1191,col 70)",
            "(line 1193,col 9)-(line 1193,col 71)",
            "(line 1194,col 9)-(line 1194,col 69)",
            "(line 1195,col 9)-(line 1195,col 71)",
            "(line 1197,col 9)-(line 1197,col 77)",
            "(line 1198,col 9)-(line 1198,col 75)",
            "(line 1199,col 9)-(line 1199,col 78)",
            "(line 1201,col 9)-(line 1201,col 75)",
            "(line 1202,col 9)-(line 1202,col 73)",
            "(line 1205,col 9)-(line 1205,col 77)",
            "(line 1206,col 9)-(line 1206,col 77)",
            "(line 1207,col 9)-(line 1207,col 75)",
            "(line 1208,col 9)-(line 1208,col 78)",
            "(line 1211,col 9)-(line 1211,col 73)",
            "(line 1212,col 9)-(line 1214,col 78)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.testOverlay_StringStringIntInt()",
        "snippet": "    @Test\n    public void testOverlay_StringStringIntInt() {\n        assertEquals(null, StringUtils.overlay(null, null, 2, 4));\n        assertEquals(null, StringUtils.overlay(null, null, -2, -4));\n        \n        assertEquals(\"\", StringUtils.overlay(\"\", null, 0, 0));\n        assertEquals(\"\", StringUtils.overlay(\"\", \"\", 0, 0));\n        assertEquals(\"zzzz\", StringUtils.overlay(\"\", \"zzzz\", 0, 0));\n        assertEquals(\"zzzz\", StringUtils.overlay(\"\", \"zzzz\", 2, 4));\n        assertEquals(\"zzzz\", StringUtils.overlay(\"\", \"zzzz\", -2, -4));\n        \n        assertEquals(\"abef\", StringUtils.overlay(\"abcdef\", null, 2, 4));\n        assertEquals(\"abef\", StringUtils.overlay(\"abcdef\", null, 4, 2));\n        assertEquals(\"abef\", StringUtils.overlay(\"abcdef\", \"\", 2, 4));\n        assertEquals(\"abef\", StringUtils.overlay(\"abcdef\", \"\", 4, 2));\n        assertEquals(\"abzzzzef\", StringUtils.overlay(\"abcdef\", \"zzzz\", 2, 4));\n        assertEquals(\"abzzzzef\", StringUtils.overlay(\"abcdef\", \"zzzz\", 4, 2));\n        \n        assertEquals(\"zzzzef\", StringUtils.overlay(\"abcdef\", \"zzzz\", -1, 4));\n        assertEquals(\"zzzzef\", StringUtils.overlay(\"abcdef\", \"zzzz\", 4, -1));\n        assertEquals(\"zzzzabcdef\", StringUtils.overlay(\"abcdef\", \"zzzz\", -2, -1));\n        assertEquals(\"zzzzabcdef\", StringUtils.overlay(\"abcdef\", \"zzzz\", -1, -2));\n        assertEquals(\"abcdzzzz\", StringUtils.overlay(\"abcdef\", \"zzzz\", 4, 10));\n        assertEquals(\"abcdzzzz\", StringUtils.overlay(\"abcdef\", \"zzzz\", 10, 4));\n        assertEquals(\"abcdefzzzz\", StringUtils.overlay(\"abcdef\", \"zzzz\", 8, 10));\n        assertEquals(\"abcdefzzzz\", StringUtils.overlay(\"abcdef\", \"zzzz\", 10, 8));\n    }\n",
        "begin_line": 1217,
        "end_line": 1243,
        "comment": "",
        "child_ranges": [
            "(line 1219,col 9)-(line 1219,col 66)",
            "(line 1220,col 9)-(line 1220,col 68)",
            "(line 1222,col 9)-(line 1222,col 62)",
            "(line 1223,col 9)-(line 1223,col 60)",
            "(line 1224,col 9)-(line 1224,col 68)",
            "(line 1225,col 9)-(line 1225,col 68)",
            "(line 1226,col 9)-(line 1226,col 70)",
            "(line 1228,col 9)-(line 1228,col 72)",
            "(line 1229,col 9)-(line 1229,col 72)",
            "(line 1230,col 9)-(line 1230,col 70)",
            "(line 1231,col 9)-(line 1231,col 70)",
            "(line 1232,col 9)-(line 1232,col 78)",
            "(line 1233,col 9)-(line 1233,col 78)",
            "(line 1235,col 9)-(line 1235,col 77)",
            "(line 1236,col 9)-(line 1236,col 77)",
            "(line 1237,col 9)-(line 1237,col 82)",
            "(line 1238,col 9)-(line 1238,col 82)",
            "(line 1239,col 9)-(line 1239,col 79)",
            "(line 1240,col 9)-(line 1240,col 79)",
            "(line 1241,col 9)-(line 1241,col 81)",
            "(line 1242,col 9)-(line 1242,col 81)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.testRepeat_StringInt()",
        "snippet": "    @Test\n    public void testRepeat_StringInt() {\n        assertEquals(null, StringUtils.repeat(null, 2));\n        assertEquals(\"\", StringUtils.repeat(\"ab\", 0));\n        assertEquals(\"\", StringUtils.repeat(\"\", 3));\n        assertEquals(\"aaa\", StringUtils.repeat(\"a\", 3));\n        assertEquals(\"ababab\", StringUtils.repeat(\"ab\", 3));\n        assertEquals(\"abcabcabc\", StringUtils.repeat(\"abc\", 3));\n        String str = StringUtils.repeat(\"a\", 10000);  // bigger than pad limit\n        assertEquals(10000, str.length());\n        assertTrue(StringUtils.containsOnly(str, new char[] {'a'}));\n    }\n",
        "begin_line": 1245,
        "end_line": 1256,
        "comment": "",
        "child_ranges": [
            "(line 1247,col 9)-(line 1247,col 56)",
            "(line 1248,col 9)-(line 1248,col 54)",
            "(line 1249,col 9)-(line 1249,col 52)",
            "(line 1250,col 9)-(line 1250,col 56)",
            "(line 1251,col 9)-(line 1251,col 60)",
            "(line 1252,col 9)-(line 1252,col 64)",
            "(line 1253,col 9)-(line 1253,col 52)",
            "(line 1254,col 9)-(line 1254,col 42)",
            "(line 1255,col 9)-(line 1255,col 68)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.testRepeat_StringStringInt()",
        "snippet": "    @Test\n    public void testRepeat_StringStringInt() {\n        assertEquals(null, StringUtils.repeat(null, null, 2));\n        assertEquals(null, StringUtils.repeat(null, \"x\", 2));\n        assertEquals(\"\", StringUtils.repeat(\"\", null, 2));\n\n        assertEquals(\"\", StringUtils.repeat(\"ab\", \"\", 0));\n        assertEquals(\"\", StringUtils.repeat(\"\", \"\", 2));\n\n        assertEquals(\"xx\", StringUtils.repeat(\"\", \"x\", 3));\n\n        assertEquals(\"?, ?, ?\", StringUtils.repeat(\"?\", \", \", 3));\n    }\n",
        "begin_line": 1258,
        "end_line": 1270,
        "comment": "",
        "child_ranges": [
            "(line 1260,col 9)-(line 1260,col 62)",
            "(line 1261,col 9)-(line 1261,col 61)",
            "(line 1262,col 9)-(line 1262,col 58)",
            "(line 1264,col 9)-(line 1264,col 58)",
            "(line 1265,col 9)-(line 1265,col 56)",
            "(line 1267,col 9)-(line 1267,col 59)",
            "(line 1269,col 9)-(line 1269,col 66)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.testChop()",
        "snippet": "    @Test\n    public void testChop() {\n\n        String[][] chopCases = {\n            { FOO_UNCAP + \"\\r\\n\", FOO_UNCAP } ,\n            { FOO_UNCAP + \"\\n\" , FOO_UNCAP } ,\n            { FOO_UNCAP + \"\\r\", FOO_UNCAP },\n            { FOO_UNCAP + \" \\r\", FOO_UNCAP + \" \" },\n            { \"foo\", \"fo\"},\n            { \"foo\\nfoo\", \"foo\\nfo\" },\n            { \"\\n\", \"\" },\n            { \"\\r\", \"\" },\n            { \"\\r\\n\", \"\" },\n            { null, null },\n            { \"\", \"\" },\n            { \"a\", \"\" },\n        };\n        for (String[] chopCase : chopCases) {\n            String original = chopCase[0];\n            String expectedResult = chopCase[1];\n            assertEquals(\"chop(String) failed\",\n                    expectedResult, StringUtils.chop(original));\n        }\n    }\n",
        "begin_line": 1272,
        "end_line": 1295,
        "comment": "",
        "child_ranges": [
            "(line 1275,col 9)-(line 1288,col 10)",
            "(line 1289,col 9)-(line 1294,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.testChomp()",
        "snippet": "    @SuppressWarnings(\"deprecation\") // intentional test of deprecated method\n    @Test\n    public void testChomp() {\n\n        String[][] chompCases = {\n            { FOO_UNCAP + \"\\r\\n\", FOO_UNCAP },\n            { FOO_UNCAP + \"\\n\" , FOO_UNCAP },\n            { FOO_UNCAP + \"\\r\", FOO_UNCAP },\n            { FOO_UNCAP + \" \\r\", FOO_UNCAP + \" \" },\n            { FOO_UNCAP, FOO_UNCAP },\n            { FOO_UNCAP + \"\\n\\n\", FOO_UNCAP + \"\\n\"},\n            { FOO_UNCAP + \"\\r\\n\\r\\n\", FOO_UNCAP + \"\\r\\n\" },\n            { \"foo\\nfoo\", \"foo\\nfoo\" },\n            { \"foo\\n\\rfoo\", \"foo\\n\\rfoo\" },\n            { \"\\n\", \"\" },\n            { \"\\r\", \"\" },\n            { \"a\", \"a\" },\n            { \"\\r\\n\", \"\" },\n            { \"\", \"\" },\n            { null, null },\n            { FOO_UNCAP + \"\\n\\r\", FOO_UNCAP + \"\\n\"}\n        };\n        for (String[] chompCase : chompCases) {\n            String original = chompCase[0];\n            String expectedResult = chompCase[1];\n            assertEquals(\"chomp(String) failed\",\n                    expectedResult, StringUtils.chomp(original));\n        }\n\n        assertEquals(\"chomp(String, String) failed\",\n                \"foo\", StringUtils.chomp(\"foobar\", \"bar\"));\n        assertEquals(\"chomp(String, String) failed\",\n                \"foobar\", StringUtils.chomp(\"foobar\", \"baz\"));\n        assertEquals(\"chomp(String, String) failed\",\n                \"foo\", StringUtils.chomp(\"foo\", \"foooo\"));\n        assertEquals(\"chomp(String, String) failed\",\n                \"foobar\", StringUtils.chomp(\"foobar\", \"\"));\n        assertEquals(\"chomp(String, String) failed\",\n                \"foobar\", StringUtils.chomp(\"foobar\", null));\n        assertEquals(\"chomp(String, String) failed\",\n                \"\", StringUtils.chomp(\"\", \"foo\"));\n        assertEquals(\"chomp(String, String) failed\",\n                \"\", StringUtils.chomp(\"\", null));\n        assertEquals(\"chomp(String, String) failed\",\n                \"\", StringUtils.chomp(\"\", \"\"));\n        assertEquals(\"chomp(String, String) failed\",\n                null, StringUtils.chomp(null, \"foo\"));\n        assertEquals(\"chomp(String, String) failed\",\n                null, StringUtils.chomp(null, null));\n        assertEquals(\"chomp(String, String) failed\",\n                null, StringUtils.chomp(null, \"\"));\n        assertEquals(\"chomp(String, String) failed\",\n                \"\", StringUtils.chomp(\"foo\", \"foo\"));\n        assertEquals(\"chomp(String, String) failed\",\n                \" \", StringUtils.chomp(\" foo\", \"foo\"));\n        assertEquals(\"chomp(String, String) failed\",\n                \"foo \", StringUtils.chomp(\"foo \", \"foo\"));\n    }\n",
        "begin_line": 1297,
        "end_line": 1354,
        "comment": "",
        "child_ranges": [
            "(line 1301,col 9)-(line 1318,col 10)",
            "(line 1319,col 9)-(line 1324,col 9)",
            "(line 1326,col 9)-(line 1327,col 59)",
            "(line 1328,col 9)-(line 1329,col 62)",
            "(line 1330,col 9)-(line 1331,col 58)",
            "(line 1332,col 9)-(line 1333,col 59)",
            "(line 1334,col 9)-(line 1335,col 61)",
            "(line 1336,col 9)-(line 1337,col 50)",
            "(line 1338,col 9)-(line 1339,col 49)",
            "(line 1340,col 9)-(line 1341,col 47)",
            "(line 1342,col 9)-(line 1343,col 54)",
            "(line 1344,col 9)-(line 1345,col 53)",
            "(line 1346,col 9)-(line 1347,col 51)",
            "(line 1348,col 9)-(line 1349,col 53)",
            "(line 1350,col 9)-(line 1351,col 55)",
            "(line 1352,col 9)-(line 1353,col 58)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.testRightPad_StringInt()",
        "snippet": "    @Test\n    public void testRightPad_StringInt() {\n        assertEquals(null, StringUtils.rightPad(null, 5));\n        assertEquals(\"     \", StringUtils.rightPad(\"\", 5));\n        assertEquals(\"abc  \", StringUtils.rightPad(\"abc\", 5));\n        assertEquals(\"abc\", StringUtils.rightPad(\"abc\", 2));\n        assertEquals(\"abc\", StringUtils.rightPad(\"abc\", -1));\n    }\n",
        "begin_line": 1357,
        "end_line": 1364,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 1359,col 9)-(line 1359,col 58)",
            "(line 1360,col 9)-(line 1360,col 59)",
            "(line 1361,col 9)-(line 1361,col 62)",
            "(line 1362,col 9)-(line 1362,col 60)",
            "(line 1363,col 9)-(line 1363,col 61)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.testRightPad_StringIntChar()",
        "snippet": "    @Test\n    public void testRightPad_StringIntChar() {\n        assertEquals(null, StringUtils.rightPad(null, 5, ' '));\n        assertEquals(\"     \", StringUtils.rightPad(\"\", 5, ' '));\n        assertEquals(\"abc  \", StringUtils.rightPad(\"abc\", 5, ' '));\n        assertEquals(\"abc\", StringUtils.rightPad(\"abc\", 2, ' '));\n        assertEquals(\"abc\", StringUtils.rightPad(\"abc\", -1, ' '));\n        assertEquals(\"abcxx\", StringUtils.rightPad(\"abc\", 5, 'x'));\n        String str = StringUtils.rightPad(\"aaa\", 10000, 'a');  // bigger than pad length\n        assertEquals(10000, str.length());\n        assertTrue(StringUtils.containsOnly(str, new char[] {'a'}));\n    }\n",
        "begin_line": 1366,
        "end_line": 1377,
        "comment": "",
        "child_ranges": [
            "(line 1368,col 9)-(line 1368,col 63)",
            "(line 1369,col 9)-(line 1369,col 64)",
            "(line 1370,col 9)-(line 1370,col 67)",
            "(line 1371,col 9)-(line 1371,col 65)",
            "(line 1372,col 9)-(line 1372,col 66)",
            "(line 1373,col 9)-(line 1373,col 67)",
            "(line 1374,col 9)-(line 1374,col 61)",
            "(line 1375,col 9)-(line 1375,col 42)",
            "(line 1376,col 9)-(line 1376,col 68)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.testRightPad_StringIntString()",
        "snippet": "    @Test\n    public void testRightPad_StringIntString() {\n        assertEquals(null, StringUtils.rightPad(null, 5, \"-+\"));\n        assertEquals(\"     \", StringUtils.rightPad(\"\", 5, \" \"));\n        assertEquals(null, StringUtils.rightPad(null, 8, null));\n        assertEquals(\"abc-+-+\", StringUtils.rightPad(\"abc\", 7, \"-+\"));\n        assertEquals(\"abc-+~\", StringUtils.rightPad(\"abc\", 6, \"-+~\"));\n        assertEquals(\"abc-+\", StringUtils.rightPad(\"abc\", 5, \"-+~\"));\n        assertEquals(\"abc\", StringUtils.rightPad(\"abc\", 2, \" \"));\n        assertEquals(\"abc\", StringUtils.rightPad(\"abc\", -1, \" \"));\n        assertEquals(\"abc  \", StringUtils.rightPad(\"abc\", 5, null));\n        assertEquals(\"abc  \", StringUtils.rightPad(\"abc\", 5, \"\"));\n    }\n",
        "begin_line": 1379,
        "end_line": 1391,
        "comment": "",
        "child_ranges": [
            "(line 1381,col 9)-(line 1381,col 64)",
            "(line 1382,col 9)-(line 1382,col 64)",
            "(line 1383,col 9)-(line 1383,col 64)",
            "(line 1384,col 9)-(line 1384,col 70)",
            "(line 1385,col 9)-(line 1385,col 70)",
            "(line 1386,col 9)-(line 1386,col 69)",
            "(line 1387,col 9)-(line 1387,col 65)",
            "(line 1388,col 9)-(line 1388,col 66)",
            "(line 1389,col 9)-(line 1389,col 68)",
            "(line 1390,col 9)-(line 1390,col 66)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.testLeftPad_StringInt()",
        "snippet": "    @Test\n    public void testLeftPad_StringInt() {\n        assertEquals(null, StringUtils.leftPad(null, 5));\n        assertEquals(\"     \", StringUtils.leftPad(\"\", 5));\n        assertEquals(\"  abc\", StringUtils.leftPad(\"abc\", 5));\n        assertEquals(\"abc\", StringUtils.leftPad(\"abc\", 2));\n    }\n",
        "begin_line": 1394,
        "end_line": 1400,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 1396,col 9)-(line 1396,col 57)",
            "(line 1397,col 9)-(line 1397,col 58)",
            "(line 1398,col 9)-(line 1398,col 61)",
            "(line 1399,col 9)-(line 1399,col 59)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.testLeftPad_StringIntChar()",
        "snippet": "    @Test\n    public void testLeftPad_StringIntChar() {\n        assertEquals(null, StringUtils.leftPad(null, 5, ' '));\n        assertEquals(\"     \", StringUtils.leftPad(\"\", 5, ' '));\n        assertEquals(\"  abc\", StringUtils.leftPad(\"abc\", 5, ' '));\n        assertEquals(\"xxabc\", StringUtils.leftPad(\"abc\", 5, 'x'));\n        assertEquals(\"\\uffff\\uffffabc\", StringUtils.leftPad(\"abc\", 5, '\\uffff'));\n        assertEquals(\"abc\", StringUtils.leftPad(\"abc\", 2, ' '));\n        String str = StringUtils.leftPad(\"aaa\", 10000, 'a');  // bigger than pad length\n        assertEquals(10000, str.length());\n        assertTrue(StringUtils.containsOnly(str, new char[] {'a'}));\n    }\n",
        "begin_line": 1402,
        "end_line": 1413,
        "comment": "",
        "child_ranges": [
            "(line 1404,col 9)-(line 1404,col 62)",
            "(line 1405,col 9)-(line 1405,col 63)",
            "(line 1406,col 9)-(line 1406,col 66)",
            "(line 1407,col 9)-(line 1407,col 66)",
            "(line 1408,col 9)-(line 1408,col 81)",
            "(line 1409,col 9)-(line 1409,col 64)",
            "(line 1410,col 9)-(line 1410,col 60)",
            "(line 1411,col 9)-(line 1411,col 42)",
            "(line 1412,col 9)-(line 1412,col 68)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.testLeftPad_StringIntString()",
        "snippet": "    @Test\n    public void testLeftPad_StringIntString() {\n        assertEquals(null, StringUtils.leftPad(null, 5, \"-+\"));\n        assertEquals(null, StringUtils.leftPad(null, 5, null));\n        assertEquals(\"     \", StringUtils.leftPad(\"\", 5, \" \"));\n        assertEquals(\"-+-+abc\", StringUtils.leftPad(\"abc\", 7, \"-+\"));\n        assertEquals(\"-+~abc\", StringUtils.leftPad(\"abc\", 6, \"-+~\"));\n        assertEquals(\"-+abc\", StringUtils.leftPad(\"abc\", 5, \"-+~\"));\n        assertEquals(\"abc\", StringUtils.leftPad(\"abc\", 2, \" \"));\n        assertEquals(\"abc\", StringUtils.leftPad(\"abc\", -1, \" \"));\n        assertEquals(\"  abc\", StringUtils.leftPad(\"abc\", 5, null));\n        assertEquals(\"  abc\", StringUtils.leftPad(\"abc\", 5, \"\"));\n    }\n",
        "begin_line": 1415,
        "end_line": 1427,
        "comment": "",
        "child_ranges": [
            "(line 1417,col 9)-(line 1417,col 63)",
            "(line 1418,col 9)-(line 1418,col 63)",
            "(line 1419,col 9)-(line 1419,col 63)",
            "(line 1420,col 9)-(line 1420,col 69)",
            "(line 1421,col 9)-(line 1421,col 69)",
            "(line 1422,col 9)-(line 1422,col 68)",
            "(line 1423,col 9)-(line 1423,col 64)",
            "(line 1424,col 9)-(line 1424,col 65)",
            "(line 1425,col 9)-(line 1425,col 67)",
            "(line 1426,col 9)-(line 1426,col 65)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.testLengthString()",
        "snippet": "    @Test\n    public void testLengthString() {\n        assertEquals(0, StringUtils.length(null));\n        assertEquals(0, StringUtils.length(\"\"));\n        assertEquals(0, StringUtils.length(StringUtils.EMPTY));\n        assertEquals(1, StringUtils.length(\"A\"));\n        assertEquals(1, StringUtils.length(\" \"));\n        assertEquals(8, StringUtils.length(\"ABCDEFGH\"));\n    }\n",
        "begin_line": 1429,
        "end_line": 1437,
        "comment": "",
        "child_ranges": [
            "(line 1431,col 9)-(line 1431,col 50)",
            "(line 1432,col 9)-(line 1432,col 48)",
            "(line 1433,col 9)-(line 1433,col 63)",
            "(line 1434,col 9)-(line 1434,col 49)",
            "(line 1435,col 9)-(line 1435,col 49)",
            "(line 1436,col 9)-(line 1436,col 56)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.testLengthStringBuffer()",
        "snippet": "    @Test\n    public void testLengthStringBuffer() {\n        assertEquals(0, StringUtils.length(new StringBuffer(\"\")));\n        assertEquals(0, StringUtils.length(new StringBuffer(StringUtils.EMPTY)));\n        assertEquals(1, StringUtils.length(new StringBuffer(\"A\")));\n        assertEquals(1, StringUtils.length(new StringBuffer(\" \")));\n        assertEquals(8, StringUtils.length(new StringBuffer(\"ABCDEFGH\")));\n    }\n",
        "begin_line": 1439,
        "end_line": 1446,
        "comment": "",
        "child_ranges": [
            "(line 1441,col 9)-(line 1441,col 66)",
            "(line 1442,col 9)-(line 1442,col 81)",
            "(line 1443,col 9)-(line 1443,col 67)",
            "(line 1444,col 9)-(line 1444,col 67)",
            "(line 1445,col 9)-(line 1445,col 74)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.testLengthStringBuilder()",
        "snippet": "    @Test\n    public void testLengthStringBuilder() {\n        assertEquals(0, StringUtils.length(new StringBuilder(\"\")));\n        assertEquals(0, StringUtils.length(new StringBuilder(StringUtils.EMPTY)));\n        assertEquals(1, StringUtils.length(new StringBuilder(\"A\")));\n        assertEquals(1, StringUtils.length(new StringBuilder(\" \")));\n        assertEquals(8, StringUtils.length(new StringBuilder(\"ABCDEFGH\")));\n    }\n",
        "begin_line": 1448,
        "end_line": 1455,
        "comment": "",
        "child_ranges": [
            "(line 1450,col 9)-(line 1450,col 67)",
            "(line 1451,col 9)-(line 1451,col 82)",
            "(line 1452,col 9)-(line 1452,col 68)",
            "(line 1453,col 9)-(line 1453,col 68)",
            "(line 1454,col 9)-(line 1454,col 75)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.testLength_CharBuffer()",
        "snippet": "    @Test\n    public void testLength_CharBuffer() {\n        assertEquals(0, StringUtils.length(CharBuffer.wrap(\"\")));\n        assertEquals(1, StringUtils.length(CharBuffer.wrap(\"A\")));\n        assertEquals(1, StringUtils.length(CharBuffer.wrap(\" \")));\n        assertEquals(8, StringUtils.length(CharBuffer.wrap(\"ABCDEFGH\")));\n    }\n",
        "begin_line": 1457,
        "end_line": 1463,
        "comment": "",
        "child_ranges": [
            "(line 1459,col 9)-(line 1459,col 65)",
            "(line 1460,col 9)-(line 1460,col 66)",
            "(line 1461,col 9)-(line 1461,col 66)",
            "(line 1462,col 9)-(line 1462,col 73)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.testCenter_StringInt()",
        "snippet": "    @Test\n    public void testCenter_StringInt() {\n        assertEquals(null, StringUtils.center(null, -1));\n        assertEquals(null, StringUtils.center(null, 4));\n        assertEquals(\"    \", StringUtils.center(\"\", 4));\n        assertEquals(\"ab\", StringUtils.center(\"ab\", 0));\n        assertEquals(\"ab\", StringUtils.center(\"ab\", -1));\n        assertEquals(\"ab\", StringUtils.center(\"ab\", 1));\n        assertEquals(\"    \", StringUtils.center(\"\", 4));\n        assertEquals(\" ab \", StringUtils.center(\"ab\", 4));\n        assertEquals(\"abcd\", StringUtils.center(\"abcd\", 2));\n        assertEquals(\" a  \", StringUtils.center(\"a\", 4));\n        assertEquals(\"  a  \", StringUtils.center(\"a\", 5));\n    }\n",
        "begin_line": 1466,
        "end_line": 1479,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 1468,col 9)-(line 1468,col 57)",
            "(line 1469,col 9)-(line 1469,col 56)",
            "(line 1470,col 9)-(line 1470,col 56)",
            "(line 1471,col 9)-(line 1471,col 56)",
            "(line 1472,col 9)-(line 1472,col 57)",
            "(line 1473,col 9)-(line 1473,col 56)",
            "(line 1474,col 9)-(line 1474,col 56)",
            "(line 1475,col 9)-(line 1475,col 58)",
            "(line 1476,col 9)-(line 1476,col 60)",
            "(line 1477,col 9)-(line 1477,col 57)",
            "(line 1478,col 9)-(line 1478,col 58)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.testCenter_StringIntChar()",
        "snippet": "    @Test\n    public void testCenter_StringIntChar() {\n        assertEquals(null, StringUtils.center(null, -1, ' '));\n        assertEquals(null, StringUtils.center(null, 4, ' '));\n        assertEquals(\"    \", StringUtils.center(\"\", 4, ' '));\n        assertEquals(\"ab\", StringUtils.center(\"ab\", 0, ' '));\n        assertEquals(\"ab\", StringUtils.center(\"ab\", -1, ' '));\n        assertEquals(\"ab\", StringUtils.center(\"ab\", 1, ' '));\n        assertEquals(\"    \", StringUtils.center(\"\", 4, ' '));\n        assertEquals(\" ab \", StringUtils.center(\"ab\", 4, ' '));\n        assertEquals(\"abcd\", StringUtils.center(\"abcd\", 2, ' '));\n        assertEquals(\" a  \", StringUtils.center(\"a\", 4, ' '));\n        assertEquals(\"  a  \", StringUtils.center(\"a\", 5, ' '));\n        assertEquals(\"xxaxx\", StringUtils.center(\"a\", 5, 'x'));\n    }\n",
        "begin_line": 1481,
        "end_line": 1495,
        "comment": "",
        "child_ranges": [
            "(line 1483,col 9)-(line 1483,col 62)",
            "(line 1484,col 9)-(line 1484,col 61)",
            "(line 1485,col 9)-(line 1485,col 61)",
            "(line 1486,col 9)-(line 1486,col 61)",
            "(line 1487,col 9)-(line 1487,col 62)",
            "(line 1488,col 9)-(line 1488,col 61)",
            "(line 1489,col 9)-(line 1489,col 61)",
            "(line 1490,col 9)-(line 1490,col 63)",
            "(line 1491,col 9)-(line 1491,col 65)",
            "(line 1492,col 9)-(line 1492,col 62)",
            "(line 1493,col 9)-(line 1493,col 63)",
            "(line 1494,col 9)-(line 1494,col 63)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.testCenter_StringIntString()",
        "snippet": "    @Test\n    public void testCenter_StringIntString() {\n        assertEquals(null, StringUtils.center(null, 4, null));\n        assertEquals(null, StringUtils.center(null, -1, \" \"));\n        assertEquals(null, StringUtils.center(null, 4, \" \"));\n        assertEquals(\"    \", StringUtils.center(\"\", 4, \" \"));\n        assertEquals(\"ab\", StringUtils.center(\"ab\", 0, \" \"));\n        assertEquals(\"ab\", StringUtils.center(\"ab\", -1, \" \"));\n        assertEquals(\"ab\", StringUtils.center(\"ab\", 1, \" \"));\n        assertEquals(\"    \", StringUtils.center(\"\", 4, \" \"));\n        assertEquals(\" ab \", StringUtils.center(\"ab\", 4, \" \"));\n        assertEquals(\"abcd\", StringUtils.center(\"abcd\", 2, \" \"));\n        assertEquals(\" a  \", StringUtils.center(\"a\", 4, \" \"));\n        assertEquals(\"yayz\", StringUtils.center(\"a\", 4, \"yz\"));\n        assertEquals(\"yzyayzy\", StringUtils.center(\"a\", 7, \"yz\"));\n        assertEquals(\"  abc  \", StringUtils.center(\"abc\", 7, null));\n        assertEquals(\"  abc  \", StringUtils.center(\"abc\", 7, \"\"));\n    }\n",
        "begin_line": 1497,
        "end_line": 1514,
        "comment": "",
        "child_ranges": [
            "(line 1499,col 9)-(line 1499,col 62)",
            "(line 1500,col 9)-(line 1500,col 62)",
            "(line 1501,col 9)-(line 1501,col 61)",
            "(line 1502,col 9)-(line 1502,col 61)",
            "(line 1503,col 9)-(line 1503,col 61)",
            "(line 1504,col 9)-(line 1504,col 62)",
            "(line 1505,col 9)-(line 1505,col 61)",
            "(line 1506,col 9)-(line 1506,col 61)",
            "(line 1507,col 9)-(line 1507,col 63)",
            "(line 1508,col 9)-(line 1508,col 65)",
            "(line 1509,col 9)-(line 1509,col 62)",
            "(line 1510,col 9)-(line 1510,col 63)",
            "(line 1511,col 9)-(line 1511,col 66)",
            "(line 1512,col 9)-(line 1512,col 68)",
            "(line 1513,col 9)-(line 1513,col 66)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.testReverse_String()",
        "snippet": "    @Test\n    public void testReverse_String() {\n        assertEquals(null, StringUtils.reverse(null) );\n        assertEquals(\"\", StringUtils.reverse(\"\") );\n        assertEquals(\"sdrawkcab\", StringUtils.reverse(\"backwards\") );\n    }\n",
        "begin_line": 1517,
        "end_line": 1522,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 1519,col 9)-(line 1519,col 55)",
            "(line 1520,col 9)-(line 1520,col 51)",
            "(line 1521,col 9)-(line 1521,col 69)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.testReverseDelimited_StringChar()",
        "snippet": "    @Test\n    public void testReverseDelimited_StringChar() {\n        assertEquals(null, StringUtils.reverseDelimited(null, '.') );\n        assertEquals(\"\", StringUtils.reverseDelimited(\"\", '.') );\n        assertEquals(\"c.b.a\", StringUtils.reverseDelimited(\"a.b.c\", '.') );\n        assertEquals(\"a b c\", StringUtils.reverseDelimited(\"a b c\", '.') );\n        assertEquals(\"\", StringUtils.reverseDelimited(\"\", '.') );\n    }\n",
        "begin_line": 1524,
        "end_line": 1531,
        "comment": "",
        "child_ranges": [
            "(line 1526,col 9)-(line 1526,col 69)",
            "(line 1527,col 9)-(line 1527,col 65)",
            "(line 1528,col 9)-(line 1528,col 75)",
            "(line 1529,col 9)-(line 1529,col 75)",
            "(line 1530,col 9)-(line 1530,col 65)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.testDefault_String()",
        "snippet": "    @Test\n    public void testDefault_String() {\n        assertEquals(\"\", StringUtils.defaultString(null));\n        assertEquals(\"\", StringUtils.defaultString(\"\"));\n        assertEquals(\"abc\", StringUtils.defaultString(\"abc\"));\n    }\n",
        "begin_line": 1534,
        "end_line": 1539,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 1536,col 9)-(line 1536,col 58)",
            "(line 1537,col 9)-(line 1537,col 56)",
            "(line 1538,col 9)-(line 1538,col 62)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.testDefault_StringString()",
        "snippet": "    @Test\n    public void testDefault_StringString() {\n        assertEquals(\"NULL\", StringUtils.defaultString(null, \"NULL\"));\n        assertEquals(\"\", StringUtils.defaultString(\"\", \"NULL\"));\n        assertEquals(\"abc\", StringUtils.defaultString(\"abc\", \"NULL\"));\n    }\n",
        "begin_line": 1541,
        "end_line": 1546,
        "comment": "",
        "child_ranges": [
            "(line 1543,col 9)-(line 1543,col 70)",
            "(line 1544,col 9)-(line 1544,col 64)",
            "(line 1545,col 9)-(line 1545,col 70)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.testDefaultIfEmpty_StringString()",
        "snippet": "    @Test\n    public void testDefaultIfEmpty_StringString() {\n        assertEquals(\"NULL\", StringUtils.defaultIfEmpty(null, \"NULL\"));\n        assertEquals(\"NULL\", StringUtils.defaultIfEmpty(\"\", \"NULL\"));\n        assertEquals(\"abc\", StringUtils.defaultIfEmpty(\"abc\", \"NULL\"));\n        assertNull(StringUtils.defaultIfEmpty(\"\", null));\n        // Tests compatibility for the API return type\n        String s = StringUtils.defaultIfEmpty(\"abc\", \"NULL\");\n        assertEquals(\"abc\", s);\n    }\n",
        "begin_line": 1548,
        "end_line": 1557,
        "comment": "",
        "child_ranges": [
            "(line 1550,col 9)-(line 1550,col 71)",
            "(line 1551,col 9)-(line 1551,col 69)",
            "(line 1552,col 9)-(line 1552,col 71)",
            "(line 1553,col 9)-(line 1553,col 57)",
            "(line 1555,col 9)-(line 1555,col 61)",
            "(line 1556,col 9)-(line 1556,col 31)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.testDefaultIfBlank_StringString()",
        "snippet": "    @Test\n    public void testDefaultIfBlank_StringString() {\n        assertEquals(\"NULL\", StringUtils.defaultIfBlank(null, \"NULL\"));\n        assertEquals(\"NULL\", StringUtils.defaultIfBlank(\"\", \"NULL\"));\n        assertEquals(\"NULL\", StringUtils.defaultIfBlank(\" \", \"NULL\"));\n        assertEquals(\"abc\", StringUtils.defaultIfBlank(\"abc\", \"NULL\"));\n        assertNull(StringUtils.defaultIfBlank(\"\", null));\n        // Tests compatibility for the API return type\n        String s = StringUtils.defaultIfBlank(\"abc\", \"NULL\");\n        assertEquals(\"abc\", s);\n    }\n",
        "begin_line": 1559,
        "end_line": 1569,
        "comment": "",
        "child_ranges": [
            "(line 1561,col 9)-(line 1561,col 71)",
            "(line 1562,col 9)-(line 1562,col 69)",
            "(line 1563,col 9)-(line 1563,col 70)",
            "(line 1564,col 9)-(line 1564,col 71)",
            "(line 1565,col 9)-(line 1565,col 57)",
            "(line 1567,col 9)-(line 1567,col 61)",
            "(line 1568,col 9)-(line 1568,col 31)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.testDefaultIfEmpty_StringBuilders()",
        "snippet": "    @Test\n    public void testDefaultIfEmpty_StringBuilders() {\n        assertEquals(\"NULL\", StringUtils.defaultIfEmpty(new StringBuilder(\"\"), new StringBuilder(\"NULL\")).toString());\n        assertEquals(\"abc\", StringUtils.defaultIfEmpty(new StringBuilder(\"abc\"), new StringBuilder(\"NULL\")).toString());\n        assertNull(StringUtils.defaultIfEmpty(new StringBuilder(\"\"), null));\n        // Tests compatibility for the API return type\n        StringBuilder s = StringUtils.defaultIfEmpty(new StringBuilder(\"abc\"), new StringBuilder(\"NULL\"));\n        assertEquals(\"abc\", s.toString());\n    }\n",
        "begin_line": 1571,
        "end_line": 1579,
        "comment": "",
        "child_ranges": [
            "(line 1573,col 9)-(line 1573,col 118)",
            "(line 1574,col 9)-(line 1574,col 120)",
            "(line 1575,col 9)-(line 1575,col 76)",
            "(line 1577,col 9)-(line 1577,col 106)",
            "(line 1578,col 9)-(line 1578,col 42)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.testDefaultIfBlank_StringBuilders()",
        "snippet": "    @Test\n    public void testDefaultIfBlank_StringBuilders() {\n        assertEquals(\"NULL\", StringUtils.defaultIfBlank(new StringBuilder(\"\"), new StringBuilder(\"NULL\")).toString());\n        assertEquals(\"NULL\", StringUtils.defaultIfBlank(new StringBuilder(\" \"), new StringBuilder(\"NULL\")).toString());\n        assertEquals(\"abc\", StringUtils.defaultIfBlank(new StringBuilder(\"abc\"), new StringBuilder(\"NULL\")).toString());\n        assertNull(StringUtils.defaultIfBlank(new StringBuilder(\"\"), null));\n        // Tests compatibility for the API return type\n        StringBuilder s = StringUtils.defaultIfBlank(new StringBuilder(\"abc\"), new StringBuilder(\"NULL\"));\n        assertEquals(\"abc\", s.toString());\n    }\n",
        "begin_line": 1581,
        "end_line": 1590,
        "comment": "",
        "child_ranges": [
            "(line 1583,col 9)-(line 1583,col 118)",
            "(line 1584,col 9)-(line 1584,col 119)",
            "(line 1585,col 9)-(line 1585,col 120)",
            "(line 1586,col 9)-(line 1586,col 76)",
            "(line 1588,col 9)-(line 1588,col 106)",
            "(line 1589,col 9)-(line 1589,col 42)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.testDefaultIfEmpty_StringBuffers()",
        "snippet": "    @Test\n    public void testDefaultIfEmpty_StringBuffers() {\n        assertEquals(\"NULL\", StringUtils.defaultIfEmpty(new StringBuffer(\"\"), new StringBuffer(\"NULL\")).toString());\n        assertEquals(\"abc\", StringUtils.defaultIfEmpty(new StringBuffer(\"abc\"), new StringBuffer(\"NULL\")).toString());\n        assertNull(StringUtils.defaultIfEmpty(new StringBuffer(\"\"), null));\n        // Tests compatibility for the API return type\n        StringBuffer s = StringUtils.defaultIfEmpty(new StringBuffer(\"abc\"), new StringBuffer(\"NULL\"));\n        assertEquals(\"abc\", s.toString());\n    }\n",
        "begin_line": 1592,
        "end_line": 1600,
        "comment": "",
        "child_ranges": [
            "(line 1594,col 9)-(line 1594,col 116)",
            "(line 1595,col 9)-(line 1595,col 118)",
            "(line 1596,col 9)-(line 1596,col 75)",
            "(line 1598,col 9)-(line 1598,col 103)",
            "(line 1599,col 9)-(line 1599,col 42)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.testDefaultIfBlank_StringBuffers()",
        "snippet": "    @Test\n    public void testDefaultIfBlank_StringBuffers() {\n        assertEquals(\"NULL\", StringUtils.defaultIfBlank(new StringBuffer(\"\"), new StringBuffer(\"NULL\")).toString());\n        assertEquals(\"NULL\", StringUtils.defaultIfBlank(new StringBuffer(\" \"), new StringBuffer(\"NULL\")).toString());\n        assertEquals(\"abc\", StringUtils.defaultIfBlank(new StringBuffer(\"abc\"), new StringBuffer(\"NULL\")).toString());\n        assertNull(StringUtils.defaultIfBlank(new StringBuffer(\"\"), null));\n        // Tests compatibility for the API return type\n        StringBuffer s = StringUtils.defaultIfBlank(new StringBuffer(\"abc\"), new StringBuffer(\"NULL\"));\n        assertEquals(\"abc\", s.toString());\n    }\n",
        "begin_line": 1602,
        "end_line": 1611,
        "comment": "",
        "child_ranges": [
            "(line 1604,col 9)-(line 1604,col 116)",
            "(line 1605,col 9)-(line 1605,col 117)",
            "(line 1606,col 9)-(line 1606,col 118)",
            "(line 1607,col 9)-(line 1607,col 75)",
            "(line 1609,col 9)-(line 1609,col 103)",
            "(line 1610,col 9)-(line 1610,col 42)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.testDefaultIfEmpty_CharBuffers()",
        "snippet": "    @Test\n    public void testDefaultIfEmpty_CharBuffers() {\n        assertEquals(\"NULL\", StringUtils.defaultIfEmpty(CharBuffer.wrap(\"\"), CharBuffer.wrap(\"NULL\")).toString());\n        assertEquals(\"abc\", StringUtils.defaultIfEmpty(CharBuffer.wrap(\"abc\"), CharBuffer.wrap(\"NULL\")).toString());\n        assertNull(StringUtils.defaultIfEmpty(CharBuffer.wrap(\"\"), null));\n        // Tests compatibility for the API return type\n        CharBuffer s = StringUtils.defaultIfEmpty(CharBuffer.wrap(\"abc\"), CharBuffer.wrap(\"NULL\"));\n        assertEquals(\"abc\", s.toString());\n    }\n",
        "begin_line": 1613,
        "end_line": 1621,
        "comment": "",
        "child_ranges": [
            "(line 1615,col 9)-(line 1615,col 114)",
            "(line 1616,col 9)-(line 1616,col 116)",
            "(line 1617,col 9)-(line 1617,col 74)",
            "(line 1619,col 9)-(line 1619,col 99)",
            "(line 1620,col 9)-(line 1620,col 42)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.testDefaultIfBlank_CharBuffers()",
        "snippet": "    @Test\n    public void testDefaultIfBlank_CharBuffers() {\n        assertEquals(\"NULL\", StringUtils.defaultIfBlank(CharBuffer.wrap(\"\"), CharBuffer.wrap(\"NULL\")).toString());\n        assertEquals(\"NULL\", StringUtils.defaultIfBlank(CharBuffer.wrap(\" \"), CharBuffer.wrap(\"NULL\")).toString());\n        assertEquals(\"abc\", StringUtils.defaultIfBlank(CharBuffer.wrap(\"abc\"), CharBuffer.wrap(\"NULL\")).toString());\n        assertNull(StringUtils.defaultIfBlank(CharBuffer.wrap(\"\"), null));\n        // Tests compatibility for the API return type\n        CharBuffer s = StringUtils.defaultIfBlank(CharBuffer.wrap(\"abc\"), CharBuffer.wrap(\"NULL\"));\n        assertEquals(\"abc\", s.toString());\n    }\n",
        "begin_line": 1623,
        "end_line": 1632,
        "comment": "",
        "child_ranges": [
            "(line 1625,col 9)-(line 1625,col 114)",
            "(line 1626,col 9)-(line 1626,col 115)",
            "(line 1627,col 9)-(line 1627,col 116)",
            "(line 1628,col 9)-(line 1628,col 74)",
            "(line 1630,col 9)-(line 1630,col 99)",
            "(line 1631,col 9)-(line 1631,col 42)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.testAbbreviate_StringInt()",
        "snippet": "    @Test\n    public void testAbbreviate_StringInt() {\n        assertEquals(null, StringUtils.abbreviate(null, 10));\n        assertEquals(\"\", StringUtils.abbreviate(\"\", 10));\n        assertEquals(\"short\", StringUtils.abbreviate(\"short\", 10));\n        assertEquals(\"Now is ...\", StringUtils.abbreviate(\"Now is the time for all good men to come to the aid of their party.\", 10));\n\n        String raspberry = \"raspberry peach\";\n        assertEquals(\"raspberry p...\", StringUtils.abbreviate(raspberry, 14));\n        assertEquals(\"raspberry peach\", StringUtils.abbreviate(\"raspberry peach\", 15));\n        assertEquals(\"raspberry peach\", StringUtils.abbreviate(\"raspberry peach\", 16));\n        assertEquals(\"abc...\", StringUtils.abbreviate(\"abcdefg\", 6));\n        assertEquals(\"abcdefg\", StringUtils.abbreviate(\"abcdefg\", 7));\n        assertEquals(\"abcdefg\", StringUtils.abbreviate(\"abcdefg\", 8));\n        assertEquals(\"a...\", StringUtils.abbreviate(\"abcdefg\", 4));\n        assertEquals(\"\", StringUtils.abbreviate(\"\", 4));\n        \n        try {\n            @SuppressWarnings(\"unused\")\n            String res = StringUtils.abbreviate(\"abc\", 3);\n            fail(\"StringUtils.abbreviate expecting IllegalArgumentException\");\n        } catch (IllegalArgumentException ex) {\n                // empty\n        }              \n    }\n",
        "begin_line": 1635,
        "end_line": 1659,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 1637,col 9)-(line 1637,col 61)",
            "(line 1638,col 9)-(line 1638,col 57)",
            "(line 1639,col 9)-(line 1639,col 67)",
            "(line 1640,col 9)-(line 1640,col 134)",
            "(line 1642,col 9)-(line 1642,col 45)",
            "(line 1643,col 9)-(line 1643,col 78)",
            "(line 1644,col 9)-(line 1644,col 87)",
            "(line 1645,col 9)-(line 1645,col 87)",
            "(line 1646,col 9)-(line 1646,col 69)",
            "(line 1647,col 9)-(line 1647,col 70)",
            "(line 1648,col 9)-(line 1648,col 70)",
            "(line 1649,col 9)-(line 1649,col 67)",
            "(line 1650,col 9)-(line 1650,col 56)",
            "(line 1652,col 9)-(line 1658,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.testAbbreviate_StringIntInt()",
        "snippet": "    @Test\n    public void testAbbreviate_StringIntInt() {\n        assertEquals(null, StringUtils.abbreviate(null, 10, 12));\n        assertEquals(\"\", StringUtils.abbreviate(\"\", 0, 10));\n        assertEquals(\"\", StringUtils.abbreviate(\"\", 2, 10));\n        \n        try {\n            @SuppressWarnings(\"unused\")\n            String res = StringUtils.abbreviate(\"abcdefghij\", 0, 3);\n            fail(\"StringUtils.abbreviate expecting IllegalArgumentException\");\n        } catch (IllegalArgumentException ex) {\n                // empty\n        }      \n        try {\n            @SuppressWarnings(\"unused\")\n            String res = StringUtils.abbreviate(\"abcdefghij\", 5, 6);\n            fail(\"StringUtils.abbreviate expecting IllegalArgumentException\");\n        } catch (IllegalArgumentException ex) {\n                // empty\n        }      \n        \n\n        String raspberry = \"raspberry peach\";\n        assertEquals(\"raspberry peach\", StringUtils.abbreviate(raspberry, 11, 15));\n\n        assertEquals(null, StringUtils.abbreviate(null, 7, 14));\n        assertAbbreviateWithOffset(\"abcdefg...\", -1, 10);\n        assertAbbreviateWithOffset(\"abcdefg...\", 0, 10);\n        assertAbbreviateWithOffset(\"abcdefg...\", 1, 10);\n        assertAbbreviateWithOffset(\"abcdefg...\", 2, 10);\n        assertAbbreviateWithOffset(\"abcdefg...\", 3, 10);\n        assertAbbreviateWithOffset(\"abcdefg...\", 4, 10);\n        assertAbbreviateWithOffset(\"...fghi...\", 5, 10);\n        assertAbbreviateWithOffset(\"...ghij...\", 6, 10);\n        assertAbbreviateWithOffset(\"...hijk...\", 7, 10);\n        assertAbbreviateWithOffset(\"...ijklmno\", 8, 10);\n        assertAbbreviateWithOffset(\"...ijklmno\", 9, 10);\n        assertAbbreviateWithOffset(\"...ijklmno\", 10, 10);\n        assertAbbreviateWithOffset(\"...ijklmno\", 10, 10);\n        assertAbbreviateWithOffset(\"...ijklmno\", 11, 10);\n        assertAbbreviateWithOffset(\"...ijklmno\", 12, 10);\n        assertAbbreviateWithOffset(\"...ijklmno\", 13, 10);\n        assertAbbreviateWithOffset(\"...ijklmno\", 14, 10);\n        assertAbbreviateWithOffset(\"...ijklmno\", 15, 10);\n        assertAbbreviateWithOffset(\"...ijklmno\", 16, 10);\n        assertAbbreviateWithOffset(\"...ijklmno\", Integer.MAX_VALUE, 10);\n    }\n",
        "begin_line": 1661,
        "end_line": 1707,
        "comment": "",
        "child_ranges": [
            "(line 1663,col 9)-(line 1663,col 65)",
            "(line 1664,col 9)-(line 1664,col 60)",
            "(line 1665,col 9)-(line 1665,col 60)",
            "(line 1667,col 9)-(line 1673,col 9)",
            "(line 1674,col 9)-(line 1680,col 9)",
            "(line 1683,col 9)-(line 1683,col 45)",
            "(line 1684,col 9)-(line 1684,col 83)",
            "(line 1686,col 9)-(line 1686,col 64)",
            "(line 1687,col 9)-(line 1687,col 57)",
            "(line 1688,col 9)-(line 1688,col 56)",
            "(line 1689,col 9)-(line 1689,col 56)",
            "(line 1690,col 9)-(line 1690,col 56)",
            "(line 1691,col 9)-(line 1691,col 56)",
            "(line 1692,col 9)-(line 1692,col 56)",
            "(line 1693,col 9)-(line 1693,col 56)",
            "(line 1694,col 9)-(line 1694,col 56)",
            "(line 1695,col 9)-(line 1695,col 56)",
            "(line 1696,col 9)-(line 1696,col 56)",
            "(line 1697,col 9)-(line 1697,col 56)",
            "(line 1698,col 9)-(line 1698,col 57)",
            "(line 1699,col 9)-(line 1699,col 57)",
            "(line 1700,col 9)-(line 1700,col 57)",
            "(line 1701,col 9)-(line 1701,col 57)",
            "(line 1702,col 9)-(line 1702,col 57)",
            "(line 1703,col 9)-(line 1703,col 57)",
            "(line 1704,col 9)-(line 1704,col 57)",
            "(line 1705,col 9)-(line 1705,col 57)",
            "(line 1706,col 9)-(line 1706,col 72)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.assertAbbreviateWithOffset(java.lang.String, int, int)",
        "snippet": "    private void assertAbbreviateWithOffset(String expected, int offset, int maxWidth) {\n        String abcdefghijklmno = \"abcdefghijklmno\";\n        String message = \"abbreviate(String,int,int) failed\";\n        String actual = StringUtils.abbreviate(abcdefghijklmno, offset, maxWidth);\n        if (offset >= 0 && offset < abcdefghijklmno.length()) {\n            assertTrue(message + \" -- should contain offset character\",\n                    actual.indexOf((char)('a'+offset)) != -1);\n        }\n        assertTrue(message + \" -- should not be greater than maxWidth\",\n                actual.length() <= maxWidth);\n        assertEquals(message, expected, actual);\n    }\n",
        "begin_line": 1709,
        "end_line": 1720,
        "comment": "",
        "child_ranges": [
            "(line 1710,col 9)-(line 1710,col 51)",
            "(line 1711,col 9)-(line 1711,col 61)",
            "(line 1712,col 9)-(line 1712,col 82)",
            "(line 1713,col 9)-(line 1716,col 9)",
            "(line 1717,col 9)-(line 1718,col 45)",
            "(line 1719,col 9)-(line 1719,col 48)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.testAbbreviateMiddle()",
        "snippet": "    @Test\n    public void testAbbreviateMiddle() {\n        // javadoc examples\n        assertNull( StringUtils.abbreviateMiddle(null, null, 0) );\n        assertEquals( \"abc\", StringUtils.abbreviateMiddle(\"abc\", null, 0) );\n        assertEquals( \"abc\", StringUtils.abbreviateMiddle(\"abc\", \".\", 0) );\n        assertEquals( \"abc\", StringUtils.abbreviateMiddle(\"abc\", \".\", 3) );\n        assertEquals( \"ab.f\", StringUtils.abbreviateMiddle(\"abcdef\", \".\", 4) );\n\n        // JIRA issue (LANG-405) example (slightly different than actual expected result)\n        assertEquals( \n            \"A very long text with un...f the text is complete.\",\n            StringUtils.abbreviateMiddle(\n                \"A very long text with unimportant stuff in the middle but interesting start and \" +\n                \"end to see if the text is complete.\", \"...\", 50) );\n\n        // Test a much longer text :)\n        String longText = \"Start text\" + StringUtils.repeat(\"x\", 10000) + \"Close text\";\n        assertEquals( \n            \"Start text->Close text\",\n            StringUtils.abbreviateMiddle( longText, \"->\", 22 ) );\n\n        // Test negative length\n        assertEquals(\"abc\", StringUtils.abbreviateMiddle(\"abc\", \".\", -1));\n\n        // Test boundaries\n        // Fails to change anything as method ensures first and last char are kept\n        assertEquals(\"abc\", StringUtils.abbreviateMiddle(\"abc\", \".\", 1));\n        assertEquals(\"abc\", StringUtils.abbreviateMiddle(\"abc\", \".\", 2));\n\n        // Test length of n=1\n        assertEquals(\"a\", StringUtils.abbreviateMiddle(\"a\", \".\", 1));\n\n        // Test smallest length that can lead to success\n        assertEquals(\"a.d\", StringUtils.abbreviateMiddle(\"abcd\", \".\", 3));\n\n        // More from LANG-405\n        assertEquals(\"a..f\", StringUtils.abbreviateMiddle(\"abcdef\", \"..\", 4));\n        assertEquals(\"ab.ef\", StringUtils.abbreviateMiddle(\"abcdef\", \".\", 5));\n    }\n",
        "begin_line": 1722,
        "end_line": 1761,
        "comment": "",
        "child_ranges": [
            "(line 1725,col 9)-(line 1725,col 66)",
            "(line 1726,col 9)-(line 1726,col 76)",
            "(line 1727,col 9)-(line 1727,col 75)",
            "(line 1728,col 9)-(line 1728,col 75)",
            "(line 1729,col 9)-(line 1729,col 79)",
            "(line 1732,col 9)-(line 1736,col 68)",
            "(line 1739,col 9)-(line 1739,col 87)",
            "(line 1740,col 9)-(line 1742,col 65)",
            "(line 1745,col 9)-(line 1745,col 74)",
            "(line 1749,col 9)-(line 1749,col 73)",
            "(line 1750,col 9)-(line 1750,col 73)",
            "(line 1753,col 9)-(line 1753,col 69)",
            "(line 1756,col 9)-(line 1756,col 74)",
            "(line 1759,col 9)-(line 1759,col 78)",
            "(line 1760,col 9)-(line 1760,col 78)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.testDifference_StringString()",
        "snippet": "    @Test\n    public void testDifference_StringString() {\n        assertEquals(null, StringUtils.difference(null, null));\n        assertEquals(\"\", StringUtils.difference(\"\", \"\"));\n        assertEquals(\"abc\", StringUtils.difference(\"\", \"abc\"));\n        assertEquals(\"\", StringUtils.difference(\"abc\", \"\"));\n        assertEquals(\"i am a robot\", StringUtils.difference(null, \"i am a robot\"));\n        assertEquals(\"i am a machine\", StringUtils.difference(\"i am a machine\", null));\n        assertEquals(\"robot\", StringUtils.difference(\"i am a machine\", \"i am a robot\"));\n        assertEquals(\"\", StringUtils.difference(\"abc\", \"abc\"));\n        assertEquals(\"you are a robot\", StringUtils.difference(\"i am a robot\", \"you are a robot\"));\n    }\n",
        "begin_line": 1764,
        "end_line": 1775,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 1766,col 9)-(line 1766,col 63)",
            "(line 1767,col 9)-(line 1767,col 57)",
            "(line 1768,col 9)-(line 1768,col 63)",
            "(line 1769,col 9)-(line 1769,col 60)",
            "(line 1770,col 9)-(line 1770,col 83)",
            "(line 1771,col 9)-(line 1771,col 87)",
            "(line 1772,col 9)-(line 1772,col 88)",
            "(line 1773,col 9)-(line 1773,col 63)",
            "(line 1774,col 9)-(line 1774,col 99)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.testDifferenceAt_StringString()",
        "snippet": "    @Test\n    public void testDifferenceAt_StringString() {\n        assertEquals(-1, StringUtils.indexOfDifference(null, null));\n        assertEquals(0, StringUtils.indexOfDifference(null, \"i am a robot\"));\n        assertEquals(-1, StringUtils.indexOfDifference(\"\", \"\"));\n        assertEquals(0, StringUtils.indexOfDifference(\"\", \"abc\"));\n        assertEquals(0, StringUtils.indexOfDifference(\"abc\", \"\"));\n        assertEquals(0, StringUtils.indexOfDifference(\"i am a machine\", null));\n        assertEquals(7, StringUtils.indexOfDifference(\"i am a machine\", \"i am a robot\"));\n        assertEquals(-1, StringUtils.indexOfDifference(\"foo\", \"foo\"));\n        assertEquals(0, StringUtils.indexOfDifference(\"i am a robot\", \"you are a robot\"));\n        //System.out.println(\"indexOfDiff: \" + StringUtils.indexOfDifference(\"i am a robot\", \"not machine\"));\n    }\n",
        "begin_line": 1777,
        "end_line": 1789,
        "comment": "",
        "child_ranges": [
            "(line 1779,col 9)-(line 1779,col 68)",
            "(line 1780,col 9)-(line 1780,col 77)",
            "(line 1781,col 9)-(line 1781,col 64)",
            "(line 1782,col 9)-(line 1782,col 66)",
            "(line 1783,col 9)-(line 1783,col 66)",
            "(line 1784,col 9)-(line 1784,col 79)",
            "(line 1785,col 9)-(line 1785,col 89)",
            "(line 1786,col 9)-(line 1786,col 70)",
            "(line 1787,col 9)-(line 1787,col 90)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.testGetLevenshteinDistance_StringString()",
        "snippet": "    @Test\n    public void testGetLevenshteinDistance_StringString() {\n        assertEquals(0, StringUtils.getLevenshteinDistance(\"\", \"\") );\n        assertEquals(1, StringUtils.getLevenshteinDistance(\"\", \"a\") );\n        assertEquals(7, StringUtils.getLevenshteinDistance(\"aaapppp\", \"\") );\n        assertEquals(1, StringUtils.getLevenshteinDistance(\"frog\", \"fog\") );\n        assertEquals(3, StringUtils.getLevenshteinDistance(\"fly\", \"ant\") );\n        assertEquals(7, StringUtils.getLevenshteinDistance(\"elephant\", \"hippo\") );\n        assertEquals(7, StringUtils.getLevenshteinDistance(\"hippo\", \"elephant\") );\n        assertEquals(8, StringUtils.getLevenshteinDistance(\"hippo\", \"zzzzzzzz\") );\n        assertEquals(8, StringUtils.getLevenshteinDistance(\"zzzzzzzz\", \"hippo\") );\n        assertEquals(1, StringUtils.getLevenshteinDistance(\"hello\", \"hallo\") );\n        try {\n            @SuppressWarnings(\"unused\")\n            int d = StringUtils.getLevenshteinDistance(\"a\", null);\n            fail(\"expecting IllegalArgumentException\");\n        } catch (IllegalArgumentException ex) {\n            // empty\n        }\n        try {\n            @SuppressWarnings(\"unused\")\n            int d = StringUtils.getLevenshteinDistance(null, \"a\");\n            fail(\"expecting IllegalArgumentException\");\n        } catch (IllegalArgumentException ex) {\n            // empty\n        }\n    }\n",
        "begin_line": 1792,
        "end_line": 1818,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 1794,col 9)-(line 1794,col 69)",
            "(line 1795,col 9)-(line 1795,col 70)",
            "(line 1796,col 9)-(line 1796,col 76)",
            "(line 1797,col 9)-(line 1797,col 76)",
            "(line 1798,col 9)-(line 1798,col 75)",
            "(line 1799,col 9)-(line 1799,col 82)",
            "(line 1800,col 9)-(line 1800,col 82)",
            "(line 1801,col 9)-(line 1801,col 82)",
            "(line 1802,col 9)-(line 1802,col 82)",
            "(line 1803,col 9)-(line 1803,col 79)",
            "(line 1804,col 9)-(line 1810,col 9)",
            "(line 1811,col 9)-(line 1817,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.testGetLevenshteinDistance_StringStringInt()",
        "snippet": "    @Test\n    public void testGetLevenshteinDistance_StringStringInt() {\n        // empty strings\n        assertEquals(0, StringUtils.getLevenshteinDistance(\"\", \"\", 0));\n        assertEquals(7, StringUtils.getLevenshteinDistance(\"aaapppp\", \"\", 8));\n        assertEquals(7, StringUtils.getLevenshteinDistance(\"aaapppp\", \"\", 7));\n        assertEquals(-1, StringUtils.getLevenshteinDistance(\"aaapppp\", \"\", 6));\n\n        // unequal strings, zero threshold\n        assertEquals(-1, StringUtils.getLevenshteinDistance(\"b\", \"a\", 0));\n        assertEquals(-1, StringUtils.getLevenshteinDistance(\"a\", \"b\", 0));\n    \n        // equal strings\n        assertEquals(0, StringUtils.getLevenshteinDistance(\"aa\", \"aa\", 0));\n        assertEquals(0, StringUtils.getLevenshteinDistance(\"aa\", \"aa\", 2));\n\n        // same length\n        assertEquals(-1, StringUtils.getLevenshteinDistance(\"aaa\", \"bbb\", 2));\n        assertEquals(3, StringUtils.getLevenshteinDistance(\"aaa\", \"bbb\", 3));\n    \n        // big stripe\n        assertEquals(6, StringUtils.getLevenshteinDistance(\"aaaaaa\", \"b\", 10));\n\n        // distance less than threshold\n        assertEquals(7, StringUtils.getLevenshteinDistance(\"aaapppp\", \"b\", 8));\n        assertEquals(3, StringUtils.getLevenshteinDistance(\"a\", \"bbb\", 4));\n    \n        // distance equal to threshold\n        assertEquals(7, StringUtils.getLevenshteinDistance(\"aaapppp\", \"b\", 7));\n        assertEquals(3, StringUtils.getLevenshteinDistance(\"a\", \"bbb\", 3));\n\n        // distance greater than threshold\n        assertEquals(-1, StringUtils.getLevenshteinDistance(\"a\", \"bbb\", 2));\n        assertEquals(-1, StringUtils.getLevenshteinDistance(\"bbb\", \"a\", 2));\n        assertEquals(-1, StringUtils.getLevenshteinDistance(\"aaapppp\", \"b\", 6));\n\n        // stripe runs off array, strings not similar\n        assertEquals(-1, StringUtils.getLevenshteinDistance(\"a\", \"bbb\", 1));\n        assertEquals(-1, StringUtils.getLevenshteinDistance(\"bbb\", \"a\", 1));\n\n        // stripe runs off array, strings are similar\n        assertEquals(-1, StringUtils.getLevenshteinDistance(\"12345\", \"1234567\", 1));\n        assertEquals(-1, StringUtils.getLevenshteinDistance(\"1234567\", \"12345\", 1));\n\n        // old getLevenshteinDistance test cases\n        assertEquals(1, StringUtils.getLevenshteinDistance(\"frog\", \"fog\",1) );\n        assertEquals(3, StringUtils.getLevenshteinDistance(\"fly\", \"ant\",3) );\n        assertEquals(7, StringUtils.getLevenshteinDistance(\"elephant\", \"hippo\",7) );\n        assertEquals(-1, StringUtils.getLevenshteinDistance(\"elephant\", \"hippo\",6) );\n        assertEquals(7, StringUtils.getLevenshteinDistance(\"hippo\", \"elephant\",7) );\n        assertEquals(-1, StringUtils.getLevenshteinDistance(\"hippo\", \"elephant\",6) );\n        assertEquals(8, StringUtils.getLevenshteinDistance(\"hippo\", \"zzzzzzzz\",8) );\n        assertEquals(8, StringUtils.getLevenshteinDistance(\"zzzzzzzz\", \"hippo\",8) );\n        assertEquals(1, StringUtils.getLevenshteinDistance(\"hello\", \"hallo\",1) );\n\n        // exceptions\n        try {\n            @SuppressWarnings(\"unused\")\n            int d = StringUtils.getLevenshteinDistance(\"a\", null, 0);\n            fail(\"expecting IllegalArgumentException\");\n        } catch (IllegalArgumentException ex) {\n            // empty\n        }\n        try {\n            @SuppressWarnings(\"unused\")\n            int d = StringUtils.getLevenshteinDistance(null, \"a\", 0);\n            fail(\"expecting IllegalArgumentException\");\n        } catch (IllegalArgumentException ex) {\n            // empty\n        }\n\n        try {\n            @SuppressWarnings(\"unused\")\n            int d = StringUtils.getLevenshteinDistance(\"a\", \"a\", -1);\n            fail(\"expecting IllegalArgumentException\");\n        } catch (IllegalArgumentException ex) {\n            // empty\n        }\n    }\n",
        "begin_line": 1820,
        "end_line": 1898,
        "comment": "",
        "child_ranges": [
            "(line 1823,col 9)-(line 1823,col 71)",
            "(line 1824,col 9)-(line 1824,col 78)",
            "(line 1825,col 9)-(line 1825,col 78)",
            "(line 1826,col 9)-(line 1826,col 79)",
            "(line 1829,col 9)-(line 1829,col 74)",
            "(line 1830,col 9)-(line 1830,col 74)",
            "(line 1833,col 9)-(line 1833,col 75)",
            "(line 1834,col 9)-(line 1834,col 75)",
            "(line 1837,col 9)-(line 1837,col 78)",
            "(line 1838,col 9)-(line 1838,col 77)",
            "(line 1841,col 9)-(line 1841,col 79)",
            "(line 1844,col 9)-(line 1844,col 79)",
            "(line 1845,col 9)-(line 1845,col 75)",
            "(line 1848,col 9)-(line 1848,col 79)",
            "(line 1849,col 9)-(line 1849,col 75)",
            "(line 1852,col 9)-(line 1852,col 76)",
            "(line 1853,col 9)-(line 1853,col 76)",
            "(line 1854,col 9)-(line 1854,col 80)",
            "(line 1857,col 9)-(line 1857,col 76)",
            "(line 1858,col 9)-(line 1858,col 76)",
            "(line 1861,col 9)-(line 1861,col 84)",
            "(line 1862,col 9)-(line 1862,col 84)",
            "(line 1865,col 9)-(line 1865,col 78)",
            "(line 1866,col 9)-(line 1866,col 77)",
            "(line 1867,col 9)-(line 1867,col 84)",
            "(line 1868,col 9)-(line 1868,col 85)",
            "(line 1869,col 9)-(line 1869,col 84)",
            "(line 1870,col 9)-(line 1870,col 85)",
            "(line 1871,col 9)-(line 1871,col 84)",
            "(line 1872,col 9)-(line 1872,col 84)",
            "(line 1873,col 9)-(line 1873,col 81)",
            "(line 1876,col 9)-(line 1882,col 9)",
            "(line 1883,col 9)-(line 1889,col 9)",
            "(line 1891,col 9)-(line 1897,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.testEMPTY()",
        "snippet": "    @Test\n    public void testEMPTY() {\n        assertNotNull(StringUtils.EMPTY);\n        assertEquals(\"\", StringUtils.EMPTY);\n        assertEquals(0, StringUtils.EMPTY.length());\n    }\n",
        "begin_line": 1903,
        "end_line": 1908,
        "comment": "\n     * A sanity check for {@link StringUtils#EMPTY}.\n     ",
        "child_ranges": [
            "(line 1905,col 9)-(line 1905,col 41)",
            "(line 1906,col 9)-(line 1906,col 44)",
            "(line 1907,col 9)-(line 1907,col 52)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.testIsAllLowerCase()",
        "snippet": "    @Test\n    public void testIsAllLowerCase() {\n        assertFalse(StringUtils.isAllLowerCase(null));\n        assertFalse(StringUtils.isAllLowerCase(StringUtils.EMPTY));\n        assertTrue(StringUtils.isAllLowerCase(\"abc\"));\n        assertFalse(StringUtils.isAllLowerCase(\"abc \"));\n        assertFalse(StringUtils.isAllLowerCase(\"abC\"));\n    }\n",
        "begin_line": 1913,
        "end_line": 1920,
        "comment": "\n     * Test for {@link StringUtils#isAllLowerCase(CharSequence)}.\n     ",
        "child_ranges": [
            "(line 1915,col 9)-(line 1915,col 54)",
            "(line 1916,col 9)-(line 1916,col 67)",
            "(line 1917,col 9)-(line 1917,col 54)",
            "(line 1918,col 9)-(line 1918,col 56)",
            "(line 1919,col 9)-(line 1919,col 55)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.testIsAllUpperCase()",
        "snippet": "    @Test\n    public void testIsAllUpperCase() {\n        assertFalse(StringUtils.isAllUpperCase(null));\n        assertFalse(StringUtils.isAllUpperCase(StringUtils.EMPTY));\n        assertTrue(StringUtils.isAllUpperCase(\"ABC\"));\n        assertFalse(StringUtils.isAllUpperCase(\"ABC \"));\n        assertFalse(StringUtils.isAllUpperCase(\"aBC\"));\n    }\n",
        "begin_line": 1925,
        "end_line": 1932,
        "comment": "\n     * Test for {@link StringUtils#isAllUpperCase(CharSequence)}.\n     ",
        "child_ranges": [
            "(line 1927,col 9)-(line 1927,col 54)",
            "(line 1928,col 9)-(line 1928,col 67)",
            "(line 1929,col 9)-(line 1929,col 54)",
            "(line 1930,col 9)-(line 1930,col 56)",
            "(line 1931,col 9)-(line 1931,col 55)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.testRemoveStart()",
        "snippet": "    @Test\n    public void testRemoveStart() {\n        // StringUtils.removeStart(\"\", *)        = \"\"\n        assertNull(StringUtils.removeStart(null, null));\n        assertNull(StringUtils.removeStart(null, \"\"));\n        assertNull(StringUtils.removeStart(null, \"a\"));\n        \n        // StringUtils.removeStart(*, null)      = *\n        assertEquals(StringUtils.removeStart(\"\", null), \"\");\n        assertEquals(StringUtils.removeStart(\"\", \"\"), \"\");\n        assertEquals(StringUtils.removeStart(\"\", \"a\"), \"\");\n        \n        // All others:\n        assertEquals(StringUtils.removeStart(\"www.domain.com\", \"www.\"), \"domain.com\");\n        assertEquals(StringUtils.removeStart(\"domain.com\", \"www.\"), \"domain.com\");\n        assertEquals(StringUtils.removeStart(\"domain.com\", \"\"), \"domain.com\");        \n        assertEquals(StringUtils.removeStart(\"domain.com\", null), \"domain.com\");        \n    }\n",
        "begin_line": 1934,
        "end_line": 1951,
        "comment": "",
        "child_ranges": [
            "(line 1937,col 9)-(line 1937,col 56)",
            "(line 1938,col 9)-(line 1938,col 54)",
            "(line 1939,col 9)-(line 1939,col 55)",
            "(line 1942,col 9)-(line 1942,col 60)",
            "(line 1943,col 9)-(line 1943,col 58)",
            "(line 1944,col 9)-(line 1944,col 59)",
            "(line 1947,col 9)-(line 1947,col 86)",
            "(line 1948,col 9)-(line 1948,col 82)",
            "(line 1949,col 9)-(line 1949,col 78)",
            "(line 1950,col 9)-(line 1950,col 80)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.testRemoveStartIgnoreCase()",
        "snippet": "    @Test\n    public void testRemoveStartIgnoreCase() {\n        // StringUtils.removeStart(\"\", *)        = \"\"\n        assertNull(\"removeStartIgnoreCase(null, null)\", StringUtils.removeStartIgnoreCase(null, null));\n        assertNull(\"removeStartIgnoreCase(null, \\\"\\\")\", StringUtils.removeStartIgnoreCase(null, \"\"));\n        assertNull(\"removeStartIgnoreCase(null, \\\"a\\\")\", StringUtils.removeStartIgnoreCase(null, \"a\"));\n        \n        // StringUtils.removeStart(*, null)      = *\n        assertEquals(\"removeStartIgnoreCase(\\\"\\\", null)\", StringUtils.removeStartIgnoreCase(\"\", null), \"\");\n        assertEquals(\"removeStartIgnoreCase(\\\"\\\", \\\"\\\")\", StringUtils.removeStartIgnoreCase(\"\", \"\"), \"\");\n        assertEquals(\"removeStartIgnoreCase(\\\"\\\", \\\"a\\\")\", StringUtils.removeStartIgnoreCase(\"\", \"a\"), \"\");\n        \n        // All others:\n        assertEquals(\"removeStartIgnoreCase(\\\"www.domain.com\\\", \\\"www.\\\")\", StringUtils.removeStartIgnoreCase(\"www.domain.com\", \"www.\"), \"domain.com\");\n        assertEquals(\"removeStartIgnoreCase(\\\"domain.com\\\", \\\"www.\\\")\", StringUtils.removeStartIgnoreCase(\"domain.com\", \"www.\"), \"domain.com\");\n        assertEquals(\"removeStartIgnoreCase(\\\"domain.com\\\", \\\"\\\")\", StringUtils.removeStartIgnoreCase(\"domain.com\", \"\"), \"domain.com\");        \n        assertEquals(\"removeStartIgnoreCase(\\\"domain.com\\\", null)\", StringUtils.removeStartIgnoreCase(\"domain.com\", null), \"domain.com\");        \n        \n        // Case insensitive:\n        assertEquals(\"removeStartIgnoreCase(\\\"www.domain.com\\\", \\\"WWW.\\\")\", StringUtils.removeStartIgnoreCase(\"www.domain.com\", \"WWW.\"), \"domain.com\");\n    }\n",
        "begin_line": 1953,
        "end_line": 1973,
        "comment": "",
        "child_ranges": [
            "(line 1956,col 9)-(line 1956,col 103)",
            "(line 1957,col 9)-(line 1957,col 101)",
            "(line 1958,col 9)-(line 1958,col 103)",
            "(line 1961,col 9)-(line 1961,col 107)",
            "(line 1962,col 9)-(line 1962,col 105)",
            "(line 1963,col 9)-(line 1963,col 107)",
            "(line 1966,col 9)-(line 1966,col 151)",
            "(line 1967,col 9)-(line 1967,col 143)",
            "(line 1968,col 9)-(line 1968,col 135)",
            "(line 1969,col 9)-(line 1969,col 137)",
            "(line 1972,col 9)-(line 1972,col 151)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.testRemoveEnd()",
        "snippet": "    @Test\n    public void testRemoveEnd() {\n        // StringUtils.removeEnd(\"\", *)        = \"\"\n        assertNull(StringUtils.removeEnd(null, null));\n        assertNull(StringUtils.removeEnd(null, \"\"));\n        assertNull(StringUtils.removeEnd(null, \"a\"));\n        \n        // StringUtils.removeEnd(*, null)      = *\n        assertEquals(StringUtils.removeEnd(\"\", null), \"\");\n        assertEquals(StringUtils.removeEnd(\"\", \"\"), \"\");\n        assertEquals(StringUtils.removeEnd(\"\", \"a\"), \"\");\n        \n        // All others:\n        assertEquals(StringUtils.removeEnd(\"www.domain.com.\", \".com\"), \"www.domain.com.\");\n        assertEquals(StringUtils.removeEnd(\"www.domain.com\", \".com\"), \"www.domain\");\n        assertEquals(StringUtils.removeEnd(\"www.domain\", \".com\"), \"www.domain\");\n        assertEquals(StringUtils.removeEnd(\"domain.com\", \"\"), \"domain.com\");   \n        assertEquals(StringUtils.removeEnd(\"domain.com\", null), \"domain.com\");   \n    }\n",
        "begin_line": 1975,
        "end_line": 1993,
        "comment": "",
        "child_ranges": [
            "(line 1978,col 9)-(line 1978,col 54)",
            "(line 1979,col 9)-(line 1979,col 52)",
            "(line 1980,col 9)-(line 1980,col 53)",
            "(line 1983,col 9)-(line 1983,col 58)",
            "(line 1984,col 9)-(line 1984,col 56)",
            "(line 1985,col 9)-(line 1985,col 57)",
            "(line 1988,col 9)-(line 1988,col 90)",
            "(line 1989,col 9)-(line 1989,col 84)",
            "(line 1990,col 9)-(line 1990,col 80)",
            "(line 1991,col 9)-(line 1991,col 76)",
            "(line 1992,col 9)-(line 1992,col 78)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.testRemoveEndIgnoreCase()",
        "snippet": "    @Test\n    public void testRemoveEndIgnoreCase() {\n        // StringUtils.removeEndIgnoreCase(\"\", *)        = \"\"\n        assertNull(\"removeEndIgnoreCase(null, null)\", StringUtils.removeEndIgnoreCase(null, null));\n        assertNull(\"removeEndIgnoreCase(null, \\\"\\\")\", StringUtils.removeEndIgnoreCase(null, \"\"));\n        assertNull(\"removeEndIgnoreCase(null, \\\"a\\\")\", StringUtils.removeEndIgnoreCase(null, \"a\"));\n        \n        // StringUtils.removeEnd(*, null)      = *\n        assertEquals(\"removeEndIgnoreCase(\\\"\\\", null)\", StringUtils.removeEndIgnoreCase(\"\", null), \"\");\n        assertEquals(\"removeEndIgnoreCase(\\\"\\\", \\\"\\\")\", StringUtils.removeEndIgnoreCase(\"\", \"\"), \"\");\n        assertEquals(\"removeEndIgnoreCase(\\\"\\\", \\\"a\\\")\", StringUtils.removeEndIgnoreCase(\"\", \"a\"), \"\");\n        \n        // All others:\n        assertEquals(\"removeEndIgnoreCase(\\\"www.domain.com.\\\", \\\".com\\\")\", StringUtils.removeEndIgnoreCase(\"www.domain.com.\", \".com\"), \"www.domain.com.\");\n        assertEquals(\"removeEndIgnoreCase(\\\"www.domain.com\\\", \\\".com\\\")\", StringUtils.removeEndIgnoreCase(\"www.domain.com\", \".com\"), \"www.domain\");\n        assertEquals(\"removeEndIgnoreCase(\\\"www.domain\\\", \\\".com\\\")\", StringUtils.removeEndIgnoreCase(\"www.domain\", \".com\"), \"www.domain\");\n        assertEquals(\"removeEndIgnoreCase(\\\"domain.com\\\", \\\"\\\")\", StringUtils.removeEndIgnoreCase(\"domain.com\", \"\"), \"domain.com\");   \n        assertEquals(\"removeEndIgnoreCase(\\\"domain.com\\\", null)\", StringUtils.removeEndIgnoreCase(\"domain.com\", null), \"domain.com\");   \n\n        // Case insensitive:\n        assertEquals(\"removeEndIgnoreCase(\\\"www.domain.com\\\", \\\".COM\\\")\", StringUtils.removeEndIgnoreCase(\"www.domain.com\", \".COM\"), \"www.domain\");\n        assertEquals(\"removeEndIgnoreCase(\\\"www.domain.COM\\\", \\\".com\\\")\", StringUtils.removeEndIgnoreCase(\"www.domain.COM\", \".com\"), \"www.domain\");\n    }\n",
        "begin_line": 1995,
        "end_line": 2017,
        "comment": "",
        "child_ranges": [
            "(line 1998,col 9)-(line 1998,col 99)",
            "(line 1999,col 9)-(line 1999,col 97)",
            "(line 2000,col 9)-(line 2000,col 99)",
            "(line 2003,col 9)-(line 2003,col 103)",
            "(line 2004,col 9)-(line 2004,col 101)",
            "(line 2005,col 9)-(line 2005,col 103)",
            "(line 2008,col 9)-(line 2008,col 154)",
            "(line 2009,col 9)-(line 2009,col 147)",
            "(line 2010,col 9)-(line 2010,col 139)",
            "(line 2011,col 9)-(line 2011,col 131)",
            "(line 2012,col 9)-(line 2012,col 133)",
            "(line 2015,col 9)-(line 2015,col 147)",
            "(line 2016,col 9)-(line 2016,col 147)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.testRemove_String()",
        "snippet": "    @Test\n    public void testRemove_String() {\n        // StringUtils.remove(null, *)        = null\n        assertEquals(null, StringUtils.remove(null, null));\n        assertEquals(null, StringUtils.remove(null, \"\"));\n        assertEquals(null, StringUtils.remove(null, \"a\"));\n        \n        // StringUtils.remove(\"\", *)          = \"\"\n        assertEquals(\"\", StringUtils.remove(\"\", null));\n        assertEquals(\"\", StringUtils.remove(\"\", \"\"));\n        assertEquals(\"\", StringUtils.remove(\"\", \"a\"));\n        \n        // StringUtils.remove(*, null)        = *\n        assertEquals(null, StringUtils.remove(null, null));\n        assertEquals(\"\", StringUtils.remove(\"\", null));\n        assertEquals(\"a\", StringUtils.remove(\"a\", null));\n        \n        // StringUtils.remove(*, \"\")          = *\n        assertEquals(null, StringUtils.remove(null, \"\"));\n        assertEquals(\"\", StringUtils.remove(\"\", \"\"));\n        assertEquals(\"a\", StringUtils.remove(\"a\", \"\"));\n        \n        // StringUtils.remove(\"queued\", \"ue\") = \"qd\"\n        assertEquals(\"qd\", StringUtils.remove(\"queued\", \"ue\"));\n        \n        // StringUtils.remove(\"queued\", \"zz\") = \"queued\"\n        assertEquals(\"queued\", StringUtils.remove(\"queued\", \"zz\"));\n    }\n",
        "begin_line": 2019,
        "end_line": 2046,
        "comment": "",
        "child_ranges": [
            "(line 2022,col 9)-(line 2022,col 59)",
            "(line 2023,col 9)-(line 2023,col 57)",
            "(line 2024,col 9)-(line 2024,col 58)",
            "(line 2027,col 9)-(line 2027,col 55)",
            "(line 2028,col 9)-(line 2028,col 53)",
            "(line 2029,col 9)-(line 2029,col 54)",
            "(line 2032,col 9)-(line 2032,col 59)",
            "(line 2033,col 9)-(line 2033,col 55)",
            "(line 2034,col 9)-(line 2034,col 57)",
            "(line 2037,col 9)-(line 2037,col 57)",
            "(line 2038,col 9)-(line 2038,col 53)",
            "(line 2039,col 9)-(line 2039,col 55)",
            "(line 2042,col 9)-(line 2042,col 63)",
            "(line 2045,col 9)-(line 2045,col 67)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.testRemove_char()",
        "snippet": "    @Test\n    public void testRemove_char() {\n        // StringUtils.remove(null, *)       = null\n        assertEquals(null, StringUtils.remove(null, 'a'));\n        assertEquals(null, StringUtils.remove(null, 'a'));\n        assertEquals(null, StringUtils.remove(null, 'a'));\n        \n        // StringUtils.remove(\"\", *)          = \"\"\n        assertEquals(\"\", StringUtils.remove(\"\", 'a'));\n        assertEquals(\"\", StringUtils.remove(\"\", 'a'));\n        assertEquals(\"\", StringUtils.remove(\"\", 'a'));\n        \n        // StringUtils.remove(\"queued\", 'u') = \"qeed\"\n        assertEquals(\"qeed\", StringUtils.remove(\"queued\", 'u'));\n        \n        // StringUtils.remove(\"queued\", 'z') = \"queued\"\n        assertEquals(\"queued\", StringUtils.remove(\"queued\", 'z'));\n    }\n",
        "begin_line": 2048,
        "end_line": 2065,
        "comment": "",
        "child_ranges": [
            "(line 2051,col 9)-(line 2051,col 58)",
            "(line 2052,col 9)-(line 2052,col 58)",
            "(line 2053,col 9)-(line 2053,col 58)",
            "(line 2056,col 9)-(line 2056,col 54)",
            "(line 2057,col 9)-(line 2057,col 54)",
            "(line 2058,col 9)-(line 2058,col 54)",
            "(line 2061,col 9)-(line 2061,col 64)",
            "(line 2064,col 9)-(line 2064,col 66)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.testDifferenceAt_StringArray()",
        "snippet": "    @Test\n    public void testDifferenceAt_StringArray() {        \n        assertEquals(-1, StringUtils.indexOfDifference((String[])null));\n        assertEquals(-1, StringUtils.indexOfDifference(new String[] {}));\n        assertEquals(-1, StringUtils.indexOfDifference(new String[] {\"abc\"}));\n        assertEquals(-1, StringUtils.indexOfDifference(new String[] {null, null}));\n        assertEquals(-1, StringUtils.indexOfDifference(new String[] {\"\", \"\"}));\n        assertEquals(0, StringUtils.indexOfDifference(new String[] {\"\", null}));\n        assertEquals(0, StringUtils.indexOfDifference(new String[] {\"abc\", null, null}));\n        assertEquals(0, StringUtils.indexOfDifference(new String[] {null, null, \"abc\"}));\n        assertEquals(0, StringUtils.indexOfDifference(new String[] {\"\", \"abc\"}));\n        assertEquals(0, StringUtils.indexOfDifference(new String[] {\"abc\", \"\"}));\n        assertEquals(-1, StringUtils.indexOfDifference(new String[] {\"abc\", \"abc\"}));\n        assertEquals(1, StringUtils.indexOfDifference(new String[] {\"abc\", \"a\"}));\n        assertEquals(2, StringUtils.indexOfDifference(new String[] {\"ab\", \"abxyz\"}));\n        assertEquals(2, StringUtils.indexOfDifference(new String[] {\"abcde\", \"abxyz\"}));\n        assertEquals(0, StringUtils.indexOfDifference(new String[] {\"abcde\", \"xyz\"}));\n        assertEquals(0, StringUtils.indexOfDifference(new String[] {\"xyz\", \"abcde\"}));\n        assertEquals(7, StringUtils.indexOfDifference(new String[] {\"i am a machine\", \"i am a robot\"}));\n    }\n",
        "begin_line": 2067,
        "end_line": 2086,
        "comment": "",
        "child_ranges": [
            "(line 2069,col 9)-(line 2069,col 72)",
            "(line 2070,col 9)-(line 2070,col 73)",
            "(line 2071,col 9)-(line 2071,col 78)",
            "(line 2072,col 9)-(line 2072,col 83)",
            "(line 2073,col 9)-(line 2073,col 79)",
            "(line 2074,col 9)-(line 2074,col 80)",
            "(line 2075,col 9)-(line 2075,col 89)",
            "(line 2076,col 9)-(line 2076,col 89)",
            "(line 2077,col 9)-(line 2077,col 81)",
            "(line 2078,col 9)-(line 2078,col 81)",
            "(line 2079,col 9)-(line 2079,col 85)",
            "(line 2080,col 9)-(line 2080,col 82)",
            "(line 2081,col 9)-(line 2081,col 85)",
            "(line 2082,col 9)-(line 2082,col 88)",
            "(line 2083,col 9)-(line 2083,col 86)",
            "(line 2084,col 9)-(line 2084,col 86)",
            "(line 2085,col 9)-(line 2085,col 104)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.testGetCommonPrefix_StringArray()",
        "snippet": "    @Test\n    public void testGetCommonPrefix_StringArray() {\n        assertEquals(\"\", StringUtils.getCommonPrefix((String[])null));\n        assertEquals(\"\", StringUtils.getCommonPrefix());\n        assertEquals(\"abc\", StringUtils.getCommonPrefix(\"abc\"));\n        assertEquals(\"\", StringUtils.getCommonPrefix(null, null));\n        assertEquals(\"\", StringUtils.getCommonPrefix(\"\", \"\"));\n        assertEquals(\"\", StringUtils.getCommonPrefix(\"\", null));\n        assertEquals(\"\", StringUtils.getCommonPrefix(\"abc\", null, null));\n        assertEquals(\"\", StringUtils.getCommonPrefix(null, null, \"abc\"));\n        assertEquals(\"\", StringUtils.getCommonPrefix(\"\", \"abc\"));\n        assertEquals(\"\", StringUtils.getCommonPrefix(\"abc\", \"\"));\n        assertEquals(\"abc\", StringUtils.getCommonPrefix(\"abc\", \"abc\"));\n        assertEquals(\"a\", StringUtils.getCommonPrefix(\"abc\", \"a\"));\n        assertEquals(\"ab\", StringUtils.getCommonPrefix(\"ab\", \"abxyz\"));\n        assertEquals(\"ab\", StringUtils.getCommonPrefix(\"abcde\", \"abxyz\"));\n        assertEquals(\"\", StringUtils.getCommonPrefix(\"abcde\", \"xyz\"));\n        assertEquals(\"\", StringUtils.getCommonPrefix(\"xyz\", \"abcde\"));\n        assertEquals(\"i am a \", StringUtils.getCommonPrefix(\"i am a machine\", \"i am a robot\"));\n    }\n",
        "begin_line": 2088,
        "end_line": 2107,
        "comment": "",
        "child_ranges": [
            "(line 2090,col 9)-(line 2090,col 70)",
            "(line 2091,col 9)-(line 2091,col 56)",
            "(line 2092,col 9)-(line 2092,col 64)",
            "(line 2093,col 9)-(line 2093,col 66)",
            "(line 2094,col 9)-(line 2094,col 62)",
            "(line 2095,col 9)-(line 2095,col 64)",
            "(line 2096,col 9)-(line 2096,col 73)",
            "(line 2097,col 9)-(line 2097,col 73)",
            "(line 2098,col 9)-(line 2098,col 65)",
            "(line 2099,col 9)-(line 2099,col 65)",
            "(line 2100,col 9)-(line 2100,col 71)",
            "(line 2101,col 9)-(line 2101,col 67)",
            "(line 2102,col 9)-(line 2102,col 71)",
            "(line 2103,col 9)-(line 2103,col 74)",
            "(line 2104,col 9)-(line 2104,col 70)",
            "(line 2105,col 9)-(line 2105,col 70)",
            "(line 2106,col 9)-(line 2106,col 95)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.testNormalizeSpace()",
        "snippet": "    @Test\n    public void testNormalizeSpace() {\n        assertEquals(null, StringUtils.normalizeSpace(null));\n        assertEquals(\"\", StringUtils.normalizeSpace(\"\"));\n        assertEquals(\"\", StringUtils.normalizeSpace(\" \"));\n        assertEquals(\"\", StringUtils.normalizeSpace(\"\\t\"));\n        assertEquals(\"\", StringUtils.normalizeSpace(\"\\n\"));        \n        assertEquals(\"\", StringUtils.normalizeSpace(\"\\u0009\"));\n        assertEquals(\"\", StringUtils.normalizeSpace(\"\\u000B\"));\n        assertEquals(\"\", StringUtils.normalizeSpace(\"\\u000C\"));\n        assertEquals(\"\", StringUtils.normalizeSpace(\"\\u001C\"));\n        assertEquals(\"\", StringUtils.normalizeSpace(\"\\u001D\"));\n        assertEquals(\"\", StringUtils.normalizeSpace(\"\\u001E\"));\n        assertEquals(\"\", StringUtils.normalizeSpace(\"\\u001F\"));\n        assertEquals(\"\", StringUtils.normalizeSpace(\"\\f\"));\n        assertEquals(\"\", StringUtils.normalizeSpace(\"\\r\"));\n        assertEquals(\"a\", StringUtils.normalizeSpace(\"  a  \"));\n        assertEquals(\"a b c\", StringUtils.normalizeSpace(\"  a  b   c  \"));\n        assertEquals(\"a b c\", StringUtils.normalizeSpace(\"a\\t\\f\\r  b\\u000B   c\\n\"));\n    }\n",
        "begin_line": 2109,
        "end_line": 2128,
        "comment": "",
        "child_ranges": [
            "(line 2111,col 9)-(line 2111,col 61)",
            "(line 2112,col 9)-(line 2112,col 57)",
            "(line 2113,col 9)-(line 2113,col 58)",
            "(line 2114,col 9)-(line 2114,col 59)",
            "(line 2115,col 9)-(line 2115,col 59)",
            "(line 2116,col 9)-(line 2116,col 63)",
            "(line 2117,col 9)-(line 2117,col 63)",
            "(line 2118,col 9)-(line 2118,col 63)",
            "(line 2119,col 9)-(line 2119,col 63)",
            "(line 2120,col 9)-(line 2120,col 63)",
            "(line 2121,col 9)-(line 2121,col 63)",
            "(line 2122,col 9)-(line 2122,col 63)",
            "(line 2123,col 9)-(line 2123,col 59)",
            "(line 2124,col 9)-(line 2124,col 59)",
            "(line 2125,col 9)-(line 2125,col 63)",
            "(line 2126,col 9)-(line 2126,col 74)",
            "(line 2127,col 9)-(line 2127,col 84)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.testLANG666()",
        "snippet": "    @Test\n    public void testLANG666() {\n        assertEquals(\"12\",StringUtils.stripEnd(\"120.00\", \".0\"));\n        assertEquals(\"121\",StringUtils.stripEnd(\"121.00\", \".0\"));\n    }\n",
        "begin_line": 2130,
        "end_line": 2134,
        "comment": "",
        "child_ranges": [
            "(line 2132,col 9)-(line 2132,col 64)",
            "(line 2133,col 9)-(line 2133,col 65)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.testStringUtilsCharSequenceContract()",
        "snippet": "    @Test\n    public void testStringUtilsCharSequenceContract() {\n        Class<StringUtils> c = StringUtils.class;\n        Method[] methods = c.getMethods();\n        for (Method m : methods) {\n            if (m.getReturnType() == String.class || m.getReturnType() == String[].class) {\n                // Assume this is mutable and ensure the first parameter is not CharSequence.\n                // It may be String or it may be something else (String[], Object, Object[]) so \n                // don't actively test for that.\n                Class<?>[] params = m.getParameterTypes();\n                if ( params.length > 0 && (params[0] == CharSequence.class || params[0] == CharSequence[].class)) {\n                    fail(\"The method \" + m + \" appears to be mutable in spirit and therefore must not accept a CharSequence\");\n                }\n            } else {\n                // Assume this is immutable in spirit and ensure the first parameter is not String.\n                // As above, it may be something other than CharSequence.\n                Class<?>[] params = m.getParameterTypes();\n                if ( params.length > 0 && (params[0] == String.class || params[0] == String[].class)) {\n                    fail(\"The method \" + m + \" appears to be immutable in spirit and therefore must not accept a String\");\n                }\n            }\n        }\n    }\n",
        "begin_line": 2140,
        "end_line": 2162,
        "comment": " This test enforces that this is done.",
        "child_ranges": [
            "(line 2142,col 9)-(line 2142,col 49)",
            "(line 2143,col 9)-(line 2143,col 42)",
            "(line 2144,col 9)-(line 2161,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.testToString()",
        "snippet": "    @Test\n    public void testToString() throws UnsupportedEncodingException {\n        final String expectedString = \"The quick brown fox jumped over the lazy dog.\";\n        String encoding = SystemUtils.FILE_ENCODING;\n        byte[] expectedBytes = expectedString.getBytes(encoding);\n        // sanity check start\n        assertArrayEquals(expectedBytes, expectedString.getBytes());\n        // sanity check end\n        assertEquals(expectedString, StringUtils.toString(expectedBytes, null));\n        assertEquals(expectedString, StringUtils.toString(expectedBytes, encoding));\n        encoding = \"UTF-16\";\n        expectedBytes = expectedString.getBytes(encoding);\n        assertEquals(expectedString, StringUtils.toString(expectedBytes, encoding));\n    }\n",
        "begin_line": 2170,
        "end_line": 2183,
        "comment": "\n     * Tests {@link StringUtils#toString(byte[], String)}\n     * \n     * @throws UnsupportedEncodingException\n     * @see StringUtils#toString(byte[], String)\n     ",
        "child_ranges": [
            "(line 2172,col 9)-(line 2172,col 86)",
            "(line 2173,col 9)-(line 2173,col 52)",
            "(line 2174,col 9)-(line 2174,col 65)",
            "(line 2176,col 9)-(line 2176,col 68)",
            "(line 2178,col 9)-(line 2178,col 80)",
            "(line 2179,col 9)-(line 2179,col 84)",
            "(line 2180,col 9)-(line 2180,col 28)",
            "(line 2181,col 9)-(line 2181,col 58)",
            "(line 2182,col 9)-(line 2182,col 84)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.testEscapeSurrogatePairs()",
        "snippet": "    @Test\n    public void testEscapeSurrogatePairs() throws Exception {\n        assertEquals(\"\\uD83D\\uDE30\", StringEscapeUtils.escapeCsv(\"\\uD83D\\uDE30\"));\n        // Examples from https://en.wikipedia.org/wiki/UTF-16\n        assertEquals(\"\\uD800\\uDC00\", StringEscapeUtils.escapeCsv(\"\\uD800\\uDC00\"));\n        assertEquals(\"\\uD834\\uDD1E\", StringEscapeUtils.escapeCsv(\"\\uD834\\uDD1E\"));\n        assertEquals(\"\\uDBFF\\uDFFD\", StringEscapeUtils.escapeCsv(\"\\uDBFF\\uDFFD\"));\n        \n    }\n",
        "begin_line": 2185,
        "end_line": 2193,
        "comment": "",
        "child_ranges": [
            "(line 2187,col 9)-(line 2187,col 82)",
            "(line 2189,col 9)-(line 2189,col 82)",
            "(line 2190,col 9)-(line 2190,col 82)",
            "(line 2191,col 9)-(line 2191,col 82)"
        ]
    }
]