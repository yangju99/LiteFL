[
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testConstructorCycle()",
        "snippet": "  public void testConstructorCycle() {\n    CompilerOptions options = createCompilerOptions();\n    options.checkTypes = true;\n    test(options,\n        \"/** @return {function()} */ var AsyncTestCase = function() {};\\n\" +\n        \"/**\\n\" +\n        \" * @constructor\\n\" +\n        \" */ Foo = /** @type {function(new:Foo)} */ (AyncTestCase());\",\n        RhinoErrorReporter.PARSE_ERROR);\n  }\n",
        "begin_line": 48,
        "end_line": 57,
        "comment": "",
        "child_ranges": [
            "(line 49,col 5)-(line 49,col 54)",
            "(line 50,col 5)-(line 50,col 30)",
            "(line 51,col 5)-(line 56,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testBug1949424()",
        "snippet": "  public void testBug1949424() {\n    CompilerOptions options = createCompilerOptions();\n    options.collapseProperties = true;\n    options.closurePass = true;\n    test(options, CLOSURE_BOILERPLATE + \"goog.provide('FOO'); FOO.bar = 3;\",\n         CLOSURE_COMPILED + \"var FOO$bar = 3;\");\n  }\n",
        "begin_line": 59,
        "end_line": 65,
        "comment": "",
        "child_ranges": [
            "(line 60,col 5)-(line 60,col 54)",
            "(line 61,col 5)-(line 61,col 38)",
            "(line 62,col 5)-(line 62,col 31)",
            "(line 63,col 5)-(line 64,col 48)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testBug1949424_v2()",
        "snippet": "  public void testBug1949424_v2() {\n    CompilerOptions options = createCompilerOptions();\n    options.collapseProperties = true;\n    options.closurePass = true;\n    test(options, CLOSURE_BOILERPLATE + \"goog.provide('FOO.BAR'); FOO.BAR = 3;\",\n         CLOSURE_COMPILED + \"var FOO$BAR = 3;\");\n  }\n",
        "begin_line": 67,
        "end_line": 73,
        "comment": "",
        "child_ranges": [
            "(line 68,col 5)-(line 68,col 54)",
            "(line 69,col 5)-(line 69,col 38)",
            "(line 70,col 5)-(line 70,col 31)",
            "(line 71,col 5)-(line 72,col 48)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testBug1956277()",
        "snippet": "  public void testBug1956277() {\n    CompilerOptions options = createCompilerOptions();\n    options.collapseProperties = true;\n    options.inlineVariables = true;\n    test(options, \"var CONST = {}; CONST.bar = null;\" +\n         \"function f(url) { CONST.bar = url; }\",\n         \"var CONST$bar = null; function f(url) { CONST$bar = url; }\");\n  }\n",
        "begin_line": 75,
        "end_line": 82,
        "comment": "",
        "child_ranges": [
            "(line 76,col 5)-(line 76,col 54)",
            "(line 77,col 5)-(line 77,col 38)",
            "(line 78,col 5)-(line 78,col 35)",
            "(line 79,col 5)-(line 81,col 71)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testBug1962380()",
        "snippet": "  public void testBug1962380() {\n    CompilerOptions options = createCompilerOptions();\n    options.collapseProperties = true;\n    options.inlineVariables = true;\n    options.generateExports = true;\n    test(options,\n         CLOSURE_BOILERPLATE + \"/** @export */ goog.CONSTANT = 1;\" +\n         \"var x = goog.CONSTANT;\",\n         \"(function() {})('goog.CONSTANT', 1);\" +\n         \"var x = 1;\");\n  }\n",
        "begin_line": 84,
        "end_line": 94,
        "comment": "",
        "child_ranges": [
            "(line 85,col 5)-(line 85,col 54)",
            "(line 86,col 5)-(line 86,col 38)",
            "(line 87,col 5)-(line 87,col 35)",
            "(line 88,col 5)-(line 88,col 35)",
            "(line 89,col 5)-(line 93,col 23)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testBug2410122()",
        "snippet": "  public void testBug2410122() {\n    CompilerOptions options = createCompilerOptions();\n    options.generateExports = true;\n    options.closurePass = true;\n    test(options,\n         \"var goog = {};\" +\n         \"function F() {}\" +\n         \"/** @export */ function G() { goog.base(this); } \" +\n         \"goog.inherits(G, F);\",\n         \"var goog = {};\" +\n         \"function F() {}\" +\n         \"function G() { F.call(this); } \" +\n         \"goog.inherits(G, F); goog.exportSymbol('G', G);\");\n  }\n",
        "begin_line": 96,
        "end_line": 109,
        "comment": "",
        "child_ranges": [
            "(line 97,col 5)-(line 97,col 54)",
            "(line 98,col 5)-(line 98,col 35)",
            "(line 99,col 5)-(line 99,col 31)",
            "(line 100,col 5)-(line 108,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testIssue90()",
        "snippet": "  public void testIssue90() {\n    CompilerOptions options = createCompilerOptions();\n    options.foldConstants = true;\n    options.inlineVariables = true;\n    options.removeDeadCode = true;\n    test(options,\n         \"var x; x && alert(1);\",\n         \"\");\n  }\n",
        "begin_line": 111,
        "end_line": 119,
        "comment": "",
        "child_ranges": [
            "(line 112,col 5)-(line 112,col 54)",
            "(line 113,col 5)-(line 113,col 33)",
            "(line 114,col 5)-(line 114,col 35)",
            "(line 115,col 5)-(line 115,col 34)",
            "(line 116,col 5)-(line 118,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testClosurePassOff()",
        "snippet": "  public void testClosurePassOff() {\n    CompilerOptions options = createCompilerOptions();\n    options.closurePass = false;\n    testSame(\n        options,\n        \"var goog = {}; goog.require = function(x) {}; goog.require('foo');\");\n    testSame(\n        options,\n        \"var goog = {}; goog.getCssName = function(x) {};\" +\n        \"goog.getCssName('foo');\");\n  }\n",
        "begin_line": 121,
        "end_line": 131,
        "comment": "",
        "child_ranges": [
            "(line 122,col 5)-(line 122,col 54)",
            "(line 123,col 5)-(line 123,col 32)",
            "(line 124,col 5)-(line 126,col 78)",
            "(line 127,col 5)-(line 130,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testClosurePassOn()",
        "snippet": "  public void testClosurePassOn() {\n    CompilerOptions options = createCompilerOptions();\n    options.closurePass = true;\n    test(\n        options,\n        \"var goog = {}; goog.require = function(x) {}; goog.require('foo');\",\n        ProcessClosurePrimitives.MISSING_PROVIDE_ERROR);\n    test(\n        options,\n        \"/** @define {boolean} */ var COMPILED = false;\" +\n        \"var goog = {}; goog.getCssName = function(x) {};\" +\n        \"goog.getCssName('foo');\",\n        \"var COMPILED = true;\" +\n        \"var goog = {}; goog.getCssName = function(x) {};\" +\n        \"'foo';\");\n  }\n",
        "begin_line": 133,
        "end_line": 148,
        "comment": "",
        "child_ranges": [
            "(line 134,col 5)-(line 134,col 54)",
            "(line 135,col 5)-(line 135,col 31)",
            "(line 136,col 5)-(line 139,col 56)",
            "(line 140,col 5)-(line 147,col 18)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testCssNameCheck()",
        "snippet": "  public void testCssNameCheck() {\n    CompilerOptions options = createCompilerOptions();\n    options.closurePass = true;\n    options.checkMissingGetCssNameLevel = CheckLevel.ERROR;\n    options.checkMissingGetCssNameBlacklist = \"foo\";\n    test(options, \"var x = 'foo';\",\n         CheckMissingGetCssName.MISSING_GETCSSNAME);\n  }\n",
        "begin_line": 150,
        "end_line": 157,
        "comment": "",
        "child_ranges": [
            "(line 151,col 5)-(line 151,col 54)",
            "(line 152,col 5)-(line 152,col 31)",
            "(line 153,col 5)-(line 153,col 59)",
            "(line 154,col 5)-(line 154,col 52)",
            "(line 155,col 5)-(line 156,col 52)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testBug2592659()",
        "snippet": "  public void testBug2592659() {\n    CompilerOptions options = createCompilerOptions();\n    options.closurePass = true;\n    options.checkTypes = true;\n    options.checkMissingGetCssNameLevel = CheckLevel.WARNING;\n    options.checkMissingGetCssNameBlacklist = \"foo\";\n    test(options,\n        \"var goog = {};\\n\" +\n        \"/**\\n\" +\n        \" * @param {string} className\\n\" +\n        \" * @param {string=} opt_modifier\\n\" +\n        \" * @return {string}\\n\" +\n        \"*/\\n\" +\n        \"goog.getCssName = function(className, opt_modifier) {}\\n\" +\n        \"var x = goog.getCssName(123, 'a');\",\n        TypeValidator.TYPE_MISMATCH_WARNING);\n  }\n",
        "begin_line": 159,
        "end_line": 175,
        "comment": "",
        "child_ranges": [
            "(line 160,col 5)-(line 160,col 54)",
            "(line 161,col 5)-(line 161,col 31)",
            "(line 162,col 5)-(line 162,col 30)",
            "(line 163,col 5)-(line 163,col 61)",
            "(line 164,col 5)-(line 164,col 52)",
            "(line 165,col 5)-(line 174,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testTypedefBeforeOwner1()",
        "snippet": "  public void testTypedefBeforeOwner1() {\n    CompilerOptions options = createCompilerOptions();\n    options.closurePass = true;\n    test(options,\n         \"goog.provide('foo.Bar.Type');\\n\" +\n         \"goog.provide('foo.Bar');\\n\" +\n         \"/** @typedef {number} */ foo.Bar.Type;\\n\" +\n         \"foo.Bar = function() {};\",\n         \"var foo = {}; foo.Bar.Type; foo.Bar = function() {};\");\n  }\n",
        "begin_line": 177,
        "end_line": 186,
        "comment": "",
        "child_ranges": [
            "(line 178,col 5)-(line 178,col 54)",
            "(line 179,col 5)-(line 179,col 31)",
            "(line 180,col 5)-(line 185,col 65)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testTypedefBeforeOwner2()",
        "snippet": "  public void testTypedefBeforeOwner2() {\n    CompilerOptions options = createCompilerOptions();\n    options.closurePass = true;\n    options.collapseProperties = true;\n    test(options,\n         \"goog.provide('foo.Bar.Type');\\n\" +\n         \"goog.provide('foo.Bar');\\n\" +\n         \"/** @typedef {number} */ foo.Bar.Type;\\n\" +\n         \"foo.Bar = function() {};\",\n         \"var foo$Bar$Type; var foo$Bar = function() {};\");\n  }\n",
        "begin_line": 188,
        "end_line": 198,
        "comment": "",
        "child_ranges": [
            "(line 189,col 5)-(line 189,col 54)",
            "(line 190,col 5)-(line 190,col 31)",
            "(line 191,col 5)-(line 191,col 38)",
            "(line 192,col 5)-(line 197,col 59)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testExportedNames()",
        "snippet": "  public void testExportedNames() {\n    CompilerOptions options = createCompilerOptions();\n    options.closurePass = true;\n    options.variableRenaming = VariableRenamingPolicy.ALL;\n    test(options,\n         \"/** @define {boolean} */ var COMPILED = false;\" +\n         \"var goog = {}; goog.exportSymbol('b', goog);\",\n         \"var a = true; var c = {}; c.exportSymbol('b', c);\");\n    test(options,\n         \"/** @define {boolean} */ var COMPILED = false;\" +\n         \"var goog = {}; goog.exportSymbol('a', goog);\",\n         \"var b = true; var c = {}; c.exportSymbol('a', c);\");\n  }\n",
        "begin_line": 200,
        "end_line": 212,
        "comment": "",
        "child_ranges": [
            "(line 201,col 5)-(line 201,col 54)",
            "(line 202,col 5)-(line 202,col 31)",
            "(line 203,col 5)-(line 203,col 58)",
            "(line 204,col 5)-(line 207,col 62)",
            "(line 208,col 5)-(line 211,col 62)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testCheckGlobalThisOn()",
        "snippet": "  public void testCheckGlobalThisOn() {\n    CompilerOptions options = createCompilerOptions();\n    options.checkSuspiciousCode = true;\n    options.checkGlobalThisLevel = CheckLevel.ERROR;\n    test(options, \"function f() { this.y = 3; }\", CheckGlobalThis.GLOBAL_THIS);\n  }\n",
        "begin_line": 214,
        "end_line": 219,
        "comment": "",
        "child_ranges": [
            "(line 215,col 5)-(line 215,col 54)",
            "(line 216,col 5)-(line 216,col 39)",
            "(line 217,col 5)-(line 217,col 52)",
            "(line 218,col 5)-(line 218,col 79)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testSusiciousCodeOff()",
        "snippet": "  public void testSusiciousCodeOff() {\n    CompilerOptions options = createCompilerOptions();\n    options.checkSuspiciousCode = false;\n    options.checkGlobalThisLevel = CheckLevel.ERROR;\n    test(options, \"function f() { this.y = 3; }\", CheckGlobalThis.GLOBAL_THIS);\n  }\n",
        "begin_line": 221,
        "end_line": 226,
        "comment": "",
        "child_ranges": [
            "(line 222,col 5)-(line 222,col 54)",
            "(line 223,col 5)-(line 223,col 40)",
            "(line 224,col 5)-(line 224,col 52)",
            "(line 225,col 5)-(line 225,col 79)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testCheckGlobalThisOff()",
        "snippet": "  public void testCheckGlobalThisOff() {\n    CompilerOptions options = createCompilerOptions();\n    options.checkSuspiciousCode = true;\n    options.checkGlobalThisLevel = CheckLevel.OFF;\n    testSame(options, \"function f() { this.y = 3; }\");\n  }\n",
        "begin_line": 228,
        "end_line": 233,
        "comment": "",
        "child_ranges": [
            "(line 229,col 5)-(line 229,col 54)",
            "(line 230,col 5)-(line 230,col 39)",
            "(line 231,col 5)-(line 231,col 50)",
            "(line 232,col 5)-(line 232,col 54)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testCheckRequiresAndCheckProvidesOff()",
        "snippet": "  public void testCheckRequiresAndCheckProvidesOff() {\n    testSame(createCompilerOptions(), new String[] {\n      \"/** @constructor */ function Foo() {}\",\n      \"new Foo();\"\n    });\n  }\n",
        "begin_line": 235,
        "end_line": 240,
        "comment": "",
        "child_ranges": [
            "(line 236,col 5)-(line 239,col 7)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testCheckRequiresOn()",
        "snippet": "  public void testCheckRequiresOn() {\n    CompilerOptions options = createCompilerOptions();\n    options.checkRequires = CheckLevel.ERROR;\n    test(options, new String[] {\n      \"/** @constructor */ function Foo() {}\",\n      \"new Foo();\"\n    }, CheckRequiresForConstructors.MISSING_REQUIRE_WARNING);\n  }\n",
        "begin_line": 242,
        "end_line": 249,
        "comment": "",
        "child_ranges": [
            "(line 243,col 5)-(line 243,col 54)",
            "(line 244,col 5)-(line 244,col 45)",
            "(line 245,col 5)-(line 248,col 61)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testCheckProvidesOn()",
        "snippet": "  public void testCheckProvidesOn() {\n    CompilerOptions options = createCompilerOptions();\n    options.checkProvides = CheckLevel.ERROR;\n    test(options, new String[] {\n      \"/** @constructor */ function Foo() {}\",\n      \"new Foo();\"\n    }, CheckProvides.MISSING_PROVIDE_WARNING);\n  }\n",
        "begin_line": 251,
        "end_line": 258,
        "comment": "",
        "child_ranges": [
            "(line 252,col 5)-(line 252,col 54)",
            "(line 253,col 5)-(line 253,col 45)",
            "(line 254,col 5)-(line 257,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testGenerateExportsOff()",
        "snippet": "  public void testGenerateExportsOff() {\n    testSame(createCompilerOptions(), \"/** @export */ function f() {}\");\n  }\n",
        "begin_line": 260,
        "end_line": 262,
        "comment": "",
        "child_ranges": [
            "(line 261,col 5)-(line 261,col 72)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testGenerateExportsOn()",
        "snippet": "  public void testGenerateExportsOn() {\n    CompilerOptions options = createCompilerOptions();\n    options.generateExports = true;\n    test(options, \"/** @export */ function f() {}\",\n         \"/** @export */ function f() {} goog.exportSymbol('f', f);\");\n  }\n",
        "begin_line": 264,
        "end_line": 269,
        "comment": "",
        "child_ranges": [
            "(line 265,col 5)-(line 265,col 54)",
            "(line 266,col 5)-(line 266,col 35)",
            "(line 267,col 5)-(line 268,col 70)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testAngularPassOff()",
        "snippet": "  public void testAngularPassOff() {\n    testSame(createCompilerOptions(),\n        \"/** @ngInject */ function f() {} \" +\n        \"/** @ngInject */ function g(a){} \" +\n        \"/** @ngInject */ var b = function f(a) {} \");\n  }\n",
        "begin_line": 271,
        "end_line": 276,
        "comment": "",
        "child_ranges": [
            "(line 272,col 5)-(line 275,col 54)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testAngularPassOn()",
        "snippet": "  public void testAngularPassOn() {\n    CompilerOptions options = createCompilerOptions();\n    options.angularPass = true;\n    test(options,\n        \"/** @ngInject */ function f() {} \" +\n        \"/** @ngInject */ function g(a){} \" +\n        \"/** @ngInject */ var b = function f(a, b, c) {} \",\n\n        \"function f() {} \" +\n        \"function g(a) {} g['$inject']=['a'];\" +\n        \"var b = function f(a, b, c) {}; b['$inject']=['a', 'b', 'c']\");\n  }\n",
        "begin_line": 278,
        "end_line": 289,
        "comment": "",
        "child_ranges": [
            "(line 279,col 5)-(line 279,col 54)",
            "(line 280,col 5)-(line 280,col 31)",
            "(line 281,col 5)-(line 288,col 72)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testExportTestFunctionsOff()",
        "snippet": "  public void testExportTestFunctionsOff() {\n    testSame(createCompilerOptions(), \"function testFoo() {}\");\n  }\n",
        "begin_line": 291,
        "end_line": 293,
        "comment": "",
        "child_ranges": [
            "(line 292,col 5)-(line 292,col 63)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testExportTestFunctionsOn()",
        "snippet": "  public void testExportTestFunctionsOn() {\n    CompilerOptions options = createCompilerOptions();\n    options.exportTestFunctions = true;\n    test(options, \"function testFoo() {}\",\n         \"/** @export */ function testFoo() {}\" +\n         \"goog.exportSymbol('testFoo', testFoo);\");\n  }\n",
        "begin_line": 295,
        "end_line": 301,
        "comment": "",
        "child_ranges": [
            "(line 296,col 5)-(line 296,col 54)",
            "(line 297,col 5)-(line 297,col 39)",
            "(line 298,col 5)-(line 300,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testExpose()",
        "snippet": "  public void testExpose() {\n    CompilerOptions options = createCompilerOptions();\n    CompilationLevel.ADVANCED_OPTIMIZATIONS\n        .setOptionsForCompilationLevel(options);\n    test(options,\n         \"var x = {eeny: 1, /** @expose */ meeny: 2};\" +\n         \"/** @constructor */ var Foo = function() {};\" +\n         \"/** @expose */  Foo.prototype.miny = 3;\" +\n         \"Foo.prototype.moe = 4;\" +\n         \"/** @expose */  Foo.prototype.tiger;\" +\n         \"function moe(a, b) { return a.meeny + b.miny + a.tiger; }\" +\n         \"window['x'] = x;\" +\n         \"window['Foo'] = Foo;\" +\n         \"window['moe'] = moe;\",\n         \"function a(){}\" +\n         \"a.prototype.miny=3;\" +\n         \"window.x={a:1,meeny:2};\" +\n         \"window.Foo=a;\" +\n         \"window.moe=function(b,c){\" +\n         \"  return b.meeny+c.miny+b.tiger\" +\n         \"}\");\n  }\n",
        "begin_line": 303,
        "end_line": 324,
        "comment": "",
        "child_ranges": [
            "(line 304,col 5)-(line 304,col 54)",
            "(line 305,col 5)-(line 306,col 48)",
            "(line 307,col 5)-(line 323,col 14)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testCheckSymbolsOff()",
        "snippet": "  public void testCheckSymbolsOff() {\n    CompilerOptions options = createCompilerOptions();\n    testSame(options, \"x = 3;\");\n  }\n",
        "begin_line": 326,
        "end_line": 329,
        "comment": "",
        "child_ranges": [
            "(line 327,col 5)-(line 327,col 54)",
            "(line 328,col 5)-(line 328,col 32)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testCheckSymbolsOn()",
        "snippet": "  public void testCheckSymbolsOn() {\n    CompilerOptions options = createCompilerOptions();\n    options.checkSymbols = true;\n    test(options, \"x = 3;\", VarCheck.UNDEFINED_VAR_ERROR);\n  }\n",
        "begin_line": 331,
        "end_line": 335,
        "comment": "",
        "child_ranges": [
            "(line 332,col 5)-(line 332,col 54)",
            "(line 333,col 5)-(line 333,col 32)",
            "(line 334,col 5)-(line 334,col 58)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testCheckReferencesOff()",
        "snippet": "  public void testCheckReferencesOff() {\n    CompilerOptions options = createCompilerOptions();\n    testSame(options, \"x = 3; var x = 5;\");\n  }\n",
        "begin_line": 337,
        "end_line": 340,
        "comment": "",
        "child_ranges": [
            "(line 338,col 5)-(line 338,col 54)",
            "(line 339,col 5)-(line 339,col 43)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testCheckReferencesOn()",
        "snippet": "  public void testCheckReferencesOn() {\n    CompilerOptions options = createCompilerOptions();\n    options.aggressiveVarCheck = CheckLevel.ERROR;\n    test(options, \"x = 3; var x = 5;\",\n         VariableReferenceCheck.UNDECLARED_REFERENCE);\n  }\n",
        "begin_line": 342,
        "end_line": 347,
        "comment": "",
        "child_ranges": [
            "(line 343,col 5)-(line 343,col 54)",
            "(line 344,col 5)-(line 344,col 50)",
            "(line 345,col 5)-(line 346,col 54)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testInferTypes()",
        "snippet": "  public void testInferTypes() {\n    CompilerOptions options = createCompilerOptions();\n    options.inferTypes = true;\n    options.checkTypes = false;\n    options.closurePass = true;\n\n    test(options,\n        CLOSURE_BOILERPLATE +\n        \"goog.provide('Foo'); /** @enum */ Foo = {a: 3};\",\n        TypeCheck.ENUM_NOT_CONSTANT);\n    assertTrue(lastCompiler.getErrorManager().getTypedPercent() == 0);\n\n    // This does not generate a warning.\n    test(options, \"/** @type {number} */ var n = window.name;\",\n        \"var n = window.name;\");\n    assertTrue(lastCompiler.getErrorManager().getTypedPercent() == 0);\n  }\n",
        "begin_line": 349,
        "end_line": 365,
        "comment": "",
        "child_ranges": [
            "(line 350,col 5)-(line 350,col 54)",
            "(line 351,col 5)-(line 351,col 30)",
            "(line 352,col 5)-(line 352,col 31)",
            "(line 353,col 5)-(line 353,col 31)",
            "(line 355,col 5)-(line 358,col 37)",
            "(line 359,col 5)-(line 359,col 70)",
            "(line 362,col 5)-(line 363,col 32)",
            "(line 364,col 5)-(line 364,col 70)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testTypeCheckAndInference()",
        "snippet": "  public void testTypeCheckAndInference() {\n    CompilerOptions options = createCompilerOptions();\n    options.checkTypes = true;\n    test(options, \"/** @type {number} */ var n = window.name;\",\n         TypeValidator.TYPE_MISMATCH_WARNING);\n    assertTrue(lastCompiler.getErrorManager().getTypedPercent() > 0);\n  }\n",
        "begin_line": 367,
        "end_line": 373,
        "comment": "",
        "child_ranges": [
            "(line 368,col 5)-(line 368,col 54)",
            "(line 369,col 5)-(line 369,col 30)",
            "(line 370,col 5)-(line 371,col 46)",
            "(line 372,col 5)-(line 372,col 69)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testTypeNameParser()",
        "snippet": "  public void testTypeNameParser() {\n    CompilerOptions options = createCompilerOptions();\n    options.checkTypes = true;\n    test(options, \"/** @type {n} */ var n = window.name;\",\n         RhinoErrorReporter.TYPE_PARSE_ERROR);\n  }\n",
        "begin_line": 375,
        "end_line": 380,
        "comment": "",
        "child_ranges": [
            "(line 376,col 5)-(line 376,col 54)",
            "(line 377,col 5)-(line 377,col 30)",
            "(line 378,col 5)-(line 379,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testMemoizedTypedScopeCreator()",
        "snippet": "  public void testMemoizedTypedScopeCreator() {\n    CompilerOptions options = createCompilerOptions();\n    options.checkTypes = true;\n    options.ambiguateProperties = true;\n    options.propertyRenaming = PropertyRenamingPolicy.ALL_UNQUOTED;\n    test(options, \"function someTest() {\\n\"\n        + \"  /** @constructor */\\n\"\n        + \"  function Foo() { this.instProp = 3; }\\n\"\n        + \"  Foo.prototype.protoProp = function(a, b) {};\\n\"\n        + \"  /** @constructor\\n @extends Foo */\\n\"\n        + \"  function Bar() {}\\n\"\n        + \"  goog.inherits(Bar, Foo);\\n\"\n        + \"  var o = new Bar();\\n\"\n        + \"  o.protoProp(o.protoProp, o.instProp);\\n\"\n        + \"}\",\n        \"function someTest() {\\n\"\n        + \"  function Foo() { this.b = 3; }\\n\"\n        + \"  function Bar() {}\\n\"\n        + \"  Foo.prototype.a = function(a, b) {};\\n\"\n        + \"  goog.c(Bar, Foo);\\n\"\n        + \"  var o = new Bar();\\n\"\n        + \"  o.a(o.a, o.b);\\n\"\n        + \"}\");\n  }\n",
        "begin_line": 387,
        "end_line": 410,
        "comment": " o.a(o.a, o.a), which is bad.",
        "child_ranges": [
            "(line 388,col 5)-(line 388,col 54)",
            "(line 389,col 5)-(line 389,col 30)",
            "(line 390,col 5)-(line 390,col 39)",
            "(line 391,col 5)-(line 391,col 67)",
            "(line 392,col 5)-(line 409,col 15)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testCheckTypes()",
        "snippet": "  public void testCheckTypes() {\n    CompilerOptions options = createCompilerOptions();\n    options.checkTypes = true;\n    test(options, \"var x = x || {}; x.f = function() {}; x.f(3);\",\n         TypeCheck.WRONG_ARGUMENT_COUNT);\n  }\n",
        "begin_line": 412,
        "end_line": 417,
        "comment": "",
        "child_ranges": [
            "(line 413,col 5)-(line 413,col 54)",
            "(line 414,col 5)-(line 414,col 30)",
            "(line 415,col 5)-(line 416,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testReplaceCssNames()",
        "snippet": "  public void testReplaceCssNames() {\n    CompilerOptions options = createCompilerOptions();\n    options.closurePass = true;\n    options.gatherCssNames = true;\n    test(options, \"/** @define {boolean} */\\n\"\n         + \"var COMPILED = false;\\n\"\n         + \"goog.setCssNameMapping({'foo':'bar'});\\n\"\n         + \"function getCss() {\\n\"\n         + \"  return goog.getCssName('foo');\\n\"\n         + \"}\",\n         \"var COMPILED = true;\\n\"\n         + \"function getCss() {\\n\"\n         + \"  return \\\"bar\\\";\"\n         + \"}\");\n    assertEquals(\n        ImmutableMap.of(\"foo\", new Integer(1)),\n        lastCompiler.getPassConfig().getIntermediateState().cssNames);\n  }\n",
        "begin_line": 419,
        "end_line": 436,
        "comment": "",
        "child_ranges": [
            "(line 420,col 5)-(line 420,col 54)",
            "(line 421,col 5)-(line 421,col 31)",
            "(line 422,col 5)-(line 422,col 34)",
            "(line 423,col 5)-(line 432,col 16)",
            "(line 433,col 5)-(line 435,col 70)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testRemoveClosureAsserts()",
        "snippet": "  public void testRemoveClosureAsserts() {\n    CompilerOptions options = createCompilerOptions();\n    options.closurePass = true;\n    testSame(options,\n        \"var goog = {};\"\n        + \"goog.asserts.assert(goog);\");\n    options.removeClosureAsserts = true;\n    test(options,\n        \"var goog = {};\"\n        + \"goog.asserts.assert(goog);\",\n        \"var goog = {};\");\n  }\n",
        "begin_line": 438,
        "end_line": 449,
        "comment": "",
        "child_ranges": [
            "(line 439,col 5)-(line 439,col 54)",
            "(line 440,col 5)-(line 440,col 31)",
            "(line 441,col 5)-(line 443,col 40)",
            "(line 444,col 5)-(line 444,col 40)",
            "(line 445,col 5)-(line 448,col 26)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testDeprecation()",
        "snippet": "  public void testDeprecation() {\n    String code = \"/** @deprecated */ function f() { } function g() { f(); }\";\n\n    CompilerOptions options = createCompilerOptions();\n    testSame(options, code);\n\n    options.setWarningLevel(DiagnosticGroups.DEPRECATED, CheckLevel.ERROR);\n    testSame(options, code);\n\n    options.checkTypes = true;\n    test(options, code, CheckAccessControls.DEPRECATED_NAME);\n  }\n",
        "begin_line": 451,
        "end_line": 462,
        "comment": "",
        "child_ranges": [
            "(line 452,col 5)-(line 452,col 78)",
            "(line 454,col 5)-(line 454,col 54)",
            "(line 455,col 5)-(line 455,col 28)",
            "(line 457,col 5)-(line 457,col 75)",
            "(line 458,col 5)-(line 458,col 28)",
            "(line 460,col 5)-(line 460,col 30)",
            "(line 461,col 5)-(line 461,col 61)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testVisibility()",
        "snippet": "  public void testVisibility() {\n    String[] code = {\n        \"/** @private */ function f() { }\",\n        \"function g() { f(); }\"\n    };\n\n    CompilerOptions options = createCompilerOptions();\n    testSame(options, code);\n\n    options.setWarningLevel(DiagnosticGroups.VISIBILITY, CheckLevel.ERROR);\n    testSame(options, code);\n\n    options.checkTypes = true;\n    test(options, code, CheckAccessControls.BAD_PRIVATE_GLOBAL_ACCESS);\n  }\n",
        "begin_line": 464,
        "end_line": 478,
        "comment": "",
        "child_ranges": [
            "(line 465,col 5)-(line 468,col 6)",
            "(line 470,col 5)-(line 470,col 54)",
            "(line 471,col 5)-(line 471,col 28)",
            "(line 473,col 5)-(line 473,col 75)",
            "(line 474,col 5)-(line 474,col 28)",
            "(line 476,col 5)-(line 476,col 30)",
            "(line 477,col 5)-(line 477,col 71)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testUnreachableCode()",
        "snippet": "  public void testUnreachableCode() {\n    String code = \"function f() { return \\n 3; }\";\n\n    CompilerOptions options = createCompilerOptions();\n    testSame(options, code);\n\n    options.checkUnreachableCode = CheckLevel.ERROR;\n    test(options, code, CheckUnreachableCode.UNREACHABLE_CODE);\n  }\n",
        "begin_line": 480,
        "end_line": 488,
        "comment": "",
        "child_ranges": [
            "(line 481,col 5)-(line 481,col 50)",
            "(line 483,col 5)-(line 483,col 54)",
            "(line 484,col 5)-(line 484,col 28)",
            "(line 486,col 5)-(line 486,col 52)",
            "(line 487,col 5)-(line 487,col 63)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testMissingReturn()",
        "snippet": "  public void testMissingReturn() {\n    String code =\n        \"/** @return {number} */ function f() { if (f) { return 3; } }\";\n\n    CompilerOptions options = createCompilerOptions();\n    testSame(options, code);\n\n    options.checkMissingReturn = CheckLevel.ERROR;\n    testSame(options, code);\n\n    options.checkTypes = true;\n    test(options, code, CheckMissingReturn.MISSING_RETURN_STATEMENT);\n  }\n",
        "begin_line": 490,
        "end_line": 502,
        "comment": "",
        "child_ranges": [
            "(line 491,col 5)-(line 492,col 72)",
            "(line 494,col 5)-(line 494,col 54)",
            "(line 495,col 5)-(line 495,col 28)",
            "(line 497,col 5)-(line 497,col 50)",
            "(line 498,col 5)-(line 498,col 28)",
            "(line 500,col 5)-(line 500,col 30)",
            "(line 501,col 5)-(line 501,col 69)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testIdGenerators()",
        "snippet": "  public void testIdGenerators() {\n    String code =  \"function f() {} f('id');\";\n\n    CompilerOptions options = createCompilerOptions();\n    testSame(options, code);\n\n    options.idGenerators = Sets.newHashSet(\"f\");\n    test(options, code, \"function f() {} 'a';\");\n  }\n",
        "begin_line": 504,
        "end_line": 512,
        "comment": "",
        "child_ranges": [
            "(line 505,col 5)-(line 505,col 46)",
            "(line 507,col 5)-(line 507,col 54)",
            "(line 508,col 5)-(line 508,col 28)",
            "(line 510,col 5)-(line 510,col 48)",
            "(line 511,col 5)-(line 511,col 48)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testOptimizeArgumentsArray()",
        "snippet": "  public void testOptimizeArgumentsArray() {\n    String code =  \"function f() { return arguments[0]; }\";\n\n    CompilerOptions options = createCompilerOptions();\n    testSame(options, code);\n\n    options.optimizeArgumentsArray = true;\n    String argName = \"JSCompiler_OptimizeArgumentsArray_p0\";\n    test(options, code,\n         \"function f(\" + argName + \") { return \" + argName + \"; }\");\n  }\n",
        "begin_line": 514,
        "end_line": 524,
        "comment": "",
        "child_ranges": [
            "(line 515,col 5)-(line 515,col 59)",
            "(line 517,col 5)-(line 517,col 54)",
            "(line 518,col 5)-(line 518,col 28)",
            "(line 520,col 5)-(line 520,col 42)",
            "(line 521,col 5)-(line 521,col 60)",
            "(line 522,col 5)-(line 523,col 68)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testOptimizeParameters()",
        "snippet": "  public void testOptimizeParameters() {\n    String code = \"function f(a) { return a; } f(true);\";\n\n    CompilerOptions options = createCompilerOptions();\n    testSame(options, code);\n\n    options.optimizeParameters = true;\n    test(options, code, \"function f() { var a = true; return a;} f();\");\n  }\n",
        "begin_line": 526,
        "end_line": 534,
        "comment": "",
        "child_ranges": [
            "(line 527,col 5)-(line 527,col 57)",
            "(line 529,col 5)-(line 529,col 54)",
            "(line 530,col 5)-(line 530,col 28)",
            "(line 532,col 5)-(line 532,col 38)",
            "(line 533,col 5)-(line 533,col 72)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testOptimizeReturns()",
        "snippet": "  public void testOptimizeReturns() {\n    String code = \"function f(a) { return a; } f(true);\";\n\n    CompilerOptions options = createCompilerOptions();\n    testSame(options, code);\n\n    options.optimizeReturns = true;\n    test(options, code, \"function f(a) {return;} f(true);\");\n  }\n",
        "begin_line": 536,
        "end_line": 544,
        "comment": "",
        "child_ranges": [
            "(line 537,col 5)-(line 537,col 57)",
            "(line 539,col 5)-(line 539,col 54)",
            "(line 540,col 5)-(line 540,col 28)",
            "(line 542,col 5)-(line 542,col 35)",
            "(line 543,col 5)-(line 543,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testRemoveAbstractMethods()",
        "snippet": "  public void testRemoveAbstractMethods() {\n    String code = CLOSURE_BOILERPLATE +\n        \"var x = {}; x.foo = goog.abstractMethod; x.bar = 3;\";\n\n    CompilerOptions options = createCompilerOptions();\n    testSame(options, code);\n\n    options.closurePass = true;\n    options.collapseProperties = true;\n    test(options, code, CLOSURE_COMPILED + \" var x$bar = 3;\");\n  }\n",
        "begin_line": 546,
        "end_line": 556,
        "comment": "",
        "child_ranges": [
            "(line 547,col 5)-(line 548,col 62)",
            "(line 550,col 5)-(line 550,col 54)",
            "(line 551,col 5)-(line 551,col 28)",
            "(line 553,col 5)-(line 553,col 31)",
            "(line 554,col 5)-(line 554,col 38)",
            "(line 555,col 5)-(line 555,col 62)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testGoogDefine1()",
        "snippet": "  public void testGoogDefine1() {\n    String code = CLOSURE_BOILERPLATE +\n        \"/** @define {boolean} */ goog.define('FLAG', true);\";\n\n    CompilerOptions options = createCompilerOptions();\n\n    options.closurePass = true;\n    options.collapseProperties = true;\n    options.setDefineToBooleanLiteral(\"FLAG\", false);\n\n    test(options, code, CLOSURE_COMPILED + \" var FLAG = false;\");\n  }\n",
        "begin_line": 558,
        "end_line": 569,
        "comment": "",
        "child_ranges": [
            "(line 559,col 5)-(line 560,col 62)",
            "(line 562,col 5)-(line 562,col 54)",
            "(line 564,col 5)-(line 564,col 31)",
            "(line 565,col 5)-(line 565,col 38)",
            "(line 566,col 5)-(line 566,col 53)",
            "(line 568,col 5)-(line 568,col 65)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testGoogDefine2()",
        "snippet": "  public void testGoogDefine2() {\n    String code = CLOSURE_BOILERPLATE +\n        \"goog.provide('ns');\" +\n        \"/** @define {boolean} */ goog.define('ns.FLAG', true);\";\n\n    CompilerOptions options = createCompilerOptions();\n\n    options.closurePass = true;\n    options.collapseProperties = true;\n    options.setDefineToBooleanLiteral(\"ns.FLAG\", false);\n    test(options, code, CLOSURE_COMPILED + \"var ns$FLAG = false;\");\n  }\n",
        "begin_line": 571,
        "end_line": 582,
        "comment": "",
        "child_ranges": [
            "(line 572,col 5)-(line 574,col 65)",
            "(line 576,col 5)-(line 576,col 54)",
            "(line 578,col 5)-(line 578,col 31)",
            "(line 579,col 5)-(line 579,col 38)",
            "(line 580,col 5)-(line 580,col 56)",
            "(line 581,col 5)-(line 581,col 67)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testCollapseProperties1()",
        "snippet": "  public void testCollapseProperties1() {\n    String code =\n        \"var x = {}; x.FOO = 5; x.bar = 3;\";\n\n    CompilerOptions options = createCompilerOptions();\n    testSame(options, code);\n\n    options.collapseProperties = true;\n    test(options, code, \"var x$FOO = 5; var x$bar = 3;\");\n  }\n",
        "begin_line": 584,
        "end_line": 593,
        "comment": "",
        "child_ranges": [
            "(line 585,col 5)-(line 586,col 44)",
            "(line 588,col 5)-(line 588,col 54)",
            "(line 589,col 5)-(line 589,col 28)",
            "(line 591,col 5)-(line 591,col 38)",
            "(line 592,col 5)-(line 592,col 57)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testCollapseProperties2()",
        "snippet": "  public void testCollapseProperties2() {\n    String code =\n        \"var x = {}; x.FOO = 5; x.bar = 3;\";\n\n    CompilerOptions options = createCompilerOptions();\n    testSame(options, code);\n\n    options.collapseProperties = true;\n    options.collapseObjectLiterals = true;\n    test(options, code, \"var x$FOO = 5; var x$bar = 3;\");\n  }\n",
        "begin_line": 595,
        "end_line": 605,
        "comment": "",
        "child_ranges": [
            "(line 596,col 5)-(line 597,col 44)",
            "(line 599,col 5)-(line 599,col 54)",
            "(line 600,col 5)-(line 600,col 28)",
            "(line 602,col 5)-(line 602,col 38)",
            "(line 603,col 5)-(line 603,col 42)",
            "(line 604,col 5)-(line 604,col 57)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testCollapseObjectLiteral1()",
        "snippet": "  public void testCollapseObjectLiteral1() {\n    // Verify collapseObjectLiterals does nothing in global scope\n    String code = \"var x = {}; x.FOO = 5; x.bar = 3;\";\n\n    CompilerOptions options = createCompilerOptions();\n    testSame(options, code);\n\n    options.collapseObjectLiterals = true;\n    testSame(options, code);\n  }\n",
        "begin_line": 607,
        "end_line": 616,
        "comment": "",
        "child_ranges": [
            "(line 609,col 5)-(line 609,col 54)",
            "(line 611,col 5)-(line 611,col 54)",
            "(line 612,col 5)-(line 612,col 28)",
            "(line 614,col 5)-(line 614,col 42)",
            "(line 615,col 5)-(line 615,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testCollapseObjectLiteral2()",
        "snippet": "  public void testCollapseObjectLiteral2() {\n    String code =\n        \"function f() {var x = {}; x.FOO = 5; x.bar = 3;}\";\n\n    CompilerOptions options = createCompilerOptions();\n    testSame(options, code);\n\n    options.collapseObjectLiterals = true;\n    test(options, code,\n        \"function f(){\" +\n        \"var JSCompiler_object_inline_FOO_0;\" +\n        \"var JSCompiler_object_inline_bar_1;\" +\n        \"JSCompiler_object_inline_FOO_0=5;\" +\n        \"JSCompiler_object_inline_bar_1=3}\");\n  }\n",
        "begin_line": 618,
        "end_line": 632,
        "comment": "",
        "child_ranges": [
            "(line 619,col 5)-(line 620,col 59)",
            "(line 622,col 5)-(line 622,col 54)",
            "(line 623,col 5)-(line 623,col 28)",
            "(line 625,col 5)-(line 625,col 42)",
            "(line 626,col 5)-(line 631,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testTightenTypesWithoutTypeCheck()",
        "snippet": "  public void testTightenTypesWithoutTypeCheck() {\n    CompilerOptions options = createCompilerOptions();\n    options.tightenTypes = true;\n    test(options, \"\", DefaultPassConfig.TIGHTEN_TYPES_WITHOUT_TYPE_CHECK);\n  }\n",
        "begin_line": 634,
        "end_line": 638,
        "comment": "",
        "child_ranges": [
            "(line 635,col 5)-(line 635,col 54)",
            "(line 636,col 5)-(line 636,col 32)",
            "(line 637,col 5)-(line 637,col 74)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testDisambiguateProperties()",
        "snippet": "  public void testDisambiguateProperties() {\n    String code =\n        \"/** @constructor */ function Foo(){} Foo.prototype.bar = 3;\" +\n        \"/** @constructor */ function Baz(){} Baz.prototype.bar = 3;\";\n\n    CompilerOptions options = createCompilerOptions();\n    testSame(options, code);\n\n    options.disambiguateProperties = true;\n    options.checkTypes = true;\n    test(options, code,\n         \"function Foo(){} Foo.prototype.Foo_prototype$bar = 3;\" +\n         \"function Baz(){} Baz.prototype.Baz_prototype$bar = 3;\");\n  }\n",
        "begin_line": 640,
        "end_line": 653,
        "comment": "",
        "child_ranges": [
            "(line 641,col 5)-(line 643,col 70)",
            "(line 645,col 5)-(line 645,col 54)",
            "(line 646,col 5)-(line 646,col 28)",
            "(line 648,col 5)-(line 648,col 42)",
            "(line 649,col 5)-(line 649,col 30)",
            "(line 650,col 5)-(line 652,col 66)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testMarkPureCalls()",
        "snippet": "  public void testMarkPureCalls() {\n    String testCode = \"function foo() {} foo();\";\n    CompilerOptions options = createCompilerOptions();\n    options.removeDeadCode = true;\n\n    testSame(options, testCode);\n\n    options.computeFunctionSideEffects = true;\n    test(options, testCode, \"function foo() {}\");\n  }\n",
        "begin_line": 655,
        "end_line": 664,
        "comment": "",
        "child_ranges": [
            "(line 656,col 5)-(line 656,col 49)",
            "(line 657,col 5)-(line 657,col 54)",
            "(line 658,col 5)-(line 658,col 34)",
            "(line 660,col 5)-(line 660,col 32)",
            "(line 662,col 5)-(line 662,col 46)",
            "(line 663,col 5)-(line 663,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testMarkNoSideEffects()",
        "snippet": "  public void testMarkNoSideEffects() {\n    String testCode = \"noSideEffects();\";\n    CompilerOptions options = createCompilerOptions();\n    options.removeDeadCode = true;\n\n    testSame(options, testCode);\n\n    options.markNoSideEffectCalls = true;\n    test(options, testCode, \"\");\n  }\n",
        "begin_line": 666,
        "end_line": 675,
        "comment": "",
        "child_ranges": [
            "(line 667,col 5)-(line 667,col 41)",
            "(line 668,col 5)-(line 668,col 54)",
            "(line 669,col 5)-(line 669,col 34)",
            "(line 671,col 5)-(line 671,col 32)",
            "(line 673,col 5)-(line 673,col 41)",
            "(line 674,col 5)-(line 674,col 32)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testChainedCalls()",
        "snippet": "  public void testChainedCalls() {\n    CompilerOptions options = createCompilerOptions();\n    options.chainCalls = true;\n    test(\n        options,\n        \"/** @constructor */ function Foo() {} \" +\n        \"Foo.prototype.bar = function() { return this; }; \" +\n        \"var f = new Foo();\" +\n        \"f.bar(); \" +\n        \"f.bar(); \",\n        \"function Foo() {} \" +\n        \"Foo.prototype.bar = function() { return this; }; \" +\n        \"var f = new Foo();\" +\n        \"f.bar().bar();\");\n  }\n",
        "begin_line": 677,
        "end_line": 691,
        "comment": "",
        "child_ranges": [
            "(line 678,col 5)-(line 678,col 54)",
            "(line 679,col 5)-(line 679,col 30)",
            "(line 680,col 5)-(line 690,col 26)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testExtraAnnotationNames()",
        "snippet": "  public void testExtraAnnotationNames() {\n    CompilerOptions options = createCompilerOptions();\n    options.setExtraAnnotationNames(Sets.newHashSet(\"TagA\", \"TagB\"));\n    test(\n        options,\n        \"/** @TagA */ var f = new Foo(); /** @TagB */ f.bar();\",\n        \"var f = new Foo(); f.bar();\");\n  }\n",
        "begin_line": 693,
        "end_line": 700,
        "comment": "",
        "child_ranges": [
            "(line 694,col 5)-(line 694,col 54)",
            "(line 695,col 5)-(line 695,col 69)",
            "(line 696,col 5)-(line 699,col 39)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testDevirtualizePrototypeMethods()",
        "snippet": "  public void testDevirtualizePrototypeMethods() {\n    CompilerOptions options = createCompilerOptions();\n    options.devirtualizePrototypeMethods = true;\n    test(\n        options,\n        \"/** @constructor */ var Foo = function() {}; \" +\n        \"Foo.prototype.bar = function() {};\" +\n        \"(new Foo()).bar();\",\n        \"var Foo = function() {};\" +\n        \"var JSCompiler_StaticMethods_bar = \" +\n        \"    function(JSCompiler_StaticMethods_bar$self) {};\" +\n        \"JSCompiler_StaticMethods_bar(new Foo());\");\n  }\n",
        "begin_line": 702,
        "end_line": 714,
        "comment": "",
        "child_ranges": [
            "(line 703,col 5)-(line 703,col 54)",
            "(line 704,col 5)-(line 704,col 48)",
            "(line 705,col 5)-(line 713,col 52)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testCheckConsts()",
        "snippet": "  public void testCheckConsts() {\n    CompilerOptions options = createCompilerOptions();\n    options.inlineConstantVars = true;\n    test(options, \"var FOO = true; FOO = false\",\n        ConstCheck.CONST_REASSIGNED_VALUE_ERROR);\n  }\n",
        "begin_line": 716,
        "end_line": 721,
        "comment": "",
        "child_ranges": [
            "(line 717,col 5)-(line 717,col 54)",
            "(line 718,col 5)-(line 718,col 38)",
            "(line 719,col 5)-(line 720,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testAllChecksOn()",
        "snippet": "  public void testAllChecksOn() {\n    CompilerOptions options = createCompilerOptions();\n    options.checkSuspiciousCode = true;\n    options.checkControlStructures = true;\n    options.checkRequires = CheckLevel.ERROR;\n    options.checkProvides = CheckLevel.ERROR;\n    options.generateExports = true;\n    options.exportTestFunctions = true;\n    options.closurePass = true;\n    options.checkMissingGetCssNameLevel = CheckLevel.ERROR;\n    options.checkMissingGetCssNameBlacklist = \"goog\";\n    options.syntheticBlockStartMarker = \"synStart\";\n    options.syntheticBlockEndMarker = \"synEnd\";\n    options.checkSymbols = true;\n    options.aggressiveVarCheck = CheckLevel.ERROR;\n    options.processObjectPropertyString = true;\n    options.collapseProperties = true;\n    test(options, CLOSURE_BOILERPLATE, CLOSURE_COMPILED);\n  }\n",
        "begin_line": 723,
        "end_line": 741,
        "comment": "",
        "child_ranges": [
            "(line 724,col 5)-(line 724,col 54)",
            "(line 725,col 5)-(line 725,col 39)",
            "(line 726,col 5)-(line 726,col 42)",
            "(line 727,col 5)-(line 727,col 45)",
            "(line 728,col 5)-(line 728,col 45)",
            "(line 729,col 5)-(line 729,col 35)",
            "(line 730,col 5)-(line 730,col 39)",
            "(line 731,col 5)-(line 731,col 31)",
            "(line 732,col 5)-(line 732,col 59)",
            "(line 733,col 5)-(line 733,col 53)",
            "(line 734,col 5)-(line 734,col 51)",
            "(line 735,col 5)-(line 735,col 47)",
            "(line 736,col 5)-(line 736,col 32)",
            "(line 737,col 5)-(line 737,col 50)",
            "(line 738,col 5)-(line 738,col 47)",
            "(line 739,col 5)-(line 739,col 38)",
            "(line 740,col 5)-(line 740,col 57)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testTypeCheckingWithSyntheticBlocks()",
        "snippet": "  public void testTypeCheckingWithSyntheticBlocks() {\n    CompilerOptions options = createCompilerOptions();\n    options.syntheticBlockStartMarker = \"synStart\";\n    options.syntheticBlockEndMarker = \"synEnd\";\n    options.checkTypes = true;\n\n    // We used to have a bug where the CFG drew an\n    // edge straight from synStart to f(progress).\n    // If that happens, then progress will get type {number|undefined}.\n    testSame(\n        options,\n        \"/** @param {number} x */ function f(x) {}\" +\n        \"function g() {\" +\n        \" synStart('foo');\" +\n        \" var progress = 1;\" +\n        \" f(progress);\" +\n        \" synEnd('foo');\" +\n        \"}\");\n  }\n",
        "begin_line": 743,
        "end_line": 761,
        "comment": "",
        "child_ranges": [
            "(line 744,col 5)-(line 744,col 54)",
            "(line 745,col 5)-(line 745,col 51)",
            "(line 746,col 5)-(line 746,col 47)",
            "(line 747,col 5)-(line 747,col 30)",
            "(line 752,col 5)-(line 760,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testCompilerDoesNotBlowUpIfUndefinedSymbols()",
        "snippet": "  public void testCompilerDoesNotBlowUpIfUndefinedSymbols() {\n    CompilerOptions options = createCompilerOptions();\n    options.checkSymbols = true;\n\n    // Disable the undefined variable check.\n    options.setWarningLevel(\n        DiagnosticGroup.forType(VarCheck.UNDEFINED_VAR_ERROR),\n        CheckLevel.OFF);\n\n    // The compiler used to throw an IllegalStateException on this.\n    testSame(options, \"var x = {foo: y};\");\n  }\n",
        "begin_line": 763,
        "end_line": 774,
        "comment": "",
        "child_ranges": [
            "(line 764,col 5)-(line 764,col 54)",
            "(line 765,col 5)-(line 765,col 32)",
            "(line 768,col 5)-(line 770,col 24)",
            "(line 773,col 5)-(line 773,col 43)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testConstantTagsMustAlwaysBeRemoved()",
        "snippet": "  public void testConstantTagsMustAlwaysBeRemoved() {\n    CompilerOptions options = createCompilerOptions();\n\n    options.variableRenaming = VariableRenamingPolicy.LOCAL;\n    String originalText = \"var G_GEO_UNKNOWN_ADDRESS=1;\\n\" +\n        \"function foo() {\" +\n        \"  var localVar = 2;\\n\" +\n        \"  if (G_GEO_UNKNOWN_ADDRESS == localVar) {\\n\" +\n        \"    alert(\\\"A\\\"); }}\";\n    String expectedText = \"var G_GEO_UNKNOWN_ADDRESS=1;\" +\n        \"function foo(){var a=2;if(G_GEO_UNKNOWN_ADDRESS==a){alert(\\\"A\\\")}}\";\n\n    test(options, originalText, expectedText);\n  }\n",
        "begin_line": 779,
        "end_line": 792,
        "comment": " we finish.",
        "child_ranges": [
            "(line 780,col 5)-(line 780,col 54)",
            "(line 782,col 5)-(line 782,col 60)",
            "(line 783,col 5)-(line 787,col 31)",
            "(line 788,col 5)-(line 789,col 77)",
            "(line 791,col 5)-(line 791,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testClosurePassPreservesJsDoc()",
        "snippet": "  public void testClosurePassPreservesJsDoc() {\n    CompilerOptions options = createCompilerOptions();\n    options.checkTypes = true;\n    options.closurePass = true;\n\n    test(options,\n         CLOSURE_BOILERPLATE +\n         \"goog.provide('Foo'); /** @constructor */ Foo = function() {};\" +\n         \"var x = new Foo();\",\n         \"var COMPILED=true;var goog={};goog.exportSymbol=function(){};\" +\n         \"var Foo=function(){};var x=new Foo\");\n    test(options,\n         CLOSURE_BOILERPLATE +\n         \"goog.provide('Foo'); /** @enum */ Foo = {a: 3};\",\n         TypeCheck.ENUM_NOT_CONSTANT);\n  }\n",
        "begin_line": 794,
        "end_line": 809,
        "comment": "",
        "child_ranges": [
            "(line 795,col 5)-(line 795,col 54)",
            "(line 796,col 5)-(line 796,col 30)",
            "(line 797,col 5)-(line 797,col 31)",
            "(line 799,col 5)-(line 804,col 47)",
            "(line 805,col 5)-(line 808,col 38)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testProvidedNamespaceIsConst()",
        "snippet": "  public void testProvidedNamespaceIsConst() {\n    CompilerOptions options = createCompilerOptions();\n    options.closurePass = true;\n    options.inlineConstantVars = true;\n    options.collapseProperties = true;\n    test(options,\n         \"var goog = {}; goog.provide('foo'); \" +\n         \"function f() { foo = {};}\",\n         \"var foo = {}; function f() { foo = {}; }\",\n         ConstCheck.CONST_REASSIGNED_VALUE_ERROR);\n  }\n",
        "begin_line": 811,
        "end_line": 821,
        "comment": "",
        "child_ranges": [
            "(line 812,col 5)-(line 812,col 54)",
            "(line 813,col 5)-(line 813,col 31)",
            "(line 814,col 5)-(line 814,col 38)",
            "(line 815,col 5)-(line 815,col 38)",
            "(line 816,col 5)-(line 820,col 50)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testProvidedNamespaceIsConst2()",
        "snippet": "  public void testProvidedNamespaceIsConst2() {\n    CompilerOptions options = createCompilerOptions();\n    options.closurePass = true;\n    options.inlineConstantVars = true;\n    options.collapseProperties = true;\n    test(options,\n         \"var goog = {}; goog.provide('foo.bar'); \" +\n         \"function f() { foo.bar = {};}\",\n         \"var foo$bar = {};\" +\n         \"function f() { foo$bar = {}; }\",\n         ConstCheck.CONST_REASSIGNED_VALUE_ERROR);\n  }\n",
        "begin_line": 823,
        "end_line": 834,
        "comment": "",
        "child_ranges": [
            "(line 824,col 5)-(line 824,col 54)",
            "(line 825,col 5)-(line 825,col 31)",
            "(line 826,col 5)-(line 826,col 38)",
            "(line 827,col 5)-(line 827,col 38)",
            "(line 828,col 5)-(line 833,col 50)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testProvidedNamespaceIsConst3()",
        "snippet": "  public void testProvidedNamespaceIsConst3() {\n    CompilerOptions options = createCompilerOptions();\n    options.closurePass = true;\n    options.inlineConstantVars = true;\n    options.collapseProperties = true;\n    test(options,\n         \"var goog = {}; \" +\n         \"goog.provide('foo.bar'); goog.provide('foo.bar.baz'); \" +\n         \"/** @constructor */ foo.bar = function() {};\" +\n         \"/** @constructor */ foo.bar.baz = function() {};\",\n         \"var foo$bar = function(){};\" +\n         \"var foo$bar$baz = function(){};\");\n  }\n",
        "begin_line": 836,
        "end_line": 848,
        "comment": "",
        "child_ranges": [
            "(line 837,col 5)-(line 837,col 54)",
            "(line 838,col 5)-(line 838,col 31)",
            "(line 839,col 5)-(line 839,col 38)",
            "(line 840,col 5)-(line 840,col 38)",
            "(line 841,col 5)-(line 847,col 44)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testProvidedNamespaceIsConst4()",
        "snippet": "  public void testProvidedNamespaceIsConst4() {\n    CompilerOptions options = createCompilerOptions();\n    options.closurePass = true;\n    options.inlineConstantVars = true;\n    options.collapseProperties = true;\n    test(options,\n         \"var goog = {}; goog.provide('foo.Bar'); \" +\n         \"var foo = {}; foo.Bar = {};\",\n         \"var foo = {}; foo = {}; foo.Bar = {};\");\n  }\n",
        "begin_line": 850,
        "end_line": 859,
        "comment": "",
        "child_ranges": [
            "(line 851,col 5)-(line 851,col 54)",
            "(line 852,col 5)-(line 852,col 31)",
            "(line 853,col 5)-(line 853,col 38)",
            "(line 854,col 5)-(line 854,col 38)",
            "(line 855,col 5)-(line 858,col 50)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testProvidedNamespaceIsConst5()",
        "snippet": "  public void testProvidedNamespaceIsConst5() {\n    CompilerOptions options = createCompilerOptions();\n    options.closurePass = true;\n    options.inlineConstantVars = true;\n    options.collapseProperties = true;\n    test(options,\n         \"var goog = {}; goog.provide('foo.Bar'); \" +\n         \"foo = {}; foo.Bar = {};\",\n         \"var foo = {}; foo = {}; foo.Bar = {};\");\n  }\n",
        "begin_line": 861,
        "end_line": 870,
        "comment": "",
        "child_ranges": [
            "(line 862,col 5)-(line 862,col 54)",
            "(line 863,col 5)-(line 863,col 31)",
            "(line 864,col 5)-(line 864,col 38)",
            "(line 865,col 5)-(line 865,col 38)",
            "(line 866,col 5)-(line 869,col 50)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testProcessDefinesAlwaysOn()",
        "snippet": "  public void testProcessDefinesAlwaysOn() {\n    test(createCompilerOptions(),\n         \"/** @define {boolean} */ var HI = true; HI = false;\",\n         \"var HI = false;false;\");\n  }\n",
        "begin_line": 872,
        "end_line": 876,
        "comment": "",
        "child_ranges": [
            "(line 873,col 5)-(line 875,col 34)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testProcessDefinesAdditionalReplacements()",
        "snippet": "  public void testProcessDefinesAdditionalReplacements() {\n    CompilerOptions options = createCompilerOptions();\n    options.setDefineToBooleanLiteral(\"HI\", false);\n    test(options,\n         \"/** @define {boolean} */ var HI = true;\",\n         \"var HI = false;\");\n  }\n",
        "begin_line": 878,
        "end_line": 884,
        "comment": "",
        "child_ranges": [
            "(line 879,col 5)-(line 879,col 54)",
            "(line 880,col 5)-(line 880,col 51)",
            "(line 881,col 5)-(line 883,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testReplaceMessages()",
        "snippet": "  public void testReplaceMessages() {\n    CompilerOptions options = createCompilerOptions();\n    String prefix = \"var goog = {}; goog.getMsg = function() {};\";\n    testSame(options, prefix + \"var MSG_HI = goog.getMsg('hi');\");\n\n    options.messageBundle = new EmptyMessageBundle();\n    test(options,\n        prefix + \"/** @desc xyz */ var MSG_HI = goog.getMsg('hi');\",\n        prefix + \"var MSG_HI = 'hi';\");\n  }\n",
        "begin_line": 886,
        "end_line": 895,
        "comment": "",
        "child_ranges": [
            "(line 887,col 5)-(line 887,col 54)",
            "(line 888,col 5)-(line 888,col 66)",
            "(line 889,col 5)-(line 889,col 66)",
            "(line 891,col 5)-(line 891,col 53)",
            "(line 892,col 5)-(line 894,col 39)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testCheckGlobalNames()",
        "snippet": "  public void testCheckGlobalNames() {\n    CompilerOptions options = createCompilerOptions();\n    options.checkGlobalNamesLevel = CheckLevel.ERROR;\n    test(options, \"var x = {}; var y = x.z;\",\n         CheckGlobalNames.UNDEFINED_NAME_WARNING);\n  }\n",
        "begin_line": 897,
        "end_line": 902,
        "comment": "",
        "child_ranges": [
            "(line 898,col 5)-(line 898,col 54)",
            "(line 899,col 5)-(line 899,col 53)",
            "(line 900,col 5)-(line 901,col 50)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testInlineGetters()",
        "snippet": "  public void testInlineGetters() {\n    CompilerOptions options = createCompilerOptions();\n    String code =\n        \"function Foo() {} Foo.prototype.bar = function() { return 3; };\" +\n        \"var x = new Foo(); x.bar();\";\n\n    testSame(options, code);\n    options.inlineGetters = true;\n\n    test(options, code,\n         \"function Foo() {} Foo.prototype.bar = function() { return 3 };\" +\n         \"var x = new Foo(); 3;\");\n  }\n",
        "begin_line": 904,
        "end_line": 916,
        "comment": "",
        "child_ranges": [
            "(line 905,col 5)-(line 905,col 54)",
            "(line 906,col 5)-(line 908,col 38)",
            "(line 910,col 5)-(line 910,col 28)",
            "(line 911,col 5)-(line 911,col 33)",
            "(line 913,col 5)-(line 915,col 34)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testInlineGettersWithAmbiguate()",
        "snippet": "  public void testInlineGettersWithAmbiguate() {\n    CompilerOptions options = createCompilerOptions();\n\n    String code =\n        \"/** @constructor */\" +\n        \"function Foo() {}\" +\n        \"/** @type {number} */ Foo.prototype.field;\" +\n        \"Foo.prototype.getField = function() { return this.field; };\" +\n        \"/** @constructor */\" +\n        \"function Bar() {}\" +\n        \"/** @type {string} */ Bar.prototype.field;\" +\n        \"Bar.prototype.getField = function() { return this.field; };\" +\n        \"new Foo().getField();\" +\n        \"new Bar().getField();\";\n\n    testSame(options, code);\n\n    options.inlineGetters = true;\n\n    test(options, code,\n        \"function Foo() {}\" +\n        \"Foo.prototype.field;\" +\n        \"Foo.prototype.getField = function() { return this.field; };\" +\n        \"function Bar() {}\" +\n        \"Bar.prototype.field;\" +\n        \"Bar.prototype.getField = function() { return this.field; };\" +\n        \"new Foo().field;\" +\n        \"new Bar().field;\");\n\n    options.checkTypes = true;\n    options.ambiguateProperties = true;\n\n    // Propagating the wrong type information may cause ambiguate properties\n    // to generate bad code.\n    testSame(options, code);\n  }\n",
        "begin_line": 918,
        "end_line": 953,
        "comment": "",
        "child_ranges": [
            "(line 919,col 5)-(line 919,col 54)",
            "(line 921,col 5)-(line 931,col 32)",
            "(line 933,col 5)-(line 933,col 28)",
            "(line 935,col 5)-(line 935,col 33)",
            "(line 937,col 5)-(line 945,col 28)",
            "(line 947,col 5)-(line 947,col 30)",
            "(line 948,col 5)-(line 948,col 39)",
            "(line 952,col 5)-(line 952,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testInlineVariables()",
        "snippet": "  public void testInlineVariables() {\n    CompilerOptions options = createCompilerOptions();\n    String code = \"function foo() {} var x = 3; foo(x);\";\n    testSame(options, code);\n\n    options.inlineVariables = true;\n    test(options, code, \"(function foo() {})(3);\");\n\n    options.propertyRenaming = PropertyRenamingPolicy.HEURISTIC;\n    test(options, code, DefaultPassConfig.CANNOT_USE_PROTOTYPE_AND_VAR);\n  }\n",
        "begin_line": 955,
        "end_line": 965,
        "comment": "",
        "child_ranges": [
            "(line 956,col 5)-(line 956,col 54)",
            "(line 957,col 5)-(line 957,col 57)",
            "(line 958,col 5)-(line 958,col 28)",
            "(line 960,col 5)-(line 960,col 35)",
            "(line 961,col 5)-(line 961,col 51)",
            "(line 963,col 5)-(line 963,col 64)",
            "(line 964,col 5)-(line 964,col 72)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testInlineConstants()",
        "snippet": "  public void testInlineConstants() {\n    CompilerOptions options = createCompilerOptions();\n    String code = \"function foo() {} var x = 3; foo(x); var YYY = 4; foo(YYY);\";\n    testSame(options, code);\n\n    options.inlineConstantVars = true;\n    test(options, code, \"function foo() {} var x = 3; foo(x); foo(4);\");\n  }\n",
        "begin_line": 967,
        "end_line": 974,
        "comment": "",
        "child_ranges": [
            "(line 968,col 5)-(line 968,col 54)",
            "(line 969,col 5)-(line 969,col 80)",
            "(line 970,col 5)-(line 970,col 28)",
            "(line 972,col 5)-(line 972,col 38)",
            "(line 973,col 5)-(line 973,col 72)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testMinimizeExits()",
        "snippet": "  public void testMinimizeExits() {\n    CompilerOptions options = createCompilerOptions();\n    String code =\n        \"function f() {\" +\n        \"  if (window.foo) return; window.h(); \" +\n        \"}\";\n    testSame(options, code);\n\n    options.foldConstants = true;\n    test(\n        options, code,\n        \"function f() {\" +\n        \"  window.foo || window.h(); \" +\n        \"}\");\n  }\n",
        "begin_line": 976,
        "end_line": 990,
        "comment": "",
        "child_ranges": [
            "(line 977,col 5)-(line 977,col 54)",
            "(line 978,col 5)-(line 981,col 12)",
            "(line 982,col 5)-(line 982,col 28)",
            "(line 984,col 5)-(line 984,col 33)",
            "(line 985,col 5)-(line 989,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testFoldConstants()",
        "snippet": "  public void testFoldConstants() {\n    CompilerOptions options = createCompilerOptions();\n    String code = \"if (true) { window.foo(); }\";\n    testSame(options, code);\n\n    options.foldConstants = true;\n    test(options, code, \"window.foo();\");\n  }\n",
        "begin_line": 992,
        "end_line": 999,
        "comment": "",
        "child_ranges": [
            "(line 993,col 5)-(line 993,col 54)",
            "(line 994,col 5)-(line 994,col 48)",
            "(line 995,col 5)-(line 995,col 28)",
            "(line 997,col 5)-(line 997,col 33)",
            "(line 998,col 5)-(line 998,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testRemoveUnreachableCode()",
        "snippet": "  public void testRemoveUnreachableCode() {\n    CompilerOptions options = createCompilerOptions();\n    String code = \"function f() { return; f(); }\";\n    testSame(options, code);\n\n    options.removeDeadCode = true;\n    test(options, code, \"function f() {}\");\n  }\n",
        "begin_line": 1001,
        "end_line": 1008,
        "comment": "",
        "child_ranges": [
            "(line 1002,col 5)-(line 1002,col 54)",
            "(line 1003,col 5)-(line 1003,col 50)",
            "(line 1004,col 5)-(line 1004,col 28)",
            "(line 1006,col 5)-(line 1006,col 34)",
            "(line 1007,col 5)-(line 1007,col 43)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testRemoveUnusedPrototypeProperties1()",
        "snippet": "  public void testRemoveUnusedPrototypeProperties1() {\n    CompilerOptions options = createCompilerOptions();\n    String code = \"function Foo() {} \" +\n        \"Foo.prototype.bar = function() { return new Foo(); };\";\n    testSame(options, code);\n\n    options.removeUnusedPrototypeProperties = true;\n    test(options, code, \"function Foo() {}\");\n  }\n",
        "begin_line": 1010,
        "end_line": 1018,
        "comment": "",
        "child_ranges": [
            "(line 1011,col 5)-(line 1011,col 54)",
            "(line 1012,col 5)-(line 1013,col 64)",
            "(line 1014,col 5)-(line 1014,col 28)",
            "(line 1016,col 5)-(line 1016,col 51)",
            "(line 1017,col 5)-(line 1017,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testRemoveUnusedPrototypeProperties2()",
        "snippet": "  public void testRemoveUnusedPrototypeProperties2() {\n    CompilerOptions options = createCompilerOptions();\n    String code = \"function Foo() {} \" +\n        \"Foo.prototype.bar = function() { return new Foo(); };\" +\n        \"function f(x) { x.bar(); }\";\n    testSame(options, code);\n\n    options.removeUnusedPrototypeProperties = true;\n    testSame(options, code);\n\n    options.removeUnusedVars = true;\n    test(options, code, \"\");\n  }\n",
        "begin_line": 1020,
        "end_line": 1032,
        "comment": "",
        "child_ranges": [
            "(line 1021,col 5)-(line 1021,col 54)",
            "(line 1022,col 5)-(line 1024,col 37)",
            "(line 1025,col 5)-(line 1025,col 28)",
            "(line 1027,col 5)-(line 1027,col 51)",
            "(line 1028,col 5)-(line 1028,col 28)",
            "(line 1030,col 5)-(line 1030,col 36)",
            "(line 1031,col 5)-(line 1031,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testSmartNamePass()",
        "snippet": "  public void testSmartNamePass() {\n    CompilerOptions options = createCompilerOptions();\n    String code = \"function Foo() { this.bar(); } \" +\n        \"Foo.prototype.bar = function() { return Foo(); };\";\n    testSame(options, code);\n\n    options.smartNameRemoval = true;\n    test(options, code, \"\");\n  }\n",
        "begin_line": 1034,
        "end_line": 1042,
        "comment": "",
        "child_ranges": [
            "(line 1035,col 5)-(line 1035,col 54)",
            "(line 1036,col 5)-(line 1037,col 60)",
            "(line 1038,col 5)-(line 1038,col 28)",
            "(line 1040,col 5)-(line 1040,col 36)",
            "(line 1041,col 5)-(line 1041,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testDeadAssignmentsElimination()",
        "snippet": "  public void testDeadAssignmentsElimination() {\n    CompilerOptions options = createCompilerOptions();\n    String code = \"function f() { var x = 3; 4; x = 5; return x; } f(); \";\n    testSame(options, code);\n\n    options.deadAssignmentElimination = true;\n    testSame(options, code);\n\n    options.removeUnusedVars = true;\n    test(options, code, \"function f() { var x = 3; 4; x = 5; return x; } f();\");\n  }\n",
        "begin_line": 1044,
        "end_line": 1054,
        "comment": "",
        "child_ranges": [
            "(line 1045,col 5)-(line 1045,col 54)",
            "(line 1046,col 5)-(line 1046,col 74)",
            "(line 1047,col 5)-(line 1047,col 28)",
            "(line 1049,col 5)-(line 1049,col 45)",
            "(line 1050,col 5)-(line 1050,col 28)",
            "(line 1052,col 5)-(line 1052,col 36)",
            "(line 1053,col 5)-(line 1053,col 80)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testInlineFunctions()",
        "snippet": "  public void testInlineFunctions() {\n    CompilerOptions options = createCompilerOptions();\n    String code = \"function f() { return 3; } f(); \";\n    testSame(options, code);\n\n    options.inlineFunctions = true;\n    test(options, code, \"3;\");\n  }\n",
        "begin_line": 1056,
        "end_line": 1063,
        "comment": "",
        "child_ranges": [
            "(line 1057,col 5)-(line 1057,col 54)",
            "(line 1058,col 5)-(line 1058,col 53)",
            "(line 1059,col 5)-(line 1059,col 28)",
            "(line 1061,col 5)-(line 1061,col 35)",
            "(line 1062,col 5)-(line 1062,col 30)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testRemoveUnusedVars1()",
        "snippet": "  public void testRemoveUnusedVars1() {\n    CompilerOptions options = createCompilerOptions();\n    String code = \"function f(x) {} f();\";\n    testSame(options, code);\n\n    options.removeUnusedVars = true;\n    test(options, code, \"function f() {} f();\");\n  }\n",
        "begin_line": 1065,
        "end_line": 1072,
        "comment": "",
        "child_ranges": [
            "(line 1066,col 5)-(line 1066,col 54)",
            "(line 1067,col 5)-(line 1067,col 42)",
            "(line 1068,col 5)-(line 1068,col 28)",
            "(line 1070,col 5)-(line 1070,col 36)",
            "(line 1071,col 5)-(line 1071,col 48)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testRemoveUnusedVars2()",
        "snippet": "  public void testRemoveUnusedVars2() {\n    CompilerOptions options = createCompilerOptions();\n    String code = \"(function f(x) {})();var g = function() {}; g();\";\n    testSame(options, code);\n\n    options.removeUnusedVars = true;\n    test(options, code, \"(function() {})();var g = function() {}; g();\");\n\n    options.anonymousFunctionNaming = AnonymousFunctionNamingPolicy.UNMAPPED;\n    test(options, code, \"(function f() {})();var g = function $g$() {}; g();\");\n  }\n",
        "begin_line": 1074,
        "end_line": 1084,
        "comment": "",
        "child_ranges": [
            "(line 1075,col 5)-(line 1075,col 54)",
            "(line 1076,col 5)-(line 1076,col 69)",
            "(line 1077,col 5)-(line 1077,col 28)",
            "(line 1079,col 5)-(line 1079,col 36)",
            "(line 1080,col 5)-(line 1080,col 73)",
            "(line 1082,col 5)-(line 1082,col 77)",
            "(line 1083,col 5)-(line 1083,col 79)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testCrossModuleCodeMotion()",
        "snippet": "  public void testCrossModuleCodeMotion() {\n    CompilerOptions options = createCompilerOptions();\n    String[] code = new String[] {\n      \"var x = 1;\",\n      \"x;\",\n    };\n    testSame(options, code);\n\n    options.crossModuleCodeMotion = true;\n    test(options, code, new String[] {\n      \"\",\n      \"var x = 1; x;\",\n    });\n  }\n",
        "begin_line": 1086,
        "end_line": 1099,
        "comment": "",
        "child_ranges": [
            "(line 1087,col 5)-(line 1087,col 54)",
            "(line 1088,col 5)-(line 1091,col 6)",
            "(line 1092,col 5)-(line 1092,col 28)",
            "(line 1094,col 5)-(line 1094,col 41)",
            "(line 1095,col 5)-(line 1098,col 7)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testCrossModuleMethodMotion()",
        "snippet": "  public void testCrossModuleMethodMotion() {\n    CompilerOptions options = createCompilerOptions();\n    String[] code = new String[] {\n      \"var Foo = function() {}; Foo.prototype.bar = function() {};\" +\n      \"var x = new Foo();\",\n      \"x.bar();\",\n    };\n    testSame(options, code);\n\n    options.crossModuleMethodMotion = true;\n    test(options, code, new String[] {\n      CrossModuleMethodMotion.STUB_DECLARATIONS +\n      \"var Foo = function() {};\" +\n      \"Foo.prototype.bar=JSCompiler_stubMethod(0); var x=new Foo;\",\n      \"Foo.prototype.bar=JSCompiler_unstubMethod(0,function(){}); x.bar()\",\n    });\n  }\n",
        "begin_line": 1101,
        "end_line": 1117,
        "comment": "",
        "child_ranges": [
            "(line 1102,col 5)-(line 1102,col 54)",
            "(line 1103,col 5)-(line 1107,col 6)",
            "(line 1108,col 5)-(line 1108,col 28)",
            "(line 1110,col 5)-(line 1110,col 43)",
            "(line 1111,col 5)-(line 1116,col 7)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testFlowSensitiveInlineVariables1()",
        "snippet": "  public void testFlowSensitiveInlineVariables1() {\n    CompilerOptions options = createCompilerOptions();\n    String code = \"function f() { var x = 3; x = 5; return x; }\";\n    testSame(options, code);\n\n    options.flowSensitiveInlineVariables = true;\n    test(options, code, \"function f() { var x = 3; return 5; }\");\n\n    String unusedVar = \"function f() { var x; x = 5; return x; } f()\";\n    test(options, unusedVar, \"function f() { var x; return 5; } f()\");\n\n    options.removeUnusedVars = true;\n    test(options, unusedVar, \"function f() { return 5; } f()\");\n  }\n",
        "begin_line": 1119,
        "end_line": 1132,
        "comment": "",
        "child_ranges": [
            "(line 1120,col 5)-(line 1120,col 54)",
            "(line 1121,col 5)-(line 1121,col 65)",
            "(line 1122,col 5)-(line 1122,col 28)",
            "(line 1124,col 5)-(line 1124,col 48)",
            "(line 1125,col 5)-(line 1125,col 65)",
            "(line 1127,col 5)-(line 1127,col 70)",
            "(line 1128,col 5)-(line 1128,col 70)",
            "(line 1130,col 5)-(line 1130,col 36)",
            "(line 1131,col 5)-(line 1131,col 63)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testFlowSensitiveInlineVariables2()",
        "snippet": "  public void testFlowSensitiveInlineVariables2() {\n    CompilerOptions options = createCompilerOptions();\n    CompilationLevel.SIMPLE_OPTIMIZATIONS\n        .setOptionsForCompilationLevel(options);\n    test(options,\n        \"function f () {\\n\" +\n        \"    var ab = 0;\\n\" +\n        \"    ab += '-';\\n\" +\n        \"    alert(ab);\\n\" +\n        \"}\",\n        \"function f () {\\n\" +\n        \"    alert('0-');\\n\" +\n        \"}\");\n  }\n",
        "begin_line": 1134,
        "end_line": 1147,
        "comment": "",
        "child_ranges": [
            "(line 1135,col 5)-(line 1135,col 54)",
            "(line 1136,col 5)-(line 1137,col 48)",
            "(line 1138,col 5)-(line 1146,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testCollapseAnonymousFunctions()",
        "snippet": "  public void testCollapseAnonymousFunctions() {\n    CompilerOptions options = createCompilerOptions();\n    String code = \"var f = function() {};\";\n    testSame(options, code);\n\n    options.collapseAnonymousFunctions = true;\n    test(options, code, \"function f() {}\");\n  }\n",
        "begin_line": 1149,
        "end_line": 1156,
        "comment": "",
        "child_ranges": [
            "(line 1150,col 5)-(line 1150,col 54)",
            "(line 1151,col 5)-(line 1151,col 43)",
            "(line 1152,col 5)-(line 1152,col 28)",
            "(line 1154,col 5)-(line 1154,col 46)",
            "(line 1155,col 5)-(line 1155,col 43)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testMoveFunctionDeclarations()",
        "snippet": "  public void testMoveFunctionDeclarations() {\n    CompilerOptions options = createCompilerOptions();\n    String code = \"var x = f(); function f() { return 3; }\";\n    testSame(options, code);\n\n    options.moveFunctionDeclarations = true;\n    test(options, code, \"function f() { return 3; } var x = f();\");\n  }\n",
        "begin_line": 1158,
        "end_line": 1165,
        "comment": "",
        "child_ranges": [
            "(line 1159,col 5)-(line 1159,col 54)",
            "(line 1160,col 5)-(line 1160,col 60)",
            "(line 1161,col 5)-(line 1161,col 28)",
            "(line 1163,col 5)-(line 1163,col 44)",
            "(line 1164,col 5)-(line 1164,col 67)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testNameAnonymousFunctions()",
        "snippet": "  public void testNameAnonymousFunctions() {\n    CompilerOptions options = createCompilerOptions();\n    String code = \"var f = function() {};\";\n    testSame(options, code);\n\n    options.anonymousFunctionNaming = AnonymousFunctionNamingPolicy.MAPPED;\n    test(options, code, \"var f = function $() {}\");\n    assertNotNull(lastCompiler.getResult().namedAnonFunctionMap);\n\n    options.anonymousFunctionNaming = AnonymousFunctionNamingPolicy.UNMAPPED;\n    test(options, code, \"var f = function $f$() {}\");\n    assertNull(lastCompiler.getResult().namedAnonFunctionMap);\n  }\n",
        "begin_line": 1167,
        "end_line": 1179,
        "comment": "",
        "child_ranges": [
            "(line 1168,col 5)-(line 1168,col 54)",
            "(line 1169,col 5)-(line 1169,col 43)",
            "(line 1170,col 5)-(line 1170,col 28)",
            "(line 1172,col 5)-(line 1172,col 75)",
            "(line 1173,col 5)-(line 1173,col 51)",
            "(line 1174,col 5)-(line 1174,col 65)",
            "(line 1176,col 5)-(line 1176,col 77)",
            "(line 1177,col 5)-(line 1177,col 53)",
            "(line 1178,col 5)-(line 1178,col 62)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testNameAnonymousFunctionsWithVarRemoval()",
        "snippet": "  public void testNameAnonymousFunctionsWithVarRemoval() {\n    CompilerOptions options = createCompilerOptions();\n    options.setRemoveUnusedVariables(CompilerOptions.Reach.LOCAL_ONLY);\n    options.setInlineVariables(true);\n    String code = \"var f = function longName() {}; var g = function() {};\" +\n        \"function longerName() {} var i = longerName;\";\n    test(options, code,\n         \"var f = function() {}; var g = function() {}; \" +\n         \"var i = function() {};\");\n\n    options.anonymousFunctionNaming = AnonymousFunctionNamingPolicy.MAPPED;\n    test(options, code,\n         \"var f = function longName() {}; var g = function $() {};\" +\n         \"var i = function longerName(){};\");\n    assertNotNull(lastCompiler.getResult().namedAnonFunctionMap);\n\n    options.anonymousFunctionNaming = AnonymousFunctionNamingPolicy.UNMAPPED;\n    test(options, code,\n         \"var f = function longName() {}; var g = function $g$() {};\" +\n         \"var i = function longerName(){};\");\n    assertNull(lastCompiler.getResult().namedAnonFunctionMap);\n  }\n",
        "begin_line": 1181,
        "end_line": 1202,
        "comment": "",
        "child_ranges": [
            "(line 1182,col 5)-(line 1182,col 54)",
            "(line 1183,col 5)-(line 1183,col 71)",
            "(line 1184,col 5)-(line 1184,col 37)",
            "(line 1185,col 5)-(line 1186,col 55)",
            "(line 1187,col 5)-(line 1189,col 35)",
            "(line 1191,col 5)-(line 1191,col 75)",
            "(line 1192,col 5)-(line 1194,col 45)",
            "(line 1195,col 5)-(line 1195,col 65)",
            "(line 1197,col 5)-(line 1197,col 77)",
            "(line 1198,col 5)-(line 1200,col 45)",
            "(line 1201,col 5)-(line 1201,col 62)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testExtractPrototypeMemberDeclarations()",
        "snippet": "  public void testExtractPrototypeMemberDeclarations() {\n    CompilerOptions options = createCompilerOptions();\n    String code = \"var f = function() {};\";\n    String expected = \"var a; var b = function() {}; a = b.prototype;\";\n    for (int i = 0; i < 10; i++) {\n      code += \"f.prototype.a = \" + i + \";\";\n      expected += \"a.a = \" + i + \";\";\n    }\n    testSame(options, code);\n\n    options.extractPrototypeMemberDeclarations = true;\n    options.variableRenaming = VariableRenamingPolicy.ALL;\n    test(options, code, expected);\n\n    options.propertyRenaming = PropertyRenamingPolicy.HEURISTIC;\n    options.variableRenaming = VariableRenamingPolicy.OFF;\n    testSame(options, code);\n  }\n",
        "begin_line": 1204,
        "end_line": 1221,
        "comment": "",
        "child_ranges": [
            "(line 1205,col 5)-(line 1205,col 54)",
            "(line 1206,col 5)-(line 1206,col 43)",
            "(line 1207,col 5)-(line 1207,col 71)",
            "(line 1208,col 5)-(line 1211,col 5)",
            "(line 1212,col 5)-(line 1212,col 28)",
            "(line 1214,col 5)-(line 1214,col 54)",
            "(line 1215,col 5)-(line 1215,col 58)",
            "(line 1216,col 5)-(line 1216,col 34)",
            "(line 1218,col 5)-(line 1218,col 64)",
            "(line 1219,col 5)-(line 1219,col 58)",
            "(line 1220,col 5)-(line 1220,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testDevirtualizationAndExtractPrototypeMemberDeclarations()",
        "snippet": "  public void testDevirtualizationAndExtractPrototypeMemberDeclarations() {\n    CompilerOptions options = createCompilerOptions();\n    options.devirtualizePrototypeMethods = true;\n    options.collapseAnonymousFunctions = true;\n    options.extractPrototypeMemberDeclarations = true;\n    options.variableRenaming = VariableRenamingPolicy.ALL;\n    String code = \"var f = function() {};\";\n    String expected = \"var a; function b() {} a = b.prototype;\";\n    for (int i = 0; i < 10; i++) {\n      code += \"f.prototype.argz = function() {arguments};\";\n      code += \"f.prototype.devir\" + i + \" = function() {};\";\n\n      char letter = (char) ('d' + i);\n\n      // skip i,j,o (reserved)\n      if (letter >= 'i') {\n        letter++;\n      }\n      if (letter >= 'j') {\n        letter++;\n      }\n      if (letter >= 'o') {\n        letter++;\n      }\n\n      expected += \"a.argz = function() {arguments};\";\n      expected += \"function \" + letter + \"(c){}\";\n    }\n\n    code += \"var F = new f(); F.argz();\";\n    expected += \"var q = new b(); q.argz();\";\n\n    for (int i = 0; i < 10; i++) {\n      code += \"F.devir\" + i + \"();\";\n\n      char letter = (char) ('d' + i);\n\n      // skip i,j,o (reserved)\n      if (letter >= 'i') {\n        letter++;\n      }\n      if (letter >= 'j') {\n        letter++;\n      }\n      if (letter >= 'o') {\n        letter++;\n      }\n\n      expected += letter + \"(q);\";\n    }\n    test(options, code, expected);\n  }\n",
        "begin_line": 1223,
        "end_line": 1274,
        "comment": "",
        "child_ranges": [
            "(line 1224,col 5)-(line 1224,col 54)",
            "(line 1225,col 5)-(line 1225,col 48)",
            "(line 1226,col 5)-(line 1226,col 46)",
            "(line 1227,col 5)-(line 1227,col 54)",
            "(line 1228,col 5)-(line 1228,col 58)",
            "(line 1229,col 5)-(line 1229,col 43)",
            "(line 1230,col 5)-(line 1230,col 64)",
            "(line 1231,col 5)-(line 1250,col 5)",
            "(line 1252,col 5)-(line 1252,col 41)",
            "(line 1253,col 5)-(line 1253,col 45)",
            "(line 1255,col 5)-(line 1272,col 5)",
            "(line 1273,col 5)-(line 1273,col 34)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testCoalesceVariableNames()",
        "snippet": "  public void testCoalesceVariableNames() {\n    CompilerOptions options = createCompilerOptions();\n    String code = \"function f() {var x = 3; var y = x; var z = y; return z;}\";\n    testSame(options, code);\n\n    options.coalesceVariableNames = true;\n    test(options, code,\n         \"function f() {var x = 3; x = x; x = x; return x;}\");\n  }\n",
        "begin_line": 1276,
        "end_line": 1284,
        "comment": "",
        "child_ranges": [
            "(line 1277,col 5)-(line 1277,col 54)",
            "(line 1278,col 5)-(line 1278,col 78)",
            "(line 1279,col 5)-(line 1279,col 28)",
            "(line 1281,col 5)-(line 1281,col 41)",
            "(line 1282,col 5)-(line 1283,col 62)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testPropertyRenaming()",
        "snippet": "  public void testPropertyRenaming() {\n    CompilerOptions options = createCompilerOptions();\n    options.propertyAffinity = true;\n    String code =\n        \"function f() { return this.foo + this['bar'] + this.Baz; }\" +\n        \"f.prototype.bar = 3; f.prototype.Baz = 3;\";\n    String heuristic =\n        \"function f() { return this.foo + this['bar'] + this.a; }\" +\n        \"f.prototype.bar = 3; f.prototype.a = 3;\";\n    String aggHeuristic =\n        \"function f() { return this.foo + this['b'] + this.a; } \" +\n        \"f.prototype.b = 3; f.prototype.a = 3;\";\n    String all =\n        \"function f() { return this.b + this['bar'] + this.a; }\" +\n        \"f.prototype.c = 3; f.prototype.a = 3;\";\n    testSame(options, code);\n\n    options.propertyRenaming = PropertyRenamingPolicy.HEURISTIC;\n    test(options, code, heuristic);\n\n    options.propertyRenaming = PropertyRenamingPolicy.AGGRESSIVE_HEURISTIC;\n    test(options, code, aggHeuristic);\n\n    options.propertyRenaming = PropertyRenamingPolicy.ALL_UNQUOTED;\n    test(options, code, all);\n  }\n",
        "begin_line": 1286,
        "end_line": 1311,
        "comment": "",
        "child_ranges": [
            "(line 1287,col 5)-(line 1287,col 54)",
            "(line 1288,col 5)-(line 1288,col 36)",
            "(line 1289,col 5)-(line 1291,col 52)",
            "(line 1292,col 5)-(line 1294,col 50)",
            "(line 1295,col 5)-(line 1297,col 48)",
            "(line 1298,col 5)-(line 1300,col 48)",
            "(line 1301,col 5)-(line 1301,col 28)",
            "(line 1303,col 5)-(line 1303,col 64)",
            "(line 1304,col 5)-(line 1304,col 35)",
            "(line 1306,col 5)-(line 1306,col 75)",
            "(line 1307,col 5)-(line 1307,col 38)",
            "(line 1309,col 5)-(line 1309,col 67)",
            "(line 1310,col 5)-(line 1310,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testConvertToDottedProperties()",
        "snippet": "  public void testConvertToDottedProperties() {\n    CompilerOptions options = createCompilerOptions();\n    String code =\n        \"function f() { return this['bar']; } f.prototype.bar = 3;\";\n    String expected =\n        \"function f() { return this.bar; } f.prototype.a = 3;\";\n    testSame(options, code);\n\n    options.convertToDottedProperties = true;\n    options.propertyRenaming = PropertyRenamingPolicy.ALL_UNQUOTED;\n    test(options, code, expected);\n  }\n",
        "begin_line": 1313,
        "end_line": 1324,
        "comment": "",
        "child_ranges": [
            "(line 1314,col 5)-(line 1314,col 54)",
            "(line 1315,col 5)-(line 1316,col 68)",
            "(line 1317,col 5)-(line 1318,col 63)",
            "(line 1319,col 5)-(line 1319,col 28)",
            "(line 1321,col 5)-(line 1321,col 45)",
            "(line 1322,col 5)-(line 1322,col 67)",
            "(line 1323,col 5)-(line 1323,col 34)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testRewriteFunctionExpressions()",
        "snippet": "  public void testRewriteFunctionExpressions() {\n    CompilerOptions options = createCompilerOptions();\n    String code = \"var a = function() {};\";\n    String expected = \"function JSCompiler_emptyFn(){return function(){}} \" +\n        \"var a = JSCompiler_emptyFn();\";\n    for (int i = 0; i < 10; i++) {\n      code += \"a = function() {};\";\n      expected += \"a = JSCompiler_emptyFn();\";\n    }\n    testSame(options, code);\n\n    options.rewriteFunctionExpressions = true;\n    test(options, code, expected);\n  }\n",
        "begin_line": 1326,
        "end_line": 1339,
        "comment": "",
        "child_ranges": [
            "(line 1327,col 5)-(line 1327,col 54)",
            "(line 1328,col 5)-(line 1328,col 43)",
            "(line 1329,col 5)-(line 1330,col 40)",
            "(line 1331,col 5)-(line 1334,col 5)",
            "(line 1335,col 5)-(line 1335,col 28)",
            "(line 1337,col 5)-(line 1337,col 46)",
            "(line 1338,col 5)-(line 1338,col 34)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testAliasAllStrings()",
        "snippet": "  public void testAliasAllStrings() {\n    CompilerOptions options = createCompilerOptions();\n    String code = \"function f() { return 'a'; }\";\n    String expected = \"var $$S_a = 'a'; function f() { return $$S_a; }\";\n    testSame(options, code);\n\n    options.aliasAllStrings = true;\n    test(options, code, expected);\n  }\n",
        "begin_line": 1341,
        "end_line": 1349,
        "comment": "",
        "child_ranges": [
            "(line 1342,col 5)-(line 1342,col 54)",
            "(line 1343,col 5)-(line 1343,col 49)",
            "(line 1344,col 5)-(line 1344,col 72)",
            "(line 1345,col 5)-(line 1345,col 28)",
            "(line 1347,col 5)-(line 1347,col 35)",
            "(line 1348,col 5)-(line 1348,col 34)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testAliasExterns()",
        "snippet": "  public void testAliasExterns() {\n    CompilerOptions options = createCompilerOptions();\n    String code = \"function f() { return window + window + window + window; }\";\n    String expected = \"var GLOBAL_window = window;\" +\n        \"function f() { return GLOBAL_window + GLOBAL_window + \" +\n        \"               GLOBAL_window + GLOBAL_window; }\";\n    testSame(options, code);\n\n    options.aliasExternals = true;\n    test(options, code, expected);\n  }\n",
        "begin_line": 1351,
        "end_line": 1361,
        "comment": "",
        "child_ranges": [
            "(line 1352,col 5)-(line 1352,col 54)",
            "(line 1353,col 5)-(line 1353,col 79)",
            "(line 1354,col 5)-(line 1356,col 58)",
            "(line 1357,col 5)-(line 1357,col 28)",
            "(line 1359,col 5)-(line 1359,col 34)",
            "(line 1360,col 5)-(line 1360,col 34)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testAliasKeywords()",
        "snippet": "  public void testAliasKeywords() {\n    CompilerOptions options = createCompilerOptions();\n    String code =\n        \"function f() { return true + true + true + true + true + true; }\";\n    String expected = \"var JSCompiler_alias_TRUE = true;\" +\n        \"function f() { return JSCompiler_alias_TRUE + \" +\n        \"    JSCompiler_alias_TRUE + JSCompiler_alias_TRUE + \" +\n        \"    JSCompiler_alias_TRUE + JSCompiler_alias_TRUE + \" +\n        \"    JSCompiler_alias_TRUE; }\";\n    testSame(options, code);\n\n    options.aliasKeywords = true;\n    test(options, code, expected);\n  }\n",
        "begin_line": 1363,
        "end_line": 1376,
        "comment": "",
        "child_ranges": [
            "(line 1364,col 5)-(line 1364,col 54)",
            "(line 1365,col 5)-(line 1366,col 75)",
            "(line 1367,col 5)-(line 1371,col 39)",
            "(line 1372,col 5)-(line 1372,col 28)",
            "(line 1374,col 5)-(line 1374,col 33)",
            "(line 1375,col 5)-(line 1375,col 34)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testRenameVars1()",
        "snippet": "  public void testRenameVars1() {\n    CompilerOptions options = createCompilerOptions();\n    String code =\n        \"var abc = 3; function f() { var xyz = 5; return abc + xyz; }\";\n    String local = \"var abc = 3; function f() { var a = 5; return abc + a; }\";\n    String all = \"var a = 3; function c() { var b = 5; return a + b; }\";\n    testSame(options, code);\n\n    options.variableRenaming = VariableRenamingPolicy.LOCAL;\n    test(options, code, local);\n\n    options.variableRenaming = VariableRenamingPolicy.ALL;\n    test(options, code, all);\n\n    options.reserveRawExports = true;\n  }\n",
        "begin_line": 1378,
        "end_line": 1393,
        "comment": "",
        "child_ranges": [
            "(line 1379,col 5)-(line 1379,col 54)",
            "(line 1380,col 5)-(line 1381,col 71)",
            "(line 1382,col 5)-(line 1382,col 78)",
            "(line 1383,col 5)-(line 1383,col 72)",
            "(line 1384,col 5)-(line 1384,col 28)",
            "(line 1386,col 5)-(line 1386,col 60)",
            "(line 1387,col 5)-(line 1387,col 31)",
            "(line 1389,col 5)-(line 1389,col 58)",
            "(line 1390,col 5)-(line 1390,col 29)",
            "(line 1392,col 5)-(line 1392,col 37)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testRenameVars2()",
        "snippet": "  public void testRenameVars2() {\n    CompilerOptions options = createCompilerOptions();\n    options.variableRenaming = VariableRenamingPolicy.ALL;\n\n    String code =     \"var abc = 3; function f() { window['a'] = 5; }\";\n    String noexport = \"var a = 3;   function b() { window['a'] = 5; }\";\n    String export =   \"var b = 3;   function c() { window['a'] = 5; }\";\n\n    options.reserveRawExports = false;\n    test(options, code, noexport);\n\n    options.reserveRawExports = true;\n    test(options, code, export);\n  }\n",
        "begin_line": 1395,
        "end_line": 1408,
        "comment": "",
        "child_ranges": [
            "(line 1396,col 5)-(line 1396,col 54)",
            "(line 1397,col 5)-(line 1397,col 58)",
            "(line 1399,col 5)-(line 1399,col 71)",
            "(line 1400,col 5)-(line 1400,col 71)",
            "(line 1401,col 5)-(line 1401,col 71)",
            "(line 1403,col 5)-(line 1403,col 38)",
            "(line 1404,col 5)-(line 1404,col 34)",
            "(line 1406,col 5)-(line 1406,col 37)",
            "(line 1407,col 5)-(line 1407,col 32)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testShadowVaribles()",
        "snippet": "  public void testShadowVaribles() {\n    CompilerOptions options = createCompilerOptions();\n    options.variableRenaming = VariableRenamingPolicy.LOCAL;\n    options.shadowVariables = true;\n    String code =     \"var f = function(x) { return function(y) {}}\";\n    String expected = \"var f = function(a) { return function(a) {}}\";\n    test(options, code, expected);\n  }\n",
        "begin_line": 1410,
        "end_line": 1417,
        "comment": "",
        "child_ranges": [
            "(line 1411,col 5)-(line 1411,col 54)",
            "(line 1412,col 5)-(line 1412,col 60)",
            "(line 1413,col 5)-(line 1413,col 35)",
            "(line 1414,col 5)-(line 1414,col 69)",
            "(line 1415,col 5)-(line 1415,col 69)",
            "(line 1416,col 5)-(line 1416,col 34)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testRenameLabels()",
        "snippet": "  public void testRenameLabels() {\n    CompilerOptions options = createCompilerOptions();\n    String code = \"longLabel: for(;true;) { break longLabel; }\";\n    String expected = \"a: for(;true;) { break a; }\";\n    testSame(options, code);\n\n    options.labelRenaming = true;\n    test(options, code, expected);\n  }\n",
        "begin_line": 1419,
        "end_line": 1427,
        "comment": "",
        "child_ranges": [
            "(line 1420,col 5)-(line 1420,col 54)",
            "(line 1421,col 5)-(line 1421,col 64)",
            "(line 1422,col 5)-(line 1422,col 52)",
            "(line 1423,col 5)-(line 1423,col 28)",
            "(line 1425,col 5)-(line 1425,col 33)",
            "(line 1426,col 5)-(line 1426,col 34)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testBadBreakStatementInIdeMode()",
        "snippet": "  public void testBadBreakStatementInIdeMode() {\n    // Ensure that type-checking doesn't crash, even if the CFG is malformed.\n    // This can happen in IDE mode.\n    CompilerOptions options = createCompilerOptions();\n    options.ideMode = true;\n    options.checkTypes = true;\n    test(options,\n         \"function f() { try { } catch(e) { break; } }\",\n         RhinoErrorReporter.PARSE_ERROR);\n  }\n",
        "begin_line": 1429,
        "end_line": 1438,
        "comment": "",
        "child_ranges": [
            "(line 1432,col 5)-(line 1432,col 54)",
            "(line 1433,col 5)-(line 1433,col 27)",
            "(line 1434,col 5)-(line 1434,col 30)",
            "(line 1435,col 5)-(line 1437,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testIssue63SourceMap()",
        "snippet": "  public void testIssue63SourceMap() {\n    CompilerOptions options = createCompilerOptions();\n    String code = \"var a;\";\n\n    options.skipAllPasses = true;\n    options.sourceMapOutputPath = \"./src.map\";\n\n    Compiler compiler = compile(options, code);\n    compiler.toSource();\n  }\n",
        "begin_line": 1440,
        "end_line": 1449,
        "comment": "",
        "child_ranges": [
            "(line 1441,col 5)-(line 1441,col 54)",
            "(line 1442,col 5)-(line 1442,col 27)",
            "(line 1444,col 5)-(line 1444,col 33)",
            "(line 1445,col 5)-(line 1445,col 46)",
            "(line 1447,col 5)-(line 1447,col 47)",
            "(line 1448,col 5)-(line 1448,col 24)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testRegExp1()",
        "snippet": "  public void testRegExp1() {\n    CompilerOptions options = createCompilerOptions();\n    options.foldConstants = true;\n\n    String code = \"/(a)/.test(\\\"a\\\");\";\n\n    testSame(options, code);\n\n    options.computeFunctionSideEffects = true;\n\n    String expected = \"\";\n\n    test(options, code, expected);\n  }\n",
        "begin_line": 1451,
        "end_line": 1464,
        "comment": "",
        "child_ranges": [
            "(line 1452,col 5)-(line 1452,col 54)",
            "(line 1453,col 5)-(line 1453,col 33)",
            "(line 1455,col 5)-(line 1455,col 39)",
            "(line 1457,col 5)-(line 1457,col 28)",
            "(line 1459,col 5)-(line 1459,col 46)",
            "(line 1461,col 5)-(line 1461,col 25)",
            "(line 1463,col 5)-(line 1463,col 34)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testRegExp2()",
        "snippet": "  public void testRegExp2() {\n    CompilerOptions options = createCompilerOptions();\n\n    options.foldConstants = true;\n\n    String code = \"/(a)/.test(\\\"a\\\");var a = RegExp.$1\";\n\n    testSame(options, code);\n\n    options.computeFunctionSideEffects = true;\n\n    test(options, code, CheckRegExp.REGEXP_REFERENCE);\n\n    options.setWarningLevel(DiagnosticGroups.CHECK_REGEXP, CheckLevel.OFF);\n\n    testSame(options, code);\n  }\n",
        "begin_line": 1466,
        "end_line": 1482,
        "comment": "",
        "child_ranges": [
            "(line 1467,col 5)-(line 1467,col 54)",
            "(line 1469,col 5)-(line 1469,col 33)",
            "(line 1471,col 5)-(line 1471,col 56)",
            "(line 1473,col 5)-(line 1473,col 28)",
            "(line 1475,col 5)-(line 1475,col 46)",
            "(line 1477,col 5)-(line 1477,col 54)",
            "(line 1479,col 5)-(line 1479,col 75)",
            "(line 1481,col 5)-(line 1481,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testFoldLocals1()",
        "snippet": "  public void testFoldLocals1() {\n    CompilerOptions options = createCompilerOptions();\n\n    options.foldConstants = true;\n\n    // An external object, whose constructor has no side-effects,\n    // and whose method \"go\" only modifies the object.\n    String code = \"new Widget().go();\";\n\n    testSame(options, code);\n\n    options.computeFunctionSideEffects = true;\n\n    test(options, code, \"\");\n  }\n",
        "begin_line": 1484,
        "end_line": 1498,
        "comment": "",
        "child_ranges": [
            "(line 1485,col 5)-(line 1485,col 54)",
            "(line 1487,col 5)-(line 1487,col 33)",
            "(line 1491,col 5)-(line 1491,col 39)",
            "(line 1493,col 5)-(line 1493,col 28)",
            "(line 1495,col 5)-(line 1495,col 46)",
            "(line 1497,col 5)-(line 1497,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testFoldLocals2()",
        "snippet": "  public void testFoldLocals2() {\n    CompilerOptions options = createCompilerOptions();\n\n    options.foldConstants = true;\n    options.checkTypes = true;\n\n    // An external function that returns a local object that the\n    // method \"go\" that only modifies the object.\n    String code = \"widgetToken().go();\";\n\n    testSame(options, code);\n\n    options.computeFunctionSideEffects = true;\n\n    test(options, code, \"widgetToken()\");\n  }\n",
        "begin_line": 1500,
        "end_line": 1515,
        "comment": "",
        "child_ranges": [
            "(line 1501,col 5)-(line 1501,col 54)",
            "(line 1503,col 5)-(line 1503,col 33)",
            "(line 1504,col 5)-(line 1504,col 30)",
            "(line 1508,col 5)-(line 1508,col 40)",
            "(line 1510,col 5)-(line 1510,col 28)",
            "(line 1512,col 5)-(line 1512,col 46)",
            "(line 1514,col 5)-(line 1514,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testFoldLocals3()",
        "snippet": "  public void testFoldLocals3() {\n    CompilerOptions options = createCompilerOptions();\n\n    options.foldConstants = true;\n\n    // A function \"f\" who returns a known local object, and a method that\n    // modifies only modifies that.\n    String definition = \"function f(){return new Widget()}\";\n    String call = \"f().go();\";\n    String code = definition + call;\n\n    testSame(options, code);\n\n    options.computeFunctionSideEffects = true;\n\n    // BROKEN\n    //test(options, code, definition);\n    testSame(options, code);\n  }\n",
        "begin_line": 1518,
        "end_line": 1536,
        "comment": "",
        "child_ranges": [
            "(line 1519,col 5)-(line 1519,col 54)",
            "(line 1521,col 5)-(line 1521,col 33)",
            "(line 1525,col 5)-(line 1525,col 60)",
            "(line 1526,col 5)-(line 1526,col 30)",
            "(line 1527,col 5)-(line 1527,col 36)",
            "(line 1529,col 5)-(line 1529,col 28)",
            "(line 1531,col 5)-(line 1531,col 46)",
            "(line 1535,col 5)-(line 1535,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testFoldLocals4()",
        "snippet": "  public void testFoldLocals4() {\n    CompilerOptions options = createCompilerOptions();\n\n    options.foldConstants = true;\n\n    String code = \"/** @constructor */\\n\"\n        + \"function InternalWidget(){this.x = 1;}\"\n        + \"InternalWidget.prototype.internalGo = function (){this.x = 2};\"\n        + \"new InternalWidget().internalGo();\";\n\n    testSame(options, code);\n\n    options.computeFunctionSideEffects = true;\n\n    String optimized = \"\"\n      + \"function InternalWidget(){this.x = 1;}\"\n      + \"InternalWidget.prototype.internalGo = function (){this.x = 2};\";\n\n    test(options, code, optimized);\n  }\n",
        "begin_line": 1538,
        "end_line": 1557,
        "comment": "",
        "child_ranges": [
            "(line 1539,col 5)-(line 1539,col 54)",
            "(line 1541,col 5)-(line 1541,col 33)",
            "(line 1543,col 5)-(line 1546,col 47)",
            "(line 1548,col 5)-(line 1548,col 28)",
            "(line 1550,col 5)-(line 1550,col 46)",
            "(line 1552,col 5)-(line 1554,col 73)",
            "(line 1556,col 5)-(line 1556,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testFoldLocals5()",
        "snippet": "  public void testFoldLocals5() {\n    CompilerOptions options = createCompilerOptions();\n\n    options.foldConstants = true;\n\n    String code = \"\"\n        + \"function fn(){var a={};a.x={};return a}\"\n        + \"fn().x.y = 1;\";\n\n    // \"fn\" returns a unescaped local object, we should be able to fold it,\n    // but we don't currently.\n    String result = \"\"\n        + \"function fn(){var a={x:{}};return a}\"\n        + \"fn().x.y = 1;\";\n\n    test(options, code, result);\n\n    options.computeFunctionSideEffects = true;\n\n    test(options, code, result);\n  }\n",
        "begin_line": 1559,
        "end_line": 1579,
        "comment": "",
        "child_ranges": [
            "(line 1560,col 5)-(line 1560,col 54)",
            "(line 1562,col 5)-(line 1562,col 33)",
            "(line 1564,col 5)-(line 1566,col 26)",
            "(line 1570,col 5)-(line 1572,col 26)",
            "(line 1574,col 5)-(line 1574,col 32)",
            "(line 1576,col 5)-(line 1576,col 46)",
            "(line 1578,col 5)-(line 1578,col 32)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testFoldLocals6()",
        "snippet": "  public void testFoldLocals6() {\n    CompilerOptions options = createCompilerOptions();\n\n    options.foldConstants = true;\n\n    String code = \"\"\n        + \"function fn(){return {}}\"\n        + \"fn().x.y = 1;\";\n\n    testSame(options, code);\n\n    options.computeFunctionSideEffects = true;\n\n    testSame(options, code);\n  }\n",
        "begin_line": 1581,
        "end_line": 1595,
        "comment": "",
        "child_ranges": [
            "(line 1582,col 5)-(line 1582,col 54)",
            "(line 1584,col 5)-(line 1584,col 33)",
            "(line 1586,col 5)-(line 1588,col 26)",
            "(line 1590,col 5)-(line 1590,col 28)",
            "(line 1592,col 5)-(line 1592,col 46)",
            "(line 1594,col 5)-(line 1594,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testFoldLocals7()",
        "snippet": "  public void testFoldLocals7() {\n    CompilerOptions options = createCompilerOptions();\n\n    options.foldConstants = true;\n\n    String code = \"\"\n        + \"function InternalWidget(){return [];}\"\n        + \"Array.prototype.internalGo = function (){this.x = 2};\"\n        + \"InternalWidget().internalGo();\";\n\n    testSame(options, code);\n\n    options.computeFunctionSideEffects = true;\n\n    String optimized = \"\"\n      + \"function InternalWidget(){return [];}\"\n      + \"Array.prototype.internalGo = function (){this.x = 2};\";\n\n    test(options, code, optimized);\n  }\n",
        "begin_line": 1597,
        "end_line": 1616,
        "comment": "",
        "child_ranges": [
            "(line 1598,col 5)-(line 1598,col 54)",
            "(line 1600,col 5)-(line 1600,col 33)",
            "(line 1602,col 5)-(line 1605,col 43)",
            "(line 1607,col 5)-(line 1607,col 28)",
            "(line 1609,col 5)-(line 1609,col 46)",
            "(line 1611,col 5)-(line 1613,col 64)",
            "(line 1615,col 5)-(line 1615,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testVarDeclarationsIntoFor()",
        "snippet": "  public void testVarDeclarationsIntoFor() {\n    CompilerOptions options = createCompilerOptions();\n\n    options.collapseVariableDeclarations = false;\n\n    String code = \"var a = 1; for (var b = 2; ;) {}\";\n\n    testSame(options, code);\n\n    options.collapseVariableDeclarations = true;\n\n    test(options, code, \"for (var a = 1, b = 2; ;) {}\");\n  }\n",
        "begin_line": 1618,
        "end_line": 1630,
        "comment": "",
        "child_ranges": [
            "(line 1619,col 5)-(line 1619,col 54)",
            "(line 1621,col 5)-(line 1621,col 49)",
            "(line 1623,col 5)-(line 1623,col 53)",
            "(line 1625,col 5)-(line 1625,col 28)",
            "(line 1627,col 5)-(line 1627,col 48)",
            "(line 1629,col 5)-(line 1629,col 56)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testExploitAssigns()",
        "snippet": "  public void testExploitAssigns() {\n    CompilerOptions options = createCompilerOptions();\n\n    options.collapseVariableDeclarations = false;\n\n    String code = \"a = 1; b = a; c = b\";\n\n    testSame(options, code);\n\n    options.collapseVariableDeclarations = true;\n\n    test(options, code, \"c=b=a=1\");\n  }\n",
        "begin_line": 1632,
        "end_line": 1644,
        "comment": "",
        "child_ranges": [
            "(line 1633,col 5)-(line 1633,col 54)",
            "(line 1635,col 5)-(line 1635,col 49)",
            "(line 1637,col 5)-(line 1637,col 40)",
            "(line 1639,col 5)-(line 1639,col 28)",
            "(line 1641,col 5)-(line 1641,col 48)",
            "(line 1643,col 5)-(line 1643,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testRecoverOnBadExterns()",
        "snippet": "  public void testRecoverOnBadExterns() throws Exception {\n    // This test is for a bug in a very narrow set of circumstances:\n    // 1) externs validation has to be off.\n    // 2) aliasExternals has to be on.\n    // 3) The user has to reference a \"normal\" variable in externs.\n    // This case is handled at checking time by injecting a\n    // synthetic extern variable, and adding a \"@suppress {duplicate}\" to\n    // the normal code at compile time. But optimizations may remove that\n    // annotation, so we need to make sure that the variable declarations\n    // are de-duped before that happens.\n    CompilerOptions options = createCompilerOptions();\n\n    options.aliasExternals = true;\n    externs = ImmutableList.of(\n        SourceFile.fromCode(\"externs\", \"extern.foo\"));\n\n    test(options,\n         \"var extern; \" +\n         \"function f() { return extern + extern + extern + extern; }\",\n         \"var extern; \" +\n         \"function f() { return extern + extern + extern + extern; }\",\n         VarCheck.UNDEFINED_EXTERN_VAR_ERROR);\n  }\n",
        "begin_line": 1646,
        "end_line": 1668,
        "comment": "",
        "child_ranges": [
            "(line 1656,col 5)-(line 1656,col 54)",
            "(line 1658,col 5)-(line 1658,col 34)",
            "(line 1659,col 5)-(line 1660,col 54)",
            "(line 1662,col 5)-(line 1667,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testDuplicateVariablesInExterns()",
        "snippet": "  public void testDuplicateVariablesInExterns() {\n    CompilerOptions options = createCompilerOptions();\n    options.checkSymbols = true;\n    externs = ImmutableList.of(\n        SourceFile.fromCode(\"externs\",\n            \"var externs = {}; /** @suppress {duplicate} */ var externs = {};\"));\n    testSame(options, \"\");\n  }\n",
        "begin_line": 1670,
        "end_line": 1677,
        "comment": "",
        "child_ranges": [
            "(line 1671,col 5)-(line 1671,col 54)",
            "(line 1672,col 5)-(line 1672,col 32)",
            "(line 1673,col 5)-(line 1675,col 81)",
            "(line 1676,col 5)-(line 1676,col 26)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testLanguageMode()",
        "snippet": "  public void testLanguageMode() {\n    CompilerOptions options = createCompilerOptions();\n    options.setLanguageIn(LanguageMode.ECMASCRIPT3);\n\n    String code = \"var a = {get f(){}}\";\n\n    Compiler compiler = compile(options, code);\n    checkUnexpectedErrorsOrWarnings(compiler, 1);\n    assertEquals(\n        \"JSC_PARSE_ERROR. Parse error. \" +\n        \"getters are not supported in older versions of JS. \" +\n        \"If you are targeting newer versions of JS, \" +\n        \"set the appropriate language_in option. \" +\n        \"at i0 line 1 : 0\",\n        compiler.getErrors()[0].toString());\n\n    options.setLanguageIn(LanguageMode.ECMASCRIPT5);\n\n    testSame(options, code);\n\n    options.setLanguageIn(LanguageMode.ECMASCRIPT5_STRICT);\n\n    testSame(options, code);\n  }\n",
        "begin_line": 1679,
        "end_line": 1702,
        "comment": "",
        "child_ranges": [
            "(line 1680,col 5)-(line 1680,col 54)",
            "(line 1681,col 5)-(line 1681,col 52)",
            "(line 1683,col 5)-(line 1683,col 40)",
            "(line 1685,col 5)-(line 1685,col 47)",
            "(line 1686,col 5)-(line 1686,col 49)",
            "(line 1687,col 5)-(line 1693,col 44)",
            "(line 1695,col 5)-(line 1695,col 52)",
            "(line 1697,col 5)-(line 1697,col 28)",
            "(line 1699,col 5)-(line 1699,col 59)",
            "(line 1701,col 5)-(line 1701,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testLanguageMode2()",
        "snippet": "  public void testLanguageMode2() {\n    CompilerOptions options = createCompilerOptions();\n    options.setLanguageIn(LanguageMode.ECMASCRIPT3);\n    options.setWarningLevel(DiagnosticGroups.ES5_STRICT, CheckLevel.OFF);\n\n    String code = \"var a  = 2; delete a;\";\n\n    testSame(options, code);\n\n    options.setLanguageIn(LanguageMode.ECMASCRIPT5);\n\n    testSame(options, code);\n\n    options.setLanguageIn(LanguageMode.ECMASCRIPT5_STRICT);\n\n    test(options,\n        code,\n        code,\n        StrictModeCheck.DELETE_VARIABLE);\n  }\n",
        "begin_line": 1704,
        "end_line": 1723,
        "comment": "",
        "child_ranges": [
            "(line 1705,col 5)-(line 1705,col 54)",
            "(line 1706,col 5)-(line 1706,col 52)",
            "(line 1707,col 5)-(line 1707,col 73)",
            "(line 1709,col 5)-(line 1709,col 42)",
            "(line 1711,col 5)-(line 1711,col 28)",
            "(line 1713,col 5)-(line 1713,col 52)",
            "(line 1715,col 5)-(line 1715,col 28)",
            "(line 1717,col 5)-(line 1717,col 59)",
            "(line 1719,col 5)-(line 1722,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testIssue598()",
        "snippet": "  public void testIssue598() {\n    CompilerOptions options = createCompilerOptions();\n    options.setLanguageIn(LanguageMode.ECMASCRIPT5_STRICT);\n    WarningLevel.VERBOSE.setOptionsForWarningLevel(options);\n\n    options.setLanguageIn(LanguageMode.ECMASCRIPT5);\n\n    String code =\n        \"'use strict';\\n\" +\n        \"function App() {}\\n\" +\n        \"App.prototype = {\\n\" +\n        \"  get appData() { return this.appData_; },\\n\" +\n        \"  set appData(data) { this.appData_ = data; }\\n\" +\n        \"};\";\n\n    testSame(options, code);\n  }\n",
        "begin_line": 1725,
        "end_line": 1741,
        "comment": "",
        "child_ranges": [
            "(line 1726,col 5)-(line 1726,col 54)",
            "(line 1727,col 5)-(line 1727,col 59)",
            "(line 1728,col 5)-(line 1728,col 60)",
            "(line 1730,col 5)-(line 1730,col 52)",
            "(line 1732,col 5)-(line 1738,col 13)",
            "(line 1740,col 5)-(line 1740,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testIssue701()",
        "snippet": "  public void testIssue701() {\n    // Check ASCII art in license comments.\n    String ascii = \"/**\\n\" +\n        \" * @preserve\\n\" +\n        \"   This\\n\" +\n        \"     is\\n\" +\n        \"       ASCII    ART\\n\" +\n        \"*/\";\n    String result = \"/*\\n\\n\" +\n        \"   This\\n\" +\n        \"     is\\n\" +\n        \"       ASCII    ART\\n\" +\n        \"*/\\n\";\n    testSame(createCompilerOptions(), ascii);\n    assertEquals(result, lastCompiler.toSource());\n  }\n",
        "begin_line": 1743,
        "end_line": 1758,
        "comment": "",
        "child_ranges": [
            "(line 1745,col 5)-(line 1750,col 13)",
            "(line 1751,col 5)-(line 1755,col 15)",
            "(line 1756,col 5)-(line 1756,col 45)",
            "(line 1757,col 5)-(line 1757,col 50)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testIssue724()",
        "snippet": "  public void testIssue724() {\n    CompilerOptions options = createCompilerOptions();\n    CompilationLevel.ADVANCED_OPTIMIZATIONS\n        .setOptionsForCompilationLevel(options);\n    String code =\n        \"isFunction = function(functionToCheck) {\" +\n        \"  var getType = {};\" +\n        \"  return functionToCheck && \" +\n        \"      getType.toString.apply(functionToCheck) === \" +\n        \"     '[object Function]';\" +\n        \"};\";\n    String result =\n        \"isFunction=function(a){var b={};\" +\n        \"return a&&\\\"[object Function]\\\"===b.b.a(a)}\";\n\n    test(options, code, result);\n  }\n",
        "begin_line": 1760,
        "end_line": 1776,
        "comment": "",
        "child_ranges": [
            "(line 1761,col 5)-(line 1761,col 54)",
            "(line 1762,col 5)-(line 1763,col 48)",
            "(line 1764,col 5)-(line 1770,col 13)",
            "(line 1771,col 5)-(line 1773,col 54)",
            "(line 1775,col 5)-(line 1775,col 32)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testIssue730()",
        "snippet": "  public void testIssue730() {\n    CompilerOptions options = createCompilerOptions();\n    CompilationLevel.ADVANCED_OPTIMIZATIONS\n        .setOptionsForCompilationLevel(options);\n\n    String code =\n        \"/** @constructor */function A() {this.foo = 0; Object.seal(this);}\\n\" +\n        \"/** @constructor */function B() {this.a = new A();}\\n\" +\n        \"B.prototype.dostuff = function() {this.a.foo++;alert('hi');}\\n\" +\n        \"new B().dostuff();\\n\";\n\n    test(options,\n        code,\n        \"function a(){this.b=0;Object.seal(this)}\" +\n        \"(new function(){this.a=new a}).a.b++;\" +\n        \"alert(\\\"hi\\\")\");\n\n    options.removeUnusedClassProperties = true;\n\n    // This is still a problem when removeUnusedClassProperties are enabled.\n    test(options,\n        code,\n        \"function a(){Object.seal(this)}\" +\n        \"(new function(){this.a=new a}).a.b++;\" +\n        \"alert(\\\"hi\\\")\");\n  }\n",
        "begin_line": 1778,
        "end_line": 1803,
        "comment": "",
        "child_ranges": [
            "(line 1779,col 5)-(line 1779,col 54)",
            "(line 1780,col 5)-(line 1781,col 48)",
            "(line 1783,col 5)-(line 1787,col 31)",
            "(line 1789,col 5)-(line 1793,col 25)",
            "(line 1795,col 5)-(line 1795,col 47)",
            "(line 1798,col 5)-(line 1802,col 25)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testCoaleseVariables()",
        "snippet": "  public void testCoaleseVariables() {\n    CompilerOptions options = createCompilerOptions();\n\n    options.foldConstants = false;\n    options.coalesceVariableNames = true;\n\n    String code =\n        \"function f(a) {\" +\n        \"  if (a) {\" +\n        \"    return a;\" +\n        \"  } else {\" +\n        \"    var b = a;\" +\n        \"    return b;\" +\n        \"  }\" +\n        \"  return a;\" +\n        \"}\";\n    String expected =\n        \"function f(a) {\" +\n        \"  if (a) {\" +\n        \"    return a;\" +\n        \"  } else {\" +\n        \"    a = a;\" +\n        \"    return a;\" +\n        \"  }\" +\n        \"  return a;\" +\n        \"}\";\n\n    test(options, code, expected);\n\n    options.foldConstants = true;\n    options.coalesceVariableNames = false;\n\n    code =\n        \"function f(a) {\" +\n        \"  if (a) {\" +\n        \"    return a;\" +\n        \"  } else {\" +\n        \"    var b = a;\" +\n        \"    return b;\" +\n        \"  }\" +\n        \"  return a;\" +\n        \"}\";\n    expected =\n        \"function f(a) {\" +\n        \"  if (!a) {\" +\n        \"    var b = a;\" +\n        \"    return b;\" +\n        \"  }\" +\n        \"  return a;\" +\n        \"}\";\n\n    test(options, code, expected);\n\n    options.foldConstants = true;\n    options.coalesceVariableNames = true;\n\n    expected =\n      \"function f(a) {\" +\n      \"  return a;\" +\n      \"}\";\n\n    test(options, code, expected);\n  }\n",
        "begin_line": 1805,
        "end_line": 1867,
        "comment": "",
        "child_ranges": [
            "(line 1806,col 5)-(line 1806,col 54)",
            "(line 1808,col 5)-(line 1808,col 34)",
            "(line 1809,col 5)-(line 1809,col 41)",
            "(line 1811,col 5)-(line 1820,col 12)",
            "(line 1821,col 5)-(line 1830,col 12)",
            "(line 1832,col 5)-(line 1832,col 34)",
            "(line 1834,col 5)-(line 1834,col 33)",
            "(line 1835,col 5)-(line 1835,col 42)",
            "(line 1837,col 5)-(line 1846,col 12)",
            "(line 1847,col 5)-(line 1854,col 12)",
            "(line 1856,col 5)-(line 1856,col 34)",
            "(line 1858,col 5)-(line 1858,col 33)",
            "(line 1859,col 5)-(line 1859,col 41)",
            "(line 1861,col 5)-(line 1864,col 10)",
            "(line 1866,col 5)-(line 1866,col 34)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testLateStatementFusion()",
        "snippet": "  public void testLateStatementFusion() {\n    CompilerOptions options = createCompilerOptions();\n    options.foldConstants = true;\n    test(options,\n        \"while(a){a();if(b){b();b()}}\",\n        \"for(;a;)a(),b&&(b(),b())\");\n  }\n",
        "begin_line": 1869,
        "end_line": 1875,
        "comment": "",
        "child_ranges": [
            "(line 1870,col 5)-(line 1870,col 54)",
            "(line 1871,col 5)-(line 1871,col 33)",
            "(line 1872,col 5)-(line 1874,col 36)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testLateConstantReordering()",
        "snippet": "  public void testLateConstantReordering() {\n    CompilerOptions options = createCompilerOptions();\n    options.foldConstants = true;\n    test(options,\n        \"if (x < 1 || x > 1 || 1 < x || 1 > x) { alert(x) }\",\n        \"   (1 > x || 1 < x || 1 < x || 1 > x) && alert(x) \");\n  }\n",
        "begin_line": 1877,
        "end_line": 1883,
        "comment": "",
        "child_ranges": [
            "(line 1878,col 5)-(line 1878,col 54)",
            "(line 1879,col 5)-(line 1879,col 33)",
            "(line 1880,col 5)-(line 1882,col 62)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testsyntheticBlockOnDeadAssignments()",
        "snippet": "  public void testsyntheticBlockOnDeadAssignments() {\n    CompilerOptions options = createCompilerOptions();\n    options.deadAssignmentElimination = true;\n    options.removeUnusedVars = true;\n    options.syntheticBlockStartMarker = \"START\";\n    options.syntheticBlockEndMarker = \"END\";\n    test(options, \"var x; x = 1; START(); x = 1;END();x()\",\n                  \"var x; x = 1;{START();{x = 1}END()}x()\");\n  }\n",
        "begin_line": 1885,
        "end_line": 1893,
        "comment": "",
        "child_ranges": [
            "(line 1886,col 5)-(line 1886,col 54)",
            "(line 1887,col 5)-(line 1887,col 45)",
            "(line 1888,col 5)-(line 1888,col 36)",
            "(line 1889,col 5)-(line 1889,col 48)",
            "(line 1890,col 5)-(line 1890,col 44)",
            "(line 1891,col 5)-(line 1892,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testBug4152835()",
        "snippet": "  public void testBug4152835() {\n    CompilerOptions options = createCompilerOptions();\n    options.foldConstants = true;\n    options.syntheticBlockStartMarker = \"START\";\n    options.syntheticBlockEndMarker = \"END\";\n    test(options, \"START();END()\", \"{START();{}END()}\");\n  }\n",
        "begin_line": 1895,
        "end_line": 1901,
        "comment": "",
        "child_ranges": [
            "(line 1896,col 5)-(line 1896,col 54)",
            "(line 1897,col 5)-(line 1897,col 33)",
            "(line 1898,col 5)-(line 1898,col 48)",
            "(line 1899,col 5)-(line 1899,col 44)",
            "(line 1900,col 5)-(line 1900,col 56)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testBug5786871()",
        "snippet": "  public void testBug5786871() {\n    CompilerOptions options = createCompilerOptions();\n    options.ideMode = true;\n    test(options, \"function () {}\", RhinoErrorReporter.PARSE_ERROR);\n  }\n",
        "begin_line": 1903,
        "end_line": 1907,
        "comment": "",
        "child_ranges": [
            "(line 1904,col 5)-(line 1904,col 54)",
            "(line 1905,col 5)-(line 1905,col 27)",
            "(line 1906,col 5)-(line 1906,col 68)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testIssue378()",
        "snippet": "  public void testIssue378() {\n    CompilerOptions options = createCompilerOptions();\n    options.inlineVariables = true;\n    options.flowSensitiveInlineVariables = true;\n    testSame(options, \"function f(c) {var f = c; arguments[0] = this;\" +\n                      \"    f.apply(this, arguments); return this;}\");\n  }\n",
        "begin_line": 1909,
        "end_line": 1915,
        "comment": "",
        "child_ranges": [
            "(line 1910,col 5)-(line 1910,col 54)",
            "(line 1911,col 5)-(line 1911,col 35)",
            "(line 1912,col 5)-(line 1912,col 48)",
            "(line 1913,col 5)-(line 1914,col 69)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testIssue550()",
        "snippet": "  public void testIssue550() {\n    CompilerOptions options = createCompilerOptions();\n    CompilationLevel.SIMPLE_OPTIMIZATIONS\n        .setOptionsForCompilationLevel(options);\n    options.foldConstants = true;\n    options.inlineVariables = true;\n    options.flowSensitiveInlineVariables = true;\n    test(options,\n        \"function f(h) {\\n\" +\n        \"  var a = h;\\n\" +\n        \"  a = a + 'x';\\n\" +\n        \"  a = a + 'y';\\n\" +\n        \"  return a;\\n\" +\n        \"}\",\n        // This should eventually get inlined completely.\n        \"function f(a) { a += 'x'; return a += 'y'; }\");\n  }\n",
        "begin_line": 1917,
        "end_line": 1933,
        "comment": "",
        "child_ranges": [
            "(line 1918,col 5)-(line 1918,col 54)",
            "(line 1919,col 5)-(line 1920,col 48)",
            "(line 1921,col 5)-(line 1921,col 33)",
            "(line 1922,col 5)-(line 1922,col 35)",
            "(line 1923,col 5)-(line 1923,col 48)",
            "(line 1924,col 5)-(line 1932,col 56)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testIssue284()",
        "snippet": "  public void testIssue284() {\n    CompilerOptions options = createCompilerOptions();\n    options.smartNameRemoval = true;\n    test(options,\n        \"var goog = {};\" +\n        \"goog.inherits = function(x, y) {};\" +\n        \"var ns = {};\" +\n        \"/** @constructor */\" +\n        \"ns.PageSelectionModel = function() {};\" +\n        \"/** @constructor */\" +\n        \"ns.PageSelectionModel.FooEvent = function() {};\" +\n        \"/** @constructor */\" +\n        \"ns.PageSelectionModel.SelectEvent = function() {};\" +\n        \"goog.inherits(ns.PageSelectionModel.ChangeEvent,\" +\n        \"    ns.PageSelectionModel.FooEvent);\",\n        \"\");\n  }\n",
        "begin_line": 1935,
        "end_line": 1951,
        "comment": "",
        "child_ranges": [
            "(line 1936,col 5)-(line 1936,col 54)",
            "(line 1937,col 5)-(line 1937,col 36)",
            "(line 1938,col 5)-(line 1950,col 12)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testIssue772()",
        "snippet": "  public void testIssue772() throws Exception {\n    CompilerOptions options = createCompilerOptions();\n    options.closurePass = true;\n    options.checkTypes = true;\n    test(\n        options,\n        \"/** @const */ var a = {};\" +\n        \"/** @const */ a.b = {};\" +\n        \"/** @const */ a.b.c = {};\" +\n        \"goog.scope(function() {\" +\n        \"  var b = a.b;\" +\n        \"  var c = b.c;\" +\n        \"  /** @typedef {string} */\" +\n        \"  c.MyType;\" +\n        \"  /** @param {c.MyType} x The variable. */\" +\n        \"  c.myFunc = function(x) {};\" +\n        \"});\",\n        \"/** @const */ var a = {};\" +\n        \"/** @const */ a.b = {};\" +\n        \"/** @const */ a.b.c = {};\" +\n        \"a.b.c.MyType;\" +\n        \"a.b.c.myFunc = function(x) {};\");\n  }\n",
        "begin_line": 1953,
        "end_line": 1975,
        "comment": "",
        "child_ranges": [
            "(line 1954,col 5)-(line 1954,col 54)",
            "(line 1955,col 5)-(line 1955,col 31)",
            "(line 1956,col 5)-(line 1956,col 30)",
            "(line 1957,col 5)-(line 1974,col 42)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testCodingConvention()",
        "snippet": "  public void testCodingConvention() {\n    Compiler compiler = new Compiler();\n    compiler.initOptions(new CompilerOptions());\n    assertEquals(\n      compiler.getCodingConvention().getClass().toString(),\n      ClosureCodingConvention.class.toString());\n  }\n",
        "begin_line": 1977,
        "end_line": 1983,
        "comment": "",
        "child_ranges": [
            "(line 1978,col 5)-(line 1978,col 39)",
            "(line 1979,col 5)-(line 1979,col 48)",
            "(line 1980,col 5)-(line 1982,col 48)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testJQueryStringSplitLoops()",
        "snippet": "  public void testJQueryStringSplitLoops() {\n    CompilerOptions options = createCompilerOptions();\n    options.foldConstants = true;\n    test(options,\n      \"var x=['1','2','3','4','5','6','7']\",\n      \"var x='1234567'.split('')\");\n\n    options = createCompilerOptions();\n    options.foldConstants = true;\n    options.computeFunctionSideEffects = false;\n    options.removeUnusedVars = true;\n\n    // If we do splits too early, it would add a side-effect to x.\n    test(options,\n      \"var x=['1','2','3','4','5','6','7']\",\n      \"\");\n\n  }\n",
        "begin_line": 1985,
        "end_line": 2002,
        "comment": "",
        "child_ranges": [
            "(line 1986,col 5)-(line 1986,col 54)",
            "(line 1987,col 5)-(line 1987,col 33)",
            "(line 1988,col 5)-(line 1990,col 35)",
            "(line 1992,col 5)-(line 1992,col 38)",
            "(line 1993,col 5)-(line 1993,col 33)",
            "(line 1994,col 5)-(line 1994,col 47)",
            "(line 1995,col 5)-(line 1995,col 36)",
            "(line 1998,col 5)-(line 2000,col 10)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testAlwaysRunSafetyCheck()",
        "snippet": "  public void testAlwaysRunSafetyCheck() {\n    CompilerOptions options = createCompilerOptions();\n    options.checkSymbols = false;\n    options.customPasses = ArrayListMultimap.create();\n    options.customPasses.put(\n        CustomPassExecutionTime.BEFORE_OPTIMIZATIONS,\n        new CompilerPass() {\n          @Override public void process(Node externs, Node root) {\n            Node var = root.getLastChild().getFirstChild();\n            assertEquals(Token.VAR, var.getType());\n            var.detachFromParent();\n          }\n        });\n    try {\n      test(options,\n           \"var x = 3; function f() { return x + z; }\",\n           \"function f() { return x + z; }\");\n      fail(\"Expected run-time exception\");\n    } catch (RuntimeException e) {\n      assertTrue(e.getMessage().indexOf(\"Unexpected variable x\") != -1);\n    }\n  }\n",
        "begin_line": 2004,
        "end_line": 2025,
        "comment": "",
        "child_ranges": [
            "(line 2005,col 5)-(line 2005,col 54)",
            "(line 2006,col 5)-(line 2006,col 33)",
            "(line 2007,col 5)-(line 2007,col 54)",
            "(line 2008,col 5)-(line 2016,col 11)",
            "(line 2017,col 5)-(line 2024,col 5)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.Anonymous-4bd17501-072a-4030-911b-68066613ef47.process(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "          @Override public void process(Node externs, Node root) {\n            Node var = root.getLastChild().getFirstChild();\n            assertEquals(Token.VAR, var.getType());\n            var.detachFromParent();\n          }\n",
        "begin_line": 2011,
        "end_line": 2015,
        "comment": "",
        "child_ranges": [
            "(line 2012,col 13)-(line 2012,col 59)",
            "(line 2013,col 13)-(line 2013,col 51)",
            "(line 2014,col 13)-(line 2014,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testSuppressEs5StrictWarning()",
        "snippet": "  public void testSuppressEs5StrictWarning() {\n    CompilerOptions options = createCompilerOptions();\n    options.setWarningLevel(DiagnosticGroups.ES5_STRICT, CheckLevel.WARNING);\n    test(options,\n        \"/** @suppress{es5Strict} */\\n\" +\n        \"function f() { var arguments; }\",\n        \"function f() {}\");\n  }\n",
        "begin_line": 2027,
        "end_line": 2034,
        "comment": "",
        "child_ranges": [
            "(line 2028,col 5)-(line 2028,col 54)",
            "(line 2029,col 5)-(line 2029,col 77)",
            "(line 2030,col 5)-(line 2033,col 27)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testCheckProvidesWarning()",
        "snippet": "  public void testCheckProvidesWarning() {\n    CompilerOptions options = createCompilerOptions();\n    options.setWarningLevel(DiagnosticGroups.CHECK_PROVIDES, CheckLevel.WARNING);\n    options.setCheckProvides(CheckLevel.WARNING);\n    test(options,\n        \"/** @constructor */\\n\" +\n        \"function f() { var arguments; }\",\n        DiagnosticType.warning(\"JSC_MISSING_PROVIDE\", \"missing goog.provide(''{0}'')\"));\n  }\n",
        "begin_line": 2036,
        "end_line": 2044,
        "comment": "",
        "child_ranges": [
            "(line 2037,col 5)-(line 2037,col 54)",
            "(line 2038,col 5)-(line 2038,col 81)",
            "(line 2039,col 5)-(line 2039,col 49)",
            "(line 2040,col 5)-(line 2043,col 88)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testSuppressCheckProvidesWarning()",
        "snippet": "  public void testSuppressCheckProvidesWarning() {\n    CompilerOptions options = createCompilerOptions();\n    options.setWarningLevel(DiagnosticGroups.CHECK_PROVIDES, CheckLevel.WARNING);\n    options.setCheckProvides(CheckLevel.WARNING);\n    testSame(options,\n        \"/** @constructor\\n\" +\n        \" *  @suppress{checkProvides} */\\n\" +\n        \"function f() {}\");\n  }\n",
        "begin_line": 2046,
        "end_line": 2054,
        "comment": "",
        "child_ranges": [
            "(line 2047,col 5)-(line 2047,col 54)",
            "(line 2048,col 5)-(line 2048,col 81)",
            "(line 2049,col 5)-(line 2049,col 49)",
            "(line 2050,col 5)-(line 2053,col 27)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testSuppressCastWarning()",
        "snippet": "  public void testSuppressCastWarning() {\n    CompilerOptions options = createCompilerOptions();\n    options.setWarningLevel(DiagnosticGroups.CHECK_TYPES, CheckLevel.WARNING);\n\n    normalizeResults = true;\n\n    test(options,\n        \"function f() { var xyz = /** @type {string} */ (0); }\",\n        DiagnosticType.warning(\n            \"JSC_INVALID_CAST\", \"invalid cast\"));\n\n    testSame(options,\n        \"/** @suppress {invalidCasts} */\\n\" +\n        \"function f() { var xyz = /** @type {string} */ (0); }\");\n\n    testSame(options,\n        \"/** @const */ var g = {};\" +\n        \"/** @suppress {invalidCasts} */\" +\n        \"g.a = g.b = function() { var xyz = /** @type {string} */ (0); }\");\n  }\n",
        "begin_line": 2056,
        "end_line": 2075,
        "comment": "",
        "child_ranges": [
            "(line 2057,col 5)-(line 2057,col 54)",
            "(line 2058,col 5)-(line 2058,col 78)",
            "(line 2060,col 5)-(line 2060,col 28)",
            "(line 2062,col 5)-(line 2065,col 49)",
            "(line 2067,col 5)-(line 2069,col 65)",
            "(line 2071,col 5)-(line 2074,col 75)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testLhsCast()",
        "snippet": "  public void testLhsCast() {\n    CompilerOptions options = createCompilerOptions();\n    test(\n        options,\n        \"/** @const */ var g = {};\" +\n        \"/** @type {number} */ (g.foo) = 3;\",\n        \"/** @const */ var g = {};\" +\n        \"g.foo = 3;\");\n  }\n",
        "begin_line": 2077,
        "end_line": 2085,
        "comment": "",
        "child_ranges": [
            "(line 2078,col 5)-(line 2078,col 54)",
            "(line 2079,col 5)-(line 2084,col 22)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testRenamePrefix()",
        "snippet": "  public void testRenamePrefix() {\n    String code = \"var x = {}; function f(y) {}\";\n    CompilerOptions options = createCompilerOptions();\n    options.renamePrefix = \"G_\";\n    options.variableRenaming = VariableRenamingPolicy.ALL;\n    test(options, code, \"var G_={}; function G_a(a) {}\");\n  }\n",
        "begin_line": 2087,
        "end_line": 2093,
        "comment": "",
        "child_ranges": [
            "(line 2088,col 5)-(line 2088,col 49)",
            "(line 2089,col 5)-(line 2089,col 54)",
            "(line 2090,col 5)-(line 2090,col 32)",
            "(line 2091,col 5)-(line 2091,col 58)",
            "(line 2092,col 5)-(line 2092,col 57)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testRenamePrefixNamespace()",
        "snippet": "  public void testRenamePrefixNamespace() {\n    String code =\n        \"var x = {}; x.FOO = 5; x.bar = 3;\";\n\n    CompilerOptions options = createCompilerOptions();\n    testSame(options, code);\n\n    options.collapseProperties = true;\n    options.renamePrefixNamespace = \"_\";\n    test(options, code, \"_.x$FOO = 5; _.x$bar = 3;\");\n  }\n",
        "begin_line": 2095,
        "end_line": 2105,
        "comment": "",
        "child_ranges": [
            "(line 2096,col 5)-(line 2097,col 44)",
            "(line 2099,col 5)-(line 2099,col 54)",
            "(line 2100,col 5)-(line 2100,col 28)",
            "(line 2102,col 5)-(line 2102,col 38)",
            "(line 2103,col 5)-(line 2103,col 40)",
            "(line 2104,col 5)-(line 2104,col 53)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testRenamePrefixNamespaceProtectSideEffects()",
        "snippet": "  public void testRenamePrefixNamespaceProtectSideEffects() {\n    String code = \"var x = null; try { +x.FOO; } catch (e) {}\";\n\n    CompilerOptions options = createCompilerOptions();\n    testSame(options, code);\n\n    CompilationLevel.SIMPLE_OPTIMIZATIONS.setOptionsForCompilationLevel(\n        options);\n    options.renamePrefixNamespace = \"_\";\n    test(options, code, \"_.x = null; try { +_.x.FOO; } catch (e) {}\");\n  }\n",
        "begin_line": 2107,
        "end_line": 2117,
        "comment": "",
        "child_ranges": [
            "(line 2108,col 5)-(line 2108,col 63)",
            "(line 2110,col 5)-(line 2110,col 54)",
            "(line 2111,col 5)-(line 2111,col 28)",
            "(line 2113,col 5)-(line 2114,col 17)",
            "(line 2115,col 5)-(line 2115,col 40)",
            "(line 2116,col 5)-(line 2116,col 70)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testRenamePrefixNamespaceActivatesMoveFunctionDeclarations()",
        "snippet": "  public void testRenamePrefixNamespaceActivatesMoveFunctionDeclarations() {\n    CompilerOptions options = createCompilerOptions();\n    String code = \"var x = f; function f() { return 3; }\";\n    testSame(options, code);\n    assertFalse(options.moveFunctionDeclarations);\n    options.renamePrefixNamespace = \"_\";\n    test(options, code, \"_.f = function() { return 3; }; _.x = _.f;\");\n  }\n",
        "begin_line": 2119,
        "end_line": 2126,
        "comment": "",
        "child_ranges": [
            "(line 2120,col 5)-(line 2120,col 54)",
            "(line 2121,col 5)-(line 2121,col 58)",
            "(line 2122,col 5)-(line 2122,col 28)",
            "(line 2123,col 5)-(line 2123,col 50)",
            "(line 2124,col 5)-(line 2124,col 40)",
            "(line 2125,col 5)-(line 2125,col 70)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testBrokenNameSpace()",
        "snippet": "  public void testBrokenNameSpace() {\n    CompilerOptions options = createCompilerOptions();\n    String code = \"var goog; goog.provide('i.am.on.a.Horse');\" +\n                  \"i.am.on.a.Horse = function() {};\" +\n                  \"i.am.on.a.Horse.prototype.x = function() {};\" +\n                  \"i.am.on.a.Boat.prototype.y = function() {}\";\n    options.closurePass = true;\n    options.collapseProperties = true;\n    options.smartNameRemoval = true;\n    test(options, code, \"\");\n  }\n",
        "begin_line": 2128,
        "end_line": 2138,
        "comment": "",
        "child_ranges": [
            "(line 2129,col 5)-(line 2129,col 54)",
            "(line 2130,col 5)-(line 2133,col 63)",
            "(line 2134,col 5)-(line 2134,col 31)",
            "(line 2135,col 5)-(line 2135,col 38)",
            "(line 2136,col 5)-(line 2136,col 36)",
            "(line 2137,col 5)-(line 2137,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testNamelessParameter()",
        "snippet": "  public void testNamelessParameter() {\n    CompilerOptions options = createCompilerOptions();\n    CompilationLevel.ADVANCED_OPTIMIZATIONS\n        .setOptionsForCompilationLevel(options);\n    String code =\n        \"var impl_0;\" +\n        \"$load($init());\" +\n        \"function $load(){\" +\n        \"  window['f'] = impl_0;\" +\n        \"}\" +\n        \"function $init() {\" +\n        \"  impl_0 = {};\" +\n        \"}\";\n    String result =\n        \"window.f = {};\";\n    test(options, code, result);\n  }\n",
        "begin_line": 2140,
        "end_line": 2156,
        "comment": "",
        "child_ranges": [
            "(line 2141,col 5)-(line 2141,col 54)",
            "(line 2142,col 5)-(line 2143,col 48)",
            "(line 2144,col 5)-(line 2152,col 12)",
            "(line 2153,col 5)-(line 2154,col 25)",
            "(line 2155,col 5)-(line 2155,col 32)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testHiddenSideEffect()",
        "snippet": "  public void testHiddenSideEffect() {\n    CompilerOptions options = createCompilerOptions();\n    CompilationLevel.ADVANCED_OPTIMIZATIONS\n        .setOptionsForCompilationLevel(options);\n    options.setAliasExternals(true);\n    String code =\n        \"window.offsetWidth;\";\n    String result =\n        \"window.offsetWidth;\";\n    test(options, code, result);\n  }\n",
        "begin_line": 2158,
        "end_line": 2168,
        "comment": "",
        "child_ranges": [
            "(line 2159,col 5)-(line 2159,col 54)",
            "(line 2160,col 5)-(line 2161,col 48)",
            "(line 2162,col 5)-(line 2162,col 36)",
            "(line 2163,col 5)-(line 2164,col 30)",
            "(line 2165,col 5)-(line 2166,col 30)",
            "(line 2167,col 5)-(line 2167,col 32)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testNegativeZero()",
        "snippet": "  public void testNegativeZero() {\n    CompilerOptions options = createCompilerOptions();\n    CompilationLevel.ADVANCED_OPTIMIZATIONS\n        .setOptionsForCompilationLevel(options);\n    test(options,\n        \"function bar(x) { return x; }\\n\" +\n        \"function foo(x) { print(x / bar(0));\\n\" +\n        \"                 print(x / bar(-0)); }\\n\" +\n        \"foo(3);\",\n        \"print(3/0);print(3/-0);\");\n  }\n",
        "begin_line": 2170,
        "end_line": 2180,
        "comment": "",
        "child_ranges": [
            "(line 2171,col 5)-(line 2171,col 54)",
            "(line 2172,col 5)-(line 2173,col 48)",
            "(line 2174,col 5)-(line 2179,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testSingletonGetter1()",
        "snippet": "  public void testSingletonGetter1() {\n    CompilerOptions options = createCompilerOptions();\n    CompilationLevel.ADVANCED_OPTIMIZATIONS\n        .setOptionsForCompilationLevel(options);\n    options.setCodingConvention(new ClosureCodingConvention());\n    test(options,\n        \"/** @const */\\n\" +\n        \"var goog = goog || {};\\n\" +\n        \"goog.addSingletonGetter = function(ctor) {\\n\" +\n        \"  ctor.getInstance = function() {\\n\" +\n        \"    return ctor.instance_ || (ctor.instance_ = new ctor());\\n\" +\n        \"  };\\n\" +\n        \"};\" +\n        \"function Foo() {}\\n\" +\n        \"goog.addSingletonGetter(Foo);\" +\n        \"Foo.prototype.bar = 1;\" +\n        \"function Bar() {}\\n\" +\n        \"goog.addSingletonGetter(Bar);\" +\n        \"Bar.prototype.bar = 1;\",\n        \"\");\n  }\n",
        "begin_line": 2182,
        "end_line": 2202,
        "comment": "",
        "child_ranges": [
            "(line 2183,col 5)-(line 2183,col 54)",
            "(line 2184,col 5)-(line 2185,col 48)",
            "(line 2186,col 5)-(line 2186,col 63)",
            "(line 2187,col 5)-(line 2201,col 12)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testIncompleteFunction1()",
        "snippet": "  public void testIncompleteFunction1() {\n    CompilerOptions options = createCompilerOptions();\n    options.ideMode = true;\n    DiagnosticType[] warnings = new DiagnosticType[]{\n        RhinoErrorReporter.PARSE_ERROR,\n        RhinoErrorReporter.PARSE_ERROR};\n    test(options,\n        new String[] { \"var foo = {bar: function(e) }\" },\n        new String[] { \"var foo = {bar: function(e){}};\" },\n        warnings\n    );\n  }\n",
        "begin_line": 2204,
        "end_line": 2215,
        "comment": "",
        "child_ranges": [
            "(line 2205,col 5)-(line 2205,col 54)",
            "(line 2206,col 5)-(line 2206,col 27)",
            "(line 2207,col 5)-(line 2209,col 40)",
            "(line 2210,col 5)-(line 2214,col 6)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testIncompleteFunction2()",
        "snippet": "  public void testIncompleteFunction2() {\n    CompilerOptions options = createCompilerOptions();\n    options.ideMode = true;\n    DiagnosticType[] warnings = new DiagnosticType[]{\n        RhinoErrorReporter.PARSE_ERROR,\n        RhinoErrorReporter.PARSE_ERROR,\n        RhinoErrorReporter.PARSE_ERROR,\n        RhinoErrorReporter.PARSE_ERROR,\n        RhinoErrorReporter.PARSE_ERROR,\n        RhinoErrorReporter.PARSE_ERROR};\n    test(options,\n        new String[] { \"function hi\" },\n        new String[] { \"function hi() {}\" },\n        warnings\n    );\n  }\n",
        "begin_line": 2217,
        "end_line": 2232,
        "comment": "",
        "child_ranges": [
            "(line 2218,col 5)-(line 2218,col 54)",
            "(line 2219,col 5)-(line 2219,col 27)",
            "(line 2220,col 5)-(line 2226,col 40)",
            "(line 2227,col 5)-(line 2231,col 6)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testSortingOff()",
        "snippet": "  public void testSortingOff() {\n    CompilerOptions options = new CompilerOptions();\n    options.closurePass = true;\n    options.setCodingConvention(new ClosureCodingConvention());\n    test(options,\n         new String[] {\n           \"goog.require('goog.beer');\",\n           \"goog.provide('goog.beer');\"\n         },\n         ProcessClosurePrimitives.LATE_PROVIDE_ERROR);\n  }\n",
        "begin_line": 2234,
        "end_line": 2244,
        "comment": "",
        "child_ranges": [
            "(line 2235,col 5)-(line 2235,col 52)",
            "(line 2236,col 5)-(line 2236,col 31)",
            "(line 2237,col 5)-(line 2237,col 63)",
            "(line 2238,col 5)-(line 2243,col 54)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testUnboundedArrayLiteralInfiniteLoop()",
        "snippet": "  public void testUnboundedArrayLiteralInfiniteLoop() {\n    CompilerOptions options = createCompilerOptions();\n    options.ideMode = true;\n    test(options,\n         \"var x = [1, 2\",\n         \"var x = [1, 2]\",\n         RhinoErrorReporter.PARSE_ERROR);\n  }\n",
        "begin_line": 2246,
        "end_line": 2253,
        "comment": "",
        "child_ranges": [
            "(line 2247,col 5)-(line 2247,col 54)",
            "(line 2248,col 5)-(line 2248,col 27)",
            "(line 2249,col 5)-(line 2252,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testProvideRequireSameFile()",
        "snippet": "  public void testProvideRequireSameFile() throws Exception {\n    CompilerOptions options = createCompilerOptions();\n    options.setDependencyOptions(\n        new DependencyOptions()\n        .setDependencySorting(true));\n    options.closurePass = true;\n    test(\n        options,\n        \"goog.provide('x');\\ngoog.require('x');\",\n        \"var x = {};\");\n  }\n",
        "begin_line": 2255,
        "end_line": 2265,
        "comment": "",
        "child_ranges": [
            "(line 2256,col 5)-(line 2256,col 54)",
            "(line 2257,col 5)-(line 2259,col 37)",
            "(line 2260,col 5)-(line 2260,col 31)",
            "(line 2261,col 5)-(line 2264,col 23)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testDependencySorting()",
        "snippet": "  public void testDependencySorting() throws Exception {\n    CompilerOptions options = createCompilerOptions();\n    options.setDependencyOptions(\n        new DependencyOptions()\n        .setDependencySorting(true));\n    test(\n        options,\n        new String[] {\n          \"goog.require('x');\",\n          \"goog.provide('x');\",\n        },\n        new String[] {\n          \"goog.provide('x');\",\n          \"goog.require('x');\",\n\n          // For complicated reasons involving modules,\n          // the compiler creates a synthetic source file.\n          \"\",\n        });\n  }\n",
        "begin_line": 2267,
        "end_line": 2286,
        "comment": "",
        "child_ranges": [
            "(line 2268,col 5)-(line 2268,col 54)",
            "(line 2269,col 5)-(line 2271,col 37)",
            "(line 2272,col 5)-(line 2285,col 11)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testStrictWarningsGuard()",
        "snippet": "  public void testStrictWarningsGuard() throws Exception {\n    CompilerOptions options = createCompilerOptions();\n    options.checkTypes = true;\n    options.addWarningsGuard(new StrictWarningsGuard());\n\n    Compiler compiler = compile(options,\n        \"/** @return {number} */ function f() { return true; }\");\n    assertEquals(1, compiler.getErrors().length);\n    assertEquals(0, compiler.getWarnings().length);\n  }\n",
        "begin_line": 2288,
        "end_line": 2297,
        "comment": "",
        "child_ranges": [
            "(line 2289,col 5)-(line 2289,col 54)",
            "(line 2290,col 5)-(line 2290,col 30)",
            "(line 2291,col 5)-(line 2291,col 56)",
            "(line 2293,col 5)-(line 2294,col 65)",
            "(line 2295,col 5)-(line 2295,col 49)",
            "(line 2296,col 5)-(line 2296,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testStrictWarningsGuardEmergencyMode()",
        "snippet": "  public void testStrictWarningsGuardEmergencyMode() throws Exception {\n    CompilerOptions options = createCompilerOptions();\n    options.checkTypes = true;\n    options.addWarningsGuard(new StrictWarningsGuard());\n    options.useEmergencyFailSafe();\n\n    Compiler compiler = compile(options,\n        \"/** @return {number} */ function f() { return true; }\");\n    assertEquals(0, compiler.getErrors().length);\n    assertEquals(1, compiler.getWarnings().length);\n  }\n",
        "begin_line": 2299,
        "end_line": 2309,
        "comment": "",
        "child_ranges": [
            "(line 2300,col 5)-(line 2300,col 54)",
            "(line 2301,col 5)-(line 2301,col 30)",
            "(line 2302,col 5)-(line 2302,col 56)",
            "(line 2303,col 5)-(line 2303,col 35)",
            "(line 2305,col 5)-(line 2306,col 65)",
            "(line 2307,col 5)-(line 2307,col 49)",
            "(line 2308,col 5)-(line 2308,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testInlineProperties()",
        "snippet": "  public void testInlineProperties() {\n    CompilerOptions options = createCompilerOptions();\n    CompilationLevel level = CompilationLevel.ADVANCED_OPTIMIZATIONS;\n    level.setOptionsForCompilationLevel(options);\n    level.setTypeBasedOptimizationOptions(options);\n\n    String code = \"\" +\n        \"var ns = {};\\n\" +\n        \"/** @constructor */\\n\" +\n        \"ns.C = function () {this.someProperty = 1}\\n\" +\n        \"alert(new ns.C().someProperty + new ns.C().someProperty);\\n\";\n    assertTrue(options.inlineProperties);\n    assertTrue(options.collapseProperties);\n    // CollapseProperties used to prevent inlining this property.\n    test(options, code, \"alert(2);\");\n  }\n",
        "begin_line": 2311,
        "end_line": 2326,
        "comment": "",
        "child_ranges": [
            "(line 2312,col 5)-(line 2312,col 54)",
            "(line 2313,col 5)-(line 2313,col 69)",
            "(line 2314,col 5)-(line 2314,col 49)",
            "(line 2315,col 5)-(line 2315,col 51)",
            "(line 2317,col 5)-(line 2321,col 70)",
            "(line 2322,col 5)-(line 2322,col 41)",
            "(line 2323,col 5)-(line 2323,col 43)",
            "(line 2325,col 5)-(line 2325,col 37)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testGoogDefineClass1()",
        "snippet": "  public void testGoogDefineClass1() {\n    CompilerOptions options = createCompilerOptions();\n    CompilationLevel level = CompilationLevel.ADVANCED_OPTIMIZATIONS;\n    level.setOptionsForCompilationLevel(options);\n    level.setTypeBasedOptimizationOptions(options);\n\n    String code = \"\" +\n        \"var ns = {};\\n\" +\n        \"ns.C = goog.defineClass(null, {\\n\" +\n        \"  /** @constructor */\\n\" +\n        \"  constructor: function () {this.someProperty = 1}\\n\" +\n        \"});\\n\" +\n        \"alert(new ns.C().someProperty + new ns.C().someProperty);\\n\";\n    assertTrue(options.inlineProperties);\n    assertTrue(options.collapseProperties);\n    // CollapseProperties used to prevent inlining this property.\n    test(options, code, \"alert(2);\");\n  }\n",
        "begin_line": 2328,
        "end_line": 2345,
        "comment": "",
        "child_ranges": [
            "(line 2329,col 5)-(line 2329,col 54)",
            "(line 2330,col 5)-(line 2330,col 69)",
            "(line 2331,col 5)-(line 2331,col 49)",
            "(line 2332,col 5)-(line 2332,col 51)",
            "(line 2334,col 5)-(line 2340,col 70)",
            "(line 2341,col 5)-(line 2341,col 41)",
            "(line 2342,col 5)-(line 2342,col 43)",
            "(line 2344,col 5)-(line 2344,col 37)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testGoogDefineClass2()",
        "snippet": "  public void testGoogDefineClass2() {\n    CompilerOptions options = createCompilerOptions();\n    CompilationLevel level = CompilationLevel.ADVANCED_OPTIMIZATIONS;\n    level.setOptionsForCompilationLevel(options);\n    level.setTypeBasedOptimizationOptions(options);\n\n    String code = \"\" +\n        \"var C = goog.defineClass(null, {\\n\" +\n        \"  /** @constructor */\\n\" +\n        \"  constructor: function () {this.someProperty = 1}\\n\" +\n        \"});\\n\" +\n        \"alert(new C().someProperty + new C().someProperty);\\n\";\n    assertTrue(options.inlineProperties);\n    assertTrue(options.collapseProperties);\n    // CollapseProperties used to prevent inlining this property.\n    test(options, code, \"alert(2);\");\n  }\n",
        "begin_line": 2347,
        "end_line": 2363,
        "comment": "",
        "child_ranges": [
            "(line 2348,col 5)-(line 2348,col 54)",
            "(line 2349,col 5)-(line 2349,col 69)",
            "(line 2350,col 5)-(line 2350,col 49)",
            "(line 2351,col 5)-(line 2351,col 51)",
            "(line 2353,col 5)-(line 2358,col 64)",
            "(line 2359,col 5)-(line 2359,col 41)",
            "(line 2360,col 5)-(line 2360,col 43)",
            "(line 2362,col 5)-(line 2362,col 37)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testGoogDefineClass3()",
        "snippet": "  public void testGoogDefineClass3() {\n    CompilerOptions options = createCompilerOptions();\n    CompilationLevel level = CompilationLevel.ADVANCED_OPTIMIZATIONS;\n    level.setOptionsForCompilationLevel(options);\n    level.setTypeBasedOptimizationOptions(options);\n    WarningLevel warnings = WarningLevel.VERBOSE;\n    warnings.setOptionsForWarningLevel(options);\n\n    String code = \"\" +\n        \"var C = goog.defineClass(null, {\\n\" +\n        \"  /** @constructor */\\n\" +\n        \"  constructor: function () {\\n\" +\n        \"    /** @type {number} */\\n\" +\n        \"    this.someProperty = 1},\\n\" +\n        \"  /** @param {string} a */\\n\" +\n        \"  someMethod: function (a) {}\\n\" +\n        \"});\" +\n        \"var x = new C();\\n\" +\n        \"x.someMethod(x.someProperty);\\n\";\n    assertTrue(options.inlineProperties);\n    assertTrue(options.collapseProperties);\n    // CollapseProperties used to prevent inlining this property.\n    test(options, code, TypeValidator.TYPE_MISMATCH_WARNING);\n  }\n",
        "begin_line": 2365,
        "end_line": 2388,
        "comment": "",
        "child_ranges": [
            "(line 2366,col 5)-(line 2366,col 54)",
            "(line 2367,col 5)-(line 2367,col 69)",
            "(line 2368,col 5)-(line 2368,col 49)",
            "(line 2369,col 5)-(line 2369,col 51)",
            "(line 2370,col 5)-(line 2370,col 49)",
            "(line 2371,col 5)-(line 2371,col 48)",
            "(line 2373,col 5)-(line 2383,col 42)",
            "(line 2384,col 5)-(line 2384,col 41)",
            "(line 2385,col 5)-(line 2385,col 43)",
            "(line 2387,col 5)-(line 2387,col 61)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testCheckConstants1()",
        "snippet": "  public void testCheckConstants1() {\n    CompilerOptions options = createCompilerOptions();\n    CompilationLevel level = CompilationLevel.SIMPLE_OPTIMIZATIONS;\n    level.setOptionsForCompilationLevel(options);\n    WarningLevel warnings = WarningLevel.QUIET;\n    warnings.setOptionsForWarningLevel(options);\n\n    String code = \"\" +\n        \"var foo; foo();\\n\" +\n        \"/** @const */\\n\" +\n        \"var x = 1; foo(); x = 2;\\n\";\n    test(options, code, code);\n  }\n",
        "begin_line": 2390,
        "end_line": 2402,
        "comment": "",
        "child_ranges": [
            "(line 2391,col 5)-(line 2391,col 54)",
            "(line 2392,col 5)-(line 2392,col 67)",
            "(line 2393,col 5)-(line 2393,col 49)",
            "(line 2394,col 5)-(line 2394,col 47)",
            "(line 2395,col 5)-(line 2395,col 48)",
            "(line 2397,col 5)-(line 2400,col 37)",
            "(line 2401,col 5)-(line 2401,col 30)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testCheckConstants2()",
        "snippet": "  public void testCheckConstants2() {\n    CompilerOptions options = createCompilerOptions();\n    CompilationLevel level = CompilationLevel.SIMPLE_OPTIMIZATIONS;\n    level.setOptionsForCompilationLevel(options);\n    WarningLevel warnings = WarningLevel.DEFAULT;\n    warnings.setOptionsForWarningLevel(options);\n\n    String code = \"\" +\n        \"var foo;\\n\" +\n        \"/** @const */\\n\" +\n        \"var x = 1; foo(); x = 2;\\n\";\n    test(options, code, ConstCheck.CONST_REASSIGNED_VALUE_ERROR);\n  }\n",
        "begin_line": 2404,
        "end_line": 2416,
        "comment": "",
        "child_ranges": [
            "(line 2405,col 5)-(line 2405,col 54)",
            "(line 2406,col 5)-(line 2406,col 67)",
            "(line 2407,col 5)-(line 2407,col 49)",
            "(line 2408,col 5)-(line 2408,col 49)",
            "(line 2409,col 5)-(line 2409,col 48)",
            "(line 2411,col 5)-(line 2414,col 37)",
            "(line 2415,col 5)-(line 2415,col 65)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testIssue937()",
        "snippet": "  public void testIssue937() {\n    CompilerOptions options = createCompilerOptions();\n    CompilationLevel level = CompilationLevel.SIMPLE_OPTIMIZATIONS;\n    level.setOptionsForCompilationLevel(options);\n    WarningLevel warnings = WarningLevel.DEFAULT;\n    warnings.setOptionsForWarningLevel(options);\n\n    String code = \"\" +\n        \"console.log(\" +\n            \"/** @type {function():!string} */ ((new x())['abc'])() );\";\n    String result = \"\" +\n        \"console.log((new x()).abc());\";\n    test(options, code, result);\n  }\n",
        "begin_line": 2418,
        "end_line": 2431,
        "comment": "",
        "child_ranges": [
            "(line 2419,col 5)-(line 2419,col 54)",
            "(line 2420,col 5)-(line 2420,col 67)",
            "(line 2421,col 5)-(line 2421,col 49)",
            "(line 2422,col 5)-(line 2422,col 49)",
            "(line 2423,col 5)-(line 2423,col 48)",
            "(line 2425,col 5)-(line 2427,col 72)",
            "(line 2428,col 5)-(line 2429,col 40)",
            "(line 2430,col 5)-(line 2430,col 32)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testIssue787()",
        "snippet": "  public void testIssue787() {\n    CompilerOptions options = createCompilerOptions();\n    CompilationLevel level = CompilationLevel.SIMPLE_OPTIMIZATIONS;\n    level.setOptionsForCompilationLevel(options);\n    WarningLevel warnings = WarningLevel.DEFAULT;\n    warnings.setOptionsForWarningLevel(options);\n\n    String code = \"\" +\n        \"function some_function() {\\n\" +\n        \"  var fn1;\\n\" +\n        \"  var fn2;\\n\" +\n        \"\\n\" +\n        \"  if (any_expression) {\\n\" +\n        \"    fn2 = external_ref;\\n\" +\n        \"    fn1 = function (content) {\\n\" +\n        \"      return fn2();\\n\" +\n        \"    }\\n\" +\n        \"  }\\n\" +\n        \"\\n\" +\n        \"  return {\\n\" +\n        \"    method1: function () {\\n\" +\n        \"      if (fn1) fn1();\\n\" +\n        \"      return true;\\n\" +\n        \"    },\\n\" +\n        \"    method2: function () {\\n\" +\n        \"      return false;\\n\" +\n        \"    }\\n\" +\n        \"  }\\n\" +\n        \"}\";\n\n    String result = \"\" +\n        \"function some_function() {\\n\" +\n        \"  var a, b;\\n\" +\n        \"  any_expression && (b = external_ref, a = function(a) {\\n\" +\n        \"    return b()\\n\" +\n        \"  });\\n\" +\n        \"  return{method1:function() {\\n\" +\n        \"    a && a();\\n\" +\n        \"    return !0\\n\" +\n        \"  }, method2:function() {\\n\" +\n        \"    return !1\\n\" +\n        \"  }}\\n\" +\n        \"}\\n\" +\n        \"\";\n\n    test(options, code, result);\n  }\n",
        "begin_line": 2435,
        "end_line": 2481,
        "comment": "",
        "child_ranges": [
            "(line 2436,col 5)-(line 2436,col 54)",
            "(line 2437,col 5)-(line 2437,col 67)",
            "(line 2438,col 5)-(line 2438,col 49)",
            "(line 2439,col 5)-(line 2439,col 49)",
            "(line 2440,col 5)-(line 2440,col 48)",
            "(line 2442,col 5)-(line 2463,col 12)",
            "(line 2465,col 5)-(line 2478,col 11)",
            "(line 2480,col 5)-(line 2480,col 32)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testManyAdds()",
        "snippet": "  public void testManyAdds() {}\n",
        "begin_line": 2483,
        "end_line": 2483,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testPerfTracker()",
        "snippet": "  public void testPerfTracker() {\n    ByteArrayOutputStream output = new ByteArrayOutputStream();\n    PrintStream outstream = new PrintStream(output);\n    Compiler compiler = new Compiler(outstream);\n    CompilerOptions options = new CompilerOptions();\n    List<SourceFile> inputs = Lists.newArrayList();\n    List<SourceFile> externs = Lists.newArrayList();\n\n    options.setTracerMode(TracerMode.ALL);\n    inputs.add(SourceFile.fromCode(\"foo\", \"function fun(){}\"));\n    compiler.compile(externs, inputs, options);\n    outstream.flush();\n    outstream.close();\n    Pattern p = Pattern.compile(\n        \".*Summary:\\npass,runtime,runs,changingRuns,reduction,gzReduction\" +\n        \".*TOTAL:\" +\n        \"\\nRuntime\\\\(ms\\\\): [0-9]+\" +\n        \"\\n#Runs: [0-9]+\" +\n        \"\\n#Changing runs: [0-9]+\" +\n        \"\\n#Loopable runs: [0-9]+\" +\n        \"\\n#Changing loopable runs: [0-9]+\" +\n        \"\\nReduction\\\\(bytes\\\\): [0-9]+\" +\n        \"\\nGzReduction\\\\(bytes\\\\): [0-9]+\" +\n        \"\\nSize\\\\(bytes\\\\): [0-9]+\" +\n        \"\\nGzSize\\\\(bytes\\\\): [0-9]+\" +\n        \"\\n\\nLog:\\n\" +\n        \"pass,runtime,runs,changingRuns,reduction,gzReduction,size,gzSize.*\",\n        Pattern.DOTALL);\n    assertTrue(p.matcher(output.toString()).matches());\n  }\n",
        "begin_line": 2503,
        "end_line": 2532,
        "comment": " have the expected number of columns",
        "child_ranges": [
            "(line 2504,col 5)-(line 2504,col 63)",
            "(line 2505,col 5)-(line 2505,col 52)",
            "(line 2506,col 5)-(line 2506,col 48)",
            "(line 2507,col 5)-(line 2507,col 52)",
            "(line 2508,col 5)-(line 2508,col 51)",
            "(line 2509,col 5)-(line 2509,col 52)",
            "(line 2511,col 5)-(line 2511,col 42)",
            "(line 2512,col 5)-(line 2512,col 63)",
            "(line 2513,col 5)-(line 2513,col 47)",
            "(line 2514,col 5)-(line 2514,col 22)",
            "(line 2515,col 5)-(line 2515,col 22)",
            "(line 2516,col 5)-(line 2530,col 24)",
            "(line 2531,col 5)-(line 2531,col 55)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testIsEquivalentTo()",
        "snippet": "  public void testIsEquivalentTo() {\n    String[] input1 = {\"function f(z) { return z; }\"};\n    String[] input2 = {\"function f(y) { return y; }\"};\n    CompilerOptions options = new CompilerOptions();\n    Node out1 = parse(input1, options, false);\n    Node out2 = parse(input2, options, false);\n    assertFalse(out1.isEquivalentTo(out2));\n  }\n",
        "begin_line": 2535,
        "end_line": 2542,
        "comment": " isEquivalentTo returns false for alpha-equivalent nodes",
        "child_ranges": [
            "(line 2536,col 5)-(line 2536,col 54)",
            "(line 2537,col 5)-(line 2537,col 54)",
            "(line 2538,col 5)-(line 2538,col 52)",
            "(line 2539,col 5)-(line 2539,col 46)",
            "(line 2540,col 5)-(line 2540,col 46)",
            "(line 2541,col 5)-(line 2541,col 43)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.createCompilerOptions()",
        "snippet": "  @Override\n  protected CompilerOptions createCompilerOptions() {\n    CompilerOptions options = new CompilerOptions();\n    options.setCodingConvention(new GoogleCodingConvention());\n    return options;\n  }\n",
        "begin_line": 2545,
        "end_line": 2550,
        "comment": " Creates a CompilerOptions object with google coding conventions. ",
        "child_ranges": [
            "(line 2547,col 5)-(line 2547,col 52)",
            "(line 2548,col 5)-(line 2548,col 62)",
            "(line 2549,col 5)-(line 2549,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.IntegrationTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTestCase.java",
        "signature": "com.google.javascript.jscomp.IntegrationTestCase.setUp()",
        "snippet": "  @Override\n  public void setUp() {\n    externs = DEFAULT_EXTERNS;\n    lastCompiler = null;\n    normalizeResults = false;\n  }\n",
        "begin_line": 58,
        "end_line": 63,
        "comment": "",
        "child_ranges": [
            "(line 60,col 5)-(line 60,col 30)",
            "(line 61,col 5)-(line 61,col 24)",
            "(line 62,col 5)-(line 62,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.IntegrationTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTestCase.java",
        "signature": "com.google.javascript.jscomp.IntegrationTestCase.testSame(com.google.javascript.jscomp.CompilerOptions, java.lang.String)",
        "snippet": "  protected void testSame(CompilerOptions options, String original) {\n    testSame(options, new String[] { original });\n  }\n",
        "begin_line": 65,
        "end_line": 67,
        "comment": "",
        "child_ranges": [
            "(line 66,col 5)-(line 66,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.IntegrationTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTestCase.java",
        "signature": "com.google.javascript.jscomp.IntegrationTestCase.testSame(com.google.javascript.jscomp.CompilerOptions, java.lang.String[])",
        "snippet": "  protected void testSame(CompilerOptions options, String[] original) {\n    test(options, original, original);\n  }\n",
        "begin_line": 69,
        "end_line": 71,
        "comment": "",
        "child_ranges": [
            "(line 70,col 5)-(line 70,col 38)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.IntegrationTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTestCase.java",
        "signature": "com.google.javascript.jscomp.IntegrationTestCase.test(com.google.javascript.jscomp.CompilerOptions, java.lang.String, java.lang.String)",
        "snippet": "  protected void test(CompilerOptions options,\n      String original, String compiled) {\n    test(options, new String[] { original }, new String[] { compiled });\n  }\n",
        "begin_line": 77,
        "end_line": 80,
        "comment": "\n   * Asserts that when compiling with the given compiler options,\n   * {@code original} is transformed into {@code compiled}.\n   ",
        "child_ranges": [
            "(line 79,col 5)-(line 79,col 72)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.IntegrationTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTestCase.java",
        "signature": "com.google.javascript.jscomp.IntegrationTestCase.test(com.google.javascript.jscomp.CompilerOptions, java.lang.String[], java.lang.String[])",
        "snippet": "  protected void test(CompilerOptions options,\n      String[] original, String[] compiled) {\n    Compiler compiler = compile(options, original);\n    assertEquals(\"Expected no warnings or errors\\n\" +\n        \"Errors: \\n\" + Joiner.on(\"\\n\").join(compiler.getErrors()) +\n        \"Warnings: \\n\" + Joiner.on(\"\\n\").join(compiler.getWarnings()),\n        0, compiler.getErrors().length + compiler.getWarnings().length);\n\n    Node root = compiler.getRoot().getLastChild();\n    Node expectedRoot = parse(compiled, options, normalizeResults);\n    String explanation = expectedRoot.checkTreeEquals(root);\n    assertNull(\"\\nExpected: \" + compiler.toSource(expectedRoot) +\n        \"\\nResult: \" + compiler.toSource(root) +\n        \"\\n\" + explanation, explanation);\n  }\n",
        "begin_line": 86,
        "end_line": 100,
        "comment": "\n   * Asserts that when compiling with the given compiler options,\n   * {@code original} is transformed into {@code compiled}.\n   ",
        "child_ranges": [
            "(line 88,col 5)-(line 88,col 51)",
            "(line 89,col 5)-(line 92,col 72)",
            "(line 94,col 5)-(line 94,col 50)",
            "(line 95,col 5)-(line 95,col 67)",
            "(line 96,col 5)-(line 96,col 60)",
            "(line 97,col 5)-(line 99,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.IntegrationTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTestCase.java",
        "signature": "com.google.javascript.jscomp.IntegrationTestCase.test(com.google.javascript.jscomp.CompilerOptions, java.lang.String, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  protected void test(CompilerOptions options,\n      String original, DiagnosticType warning) {\n    test(options, new String[] { original }, warning);\n  }\n",
        "begin_line": 106,
        "end_line": 109,
        "comment": "\n   * Asserts that when compiling with the given compiler options,\n   * there is an error or warning.\n   ",
        "child_ranges": [
            "(line 108,col 5)-(line 108,col 54)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.IntegrationTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTestCase.java",
        "signature": "com.google.javascript.jscomp.IntegrationTestCase.test(com.google.javascript.jscomp.CompilerOptions, java.lang.String, java.lang.String, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  protected void test(CompilerOptions options,\n      String original, String compiled, DiagnosticType warning) {\n    test(options, new String[] { original }, new String[] { compiled },\n         warning);\n  }\n",
        "begin_line": 111,
        "end_line": 115,
        "comment": "",
        "child_ranges": [
            "(line 113,col 5)-(line 114,col 18)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.IntegrationTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTestCase.java",
        "signature": "com.google.javascript.jscomp.IntegrationTestCase.test(com.google.javascript.jscomp.CompilerOptions, java.lang.String[], com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  protected void test(CompilerOptions options,\n      String[] original, DiagnosticType warning) {\n    test(options, original, null, warning);\n  }\n",
        "begin_line": 117,
        "end_line": 120,
        "comment": "",
        "child_ranges": [
            "(line 119,col 5)-(line 119,col 43)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.IntegrationTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTestCase.java",
        "signature": "com.google.javascript.jscomp.IntegrationTestCase.test(com.google.javascript.jscomp.CompilerOptions, java.lang.String[], java.lang.String[], com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  protected void test(CompilerOptions options,\n      String[] original, String[] compiled, DiagnosticType warning) {\n    Compiler compiler = compile(options, original);\n    checkUnexpectedErrorsOrWarnings(compiler, 1);\n    assertEquals(\"Expected exactly one warning or error\",\n        1, compiler.getErrors().length + compiler.getWarnings().length);\n    if (compiler.getErrors().length > 0) {\n      assertEquals(warning, compiler.getErrors()[0].getType());\n    } else {\n      assertEquals(warning, compiler.getWarnings()[0].getType());\n    }\n\n    if (compiled != null) {\n      Node root = compiler.getRoot().getLastChild();\n      Node expectedRoot = parse(compiled, options, normalizeResults);\n      String explanation = expectedRoot.checkTreeEquals(root);\n      assertNull(\"\\nExpected: \" + compiler.toSource(expectedRoot) +\n          \"\\nResult: \" + compiler.toSource(root) +\n          \"\\n\" + explanation, explanation);\n    }\n  }\n",
        "begin_line": 126,
        "end_line": 146,
        "comment": "\n   * Asserts that when compiling with the given compiler options,\n   * there is an error or warning.\n   ",
        "child_ranges": [
            "(line 128,col 5)-(line 128,col 51)",
            "(line 129,col 5)-(line 129,col 49)",
            "(line 130,col 5)-(line 131,col 72)",
            "(line 132,col 5)-(line 136,col 5)",
            "(line 138,col 5)-(line 145,col 5)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.IntegrationTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTestCase.java",
        "signature": "com.google.javascript.jscomp.IntegrationTestCase.test(com.google.javascript.jscomp.CompilerOptions, java.lang.String[], java.lang.String[], com.google.javascript.jscomp.DiagnosticType[])",
        "snippet": "  protected void test(CompilerOptions options,\n      String[] original, String[] compiled, DiagnosticType[] warnings) {\n    Compiler compiler = compile(options, original);\n    checkUnexpectedErrorsOrWarnings(compiler, warnings.length);\n\n    if (compiled != null) {\n      Node root = compiler.getRoot().getLastChild();\n      Node expectedRoot = parse(compiled, options, normalizeResults);\n      String explanation = expectedRoot.checkTreeEquals(root);\n      assertNull(\"\\nExpected: \" + compiler.toSource(expectedRoot) +\n          \"\\nResult: \" + compiler.toSource(root) +\n          \"\\n\" + explanation, explanation);\n    }\n  }\n",
        "begin_line": 152,
        "end_line": 165,
        "comment": "\n   * Asserts that when compiling with the given compiler options,\n   * there is an error or warning.\n   ",
        "child_ranges": [
            "(line 154,col 5)-(line 154,col 51)",
            "(line 155,col 5)-(line 155,col 63)",
            "(line 157,col 5)-(line 164,col 5)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.IntegrationTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTestCase.java",
        "signature": "com.google.javascript.jscomp.IntegrationTestCase.checkUnexpectedErrorsOrWarnings(com.google.javascript.jscomp.Compiler, int)",
        "snippet": "  protected void checkUnexpectedErrorsOrWarnings(\n      Compiler compiler, int expected) {\n    int actual = compiler.getErrors().length + compiler.getWarnings().length;\n    if (actual != expected) {\n      String msg = \"\";\n      for (JSError err : compiler.getErrors()) {\n        msg += \"Error:\" + err.toString() + \"\\n\";\n      }\n      for (JSError err : compiler.getWarnings()) {\n        msg += \"Warning:\" + err.toString() + \"\\n\";\n      }\n      assertEquals(\"Unexpected warnings or errors.\\n \" + msg,\n        expected, actual);\n    }\n  }\n",
        "begin_line": 167,
        "end_line": 181,
        "comment": "",
        "child_ranges": [
            "(line 169,col 5)-(line 169,col 77)",
            "(line 170,col 5)-(line 180,col 5)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.IntegrationTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTestCase.java",
        "signature": "com.google.javascript.jscomp.IntegrationTestCase.compile(com.google.javascript.jscomp.CompilerOptions, java.lang.String)",
        "snippet": "  protected Compiler compile(CompilerOptions options, String original) {\n    return compile(options, new String[] { original });\n  }\n",
        "begin_line": 183,
        "end_line": 185,
        "comment": "",
        "child_ranges": [
            "(line 184,col 5)-(line 184,col 55)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.IntegrationTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTestCase.java",
        "signature": "com.google.javascript.jscomp.IntegrationTestCase.compile(com.google.javascript.jscomp.CompilerOptions, java.lang.String[])",
        "snippet": "  protected Compiler compile(CompilerOptions options, String[] original) {\n    Compiler compiler = lastCompiler = new Compiler();\n    List<SourceFile> inputs = Lists.newArrayList();\n    for (int i = 0; i < original.length; i++) {\n      inputs.add(SourceFile.fromCode(\"input\" + i, original[i]));\n    }\n    compiler.compileModules(\n        externs, Lists.newArrayList(CompilerTestCase.createModuleChain(original)),\n        options);\n    return compiler;\n  }\n",
        "begin_line": 187,
        "end_line": 197,
        "comment": "",
        "child_ranges": [
            "(line 188,col 5)-(line 188,col 54)",
            "(line 189,col 5)-(line 189,col 51)",
            "(line 190,col 5)-(line 192,col 5)",
            "(line 193,col 5)-(line 195,col 17)",
            "(line 196,col 5)-(line 196,col 20)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.IntegrationTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTestCase.java",
        "signature": "com.google.javascript.jscomp.IntegrationTestCase.parse(java.lang.String[], com.google.javascript.jscomp.CompilerOptions, boolean)",
        "snippet": "  protected Node parse(\n      String[] original, CompilerOptions options, boolean normalize) {\n    Compiler compiler = new Compiler();\n    List<SourceFile> inputs = Lists.newArrayList();\n    for (int i = 0; i < original.length; i++) {\n      inputs.add(SourceFile.fromCode(\"input\" + i, original[i]));\n    }\n    compiler.init(externs, inputs, options);\n    checkUnexpectedErrorsOrWarnings(compiler, 0);\n    Node all = compiler.parseInputs();\n    checkUnexpectedErrorsOrWarnings(compiler, 0);\n    Node n = all.getLastChild();\n    Node externs = all.getFirstChild();\n\n    (new CreateSyntheticBlocks(\n        compiler, \"synStart\", \"synEnd\")).process(externs, n);\n\n    if (normalize) {\n      compiler.normalize();\n    }\n\n    return n;\n  }\n",
        "begin_line": 199,
        "end_line": 221,
        "comment": "",
        "child_ranges": [
            "(line 201,col 5)-(line 201,col 39)",
            "(line 202,col 5)-(line 202,col 51)",
            "(line 203,col 5)-(line 205,col 5)",
            "(line 206,col 5)-(line 206,col 44)",
            "(line 207,col 5)-(line 207,col 49)",
            "(line 208,col 5)-(line 208,col 38)",
            "(line 209,col 5)-(line 209,col 49)",
            "(line 210,col 5)-(line 210,col 32)",
            "(line 211,col 5)-(line 211,col 39)",
            "(line 213,col 5)-(line 214,col 61)",
            "(line 216,col 5)-(line 218,col 5)",
            "(line 220,col 5)-(line 220,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.IntegrationTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTestCase.java",
        "signature": "com.google.javascript.jscomp.IntegrationTestCase.createCompilerOptions()",
        "snippet": "  abstract CompilerOptions createCompilerOptions();\n",
        "begin_line": 224,
        "end_line": 224,
        "comment": " Creates a CompilerOptions object with google coding conventions. ",
        "child_ranges": []
    }
]