[
    {
        "name": "ExtendedMessageFormat.applyPattern#142",
        "is_bug": false,
        "src_path": "src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java",
        "class_name": "org.apache.commons.lang.text.ExtendedMessageFormat",
        "signature": "org.apache.commons.lang.text.ExtendedMessageFormat.applyPattern(java.lang.String)",
        "snippet": "    public final void applyPattern(String pattern) {\n        if (registry == null) {\n            super.applyPattern(pattern);\n            toPattern = super.toPattern();\n            return;\n        }\n        ArrayList foundFormats = new ArrayList();\n        ArrayList foundDescriptions = new ArrayList();\n        StringBuffer stripCustom = new StringBuffer(pattern.length());\n\n        ParsePosition pos = new ParsePosition(0);\n        char[] c = pattern.toCharArray();\n        int fmtCount = 0;\n        while (pos.getIndex() < pattern.length()) {\n            switch (c[pos.getIndex()]) {\n            case QUOTE:\n                appendQuotedString(pattern, pos, stripCustom, true);\n                break;\n            case START_FE:\n                fmtCount++;\n                seekNonWs(pattern, pos);\n                int start = pos.getIndex();\n                int index = readArgumentIndex(pattern, next(pos));\n                stripCustom.append(START_FE).append(index);\n                seekNonWs(pattern, pos);\n                Format format = null;\n                String formatDescription = null;\n                if (c[pos.getIndex()] == START_FMT) {\n                    formatDescription = parseFormatDescription(pattern,\n                            next(pos));\n                    format = getFormat(formatDescription);\n                    if (format == null) {\n                        stripCustom.append(START_FMT).append(formatDescription);\n                    }\n                }\n                foundFormats.add(format);\n                foundDescriptions.add(format == null ? null : formatDescription);\n                Validate.isTrue(foundFormats.size() == fmtCount);\n                Validate.isTrue(foundDescriptions.size() == fmtCount);\n                if (c[pos.getIndex()] != END_FE) {\n                    throw new IllegalArgumentException(\n                            \"Unreadable format element at position \" + start);\n                }\n                // fall through\n            default:\n                stripCustom.append(c[pos.getIndex()]);\n                next(pos);\n            }\n        }\n        super.applyPattern(stripCustom.toString());\n        toPattern = insertFormats(super.toPattern(), foundDescriptions);\n        if (containsElements(foundFormats)) {\n            Format[] origFormats = getFormats();\n            // only loop over what we know we have, as MessageFormat on Java 1.3 \n            // seems to provide an extra format element:\n            int i = 0;\n            for (Iterator it = foundFormats.iterator(); it.hasNext(); i++) {\n                Format f = (Format) it.next();\n                if (f != null) {\n                    origFormats[i] = f;\n                }\n            }\n            super.setFormats(origFormats);\n        }\n    }\n",
        "begin_line": 142,
        "end_line": 206,
        "comment": "\n     * Apply the specified pattern.\n     * \n     * @param pattern String\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 1.0
        },
        "num_failing_tests": 1
    },
    {
        "name": "ExtendedMessageFormat.appendQuotedString#417",
        "is_bug": true,
        "src_path": "src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java",
        "class_name": "org.apache.commons.lang.text.ExtendedMessageFormat",
        "signature": "org.apache.commons.lang.text.ExtendedMessageFormat.appendQuotedString(java.lang.String, java.text.ParsePosition, java.lang.StringBuffer, boolean)",
        "snippet": "    private StringBuffer appendQuotedString(String pattern, ParsePosition pos,\n            StringBuffer appendTo, boolean escapingOn) {\n        int start = pos.getIndex();\n        char[] c = pattern.toCharArray();\n        if (escapingOn && c[start] == QUOTE) {\n            return appendTo == null ? null : appendTo.append(QUOTE);\n        }\n        int lastHold = start;\n        for (int i = pos.getIndex(); i < pattern.length(); i++) {\n            if (escapingOn && pattern.substring(i).startsWith(ESCAPED_QUOTE)) {\n                appendTo.append(c, lastHold, pos.getIndex() - lastHold).append(\n                        QUOTE);\n                pos.setIndex(i + ESCAPED_QUOTE.length());\n                lastHold = pos.getIndex();\n                continue;\n            }\n            switch (c[pos.getIndex()]) {\n            case QUOTE:\n                next(pos);\n                return appendTo == null ? null : appendTo.append(c, lastHold,\n                        pos.getIndex() - lastHold);\n            default:\n                next(pos);\n            }\n        }\n        throw new IllegalArgumentException(\n                \"Unterminated quoted string at position \" + start);\n    }\n",
        "begin_line": 417,
        "end_line": 444,
        "comment": "\n     * Consume a quoted string, adding it to <code>appendTo</code> if\n     * specified.\n     * \n     * @param pattern pattern to parse\n     * @param pos current parse position\n     * @param appendTo optional StringBuffer to append\n     * @param escapingOn whether to process escaped quotes\n     * @return <code>appendTo</code>\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 1.0
        },
        "num_failing_tests": 1
    },
    {
        "name": "ExtendedMessageFormat.ExtendedMessageFormat#111",
        "is_bug": false,
        "src_path": "src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java",
        "class_name": "org.apache.commons.lang.text.ExtendedMessageFormat",
        "signature": "org.apache.commons.lang.text.ExtendedMessageFormat.ExtendedMessageFormat(java.lang.String, java.util.Map)",
        "snippet": "    public ExtendedMessageFormat(String pattern, Map registry) {\n        this(pattern, Locale.getDefault(), registry);\n    }\n",
        "begin_line": 111,
        "end_line": 113,
        "comment": "\n     * Create a new ExtendedMessageFormat for the default locale.\n     * \n     * @param pattern String\n     * @param registry Registry of format factories:  Map<String, FormatFactory>\n     * @throws IllegalArgumentException in case of a bad pattern.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5773
        },
        "num_failing_tests": 1
    },
    {
        "name": "ExtendedMessageFormat.next#402",
        "is_bug": false,
        "src_path": "src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java",
        "class_name": "org.apache.commons.lang.text.ExtendedMessageFormat",
        "signature": "org.apache.commons.lang.text.ExtendedMessageFormat.next(java.text.ParsePosition)",
        "snippet": "    private ParsePosition next(ParsePosition pos) {\n        pos.setIndex(pos.getIndex() + 1);\n        return pos;\n    }\n",
        "begin_line": 402,
        "end_line": 405,
        "comment": "\n     * Convenience method to advance parse position by 1\n     * \n     * @param pos ParsePosition\n     * @return <code>pos</code>\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 1
    },
    {
        "name": "ExtendedMessageFormat.ExtendedMessageFormat#123",
        "is_bug": false,
        "src_path": "src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java",
        "class_name": "org.apache.commons.lang.text.ExtendedMessageFormat",
        "signature": "org.apache.commons.lang.text.ExtendedMessageFormat.ExtendedMessageFormat(java.lang.String, java.util.Locale, java.util.Map)",
        "snippet": "    public ExtendedMessageFormat(String pattern, Locale locale, Map registry) {\n        super(DUMMY_PATTERN);\n        setLocale(locale);\n        this.registry = registry;\n        applyPattern(pattern);\n    }\n",
        "begin_line": 123,
        "end_line": 128,
        "comment": "\n     * Create a new ExtendedMessageFormat.\n     * \n     * @param pattern String\n     * @param locale Locale\n     * @param registry Registry of format factories:  Map<String, FormatFactory>\n     * @throws IllegalArgumentException in case of a bad pattern.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.378
        },
        "num_failing_tests": 1
    }
]