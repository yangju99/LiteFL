[
    {
        "class_name": "org.apache.commons.lang.text.ExtendedMessageFormatTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/ExtendedMessageFormatTest.java",
        "signature": "org.apache.commons.lang.text.ExtendedMessageFormatTest.suite()",
        "snippet": "    public static Test suite() {\n        TestSuite suite = new TestSuite(ExtendedMessageFormatTest.class);\n        suite.setName(\"ExtendedMessageFormat Tests\");\n        return suite;\n    }\n",
        "begin_line": 56,
        "end_line": 60,
        "comment": "\n     * Return a new test suite containing this test case.\n     * \n     * @return a new test suite containing this test case\n     ",
        "child_ranges": [
            "(line 57,col 9)-(line 57,col 73)",
            "(line 58,col 9)-(line 58,col 53)",
            "(line 59,col 9)-(line 59,col 21)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.ExtendedMessageFormatTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/ExtendedMessageFormatTest.java",
        "signature": "org.apache.commons.lang.text.ExtendedMessageFormatTest.ExtendedMessageFormatTest(java.lang.String)",
        "snippet": "    public ExtendedMessageFormatTest(String name) {\n        super(name);\n    }\n",
        "begin_line": 67,
        "end_line": 69,
        "comment": "\n     * Create a new test case.\n     *\n     * @param name The name of the test\n     ",
        "child_ranges": [
            "(line 68,col 9)-(line 68,col 20)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.ExtendedMessageFormatTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/ExtendedMessageFormatTest.java",
        "signature": "org.apache.commons.lang.text.ExtendedMessageFormatTest.setUp()",
        "snippet": "    protected void setUp() throws Exception {\n        super.setUp();\n        registry.put(\"lower\", new LowerCaseFormatFactory());\n        registry.put(\"upper\", new UpperCaseFormatFactory());\n    }\n",
        "begin_line": 71,
        "end_line": 75,
        "comment": "",
        "child_ranges": [
            "(line 72,col 9)-(line 72,col 22)",
            "(line 73,col 9)-(line 73,col 60)",
            "(line 74,col 9)-(line 74,col 60)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.ExtendedMessageFormatTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/ExtendedMessageFormatTest.java",
        "signature": "org.apache.commons.lang.text.ExtendedMessageFormatTest.tearDown()",
        "snippet": "    protected void tearDown() throws Exception {\n        super.tearDown();\n    }\n",
        "begin_line": 77,
        "end_line": 79,
        "comment": "",
        "child_ranges": [
            "(line 78,col 9)-(line 78,col 25)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.ExtendedMessageFormatTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/ExtendedMessageFormatTest.java",
        "signature": "org.apache.commons.lang.text.ExtendedMessageFormatTest.testExtendedFormats()",
        "snippet": "    public void testExtendedFormats() {\n        String pattern = \"Lower: {0,lower} Upper: {1,upper}\";\n        ExtendedMessageFormat emf = new ExtendedMessageFormat(pattern, registry);\n        assertPatternsEqual(\"TOPATTERN\", pattern, emf.toPattern());\n        assertEquals(\"Lower: foo Upper: BAR\", emf.format(new Object[] {\"foo\", \"bar\"}));\n        assertEquals(\"Lower: foo Upper: BAR\", emf.format(new Object[] {\"Foo\", \"Bar\"}));\n        assertEquals(\"Lower: foo Upper: BAR\", emf.format(new Object[] {\"FOO\", \"BAR\"}));\n        assertEquals(\"Lower: foo Upper: BAR\", emf.format(new Object[] {\"FOO\", \"bar\"}));\n        assertEquals(\"Lower: foo Upper: BAR\", emf.format(new Object[] {\"foo\", \"BAR\"}));\n    }\n",
        "begin_line": 84,
        "end_line": 93,
        "comment": "\n     * Test extended formats.\n     ",
        "child_ranges": [
            "(line 85,col 9)-(line 85,col 61)",
            "(line 86,col 9)-(line 86,col 81)",
            "(line 87,col 9)-(line 87,col 67)",
            "(line 88,col 9)-(line 88,col 87)",
            "(line 89,col 9)-(line 89,col 87)",
            "(line 90,col 9)-(line 90,col 87)",
            "(line 91,col 9)-(line 91,col 87)",
            "(line 92,col 9)-(line 92,col 87)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.ExtendedMessageFormatTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/ExtendedMessageFormatTest.java",
        "signature": "org.apache.commons.lang.text.ExtendedMessageFormatTest.testEscapedQuote_LANG_477()",
        "snippet": "    public void testEscapedQuote_LANG_477() {\n        String pattern = \"it''s a {0,lower} 'test'!\";\n        ExtendedMessageFormat emf = new ExtendedMessageFormat(pattern, registry);\n        assertEquals(\"it's a dummy test!\", emf.format(new Object[] {\"DUMMY\"}));\n    }\n",
        "begin_line": 98,
        "end_line": 102,
        "comment": "\n     * Test Bug LANG-477 - out of memory error with escaped quote\n     ",
        "child_ranges": [
            "(line 99,col 9)-(line 99,col 53)",
            "(line 100,col 9)-(line 100,col 81)",
            "(line 101,col 9)-(line 101,col 79)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.ExtendedMessageFormatTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/ExtendedMessageFormatTest.java",
        "signature": "org.apache.commons.lang.text.ExtendedMessageFormatTest.testExtendedAndBuiltInFormats()",
        "snippet": "    public void testExtendedAndBuiltInFormats() {\n        Calendar cal = Calendar.getInstance();\n        cal.set(2007, Calendar.JANUARY, 23, 18, 33, 05);\n        Object[] args = new Object[] {\"John Doe\", cal.getTime(), new Double(\"12345.67\")};\n        String builtinsPattern = \"DOB: {1,date,short} Salary: {2,number,currency}\";\n        String extendedPattern = \"Name: {0,upper} \";\n        String pattern = extendedPattern + builtinsPattern;\n\n        HashSet testLocales = new HashSet();\n        testLocales.addAll(Arrays.asList(DateFormat.getAvailableLocales()));\n        testLocales.retainAll(Arrays.asList(NumberFormat.getAvailableLocales()));\n        testLocales.add(null);\n\n        for (Iterator l = testLocales.iterator(); l.hasNext();) {\n            Locale locale = (Locale) l.next();\n            MessageFormat builtins = createMessageFormat(builtinsPattern, locale);\n            String expectedPattern = extendedPattern + builtins.toPattern();;\n            DateFormat df = null;\n            NumberFormat nf = null;\n            ExtendedMessageFormat emf = null;\n            if (locale == null) {\n                df = DateFormat.getDateInstance(DateFormat.SHORT);\n                nf = NumberFormat.getCurrencyInstance();\n                emf = new ExtendedMessageFormat(pattern, registry);\n            } else {\n                df = DateFormat.getDateInstance(DateFormat.SHORT, locale);\n                nf = NumberFormat.getCurrencyInstance(locale);\n                emf = new ExtendedMessageFormat(pattern, locale, registry);\n            }\n            StringBuffer expected = new StringBuffer();\n            expected.append(\"Name: \");\n            expected.append(args[0].toString().toUpperCase());\n            expected.append(\" DOB: \");\n            expected.append(df.format(args[1]));\n            expected.append(\" Salary: \");\n            expected.append(nf.format(args[2]));\n            assertPatternsEqual(\"pattern comparison for locale \" + locale, expectedPattern, emf.toPattern());\n            assertEquals(String.valueOf(locale), expected.toString(), emf.format(args));\n        }\n    }\n",
        "begin_line": 107,
        "end_line": 146,
        "comment": "\n     * Test extended and built in formats.\n     ",
        "child_ranges": [
            "(line 108,col 9)-(line 108,col 46)",
            "(line 109,col 9)-(line 109,col 56)",
            "(line 110,col 9)-(line 110,col 89)",
            "(line 111,col 9)-(line 111,col 83)",
            "(line 112,col 9)-(line 112,col 52)",
            "(line 113,col 9)-(line 113,col 59)",
            "(line 115,col 9)-(line 115,col 44)",
            "(line 116,col 9)-(line 116,col 76)",
            "(line 117,col 9)-(line 117,col 81)",
            "(line 118,col 9)-(line 118,col 30)",
            "(line 120,col 9)-(line 145,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.ExtendedMessageFormatTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/ExtendedMessageFormatTest.java",
        "signature": "org.apache.commons.lang.text.ExtendedMessageFormatTest.testBuiltInChoiceFormat()",
        "snippet": "    public void testBuiltInChoiceFormat() {\n        Object[] values = new Number[] {new Integer(1), new Double(\"2.2\"), new Double(\"1234.5\")};\n        String choicePattern = null;\n        Locale[] availableLocales = ChoiceFormat.getAvailableLocales();\n\n        choicePattern = \"{0,choice,1#One|2#Two|3#Many {0,number}}\";\n        for (int i = 0; i < values.length; i++) {\n            checkBuiltInFormat(values[i] + \": \" + choicePattern, new Object[] {values[i]}, availableLocales);\n        }\n\n        choicePattern = \"{0,choice,1#''One''|2#\\\"Two\\\"|3#''{Many}'' {0,number}}\";\n        for (int i = 0; i < values.length; i++) {\n            checkBuiltInFormat(values[i] + \": \" + choicePattern, new Object[] {values[i]}, availableLocales);\n        }\n    }\n",
        "begin_line": 206,
        "end_line": 220,
        "comment": "\n     * Test the built in choice format.\n     ",
        "child_ranges": [
            "(line 207,col 9)-(line 207,col 97)",
            "(line 208,col 9)-(line 208,col 36)",
            "(line 209,col 9)-(line 209,col 71)",
            "(line 211,col 9)-(line 211,col 67)",
            "(line 212,col 9)-(line 214,col 9)",
            "(line 216,col 9)-(line 216,col 81)",
            "(line 217,col 9)-(line 219,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.ExtendedMessageFormatTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/ExtendedMessageFormatTest.java",
        "signature": "org.apache.commons.lang.text.ExtendedMessageFormatTest.testBuiltInDateTimeFormat()",
        "snippet": "    public void testBuiltInDateTimeFormat() {\n        Calendar cal = Calendar.getInstance();\n        cal.set(2007, Calendar.JANUARY, 23, 18, 33, 05);\n        Object[] args = new Object[] {cal.getTime()};\n        Locale[] availableLocales = DateFormat.getAvailableLocales();\n\n        checkBuiltInFormat(\"1: {0,date,short}\",    args, availableLocales);\n        checkBuiltInFormat(\"2: {0,date,medium}\",   args, availableLocales);\n        checkBuiltInFormat(\"3: {0,date,long}\",     args, availableLocales);\n        checkBuiltInFormat(\"4: {0,date,full}\",     args, availableLocales);\n        checkBuiltInFormat(\"5: {0,date,d MMM yy}\", args, availableLocales);\n        checkBuiltInFormat(\"6: {0,time,short}\",    args, availableLocales);\n        checkBuiltInFormat(\"7: {0,time,medium}\",   args, availableLocales);\n        checkBuiltInFormat(\"8: {0,time,long}\",     args, availableLocales);\n        checkBuiltInFormat(\"9: {0,time,full}\",     args, availableLocales);\n        checkBuiltInFormat(\"10: {0,time,HH:mm}\",   args, availableLocales);\n        checkBuiltInFormat(\"11: {0,date}\",         args, availableLocales);\n        checkBuiltInFormat(\"12: {0,time}\",         args, availableLocales);\n    }\n",
        "begin_line": 225,
        "end_line": 243,
        "comment": "\n     * Test the built in date/time formats\n     ",
        "child_ranges": [
            "(line 226,col 9)-(line 226,col 46)",
            "(line 227,col 9)-(line 227,col 56)",
            "(line 228,col 9)-(line 228,col 53)",
            "(line 229,col 9)-(line 229,col 69)",
            "(line 231,col 9)-(line 231,col 75)",
            "(line 232,col 9)-(line 232,col 75)",
            "(line 233,col 9)-(line 233,col 75)",
            "(line 234,col 9)-(line 234,col 75)",
            "(line 235,col 9)-(line 235,col 75)",
            "(line 236,col 9)-(line 236,col 75)",
            "(line 237,col 9)-(line 237,col 75)",
            "(line 238,col 9)-(line 238,col 75)",
            "(line 239,col 9)-(line 239,col 75)",
            "(line 240,col 9)-(line 240,col 75)",
            "(line 241,col 9)-(line 241,col 75)",
            "(line 242,col 9)-(line 242,col 75)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.ExtendedMessageFormatTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/ExtendedMessageFormatTest.java",
        "signature": "org.apache.commons.lang.text.ExtendedMessageFormatTest.testOverriddenBuiltinFormat()",
        "snippet": "    public void testOverriddenBuiltinFormat() {\n        Calendar cal = Calendar.getInstance();\n        cal.set(2007, Calendar.JANUARY, 23);\n        Object[] args = new Object[] {cal.getTime()};\n        Locale[] availableLocales = DateFormat.getAvailableLocales();\n        Map registry = Collections.singletonMap(\"date\", new OverrideShortDateFormatFactory());\n\n        //check the non-overridden builtins:\n        checkBuiltInFormat(\"1: {0,date}\", registry,          args, availableLocales);\n        checkBuiltInFormat(\"2: {0,date,medium}\", registry,   args, availableLocales);\n        checkBuiltInFormat(\"3: {0,date,long}\", registry,     args, availableLocales);\n        checkBuiltInFormat(\"4: {0,date,full}\", registry,     args, availableLocales);\n        checkBuiltInFormat(\"5: {0,date,d MMM yy}\", registry, args, availableLocales);\n\n        //check the overridden format:\n        for (int i = -1; i < availableLocales.length; i++) {\n            Locale locale = i < 0 ? null : availableLocales[i];\n            MessageFormat dateDefault = createMessageFormat(\"{0,date}\", locale);\n            String pattern = \"{0,date,short}\";\n            ExtendedMessageFormat dateShort = new ExtendedMessageFormat(pattern, locale, registry);\n            assertEquals(\"overridden date,short format\", dateDefault.format(args), dateShort.format(args));\n            assertEquals(\"overridden date,short pattern\", pattern, dateShort.toPattern());\n        }\n    }\n",
        "begin_line": 245,
        "end_line": 268,
        "comment": "",
        "child_ranges": [
            "(line 246,col 9)-(line 246,col 46)",
            "(line 247,col 9)-(line 247,col 44)",
            "(line 248,col 9)-(line 248,col 53)",
            "(line 249,col 9)-(line 249,col 69)",
            "(line 250,col 9)-(line 250,col 94)",
            "(line 253,col 9)-(line 253,col 85)",
            "(line 254,col 9)-(line 254,col 85)",
            "(line 255,col 9)-(line 255,col 85)",
            "(line 256,col 9)-(line 256,col 85)",
            "(line 257,col 9)-(line 257,col 85)",
            "(line 260,col 9)-(line 267,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.ExtendedMessageFormatTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/ExtendedMessageFormatTest.java",
        "signature": "org.apache.commons.lang.text.ExtendedMessageFormatTest.testBuiltInNumberFormat()",
        "snippet": "    public void testBuiltInNumberFormat() {\n        Object[] args = new Object[] {new Double(\"6543.21\")};\n        Locale[] availableLocales = NumberFormat.getAvailableLocales();\n        checkBuiltInFormat(\"1: {0,number}\",            args, availableLocales);\n        checkBuiltInFormat(\"2: {0,number,integer}\",    args, availableLocales);\n        checkBuiltInFormat(\"3: {0,number,currency}\",   args, availableLocales);\n        checkBuiltInFormat(\"4: {0,number,percent}\",    args, availableLocales);\n        checkBuiltInFormat(\"5: {0,number,00000.000}\",  args, availableLocales);\n    }\n",
        "begin_line": 273,
        "end_line": 281,
        "comment": "\n     * Test the built in number formats.\n     ",
        "child_ranges": [
            "(line 274,col 9)-(line 274,col 61)",
            "(line 275,col 9)-(line 275,col 71)",
            "(line 276,col 9)-(line 276,col 79)",
            "(line 277,col 9)-(line 277,col 79)",
            "(line 278,col 9)-(line 278,col 79)",
            "(line 279,col 9)-(line 279,col 79)",
            "(line 280,col 9)-(line 280,col 79)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.ExtendedMessageFormatTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/ExtendedMessageFormatTest.java",
        "signature": "org.apache.commons.lang.text.ExtendedMessageFormatTest.checkBuiltInFormat(java.lang.String, java.lang.Object[], java.util.Locale[])",
        "snippet": "    private void checkBuiltInFormat(String pattern, Object[] args, Locale[] locales) {\n        checkBuiltInFormat(pattern, null, args, locales);\n    }\n",
        "begin_line": 289,
        "end_line": 291,
        "comment": "\n     * Test a built in format for the specified Locales, plus <code>null</code> Locale.\n     * @param pattern MessageFormat pattern\n     * @param args MessageFormat arguments\n     * @param locales to test\n     ",
        "child_ranges": [
            "(line 290,col 9)-(line 290,col 57)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.ExtendedMessageFormatTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/ExtendedMessageFormatTest.java",
        "signature": "org.apache.commons.lang.text.ExtendedMessageFormatTest.checkBuiltInFormat(java.lang.String, java.util.Map, java.lang.Object[], java.util.Locale[])",
        "snippet": "    private void checkBuiltInFormat(String pattern, Map registry, Object[] args, Locale[] locales) {\n        checkBuiltInFormat(pattern, registry, args, (Locale) null);\n        for (int i = 0; i < locales.length; i++) {\n            checkBuiltInFormat(pattern, registry, args, locales[i]);\n        }\n    }\n",
        "begin_line": 300,
        "end_line": 305,
        "comment": "\n     * Test a built in format for the specified Locales, plus <code>null</code> Locale.\n     * @param pattern MessageFormat pattern\n     * @param registry FormatFactory registry to use\n     * @param args MessageFormat arguments\n     * @param locales to test\n     ",
        "child_ranges": [
            "(line 301,col 9)-(line 301,col 67)",
            "(line 302,col 9)-(line 304,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.ExtendedMessageFormatTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/ExtendedMessageFormatTest.java",
        "signature": "org.apache.commons.lang.text.ExtendedMessageFormatTest.checkBuiltInFormat(java.lang.String, java.util.Map, java.lang.Object[], java.util.Locale)",
        "snippet": "    private void checkBuiltInFormat(String pattern, Map registry, Object[] args, Locale locale) {\n        StringBuffer buffer = new StringBuffer();\n        buffer.append(\"Pattern=[\");\n        buffer.append(pattern);\n        buffer.append(\"], locale=[\");\n        buffer.append(locale);\n        buffer.append(\"]\");\n        MessageFormat mf = createMessageFormat(pattern, locale);\n        // System.out.println(buffer + \", result=[\" + mf.format(args) +\"]\");\n        ExtendedMessageFormat emf = null;\n        if (locale == null) {\n            emf = new ExtendedMessageFormat(pattern);\n        } else {\n            emf = new ExtendedMessageFormat(pattern, locale);\n        }\n        assertEquals(\"format \"    + buffer.toString(), mf.format(args), emf.format(args));\n        assertPatternsEqual(\"toPattern \" + buffer.toString(), mf.toPattern(),  emf.toPattern());\n    }\n",
        "begin_line": 315,
        "end_line": 332,
        "comment": "\n     * Create an ExtendedMessageFormat for the specified pattern and locale and check the\n     * formated output matches the expected result for the parameters.\n     * @param pattern string\n     * @param registry map\n     * @param args Object[]\n     * @param locale Locale\n     ",
        "child_ranges": [
            "(line 316,col 9)-(line 316,col 49)",
            "(line 317,col 9)-(line 317,col 35)",
            "(line 318,col 9)-(line 318,col 31)",
            "(line 319,col 9)-(line 319,col 37)",
            "(line 320,col 9)-(line 320,col 30)",
            "(line 321,col 9)-(line 321,col 27)",
            "(line 322,col 9)-(line 322,col 64)",
            "(line 324,col 9)-(line 324,col 41)",
            "(line 325,col 9)-(line 329,col 9)",
            "(line 330,col 9)-(line 330,col 90)",
            "(line 331,col 9)-(line 331,col 96)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.ExtendedMessageFormatTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/ExtendedMessageFormatTest.java",
        "signature": "org.apache.commons.lang.text.ExtendedMessageFormatTest.assertPatternsEqual(java.lang.String, java.lang.String, java.lang.String)",
        "snippet": "    private void assertPatternsEqual(String message, String expected, String actual) {\n        if (SystemUtils.isJavaVersionAtLeast(1.4f)) {\n            assertEquals(message, expected, actual);\n        }\n    }\n",
        "begin_line": 335,
        "end_line": 339,
        "comment": "can't trust what MessageFormat does with toPattern() pre 1.4:",
        "child_ranges": [
            "(line 336,col 9)-(line 338,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.ExtendedMessageFormatTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/ExtendedMessageFormatTest.java",
        "signature": "org.apache.commons.lang.text.ExtendedMessageFormatTest.createMessageFormat(java.lang.String, java.util.Locale)",
        "snippet": "    private MessageFormat createMessageFormat(String pattern, Locale locale) {\n        MessageFormat result = new MessageFormat(pattern);\n        if (locale != null) {\n            result.setLocale(locale);\n            result.applyPattern(pattern);\n        }\n        return result;\n    }\n",
        "begin_line": 347,
        "end_line": 354,
        "comment": "\n     * Replace MessageFormat(String, Locale) constructor (not available until JDK 1.4).\n     * @param pattern string\n     * @param locale Locale\n     * @return MessageFormat\n     ",
        "child_ranges": [
            "(line 348,col 9)-(line 348,col 58)",
            "(line 349,col 9)-(line 352,col 9)",
            "(line 353,col 9)-(line 353,col 22)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.ExtendedMessageFormatTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/ExtendedMessageFormatTest.java",
        "signature": "org.apache.commons.lang.text.ExtendedMessageFormatTest.LowerCaseFormat.format(java.lang.Object, java.lang.StringBuffer, java.text.FieldPosition)",
        "snippet": "        public StringBuffer format(Object obj, StringBuffer toAppendTo, FieldPosition pos) {\n            return toAppendTo.append(((String)obj).toLowerCase());\n        }\n",
        "begin_line": 362,
        "end_line": 364,
        "comment": "",
        "child_ranges": [
            "(line 363,col 13)-(line 363,col 66)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.ExtendedMessageFormatTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/ExtendedMessageFormatTest.java",
        "signature": "org.apache.commons.lang.text.ExtendedMessageFormatTest.LowerCaseFormat.parseObject(java.lang.String, java.text.ParsePosition)",
        "snippet": "        public Object parseObject(String source, ParsePosition pos) {throw new UnsupportedOperationException();}\n",
        "begin_line": 365,
        "end_line": 365,
        "comment": "",
        "child_ranges": [
            "(line 365,col 70)-(line 365,col 111)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.ExtendedMessageFormatTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/ExtendedMessageFormatTest.java",
        "signature": "org.apache.commons.lang.text.ExtendedMessageFormatTest.UpperCaseFormat.format(java.lang.Object, java.lang.StringBuffer, java.text.FieldPosition)",
        "snippet": "        public StringBuffer format(Object obj, StringBuffer toAppendTo, FieldPosition pos) {\n            return toAppendTo.append(((String)obj).toUpperCase());\n        }\n",
        "begin_line": 372,
        "end_line": 374,
        "comment": "",
        "child_ranges": [
            "(line 373,col 13)-(line 373,col 66)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.ExtendedMessageFormatTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/ExtendedMessageFormatTest.java",
        "signature": "org.apache.commons.lang.text.ExtendedMessageFormatTest.UpperCaseFormat.parseObject(java.lang.String, java.text.ParsePosition)",
        "snippet": "        public Object parseObject(String source, ParsePosition pos) {throw new UnsupportedOperationException();}\n",
        "begin_line": 375,
        "end_line": 375,
        "comment": "",
        "child_ranges": [
            "(line 375,col 70)-(line 375,col 111)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.ExtendedMessageFormatTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/ExtendedMessageFormatTest.java",
        "signature": "org.apache.commons.lang.text.ExtendedMessageFormatTest.LowerCaseFormatFactory.getFormat(java.lang.String, java.lang.String, java.util.Locale)",
        "snippet": "        public Format getFormat(String name, String arguments, Locale locale) {\n            return LOWER_INSTANCE;\n        }\n",
        "begin_line": 385,
        "end_line": 387,
        "comment": "",
        "child_ranges": [
            "(line 386,col 13)-(line 386,col 34)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.ExtendedMessageFormatTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/ExtendedMessageFormatTest.java",
        "signature": "org.apache.commons.lang.text.ExtendedMessageFormatTest.UpperCaseFormatFactory.getFormat(java.lang.String, java.lang.String, java.util.Locale)",
        "snippet": "        public Format getFormat(String name, String arguments, Locale locale) {\n            return UPPER_INSTANCE;\n        }\n",
        "begin_line": 394,
        "end_line": 396,
        "comment": "",
        "child_ranges": [
            "(line 395,col 13)-(line 395,col 34)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.ExtendedMessageFormatTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/ExtendedMessageFormatTest.java",
        "signature": "org.apache.commons.lang.text.ExtendedMessageFormatTest.OverrideShortDateFormatFactory.getFormat(java.lang.String, java.lang.String, java.util.Locale)",
        "snippet": "        public Format getFormat(String name, String arguments, Locale locale) {\n            return !\"short\".equals(arguments) ? null\n                    : locale == null ? DateFormat\n                            .getDateInstance(DateFormat.DEFAULT) : DateFormat\n                            .getDateInstance(DateFormat.DEFAULT, locale);\n        }\n",
        "begin_line": 402,
        "end_line": 407,
        "comment": "",
        "child_ranges": [
            "(line 403,col 13)-(line 406,col 73)"
        ]
    }
]