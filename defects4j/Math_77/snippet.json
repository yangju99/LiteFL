[
    {
        "name": "OpenMapRealVector.getLInfNorm#498",
        "is_bug": true,
        "src_path": "src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java",
        "class_name": "org.apache.commons.math.linear.OpenMapRealVector",
        "signature": "org.apache.commons.math.linear.OpenMapRealVector.getLInfNorm()",
        "snippet": "    public double getLInfNorm() {\n        double max = 0;\n        Iterator iter = entries.iterator();\n        while (iter.hasNext()) {\n            iter.advance();\n            max += iter.value();\n        }\n        return max;\n    }\n",
        "begin_line": 498,
        "end_line": 506,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.7071
        },
        "num_failing_tests": 1
    },
    {
        "name": "ArrayRealVector.getL1Norm#707",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math/linear/ArrayRealVector.java",
        "class_name": "org.apache.commons.math.linear.ArrayRealVector",
        "signature": "org.apache.commons.math.linear.ArrayRealVector.getL1Norm()",
        "snippet": "    @Override\n    public double getL1Norm() {\n        double sum = 0;\n        for (double a : data) {\n            sum += Math.abs(a);\n        }\n        return sum;\n    }\n",
        "begin_line": 707,
        "end_line": 714,
        "comment": " {@inheritDoc} ",
        "resolved_comments": {
            "org.apache.commons.math.linear.AbstractRealVector": " {@inheritDoc} ",
            "java.io.Serializable": null,
            "org.apache.commons.math.linear.RealVector": "\n     * Returns the L<sub>1</sub> norm of the vector.\n     * <p>The L<sub>1</sub> norm is the sum of the absolute\n     * values of elements.</p>\n     * @return norm\n     * @see #getNorm()\n     * @see #getLInfNorm()\n     * @see #getL1Distance(RealVector)\n     "
        },
        "susp": {
            "ochiai_susp": 0.7071
        },
        "num_failing_tests": 1
    },
    {
        "name": "ArrayRealVector.getLInfNorm#717",
        "is_bug": true,
        "src_path": "src/main/java/org/apache/commons/math/linear/ArrayRealVector.java",
        "class_name": "org.apache.commons.math.linear.ArrayRealVector",
        "signature": "org.apache.commons.math.linear.ArrayRealVector.getLInfNorm()",
        "snippet": "    @Override\n    public double getLInfNorm() {\n        double max = 0;\n        for (double a : data) {\n            max += Math.max(max, Math.abs(a));\n        }\n        return max;\n    }\n",
        "begin_line": 717,
        "end_line": 724,
        "comment": " {@inheritDoc} ",
        "resolved_comments": {
            "org.apache.commons.math.linear.AbstractRealVector": " {@inheritDoc} ",
            "java.io.Serializable": null,
            "org.apache.commons.math.linear.RealVector": "\n     * Returns the L<sub>&infin;</sub> norm of the vector.\n     * <p>The L<sub>&infin;</sub> norm is the max of the absolute\n     * values of elements.</p>\n     * @return norm\n     * @see #getNorm()\n     * @see #getL1Norm()\n     * @see #getLInfDistance(RealVector)\n     "
        },
        "susp": {
            "ochiai_susp": 0.7071
        },
        "num_failing_tests": 1
    },
    {
        "name": "AbstractRealVector.getNorm#209",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math/linear/AbstractRealVector.java",
        "class_name": "org.apache.commons.math.linear.AbstractRealVector",
        "signature": "org.apache.commons.math.linear.AbstractRealVector.getNorm()",
        "snippet": "    public double getNorm() {\n        double sum = 0;\n        Iterator<Entry> it = sparseIterator();\n        Entry e;\n        while (it.hasNext() && (e = it.next()) != null) {\n            final double value = e.getValue();\n            sum += value * value;\n        }\n        return Math.sqrt(sum);\n    }\n",
        "begin_line": 209,
        "end_line": 218,
        "comment": " {@inheritDoc} ",
        "resolved_comments": {
            "org.apache.commons.math.linear.RealVector": "\n     * Returns the L<sub>2</sub> norm of the vector.\n     * <p>The L<sub>2</sub> norm is the root of the sum of\n     * the squared elements.</p>\n     * @return norm\n     * @see #getL1Norm()\n     * @see #getLInfNorm()\n     * @see #getDistance(RealVector)\n     "
        },
        "susp": {
            "ochiai_susp": 0.7071
        },
        "num_failing_tests": 1
    },
    {
        "name": "AbstractRealVector.getL1Norm#221",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math/linear/AbstractRealVector.java",
        "class_name": "org.apache.commons.math.linear.AbstractRealVector",
        "signature": "org.apache.commons.math.linear.AbstractRealVector.getL1Norm()",
        "snippet": "    public double getL1Norm() {\n        double norm = 0;\n        Iterator<Entry> it = sparseIterator();\n        Entry e;\n        while (it.hasNext() && (e = it.next()) != null) {\n            norm += Math.abs(e.getValue());\n        }\n        return norm;\n    }\n",
        "begin_line": 221,
        "end_line": 229,
        "comment": " {@inheritDoc} ",
        "resolved_comments": {
            "org.apache.commons.math.linear.RealVector": "\n     * Returns the L<sub>1</sub> norm of the vector.\n     * <p>The L<sub>1</sub> norm is the sum of the absolute\n     * values of elements.</p>\n     * @return norm\n     * @see #getNorm()\n     * @see #getLInfNorm()\n     * @see #getL1Distance(RealVector)\n     "
        },
        "susp": {
            "ochiai_susp": 0.7071
        },
        "num_failing_tests": 1
    },
    {
        "name": "OpenMapRealVector.OpenMapSparseIterator#863",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java",
        "class_name": "org.apache.commons.math.linear.OpenMapRealVector",
        "signature": "org.apache.commons.math.linear.OpenMapRealVector.OpenMapSparseIterator.OpenMapSparseIterator()",
        "snippet": "        protected OpenMapSparseIterator() {\n            iter = entries.iterator();\n            current = new OpenMapEntry(iter);\n        }\n",
        "begin_line": 863,
        "end_line": 866,
        "comment": " Simple constructor. ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 1
    },
    {
        "name": "OpenMapRealVector.hasNext#869",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java",
        "class_name": "org.apache.commons.math.linear.OpenMapRealVector",
        "signature": "org.apache.commons.math.linear.OpenMapRealVector.OpenMapSparseIterator.hasNext()",
        "snippet": "        public boolean hasNext() {\n            return iter.hasNext();\n        }\n",
        "begin_line": 869,
        "end_line": 871,
        "comment": " {@inheritDoc} ",
        "resolved_comments": {
            "org.apache.commons.math.linear.SparseRealVector": null,
            "org.apache.commons.math.linear.AbstractRealVector": " {@inheritDoc} ",
            "java.io.Serializable": null,
            "java.util.Iterator": null,
            "org.apache.commons.math.linear.RealVector": null
        },
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 1
    },
    {
        "name": "OpenMapRealVector.next#874",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java",
        "class_name": "org.apache.commons.math.linear.OpenMapRealVector",
        "signature": "org.apache.commons.math.linear.OpenMapRealVector.OpenMapSparseIterator.next()",
        "snippet": "        public Entry next() {\n            iter.advance();\n            return current;\n        }\n",
        "begin_line": 874,
        "end_line": 877,
        "comment": " {@inheritDoc} ",
        "resolved_comments": {
            "org.apache.commons.math.linear.SparseRealVector": null,
            "org.apache.commons.math.linear.AbstractRealVector": " {@inheritDoc} ",
            "java.io.Serializable": null,
            "java.util.Iterator": null,
            "org.apache.commons.math.linear.RealVector": null
        },
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 1
    },
    {
        "name": "OpenMapRealVector.OpenMapEntry#825",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java",
        "class_name": "org.apache.commons.math.linear.OpenMapRealVector",
        "signature": "org.apache.commons.math.linear.OpenMapRealVector.OpenMapEntry.OpenMapEntry(org.apache.commons.math.util.OpenIntToDoubleHashMap.Iterator)",
        "snippet": "        protected OpenMapEntry(Iterator iter) {\n            this.iter = iter;\n        }\n",
        "begin_line": 825,
        "end_line": 827,
        "comment": " Build an entry from an iterator point to an element.\n         * @param iter iterator pointing to the entry\n         ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 1
    },
    {
        "name": "OpenMapRealVector.getValue#830",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java",
        "class_name": "org.apache.commons.math.linear.OpenMapRealVector",
        "signature": "org.apache.commons.math.linear.OpenMapRealVector.OpenMapEntry.getValue()",
        "snippet": "        @Override\n        public double getValue() {\n            return iter.value();\n        }\n",
        "begin_line": 830,
        "end_line": 833,
        "comment": " {@inheritDoc} ",
        "resolved_comments": {
            "org.apache.commons.math.linear.SparseRealVector": null,
            "org.apache.commons.math.linear.AbstractRealVector": " {@inheritDoc} ",
            "java.io.Serializable": null,
            "org.apache.commons.math.linear.RealVector.Entry": null,
            "org.apache.commons.math.linear.RealVector": " Get the value of the entry.\n         * @return value of the entry\n         "
        },
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 1
    },
    {
        "name": "OpenMapRealVector.sparseIterator#808",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java",
        "class_name": "org.apache.commons.math.linear.OpenMapRealVector",
        "signature": "org.apache.commons.math.linear.OpenMapRealVector.sparseIterator()",
        "snippet": "    public java.util.Iterator<Entry> sparseIterator() {\n        return new OpenMapSparseIterator();\n    }\n",
        "begin_line": 808,
        "end_line": 810,
        "comment": " {@inheritDoc} ",
        "resolved_comments": {
            "org.apache.commons.math.linear.SparseRealVector": null,
            "org.apache.commons.math.linear.AbstractRealVector": " {@inheritDoc} ",
            "java.io.Serializable": null,
            "org.apache.commons.math.linear.RealVector": "\n     * Specialized implementations may choose to not iterate over all dimensions, either because those values are\n     * unset, or are equal to defaultValue(), or are small enough to be ignored for the purposes of iteration.\n     * No guarantees are made about order of iteration.\n     * In dense implementations, this method will often delegate to {@see #iterator() }\n     * @return a sparse iterator\n     "
        },
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 1
    },
    {
        "name": "OpenMapRealVector.OpenMapRealVector#116",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java",
        "class_name": "org.apache.commons.math.linear.OpenMapRealVector",
        "signature": "org.apache.commons.math.linear.OpenMapRealVector.OpenMapRealVector(double[])",
        "snippet": "    public OpenMapRealVector(double[] values) {\n        this(values, DEFAULT_ZERO_TOLERANCE);\n    }\n",
        "begin_line": 116,
        "end_line": 118,
        "comment": "\n     * Create from a double array.\n     * Only non-zero entries will be stored\n     * @param values The set of values to create from\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2673
        },
        "num_failing_tests": 1
    },
    {
        "name": "OpenMapRealVector.OpenMapRealVector#126",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java",
        "class_name": "org.apache.commons.math.linear.OpenMapRealVector",
        "signature": "org.apache.commons.math.linear.OpenMapRealVector.OpenMapRealVector(double[], double)",
        "snippet": "    public OpenMapRealVector(double[] values, double epsilon) {\n        virtualSize = values.length;\n        entries = new OpenIntToDoubleHashMap(0.0);\n        this.epsilon = epsilon;\n        for (int key = 0; key < values.length; key++) {\n            double value = values[key];\n            if (!isDefaultValue(value)) {\n                entries.put(key, value);\n            }\n        }\n    }\n",
        "begin_line": 126,
        "end_line": 136,
        "comment": "\n     * Create from a double array, specifying zero tolerance.\n     * Only non-zero entries will be stored\n     * @param values The set of values to create from\n     * @param epsilon The tolerance for having a value considered zero\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2673
        },
        "num_failing_tests": 1
    },
    {
        "name": "OpenMapRealVector.isDefaultValue#204",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java",
        "class_name": "org.apache.commons.math.linear.OpenMapRealVector",
        "signature": "org.apache.commons.math.linear.OpenMapRealVector.isDefaultValue(double)",
        "snippet": "    protected boolean isDefaultValue(double value) {\n        return Math.abs(value) < epsilon;\n    }\n",
        "begin_line": 204,
        "end_line": 206,
        "comment": "\n     * Determine if this value is within epsilon of zero.\n     * @param value The value to test\n     * @return <code>true</code> if this value is within epsilon to zero, <code>false</code> otherwise\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2673
        },
        "num_failing_tests": 1
    },
    {
        "name": "ArrayRealVector.getNorm#697",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math/linear/ArrayRealVector.java",
        "class_name": "org.apache.commons.math.linear.ArrayRealVector",
        "signature": "org.apache.commons.math.linear.ArrayRealVector.getNorm()",
        "snippet": "    @Override\n    public double getNorm() {\n        double sum = 0;\n        for (double a : data) {\n            sum += a * a;\n        }\n        return Math.sqrt(sum);\n    }\n",
        "begin_line": 697,
        "end_line": 704,
        "comment": " {@inheritDoc} ",
        "resolved_comments": {
            "org.apache.commons.math.linear.AbstractRealVector": " {@inheritDoc} ",
            "java.io.Serializable": null,
            "org.apache.commons.math.linear.RealVector": "\n     * Returns the L<sub>2</sub> norm of the vector.\n     * <p>The L<sub>2</sub> norm is the root of the sum of\n     * the squared elements.</p>\n     * @return norm\n     * @see #getL1Norm()\n     * @see #getLInfNorm()\n     * @see #getDistance(RealVector)\n     "
        },
        "susp": {
            "ochiai_susp": 0.2041
        },
        "num_failing_tests": 1
    },
    {
        "name": "OpenIntToDoubleHashMap.Iterator#505",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java",
        "class_name": "org.apache.commons.math.util.OpenIntToDoubleHashMap",
        "signature": "org.apache.commons.math.util.OpenIntToDoubleHashMap.Iterator.Iterator()",
        "snippet": "        private Iterator() {\n\n            // preserve the modification count of the map to detect concurrent modifications later\n            referenceCount = count;\n\n            // initialize current index\n            next = -1;\n            try {\n                advance();\n            } catch (NoSuchElementException nsee) {\n                // ignored\n            }\n\n        }\n",
        "begin_line": 505,
        "end_line": 518,
        "comment": "\n         * Simple constructor.\n         ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.189
        },
        "num_failing_tests": 1
    },
    {
        "name": "OpenIntToDoubleHashMap.hasNext#524",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java",
        "class_name": "org.apache.commons.math.util.OpenIntToDoubleHashMap",
        "signature": "org.apache.commons.math.util.OpenIntToDoubleHashMap.Iterator.hasNext()",
        "snippet": "        public boolean hasNext() {\n            return next >= 0;\n        }\n",
        "begin_line": 524,
        "end_line": 526,
        "comment": "\n         * Check if there is a next element in the map.\n         * @return true if there is a next element\n         ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.189
        },
        "num_failing_tests": 1
    },
    {
        "name": "OpenIntToDoubleHashMap.value#552",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java",
        "class_name": "org.apache.commons.math.util.OpenIntToDoubleHashMap",
        "signature": "org.apache.commons.math.util.OpenIntToDoubleHashMap.Iterator.value()",
        "snippet": "        public double value()\n            throws ConcurrentModificationException, NoSuchElementException {\n            if (referenceCount != count) {\n                throw MathRuntimeException.createConcurrentModificationException(\n                      CONCURRENT_MODIFICATION_MESSAGE);\n            }\n            if (current < 0) {\n                throw MathRuntimeException.createNoSuchElementException(EXHAUSTED_ITERATOR_MESSAGE);\n            }\n            return values[current];\n        }\n",
        "begin_line": 552,
        "end_line": 562,
        "comment": "\n         * Get the value of current entry.\n         * @return value of current entry\n         * @exception ConcurrentModificationException if the map is modified during iteration\n         * @exception NoSuchElementException if there is no element left in the map\n         ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.189
        },
        "num_failing_tests": 1
    },
    {
        "name": "OpenIntToDoubleHashMap.advance#569",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java",
        "class_name": "org.apache.commons.math.util.OpenIntToDoubleHashMap",
        "signature": "org.apache.commons.math.util.OpenIntToDoubleHashMap.Iterator.advance()",
        "snippet": "        public void advance()\n            throws ConcurrentModificationException, NoSuchElementException {\n\n            if (referenceCount != count) {\n                throw MathRuntimeException.createConcurrentModificationException(\n                      CONCURRENT_MODIFICATION_MESSAGE);\n            }\n\n            // advance on step\n            current = next;\n\n            // prepare next step\n            try {\n                while (states[++next] != FULL) {\n                    // nothing to do\n                }\n            } catch (ArrayIndexOutOfBoundsException e) {\n                next = -2;\n                if (current < 0) {\n                    throw MathRuntimeException.createNoSuchElementException(EXHAUSTED_ITERATOR_MESSAGE);\n                }\n            }\n\n        }\n",
        "begin_line": 569,
        "end_line": 592,
        "comment": "\n         * Advance iterator one step further.\n         * @exception ConcurrentModificationException if the map is modified during iteration\n         * @exception NoSuchElementException if there is no element left in the map\n         ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.189
        },
        "num_failing_tests": 1
    },
    {
        "name": "OpenIntToDoubleHashMap.iterator#247",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java",
        "class_name": "org.apache.commons.math.util.OpenIntToDoubleHashMap",
        "signature": "org.apache.commons.math.util.OpenIntToDoubleHashMap.iterator()",
        "snippet": "    public Iterator iterator() {\n        return new Iterator();\n    }\n",
        "begin_line": 247,
        "end_line": 249,
        "comment": "\n     * Get an iterator over map elements.\n     * <p>The specialized iterators returned are fail-fast: they throw a\n     * <code>ConcurrentModificationException</code> when they detect the map\n     * has been modified during iteration.</p>\n     * @return iterator over the map elements\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.189
        },
        "num_failing_tests": 1
    },
    {
        "name": "OpenIntToDoubleHashMap.OpenIntToDoubleHashMap#109",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java",
        "class_name": "org.apache.commons.math.util.OpenIntToDoubleHashMap",
        "signature": "org.apache.commons.math.util.OpenIntToDoubleHashMap.OpenIntToDoubleHashMap(double)",
        "snippet": "    public OpenIntToDoubleHashMap(final double missingEntries) {\n        this(DEFAULT_EXPECTED_SIZE, missingEntries);\n    }\n",
        "begin_line": 109,
        "end_line": 111,
        "comment": "\n     * Build an empty map with default size\n     * @param missingEntries value to return when a missing entry is fetched\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1213
        },
        "num_failing_tests": 1
    },
    {
        "name": "OpenIntToDoubleHashMap.OpenIntToDoubleHashMap#126",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java",
        "class_name": "org.apache.commons.math.util.OpenIntToDoubleHashMap",
        "signature": "org.apache.commons.math.util.OpenIntToDoubleHashMap.OpenIntToDoubleHashMap(int, double)",
        "snippet": "    public OpenIntToDoubleHashMap(final int expectedSize,\n                                  final double missingEntries) {\n        final int capacity = computeCapacity(expectedSize);\n        keys   = new int[capacity];\n        values = new double[capacity];\n        states = new byte[capacity];\n        this.missingEntries = missingEntries;\n        mask   = capacity - 1;\n    }\n",
        "begin_line": 126,
        "end_line": 134,
        "comment": "\n     * Build an empty map with specified size.\n     * @param expectedSize expected number of elements in the map\n     * @param missingEntries value to return when a missing entry is fetched\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1213
        },
        "num_failing_tests": 1
    },
    {
        "name": "OpenIntToDoubleHashMap.computeCapacity#159",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java",
        "class_name": "org.apache.commons.math.util.OpenIntToDoubleHashMap",
        "signature": "org.apache.commons.math.util.OpenIntToDoubleHashMap.computeCapacity(int)",
        "snippet": "    private static int computeCapacity(final int expectedSize) {\n        if (expectedSize == 0) {\n            return 1;\n        }\n        final int capacity   = (int) Math.ceil(expectedSize / LOAD_FACTOR);\n        final int powerOfTwo = Integer.highestOneBit(capacity);\n        if (powerOfTwo == capacity) {\n            return capacity;\n        }\n        return nextPowerOfTwo(capacity);\n    }\n",
        "begin_line": 159,
        "end_line": 169,
        "comment": "\n     * Compute the capacity needed for a given size.\n     * @param expectedSize expected size of the map\n     * @return capacity to use for the specified size\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1213
        },
        "num_failing_tests": 1
    },
    {
        "name": "OpenIntToDoubleHashMap.findInsertionIndex#265",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java",
        "class_name": "org.apache.commons.math.util.OpenIntToDoubleHashMap",
        "signature": "org.apache.commons.math.util.OpenIntToDoubleHashMap.findInsertionIndex(int)",
        "snippet": "    private int findInsertionIndex(final int key) {\n        return findInsertionIndex(keys, states, key, mask);\n    }\n",
        "begin_line": 265,
        "end_line": 267,
        "comment": "\n     * Find the index at which a key should be inserted\n     * @param key key to lookup\n     * @return index at which key should be inserted\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1213
        },
        "num_failing_tests": 1
    },
    {
        "name": "OpenIntToDoubleHashMap.findInsertionIndex#277",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java",
        "class_name": "org.apache.commons.math.util.OpenIntToDoubleHashMap",
        "signature": "org.apache.commons.math.util.OpenIntToDoubleHashMap.findInsertionIndex(int[], byte[], int, int)",
        "snippet": "    private static int findInsertionIndex(final int[] keys, final byte[] states,\n                                          final int key, final int mask) {\n        final int hash = hashOf(key);\n        int index = hash & mask;\n        if (states[index] == FREE) {\n            return index;\n        } else if (states[index] == FULL && keys[index] == key) {\n            return changeIndexSign(index);\n        }\n\n        int perturb = perturb(hash);\n        int j = index;\n        if (states[index] == FULL) {\n            while (true) {\n                j = probe(perturb, j);\n                index = j & mask;\n                perturb >>= PERTURB_SHIFT;\n\n                if (states[index] != FULL || keys[index] == key) {\n                    break;\n                }\n            }\n        }\n\n        if (states[index] == FREE) {\n            return index;\n        } else if (states[index] == FULL) {\n            // due to the loop exit condition,\n            // if (states[index] == FULL) then keys[index] == key\n            return changeIndexSign(index);\n        }\n\n        final int firstRemoved = index;\n        while (true) {\n            j = probe(perturb, j);\n            index = j & mask;\n\n            if (states[index] == FREE) {\n                return firstRemoved;\n            } else if (states[index] == FULL && keys[index] == key) {\n                return changeIndexSign(index);\n            }\n\n            perturb >>= PERTURB_SHIFT;\n\n        }\n\n    }\n",
        "begin_line": 277,
        "end_line": 324,
        "comment": "\n     * Find the index at which a key should be inserted\n     * @param keys keys table\n     * @param states states table\n     * @param key key to lookup\n     * @param mask bit mask for hash values\n     * @return index at which key should be inserted\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1213
        },
        "num_failing_tests": 1
    },
    {
        "name": "OpenIntToDoubleHashMap.put#416",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java",
        "class_name": "org.apache.commons.math.util.OpenIntToDoubleHashMap",
        "signature": "org.apache.commons.math.util.OpenIntToDoubleHashMap.put(int, double)",
        "snippet": "    public double put(final int key, final double value) {\n        int index = findInsertionIndex(key);\n        double previous = missingEntries;\n        boolean newMapping = true;\n        if (index < 0) {\n            index = changeIndexSign(index);\n            previous = values[index];\n            newMapping = false;\n        }\n        keys[index]   = key;\n        states[index] = FULL;\n        values[index] = value;\n        if (newMapping) {\n            ++size;\n            if (shouldGrowTable()) {\n                growTable();\n            }\n            ++count;\n        }\n        return previous;\n\n    }\n",
        "begin_line": 416,
        "end_line": 437,
        "comment": "\n     * Put a value associated with a key in the map.\n     * @param key key to which value is associated\n     * @param value value to put in the map\n     * @return previous value associated with the key\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1213
        },
        "num_failing_tests": 1
    },
    {
        "name": "OpenIntToDoubleHashMap.shouldGrowTable#475",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java",
        "class_name": "org.apache.commons.math.util.OpenIntToDoubleHashMap",
        "signature": "org.apache.commons.math.util.OpenIntToDoubleHashMap.shouldGrowTable()",
        "snippet": "    private boolean shouldGrowTable() {\n        return size > (mask + 1) * LOAD_FACTOR;\n    }\n",
        "begin_line": 475,
        "end_line": 477,
        "comment": "\n     * Check if tables should grow due to increased size.\n     * @return true if  tables should grow\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1213
        },
        "num_failing_tests": 1
    },
    {
        "name": "OpenIntToDoubleHashMap.hashOf#484",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java",
        "class_name": "org.apache.commons.math.util.OpenIntToDoubleHashMap",
        "signature": "org.apache.commons.math.util.OpenIntToDoubleHashMap.hashOf(int)",
        "snippet": "    private static int hashOf(final int key) {\n        final int h = key ^ ((key >>> 20) ^ (key >>> 12));\n        return h ^ (h >>> 7) ^ (h >>> 4);\n    }\n",
        "begin_line": 484,
        "end_line": 487,
        "comment": "\n     * Compute the hash value of a key\n     * @param key key to hash\n     * @return hash value of the key\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1213
        },
        "num_failing_tests": 1
    },
    {
        "name": "ArrayRealVector.ArrayRealVector#82",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math/linear/ArrayRealVector.java",
        "class_name": "org.apache.commons.math.linear.ArrayRealVector",
        "signature": "org.apache.commons.math.linear.ArrayRealVector.ArrayRealVector(double[])",
        "snippet": "    public ArrayRealVector(double[] d) {\n        data = d.clone();\n    }\n",
        "begin_line": 82,
        "end_line": 84,
        "comment": "\n     * Construct a vector from an array, copying the input array.\n     * @param d array of doubles.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0638
        },
        "num_failing_tests": 1
    },
    {
        "name": "RealVectorFormat.getInstance#172",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math/linear/RealVectorFormat.java",
        "class_name": "org.apache.commons.math.linear.RealVectorFormat",
        "signature": "org.apache.commons.math.linear.RealVectorFormat.getInstance()",
        "snippet": "    public static RealVectorFormat getInstance() {\n        return getInstance(Locale.getDefault());\n    }\n",
        "begin_line": 172,
        "end_line": 174,
        "comment": "\n     * Returns the default real vector format for the current locale.\n     * @return the default real vector format.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0541
        },
        "num_failing_tests": 1
    },
    {
        "name": "CompositeFormat.getDefaultNumberFormat#52",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math/util/CompositeFormat.java",
        "class_name": "org.apache.commons.math.util.CompositeFormat",
        "signature": "org.apache.commons.math.util.CompositeFormat.getDefaultNumberFormat(java.util.Locale)",
        "snippet": "    protected static NumberFormat getDefaultNumberFormat(final Locale locale) {\n        final NumberFormat nf = NumberFormat.getInstance(locale);\n        nf.setMaximumFractionDigits(2);\n        return nf;\n    }\n",
        "begin_line": 52,
        "end_line": 56,
        "comment": "\n     * Create a default number format.  The default number format is based on\n     * {@link NumberFormat#getInstance(java.util.Locale)} with the only\n     * customizing that the maximum number of fraction digits is set to 2.\n     * @param locale the specific locale used by the format.\n     * @return the default number format specific to the given locale.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0523
        },
        "num_failing_tests": 1
    },
    {
        "name": "RealVectorFormat.RealVectorFormat#93",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math/linear/RealVectorFormat.java",
        "class_name": "org.apache.commons.math.linear.RealVectorFormat",
        "signature": "org.apache.commons.math.linear.RealVectorFormat.RealVectorFormat(java.text.NumberFormat)",
        "snippet": "    public RealVectorFormat(final NumberFormat format) {\n        this(DEFAULT_PREFIX, DEFAULT_SUFFIX, DEFAULT_SEPARATOR, format);\n    }\n",
        "begin_line": 93,
        "end_line": 95,
        "comment": "\n     * Create an instance with a custom number format for components.\n     * @param format the custom format for components.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0523
        },
        "num_failing_tests": 1
    },
    {
        "name": "RealVectorFormat.RealVectorFormat#116",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math/linear/RealVectorFormat.java",
        "class_name": "org.apache.commons.math.linear.RealVectorFormat",
        "signature": "org.apache.commons.math.linear.RealVectorFormat.RealVectorFormat(java.lang.String, java.lang.String, java.lang.String, java.text.NumberFormat)",
        "snippet": "    public RealVectorFormat(final String prefix, final String suffix,\n                            final String separator, final NumberFormat format) {\n        this.prefix      = prefix;\n        this.suffix      = suffix;\n        this.separator   = separator;\n        trimmedPrefix    = prefix.trim();\n        trimmedSuffix    = suffix.trim();\n        trimmedSeparator = separator.trim();\n        this.format      = format;\n    }\n",
        "begin_line": 116,
        "end_line": 125,
        "comment": "\n     * Create an instance with custom prefix, suffix, separator and format\n     * for components.\n     * @param prefix prefix to use instead of the default \"{\"\n     * @param suffix suffix to use instead of the default \"}\"\n     * @param separator separator to use instead of the default \"; \"\n     * @param format the custom format for components.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0523
        },
        "num_failing_tests": 1
    },
    {
        "name": "RealVectorFormat.getInstance#181",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math/linear/RealVectorFormat.java",
        "class_name": "org.apache.commons.math.linear.RealVectorFormat",
        "signature": "org.apache.commons.math.linear.RealVectorFormat.getInstance(java.util.Locale)",
        "snippet": "    public static RealVectorFormat getInstance(final Locale locale) {\n        return new RealVectorFormat(getDefaultNumberFormat(locale));\n    }\n",
        "begin_line": 181,
        "end_line": 183,
        "comment": "\n     * Returns the default real vector format for the given locale.\n     * @param locale the specific locale used by the format.\n     * @return the real vector format specific to the given locale.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0523
        },
        "num_failing_tests": 1
    }
]