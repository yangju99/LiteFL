[
    {
        "class_name": "org.apache.commons.math.linear.ArrayRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java",
        "signature": "org.apache.commons.math.linear.ArrayRealVectorTest.RealVectorTestImpl.RealVectorTestImpl(double[])",
        "snippet": "        public RealVectorTestImpl(double[] d) {\n            data = d.clone();\n        }\n",
        "begin_line": 62,
        "end_line": 64,
        "comment": "",
        "child_ranges": [
            "(line 63,col 13)-(line 63,col 29)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.ArrayRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java",
        "signature": "org.apache.commons.math.linear.ArrayRealVectorTest.RealVectorTestImpl.unsupported()",
        "snippet": "        private UnsupportedOperationException unsupported() {\n            return new UnsupportedOperationException(\"Not supported, unneeded for test purposes\");\n        }\n",
        "begin_line": 66,
        "end_line": 68,
        "comment": "",
        "child_ranges": [
            "(line 67,col 13)-(line 67,col 98)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.ArrayRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java",
        "signature": "org.apache.commons.math.linear.ArrayRealVectorTest.RealVectorTestImpl.map(org.apache.commons.math.analysis.UnivariateRealFunction)",
        "snippet": "        public RealVector map(UnivariateRealFunction function) throws FunctionEvaluationException {\n            throw unsupported();\n        }\n",
        "begin_line": 70,
        "end_line": 72,
        "comment": "",
        "child_ranges": [
            "(line 71,col 13)-(line 71,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.ArrayRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java",
        "signature": "org.apache.commons.math.linear.ArrayRealVectorTest.RealVectorTestImpl.mapToSelf(org.apache.commons.math.analysis.UnivariateRealFunction)",
        "snippet": "        public RealVector mapToSelf(UnivariateRealFunction function) throws FunctionEvaluationException {\n            throw unsupported();\n        }\n",
        "begin_line": 74,
        "end_line": 76,
        "comment": "",
        "child_ranges": [
            "(line 75,col 13)-(line 75,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.ArrayRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java",
        "signature": "org.apache.commons.math.linear.ArrayRealVectorTest.RealVectorTestImpl.iterator()",
        "snippet": "        public Iterator<Entry> iterator() {\n            return new Iterator<Entry>() {\n                int i = 0;\n                public boolean hasNext() {\n                    return i<data.length;\n                }\n                public Entry next() {\n                    final int j = i++;\n                    Entry e = new Entry() {\n                        public double getValue() {\n                            return data[j];\n                        }\n                        public void setValue(double newValue) {\n                            data[j] = newValue;\n                        }\n                    };\n                    e.setIndex(j);\n                    return e;\n                }\n                public void remove() { }\n            };\n        }\n",
        "begin_line": 78,
        "end_line": 99,
        "comment": "",
        "child_ranges": [
            "(line 79,col 13)-(line 98,col 14)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.ArrayRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java",
        "signature": "org.apache.commons.math.linear.ArrayRealVectorTest.RealVectorTestImpl.Anonymous-a67f6971-5acd-40f1-a420-d4b51db77143.hasNext()",
        "snippet": "                public boolean hasNext() {\n                    return i<data.length;\n                }\n",
        "begin_line": 81,
        "end_line": 83,
        "comment": "",
        "child_ranges": [
            "(line 82,col 21)-(line 82,col 41)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.ArrayRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java",
        "signature": "org.apache.commons.math.linear.ArrayRealVectorTest.RealVectorTestImpl.Anonymous-93d77b9e-5130-4783-9da0-2c6c881d0bd7.next()",
        "snippet": "                public Entry next() {\n                    final int j = i++;\n                    Entry e = new Entry() {\n                        public double getValue() {\n                            return data[j];\n                        }\n                        public void setValue(double newValue) {\n                            data[j] = newValue;\n                        }\n                    };\n                    e.setIndex(j);\n                    return e;\n                }\n",
        "begin_line": 84,
        "end_line": 96,
        "comment": "",
        "child_ranges": [
            "(line 85,col 21)-(line 85,col 38)",
            "(line 86,col 21)-(line 93,col 22)",
            "(line 94,col 21)-(line 94,col 34)",
            "(line 95,col 21)-(line 95,col 29)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.ArrayRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java",
        "signature": "org.apache.commons.math.linear.ArrayRealVectorTest.RealVectorTestImpl.Anonymous-bc05325c-6538-4013-beb9-abdfee807995.getValue()",
        "snippet": "                        public double getValue() {\n                            return data[j];\n                        }\n",
        "begin_line": 87,
        "end_line": 89,
        "comment": "",
        "child_ranges": [
            "(line 88,col 29)-(line 88,col 43)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.ArrayRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java",
        "signature": "org.apache.commons.math.linear.ArrayRealVectorTest.RealVectorTestImpl.Anonymous-08b7d1b6-6142-4c6e-9c55-467d75ab5a7e.setValue(double)",
        "snippet": "                        public void setValue(double newValue) {\n                            data[j] = newValue;\n                        }\n",
        "begin_line": 90,
        "end_line": 92,
        "comment": "",
        "child_ranges": [
            "(line 91,col 29)-(line 91,col 47)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.ArrayRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java",
        "signature": "org.apache.commons.math.linear.ArrayRealVectorTest.RealVectorTestImpl.Anonymous-b10a4ae1-f7b2-4817-bc51-1ea5060c3f4f.remove()",
        "snippet": "                public void remove() { }\n",
        "begin_line": 97,
        "end_line": 97,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.apache.commons.math.linear.ArrayRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java",
        "signature": "org.apache.commons.math.linear.ArrayRealVectorTest.RealVectorTestImpl.sparseIterator()",
        "snippet": "        public Iterator<Entry> sparseIterator() {\n            return iterator();\n        }\n",
        "begin_line": 101,
        "end_line": 103,
        "comment": "",
        "child_ranges": [
            "(line 102,col 13)-(line 102,col 30)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.ArrayRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java",
        "signature": "org.apache.commons.math.linear.ArrayRealVectorTest.RealVectorTestImpl.copy()",
        "snippet": "        public RealVector copy() {\n            throw unsupported();\n        }\n",
        "begin_line": 105,
        "end_line": 107,
        "comment": "",
        "child_ranges": [
            "(line 106,col 13)-(line 106,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.ArrayRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java",
        "signature": "org.apache.commons.math.linear.ArrayRealVectorTest.RealVectorTestImpl.add(org.apache.commons.math.linear.RealVector)",
        "snippet": "        public RealVector add(RealVector v) throws IllegalArgumentException {\n            throw unsupported();\n        }\n",
        "begin_line": 109,
        "end_line": 111,
        "comment": "",
        "child_ranges": [
            "(line 110,col 13)-(line 110,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.ArrayRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java",
        "signature": "org.apache.commons.math.linear.ArrayRealVectorTest.RealVectorTestImpl.add(double[])",
        "snippet": "        public RealVector add(double[] v) throws IllegalArgumentException {\n            throw unsupported();\n        }\n",
        "begin_line": 113,
        "end_line": 115,
        "comment": "",
        "child_ranges": [
            "(line 114,col 13)-(line 114,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.ArrayRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java",
        "signature": "org.apache.commons.math.linear.ArrayRealVectorTest.RealVectorTestImpl.subtract(org.apache.commons.math.linear.RealVector)",
        "snippet": "        public RealVector subtract(RealVector v) throws IllegalArgumentException {\n            throw unsupported();\n        }\n",
        "begin_line": 117,
        "end_line": 119,
        "comment": "",
        "child_ranges": [
            "(line 118,col 13)-(line 118,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.ArrayRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java",
        "signature": "org.apache.commons.math.linear.ArrayRealVectorTest.RealVectorTestImpl.subtract(double[])",
        "snippet": "        public RealVector subtract(double[] v) throws IllegalArgumentException {\n            throw unsupported();\n        }\n",
        "begin_line": 121,
        "end_line": 123,
        "comment": "",
        "child_ranges": [
            "(line 122,col 13)-(line 122,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.ArrayRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java",
        "signature": "org.apache.commons.math.linear.ArrayRealVectorTest.RealVectorTestImpl.mapAdd(double)",
        "snippet": "        public RealVector mapAdd(double d) {\n            throw unsupported();\n        }\n",
        "begin_line": 125,
        "end_line": 127,
        "comment": "",
        "child_ranges": [
            "(line 126,col 13)-(line 126,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.ArrayRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java",
        "signature": "org.apache.commons.math.linear.ArrayRealVectorTest.RealVectorTestImpl.mapAddToSelf(double)",
        "snippet": "        public RealVector mapAddToSelf(double d) {\n            throw unsupported();\n        }\n",
        "begin_line": 129,
        "end_line": 131,
        "comment": "",
        "child_ranges": [
            "(line 130,col 13)-(line 130,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.ArrayRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java",
        "signature": "org.apache.commons.math.linear.ArrayRealVectorTest.RealVectorTestImpl.mapSubtract(double)",
        "snippet": "        public RealVector mapSubtract(double d) {\n            throw unsupported();\n        }\n",
        "begin_line": 133,
        "end_line": 135,
        "comment": "",
        "child_ranges": [
            "(line 134,col 13)-(line 134,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.ArrayRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java",
        "signature": "org.apache.commons.math.linear.ArrayRealVectorTest.RealVectorTestImpl.mapSubtractToSelf(double)",
        "snippet": "        public RealVector mapSubtractToSelf(double d) {\n            throw unsupported();\n        }\n",
        "begin_line": 137,
        "end_line": 139,
        "comment": "",
        "child_ranges": [
            "(line 138,col 13)-(line 138,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.ArrayRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java",
        "signature": "org.apache.commons.math.linear.ArrayRealVectorTest.RealVectorTestImpl.mapMultiply(double)",
        "snippet": "        public RealVector mapMultiply(double d) {\n            double[] out = new double[data.length];\n            for (int i = 0; i < data.length; i++) {\n                out[i] = data[i] * d;\n            }\n            return new ArrayRealVector(out);\n        }\n",
        "begin_line": 141,
        "end_line": 147,
        "comment": "",
        "child_ranges": [
            "(line 142,col 13)-(line 142,col 51)",
            "(line 143,col 13)-(line 145,col 13)",
            "(line 146,col 13)-(line 146,col 44)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.ArrayRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java",
        "signature": "org.apache.commons.math.linear.ArrayRealVectorTest.RealVectorTestImpl.mapMultiplyToSelf(double)",
        "snippet": "        public RealVector mapMultiplyToSelf(double d) {\n            throw unsupported();\n        }\n",
        "begin_line": 149,
        "end_line": 151,
        "comment": "",
        "child_ranges": [
            "(line 150,col 13)-(line 150,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.ArrayRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java",
        "signature": "org.apache.commons.math.linear.ArrayRealVectorTest.RealVectorTestImpl.mapDivide(double)",
        "snippet": "        public RealVector mapDivide(double d) {\n            throw unsupported();\n        }\n",
        "begin_line": 153,
        "end_line": 155,
        "comment": "",
        "child_ranges": [
            "(line 154,col 13)-(line 154,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.ArrayRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java",
        "signature": "org.apache.commons.math.linear.ArrayRealVectorTest.RealVectorTestImpl.mapDivideToSelf(double)",
        "snippet": "        public RealVector mapDivideToSelf(double d) {\n            throw unsupported();\n        }\n",
        "begin_line": 157,
        "end_line": 159,
        "comment": "",
        "child_ranges": [
            "(line 158,col 13)-(line 158,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.ArrayRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java",
        "signature": "org.apache.commons.math.linear.ArrayRealVectorTest.RealVectorTestImpl.mapPow(double)",
        "snippet": "        public RealVector mapPow(double d) {\n            throw unsupported();\n        }\n",
        "begin_line": 161,
        "end_line": 163,
        "comment": "",
        "child_ranges": [
            "(line 162,col 13)-(line 162,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.ArrayRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java",
        "signature": "org.apache.commons.math.linear.ArrayRealVectorTest.RealVectorTestImpl.mapPowToSelf(double)",
        "snippet": "        public RealVector mapPowToSelf(double d) {\n            throw unsupported();\n        }\n",
        "begin_line": 165,
        "end_line": 167,
        "comment": "",
        "child_ranges": [
            "(line 166,col 13)-(line 166,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.ArrayRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java",
        "signature": "org.apache.commons.math.linear.ArrayRealVectorTest.RealVectorTestImpl.mapExp()",
        "snippet": "        public RealVector mapExp() {\n            throw unsupported();\n        }\n",
        "begin_line": 169,
        "end_line": 171,
        "comment": "",
        "child_ranges": [
            "(line 170,col 13)-(line 170,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.ArrayRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java",
        "signature": "org.apache.commons.math.linear.ArrayRealVectorTest.RealVectorTestImpl.mapExpToSelf()",
        "snippet": "        public RealVector mapExpToSelf() {\n            throw unsupported();\n        }\n",
        "begin_line": 173,
        "end_line": 175,
        "comment": "",
        "child_ranges": [
            "(line 174,col 13)-(line 174,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.ArrayRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java",
        "signature": "org.apache.commons.math.linear.ArrayRealVectorTest.RealVectorTestImpl.mapExpm1()",
        "snippet": "        public RealVector mapExpm1() {\n            throw unsupported();\n        }\n",
        "begin_line": 177,
        "end_line": 179,
        "comment": "",
        "child_ranges": [
            "(line 178,col 13)-(line 178,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.ArrayRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java",
        "signature": "org.apache.commons.math.linear.ArrayRealVectorTest.RealVectorTestImpl.mapExpm1ToSelf()",
        "snippet": "        public RealVector mapExpm1ToSelf() {\n            throw unsupported();\n        }\n",
        "begin_line": 181,
        "end_line": 183,
        "comment": "",
        "child_ranges": [
            "(line 182,col 13)-(line 182,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.ArrayRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java",
        "signature": "org.apache.commons.math.linear.ArrayRealVectorTest.RealVectorTestImpl.mapLog()",
        "snippet": "        public RealVector mapLog() {\n            throw unsupported();\n        }\n",
        "begin_line": 185,
        "end_line": 187,
        "comment": "",
        "child_ranges": [
            "(line 186,col 13)-(line 186,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.ArrayRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java",
        "signature": "org.apache.commons.math.linear.ArrayRealVectorTest.RealVectorTestImpl.mapLogToSelf()",
        "snippet": "        public RealVector mapLogToSelf() {\n            throw unsupported();\n        }\n",
        "begin_line": 189,
        "end_line": 191,
        "comment": "",
        "child_ranges": [
            "(line 190,col 13)-(line 190,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.ArrayRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java",
        "signature": "org.apache.commons.math.linear.ArrayRealVectorTest.RealVectorTestImpl.mapLog10()",
        "snippet": "        public RealVector mapLog10() {\n            throw unsupported();\n        }\n",
        "begin_line": 193,
        "end_line": 195,
        "comment": "",
        "child_ranges": [
            "(line 194,col 13)-(line 194,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.ArrayRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java",
        "signature": "org.apache.commons.math.linear.ArrayRealVectorTest.RealVectorTestImpl.mapLog10ToSelf()",
        "snippet": "        public RealVector mapLog10ToSelf() {\n            throw unsupported();\n        }\n",
        "begin_line": 197,
        "end_line": 199,
        "comment": "",
        "child_ranges": [
            "(line 198,col 13)-(line 198,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.ArrayRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java",
        "signature": "org.apache.commons.math.linear.ArrayRealVectorTest.RealVectorTestImpl.mapLog1p()",
        "snippet": "        public RealVector mapLog1p() {\n            throw unsupported();\n        }\n",
        "begin_line": 201,
        "end_line": 203,
        "comment": "",
        "child_ranges": [
            "(line 202,col 13)-(line 202,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.ArrayRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java",
        "signature": "org.apache.commons.math.linear.ArrayRealVectorTest.RealVectorTestImpl.mapLog1pToSelf()",
        "snippet": "        public RealVector mapLog1pToSelf() {\n            throw unsupported();\n        }\n",
        "begin_line": 205,
        "end_line": 207,
        "comment": "",
        "child_ranges": [
            "(line 206,col 13)-(line 206,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.ArrayRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java",
        "signature": "org.apache.commons.math.linear.ArrayRealVectorTest.RealVectorTestImpl.mapCosh()",
        "snippet": "        public RealVector mapCosh() {\n            throw unsupported();\n        }\n",
        "begin_line": 209,
        "end_line": 211,
        "comment": "",
        "child_ranges": [
            "(line 210,col 13)-(line 210,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.ArrayRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java",
        "signature": "org.apache.commons.math.linear.ArrayRealVectorTest.RealVectorTestImpl.mapCoshToSelf()",
        "snippet": "        public RealVector mapCoshToSelf() {\n            throw unsupported();\n        }\n",
        "begin_line": 213,
        "end_line": 215,
        "comment": "",
        "child_ranges": [
            "(line 214,col 13)-(line 214,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.ArrayRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java",
        "signature": "org.apache.commons.math.linear.ArrayRealVectorTest.RealVectorTestImpl.mapSinh()",
        "snippet": "        public RealVector mapSinh() {\n            throw unsupported();\n        }\n",
        "begin_line": 217,
        "end_line": 219,
        "comment": "",
        "child_ranges": [
            "(line 218,col 13)-(line 218,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.ArrayRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java",
        "signature": "org.apache.commons.math.linear.ArrayRealVectorTest.RealVectorTestImpl.mapSinhToSelf()",
        "snippet": "        public RealVector mapSinhToSelf() {\n            throw unsupported();\n        }\n",
        "begin_line": 221,
        "end_line": 223,
        "comment": "",
        "child_ranges": [
            "(line 222,col 13)-(line 222,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.ArrayRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java",
        "signature": "org.apache.commons.math.linear.ArrayRealVectorTest.RealVectorTestImpl.mapTanh()",
        "snippet": "        public RealVector mapTanh() {\n            throw unsupported();\n        }\n",
        "begin_line": 225,
        "end_line": 227,
        "comment": "",
        "child_ranges": [
            "(line 226,col 13)-(line 226,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.ArrayRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java",
        "signature": "org.apache.commons.math.linear.ArrayRealVectorTest.RealVectorTestImpl.mapTanhToSelf()",
        "snippet": "        public RealVector mapTanhToSelf() {\n            throw unsupported();\n        }\n",
        "begin_line": 229,
        "end_line": 231,
        "comment": "",
        "child_ranges": [
            "(line 230,col 13)-(line 230,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.ArrayRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java",
        "signature": "org.apache.commons.math.linear.ArrayRealVectorTest.RealVectorTestImpl.mapCos()",
        "snippet": "        public RealVector mapCos() {\n            throw unsupported();\n        }\n",
        "begin_line": 233,
        "end_line": 235,
        "comment": "",
        "child_ranges": [
            "(line 234,col 13)-(line 234,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.ArrayRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java",
        "signature": "org.apache.commons.math.linear.ArrayRealVectorTest.RealVectorTestImpl.mapCosToSelf()",
        "snippet": "        public RealVector mapCosToSelf() {\n            throw unsupported();\n        }\n",
        "begin_line": 237,
        "end_line": 239,
        "comment": "",
        "child_ranges": [
            "(line 238,col 13)-(line 238,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.ArrayRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java",
        "signature": "org.apache.commons.math.linear.ArrayRealVectorTest.RealVectorTestImpl.mapSin()",
        "snippet": "        public RealVector mapSin() {\n            throw unsupported();\n        }\n",
        "begin_line": 241,
        "end_line": 243,
        "comment": "",
        "child_ranges": [
            "(line 242,col 13)-(line 242,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.ArrayRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java",
        "signature": "org.apache.commons.math.linear.ArrayRealVectorTest.RealVectorTestImpl.mapSinToSelf()",
        "snippet": "        public RealVector mapSinToSelf() {\n            throw unsupported();\n        }\n",
        "begin_line": 245,
        "end_line": 247,
        "comment": "",
        "child_ranges": [
            "(line 246,col 13)-(line 246,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.ArrayRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java",
        "signature": "org.apache.commons.math.linear.ArrayRealVectorTest.RealVectorTestImpl.mapTan()",
        "snippet": "        public RealVector mapTan() {\n            throw unsupported();\n        }\n",
        "begin_line": 249,
        "end_line": 251,
        "comment": "",
        "child_ranges": [
            "(line 250,col 13)-(line 250,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.ArrayRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java",
        "signature": "org.apache.commons.math.linear.ArrayRealVectorTest.RealVectorTestImpl.mapTanToSelf()",
        "snippet": "        public RealVector mapTanToSelf() {\n            throw unsupported();\n        }\n",
        "begin_line": 253,
        "end_line": 255,
        "comment": "",
        "child_ranges": [
            "(line 254,col 13)-(line 254,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.ArrayRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java",
        "signature": "org.apache.commons.math.linear.ArrayRealVectorTest.RealVectorTestImpl.mapAcos()",
        "snippet": "        public RealVector mapAcos() {\n            throw unsupported();\n        }\n",
        "begin_line": 257,
        "end_line": 259,
        "comment": "",
        "child_ranges": [
            "(line 258,col 13)-(line 258,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.ArrayRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java",
        "signature": "org.apache.commons.math.linear.ArrayRealVectorTest.RealVectorTestImpl.mapAcosToSelf()",
        "snippet": "        public RealVector mapAcosToSelf() {\n            throw unsupported();\n        }\n",
        "begin_line": 261,
        "end_line": 263,
        "comment": "",
        "child_ranges": [
            "(line 262,col 13)-(line 262,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.ArrayRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java",
        "signature": "org.apache.commons.math.linear.ArrayRealVectorTest.RealVectorTestImpl.mapAsin()",
        "snippet": "        public RealVector mapAsin() {\n            throw unsupported();\n        }\n",
        "begin_line": 265,
        "end_line": 267,
        "comment": "",
        "child_ranges": [
            "(line 266,col 13)-(line 266,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.ArrayRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java",
        "signature": "org.apache.commons.math.linear.ArrayRealVectorTest.RealVectorTestImpl.mapAsinToSelf()",
        "snippet": "        public RealVector mapAsinToSelf() {\n            throw unsupported();\n        }\n",
        "begin_line": 269,
        "end_line": 271,
        "comment": "",
        "child_ranges": [
            "(line 270,col 13)-(line 270,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.ArrayRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java",
        "signature": "org.apache.commons.math.linear.ArrayRealVectorTest.RealVectorTestImpl.mapAtan()",
        "snippet": "        public RealVector mapAtan() {\n            throw unsupported();\n        }\n",
        "begin_line": 273,
        "end_line": 275,
        "comment": "",
        "child_ranges": [
            "(line 274,col 13)-(line 274,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.ArrayRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java",
        "signature": "org.apache.commons.math.linear.ArrayRealVectorTest.RealVectorTestImpl.mapAtanToSelf()",
        "snippet": "        public RealVector mapAtanToSelf() {\n            throw unsupported();\n        }\n",
        "begin_line": 277,
        "end_line": 279,
        "comment": "",
        "child_ranges": [
            "(line 278,col 13)-(line 278,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.ArrayRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java",
        "signature": "org.apache.commons.math.linear.ArrayRealVectorTest.RealVectorTestImpl.mapInv()",
        "snippet": "        public RealVector mapInv() {\n            throw unsupported();\n        }\n",
        "begin_line": 281,
        "end_line": 283,
        "comment": "",
        "child_ranges": [
            "(line 282,col 13)-(line 282,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.ArrayRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java",
        "signature": "org.apache.commons.math.linear.ArrayRealVectorTest.RealVectorTestImpl.mapInvToSelf()",
        "snippet": "        public RealVector mapInvToSelf() {\n            throw unsupported();\n        }\n",
        "begin_line": 285,
        "end_line": 287,
        "comment": "",
        "child_ranges": [
            "(line 286,col 13)-(line 286,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.ArrayRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java",
        "signature": "org.apache.commons.math.linear.ArrayRealVectorTest.RealVectorTestImpl.mapAbs()",
        "snippet": "        public RealVector mapAbs() {\n            throw unsupported();\n        }\n",
        "begin_line": 289,
        "end_line": 291,
        "comment": "",
        "child_ranges": [
            "(line 290,col 13)-(line 290,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.ArrayRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java",
        "signature": "org.apache.commons.math.linear.ArrayRealVectorTest.RealVectorTestImpl.mapAbsToSelf()",
        "snippet": "        public RealVector mapAbsToSelf() {\n            throw unsupported();\n        }\n",
        "begin_line": 293,
        "end_line": 295,
        "comment": "",
        "child_ranges": [
            "(line 294,col 13)-(line 294,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.ArrayRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java",
        "signature": "org.apache.commons.math.linear.ArrayRealVectorTest.RealVectorTestImpl.mapSqrt()",
        "snippet": "        public RealVector mapSqrt() {\n            throw unsupported();\n        }\n",
        "begin_line": 297,
        "end_line": 299,
        "comment": "",
        "child_ranges": [
            "(line 298,col 13)-(line 298,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.ArrayRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java",
        "signature": "org.apache.commons.math.linear.ArrayRealVectorTest.RealVectorTestImpl.mapSqrtToSelf()",
        "snippet": "        public RealVector mapSqrtToSelf() {\n            throw unsupported();\n        }\n",
        "begin_line": 301,
        "end_line": 303,
        "comment": "",
        "child_ranges": [
            "(line 302,col 13)-(line 302,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.ArrayRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java",
        "signature": "org.apache.commons.math.linear.ArrayRealVectorTest.RealVectorTestImpl.mapCbrt()",
        "snippet": "        public RealVector mapCbrt() {\n            throw unsupported();\n        }\n",
        "begin_line": 305,
        "end_line": 307,
        "comment": "",
        "child_ranges": [
            "(line 306,col 13)-(line 306,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.ArrayRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java",
        "signature": "org.apache.commons.math.linear.ArrayRealVectorTest.RealVectorTestImpl.mapCbrtToSelf()",
        "snippet": "        public RealVector mapCbrtToSelf() {\n            throw unsupported();\n        }\n",
        "begin_line": 309,
        "end_line": 311,
        "comment": "",
        "child_ranges": [
            "(line 310,col 13)-(line 310,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.ArrayRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java",
        "signature": "org.apache.commons.math.linear.ArrayRealVectorTest.RealVectorTestImpl.mapCeil()",
        "snippet": "        public RealVector mapCeil() {\n            throw unsupported();\n        }\n",
        "begin_line": 313,
        "end_line": 315,
        "comment": "",
        "child_ranges": [
            "(line 314,col 13)-(line 314,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.ArrayRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java",
        "signature": "org.apache.commons.math.linear.ArrayRealVectorTest.RealVectorTestImpl.mapCeilToSelf()",
        "snippet": "        public RealVector mapCeilToSelf() {\n            throw unsupported();\n        }\n",
        "begin_line": 317,
        "end_line": 319,
        "comment": "",
        "child_ranges": [
            "(line 318,col 13)-(line 318,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.ArrayRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java",
        "signature": "org.apache.commons.math.linear.ArrayRealVectorTest.RealVectorTestImpl.mapFloor()",
        "snippet": "        public RealVector mapFloor() {\n            throw unsupported();\n        }\n",
        "begin_line": 321,
        "end_line": 323,
        "comment": "",
        "child_ranges": [
            "(line 322,col 13)-(line 322,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.ArrayRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java",
        "signature": "org.apache.commons.math.linear.ArrayRealVectorTest.RealVectorTestImpl.mapFloorToSelf()",
        "snippet": "        public RealVector mapFloorToSelf() {\n            throw unsupported();\n        }\n",
        "begin_line": 325,
        "end_line": 327,
        "comment": "",
        "child_ranges": [
            "(line 326,col 13)-(line 326,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.ArrayRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java",
        "signature": "org.apache.commons.math.linear.ArrayRealVectorTest.RealVectorTestImpl.mapRint()",
        "snippet": "        public RealVector mapRint() {\n            throw unsupported();\n        }\n",
        "begin_line": 329,
        "end_line": 331,
        "comment": "",
        "child_ranges": [
            "(line 330,col 13)-(line 330,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.ArrayRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java",
        "signature": "org.apache.commons.math.linear.ArrayRealVectorTest.RealVectorTestImpl.mapRintToSelf()",
        "snippet": "        public RealVector mapRintToSelf() {\n            throw unsupported();\n        }\n",
        "begin_line": 333,
        "end_line": 335,
        "comment": "",
        "child_ranges": [
            "(line 334,col 13)-(line 334,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.ArrayRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java",
        "signature": "org.apache.commons.math.linear.ArrayRealVectorTest.RealVectorTestImpl.mapSignum()",
        "snippet": "        public RealVector mapSignum() {\n            throw unsupported();\n        }\n",
        "begin_line": 337,
        "end_line": 339,
        "comment": "",
        "child_ranges": [
            "(line 338,col 13)-(line 338,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.ArrayRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java",
        "signature": "org.apache.commons.math.linear.ArrayRealVectorTest.RealVectorTestImpl.mapSignumToSelf()",
        "snippet": "        public RealVector mapSignumToSelf() {\n            throw unsupported();\n        }\n",
        "begin_line": 341,
        "end_line": 343,
        "comment": "",
        "child_ranges": [
            "(line 342,col 13)-(line 342,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.ArrayRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java",
        "signature": "org.apache.commons.math.linear.ArrayRealVectorTest.RealVectorTestImpl.mapUlp()",
        "snippet": "        public RealVector mapUlp() {\n            throw unsupported();\n        }\n",
        "begin_line": 345,
        "end_line": 347,
        "comment": "",
        "child_ranges": [
            "(line 346,col 13)-(line 346,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.ArrayRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java",
        "signature": "org.apache.commons.math.linear.ArrayRealVectorTest.RealVectorTestImpl.mapUlpToSelf()",
        "snippet": "        public RealVector mapUlpToSelf() {\n            throw unsupported();\n        }\n",
        "begin_line": 349,
        "end_line": 351,
        "comment": "",
        "child_ranges": [
            "(line 350,col 13)-(line 350,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.ArrayRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java",
        "signature": "org.apache.commons.math.linear.ArrayRealVectorTest.RealVectorTestImpl.ebeMultiply(org.apache.commons.math.linear.RealVector)",
        "snippet": "        public RealVector ebeMultiply(RealVector v) throws IllegalArgumentException {\n            throw unsupported();\n        }\n",
        "begin_line": 353,
        "end_line": 355,
        "comment": "",
        "child_ranges": [
            "(line 354,col 13)-(line 354,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.ArrayRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java",
        "signature": "org.apache.commons.math.linear.ArrayRealVectorTest.RealVectorTestImpl.ebeMultiply(double[])",
        "snippet": "        public RealVector ebeMultiply(double[] v) throws IllegalArgumentException {\n            throw unsupported();\n        }\n",
        "begin_line": 357,
        "end_line": 359,
        "comment": "",
        "child_ranges": [
            "(line 358,col 13)-(line 358,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.ArrayRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java",
        "signature": "org.apache.commons.math.linear.ArrayRealVectorTest.RealVectorTestImpl.ebeDivide(org.apache.commons.math.linear.RealVector)",
        "snippet": "        public RealVector ebeDivide(RealVector v) throws IllegalArgumentException {\n            throw unsupported();\n        }\n",
        "begin_line": 361,
        "end_line": 363,
        "comment": "",
        "child_ranges": [
            "(line 362,col 13)-(line 362,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.ArrayRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java",
        "signature": "org.apache.commons.math.linear.ArrayRealVectorTest.RealVectorTestImpl.ebeDivide(double[])",
        "snippet": "        public RealVector ebeDivide(double[] v) throws IllegalArgumentException {\n            throw unsupported();\n        }\n",
        "begin_line": 365,
        "end_line": 367,
        "comment": "",
        "child_ranges": [
            "(line 366,col 13)-(line 366,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.ArrayRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java",
        "signature": "org.apache.commons.math.linear.ArrayRealVectorTest.RealVectorTestImpl.getData()",
        "snippet": "        public double[] getData() {\n            return data.clone();\n        }\n",
        "begin_line": 369,
        "end_line": 371,
        "comment": "",
        "child_ranges": [
            "(line 370,col 13)-(line 370,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.ArrayRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java",
        "signature": "org.apache.commons.math.linear.ArrayRealVectorTest.RealVectorTestImpl.dotProduct(org.apache.commons.math.linear.RealVector)",
        "snippet": "        public double dotProduct(RealVector v) throws IllegalArgumentException {\n            double dot = 0;\n            for (int i = 0; i < data.length; i++) {\n                dot += data[i] * v.getEntry(i);\n            }\n            return dot;\n        }\n",
        "begin_line": 373,
        "end_line": 379,
        "comment": "",
        "child_ranges": [
            "(line 374,col 13)-(line 374,col 27)",
            "(line 375,col 13)-(line 377,col 13)",
            "(line 378,col 13)-(line 378,col 23)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.ArrayRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java",
        "signature": "org.apache.commons.math.linear.ArrayRealVectorTest.RealVectorTestImpl.dotProduct(double[])",
        "snippet": "        public double dotProduct(double[] v) throws IllegalArgumentException {\n            double dot = 0;\n            for (int i = 0; i < data.length; i++) {\n                dot += data[i] * v[i];\n            }\n            return dot;\n        }\n",
        "begin_line": 381,
        "end_line": 387,
        "comment": "",
        "child_ranges": [
            "(line 382,col 13)-(line 382,col 27)",
            "(line 383,col 13)-(line 385,col 13)",
            "(line 386,col 13)-(line 386,col 23)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.ArrayRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java",
        "signature": "org.apache.commons.math.linear.ArrayRealVectorTest.RealVectorTestImpl.getNorm()",
        "snippet": "        public double getNorm() {\n            throw unsupported();\n        }\n",
        "begin_line": 389,
        "end_line": 391,
        "comment": "",
        "child_ranges": [
            "(line 390,col 13)-(line 390,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.ArrayRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java",
        "signature": "org.apache.commons.math.linear.ArrayRealVectorTest.RealVectorTestImpl.getL1Norm()",
        "snippet": "        public double getL1Norm() {\n            throw unsupported();\n        }\n",
        "begin_line": 393,
        "end_line": 395,
        "comment": "",
        "child_ranges": [
            "(line 394,col 13)-(line 394,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.ArrayRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java",
        "signature": "org.apache.commons.math.linear.ArrayRealVectorTest.RealVectorTestImpl.getLInfNorm()",
        "snippet": "        public double getLInfNorm() {\n            throw unsupported();\n        }\n",
        "begin_line": 397,
        "end_line": 399,
        "comment": "",
        "child_ranges": [
            "(line 398,col 13)-(line 398,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.ArrayRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java",
        "signature": "org.apache.commons.math.linear.ArrayRealVectorTest.RealVectorTestImpl.getDistance(org.apache.commons.math.linear.RealVector)",
        "snippet": "        public double getDistance(RealVector v) throws IllegalArgumentException {\n            throw unsupported();\n        }\n",
        "begin_line": 401,
        "end_line": 403,
        "comment": "",
        "child_ranges": [
            "(line 402,col 13)-(line 402,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.ArrayRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java",
        "signature": "org.apache.commons.math.linear.ArrayRealVectorTest.RealVectorTestImpl.getDistance(double[])",
        "snippet": "        public double getDistance(double[] v) throws IllegalArgumentException {\n            throw unsupported();\n        }\n",
        "begin_line": 405,
        "end_line": 407,
        "comment": "",
        "child_ranges": [
            "(line 406,col 13)-(line 406,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.ArrayRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java",
        "signature": "org.apache.commons.math.linear.ArrayRealVectorTest.RealVectorTestImpl.getL1Distance(org.apache.commons.math.linear.RealVector)",
        "snippet": "        public double getL1Distance(RealVector v) throws IllegalArgumentException {\n            throw unsupported();\n        }\n",
        "begin_line": 409,
        "end_line": 411,
        "comment": "",
        "child_ranges": [
            "(line 410,col 13)-(line 410,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.ArrayRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java",
        "signature": "org.apache.commons.math.linear.ArrayRealVectorTest.RealVectorTestImpl.getL1Distance(double[])",
        "snippet": "        public double getL1Distance(double[] v) throws IllegalArgumentException {\n            throw unsupported();\n        }\n",
        "begin_line": 413,
        "end_line": 415,
        "comment": "",
        "child_ranges": [
            "(line 414,col 13)-(line 414,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.ArrayRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java",
        "signature": "org.apache.commons.math.linear.ArrayRealVectorTest.RealVectorTestImpl.getLInfDistance(org.apache.commons.math.linear.RealVector)",
        "snippet": "        public double getLInfDistance(RealVector v) throws IllegalArgumentException {\n            throw unsupported();\n        }\n",
        "begin_line": 417,
        "end_line": 419,
        "comment": "",
        "child_ranges": [
            "(line 418,col 13)-(line 418,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.ArrayRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java",
        "signature": "org.apache.commons.math.linear.ArrayRealVectorTest.RealVectorTestImpl.getLInfDistance(double[])",
        "snippet": "        public double getLInfDistance(double[] v) throws IllegalArgumentException {\n            throw unsupported();\n        }\n",
        "begin_line": 421,
        "end_line": 423,
        "comment": "",
        "child_ranges": [
            "(line 422,col 13)-(line 422,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.ArrayRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java",
        "signature": "org.apache.commons.math.linear.ArrayRealVectorTest.RealVectorTestImpl.unitVector()",
        "snippet": "        public RealVector unitVector() {\n            throw unsupported();\n        }\n",
        "begin_line": 425,
        "end_line": 427,
        "comment": "",
        "child_ranges": [
            "(line 426,col 13)-(line 426,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.ArrayRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java",
        "signature": "org.apache.commons.math.linear.ArrayRealVectorTest.RealVectorTestImpl.unitize()",
        "snippet": "        public void unitize() {\n            throw unsupported();\n        }\n",
        "begin_line": 429,
        "end_line": 431,
        "comment": "",
        "child_ranges": [
            "(line 430,col 13)-(line 430,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.ArrayRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java",
        "signature": "org.apache.commons.math.linear.ArrayRealVectorTest.RealVectorTestImpl.projection(org.apache.commons.math.linear.RealVector)",
        "snippet": "        public RealVector projection(RealVector v) throws IllegalArgumentException {\n            throw unsupported();\n        }\n",
        "begin_line": 433,
        "end_line": 435,
        "comment": "",
        "child_ranges": [
            "(line 434,col 13)-(line 434,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.ArrayRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java",
        "signature": "org.apache.commons.math.linear.ArrayRealVectorTest.RealVectorTestImpl.projection(double[])",
        "snippet": "        public RealVector projection(double[] v) throws IllegalArgumentException {\n            throw unsupported();\n        }\n",
        "begin_line": 437,
        "end_line": 439,
        "comment": "",
        "child_ranges": [
            "(line 438,col 13)-(line 438,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.ArrayRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java",
        "signature": "org.apache.commons.math.linear.ArrayRealVectorTest.RealVectorTestImpl.outerProduct(org.apache.commons.math.linear.RealVector)",
        "snippet": "        public RealMatrix outerProduct(RealVector v) throws IllegalArgumentException {\n            throw unsupported();\n        }\n",
        "begin_line": 441,
        "end_line": 443,
        "comment": "",
        "child_ranges": [
            "(line 442,col 13)-(line 442,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.ArrayRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java",
        "signature": "org.apache.commons.math.linear.ArrayRealVectorTest.RealVectorTestImpl.outerProduct(double[])",
        "snippet": "        public RealMatrix outerProduct(double[] v) throws IllegalArgumentException {\n            throw unsupported();\n        }\n",
        "begin_line": 445,
        "end_line": 447,
        "comment": "",
        "child_ranges": [
            "(line 446,col 13)-(line 446,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.ArrayRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java",
        "signature": "org.apache.commons.math.linear.ArrayRealVectorTest.RealVectorTestImpl.getEntry(int)",
        "snippet": "        public double getEntry(int index) throws MatrixIndexException {\n            return data[index];\n        }\n",
        "begin_line": 449,
        "end_line": 451,
        "comment": "",
        "child_ranges": [
            "(line 450,col 13)-(line 450,col 31)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.ArrayRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java",
        "signature": "org.apache.commons.math.linear.ArrayRealVectorTest.RealVectorTestImpl.getDimension()",
        "snippet": "        public int getDimension() {\n            return data.length;\n        }\n",
        "begin_line": 453,
        "end_line": 455,
        "comment": "",
        "child_ranges": [
            "(line 454,col 13)-(line 454,col 31)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.ArrayRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java",
        "signature": "org.apache.commons.math.linear.ArrayRealVectorTest.RealVectorTestImpl.append(org.apache.commons.math.linear.RealVector)",
        "snippet": "        public RealVector append(RealVector v) {\n            throw unsupported();\n        }\n",
        "begin_line": 457,
        "end_line": 459,
        "comment": "",
        "child_ranges": [
            "(line 458,col 13)-(line 458,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.ArrayRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java",
        "signature": "org.apache.commons.math.linear.ArrayRealVectorTest.RealVectorTestImpl.append(double)",
        "snippet": "        public RealVector append(double d) {\n            throw unsupported();\n        }\n",
        "begin_line": 461,
        "end_line": 463,
        "comment": "",
        "child_ranges": [
            "(line 462,col 13)-(line 462,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.ArrayRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java",
        "signature": "org.apache.commons.math.linear.ArrayRealVectorTest.RealVectorTestImpl.append(double[])",
        "snippet": "        public RealVector append(double[] a) {\n            throw unsupported();\n        }\n",
        "begin_line": 465,
        "end_line": 467,
        "comment": "",
        "child_ranges": [
            "(line 466,col 13)-(line 466,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.ArrayRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java",
        "signature": "org.apache.commons.math.linear.ArrayRealVectorTest.RealVectorTestImpl.getSubVector(int, int)",
        "snippet": "        public RealVector getSubVector(int index, int n) throws MatrixIndexException {\n            throw unsupported();\n        }\n",
        "begin_line": 469,
        "end_line": 471,
        "comment": "",
        "child_ranges": [
            "(line 470,col 13)-(line 470,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.ArrayRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java",
        "signature": "org.apache.commons.math.linear.ArrayRealVectorTest.RealVectorTestImpl.setEntry(int, double)",
        "snippet": "        public void setEntry(int index, double value) throws MatrixIndexException {\n            throw unsupported();\n        }\n",
        "begin_line": 473,
        "end_line": 475,
        "comment": "",
        "child_ranges": [
            "(line 474,col 13)-(line 474,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.ArrayRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java",
        "signature": "org.apache.commons.math.linear.ArrayRealVectorTest.RealVectorTestImpl.setSubVector(int, org.apache.commons.math.linear.RealVector)",
        "snippet": "        public void setSubVector(int index, RealVector v) throws MatrixIndexException {\n            throw unsupported();\n        }\n",
        "begin_line": 477,
        "end_line": 479,
        "comment": "",
        "child_ranges": [
            "(line 478,col 13)-(line 478,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.ArrayRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java",
        "signature": "org.apache.commons.math.linear.ArrayRealVectorTest.RealVectorTestImpl.setSubVector(int, double[])",
        "snippet": "        public void setSubVector(int index, double[] v) throws MatrixIndexException {\n            throw unsupported();\n        }\n",
        "begin_line": 481,
        "end_line": 483,
        "comment": "",
        "child_ranges": [
            "(line 482,col 13)-(line 482,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.ArrayRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java",
        "signature": "org.apache.commons.math.linear.ArrayRealVectorTest.RealVectorTestImpl.set(double)",
        "snippet": "        public void set(double value) {\n            throw unsupported();\n        }\n",
        "begin_line": 485,
        "end_line": 487,
        "comment": "",
        "child_ranges": [
            "(line 486,col 13)-(line 486,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.ArrayRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java",
        "signature": "org.apache.commons.math.linear.ArrayRealVectorTest.RealVectorTestImpl.toArray()",
        "snippet": "        public double[] toArray() {\n            throw unsupported();\n        }\n",
        "begin_line": 489,
        "end_line": 491,
        "comment": "",
        "child_ranges": [
            "(line 490,col 13)-(line 490,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.ArrayRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java",
        "signature": "org.apache.commons.math.linear.ArrayRealVectorTest.RealVectorTestImpl.isNaN()",
        "snippet": "        public boolean isNaN() {\n            throw unsupported();\n        }\n",
        "begin_line": 493,
        "end_line": 495,
        "comment": "",
        "child_ranges": [
            "(line 494,col 13)-(line 494,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.ArrayRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java",
        "signature": "org.apache.commons.math.linear.ArrayRealVectorTest.RealVectorTestImpl.isInfinite()",
        "snippet": "        public boolean isInfinite() {\n            throw unsupported();\n        }\n",
        "begin_line": 497,
        "end_line": 499,
        "comment": "",
        "child_ranges": [
            "(line 498,col 13)-(line 498,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.ArrayRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java",
        "signature": "org.apache.commons.math.linear.ArrayRealVectorTest.suite()",
        "snippet": "    public static Test suite() {\n        TestSuite suite = new TestSuite(ArrayRealVectorTest.class);\n        suite.setName(\"ArrayRealVector Tests\");\n        return suite;\n    }\n",
        "begin_line": 503,
        "end_line": 507,
        "comment": "",
        "child_ranges": [
            "(line 504,col 9)-(line 504,col 67)",
            "(line 505,col 9)-(line 505,col 47)",
            "(line 506,col 9)-(line 506,col 21)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.ArrayRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java",
        "signature": "org.apache.commons.math.linear.ArrayRealVectorTest.testConstructors()",
        "snippet": "    public void testConstructors() {\n\n        ArrayRealVector v0 = new ArrayRealVector();\n        assertEquals(\"testData len\", 0, v0.getDimension());\n\n        ArrayRealVector v1 = new ArrayRealVector(7);\n        assertEquals(\"testData len\", 7, v1.getDimension());\n        assertEquals(\"testData is 0.0 \", 0.0, v1.getEntry(6));\n\n        ArrayRealVector v2 = new ArrayRealVector(5, 1.23);\n        assertEquals(\"testData len\", 5, v2.getDimension());\n        assertEquals(\"testData is 1.23 \", 1.23, v2.getEntry(4));\n\n        ArrayRealVector v3 = new ArrayRealVector(vec1);\n        assertEquals(\"testData len\", 3, v3.getDimension());\n        assertEquals(\"testData is 2.0 \", 2.0, v3.getEntry(1));\n\n        ArrayRealVector v3_bis = new ArrayRealVector(vec1, true);\n        assertEquals(\"testData len\", 3, v3_bis.getDimension());\n        assertEquals(\"testData is 2.0 \", 2.0, v3_bis.getEntry(1));\n        assertNotSame(v3_bis.getDataRef(), vec1);\n        assertNotSame(v3_bis.getData(), vec1);\n\n        ArrayRealVector v3_ter = new ArrayRealVector(vec1, false);\n        assertEquals(\"testData len\", 3, v3_ter.getDimension());\n        assertEquals(\"testData is 2.0 \", 2.0, v3_ter.getEntry(1));\n        assertSame(v3_ter.getDataRef(), vec1);\n        assertNotSame(v3_ter.getData(), vec1);\n\n        ArrayRealVector v4 = new ArrayRealVector(vec4, 3, 2);\n        assertEquals(\"testData len\", 2, v4.getDimension());\n        assertEquals(\"testData is 4.0 \", 4.0, v4.getEntry(0));\n        try {\n            new ArrayRealVector(vec4, 8, 3);\n            fail(\"IllegalArgumentException expected\");\n        } catch (IllegalArgumentException ex) {\n            // expected behavior\n        } catch (Exception e) {\n            fail(\"wrong exception caught\");\n        }\n\n        RealVector v5_i = new ArrayRealVector(dvec1);\n        assertEquals(\"testData len\", 9, v5_i.getDimension());\n        assertEquals(\"testData is 9.0 \", 9.0, v5_i.getEntry(8));\n\n        ArrayRealVector v5 = new ArrayRealVector(dvec1);\n        assertEquals(\"testData len\", 9, v5.getDimension());\n        assertEquals(\"testData is 9.0 \", 9.0, v5.getEntry(8));\n\n        ArrayRealVector v6 = new ArrayRealVector(dvec1, 3, 2);\n        assertEquals(\"testData len\", 2, v6.getDimension());\n        assertEquals(\"testData is 4.0 \", 4.0, v6.getEntry(0));\n        try {\n            new ArrayRealVector(dvec1, 8, 3);\n            fail(\"IllegalArgumentException expected\");\n        } catch (IllegalArgumentException ex) {\n            // expected behavior\n        } catch (Exception e) {\n            fail(\"wrong exception caught\");\n        }\n\n        ArrayRealVector v7 = new ArrayRealVector(v1);\n        assertEquals(\"testData len\", 7, v7.getDimension());\n        assertEquals(\"testData is 0.0 \", 0.0, v7.getEntry(6));\n\n        RealVectorTestImpl v7_i = new RealVectorTestImpl(vec1);\n\n        ArrayRealVector v7_2 = new ArrayRealVector(v7_i);\n        assertEquals(\"testData len\", 3, v7_2.getDimension());\n        assertEquals(\"testData is 0.0 \", 2.0d, v7_2.getEntry(1));\n\n        ArrayRealVector v8 = new ArrayRealVector(v1, true);\n        assertEquals(\"testData len\", 7, v8.getDimension());\n        assertEquals(\"testData is 0.0 \", 0.0, v8.getEntry(6));\n        assertNotSame(\"testData not same object \", v1.data, v8.data);\n\n        ArrayRealVector v8_2 = new ArrayRealVector(v1, false);\n        assertEquals(\"testData len\", 7, v8_2.getDimension());\n        assertEquals(\"testData is 0.0 \", 0.0, v8_2.getEntry(6));\n        assertEquals(\"testData same object \", v1.data, v8_2.data);\n\n        ArrayRealVector v9 = new ArrayRealVector(v1, v3);\n        assertEquals(\"testData len\", 10, v9.getDimension());\n        assertEquals(\"testData is 1.0 \", 1.0, v9.getEntry(7));\n\n        ArrayRealVector v10 = new ArrayRealVector(v2, new RealVectorTestImpl(vec3));\n        assertEquals(\"testData len\", 8, v10.getDimension());\n        assertEquals(\"testData is 1.23 \", 1.23, v10.getEntry(4));\n        assertEquals(\"testData is 7.0 \", 7.0, v10.getEntry(5));\n\n        ArrayRealVector v11 = new ArrayRealVector(new RealVectorTestImpl(vec3), v2);\n        assertEquals(\"testData len\", 8, v11.getDimension());\n        assertEquals(\"testData is 9.0 \", 9.0, v11.getEntry(2));\n        assertEquals(\"testData is 1.23 \", 1.23, v11.getEntry(3));\n\n        ArrayRealVector v12 = new ArrayRealVector(v2, vec3);\n        assertEquals(\"testData len\", 8, v12.getDimension());\n        assertEquals(\"testData is 1.23 \", 1.23, v12.getEntry(4));\n        assertEquals(\"testData is 7.0 \", 7.0, v12.getEntry(5));\n\n        ArrayRealVector v13 = new ArrayRealVector(vec3, v2);\n        assertEquals(\"testData len\", 8, v13.getDimension());\n        assertEquals(\"testData is 9.0 \", 9.0, v13.getEntry(2));\n        assertEquals(\"testData is 1.23 \", 1.23, v13.getEntry(3));\n\n        ArrayRealVector v14 = new ArrayRealVector(vec3, vec4);\n        assertEquals(\"testData len\", 12, v14.getDimension());\n        assertEquals(\"testData is 9.0 \", 9.0, v14.getEntry(2));\n        assertEquals(\"testData is 1.0 \", 1.0, v14.getEntry(3));\n\n        try {\n            new ArrayRealVector((double[]) null, false);\n            fail(\"expected exception\");\n        } catch (NullPointerException npe) {\n            // expected\n        } catch (Exception e) {\n            fail(\"wrong exception caught\");\n        }\n\n        try {\n            new ArrayRealVector(new double[0], false);\n            fail(\"expected exception\");\n        } catch (IllegalArgumentException iae) {\n            // expected\n        } catch (Exception e) {\n            fail(\"wrong exception caught\");\n        }\n\n   }\n",
        "begin_line": 509,
        "end_line": 637,
        "comment": "",
        "child_ranges": [
            "(line 511,col 9)-(line 511,col 51)",
            "(line 512,col 9)-(line 512,col 59)",
            "(line 514,col 9)-(line 514,col 52)",
            "(line 515,col 9)-(line 515,col 59)",
            "(line 516,col 9)-(line 516,col 62)",
            "(line 518,col 9)-(line 518,col 58)",
            "(line 519,col 9)-(line 519,col 59)",
            "(line 520,col 9)-(line 520,col 64)",
            "(line 522,col 9)-(line 522,col 55)",
            "(line 523,col 9)-(line 523,col 59)",
            "(line 524,col 9)-(line 524,col 62)",
            "(line 526,col 9)-(line 526,col 65)",
            "(line 527,col 9)-(line 527,col 63)",
            "(line 528,col 9)-(line 528,col 66)",
            "(line 529,col 9)-(line 529,col 49)",
            "(line 530,col 9)-(line 530,col 46)",
            "(line 532,col 9)-(line 532,col 66)",
            "(line 533,col 9)-(line 533,col 63)",
            "(line 534,col 9)-(line 534,col 66)",
            "(line 535,col 9)-(line 535,col 46)",
            "(line 536,col 9)-(line 536,col 46)",
            "(line 538,col 9)-(line 538,col 61)",
            "(line 539,col 9)-(line 539,col 59)",
            "(line 540,col 9)-(line 540,col 62)",
            "(line 541,col 9)-(line 548,col 9)",
            "(line 550,col 9)-(line 550,col 53)",
            "(line 551,col 9)-(line 551,col 61)",
            "(line 552,col 9)-(line 552,col 64)",
            "(line 554,col 9)-(line 554,col 56)",
            "(line 555,col 9)-(line 555,col 59)",
            "(line 556,col 9)-(line 556,col 62)",
            "(line 558,col 9)-(line 558,col 62)",
            "(line 559,col 9)-(line 559,col 59)",
            "(line 560,col 9)-(line 560,col 62)",
            "(line 561,col 9)-(line 568,col 9)",
            "(line 570,col 9)-(line 570,col 53)",
            "(line 571,col 9)-(line 571,col 59)",
            "(line 572,col 9)-(line 572,col 62)",
            "(line 574,col 9)-(line 574,col 63)",
            "(line 576,col 9)-(line 576,col 57)",
            "(line 577,col 9)-(line 577,col 61)",
            "(line 578,col 9)-(line 578,col 65)",
            "(line 580,col 9)-(line 580,col 59)",
            "(line 581,col 9)-(line 581,col 59)",
            "(line 582,col 9)-(line 582,col 62)",
            "(line 583,col 9)-(line 583,col 69)",
            "(line 585,col 9)-(line 585,col 62)",
            "(line 586,col 9)-(line 586,col 61)",
            "(line 587,col 9)-(line 587,col 64)",
            "(line 588,col 9)-(line 588,col 66)",
            "(line 590,col 9)-(line 590,col 57)",
            "(line 591,col 9)-(line 591,col 60)",
            "(line 592,col 9)-(line 592,col 62)",
            "(line 594,col 9)-(line 594,col 84)",
            "(line 595,col 9)-(line 595,col 60)",
            "(line 596,col 9)-(line 596,col 65)",
            "(line 597,col 9)-(line 597,col 63)",
            "(line 599,col 9)-(line 599,col 84)",
            "(line 600,col 9)-(line 600,col 60)",
            "(line 601,col 9)-(line 601,col 63)",
            "(line 602,col 9)-(line 602,col 65)",
            "(line 604,col 9)-(line 604,col 60)",
            "(line 605,col 9)-(line 605,col 60)",
            "(line 606,col 9)-(line 606,col 65)",
            "(line 607,col 9)-(line 607,col 63)",
            "(line 609,col 9)-(line 609,col 60)",
            "(line 610,col 9)-(line 610,col 60)",
            "(line 611,col 9)-(line 611,col 63)",
            "(line 612,col 9)-(line 612,col 65)",
            "(line 614,col 9)-(line 614,col 62)",
            "(line 615,col 9)-(line 615,col 61)",
            "(line 616,col 9)-(line 616,col 63)",
            "(line 617,col 9)-(line 617,col 63)",
            "(line 619,col 9)-(line 626,col 9)",
            "(line 628,col 9)-(line 635,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.ArrayRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java",
        "signature": "org.apache.commons.math.linear.ArrayRealVectorTest.testDataInOut()",
        "snippet": "    public void testDataInOut() {\n\n        ArrayRealVector v1 = new ArrayRealVector(vec1);\n        ArrayRealVector v2 = new ArrayRealVector(vec2);\n        ArrayRealVector v4 = new ArrayRealVector(vec4);\n        RealVectorTestImpl v2_t = new RealVectorTestImpl(vec2);\n\n        RealVector v_append_1 = v1.append(v2);\n        assertEquals(\"testData len\", 6, v_append_1.getDimension());\n        assertEquals(\"testData is 4.0 \", 4.0, v_append_1.getEntry(3));\n\n        RealVector v_append_2 = v1.append(2.0);\n        assertEquals(\"testData len\", 4, v_append_2.getDimension());\n        assertEquals(\"testData is 2.0 \", 2.0, v_append_2.getEntry(3));\n\n        RealVector v_append_3 = v1.append(vec2);\n        assertEquals(\"testData len\", 6, v_append_3.getDimension());\n        assertEquals(\"testData is  \", 4.0, v_append_3.getEntry(3));\n\n        RealVector v_append_4 = v1.append(v2_t);\n        assertEquals(\"testData len\", 6, v_append_4.getDimension());\n        assertEquals(\"testData is 4.0 \", 4.0, v_append_4.getEntry(3));\n\n        RealVector v_append_5 = v1.append((RealVector) v2);\n        assertEquals(\"testData len\", 6, v_append_5.getDimension());\n        assertEquals(\"testData is 4.0 \", 4.0, v_append_5.getEntry(3));\n\n        RealVector v_copy = v1.copy();\n        assertEquals(\"testData len\", 3, v_copy.getDimension());\n        assertNotSame(\"testData not same object \", v1.data, v_copy.getData());\n\n        double[] a_double = v1.toArray();\n        assertEquals(\"testData len\", 3, a_double.length);\n        assertNotSame(\"testData not same object \", v1.data, a_double);\n\n\n//      ArrayRealVector vout4 = (ArrayRealVector) v1.clone();\n//      assertEquals(\"testData len\", 3, vout4.getDimension());\n//      assertEquals(\"testData not same object \", v1.data, vout4.data);\n\n\n        RealVector vout5 = v4.getSubVector(3, 3);\n        assertEquals(\"testData len\", 3, vout5.getDimension());\n        assertEquals(\"testData is 4.0 \", 5.0, vout5.getEntry(1));\n        try {\n            v4.getSubVector(3, 7);\n            fail(\"MatrixIndexException expected\");\n        } catch (MatrixIndexException ex) {\n            // expected behavior\n        } catch (Exception e) {\n            fail(\"wrong exception caught\");\n        }\n\n        ArrayRealVector v_set1 = (ArrayRealVector) v1.copy();\n        v_set1.setEntry(1, 11.0);\n        assertEquals(\"testData is 11.0 \", 11.0, v_set1.getEntry(1));\n        try {\n            v_set1.setEntry(3, 11.0);\n            fail(\"MatrixIndexException expected\");\n        } catch (MatrixIndexException ex) {\n            // expected behavior\n        } catch (Exception e) {\n            fail(\"wrong exception caught\");\n        }\n\n        ArrayRealVector v_set2 = (ArrayRealVector) v4.copy();\n        v_set2.set(3, v1);\n        assertEquals(\"testData is 1.0 \", 1.0, v_set2.getEntry(3));\n        assertEquals(\"testData is 7.0 \", 7.0, v_set2.getEntry(6));\n        try {\n            v_set2.set(7, v1);\n            fail(\"MatrixIndexException expected\");\n        } catch (MatrixIndexException ex) {\n            // expected behavior\n        } catch (Exception e) {\n            fail(\"wrong exception caught\");\n        }\n\n        ArrayRealVector v_set3 = (ArrayRealVector) v1.copy();\n        v_set3.set(13.0);\n        assertEquals(\"testData is 13.0 \", 13.0, v_set3.getEntry(2));\n\n        try {\n            v_set3.getEntry(23);\n            fail(\"ArrayIndexOutOfBoundsException expected\");\n        } catch (ArrayIndexOutOfBoundsException ex) {\n            // expected behavior\n        } catch (Exception e) {\n            fail(\"wrong exception caught\");\n        }\n\n        ArrayRealVector v_set4 = (ArrayRealVector) v4.copy();\n        v_set4.setSubVector(3, v2_t);\n        assertEquals(\"testData is 1.0 \", 4.0, v_set4.getEntry(3));\n        assertEquals(\"testData is 7.0 \", 7.0, v_set4.getEntry(6));\n        try {\n            v_set4.setSubVector(7, v2_t);\n            fail(\"MatrixIndexException expected\");\n        } catch (MatrixIndexException ex) {\n            // expected behavior\n        } catch (Exception e) {\n            fail(\"wrong exception caught\");\n        }\n\n\n        ArrayRealVector vout10 = (ArrayRealVector) v1.copy();\n        ArrayRealVector vout10_2 = (ArrayRealVector) v1.copy();\n        assertEquals(vout10, vout10_2);\n        vout10_2.setEntry(0, 1.1);\n        assertNotSame(vout10, vout10_2);\n\n    }\n",
        "begin_line": 639,
        "end_line": 750,
        "comment": "",
        "child_ranges": [
            "(line 641,col 9)-(line 641,col 55)",
            "(line 642,col 9)-(line 642,col 55)",
            "(line 643,col 9)-(line 643,col 55)",
            "(line 644,col 9)-(line 644,col 63)",
            "(line 646,col 9)-(line 646,col 46)",
            "(line 647,col 9)-(line 647,col 67)",
            "(line 648,col 9)-(line 648,col 70)",
            "(line 650,col 9)-(line 650,col 47)",
            "(line 651,col 9)-(line 651,col 67)",
            "(line 652,col 9)-(line 652,col 70)",
            "(line 654,col 9)-(line 654,col 48)",
            "(line 655,col 9)-(line 655,col 67)",
            "(line 656,col 9)-(line 656,col 67)",
            "(line 658,col 9)-(line 658,col 48)",
            "(line 659,col 9)-(line 659,col 67)",
            "(line 660,col 9)-(line 660,col 70)",
            "(line 662,col 9)-(line 662,col 59)",
            "(line 663,col 9)-(line 663,col 67)",
            "(line 664,col 9)-(line 664,col 70)",
            "(line 666,col 9)-(line 666,col 38)",
            "(line 667,col 9)-(line 667,col 63)",
            "(line 668,col 9)-(line 668,col 78)",
            "(line 670,col 9)-(line 670,col 41)",
            "(line 671,col 9)-(line 671,col 57)",
            "(line 672,col 9)-(line 672,col 70)",
            "(line 680,col 9)-(line 680,col 49)",
            "(line 681,col 9)-(line 681,col 62)",
            "(line 682,col 9)-(line 682,col 65)",
            "(line 683,col 9)-(line 690,col 9)",
            "(line 692,col 9)-(line 692,col 61)",
            "(line 693,col 9)-(line 693,col 33)",
            "(line 694,col 9)-(line 694,col 68)",
            "(line 695,col 9)-(line 702,col 9)",
            "(line 704,col 9)-(line 704,col 61)",
            "(line 705,col 9)-(line 705,col 26)",
            "(line 706,col 9)-(line 706,col 66)",
            "(line 707,col 9)-(line 707,col 66)",
            "(line 708,col 9)-(line 715,col 9)",
            "(line 717,col 9)-(line 717,col 61)",
            "(line 718,col 9)-(line 718,col 25)",
            "(line 719,col 9)-(line 719,col 68)",
            "(line 721,col 9)-(line 728,col 9)",
            "(line 730,col 9)-(line 730,col 61)",
            "(line 731,col 9)-(line 731,col 37)",
            "(line 732,col 9)-(line 732,col 66)",
            "(line 733,col 9)-(line 733,col 66)",
            "(line 734,col 9)-(line 741,col 9)",
            "(line 744,col 9)-(line 744,col 61)",
            "(line 745,col 9)-(line 745,col 63)",
            "(line 746,col 9)-(line 746,col 39)",
            "(line 747,col 9)-(line 747,col 34)",
            "(line 748,col 9)-(line 748,col 40)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.ArrayRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java",
        "signature": "org.apache.commons.math.linear.ArrayRealVectorTest.testMapFunctions()",
        "snippet": "    public void testMapFunctions() {\n        ArrayRealVector v1 = new ArrayRealVector(vec1);\n\n        //octave =  v1 .+ 2.0\n        RealVector v_mapAdd = v1.mapAdd(2.0d);\n        double[] result_mapAdd = {3d, 4d, 5d};\n        assertClose(\"compare vectors\" ,result_mapAdd,v_mapAdd.getData(),normTolerance);\n\n        //octave =  v1 .+ 2.0\n        RealVector v_mapAddToSelf = v1.copy();\n        v_mapAddToSelf.mapAddToSelf(2.0d);\n        double[] result_mapAddToSelf = {3d, 4d, 5d};\n        assertClose(\"compare vectors\" ,result_mapAddToSelf,v_mapAddToSelf.getData(),normTolerance);\n\n        //octave =  v1 .- 2.0\n        RealVector v_mapSubtract = v1.mapSubtract(2.0d);\n        double[] result_mapSubtract = {-1d, 0d, 1d};\n        assertClose(\"compare vectors\" ,result_mapSubtract,v_mapSubtract.getData(),normTolerance);\n\n        //octave =  v1 .- 2.0\n        RealVector v_mapSubtractToSelf = v1.copy();\n        v_mapSubtractToSelf.mapSubtractToSelf(2.0d);\n        double[] result_mapSubtractToSelf = {-1d, 0d, 1d};\n        assertClose(\"compare vectors\" ,result_mapSubtractToSelf,v_mapSubtractToSelf.getData(),normTolerance);\n\n        //octave =  v1 .* 2.0\n        RealVector v_mapMultiply = v1.mapMultiply(2.0d);\n        double[] result_mapMultiply = {2d, 4d, 6d};\n        assertClose(\"compare vectors\" ,result_mapMultiply,v_mapMultiply.getData(),normTolerance);\n\n        //octave =  v1 .* 2.0\n        RealVector v_mapMultiplyToSelf = v1.copy();\n        v_mapMultiplyToSelf.mapMultiplyToSelf(2.0d);\n        double[] result_mapMultiplyToSelf = {2d, 4d, 6d};\n        assertClose(\"compare vectors\" ,result_mapMultiplyToSelf,v_mapMultiplyToSelf.getData(),normTolerance);\n\n        //octave =  v1 ./ 2.0\n        RealVector v_mapDivide = v1.mapDivide(2.0d);\n        double[] result_mapDivide = {.5d, 1d, 1.5d};\n        assertClose(\"compare vectors\" ,result_mapDivide,v_mapDivide.getData(),normTolerance);\n\n        //octave =  v1 ./ 2.0\n        RealVector v_mapDivideToSelf = v1.copy();\n        v_mapDivideToSelf.mapDivideToSelf(2.0d);\n        double[] result_mapDivideToSelf = {.5d, 1d, 1.5d};\n        assertClose(\"compare vectors\" ,result_mapDivideToSelf,v_mapDivideToSelf.getData(),normTolerance);\n\n        //octave =  v1 .^ 2.0\n        RealVector v_mapPow = v1.mapPow(2.0d);\n        double[] result_mapPow = {1d, 4d, 9d};\n        assertClose(\"compare vectors\" ,result_mapPow,v_mapPow.getData(),normTolerance);\n\n        //octave =  v1 .^ 2.0\n        RealVector v_mapPowToSelf = v1.copy();\n        v_mapPowToSelf.mapPowToSelf(2.0d);\n        double[] result_mapPowToSelf = {1d, 4d, 9d};\n        assertClose(\"compare vectors\" ,result_mapPowToSelf,v_mapPowToSelf.getData(),normTolerance);\n\n        //octave =  exp(v1)\n        RealVector v_mapExp = v1.mapExp();\n        double[] result_mapExp = {2.718281828459045e+00d,7.389056098930650e+00d, 2.008553692318767e+01d};\n        assertClose(\"compare vectors\" ,result_mapExp,v_mapExp.getData(),normTolerance);\n\n        //octave =  exp(v1)\n        RealVector v_mapExpToSelf = v1.copy();\n        v_mapExpToSelf.mapExpToSelf();\n        double[] result_mapExpToSelf = {2.718281828459045e+00d,7.389056098930650e+00d, 2.008553692318767e+01d};\n        assertClose(\"compare vectors\" ,result_mapExpToSelf,v_mapExpToSelf.getData(),normTolerance);\n\n\n        //octave =  ???\n        RealVector v_mapExpm1 = v1.mapExpm1();\n        double[] result_mapExpm1 = {1.718281828459045d,6.38905609893065d, 19.085536923187668d};\n        assertClose(\"compare vectors\" ,result_mapExpm1,v_mapExpm1.getData(),normTolerance);\n\n        //octave =  ???\n        RealVector v_mapExpm1ToSelf = v1.copy();\n        v_mapExpm1ToSelf.mapExpm1ToSelf();\n        double[] result_mapExpm1ToSelf = {1.718281828459045d,6.38905609893065d, 19.085536923187668d};\n        assertClose(\"compare vectors\" ,result_mapExpm1ToSelf,v_mapExpm1ToSelf.getData(),normTolerance);\n\n        //octave =  log(v1)\n        RealVector v_mapLog = v1.mapLog();\n        double[] result_mapLog = {0d,6.931471805599453e-01d, 1.098612288668110e+00d};\n        assertClose(\"compare vectors\" ,result_mapLog,v_mapLog.getData(),normTolerance);\n\n        //octave =  log(v1)\n        RealVector v_mapLogToSelf = v1.copy();\n        v_mapLogToSelf.mapLogToSelf();\n        double[] result_mapLogToSelf = {0d,6.931471805599453e-01d, 1.098612288668110e+00d};\n        assertClose(\"compare vectors\" ,result_mapLogToSelf,v_mapLogToSelf.getData(),normTolerance);\n\n        //octave =  log10(v1)\n        RealVector v_mapLog10 = v1.mapLog10();\n        double[] result_mapLog10 = {0d,3.010299956639812e-01d, 4.771212547196624e-01d};\n        assertClose(\"compare vectors\" ,result_mapLog10,v_mapLog10.getData(),normTolerance);\n\n        //octave =  log(v1)\n        RealVector v_mapLog10ToSelf = v1.copy();\n        v_mapLog10ToSelf.mapLog10ToSelf();\n        double[] result_mapLog10ToSelf = {0d,3.010299956639812e-01d, 4.771212547196624e-01d};\n        assertClose(\"compare vectors\" ,result_mapLog10ToSelf,v_mapLog10ToSelf.getData(),normTolerance);\n\n        //octave =  ???\n        RealVector v_mapLog1p = v1.mapLog1p();\n        double[] result_mapLog1p = {0.6931471805599453d,1.0986122886681096d,1.3862943611198906d};\n        assertClose(\"compare vectors\" ,result_mapLog1p,v_mapLog1p.getData(),normTolerance);\n\n        //octave =  ???\n        RealVector v_mapLog1pToSelf = v1.copy();\n        v_mapLog1pToSelf.mapLog1pToSelf();\n        double[] result_mapLog1pToSelf = {0.6931471805599453d,1.0986122886681096d,1.3862943611198906d};\n        assertClose(\"compare vectors\" ,result_mapLog1pToSelf,v_mapLog1pToSelf.getData(),normTolerance);\n\n        //octave =  cosh(v1)\n        RealVector v_mapCosh = v1.mapCosh();\n        double[] result_mapCosh = {1.543080634815244e+00d,3.762195691083631e+00d, 1.006766199577777e+01d};\n        assertClose(\"compare vectors\" ,result_mapCosh,v_mapCosh.getData(),normTolerance);\n\n        //octave =  cosh(v1)\n        RealVector v_mapCoshToSelf = v1.copy();\n        v_mapCoshToSelf.mapCoshToSelf();\n        double[] result_mapCoshToSelf = {1.543080634815244e+00d,3.762195691083631e+00d, 1.006766199577777e+01d};\n        assertClose(\"compare vectors\" ,result_mapCoshToSelf,v_mapCoshToSelf.getData(),normTolerance);\n\n        //octave =  sinh(v1)\n        RealVector v_mapSinh = v1.mapSinh();\n        double[] result_mapSinh = {1.175201193643801e+00d,3.626860407847019e+00d, 1.001787492740990e+01d};\n        assertClose(\"compare vectors\" ,result_mapSinh,v_mapSinh.getData(),normTolerance);\n\n        //octave =  sinh(v1)\n        RealVector v_mapSinhToSelf = v1.copy();\n        v_mapSinhToSelf.mapSinhToSelf();\n        double[] result_mapSinhToSelf = {1.175201193643801e+00d,3.626860407847019e+00d, 1.001787492740990e+01d};\n        assertClose(\"compare vectors\" ,result_mapSinhToSelf,v_mapSinhToSelf.getData(),normTolerance);\n\n        //octave =  tanh(v1)\n        RealVector v_mapTanh = v1.mapTanh();\n        double[] result_mapTanh = {7.615941559557649e-01d,9.640275800758169e-01d,9.950547536867305e-01d};\n        assertClose(\"compare vectors\" ,result_mapTanh,v_mapTanh.getData(),normTolerance);\n\n        //octave =  tanh(v1)\n        RealVector v_mapTanhToSelf = v1.copy();\n        v_mapTanhToSelf.mapTanhToSelf();\n        double[] result_mapTanhToSelf = {7.615941559557649e-01d,9.640275800758169e-01d,9.950547536867305e-01d};\n        assertClose(\"compare vectors\" ,result_mapTanhToSelf,v_mapTanhToSelf.getData(),normTolerance);\n\n        //octave =  cos(v1)\n        RealVector v_mapCos = v1.mapCos();\n        double[] result_mapCos = {5.403023058681398e-01d,-4.161468365471424e-01d, -9.899924966004454e-01d};\n        assertClose(\"compare vectors\" ,result_mapCos,v_mapCos.getData(),normTolerance);\n\n        //octave =  cos(v1)\n        RealVector v_mapCosToSelf = v1.copy();\n        v_mapCosToSelf.mapCosToSelf();\n        double[] result_mapCosToSelf = {5.403023058681398e-01d,-4.161468365471424e-01d, -9.899924966004454e-01d};\n        assertClose(\"compare vectors\" ,result_mapCosToSelf,v_mapCosToSelf.getData(),normTolerance);\n\n        //octave =  sin(v1)\n        RealVector v_mapSin = v1.mapSin();\n        double[] result_mapSin = {8.414709848078965e-01d,9.092974268256817e-01d,1.411200080598672e-01d};\n        assertClose(\"compare vectors\" ,result_mapSin,v_mapSin.getData(),normTolerance);\n\n        //octave =  sin(v1)\n        RealVector v_mapSinToSelf = v1.copy();\n        v_mapSinToSelf.mapSinToSelf();\n        double[] result_mapSinToSelf = {8.414709848078965e-01d,9.092974268256817e-01d,1.411200080598672e-01d};\n        assertClose(\"compare vectors\" ,result_mapSinToSelf,v_mapSinToSelf.getData(),normTolerance);\n\n        //octave =  tan(v1)\n        RealVector v_mapTan = v1.mapTan();\n        double[] result_mapTan = {1.557407724654902e+00d,-2.185039863261519e+00d,-1.425465430742778e-01d};\n        assertClose(\"compare vectors\" ,result_mapTan,v_mapTan.getData(),normTolerance);\n\n        //octave =  tan(v1)\n        RealVector v_mapTanToSelf = v1.copy();\n        v_mapTanToSelf.mapTanToSelf();\n        double[] result_mapTanToSelf = {1.557407724654902e+00d,-2.185039863261519e+00d,-1.425465430742778e-01d};\n        assertClose(\"compare vectors\" ,result_mapTanToSelf,v_mapTanToSelf.getData(),normTolerance);\n\n        double[] vat_a = {0d, 0.5d, 1.0d};\n        ArrayRealVector vat = new ArrayRealVector(vat_a);\n\n        //octave =  acos(vat)\n        RealVector v_mapAcos = vat.mapAcos();\n        double[] result_mapAcos = {1.570796326794897e+00d,1.047197551196598e+00d, 0.0d};\n        assertClose(\"compare vectors\" ,result_mapAcos,v_mapAcos.getData(),normTolerance);\n\n        //octave =  acos(vat)\n        RealVector v_mapAcosToSelf = vat.copy();\n        v_mapAcosToSelf.mapAcosToSelf();\n        double[] result_mapAcosToSelf = {1.570796326794897e+00d,1.047197551196598e+00d, 0.0d};\n        assertClose(\"compare vectors\" ,result_mapAcosToSelf,v_mapAcosToSelf.getData(),normTolerance);\n\n        //octave =  asin(vat)\n        RealVector v_mapAsin = vat.mapAsin();\n        double[] result_mapAsin = {0.0d,5.235987755982989e-01d,1.570796326794897e+00d};\n        assertClose(\"compare vectors\" ,result_mapAsin,v_mapAsin.getData(),normTolerance);\n\n        //octave =  asin(vat)\n        RealVector v_mapAsinToSelf = vat.copy();\n        v_mapAsinToSelf.mapAsinToSelf();\n        double[] result_mapAsinToSelf = {0.0d,5.235987755982989e-01d,1.570796326794897e+00d};\n        assertClose(\"compare vectors\" ,result_mapAsinToSelf,v_mapAsinToSelf.getData(),normTolerance);\n\n        //octave =  atan(vat)\n        RealVector v_mapAtan = vat.mapAtan();\n        double[] result_mapAtan = {0.0d,4.636476090008061e-01d,7.853981633974483e-01d};\n        assertClose(\"compare vectors\" ,result_mapAtan,v_mapAtan.getData(),normTolerance);\n\n        //octave =  atan(vat)\n        RealVector v_mapAtanToSelf = vat.copy();\n        v_mapAtanToSelf.mapAtanToSelf();\n        double[] result_mapAtanToSelf = {0.0d,4.636476090008061e-01d,7.853981633974483e-01d};\n        assertClose(\"compare vectors\" ,result_mapAtanToSelf,v_mapAtanToSelf.getData(),normTolerance);\n\n        //octave =  v1 .^-1\n        RealVector v_mapInv = v1.mapInv();\n        double[] result_mapInv = {1d,0.5d,3.333333333333333e-01d};\n        assertClose(\"compare vectors\" ,result_mapInv,v_mapInv.getData(),normTolerance);\n\n        //octave =  v1 .^-1\n        RealVector v_mapInvToSelf = v1.copy();\n        v_mapInvToSelf.mapInvToSelf();\n        double[] result_mapInvToSelf = {1d,0.5d,3.333333333333333e-01d};\n        assertClose(\"compare vectors\" ,result_mapInvToSelf,v_mapInvToSelf.getData(),normTolerance);\n\n        double[] abs_a = {-1.0d, 0.0d, 1.0d};\n        ArrayRealVector abs_v = new ArrayRealVector(abs_a);\n\n        //octave =  abs(abs_v)\n        RealVector v_mapAbs = abs_v.mapAbs();\n        double[] result_mapAbs = {1d,0d,1d};\n        assertClose(\"compare vectors\" ,result_mapAbs,v_mapAbs.getData(),normTolerance);\n\n        //octave = abs(abs_v)\n        RealVector v_mapAbsToSelf = abs_v.copy();\n        v_mapAbsToSelf.mapAbsToSelf();\n        double[] result_mapAbsToSelf = {1d,0d,1d};\n        assertClose(\"compare vectors\" ,result_mapAbsToSelf,v_mapAbsToSelf.getData(),normTolerance);\n\n        //octave =   sqrt(v1)\n        RealVector v_mapSqrt = v1.mapSqrt();\n        double[] result_mapSqrt = {1d,1.414213562373095e+00d,1.732050807568877e+00d};\n        assertClose(\"compare vectors\" ,result_mapSqrt,v_mapSqrt.getData(),normTolerance);\n\n        //octave =  sqrt(v1)\n        RealVector v_mapSqrtToSelf = v1.copy();\n        v_mapSqrtToSelf.mapSqrtToSelf();\n        double[] result_mapSqrtToSelf = {1d,1.414213562373095e+00d,1.732050807568877e+00d};\n        assertClose(\"compare vectors\" ,result_mapSqrtToSelf,v_mapSqrtToSelf.getData(),normTolerance);\n\n        double[] cbrt_a = {-2.0d, 0.0d, 2.0d};\n        ArrayRealVector cbrt_v = new ArrayRealVector(cbrt_a);\n\n        //octave =  ???\n        RealVector v_mapCbrt = cbrt_v.mapCbrt();\n        double[] result_mapCbrt = {-1.2599210498948732d,0d,1.2599210498948732d};\n        assertClose(\"compare vectors\" ,result_mapCbrt,v_mapCbrt.getData(),normTolerance);\n\n        //octave = ???\n        RealVector v_mapCbrtToSelf = cbrt_v.copy();\n        v_mapCbrtToSelf.mapCbrtToSelf();\n        double[] result_mapCbrtToSelf =  {-1.2599210498948732d,0d,1.2599210498948732d};\n        assertClose(\"compare vectors\" ,result_mapCbrtToSelf,v_mapCbrtToSelf.getData(),normTolerance);\n\n        double[] ceil_a = {-1.1d, 0.9d, 1.1d};\n        ArrayRealVector ceil_v = new ArrayRealVector(ceil_a);\n\n        //octave =  ceil(ceil_v)\n        RealVector v_mapCeil = ceil_v.mapCeil();\n        double[] result_mapCeil = {-1d,1d,2d};\n        assertClose(\"compare vectors\" ,result_mapCeil,v_mapCeil.getData(),normTolerance);\n\n        //octave = ceil(ceil_v)\n        RealVector v_mapCeilToSelf = ceil_v.copy();\n        v_mapCeilToSelf.mapCeilToSelf();\n        double[] result_mapCeilToSelf =  {-1d,1d,2d};\n        assertClose(\"compare vectors\" ,result_mapCeilToSelf,v_mapCeilToSelf.getData(),normTolerance);\n\n        //octave =  floor(ceil_v)\n        RealVector v_mapFloor = ceil_v.mapFloor();\n        double[] result_mapFloor = {-2d,0d,1d};\n        assertClose(\"compare vectors\" ,result_mapFloor,v_mapFloor.getData(),normTolerance);\n\n        //octave = floor(ceil_v)\n        RealVector v_mapFloorToSelf = ceil_v.copy();\n        v_mapFloorToSelf.mapFloorToSelf();\n        double[] result_mapFloorToSelf =  {-2d,0d,1d};\n        assertClose(\"compare vectors\" ,result_mapFloorToSelf,v_mapFloorToSelf.getData(),normTolerance);\n\n        //octave =  ???\n        RealVector v_mapRint = ceil_v.mapRint();\n        double[] result_mapRint = {-1d,1d,1d};\n        assertClose(\"compare vectors\" ,result_mapRint,v_mapRint.getData(),normTolerance);\n\n        //octave = ???\n        RealVector v_mapRintToSelf = ceil_v.copy();\n        v_mapRintToSelf.mapRintToSelf();\n        double[] result_mapRintToSelf =  {-1d,1d,1d};\n        assertClose(\"compare vectors\" ,result_mapRintToSelf,v_mapRintToSelf.getData(),normTolerance);\n\n        //octave =  ???\n        RealVector v_mapSignum = ceil_v.mapSignum();\n        double[] result_mapSignum = {-1d,1d,1d};\n        assertClose(\"compare vectors\" ,result_mapSignum,v_mapSignum.getData(),normTolerance);\n\n        //octave = ???\n        RealVector v_mapSignumToSelf = ceil_v.copy();\n        v_mapSignumToSelf.mapSignumToSelf();\n        double[] result_mapSignumToSelf =  {-1d,1d,1d};\n        assertClose(\"compare vectors\" ,result_mapSignumToSelf,v_mapSignumToSelf.getData(),normTolerance);\n\n\n        // Is with the used resolutions of limited value as test\n        //octave =  ???\n        RealVector v_mapUlp = ceil_v.mapUlp();\n        double[] result_mapUlp = {2.220446049250313E-16d,1.1102230246251565E-16d,2.220446049250313E-16d};\n        assertClose(\"compare vectors\" ,result_mapUlp,v_mapUlp.getData(),normTolerance);\n\n        //octave = ???\n        RealVector v_mapUlpToSelf = ceil_v.copy();\n        v_mapUlpToSelf.mapUlpToSelf();\n        double[] result_mapUlpToSelf = {2.220446049250313E-16d,1.1102230246251565E-16d,2.220446049250313E-16d};\n        assertClose(\"compare vectors\" ,result_mapUlpToSelf,v_mapUlpToSelf.getData(),normTolerance);\n\n    }\n",
        "begin_line": 752,
        "end_line": 1078,
        "comment": "",
        "child_ranges": [
            "(line 753,col 9)-(line 753,col 55)",
            "(line 756,col 9)-(line 756,col 46)",
            "(line 757,col 9)-(line 757,col 46)",
            "(line 758,col 9)-(line 758,col 87)",
            "(line 761,col 9)-(line 761,col 46)",
            "(line 762,col 9)-(line 762,col 42)",
            "(line 763,col 9)-(line 763,col 52)",
            "(line 764,col 9)-(line 764,col 99)",
            "(line 767,col 9)-(line 767,col 56)",
            "(line 768,col 9)-(line 768,col 52)",
            "(line 769,col 9)-(line 769,col 97)",
            "(line 772,col 9)-(line 772,col 51)",
            "(line 773,col 9)-(line 773,col 52)",
            "(line 774,col 9)-(line 774,col 58)",
            "(line 775,col 9)-(line 775,col 109)",
            "(line 778,col 9)-(line 778,col 56)",
            "(line 779,col 9)-(line 779,col 51)",
            "(line 780,col 9)-(line 780,col 97)",
            "(line 783,col 9)-(line 783,col 51)",
            "(line 784,col 9)-(line 784,col 52)",
            "(line 785,col 9)-(line 785,col 57)",
            "(line 786,col 9)-(line 786,col 109)",
            "(line 789,col 9)-(line 789,col 52)",
            "(line 790,col 9)-(line 790,col 52)",
            "(line 791,col 9)-(line 791,col 93)",
            "(line 794,col 9)-(line 794,col 49)",
            "(line 795,col 9)-(line 795,col 48)",
            "(line 796,col 9)-(line 796,col 58)",
            "(line 797,col 9)-(line 797,col 105)",
            "(line 800,col 9)-(line 800,col 46)",
            "(line 801,col 9)-(line 801,col 46)",
            "(line 802,col 9)-(line 802,col 87)",
            "(line 805,col 9)-(line 805,col 46)",
            "(line 806,col 9)-(line 806,col 42)",
            "(line 807,col 9)-(line 807,col 52)",
            "(line 808,col 9)-(line 808,col 99)",
            "(line 811,col 9)-(line 811,col 42)",
            "(line 812,col 9)-(line 812,col 105)",
            "(line 813,col 9)-(line 813,col 87)",
            "(line 816,col 9)-(line 816,col 46)",
            "(line 817,col 9)-(line 817,col 38)",
            "(line 818,col 9)-(line 818,col 111)",
            "(line 819,col 9)-(line 819,col 99)",
            "(line 823,col 9)-(line 823,col 46)",
            "(line 824,col 9)-(line 824,col 95)",
            "(line 825,col 9)-(line 825,col 91)",
            "(line 828,col 9)-(line 828,col 48)",
            "(line 829,col 9)-(line 829,col 42)",
            "(line 830,col 9)-(line 830,col 101)",
            "(line 831,col 9)-(line 831,col 103)",
            "(line 834,col 9)-(line 834,col 42)",
            "(line 835,col 9)-(line 835,col 85)",
            "(line 836,col 9)-(line 836,col 87)",
            "(line 839,col 9)-(line 839,col 46)",
            "(line 840,col 9)-(line 840,col 38)",
            "(line 841,col 9)-(line 841,col 91)",
            "(line 842,col 9)-(line 842,col 99)",
            "(line 845,col 9)-(line 845,col 46)",
            "(line 846,col 9)-(line 846,col 87)",
            "(line 847,col 9)-(line 847,col 91)",
            "(line 850,col 9)-(line 850,col 48)",
            "(line 851,col 9)-(line 851,col 42)",
            "(line 852,col 9)-(line 852,col 93)",
            "(line 853,col 9)-(line 853,col 103)",
            "(line 856,col 9)-(line 856,col 46)",
            "(line 857,col 9)-(line 857,col 97)",
            "(line 858,col 9)-(line 858,col 91)",
            "(line 861,col 9)-(line 861,col 48)",
            "(line 862,col 9)-(line 862,col 42)",
            "(line 863,col 9)-(line 863,col 103)",
            "(line 864,col 9)-(line 864,col 103)",
            "(line 867,col 9)-(line 867,col 44)",
            "(line 868,col 9)-(line 868,col 106)",
            "(line 869,col 9)-(line 869,col 89)",
            "(line 872,col 9)-(line 872,col 47)",
            "(line 873,col 9)-(line 873,col 40)",
            "(line 874,col 9)-(line 874,col 112)",
            "(line 875,col 9)-(line 875,col 101)",
            "(line 878,col 9)-(line 878,col 44)",
            "(line 879,col 9)-(line 879,col 106)",
            "(line 880,col 9)-(line 880,col 89)",
            "(line 883,col 9)-(line 883,col 47)",
            "(line 884,col 9)-(line 884,col 40)",
            "(line 885,col 9)-(line 885,col 112)",
            "(line 886,col 9)-(line 886,col 101)",
            "(line 889,col 9)-(line 889,col 44)",
            "(line 890,col 9)-(line 890,col 105)",
            "(line 891,col 9)-(line 891,col 89)",
            "(line 894,col 9)-(line 894,col 47)",
            "(line 895,col 9)-(line 895,col 40)",
            "(line 896,col 9)-(line 896,col 111)",
            "(line 897,col 9)-(line 897,col 101)",
            "(line 900,col 9)-(line 900,col 42)",
            "(line 901,col 9)-(line 901,col 107)",
            "(line 902,col 9)-(line 902,col 87)",
            "(line 905,col 9)-(line 905,col 46)",
            "(line 906,col 9)-(line 906,col 38)",
            "(line 907,col 9)-(line 907,col 113)",
            "(line 908,col 9)-(line 908,col 99)",
            "(line 911,col 9)-(line 911,col 42)",
            "(line 912,col 9)-(line 912,col 104)",
            "(line 913,col 9)-(line 913,col 87)",
            "(line 916,col 9)-(line 916,col 46)",
            "(line 917,col 9)-(line 917,col 38)",
            "(line 918,col 9)-(line 918,col 110)",
            "(line 919,col 9)-(line 919,col 99)",
            "(line 922,col 9)-(line 922,col 42)",
            "(line 923,col 9)-(line 923,col 106)",
            "(line 924,col 9)-(line 924,col 87)",
            "(line 927,col 9)-(line 927,col 46)",
            "(line 928,col 9)-(line 928,col 38)",
            "(line 929,col 9)-(line 929,col 112)",
            "(line 930,col 9)-(line 930,col 99)",
            "(line 932,col 9)-(line 932,col 42)",
            "(line 933,col 9)-(line 933,col 57)",
            "(line 936,col 9)-(line 936,col 45)",
            "(line 937,col 9)-(line 937,col 88)",
            "(line 938,col 9)-(line 938,col 89)",
            "(line 941,col 9)-(line 941,col 48)",
            "(line 942,col 9)-(line 942,col 40)",
            "(line 943,col 9)-(line 943,col 94)",
            "(line 944,col 9)-(line 944,col 101)",
            "(line 947,col 9)-(line 947,col 45)",
            "(line 948,col 9)-(line 948,col 87)",
            "(line 949,col 9)-(line 949,col 89)",
            "(line 952,col 9)-(line 952,col 48)",
            "(line 953,col 9)-(line 953,col 40)",
            "(line 954,col 9)-(line 954,col 93)",
            "(line 955,col 9)-(line 955,col 101)",
            "(line 958,col 9)-(line 958,col 45)",
            "(line 959,col 9)-(line 959,col 87)",
            "(line 960,col 9)-(line 960,col 89)",
            "(line 963,col 9)-(line 963,col 48)",
            "(line 964,col 9)-(line 964,col 40)",
            "(line 965,col 9)-(line 965,col 93)",
            "(line 966,col 9)-(line 966,col 101)",
            "(line 969,col 9)-(line 969,col 42)",
            "(line 970,col 9)-(line 970,col 66)",
            "(line 971,col 9)-(line 971,col 87)",
            "(line 974,col 9)-(line 974,col 46)",
            "(line 975,col 9)-(line 975,col 38)",
            "(line 976,col 9)-(line 976,col 72)",
            "(line 977,col 9)-(line 977,col 99)",
            "(line 979,col 9)-(line 979,col 45)",
            "(line 980,col 9)-(line 980,col 59)",
            "(line 983,col 9)-(line 983,col 45)",
            "(line 984,col 9)-(line 984,col 44)",
            "(line 985,col 9)-(line 985,col 87)",
            "(line 988,col 9)-(line 988,col 49)",
            "(line 989,col 9)-(line 989,col 38)",
            "(line 990,col 9)-(line 990,col 50)",
            "(line 991,col 9)-(line 991,col 99)",
            "(line 994,col 9)-(line 994,col 44)",
            "(line 995,col 9)-(line 995,col 85)",
            "(line 996,col 9)-(line 996,col 89)",
            "(line 999,col 9)-(line 999,col 47)",
            "(line 1000,col 9)-(line 1000,col 40)",
            "(line 1001,col 9)-(line 1001,col 91)",
            "(line 1002,col 9)-(line 1002,col 101)",
            "(line 1004,col 9)-(line 1004,col 46)",
            "(line 1005,col 9)-(line 1005,col 61)",
            "(line 1008,col 9)-(line 1008,col 48)",
            "(line 1009,col 9)-(line 1009,col 80)",
            "(line 1010,col 9)-(line 1010,col 89)",
            "(line 1013,col 9)-(line 1013,col 51)",
            "(line 1014,col 9)-(line 1014,col 40)",
            "(line 1015,col 9)-(line 1015,col 87)",
            "(line 1016,col 9)-(line 1016,col 101)",
            "(line 1018,col 9)-(line 1018,col 46)",
            "(line 1019,col 9)-(line 1019,col 61)",
            "(line 1022,col 9)-(line 1022,col 48)",
            "(line 1023,col 9)-(line 1023,col 46)",
            "(line 1024,col 9)-(line 1024,col 89)",
            "(line 1027,col 9)-(line 1027,col 51)",
            "(line 1028,col 9)-(line 1028,col 40)",
            "(line 1029,col 9)-(line 1029,col 53)",
            "(line 1030,col 9)-(line 1030,col 101)",
            "(line 1033,col 9)-(line 1033,col 50)",
            "(line 1034,col 9)-(line 1034,col 47)",
            "(line 1035,col 9)-(line 1035,col 91)",
            "(line 1038,col 9)-(line 1038,col 52)",
            "(line 1039,col 9)-(line 1039,col 42)",
            "(line 1040,col 9)-(line 1040,col 54)",
            "(line 1041,col 9)-(line 1041,col 103)",
            "(line 1044,col 9)-(line 1044,col 48)",
            "(line 1045,col 9)-(line 1045,col 46)",
            "(line 1046,col 9)-(line 1046,col 89)",
            "(line 1049,col 9)-(line 1049,col 51)",
            "(line 1050,col 9)-(line 1050,col 40)",
            "(line 1051,col 9)-(line 1051,col 53)",
            "(line 1052,col 9)-(line 1052,col 101)",
            "(line 1055,col 9)-(line 1055,col 52)",
            "(line 1056,col 9)-(line 1056,col 48)",
            "(line 1057,col 9)-(line 1057,col 93)",
            "(line 1060,col 9)-(line 1060,col 53)",
            "(line 1061,col 9)-(line 1061,col 44)",
            "(line 1062,col 9)-(line 1062,col 55)",
            "(line 1063,col 9)-(line 1063,col 105)",
            "(line 1068,col 9)-(line 1068,col 46)",
            "(line 1069,col 9)-(line 1069,col 105)",
            "(line 1070,col 9)-(line 1070,col 87)",
            "(line 1073,col 9)-(line 1073,col 50)",
            "(line 1074,col 9)-(line 1074,col 38)",
            "(line 1075,col 9)-(line 1075,col 111)",
            "(line 1076,col 9)-(line 1076,col 99)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.ArrayRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java",
        "signature": "org.apache.commons.math.linear.ArrayRealVectorTest.testBasicFunctions()",
        "snippet": "    public void testBasicFunctions() {\n        ArrayRealVector v1 = new ArrayRealVector(vec1);\n        ArrayRealVector v2 = new ArrayRealVector(vec2);\n        ArrayRealVector v5 = new ArrayRealVector(vec5);\n        ArrayRealVector v_null = new ArrayRealVector(vec_null);\n\n        RealVectorTestImpl v2_t = new RealVectorTestImpl(vec2);\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] A --> 8.4261497731763586307\n        double d_getNorm = v5.getNorm();\n        assertEquals(\"compare values  \", 8.4261497731763586307, d_getNorm);\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] vN --> 17\n        double d_getL1Norm = v5.getL1Norm();\n        assertEquals(\"compare values  \", 17.0, d_getL1Norm);\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] vn --> 6\n        double d_getLInfNorm = v5.getLInfNorm();\n        assertEquals(\"compare values  \", 6.0, d_getLInfNorm);\n\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist = v1.getDistance(v2);\n        assertEquals(\"compare values  \",v1.subtract(v2).getNorm(), dist );\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist_2 = v1.getDistance(v2_t);\n        assertEquals(\"compare values  \", v1.subtract(v2).getNorm(),dist_2 );\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist_3 = v1.getDistance((RealVector) v2);\n        assertEquals(\"compare values  \", v1.subtract(v2).getNorm(),dist_3 );\n\n        //octave =  ???\n        double d_getL1Distance = v1. getL1Distance(v2);\n        assertEquals(\"compare values  \",9d, d_getL1Distance );\n\n        double d_getL1Distance_2 = v1. getL1Distance(v2_t);\n        assertEquals(\"compare values  \",9d, d_getL1Distance_2 );\n\n        double d_getL1Distance_3 = v1. getL1Distance((RealVector) v2);\n        assertEquals(\"compare values  \",9d, d_getL1Distance_3 );\n\n        //octave =  ???\n        double d_getLInfDistance = v1. getLInfDistance(v2);\n        assertEquals(\"compare values  \",3d, d_getLInfDistance );\n\n        double d_getLInfDistance_2 = v1. getLInfDistance(v2_t);\n        assertEquals(\"compare values  \",3d, d_getLInfDistance_2 );\n\n        double d_getLInfDistance_3 = v1. getLInfDistance((RealVector) v2);\n        assertEquals(\"compare values  \",3d, d_getLInfDistance_3 );\n\n        //octave =  v1 + v2\n        ArrayRealVector v_add = v1.add(v2);\n        double[] result_add = {5d, 7d, 9d};\n        assertClose(\"compare vect\" ,v_add.getData(),result_add,normTolerance);\n\n        RealVectorTestImpl vt2 = new RealVectorTestImpl(vec2);\n        RealVector v_add_i = v1.add(vt2);\n        double[] result_add_i = {5d, 7d, 9d};\n        assertClose(\"compare vect\" ,v_add_i.getData(),result_add_i,normTolerance);\n\n        //octave =  v1 - v2\n        ArrayRealVector v_subtract = v1.subtract(v2);\n        double[] result_subtract = {-3d, -3d, -3d};\n        assertClose(\"compare vect\" ,v_subtract.getData(),result_subtract,normTolerance);\n\n        RealVector v_subtract_i = v1.subtract(vt2);\n        double[] result_subtract_i = {-3d, -3d, -3d};\n        assertClose(\"compare vect\" ,v_subtract_i.getData(),result_subtract_i,normTolerance);\n\n        // octave v1 .* v2\n        ArrayRealVector  v_ebeMultiply = v1.ebeMultiply(v2);\n        double[] result_ebeMultiply = {4d, 10d, 18d};\n        assertClose(\"compare vect\" ,v_ebeMultiply.getData(),result_ebeMultiply,normTolerance);\n\n        RealVector  v_ebeMultiply_2 = v1.ebeMultiply(v2_t);\n        double[] result_ebeMultiply_2 = {4d, 10d, 18d};\n        assertClose(\"compare vect\" ,v_ebeMultiply_2.getData(),result_ebeMultiply_2,normTolerance);\n\n        RealVector  v_ebeMultiply_3 = v1.ebeMultiply((RealVector) v2);\n        double[] result_ebeMultiply_3 = {4d, 10d, 18d};\n        assertClose(\"compare vect\" ,v_ebeMultiply_3.getData(),result_ebeMultiply_3,normTolerance);\n\n        // octave v1 ./ v2\n        ArrayRealVector  v_ebeDivide = v1.ebeDivide(v2);\n        double[] result_ebeDivide = {0.25d, 0.4d, 0.5d};\n        assertClose(\"compare vect\" ,v_ebeDivide.getData(),result_ebeDivide,normTolerance);\n\n        RealVector  v_ebeDivide_2 = v1.ebeDivide(v2_t);\n        double[] result_ebeDivide_2 = {0.25d, 0.4d, 0.5d};\n        assertClose(\"compare vect\" ,v_ebeDivide_2.getData(),result_ebeDivide_2,normTolerance);\n\n        RealVector  v_ebeDivide_3 = v1.ebeDivide((RealVector) v2);\n        double[] result_ebeDivide_3 = {0.25d, 0.4d, 0.5d};\n        assertClose(\"compare vect\" ,v_ebeDivide_3.getData(),result_ebeDivide_3,normTolerance);\n\n        // octave  dot(v1,v2)\n        double dot =  v1.dotProduct(v2);\n        assertEquals(\"compare val \",32d, dot);\n\n        // octave  dot(v1,v2_t)\n        double dot_2 =  v1.dotProduct(v2_t);\n        assertEquals(\"compare val \",32d, dot_2);\n\n        RealMatrix m_outerProduct = v1.outerProduct(v2);\n        assertEquals(\"compare val \",4d, m_outerProduct.getEntry(0,0));\n\n        RealMatrix m_outerProduct_2 = v1.outerProduct(v2_t);\n        assertEquals(\"compare val \",4d, m_outerProduct_2.getEntry(0,0));\n\n        RealMatrix m_outerProduct_3 = v1.outerProduct((RealVector) v2);\n        assertEquals(\"compare val \",4d, m_outerProduct_3.getEntry(0,0));\n\n        RealVector v_unitVector = v1.unitVector();\n        RealVector v_unitVector_2 = v1.mapDivide(v1.getNorm());\n        assertClose(\"compare vect\" ,v_unitVector.getData(),v_unitVector_2.getData(),normTolerance);\n\n        try {\n            v_null.unitVector();\n            fail(\"Expecting ArithmeticException\");\n        } catch (ArithmeticException ex) {\n            // expected behavior\n        } catch (Exception e) {\n            fail(\"wrong exception caught\");\n        }\n\n        ArrayRealVector v_unitize = (ArrayRealVector)v1.copy();\n        v_unitize.unitize();\n        assertClose(\"compare vect\" ,v_unitVector_2.getData(),v_unitize.getData(),normTolerance);\n        try {\n            v_null.unitize();\n            fail(\"Expecting ArithmeticException\");\n        } catch (ArithmeticException ex) {\n            // expected behavior\n        } catch (Exception e) {\n            fail(\"wrong exception caught\");\n        }\n\n        ArrayRealVector v_projection = v1.projection(v2);\n        double[] result_projection = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        assertClose(\"compare vect\", v_projection.getData(), result_projection, normTolerance);\n\n        RealVector v_projection_2 = v1.projection(v2_t);\n        double[] result_projection_2 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        assertClose(\"compare vect\", v_projection_2.getData(), result_projection_2, normTolerance);\n\n        RealVector v_projection_3 = v1.projection(v2.getData());\n        double[] result_projection_3 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        assertClose(\"compare vect\", v_projection_3.getData(), result_projection_3, normTolerance);\n\n    }\n",
        "begin_line": 1080,
        "end_line": 1232,
        "comment": "",
        "child_ranges": [
            "(line 1081,col 9)-(line 1081,col 55)",
            "(line 1082,col 9)-(line 1082,col 55)",
            "(line 1083,col 9)-(line 1083,col 55)",
            "(line 1084,col 9)-(line 1084,col 63)",
            "(line 1086,col 9)-(line 1086,col 63)",
            "(line 1089,col 9)-(line 1089,col 40)",
            "(line 1090,col 9)-(line 1090,col 75)",
            "(line 1093,col 9)-(line 1093,col 44)",
            "(line 1094,col 9)-(line 1094,col 60)",
            "(line 1097,col 9)-(line 1097,col 48)",
            "(line 1098,col 9)-(line 1098,col 61)",
            "(line 1102,col 9)-(line 1102,col 41)",
            "(line 1103,col 9)-(line 1103,col 74)",
            "(line 1106,col 9)-(line 1106,col 45)",
            "(line 1107,col 9)-(line 1107,col 76)",
            "(line 1110,col 9)-(line 1110,col 56)",
            "(line 1111,col 9)-(line 1111,col 76)",
            "(line 1114,col 9)-(line 1114,col 55)",
            "(line 1115,col 9)-(line 1115,col 62)",
            "(line 1117,col 9)-(line 1117,col 59)",
            "(line 1118,col 9)-(line 1118,col 64)",
            "(line 1120,col 9)-(line 1120,col 70)",
            "(line 1121,col 9)-(line 1121,col 64)",
            "(line 1124,col 9)-(line 1124,col 59)",
            "(line 1125,col 9)-(line 1125,col 64)",
            "(line 1127,col 9)-(line 1127,col 63)",
            "(line 1128,col 9)-(line 1128,col 66)",
            "(line 1130,col 9)-(line 1130,col 74)",
            "(line 1131,col 9)-(line 1131,col 66)",
            "(line 1134,col 9)-(line 1134,col 43)",
            "(line 1135,col 9)-(line 1135,col 43)",
            "(line 1136,col 9)-(line 1136,col 78)",
            "(line 1138,col 9)-(line 1138,col 62)",
            "(line 1139,col 9)-(line 1139,col 41)",
            "(line 1140,col 9)-(line 1140,col 45)",
            "(line 1141,col 9)-(line 1141,col 82)",
            "(line 1144,col 9)-(line 1144,col 53)",
            "(line 1145,col 9)-(line 1145,col 51)",
            "(line 1146,col 9)-(line 1146,col 88)",
            "(line 1148,col 9)-(line 1148,col 51)",
            "(line 1149,col 9)-(line 1149,col 53)",
            "(line 1150,col 9)-(line 1150,col 92)",
            "(line 1153,col 9)-(line 1153,col 60)",
            "(line 1154,col 9)-(line 1154,col 53)",
            "(line 1155,col 9)-(line 1155,col 94)",
            "(line 1157,col 9)-(line 1157,col 59)",
            "(line 1158,col 9)-(line 1158,col 55)",
            "(line 1159,col 9)-(line 1159,col 98)",
            "(line 1161,col 9)-(line 1161,col 70)",
            "(line 1162,col 9)-(line 1162,col 55)",
            "(line 1163,col 9)-(line 1163,col 98)",
            "(line 1166,col 9)-(line 1166,col 56)",
            "(line 1167,col 9)-(line 1167,col 56)",
            "(line 1168,col 9)-(line 1168,col 90)",
            "(line 1170,col 9)-(line 1170,col 55)",
            "(line 1171,col 9)-(line 1171,col 58)",
            "(line 1172,col 9)-(line 1172,col 94)",
            "(line 1174,col 9)-(line 1174,col 66)",
            "(line 1175,col 9)-(line 1175,col 58)",
            "(line 1176,col 9)-(line 1176,col 94)",
            "(line 1179,col 9)-(line 1179,col 40)",
            "(line 1180,col 9)-(line 1180,col 46)",
            "(line 1183,col 9)-(line 1183,col 44)",
            "(line 1184,col 9)-(line 1184,col 48)",
            "(line 1186,col 9)-(line 1186,col 56)",
            "(line 1187,col 9)-(line 1187,col 70)",
            "(line 1189,col 9)-(line 1189,col 60)",
            "(line 1190,col 9)-(line 1190,col 72)",
            "(line 1192,col 9)-(line 1192,col 71)",
            "(line 1193,col 9)-(line 1193,col 72)",
            "(line 1195,col 9)-(line 1195,col 50)",
            "(line 1196,col 9)-(line 1196,col 63)",
            "(line 1197,col 9)-(line 1197,col 99)",
            "(line 1199,col 9)-(line 1206,col 9)",
            "(line 1208,col 9)-(line 1208,col 63)",
            "(line 1209,col 9)-(line 1209,col 28)",
            "(line 1210,col 9)-(line 1210,col 96)",
            "(line 1211,col 9)-(line 1218,col 9)",
            "(line 1220,col 9)-(line 1220,col 57)",
            "(line 1221,col 9)-(line 1221,col 96)",
            "(line 1222,col 9)-(line 1222,col 94)",
            "(line 1224,col 9)-(line 1224,col 56)",
            "(line 1225,col 9)-(line 1225,col 98)",
            "(line 1226,col 9)-(line 1226,col 98)",
            "(line 1228,col 9)-(line 1228,col 64)",
            "(line 1229,col 9)-(line 1229,col 98)",
            "(line 1230,col 9)-(line 1230,col 98)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.ArrayRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java",
        "signature": "org.apache.commons.math.linear.ArrayRealVectorTest.testMisc()",
        "snippet": "    public void testMisc() {\n        ArrayRealVector v1 = new ArrayRealVector(vec1);\n        ArrayRealVector v4 = new ArrayRealVector(vec4);\n        RealVector v4_2 = new ArrayRealVector(vec4);\n\n        String out1 = v1.toString();\n        assertTrue(\"some output \",  out1.length()!=0);\n        /*\n         double[] dout1 = v1.copyOut();\n        assertEquals(\"testData len\", 3, dout1.length);\n        assertNotSame(\"testData not same object \", v1.data, dout1);\n         */\n        try {\n            v1.checkVectorDimensions(2);\n            fail(\"IllegalArgumentException expected\");\n        } catch (IllegalArgumentException ex) {\n            // expected behavior\n        } catch (Exception e) {\n            fail(\"wrong exception caught\");\n        }\n\n       try {\n            v1.checkVectorDimensions(v4);\n            fail(\"IllegalArgumentException expected\");\n        } catch (IllegalArgumentException ex) {\n            // expected behavior\n        } catch (Exception e) {\n            fail(\"wrong exception caught\");\n        }\n\n        try {\n            v1.checkVectorDimensions(v4_2);\n            fail(\"IllegalArgumentException expected\");\n        } catch (IllegalArgumentException ex) {\n            // expected behavior\n        } catch (Exception e) {\n            fail(\"wrong exception caught\");\n        }\n\n    }\n",
        "begin_line": 1234,
        "end_line": 1273,
        "comment": "",
        "child_ranges": [
            "(line 1235,col 9)-(line 1235,col 55)",
            "(line 1236,col 9)-(line 1236,col 55)",
            "(line 1237,col 9)-(line 1237,col 52)",
            "(line 1239,col 9)-(line 1239,col 36)",
            "(line 1240,col 9)-(line 1240,col 54)",
            "(line 1246,col 9)-(line 1253,col 9)",
            "(line 1255,col 8)-(line 1262,col 9)",
            "(line 1264,col 9)-(line 1271,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.ArrayRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java",
        "signature": "org.apache.commons.math.linear.ArrayRealVectorTest.testPredicates()",
        "snippet": "    public void testPredicates() {\n\n        ArrayRealVector v = new ArrayRealVector(new double[] { 0, 1, 2 });\n\n        assertFalse(v.isNaN());\n        v.setEntry(1, Double.NaN);\n        assertTrue(v.isNaN());\n\n        assertFalse(v.isInfinite());\n        v.setEntry(0, Double.POSITIVE_INFINITY);\n        assertFalse(v.isInfinite());\n        v.setEntry(1, 1);\n        assertTrue(v.isInfinite());\n        v.setEntry(0, 1);\n        assertFalse(v.isInfinite());\n\n        v.setEntry(0, 0);\n        assertEquals(v, new ArrayRealVector(new double[] { 0, 1, 2 }));\n        assertNotSame(v, new ArrayRealVector(new double[] { 0, 1, 2 + Math.ulp(2)}));\n        assertNotSame(v, new ArrayRealVector(new double[] { 0, 1, 2, 3 }));\n\n        assertEquals(new ArrayRealVector(new double[] { Double.NaN, 1, 2 }).hashCode(),\n                     new ArrayRealVector(new double[] { 0, Double.NaN, 2 }).hashCode());\n\n        assertTrue(new ArrayRealVector(new double[] { Double.NaN, 1, 2 }).hashCode() !=\n                   new ArrayRealVector(new double[] { 0, 1, 2 }).hashCode());\n\n        assertTrue(v.equals(v));\n        assertTrue(v.equals(v.copy()));\n        assertFalse(v.equals(null));\n        assertFalse(v.equals(v.getDataRef()));\n        assertFalse(v.equals(v.getSubVector(0, v.getDimension() - 1)));\n        assertTrue(v.equals(v.getSubVector(0, v.getDimension())));\n\n    }\n",
        "begin_line": 1275,
        "end_line": 1309,
        "comment": "",
        "child_ranges": [
            "(line 1277,col 9)-(line 1277,col 74)",
            "(line 1279,col 9)-(line 1279,col 31)",
            "(line 1280,col 9)-(line 1280,col 34)",
            "(line 1281,col 9)-(line 1281,col 30)",
            "(line 1283,col 9)-(line 1283,col 36)",
            "(line 1284,col 9)-(line 1284,col 48)",
            "(line 1285,col 9)-(line 1285,col 36)",
            "(line 1286,col 9)-(line 1286,col 25)",
            "(line 1287,col 9)-(line 1287,col 35)",
            "(line 1288,col 9)-(line 1288,col 25)",
            "(line 1289,col 9)-(line 1289,col 36)",
            "(line 1291,col 9)-(line 1291,col 25)",
            "(line 1292,col 9)-(line 1292,col 71)",
            "(line 1293,col 9)-(line 1293,col 85)",
            "(line 1294,col 9)-(line 1294,col 75)",
            "(line 1296,col 9)-(line 1297,col 88)",
            "(line 1299,col 9)-(line 1300,col 77)",
            "(line 1302,col 9)-(line 1302,col 32)",
            "(line 1303,col 9)-(line 1303,col 39)",
            "(line 1304,col 9)-(line 1304,col 36)",
            "(line 1305,col 9)-(line 1305,col 46)",
            "(line 1306,col 9)-(line 1306,col 71)",
            "(line 1307,col 9)-(line 1307,col 66)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.ArrayRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java",
        "signature": "org.apache.commons.math.linear.ArrayRealVectorTest.testSerial()",
        "snippet": "    public void testSerial()  {\n        ArrayRealVector v = new ArrayRealVector(new double[] { 0, 1, 2 });\n        assertEquals(v,TestUtils.serializeAndRecover(v));\n    }\n",
        "begin_line": 1311,
        "end_line": 1314,
        "comment": "",
        "child_ranges": [
            "(line 1312,col 9)-(line 1312,col 74)",
            "(line 1313,col 9)-(line 1313,col 57)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.ArrayRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java",
        "signature": "org.apache.commons.math.linear.ArrayRealVectorTest.assertClose(java.lang.String, double[], double[], double)",
        "snippet": "    protected void assertClose(String msg, double[] m, double[] n,\n            double tolerance) {\n        if (m.length != n.length) {\n            fail(\"vectors have different lengths\");\n        }\n        for (int i = 0; i < m.length; i++) {\n            assertEquals(msg + \" \" +  i + \" elements differ\", m[i],n[i],tolerance);\n        }\n    }\n",
        "begin_line": 1318,
        "end_line": 1326,
        "comment": " verifies that two vectors are close (sup norm) ",
        "child_ranges": [
            "(line 1320,col 9)-(line 1322,col 9)",
            "(line 1323,col 9)-(line 1325,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.SparseRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/SparseRealVectorTest.java",
        "signature": "org.apache.commons.math.linear.SparseRealVectorTest.SparseRealVectorTestImpl.SparseRealVectorTestImpl(double[])",
        "snippet": "        public SparseRealVectorTestImpl(double[] d) {\n            data = d.clone();\n        }\n",
        "begin_line": 60,
        "end_line": 62,
        "comment": "",
        "child_ranges": [
            "(line 61,col 13)-(line 61,col 29)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.SparseRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/SparseRealVectorTest.java",
        "signature": "org.apache.commons.math.linear.SparseRealVectorTest.SparseRealVectorTestImpl.unsupported()",
        "snippet": "        private UnsupportedOperationException unsupported() {\n            return new UnsupportedOperationException(\"Not supported, unneeded for test purposes\");\n        }\n",
        "begin_line": 64,
        "end_line": 66,
        "comment": "",
        "child_ranges": [
            "(line 65,col 13)-(line 65,col 98)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.SparseRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/SparseRealVectorTest.java",
        "signature": "org.apache.commons.math.linear.SparseRealVectorTest.SparseRealVectorTestImpl.map(org.apache.commons.math.analysis.UnivariateRealFunction)",
        "snippet": "        public RealVector map(UnivariateRealFunction function) throws FunctionEvaluationException {\n            throw unsupported();\n        }\n",
        "begin_line": 68,
        "end_line": 70,
        "comment": "",
        "child_ranges": [
            "(line 69,col 13)-(line 69,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.SparseRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/SparseRealVectorTest.java",
        "signature": "org.apache.commons.math.linear.SparseRealVectorTest.SparseRealVectorTestImpl.mapToSelf(org.apache.commons.math.analysis.UnivariateRealFunction)",
        "snippet": "        public RealVector mapToSelf(UnivariateRealFunction function) throws FunctionEvaluationException {\n            throw unsupported();\n        }\n",
        "begin_line": 72,
        "end_line": 74,
        "comment": "",
        "child_ranges": [
            "(line 73,col 13)-(line 73,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.SparseRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/SparseRealVectorTest.java",
        "signature": "org.apache.commons.math.linear.SparseRealVectorTest.SparseRealVectorTestImpl.iterator()",
        "snippet": "        public Iterator<Entry> iterator() {\n            throw unsupported();\n        }\n",
        "begin_line": 76,
        "end_line": 78,
        "comment": "",
        "child_ranges": [
            "(line 77,col 13)-(line 77,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.SparseRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/SparseRealVectorTest.java",
        "signature": "org.apache.commons.math.linear.SparseRealVectorTest.SparseRealVectorTestImpl.copy()",
        "snippet": "        public AbstractRealVector copy() {\n            return new SparseRealVectorTestImpl(data);\n        }\n",
        "begin_line": 80,
        "end_line": 82,
        "comment": "",
        "child_ranges": [
            "(line 81,col 13)-(line 81,col 54)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.SparseRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/SparseRealVectorTest.java",
        "signature": "org.apache.commons.math.linear.SparseRealVectorTest.SparseRealVectorTestImpl.add(org.apache.commons.math.linear.RealVector)",
        "snippet": "        public RealVector add(RealVector v) throws IllegalArgumentException {\n            throw unsupported();\n        }\n",
        "begin_line": 84,
        "end_line": 86,
        "comment": "",
        "child_ranges": [
            "(line 85,col 13)-(line 85,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.SparseRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/SparseRealVectorTest.java",
        "signature": "org.apache.commons.math.linear.SparseRealVectorTest.SparseRealVectorTestImpl.add(double[])",
        "snippet": "        public RealVector add(double[] v) throws IllegalArgumentException {\n            throw unsupported();\n        }\n",
        "begin_line": 88,
        "end_line": 90,
        "comment": "",
        "child_ranges": [
            "(line 89,col 13)-(line 89,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.SparseRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/SparseRealVectorTest.java",
        "signature": "org.apache.commons.math.linear.SparseRealVectorTest.SparseRealVectorTestImpl.subtract(org.apache.commons.math.linear.RealVector)",
        "snippet": "        public RealVector subtract(RealVector v) throws IllegalArgumentException {\n            throw unsupported();\n        }\n",
        "begin_line": 92,
        "end_line": 94,
        "comment": "",
        "child_ranges": [
            "(line 93,col 13)-(line 93,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.SparseRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/SparseRealVectorTest.java",
        "signature": "org.apache.commons.math.linear.SparseRealVectorTest.SparseRealVectorTestImpl.subtract(double[])",
        "snippet": "        public RealVector subtract(double[] v) throws IllegalArgumentException {\n            throw unsupported();\n        }\n",
        "begin_line": 96,
        "end_line": 98,
        "comment": "",
        "child_ranges": [
            "(line 97,col 13)-(line 97,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.SparseRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/SparseRealVectorTest.java",
        "signature": "org.apache.commons.math.linear.SparseRealVectorTest.SparseRealVectorTestImpl.mapAdd(double)",
        "snippet": "        public RealVector mapAdd(double d) {\n            throw unsupported();\n        }\n",
        "begin_line": 100,
        "end_line": 102,
        "comment": "",
        "child_ranges": [
            "(line 101,col 13)-(line 101,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.SparseRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/SparseRealVectorTest.java",
        "signature": "org.apache.commons.math.linear.SparseRealVectorTest.SparseRealVectorTestImpl.mapAddToSelf(double)",
        "snippet": "        public RealVector mapAddToSelf(double d) {\n            throw unsupported();\n        }\n",
        "begin_line": 104,
        "end_line": 106,
        "comment": "",
        "child_ranges": [
            "(line 105,col 13)-(line 105,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.SparseRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/SparseRealVectorTest.java",
        "signature": "org.apache.commons.math.linear.SparseRealVectorTest.SparseRealVectorTestImpl.mapSubtract(double)",
        "snippet": "        public RealVector mapSubtract(double d) {\n            throw unsupported();\n        }\n",
        "begin_line": 108,
        "end_line": 110,
        "comment": "",
        "child_ranges": [
            "(line 109,col 13)-(line 109,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.SparseRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/SparseRealVectorTest.java",
        "signature": "org.apache.commons.math.linear.SparseRealVectorTest.SparseRealVectorTestImpl.mapSubtractToSelf(double)",
        "snippet": "        public RealVector mapSubtractToSelf(double d) {\n            throw unsupported();\n        }\n",
        "begin_line": 112,
        "end_line": 114,
        "comment": "",
        "child_ranges": [
            "(line 113,col 13)-(line 113,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.SparseRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/SparseRealVectorTest.java",
        "signature": "org.apache.commons.math.linear.SparseRealVectorTest.SparseRealVectorTestImpl.mapMultiply(double)",
        "snippet": "        public RealVector mapMultiply(double d) {\n            double[] out = new double[data.length];\n            for (int i = 0; i < data.length; i++) {\n                out[i] = data[i] * d;\n            }\n            return new OpenMapRealVector(out);\n        }\n",
        "begin_line": 116,
        "end_line": 122,
        "comment": "",
        "child_ranges": [
            "(line 117,col 13)-(line 117,col 51)",
            "(line 118,col 13)-(line 120,col 13)",
            "(line 121,col 13)-(line 121,col 46)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.SparseRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/SparseRealVectorTest.java",
        "signature": "org.apache.commons.math.linear.SparseRealVectorTest.SparseRealVectorTestImpl.mapMultiplyToSelf(double)",
        "snippet": "        public RealVector mapMultiplyToSelf(double d) {\n            throw unsupported();\n        }\n",
        "begin_line": 124,
        "end_line": 126,
        "comment": "",
        "child_ranges": [
            "(line 125,col 13)-(line 125,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.SparseRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/SparseRealVectorTest.java",
        "signature": "org.apache.commons.math.linear.SparseRealVectorTest.SparseRealVectorTestImpl.mapDivide(double)",
        "snippet": "        public RealVector mapDivide(double d) {\n            throw unsupported();\n        }\n",
        "begin_line": 128,
        "end_line": 130,
        "comment": "",
        "child_ranges": [
            "(line 129,col 13)-(line 129,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.SparseRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/SparseRealVectorTest.java",
        "signature": "org.apache.commons.math.linear.SparseRealVectorTest.SparseRealVectorTestImpl.mapDivideToSelf(double)",
        "snippet": "        public RealVector mapDivideToSelf(double d) {\n            throw unsupported();\n        }\n",
        "begin_line": 132,
        "end_line": 134,
        "comment": "",
        "child_ranges": [
            "(line 133,col 13)-(line 133,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.SparseRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/SparseRealVectorTest.java",
        "signature": "org.apache.commons.math.linear.SparseRealVectorTest.SparseRealVectorTestImpl.mapPow(double)",
        "snippet": "        public RealVector mapPow(double d) {\n            throw unsupported();\n        }\n",
        "begin_line": 136,
        "end_line": 138,
        "comment": "",
        "child_ranges": [
            "(line 137,col 13)-(line 137,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.SparseRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/SparseRealVectorTest.java",
        "signature": "org.apache.commons.math.linear.SparseRealVectorTest.SparseRealVectorTestImpl.mapPowToSelf(double)",
        "snippet": "        public RealVector mapPowToSelf(double d) {\n            throw unsupported();\n        }\n",
        "begin_line": 140,
        "end_line": 142,
        "comment": "",
        "child_ranges": [
            "(line 141,col 13)-(line 141,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.SparseRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/SparseRealVectorTest.java",
        "signature": "org.apache.commons.math.linear.SparseRealVectorTest.SparseRealVectorTestImpl.mapExp()",
        "snippet": "        public RealVector mapExp() {\n            throw unsupported();\n        }\n",
        "begin_line": 144,
        "end_line": 146,
        "comment": "",
        "child_ranges": [
            "(line 145,col 13)-(line 145,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.SparseRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/SparseRealVectorTest.java",
        "signature": "org.apache.commons.math.linear.SparseRealVectorTest.SparseRealVectorTestImpl.mapExpToSelf()",
        "snippet": "        public RealVector mapExpToSelf() {\n            throw unsupported();\n        }\n",
        "begin_line": 148,
        "end_line": 150,
        "comment": "",
        "child_ranges": [
            "(line 149,col 13)-(line 149,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.SparseRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/SparseRealVectorTest.java",
        "signature": "org.apache.commons.math.linear.SparseRealVectorTest.SparseRealVectorTestImpl.mapExpm1()",
        "snippet": "        public RealVector mapExpm1() {\n            throw unsupported();\n        }\n",
        "begin_line": 152,
        "end_line": 154,
        "comment": "",
        "child_ranges": [
            "(line 153,col 13)-(line 153,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.SparseRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/SparseRealVectorTest.java",
        "signature": "org.apache.commons.math.linear.SparseRealVectorTest.SparseRealVectorTestImpl.mapExpm1ToSelf()",
        "snippet": "        public RealVector mapExpm1ToSelf() {\n            throw unsupported();\n        }\n",
        "begin_line": 156,
        "end_line": 158,
        "comment": "",
        "child_ranges": [
            "(line 157,col 13)-(line 157,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.SparseRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/SparseRealVectorTest.java",
        "signature": "org.apache.commons.math.linear.SparseRealVectorTest.SparseRealVectorTestImpl.mapLog()",
        "snippet": "        public RealVector mapLog() {\n            throw unsupported();\n        }\n",
        "begin_line": 160,
        "end_line": 162,
        "comment": "",
        "child_ranges": [
            "(line 161,col 13)-(line 161,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.SparseRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/SparseRealVectorTest.java",
        "signature": "org.apache.commons.math.linear.SparseRealVectorTest.SparseRealVectorTestImpl.mapLogToSelf()",
        "snippet": "        public RealVector mapLogToSelf() {\n            throw unsupported();\n        }\n",
        "begin_line": 164,
        "end_line": 166,
        "comment": "",
        "child_ranges": [
            "(line 165,col 13)-(line 165,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.SparseRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/SparseRealVectorTest.java",
        "signature": "org.apache.commons.math.linear.SparseRealVectorTest.SparseRealVectorTestImpl.mapLog10()",
        "snippet": "        public RealVector mapLog10() {\n            throw unsupported();\n        }\n",
        "begin_line": 168,
        "end_line": 170,
        "comment": "",
        "child_ranges": [
            "(line 169,col 13)-(line 169,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.SparseRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/SparseRealVectorTest.java",
        "signature": "org.apache.commons.math.linear.SparseRealVectorTest.SparseRealVectorTestImpl.mapLog10ToSelf()",
        "snippet": "        public RealVector mapLog10ToSelf() {\n            throw unsupported();\n        }\n",
        "begin_line": 172,
        "end_line": 174,
        "comment": "",
        "child_ranges": [
            "(line 173,col 13)-(line 173,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.SparseRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/SparseRealVectorTest.java",
        "signature": "org.apache.commons.math.linear.SparseRealVectorTest.SparseRealVectorTestImpl.mapLog1p()",
        "snippet": "        public RealVector mapLog1p() {\n            throw unsupported();\n        }\n",
        "begin_line": 176,
        "end_line": 178,
        "comment": "",
        "child_ranges": [
            "(line 177,col 13)-(line 177,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.SparseRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/SparseRealVectorTest.java",
        "signature": "org.apache.commons.math.linear.SparseRealVectorTest.SparseRealVectorTestImpl.mapLog1pToSelf()",
        "snippet": "        public RealVector mapLog1pToSelf() {\n            throw unsupported();\n        }\n",
        "begin_line": 180,
        "end_line": 182,
        "comment": "",
        "child_ranges": [
            "(line 181,col 13)-(line 181,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.SparseRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/SparseRealVectorTest.java",
        "signature": "org.apache.commons.math.linear.SparseRealVectorTest.SparseRealVectorTestImpl.mapCosh()",
        "snippet": "        public RealVector mapCosh() {\n            throw unsupported();\n        }\n",
        "begin_line": 184,
        "end_line": 186,
        "comment": "",
        "child_ranges": [
            "(line 185,col 13)-(line 185,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.SparseRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/SparseRealVectorTest.java",
        "signature": "org.apache.commons.math.linear.SparseRealVectorTest.SparseRealVectorTestImpl.mapCoshToSelf()",
        "snippet": "        public RealVector mapCoshToSelf() {\n            throw unsupported();\n        }\n",
        "begin_line": 188,
        "end_line": 190,
        "comment": "",
        "child_ranges": [
            "(line 189,col 13)-(line 189,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.SparseRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/SparseRealVectorTest.java",
        "signature": "org.apache.commons.math.linear.SparseRealVectorTest.SparseRealVectorTestImpl.mapSinh()",
        "snippet": "        public RealVector mapSinh() {\n            throw unsupported();\n        }\n",
        "begin_line": 192,
        "end_line": 194,
        "comment": "",
        "child_ranges": [
            "(line 193,col 13)-(line 193,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.SparseRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/SparseRealVectorTest.java",
        "signature": "org.apache.commons.math.linear.SparseRealVectorTest.SparseRealVectorTestImpl.mapSinhToSelf()",
        "snippet": "        public RealVector mapSinhToSelf() {\n            throw unsupported();\n        }\n",
        "begin_line": 196,
        "end_line": 198,
        "comment": "",
        "child_ranges": [
            "(line 197,col 13)-(line 197,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.SparseRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/SparseRealVectorTest.java",
        "signature": "org.apache.commons.math.linear.SparseRealVectorTest.SparseRealVectorTestImpl.mapTanh()",
        "snippet": "        public RealVector mapTanh() {\n            throw unsupported();\n        }\n",
        "begin_line": 200,
        "end_line": 202,
        "comment": "",
        "child_ranges": [
            "(line 201,col 13)-(line 201,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.SparseRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/SparseRealVectorTest.java",
        "signature": "org.apache.commons.math.linear.SparseRealVectorTest.SparseRealVectorTestImpl.mapTanhToSelf()",
        "snippet": "        public RealVector mapTanhToSelf() {\n            throw unsupported();\n        }\n",
        "begin_line": 204,
        "end_line": 206,
        "comment": "",
        "child_ranges": [
            "(line 205,col 13)-(line 205,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.SparseRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/SparseRealVectorTest.java",
        "signature": "org.apache.commons.math.linear.SparseRealVectorTest.SparseRealVectorTestImpl.mapCos()",
        "snippet": "        public RealVector mapCos() {\n            throw unsupported();\n        }\n",
        "begin_line": 208,
        "end_line": 210,
        "comment": "",
        "child_ranges": [
            "(line 209,col 13)-(line 209,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.SparseRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/SparseRealVectorTest.java",
        "signature": "org.apache.commons.math.linear.SparseRealVectorTest.SparseRealVectorTestImpl.mapCosToSelf()",
        "snippet": "        public RealVector mapCosToSelf() {\n            throw unsupported();\n        }\n",
        "begin_line": 212,
        "end_line": 214,
        "comment": "",
        "child_ranges": [
            "(line 213,col 13)-(line 213,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.SparseRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/SparseRealVectorTest.java",
        "signature": "org.apache.commons.math.linear.SparseRealVectorTest.SparseRealVectorTestImpl.mapSin()",
        "snippet": "        public RealVector mapSin() {\n            throw unsupported();\n        }\n",
        "begin_line": 216,
        "end_line": 218,
        "comment": "",
        "child_ranges": [
            "(line 217,col 13)-(line 217,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.SparseRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/SparseRealVectorTest.java",
        "signature": "org.apache.commons.math.linear.SparseRealVectorTest.SparseRealVectorTestImpl.mapSinToSelf()",
        "snippet": "        public RealVector mapSinToSelf() {\n            throw unsupported();\n        }\n",
        "begin_line": 220,
        "end_line": 222,
        "comment": "",
        "child_ranges": [
            "(line 221,col 13)-(line 221,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.SparseRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/SparseRealVectorTest.java",
        "signature": "org.apache.commons.math.linear.SparseRealVectorTest.SparseRealVectorTestImpl.mapTan()",
        "snippet": "        public RealVector mapTan() {\n            throw unsupported();\n        }\n",
        "begin_line": 224,
        "end_line": 226,
        "comment": "",
        "child_ranges": [
            "(line 225,col 13)-(line 225,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.SparseRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/SparseRealVectorTest.java",
        "signature": "org.apache.commons.math.linear.SparseRealVectorTest.SparseRealVectorTestImpl.mapTanToSelf()",
        "snippet": "        public RealVector mapTanToSelf() {\n            throw unsupported();\n        }\n",
        "begin_line": 228,
        "end_line": 230,
        "comment": "",
        "child_ranges": [
            "(line 229,col 13)-(line 229,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.SparseRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/SparseRealVectorTest.java",
        "signature": "org.apache.commons.math.linear.SparseRealVectorTest.SparseRealVectorTestImpl.mapAcos()",
        "snippet": "        public RealVector mapAcos() {\n            throw unsupported();\n        }\n",
        "begin_line": 232,
        "end_line": 234,
        "comment": "",
        "child_ranges": [
            "(line 233,col 13)-(line 233,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.SparseRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/SparseRealVectorTest.java",
        "signature": "org.apache.commons.math.linear.SparseRealVectorTest.SparseRealVectorTestImpl.mapAcosToSelf()",
        "snippet": "        public RealVector mapAcosToSelf() {\n            throw unsupported();\n        }\n",
        "begin_line": 236,
        "end_line": 238,
        "comment": "",
        "child_ranges": [
            "(line 237,col 13)-(line 237,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.SparseRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/SparseRealVectorTest.java",
        "signature": "org.apache.commons.math.linear.SparseRealVectorTest.SparseRealVectorTestImpl.mapAsin()",
        "snippet": "        public RealVector mapAsin() {\n            throw unsupported();\n        }\n",
        "begin_line": 240,
        "end_line": 242,
        "comment": "",
        "child_ranges": [
            "(line 241,col 13)-(line 241,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.SparseRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/SparseRealVectorTest.java",
        "signature": "org.apache.commons.math.linear.SparseRealVectorTest.SparseRealVectorTestImpl.mapAsinToSelf()",
        "snippet": "        public RealVector mapAsinToSelf() {\n            throw unsupported();\n        }\n",
        "begin_line": 244,
        "end_line": 246,
        "comment": "",
        "child_ranges": [
            "(line 245,col 13)-(line 245,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.SparseRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/SparseRealVectorTest.java",
        "signature": "org.apache.commons.math.linear.SparseRealVectorTest.SparseRealVectorTestImpl.mapAtan()",
        "snippet": "        public RealVector mapAtan() {\n            throw unsupported();\n        }\n",
        "begin_line": 248,
        "end_line": 250,
        "comment": "",
        "child_ranges": [
            "(line 249,col 13)-(line 249,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.SparseRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/SparseRealVectorTest.java",
        "signature": "org.apache.commons.math.linear.SparseRealVectorTest.SparseRealVectorTestImpl.mapAtanToSelf()",
        "snippet": "        public RealVector mapAtanToSelf() {\n            throw unsupported();\n        }\n",
        "begin_line": 252,
        "end_line": 254,
        "comment": "",
        "child_ranges": [
            "(line 253,col 13)-(line 253,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.SparseRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/SparseRealVectorTest.java",
        "signature": "org.apache.commons.math.linear.SparseRealVectorTest.SparseRealVectorTestImpl.mapInv()",
        "snippet": "        public RealVector mapInv() {\n            throw unsupported();\n        }\n",
        "begin_line": 256,
        "end_line": 258,
        "comment": "",
        "child_ranges": [
            "(line 257,col 13)-(line 257,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.SparseRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/SparseRealVectorTest.java",
        "signature": "org.apache.commons.math.linear.SparseRealVectorTest.SparseRealVectorTestImpl.mapInvToSelf()",
        "snippet": "        public RealVector mapInvToSelf() {\n            throw unsupported();\n        }\n",
        "begin_line": 260,
        "end_line": 262,
        "comment": "",
        "child_ranges": [
            "(line 261,col 13)-(line 261,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.SparseRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/SparseRealVectorTest.java",
        "signature": "org.apache.commons.math.linear.SparseRealVectorTest.SparseRealVectorTestImpl.mapAbs()",
        "snippet": "        public RealVector mapAbs() {\n            throw unsupported();\n        }\n",
        "begin_line": 264,
        "end_line": 266,
        "comment": "",
        "child_ranges": [
            "(line 265,col 13)-(line 265,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.SparseRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/SparseRealVectorTest.java",
        "signature": "org.apache.commons.math.linear.SparseRealVectorTest.SparseRealVectorTestImpl.mapAbsToSelf()",
        "snippet": "        public RealVector mapAbsToSelf() {\n            throw unsupported();\n        }\n",
        "begin_line": 268,
        "end_line": 270,
        "comment": "",
        "child_ranges": [
            "(line 269,col 13)-(line 269,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.SparseRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/SparseRealVectorTest.java",
        "signature": "org.apache.commons.math.linear.SparseRealVectorTest.SparseRealVectorTestImpl.mapSqrt()",
        "snippet": "        public RealVector mapSqrt() {\n            throw unsupported();\n        }\n",
        "begin_line": 272,
        "end_line": 274,
        "comment": "",
        "child_ranges": [
            "(line 273,col 13)-(line 273,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.SparseRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/SparseRealVectorTest.java",
        "signature": "org.apache.commons.math.linear.SparseRealVectorTest.SparseRealVectorTestImpl.mapSqrtToSelf()",
        "snippet": "        public RealVector mapSqrtToSelf() {\n            throw unsupported();\n        }\n",
        "begin_line": 276,
        "end_line": 278,
        "comment": "",
        "child_ranges": [
            "(line 277,col 13)-(line 277,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.SparseRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/SparseRealVectorTest.java",
        "signature": "org.apache.commons.math.linear.SparseRealVectorTest.SparseRealVectorTestImpl.mapCbrt()",
        "snippet": "        public RealVector mapCbrt() {\n            throw unsupported();\n        }\n",
        "begin_line": 280,
        "end_line": 282,
        "comment": "",
        "child_ranges": [
            "(line 281,col 13)-(line 281,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.SparseRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/SparseRealVectorTest.java",
        "signature": "org.apache.commons.math.linear.SparseRealVectorTest.SparseRealVectorTestImpl.mapCbrtToSelf()",
        "snippet": "        public RealVector mapCbrtToSelf() {\n            throw unsupported();\n        }\n",
        "begin_line": 284,
        "end_line": 286,
        "comment": "",
        "child_ranges": [
            "(line 285,col 13)-(line 285,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.SparseRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/SparseRealVectorTest.java",
        "signature": "org.apache.commons.math.linear.SparseRealVectorTest.SparseRealVectorTestImpl.mapCeil()",
        "snippet": "        public RealVector mapCeil() {\n            throw unsupported();\n        }\n",
        "begin_line": 288,
        "end_line": 290,
        "comment": "",
        "child_ranges": [
            "(line 289,col 13)-(line 289,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.SparseRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/SparseRealVectorTest.java",
        "signature": "org.apache.commons.math.linear.SparseRealVectorTest.SparseRealVectorTestImpl.mapCeilToSelf()",
        "snippet": "        public RealVector mapCeilToSelf() {\n            throw unsupported();\n        }\n",
        "begin_line": 292,
        "end_line": 294,
        "comment": "",
        "child_ranges": [
            "(line 293,col 13)-(line 293,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.SparseRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/SparseRealVectorTest.java",
        "signature": "org.apache.commons.math.linear.SparseRealVectorTest.SparseRealVectorTestImpl.mapFloor()",
        "snippet": "        public RealVector mapFloor() {\n            throw unsupported();\n        }\n",
        "begin_line": 296,
        "end_line": 298,
        "comment": "",
        "child_ranges": [
            "(line 297,col 13)-(line 297,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.SparseRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/SparseRealVectorTest.java",
        "signature": "org.apache.commons.math.linear.SparseRealVectorTest.SparseRealVectorTestImpl.mapFloorToSelf()",
        "snippet": "        public RealVector mapFloorToSelf() {\n            throw unsupported();\n        }\n",
        "begin_line": 300,
        "end_line": 302,
        "comment": "",
        "child_ranges": [
            "(line 301,col 13)-(line 301,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.SparseRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/SparseRealVectorTest.java",
        "signature": "org.apache.commons.math.linear.SparseRealVectorTest.SparseRealVectorTestImpl.mapRint()",
        "snippet": "        public RealVector mapRint() {\n            throw unsupported();\n        }\n",
        "begin_line": 304,
        "end_line": 306,
        "comment": "",
        "child_ranges": [
            "(line 305,col 13)-(line 305,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.SparseRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/SparseRealVectorTest.java",
        "signature": "org.apache.commons.math.linear.SparseRealVectorTest.SparseRealVectorTestImpl.mapRintToSelf()",
        "snippet": "        public RealVector mapRintToSelf() {\n            throw unsupported();\n        }\n",
        "begin_line": 308,
        "end_line": 310,
        "comment": "",
        "child_ranges": [
            "(line 309,col 13)-(line 309,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.SparseRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/SparseRealVectorTest.java",
        "signature": "org.apache.commons.math.linear.SparseRealVectorTest.SparseRealVectorTestImpl.mapSignum()",
        "snippet": "        public RealVector mapSignum() {\n            throw unsupported();\n        }\n",
        "begin_line": 312,
        "end_line": 314,
        "comment": "",
        "child_ranges": [
            "(line 313,col 13)-(line 313,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.SparseRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/SparseRealVectorTest.java",
        "signature": "org.apache.commons.math.linear.SparseRealVectorTest.SparseRealVectorTestImpl.mapSignumToSelf()",
        "snippet": "        public RealVector mapSignumToSelf() {\n            throw unsupported();\n        }\n",
        "begin_line": 316,
        "end_line": 318,
        "comment": "",
        "child_ranges": [
            "(line 317,col 13)-(line 317,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.SparseRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/SparseRealVectorTest.java",
        "signature": "org.apache.commons.math.linear.SparseRealVectorTest.SparseRealVectorTestImpl.mapUlp()",
        "snippet": "        public RealVector mapUlp() {\n            throw unsupported();\n        }\n",
        "begin_line": 320,
        "end_line": 322,
        "comment": "",
        "child_ranges": [
            "(line 321,col 13)-(line 321,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.SparseRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/SparseRealVectorTest.java",
        "signature": "org.apache.commons.math.linear.SparseRealVectorTest.SparseRealVectorTestImpl.mapUlpToSelf()",
        "snippet": "        public RealVector mapUlpToSelf() {\n            throw unsupported();\n        }\n",
        "begin_line": 324,
        "end_line": 326,
        "comment": "",
        "child_ranges": [
            "(line 325,col 13)-(line 325,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.SparseRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/SparseRealVectorTest.java",
        "signature": "org.apache.commons.math.linear.SparseRealVectorTest.SparseRealVectorTestImpl.ebeMultiply(org.apache.commons.math.linear.RealVector)",
        "snippet": "        public RealVector ebeMultiply(RealVector v) throws IllegalArgumentException {\n            throw unsupported();\n        }\n",
        "begin_line": 328,
        "end_line": 330,
        "comment": "",
        "child_ranges": [
            "(line 329,col 13)-(line 329,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.SparseRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/SparseRealVectorTest.java",
        "signature": "org.apache.commons.math.linear.SparseRealVectorTest.SparseRealVectorTestImpl.ebeMultiply(double[])",
        "snippet": "        public RealVector ebeMultiply(double[] v) throws IllegalArgumentException {\n            throw unsupported();\n        }\n",
        "begin_line": 332,
        "end_line": 334,
        "comment": "",
        "child_ranges": [
            "(line 333,col 13)-(line 333,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.SparseRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/SparseRealVectorTest.java",
        "signature": "org.apache.commons.math.linear.SparseRealVectorTest.SparseRealVectorTestImpl.ebeDivide(org.apache.commons.math.linear.RealVector)",
        "snippet": "        public RealVector ebeDivide(RealVector v) throws IllegalArgumentException {\n            throw unsupported();\n        }\n",
        "begin_line": 336,
        "end_line": 338,
        "comment": "",
        "child_ranges": [
            "(line 337,col 13)-(line 337,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.SparseRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/SparseRealVectorTest.java",
        "signature": "org.apache.commons.math.linear.SparseRealVectorTest.SparseRealVectorTestImpl.ebeDivide(double[])",
        "snippet": "        public RealVector ebeDivide(double[] v) throws IllegalArgumentException {\n            throw unsupported();\n        }\n",
        "begin_line": 340,
        "end_line": 342,
        "comment": "",
        "child_ranges": [
            "(line 341,col 13)-(line 341,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.SparseRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/SparseRealVectorTest.java",
        "signature": "org.apache.commons.math.linear.SparseRealVectorTest.SparseRealVectorTestImpl.getData()",
        "snippet": "        public double[] getData() {\n            return data.clone();\n        }\n",
        "begin_line": 344,
        "end_line": 346,
        "comment": "",
        "child_ranges": [
            "(line 345,col 13)-(line 345,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.SparseRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/SparseRealVectorTest.java",
        "signature": "org.apache.commons.math.linear.SparseRealVectorTest.SparseRealVectorTestImpl.dotProduct(org.apache.commons.math.linear.RealVector)",
        "snippet": "        public double dotProduct(RealVector v) throws IllegalArgumentException {\n            double dot = 0;\n            for (int i = 0; i < data.length; i++) {\n                dot += data[i] * v.getEntry(i);\n            }\n            return dot;\n        }\n",
        "begin_line": 348,
        "end_line": 354,
        "comment": "",
        "child_ranges": [
            "(line 349,col 13)-(line 349,col 27)",
            "(line 350,col 13)-(line 352,col 13)",
            "(line 353,col 13)-(line 353,col 23)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.SparseRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/SparseRealVectorTest.java",
        "signature": "org.apache.commons.math.linear.SparseRealVectorTest.SparseRealVectorTestImpl.dotProduct(double[])",
        "snippet": "        public double dotProduct(double[] v) throws IllegalArgumentException {\n            double dot = 0;\n            for (int i = 0; i < data.length; i++) {\n                dot += data[i] * v[i];\n            }\n            return dot;\n        }\n",
        "begin_line": 356,
        "end_line": 362,
        "comment": "",
        "child_ranges": [
            "(line 357,col 13)-(line 357,col 27)",
            "(line 358,col 13)-(line 360,col 13)",
            "(line 361,col 13)-(line 361,col 23)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.SparseRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/SparseRealVectorTest.java",
        "signature": "org.apache.commons.math.linear.SparseRealVectorTest.SparseRealVectorTestImpl.getNorm()",
        "snippet": "        public double getNorm() {\n            throw unsupported();\n        }\n",
        "begin_line": 364,
        "end_line": 366,
        "comment": "",
        "child_ranges": [
            "(line 365,col 13)-(line 365,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.SparseRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/SparseRealVectorTest.java",
        "signature": "org.apache.commons.math.linear.SparseRealVectorTest.SparseRealVectorTestImpl.getL1Norm()",
        "snippet": "        public double getL1Norm() {\n            throw unsupported();\n        }\n",
        "begin_line": 368,
        "end_line": 370,
        "comment": "",
        "child_ranges": [
            "(line 369,col 13)-(line 369,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.SparseRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/SparseRealVectorTest.java",
        "signature": "org.apache.commons.math.linear.SparseRealVectorTest.SparseRealVectorTestImpl.getLInfNorm()",
        "snippet": "        public double getLInfNorm() {\n            throw unsupported();\n        }\n",
        "begin_line": 372,
        "end_line": 374,
        "comment": "",
        "child_ranges": [
            "(line 373,col 13)-(line 373,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.SparseRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/SparseRealVectorTest.java",
        "signature": "org.apache.commons.math.linear.SparseRealVectorTest.SparseRealVectorTestImpl.getDistance(org.apache.commons.math.linear.RealVector)",
        "snippet": "        public double getDistance(RealVector v) throws IllegalArgumentException {\n            throw unsupported();\n        }\n",
        "begin_line": 376,
        "end_line": 378,
        "comment": "",
        "child_ranges": [
            "(line 377,col 13)-(line 377,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.SparseRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/SparseRealVectorTest.java",
        "signature": "org.apache.commons.math.linear.SparseRealVectorTest.SparseRealVectorTestImpl.getDistance(double[])",
        "snippet": "        public double getDistance(double[] v) throws IllegalArgumentException {\n            throw unsupported();\n        }\n",
        "begin_line": 380,
        "end_line": 382,
        "comment": "",
        "child_ranges": [
            "(line 381,col 13)-(line 381,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.SparseRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/SparseRealVectorTest.java",
        "signature": "org.apache.commons.math.linear.SparseRealVectorTest.SparseRealVectorTestImpl.getL1Distance(org.apache.commons.math.linear.RealVector)",
        "snippet": "        public double getL1Distance(RealVector v) throws IllegalArgumentException {\n            throw unsupported();\n        }\n",
        "begin_line": 384,
        "end_line": 386,
        "comment": "",
        "child_ranges": [
            "(line 385,col 13)-(line 385,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.SparseRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/SparseRealVectorTest.java",
        "signature": "org.apache.commons.math.linear.SparseRealVectorTest.SparseRealVectorTestImpl.getL1Distance(double[])",
        "snippet": "        public double getL1Distance(double[] v) throws IllegalArgumentException {\n            throw unsupported();\n        }\n",
        "begin_line": 388,
        "end_line": 390,
        "comment": "",
        "child_ranges": [
            "(line 389,col 13)-(line 389,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.SparseRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/SparseRealVectorTest.java",
        "signature": "org.apache.commons.math.linear.SparseRealVectorTest.SparseRealVectorTestImpl.getLInfDistance(org.apache.commons.math.linear.RealVector)",
        "snippet": "        public double getLInfDistance(RealVector v) throws IllegalArgumentException {\n            throw unsupported();\n        }\n",
        "begin_line": 392,
        "end_line": 394,
        "comment": "",
        "child_ranges": [
            "(line 393,col 13)-(line 393,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.SparseRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/SparseRealVectorTest.java",
        "signature": "org.apache.commons.math.linear.SparseRealVectorTest.SparseRealVectorTestImpl.getLInfDistance(double[])",
        "snippet": "        public double getLInfDistance(double[] v) throws IllegalArgumentException {\n            throw unsupported();\n        }\n",
        "begin_line": 396,
        "end_line": 398,
        "comment": "",
        "child_ranges": [
            "(line 397,col 13)-(line 397,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.SparseRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/SparseRealVectorTest.java",
        "signature": "org.apache.commons.math.linear.SparseRealVectorTest.SparseRealVectorTestImpl.unitVector()",
        "snippet": "        public RealVector unitVector() {\n            throw unsupported();\n        }\n",
        "begin_line": 400,
        "end_line": 402,
        "comment": "",
        "child_ranges": [
            "(line 401,col 13)-(line 401,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.SparseRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/SparseRealVectorTest.java",
        "signature": "org.apache.commons.math.linear.SparseRealVectorTest.SparseRealVectorTestImpl.unitize()",
        "snippet": "        public void unitize() {\n            throw unsupported();\n        }\n",
        "begin_line": 404,
        "end_line": 406,
        "comment": "",
        "child_ranges": [
            "(line 405,col 13)-(line 405,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.SparseRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/SparseRealVectorTest.java",
        "signature": "org.apache.commons.math.linear.SparseRealVectorTest.SparseRealVectorTestImpl.projection(org.apache.commons.math.linear.RealVector)",
        "snippet": "        public RealVector projection(RealVector v) throws IllegalArgumentException {\n            throw unsupported();\n        }\n",
        "begin_line": 408,
        "end_line": 410,
        "comment": "",
        "child_ranges": [
            "(line 409,col 13)-(line 409,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.SparseRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/SparseRealVectorTest.java",
        "signature": "org.apache.commons.math.linear.SparseRealVectorTest.SparseRealVectorTestImpl.projection(double[])",
        "snippet": "        public RealVector projection(double[] v) throws IllegalArgumentException {\n            throw unsupported();\n        }\n",
        "begin_line": 412,
        "end_line": 414,
        "comment": "",
        "child_ranges": [
            "(line 413,col 13)-(line 413,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.SparseRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/SparseRealVectorTest.java",
        "signature": "org.apache.commons.math.linear.SparseRealVectorTest.SparseRealVectorTestImpl.outerProduct(org.apache.commons.math.linear.RealVector)",
        "snippet": "        public RealMatrix outerProduct(RealVector v) throws IllegalArgumentException {\n            throw unsupported();\n        }\n",
        "begin_line": 416,
        "end_line": 418,
        "comment": "",
        "child_ranges": [
            "(line 417,col 13)-(line 417,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.SparseRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/SparseRealVectorTest.java",
        "signature": "org.apache.commons.math.linear.SparseRealVectorTest.SparseRealVectorTestImpl.outerProduct(double[])",
        "snippet": "        public RealMatrix outerProduct(double[] v) throws IllegalArgumentException {\n            throw unsupported();\n        }\n",
        "begin_line": 420,
        "end_line": 422,
        "comment": "",
        "child_ranges": [
            "(line 421,col 13)-(line 421,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.SparseRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/SparseRealVectorTest.java",
        "signature": "org.apache.commons.math.linear.SparseRealVectorTest.SparseRealVectorTestImpl.getEntry(int)",
        "snippet": "        public double getEntry(int index) throws MatrixIndexException {\n            return data[index];\n        }\n",
        "begin_line": 424,
        "end_line": 426,
        "comment": "",
        "child_ranges": [
            "(line 425,col 13)-(line 425,col 31)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.SparseRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/SparseRealVectorTest.java",
        "signature": "org.apache.commons.math.linear.SparseRealVectorTest.SparseRealVectorTestImpl.getDimension()",
        "snippet": "        public int getDimension() {\n            return data.length;\n        }\n",
        "begin_line": 428,
        "end_line": 430,
        "comment": "",
        "child_ranges": [
            "(line 429,col 13)-(line 429,col 31)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.SparseRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/SparseRealVectorTest.java",
        "signature": "org.apache.commons.math.linear.SparseRealVectorTest.SparseRealVectorTestImpl.append(org.apache.commons.math.linear.RealVector)",
        "snippet": "        public RealVector append(RealVector v) {\n            throw unsupported();\n        }\n",
        "begin_line": 432,
        "end_line": 434,
        "comment": "",
        "child_ranges": [
            "(line 433,col 13)-(line 433,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.SparseRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/SparseRealVectorTest.java",
        "signature": "org.apache.commons.math.linear.SparseRealVectorTest.SparseRealVectorTestImpl.append(double)",
        "snippet": "        public RealVector append(double d) {\n            throw unsupported();\n        }\n",
        "begin_line": 436,
        "end_line": 438,
        "comment": "",
        "child_ranges": [
            "(line 437,col 13)-(line 437,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.SparseRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/SparseRealVectorTest.java",
        "signature": "org.apache.commons.math.linear.SparseRealVectorTest.SparseRealVectorTestImpl.append(double[])",
        "snippet": "        public RealVector append(double[] a) {\n            throw unsupported();\n        }\n",
        "begin_line": 440,
        "end_line": 442,
        "comment": "",
        "child_ranges": [
            "(line 441,col 13)-(line 441,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.SparseRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/SparseRealVectorTest.java",
        "signature": "org.apache.commons.math.linear.SparseRealVectorTest.SparseRealVectorTestImpl.getSubVector(int, int)",
        "snippet": "        public RealVector getSubVector(int index, int n) throws MatrixIndexException {\n            throw unsupported();\n        }\n",
        "begin_line": 444,
        "end_line": 446,
        "comment": "",
        "child_ranges": [
            "(line 445,col 13)-(line 445,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.SparseRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/SparseRealVectorTest.java",
        "signature": "org.apache.commons.math.linear.SparseRealVectorTest.SparseRealVectorTestImpl.setEntry(int, double)",
        "snippet": "        public void setEntry(int index, double value) throws MatrixIndexException {\n            data[index] = value;\n        }\n",
        "begin_line": 448,
        "end_line": 450,
        "comment": "",
        "child_ranges": [
            "(line 449,col 13)-(line 449,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.SparseRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/SparseRealVectorTest.java",
        "signature": "org.apache.commons.math.linear.SparseRealVectorTest.SparseRealVectorTestImpl.setSubVector(int, org.apache.commons.math.linear.RealVector)",
        "snippet": "        public void setSubVector(int index, RealVector v) throws MatrixIndexException {\n            throw unsupported();\n        }\n",
        "begin_line": 452,
        "end_line": 454,
        "comment": "",
        "child_ranges": [
            "(line 453,col 13)-(line 453,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.SparseRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/SparseRealVectorTest.java",
        "signature": "org.apache.commons.math.linear.SparseRealVectorTest.SparseRealVectorTestImpl.setSubVector(int, double[])",
        "snippet": "        public void setSubVector(int index, double[] v) throws MatrixIndexException {\n            throw unsupported();\n        }\n",
        "begin_line": 456,
        "end_line": 458,
        "comment": "",
        "child_ranges": [
            "(line 457,col 13)-(line 457,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.SparseRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/SparseRealVectorTest.java",
        "signature": "org.apache.commons.math.linear.SparseRealVectorTest.SparseRealVectorTestImpl.set(double)",
        "snippet": "        public void set(double value) {\n            throw unsupported();\n        }\n",
        "begin_line": 460,
        "end_line": 462,
        "comment": "",
        "child_ranges": [
            "(line 461,col 13)-(line 461,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.SparseRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/SparseRealVectorTest.java",
        "signature": "org.apache.commons.math.linear.SparseRealVectorTest.SparseRealVectorTestImpl.toArray()",
        "snippet": "        public double[] toArray() {\n            throw unsupported();\n        }\n",
        "begin_line": 464,
        "end_line": 466,
        "comment": "",
        "child_ranges": [
            "(line 465,col 13)-(line 465,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.SparseRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/SparseRealVectorTest.java",
        "signature": "org.apache.commons.math.linear.SparseRealVectorTest.SparseRealVectorTestImpl.isNaN()",
        "snippet": "        public boolean isNaN() {\n            throw unsupported();\n        }\n",
        "begin_line": 468,
        "end_line": 470,
        "comment": "",
        "child_ranges": [
            "(line 469,col 13)-(line 469,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.SparseRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/SparseRealVectorTest.java",
        "signature": "org.apache.commons.math.linear.SparseRealVectorTest.SparseRealVectorTestImpl.isInfinite()",
        "snippet": "        public boolean isInfinite() {\n            throw unsupported();\n        }\n",
        "begin_line": 472,
        "end_line": 474,
        "comment": "",
        "child_ranges": [
            "(line 473,col 13)-(line 473,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.SparseRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/SparseRealVectorTest.java",
        "signature": "org.apache.commons.math.linear.SparseRealVectorTest.suite()",
        "snippet": "    public static Test suite() {\n        TestSuite suite = new TestSuite(SparseRealVectorTest.class);\n        suite.setName(\"SparseRealVector Tests\");\n        return suite;\n    }\n",
        "begin_line": 478,
        "end_line": 482,
        "comment": "",
        "child_ranges": [
            "(line 479,col 9)-(line 479,col 68)",
            "(line 480,col 9)-(line 480,col 48)",
            "(line 481,col 9)-(line 481,col 21)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.SparseRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/SparseRealVectorTest.java",
        "signature": "org.apache.commons.math.linear.SparseRealVectorTest.testConstructors()",
        "snippet": "    public void testConstructors() {\n\n        OpenMapRealVector v0 = new OpenMapRealVector();\n        assertEquals(\"testData len\", 0, v0.getDimension());\n\n        OpenMapRealVector v1 = new OpenMapRealVector(7);\n        assertEquals(\"testData len\", 7, v1.getDimension());\n        assertEquals(\"testData is 0.0 \", 0.0, v1.getEntry(6));\n\n        OpenMapRealVector v3 = new OpenMapRealVector(vec1);\n        assertEquals(\"testData len\", 3, v3.getDimension());\n        assertEquals(\"testData is 2.0 \", 2.0, v3.getEntry(1));\n\n        //SparseRealVector v4 = new SparseRealVector(vec4, 3, 2);\n        //assertEquals(\"testData len\", 2, v4.getDimension());\n        //assertEquals(\"testData is 4.0 \", 4.0, v4.getEntry(0));\n        //try {\n        //    new SparseRealVector(vec4, 8, 3);\n        //    fail(\"IllegalArgumentException expected\");\n        //} catch (IllegalArgumentException ex) {\n            // expected behavior\n        //} catch (Exception e) {\n        //    fail(\"wrong exception caught\");\n        //}\n\n        RealVector v5_i = new OpenMapRealVector(dvec1);\n        assertEquals(\"testData len\", 9, v5_i.getDimension());\n        assertEquals(\"testData is 9.0 \", 9.0, v5_i.getEntry(8));\n\n        OpenMapRealVector v5 = new OpenMapRealVector(dvec1);\n        assertEquals(\"testData len\", 9, v5.getDimension());\n        assertEquals(\"testData is 9.0 \", 9.0, v5.getEntry(8));\n\n        OpenMapRealVector v7 = new OpenMapRealVector(v1);\n        assertEquals(\"testData len\", 7, v7.getDimension());\n        assertEquals(\"testData is 0.0 \", 0.0, v7.getEntry(6));\n\n        SparseRealVectorTestImpl v7_i = new SparseRealVectorTestImpl(vec1);\n\n        OpenMapRealVector v7_2 = new OpenMapRealVector(v7_i);\n        assertEquals(\"testData len\", 3, v7_2.getDimension());\n        assertEquals(\"testData is 0.0 \", 2.0d, v7_2.getEntry(1));\n\n        OpenMapRealVector v8 = new OpenMapRealVector(v1);\n        assertEquals(\"testData len\", 7, v8.getDimension());\n        assertEquals(\"testData is 0.0 \", 0.0, v8.getEntry(6));\n\n    }\n",
        "begin_line": 484,
        "end_line": 531,
        "comment": "",
        "child_ranges": [
            "(line 486,col 9)-(line 486,col 55)",
            "(line 487,col 9)-(line 487,col 59)",
            "(line 489,col 9)-(line 489,col 56)",
            "(line 490,col 9)-(line 490,col 59)",
            "(line 491,col 9)-(line 491,col 62)",
            "(line 493,col 9)-(line 493,col 59)",
            "(line 494,col 9)-(line 494,col 59)",
            "(line 495,col 9)-(line 495,col 62)",
            "(line 509,col 9)-(line 509,col 55)",
            "(line 510,col 9)-(line 510,col 61)",
            "(line 511,col 9)-(line 511,col 64)",
            "(line 513,col 9)-(line 513,col 60)",
            "(line 514,col 9)-(line 514,col 59)",
            "(line 515,col 9)-(line 515,col 62)",
            "(line 517,col 9)-(line 517,col 57)",
            "(line 518,col 9)-(line 518,col 59)",
            "(line 519,col 9)-(line 519,col 62)",
            "(line 521,col 9)-(line 521,col 75)",
            "(line 523,col 9)-(line 523,col 61)",
            "(line 524,col 9)-(line 524,col 61)",
            "(line 525,col 9)-(line 525,col 65)",
            "(line 527,col 9)-(line 527,col 57)",
            "(line 528,col 9)-(line 528,col 59)",
            "(line 529,col 9)-(line 529,col 62)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.SparseRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/SparseRealVectorTest.java",
        "signature": "org.apache.commons.math.linear.SparseRealVectorTest.testDataInOut()",
        "snippet": "    public void testDataInOut() {\n\n        OpenMapRealVector v1 = new OpenMapRealVector(vec1);\n        OpenMapRealVector v2 = new OpenMapRealVector(vec2);\n        OpenMapRealVector v4 = new OpenMapRealVector(vec4);\n        SparseRealVectorTestImpl v2_t = new SparseRealVectorTestImpl(vec2);\n\n        RealVector v_append_1 = v1.append(v2);\n        assertEquals(\"testData len\", 6, v_append_1.getDimension());\n        assertEquals(\"testData is 4.0 \", 4.0, v_append_1.getEntry(3));\n\n        RealVector v_append_2 = v1.append(2.0);\n        assertEquals(\"testData len\", 4, v_append_2.getDimension());\n        assertEquals(\"testData is 2.0 \", 2.0, v_append_2.getEntry(3));\n\n        RealVector v_append_3 = v1.append(vec2);\n        assertEquals(\"testData len\", 6, v_append_3.getDimension());\n        assertEquals(\"testData is  \", 4.0, v_append_3.getEntry(3));\n\n        RealVector v_append_4 = v1.append(v2_t);\n        assertEquals(\"testData len\", 6, v_append_4.getDimension());\n        assertEquals(\"testData is 4.0 \", 4.0, v_append_4.getEntry(3));\n\n        RealVector vout5 = v4.getSubVector(3, 3);\n        assertEquals(\"testData len\", 3, vout5.getDimension());\n        assertEquals(\"testData is 4.0 \", 5.0, vout5.getEntry(1));\n        try {\n            v4.getSubVector(3, 7);\n            fail(\"MatrixIndexException expected\");\n        } catch (MatrixIndexException ex) {\n            // expected behavior\n        } catch (Exception e) {\n            fail(\"wrong exception caught\");\n        }\n\n        OpenMapRealVector v_set1 = v1.copy();\n        v_set1.setEntry(1, 11.0);\n        assertEquals(\"testData is 11.0 \", 11.0, v_set1.getEntry(1));\n        try {\n            v_set1.setEntry(3, 11.0);\n            fail(\"MatrixIndexException expected\");\n        } catch (MatrixIndexException ex) {\n            // expected behavior\n        } catch (Exception e) {\n            fail(\"wrong exception caught\");\n        }\n\n        OpenMapRealVector v_set2 = v4.copy();\n        v_set2.setSubVector(3, v1);\n        assertEquals(\"testData is 1.0 \", 1.0, v_set2.getEntry(3));\n        assertEquals(\"testData is 7.0 \", 7.0, v_set2.getEntry(6));\n        try {\n            v_set2.setSubVector(7, v1);\n            fail(\"MatrixIndexException expected\");\n        } catch (MatrixIndexException ex) {\n            // expected behavior\n        } catch (Exception e) {\n            fail(\"wrong exception caught\");\n        }\n\n        OpenMapRealVector v_set3 = v1.copy();\n        v_set3.set(13.0);\n        assertEquals(\"testData is 13.0 \", 13.0, v_set3.getEntry(2));\n\n        try {\n            v_set3.getEntry(23);\n            fail(\"MatrixIndexException expected\");\n        } catch (MatrixIndexException ex) {\n            // expected behavior\n        } catch (Exception e) {\n            fail(\"wrong exception caught\");\n        }\n\n        OpenMapRealVector v_set4 = v4.copy();\n        v_set4.setSubVector(3, v2_t);\n        assertEquals(\"testData is 1.0 \", 4.0, v_set4.getEntry(3));\n        assertEquals(\"testData is 7.0 \", 7.0, v_set4.getEntry(6));\n        try {\n            v_set4.setSubVector(7, v2_t);\n            fail(\"MatrixIndexException expected\");\n        } catch (MatrixIndexException ex) {\n            // expected behavior\n        } catch (Exception e) {\n            fail(\"wrong exception caught\");\n        }\n\n\n    }\n",
        "begin_line": 533,
        "end_line": 620,
        "comment": "",
        "child_ranges": [
            "(line 535,col 9)-(line 535,col 59)",
            "(line 536,col 9)-(line 536,col 59)",
            "(line 537,col 9)-(line 537,col 59)",
            "(line 538,col 9)-(line 538,col 75)",
            "(line 540,col 9)-(line 540,col 46)",
            "(line 541,col 9)-(line 541,col 67)",
            "(line 542,col 9)-(line 542,col 70)",
            "(line 544,col 9)-(line 544,col 47)",
            "(line 545,col 9)-(line 545,col 67)",
            "(line 546,col 9)-(line 546,col 70)",
            "(line 548,col 9)-(line 548,col 48)",
            "(line 549,col 9)-(line 549,col 67)",
            "(line 550,col 9)-(line 550,col 67)",
            "(line 552,col 9)-(line 552,col 48)",
            "(line 553,col 9)-(line 553,col 67)",
            "(line 554,col 9)-(line 554,col 70)",
            "(line 556,col 9)-(line 556,col 49)",
            "(line 557,col 9)-(line 557,col 62)",
            "(line 558,col 9)-(line 558,col 65)",
            "(line 559,col 9)-(line 566,col 9)",
            "(line 568,col 9)-(line 568,col 45)",
            "(line 569,col 9)-(line 569,col 33)",
            "(line 570,col 9)-(line 570,col 68)",
            "(line 571,col 9)-(line 578,col 9)",
            "(line 580,col 9)-(line 580,col 45)",
            "(line 581,col 9)-(line 581,col 35)",
            "(line 582,col 9)-(line 582,col 66)",
            "(line 583,col 9)-(line 583,col 66)",
            "(line 584,col 9)-(line 591,col 9)",
            "(line 593,col 9)-(line 593,col 45)",
            "(line 594,col 9)-(line 594,col 25)",
            "(line 595,col 9)-(line 595,col 68)",
            "(line 597,col 9)-(line 604,col 9)",
            "(line 606,col 9)-(line 606,col 45)",
            "(line 607,col 9)-(line 607,col 37)",
            "(line 608,col 9)-(line 608,col 66)",
            "(line 609,col 9)-(line 609,col 66)",
            "(line 610,col 9)-(line 617,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.SparseRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/SparseRealVectorTest.java",
        "signature": "org.apache.commons.math.linear.SparseRealVectorTest.testMapFunctions()",
        "snippet": "    public void testMapFunctions() {\n        OpenMapRealVector v1 = new OpenMapRealVector(vec1);\n\n        //octave =  v1 .+ 2.0\n        RealVector v_mapAdd = v1.mapAdd(2.0d);\n        double[] result_mapAdd = {3d, 4d, 5d};\n        assertClose(\"compare vectors\" ,result_mapAdd,v_mapAdd.getData(),normTolerance);\n\n        //octave =  v1 .+ 2.0\n        RealVector v_mapAddToSelf = v1.copy();\n        v_mapAddToSelf.mapAddToSelf(2.0d);\n        double[] result_mapAddToSelf = {3d, 4d, 5d};\n        assertClose(\"compare vectors\" ,result_mapAddToSelf,v_mapAddToSelf.getData(),normTolerance);\n\n        //octave =  v1 .- 2.0\n        RealVector v_mapSubtract = v1.mapSubtract(2.0d);\n        double[] result_mapSubtract = {-1d, 0d, 1d};\n        assertClose(\"compare vectors\" ,result_mapSubtract,v_mapSubtract.getData(),normTolerance);\n\n        //octave =  v1 .- 2.0\n        RealVector v_mapSubtractToSelf = v1.copy();\n        v_mapSubtractToSelf.mapSubtractToSelf(2.0d);\n        double[] result_mapSubtractToSelf = {-1d, 0d, 1d};\n        assertClose(\"compare vectors\" ,result_mapSubtractToSelf,v_mapSubtractToSelf.getData(),normTolerance);\n\n        //octave =  v1 .* 2.0\n        RealVector v_mapMultiply = v1.mapMultiply(2.0d);\n        double[] result_mapMultiply = {2d, 4d, 6d};\n        assertClose(\"compare vectors\" ,result_mapMultiply,v_mapMultiply.getData(),normTolerance);\n\n        //octave =  v1 .* 2.0\n        RealVector v_mapMultiplyToSelf = v1.copy();\n        v_mapMultiplyToSelf.mapMultiplyToSelf(2.0d);\n        double[] result_mapMultiplyToSelf = {2d, 4d, 6d};\n        assertClose(\"compare vectors\" ,result_mapMultiplyToSelf,v_mapMultiplyToSelf.getData(),normTolerance);\n\n        //octave =  v1 ./ 2.0\n        RealVector v_mapDivide = v1.mapDivide(2.0d);\n        double[] result_mapDivide = {.5d, 1d, 1.5d};\n        assertClose(\"compare vectors\" ,result_mapDivide,v_mapDivide.getData(),normTolerance);\n\n        //octave =  v1 ./ 2.0\n        RealVector v_mapDivideToSelf = v1.copy();\n        v_mapDivideToSelf.mapDivideToSelf(2.0d);\n        double[] result_mapDivideToSelf = {.5d, 1d, 1.5d};\n        assertClose(\"compare vectors\" ,result_mapDivideToSelf,v_mapDivideToSelf.getData(),normTolerance);\n\n        //octave =  v1 .^ 2.0\n        RealVector v_mapPow = v1.mapPow(2.0d);\n        double[] result_mapPow = {1d, 4d, 9d};\n        assertClose(\"compare vectors\" ,result_mapPow,v_mapPow.getData(),normTolerance);\n\n        //octave =  v1 .^ 2.0\n        RealVector v_mapPowToSelf = v1.copy();\n        v_mapPowToSelf.mapPowToSelf(2.0d);\n        double[] result_mapPowToSelf = {1d, 4d, 9d};\n        assertClose(\"compare vectors\" ,result_mapPowToSelf,v_mapPowToSelf.getData(),normTolerance);\n\n        //octave =  exp(v1)\n        RealVector v_mapExp = v1.mapExp();\n        double[] result_mapExp = {2.718281828459045e+00d,7.389056098930650e+00d, 2.008553692318767e+01d};\n        assertClose(\"compare vectors\" ,result_mapExp,v_mapExp.getData(),normTolerance);\n\n        //octave =  exp(v1)\n        RealVector v_mapExpToSelf = v1.copy();\n        v_mapExpToSelf.mapExpToSelf();\n        double[] result_mapExpToSelf = {2.718281828459045e+00d,7.389056098930650e+00d, 2.008553692318767e+01d};\n        assertClose(\"compare vectors\" ,result_mapExpToSelf,v_mapExpToSelf.getData(),normTolerance);\n\n\n        //octave =  ???\n        RealVector v_mapExpm1 = v1.mapExpm1();\n        double[] result_mapExpm1 = {1.718281828459045d,6.38905609893065d, 19.085536923187668d};\n        assertClose(\"compare vectors\" ,result_mapExpm1,v_mapExpm1.getData(),normTolerance);\n\n        //octave =  ???\n        RealVector v_mapExpm1ToSelf = v1.copy();\n        v_mapExpm1ToSelf.mapExpm1ToSelf();\n        double[] result_mapExpm1ToSelf = {1.718281828459045d,6.38905609893065d, 19.085536923187668d};\n        assertClose(\"compare vectors\" ,result_mapExpm1ToSelf,v_mapExpm1ToSelf.getData(),normTolerance);\n\n        //octave =  log(v1)\n        RealVector v_mapLog = v1.mapLog();\n        double[] result_mapLog = {0d,6.931471805599453e-01d, 1.098612288668110e+00d};\n        assertClose(\"compare vectors\" ,result_mapLog,v_mapLog.getData(),normTolerance);\n\n        //octave =  log(v1)\n        RealVector v_mapLogToSelf = v1.copy();\n        v_mapLogToSelf.mapLogToSelf();\n        double[] result_mapLogToSelf = {0d,6.931471805599453e-01d, 1.098612288668110e+00d};\n        assertClose(\"compare vectors\" ,result_mapLogToSelf,v_mapLogToSelf.getData(),normTolerance);\n\n        //octave =  log10(v1)\n        RealVector v_mapLog10 = v1.mapLog10();\n        double[] result_mapLog10 = {0d,3.010299956639812e-01d, 4.771212547196624e-01d};\n        assertClose(\"compare vectors\" ,result_mapLog10,v_mapLog10.getData(),normTolerance);\n\n        //octave =  log(v1)\n        RealVector v_mapLog10ToSelf = v1.copy();\n        v_mapLog10ToSelf.mapLog10ToSelf();\n        double[] result_mapLog10ToSelf = {0d,3.010299956639812e-01d, 4.771212547196624e-01d};\n        assertClose(\"compare vectors\" ,result_mapLog10ToSelf,v_mapLog10ToSelf.getData(),normTolerance);\n\n        //octave =  ???\n        RealVector v_mapLog1p = v1.mapLog1p();\n        double[] result_mapLog1p = {0.6931471805599453d,1.0986122886681096d,1.3862943611198906d};\n        assertClose(\"compare vectors\" ,result_mapLog1p,v_mapLog1p.getData(),normTolerance);\n\n        //octave =  ???\n        RealVector v_mapLog1pToSelf = v1.copy();\n        v_mapLog1pToSelf.mapLog1pToSelf();\n        double[] result_mapLog1pToSelf = {0.6931471805599453d,1.0986122886681096d,1.3862943611198906d};\n        assertClose(\"compare vectors\" ,result_mapLog1pToSelf,v_mapLog1pToSelf.getData(),normTolerance);\n\n        //octave =  cosh(v1)\n        RealVector v_mapCosh = v1.mapCosh();\n        double[] result_mapCosh = {1.543080634815244e+00d,3.762195691083631e+00d, 1.006766199577777e+01d};\n        assertClose(\"compare vectors\" ,result_mapCosh,v_mapCosh.getData(),normTolerance);\n\n        //octave =  cosh(v1)\n        RealVector v_mapCoshToSelf = v1.copy();\n        v_mapCoshToSelf.mapCoshToSelf();\n        double[] result_mapCoshToSelf = {1.543080634815244e+00d,3.762195691083631e+00d, 1.006766199577777e+01d};\n        assertClose(\"compare vectors\" ,result_mapCoshToSelf,v_mapCoshToSelf.getData(),normTolerance);\n\n        //octave =  sinh(v1)\n        RealVector v_mapSinh = v1.mapSinh();\n        double[] result_mapSinh = {1.175201193643801e+00d,3.626860407847019e+00d, 1.001787492740990e+01d};\n        assertClose(\"compare vectors\" ,result_mapSinh,v_mapSinh.getData(),normTolerance);\n\n        //octave =  sinh(v1)\n        RealVector v_mapSinhToSelf = v1.copy();\n        v_mapSinhToSelf.mapSinhToSelf();\n        double[] result_mapSinhToSelf = {1.175201193643801e+00d,3.626860407847019e+00d, 1.001787492740990e+01d};\n        assertClose(\"compare vectors\" ,result_mapSinhToSelf,v_mapSinhToSelf.getData(),normTolerance);\n\n        //octave =  tanh(v1)\n        RealVector v_mapTanh = v1.mapTanh();\n        double[] result_mapTanh = {7.615941559557649e-01d,9.640275800758169e-01d,9.950547536867305e-01d};\n        assertClose(\"compare vectors\" ,result_mapTanh,v_mapTanh.getData(),normTolerance);\n\n        //octave =  tanh(v1)\n        RealVector v_mapTanhToSelf = v1.copy();\n        v_mapTanhToSelf.mapTanhToSelf();\n        double[] result_mapTanhToSelf = {7.615941559557649e-01d,9.640275800758169e-01d,9.950547536867305e-01d};\n        assertClose(\"compare vectors\" ,result_mapTanhToSelf,v_mapTanhToSelf.getData(),normTolerance);\n\n        //octave =  cos(v1)\n        RealVector v_mapCos = v1.mapCos();\n        double[] result_mapCos = {5.403023058681398e-01d,-4.161468365471424e-01d, -9.899924966004454e-01d};\n        assertClose(\"compare vectors\" ,result_mapCos,v_mapCos.getData(),normTolerance);\n\n        //octave =  cos(v1)\n        RealVector v_mapCosToSelf = v1.copy();\n        v_mapCosToSelf.mapCosToSelf();\n        double[] result_mapCosToSelf = {5.403023058681398e-01d,-4.161468365471424e-01d, -9.899924966004454e-01d};\n        assertClose(\"compare vectors\" ,result_mapCosToSelf,v_mapCosToSelf.getData(),normTolerance);\n\n        //octave =  sin(v1)\n        RealVector v_mapSin = v1.mapSin();\n        double[] result_mapSin = {8.414709848078965e-01d,9.092974268256817e-01d,1.411200080598672e-01d};\n        assertClose(\"compare vectors\" ,result_mapSin,v_mapSin.getData(),normTolerance);\n\n        //octave =  sin(v1)\n        RealVector v_mapSinToSelf = v1.copy();\n        v_mapSinToSelf.mapSinToSelf();\n        double[] result_mapSinToSelf = {8.414709848078965e-01d,9.092974268256817e-01d,1.411200080598672e-01d};\n        assertClose(\"compare vectors\" ,result_mapSinToSelf,v_mapSinToSelf.getData(),normTolerance);\n\n        //octave =  tan(v1)\n        RealVector v_mapTan = v1.mapTan();\n        double[] result_mapTan = {1.557407724654902e+00d,-2.185039863261519e+00d,-1.425465430742778e-01d};\n        assertClose(\"compare vectors\" ,result_mapTan,v_mapTan.getData(),normTolerance);\n\n        //octave =  tan(v1)\n        RealVector v_mapTanToSelf = v1.copy();\n        v_mapTanToSelf.mapTanToSelf();\n        double[] result_mapTanToSelf = {1.557407724654902e+00d,-2.185039863261519e+00d,-1.425465430742778e-01d};\n        assertClose(\"compare vectors\" ,result_mapTanToSelf,v_mapTanToSelf.getData(),normTolerance);\n\n        double[] vat_a = {0d, 0.5d, 1.0d};\n        OpenMapRealVector vat = new OpenMapRealVector(vat_a);\n\n        //octave =  acos(vat)\n        RealVector v_mapAcos = vat.mapAcos();\n        double[] result_mapAcos = {1.570796326794897e+00d,1.047197551196598e+00d, 0.0d};\n        assertClose(\"compare vectors\" ,result_mapAcos,v_mapAcos.getData(),normTolerance);\n\n        //octave =  acos(vat)\n        RealVector v_mapAcosToSelf = vat.copy();\n        v_mapAcosToSelf.mapAcosToSelf();\n        double[] result_mapAcosToSelf = {1.570796326794897e+00d,1.047197551196598e+00d, 0.0d};\n        assertClose(\"compare vectors\" ,result_mapAcosToSelf,v_mapAcosToSelf.getData(),normTolerance);\n\n        //octave =  asin(vat)\n        RealVector v_mapAsin = vat.mapAsin();\n        double[] result_mapAsin = {0.0d,5.235987755982989e-01d,1.570796326794897e+00d};\n        assertClose(\"compare vectors\" ,result_mapAsin,v_mapAsin.getData(),normTolerance);\n\n        //octave =  asin(vat)\n        RealVector v_mapAsinToSelf = vat.copy();\n        v_mapAsinToSelf.mapAsinToSelf();\n        double[] result_mapAsinToSelf = {0.0d,5.235987755982989e-01d,1.570796326794897e+00d};\n        assertClose(\"compare vectors\" ,result_mapAsinToSelf,v_mapAsinToSelf.getData(),normTolerance);\n\n        //octave =  atan(vat)\n        RealVector v_mapAtan = vat.mapAtan();\n        double[] result_mapAtan = {0.0d,4.636476090008061e-01d,7.853981633974483e-01d};\n        assertClose(\"compare vectors\" ,result_mapAtan,v_mapAtan.getData(),normTolerance);\n\n        //octave =  atan(vat)\n        RealVector v_mapAtanToSelf = vat.copy();\n        v_mapAtanToSelf.mapAtanToSelf();\n        double[] result_mapAtanToSelf = {0.0d,4.636476090008061e-01d,7.853981633974483e-01d};\n        assertClose(\"compare vectors\" ,result_mapAtanToSelf,v_mapAtanToSelf.getData(),normTolerance);\n\n        //octave =  v1 .^-1\n        RealVector v_mapInv = v1.mapInv();\n        double[] result_mapInv = {1d,0.5d,3.333333333333333e-01d};\n        assertClose(\"compare vectors\" ,result_mapInv,v_mapInv.getData(),normTolerance);\n\n        //octave =  v1 .^-1\n        RealVector v_mapInvToSelf = v1.copy();\n        v_mapInvToSelf.mapInvToSelf();\n        double[] result_mapInvToSelf = {1d,0.5d,3.333333333333333e-01d};\n        assertClose(\"compare vectors\" ,result_mapInvToSelf,v_mapInvToSelf.getData(),normTolerance);\n\n        double[] abs_a = {-1.0d, 0.0d, 1.0d};\n        OpenMapRealVector abs_v = new OpenMapRealVector(abs_a);\n\n        //octave =  abs(abs_v)\n        RealVector v_mapAbs = abs_v.mapAbs();\n        double[] result_mapAbs = {1d,0d,1d};\n        assertClose(\"compare vectors\" ,result_mapAbs,v_mapAbs.getData(),normTolerance);\n\n        //octave = abs(abs_v)\n        RealVector v_mapAbsToSelf = abs_v.copy();\n        v_mapAbsToSelf.mapAbsToSelf();\n        double[] result_mapAbsToSelf = {1d,0d,1d};\n        assertClose(\"compare vectors\" ,result_mapAbsToSelf,v_mapAbsToSelf.getData(),normTolerance);\n\n        //octave =   sqrt(v1)\n        RealVector v_mapSqrt = v1.mapSqrt();\n        double[] result_mapSqrt = {1d,1.414213562373095e+00d,1.732050807568877e+00d};\n        assertClose(\"compare vectors\" ,result_mapSqrt,v_mapSqrt.getData(),normTolerance);\n\n        //octave =  sqrt(v1)\n        RealVector v_mapSqrtToSelf = v1.copy();\n        v_mapSqrtToSelf.mapSqrtToSelf();\n        double[] result_mapSqrtToSelf = {1d,1.414213562373095e+00d,1.732050807568877e+00d};\n        assertClose(\"compare vectors\" ,result_mapSqrtToSelf,v_mapSqrtToSelf.getData(),normTolerance);\n\n        double[] cbrt_a = {-2.0d, 0.0d, 2.0d};\n        OpenMapRealVector cbrt_v = new OpenMapRealVector(cbrt_a);\n\n        //octave =  ???\n        RealVector v_mapCbrt = cbrt_v.mapCbrt();\n        double[] result_mapCbrt = {-1.2599210498948732d,0d,1.2599210498948732d};\n        assertClose(\"compare vectors\" ,result_mapCbrt,v_mapCbrt.getData(),normTolerance);\n\n        //octave = ???\n        RealVector v_mapCbrtToSelf = cbrt_v.copy();\n        v_mapCbrtToSelf.mapCbrtToSelf();\n        double[] result_mapCbrtToSelf =  {-1.2599210498948732d,0d,1.2599210498948732d};\n        assertClose(\"compare vectors\" ,result_mapCbrtToSelf,v_mapCbrtToSelf.getData(),normTolerance);\n\n        double[] ceil_a = {-1.1d, 0.9d, 1.1d};\n        OpenMapRealVector ceil_v = new OpenMapRealVector(ceil_a);\n\n        //octave =  ceil(ceil_v)\n        RealVector v_mapCeil = ceil_v.mapCeil();\n        double[] result_mapCeil = {-1d,1d,2d};\n        assertClose(\"compare vectors\" ,result_mapCeil,v_mapCeil.getData(),normTolerance);\n\n        //octave = ceil(ceil_v)\n        RealVector v_mapCeilToSelf = ceil_v.copy();\n        v_mapCeilToSelf.mapCeilToSelf();\n        double[] result_mapCeilToSelf =  {-1d,1d,2d};\n        assertClose(\"compare vectors\" ,result_mapCeilToSelf,v_mapCeilToSelf.getData(),normTolerance);\n\n        //octave =  floor(ceil_v)\n        RealVector v_mapFloor = ceil_v.mapFloor();\n        double[] result_mapFloor = {-2d,0d,1d};\n        assertClose(\"compare vectors\" ,result_mapFloor,v_mapFloor.getData(),normTolerance);\n\n        //octave = floor(ceil_v)\n        RealVector v_mapFloorToSelf = ceil_v.copy();\n        v_mapFloorToSelf.mapFloorToSelf();\n        double[] result_mapFloorToSelf =  {-2d,0d,1d};\n        assertClose(\"compare vectors\" ,result_mapFloorToSelf,v_mapFloorToSelf.getData(),normTolerance);\n\n        //octave =  ???\n        RealVector v_mapRint = ceil_v.mapRint();\n        double[] result_mapRint = {-1d,1d,1d};\n        assertClose(\"compare vectors\" ,result_mapRint,v_mapRint.getData(),normTolerance);\n\n        //octave = ???\n        RealVector v_mapRintToSelf = ceil_v.copy();\n        v_mapRintToSelf.mapRintToSelf();\n        double[] result_mapRintToSelf =  {-1d,1d,1d};\n        assertClose(\"compare vectors\" ,result_mapRintToSelf,v_mapRintToSelf.getData(),normTolerance);\n\n        //octave =  ???\n        RealVector v_mapSignum = ceil_v.mapSignum();\n        double[] result_mapSignum = {-1d,1d,1d};\n        assertClose(\"compare vectors\" ,result_mapSignum,v_mapSignum.getData(),normTolerance);\n\n        //octave = ???\n        RealVector v_mapSignumToSelf = ceil_v.copy();\n        v_mapSignumToSelf.mapSignumToSelf();\n        double[] result_mapSignumToSelf =  {-1d,1d,1d};\n        assertClose(\"compare vectors\" ,result_mapSignumToSelf,v_mapSignumToSelf.getData(),normTolerance);\n\n\n        // Is with the used resolutions of limited value as test\n        //octave =  ???\n        RealVector v_mapUlp = ceil_v.mapUlp();\n        double[] result_mapUlp = {2.220446049250313E-16d,1.1102230246251565E-16d,2.220446049250313E-16d};\n        assertClose(\"compare vectors\" ,result_mapUlp,v_mapUlp.getData(),normTolerance);\n\n        //octave = ???\n        RealVector v_mapUlpToSelf = ceil_v.copy();\n        v_mapUlpToSelf.mapUlpToSelf();\n        double[] result_mapUlpToSelf = {2.220446049250313E-16d,1.1102230246251565E-16d,2.220446049250313E-16d};\n        assertClose(\"compare vectors\" ,result_mapUlpToSelf,v_mapUlpToSelf.getData(),normTolerance);\n\n    }\n",
        "begin_line": 622,
        "end_line": 948,
        "comment": "",
        "child_ranges": [
            "(line 623,col 9)-(line 623,col 59)",
            "(line 626,col 9)-(line 626,col 46)",
            "(line 627,col 9)-(line 627,col 46)",
            "(line 628,col 9)-(line 628,col 87)",
            "(line 631,col 9)-(line 631,col 46)",
            "(line 632,col 9)-(line 632,col 42)",
            "(line 633,col 9)-(line 633,col 52)",
            "(line 634,col 9)-(line 634,col 99)",
            "(line 637,col 9)-(line 637,col 56)",
            "(line 638,col 9)-(line 638,col 52)",
            "(line 639,col 9)-(line 639,col 97)",
            "(line 642,col 9)-(line 642,col 51)",
            "(line 643,col 9)-(line 643,col 52)",
            "(line 644,col 9)-(line 644,col 58)",
            "(line 645,col 9)-(line 645,col 109)",
            "(line 648,col 9)-(line 648,col 56)",
            "(line 649,col 9)-(line 649,col 51)",
            "(line 650,col 9)-(line 650,col 97)",
            "(line 653,col 9)-(line 653,col 51)",
            "(line 654,col 9)-(line 654,col 52)",
            "(line 655,col 9)-(line 655,col 57)",
            "(line 656,col 9)-(line 656,col 109)",
            "(line 659,col 9)-(line 659,col 52)",
            "(line 660,col 9)-(line 660,col 52)",
            "(line 661,col 9)-(line 661,col 93)",
            "(line 664,col 9)-(line 664,col 49)",
            "(line 665,col 9)-(line 665,col 48)",
            "(line 666,col 9)-(line 666,col 58)",
            "(line 667,col 9)-(line 667,col 105)",
            "(line 670,col 9)-(line 670,col 46)",
            "(line 671,col 9)-(line 671,col 46)",
            "(line 672,col 9)-(line 672,col 87)",
            "(line 675,col 9)-(line 675,col 46)",
            "(line 676,col 9)-(line 676,col 42)",
            "(line 677,col 9)-(line 677,col 52)",
            "(line 678,col 9)-(line 678,col 99)",
            "(line 681,col 9)-(line 681,col 42)",
            "(line 682,col 9)-(line 682,col 105)",
            "(line 683,col 9)-(line 683,col 87)",
            "(line 686,col 9)-(line 686,col 46)",
            "(line 687,col 9)-(line 687,col 38)",
            "(line 688,col 9)-(line 688,col 111)",
            "(line 689,col 9)-(line 689,col 99)",
            "(line 693,col 9)-(line 693,col 46)",
            "(line 694,col 9)-(line 694,col 95)",
            "(line 695,col 9)-(line 695,col 91)",
            "(line 698,col 9)-(line 698,col 48)",
            "(line 699,col 9)-(line 699,col 42)",
            "(line 700,col 9)-(line 700,col 101)",
            "(line 701,col 9)-(line 701,col 103)",
            "(line 704,col 9)-(line 704,col 42)",
            "(line 705,col 9)-(line 705,col 85)",
            "(line 706,col 9)-(line 706,col 87)",
            "(line 709,col 9)-(line 709,col 46)",
            "(line 710,col 9)-(line 710,col 38)",
            "(line 711,col 9)-(line 711,col 91)",
            "(line 712,col 9)-(line 712,col 99)",
            "(line 715,col 9)-(line 715,col 46)",
            "(line 716,col 9)-(line 716,col 87)",
            "(line 717,col 9)-(line 717,col 91)",
            "(line 720,col 9)-(line 720,col 48)",
            "(line 721,col 9)-(line 721,col 42)",
            "(line 722,col 9)-(line 722,col 93)",
            "(line 723,col 9)-(line 723,col 103)",
            "(line 726,col 9)-(line 726,col 46)",
            "(line 727,col 9)-(line 727,col 97)",
            "(line 728,col 9)-(line 728,col 91)",
            "(line 731,col 9)-(line 731,col 48)",
            "(line 732,col 9)-(line 732,col 42)",
            "(line 733,col 9)-(line 733,col 103)",
            "(line 734,col 9)-(line 734,col 103)",
            "(line 737,col 9)-(line 737,col 44)",
            "(line 738,col 9)-(line 738,col 106)",
            "(line 739,col 9)-(line 739,col 89)",
            "(line 742,col 9)-(line 742,col 47)",
            "(line 743,col 9)-(line 743,col 40)",
            "(line 744,col 9)-(line 744,col 112)",
            "(line 745,col 9)-(line 745,col 101)",
            "(line 748,col 9)-(line 748,col 44)",
            "(line 749,col 9)-(line 749,col 106)",
            "(line 750,col 9)-(line 750,col 89)",
            "(line 753,col 9)-(line 753,col 47)",
            "(line 754,col 9)-(line 754,col 40)",
            "(line 755,col 9)-(line 755,col 112)",
            "(line 756,col 9)-(line 756,col 101)",
            "(line 759,col 9)-(line 759,col 44)",
            "(line 760,col 9)-(line 760,col 105)",
            "(line 761,col 9)-(line 761,col 89)",
            "(line 764,col 9)-(line 764,col 47)",
            "(line 765,col 9)-(line 765,col 40)",
            "(line 766,col 9)-(line 766,col 111)",
            "(line 767,col 9)-(line 767,col 101)",
            "(line 770,col 9)-(line 770,col 42)",
            "(line 771,col 9)-(line 771,col 107)",
            "(line 772,col 9)-(line 772,col 87)",
            "(line 775,col 9)-(line 775,col 46)",
            "(line 776,col 9)-(line 776,col 38)",
            "(line 777,col 9)-(line 777,col 113)",
            "(line 778,col 9)-(line 778,col 99)",
            "(line 781,col 9)-(line 781,col 42)",
            "(line 782,col 9)-(line 782,col 104)",
            "(line 783,col 9)-(line 783,col 87)",
            "(line 786,col 9)-(line 786,col 46)",
            "(line 787,col 9)-(line 787,col 38)",
            "(line 788,col 9)-(line 788,col 110)",
            "(line 789,col 9)-(line 789,col 99)",
            "(line 792,col 9)-(line 792,col 42)",
            "(line 793,col 9)-(line 793,col 106)",
            "(line 794,col 9)-(line 794,col 87)",
            "(line 797,col 9)-(line 797,col 46)",
            "(line 798,col 9)-(line 798,col 38)",
            "(line 799,col 9)-(line 799,col 112)",
            "(line 800,col 9)-(line 800,col 99)",
            "(line 802,col 9)-(line 802,col 42)",
            "(line 803,col 9)-(line 803,col 61)",
            "(line 806,col 9)-(line 806,col 45)",
            "(line 807,col 9)-(line 807,col 88)",
            "(line 808,col 9)-(line 808,col 89)",
            "(line 811,col 9)-(line 811,col 48)",
            "(line 812,col 9)-(line 812,col 40)",
            "(line 813,col 9)-(line 813,col 94)",
            "(line 814,col 9)-(line 814,col 101)",
            "(line 817,col 9)-(line 817,col 45)",
            "(line 818,col 9)-(line 818,col 87)",
            "(line 819,col 9)-(line 819,col 89)",
            "(line 822,col 9)-(line 822,col 48)",
            "(line 823,col 9)-(line 823,col 40)",
            "(line 824,col 9)-(line 824,col 93)",
            "(line 825,col 9)-(line 825,col 101)",
            "(line 828,col 9)-(line 828,col 45)",
            "(line 829,col 9)-(line 829,col 87)",
            "(line 830,col 9)-(line 830,col 89)",
            "(line 833,col 9)-(line 833,col 48)",
            "(line 834,col 9)-(line 834,col 40)",
            "(line 835,col 9)-(line 835,col 93)",
            "(line 836,col 9)-(line 836,col 101)",
            "(line 839,col 9)-(line 839,col 42)",
            "(line 840,col 9)-(line 840,col 66)",
            "(line 841,col 9)-(line 841,col 87)",
            "(line 844,col 9)-(line 844,col 46)",
            "(line 845,col 9)-(line 845,col 38)",
            "(line 846,col 9)-(line 846,col 72)",
            "(line 847,col 9)-(line 847,col 99)",
            "(line 849,col 9)-(line 849,col 45)",
            "(line 850,col 9)-(line 850,col 63)",
            "(line 853,col 9)-(line 853,col 45)",
            "(line 854,col 9)-(line 854,col 44)",
            "(line 855,col 9)-(line 855,col 87)",
            "(line 858,col 9)-(line 858,col 49)",
            "(line 859,col 9)-(line 859,col 38)",
            "(line 860,col 9)-(line 860,col 50)",
            "(line 861,col 9)-(line 861,col 99)",
            "(line 864,col 9)-(line 864,col 44)",
            "(line 865,col 9)-(line 865,col 85)",
            "(line 866,col 9)-(line 866,col 89)",
            "(line 869,col 9)-(line 869,col 47)",
            "(line 870,col 9)-(line 870,col 40)",
            "(line 871,col 9)-(line 871,col 91)",
            "(line 872,col 9)-(line 872,col 101)",
            "(line 874,col 9)-(line 874,col 46)",
            "(line 875,col 9)-(line 875,col 65)",
            "(line 878,col 9)-(line 878,col 48)",
            "(line 879,col 9)-(line 879,col 80)",
            "(line 880,col 9)-(line 880,col 89)",
            "(line 883,col 9)-(line 883,col 51)",
            "(line 884,col 9)-(line 884,col 40)",
            "(line 885,col 9)-(line 885,col 87)",
            "(line 886,col 9)-(line 886,col 101)",
            "(line 888,col 9)-(line 888,col 46)",
            "(line 889,col 9)-(line 889,col 65)",
            "(line 892,col 9)-(line 892,col 48)",
            "(line 893,col 9)-(line 893,col 46)",
            "(line 894,col 9)-(line 894,col 89)",
            "(line 897,col 9)-(line 897,col 51)",
            "(line 898,col 9)-(line 898,col 40)",
            "(line 899,col 9)-(line 899,col 53)",
            "(line 900,col 9)-(line 900,col 101)",
            "(line 903,col 9)-(line 903,col 50)",
            "(line 904,col 9)-(line 904,col 47)",
            "(line 905,col 9)-(line 905,col 91)",
            "(line 908,col 9)-(line 908,col 52)",
            "(line 909,col 9)-(line 909,col 42)",
            "(line 910,col 9)-(line 910,col 54)",
            "(line 911,col 9)-(line 911,col 103)",
            "(line 914,col 9)-(line 914,col 48)",
            "(line 915,col 9)-(line 915,col 46)",
            "(line 916,col 9)-(line 916,col 89)",
            "(line 919,col 9)-(line 919,col 51)",
            "(line 920,col 9)-(line 920,col 40)",
            "(line 921,col 9)-(line 921,col 53)",
            "(line 922,col 9)-(line 922,col 101)",
            "(line 925,col 9)-(line 925,col 52)",
            "(line 926,col 9)-(line 926,col 48)",
            "(line 927,col 9)-(line 927,col 93)",
            "(line 930,col 9)-(line 930,col 53)",
            "(line 931,col 9)-(line 931,col 44)",
            "(line 932,col 9)-(line 932,col 55)",
            "(line 933,col 9)-(line 933,col 105)",
            "(line 938,col 9)-(line 938,col 46)",
            "(line 939,col 9)-(line 939,col 105)",
            "(line 940,col 9)-(line 940,col 87)",
            "(line 943,col 9)-(line 943,col 50)",
            "(line 944,col 9)-(line 944,col 38)",
            "(line 945,col 9)-(line 945,col 111)",
            "(line 946,col 9)-(line 946,col 99)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.SparseRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/SparseRealVectorTest.java",
        "signature": "org.apache.commons.math.linear.SparseRealVectorTest.testBasicFunctions()",
        "snippet": "    public void testBasicFunctions() {\n        OpenMapRealVector v1 = new OpenMapRealVector(vec1);\n        OpenMapRealVector v2 = new OpenMapRealVector(vec2);\n        OpenMapRealVector v5 = new OpenMapRealVector(vec5);\n        OpenMapRealVector v_null = new OpenMapRealVector(vec_null);\n\n        SparseRealVectorTestImpl v2_t = new SparseRealVectorTestImpl(vec2);\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] A --> 8.4261497731763586307\n        double d_getNorm = v5.getNorm();\n        assertEquals(\"compare values  \", 8.4261497731763586307, d_getNorm);\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] vN --> 17\n        double d_getL1Norm = v5.getL1Norm();\n        assertEquals(\"compare values  \", 17.0, d_getL1Norm);\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] vn --> 6\n        double d_getLInfNorm = v5.getLInfNorm();\n        assertEquals(\"compare values  \", 6.0, d_getLInfNorm);\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist = v1.getDistance(v2);\n        assertEquals(\"compare values  \",v1.subtract(v2).getNorm(), dist );\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist_2 = v1.getDistance(v2_t);\n        assertEquals(\"compare values  \", v1.subtract(v2).getNorm(),dist_2 );\n\n        //octave =  ???\n        double d_getL1Distance = v1. getL1Distance(v2);\n        assertEquals(\"compare values  \",9d, d_getL1Distance );\n\n        double d_getL1Distance_2 = v1. getL1Distance(v2_t);\n        assertEquals(\"compare values  \",9d, d_getL1Distance_2 );\n\n        //octave =  ???\n        double d_getLInfDistance = v1. getLInfDistance(v2);\n        assertEquals(\"compare values  \",3d, d_getLInfDistance );\n\n        double d_getLInfDistance_2 = v1. getLInfDistance(v2_t);\n        assertEquals(\"compare values  \",3d, d_getLInfDistance_2 );\n\n        //octave =  v1 + v2\n        OpenMapRealVector v_add = v1.add(v2);\n        double[] result_add = {5d, 7d, 9d};\n        assertClose(\"compare vect\" ,v_add.getData(),result_add,normTolerance);\n\n        SparseRealVectorTestImpl vt2 = new SparseRealVectorTestImpl(vec2);\n        RealVector v_add_i = v1.add(vt2);\n        double[] result_add_i = {5d, 7d, 9d};\n        assertClose(\"compare vect\" ,v_add_i.getData(),result_add_i,normTolerance);\n\n        //octave =  v1 - v2\n        OpenMapRealVector v_subtract = v1.subtract(v2);\n        double[] result_subtract = {-3d, -3d, -3d};\n        assertClose(\"compare vect\" ,v_subtract.getData(),result_subtract,normTolerance);\n\n        RealVector v_subtract_i = v1.subtract(vt2);\n        double[] result_subtract_i = {-3d, -3d, -3d};\n        assertClose(\"compare vect\" ,v_subtract_i.getData(),result_subtract_i,normTolerance);\n\n        // octave v1 .* v2\n        RealVector  v_ebeMultiply = v1.ebeMultiply(v2);\n        double[] result_ebeMultiply = {4d, 10d, 18d};\n        assertClose(\"compare vect\" ,v_ebeMultiply.getData(),result_ebeMultiply,normTolerance);\n\n        RealVector  v_ebeMultiply_2 = v1.ebeMultiply(v2_t);\n        double[] result_ebeMultiply_2 = {4d, 10d, 18d};\n        assertClose(\"compare vect\" ,v_ebeMultiply_2.getData(),result_ebeMultiply_2,normTolerance);\n\n        // octave v1 ./ v2\n        RealVector  v_ebeDivide = v1.ebeDivide(v2);\n        double[] result_ebeDivide = {0.25d, 0.4d, 0.5d};\n        assertClose(\"compare vect\" ,v_ebeDivide.getData(),result_ebeDivide,normTolerance);\n\n        RealVector  v_ebeDivide_2 = v1.ebeDivide(v2_t);\n        double[] result_ebeDivide_2 = {0.25d, 0.4d, 0.5d};\n        assertClose(\"compare vect\" ,v_ebeDivide_2.getData(),result_ebeDivide_2,normTolerance);\n\n        // octave  dot(v1,v2)\n        double dot =  v1.dotProduct(v2);\n        assertEquals(\"compare val \",32d, dot);\n\n        // octave  dot(v1,v2_t)\n        double dot_2 =  v1.dotProduct(v2_t);\n        assertEquals(\"compare val \",32d, dot_2);\n\n        RealMatrix m_outerProduct = v1.outerProduct(v2);\n        assertEquals(\"compare val \",4d, m_outerProduct.getEntry(0,0));\n\n        RealMatrix m_outerProduct_2 = v1.outerProduct(v2_t);\n        assertEquals(\"compare val \",4d, m_outerProduct_2.getEntry(0,0));\n\n        RealVector v_unitVector = v1.unitVector();\n        RealVector v_unitVector_2 = v1.mapDivide(v1.getNorm());\n        assertClose(\"compare vect\" ,v_unitVector.getData(),v_unitVector_2.getData(),normTolerance);\n\n        try {\n            v_null.unitVector();\n            fail(\"Expecting ArithmeticException\");\n        } catch (ArithmeticException ex) {\n            // expected behavior\n        } catch (Exception e) {\n            fail(\"wrong exception caught\");\n        }\n\n        OpenMapRealVector v_unitize = v1.copy();\n        v_unitize.unitize();\n        assertClose(\"compare vect\" ,v_unitVector_2.getData(),v_unitize.getData(),normTolerance);\n        try {\n            v_null.unitize();\n            fail(\"Expecting ArithmeticException\");\n        } catch (ArithmeticException ex) {\n            // expected behavior\n        } catch (Exception e) {\n            fail(\"wrong exception caught\");\n        }\n\n        RealVector v_projection = v1.projection(v2);\n        double[] result_projection = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        assertClose(\"compare vect\", v_projection.getData(), result_projection, normTolerance);\n\n        RealVector v_projection_2 = v1.projection(v2_t);\n        double[] result_projection_2 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        assertClose(\"compare vect\", v_projection_2.getData(), result_projection_2, normTolerance);\n\n    }\n",
        "begin_line": 950,
        "end_line": 1076,
        "comment": "",
        "child_ranges": [
            "(line 951,col 9)-(line 951,col 59)",
            "(line 952,col 9)-(line 952,col 59)",
            "(line 953,col 9)-(line 953,col 59)",
            "(line 954,col 9)-(line 954,col 67)",
            "(line 956,col 9)-(line 956,col 75)",
            "(line 959,col 9)-(line 959,col 40)",
            "(line 960,col 9)-(line 960,col 75)",
            "(line 963,col 9)-(line 963,col 44)",
            "(line 964,col 9)-(line 964,col 60)",
            "(line 967,col 9)-(line 967,col 48)",
            "(line 968,col 9)-(line 968,col 61)",
            "(line 971,col 9)-(line 971,col 41)",
            "(line 972,col 9)-(line 972,col 74)",
            "(line 975,col 9)-(line 975,col 45)",
            "(line 976,col 9)-(line 976,col 76)",
            "(line 979,col 9)-(line 979,col 55)",
            "(line 980,col 9)-(line 980,col 62)",
            "(line 982,col 9)-(line 982,col 59)",
            "(line 983,col 9)-(line 983,col 64)",
            "(line 986,col 9)-(line 986,col 59)",
            "(line 987,col 9)-(line 987,col 64)",
            "(line 989,col 9)-(line 989,col 63)",
            "(line 990,col 9)-(line 990,col 66)",
            "(line 993,col 9)-(line 993,col 45)",
            "(line 994,col 9)-(line 994,col 43)",
            "(line 995,col 9)-(line 995,col 78)",
            "(line 997,col 9)-(line 997,col 74)",
            "(line 998,col 9)-(line 998,col 41)",
            "(line 999,col 9)-(line 999,col 45)",
            "(line 1000,col 9)-(line 1000,col 82)",
            "(line 1003,col 9)-(line 1003,col 55)",
            "(line 1004,col 9)-(line 1004,col 51)",
            "(line 1005,col 9)-(line 1005,col 88)",
            "(line 1007,col 9)-(line 1007,col 51)",
            "(line 1008,col 9)-(line 1008,col 53)",
            "(line 1009,col 9)-(line 1009,col 92)",
            "(line 1012,col 9)-(line 1012,col 55)",
            "(line 1013,col 9)-(line 1013,col 53)",
            "(line 1014,col 9)-(line 1014,col 94)",
            "(line 1016,col 9)-(line 1016,col 59)",
            "(line 1017,col 9)-(line 1017,col 55)",
            "(line 1018,col 9)-(line 1018,col 98)",
            "(line 1021,col 9)-(line 1021,col 51)",
            "(line 1022,col 9)-(line 1022,col 56)",
            "(line 1023,col 9)-(line 1023,col 90)",
            "(line 1025,col 9)-(line 1025,col 55)",
            "(line 1026,col 9)-(line 1026,col 58)",
            "(line 1027,col 9)-(line 1027,col 94)",
            "(line 1030,col 9)-(line 1030,col 40)",
            "(line 1031,col 9)-(line 1031,col 46)",
            "(line 1034,col 9)-(line 1034,col 44)",
            "(line 1035,col 9)-(line 1035,col 48)",
            "(line 1037,col 9)-(line 1037,col 56)",
            "(line 1038,col 9)-(line 1038,col 70)",
            "(line 1040,col 9)-(line 1040,col 60)",
            "(line 1041,col 9)-(line 1041,col 72)",
            "(line 1043,col 9)-(line 1043,col 50)",
            "(line 1044,col 9)-(line 1044,col 63)",
            "(line 1045,col 9)-(line 1045,col 99)",
            "(line 1047,col 9)-(line 1054,col 9)",
            "(line 1056,col 9)-(line 1056,col 48)",
            "(line 1057,col 9)-(line 1057,col 28)",
            "(line 1058,col 9)-(line 1058,col 96)",
            "(line 1059,col 9)-(line 1066,col 9)",
            "(line 1068,col 9)-(line 1068,col 52)",
            "(line 1069,col 9)-(line 1069,col 96)",
            "(line 1070,col 9)-(line 1070,col 94)",
            "(line 1072,col 9)-(line 1072,col 56)",
            "(line 1073,col 9)-(line 1073,col 98)",
            "(line 1074,col 9)-(line 1074,col 98)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.SparseRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/SparseRealVectorTest.java",
        "signature": "org.apache.commons.math.linear.SparseRealVectorTest.testMisc()",
        "snippet": "    public void testMisc() {\n        OpenMapRealVector v1 = new OpenMapRealVector(vec1);\n\n        String out1 = v1.toString();\n        assertTrue(\"some output \",  out1.length()!=0);\n        try {\n            v1.checkVectorDimensions(2);\n            fail(\"IllegalArgumentException expected\");\n        } catch (IllegalArgumentException ex) {\n            // expected behavior\n        } catch (Exception e) {\n            fail(\"wrong exception caught\");\n        }\n\n\n    }\n",
        "begin_line": 1078,
        "end_line": 1093,
        "comment": "",
        "child_ranges": [
            "(line 1079,col 9)-(line 1079,col 59)",
            "(line 1081,col 9)-(line 1081,col 36)",
            "(line 1082,col 9)-(line 1082,col 54)",
            "(line 1083,col 9)-(line 1090,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.SparseRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/SparseRealVectorTest.java",
        "signature": "org.apache.commons.math.linear.SparseRealVectorTest.testPredicates()",
        "snippet": "    public void testPredicates() {\n\n        OpenMapRealVector v = new OpenMapRealVector(new double[] { 0, 1, 2 });\n\n        assertFalse(v.isNaN());\n        v.setEntry(1, Double.NaN);\n        assertTrue(v.isNaN());\n\n        assertFalse(v.isInfinite());\n        v.setEntry(0, Double.POSITIVE_INFINITY);\n        assertFalse(v.isInfinite()); // NaN has higher priority than infinity\n        v.setEntry(1, 1);\n        assertTrue(v.isInfinite());\n\n        v.setEntry(0, 0);\n        assertEquals(v, new OpenMapRealVector(new double[] { 0, 1, 2 }));\n        assertNotSame(v, new OpenMapRealVector(new double[] { 0, 1, 2 + Math.ulp(2)}));\n        assertNotSame(v, new OpenMapRealVector(new double[] { 0, 1, 2, 3 }));\n\n    }\n",
        "begin_line": 1095,
        "end_line": 1114,
        "comment": "",
        "child_ranges": [
            "(line 1097,col 9)-(line 1097,col 78)",
            "(line 1099,col 9)-(line 1099,col 31)",
            "(line 1100,col 9)-(line 1100,col 34)",
            "(line 1101,col 9)-(line 1101,col 30)",
            "(line 1103,col 9)-(line 1103,col 36)",
            "(line 1104,col 9)-(line 1104,col 48)",
            "(line 1105,col 9)-(line 1105,col 36)",
            "(line 1106,col 9)-(line 1106,col 25)",
            "(line 1107,col 9)-(line 1107,col 35)",
            "(line 1109,col 9)-(line 1109,col 25)",
            "(line 1110,col 9)-(line 1110,col 73)",
            "(line 1111,col 9)-(line 1111,col 87)",
            "(line 1112,col 9)-(line 1112,col 77)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.SparseRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/SparseRealVectorTest.java",
        "signature": "org.apache.commons.math.linear.SparseRealVectorTest.testSerial()",
        "snippet": "    public void testSerial()  {\n        OpenMapRealVector v = new OpenMapRealVector(new double[] { 0, 1, 2 });\n        assertEquals(v,TestUtils.serializeAndRecover(v));\n    }\n",
        "begin_line": 1116,
        "end_line": 1119,
        "comment": "",
        "child_ranges": [
            "(line 1117,col 9)-(line 1117,col 78)",
            "(line 1118,col 9)-(line 1118,col 57)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.SparseRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/SparseRealVectorTest.java",
        "signature": "org.apache.commons.math.linear.SparseRealVectorTest.assertClose(java.lang.String, double[], double[], double)",
        "snippet": "    protected void assertClose(String msg, double[] m, double[] n,\n            double tolerance) {\n        if (m.length != n.length) {\n            fail(\"vectors have different lengths\");\n        }\n        for (int i = 0; i < m.length; i++) {\n            assertEquals(msg + \" \" +  i + \" elements differ\", m[i],n[i],tolerance);\n        }\n    }\n",
        "begin_line": 1122,
        "end_line": 1130,
        "comment": " verifies that two vectors are close (sup norm) ",
        "child_ranges": [
            "(line 1124,col 9)-(line 1126,col 9)",
            "(line 1127,col 9)-(line 1129,col 9)"
        ]
    }
]