[
    {
        "name": "Node.NodeMismatch#2132",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.NodeMismatch.NodeMismatch(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "    NodeMismatch(Node nodeA, Node nodeB) {\n      this.nodeA = nodeA;\n      this.nodeB = nodeB;\n    }\n",
        "begin_line": 2132,
        "end_line": 2135,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 1.0
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.toString#341",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.IntPropListItem.toString()",
        "snippet": "    @Override\n    public String toString() {\n      return String.valueOf(intValue);\n    }\n",
        "begin_line": 341,
        "end_line": 344,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 1.0
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.propToString#111",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.propToString(int)",
        "snippet": "  private static final String propToString(int propType) {\n      switch (propType) {\n        case VAR_ARGS_NAME:      return \"var_args_name\";\n\n        case JSDOC_INFO_PROP:    return \"jsdoc_info\";\n\n        case INCRDECR_PROP:      return \"incrdecr\";\n        case QUOTED_PROP:        return \"quoted\";\n        case OPT_ARG_NAME:       return \"opt_arg\";\n\n        case SYNTHETIC_BLOCK_PROP: return \"synthetic\";\n        case EMPTY_BLOCK:        return \"empty_block\";\n        case ORIGINALNAME_PROP:  return \"originalname\";\n        case SIDE_EFFECT_FLAGS:  return \"side_effect_flags\";\n\n        case IS_CONSTANT_NAME:   return \"is_constant_name\";\n        case IS_NAMESPACE:       return \"is_namespace\";\n        case IS_DISPATCHER:      return \"is_dispatcher\";\n        case DIRECTIVES:         return \"directives\";\n        case DIRECT_EVAL:        return \"direct_eval\";\n        case FREE_CALL:          return \"free_call\";\n        case STATIC_SOURCE_FILE:    return \"source_file\";\n        case INPUT_ID:  return \"input_id\";\n        case LENGTH:    return \"length\";\n        case SLASH_V:   return \"slash_v\";\n        case INFERRED_FUNCTION:   return \"inferred\";\n        default:\n          throw new IllegalStateException(\"unexpect prop id \" + propType);\n      }\n  }\n",
        "begin_line": 111,
        "end_line": 140,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 1.0
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.toString#935",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.toString(java.lang.StringBuilder, boolean, boolean, boolean)",
        "snippet": "  private void toString(\n      StringBuilder sb,\n      boolean printSource,\n      boolean printAnnotations,\n      boolean printType) {\n    sb.append(Token.name(type));\n    if (this instanceof StringNode) {\n      sb.append(' ');\n      sb.append(getString());\n    } else if (type == Token.FUNCTION) {\n      sb.append(' ');\n      // In the case of JsDoc trees, the first child is often not a string\n      // which causes exceptions to be thrown when calling toString or\n      // toStringTree.\n      if (first == null || first.getType() != Token.NAME) {\n        sb.append(\"<invalid>\");\n      } else {\n        sb.append(first.getString());\n      }\n    } else if (type == Token.NUMBER) {\n      sb.append(' ');\n      sb.append(getDouble());\n    }\n    if (printSource) {\n      int lineno = getLineno();\n      if (lineno != -1) {\n        sb.append(' ');\n        sb.append(lineno);\n      }\n    }\n\n    if (printAnnotations) {\n      int[] keys = getSortedPropTypes();\n      for (int i = 0; i < keys.length; i++) {\n        int type = keys[i];\n        PropListItem x = lookupProperty(type);\n        sb.append(\" [\");\n        sb.append(propToString(type));\n        sb.append(\": \");\n        String value;\n        switch (type) {\n          default:\n            value = x.toString();\n            break;\n        }\n        sb.append(value);\n        sb.append(']');\n      }\n    }\n\n    if (printType) {\n      if (jsType != null) {\n        String jsTypeString = jsType.toString();\n        if (jsTypeString != null) {\n          sb.append(\" : \");\n          sb.append(jsTypeString);\n        }\n      }\n    }\n  }\n",
        "begin_line": 935,
        "end_line": 994,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 1.0
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.toStringTree#997",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.toStringTree()",
        "snippet": "  public String toStringTree() {\n    return toStringTreeImpl();\n  }\n",
        "begin_line": 997,
        "end_line": 999,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 1.0
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.toStringTreeImpl#1001",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.toStringTreeImpl()",
        "snippet": "  private String toStringTreeImpl() {\n    try {\n      StringBuilder s = new StringBuilder();\n      appendStringTree(s);\n      return s.toString();\n    } catch (IOException e) {\n      throw new RuntimeException(\"Should not happen\\n\" + e);\n    }\n  }\n",
        "begin_line": 1001,
        "end_line": 1009,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 1.0
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.appendStringTree#1011",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.appendStringTree(java.lang.Appendable)",
        "snippet": "  public void appendStringTree(Appendable appendable) throws IOException {\n    toStringTreeHelper(this, 0, appendable);\n  }\n",
        "begin_line": 1011,
        "end_line": 1013,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 1.0
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.toStringTreeHelper#1015",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.toStringTreeHelper(com.google.javascript.rhino.Node, int, java.lang.Appendable)",
        "snippet": "  private static void toStringTreeHelper(Node n, int level, Appendable sb)\n      throws IOException {\n    for (int i = 0; i != level; ++i) {\n      sb.append(\"    \");\n    }\n    sb.append(n.toString());\n    sb.append('\\n');\n    for (Node cursor = n.getFirstChild();\n         cursor != null;\n         cursor = cursor.getNext()) {\n      toStringTreeHelper(cursor, level + 1, sb);\n    }\n  }\n",
        "begin_line": 1015,
        "end_line": 1027,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 1.0
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.checkTreeEquals#1414",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.checkTreeEquals(com.google.javascript.rhino.Node)",
        "snippet": "  public String checkTreeEquals(Node node2) {\n      NodeMismatch diff = checkTreeEqualsImpl(node2);\n      if (diff != null) {\n        return \"Node tree inequality:\" +\n            \"\\nTree1:\\n\" + toStringTree() +\n            \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n            \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n            \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n      }\n      return null;\n  }\n",
        "begin_line": 1414,
        "end_line": 1424,
        "comment": "\n   * Checks if the subtree under this node is the same as another subtree.\n   * Returns null if it's equal, or a message describing the differences.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 1.0
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.checkTreeEqualsImpl#1431",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.checkTreeEqualsImpl(com.google.javascript.rhino.Node)",
        "snippet": "  NodeMismatch checkTreeEqualsImpl(Node node2) {\n    if (!isEquivalentTo(node2, false, false)) {\n      return new NodeMismatch(this, node2);\n    }\n\n    NodeMismatch res = null;\n    Node n, n2;\n    for (n = first, n2 = node2.first;\n         res == null && n != null;\n         n = n.next, n2 = n2.next) {\n      if (node2 == null) {\n        throw new IllegalStateException();\n      }\n      res = n.checkTreeEqualsImpl(n2);\n      if (res != null) {\n        return res;\n      }\n    }\n    return res;\n  }\n",
        "begin_line": 1431,
        "end_line": 1450,
        "comment": "\n   * Compare this node to node2 recursively and return the first pair of nodes\n   * that differs doing a preorder depth-first traversal. Package private for\n   * testing. Returns null if the nodes are equivalent.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 1.0
        },
        "num_failing_tests": 1
    },
    {
        "name": "InputId.toString#72",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/InputId.java",
        "class_name": "com.google.javascript.rhino.InputId",
        "signature": "com.google.javascript.rhino.InputId.toString()",
        "snippet": "  @Override\n  public String toString() {\n    return \"InputId: \" + getIdName();\n  }\n",
        "begin_line": 72,
        "end_line": 75,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 1.0
        },
        "num_failing_tests": 1
    },
    {
        "name": "IRFactory.transformTokenType#1283",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.transformTokenType(int)",
        "snippet": "  private static int transformTokenType(int token) {\n    switch (token) {\n      case com.google.javascript.rhino.head.Token.RETURN:\n        return Token.RETURN;\n      case com.google.javascript.rhino.head.Token.BITOR:\n        return Token.BITOR;\n      case com.google.javascript.rhino.head.Token.BITXOR:\n        return Token.BITXOR;\n      case com.google.javascript.rhino.head.Token.BITAND:\n        return Token.BITAND;\n      case com.google.javascript.rhino.head.Token.EQ:\n        return Token.EQ;\n      case com.google.javascript.rhino.head.Token.NE:\n        return Token.NE;\n      case com.google.javascript.rhino.head.Token.LT:\n        return Token.LT;\n      case com.google.javascript.rhino.head.Token.LE:\n        return Token.LE;\n      case com.google.javascript.rhino.head.Token.GT:\n        return Token.GT;\n      case com.google.javascript.rhino.head.Token.GE:\n        return Token.GE;\n      case com.google.javascript.rhino.head.Token.LSH:\n        return Token.LSH;\n      case com.google.javascript.rhino.head.Token.RSH:\n        return Token.RSH;\n      case com.google.javascript.rhino.head.Token.URSH:\n        return Token.URSH;\n      case com.google.javascript.rhino.head.Token.ADD:\n        return Token.ADD;\n      case com.google.javascript.rhino.head.Token.SUB:\n        return Token.SUB;\n      case com.google.javascript.rhino.head.Token.MUL:\n        return Token.MUL;\n      case com.google.javascript.rhino.head.Token.DIV:\n        return Token.DIV;\n      case com.google.javascript.rhino.head.Token.MOD:\n        return Token.MOD;\n      case com.google.javascript.rhino.head.Token.NOT:\n        return Token.NOT;\n      case com.google.javascript.rhino.head.Token.BITNOT:\n        return Token.BITNOT;\n      case com.google.javascript.rhino.head.Token.POS:\n        return Token.POS;\n      case com.google.javascript.rhino.head.Token.NEG:\n        return Token.NEG;\n      case com.google.javascript.rhino.head.Token.NEW:\n        return Token.NEW;\n      case com.google.javascript.rhino.head.Token.DELPROP:\n        return Token.DELPROP;\n      case com.google.javascript.rhino.head.Token.TYPEOF:\n        return Token.TYPEOF;\n      case com.google.javascript.rhino.head.Token.GETPROP:\n        return Token.GETPROP;\n      case com.google.javascript.rhino.head.Token.GETELEM:\n        return Token.GETELEM;\n      case com.google.javascript.rhino.head.Token.CALL:\n        return Token.CALL;\n      case com.google.javascript.rhino.head.Token.NAME:\n        return Token.NAME;\n      case com.google.javascript.rhino.head.Token.NUMBER:\n        return Token.NUMBER;\n      case com.google.javascript.rhino.head.Token.STRING:\n        return Token.STRING;\n      case com.google.javascript.rhino.head.Token.NULL:\n        return Token.NULL;\n      case com.google.javascript.rhino.head.Token.THIS:\n        return Token.THIS;\n      case com.google.javascript.rhino.head.Token.FALSE:\n        return Token.FALSE;\n      case com.google.javascript.rhino.head.Token.TRUE:\n        return Token.TRUE;\n      case com.google.javascript.rhino.head.Token.SHEQ:\n        return Token.SHEQ;\n      case com.google.javascript.rhino.head.Token.SHNE:\n        return Token.SHNE;\n      case com.google.javascript.rhino.head.Token.REGEXP:\n        return Token.REGEXP;\n      case com.google.javascript.rhino.head.Token.THROW:\n        return Token.THROW;\n      case com.google.javascript.rhino.head.Token.IN:\n        return Token.IN;\n      case com.google.javascript.rhino.head.Token.INSTANCEOF:\n        return Token.INSTANCEOF;\n      case com.google.javascript.rhino.head.Token.ARRAYLIT:\n        return Token.ARRAYLIT;\n      case com.google.javascript.rhino.head.Token.OBJECTLIT:\n        return Token.OBJECTLIT;\n      case com.google.javascript.rhino.head.Token.TRY:\n        return Token.TRY;\n      // The LP represents a parameter list\n      case com.google.javascript.rhino.head.Token.LP:\n        return Token.PARAM_LIST;\n      case com.google.javascript.rhino.head.Token.COMMA:\n        return Token.COMMA;\n      case com.google.javascript.rhino.head.Token.ASSIGN:\n        return Token.ASSIGN;\n      case com.google.javascript.rhino.head.Token.ASSIGN_BITOR:\n        return Token.ASSIGN_BITOR;\n      case com.google.javascript.rhino.head.Token.ASSIGN_BITXOR:\n        return Token.ASSIGN_BITXOR;\n      case com.google.javascript.rhino.head.Token.ASSIGN_BITAND:\n        return Token.ASSIGN_BITAND;\n      case com.google.javascript.rhino.head.Token.ASSIGN_LSH:\n        return Token.ASSIGN_LSH;\n      case com.google.javascript.rhino.head.Token.ASSIGN_RSH:\n        return Token.ASSIGN_RSH;\n      case com.google.javascript.rhino.head.Token.ASSIGN_URSH:\n        return Token.ASSIGN_URSH;\n      case com.google.javascript.rhino.head.Token.ASSIGN_ADD:\n        return Token.ASSIGN_ADD;\n      case com.google.javascript.rhino.head.Token.ASSIGN_SUB:\n        return Token.ASSIGN_SUB;\n      case com.google.javascript.rhino.head.Token.ASSIGN_MUL:\n        return Token.ASSIGN_MUL;\n      case com.google.javascript.rhino.head.Token.ASSIGN_DIV:\n        return Token.ASSIGN_DIV;\n      case com.google.javascript.rhino.head.Token.ASSIGN_MOD:\n        return Token.ASSIGN_MOD;\n      case com.google.javascript.rhino.head.Token.HOOK:\n        return Token.HOOK;\n      case com.google.javascript.rhino.head.Token.OR:\n        return Token.OR;\n      case com.google.javascript.rhino.head.Token.AND:\n        return Token.AND;\n      case com.google.javascript.rhino.head.Token.INC:\n        return Token.INC;\n      case com.google.javascript.rhino.head.Token.DEC:\n        return Token.DEC;\n      case com.google.javascript.rhino.head.Token.FUNCTION:\n        return Token.FUNCTION;\n      case com.google.javascript.rhino.head.Token.IF:\n        return Token.IF;\n      case com.google.javascript.rhino.head.Token.SWITCH:\n        return Token.SWITCH;\n      case com.google.javascript.rhino.head.Token.CASE:\n        return Token.CASE;\n      case com.google.javascript.rhino.head.Token.DEFAULT:\n        return Token.DEFAULT_CASE;\n      case com.google.javascript.rhino.head.Token.WHILE:\n        return Token.WHILE;\n      case com.google.javascript.rhino.head.Token.DO:\n        return Token.DO;\n      case com.google.javascript.rhino.head.Token.FOR:\n        return Token.FOR;\n      case com.google.javascript.rhino.head.Token.BREAK:\n        return Token.BREAK;\n      case com.google.javascript.rhino.head.Token.CONTINUE:\n        return Token.CONTINUE;\n      case com.google.javascript.rhino.head.Token.VAR:\n        return Token.VAR;\n      case com.google.javascript.rhino.head.Token.WITH:\n        return Token.WITH;\n      case com.google.javascript.rhino.head.Token.CATCH:\n        return Token.CATCH;\n      case com.google.javascript.rhino.head.Token.VOID:\n        return Token.VOID;\n      case com.google.javascript.rhino.head.Token.EMPTY:\n        return Token.EMPTY;\n      case com.google.javascript.rhino.head.Token.BLOCK:\n        return Token.BLOCK;\n      case com.google.javascript.rhino.head.Token.LABEL:\n        return Token.LABEL;\n      case com.google.javascript.rhino.head.Token.EXPR_VOID:\n      case com.google.javascript.rhino.head.Token.EXPR_RESULT:\n        return Token.EXPR_RESULT;\n      case com.google.javascript.rhino.head.Token.SCRIPT:\n        return Token.SCRIPT;\n      case com.google.javascript.rhino.head.Token.GET:\n        return Token.GETTER_DEF;\n      case com.google.javascript.rhino.head.Token.SET:\n        return Token.SETTER_DEF;\n      case com.google.javascript.rhino.head.Token.CONST:\n        return Token.CONST;\n      case com.google.javascript.rhino.head.Token.DEBUGGER:\n        return Token.DEBUGGER;\n    }\n\n    // Token without name\n    throw new IllegalStateException(String.valueOf(token));\n  }\n",
        "begin_line": 1283,
        "end_line": 1463,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 1.0
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.toString#309",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.ObjectPropListItem.toString()",
        "snippet": "    @Override\n    public String toString() {\n      return objectValue == null ? \"null\" : objectValue.toString();\n    }\n",
        "begin_line": 309,
        "end_line": 312,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.7071
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.getSortedPropTypes#859",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.getSortedPropTypes()",
        "snippet": "  private int[] getSortedPropTypes() {\n    int count = 0;\n    for (PropListItem x = propListHead; x != null; x = x.getNext()) {\n      count++;\n    }\n\n    int[] keys = new int[count];\n    for (PropListItem x = propListHead; x != null; x = x.getNext()) {\n      count--;\n      keys[count] = x.getType();\n    }\n\n    Arrays.sort(keys);\n    return keys;\n  }\n",
        "begin_line": 859,
        "end_line": 873,
        "comment": " Gets all the property types, in sorted order.",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.7071
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.toString#921",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.toString()",
        "snippet": "  @Override\n  public String toString() {\n    return toString(true, true, true);\n  }\n",
        "begin_line": 921,
        "end_line": 924,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.7071
        },
        "num_failing_tests": 1
    },
    {
        "name": "SourceFile.toString#301",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/SourceFile.java",
        "class_name": "com.google.javascript.jscomp.SourceFile",
        "signature": "com.google.javascript.jscomp.SourceFile.toString()",
        "snippet": "  @Override\n  public String toString() {\n    return fileName;\n  }\n",
        "begin_line": 301,
        "end_line": 304,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.7071
        },
        "num_failing_tests": 1
    },
    {
        "name": "CodeGenerator.add#103",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodeGenerator.java",
        "class_name": "com.google.javascript.jscomp.CodeGenerator",
        "signature": "com.google.javascript.jscomp.CodeGenerator.add(com.google.javascript.rhino.Node, com.google.javascript.jscomp.CodeGenerator.Context)",
        "snippet": "  void add(Node n, Context context) {\n    if (!cc.continueProcessing()) {\n      return;\n    }\n\n    int type = n.getType();\n    String opstr = NodeUtil.opToStr(type);\n    int childCount = n.getChildCount();\n    Node first = n.getFirstChild();\n    Node last = n.getLastChild();\n\n    // Handle all binary operators\n    if (opstr != null && first != last) {\n      Preconditions.checkState(\n          childCount == 2,\n          \"Bad binary operator \\\"%s\\\": expected 2 arguments but got %s\",\n          opstr, childCount);\n      int p = NodeUtil.precedence(type);\n\n      // For right-hand-side of operations, only pass context if it's\n      // the IN_FOR_INIT_CLAUSE one.\n      Context rhsContext = getContextForNoInOperator(context);\n\n      // Handle associativity.\n      // e.g. if the parse tree is a * (b * c),\n      // we can simply generate a * b * c.\n      if (last.getType() == type &&\n          NodeUtil.isAssociative(type)) {\n        addExpr(first, p, context);\n        cc.addOp(opstr, true);\n        addExpr(last, p, rhsContext);\n      } else if (NodeUtil.isAssignmentOp(n) && NodeUtil.isAssignmentOp(last)) {\n        // Assignments are the only right-associative binary operators\n        addExpr(first, p, context);\n        cc.addOp(opstr, true);\n        addExpr(last, p, rhsContext);\n      } else {\n        unrollBinaryOperator(n, type, opstr, context, rhsContext, p, p + 1);\n      }\n      return;\n    }\n\n    cc.startSourceMapping(n);\n\n    switch (type) {\n      case Token.TRY: {\n        Preconditions.checkState(first.getNext().isBlock() &&\n                !first.getNext().hasMoreThanOneChild());\n        Preconditions.checkState(childCount >= 2 && childCount <= 3);\n\n        add(\"try\");\n        add(first, Context.PRESERVE_BLOCK);\n\n        // second child contains the catch block, or nothing if there\n        // isn't a catch block\n        Node catchblock = first.getNext().getFirstChild();\n        if (catchblock != null) {\n          add(catchblock);\n        }\n\n        if (childCount == 3) {\n          add(\"finally\");\n          add(last, Context.PRESERVE_BLOCK);\n        }\n        break;\n      }\n\n      case Token.CATCH:\n        Preconditions.checkState(childCount == 2);\n        add(\"catch(\");\n        add(first);\n        add(\")\");\n        add(last, Context.PRESERVE_BLOCK);\n        break;\n\n      case Token.THROW:\n        Preconditions.checkState(childCount == 1);\n        add(\"throw\");\n        add(first);\n\n        // Must have a ';' after a throw statement, otherwise safari can't\n        // parse this.\n        cc.endStatement(true);\n        break;\n\n      case Token.RETURN:\n        add(\"return\");\n        if (childCount == 1) {\n          add(first);\n        } else {\n          Preconditions.checkState(childCount == 0);\n        }\n        cc.endStatement();\n        break;\n\n      case Token.VAR:\n        if (first != null) {\n          add(\"var \");\n          addList(first, false, getContextForNoInOperator(context));\n        }\n        break;\n\n      case Token.LABEL_NAME:\n        Preconditions.checkState(!n.getString().isEmpty());\n        addIdentifier(n.getString());\n        break;\n\n      case Token.NAME:\n        if (first == null || first.isEmpty()) {\n          addIdentifier(n.getString());\n        } else {\n          Preconditions.checkState(childCount == 1);\n          addIdentifier(n.getString());\n          cc.addOp(\"=\", true);\n          if (first.isComma()) {\n            addExpr(first, NodeUtil.precedence(Token.ASSIGN), Context.OTHER);\n          } else {\n            // Add expression, consider nearby code at lowest level of\n            // precedence.\n            addExpr(first, 0, getContextForNoInOperator(context));\n          }\n        }\n        break;\n\n      case Token.ARRAYLIT:\n        add(\"[\");\n        addArrayList(first);\n        add(\"]\");\n        break;\n\n      case Token.PARAM_LIST:\n        add(\"(\");\n        addList(first);\n        add(\")\");\n        break;\n\n      case Token.COMMA:\n        Preconditions.checkState(childCount == 2);\n        unrollBinaryOperator(n, Token.COMMA, \",\", context, Context.OTHER, 0, 0);\n        break;\n\n      case Token.NUMBER:\n        Preconditions.checkState(childCount == 0);\n        cc.addNumber(n.getDouble());\n        break;\n\n      case Token.TYPEOF:\n      case Token.VOID:\n      case Token.NOT:\n      case Token.BITNOT:\n      case Token.POS: {\n        // All of these unary operators are right-associative\n        Preconditions.checkState(childCount == 1);\n        cc.addOp(NodeUtil.opToStrNoFail(type), false);\n        addExpr(first, NodeUtil.precedence(type), Context.OTHER);\n        break;\n      }\n\n      case Token.NEG: {\n        Preconditions.checkState(childCount == 1);\n\n        // It's important to our sanity checker that the code\n        // we print produces the same AST as the code we parse back.\n        // NEG is a weird case because Rhino parses \"- -2\" as \"2\".\n        if (n.getFirstChild().isNumber()) {\n          cc.addNumber(-n.getFirstChild().getDouble());\n        } else {\n          cc.addOp(NodeUtil.opToStrNoFail(type), false);\n          addExpr(first, NodeUtil.precedence(type), Context.OTHER);\n        }\n\n        break;\n      }\n\n      case Token.HOOK: {\n        Preconditions.checkState(childCount == 3);\n        int p = NodeUtil.precedence(type);\n        addExpr(first, p + 1, context);\n        cc.addOp(\"?\", true);\n        addExpr(first.getNext(), 1, Context.OTHER);\n        cc.addOp(\":\", true);\n        addExpr(last, 1, Context.OTHER);\n        break;\n      }\n\n      case Token.REGEXP:\n        if (!first.isString() ||\n            !last.isString()) {\n          throw new Error(\"Expected children to be strings\");\n        }\n\n        String regexp = regexpEscape(first.getString(), outputCharsetEncoder);\n\n        // I only use one .add because whitespace matters\n        if (childCount == 2) {\n          add(regexp + last.getString());\n        } else {\n          Preconditions.checkState(childCount == 1);\n          add(regexp);\n        }\n        break;\n\n      case Token.FUNCTION:\n        if (n.getClass() != Node.class) {\n          throw new Error(\"Unexpected Node subclass.\");\n        }\n        Preconditions.checkState(childCount == 3);\n        boolean funcNeedsParens = (context == Context.START_OF_EXPR);\n        if (funcNeedsParens) {\n          add(\"(\");\n        }\n\n        add(\"function\");\n        add(first);\n\n        add(first.getNext());\n        add(last, Context.PRESERVE_BLOCK);\n        cc.endFunction(context == Context.STATEMENT);\n\n        if (funcNeedsParens) {\n          add(\")\");\n        }\n        break;\n\n      case Token.GETTER_DEF:\n      case Token.SETTER_DEF:\n        Preconditions.checkState(n.getParent().isObjectLit());\n        Preconditions.checkState(childCount == 1);\n        Preconditions.checkState(first.isFunction());\n\n        // Get methods are unnamed\n        Preconditions.checkState(first.getFirstChild().getString().isEmpty());\n        if (type == Token.GETTER_DEF) {\n          // Get methods have no parameters.\n          Preconditions.checkState(!first.getChildAtIndex(1).hasChildren());\n          add(\"get \");\n        } else {\n          // Set methods have one parameter.\n          Preconditions.checkState(first.getChildAtIndex(1).hasOneChild());\n          add(\"set \");\n        }\n\n        // The name is on the GET or SET node.\n        String name = n.getString();\n        Node fn = first;\n        Node parameters = fn.getChildAtIndex(1);\n        Node body = fn.getLastChild();\n\n        // Add the property name.\n        if (!n.isQuotedString() &&\n            TokenStream.isJSIdentifier(name) &&\n            // do not encode literally any non-literal characters that were\n            // Unicode escaped.\n            NodeUtil.isLatin(name)) {\n          add(name);\n        } else {\n          // Determine if the string is a simple number.\n          double d = getSimpleNumber(name);\n          if (!Double.isNaN(d)) {\n            cc.addNumber(d);\n          } else {\n            addJsString(n);\n          }\n        }\n\n        add(parameters);\n        add(body, Context.PRESERVE_BLOCK);\n        break;\n\n      case Token.SCRIPT:\n      case Token.BLOCK: {\n        if (n.getClass() != Node.class) {\n          throw new Error(\"Unexpected Node subclass.\");\n        }\n        boolean preserveBlock = context == Context.PRESERVE_BLOCK;\n        if (preserveBlock) {\n          cc.beginBlock();\n        }\n\n        boolean preferLineBreaks =\n            type == Token.SCRIPT ||\n            (type == Token.BLOCK &&\n                !preserveBlock &&\n                n.getParent() != null &&\n                n.getParent().isScript());\n        for (Node c = first; c != null; c = c.getNext()) {\n          add(c, Context.STATEMENT);\n\n          // VAR doesn't include ';' since it gets used in expressions\n          if (c.isVar()) {\n            cc.endStatement();\n          }\n\n          if (c.isFunction()) {\n            cc.maybeLineBreak();\n          }\n\n          // Prefer to break lines in between top-level statements\n          // because top-level statements are more homogeneous.\n          if (preferLineBreaks) {\n            cc.notePreferredLineBreak();\n          }\n        }\n        if (preserveBlock) {\n          cc.endBlock(cc.breakAfterBlockFor(n, context == Context.STATEMENT));\n        }\n        break;\n      }\n\n      case Token.FOR:\n        if (childCount == 4) {\n          add(\"for(\");\n          if (first.isVar()) {\n            add(first, Context.IN_FOR_INIT_CLAUSE);\n          } else {\n            addExpr(first, 0, Context.IN_FOR_INIT_CLAUSE);\n          }\n          add(\";\");\n          add(first.getNext());\n          add(\";\");\n          add(first.getNext().getNext());\n          add(\")\");\n          addNonEmptyStatement(\n              last, getContextForNonEmptyExpression(context), false);\n        } else {\n          Preconditions.checkState(childCount == 3);\n          add(\"for(\");\n          add(first);\n          add(\"in\");\n          add(first.getNext());\n          add(\")\");\n          addNonEmptyStatement(\n              last, getContextForNonEmptyExpression(context), false);\n        }\n        break;\n\n      case Token.DO:\n        Preconditions.checkState(childCount == 2);\n        add(\"do\");\n        addNonEmptyStatement(first, Context.OTHER, false);\n        add(\"while(\");\n        add(last);\n        add(\")\");\n        cc.endStatement();\n        break;\n\n      case Token.WHILE:\n        Preconditions.checkState(childCount == 2);\n        add(\"while(\");\n        add(first);\n        add(\")\");\n        addNonEmptyStatement(\n            last, getContextForNonEmptyExpression(context), false);\n        break;\n\n      case Token.EMPTY:\n        Preconditions.checkState(childCount == 0);\n        break;\n\n      case Token.GETPROP: {\n        Preconditions.checkState(\n            childCount == 2,\n            \"Bad GETPROP: expected 2 children, but got %s\", childCount);\n        Preconditions.checkState(\n            last.isString(),\n            \"Bad GETPROP: RHS should be STRING\");\n        boolean needsParens = (first.isNumber());\n        if (needsParens) {\n          add(\"(\");\n        }\n        addExpr(first, NodeUtil.precedence(type), context);\n        if (needsParens) {\n          add(\")\");\n        }\n        add(\".\");\n        addIdentifier(last.getString());\n        break;\n      }\n\n      case Token.GETELEM:\n        Preconditions.checkState(\n            childCount == 2,\n            \"Bad GETELEM: expected 2 children but got %s\", childCount);\n        addExpr(first, NodeUtil.precedence(type), context);\n        add(\"[\");\n        add(first.getNext());\n        add(\"]\");\n        break;\n\n      case Token.WITH:\n        Preconditions.checkState(childCount == 2);\n        add(\"with(\");\n        add(first);\n        add(\")\");\n        addNonEmptyStatement(\n            last, getContextForNonEmptyExpression(context), false);\n        break;\n\n      case Token.INC:\n      case Token.DEC: {\n        Preconditions.checkState(childCount == 1);\n        String o = type == Token.INC ? \"++\" : \"--\";\n        int postProp = n.getIntProp(Node.INCRDECR_PROP);\n        // A non-zero post-prop value indicates a post inc/dec, default of zero\n        // is a pre-inc/dec.\n        if (postProp != 0) {\n          addExpr(first, NodeUtil.precedence(type), context);\n          cc.addOp(o, false);\n        } else {\n          cc.addOp(o, false);\n          add(first);\n        }\n        break;\n      }\n\n      case Token.CALL:\n        // We have two special cases here:\n        // 1) If the left hand side of the call is a direct reference to eval,\n        // then it must have a DIRECT_EVAL annotation. If it does not, then\n        // that means it was originally an indirect call to eval, and that\n        // indirectness must be preserved.\n        // 2) If the left hand side of the call is a property reference,\n        // then the call must not a FREE_CALL annotation. If it does, then\n        // that means it was originally an call without an explicit this and\n        // that must be preserved.\n        if (isIndirectEval(first)\n            || n.getBooleanProp(Node.FREE_CALL) && NodeUtil.isGet(first)) {\n          add(\"(0,\");\n          addExpr(first, NodeUtil.precedence(Token.COMMA), Context.OTHER);\n          add(\")\");\n        } else {\n          addExpr(first, NodeUtil.precedence(type), context);\n        }\n        add(\"(\");\n        addList(first.getNext());\n        add(\")\");\n        break;\n\n      case Token.IF:\n        boolean hasElse = childCount == 3;\n        boolean ambiguousElseClause =\n            context == Context.BEFORE_DANGLING_ELSE && !hasElse;\n        if (ambiguousElseClause) {\n          cc.beginBlock();\n        }\n\n        add(\"if(\");\n        add(first);\n        add(\")\");\n\n        if (hasElse) {\n          addNonEmptyStatement(\n              first.getNext(), Context.BEFORE_DANGLING_ELSE, false);\n          add(\"else\");\n          addNonEmptyStatement(\n              last, getContextForNonEmptyExpression(context), false);\n        } else {\n          addNonEmptyStatement(first.getNext(), Context.OTHER, false);\n          Preconditions.checkState(childCount == 2);\n        }\n\n        if (ambiguousElseClause) {\n          cc.endBlock();\n        }\n        break;\n\n      case Token.NULL:\n        Preconditions.checkState(childCount == 0);\n        cc.addConstant(\"null\");\n        break;\n\n      case Token.THIS:\n        Preconditions.checkState(childCount == 0);\n        add(\"this\");\n        break;\n\n      case Token.FALSE:\n        Preconditions.checkState(childCount == 0);\n        cc.addConstant(\"false\");\n        break;\n\n      case Token.TRUE:\n        Preconditions.checkState(childCount == 0);\n        cc.addConstant(\"true\");\n        break;\n\n      case Token.CONTINUE:\n        Preconditions.checkState(childCount <= 1);\n        add(\"continue\");\n        if (childCount == 1) {\n          if (!first.isLabelName()) {\n            throw new Error(\"Unexpected token type. Should be LABEL_NAME.\");\n          }\n          add(\" \");\n          add(first);\n        }\n        cc.endStatement();\n        break;\n\n      case Token.DEBUGGER:\n        Preconditions.checkState(childCount == 0);\n        add(\"debugger\");\n        cc.endStatement();\n        break;\n\n      case Token.BREAK:\n        Preconditions.checkState(childCount <= 1);\n        add(\"break\");\n        if (childCount == 1) {\n          if (!first.isLabelName()) {\n            throw new Error(\"Unexpected token type. Should be LABEL_NAME.\");\n          }\n          add(\" \");\n          add(first);\n        }\n        cc.endStatement();\n        break;\n\n      case Token.EXPR_RESULT:\n        Preconditions.checkState(childCount == 1);\n        add(first, Context.START_OF_EXPR);\n        cc.endStatement();\n        break;\n\n      case Token.NEW:\n        add(\"new \");\n        int precedence = NodeUtil.precedence(type);\n\n        // If the first child contains a CALL, then claim higher precedence\n        // to force parentheses. Otherwise, when parsed, NEW will bind to the\n        // first viable parentheses (don't traverse into functions).\n        if (NodeUtil.containsType(\n            first, Token.CALL, NodeUtil.MATCH_NOT_FUNCTION)) {\n          precedence = NodeUtil.precedence(first.getType()) + 1;\n        }\n        addExpr(first, precedence, Context.OTHER);\n\n        // '()' is optional when no arguments are present\n        Node next = first.getNext();\n        if (next != null) {\n          add(\"(\");\n          addList(next);\n          add(\")\");\n        }\n        break;\n\n      case Token.STRING_KEY:\n        Preconditions.checkState(\n            childCount == 1, \"Object lit key must have 1 child\");\n        addJsString(n);\n        break;\n\n      case Token.STRING:\n        Preconditions.checkState(\n            childCount == 0, \"A string may not have children\");\n        addJsString(n);\n        break;\n\n      case Token.DELPROP:\n        Preconditions.checkState(childCount == 1);\n        add(\"delete \");\n        add(first);\n        break;\n\n      case Token.OBJECTLIT: {\n        boolean needsParens = (context == Context.START_OF_EXPR);\n        if (needsParens) {\n          add(\"(\");\n        }\n        add(\"{\");\n        for (Node c = first; c != null; c = c.getNext()) {\n          if (c != first) {\n            cc.listSeparator();\n          }\n\n          if (c.isGetterDef() || c.isSetterDef()) {\n            add(c);\n          } else {\n            Preconditions.checkState(c.isStringKey());\n            String key = c.getString();\n            // Object literal property names don't have to be quoted if they\n            // are not JavaScript keywords\n            if (!c.isQuotedString() &&\n                !TokenStream.isKeyword(key) &&\n                TokenStream.isJSIdentifier(key) &&\n                // do not encode literally any non-literal characters that\n                // were Unicode escaped.\n                NodeUtil.isLatin(key)) {\n              add(key);\n            } else {\n              // Determine if the string is a simple number.\n              double d = getSimpleNumber(key);\n              if (!Double.isNaN(d)) {\n                cc.addNumber(d);\n              } else {\n                addExpr(c, 1, Context.OTHER);\n              }\n            }\n            add(\":\");\n            addExpr(c.getFirstChild(), 1, Context.OTHER);\n          }\n        }\n        add(\"}\");\n        if (needsParens) {\n          add(\")\");\n        }\n        break;\n      }\n\n      case Token.SWITCH:\n        add(\"switch(\");\n        add(first);\n        add(\")\");\n        cc.beginBlock();\n        addAllSiblings(first.getNext());\n        cc.endBlock(context == Context.STATEMENT);\n        break;\n\n      case Token.CASE:\n        Preconditions.checkState(childCount == 2);\n        add(\"case \");\n        add(first);\n        addCaseBody(last);\n        break;\n\n      case Token.DEFAULT_CASE:\n        Preconditions.checkState(childCount == 1);\n        add(\"default\");\n        addCaseBody(first);\n        break;\n\n      case Token.LABEL:\n        Preconditions.checkState(childCount == 2);\n        if (!first.isLabelName()) {\n          throw new Error(\"Unexpected token type. Should be LABEL_NAME.\");\n        }\n        add(first);\n        add(\":\");\n        addNonEmptyStatement(\n            last, getContextForNonEmptyExpression(context), true);\n        break;\n\n      case Token.CAST:\n        add(\"(\");\n        add(first);\n        add(\")\");\n        break;\n\n      default:\n        throw new Error(\"Unknown type \" + type + \"\\n\" + n.toStringTree());\n    }\n\n    cc.endSourceMapping(n);\n  }\n",
        "begin_line": 103,
        "end_line": 756,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.7071
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.toString#926",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.toString(boolean, boolean, boolean)",
        "snippet": "  public String toString(\n      boolean printSource,\n      boolean printAnnotations,\n      boolean printType) {\n    StringBuilder sb = new StringBuilder();\n    toString(sb, printSource, printAnnotations, printType);\n    return sb.toString();\n  }\n",
        "begin_line": 926,
        "end_line": 933,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5773
        },
        "num_failing_tests": 1
    },
    {
        "name": "NodeUtil.opToStr#2148",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "signature": "com.google.javascript.jscomp.NodeUtil.opToStr(int)",
        "snippet": "  static String opToStr(int operator) {\n    switch (operator) {\n      case Token.BITOR: return \"|\";\n      case Token.OR: return \"||\";\n      case Token.BITXOR: return \"^\";\n      case Token.AND: return \"&&\";\n      case Token.BITAND: return \"&\";\n      case Token.SHEQ: return \"===\";\n      case Token.EQ: return \"==\";\n      case Token.NOT: return \"!\";\n      case Token.NE: return \"!=\";\n      case Token.SHNE: return \"!==\";\n      case Token.LSH: return \"<<\";\n      case Token.IN: return \"in\";\n      case Token.LE: return \"<=\";\n      case Token.LT: return \"<\";\n      case Token.URSH: return \">>>\";\n      case Token.RSH: return \">>\";\n      case Token.GE: return \">=\";\n      case Token.GT: return \">\";\n      case Token.MUL: return \"*\";\n      case Token.DIV: return \"/\";\n      case Token.MOD: return \"%\";\n      case Token.BITNOT: return \"~\";\n      case Token.ADD: return \"+\";\n      case Token.SUB: return \"-\";\n      case Token.POS: return \"+\";\n      case Token.NEG: return \"-\";\n      case Token.ASSIGN: return \"=\";\n      case Token.ASSIGN_BITOR: return \"|=\";\n      case Token.ASSIGN_BITXOR: return \"^=\";\n      case Token.ASSIGN_BITAND: return \"&=\";\n      case Token.ASSIGN_LSH: return \"<<=\";\n      case Token.ASSIGN_RSH: return \">>=\";\n      case Token.ASSIGN_URSH: return \">>>=\";\n      case Token.ASSIGN_ADD: return \"+=\";\n      case Token.ASSIGN_SUB: return \"-=\";\n      case Token.ASSIGN_MUL: return \"*=\";\n      case Token.ASSIGN_DIV: return \"/=\";\n      case Token.ASSIGN_MOD: return \"%=\";\n      case Token.VOID: return \"void\";\n      case Token.TYPEOF: return \"typeof\";\n      case Token.INSTANCEOF: return \"instanceof\";\n      default: return null;\n    }\n  }\n",
        "begin_line": 2148,
        "end_line": 2193,
        "comment": "\n   * Converts an operator's token value (see {@link Token}) to a string\n   * representation.\n   *\n   * @param operator the operator's token value to convert\n   * @return the string representation or {@code null} if the token value is\n   * not an operator\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5773
        },
        "num_failing_tests": 1
    },
    {
        "name": "PeepholeSubstituteAlternateSyntax.tryMinimizeIf#636",
        "is_bug": true,
        "src_path": "src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java",
        "class_name": "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax",
        "signature": "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax.tryMinimizeIf(com.google.javascript.rhino.Node)",
        "snippet": "  private Node tryMinimizeIf(Node n) {\n\n    Node parent = n.getParent();\n\n    Node cond = n.getFirstChild();\n\n    /* If the condition is a literal, we'll let other\n     * optimizations try to remove useless code.\n     */\n    if (NodeUtil.isLiteralValue(cond, true)) {\n      return n;\n    }\n\n    Node thenBranch = cond.getNext();\n    Node elseBranch = thenBranch.getNext();\n\n    if (elseBranch == null) {\n      if (isFoldableExpressBlock(thenBranch)) {\n        Node expr = getBlockExpression(thenBranch);\n        if (!late && isPropertyAssignmentInExpression(expr)) {\n          // Keep opportunities for CollapseProperties such as\n          // a.longIdentifier || a.longIdentifier = ... -> var a = ...;\n          // until CollapseProperties has been run.\n          return n;\n        }\n\n        if (cond.isNot()) {\n          // if(!x)bar(); -> x||bar();\n          if (isLowerPrecedenceInExpression(cond, OR_PRECEDENCE) &&\n              isLowerPrecedenceInExpression(expr.getFirstChild(),\n                  OR_PRECEDENCE)) {\n            // It's not okay to add two sets of parentheses.\n            return n;\n          }\n\n          Node or = IR.or(\n              cond.removeFirstChild(),\n              expr.removeFirstChild()).srcref(n);\n          Node newExpr = NodeUtil.newExpr(or);\n          parent.replaceChild(n, newExpr);\n          reportCodeChange();\n\n          return newExpr;\n        }\n\n        // if(x)foo(); -> x&&foo();\n        if (isLowerPrecedenceInExpression(cond, AND_PRECEDENCE) &&\n            isLowerPrecedenceInExpression(expr.getFirstChild(),\n                AND_PRECEDENCE)) {\n          // One additional set of parentheses is worth the change even if\n          // there is no immediate code size win. However, two extra pair of\n          // {}, we would have to think twice. (unless we know for sure the\n          // we can further optimize its parent.\n          return n;\n        }\n\n        n.removeChild(cond);\n        Node and = IR.and(cond, expr.removeFirstChild()).srcref(n);\n        Node newExpr = NodeUtil.newExpr(and);\n        parent.replaceChild(n, newExpr);\n        reportCodeChange();\n\n        return newExpr;\n      } else {\n\n        // Try to combine two IF-ELSE\n        if (NodeUtil.isStatementBlock(thenBranch) &&\n            thenBranch.hasOneChild()) {\n          Node innerIf = thenBranch.getFirstChild();\n\n          if (innerIf.isIf()) {\n            Node innerCond = innerIf.getFirstChild();\n            Node innerThenBranch = innerCond.getNext();\n            Node innerElseBranch = innerThenBranch.getNext();\n\n            if (innerElseBranch == null &&\n                 !(isLowerPrecedenceInExpression(cond, AND_PRECEDENCE) &&\n                   isLowerPrecedenceInExpression(innerCond, AND_PRECEDENCE))) {\n              n.detachChildren();\n              n.addChildToBack(\n                  IR.and(\n                      cond,\n                      innerCond.detachFromParent())\n                      .srcref(cond));\n              n.addChildrenToBack(innerThenBranch.detachFromParent());\n              reportCodeChange();\n              // Not worth trying to fold the current IF-ELSE into && because\n              // the inner IF-ELSE wasn't able to be folded into && anyways.\n              return n;\n            }\n          }\n        }\n      }\n\n      return n;\n    }\n\n    /* TODO(dcc) This modifies the siblings of n, which is undesirable for a\n     * peephole optimization. This should probably get moved to another pass.\n     */\n    tryRemoveRepeatedStatements(n);\n\n    // if(!x)foo();else bar(); -> if(x)bar();else foo();\n    // An additional set of curly braces isn't worth it.\n    if (cond.isNot() && !consumesDanglingElse(elseBranch)) {\n      n.replaceChild(cond, cond.removeFirstChild());\n      n.removeChild(thenBranch);\n      n.addChildToBack(thenBranch);\n      reportCodeChange();\n      return n;\n    }\n\n    // if(x)return 1;else return 2; -> return x?1:2;\n    if (isReturnExpressBlock(thenBranch) && isReturnExpressBlock(elseBranch)) {\n      Node thenExpr = getBlockReturnExpression(thenBranch);\n      Node elseExpr = getBlockReturnExpression(elseBranch);\n      n.removeChild(cond);\n      thenExpr.detachFromParent();\n      elseExpr.detachFromParent();\n\n      // note - we ignore any cases with \"return;\", technically this\n      // can be converted to \"return undefined;\" or some variant, but\n      // that does not help code size.\n      Node returnNode = IR.returnNode(\n                            IR.hook(cond, thenExpr, elseExpr)\n                                .srcref(n));\n      parent.replaceChild(n, returnNode);\n      reportCodeChange();\n      return returnNode;\n    }\n\n    boolean thenBranchIsExpressionBlock = isFoldableExpressBlock(thenBranch);\n    boolean elseBranchIsExpressionBlock = isFoldableExpressBlock(elseBranch);\n\n    if (thenBranchIsExpressionBlock && elseBranchIsExpressionBlock) {\n      Node thenOp = getBlockExpression(thenBranch).getFirstChild();\n      Node elseOp = getBlockExpression(elseBranch).getFirstChild();\n      if (thenOp.getType() == elseOp.getType()) {\n        // if(x)a=1;else a=2; -> a=x?1:2;\n        if (NodeUtil.isAssignmentOp(thenOp)) {\n          Node lhs = thenOp.getFirstChild();\n          if (areNodesEqualForInlining(lhs, elseOp.getFirstChild()) &&\n              // if LHS has side effects, don't proceed [since the optimization\n              // evaluates LHS before cond]\n              // NOTE - there are some circumstances where we can\n              // proceed even if there are side effects...\n              !mayEffectMutableState(lhs)) {\n\n            n.removeChild(cond);\n            Node assignName = thenOp.removeFirstChild();\n            Node thenExpr = thenOp.removeFirstChild();\n            Node elseExpr = elseOp.getLastChild();\n            elseOp.removeChild(elseExpr);\n\n            Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);\n            Node assign = new Node(thenOp.getType(), assignName, hookNode)\n                              .srcref(thenOp);\n            Node expr = NodeUtil.newExpr(assign);\n            parent.replaceChild(n, expr);\n            reportCodeChange();\n\n            return expr;\n          }\n        }\n      }\n      // if(x)foo();else bar(); -> x?foo():bar()\n      n.removeChild(cond);\n      thenOp.detachFromParent();\n      elseOp.detachFromParent();\n      Node expr = IR.exprResult(\n          IR.hook(cond, thenOp, elseOp).srcref(n));\n      parent.replaceChild(n, expr);\n      reportCodeChange();\n      return expr;\n    }\n\n    boolean thenBranchIsVar = isVarBlock(thenBranch);\n    boolean elseBranchIsVar = isVarBlock(elseBranch);\n\n    // if(x)var y=1;else y=2  ->  var y=x?1:2\n    if (thenBranchIsVar && elseBranchIsExpressionBlock &&\n        getBlockExpression(elseBranch).getFirstChild().isAssign()) {\n\n      Node var = getBlockVar(thenBranch);\n      Node elseAssign = getBlockExpression(elseBranch).getFirstChild();\n\n      Node name1 = var.getFirstChild();\n      Node maybeName2 = elseAssign.getFirstChild();\n\n      if (name1.hasChildren()\n          && maybeName2.isName()\n          && name1.getString().equals(maybeName2.getString())) {\n        Node thenExpr = name1.removeChildren();\n        Node elseExpr = elseAssign.getLastChild().detachFromParent();\n        cond.detachFromParent();\n        Node hookNode = IR.hook(cond, thenExpr, elseExpr)\n                            .srcref(n);\n        var.detachFromParent();\n        name1.addChildrenToBack(hookNode);\n        parent.replaceChild(n, var);\n        reportCodeChange();\n        return var;\n      }\n\n    // if(x)y=1;else var y=2  ->  var y=x?1:2\n    } else if (elseBranchIsVar && thenBranchIsExpressionBlock &&\n        getBlockExpression(thenBranch).getFirstChild().isAssign()) {\n\n      Node var = getBlockVar(elseBranch);\n      Node thenAssign = getBlockExpression(thenBranch).getFirstChild();\n\n      Node maybeName1 = thenAssign.getFirstChild();\n      Node name2 = var.getFirstChild();\n\n      if (name2.hasChildren()\n          && maybeName1.isName()\n          && maybeName1.getString().equals(name2.getString())) {\n        Node thenExpr = thenAssign.getLastChild().detachFromParent();\n        Node elseExpr = name2.removeChildren();\n        cond.detachFromParent();\n        Node hookNode = IR.hook(cond, thenExpr, elseExpr)\n                            .srcref(n);\n        var.detachFromParent();\n        name2.addChildrenToBack(hookNode);\n        parent.replaceChild(n, var);\n        reportCodeChange();\n\n        return var;\n      }\n    }\n\n    return n;\n  }\n",
        "begin_line": 636,
        "end_line": 868,
        "comment": "\n   * Try turning IF nodes into smaller HOOKs\n   *\n   * Returns the replacement for n or the original if no replacement was\n   * necessary.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 1
    },
    {
        "name": "AbstractPeepholeOptimization.mayEffectMutableState#110",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java",
        "class_name": "com.google.javascript.jscomp.AbstractPeepholeOptimization",
        "signature": "com.google.javascript.jscomp.AbstractPeepholeOptimization.mayEffectMutableState(com.google.javascript.rhino.Node)",
        "snippet": "  boolean mayEffectMutableState(Node n) {\n    return NodeUtil.mayEffectMutableState(n, compiler);\n  }\n",
        "begin_line": 110,
        "end_line": 112,
        "comment": "\n   * @return Whether the node may create new mutable state, or change existing\n   * state.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 1
    },
    {
        "name": "NodeUtil.precedence#1169",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "signature": "com.google.javascript.jscomp.NodeUtil.precedence(int)",
        "snippet": "  static int precedence(int type) {\n    switch (type) {\n      case Token.COMMA:  return 0;\n      case Token.ASSIGN_BITOR:\n      case Token.ASSIGN_BITXOR:\n      case Token.ASSIGN_BITAND:\n      case Token.ASSIGN_LSH:\n      case Token.ASSIGN_RSH:\n      case Token.ASSIGN_URSH:\n      case Token.ASSIGN_ADD:\n      case Token.ASSIGN_SUB:\n      case Token.ASSIGN_MUL:\n      case Token.ASSIGN_DIV:\n      case Token.ASSIGN_MOD:\n      case Token.ASSIGN: return 1;\n      case Token.HOOK:   return 2;  // ?: operator\n      case Token.OR:     return 3;\n      case Token.AND:    return 4;\n      case Token.BITOR:  return 5;\n      case Token.BITXOR: return 6;\n      case Token.BITAND: return 7;\n      case Token.EQ:\n      case Token.NE:\n      case Token.SHEQ:\n      case Token.SHNE:   return 8;\n      case Token.LT:\n      case Token.GT:\n      case Token.LE:\n      case Token.GE:\n      case Token.INSTANCEOF:\n      case Token.IN:     return 9;\n      case Token.LSH:\n      case Token.RSH:\n      case Token.URSH:   return 10;\n      case Token.SUB:\n      case Token.ADD:    return 11;\n      case Token.MUL:\n      case Token.MOD:\n      case Token.DIV:    return 12;\n      case Token.INC:\n      case Token.DEC:\n      case Token.NEW:\n      case Token.DELPROP:\n      case Token.TYPEOF:\n      case Token.VOID:\n      case Token.NOT:\n      case Token.BITNOT:\n      case Token.POS:\n      case Token.NEG:    return 13;\n\n      case Token.CALL:\n      case Token.GETELEM:\n      case Token.GETPROP:\n      // Data values\n      case Token.ARRAYLIT:\n      case Token.EMPTY:  // TODO(johnlenz): remove this.\n      case Token.FALSE:\n      case Token.FUNCTION:\n      case Token.NAME:\n      case Token.NULL:\n      case Token.NUMBER:\n      case Token.OBJECTLIT:\n      case Token.REGEXP:\n      case Token.STRING:\n      case Token.STRING_KEY:\n      case Token.THIS:\n      case Token.TRUE:\n        return 15;\n      case Token.CAST:\n        return 16;\n\n      default: throw new Error(\"Unknown precedence for \" +\n                               Token.name(type) +\n                               \" (type \" + type + \")\");\n    }\n  }\n",
        "begin_line": 1169,
        "end_line": 1244,
        "comment": "\n   *  0 comma ,\n   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=\n   *  2 conditional ?:\n   *  3 logical-or ||\n   *  4 logical-and &&\n   *  5 bitwise-or |\n   *  6 bitwise-xor ^\n   *  7 bitwise-and &\n   *  8 equality == !=\n   *  9 relational < <= > >=\n   * 10 bitwise shift << >> >>>\n   * 11 addition/subtraction + -\n   * 12 multiply/divide * / %\n   * 13 negation/increment ! ~ - ++ --\n   * 14 call, member () [] .\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3536
        },
        "num_failing_tests": 1
    },
    {
        "name": "IRFactory.processUnaryExpression#1147",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.TransformDispatcher.processUnaryExpression(com.google.javascript.rhino.head.ast.UnaryExpression)",
        "snippet": "    @Override\n    Node processUnaryExpression(UnaryExpression exprNode) {\n      int type = transformTokenType(exprNode.getType());\n      Node operand = transform(exprNode.getOperand());\n      if (type == Token.NEG && operand.isNumber()) {\n        operand.setDouble(-operand.getDouble());\n        return operand;\n      } else {\n        if (type == Token.DELPROP &&\n            !(operand.isGetProp() ||\n              operand.isGetElem() ||\n              operand.isName())) {\n          String msg =\n              \"Invalid delete operand. Only properties can be deleted.\";\n          errorReporter.error(\n              msg,\n              sourceName,\n              operand.getLineno(), \"\", 0);\n        } else  if (type == Token.INC || type == Token.DEC) {\n          if (!validAssignmentTarget(operand)) {\n            String msg = (type == Token.INC)\n                ? \"invalid increment target\"\n                : \"invalid decrement target\";\n            errorReporter.error(\n                msg,\n                sourceName,\n                operand.getLineno(), \"\", 0);\n          }\n        }\n\n        Node node = newNode(type, operand);\n        if (exprNode.isPostfix()) {\n          node.putBooleanProp(Node.INCRDECR_PROP, true);\n        }\n        return node;\n      }\n    }\n",
        "begin_line": 1147,
        "end_line": 1183,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3162
        },
        "num_failing_tests": 1
    },
    {
        "name": "IR.hook#340",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/IR.java",
        "class_name": "com.google.javascript.rhino.IR",
        "signature": "com.google.javascript.rhino.IR.hook(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  public static Node hook(Node cond, Node trueval, Node falseval) {\n    Preconditions.checkState(mayBeExpression(cond));\n    Preconditions.checkState(mayBeExpression(trueval));\n    Preconditions.checkState(mayBeExpression(falseval));\n    return new Node(Token.HOOK, cond, trueval, falseval);\n  }\n",
        "begin_line": 340,
        "end_line": 345,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3015
        },
        "num_failing_tests": 1
    },
    {
        "name": "NodeUtil.mayEffectMutableState#768",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "signature": "com.google.javascript.jscomp.NodeUtil.mayEffectMutableState(com.google.javascript.rhino.Node, com.google.javascript.jscomp.AbstractCompiler)",
        "snippet": "  static boolean mayEffectMutableState(Node n, AbstractCompiler compiler) {\n    return checkForStateChangeHelper(n, true, compiler);\n  }\n",
        "begin_line": 768,
        "end_line": 770,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2887
        },
        "num_failing_tests": 1
    },
    {
        "name": "AstValidator.validateExpression#154",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AstValidator.java",
        "class_name": "com.google.javascript.jscomp.AstValidator",
        "signature": "com.google.javascript.jscomp.AstValidator.validateExpression(com.google.javascript.rhino.Node)",
        "snippet": "  public void validateExpression(Node n) {\n    switch (n.getType()) {\n      // Childless expressions\n      case Token.FALSE:\n      case Token.NULL:\n      case Token.THIS:\n      case Token.TRUE:\n        validateChildless(n);\n        return;\n\n      // General unary ops\n      case Token.DELPROP:\n      case Token.POS:\n      case Token.NEG:\n      case Token.NOT:\n      case Token.INC:\n      case Token.DEC:\n      case Token.TYPEOF:\n      case Token.VOID:\n      case Token.BITNOT:\n      case Token.CAST:\n        validateUnaryOp(n);\n        return;\n\n      // General binary ops\n      case Token.COMMA:\n      case Token.OR:\n      case Token.AND:\n      case Token.BITOR:\n      case Token.BITXOR:\n      case Token.BITAND:\n      case Token.EQ:\n      case Token.NE:\n      case Token.SHEQ:\n      case Token.SHNE:\n      case Token.LT:\n      case Token.GT:\n      case Token.LE:\n      case Token.GE:\n      case Token.INSTANCEOF:\n      case Token.IN:\n      case Token.LSH:\n      case Token.RSH:\n      case Token.URSH:\n      case Token.SUB:\n      case Token.ADD:\n      case Token.MUL:\n      case Token.MOD:\n      case Token.DIV:\n        validateBinaryOp(n);\n        return;\n\n      // Assignments\n      case Token.ASSIGN:\n      case Token.ASSIGN_BITOR:\n      case Token.ASSIGN_BITXOR:\n      case Token.ASSIGN_BITAND:\n      case Token.ASSIGN_LSH:\n      case Token.ASSIGN_RSH:\n      case Token.ASSIGN_URSH:\n      case Token.ASSIGN_ADD:\n      case Token.ASSIGN_SUB:\n      case Token.ASSIGN_MUL:\n      case Token.ASSIGN_DIV:\n      case Token.ASSIGN_MOD:\n        validateAssignmentExpression(n);\n        return;\n\n      case Token.HOOK:\n        validateTrinaryOp(n);\n        return;\n\n      // Node types that require special handling\n      case Token.STRING:\n        validateString(n);\n        return;\n\n      case Token.NUMBER:\n        validateNumber(n);\n        return;\n\n      case Token.NAME:\n        validateName(n);\n        return;\n\n      case Token.GETELEM:\n        validateBinaryOp(n);\n        return;\n\n      case Token.GETPROP:\n        validateGetProp(n);\n        return;\n\n      case Token.ARRAYLIT:\n        validateArrayLit(n);\n        return;\n\n      case Token.OBJECTLIT:\n        validateObjectLit(n);\n        return;\n\n      case Token.REGEXP:\n        validateRegExpLit(n);\n        return;\n\n      case Token.CALL:\n        validateCall(n);\n        return;\n\n      case Token.NEW:\n        validateNew(n);\n        return;\n\n      case Token.FUNCTION:\n        validateFunctionExpression(n);\n        return;\n\n      default:\n        violation(\"Expected expression but was \"\n            + Token.name(n.getType()), n);\n    }\n  }\n",
        "begin_line": 154,
        "end_line": 275,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2887
        },
        "num_failing_tests": 1
    },
    {
        "name": "TypeSafeDispatcher.process#120",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/TypeSafeDispatcher.java",
        "class_name": "com.google.javascript.jscomp.parsing.TypeSafeDispatcher",
        "signature": "com.google.javascript.jscomp.parsing.TypeSafeDispatcher.process(com.google.javascript.rhino.head.ast.AstNode)",
        "snippet": "  public T process(AstNode node) {\n    switch (node.getType()) {\n      case Token.ADD:\n      case Token.AND:\n      case Token.BITAND:\n      case Token.BITOR:\n      case Token.BITXOR:\n      case Token.COMMA:\n      case Token.DIV:\n      case Token.EQ:\n      case Token.GE:\n      case Token.GT:\n      case Token.IN:\n      case Token.INSTANCEOF:\n      case Token.LE:\n      case Token.LSH:\n      case Token.LT:\n      case Token.MOD:\n      case Token.MUL:\n      case Token.NE:\n      case Token.OR:\n      case Token.RSH:\n      case Token.SHEQ:\n      case Token.SHNE:\n      case Token.SUB:\n      case Token.URSH:\n        return processInfixExpression((InfixExpression) node);\n      case Token.ARRAYLIT:\n        return processArrayLiteral((ArrayLiteral) node);\n      case Token.ASSIGN:\n      case Token.ASSIGN_ADD:\n      case Token.ASSIGN_BITAND:\n      case Token.ASSIGN_BITOR:\n      case Token.ASSIGN_BITXOR:\n      case Token.ASSIGN_DIV:\n      case Token.ASSIGN_LSH:\n      case Token.ASSIGN_MOD:\n      case Token.ASSIGN_MUL:\n      case Token.ASSIGN_RSH:\n      case Token.ASSIGN_SUB:\n      case Token.ASSIGN_URSH:\n        return processAssignment((Assignment) node);\n      case Token.BITNOT:\n      case Token.DEC:\n      case Token.DELPROP:\n      case Token.INC:\n      case Token.NEG:\n      case Token.NOT:\n      case Token.POS:\n      case Token.TYPEOF:\n      case Token.VOID:\n        return processUnaryExpression((UnaryExpression) node);\n      case Token.BLOCK:\n        if (node instanceof Block) {\n          return processBlock((Block) node);\n        } else  if (node instanceof Scope) {\n          return processScope((Scope) node);\n        } else {\n          throw new IllegalStateException(\"Unexpected node type.  class: \" +\n                                          node.getClass() +\n                                          \" type: \" +\n                                          Token.typeToName(node.getType()));\n        }\n      case Token.BREAK:\n        return processBreakStatement((BreakStatement) node);\n      case Token.CALL:\n        return processFunctionCall((FunctionCall) node);\n      case Token.CASE:\n      case Token.DEFAULT:\n        return processSwitchCase((SwitchCase) node);\n      case Token.CATCH:\n        return processCatchClause((CatchClause) node);\n      case Token.COLON:\n        return processObjectProperty((ObjectProperty) node);\n      case Token.CONTINUE:\n        return processContinueStatement((ContinueStatement) node);\n      case Token.DO:\n        return processDoLoop((DoLoop) node);\n      case Token.EMPTY:\n        return (node instanceof EmptyExpression) ?\n            processEmptyExpression((EmptyExpression) node) :\n            processEmptyStatement((EmptyStatement) node);\n      case Token.EXPR_RESULT:\n      case Token.EXPR_VOID:\n        if (node instanceof ExpressionStatement) {\n          return processExpressionStatement((ExpressionStatement) node);\n        } else  if (node instanceof LabeledStatement) {\n          return processLabeledStatement((LabeledStatement) node);\n        } else {\n          throw new IllegalStateException(\"Unexpected node type.  class: \" +\n                                          node.getClass() +\n                                          \" type: \" +\n                                          Token.typeToName(node.getType()));\n        }\n      case Token.DEBUGGER:\n      case Token.FALSE:\n      case Token.NULL:\n      case Token.THIS:\n      case Token.TRUE:\n        return processKeywordLiteral((KeywordLiteral) node);\n      case Token.FOR:\n        if (node instanceof ForInLoop) {\n          return processForInLoop((ForInLoop) node);\n        } else  if (node instanceof ForLoop) {\n          return processForLoop((ForLoop) node);\n        } else {\n          throw new IllegalStateException(\"Unexpected node type.  class: \" +\n                                          node.getClass() +\n                                          \" type: \" +\n                                          Token.typeToName(node.getType()));\n        }\n      case Token.FUNCTION:\n        return processFunctionNode((FunctionNode) node);\n      case Token.GETELEM:\n        return processElementGet((ElementGet) node);\n      case Token.GETPROP:\n        return processPropertyGet((PropertyGet) node);\n      case Token.HOOK:\n        return processConditionalExpression((ConditionalExpression) node);\n      case Token.IF:\n        return processIfStatement((IfStatement) node);\n      case Token.LABEL:\n        return processLabel((Label) node);\n      case Token.LP:\n        return processParenthesizedExpression((ParenthesizedExpression) node);\n      case Token.NAME:\n        return processName((Name) node);\n      case Token.NEW:\n        return processNewExpression((NewExpression) node);\n      case Token.NUMBER:\n        return processNumberLiteral((NumberLiteral) node);\n      case Token.OBJECTLIT:\n        return processObjectLiteral((ObjectLiteral) node);\n      case Token.REGEXP:\n        return processRegExpLiteral((RegExpLiteral) node);\n      case Token.RETURN:\n        return processReturnStatement((ReturnStatement) node);\n      case Token.SCRIPT:\n        return processAstRoot((AstRoot) node);\n      case Token.STRING:\n        return processStringLiteral((StringLiteral) node);\n      case Token.SWITCH:\n        return processSwitchStatement((SwitchStatement) node);\n      case Token.THROW:\n        return processThrowStatement((ThrowStatement) node);\n      case Token.TRY:\n        return processTryStatement((TryStatement) node);\n      case Token.CONST:\n      case Token.VAR:\n        if (node instanceof VariableDeclaration) {\n          return processVariableDeclaration((VariableDeclaration) node);\n        } else  if (node instanceof VariableInitializer) {\n          return processVariableInitializer((VariableInitializer) node);\n        } else {\n          throw new IllegalStateException(\"Unexpected node type.  class: \" +\n                                          node.getClass() +\n                                          \" type: \" +\n                                          Token.typeToName(node.getType()));\n        }\n      case Token.WHILE:\n        return processWhileLoop((WhileLoop) node);\n      case Token.WITH:\n        return processWithStatement((WithStatement) node);\n    }\n    return processIllegalToken(node);\n  }\n",
        "begin_line": 120,
        "end_line": 285,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2673
        },
        "num_failing_tests": 1
    },
    {
        "name": "IRFactory.processConditionalExpression#653",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.TransformDispatcher.processConditionalExpression(com.google.javascript.rhino.head.ast.ConditionalExpression)",
        "snippet": "    @Override\n    Node processConditionalExpression(ConditionalExpression exprNode) {\n      return newNode(\n          Token.HOOK,\n          transform(exprNode.getTestExpression()),\n          transform(exprNode.getTrueExpression()),\n          transform(exprNode.getFalseExpression()));\n    }\n",
        "begin_line": 653,
        "end_line": 660,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2673
        },
        "num_failing_tests": 1
    },
    {
        "name": "AstValidator.validateTrinaryOp#754",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AstValidator.java",
        "class_name": "com.google.javascript.jscomp.AstValidator",
        "signature": "com.google.javascript.jscomp.AstValidator.validateTrinaryOp(com.google.javascript.rhino.Node)",
        "snippet": "  private void validateTrinaryOp(Node n) {\n    validateChildCount(n, 3);\n    Node first = n.getFirstChild();\n    validateExpression(first);\n    validateExpression(first.getNext());\n    validateExpression(n.getLastChild());\n  }\n",
        "begin_line": 754,
        "end_line": 760,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2673
        },
        "num_failing_tests": 1
    },
    {
        "name": "IRFactory.processElementGet#682",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.TransformDispatcher.processElementGet(com.google.javascript.rhino.head.ast.ElementGet)",
        "snippet": "    @Override\n    Node processElementGet(ElementGet getNode) {\n      return newNode(\n          Token.GETELEM,\n          transform(getNode.getTarget()),\n          transform(getNode.getElement()));\n    }\n",
        "begin_line": 682,
        "end_line": 688,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2294
        },
        "num_failing_tests": 1
    },
    {
        "name": "IRFactory.newNode#1478",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.newNode(int, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  private Node newNode(int type, Node child1, Node child2, Node child3) {\n    return new Node(type, child1, child2, child3).clonePropsFrom(templateNode);\n  }\n",
        "begin_line": 1478,
        "end_line": 1480,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1961
        },
        "num_failing_tests": 1
    },
    {
        "name": "PeepholeSubstituteAlternateSyntax.tryRemoveRepeatedStatements#892",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java",
        "class_name": "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax",
        "signature": "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax.tryRemoveRepeatedStatements(com.google.javascript.rhino.Node)",
        "snippet": "  private void tryRemoveRepeatedStatements(Node n) {\n    Preconditions.checkState(n.isIf());\n\n    Node parent = n.getParent();\n    if (!NodeUtil.isStatementBlock(parent)) {\n      // If the immediate parent is something like a label, we\n      // can't move the statement, so bail.\n      return;\n    }\n\n    Node cond = n.getFirstChild();\n    Node trueBranch = cond.getNext();\n    Node falseBranch = trueBranch.getNext();\n    Preconditions.checkNotNull(trueBranch);\n    Preconditions.checkNotNull(falseBranch);\n\n    while (true) {\n      Node lastTrue = trueBranch.getLastChild();\n      Node lastFalse = falseBranch.getLastChild();\n      if (lastTrue == null || lastFalse == null\n          || !areNodesEqualForInlining(lastTrue, lastFalse)) {\n        break;\n      }\n      lastTrue.detachFromParent();\n      lastFalse.detachFromParent();\n      parent.addChildAfter(lastTrue, n);\n      reportCodeChange();\n    }\n  }\n",
        "begin_line": 892,
        "end_line": 920,
        "comment": "\n   * Try to remove duplicate statements from IF blocks. For example:\n   *\n   * if (a) {\n   *   x = 1;\n   *   return true;\n   * } else {\n   *   x = 2;\n   *   return true;\n   * }\n   *\n   * becomes:\n   *\n   * if (a) {\n   *   x = 1;\n   * } else {\n   *   x = 2;\n   * }\n   * return true;\n   *\n   * @param n The IF node to examine.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1961
        },
        "num_failing_tests": 1
    },
    {
        "name": "PeepholeSubstituteAlternateSyntax.isReturnExpressBlock#986",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java",
        "class_name": "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax",
        "signature": "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax.isReturnExpressBlock(com.google.javascript.rhino.Node)",
        "snippet": "  private boolean isReturnExpressBlock(Node n) {\n    if (n.isBlock()) {\n      if (n.hasOneChild()) {\n        Node first = n.getFirstChild();\n        if (first.isReturn()) {\n          return first.hasOneChild();\n        }\n      }\n    }\n\n    return false;\n  }\n",
        "begin_line": 986,
        "end_line": 997,
        "comment": "\n   * @return Whether the node is a block with a single statement that is\n   *     an return.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1961
        },
        "num_failing_tests": 1
    },
    {
        "name": "PeepholeSubstituteAlternateSyntax.getBlockExpression#962",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java",
        "class_name": "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax",
        "signature": "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax.getBlockExpression(com.google.javascript.rhino.Node)",
        "snippet": "  private Node getBlockExpression(Node n) {\n    Preconditions.checkState(isFoldableExpressBlock(n));\n    return n.getFirstChild();\n  }\n",
        "begin_line": 962,
        "end_line": 965,
        "comment": "\n   * @return The expression node.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1924
        },
        "num_failing_tests": 1
    },
    {
        "name": "NodeUtil.newExpr#754",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "signature": "com.google.javascript.jscomp.NodeUtil.newExpr(com.google.javascript.rhino.Node)",
        "snippet": "  static Node newExpr(Node child) {\n    return IR.exprResult(child).srcref(child);\n  }\n",
        "begin_line": 754,
        "end_line": 756,
        "comment": "\n   * Creates an EXPR_RESULT.\n   *\n   * @param child The expression itself.\n   * @return Newly created EXPR node with the child as subexpression.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1857
        },
        "num_failing_tests": 1
    },
    {
        "name": "IRFactory.processIfStatement#836",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.TransformDispatcher.processIfStatement(com.google.javascript.rhino.head.ast.IfStatement)",
        "snippet": "    @Override\n    Node processIfStatement(IfStatement statementNode) {\n      Node node = newNode(Token.IF);\n      node.addChildToBack(transform(statementNode.getCondition()));\n      node.addChildToBack(transformBlock(statementNode.getThenPart()));\n      if (statementNode.getElsePart() != null) {\n        node.addChildToBack(transformBlock(statementNode.getElsePart()));\n      }\n      return node;\n    }\n",
        "begin_line": 836,
        "end_line": 845,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1741
        },
        "num_failing_tests": 1
    },
    {
        "name": "AstValidator.validateIf#462",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AstValidator.java",
        "class_name": "com.google.javascript.jscomp.AstValidator",
        "signature": "com.google.javascript.jscomp.AstValidator.validateIf(com.google.javascript.rhino.Node)",
        "snippet": "  private void validateIf(Node n) {\n    validateNodeType(Token.IF, n);\n    validateMinimumChildCount(n, 2);\n    validateMaximumChildCount(n, 3);\n    validateExpression(n.getFirstChild());\n    validateBlock(n.getChildAtIndex(1));\n    if (n.getChildCount() == 3) {\n      validateBlock(n.getLastChild());\n    }\n  }\n",
        "begin_line": 462,
        "end_line": 471,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1741
        },
        "num_failing_tests": 1
    },
    {
        "name": "AbstractPeepholeOptimization.areNodesEqualForInlining#70",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java",
        "class_name": "com.google.javascript.jscomp.AbstractPeepholeOptimization",
        "signature": "com.google.javascript.jscomp.AbstractPeepholeOptimization.areNodesEqualForInlining(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  protected boolean areNodesEqualForInlining(Node n1, Node n2) {\n    /* Our implementation delegates to the compiler. We provide this\n     * method because we don't want to expose Compiler to PeepholeOptimizations.\n     */\n    Preconditions.checkNotNull(compiler);\n    return compiler.areNodesEqualForInlining(n1, n2);\n  }\n",
        "begin_line": 70,
        "end_line": 76,
        "comment": "\n   * Are the nodes equal for the purpose of inlining?\n   * If type aware optimizations are on, type equality is checked.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1715
        },
        "num_failing_tests": 1
    },
    {
        "name": "PeepholeSubstituteAlternateSyntax.isFoldableExpressBlock#926",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java",
        "class_name": "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax",
        "signature": "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax.isFoldableExpressBlock(com.google.javascript.rhino.Node)",
        "snippet": "  private boolean isFoldableExpressBlock(Node n) {\n    if (n.isBlock()) {\n      if (n.hasOneChild()) {\n        Node maybeExpr = n.getFirstChild();\n        if (maybeExpr.isExprResult()) {\n          // IE has a bug where event handlers behave differently when\n          // their return value is used vs. when their return value is in\n          // an EXPR_RESULT. It's pretty freaking weird. See:\n          // http://code.google.com/p/closure-compiler/issues/detail?id=291\n          // We try to detect this case, and not fold EXPR_RESULTs\n          // into other expressions.\n          if (maybeExpr.getFirstChild().isCall()) {\n            Node calledFn = maybeExpr.getFirstChild().getFirstChild();\n\n            // We only have to worry about methods with an implicit 'this'\n            // param, or this doesn't happen.\n            if (calledFn.isGetElem()) {\n              return false;\n            } else if (calledFn.isGetProp() &&\n                       calledFn.getLastChild().getString().startsWith(\"on\")) {\n              return false;\n            }\n          }\n\n          return true;\n        }\n        return false;\n      }\n    }\n\n    return false;\n  }\n",
        "begin_line": 926,
        "end_line": 957,
        "comment": "\n   * @return Whether the node is a block with a single statement that is\n   *     an expression.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1667
        },
        "num_failing_tests": 1
    },
    {
        "name": "Compiler.areNodesEqualForInlining#1039",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.areNodesEqualForInlining(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  @Override\n  boolean areNodesEqualForInlining(Node n1, Node n2) {\n    if (options.ambiguateProperties ||\n        options.disambiguateProperties) {\n      // The type based optimizations require that type information is preserved\n      // during other optimizations.\n      return n1.isEquivalentToTyped(n2);\n    } else {\n      return n1.isEquivalentTo(n2);\n    }\n  }\n",
        "begin_line": 1039,
        "end_line": 1049,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1667
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.isEquivalentTo#166",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.NumberNode.isEquivalentTo(com.google.javascript.rhino.Node, boolean, boolean)",
        "snippet": "    @Override\n    boolean isEquivalentTo(Node node, boolean compareJsType, boolean recurse) {\n      boolean equivalent = super.isEquivalentTo(node, compareJsType, recurse);\n      if (equivalent) {\n        double thisValue = getDouble();\n        double thatValue = ((NumberNode) node).getDouble();\n        if (thisValue == thatValue) {\n          // detect the difference between 0.0 and -0.0.\n          return (thisValue != 0.0) || (1/thisValue == 1/thatValue);\n        }\n      }\n      return false;\n    }\n",
        "begin_line": 166,
        "end_line": 178,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1601
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.isNot#2299",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.isNot()",
        "snippet": "  public boolean isNot() {\n    return this.getType() == Token.NOT;\n  }\n",
        "begin_line": 2299,
        "end_line": 2301,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1491
        },
        "num_failing_tests": 1
    },
    {
        "name": "IRFactory.processParenthesizedExpression#995",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.TransformDispatcher.processParenthesizedExpression(com.google.javascript.rhino.head.ast.ParenthesizedExpression)",
        "snippet": "    @Override\n    Node processParenthesizedExpression(ParenthesizedExpression exprNode) {\n      Node node = transform(exprNode.getExpression());\n      return node;\n    }\n",
        "begin_line": 995,
        "end_line": 999,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1474
        },
        "num_failing_tests": 1
    },
    {
        "name": "AstValidator.validateUnaryOp#743",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AstValidator.java",
        "class_name": "com.google.javascript.jscomp.AstValidator",
        "signature": "com.google.javascript.jscomp.AstValidator.validateUnaryOp(com.google.javascript.rhino.Node)",
        "snippet": "  private void validateUnaryOp(Node n) {\n    validateChildCount(n, 1);\n    validateExpression(n.getFirstChild());\n  }\n",
        "begin_line": 743,
        "end_line": 746,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1474
        },
        "num_failing_tests": 1
    },
    {
        "name": "PeepholeOptimizationsPass.setRetraverseOnChange#101",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/PeepholeOptimizationsPass.java",
        "class_name": "com.google.javascript.jscomp.PeepholeOptimizationsPass",
        "signature": "com.google.javascript.jscomp.PeepholeOptimizationsPass.setRetraverseOnChange(boolean)",
        "snippet": "  PeepholeOptimizationsPass setRetraverseOnChange(boolean retraverse) {\n    this.retraverseOnChange = retraverse;\n    return this;\n  }\n",
        "begin_line": 101,
        "end_line": 104,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.14
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.Node#392",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.Node(int, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  public Node(int nodeType, Node left, Node mid, Node right) {\n    Preconditions.checkArgument(left.parent == null);\n    Preconditions.checkArgument(left.next == null);\n    Preconditions.checkArgument(mid.parent == null);\n    Preconditions.checkArgument(mid.next == null);\n    Preconditions.checkArgument(right.parent == null);\n    Preconditions.checkArgument(right.next == null);\n    type = nodeType;\n    parent = null;\n    first = left;\n    last = right;\n    left.next = mid;\n    left.parent = this;\n    mid.next = right;\n    mid.parent = this;\n    right.next = null;\n    right.parent = this;\n    sourcePosition = -1;\n  }\n",
        "begin_line": 392,
        "end_line": 410,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1374
        },
        "num_failing_tests": 1
    },
    {
        "name": "AstValidator.validateStatement#92",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AstValidator.java",
        "class_name": "com.google.javascript.jscomp.AstValidator",
        "signature": "com.google.javascript.jscomp.AstValidator.validateStatement(com.google.javascript.rhino.Node)",
        "snippet": "  public void validateStatement(Node n) {\n    switch (n.getType()) {\n      case Token.LABEL:\n        validateLabel(n);\n        return;\n      case Token.BLOCK:\n        validateBlock(n);\n        return;\n      case Token.FUNCTION:\n        validateFunctionStatement(n);\n        return;\n      case Token.WITH:\n        validateWith(n);\n        return;\n      case Token.FOR:\n        validateFor(n);\n        return;\n      case Token.WHILE:\n        validateWhile(n);\n        return;\n      case Token.DO:\n        validateDo(n);\n        return;\n      case Token.SWITCH:\n        validateSwitch(n);\n        return;\n      case Token.IF:\n        validateIf(n);\n        return;\n      case Token.VAR:\n        validateVar(n);\n        return;\n      case Token.EXPR_RESULT:\n        validateExprStmt(n);\n        return;\n      case Token.RETURN:\n        validateReturn(n);\n        return;\n      case Token.THROW:\n        validateThrow(n);\n        return;\n      case Token.TRY:\n        validateTry(n);\n        return;\n      case Token.BREAK:\n        validateBreak(n);\n        return;\n      case Token.CONTINUE:\n        validateContinue(n);\n        return;\n      case Token.EMPTY:\n        validateChildless(n);\n        return;\n      case Token.DEBUGGER:\n        validateChildless(n);\n        return;\n      default:\n        violation(\"Expected statement but was \"\n            + Token.name(n.getType()) + \".\", n);\n    }\n  }\n",
        "begin_line": 92,
        "end_line": 152,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1302
        },
        "num_failing_tests": 1
    },
    {
        "name": "PeepholeSubstituteAlternateSyntax.optimizeSubtree#78",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java",
        "class_name": "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax",
        "signature": "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax.optimizeSubtree(com.google.javascript.rhino.Node)",
        "snippet": "  @Override\n  @SuppressWarnings(\"fallthrough\")\n  public Node optimizeSubtree(Node node) {\n    switch(node.getType()) {\n      case Token.RETURN: {\n        Node result = tryRemoveRedundantExit(node);\n        if (result != node) {\n          return result;\n        }\n        result = tryReplaceExitWithBreak(node);\n        if (result != node) {\n          return result;\n        }\n        return tryReduceReturn(node);\n      }\n\n      case Token.THROW: {\n        Node result = tryRemoveRedundantExit(node);\n        if (result != node) {\n          return result;\n        }\n        return tryReplaceExitWithBreak(node);\n      }\n\n      // TODO(johnlenz): Maybe remove redundant BREAK and CONTINUE. Overlaps\n      // with MinimizeExitPoints.\n\n      case Token.NOT:\n        tryMinimizeCondition(node.getFirstChild());\n        return tryMinimizeNot(node);\n\n      case Token.IF:\n        tryMinimizeCondition(node.getFirstChild());\n        return tryMinimizeIf(node);\n\n      case Token.EXPR_RESULT:\n        tryMinimizeCondition(node.getFirstChild());\n        return node;\n\n      case Token.HOOK:\n        tryMinimizeCondition(node.getFirstChild());\n        return node;\n\n      case Token.WHILE:\n      case Token.DO:\n        tryMinimizeCondition(NodeUtil.getConditionExpression(node));\n        return node;\n\n      case Token.FOR:\n        if (!NodeUtil.isForIn(node)) {\n          tryJoinForCondition(node);\n          tryMinimizeCondition(NodeUtil.getConditionExpression(node));\n        }\n        return node;\n\n      case Token.TRUE:\n      case Token.FALSE:\n        return reduceTrueFalse(node);\n\n      case Token.NEW:\n        node = tryFoldStandardConstructors(node);\n        if (!node.isCall()) {\n          return node;\n        }\n        // Fall through on purpose because tryFoldStandardConstructors() may\n        // convert a NEW node into a CALL node\n      case Token.CALL:\n        Node result =  tryFoldLiteralConstructor(node);\n        if (result == node) {\n          result = tryFoldSimpleFunctionCall(node);\n          if (result == node) {\n            result = tryFoldImmediateCallToBoundFunction(node);\n          }\n        }\n        return result;\n\n      case Token.COMMA:\n        return trySplitComma(node);\n\n      case Token.NAME:\n        return tryReplaceUndefined(node);\n\n      case Token.BLOCK:\n        return tryReplaceIf(node);\n\n      case Token.ARRAYLIT:\n        return tryMinimizeArrayLiteral(node);\n\n      default:\n        return node; //Nothing changed\n    }\n  }\n",
        "begin_line": 78,
        "end_line": 169,
        "comment": "\n   * Tries apply our various peephole minimizations on the passed in node.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1291
        },
        "num_failing_tests": 1
    },
    {
        "name": "AstValidator.validateMinimumChildCount#790",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AstValidator.java",
        "class_name": "com.google.javascript.jscomp.AstValidator",
        "signature": "com.google.javascript.jscomp.AstValidator.validateMinimumChildCount(com.google.javascript.rhino.Node, int)",
        "snippet": "  private void validateMinimumChildCount(Node n, int i) {\n    boolean valid = false;\n    if (i == 1) {\n      valid = n.hasChildren();\n    } else if (i == 2) {\n      valid = n.hasMoreThanOneChild();\n    } else {\n      valid = n.getChildCount() >= i;\n    }\n\n    if (!valid) {\n      violation(\n          \"Expected at least \" + i + \" children, but was \"\n              + n.getChildCount(), n);\n    }\n  }\n",
        "begin_line": 790,
        "end_line": 805,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.127
        },
        "num_failing_tests": 1
    },
    {
        "name": "IR.exprResult#174",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/IR.java",
        "class_name": "com.google.javascript.rhino.IR",
        "signature": "com.google.javascript.rhino.IR.exprResult(com.google.javascript.rhino.Node)",
        "snippet": "  public static Node exprResult(Node expr) {\n    Preconditions.checkState(mayBeExpression(expr));\n    return new Node(Token.EXPR_RESULT, expr);\n  }\n",
        "begin_line": 174,
        "end_line": 177,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.126
        },
        "num_failing_tests": 1
    },
    {
        "name": "IRFactory.processScope#1039",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.TransformDispatcher.processScope(com.google.javascript.rhino.head.ast.Scope)",
        "snippet": "    @Override\n    Node processScope(Scope scopeNode) {\n      return processGeneric(scopeNode);\n    }\n",
        "begin_line": 1039,
        "end_line": 1042,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.125
        },
        "num_failing_tests": 1
    },
    {
        "name": "AstValidator.validateMaximumChildCount#807",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AstValidator.java",
        "class_name": "com.google.javascript.jscomp.AstValidator",
        "signature": "com.google.javascript.jscomp.AstValidator.validateMaximumChildCount(com.google.javascript.rhino.Node, int)",
        "snippet": "  private void validateMaximumChildCount(Node n, int i) {\n    boolean valid = false;\n    if (i == 1) {\n      valid = !n.hasMoreThanOneChild();\n    } else {\n      valid = n.getChildCount() <= i;\n    }\n    if (!valid) {\n      violation(\n          \"Expected no more than \" + i + \" children, but was \"\n              + n.getChildCount(), n);\n    }\n  }\n",
        "begin_line": 807,
        "end_line": 819,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1162
        },
        "num_failing_tests": 1
    },
    {
        "name": "IRFactory.transformBlock#224",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.transformBlock(com.google.javascript.rhino.head.ast.AstNode)",
        "snippet": "  private Node transformBlock(AstNode node) {\n    Node irNode = transform(node);\n    if (!irNode.isBlock()) {\n      if (irNode.isEmpty()) {\n        irNode.setType(Token.BLOCK);\n        irNode.setWasEmptyNode(true);\n      } else {\n        Node newBlock = newNode(Token.BLOCK, irNode);\n        newBlock.setLineno(irNode.getLineno());\n        newBlock.setCharno(irNode.getCharno());\n        maybeSetLengthFrom(newBlock, node);\n        irNode = newBlock;\n      }\n    }\n    return irNode;\n  }\n",
        "begin_line": 224,
        "end_line": 239,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1118
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.removeFirstChild#1623",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.removeFirstChild()",
        "snippet": "  public Node removeFirstChild() {\n    Node child = first;\n    if (child != null) {\n      removeChild(child);\n    }\n    return child;\n  }\n",
        "begin_line": 1623,
        "end_line": 1629,
        "comment": "\n   * Removes the first child of Node. Equivalent to:\n   * node.removeChild(node.getFirstChild());\n   *\n   * @return The removed Node.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1111
        },
        "num_failing_tests": 1
    },
    {
        "name": "AstValidator.validateBinaryOp#748",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AstValidator.java",
        "class_name": "com.google.javascript.jscomp.AstValidator",
        "signature": "com.google.javascript.jscomp.AstValidator.validateBinaryOp(com.google.javascript.rhino.Node)",
        "snippet": "  private void validateBinaryOp(Node n) {\n    validateChildCount(n, 2);\n    validateExpression(n.getFirstChild());\n    validateExpression(n.getLastChild());\n  }\n",
        "begin_line": 748,
        "end_line": 752,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1111
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.useSourceInfoFrom#1751",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.useSourceInfoFrom(com.google.javascript.rhino.Node)",
        "snippet": "  public Node useSourceInfoFrom(Node other) {\n    putProp(ORIGINALNAME_PROP, other.getProp(ORIGINALNAME_PROP));\n    putProp(STATIC_SOURCE_FILE, other.getProp(STATIC_SOURCE_FILE));\n    sourcePosition = other.sourcePosition;\n    return this;\n  }\n",
        "begin_line": 1751,
        "end_line": 1756,
        "comment": "\n   * Overwrite all the source information in this node with\n   * that of {@code other}.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1066
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.srcref#1758",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.srcref(com.google.javascript.rhino.Node)",
        "snippet": "  public Node srcref(Node other) {\n    return useSourceInfoFrom(other);\n  }\n",
        "begin_line": 1758,
        "end_line": 1760,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1066
        },
        "num_failing_tests": 1
    },
    {
        "name": "LineNumberCheck.LineNumberCheck#40",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/LineNumberCheck.java",
        "class_name": "com.google.javascript.jscomp.LineNumberCheck",
        "signature": "com.google.javascript.jscomp.LineNumberCheck.LineNumberCheck(com.google.javascript.jscomp.AbstractCompiler)",
        "snippet": "  LineNumberCheck(AbstractCompiler compiler) {\n    this.compiler = compiler;\n  }\n",
        "begin_line": 40,
        "end_line": 42,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1054
        },
        "num_failing_tests": 1
    },
    {
        "name": "LineNumberCheck.process#50",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/LineNumberCheck.java",
        "class_name": "com.google.javascript.jscomp.LineNumberCheck",
        "signature": "com.google.javascript.jscomp.LineNumberCheck.process(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  @Override\n  public void process(Node externs, Node root) {\n    requiresLineNumbers = false;\n\n    NodeTraversal.traverse(compiler, root, this);\n  }\n",
        "begin_line": 50,
        "end_line": 55,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1054
        },
        "num_failing_tests": 1
    },
    {
        "name": "LineNumberCheck.shouldTraverse#57",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/LineNumberCheck.java",
        "class_name": "com.google.javascript.jscomp.LineNumberCheck",
        "signature": "com.google.javascript.jscomp.LineNumberCheck.shouldTraverse(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  @Override\n  public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n    // Each JavaScript file is rooted in a script node, so we'll only\n    // have line number information inside the script node.\n    if (n.isScript()) {\n      requiresLineNumbers = true;\n    }\n    return true;\n  }\n",
        "begin_line": 57,
        "end_line": 65,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1054
        },
        "num_failing_tests": 1
    },
    {
        "name": "LineNumberCheck.visit#67",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/LineNumberCheck.java",
        "class_name": "com.google.javascript.jscomp.LineNumberCheck",
        "signature": "com.google.javascript.jscomp.LineNumberCheck.visit(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  @Override\n  public void visit(NodeTraversal t, Node n, Node parent) {\n    if (n.isScript()) {\n      requiresLineNumbers = false;\n    } else if (requiresLineNumbers) {\n      if (n.getLineno() == -1) {\n        // The tree version of the node is really the best diagnostic\n        // info we have to offer here.\n        compiler.report(\n            t.makeError(n, MISSING_LINE_INFO,\n                n.toStringTree()));\n      }\n    }\n  }\n",
        "begin_line": 67,
        "end_line": 80,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1054
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.isEquivalentTo#1495",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.isEquivalentTo(com.google.javascript.rhino.Node, boolean, boolean)",
        "snippet": "  boolean isEquivalentTo(Node node, boolean compareJsType, boolean recurse) {\n    if (type != node.getType()\n        || getChildCount() != node.getChildCount()\n        || this.getClass() != node.getClass()) {\n      return false;\n    }\n\n    if (compareJsType && !JSType.isEquivalent(jsType, node.getJSType())) {\n      return false;\n    }\n\n    if (type == Token.INC || type == Token.DEC) {\n      int post1 = this.getIntProp(INCRDECR_PROP);\n      int post2 = node.getIntProp(INCRDECR_PROP);\n      if (post1 != post2) {\n        return false;\n      }\n    } else if (type == Token.STRING || type == Token.STRING_KEY) {\n      if (type == Token.STRING_KEY) {\n        int quoted1 = this.getIntProp(QUOTED_PROP);\n        int quoted2 = node.getIntProp(QUOTED_PROP);\n        if (quoted1 != quoted2) {\n          return false;\n        }\n      }\n\n      int slashV1 = this.getIntProp(SLASH_V);\n      int slashV2 = node.getIntProp(SLASH_V);\n      if (slashV1 != slashV2) {\n        return false;\n      }\n    } else if (type == Token.CALL) {\n      if (this.getBooleanProp(FREE_CALL) != node.getBooleanProp(FREE_CALL)) {\n        return false;\n      }\n    }\n\n    if (recurse) {\n      Node n, n2;\n      for (n = first, n2 = node.first;\n           n != null;\n           n = n.next, n2 = n2.next) {\n        if (!n.isEquivalentTo(n2, compareJsType, true)) {\n          return false;\n        }\n      }\n    }\n\n    return true;\n  }\n",
        "begin_line": 1495,
        "end_line": 1544,
        "comment": "\n   * @param compareJsType Whether to compare the JSTypes of the nodes.\n   * @param recurse Whether to compare the children of the current node, if\n   *    not only the the count of the children are compared.\n   * @return Whether this node is equivalent semantically to the provided node.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1037
        },
        "num_failing_tests": 1
    },
    {
        "name": "NodeUtil.isImmutableValue#490",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "signature": "com.google.javascript.jscomp.NodeUtil.isImmutableValue(com.google.javascript.rhino.Node)",
        "snippet": "  static boolean isImmutableValue(Node n) {\n    switch (n.getType()) {\n      case Token.STRING:\n      case Token.NUMBER:\n      case Token.NULL:\n      case Token.TRUE:\n      case Token.FALSE:\n        return true;\n      case Token.CAST:\n      case Token.NOT:\n        return isImmutableValue(n.getFirstChild());\n      case Token.VOID:\n      case Token.NEG:\n        return isImmutableValue(n.getFirstChild());\n      case Token.NAME:\n        String name = n.getString();\n        // We assume here that programs don't change the value of the keyword\n        // undefined to something other than the value undefined.\n        return \"undefined\".equals(name)\n            || \"Infinity\".equals(name)\n            || \"NaN\".equals(name);\n    }\n\n    return false;\n  }\n",
        "begin_line": 490,
        "end_line": 514,
        "comment": "\n   * Returns true if this is an immutable value.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1026
        },
        "num_failing_tests": 1
    },
    {
        "name": "PeepholeOptimizationsPass.visit#182",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/PeepholeOptimizationsPass.java",
        "class_name": "com.google.javascript.jscomp.PeepholeOptimizationsPass",
        "signature": "com.google.javascript.jscomp.PeepholeOptimizationsPass.visit(com.google.javascript.rhino.Node)",
        "snippet": "  public void visit(Node n) {\n    Node currentVersionOfNode = n;\n    boolean somethingChanged = false;\n\n    do {\n      somethingChanged = false;\n      for (AbstractPeepholeOptimization optimization : peepholeOptimizations) {\n        Node newVersionOfNode =\n            optimization.optimizeSubtree(currentVersionOfNode);\n\n        if (newVersionOfNode != currentVersionOfNode) {\n          somethingChanged = true;\n\n          currentVersionOfNode = newVersionOfNode;\n        }\n\n        if (currentVersionOfNode == null) {\n          return;\n        }\n      }\n    } while(somethingChanged);\n  }\n",
        "begin_line": 182,
        "end_line": 203,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.099
        },
        "num_failing_tests": 1
    },
    {
        "name": "AstValidator.validateRoot#67",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AstValidator.java",
        "class_name": "com.google.javascript.jscomp.AstValidator",
        "signature": "com.google.javascript.jscomp.AstValidator.validateRoot(com.google.javascript.rhino.Node)",
        "snippet": "  public void validateRoot(Node n) {\n    validateNodeType(Token.BLOCK, n);\n    validateIsSynthetic(n);\n    validateChildCount(n, 2);\n    validateCodeRoot(n.getFirstChild());\n    validateCodeRoot(n.getLastChild());\n  }\n",
        "begin_line": 67,
        "end_line": 73,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0985
        },
        "num_failing_tests": 1
    },
    {
        "name": "TemplateTypeMap.getTemplateType#115",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/TemplateTypeMap.java",
        "class_name": "com.google.javascript.rhino.jstype.TemplateTypeMap",
        "signature": "com.google.javascript.rhino.jstype.TemplateTypeMap.getTemplateType(java.lang.String)",
        "snippet": "  public JSType getTemplateType(String key) {\n    JSType templateType = getTemplateTypeInternal(key);\n    return (templateType == null) ?\n        registry.getNativeType(JSTypeNative.UNKNOWN_TYPE) : templateType;\n  }\n",
        "begin_line": 115,
        "end_line": 119,
        "comment": "\n   * Returns the JSType value associated with the specified template key. If no\n   * JSType value is associated, returns UNKNOWN_TYPE.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0981
        },
        "num_failing_tests": 1
    },
    {
        "name": "TemplateTypeMap.checkEquivalenceHelper#137",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/TemplateTypeMap.java",
        "class_name": "com.google.javascript.rhino.jstype.TemplateTypeMap",
        "signature": "com.google.javascript.rhino.jstype.TemplateTypeMap.checkEquivalenceHelper(com.google.javascript.rhino.jstype.TemplateTypeMap, com.google.javascript.rhino.jstype.EquivalenceMethod)",
        "snippet": "  public boolean checkEquivalenceHelper(\n      TemplateTypeMap that, EquivalenceMethod eqMethod) {\n    int thisNumKeys = templateKeys.size();\n    int thatNumKeys = that.getTemplateKeys().size();\n\n    for (int i = 0; i < Math.min(thisNumKeys, thatNumKeys); i++) {\n      JSType thisTemplateType = getTemplateType(templateKeys.get(i));\n      JSType thatTemplateType = that.getTemplateType(\n          that.getTemplateKeys().get(i));\n      if (!thisTemplateType.checkEquivalenceHelper(\n          thatTemplateType, eqMethod)) {\n        return false;\n      }\n    }\n\n    return thisNumKeys == thatNumKeys ||\n        eqMethod == EquivalenceMethod.INVARIANT;\n  }\n",
        "begin_line": 137,
        "end_line": 154,
        "comment": "\n   * Determines if this map and the specified map have equivalent template\n   * types.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0981
        },
        "num_failing_tests": 1
    },
    {
        "name": "ObjectType.isImplicitPrototype#529",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/ObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.ObjectType",
        "signature": "com.google.javascript.rhino.jstype.ObjectType.isImplicitPrototype(com.google.javascript.rhino.jstype.ObjectType)",
        "snippet": "  final boolean isImplicitPrototype(ObjectType prototype) {\n    for (ObjectType current = this;\n         current != null;\n         current = current.getImplicitPrototype()) {\n      if (current.isEquivalentTo(prototype)) {\n        return true;\n      }\n    }\n    return false;\n  }\n",
        "begin_line": 529,
        "end_line": 538,
        "comment": "\n   * Checks that the prototype is an implicit prototype of this object. Since\n   * each object has an implicit prototype, an implicit prototype's\n   * implicit prototype is also this implicit prototype's.\n   *\n   * @param prototype any prototype based object\n   *\n   * @return {@code true} if {@code prototype} is {@code equal} to any\n   *         object in this object's implicit prototype chain.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0981
        },
        "num_failing_tests": 1
    },
    {
        "name": "TemplateTypeMap.getTemplateTypeInternal#125",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/TemplateTypeMap.java",
        "class_name": "com.google.javascript.rhino.jstype.TemplateTypeMap",
        "signature": "com.google.javascript.rhino.jstype.TemplateTypeMap.getTemplateTypeInternal(java.lang.String)",
        "snippet": "  private JSType getTemplateTypeInternal(String key) {\n    int index = templateKeys.indexOf(key);\n    if (index < 0 || index >= templateValues.size()) {\n      return null;\n    }\n    return templateValues.get(index);\n  }\n",
        "begin_line": 125,
        "end_line": 131,
        "comment": "\n   * Returns the JSType value associated with the specified template key. If no\n   * JSType value is associated, returns null.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0976
        },
        "num_failing_tests": 1
    },
    {
        "name": "UnionTypeBuilder.addAlternate#120",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/UnionTypeBuilder.java",
        "class_name": "com.google.javascript.rhino.jstype.UnionTypeBuilder",
        "signature": "com.google.javascript.rhino.jstype.UnionTypeBuilder.addAlternate(com.google.javascript.rhino.jstype.JSType)",
        "snippet": "  UnionTypeBuilder addAlternate(JSType alternate) {\n    // build() returns the bottom type by default, so we can\n    // just bail out early here.\n    if (alternate.isNoType()) {\n      return this;\n    }\n\n    isAllType = isAllType || alternate.isAllType();\n\n    boolean isAlternateUnknown = alternate instanceof UnknownType;\n    isNativeUnknownType = isNativeUnknownType || isAlternateUnknown;\n    if (isAlternateUnknown) {\n      areAllUnknownsChecked = areAllUnknownsChecked &&\n          alternate.isCheckedUnknownType();\n    }\n    if (!isAllType && !isNativeUnknownType) {\n      if (alternate.isUnionType()) {\n        UnionType union = alternate.toMaybeUnionType();\n        for (JSType unionAlt : union.getAlternates()) {\n          addAlternate(unionAlt);\n        }\n      } else {\n        if (alternates.size() > maxUnionSize) {\n          return this;\n        }\n\n        // Function types are special, because they have their\n        // own bizarre sub-lattice. See the comments on\n        // FunctionType#supAndInf helper and above at functionTypePosition.\n        if (alternate.isFunctionType() && functionTypePosition != -1) {\n          // See the comments on functionTypePosition above.\n          FunctionType other =\n              alternates.get(functionTypePosition).toMaybeFunctionType();\n          FunctionType supremum =\n              alternate.toMaybeFunctionType().supAndInfHelper(other, true);\n          alternates.set(functionTypePosition, supremum);\n          result = null;\n          return this;\n        }\n\n        // Look through the alternates we've got so far,\n        // and check if any of them are duplicates of\n        // one another.\n        int currentIndex = 0;\n        Iterator<JSType> it = alternates.iterator();\n        while (it.hasNext()) {\n          boolean removeCurrent = false;\n          JSType current = it.next();\n\n          // Unknown and NoResolved types may just be names that haven't\n          // been resolved yet. So keep these in the union, and just use\n          // equality checking for simple de-duping.\n          if (alternate.isUnknownType() ||\n              current.isUnknownType() ||\n              alternate.isNoResolvedType() ||\n              current.isNoResolvedType() ||\n              alternate.hasAnyTemplateTypes() ||\n              current.hasAnyTemplateTypes()) {\n            if (alternate.isEquivalentTo(current)) {\n              // Alternate is unnecessary.\n              return this;\n            }\n          } else {\n\n            // Because \"Foo\" and \"Foo.<?>\" are roughly equivalent\n            // templatized types, special care is needed when building the\n            // union. For example:\n            //   Object is consider a subtype of Object.<string>\n            // but we want to leave \"Object\" not \"Object.<string>\" when\n            // building the subtype.\n            //\n\n            if (alternate.isTemplatizedType() || current.isTemplatizedType()) {\n              // Cases:\n              // 1) alternate:Array.<string> and current:Object ==> Object\n              // 2) alternate:Array.<string> and current:Array ==> Array\n              // 3) alternate:Object.<string> and\n              //    current:Array ==> Array|Object.<string>\n              // 4) alternate:Object and current:Array.<string> ==> Object\n              // 5) alternate:Array and current:Array.<string> ==> Array\n              // 6) alternate:Array and\n              //    current:Object.<string> ==> Array|Object.<string>\n              // 7) alternate:Array.<string> and\n              //    current:Array.<number> ==> Array.<?>\n              // 8) alternate:Array.<string> and\n              //    current:Array.<string> ==> Array.<string>\n              // 9) alternate:Array.<string> and\n              //    current:Object.<string> ==> Object.<string>|Array.<string>\n\n              if (!current.isTemplatizedType()) {\n                if (alternate.isSubtype(current)) {\n                  // case 1, 2\n                  return this;\n                }\n                // case 3: leave current, add alternate\n              } else if (!alternate.isTemplatizedType()) {\n                if (current.isSubtype(alternate)) {\n                  // case 4, 5\n                  removeCurrent = true;\n                }\n                // case 6: leave current, add alternate\n              } else {\n                Preconditions.checkState(current.isTemplatizedType()\n                    && alternate.isTemplatizedType());\n                TemplatizedType templatizedAlternate = alternate.toMaybeTemplatizedType();\n                TemplatizedType templatizedCurrent = current.toMaybeTemplatizedType();\n\n                if (templatizedCurrent.wrapsSameRawType(templatizedAlternate)) {\n                  if (alternate.getTemplateTypeMap().checkEquivalenceHelper(\n                      current.getTemplateTypeMap(),\n                      EquivalenceMethod.IDENTITY)) {\n                    // case 8\n                    return this;\n                  } else {\n                    // TODO(johnlenz): should we leave both types?\n                    // case 7: add a merged alternate\n                    // We currently merge to the templatized types to \"unknown\"\n                    // which is equivalent to the raw type.\n                    JSType merged = templatizedCurrent\n                        .getReferencedObjTypeInternal();\n                    return addAlternate(merged);\n                  }\n                }\n                // case 9: leave current, add alternate\n              }\n              // Otherwise leave both templatized types.\n            } else if (alternate.isSubtype(current)) {\n              // Alternate is unnecessary.\n              return this;\n            } else if (current.isSubtype(alternate)) {\n              // Alternate makes current obsolete\n              removeCurrent = true;\n            }\n          }\n\n          if (removeCurrent) {\n            it.remove();\n\n            if (currentIndex == functionTypePosition) {\n              functionTypePosition = -1;\n            } else if (currentIndex < functionTypePosition) {\n              functionTypePosition--;\n              currentIndex--;\n            }\n          }\n          currentIndex++;\n        }\n\n        if (alternate.isFunctionType()) {\n          // See the comments on functionTypePosition above.\n          Preconditions.checkState(functionTypePosition == -1);\n          functionTypePosition = alternates.size();\n        }\n\n        alternates.add(alternate);\n        result = null; // invalidate the memoized result\n      }\n    } else {\n      result = null;\n    }\n    return this;\n  }\n",
        "begin_line": 120,
        "end_line": 281,
        "comment": "\n   * Adds an alternate to the union type under construction. Returns this\n   * for easy chaining.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0967
        },
        "num_failing_tests": 1
    },
    {
        "name": "NodeUtil.checkForStateChangeHelper#789",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "signature": "com.google.javascript.jscomp.NodeUtil.checkForStateChangeHelper(com.google.javascript.rhino.Node, boolean, com.google.javascript.jscomp.AbstractCompiler)",
        "snippet": "  private static boolean checkForStateChangeHelper(\n      Node n, boolean checkForNewObjects, AbstractCompiler compiler) {\n    // Rather than id which ops may have side effects, id the ones\n    // that we know to be safe\n    switch (n.getType()) {\n      // other side-effect free statements and expressions\n      case Token.CAST:\n      case Token.AND:\n      case Token.BLOCK:\n      case Token.EXPR_RESULT:\n      case Token.HOOK:\n      case Token.IF:\n      case Token.IN:\n      case Token.PARAM_LIST:\n      case Token.NUMBER:\n      case Token.OR:\n      case Token.THIS:\n      case Token.TRUE:\n      case Token.FALSE:\n      case Token.NULL:\n      case Token.STRING:\n      case Token.STRING_KEY:\n      case Token.SWITCH:\n      case Token.TRY:\n      case Token.EMPTY:\n        break;\n\n      // Throws are by definition side effects\n      case Token.THROW:\n        return true;\n\n      case Token.OBJECTLIT:\n        if (checkForNewObjects) {\n          return true;\n        }\n        for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n          if (checkForStateChangeHelper(\n                  c.getFirstChild(), checkForNewObjects, compiler)) {\n            return true;\n          }\n        }\n        return false;\n\n      case Token.ARRAYLIT:\n      case Token.REGEXP:\n        if (checkForNewObjects) {\n          return true;\n        }\n        break;\n\n      case Token.VAR:    // empty var statement (no declaration)\n      case Token.NAME:   // variable by itself\n        if (n.getFirstChild() != null) {\n          return true;\n        }\n        break;\n\n      case Token.FUNCTION:\n        // Function expressions don't have side-effects, but function\n        // declarations change the namespace. Either way, we don't need to\n        // check the children, since they aren't executed at declaration time.\n        return checkForNewObjects || !isFunctionExpression(n);\n\n      case Token.NEW:\n        if (checkForNewObjects) {\n          return true;\n        }\n\n        if (!constructorCallHasSideEffects(n)) {\n          // loop below will see if the constructor parameters have\n          // side-effects\n          break;\n        }\n        return true;\n\n      case Token.CALL:\n        // calls to functions that have no side effects have the no\n        // side effect property set.\n        if (!functionCallHasSideEffects(n, compiler)) {\n          // loop below will see if the function parameters have\n          // side-effects\n          break;\n        }\n        return true;\n\n      default:\n        if (isSimpleOperator(n)) {\n          break;\n        }\n\n        if (isAssignmentOp(n)) {\n          Node assignTarget = n.getFirstChild();\n          if (assignTarget.isName()) {\n            return true;\n          }\n\n          // Assignments will have side effects if\n          // a) The RHS has side effects, or\n          // b) The LHS has side effects, or\n          // c) A name on the LHS will exist beyond the life of this statement.\n          if (checkForStateChangeHelper(\n                  n.getFirstChild(), checkForNewObjects, compiler) ||\n              checkForStateChangeHelper(\n                  n.getLastChild(), checkForNewObjects, compiler)) {\n            return true;\n          }\n\n          if (isGet(assignTarget)) {\n            // If the object being assigned to is a local object, don't\n            // consider this a side-effect as it can't be referenced\n            // elsewhere.  Don't do this recursively as the property might\n            // be an alias of another object, unlike a literal below.\n            Node current = assignTarget.getFirstChild();\n            if (evaluatesToLocalValue(current)) {\n              return false;\n            }\n\n            // A literal value as defined by \"isLiteralValue\" is guaranteed\n            // not to be an alias, or any components which are aliases of\n            // other objects.\n            // If the root object is a literal don't consider this a\n            // side-effect.\n            while (isGet(current)) {\n              current = current.getFirstChild();\n            }\n\n            return !isLiteralValue(current, true);\n          } else {\n            // TODO(johnlenz): remove this code and make this an exception. This\n            // is here only for legacy reasons, the AST is not valid but\n            // preserve existing behavior.\n            return !isLiteralValue(assignTarget, true);\n          }\n        }\n\n        return true;\n    }\n\n    for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n      if (checkForStateChangeHelper(c, checkForNewObjects, compiler)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n",
        "begin_line": 789,
        "end_line": 934,
        "comment": "\n   * Returns true if some node in n's subtree changes application state.\n   * If {@code checkForNewObjects} is true, we assume that newly created\n   * mutable objects (like object literals) change state. Otherwise, we assume\n   * that they have no side effects.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0945
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.isReturn#2327",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.isReturn()",
        "snippet": "  public boolean isReturn() {\n    return this.getType() == Token.RETURN;\n  }\n",
        "begin_line": 2327,
        "end_line": 2329,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0937
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.cloneTree#1695",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.cloneTree()",
        "snippet": "  public Node cloneTree() {\n    Node result = cloneNode();\n    for (Node n2 = getFirstChild(); n2 != null; n2 = n2.getNext()) {\n      Node n2clone = n2.cloneTree();\n      n2clone.parent = result;\n      if (result.last != null) {\n        result.last.next = n2clone;\n      }\n      if (result.first == null) {\n        result.first = n2clone;\n      }\n      result.last = n2clone;\n    }\n    return result;\n  }\n",
        "begin_line": 1695,
        "end_line": 1709,
        "comment": "\n   * @return A detached clone of the Node and all its children.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0917
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.isEquivalentTo#1477",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.isEquivalentTo(com.google.javascript.rhino.Node)",
        "snippet": "  public boolean isEquivalentTo(Node node) {\n    return isEquivalentTo(node, false, true);\n  }\n",
        "begin_line": 1477,
        "end_line": 1479,
        "comment": " Returns true if this node is equivalent semantically to another ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0902
        },
        "num_failing_tests": 1
    },
    {
        "name": "IR.mayBeExpression#549",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/IR.java",
        "class_name": "com.google.javascript.rhino.IR",
        "signature": "com.google.javascript.rhino.IR.mayBeExpression(com.google.javascript.rhino.Node)",
        "snippet": "  private static boolean mayBeExpression(Node n) {\n    switch (n.getType()) {\n      case Token.FUNCTION:\n        // FUNCTION is used both in expression and statement\n        // contexts.\n        return true;\n\n      case Token.ADD:\n      case Token.AND:\n      case Token.ARRAYLIT:\n      case Token.ASSIGN:\n      case Token.ASSIGN_BITOR:\n      case Token.ASSIGN_BITXOR:\n      case Token.ASSIGN_BITAND:\n      case Token.ASSIGN_LSH:\n      case Token.ASSIGN_RSH:\n      case Token.ASSIGN_URSH:\n      case Token.ASSIGN_ADD:\n      case Token.ASSIGN_SUB:\n      case Token.ASSIGN_MUL:\n      case Token.ASSIGN_DIV:\n      case Token.ASSIGN_MOD:\n      case Token.BITAND:\n      case Token.BITOR:\n      case Token.BITNOT:\n      case Token.BITXOR:\n      case Token.CALL:\n      case Token.CAST:\n      case Token.COMMA:\n      case Token.DEC:\n      case Token.DELPROP:\n      case Token.DIV:\n      case Token.EQ:\n      case Token.FALSE:\n      case Token.GE:\n      case Token.GETPROP:\n      case Token.GETELEM:\n      case Token.GT:\n      case Token.HOOK:\n      case Token.IN:\n      case Token.INC:\n      case Token.INSTANCEOF:\n      case Token.LE:\n      case Token.LSH:\n      case Token.LT:\n      case Token.MOD:\n      case Token.MUL:\n      case Token.NAME:\n      case Token.NE:\n      case Token.NEG:\n      case Token.NEW:\n      case Token.NOT:\n      case Token.NUMBER:\n      case Token.NULL:\n      case Token.OBJECTLIT:\n      case Token.OR:\n      case Token.POS:\n      case Token.REGEXP:\n      case Token.RSH:\n      case Token.SHEQ:\n      case Token.SHNE:\n      case Token.STRING:\n      case Token.SUB:\n      case Token.THIS:\n      case Token.TYPEOF:\n      case Token.TRUE:\n      case Token.URSH:\n      case Token.VOID:\n        return true;\n\n      default:\n        return false;\n    }\n  }\n",
        "begin_line": 549,
        "end_line": 622,
        "comment": "\n   * It isn't possible to always determine if a detached node is a expression,\n   * so make a best guess.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0902
        },
        "num_failing_tests": 1
    },
    {
        "name": "Compiler.reconcileOptionsWithGuards#310",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.reconcileOptionsWithGuards()",
        "snippet": "  protected void reconcileOptionsWithGuards() {\n    // DiagnosticGroups override the plain checkTypes option.\n    if (options.enables(DiagnosticGroups.CHECK_TYPES)) {\n      options.checkTypes = true;\n    } else if (options.disables(DiagnosticGroups.CHECK_TYPES)) {\n      options.checkTypes = false;\n    } else if (!options.checkTypes) {\n      // If DiagnosticGroups did not override the plain checkTypes\n      // option, and checkTypes is enabled, then turn off the\n      // parser type warnings.\n      options.setWarningLevel(\n          DiagnosticGroup.forType(\n              RhinoErrorReporter.TYPE_PARSE_ERROR),\n          CheckLevel.OFF);\n    }\n\n    if (options.checkGlobalThisLevel.isOn() &&\n        !options.disables(DiagnosticGroups.GLOBAL_THIS)) {\n      options.setWarningLevel(\n          DiagnosticGroups.GLOBAL_THIS,\n          options.checkGlobalThisLevel);\n    }\n\n    if (options.getLanguageIn() == LanguageMode.ECMASCRIPT5_STRICT) {\n      options.setWarningLevel(\n          DiagnosticGroups.ES5_STRICT,\n          CheckLevel.ERROR);\n    }\n\n    // All passes must run the variable check. This synthesizes\n    // variables later so that the compiler doesn't crash. It also\n    // checks the externs file for validity. If you don't want to warn\n    // about missing variable declarations, we shut that specific\n    // error off.\n    if (!options.checkSymbols &&\n        !options.enables(DiagnosticGroups.CHECK_VARIABLES)) {\n      options.setWarningLevel(\n          DiagnosticGroups.CHECK_VARIABLES, CheckLevel.OFF);\n    }\n  }\n",
        "begin_line": 310,
        "end_line": 349,
        "comment": "\n   * When the CompilerOptions and its WarningsGuard overlap, reconcile\n   * any discrepencies.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0894
        },
        "num_failing_tests": 1
    },
    {
        "name": "PeepholeOptimizationsPass.reportChange#85",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/PeepholeOptimizationsPass.java",
        "class_name": "com.google.javascript.jscomp.PeepholeOptimizationsPass",
        "signature": "com.google.javascript.jscomp.PeepholeOptimizationsPass.PeepholeChangeHandler.reportChange()",
        "snippet": "    @Override\n    public void reportChange() {\n      traversalState.peek().changed = true;\n    }\n",
        "begin_line": 85,
        "end_line": 88,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0887
        },
        "num_failing_tests": 1
    },
    {
        "name": "AbstractPeepholeOptimization.reportCodeChange#61",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java",
        "class_name": "com.google.javascript.jscomp.AbstractPeepholeOptimization",
        "signature": "com.google.javascript.jscomp.AbstractPeepholeOptimization.reportCodeChange()",
        "snippet": "  protected void reportCodeChange() {\n    Preconditions.checkNotNull(compiler);\n    compiler.reportCodeChange();\n  }\n",
        "begin_line": 61,
        "end_line": 64,
        "comment": "\n   * Helper method for telling the compiler that something has changed.\n   * Subclasses must call these if they have changed the AST.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0887
        },
        "num_failing_tests": 1
    },
    {
        "name": "ObjectType.defineDeclaredProperty#284",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/ObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.ObjectType",
        "signature": "com.google.javascript.rhino.jstype.ObjectType.defineDeclaredProperty(java.lang.String, com.google.javascript.rhino.jstype.JSType, com.google.javascript.rhino.Node)",
        "snippet": "  public final boolean defineDeclaredProperty(String propertyName,\n      JSType type, Node propertyNode) {\n    boolean result = defineProperty(propertyName, type, false, propertyNode);\n    // All property definitions go through this method\n    // or defineInferredProperty. Because the properties defined an an\n    // object can affect subtyping, it's slightly more efficient\n    // to register this after defining the property.\n    registry.registerPropertyOnType(propertyName, this);\n    return result;\n  }\n",
        "begin_line": 284,
        "end_line": 293,
        "comment": "\n   * Defines a property whose type is explicitly declared by the programmer.\n   * @param propertyName the property's name\n   * @param type the type\n   * @param propertyNode the node corresponding to the declaration of property\n   *        which might later be accessed using {@code getPropertyNode}.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0828
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSTypeRegistry.createNullableType#1023",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.createNullableType(com.google.javascript.rhino.jstype.JSType)",
        "snippet": "  public JSType createNullableType(JSType type) {\n    return createUnionType(type, getNativeType(JSTypeNative.NULL_TYPE));\n  }\n",
        "begin_line": 1023,
        "end_line": 1025,
        "comment": "\n   * Creates a type representing nullable values of the given type.\n   * @return the union of the type and the Null type\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0828
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.cloneNode#1676",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.cloneNode()",
        "snippet": "  public Node cloneNode() {\n    Node result;\n    try {\n      result = (Node) super.clone();\n      // PropListItem lists are immutable and can be shared so there is no\n      // need to clone them here.\n      result.next = null;\n      result.first = null;\n      result.last = null;\n      result.parent = null;\n    } catch (CloneNotSupportedException e) {\n      throw new RuntimeException(e.getMessage());\n    }\n    return result;\n  }\n",
        "begin_line": 1676,
        "end_line": 1690,
        "comment": "\n   * @return A detached clone of the Node, specifically excluding its children.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0828
        },
        "num_failing_tests": 1
    },
    {
        "name": "PrototypeObjectType.getPropertyMap#129",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.PrototypeObjectType",
        "signature": "com.google.javascript.rhino.jstype.PrototypeObjectType.getPropertyMap()",
        "snippet": "  @Override\n  PropertyMap getPropertyMap() {\n    return properties;\n  }\n",
        "begin_line": 129,
        "end_line": 132,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0825
        },
        "num_failing_tests": 1
    },
    {
        "name": "PrototypeObjectType.defineProperty#134",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.PrototypeObjectType",
        "signature": "com.google.javascript.rhino.jstype.PrototypeObjectType.defineProperty(java.lang.String, com.google.javascript.rhino.jstype.JSType, boolean, com.google.javascript.rhino.Node)",
        "snippet": "  @Override\n  boolean defineProperty(String name, JSType type, boolean inferred,\n      Node propertyNode) {\n    if (hasOwnDeclaredProperty(name)) {\n      return false;\n    }\n    Property newProp = new Property(\n        name, type, inferred, propertyNode);\n    properties.putProperty(name, newProp);\n    return true;\n  }\n",
        "begin_line": 134,
        "end_line": 144,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0825
        },
        "num_failing_tests": 1
    },
    {
        "name": "PrototypeObjectType.getConstructor#279",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.PrototypeObjectType",
        "signature": "com.google.javascript.rhino.jstype.PrototypeObjectType.getConstructor()",
        "snippet": "  @Override\n  public FunctionType getConstructor() {\n    return null;\n  }\n",
        "begin_line": 279,
        "end_line": 282,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0825
        },
        "num_failing_tests": 1
    },
    {
        "name": "PrototypeObjectType.getReferenceName#300",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.PrototypeObjectType",
        "signature": "com.google.javascript.rhino.jstype.PrototypeObjectType.getReferenceName()",
        "snippet": "  @Override\n  public String getReferenceName() {\n    if (className != null) {\n      return className;\n    } else if (ownerFunction != null) {\n      return ownerFunction.getReferenceName() + \".prototype\";\n    } else {\n      return null;\n    }\n  }\n",
        "begin_line": 300,
        "end_line": 309,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0825
        },
        "num_failing_tests": 1
    },
    {
        "name": "PropertyMap.getOwnProperty#147",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/PropertyMap.java",
        "class_name": "com.google.javascript.rhino.jstype.PropertyMap",
        "signature": "com.google.javascript.rhino.jstype.PropertyMap.getOwnProperty(java.lang.String)",
        "snippet": "  Property getOwnProperty(String propertyName) {\n    return properties.get(propertyName);\n  }\n",
        "begin_line": 147,
        "end_line": 149,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0825
        },
        "num_failing_tests": 1
    },
    {
        "name": "PropertyMap.putProperty#192",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/PropertyMap.java",
        "class_name": "com.google.javascript.rhino.jstype.PropertyMap",
        "signature": "com.google.javascript.rhino.jstype.PropertyMap.putProperty(java.lang.String, com.google.javascript.rhino.jstype.Property)",
        "snippet": "  void putProperty(String name, Property newProp) {\n    Property oldProp = properties.get(name);\n    if (oldProp != null) {\n      // This is to keep previously inferred JsDoc info, e.g., in a\n      // replaceScript scenario.\n      newProp.setJSDocInfo(oldProp.getJSDocInfo());\n    }\n    properties.put(name, newProp);\n  }\n",
        "begin_line": 192,
        "end_line": 200,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0825
        },
        "num_failing_tests": 1
    },
    {
        "name": "ObjectType.getOwnSlot#119",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/ObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.ObjectType",
        "signature": "com.google.javascript.rhino.jstype.ObjectType.getOwnSlot(java.lang.String)",
        "snippet": "  @Override\n  public Property getOwnSlot(String name) {\n    return getPropertyMap().getOwnProperty(name);\n  }\n",
        "begin_line": 119,
        "end_line": 122,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0825
        },
        "num_failing_tests": 1
    },
    {
        "name": "ObjectType.hasOwnProperty#444",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/ObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.ObjectType",
        "signature": "com.google.javascript.rhino.jstype.ObjectType.hasOwnProperty(java.lang.String)",
        "snippet": "  public boolean hasOwnProperty(String propertyName) {\n    return getOwnSlot(propertyName) != null;\n  }\n",
        "begin_line": 444,
        "end_line": 446,
        "comment": "\n   * Checks whether the property whose name is given is present directly on\n   * the object.  Returns false even if it is declared on a supertype.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0825
        },
        "num_failing_tests": 1
    },
    {
        "name": "ObjectType.hasOwnDeclaredProperty#476",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/ObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.ObjectType",
        "signature": "com.google.javascript.rhino.jstype.ObjectType.hasOwnDeclaredProperty(java.lang.String)",
        "snippet": "  final boolean hasOwnDeclaredProperty(String name) {\n    return hasOwnProperty(name) && isPropertyTypeDeclared(name);\n  }\n",
        "begin_line": 476,
        "end_line": 478,
        "comment": "\n   * Whether the given property is declared on this object.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0825
        },
        "num_failing_tests": 1
    },
    {
        "name": "InstanceObjectType.defineProperty#85",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/InstanceObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.InstanceObjectType",
        "signature": "com.google.javascript.rhino.jstype.InstanceObjectType.defineProperty(java.lang.String, com.google.javascript.rhino.jstype.JSType, boolean, com.google.javascript.rhino.Node)",
        "snippet": "  @Override\n  boolean defineProperty(String name, JSType type, boolean inferred,\n      Node propertyNode) {\n    ObjectType proto = getImplicitPrototype();\n    if (proto != null && proto.hasOwnDeclaredProperty(name)) {\n      return false;\n    }\n    return super.defineProperty(name, type, inferred, propertyNode);\n  }\n",
        "begin_line": 85,
        "end_line": 93,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0825
        },
        "num_failing_tests": 1
    },
    {
        "name": "CodeGenerator.unrollBinaryOperator#765",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodeGenerator.java",
        "class_name": "com.google.javascript.jscomp.CodeGenerator",
        "signature": "com.google.javascript.jscomp.CodeGenerator.unrollBinaryOperator(com.google.javascript.rhino.Node, int, java.lang.String, com.google.javascript.jscomp.CodeGenerator.Context, com.google.javascript.jscomp.CodeGenerator.Context, int, int)",
        "snippet": "  private void unrollBinaryOperator(\n      Node n, int op, String opStr, Context context,\n      Context rhsContext, int leftPrecedence, int rightPrecedence) {\n    Node firstNonOperator = n.getFirstChild();\n    while (firstNonOperator.getType() == op) {\n      firstNonOperator = firstNonOperator.getFirstChild();\n    }\n\n    addExpr(firstNonOperator, leftPrecedence, context);\n\n    Node current = firstNonOperator;\n    do {\n      current = current.getParent();\n      cc.addOp(opStr, true);\n      addExpr(current.getFirstChild().getNext(), rightPrecedence, rhsContext);\n    } while (current != n);\n  }\n",
        "begin_line": 765,
        "end_line": 781,
        "comment": "\n   * We could use addList recursively here, but sometimes we produce\n   * very deeply nested operators and run out of stack space, so we\n   * just unroll the recursion when possible.\n   *\n   * We assume nodes are left-recursive.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0819
        },
        "num_failing_tests": 1
    },
    {
        "name": "NodeUtil.isAssignmentOp#1485",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "signature": "com.google.javascript.jscomp.NodeUtil.isAssignmentOp(com.google.javascript.rhino.Node)",
        "snippet": "  static boolean isAssignmentOp(Node n) {\n    switch (n.getType()){\n      case Token.ASSIGN:\n      case Token.ASSIGN_BITOR:\n      case Token.ASSIGN_BITXOR:\n      case Token.ASSIGN_BITAND:\n      case Token.ASSIGN_LSH:\n      case Token.ASSIGN_RSH:\n      case Token.ASSIGN_URSH:\n      case Token.ASSIGN_ADD:\n      case Token.ASSIGN_SUB:\n      case Token.ASSIGN_MUL:\n      case Token.ASSIGN_DIV:\n      case Token.ASSIGN_MOD:\n        return true;\n    }\n    return false;\n  }\n",
        "begin_line": 1485,
        "end_line": 1502,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0808
        },
        "num_failing_tests": 1
    },
    {
        "name": "NodeUtil.isLiteralValue#587",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "signature": "com.google.javascript.jscomp.NodeUtil.isLiteralValue(com.google.javascript.rhino.Node, boolean)",
        "snippet": "  static boolean isLiteralValue(Node n, boolean includeFunctions) {\n    switch (n.getType()) {\n      case Token.CAST:\n        return isLiteralValue(n.getFirstChild(), includeFunctions);\n\n      case Token.ARRAYLIT:\n        for (Node child = n.getFirstChild(); child != null;\n             child = child.getNext()) {\n          if ((!child.isEmpty()) && !isLiteralValue(child, includeFunctions)) {\n            return false;\n          }\n        }\n        return true;\n\n      case Token.REGEXP:\n        // Return true only if all children are const.\n        for (Node child = n.getFirstChild(); child != null;\n             child = child.getNext()) {\n          if (!isLiteralValue(child, includeFunctions)) {\n            return false;\n          }\n        }\n        return true;\n\n      case Token.OBJECTLIT:\n        // Return true only if all values are const.\n        for (Node child = n.getFirstChild(); child != null;\n             child = child.getNext()) {\n          if (!isLiteralValue(child.getFirstChild(), includeFunctions)) {\n            return false;\n          }\n        }\n        return true;\n\n      case Token.FUNCTION:\n        return includeFunctions && !NodeUtil.isFunctionDeclaration(n);\n\n      default:\n        return isImmutableValue(n);\n    }\n  }\n",
        "begin_line": 587,
        "end_line": 627,
        "comment": "\n   * Returns true if this is a literal value. We define a literal value\n   * as any node that evaluates to the same thing regardless of when or\n   * where it is evaluated. So /xyz/ and [3, 5] are literals, but\n   * the name a is not.\n   *\n   * Function literals do not meet this definition, because they\n   * lexically capture variables. For example, if you have\n   * <code>\n   * function() { return a; }\n   * </code>\n   * If it is evaluated in a different scope, then it\n   * captures a different variable. Even if the function did not read\n   * any captured variables directly, it would still fail this definition,\n   * because it affects the lifecycle of variables in the enclosing scope.\n   *\n   * However, a function literal with respect to a particular scope is\n   * a literal.\n   *\n   * @param includeFunctions If true, all function expressions will be\n   *     treated as literals.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0801
        },
        "num_failing_tests": 1
    },
    {
        "name": "AstValidator.validateBlock#277",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AstValidator.java",
        "class_name": "com.google.javascript.jscomp.AstValidator",
        "signature": "com.google.javascript.jscomp.AstValidator.validateBlock(com.google.javascript.rhino.Node)",
        "snippet": "  private void validateBlock(Node n) {\n    validateNodeType(Token.BLOCK, n);\n    for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n      validateStatement(c);\n    }\n  }\n",
        "begin_line": 277,
        "end_line": 282,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0801
        },
        "num_failing_tests": 1
    },
    {
        "name": "CodeConsumer.addNumber#240",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodeConsumer.java",
        "class_name": "com.google.javascript.jscomp.CodeConsumer",
        "signature": "com.google.javascript.jscomp.CodeConsumer.addNumber(double)",
        "snippet": "  void addNumber(double x) {\n    // This is not pretty printing. This is to prevent misparsing of x- -4 as\n    // x--4 (which is a syntax error).\n    char prev = getLastChar();\n    boolean negativeZero = isNegativeZero(x);\n    if ((x < 0 || negativeZero) && prev == '-') {\n      add(\" \");\n    }\n\n    if (negativeZero) {\n      addConstant(\"-0\");\n    } else if ((long) x == x) {\n      long value = (long) x;\n      long mantissa = value;\n      int exp = 0;\n      if (Math.abs(x) >= 100) {\n        while (mantissa / 10 * Math.pow(10, exp + 1) == value) {\n          mantissa /= 10;\n          exp++;\n        }\n      }\n      if (exp > 2) {\n        addConstant(Long.toString(mantissa) + \"E\" + Integer.toString(exp));\n      } else {\n        long valueAbs = Math.abs(value);\n        if (Long.toHexString(valueAbs).length() + 2 <\n            Long.toString(valueAbs).length()) {\n          addConstant((value < 0 ? \"-\" : \"\") + \"0x\" +\n              Long.toHexString(valueAbs));\n        } else {\n          addConstant(Long.toString(value));\n        }\n      }\n    } else {\n      addConstant(String.valueOf(x).replace(\".0E\", \"E\"));\n    }\n  }\n",
        "begin_line": 240,
        "end_line": 276,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0796
        },
        "num_failing_tests": 1
    },
    {
        "name": "CodeConsumer.isNegativeZero#282",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodeConsumer.java",
        "class_name": "com.google.javascript.jscomp.CodeConsumer",
        "signature": "com.google.javascript.jscomp.CodeConsumer.isNegativeZero(double)",
        "snippet": "  static boolean isNegativeZero(double x) {\n    return x == 0.0 && Math.copySign(1, x) == -1.0;\n  }\n",
        "begin_line": 282,
        "end_line": 284,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0796
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSType.checkEquivalenceHelper#563",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "signature": "com.google.javascript.rhino.jstype.JSType.checkEquivalenceHelper(com.google.javascript.rhino.jstype.JSType, com.google.javascript.rhino.jstype.EquivalenceMethod)",
        "snippet": "  boolean checkEquivalenceHelper(JSType that, EquivalenceMethod eqMethod) {\n    if (this == that) {\n      return true;\n    }\n\n    boolean thisUnknown = isUnknownType();\n    boolean thatUnknown = that.isUnknownType();\n    if (thisUnknown || thatUnknown) {\n      if (eqMethod == EquivalenceMethod.INVARIANT) {\n        // If we're checking for invariance, the unknown type is invariant\n        // with everyone.\n        return true;\n      } else if (eqMethod == EquivalenceMethod.DATA_FLOW) {\n        // If we're checking data flow, then two types are the same if they're\n        // both unknown.\n        return thisUnknown && thatUnknown;\n      } else if (thisUnknown && thatUnknown &&\n          (isNominalType() ^ that.isNominalType())) {\n        // If they're both unknown, but one is a nominal type and the other\n        // is not, then we should fail out immediately. This ensures that\n        // we won't unbox the unknowns further down.\n        return false;\n      }\n    }\n\n    if (isUnionType() && that.isUnionType()) {\n      return toMaybeUnionType().checkUnionEquivalenceHelper(\n          that.toMaybeUnionType(), eqMethod);\n    }\n\n    if (isFunctionType() && that.isFunctionType()) {\n      return toMaybeFunctionType().checkFunctionEquivalenceHelper(\n          that.toMaybeFunctionType(), eqMethod);\n    }\n\n    if (isRecordType() && that.isRecordType()) {\n      return toMaybeRecordType().checkRecordEquivalenceHelper(\n          that.toMaybeRecordType(), eqMethod);\n    }\n\n    if (!getTemplateTypeMap().checkEquivalenceHelper(\n        that.getTemplateTypeMap(), eqMethod)) {\n      return false;\n    }\n\n    if (isNominalType() && that.isNominalType()) {\n      return toObjectType().getReferenceName().equals(\n          that.toObjectType().getReferenceName());\n    }\n\n    // Unbox other proxies.\n    if (this instanceof ProxyObjectType) {\n      return ((ProxyObjectType) this)\n          .getReferencedTypeInternal().checkEquivalenceHelper(\n              that, eqMethod);\n    }\n\n    if (that instanceof ProxyObjectType) {\n      return checkEquivalenceHelper(\n          ((ProxyObjectType) that).getReferencedTypeInternal(),\n          eqMethod);\n    }\n\n    // Relies on the fact that for the base {@link JSType}, only one\n    // instance of each sub-type will ever be created in a given registry, so\n    // there is no need to verify members. If the object pointers are not\n    // identical, then the type member must be different.\n    return this == that;\n  }\n",
        "begin_line": 563,
        "end_line": 631,
        "comment": "\n   * An equivalence visitor.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0791
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.replaceChild#704",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.replaceChild(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  public void replaceChild(Node child, Node newChild) {\n    Preconditions.checkArgument(newChild.next == null,\n        \"The new child node has siblings.\");\n    Preconditions.checkArgument(newChild.parent == null,\n        \"The new child node already has a parent.\");\n\n    // Copy over important information.\n    newChild.copyInformationFrom(child);\n\n    newChild.next = child.next;\n    newChild.parent = this;\n    if (child == first) {\n        first = newChild;\n    } else {\n        Node prev = getChildBefore(child);\n        prev.next = newChild;\n    }\n    if (child == last)\n        last = newChild;\n    child.next = null;\n    child.parent = null;\n  }\n",
        "begin_line": 704,
        "end_line": 725,
        "comment": "\n   * Detaches child from Node and replaces it with newChild.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0788
        },
        "num_failing_tests": 1
    },
    {
        "name": "NodeUtil.isSimpleOperatorType#710",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "signature": "com.google.javascript.jscomp.NodeUtil.isSimpleOperatorType(int)",
        "snippet": "  static boolean isSimpleOperatorType(int type) {\n    switch (type) {\n      case Token.ADD:\n      case Token.BITAND:\n      case Token.BITNOT:\n      case Token.BITOR:\n      case Token.BITXOR:\n      case Token.COMMA:\n      case Token.DIV:\n      case Token.EQ:\n      case Token.GE:\n      case Token.GETELEM:\n      case Token.GETPROP:\n      case Token.GT:\n      case Token.INSTANCEOF:\n      case Token.LE:\n      case Token.LSH:\n      case Token.LT:\n      case Token.MOD:\n      case Token.MUL:\n      case Token.NE:\n      case Token.NOT:\n      case Token.RSH:\n      case Token.SHEQ:\n      case Token.SHNE:\n      case Token.SUB:\n      case Token.TYPEOF:\n      case Token.VOID:\n      case Token.POS:\n      case Token.NEG:\n      case Token.URSH:\n        return true;\n\n      default:\n        return false;\n    }\n  }\n",
        "begin_line": 710,
        "end_line": 746,
        "comment": "\n   * A \"simple\" operator is one whose children are expressions,\n   * has no direct side-effects (unlike '+='), and has no\n   * conditional aspects (unlike '||').\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0783
        },
        "num_failing_tests": 1
    },
    {
        "name": "DiagnosticGroupWarningsGuard.enables#48",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroupWarningsGuard.java",
        "class_name": "com.google.javascript.jscomp.DiagnosticGroupWarningsGuard",
        "signature": "com.google.javascript.jscomp.DiagnosticGroupWarningsGuard.enables(com.google.javascript.jscomp.DiagnosticGroup)",
        "snippet": "  @Override\n  public boolean enables(DiagnosticGroup otherGroup) {\n    if (level.isOn()) {\n      for (DiagnosticType type : otherGroup.getTypes()) {\n        if (group.matches(type)) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n",
        "begin_line": 48,
        "end_line": 59,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0783
        },
        "num_failing_tests": 1
    },
    {
        "name": "ComposeWarningsGuard.enables#148",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ComposeWarningsGuard.java",
        "class_name": "com.google.javascript.jscomp.ComposeWarningsGuard",
        "signature": "com.google.javascript.jscomp.ComposeWarningsGuard.enables(com.google.javascript.jscomp.DiagnosticGroup)",
        "snippet": "  @Override\n  public boolean enables(DiagnosticGroup group) {\n    for (WarningsGuard guard : guards) {\n      if (guard.enables(group)) {\n        return true;\n      } else if (guard.disables(group)) {\n        return false;\n      }\n    }\n\n    return false;\n  }\n",
        "begin_line": 148,
        "end_line": 159,
        "comment": "\n   * Determines whether this guard will \"elevate\" the status of any disabled\n   * diagnostic type in the group to a warning or an error.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0783
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.removeChild#690",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.removeChild(com.google.javascript.rhino.Node)",
        "snippet": "  public void removeChild(Node child) {\n    Node prev = getChildBefore(child);\n    if (prev == null)\n        first = first.next;\n    else\n        prev.next = child.next;\n    if (child == last) last = prev;\n    child.next = null;\n    child.parent = null;\n  }\n",
        "begin_line": 690,
        "end_line": 699,
        "comment": "\n   * Detach a child from its parent and siblings.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0774
        },
        "num_failing_tests": 1
    },
    {
        "name": "AstValidator.validateNumber#648",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AstValidator.java",
        "class_name": "com.google.javascript.jscomp.AstValidator",
        "signature": "com.google.javascript.jscomp.AstValidator.validateNumber(com.google.javascript.rhino.Node)",
        "snippet": "  private void validateNumber(Node n) {\n    validateNodeType(Token.NUMBER, n);\n    validateChildCount(n, 0);\n    try {\n      // Validate that getDouble doesn't throw\n      n.getDouble();\n    } catch (UnsupportedOperationException e) {\n      violation(\"Invalid NUMBER node.\", n);\n    }\n  }\n",
        "begin_line": 648,
        "end_line": 657,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0769
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.detachFromParent#1611",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.detachFromParent()",
        "snippet": "  public Node detachFromParent() {\n    Preconditions.checkState(parent != null);\n    parent.removeChild(this);\n    return this;\n  }\n",
        "begin_line": 1611,
        "end_line": 1615,
        "comment": "\n   * Removes this node from its parent. Equivalent to:\n   * node.getParent().removeChild();\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0762
        },
        "num_failing_tests": 1
    },
    {
        "name": "PeepholeSubstituteAlternateSyntax.tryMinimizeCondition#1129",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java",
        "class_name": "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax",
        "signature": "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax.tryMinimizeCondition(com.google.javascript.rhino.Node)",
        "snippet": "  private Node tryMinimizeCondition(Node n) {\n    Node parent = n.getParent();\n\n    switch (n.getType()) {\n      case Token.NOT:\n        Node first = n.getFirstChild();\n        switch (first.getType()) {\n          case Token.NOT: {\n              Node newRoot = first.removeFirstChild();\n              parent.replaceChild(n, newRoot);\n              reportCodeChange();\n              // No need to traverse, tryMinimizeCondition is called on the\n              // NOT children are handled below.\n              return newRoot;\n            }\n          case Token.AND:\n          case Token.OR: {\n              // !(!x && !y) --> x || y\n              // !(!x || !y) --> x && y\n              // !(!x && y) --> x || !y\n              // !(!x || y) --> x && !y\n              // !(x && !y) --> !x || y\n              // !(x || !y) --> !x && y\n              // !(x && y) --> !x || !y\n              // !(x || y) --> !x && !y\n              Node leftParent = first.getFirstChild();\n              Node rightParent = first.getLastChild();\n              Node left, right;\n\n              // Check special case when such transformation cannot reduce\n              // due to the added ()\n              // It only occurs when both of expressions are not NOT expressions\n              if (!leftParent.isNot()\n                  && !rightParent.isNot()) {\n                // If an expression has higher precedence than && or ||,\n                // but lower precedence than NOT, an additional () is needed\n                // Thus we do not preceed\n                int op_precedence = NodeUtil.precedence(first.getType());\n                if ((isLowerPrecedence(leftParent, NOT_PRECEDENCE)\n                    && isHigherPrecedence(leftParent, op_precedence))\n                    || (isLowerPrecedence(rightParent, NOT_PRECEDENCE)\n                    && isHigherPrecedence(rightParent, op_precedence))) {\n                  return n;\n                }\n              }\n\n              if (leftParent.isNot()) {\n                left = leftParent.removeFirstChild();\n              } else {\n                leftParent.detachFromParent();\n                left = IR.not(leftParent).srcref(leftParent);\n              }\n              if (rightParent.isNot()) {\n                right = rightParent.removeFirstChild();\n              } else {\n                rightParent.detachFromParent();\n                right = IR.not(rightParent).srcref(rightParent);\n              }\n\n              int newOp = (first.isAnd()) ? Token.OR : Token.AND;\n              Node newRoot = new Node(newOp, left, right);\n              parent.replaceChild(n, newRoot);\n              reportCodeChange();\n              // No need to traverse, tryMinimizeCondition is called on the\n              // AND and OR children below.\n              return newRoot;\n            }\n\n           default:\n             TernaryValue nVal = NodeUtil.getPureBooleanValue(first);\n             if (nVal != TernaryValue.UNKNOWN) {\n               boolean result = nVal.not().toBoolean(true);\n               int equivalentResult = result ? 1 : 0;\n               return maybeReplaceChildWithNumber(n, parent, equivalentResult);\n             }\n        }\n        // No need to traverse, tryMinimizeCondition is called on the NOT\n        // children in the general case in the main post-order traversal.\n        return n;\n\n      case Token.OR:\n      case Token.AND: {\n        Node left = n.getFirstChild();\n        Node right = n.getLastChild();\n\n        // Because the expression is in a boolean context minimize\n        // the children, this can't be done in the general case.\n        left = tryMinimizeCondition(left);\n        right = tryMinimizeCondition(right);\n\n        // Remove useless conditionals\n        // Handle four cases:\n        //   x || false --> x\n        //   x || true  --> true\n        //   x && true --> x\n        //   x && false  --> false\n        TernaryValue rightVal = NodeUtil.getPureBooleanValue(right);\n        if (NodeUtil.getPureBooleanValue(right) != TernaryValue.UNKNOWN) {\n          int type = n.getType();\n          Node replacement = null;\n          boolean rval = rightVal.toBoolean(true);\n\n          // (x || FALSE) => x\n          // (x && TRUE) => x\n          if (type == Token.OR && !rval ||\n              type == Token.AND && rval) {\n            replacement = left;\n          } else if (!mayHaveSideEffects(left)) {\n            replacement = right;\n          }\n\n          if (replacement != null) {\n            n.detachChildren();\n            parent.replaceChild(n, replacement);\n            reportCodeChange();\n            return replacement;\n          }\n        }\n        return n;\n      }\n\n      case Token.HOOK: {\n        Node condition = n.getFirstChild();\n        Node trueNode = n.getFirstChild().getNext();\n        Node falseNode = n.getLastChild();\n\n        // Because the expression is in a boolean context minimize\n        // the result children, this can't be done in the general case.\n        // The condition is handled in the general case in #optimizeSubtree\n        trueNode = tryMinimizeCondition(trueNode);\n        falseNode = tryMinimizeCondition(falseNode);\n\n        // Handle four cases:\n        //   x ? true : false --> x\n        //   x ? false : true --> !x\n        //   x ? true : y     --> x || y\n        //   x ? y : false    --> x && y\n        Node replacement = null;\n        TernaryValue trueNodeVal = NodeUtil.getPureBooleanValue(trueNode);\n        TernaryValue falseNodeVal = NodeUtil.getPureBooleanValue(falseNode);\n        if (trueNodeVal == TernaryValue.TRUE\n            && falseNodeVal == TernaryValue.FALSE) {\n          // Remove useless conditionals, keep the condition\n          condition.detachFromParent();\n          replacement = condition;\n        } else if (trueNodeVal == TernaryValue.FALSE\n            && falseNodeVal == TernaryValue.TRUE) {\n          // Remove useless conditionals, keep the condition\n          condition.detachFromParent();\n          replacement = IR.not(condition);\n        } else if (trueNodeVal == TernaryValue.TRUE) {\n          // Remove useless true case.\n          n.detachChildren();\n          replacement = IR.or(condition, falseNode);\n        } else if (falseNodeVal == TernaryValue.FALSE) {\n          // Remove useless false case\n          n.detachChildren();\n          replacement = IR.and(condition, trueNode);\n        }\n\n        if (replacement != null) {\n          parent.replaceChild(n, replacement);\n          n = replacement;\n          reportCodeChange();\n        }\n\n        return n;\n      }\n\n      default:\n        // while(true) --> while(1)\n        TernaryValue nVal = NodeUtil.getPureBooleanValue(n);\n        if (nVal != TernaryValue.UNKNOWN) {\n          boolean result = nVal.toBoolean(true);\n          int equivalentResult = result ? 1 : 0;\n          return maybeReplaceChildWithNumber(n, parent, equivalentResult);\n        }\n        // We can't do anything else currently.\n        return n;\n    }\n  }\n",
        "begin_line": 1129,
        "end_line": 1309,
        "comment": "\n   * Try to minimize conditions expressions, as there are additional\n   * assumptions that can be made when it is known that the final result\n   * is a boolean.\n   *\n   * The following transformations are done recursively:\n   *   !(x||y) --> !x&&!y\n   *   !(x&&y) --> !x||!y\n   *   !!x     --> x\n   * Thus:\n   *   !(x&&!y) --> !x||!!y --> !x||y\n   *\n   *   Returns the replacement for n, or the original if no change was made\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0762
        },
        "num_failing_tests": 1
    },
    {
        "name": "CodeConsumer.addConstant#278",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodeConsumer.java",
        "class_name": "com.google.javascript.jscomp.CodeConsumer",
        "signature": "com.google.javascript.jscomp.CodeConsumer.addConstant(java.lang.String)",
        "snippet": "  void addConstant(String newcode) {\n    add(newcode);\n  }\n",
        "begin_line": 278,
        "end_line": 280,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.076
        },
        "num_failing_tests": 1
    },
    {
        "name": "NodeUtil.getPureBooleanValue#123",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "signature": "com.google.javascript.jscomp.NodeUtil.getPureBooleanValue(com.google.javascript.rhino.Node)",
        "snippet": "  static TernaryValue getPureBooleanValue(Node n) {\n    switch (n.getType()) {\n      case Token.STRING:\n        return TernaryValue.forBoolean(n.getString().length() > 0);\n\n      case Token.NUMBER:\n        return TernaryValue.forBoolean(n.getDouble() != 0);\n\n      case Token.NOT:\n        return getPureBooleanValue(n.getLastChild()).not();\n\n      case Token.NULL:\n      case Token.FALSE:\n        return TernaryValue.FALSE;\n\n      case Token.VOID:\n        if (!mayHaveSideEffects(n.getFirstChild())) {\n          return TernaryValue.FALSE;\n        }\n        break;\n\n      case Token.NAME:\n        String name = n.getString();\n        if (\"undefined\".equals(name)\n            || \"NaN\".equals(name)) {\n          // We assume here that programs don't change the value of the keyword\n          // undefined to something other than the value undefined.\n          return TernaryValue.FALSE;\n        } else if (\"Infinity\".equals(name)) {\n          return TernaryValue.TRUE;\n        }\n        break;\n\n      case Token.TRUE:\n      case Token.REGEXP:\n        return TernaryValue.TRUE;\n\n      case Token.ARRAYLIT:\n      case Token.OBJECTLIT:\n        if (!mayHaveSideEffects(n)) {\n          return TernaryValue.TRUE;\n        }\n        break;\n    }\n\n    return TernaryValue.UNKNOWN;\n  }\n",
        "begin_line": 123,
        "end_line": 169,
        "comment": "\n   * Gets the boolean value of a node that represents a literal. This method\n   * effectively emulates the <code>Boolean()</code> JavaScript cast function\n   * except it return UNKNOWN for known values with side-effects, use\n   * getImpureBooleanValue if you don't care about side-effects.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0758
        },
        "num_failing_tests": 1
    },
    {
        "name": "IRFactory.processGeneric#517",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.TransformDispatcher.processGeneric(com.google.javascript.rhino.head.Node)",
        "snippet": "    private Node processGeneric(\n        com.google.javascript.rhino.head.Node n) {\n      Node node = newNode(transformTokenType(n.getType()));\n      for (com.google.javascript.rhino.head.Node child : n) {\n        node.addChildToBack(transform((AstNode)child));\n      }\n      return node;\n    }\n",
        "begin_line": 517,
        "end_line": 524,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0754
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.getDouble#156",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.NumberNode.getDouble()",
        "snippet": "    @Override\n    public double getDouble() {\n      return this.number;\n    }\n",
        "begin_line": 156,
        "end_line": 159,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.075
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.getChildBefore#543",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.getChildBefore(com.google.javascript.rhino.Node)",
        "snippet": "  public Node getChildBefore(Node child) {\n    if (child == first) {\n      return null;\n    }\n    Node n = first;\n    while (n.next != child) {\n      n = n.next;\n      if (n == null) {\n        throw new RuntimeException(\"node is not a child\");\n      }\n    }\n    return n;\n  }\n",
        "begin_line": 543,
        "end_line": 555,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0739
        },
        "num_failing_tests": 1
    },
    {
        "name": "IRFactory.IRFactory#137",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.IRFactory(java.lang.String, com.google.javascript.rhino.jstype.StaticSourceFile, com.google.javascript.jscomp.parsing.Config, com.google.javascript.rhino.head.ErrorReporter)",
        "snippet": "  private IRFactory(String sourceString,\n                    StaticSourceFile sourceFile,\n                    Config config,\n                    ErrorReporter errorReporter) {\n    this.sourceString = sourceString;\n    this.sourceFile = sourceFile;\n\n    // Sometimes this will be null in tests.\n    this.sourceName = sourceFile == null ? null : sourceFile.getName();\n\n    this.config = config;\n    this.errorReporter = errorReporter;\n    this.transformDispatcher = new TransformDispatcher();\n    // The template node properties are applied to all nodes in this transform.\n    this.templateNode = createTemplateNode();\n\n    switch (config.languageMode) {\n      case ECMASCRIPT3:\n        // Reserved words are handled by the Rhino parser.\n        reservedKeywords = null;\n        break;\n      case ECMASCRIPT5:\n        reservedKeywords = ES5_RESERVED_KEYWORDS;\n        break;\n      case ECMASCRIPT5_STRICT:\n        reservedKeywords = ES5_STRICT_RESERVED_KEYWORDS;\n        break;\n      default:\n        throw new IllegalStateException(\"unknown language mode\");\n    }\n  }\n",
        "begin_line": 137,
        "end_line": 167,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0735
        },
        "num_failing_tests": 1
    },
    {
        "name": "Compiler.getParserConfig#2036",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.getParserConfig()",
        "snippet": "  @Override\n  Config getParserConfig() {\n    if (parserConfig == null) {\n      Config.LanguageMode mode;\n      switch (options.getLanguageIn()) {\n        case ECMASCRIPT3:\n          mode = Config.LanguageMode.ECMASCRIPT3;\n          break;\n        case ECMASCRIPT5:\n          mode = Config.LanguageMode.ECMASCRIPT5;\n          break;\n        case ECMASCRIPT5_STRICT:\n          mode = Config.LanguageMode.ECMASCRIPT5_STRICT;\n          break;\n        default:\n          throw new IllegalStateException(\"unexpected language mode\");\n      }\n\n      parserConfig = ParserRunner.createConfig(\n        isIdeMode(),\n        mode,\n        acceptConstKeyword(),\n        options.extraAnnotationNames);\n    }\n    return parserConfig;\n  }\n",
        "begin_line": 2036,
        "end_line": 2061,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0735
        },
        "num_failing_tests": 1
    },
    {
        "name": "IRFactory.processNumberLiteral#934",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.TransformDispatcher.processNumberLiteral(com.google.javascript.rhino.head.ast.NumberLiteral)",
        "snippet": "    @Override\n    Node processNumberLiteral(NumberLiteral literalNode) {\n      return newNumberNode(literalNode.getNumber());\n    }\n",
        "begin_line": 934,
        "end_line": 937,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0731
        },
        "num_failing_tests": 1
    },
    {
        "name": "IRFactory.newNumberNode#1490",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.newNumberNode(java.lang.Double)",
        "snippet": "  private Node newNumberNode(Double value) {\n    return IR.number(value).clonePropsFrom(templateNode);\n  }\n",
        "begin_line": 1490,
        "end_line": 1492,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0731
        },
        "num_failing_tests": 1
    },
    {
        "name": "IR.number#454",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/IR.java",
        "class_name": "com.google.javascript.rhino.IR",
        "signature": "com.google.javascript.rhino.IR.number(double)",
        "snippet": "  public static Node number(double d) {\n    return Node.newNumber(d);\n  }\n",
        "begin_line": 454,
        "end_line": 456,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0716
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.NumberNode#146",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.NumberNode.NumberNode(double)",
        "snippet": "    NumberNode(double number) {\n      super(Token.NUMBER);\n      this.number = number;\n    }\n",
        "begin_line": 146,
        "end_line": 149,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0714
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.newNumber#495",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.newNumber(double)",
        "snippet": "  public static Node newNumber(double number) {\n    return new NumberNode(number);\n  }\n",
        "begin_line": 495,
        "end_line": 497,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0714
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.copyInformationFrom#1718",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.copyInformationFrom(com.google.javascript.rhino.Node)",
        "snippet": "  public Node copyInformationFrom(Node other) {\n    if (getProp(ORIGINALNAME_PROP) == null) {\n      putProp(ORIGINALNAME_PROP, other.getProp(ORIGINALNAME_PROP));\n    }\n\n    if (getProp(STATIC_SOURCE_FILE) == null) {\n      putProp(STATIC_SOURCE_FILE, other.getProp(STATIC_SOURCE_FILE));\n      sourcePosition = other.sourcePosition;\n    }\n\n    return this;\n  }\n",
        "begin_line": 1718,
        "end_line": 1729,
        "comment": " TODO(nicksantos): The semantics of this method are ill-defined. Delete it.",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0698
        },
        "num_failing_tests": 1
    },
    {
        "name": "CompilerOptions.setLanguageIn#1484",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "signature": "com.google.javascript.jscomp.CompilerOptions.setLanguageIn(com.google.javascript.jscomp.CompilerOptions.LanguageMode)",
        "snippet": "  public void setLanguageIn(LanguageMode languageIn) {\n    this.languageIn = languageIn;\n    this.languageOut = languageIn;\n  }\n",
        "begin_line": 1484,
        "end_line": 1487,
        "comment": "\n   * Sets how goog.tweak calls are processed.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0679
        },
        "num_failing_tests": 1
    },
    {
        "name": "PeepholeSubstituteAlternateSyntax.tryReplaceUndefined#400",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java",
        "class_name": "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax",
        "signature": "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax.tryReplaceUndefined(com.google.javascript.rhino.Node)",
        "snippet": "  private Node tryReplaceUndefined(Node n) {\n    // TODO(johnlenz): consider doing this as a normalization.\n    if (isASTNormalized()\n        && NodeUtil.isUndefined(n)\n        && !NodeUtil.isLValue(n)) {\n      Node replacement = NodeUtil.newUndefinedNode(n);\n      n.getParent().replaceChild(n, replacement);\n      reportCodeChange();\n      return replacement;\n    }\n    return n;\n  }\n",
        "begin_line": 400,
        "end_line": 411,
        "comment": "\n   * Use \"void 0\" in place of \"undefined\"\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0677
        },
        "num_failing_tests": 1
    },
    {
        "name": "AbstractPeepholeOptimization.isASTNormalized#82",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java",
        "class_name": "com.google.javascript.jscomp.AbstractPeepholeOptimization",
        "signature": "com.google.javascript.jscomp.AbstractPeepholeOptimization.isASTNormalized()",
        "snippet": "  protected boolean isASTNormalized() {\n    Preconditions.checkNotNull(compiler);\n\n    return compiler.getLifeCycleStage().isNormalized();\n  }\n",
        "begin_line": 82,
        "end_line": 86,
        "comment": "\n   *  Is the current AST normalized? (e.g. has the Normalize pass been run\n   *  and has the Denormalize pass not yet been run?)\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0676
        },
        "num_failing_tests": 1
    },
    {
        "name": "PeepholeSubstituteAlternateSyntax.tryReplaceIf#306",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java",
        "class_name": "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax",
        "signature": "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax.tryReplaceIf(com.google.javascript.rhino.Node)",
        "snippet": "  private Node tryReplaceIf(Node n) {\n\n    for (Node child = n.getFirstChild();\n         child != null; child = child.getNext()){\n      if (child.isIf()){\n        Node cond = child.getFirstChild();\n        Node thenBranch = cond.getNext();\n        Node elseBranch = thenBranch.getNext();\n        Node nextNode = child.getNext();\n\n        if (nextNode != null && elseBranch == null\n            && isReturnBlock(thenBranch)\n            && nextNode.isIf()) {\n          Node nextCond = nextNode.getFirstChild();\n          Node nextThen = nextCond.getNext();\n          Node nextElse = nextThen.getNext();\n          if (thenBranch.isEquivalentToTyped(nextThen)) {\n            // Transform\n            //   if (x) return 1; if (y) return 1;\n            // to\n            //   if (x||y) return 1;\n            child.detachFromParent();\n            child.detachChildren();\n            Node newCond = new Node(Token.OR, cond);\n            nextNode.replaceChild(nextCond, newCond);\n            newCond.addChildToBack(nextCond);\n            reportCodeChange();\n          } else if (nextElse != null\n              && thenBranch.isEquivalentToTyped(nextElse)) {\n            // Transform\n            //   if (x) return 1; if (y) foo() else return 1;\n            // to\n            //   if (!x&&y) foo() else return 1;\n            child.detachFromParent();\n            child.detachChildren();\n            Node newCond = new Node(Token.AND,\n                IR.not(cond).srcref(cond));\n            nextNode.replaceChild(nextCond, newCond);\n            newCond.addChildToBack(nextCond);\n            reportCodeChange();\n          }\n        } else if (nextNode != null && elseBranch == null &&\n            isReturnBlock(thenBranch) && isReturnExpression(nextNode)) {\n          Node thenExpr = null;\n          // if(x)return; return 1 -> return x?void 0:1\n          if (isReturnExpressBlock(thenBranch)) {\n            thenExpr = getBlockReturnExpression(thenBranch);\n            thenExpr.detachFromParent();\n          } else {\n            thenExpr = NodeUtil.newUndefinedNode(child);\n          }\n\n          Node elseExpr = nextNode.getFirstChild();\n\n          cond.detachFromParent();\n          elseExpr.detachFromParent();\n\n          Node returnNode = IR.returnNode(\n                                IR.hook(cond, thenExpr, elseExpr)\n                                    .srcref(child));\n          n.replaceChild(child, returnNode);\n          n.removeChild(nextNode);\n          reportCodeChange();\n        } else if (elseBranch != null && statementMustExitParent(thenBranch)) {\n          child.removeChild(elseBranch);\n          n.addChildAfter(elseBranch, child);\n          reportCodeChange();\n        }\n      }\n    }\n    return n;\n  }\n",
        "begin_line": 306,
        "end_line": 377,
        "comment": "\n   * Use \"return x?1:2;\" in place of \"if(x)return 1;return 2;\"\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0662
        },
        "num_failing_tests": 1
    },
    {
        "name": "CodeGenerator.getContextForNoInOperator#1243",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodeGenerator.java",
        "class_name": "com.google.javascript.jscomp.CodeGenerator",
        "signature": "com.google.javascript.jscomp.CodeGenerator.getContextForNoInOperator(com.google.javascript.jscomp.CodeGenerator.Context)",
        "snippet": "  private  Context getContextForNoInOperator(Context context) {\n    return (context == Context.IN_FOR_INIT_CLAUSE\n        ? Context.IN_FOR_INIT_CLAUSE : Context.OTHER);\n  }\n",
        "begin_line": 1243,
        "end_line": 1246,
        "comment": "\n   * If we're in a IN_FOR_INIT_CLAUSE, we can't permit in operators in the\n   * expression.  Pass on the IN_FOR_INIT_CLAUSE flag through subexpressions.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0661
        },
        "num_failing_tests": 1
    },
    {
        "name": "PeepholeOptimizationsPass.push#70",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/PeepholeOptimizationsPass.java",
        "class_name": "com.google.javascript.jscomp.PeepholeOptimizationsPass",
        "signature": "com.google.javascript.jscomp.PeepholeOptimizationsPass.StateStack.push()",
        "snippet": "    void push() {\n      currentDepth++;\n      if (states.size() <= currentDepth) {\n        states.add(new ScopeState());\n      } else {\n        states.get(currentDepth).reset();\n      }\n    }\n",
        "begin_line": 70,
        "end_line": 77,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0659
        },
        "num_failing_tests": 1
    },
    {
        "name": "PeepholeOptimizationsPass.pop#79",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/PeepholeOptimizationsPass.java",
        "class_name": "com.google.javascript.jscomp.PeepholeOptimizationsPass",
        "signature": "com.google.javascript.jscomp.PeepholeOptimizationsPass.StateStack.pop()",
        "snippet": "    void pop() {\n      currentDepth--;\n    }\n",
        "begin_line": 79,
        "end_line": 81,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0659
        },
        "num_failing_tests": 1
    },
    {
        "name": "PeepholeOptimizationsPass.shouldVisit#165",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/PeepholeOptimizationsPass.java",
        "class_name": "com.google.javascript.jscomp.PeepholeOptimizationsPass",
        "signature": "com.google.javascript.jscomp.PeepholeOptimizationsPass.shouldVisit(com.google.javascript.rhino.Node)",
        "snippet": "  private boolean shouldVisit(Node node) {\n    if (node.isFunction() || node.isScript()) {\n      ScopeState previous = traversalState.peek();\n      if (!previous.traverseChildScopes) {\n        return false;\n      }\n      traversalState.push();\n    }\n    return true;\n  }\n",
        "begin_line": 165,
        "end_line": 174,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0659
        },
        "num_failing_tests": 1
    },
    {
        "name": "PeepholeOptimizationsPass.exitNode#176",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/PeepholeOptimizationsPass.java",
        "class_name": "com.google.javascript.jscomp.PeepholeOptimizationsPass",
        "signature": "com.google.javascript.jscomp.PeepholeOptimizationsPass.exitNode(com.google.javascript.rhino.Node)",
        "snippet": "  private void exitNode(Node node) {\n    if (node.isFunction() || node.isScript()) {\n      traversalState.pop();\n    }\n  }\n",
        "begin_line": 176,
        "end_line": 180,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0659
        },
        "num_failing_tests": 1
    },
    {
        "name": "PeepholeSubstituteAlternateSyntax.PeepholeSubstituteAlternateSyntax#71",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java",
        "class_name": "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax",
        "signature": "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax.PeepholeSubstituteAlternateSyntax(boolean)",
        "snippet": "  PeepholeSubstituteAlternateSyntax(boolean late) {\n    this.late = late;\n  }\n",
        "begin_line": 71,
        "end_line": 73,
        "comment": "\n   * @param late When late is false, this mean we are currently running before\n   * most of the other optimizations. In this case we would avoid optimizations\n   * that would make the code harder to analyze (such as using string splitting,\n   * merging statements with commas, etc). When this is true, we would\n   * do anything to minimize for size.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0658
        },
        "num_failing_tests": 1
    },
    {
        "name": "PeepholeOptimizationsPass.peek#66",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/PeepholeOptimizationsPass.java",
        "class_name": "com.google.javascript.jscomp.PeepholeOptimizationsPass",
        "signature": "com.google.javascript.jscomp.PeepholeOptimizationsPass.StateStack.peek()",
        "snippet": "    ScopeState peek() {\n      return states.get(currentDepth);\n    }\n",
        "begin_line": 66,
        "end_line": 68,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0658
        },
        "num_failing_tests": 1
    },
    {
        "name": "PeepholeOptimizationsPass.process#110",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/PeepholeOptimizationsPass.java",
        "class_name": "com.google.javascript.jscomp.PeepholeOptimizationsPass",
        "signature": "com.google.javascript.jscomp.PeepholeOptimizationsPass.process(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  @Override\n  public void process(Node externs, Node root) {\n    PeepholeChangeHandler handler = new PeepholeChangeHandler();\n    compiler.addChangeHandler(handler);\n    beginTraversal();\n    traverse(root);\n    endTraversal();\n    compiler.removeChangeHandler(handler);\n  }\n",
        "begin_line": 110,
        "end_line": 118,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0658
        },
        "num_failing_tests": 1
    },
    {
        "name": "PeepholeOptimizationsPass.traverse#120",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/PeepholeOptimizationsPass.java",
        "class_name": "com.google.javascript.jscomp.PeepholeOptimizationsPass",
        "signature": "com.google.javascript.jscomp.PeepholeOptimizationsPass.traverse(com.google.javascript.rhino.Node)",
        "snippet": "  private void traverse(Node node) {\n    // The goal here is to avoid retraversing\n    // the entire AST to catch newly created opportunities.\n    // So we track whether a \"unit of code\" has changed,\n    // and revisit immediately.\n    if (!shouldVisit(node)) {\n      return;\n    }\n\n    int visits = 0;\n    do {\n      Node c = node.getFirstChild();\n      while (c != null) {\n        Node next = c.getNext();\n        traverse(c);\n        c = next;\n      }\n\n      visit(node);\n      visits++;\n\n      Preconditions.checkState(visits < 10000, \"too many interations\");\n    } while (shouldRetraverse(node));\n\n    exitNode(node);\n  }\n",
        "begin_line": 120,
        "end_line": 145,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0658
        },
        "num_failing_tests": 1
    },
    {
        "name": "PeepholeOptimizationsPass.shouldRetraverse#147",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/PeepholeOptimizationsPass.java",
        "class_name": "com.google.javascript.jscomp.PeepholeOptimizationsPass",
        "signature": "com.google.javascript.jscomp.PeepholeOptimizationsPass.shouldRetraverse(com.google.javascript.rhino.Node)",
        "snippet": "  private boolean shouldRetraverse(Node node) {\n    if (retraverseOnChange\n        && node.getParent() != null\n        && (node.isFunction() || node.isScript())) {\n      ScopeState state = traversalState.peek();\n      if (state.changed) {\n        // prepare to re-visit the scope:\n        // when revisiting, only visit the immediate scope\n        // this reduces the cost of getting to a fixed\n        // point in global scope.\n        state.changed = false;\n        state.traverseChildScopes = false;\n        return true;\n      }\n    }\n    return false;\n  }\n",
        "begin_line": 147,
        "end_line": 163,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0658
        },
        "num_failing_tests": 1
    },
    {
        "name": "PeepholeOptimizationsPass.beginTraversal#209",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/PeepholeOptimizationsPass.java",
        "class_name": "com.google.javascript.jscomp.PeepholeOptimizationsPass",
        "signature": "com.google.javascript.jscomp.PeepholeOptimizationsPass.beginTraversal()",
        "snippet": "  private void beginTraversal() {\n    for (AbstractPeepholeOptimization optimization : peepholeOptimizations) {\n      optimization.beginTraversal(compiler);\n    }\n  }\n",
        "begin_line": 209,
        "end_line": 213,
        "comment": "\n   * Make sure that all the optimizations have the current traversal so they\n   * can report errors.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0658
        },
        "num_failing_tests": 1
    },
    {
        "name": "PeepholeOptimizationsPass.endTraversal#215",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/PeepholeOptimizationsPass.java",
        "class_name": "com.google.javascript.jscomp.PeepholeOptimizationsPass",
        "signature": "com.google.javascript.jscomp.PeepholeOptimizationsPass.endTraversal()",
        "snippet": "  private void endTraversal() {\n    for (AbstractPeepholeOptimization optimization : peepholeOptimizations) {\n      optimization.endTraversal(compiler);\n    }\n  }\n",
        "begin_line": 215,
        "end_line": 219,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0658
        },
        "num_failing_tests": 1
    },
    {
        "name": "CodeConsumer.addOp#210",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodeConsumer.java",
        "class_name": "com.google.javascript.jscomp.CodeConsumer",
        "signature": "com.google.javascript.jscomp.CodeConsumer.addOp(java.lang.String, boolean)",
        "snippet": "  void addOp(String op, boolean binOp) {\n    maybeEndStatement();\n\n    char first = op.charAt(0);\n    char prev = getLastChar();\n\n    if ((first == '+' || first == '-') && prev == first) {\n      // This is not pretty printing. This is to prevent misparsing of\n      // things like \"x + ++y\" or \"x++ + ++y\"\n      append(\" \");\n    } else if (Character.isLetter(first) &&\n               isWordChar(prev)) {\n      // Make sure there is a space after e.g. instanceof , typeof\n      append(\" \");\n    } else if (prev == '-' && first == '>') {\n      // Make sure that we don't emit -->\n      append(\" \");\n    }\n\n    // Allow formatting around the operator.\n    appendOp(op, binOp);\n\n    // Line breaking after an operator is always safe. Line breaking before an\n    // operator on the other hand is not. We only line break after a bin op\n    // because it looks strange.\n    if (binOp) {\n      maybeCutLine();\n    }\n  }\n",
        "begin_line": 210,
        "end_line": 238,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0658
        },
        "num_failing_tests": 1
    },
    {
        "name": "AbstractPeepholeOptimization.beginTraversal#91",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java",
        "class_name": "com.google.javascript.jscomp.AbstractPeepholeOptimization",
        "signature": "com.google.javascript.jscomp.AbstractPeepholeOptimization.beginTraversal(com.google.javascript.jscomp.AbstractCompiler)",
        "snippet": "  void beginTraversal(AbstractCompiler compiler) {\n    this.compiler = compiler;\n  }\n",
        "begin_line": 91,
        "end_line": 93,
        "comment": "\n   * Informs the optimization that a traversal will begin.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0658
        },
        "num_failing_tests": 1
    },
    {
        "name": "AbstractPeepholeOptimization.endTraversal#99",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java",
        "class_name": "com.google.javascript.jscomp.AbstractPeepholeOptimization",
        "signature": "com.google.javascript.jscomp.AbstractPeepholeOptimization.endTraversal(com.google.javascript.jscomp.AbstractCompiler)",
        "snippet": "  void endTraversal(AbstractCompiler compiler) {\n    this.compiler = null;\n  }\n",
        "begin_line": 99,
        "end_line": 101,
        "comment": "\n   * Informs the optimization that a traversal has completed.\n   * @param compiler The current compiler.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0658
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.isIf#2263",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.isIf()",
        "snippet": "  public boolean isIf() {\n    return this.getType() == Token.IF;\n  }\n",
        "begin_line": 2263,
        "end_line": 2265,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0657
        },
        "num_failing_tests": 1
    },
    {
        "name": "PeepholeOptimizationsPass.StateStack#62",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/PeepholeOptimizationsPass.java",
        "class_name": "com.google.javascript.jscomp.PeepholeOptimizationsPass",
        "signature": "com.google.javascript.jscomp.PeepholeOptimizationsPass.StateStack.StateStack()",
        "snippet": "    StateStack() {\n      states.add(new ScopeState());\n    }\n",
        "begin_line": 62,
        "end_line": 64,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0655
        },
        "num_failing_tests": 1
    },
    {
        "name": "PeepholeOptimizationsPass.ScopeState#48",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/PeepholeOptimizationsPass.java",
        "class_name": "com.google.javascript.jscomp.PeepholeOptimizationsPass",
        "signature": "com.google.javascript.jscomp.PeepholeOptimizationsPass.ScopeState.ScopeState()",
        "snippet": "    ScopeState() {\n      reset();\n    }\n",
        "begin_line": 48,
        "end_line": 50,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0655
        },
        "num_failing_tests": 1
    },
    {
        "name": "PeepholeOptimizationsPass.reset#52",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/PeepholeOptimizationsPass.java",
        "class_name": "com.google.javascript.jscomp.PeepholeOptimizationsPass",
        "signature": "com.google.javascript.jscomp.PeepholeOptimizationsPass.ScopeState.reset()",
        "snippet": "    void reset() {\n      changed = false;\n      traverseChildScopes = true;\n    }\n",
        "begin_line": 52,
        "end_line": 55,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0655
        },
        "num_failing_tests": 1
    },
    {
        "name": "PeepholeOptimizationsPass.PeepholeOptimizationsPass#95",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/PeepholeOptimizationsPass.java",
        "class_name": "com.google.javascript.jscomp.PeepholeOptimizationsPass",
        "signature": "com.google.javascript.jscomp.PeepholeOptimizationsPass.PeepholeOptimizationsPass(com.google.javascript.jscomp.AbstractCompiler, com.google.javascript.jscomp.AbstractPeepholeOptimization...)",
        "snippet": "  PeepholeOptimizationsPass(AbstractCompiler compiler,\n      AbstractPeepholeOptimization... optimizations) {\n    this.compiler = compiler;\n    this.peepholeOptimizations = optimizations;\n  }\n",
        "begin_line": 95,
        "end_line": 99,
        "comment": "\n   * Creates a peephole optimization pass that runs the given\n   * optimizations.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0655
        },
        "num_failing_tests": 1
    },
    {
        "name": "CodeGenerator.CodeGenerator#54",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodeGenerator.java",
        "class_name": "com.google.javascript.jscomp.CodeGenerator",
        "signature": "com.google.javascript.jscomp.CodeGenerator.CodeGenerator(com.google.javascript.jscomp.CodeConsumer)",
        "snippet": "  private CodeGenerator(CodeConsumer consumer) {\n    cc = consumer;\n    outputCharsetEncoder = null;\n    preferSingleQuotes = false;\n    trustedStrings = true;\n  }\n",
        "begin_line": 54,
        "end_line": 59,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0652
        },
        "num_failing_tests": 1
    },
    {
        "name": "CodeGenerator.forCostEstimation#61",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodeGenerator.java",
        "class_name": "com.google.javascript.jscomp.CodeGenerator",
        "signature": "com.google.javascript.jscomp.CodeGenerator.forCostEstimation(com.google.javascript.jscomp.CodeConsumer)",
        "snippet": "  static CodeGenerator forCostEstimation(CodeConsumer consumer) {\n    return new CodeGenerator(consumer);\n  }\n",
        "begin_line": 61,
        "end_line": 63,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0652
        },
        "num_failing_tests": 1
    },
    {
        "name": "CodeConsumer.appendOp#206",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodeConsumer.java",
        "class_name": "com.google.javascript.jscomp.CodeConsumer",
        "signature": "com.google.javascript.jscomp.CodeConsumer.appendOp(java.lang.String, boolean)",
        "snippet": "  void appendOp(String op, boolean binOp) {\n    append(op);\n  }\n",
        "begin_line": 206,
        "end_line": 208,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.065
        },
        "num_failing_tests": 1
    },
    {
        "name": "IRFactory.newNode#1470",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.newNode(int, com.google.javascript.rhino.Node)",
        "snippet": "  private Node newNode(int type, Node child1) {\n    return new Node(type, child1).clonePropsFrom(templateNode);\n  }\n",
        "begin_line": 1470,
        "end_line": 1472,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0632
        },
        "num_failing_tests": 1
    },
    {
        "name": "AstValidator.validateVar#389",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AstValidator.java",
        "class_name": "com.google.javascript.jscomp.AstValidator",
        "signature": "com.google.javascript.jscomp.AstValidator.validateVar(com.google.javascript.rhino.Node)",
        "snippet": "  private void validateVar(Node n) {\n    validateNodeType(Token.VAR, n);\n    this.validateMinimumChildCount(n, 1);\n    for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n      // Don't use the validateName here as the NAME is allowed to have\n      // a child.\n      validateNodeType(Token.NAME, c);\n      validateNonEmptyString(c);\n      validateMaximumChildCount(c, 1);\n      if (c.hasChildren()) {\n        validateExpression(c.getFirstChild());\n      }\n    }\n  }\n",
        "begin_line": 389,
        "end_line": 402,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0629
        },
        "num_failing_tests": 1
    },
    {
        "name": "Compiler.removeChangeHandler#1986",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.removeChangeHandler(com.google.javascript.jscomp.CodeChangeHandler)",
        "snippet": "  @Override\n  void removeChangeHandler(CodeChangeHandler handler) {\n    codeChangeHandlers.remove(handler);\n  }\n",
        "begin_line": 1986,
        "end_line": 1989,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.062
        },
        "num_failing_tests": 1
    },
    {
        "name": "CodeChangeHandler.reset#45",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodeChangeHandler.java",
        "class_name": "com.google.javascript.jscomp.CodeChangeHandler",
        "signature": "com.google.javascript.jscomp.CodeChangeHandler.reset()",
        "snippet": "  void reset() {\n    hasChanged = false;\n  }\n",
        "begin_line": 45,
        "end_line": 47,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0619
        },
        "num_failing_tests": 1
    },
    {
        "name": "VoidType.VoidType#53",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/VoidType.java",
        "class_name": "com.google.javascript.rhino.jstype.VoidType",
        "signature": "com.google.javascript.rhino.jstype.VoidType.VoidType(com.google.javascript.rhino.jstype.JSTypeRegistry)",
        "snippet": "  VoidType(JSTypeRegistry registry) {\n    super(registry);\n  }\n",
        "begin_line": 53,
        "end_line": 55,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0612
        },
        "num_failing_tests": 1
    },
    {
        "name": "VoidType.toStringHelper#94",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/VoidType.java",
        "class_name": "com.google.javascript.rhino.jstype.VoidType",
        "signature": "com.google.javascript.rhino.jstype.VoidType.toStringHelper(boolean)",
        "snippet": "  @Override\n  String toStringHelper(boolean forAnnotations) {\n    return getDisplayName();\n  }\n",
        "begin_line": 94,
        "end_line": 97,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0612
        },
        "num_failing_tests": 1
    },
    {
        "name": "VoidType.getDisplayName#99",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/VoidType.java",
        "class_name": "com.google.javascript.rhino.jstype.VoidType",
        "signature": "com.google.javascript.rhino.jstype.VoidType.getDisplayName()",
        "snippet": "  @Override\n  public String getDisplayName() {\n    return \"undefined\";\n  }\n",
        "begin_line": 99,
        "end_line": 102,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0612
        },
        "num_failing_tests": 1
    },
    {
        "name": "ValueType.ValueType#48",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/ValueType.java",
        "class_name": "com.google.javascript.rhino.jstype.ValueType",
        "signature": "com.google.javascript.rhino.jstype.ValueType.ValueType(com.google.javascript.rhino.jstype.JSTypeRegistry)",
        "snippet": "  ValueType(JSTypeRegistry registry) {\n    super(registry);\n  }\n",
        "begin_line": 48,
        "end_line": 50,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0612
        },
        "num_failing_tests": 1
    },
    {
        "name": "UnknownType.UnknownType#56",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/UnknownType.java",
        "class_name": "com.google.javascript.rhino.jstype.UnknownType",
        "signature": "com.google.javascript.rhino.jstype.UnknownType.UnknownType(com.google.javascript.rhino.jstype.JSTypeRegistry, boolean)",
        "snippet": "  UnknownType(JSTypeRegistry registry, boolean isChecked) {\n    super(registry);\n    this.isChecked = isChecked;\n  }\n",
        "begin_line": 56,
        "end_line": 59,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0612
        },
        "num_failing_tests": 1
    },
    {
        "name": "UnionTypeBuilder.UnionTypeBuilder#99",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/UnionTypeBuilder.java",
        "class_name": "com.google.javascript.rhino.jstype.UnionTypeBuilder",
        "signature": "com.google.javascript.rhino.jstype.UnionTypeBuilder.UnionTypeBuilder(com.google.javascript.rhino.jstype.JSTypeRegistry)",
        "snippet": "  UnionTypeBuilder(JSTypeRegistry registry) {\n    this(registry, DEFAULT_MAX_UNION_SIZE);\n  }\n",
        "begin_line": 99,
        "end_line": 101,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0612
        },
        "num_failing_tests": 1
    },
    {
        "name": "UnionTypeBuilder.UnionTypeBuilder#103",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/UnionTypeBuilder.java",
        "class_name": "com.google.javascript.rhino.jstype.UnionTypeBuilder",
        "signature": "com.google.javascript.rhino.jstype.UnionTypeBuilder.UnionTypeBuilder(com.google.javascript.rhino.jstype.JSTypeRegistry, int)",
        "snippet": "  UnionTypeBuilder(JSTypeRegistry registry, int maxUnionSize) {\n    this.registry = registry;\n    this.maxUnionSize = maxUnionSize;\n  }\n",
        "begin_line": 103,
        "end_line": 106,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0612
        },
        "num_failing_tests": 1
    },
    {
        "name": "UnionTypeBuilder.reduceAlternatesWithoutUnion#288",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/UnionTypeBuilder.java",
        "class_name": "com.google.javascript.rhino.jstype.UnionTypeBuilder",
        "signature": "com.google.javascript.rhino.jstype.UnionTypeBuilder.reduceAlternatesWithoutUnion()",
        "snippet": "  private JSType reduceAlternatesWithoutUnion() {\n    if (isAllType) {\n      return registry.getNativeType(ALL_TYPE);\n    } else if (isNativeUnknownType) {\n      if (areAllUnknownsChecked) {\n        return registry.getNativeType(CHECKED_UNKNOWN_TYPE);\n      } else {\n        return registry.getNativeType(UNKNOWN_TYPE);\n      }\n    } else {\n      int size = alternates.size();\n      if (size > maxUnionSize) {\n        return registry.getNativeType(UNKNOWN_TYPE);\n      } else if (size > 1) {\n        return null;\n      } else if (size == 1) {\n        return alternates.iterator().next();\n      } else {\n        return registry.getNativeType(NO_TYPE);\n      }\n    }\n  }\n",
        "begin_line": 288,
        "end_line": 309,
        "comment": "\n   * Reduce the alternates into a non-union type.\n   * If the alternates can't be accurately represented with a non-union\n   * type, return null.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0612
        },
        "num_failing_tests": 1
    },
    {
        "name": "UnionTypeBuilder.build#316",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/UnionTypeBuilder.java",
        "class_name": "com.google.javascript.rhino.jstype.UnionTypeBuilder",
        "signature": "com.google.javascript.rhino.jstype.UnionTypeBuilder.build()",
        "snippet": "  JSType build() {\n    if (result == null) {\n      result = reduceAlternatesWithoutUnion();\n      if (result == null) {\n        result = new UnionType(registry, getAlternateListCopy());\n      }\n    }\n    return result;\n  }\n",
        "begin_line": 316,
        "end_line": 324,
        "comment": "\n   * Creates a union.\n   * @return A UnionType if it has two or more alternates, the\n   *    only alternate if it has one and otherwise {@code NO_TYPE}.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0612
        },
        "num_failing_tests": 1
    },
    {
        "name": "UnionTypeBuilder.getAlternateListCopy#326",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/UnionTypeBuilder.java",
        "class_name": "com.google.javascript.rhino.jstype.UnionTypeBuilder",
        "signature": "com.google.javascript.rhino.jstype.UnionTypeBuilder.getAlternateListCopy()",
        "snippet": "  private Collection<JSType> getAlternateListCopy() {\n    return ImmutableList.copyOf(alternates);\n  }\n",
        "begin_line": 326,
        "end_line": 328,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0612
        },
        "num_failing_tests": 1
    },
    {
        "name": "UnionType.UnionType#79",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/UnionType.java",
        "class_name": "com.google.javascript.rhino.jstype.UnionType",
        "signature": "com.google.javascript.rhino.jstype.UnionType.UnionType(com.google.javascript.rhino.jstype.JSTypeRegistry, java.util.Collection<com.google.javascript.rhino.jstype.JSType>)",
        "snippet": "  UnionType(JSTypeRegistry registry, Collection<JSType> alternates) {\n    super(registry);\n    this.alternates = alternates;\n    this.hashcode = this.alternates.hashCode();\n  }\n",
        "begin_line": 79,
        "end_line": 83,
        "comment": "\n   * Creates a union type.\n   *\n   * @param alternates the alternates of the union\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0612
        },
        "num_failing_tests": 1
    },
    {
        "name": "TemplateTypeMap.TemplateTypeMap#58",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/TemplateTypeMap.java",
        "class_name": "com.google.javascript.rhino.jstype.TemplateTypeMap",
        "signature": "com.google.javascript.rhino.jstype.TemplateTypeMap.TemplateTypeMap(com.google.javascript.rhino.jstype.JSTypeRegistry, com.google.common.collect.ImmutableList<java.lang.String>, com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.JSType>)",
        "snippet": "  TemplateTypeMap(JSTypeRegistry registry,\n                  ImmutableList<String> templateKeys,\n                  ImmutableList<JSType> templateValues) {\n    Preconditions.checkNotNull(templateKeys);\n    Preconditions.checkNotNull(templateValues);\n\n    this.registry = registry;\n    this.templateKeys = templateKeys;\n\n    int nKeys = templateKeys.size();\n    this.templateValues = templateValues.size() > nKeys ?\n        templateValues.subList(0, nKeys) : templateValues;\n  }\n",
        "begin_line": 58,
        "end_line": 70,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0612
        },
        "num_failing_tests": 1
    },
    {
        "name": "TemplateTypeMap.getTemplateKeys#75",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/TemplateTypeMap.java",
        "class_name": "com.google.javascript.rhino.jstype.TemplateTypeMap",
        "signature": "com.google.javascript.rhino.jstype.TemplateTypeMap.getTemplateKeys()",
        "snippet": "  public ImmutableList<String> getTemplateKeys() {\n    return templateKeys;\n  }\n",
        "begin_line": 75,
        "end_line": 77,
        "comment": "\n   * Returns a list of all template keys.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0612
        },
        "num_failing_tests": 1
    },
    {
        "name": "TemplateTypeMap.hasAnyTemplateTypesInternal#200",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/TemplateTypeMap.java",
        "class_name": "com.google.javascript.rhino.jstype.TemplateTypeMap",
        "signature": "com.google.javascript.rhino.jstype.TemplateTypeMap.hasAnyTemplateTypesInternal()",
        "snippet": "  boolean hasAnyTemplateTypesInternal() {\n    for (JSType templateValue : templateValues) {\n      if (templateValue.hasAnyTemplateTypes()) {\n        return true;\n      }\n    }\n    return false;\n  }\n",
        "begin_line": 200,
        "end_line": 207,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0612
        },
        "num_failing_tests": 1
    },
    {
        "name": "StringType.StringType#52",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/StringType.java",
        "class_name": "com.google.javascript.rhino.jstype.StringType",
        "signature": "com.google.javascript.rhino.jstype.StringType.StringType(com.google.javascript.rhino.jstype.JSTypeRegistry)",
        "snippet": "  StringType(JSTypeRegistry registry) {\n    super(registry);\n  }\n",
        "begin_line": 52,
        "end_line": 54,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0612
        },
        "num_failing_tests": 1
    },
    {
        "name": "StringType.toStringHelper#90",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/StringType.java",
        "class_name": "com.google.javascript.rhino.jstype.StringType",
        "signature": "com.google.javascript.rhino.jstype.StringType.toStringHelper(boolean)",
        "snippet": "  @Override\n  String toStringHelper(boolean forAnnotations) {\n    return getDisplayName();\n  }\n",
        "begin_line": 90,
        "end_line": 93,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0612
        },
        "num_failing_tests": 1
    },
    {
        "name": "StringType.getDisplayName#95",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/StringType.java",
        "class_name": "com.google.javascript.rhino.jstype.StringType",
        "signature": "com.google.javascript.rhino.jstype.StringType.getDisplayName()",
        "snippet": "  @Override\n  public String getDisplayName() {\n    return \"string\";\n  }\n",
        "begin_line": 95,
        "end_line": 98,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0612
        },
        "num_failing_tests": 1
    },
    {
        "name": "PrototypeObjectType.PrototypeObjectType#103",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.PrototypeObjectType",
        "signature": "com.google.javascript.rhino.jstype.PrototypeObjectType.PrototypeObjectType(com.google.javascript.rhino.jstype.JSTypeRegistry, java.lang.String, com.google.javascript.rhino.jstype.ObjectType)",
        "snippet": "  PrototypeObjectType(JSTypeRegistry registry, String className,\n      ObjectType implicitPrototype) {\n    this(registry, className, implicitPrototype, false, null);\n  }\n",
        "begin_line": 103,
        "end_line": 106,
        "comment": "\n   * Creates an object type.\n   *\n   * @param className the name of the class.  May be {@code null} to\n   *        denote an anonymous class.\n   *\n   * @param implicitPrototype the implicit prototype\n   *        (a.k.a. {@code [[Prototype]]}) as defined by ECMA-262. If the\n   *        implicit prototype is {@code null} the implicit prototype will be\n   *        set to the {@link JSTypeNative#OBJECT_TYPE}.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0612
        },
        "num_failing_tests": 1
    },
    {
        "name": "PrototypeObjectType.PrototypeObjectType#112",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.PrototypeObjectType",
        "signature": "com.google.javascript.rhino.jstype.PrototypeObjectType.PrototypeObjectType(com.google.javascript.rhino.jstype.JSTypeRegistry, java.lang.String, com.google.javascript.rhino.jstype.ObjectType, boolean, com.google.javascript.rhino.jstype.TemplateTypeMap)",
        "snippet": "  PrototypeObjectType(JSTypeRegistry registry, String className,\n      ObjectType implicitPrototype, boolean nativeType,\n      TemplateTypeMap templateTypeMap) {\n    super(registry, templateTypeMap);\n    this.properties = new PropertyMap();\n    this.properties.setParentSource(this);\n\n    this.className = className;\n    this.nativeType = nativeType;\n    if (nativeType || implicitPrototype != null) {\n      setImplicitPrototype(implicitPrototype);\n    } else {\n      setImplicitPrototype(\n          registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE));\n    }\n  }\n",
        "begin_line": 112,
        "end_line": 127,
        "comment": "\n   * Creates an object type, allowing specification of the implicit prototype,\n   * whether the object is native, and any templatized types.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0612
        },
        "num_failing_tests": 1
    },
    {
        "name": "PrototypeObjectType.setPrettyPrint#271",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.PrototypeObjectType",
        "signature": "com.google.javascript.rhino.jstype.PrototypeObjectType.setPrettyPrint(boolean)",
        "snippet": "  void setPrettyPrint(boolean prettyPrint) {\n    this.prettyPrint = prettyPrint;\n  }\n",
        "begin_line": 271,
        "end_line": 273,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0612
        },
        "num_failing_tests": 1
    },
    {
        "name": "PrototypeObjectType.getImplicitPrototype#284",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.PrototypeObjectType",
        "signature": "com.google.javascript.rhino.jstype.PrototypeObjectType.getImplicitPrototype()",
        "snippet": "  @Override\n  public ObjectType getImplicitPrototype() {\n    return implicitPrototypeFallback;\n  }\n",
        "begin_line": 284,
        "end_line": 287,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0612
        },
        "num_failing_tests": 1
    },
    {
        "name": "PrototypeObjectType.setImplicitPrototype#295",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.PrototypeObjectType",
        "signature": "com.google.javascript.rhino.jstype.PrototypeObjectType.setImplicitPrototype(com.google.javascript.rhino.jstype.ObjectType)",
        "snippet": "  final void setImplicitPrototype(ObjectType implicitPrototype) {\n    checkState(!hasCachedValues());\n    this.implicitPrototypeFallback = implicitPrototype;\n  }\n",
        "begin_line": 295,
        "end_line": 298,
        "comment": "\n   * This should only be reset on the FunctionPrototypeType, only to fix an\n   * incorrectly established prototype chain due to the user having a mismatch\n   * in super class declaration, and only before properties on that type are\n   * processed.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0612
        },
        "num_failing_tests": 1
    },
    {
        "name": "PrototypeObjectType.hasReferenceName#311",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.PrototypeObjectType",
        "signature": "com.google.javascript.rhino.jstype.PrototypeObjectType.hasReferenceName()",
        "snippet": "  @Override\n  public boolean hasReferenceName() {\n    return className != null || ownerFunction != null;\n  }\n",
        "begin_line": 311,
        "end_line": 314,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0612
        },
        "num_failing_tests": 1
    },
    {
        "name": "PrototypeObjectType.isSubtype#316",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.PrototypeObjectType",
        "signature": "com.google.javascript.rhino.jstype.PrototypeObjectType.isSubtype(com.google.javascript.rhino.jstype.JSType)",
        "snippet": "  @Override\n  public boolean isSubtype(JSType that) {\n    if (JSType.isSubtypeHelper(this, that)) {\n      return true;\n    }\n\n    // Union types\n    if (that.isUnionType()) {\n      // The static {@code JSType.isSubtype} check already decomposed\n      // union types, so we don't need to check those again.\n      return false;\n    }\n\n    // record types\n    if (that.isRecordType()) {\n      return RecordType.isSubtype(this, that.toMaybeRecordType());\n    }\n\n    // Interfaces\n    // Find all the interfaces implemented by this class and compare each one\n    // to the interface instance.\n    ObjectType thatObj = that.toObjectType();\n    FunctionType thatCtor = thatObj == null ? null : thatObj.getConstructor();\n\n    if (getConstructor() != null && getConstructor().isInterface()) {\n      for (ObjectType thisInterface : getCtorExtendedInterfaces()) {\n        if (thisInterface.isSubtype(that)) {\n          return true;\n        }\n      }\n    } else if (thatCtor != null && thatCtor.isInterface()) {\n      Iterable<ObjectType> thisInterfaces = getCtorImplementedInterfaces();\n      for (ObjectType thisInterface : thisInterfaces) {\n        if (thisInterface.isSubtype(that)) {\n          return true;\n        }\n      }\n    }\n\n    // other prototype based objects\n    if (isUnknownType() || implicitPrototypeChainIsUnknown()) {\n      // If unsure, say 'yes', to avoid spurious warnings.\n      // TODO(user): resolve the prototype chain completely in all cases,\n      // to avoid guessing.\n      return true;\n    }\n    return thatObj != null && isImplicitPrototype(thatObj);\n  }\n",
        "begin_line": 316,
        "end_line": 363,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0612
        },
        "num_failing_tests": 1
    },
    {
        "name": "PrototypeObjectType.implicitPrototypeChainIsUnknown#365",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.PrototypeObjectType",
        "signature": "com.google.javascript.rhino.jstype.PrototypeObjectType.implicitPrototypeChainIsUnknown()",
        "snippet": "  private boolean implicitPrototypeChainIsUnknown() {\n    ObjectType p = getImplicitPrototype();\n    while (p != null) {\n      if (p.isUnknownType()) {\n        return true;\n      }\n      p = p.getImplicitPrototype();\n    }\n    return false;\n  }\n",
        "begin_line": 365,
        "end_line": 374,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0612
        },
        "num_failing_tests": 1
    },
    {
        "name": "PrototypeObjectType.hasCachedValues#376",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.PrototypeObjectType",
        "signature": "com.google.javascript.rhino.jstype.PrototypeObjectType.hasCachedValues()",
        "snippet": "  @Override\n  public boolean hasCachedValues() {\n    return super.hasCachedValues();\n  }\n",
        "begin_line": 376,
        "end_line": 379,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0612
        },
        "num_failing_tests": 1
    },
    {
        "name": "PrototypeObjectType.isNativeObjectType#382",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.PrototypeObjectType",
        "signature": "com.google.javascript.rhino.jstype.PrototypeObjectType.isNativeObjectType()",
        "snippet": "  @Override\n  public boolean isNativeObjectType() {\n    return nativeType;\n  }\n",
        "begin_line": 382,
        "end_line": 385,
        "comment": " Whether this is a built-in object. ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0612
        },
        "num_failing_tests": 1
    },
    {
        "name": "PrototypeObjectType.setOwnerFunction#387",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.PrototypeObjectType",
        "signature": "com.google.javascript.rhino.jstype.PrototypeObjectType.setOwnerFunction(com.google.javascript.rhino.jstype.FunctionType)",
        "snippet": "  @Override\n  void setOwnerFunction(FunctionType type) {\n    Preconditions.checkState(ownerFunction == null || type == null);\n    ownerFunction = type;\n  }\n",
        "begin_line": 387,
        "end_line": 391,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0612
        },
        "num_failing_tests": 1
    },
    {
        "name": "PrototypeObjectType.getOwnerFunction#393",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.PrototypeObjectType",
        "signature": "com.google.javascript.rhino.jstype.PrototypeObjectType.getOwnerFunction()",
        "snippet": "  @Override\n  public FunctionType getOwnerFunction() {\n    return ownerFunction;\n  }\n",
        "begin_line": 393,
        "end_line": 396,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0612
        },
        "num_failing_tests": 1
    },
    {
        "name": "PrototypeObjectType.getCtorExtendedInterfaces#405",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.PrototypeObjectType",
        "signature": "com.google.javascript.rhino.jstype.PrototypeObjectType.getCtorExtendedInterfaces()",
        "snippet": "  @Override\n  public Iterable<ObjectType> getCtorExtendedInterfaces() {\n    return isFunctionPrototypeType()\n        ? getOwnerFunction().getExtendedInterfaces()\n        : ImmutableList.<ObjectType>of();\n  }\n",
        "begin_line": 405,
        "end_line": 410,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0612
        },
        "num_failing_tests": 1
    },
    {
        "name": "PropertyMap.PropertyMap#79",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/PropertyMap.java",
        "class_name": "com.google.javascript.rhino.jstype.PropertyMap",
        "signature": "com.google.javascript.rhino.jstype.PropertyMap.PropertyMap()",
        "snippet": "  PropertyMap() {\n    this(Maps.<String, Property>newTreeMap());\n  }\n",
        "begin_line": 79,
        "end_line": 81,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0612
        },
        "num_failing_tests": 1
    },
    {
        "name": "PropertyMap.PropertyMap#83",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/PropertyMap.java",
        "class_name": "com.google.javascript.rhino.jstype.PropertyMap",
        "signature": "com.google.javascript.rhino.jstype.PropertyMap.PropertyMap(java.util.Map<java.lang.String, com.google.javascript.rhino.jstype.Property>)",
        "snippet": "  private PropertyMap(Map<String, Property> underlyingMap) {\n    this.properties = underlyingMap;\n  }\n",
        "begin_line": 83,
        "end_line": 85,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0612
        },
        "num_failing_tests": 1
    },
    {
        "name": "PropertyMap.setParentSource#91",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/PropertyMap.java",
        "class_name": "com.google.javascript.rhino.jstype.PropertyMap",
        "signature": "com.google.javascript.rhino.jstype.PropertyMap.setParentSource(com.google.javascript.rhino.jstype.ObjectType)",
        "snippet": "  void setParentSource(ObjectType ownerType) {\n    if (this != EMPTY_MAP) {\n      this.parentSource = ownerType;\n    }\n  }\n",
        "begin_line": 91,
        "end_line": 95,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0612
        },
        "num_failing_tests": 1
    },
    {
        "name": "Property.Property#79",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/Property.java",
        "class_name": "com.google.javascript.rhino.jstype.Property",
        "signature": "com.google.javascript.rhino.jstype.Property.Property(java.lang.String, com.google.javascript.rhino.jstype.JSType, boolean, com.google.javascript.rhino.Node)",
        "snippet": "  Property(String name, JSType type, boolean inferred,\n      Node propertyNode) {\n    this.name = name;\n    this.type = type;\n    this.inferred = inferred;\n    this.propertyNode = propertyNode;\n  }\n",
        "begin_line": 79,
        "end_line": 85,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0612
        },
        "num_failing_tests": 1
    },
    {
        "name": "Property.getType#112",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/Property.java",
        "class_name": "com.google.javascript.rhino.jstype.Property",
        "signature": "com.google.javascript.rhino.jstype.Property.getType()",
        "snippet": "  @Override\n      public JSType getType() {\n    return type;\n  }\n",
        "begin_line": 112,
        "end_line": 115,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0612
        },
        "num_failing_tests": 1
    },
    {
        "name": "ObjectType.ObjectType#87",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/ObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.ObjectType",
        "signature": "com.google.javascript.rhino.jstype.ObjectType.ObjectType(com.google.javascript.rhino.jstype.JSTypeRegistry)",
        "snippet": "  ObjectType(JSTypeRegistry registry) {\n    super(registry);\n  }\n",
        "begin_line": 87,
        "end_line": 89,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0612
        },
        "num_failing_tests": 1
    },
    {
        "name": "ObjectType.ObjectType#91",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/ObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.ObjectType",
        "signature": "com.google.javascript.rhino.jstype.ObjectType.ObjectType(com.google.javascript.rhino.jstype.JSTypeRegistry, com.google.javascript.rhino.jstype.TemplateTypeMap)",
        "snippet": "  ObjectType(JSTypeRegistry registry, TemplateTypeMap templateTypeMap) {\n    super(registry, templateTypeMap);\n  }\n",
        "begin_line": 91,
        "end_line": 93,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0612
        },
        "num_failing_tests": 1
    },
    {
        "name": "ObjectType.isUnknownType#549",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/ObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.ObjectType",
        "signature": "com.google.javascript.rhino.jstype.ObjectType.isUnknownType()",
        "snippet": "  @Override\n  public boolean isUnknownType() {\n    // If the object is unknown now, check the supertype again,\n    // because it might have been resolved since the last check.\n    if (unknown) {\n      ObjectType implicitProto = getImplicitPrototype();\n      if (implicitProto == null ||\n          implicitProto.isNativeObjectType()) {\n        unknown = false;\n        for (ObjectType interfaceType : getCtorExtendedInterfaces()) {\n          if (interfaceType.isUnknownType()) {\n            unknown = true;\n            break;\n          }\n        }\n      } else {\n        unknown = implicitProto.isUnknownType();\n      }\n    }\n    return unknown;\n  }\n",
        "begin_line": 549,
        "end_line": 569,
        "comment": "\n   * We treat this as the unknown type if any of its implicit prototype\n   * properties is unknown.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0612
        },
        "num_failing_tests": 1
    },
    {
        "name": "ObjectType.hasCachedValues#581",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/ObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.ObjectType",
        "signature": "com.google.javascript.rhino.jstype.ObjectType.hasCachedValues()",
        "snippet": "  public boolean hasCachedValues() {\n    return !unknown;\n  }\n",
        "begin_line": 581,
        "end_line": 583,
        "comment": "\n   * Returns true if any cached values have been set for this type.  If true,\n   * then the prototype chain should not be changed, as it might invalidate the\n   * cached values.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0612
        },
        "num_failing_tests": 1
    },
    {
        "name": "ObjectType.isFunctionPrototypeType#605",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/ObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.ObjectType",
        "signature": "com.google.javascript.rhino.jstype.ObjectType.isFunctionPrototypeType()",
        "snippet": "  @Override\n  public final boolean isFunctionPrototypeType() {\n    return getOwnerFunction() != null;\n  }\n",
        "begin_line": 605,
        "end_line": 608,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0612
        },
        "num_failing_tests": 1
    },
    {
        "name": "NumberType.NumberType#52",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/NumberType.java",
        "class_name": "com.google.javascript.rhino.jstype.NumberType",
        "signature": "com.google.javascript.rhino.jstype.NumberType.NumberType(com.google.javascript.rhino.jstype.JSTypeRegistry)",
        "snippet": "  NumberType(JSTypeRegistry registry) {\n    super(registry);\n  }\n",
        "begin_line": 52,
        "end_line": 54,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0612
        },
        "num_failing_tests": 1
    },
    {
        "name": "NumberType.toStringHelper#95",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/NumberType.java",
        "class_name": "com.google.javascript.rhino.jstype.NumberType",
        "signature": "com.google.javascript.rhino.jstype.NumberType.toStringHelper(boolean)",
        "snippet": "  @Override\n  String toStringHelper(boolean forAnnotations) {\n    return getDisplayName();\n  }\n",
        "begin_line": 95,
        "end_line": 98,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0612
        },
        "num_failing_tests": 1
    },
    {
        "name": "NumberType.getDisplayName#100",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/NumberType.java",
        "class_name": "com.google.javascript.rhino.jstype.NumberType",
        "signature": "com.google.javascript.rhino.jstype.NumberType.getDisplayName()",
        "snippet": "  @Override\n  public String getDisplayName() {\n    return \"number\";\n  }\n",
        "begin_line": 100,
        "end_line": 103,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0612
        },
        "num_failing_tests": 1
    },
    {
        "name": "NullType.NullType#53",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/NullType.java",
        "class_name": "com.google.javascript.rhino.jstype.NullType",
        "signature": "com.google.javascript.rhino.jstype.NullType.NullType(com.google.javascript.rhino.jstype.JSTypeRegistry)",
        "snippet": "  NullType(JSTypeRegistry registry) {\n    super(registry);\n  }\n",
        "begin_line": 53,
        "end_line": 55,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0612
        },
        "num_failing_tests": 1
    },
    {
        "name": "NullType.toStringHelper#102",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/NullType.java",
        "class_name": "com.google.javascript.rhino.jstype.NullType",
        "signature": "com.google.javascript.rhino.jstype.NullType.toStringHelper(boolean)",
        "snippet": "  @Override\n  String toStringHelper(boolean forAnnotations) {\n    return getDisplayName();\n  }\n",
        "begin_line": 102,
        "end_line": 105,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0612
        },
        "num_failing_tests": 1
    },
    {
        "name": "NullType.getDisplayName#107",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/NullType.java",
        "class_name": "com.google.javascript.rhino.jstype.NullType",
        "signature": "com.google.javascript.rhino.jstype.NullType.getDisplayName()",
        "snippet": "  @Override\n  public String getDisplayName() {\n    return \"null\";\n  }\n",
        "begin_line": 107,
        "end_line": 110,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0612
        },
        "num_failing_tests": 1
    },
    {
        "name": "NoType.NoType#64",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/NoType.java",
        "class_name": "com.google.javascript.rhino.jstype.NoType",
        "signature": "com.google.javascript.rhino.jstype.NoType.NoType(com.google.javascript.rhino.jstype.JSTypeRegistry)",
        "snippet": "  NoType(JSTypeRegistry registry) {\n    super(registry);\n  }\n",
        "begin_line": 64,
        "end_line": 66,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0612
        },
        "num_failing_tests": 1
    },
    {
        "name": "NoType.isNoType#73",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/NoType.java",
        "class_name": "com.google.javascript.rhino.jstype.NoType",
        "signature": "com.google.javascript.rhino.jstype.NoType.isNoType()",
        "snippet": "  @Override\n  public boolean isNoType() {\n    return true;\n  }\n",
        "begin_line": 73,
        "end_line": 76,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0612
        },
        "num_failing_tests": 1
    },
    {
        "name": "NoResolvedType.NoResolvedType#58",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/NoResolvedType.java",
        "class_name": "com.google.javascript.rhino.jstype.NoResolvedType",
        "signature": "com.google.javascript.rhino.jstype.NoResolvedType.NoResolvedType(com.google.javascript.rhino.jstype.JSTypeRegistry)",
        "snippet": "  NoResolvedType(JSTypeRegistry registry) {\n    super(registry);\n  }\n",
        "begin_line": 58,
        "end_line": 60,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0612
        },
        "num_failing_tests": 1
    },
    {
        "name": "NoObjectType.NoObjectType#66",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/NoObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.NoObjectType",
        "signature": "com.google.javascript.rhino.jstype.NoObjectType.NoObjectType(com.google.javascript.rhino.jstype.JSTypeRegistry)",
        "snippet": "  NoObjectType(JSTypeRegistry registry) {\n    super(registry, null, null,\n          registry.createArrowType(null, null),\n          null, null, true, true);\n    getInternalArrowType().returnType = this;\n    this.setInstanceType(this);\n  }\n",
        "begin_line": 66,
        "end_line": 72,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0612
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSTypeRegistry.initializeBuiltInTypes#262",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.initializeBuiltInTypes()",
        "snippet": "  private void initializeBuiltInTypes() {\n    // These locals shouldn't be all caps.\n    BooleanType BOOLEAN_TYPE = new BooleanType(this);\n    registerNativeType(JSTypeNative.BOOLEAN_TYPE, BOOLEAN_TYPE);\n\n    NullType NULL_TYPE = new NullType(this);\n    registerNativeType(JSTypeNative.NULL_TYPE, NULL_TYPE);\n\n    NumberType NUMBER_TYPE = new NumberType(this);\n    registerNativeType(JSTypeNative.NUMBER_TYPE, NUMBER_TYPE);\n\n    StringType STRING_TYPE = new StringType(this);\n    registerNativeType(JSTypeNative.STRING_TYPE, STRING_TYPE);\n\n    UnknownType UNKNOWN_TYPE = new UnknownType(this, false);\n    registerNativeType(JSTypeNative.UNKNOWN_TYPE, UNKNOWN_TYPE);\n    UnknownType checkedUnknownType = new UnknownType(this, true);\n    registerNativeType(\n        JSTypeNative.CHECKED_UNKNOWN_TYPE, checkedUnknownType);\n\n    VoidType VOID_TYPE = new VoidType(this);\n    registerNativeType(JSTypeNative.VOID_TYPE, VOID_TYPE);\n\n    AllType ALL_TYPE = new AllType(this);\n    registerNativeType(JSTypeNative.ALL_TYPE, ALL_TYPE);\n\n    // Top Level Prototype (the One)\n    // The initializations of TOP_LEVEL_PROTOTYPE and OBJECT_FUNCTION_TYPE\n    // use each other's results, so at least one of them will get null\n    // instead of an actual type; however, this seems to be benign.\n    PrototypeObjectType TOP_LEVEL_PROTOTYPE =\n        new PrototypeObjectType(this, null, null, true, null);\n    registerNativeType(JSTypeNative.TOP_LEVEL_PROTOTYPE, TOP_LEVEL_PROTOTYPE);\n\n    // Object\n    FunctionType OBJECT_FUNCTION_TYPE =\n        new FunctionType(this, \"Object\", null,\n            createArrowType(createOptionalParameters(ALL_TYPE), UNKNOWN_TYPE),\n            null,\n            createTemplateTypeMap(ImmutableList.of(\n                OBJECT_INDEX_TEMPLATE, OBJECT_ELEMENT_TEMPLATE), null),\n            true, true);\n\n    OBJECT_FUNCTION_TYPE.setPrototype(TOP_LEVEL_PROTOTYPE, null);\n    registerNativeType(JSTypeNative.OBJECT_FUNCTION_TYPE, OBJECT_FUNCTION_TYPE);\n\n    ObjectType OBJECT_TYPE = OBJECT_FUNCTION_TYPE.getInstanceType();\n    registerNativeType(JSTypeNative.OBJECT_TYPE, OBJECT_TYPE);\n\n    ObjectType OBJECT_PROTOTYPE = OBJECT_FUNCTION_TYPE.getPrototype();\n    registerNativeType(JSTypeNative.OBJECT_PROTOTYPE, OBJECT_PROTOTYPE);\n\n    // Function\n    FunctionType FUNCTION_FUNCTION_TYPE =\n        new FunctionType(this, \"Function\", null,\n            createArrowType(\n                createParametersWithVarArgs(ALL_TYPE), UNKNOWN_TYPE),\n            null, null, true, true);\n    FUNCTION_FUNCTION_TYPE.setPrototypeBasedOn(OBJECT_TYPE);\n    registerNativeType(\n        JSTypeNative.FUNCTION_FUNCTION_TYPE, FUNCTION_FUNCTION_TYPE);\n\n    ObjectType FUNCTION_PROTOTYPE = FUNCTION_FUNCTION_TYPE.getPrototype();\n    registerNativeType(JSTypeNative.FUNCTION_PROTOTYPE, FUNCTION_PROTOTYPE);\n\n    NoType NO_TYPE = new NoType(this);\n    registerNativeType(JSTypeNative.NO_TYPE, NO_TYPE);\n\n    NoObjectType NO_OBJECT_TYPE = new NoObjectType(this);\n    registerNativeType(JSTypeNative.NO_OBJECT_TYPE, NO_OBJECT_TYPE);\n\n    NoObjectType NO_RESOLVED_TYPE = new NoResolvedType(this);\n    registerNativeType(JSTypeNative.NO_RESOLVED_TYPE, NO_RESOLVED_TYPE);\n\n    // Array\n    FunctionType ARRAY_FUNCTION_TYPE =\n      new FunctionType(this, \"Array\", null,\n          createArrowType(createParametersWithVarArgs(ALL_TYPE), null),\n          null,\n          createTemplateTypeMap(ImmutableList.of(\n              OBJECT_ELEMENT_TEMPLATE), null),\n          true, true);\n    ARRAY_FUNCTION_TYPE.getInternalArrowType().returnType =\n        ARRAY_FUNCTION_TYPE.getInstanceType();\n\n    ObjectType arrayPrototype = ARRAY_FUNCTION_TYPE.getPrototype();\n    registerNativeType(JSTypeNative.ARRAY_FUNCTION_TYPE, ARRAY_FUNCTION_TYPE);\n\n    ObjectType ARRAY_TYPE = ARRAY_FUNCTION_TYPE.getInstanceType();\n    registerNativeType(JSTypeNative.ARRAY_TYPE, ARRAY_TYPE);\n\n    // Boolean\n    FunctionType BOOLEAN_OBJECT_FUNCTION_TYPE =\n        new FunctionType(this, \"Boolean\", null,\n            createArrowType(createOptionalParameters(ALL_TYPE), BOOLEAN_TYPE),\n            null, null, true, true);\n    ObjectType booleanPrototype = BOOLEAN_OBJECT_FUNCTION_TYPE.getPrototype();\n    registerNativeType(\n        JSTypeNative.BOOLEAN_OBJECT_FUNCTION_TYPE,\n        BOOLEAN_OBJECT_FUNCTION_TYPE);\n\n    ObjectType BOOLEAN_OBJECT_TYPE =\n        BOOLEAN_OBJECT_FUNCTION_TYPE.getInstanceType();\n    registerNativeType(JSTypeNative.BOOLEAN_OBJECT_TYPE, BOOLEAN_OBJECT_TYPE);\n\n    // Date\n    FunctionType DATE_FUNCTION_TYPE =\n      new FunctionType(this, \"Date\", null,\n          createArrowType(\n              createOptionalParameters(UNKNOWN_TYPE, UNKNOWN_TYPE, UNKNOWN_TYPE,\n                  UNKNOWN_TYPE, UNKNOWN_TYPE, UNKNOWN_TYPE, UNKNOWN_TYPE),\n              STRING_TYPE),\n          null, null, true, true);\n    ObjectType datePrototype = DATE_FUNCTION_TYPE.getPrototype();\n    registerNativeType(JSTypeNative.DATE_FUNCTION_TYPE, DATE_FUNCTION_TYPE);\n\n    ObjectType DATE_TYPE = DATE_FUNCTION_TYPE.getInstanceType();\n    registerNativeType(JSTypeNative.DATE_TYPE, DATE_TYPE);\n\n    // Error\n    FunctionType ERROR_FUNCTION_TYPE = new ErrorFunctionType(this, \"Error\");\n    registerNativeType(JSTypeNative.ERROR_FUNCTION_TYPE, ERROR_FUNCTION_TYPE);\n\n    ObjectType ERROR_TYPE = ERROR_FUNCTION_TYPE.getInstanceType();\n    registerNativeType(JSTypeNative.ERROR_TYPE, ERROR_TYPE);\n\n    // EvalError\n    FunctionType EVAL_ERROR_FUNCTION_TYPE =\n        new ErrorFunctionType(this, \"EvalError\");\n    EVAL_ERROR_FUNCTION_TYPE.setPrototypeBasedOn(ERROR_TYPE);\n    registerNativeType(\n        JSTypeNative.EVAL_ERROR_FUNCTION_TYPE, EVAL_ERROR_FUNCTION_TYPE);\n\n    ObjectType EVAL_ERROR_TYPE = EVAL_ERROR_FUNCTION_TYPE.getInstanceType();\n    registerNativeType(JSTypeNative.EVAL_ERROR_TYPE, EVAL_ERROR_TYPE);\n\n    // RangeError\n    FunctionType RANGE_ERROR_FUNCTION_TYPE =\n        new ErrorFunctionType(this, \"RangeError\");\n    RANGE_ERROR_FUNCTION_TYPE.setPrototypeBasedOn(ERROR_TYPE);\n    registerNativeType(\n        JSTypeNative.RANGE_ERROR_FUNCTION_TYPE, RANGE_ERROR_FUNCTION_TYPE);\n\n    ObjectType RANGE_ERROR_TYPE = RANGE_ERROR_FUNCTION_TYPE.getInstanceType();\n    registerNativeType(JSTypeNative.RANGE_ERROR_TYPE, RANGE_ERROR_TYPE);\n\n    // ReferenceError\n    FunctionType REFERENCE_ERROR_FUNCTION_TYPE =\n        new ErrorFunctionType(this, \"ReferenceError\");\n    REFERENCE_ERROR_FUNCTION_TYPE.setPrototypeBasedOn(ERROR_TYPE);\n    registerNativeType(\n        JSTypeNative.REFERENCE_ERROR_FUNCTION_TYPE,\n        REFERENCE_ERROR_FUNCTION_TYPE);\n\n    ObjectType REFERENCE_ERROR_TYPE =\n        REFERENCE_ERROR_FUNCTION_TYPE.getInstanceType();\n    registerNativeType(JSTypeNative.REFERENCE_ERROR_TYPE, REFERENCE_ERROR_TYPE);\n\n    // SyntaxError\n    FunctionType SYNTAX_ERROR_FUNCTION_TYPE =\n        new ErrorFunctionType(this, \"SyntaxError\");\n    SYNTAX_ERROR_FUNCTION_TYPE.setPrototypeBasedOn(ERROR_TYPE);\n    registerNativeType(\n        JSTypeNative.SYNTAX_ERROR_FUNCTION_TYPE, SYNTAX_ERROR_FUNCTION_TYPE);\n\n    ObjectType SYNTAX_ERROR_TYPE = SYNTAX_ERROR_FUNCTION_TYPE.getInstanceType();\n    registerNativeType(JSTypeNative.SYNTAX_ERROR_TYPE, SYNTAX_ERROR_TYPE);\n\n    // TypeError\n    FunctionType TYPE_ERROR_FUNCTION_TYPE =\n        new ErrorFunctionType(this, \"TypeError\");\n    TYPE_ERROR_FUNCTION_TYPE.setPrototypeBasedOn(ERROR_TYPE);\n    registerNativeType(\n        JSTypeNative.TYPE_ERROR_FUNCTION_TYPE, TYPE_ERROR_FUNCTION_TYPE);\n\n    ObjectType TYPE_ERROR_TYPE = TYPE_ERROR_FUNCTION_TYPE.getInstanceType();\n    registerNativeType(JSTypeNative.TYPE_ERROR_TYPE, TYPE_ERROR_TYPE);\n\n    // URIError\n    FunctionType URI_ERROR_FUNCTION_TYPE =\n        new ErrorFunctionType(this, \"URIError\");\n    URI_ERROR_FUNCTION_TYPE.setPrototypeBasedOn(ERROR_TYPE);\n    registerNativeType(\n        JSTypeNative.URI_ERROR_FUNCTION_TYPE, URI_ERROR_FUNCTION_TYPE);\n\n    ObjectType URI_ERROR_TYPE = URI_ERROR_FUNCTION_TYPE.getInstanceType();\n    registerNativeType(JSTypeNative.URI_ERROR_TYPE, URI_ERROR_TYPE);\n\n    // Number\n    FunctionType NUMBER_OBJECT_FUNCTION_TYPE =\n        new FunctionType(this, \"Number\", null,\n            createArrowType(createOptionalParameters(ALL_TYPE), NUMBER_TYPE),\n            null, null, true, true);\n    ObjectType numberPrototype = NUMBER_OBJECT_FUNCTION_TYPE.getPrototype();\n    registerNativeType(\n        JSTypeNative.NUMBER_OBJECT_FUNCTION_TYPE, NUMBER_OBJECT_FUNCTION_TYPE);\n\n    ObjectType NUMBER_OBJECT_TYPE =\n        NUMBER_OBJECT_FUNCTION_TYPE.getInstanceType();\n    registerNativeType(JSTypeNative.NUMBER_OBJECT_TYPE, NUMBER_OBJECT_TYPE);\n\n    // RegExp\n    FunctionType REGEXP_FUNCTION_TYPE =\n      new FunctionType(this, \"RegExp\", null,\n          createArrowType(createOptionalParameters(ALL_TYPE, ALL_TYPE)),\n          null, null, true, true);\n    REGEXP_FUNCTION_TYPE.getInternalArrowType().returnType =\n        REGEXP_FUNCTION_TYPE.getInstanceType();\n\n    ObjectType regexpPrototype = REGEXP_FUNCTION_TYPE.getPrototype();\n    registerNativeType(JSTypeNative.REGEXP_FUNCTION_TYPE, REGEXP_FUNCTION_TYPE);\n\n    ObjectType REGEXP_TYPE = REGEXP_FUNCTION_TYPE.getInstanceType();\n    registerNativeType(JSTypeNative.REGEXP_TYPE, REGEXP_TYPE);\n\n    // String\n    FunctionType STRING_OBJECT_FUNCTION_TYPE =\n        new FunctionType(this, \"String\", null,\n            createArrowType(createOptionalParameters(ALL_TYPE), STRING_TYPE),\n            null, null, true, true);\n    ObjectType stringPrototype = STRING_OBJECT_FUNCTION_TYPE.getPrototype();\n    registerNativeType(\n        JSTypeNative.STRING_OBJECT_FUNCTION_TYPE, STRING_OBJECT_FUNCTION_TYPE);\n\n    ObjectType STRING_OBJECT_TYPE =\n        STRING_OBJECT_FUNCTION_TYPE.getInstanceType();\n    registerNativeType(\n        JSTypeNative.STRING_OBJECT_TYPE, STRING_OBJECT_TYPE);\n\n    // (null,void)\n    JSType NULL_VOID =\n        createUnionType(NULL_TYPE, VOID_TYPE);\n    registerNativeType(JSTypeNative.NULL_VOID, NULL_VOID);\n\n    // (Object,string,number)\n    JSType OBJECT_NUMBER_STRING =\n        createUnionType(OBJECT_TYPE, NUMBER_TYPE, STRING_TYPE);\n    registerNativeType(JSTypeNative.OBJECT_NUMBER_STRING, OBJECT_NUMBER_STRING);\n\n    // (Object,string,number,boolean)\n    JSType OBJECT_NUMBER_STRING_BOOLEAN =\n        createUnionType(OBJECT_TYPE, NUMBER_TYPE, STRING_TYPE, BOOLEAN_TYPE);\n    registerNativeType(JSTypeNative.OBJECT_NUMBER_STRING_BOOLEAN,\n        OBJECT_NUMBER_STRING_BOOLEAN);\n\n    // (string,number,boolean)\n    JSType NUMBER_STRING_BOOLEAN =\n        createUnionType(NUMBER_TYPE, STRING_TYPE, BOOLEAN_TYPE);\n    registerNativeType(JSTypeNative.NUMBER_STRING_BOOLEAN,\n        NUMBER_STRING_BOOLEAN);\n\n    // (string,number)\n    JSType NUMBER_STRING = createUnionType(NUMBER_TYPE, STRING_TYPE);\n    registerNativeType(JSTypeNative.NUMBER_STRING, NUMBER_STRING);\n\n    // Native object properties are filled in by externs...\n\n    // (String, string)\n    JSType STRING_VALUE_OR_OBJECT_TYPE =\n        createUnionType(STRING_OBJECT_TYPE, STRING_TYPE);\n    registerNativeType(\n        JSTypeNative.STRING_VALUE_OR_OBJECT_TYPE, STRING_VALUE_OR_OBJECT_TYPE);\n\n    // (Number, number)\n    JSType NUMBER_VALUE_OR_OBJECT_TYPE =\n        createUnionType(NUMBER_OBJECT_TYPE, NUMBER_TYPE);\n    registerNativeType(\n        JSTypeNative.NUMBER_VALUE_OR_OBJECT_TYPE, NUMBER_VALUE_OR_OBJECT_TYPE);\n\n    // unknown function type, i.e. (?...) -> ?\n    FunctionType U2U_FUNCTION_TYPE =\n        createFunctionType(UNKNOWN_TYPE, true, UNKNOWN_TYPE);\n    registerNativeType(JSTypeNative.U2U_FUNCTION_TYPE, U2U_FUNCTION_TYPE);\n\n    // unknown constructor type, i.e. (?...) -> ? with the Unknown type\n    // as instance type\n    FunctionType U2U_CONSTRUCTOR_TYPE =\n        // This is equivalent to\n        // createConstructorType(UNKNOWN_TYPE, true, UNKNOWN_TYPE), but,\n        // in addition, overrides getInstanceType() to return the NoObject type\n        // instead of a new anonymous object.\n        new FunctionType(this, \"Function\", null,\n            createArrowType(\n                createParametersWithVarArgs(UNKNOWN_TYPE),\n                UNKNOWN_TYPE),\n            UNKNOWN_TYPE, null, true, true) {\n          private static final long serialVersionUID = 1L;\n\n          @Override public FunctionType getConstructor() {\n            return registry.getNativeFunctionType(\n                JSTypeNative.FUNCTION_FUNCTION_TYPE);\n          }\n        };\n\n    // The U2U_CONSTRUCTOR is weird, because it's the supertype of its\n    // own constructor.\n    registerNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE, U2U_CONSTRUCTOR_TYPE);\n    registerNativeType(\n        JSTypeNative.FUNCTION_INSTANCE_TYPE, U2U_CONSTRUCTOR_TYPE);\n\n    FUNCTION_FUNCTION_TYPE.setInstanceType(U2U_CONSTRUCTOR_TYPE);\n    U2U_CONSTRUCTOR_TYPE.setImplicitPrototype(FUNCTION_PROTOTYPE);\n\n    // least function type, i.e. (All...) -> NoType\n    FunctionType LEAST_FUNCTION_TYPE =\n        createNativeFunctionTypeWithVarArgs(NO_TYPE, ALL_TYPE);\n    registerNativeType(JSTypeNative.LEAST_FUNCTION_TYPE, LEAST_FUNCTION_TYPE);\n\n    // the 'this' object in the global scope\n    FunctionType GLOBAL_THIS_CTOR =\n        new FunctionType(this, \"global this\", null,\n            createArrowType(createParameters(false, ALL_TYPE), NUMBER_TYPE),\n            null, null, true, true);\n    ObjectType GLOBAL_THIS = GLOBAL_THIS_CTOR.getInstanceType();\n    registerNativeType(JSTypeNative.GLOBAL_THIS, GLOBAL_THIS);\n\n    // greatest function type, i.e. (NoType...) -> All\n    FunctionType GREATEST_FUNCTION_TYPE =\n        createNativeFunctionTypeWithVarArgs(ALL_TYPE, NO_TYPE);\n    registerNativeType(JSTypeNative.GREATEST_FUNCTION_TYPE,\n        GREATEST_FUNCTION_TYPE);\n\n    // Register the prototype property. See the comments below in\n    // registerPropertyOnType about the bootstrapping process.\n    registerPropertyOnType(\"prototype\", OBJECT_FUNCTION_TYPE);\n  }\n",
        "begin_line": 262,
        "end_line": 587,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0612
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSTypeRegistry.JSTypeRegistry#219",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.JSTypeRegistry(com.google.javascript.rhino.ErrorReporter, boolean)",
        "snippet": "  public JSTypeRegistry(\n      ErrorReporter reporter, boolean tolerateUndefinedValues) {\n    this.reporter = reporter;\n    this.emptyTemplateTypeMap = new TemplateTypeMap(\n        this, ImmutableList.<String>of(), ImmutableList.<JSType>of());\n    nativeTypes = new JSType[JSTypeNative.values().length];\n    namesToTypes = new HashMap<String, JSType>();\n    resetForTypeCheck();\n    this.tolerateUndefinedValues = tolerateUndefinedValues;\n  }\n",
        "begin_line": 219,
        "end_line": 228,
        "comment": "\n   * Constructs a new type registry populated with the built-in types.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0612
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSTypeRegistry.resetForTypeCheck#253",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.resetForTypeCheck()",
        "snippet": "  public void resetForTypeCheck() {\n    typesIndexedByProperty.clear();\n    eachRefTypeIndexedByProperty.clear();\n    initializeBuiltInTypes();\n    namesToTypes.clear();\n    namespaces.clear();\n    initializeRegistry();\n  }\n",
        "begin_line": 253,
        "end_line": 260,
        "comment": "\n   * Reset to run the TypeCheck pass.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0612
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSTypeRegistry.initializeRegistry#589",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.initializeRegistry()",
        "snippet": "  private void initializeRegistry() {\n    register(getNativeType(JSTypeNative.ARRAY_TYPE));\n    register(getNativeType(JSTypeNative.BOOLEAN_OBJECT_TYPE));\n    register(getNativeType(JSTypeNative.BOOLEAN_TYPE));\n    register(getNativeType(JSTypeNative.DATE_TYPE));\n    register(getNativeType(JSTypeNative.NULL_TYPE));\n    register(getNativeType(JSTypeNative.NULL_TYPE), \"Null\");\n    register(getNativeType(JSTypeNative.NUMBER_OBJECT_TYPE));\n    register(getNativeType(JSTypeNative.NUMBER_TYPE));\n    register(getNativeType(JSTypeNative.OBJECT_TYPE));\n    register(getNativeType(JSTypeNative.ERROR_TYPE));\n    register(getNativeType(JSTypeNative.URI_ERROR_TYPE));\n    register(getNativeType(JSTypeNative.EVAL_ERROR_TYPE));\n    register(getNativeType(JSTypeNative.TYPE_ERROR_TYPE));\n    register(getNativeType(JSTypeNative.RANGE_ERROR_TYPE));\n    register(getNativeType(JSTypeNative.REFERENCE_ERROR_TYPE));\n    register(getNativeType(JSTypeNative.SYNTAX_ERROR_TYPE));\n    register(getNativeType(JSTypeNative.REGEXP_TYPE));\n    register(getNativeType(JSTypeNative.STRING_OBJECT_TYPE));\n    register(getNativeType(JSTypeNative.STRING_TYPE));\n    register(getNativeType(JSTypeNative.VOID_TYPE));\n    register(getNativeType(JSTypeNative.VOID_TYPE), \"Undefined\");\n    register(getNativeType(JSTypeNative.VOID_TYPE), \"void\");\n    register(getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE), \"Function\");\n  }\n",
        "begin_line": 589,
        "end_line": 613,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0612
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSTypeRegistry.register#615",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.register(com.google.javascript.rhino.jstype.JSType)",
        "snippet": "  private void register(JSType type) {\n    register(type, type.toString());\n  }\n",
        "begin_line": 615,
        "end_line": 617,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0612
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSTypeRegistry.register#619",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.register(com.google.javascript.rhino.jstype.JSType, java.lang.String)",
        "snippet": "  private void register(JSType type, String name) {\n    Preconditions.checkArgument(\n        !name.contains(\"<\"), \"Type names cannot contain template annotations.\");\n\n    namesToTypes.put(name, type);\n\n    // Add all the namespaces in which this name lives.\n    while (name.indexOf('.') > 0) {\n      name = name.substring(0, name.lastIndexOf('.'));\n      namespaces.add(name);\n    }\n  }\n",
        "begin_line": 619,
        "end_line": 630,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0612
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSTypeRegistry.registerNativeType#632",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.registerNativeType(com.google.javascript.rhino.jstype.JSTypeNative, com.google.javascript.rhino.jstype.JSType)",
        "snippet": "  private void registerNativeType(JSTypeNative typeId, JSType type) {\n    nativeTypes[typeId.ordinal()] = type;\n  }\n",
        "begin_line": 632,
        "end_line": 634,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0612
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSTypeRegistry.registerPropertyOnType#648",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.registerPropertyOnType(java.lang.String, com.google.javascript.rhino.jstype.JSType)",
        "snippet": "  public void registerPropertyOnType(String propertyName, JSType type) {\n    UnionTypeBuilder typeSet = typesIndexedByProperty.get(propertyName);\n    if (typeSet == null) {\n      typeSet = new UnionTypeBuilder(this, PROPERTY_CHECKING_UNION_SIZE);\n      typesIndexedByProperty.put(propertyName, typeSet);\n    }\n\n    typeSet.addAlternate(type);\n    addReferenceTypeIndexedByProperty(propertyName, type);\n\n    // Clear cached values that depend on typesIndexedByProperty.\n    greatestSubtypeByProperty.remove(propertyName);\n  }\n",
        "begin_line": 648,
        "end_line": 660,
        "comment": "\n   * Tells the type system that {@code owner} may have a property named\n   * {@code propertyName}. This allows the registry to keep track of what\n   * types a property is defined upon.\n   *\n   * This is NOT the same as saying that {@code owner} must have a property\n   * named type. ObjectType#hasProperty attempts to minimize false positives\n   * (\"if we're not sure, then don't type check this property\"). The type\n   * registry, on the other hand, should attempt to minimize false negatives\n   * (\"if this property is assigned anywhere in the program, it must\n   * show up in the type registry\").\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0612
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSTypeRegistry.addReferenceTypeIndexedByProperty#662",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.addReferenceTypeIndexedByProperty(java.lang.String, com.google.javascript.rhino.jstype.JSType)",
        "snippet": "  private void addReferenceTypeIndexedByProperty(\n      String propertyName, JSType type) {\n    if (type instanceof ObjectType && ((ObjectType) type).hasReferenceName()) {\n      Map<String, ObjectType> typeSet =\n          eachRefTypeIndexedByProperty.get(propertyName);\n      if (typeSet == null) {\n        typeSet = Maps.newHashMap();\n        eachRefTypeIndexedByProperty.put(propertyName, typeSet);\n      }\n      ObjectType objType = (ObjectType) type;\n      typeSet.put(objType.getReferenceName(), objType);\n    } else if (type instanceof NamedType) {\n      addReferenceTypeIndexedByProperty(\n          propertyName, ((NamedType) type).getReferencedType());\n    } else if (type.isUnionType()) {\n      for (JSType alternate : type.toMaybeUnionType().getAlternates()) {\n        addReferenceTypeIndexedByProperty(propertyName, alternate);\n      }\n    }\n  }\n",
        "begin_line": 662,
        "end_line": 681,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0612
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSTypeRegistry.getNativeType#914",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.getNativeType(com.google.javascript.rhino.jstype.JSTypeNative)",
        "snippet": "  public JSType getNativeType(JSTypeNative typeId) {\n    return nativeTypes[typeId.ordinal()];\n  }\n",
        "begin_line": 914,
        "end_line": 916,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0612
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSTypeRegistry.getNativeObjectType#918",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.getNativeObjectType(com.google.javascript.rhino.jstype.JSTypeNative)",
        "snippet": "  public ObjectType getNativeObjectType(JSTypeNative typeId) {\n    return (ObjectType) getNativeType(typeId);\n  }\n",
        "begin_line": 918,
        "end_line": 920,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0612
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSTypeRegistry.getNativeFunctionType#922",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.getNativeFunctionType(com.google.javascript.rhino.jstype.JSTypeNative)",
        "snippet": "  public FunctionType getNativeFunctionType(JSTypeNative typeId) {\n    return (FunctionType) getNativeType(typeId);\n  }\n",
        "begin_line": 922,
        "end_line": 924,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0612
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSTypeRegistry.createOptionalType#995",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.createOptionalType(com.google.javascript.rhino.jstype.JSType)",
        "snippet": "  public JSType createOptionalType(JSType type) {\n    if (type instanceof UnknownType || type.isAllType()) {\n      return type;\n    } else {\n      return createUnionType(type, getNativeType(JSTypeNative.VOID_TYPE));\n    }\n  }\n",
        "begin_line": 995,
        "end_line": 1001,
        "comment": "\n   * Creates a type representing optional values of the given type.\n   * @return the union of the type and the void type\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0612
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSTypeRegistry.createUnionType#1039",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.createUnionType(com.google.javascript.rhino.jstype.JSType...)",
        "snippet": "  public JSType createUnionType(JSType... variants) {\n    UnionTypeBuilder builder = new UnionTypeBuilder(this);\n    for (JSType type : variants) {\n      builder.addAlternate(type);\n    }\n    return builder.build();\n  }\n",
        "begin_line": 1039,
        "end_line": 1045,
        "comment": "\n   * Creates a union type whose variants are the arguments.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0612
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSTypeRegistry.createArrowType#1075",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.createArrowType(com.google.javascript.rhino.Node, com.google.javascript.rhino.jstype.JSType)",
        "snippet": "  ArrowType createArrowType(Node parametersNode, JSType returnType) {\n    return new ArrowType(this, parametersNode, returnType);\n  }\n",
        "begin_line": 1075,
        "end_line": 1077,
        "comment": "\n   * Creates an arrow type, an abstract representation of the parameters\n   * and return value of a function.\n   *\n   * @param parametersNode the parameters' types, formatted as a Node with\n   *     param names and optionality info.\n   * @param returnType the function's return type\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0612
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSTypeRegistry.createArrowType#1085",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.createArrowType(com.google.javascript.rhino.Node)",
        "snippet": "  ArrowType createArrowType(Node parametersNode) {\n    return new ArrowType(this, parametersNode, null);\n  }\n",
        "begin_line": 1085,
        "end_line": 1087,
        "comment": "\n   * Creates an arrow type with an unknown return type.\n   *\n   * @param parametersNode the parameters' types, formatted as a Node with\n   *     param names and optionality info.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0612
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSTypeRegistry.createFunctionTypeWithVarArgs#1131",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.createFunctionTypeWithVarArgs(com.google.javascript.rhino.jstype.JSType, com.google.javascript.rhino.jstype.JSType...)",
        "snippet": "  public FunctionType createFunctionTypeWithVarArgs(\n      JSType returnType, JSType... parameterTypes) {\n    return createFunctionType(\n        returnType, createParametersWithVarArgs(parameterTypes));\n  }\n",
        "begin_line": 1131,
        "end_line": 1135,
        "comment": "\n   * Creates a function type. The last parameter type of the function is\n   * considered a variable length argument.\n   *\n   * @param returnType the function's return type\n   * @param parameterTypes the parameters' types\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0612
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSTypeRegistry.createNativeFunctionTypeWithVarArgs#1144",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.createNativeFunctionTypeWithVarArgs(com.google.javascript.rhino.jstype.JSType, com.google.javascript.rhino.jstype.JSType...)",
        "snippet": "  private FunctionType createNativeFunctionTypeWithVarArgs(\n      JSType returnType, JSType... parameterTypes) {\n    return createNativeFunctionType(\n        returnType, createParametersWithVarArgs(parameterTypes));\n  }\n",
        "begin_line": 1144,
        "end_line": 1148,
        "comment": "\n   * Creates a function type. The last parameter type of the function is\n   * considered a variable length argument.\n   *\n   * @param returnType the function's return type\n   * @param parameterTypes the parameters' types\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0612
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSTypeRegistry.createParametersWithVarArgs#1252",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.createParametersWithVarArgs(com.google.javascript.rhino.jstype.JSType...)",
        "snippet": "  public Node createParametersWithVarArgs(JSType... parameterTypes) {\n    return createParameters(true, parameterTypes);\n  }\n",
        "begin_line": 1252,
        "end_line": 1254,
        "comment": "\n   * Creates a tree hierarchy representing a typed argument list. The last\n   * parameter type is considered a variable length argument.\n   *\n   * @param parameterTypes the parameter types. The last element of this array\n   *     is considered a variable length argument.\n   * @return a tree hierarchy representing a typed argument list.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0612
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSTypeRegistry.createOptionalParameters#1260",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.createOptionalParameters(com.google.javascript.rhino.jstype.JSType...)",
        "snippet": "  public Node createOptionalParameters(JSType... parameterTypes) {\n    FunctionParamBuilder builder = new FunctionParamBuilder(this);\n    builder.addOptionalParams(parameterTypes);\n    return builder.build();\n  }\n",
        "begin_line": 1260,
        "end_line": 1264,
        "comment": "\n   * Creates a tree hierarchy representing a typed parameter list in which\n   * every parameter is optional.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0612
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSTypeRegistry.createParameters#1276",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.createParameters(boolean, com.google.javascript.rhino.jstype.JSType...)",
        "snippet": "  private Node createParameters(boolean lastVarArgs, JSType... parameterTypes) {\n    FunctionParamBuilder builder = new FunctionParamBuilder(this);\n    int max = parameterTypes.length - 1;\n    for (int i = 0; i <= max; i++) {\n      if (lastVarArgs && i == max) {\n        builder.addVarArgs(parameterTypes[i]);\n      } else {\n        builder.addRequiredParams(parameterTypes[i]);\n      }\n    }\n    return builder.build();\n  }\n",
        "begin_line": 1276,
        "end_line": 1287,
        "comment": "\n   * Creates a tree hierarchy representing a typed argument list.\n   *\n   * @param lastVarArgs whether the last type should considered as a variable\n   *     length argument.\n   * @param parameterTypes the parameter types. The last element of this array\n   *     is considered a variable length argument is {@code lastVarArgs} is\n   *     {@code true}.\n   * @return a tree hierarchy representing a typed argument list\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0612
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSTypeRegistry.createFunctionType#1296",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.createFunctionType(com.google.javascript.rhino.jstype.JSType, boolean, com.google.javascript.rhino.jstype.JSType...)",
        "snippet": "  public FunctionType createFunctionType(JSType returnType,\n      boolean lastVarArgs, JSType... parameterTypes) {\n    if (lastVarArgs) {\n      return createFunctionTypeWithVarArgs(returnType, parameterTypes);\n    } else {\n      return createFunctionType(returnType, parameterTypes);\n    }\n  }\n",
        "begin_line": 1296,
        "end_line": 1303,
        "comment": "\n   * Creates a function type.\n   * @param returnType the function's return type\n   * @param lastVarArgs whether the last parameter type should be considered as\n   * an extensible var_args parameter\n   * @param parameterTypes the parameters' types\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0612
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSTypeRegistry.createFunctionType#1339",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.createFunctionType(com.google.javascript.rhino.jstype.JSType, com.google.javascript.rhino.Node)",
        "snippet": "  public FunctionType createFunctionType(\n      JSType returnType, Node parameters) {\n    return new FunctionBuilder(this)\n        .withParamsNode(parameters)\n        .withReturnType(returnType)\n        .build();\n  }\n",
        "begin_line": 1339,
        "end_line": 1345,
        "comment": "\n   * @param parameters the function's parameters or {@code null}\n   *        to indicate that the parameter types are unknown.\n   * @param returnType the function's return type or {@code null} to indicate\n   *        that the return type is unknown.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0612
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSTypeRegistry.createNativeFunctionType#1347",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.createNativeFunctionType(com.google.javascript.rhino.jstype.JSType, com.google.javascript.rhino.Node)",
        "snippet": "  private FunctionType createNativeFunctionType(\n      JSType returnType, Node parameters) {\n    return new FunctionBuilder(this)\n        .withParamsNode(parameters)\n        .withReturnType(returnType)\n        .forNativeType()\n        .build();\n  }\n",
        "begin_line": 1347,
        "end_line": 1354,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0612
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSTypeRegistry.createTemplateTypeMap#1467",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.createTemplateTypeMap(com.google.common.collect.ImmutableList<java.lang.String>, com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.JSType>)",
        "snippet": "  public TemplateTypeMap createTemplateTypeMap(\n      ImmutableList<String> templateKeys,\n      ImmutableList<JSType> templateValues) {\n    templateKeys = templateKeys == null ?\n        ImmutableList.<String>of() : templateKeys;\n    templateValues = templateValues == null ?\n        ImmutableList.<JSType>of() : templateValues;\n\n    return (templateKeys.isEmpty() && templateValues.isEmpty()) ?\n        emptyTemplateTypeMap :\n        new TemplateTypeMap(this, templateKeys, templateValues);\n  }\n",
        "begin_line": 1467,
        "end_line": 1478,
        "comment": "\n   * Creates a template type map from the specified list of template keys and\n   * template value types.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0612
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSType.JSType#108",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "signature": "com.google.javascript.rhino.jstype.JSType.JSType(com.google.javascript.rhino.jstype.JSTypeRegistry)",
        "snippet": "  JSType(JSTypeRegistry registry) {\n    this(registry, null);\n  }\n",
        "begin_line": 108,
        "end_line": 110,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0612
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSType.JSType#112",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "signature": "com.google.javascript.rhino.jstype.JSType.JSType(com.google.javascript.rhino.jstype.JSTypeRegistry, com.google.javascript.rhino.jstype.TemplateTypeMap)",
        "snippet": "  JSType(JSTypeRegistry registry, TemplateTypeMap templateTypeMap) {\n    this.registry = registry;\n\n    this.templateTypeMap = templateTypeMap == null ?\n        registry.createTemplateTypeMap(null, null) : templateTypeMap;\n  }\n",
        "begin_line": 112,
        "end_line": 117,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0612
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSType.getNativeType#122",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "signature": "com.google.javascript.rhino.jstype.JSType.getNativeType(com.google.javascript.rhino.jstype.JSTypeNative)",
        "snippet": "  JSType getNativeType(JSTypeNative typeId) {\n    return registry.getNativeType(typeId);\n  }\n",
        "begin_line": 122,
        "end_line": 124,
        "comment": "\n   * Utility method for less verbose code.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0612
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSType.isNoType#164",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "signature": "com.google.javascript.rhino.jstype.JSType.isNoType()",
        "snippet": "  public boolean isNoType() {\n    return false;\n  }\n",
        "begin_line": 164,
        "end_line": 166,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0612
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSType.isNoResolvedType#168",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "signature": "com.google.javascript.rhino.jstype.JSType.isNoResolvedType()",
        "snippet": "  public boolean isNoResolvedType() {\n    return false;\n  }\n",
        "begin_line": 168,
        "end_line": 170,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0612
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSType.isNoObjectType#172",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "signature": "com.google.javascript.rhino.jstype.JSType.isNoObjectType()",
        "snippet": "  public boolean isNoObjectType() {\n    return false;\n  }\n",
        "begin_line": 172,
        "end_line": 174,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0612
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSType.isEmptyType#176",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "signature": "com.google.javascript.rhino.jstype.JSType.isEmptyType()",
        "snippet": "  public final boolean isEmptyType() {\n    return isNoType() || isNoObjectType() || isNoResolvedType() ||\n        (registry.getNativeFunctionType(\n             JSTypeNative.LEAST_FUNCTION_TYPE) == this);\n  }\n",
        "begin_line": 176,
        "end_line": 180,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0612
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSType.isAllType#253",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "signature": "com.google.javascript.rhino.jstype.JSType.isAllType()",
        "snippet": "  public boolean isAllType() {\n    return false;\n  }\n",
        "begin_line": 253,
        "end_line": 255,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0612
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSType.isUnknownType#257",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "signature": "com.google.javascript.rhino.jstype.JSType.isUnknownType()",
        "snippet": "  public boolean isUnknownType() {\n    return false;\n  }\n",
        "begin_line": 257,
        "end_line": 259,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0612
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSType.isUnionType#265",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "signature": "com.google.javascript.rhino.jstype.JSType.isUnionType()",
        "snippet": "  public final boolean isUnionType() {\n    return toMaybeUnionType() != null;\n  }\n",
        "begin_line": 265,
        "end_line": 267,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0612
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSType.toMaybeUnionType#324",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "signature": "com.google.javascript.rhino.jstype.JSType.toMaybeUnionType()",
        "snippet": "  public UnionType toMaybeUnionType() {\n    return null;\n  }\n",
        "begin_line": 324,
        "end_line": 326,
        "comment": "\n   * Downcasts this to a UnionType, or returns null if this is not a UnionType.\n   *\n   * Named in honor of Haskell's Maybe type constructor.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0612
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSType.isFunctionType#334",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "signature": "com.google.javascript.rhino.jstype.JSType.isFunctionType()",
        "snippet": "  public final boolean isFunctionType() {\n    return toMaybeFunctionType() != null;\n  }\n",
        "begin_line": 334,
        "end_line": 336,
        "comment": " Returns true if toMaybeFunctionType returns a non-null FunctionType. ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0612
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSType.toMaybeFunctionType#350",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "signature": "com.google.javascript.rhino.jstype.JSType.toMaybeFunctionType()",
        "snippet": "  public FunctionType toMaybeFunctionType() {\n    return null;\n  }\n",
        "begin_line": 350,
        "end_line": 352,
        "comment": "\n   * Downcasts this to a FunctionType, or returns null if this is not\n   * a function.\n   *\n   * For the purposes of this function, we define a MaybeFunctionType as any\n   * type in the sub-lattice\n   * { x | LEAST_FUNCTION_TYPE <= x <= GREATEST_FUNCTION_TYPE }\n   * This definition excludes bottom types like NoType and NoObjectType.\n   *\n   * This definition is somewhat arbitrary and axiomatic, but this is the\n   * definition that makes the most sense for the most callers.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0612
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSType.isRecordType#387",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "signature": "com.google.javascript.rhino.jstype.JSType.isRecordType()",
        "snippet": "  public boolean isRecordType() {\n    return toMaybeRecordType() != null;\n  }\n",
        "begin_line": 387,
        "end_line": 389,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0612
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSType.toMaybeRecordType#395",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "signature": "com.google.javascript.rhino.jstype.JSType.toMaybeRecordType()",
        "snippet": "  RecordType toMaybeRecordType() {\n    return null;\n  }\n",
        "begin_line": 395,
        "end_line": 397,
        "comment": "\n   * Downcasts this to a RecordType, or returns null if this is not\n   * a RecordType.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0612
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSType.isTemplatizedType#399",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "signature": "com.google.javascript.rhino.jstype.JSType.isTemplatizedType()",
        "snippet": "  public final boolean isTemplatizedType() {\n    return toMaybeTemplatizedType() != null;\n  }\n",
        "begin_line": 399,
        "end_line": 401,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0612
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSType.toMaybeTemplatizedType#407",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "signature": "com.google.javascript.rhino.jstype.JSType.toMaybeTemplatizedType()",
        "snippet": "  public TemplatizedType toMaybeTemplatizedType() {\n    return null;\n  }\n",
        "begin_line": 407,
        "end_line": 409,
        "comment": "\n   * Downcasts this to a TemplatizedType, or returns null if this is not\n   * a function.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0612
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSType.hasAnyTemplateTypes#437",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "signature": "com.google.javascript.rhino.jstype.JSType.hasAnyTemplateTypes()",
        "snippet": "  public boolean hasAnyTemplateTypes() {\n    if (!this.inTemplatedCheckVisit) {\n      this.inTemplatedCheckVisit = true;\n      boolean result = hasAnyTemplateTypesInternal();\n      this.inTemplatedCheckVisit = false;\n      return result;\n    } else {\n      // prevent infinite recursion, this is \"not yet\".\n      return false;\n    }\n  }\n",
        "begin_line": 437,
        "end_line": 447,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0612
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSType.hasAnyTemplateTypesInternal#449",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "signature": "com.google.javascript.rhino.jstype.JSType.hasAnyTemplateTypesInternal()",
        "snippet": "  boolean hasAnyTemplateTypesInternal() {\n    return templateTypeMap.hasAnyTemplateTypesInternal();\n  }\n",
        "begin_line": 449,
        "end_line": 451,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0612
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSType.getTemplateTypeMap#456",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "signature": "com.google.javascript.rhino.jstype.JSType.getTemplateTypeMap()",
        "snippet": "  public TemplateTypeMap getTemplateTypeMap() {\n    return templateTypeMap;\n  }\n",
        "begin_line": 456,
        "end_line": 458,
        "comment": "\n   * Returns the template type map associated with this type.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0612
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSType.isNominalType#480",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "signature": "com.google.javascript.rhino.jstype.JSType.isNominalType()",
        "snippet": "  public boolean isNominalType() {\n    return false;\n  }\n",
        "begin_line": 480,
        "end_line": 482,
        "comment": "\n   * Whether this type is a nominal type (a named instance object or\n   * a named enum).\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0612
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSType.isEquivalentTo#535",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "signature": "com.google.javascript.rhino.jstype.JSType.isEquivalentTo(com.google.javascript.rhino.jstype.JSType)",
        "snippet": "  public final boolean isEquivalentTo(JSType that) {\n    return checkEquivalenceHelper(that, EquivalenceMethod.IDENTITY);\n  }\n",
        "begin_line": 535,
        "end_line": 537,
        "comment": "\n   * Checks if two types are equivalent.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0612
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSType.hashCode#644",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "signature": "com.google.javascript.rhino.jstype.JSType.hashCode()",
        "snippet": "  @Override\n  public int hashCode() {\n    return System.identityHashCode(this);\n  }\n",
        "begin_line": 644,
        "end_line": 647,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0612
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSType.toObjectType#764",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "signature": "com.google.javascript.rhino.jstype.JSType.toObjectType()",
        "snippet": "  public ObjectType toObjectType() {\n    return this instanceof ObjectType ? (ObjectType) this : null;\n  }\n",
        "begin_line": 764,
        "end_line": 766,
        "comment": "\n   * Casts this to an ObjectType, or returns null if this is not an ObjectType.\n   * If this is a scalar type, it will *not* be converted to an object type.\n   * If you want to simulate JS autoboxing or dereferencing, you should use\n   * autoboxesTo() or dereference().\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0612
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSType.isSubtype#1221",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "signature": "com.google.javascript.rhino.jstype.JSType.isSubtype(com.google.javascript.rhino.jstype.JSType)",
        "snippet": "  public boolean isSubtype(JSType that) {\n    return isSubtypeHelper(this, that);\n  }\n",
        "begin_line": 1221,
        "end_line": 1223,
        "comment": "\n   * Checks whether {@code this} is a subtype of {@code that}.<p>\n   *\n   * Subtyping rules:\n   * <ul>\n   * <li>(unknown) &mdash; every type is a subtype of the Unknown type.</li>\n   * <li>(no) &mdash; the No type is a subtype of every type.</li>\n   * <li>(no-object) &mdash; the NoObject type is a subtype of every object\n   * type (i.e. subtypes of the Object type).</li>\n   * <li>(ref) &mdash; a type is a subtype of itself.</li>\n   * <li>(union-l) &mdash; A union type is a subtype of a type U if all the\n   * union type's constituents are a subtype of U. Formally<br>\n   * {@code (T<sub>1</sub>, &hellip;, T<sub>n</sub>) &lt;: U} if and only\n   * {@code T<sub>k</sub> &lt;: U} for all {@code k &isin; 1..n}.</li>\n   * <li>(union-r) &mdash; A type U is a subtype of a union type if it is a\n   * subtype of one of the union type's constituents. Formally<br>\n   * {@code U &lt;: (T<sub>1</sub>, &hellip;, T<sub>n</sub>)} if and only\n   * if {@code U &lt;: T<sub>k</sub>} for some index {@code k}.</li>\n   * <li>(objects) &mdash; an Object {@code O<sub>1</sub>} is a subtype\n   * of an object {@code O<sub>2</sub>} if it has more properties\n   * than {@code O<sub>2</sub>} and all common properties are\n   * pairwise subtypes.</li>\n   * </ul>\n   *\n   * @return {@code this &lt;: that}\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0612
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSType.isSubtypeHelper#1229",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "signature": "com.google.javascript.rhino.jstype.JSType.isSubtypeHelper(com.google.javascript.rhino.jstype.JSType, com.google.javascript.rhino.jstype.JSType)",
        "snippet": "  static boolean isSubtypeHelper(JSType thisType, JSType thatType) {\n    // unknown\n    if (thatType.isUnknownType()) {\n      return true;\n    }\n    // all type\n    if (thatType.isAllType()) {\n      return true;\n    }\n    // equality\n    if (thisType.isEquivalentTo(thatType)) {\n      return true;\n    }\n    // unions\n    if (thatType.isUnionType()) {\n      UnionType union = thatType.toMaybeUnionType();\n      for (JSType element : union.alternates) {\n        if (thisType.isSubtype(element)) {\n          return true;\n        }\n      }\n      return false;\n    }\n\n    // templatized types.\n    if (thisType.isTemplatizedType()) {\n      return !areIncompatibleArrays(thisType, thatType) &&\n          thisType.toMaybeTemplatizedType().getReferencedType().isSubtype(\n              thatType);\n    }\n    if (thatType.isTemplatizedType()) {\n      if (!isExemptFromTemplateTypeInvariance(thatType) &&\n          !thisType.getTemplateTypeMap().checkEquivalenceHelper(\n              thatType.getTemplateTypeMap(), EquivalenceMethod.IDENTITY)) {\n        return false;\n      }\n    }\n\n    // proxy types\n    if (thatType instanceof ProxyObjectType) {\n      return thisType.isSubtype(\n          ((ProxyObjectType) thatType).getReferencedTypeInternal());\n    }\n    return false;\n  }\n",
        "begin_line": 1229,
        "end_line": 1273,
        "comment": "\n   * A generic implementation meant to be used as a helper for common subtyping\n   * cases.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0612
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSType.toString#1418",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "signature": "com.google.javascript.rhino.jstype.JSType.toString()",
        "snippet": "  @Override\n  public String toString() {\n    return toStringHelper(false);\n  }\n",
        "begin_line": 1418,
        "end_line": 1421,
        "comment": "\n   * A string representation of this type, suitable for printing\n   * in warnings.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0612
        },
        "num_failing_tests": 1
    },
    {
        "name": "InstanceObjectType.InstanceObjectType#58",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/InstanceObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.InstanceObjectType",
        "signature": "com.google.javascript.rhino.jstype.InstanceObjectType.InstanceObjectType(com.google.javascript.rhino.jstype.JSTypeRegistry, com.google.javascript.rhino.jstype.FunctionType, boolean)",
        "snippet": "  InstanceObjectType(JSTypeRegistry registry, FunctionType constructor,\n                     boolean isNativeType) {\n    super(registry, null, null, isNativeType, constructor.getTemplateTypeMap());\n    Preconditions.checkNotNull(constructor);\n    this.constructor = constructor;\n  }\n",
        "begin_line": 58,
        "end_line": 63,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0612
        },
        "num_failing_tests": 1
    },
    {
        "name": "InstanceObjectType.getReferenceName#65",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/InstanceObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.InstanceObjectType",
        "signature": "com.google.javascript.rhino.jstype.InstanceObjectType.getReferenceName()",
        "snippet": "  @Override\n  public String getReferenceName() {\n    return getConstructor().getReferenceName();\n  }\n",
        "begin_line": 65,
        "end_line": 68,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0612
        },
        "num_failing_tests": 1
    },
    {
        "name": "InstanceObjectType.hasReferenceName#70",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/InstanceObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.InstanceObjectType",
        "signature": "com.google.javascript.rhino.jstype.InstanceObjectType.hasReferenceName()",
        "snippet": "  @Override\n  public boolean hasReferenceName() {\n    return getConstructor().hasReferenceName();\n  }\n",
        "begin_line": 70,
        "end_line": 73,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0612
        },
        "num_failing_tests": 1
    },
    {
        "name": "InstanceObjectType.getImplicitPrototype#75",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/InstanceObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.InstanceObjectType",
        "signature": "com.google.javascript.rhino.jstype.InstanceObjectType.getImplicitPrototype()",
        "snippet": "  @Override\n  public ObjectType getImplicitPrototype() {\n    return getConstructor().getPrototype();\n  }\n",
        "begin_line": 75,
        "end_line": 78,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0612
        },
        "num_failing_tests": 1
    },
    {
        "name": "InstanceObjectType.getConstructor#80",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/InstanceObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.InstanceObjectType",
        "signature": "com.google.javascript.rhino.jstype.InstanceObjectType.getConstructor()",
        "snippet": "  @Override\n  public FunctionType getConstructor() {\n    return constructor;\n  }\n",
        "begin_line": 80,
        "end_line": 83,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0612
        },
        "num_failing_tests": 1
    },
    {
        "name": "InstanceObjectType.toStringHelper#95",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/InstanceObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.InstanceObjectType",
        "signature": "com.google.javascript.rhino.jstype.InstanceObjectType.toStringHelper(boolean)",
        "snippet": "  @Override\n  String toStringHelper(boolean forAnnotations) {\n    if (constructor.hasReferenceName()) {\n      return constructor.getReferenceName();\n    } else {\n      return super.toStringHelper(forAnnotations);\n    }\n  }\n",
        "begin_line": 95,
        "end_line": 102,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0612
        },
        "num_failing_tests": 1
    },
    {
        "name": "InstanceObjectType.isNominalType#151",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/InstanceObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.InstanceObjectType",
        "signature": "com.google.javascript.rhino.jstype.InstanceObjectType.isNominalType()",
        "snippet": "  @Override\n  public boolean isNominalType() {\n    return hasReferenceName();\n  }\n",
        "begin_line": 151,
        "end_line": 154,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0612
        },
        "num_failing_tests": 1
    },
    {
        "name": "InstanceObjectType.hashCode#160",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/InstanceObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.InstanceObjectType",
        "signature": "com.google.javascript.rhino.jstype.InstanceObjectType.hashCode()",
        "snippet": "  @Override\n  public int hashCode() {\n    if (hasReferenceName()) {\n      return getReferenceName().hashCode();\n    } else {\n      return super.hashCode();\n    }\n  }\n",
        "begin_line": 160,
        "end_line": 167,
        "comment": "\n   * If this is equal to a NamedType object, its hashCode must be equal\n   * to the hashCode of the NamedType object.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0612
        },
        "num_failing_tests": 1
    },
    {
        "name": "InstanceObjectType.getCtorExtendedInterfaces#174",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/InstanceObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.InstanceObjectType",
        "signature": "com.google.javascript.rhino.jstype.InstanceObjectType.getCtorExtendedInterfaces()",
        "snippet": "  @Override\n  public Iterable<ObjectType> getCtorExtendedInterfaces() {\n    return getConstructor().getExtendedInterfaces();\n  }\n",
        "begin_line": 174,
        "end_line": 177,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0612
        },
        "num_failing_tests": 1
    },
    {
        "name": "FunctionType.FunctionType#134",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
        "class_name": "com.google.javascript.rhino.jstype.FunctionType",
        "signature": "com.google.javascript.rhino.jstype.FunctionType.FunctionType(com.google.javascript.rhino.jstype.JSTypeRegistry, java.lang.String, com.google.javascript.rhino.Node, com.google.javascript.rhino.jstype.ArrowType, com.google.javascript.rhino.jstype.JSType, com.google.javascript.rhino.jstype.TemplateTypeMap, boolean, boolean)",
        "snippet": "  FunctionType(JSTypeRegistry registry, String name, Node source,\n               ArrowType arrowType, JSType typeOfThis,\n               TemplateTypeMap templateTypeMap,\n               boolean isConstructor, boolean nativeType) {\n    super(registry, name,\n        registry.getNativeObjectType(JSTypeNative.FUNCTION_INSTANCE_TYPE),\n        nativeType, templateTypeMap);\n    setPrettyPrint(true);\n\n    Preconditions.checkArgument(source == null ||\n        Token.FUNCTION == source.getType());\n    Preconditions.checkNotNull(arrowType);\n    this.source = source;\n    if (isConstructor) {\n      this.kind = Kind.CONSTRUCTOR;\n      this.propAccess = PropAccess.ANY;\n      this.typeOfThis = typeOfThis != null ?\n          typeOfThis : new InstanceObjectType(registry, this, nativeType);\n    } else {\n      this.kind = Kind.ORDINARY;\n      this.typeOfThis = typeOfThis != null ?\n          typeOfThis :\n          registry.getNativeObjectType(JSTypeNative.UNKNOWN_TYPE);\n    }\n    this.call = arrowType;\n  }\n",
        "begin_line": 134,
        "end_line": 159,
        "comment": " Creates an instance for a function that might be a constructor. ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0612
        },
        "num_failing_tests": 1
    },
    {
        "name": "FunctionType.isConstructor#189",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
        "class_name": "com.google.javascript.rhino.jstype.FunctionType",
        "signature": "com.google.javascript.rhino.jstype.FunctionType.isConstructor()",
        "snippet": "  @Override\n  public boolean isConstructor() {\n    return kind == Kind.CONSTRUCTOR;\n  }\n",
        "begin_line": 189,
        "end_line": 192,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0612
        },
        "num_failing_tests": 1
    },
    {
        "name": "FunctionType.isInterface#194",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
        "class_name": "com.google.javascript.rhino.jstype.FunctionType",
        "signature": "com.google.javascript.rhino.jstype.FunctionType.isInterface()",
        "snippet": "  @Override\n  public boolean isInterface() {\n    return kind == Kind.INTERFACE;\n  }\n",
        "begin_line": 194,
        "end_line": 197,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0612
        },
        "num_failing_tests": 1
    },
    {
        "name": "FunctionType.toMaybeFunctionType#252",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
        "class_name": "com.google.javascript.rhino.jstype.FunctionType",
        "signature": "com.google.javascript.rhino.jstype.FunctionType.toMaybeFunctionType()",
        "snippet": "  @Override\n  public FunctionType toMaybeFunctionType() {\n    return this;\n  }\n",
        "begin_line": 252,
        "end_line": 255,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0612
        },
        "num_failing_tests": 1
    },
    {
        "name": "FunctionType.getInternalArrowType#329",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
        "class_name": "com.google.javascript.rhino.jstype.FunctionType",
        "signature": "com.google.javascript.rhino.jstype.FunctionType.getInternalArrowType()",
        "snippet": "  ArrowType getInternalArrowType() {\n    return call;\n  }\n",
        "begin_line": 329,
        "end_line": 331,
        "comment": " Gets the internal arrow type. For use by subclasses only. ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0612
        },
        "num_failing_tests": 1
    },
    {
        "name": "FunctionType.getPrototype#363",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
        "class_name": "com.google.javascript.rhino.jstype.FunctionType",
        "signature": "com.google.javascript.rhino.jstype.FunctionType.getPrototype()",
        "snippet": "  public ObjectType getPrototype() {\n    // lazy initialization of the prototype field\n    if (prototypeSlot == null) {\n      String refName = getReferenceName();\n      if (refName == null) {\n        // Someone is trying to access the prototype of a structural function.\n        // We don't want to give real properties to this prototype, because\n        // then it would propagate to all structural functions.\n        setPrototypeNoCheck(\n           registry.getNativeObjectType(JSTypeNative.UNKNOWN_TYPE),\n           null);\n      } else {\n        setPrototype(\n            new PrototypeObjectType(\n                registry,\n                getReferenceName() + \".prototype\",\n                registry.getNativeObjectType(OBJECT_TYPE),\n                isNativeObjectType(), null),\n            null);\n      }\n    }\n    return (ObjectType) prototypeSlot.getType();\n  }\n",
        "begin_line": 363,
        "end_line": 385,
        "comment": "\n   * Gets the {@code prototype} property of this function type. This is\n   * equivalent to {@code (ObjectType) getPropertyType(\"prototype\")}.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0612
        },
        "num_failing_tests": 1
    },
    {
        "name": "FunctionType.setPrototypeBasedOn#392",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
        "class_name": "com.google.javascript.rhino.jstype.FunctionType",
        "signature": "com.google.javascript.rhino.jstype.FunctionType.setPrototypeBasedOn(com.google.javascript.rhino.jstype.ObjectType)",
        "snippet": "  public void setPrototypeBasedOn(ObjectType baseType) {\n    setPrototypeBasedOn(baseType, null);\n  }\n",
        "begin_line": 392,
        "end_line": 394,
        "comment": "\n   * Sets the prototype, creating the prototype object from the given\n   * base type.\n   * @param baseType The base type.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0612
        },
        "num_failing_tests": 1
    },
    {
        "name": "FunctionType.setPrototypeBasedOn#396",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
        "class_name": "com.google.javascript.rhino.jstype.FunctionType",
        "signature": "com.google.javascript.rhino.jstype.FunctionType.setPrototypeBasedOn(com.google.javascript.rhino.jstype.ObjectType, com.google.javascript.rhino.Node)",
        "snippet": "  void setPrototypeBasedOn(ObjectType baseType, Node propertyNode) {\n    // This is a bit weird. We need to successfully handle these\n    // two cases:\n    // Foo.prototype = new Bar();\n    // and\n    // Foo.prototype = {baz: 3};\n    // In the first case, we do not want new properties to get\n    // added to Bar. In the second case, we do want new properties\n    // to get added to the type of the anonymous object.\n    //\n    // We handle this by breaking it into two cases:\n    //\n    // In the first case, we create a new PrototypeObjectType and set\n    // its implicit prototype to the type being assigned. This ensures\n    // that Bar will not get any properties of Foo.prototype, but properties\n    // later assigned to Bar will get inherited properly.\n    //\n    // In the second case, we just use the anonymous object as the prototype.\n    if (baseType.hasReferenceName() ||\n        isNativeObjectType() ||\n        baseType.isFunctionPrototypeType()) {\n      baseType = new PrototypeObjectType(\n          registry, getReferenceName() + \".prototype\", baseType);\n    }\n    setPrototype(baseType, propertyNode);\n  }\n",
        "begin_line": 396,
        "end_line": 421,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0612
        },
        "num_failing_tests": 1
    },
    {
        "name": "FunctionType.setPrototype#428",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
        "class_name": "com.google.javascript.rhino.jstype.FunctionType",
        "signature": "com.google.javascript.rhino.jstype.FunctionType.setPrototype(com.google.javascript.rhino.jstype.ObjectType, com.google.javascript.rhino.Node)",
        "snippet": "  boolean setPrototype(ObjectType prototype, Node propertyNode) {\n    if (prototype == null) {\n      return false;\n    }\n    // getInstanceType fails if the function is not a constructor\n    if (isConstructor() && prototype == getInstanceType()) {\n      return false;\n    }\n    return setPrototypeNoCheck(prototype, propertyNode);\n  }\n",
        "begin_line": 428,
        "end_line": 437,
        "comment": "\n   * Sets the prototype.\n   * @param prototype the prototype. If this value is {@code null} it will\n   *        silently be discarded.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0612
        },
        "num_failing_tests": 1
    },
    {
        "name": "FunctionType.setPrototypeNoCheck#440",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
        "class_name": "com.google.javascript.rhino.jstype.FunctionType",
        "signature": "com.google.javascript.rhino.jstype.FunctionType.setPrototypeNoCheck(com.google.javascript.rhino.jstype.ObjectType, com.google.javascript.rhino.Node)",
        "snippet": "  private boolean setPrototypeNoCheck(ObjectType prototype, Node propertyNode) {\n    ObjectType oldPrototype = prototypeSlot == null\n        ? null : (ObjectType) prototypeSlot.getType();\n    boolean replacedPrototype = oldPrototype != null;\n\n    this.prototypeSlot = new Property(\"prototype\", prototype, true,\n        propertyNode == null ? source : propertyNode);\n    prototype.setOwnerFunction(this);\n\n    if (oldPrototype != null) {\n      // Disassociating the old prototype makes this easier to debug--\n      // we don't have to worry about two prototypes running around.\n      oldPrototype.setOwnerFunction(null);\n    }\n\n    if (isConstructor() || isInterface()) {\n      FunctionType superClass = getSuperClassConstructor();\n      if (superClass != null) {\n        superClass.addSubType(this);\n      }\n\n      if (isInterface()) {\n        for (ObjectType interfaceType : getExtendedInterfaces()) {\n          if (interfaceType.getConstructor() != null) {\n            interfaceType.getConstructor().addSubType(this);\n          }\n        }\n      }\n    }\n\n    if (replacedPrototype) {\n      clearCachedValues();\n    }\n\n    return true;\n  }\n",
        "begin_line": 440,
        "end_line": 475,
        "comment": " Set the prototype without doing any sanity checks. ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0612
        },
        "num_failing_tests": 1
    },
    {
        "name": "FunctionType.getExtendedInterfaces#566",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
        "class_name": "com.google.javascript.rhino.jstype.FunctionType",
        "signature": "com.google.javascript.rhino.jstype.FunctionType.getExtendedInterfaces()",
        "snippet": "  public Iterable<ObjectType> getExtendedInterfaces() {\n    return extendedInterfaces;\n  }\n",
        "begin_line": 566,
        "end_line": 568,
        "comment": " Returns interfaces directly extended by an interface ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0612
        },
        "num_failing_tests": 1
    },
    {
        "name": "FunctionType.getSuperClassConstructor#831",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
        "class_name": "com.google.javascript.rhino.jstype.FunctionType",
        "signature": "com.google.javascript.rhino.jstype.FunctionType.getSuperClassConstructor()",
        "snippet": "  public FunctionType getSuperClassConstructor() {\n    Preconditions.checkArgument(isConstructor() || isInterface());\n    ObjectType maybeSuperInstanceType = getPrototype().getImplicitPrototype();\n    if (maybeSuperInstanceType == null) {\n      return null;\n    }\n    return maybeSuperInstanceType.getConstructor();\n  }\n",
        "begin_line": 831,
        "end_line": 838,
        "comment": "\n   * Given a constructor or an interface type, get its superclass constructor\n   * or {@code null} if none exists.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0612
        },
        "num_failing_tests": 1
    },
    {
        "name": "FunctionType.getInstanceType#1061",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
        "class_name": "com.google.javascript.rhino.jstype.FunctionType",
        "signature": "com.google.javascript.rhino.jstype.FunctionType.getInstanceType()",
        "snippet": "  public ObjectType getInstanceType() {\n    Preconditions.checkState(hasInstanceType());\n    return typeOfThis.toObjectType();\n  }\n",
        "begin_line": 1061,
        "end_line": 1064,
        "comment": "\n   * Gets the type of instance of this function.\n   * @throws IllegalStateException if this function is not a constructor\n   *         (see {@link #isConstructor()}).\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0612
        },
        "num_failing_tests": 1
    },
    {
        "name": "FunctionType.setInstanceType#1070",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
        "class_name": "com.google.javascript.rhino.jstype.FunctionType",
        "signature": "com.google.javascript.rhino.jstype.FunctionType.setInstanceType(com.google.javascript.rhino.jstype.ObjectType)",
        "snippet": "  void setInstanceType(ObjectType instanceType) {\n    typeOfThis = instanceType;\n  }\n",
        "begin_line": 1070,
        "end_line": 1072,
        "comment": "\n   * Sets the instance type. This should only be used for special\n   * native types.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0612
        },
        "num_failing_tests": 1
    },
    {
        "name": "FunctionType.hasInstanceType#1077",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
        "class_name": "com.google.javascript.rhino.jstype.FunctionType",
        "signature": "com.google.javascript.rhino.jstype.FunctionType.hasInstanceType()",
        "snippet": "  public boolean hasInstanceType() {\n    return isConstructor() || isInterface();\n  }\n",
        "begin_line": 1077,
        "end_line": 1079,
        "comment": "\n   * Returns whether this function type has an instance type.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0612
        },
        "num_failing_tests": 1
    },
    {
        "name": "FunctionType.addSubType#1116",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
        "class_name": "com.google.javascript.rhino.jstype.FunctionType",
        "signature": "com.google.javascript.rhino.jstype.FunctionType.addSubType(com.google.javascript.rhino.jstype.FunctionType)",
        "snippet": "  private void addSubType(FunctionType subType) {\n    if (subTypes == null) {\n      subTypes = Lists.newArrayList();\n    }\n    subTypes.add(subType);\n  }\n",
        "begin_line": 1116,
        "end_line": 1121,
        "comment": " Adds a type to the list of subtypes for this type. ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0612
        },
        "num_failing_tests": 1
    },
    {
        "name": "FunctionType.hasCachedValues#1153",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
        "class_name": "com.google.javascript.rhino.jstype.FunctionType",
        "signature": "com.google.javascript.rhino.jstype.FunctionType.hasCachedValues()",
        "snippet": "  @Override\n  public boolean hasCachedValues() {\n    return prototypeSlot != null || super.hasCachedValues();\n  }\n",
        "begin_line": 1153,
        "end_line": 1156,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0612
        },
        "num_failing_tests": 1
    },
    {
        "name": "FunctionParamBuilder.FunctionParamBuilder#54",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionParamBuilder.java",
        "class_name": "com.google.javascript.rhino.jstype.FunctionParamBuilder",
        "signature": "com.google.javascript.rhino.jstype.FunctionParamBuilder.FunctionParamBuilder(com.google.javascript.rhino.jstype.JSTypeRegistry)",
        "snippet": "  public FunctionParamBuilder(JSTypeRegistry registry) {\n    this.registry = registry;\n  }\n",
        "begin_line": 54,
        "end_line": 56,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0612
        },
        "num_failing_tests": 1
    },
    {
        "name": "FunctionParamBuilder.addRequiredParams#62",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionParamBuilder.java",
        "class_name": "com.google.javascript.rhino.jstype.FunctionParamBuilder",
        "signature": "com.google.javascript.rhino.jstype.FunctionParamBuilder.addRequiredParams(com.google.javascript.rhino.jstype.JSType...)",
        "snippet": "  public boolean addRequiredParams(JSType ...types) {\n    if (hasOptionalOrVarArgs()) {\n      return false;\n    }\n\n    for (JSType type : types) {\n      newParameter(type);\n    }\n    return true;\n  }\n",
        "begin_line": 62,
        "end_line": 71,
        "comment": "\n   * Add parameters of the given type to the end of the param list.\n   * @return False if this is called after optional params are added.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0612
        },
        "num_failing_tests": 1
    },
    {
        "name": "FunctionParamBuilder.addOptionalParams#79",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionParamBuilder.java",
        "class_name": "com.google.javascript.rhino.jstype.FunctionParamBuilder",
        "signature": "com.google.javascript.rhino.jstype.FunctionParamBuilder.addOptionalParams(com.google.javascript.rhino.jstype.JSType...)",
        "snippet": "  public boolean addOptionalParams(JSType ...types) {\n    if (hasVarArgs()) {\n      return false;\n    }\n\n    for (JSType type : types) {\n      newParameter(registry.createOptionalType(type)).setOptionalArg(true);\n    }\n    return true;\n  }\n",
        "begin_line": 79,
        "end_line": 88,
        "comment": "\n   * Add optional parameters of the given type to the end of the param list.\n   * @param types Types for each optional parameter. The builder will make them\n   *     undefine-able.\n   * @return False if this is called after var args are added.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0612
        },
        "num_failing_tests": 1
    },
    {
        "name": "FunctionParamBuilder.addVarArgs#94",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionParamBuilder.java",
        "class_name": "com.google.javascript.rhino.jstype.FunctionParamBuilder",
        "signature": "com.google.javascript.rhino.jstype.FunctionParamBuilder.addVarArgs(com.google.javascript.rhino.jstype.JSType)",
        "snippet": "  public boolean addVarArgs(JSType type) {\n    if (hasVarArgs()) {\n      return false;\n    }\n\n    // There are two types of variable argument functions:\n    // 1) Programmer-defined var args\n    // 2) Native bottom types that can accept any argument.\n    // For the first one, \"undefined\" is a valid value for all arguments.\n    // For the second, we do not want to cast it up to undefined.\n    if (!type.isEmptyType()) {\n      type = registry.createOptionalType(type);\n    }\n    newParameter(type).setVarArgs(true);\n    return true;\n  }\n",
        "begin_line": 94,
        "end_line": 109,
        "comment": "\n   * Add variable arguments to the end of the parameter list.\n   * @return False if this is called after var args are added.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0612
        },
        "num_failing_tests": 1
    },
    {
        "name": "FunctionParamBuilder.newParameter#134",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionParamBuilder.java",
        "class_name": "com.google.javascript.rhino.jstype.FunctionParamBuilder",
        "signature": "com.google.javascript.rhino.jstype.FunctionParamBuilder.newParameter(com.google.javascript.rhino.jstype.JSType)",
        "snippet": "  private Node newParameter(JSType type) {\n    Node paramNode = Node.newString(Token.NAME, \"\");\n    paramNode.setJSType(type);\n    root.addChildToBack(paramNode);\n    return paramNode;\n  }\n",
        "begin_line": 134,
        "end_line": 139,
        "comment": " Add a parameter to the list with the given type.",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0612
        },
        "num_failing_tests": 1
    },
    {
        "name": "FunctionParamBuilder.build#141",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionParamBuilder.java",
        "class_name": "com.google.javascript.rhino.jstype.FunctionParamBuilder",
        "signature": "com.google.javascript.rhino.jstype.FunctionParamBuilder.build()",
        "snippet": "  public Node build() {\n    return root;\n  }\n",
        "begin_line": 141,
        "end_line": 143,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0612
        },
        "num_failing_tests": 1
    },
    {
        "name": "FunctionParamBuilder.hasOptionalOrVarArgs#145",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionParamBuilder.java",
        "class_name": "com.google.javascript.rhino.jstype.FunctionParamBuilder",
        "signature": "com.google.javascript.rhino.jstype.FunctionParamBuilder.hasOptionalOrVarArgs()",
        "snippet": "  private boolean hasOptionalOrVarArgs() {\n    Node lastChild = root.getLastChild();\n    return lastChild != null &&\n        (lastChild.isOptionalArg() || lastChild.isVarArgs());\n  }\n",
        "begin_line": 145,
        "end_line": 149,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0612
        },
        "num_failing_tests": 1
    },
    {
        "name": "FunctionParamBuilder.hasVarArgs#151",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionParamBuilder.java",
        "class_name": "com.google.javascript.rhino.jstype.FunctionParamBuilder",
        "signature": "com.google.javascript.rhino.jstype.FunctionParamBuilder.hasVarArgs()",
        "snippet": "  public boolean hasVarArgs() {\n    Node lastChild = root.getLastChild();\n    return lastChild != null && lastChild.isVarArgs();\n  }\n",
        "begin_line": 151,
        "end_line": 154,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0612
        },
        "num_failing_tests": 1
    },
    {
        "name": "FunctionBuilder.FunctionBuilder#65",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionBuilder.java",
        "class_name": "com.google.javascript.rhino.jstype.FunctionBuilder",
        "signature": "com.google.javascript.rhino.jstype.FunctionBuilder.FunctionBuilder(com.google.javascript.rhino.jstype.JSTypeRegistry)",
        "snippet": "  public FunctionBuilder(JSTypeRegistry registry) {\n    this.registry = registry;\n  }\n",
        "begin_line": 65,
        "end_line": 67,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0612
        },
        "num_failing_tests": 1
    },
    {
        "name": "FunctionBuilder.withParamsNode#90",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionBuilder.java",
        "class_name": "com.google.javascript.rhino.jstype.FunctionBuilder",
        "signature": "com.google.javascript.rhino.jstype.FunctionBuilder.withParamsNode(com.google.javascript.rhino.Node)",
        "snippet": "  public FunctionBuilder withParamsNode(Node parametersNode) {\n    this.parametersNode = parametersNode;\n    return this;\n  }\n",
        "begin_line": 90,
        "end_line": 93,
        "comment": "\n   * Set the parameters of the function type with a specially-formatted node.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0612
        },
        "num_failing_tests": 1
    },
    {
        "name": "FunctionBuilder.withReturnType#96",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionBuilder.java",
        "class_name": "com.google.javascript.rhino.jstype.FunctionBuilder",
        "signature": "com.google.javascript.rhino.jstype.FunctionBuilder.withReturnType(com.google.javascript.rhino.jstype.JSType)",
        "snippet": "  public FunctionBuilder withReturnType(JSType returnType) {\n    this.returnType = returnType;\n    return this;\n  }\n",
        "begin_line": 96,
        "end_line": 99,
        "comment": " Set the return type. ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0612
        },
        "num_failing_tests": 1
    },
    {
        "name": "FunctionBuilder.forNativeType#140",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionBuilder.java",
        "class_name": "com.google.javascript.rhino.jstype.FunctionBuilder",
        "signature": "com.google.javascript.rhino.jstype.FunctionBuilder.forNativeType()",
        "snippet": "  FunctionBuilder forNativeType() {\n    this.isNativeType = true;\n    return this;\n  }\n",
        "begin_line": 140,
        "end_line": 143,
        "comment": " Make this a native type. ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0612
        },
        "num_failing_tests": 1
    },
    {
        "name": "FunctionBuilder.build#159",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionBuilder.java",
        "class_name": "com.google.javascript.rhino.jstype.FunctionBuilder",
        "signature": "com.google.javascript.rhino.jstype.FunctionBuilder.build()",
        "snippet": "  public FunctionType build() {\n    return new FunctionType(registry, name, sourceNode,\n        new ArrowType(registry, parametersNode, returnType, inferredReturnType),\n        typeOfThis, templateTypeMap, isConstructor, isNativeType);\n  }\n",
        "begin_line": 159,
        "end_line": 163,
        "comment": " Construct a new function type. ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0612
        },
        "num_failing_tests": 1
    },
    {
        "name": "ErrorFunctionType.ErrorFunctionType#50",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/ErrorFunctionType.java",
        "class_name": "com.google.javascript.rhino.jstype.ErrorFunctionType",
        "signature": "com.google.javascript.rhino.jstype.ErrorFunctionType.ErrorFunctionType(com.google.javascript.rhino.jstype.JSTypeRegistry, java.lang.String)",
        "snippet": "  ErrorFunctionType(JSTypeRegistry registry, String name) {\n    super(\n        registry, name, null,\n        registry.createArrowType(\n            registry.createOptionalParameters(\n                registry.getNativeType(ALL_TYPE),\n                registry.getNativeType(ALL_TYPE),\n                registry.getNativeType(ALL_TYPE)),\n            null),\n        null, null, true, true);\n\n    // NOTE(nicksantos): Errors have the weird behavior in that they can\n    // be called as functions, and they will return instances of themselves.\n    // Error('x') instanceof Error => true\n    //\n    // In user-defined types, we would deal with this case by creating\n    // a NamedType with the name \"Error\" and then resolve it later.\n    //\n    // For native types, we don't really want the native types to\n    // depend on type-resolution. So we just set the return type manually\n    // at the end of construction.\n    //\n    // There's similar logic in JSTypeRegistry for Array and RegExp.\n    getInternalArrowType().returnType = getInstanceType();\n  }\n",
        "begin_line": 50,
        "end_line": 74,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0612
        },
        "num_failing_tests": 1
    },
    {
        "name": "BooleanType.BooleanType#52",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/BooleanType.java",
        "class_name": "com.google.javascript.rhino.jstype.BooleanType",
        "signature": "com.google.javascript.rhino.jstype.BooleanType.BooleanType(com.google.javascript.rhino.jstype.JSTypeRegistry)",
        "snippet": "  BooleanType(JSTypeRegistry registry) {\n    super(registry);\n  }\n",
        "begin_line": 52,
        "end_line": 54,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0612
        },
        "num_failing_tests": 1
    },
    {
        "name": "BooleanType.toStringHelper#101",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/BooleanType.java",
        "class_name": "com.google.javascript.rhino.jstype.BooleanType",
        "signature": "com.google.javascript.rhino.jstype.BooleanType.toStringHelper(boolean)",
        "snippet": "  @Override\n  String toStringHelper(boolean forAnnotations) {\n    return getDisplayName();\n  }\n",
        "begin_line": 101,
        "end_line": 104,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0612
        },
        "num_failing_tests": 1
    },
    {
        "name": "BooleanType.getDisplayName#106",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/BooleanType.java",
        "class_name": "com.google.javascript.rhino.jstype.BooleanType",
        "signature": "com.google.javascript.rhino.jstype.BooleanType.getDisplayName()",
        "snippet": "  @Override\n  public String getDisplayName() {\n    return \"boolean\";\n  }\n",
        "begin_line": 106,
        "end_line": 109,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0612
        },
        "num_failing_tests": 1
    },
    {
        "name": "ArrowType.ArrowType#62",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/ArrowType.java",
        "class_name": "com.google.javascript.rhino.jstype.ArrowType",
        "signature": "com.google.javascript.rhino.jstype.ArrowType.ArrowType(com.google.javascript.rhino.jstype.JSTypeRegistry, com.google.javascript.rhino.Node, com.google.javascript.rhino.jstype.JSType)",
        "snippet": "  ArrowType(JSTypeRegistry registry, Node parameters,\n      JSType returnType) {\n    this(registry, parameters, returnType, false);\n  }\n",
        "begin_line": 62,
        "end_line": 65,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0612
        },
        "num_failing_tests": 1
    },
    {
        "name": "ArrowType.ArrowType#67",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/ArrowType.java",
        "class_name": "com.google.javascript.rhino.jstype.ArrowType",
        "signature": "com.google.javascript.rhino.jstype.ArrowType.ArrowType(com.google.javascript.rhino.jstype.JSTypeRegistry, com.google.javascript.rhino.Node, com.google.javascript.rhino.jstype.JSType, boolean)",
        "snippet": "  ArrowType(JSTypeRegistry registry, Node parameters,\n      JSType returnType, boolean returnTypeInferred) {\n    super(registry);\n\n    this.parameters = parameters == null ?\n        registry.createParametersWithVarArgs(getNativeType(UNKNOWN_TYPE)) :\n        parameters;\n    this.returnType = returnType == null ?\n        getNativeType(UNKNOWN_TYPE) : returnType;\n    this.returnTypeInferred = returnTypeInferred;\n  }\n",
        "begin_line": 67,
        "end_line": 77,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0612
        },
        "num_failing_tests": 1
    },
    {
        "name": "AllType.AllType#52",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/AllType.java",
        "class_name": "com.google.javascript.rhino.jstype.AllType",
        "signature": "com.google.javascript.rhino.jstype.AllType.AllType(com.google.javascript.rhino.jstype.JSTypeRegistry)",
        "snippet": "  AllType(JSTypeRegistry registry) {\n    super(registry);\n  }\n",
        "begin_line": 52,
        "end_line": 54,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0612
        },
        "num_failing_tests": 1
    },
    {
        "name": "AllType.isAllType#56",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/AllType.java",
        "class_name": "com.google.javascript.rhino.jstype.AllType",
        "signature": "com.google.javascript.rhino.jstype.AllType.isAllType()",
        "snippet": "  @Override\n  public boolean isAllType() {\n    return true;\n  }\n",
        "begin_line": 56,
        "end_line": 59,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0612
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.setJSType#1818",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.setJSType(com.google.javascript.rhino.jstype.JSType)",
        "snippet": "  public void setJSType(JSType jsType) {\n      this.jsType = jsType;\n  }\n",
        "begin_line": 1818,
        "end_line": 1820,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0612
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.setVarArgs#1873",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.setVarArgs(boolean)",
        "snippet": "  public void setVarArgs(boolean varArgs) {\n    putBooleanProp(VAR_ARGS_NAME, varArgs);\n  }\n",
        "begin_line": 1873,
        "end_line": 1875,
        "comment": "\n   * Sets whether this node is a variable length argument node. This\n   * method is meaningful only on {@link Token#NAME} nodes\n   * used to define a {@link Token#FUNCTION}'s argument list.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0612
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.setOptionalArg#1891",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.setOptionalArg(boolean)",
        "snippet": "  public void setOptionalArg(boolean optionalArg) {\n    putBooleanProp(OPT_ARG_NAME, optionalArg);\n  }\n",
        "begin_line": 1891,
        "end_line": 1893,
        "comment": "\n   * Sets whether this node is an optional argument node. This\n   * method is meaningful only on {@link Token#NAME} nodes\n   * used to define a {@link Token#FUNCTION}'s argument list.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0612
        },
        "num_failing_tests": 1
    },
    {
        "name": "Compiler.getTypeRegistry#1198",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.getTypeRegistry()",
        "snippet": "  @Override\n  public JSTypeRegistry getTypeRegistry() {\n    if (typeRegistry == null) {\n      typeRegistry = new JSTypeRegistry(oldErrorReporter, options.looseTypes);\n    }\n    return typeRegistry;\n  }\n",
        "begin_line": 1198,
        "end_line": 1204,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0612
        },
        "num_failing_tests": 1
    },
    {
        "name": "GoogleCodingConvention.GoogleCodingConvention#43",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/GoogleCodingConvention.java",
        "class_name": "com.google.javascript.jscomp.GoogleCodingConvention",
        "signature": "com.google.javascript.jscomp.GoogleCodingConvention.GoogleCodingConvention()",
        "snippet": "  public GoogleCodingConvention() {\n    this(new ClosureCodingConvention());\n  }\n",
        "begin_line": 43,
        "end_line": 45,
        "comment": " By default, decorate the ClosureCodingConvention. ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0606
        },
        "num_failing_tests": 1
    },
    {
        "name": "GoogleCodingConvention.GoogleCodingConvention#48",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/GoogleCodingConvention.java",
        "class_name": "com.google.javascript.jscomp.GoogleCodingConvention",
        "signature": "com.google.javascript.jscomp.GoogleCodingConvention.GoogleCodingConvention(com.google.javascript.jscomp.CodingConvention)",
        "snippet": "  public GoogleCodingConvention(CodingConvention convention) {\n    super(convention);\n  }\n",
        "begin_line": 48,
        "end_line": 50,
        "comment": " Decorates a wrapped CodingConvention. ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0606
        },
        "num_failing_tests": 1
    },
    {
        "name": "AstValidator.validateAssignmentExpression#600",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AstValidator.java",
        "class_name": "com.google.javascript.jscomp.AstValidator",
        "signature": "com.google.javascript.jscomp.AstValidator.validateAssignmentExpression(com.google.javascript.rhino.Node)",
        "snippet": "  private void validateAssignmentExpression(Node n) {\n    validateChildCount(n, 2);\n    validateAssignmentTarget(n.getFirstChild());\n    validateExpression(n.getLastChild());\n  }\n",
        "begin_line": 600,
        "end_line": 604,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0605
        },
        "num_failing_tests": 1
    },
    {
        "name": "AstValidator.validateAssignmentTarget#606",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AstValidator.java",
        "class_name": "com.google.javascript.jscomp.AstValidator",
        "signature": "com.google.javascript.jscomp.AstValidator.validateAssignmentTarget(com.google.javascript.rhino.Node)",
        "snippet": "  private void validateAssignmentTarget(Node n) {\n    switch (n.getType()) {\n      case Token.NAME:\n      case Token.GETELEM:\n      case Token.GETPROP:\n        validateExpression(n);\n        return;\n      default:\n        violation(\"Expected assignment target expression but was \"\n            + Token.name(n.getType()), n);\n    }\n  }\n",
        "begin_line": 606,
        "end_line": 617,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0604
        },
        "num_failing_tests": 1
    },
    {
        "name": "IRFactory.processVariableInitializer#1210",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.TransformDispatcher.processVariableInitializer(com.google.javascript.rhino.head.ast.VariableInitializer)",
        "snippet": "    @Override\n    Node processVariableInitializer(VariableInitializer initializerNode) {\n      Node node = transform(initializerNode.getTarget());\n      if (initializerNode.getInitializer() != null) {\n        Node initalizer = transform(initializerNode.getInitializer());\n        node.addChildToBack(initalizer);\n      }\n      return node;\n    }\n",
        "begin_line": 1210,
        "end_line": 1218,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0603
        },
        "num_failing_tests": 1
    },
    {
        "name": "LoggerErrorManager.LoggerErrorManager#37",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/LoggerErrorManager.java",
        "class_name": "com.google.javascript.jscomp.LoggerErrorManager",
        "signature": "com.google.javascript.jscomp.LoggerErrorManager.LoggerErrorManager(com.google.javascript.jscomp.MessageFormatter, java.util.logging.Logger)",
        "snippet": "  public LoggerErrorManager(MessageFormatter formatter, Logger logger) {\n    this.formatter = formatter;\n    this.logger = logger;\n  }\n",
        "begin_line": 37,
        "end_line": 40,
        "comment": "\n   * Creates an instance.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.06
        },
        "num_failing_tests": 1
    },
    {
        "name": "Compiler.Compiler#236",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.Compiler()",
        "snippet": "  public Compiler() {\n    this((PrintStream) null);\n  }\n",
        "begin_line": 236,
        "end_line": 238,
        "comment": "\n   * Creates a Compiler that reports errors and warnings to its logger.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.06
        },
        "num_failing_tests": 1
    },
    {
        "name": "Compiler.initOptions#280",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.initOptions(com.google.javascript.jscomp.CompilerOptions)",
        "snippet": "  public void initOptions(CompilerOptions options) {\n    this.options = options;\n    if (errorManager == null) {\n      if (outStream == null) {\n        setErrorManager(\n            new LoggerErrorManager(createMessageFormatter(), logger));\n      } else {\n        PrintStreamErrorManager printer =\n            new PrintStreamErrorManager(createMessageFormatter(), outStream);\n        printer.setSummaryDetailLevel(options.summaryDetailLevel);\n        setErrorManager(printer);\n      }\n    }\n\n    reconcileOptionsWithGuards();\n\n    // Initialize the warnings guard.\n    List<WarningsGuard> guards = Lists.newArrayList();\n    guards.add(\n        new SuppressDocWarningsGuard(\n            getDiagnosticGroups().getRegisteredGroups()));\n    guards.add(options.getWarningsGuard());\n\n    this.warningsGuard = new ComposeWarningsGuard(guards);\n  }\n",
        "begin_line": 280,
        "end_line": 304,
        "comment": "\n   * Initialize the compiler options. Only necessary if you're not doing\n   * a normal compile() job.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.06
        },
        "num_failing_tests": 1
    },
    {
        "name": "AstValidator.validateOptionalName#344",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AstValidator.java",
        "class_name": "com.google.javascript.jscomp.AstValidator",
        "signature": "com.google.javascript.jscomp.AstValidator.validateOptionalName(com.google.javascript.rhino.Node)",
        "snippet": "  private void validateOptionalName(Node n) {\n    validateNodeType(Token.NAME, n);\n    validateNonNullString(n);\n    validateChildCount(n, 0);\n  }\n",
        "begin_line": 344,
        "end_line": 348,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0582
        },
        "num_failing_tests": 1
    },
    {
        "name": "AstValidator.validateFunctionExpression#358",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AstValidator.java",
        "class_name": "com.google.javascript.jscomp.AstValidator",
        "signature": "com.google.javascript.jscomp.AstValidator.validateFunctionExpression(com.google.javascript.rhino.Node)",
        "snippet": "  private void validateFunctionExpression(Node n) {\n    validateNodeType(Token.FUNCTION, n);\n    validateChildCount(n, 3);\n    validateOptionalName(n.getFirstChild());\n    validateParameters(n.getChildAtIndex(1));\n    validateBlock(n.getLastChild());\n  }\n",
        "begin_line": 358,
        "end_line": 364,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0582
        },
        "num_failing_tests": 1
    },
    {
        "name": "AstValidator.validateParameters#366",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AstValidator.java",
        "class_name": "com.google.javascript.jscomp.AstValidator",
        "signature": "com.google.javascript.jscomp.AstValidator.validateParameters(com.google.javascript.rhino.Node)",
        "snippet": "  private void validateParameters(Node n) {\n    validateNodeType(Token.PARAM_LIST, n);\n    for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n      validateName(c);\n    }\n  }\n",
        "begin_line": 366,
        "end_line": 371,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0582
        },
        "num_failing_tests": 1
    },
    {
        "name": "CodePrinter.maybeCutLine#490",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "class_name": "com.google.javascript.jscomp.CodePrinter",
        "signature": "com.google.javascript.jscomp.CodePrinter.CompactCodePrinter.maybeCutLine()",
        "snippet": "    @Override\n    void maybeCutLine() {\n      if (lineLength > lineLengthThreshold) {\n        // Use the preferred position provided it will break the line.\n        if (preferredBreakPosition > lineStartPosition &&\n            preferredBreakPosition < lineStartPosition + lineLength) {\n          int position = preferredBreakPosition;\n          code.insert(position, '\\n');\n          prevCutPosition = position;\n          reportLineCut(lineIndex, position - lineStartPosition, true);\n          lineIndex++;\n          lineLength -= (position - lineStartPosition);\n          lineStartPosition = position + 1;\n        } else {\n          startNewLine();\n        }\n      }\n    }\n",
        "begin_line": 490,
        "end_line": 507,
        "comment": "\n     * This may start a new line if the current line is longer than the line\n     * length threshold.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0577
        },
        "num_failing_tests": 1
    },
    {
        "name": "NodeUtil.isSimpleOperator#701",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "signature": "com.google.javascript.jscomp.NodeUtil.isSimpleOperator(com.google.javascript.rhino.Node)",
        "snippet": "  static boolean isSimpleOperator(Node n) {\n    return isSimpleOperatorType(n.getType());\n  }\n",
        "begin_line": 701,
        "end_line": 703,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0575
        },
        "num_failing_tests": 1
    },
    {
        "name": "IRFactory.processAssignment#564",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.TransformDispatcher.processAssignment(com.google.javascript.rhino.head.ast.Assignment)",
        "snippet": "    @Override\n    Node processAssignment(Assignment assignmentNode) {\n      Node assign = processInfixExpression(assignmentNode);\n      Node target = assign.getFirstChild();\n      if (!validAssignmentTarget(target)) {\n        errorReporter.error(\n          \"invalid assignment target\",\n          sourceName,\n          target.getLineno(), \"\", 0);\n      }\n      return assign;\n    }\n",
        "begin_line": 564,
        "end_line": 575,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0569
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.isEquivalentTo#224",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.StringNode.isEquivalentTo(com.google.javascript.rhino.Node, boolean, boolean)",
        "snippet": "    @Override\n    boolean isEquivalentTo(Node node, boolean compareJsType, boolean recurse) {\n      return (super.isEquivalentTo(node, compareJsType, recurse)\n          && this.str.equals(((StringNode) node).str));\n    }\n",
        "begin_line": 224,
        "end_line": 228,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0566
        },
        "num_failing_tests": 1
    },
    {
        "name": "IRFactory.validAssignmentTarget#1185",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.TransformDispatcher.validAssignmentTarget(com.google.javascript.rhino.Node)",
        "snippet": "    private boolean validAssignmentTarget(Node target) {\n      switch (target.getType()) {\n        case Token.CAST: // CAST is a bit weird, but syntactically valid.\n        case Token.NAME:\n        case Token.GETPROP:\n        case Token.GETELEM:\n          return true;\n      }\n      return false;\n    }\n",
        "begin_line": 1185,
        "end_line": 1194,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0565
        },
        "num_failing_tests": 1
    },
    {
        "name": "Compiler.reportCodeChange#1996",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.reportCodeChange()",
        "snippet": "  @Override\n  public void reportCodeChange() {\n    for (CodeChangeHandler handler : codeChangeHandlers) {\n      handler.reportChange();\n    }\n  }\n",
        "begin_line": 1996,
        "end_line": 2001,
        "comment": "\n   * All passes should call reportCodeChange() when they alter\n   * the JS tree structure. This is verified by CompilerTestCase.\n   * This allows us to optimize to a fixed point.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0561
        },
        "num_failing_tests": 1
    },
    {
        "name": "CodeChangeHandler.reportChange#31",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodeChangeHandler.java",
        "class_name": "com.google.javascript.jscomp.CodeChangeHandler",
        "signature": "com.google.javascript.jscomp.CodeChangeHandler.reportChange()",
        "snippet": "  public void reportChange() {\n    hasChanged = true;\n  }\n",
        "begin_line": 31,
        "end_line": 33,
        "comment": " Report a change to some unspecified node of the AST. ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0561
        },
        "num_failing_tests": 1
    },
    {
        "name": "CodeConsumer.endStatement#134",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodeConsumer.java",
        "class_name": "com.google.javascript.jscomp.CodeConsumer",
        "signature": "com.google.javascript.jscomp.CodeConsumer.endStatement()",
        "snippet": "  void endStatement() {\n    endStatement(false);\n  }\n",
        "begin_line": 134,
        "end_line": 136,
        "comment": "\n   * Indicates the end of a statement and a ';' may need to be added.\n   * But we don't add it now, in case we're at the end of a block (in which\n   * case we don't have to add the ';').\n   * See maybeEndStatement()\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.056
        },
        "num_failing_tests": 1
    },
    {
        "name": "CodeConsumer.endStatement#138",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodeConsumer.java",
        "class_name": "com.google.javascript.jscomp.CodeConsumer",
        "signature": "com.google.javascript.jscomp.CodeConsumer.endStatement(boolean)",
        "snippet": "  void endStatement(boolean needSemiColon) {\n    if (needSemiColon) {\n      append(\";\");\n      maybeLineBreak();\n      statementNeedsEnded = false;\n    } else if (statementStarted) {\n      statementNeedsEnded = true;\n    }\n  }\n",
        "begin_line": 138,
        "end_line": 146,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.056
        },
        "num_failing_tests": 1
    },
    {
        "name": "CodeGenerator.addExpr#907",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodeGenerator.java",
        "class_name": "com.google.javascript.jscomp.CodeGenerator",
        "signature": "com.google.javascript.jscomp.CodeGenerator.addExpr(com.google.javascript.rhino.Node, int, com.google.javascript.jscomp.CodeGenerator.Context)",
        "snippet": "  private void addExpr(Node n, int minPrecedence, Context context) {\n    if ((NodeUtil.precedence(n.getType()) < minPrecedence) ||\n        ((context == Context.IN_FOR_INIT_CLAUSE) && n.isIn())){\n      add(\"(\");\n      add(n, Context.OTHER);\n      add(\")\");\n    } else {\n      add(n, context);\n    }\n  }\n",
        "begin_line": 907,
        "end_line": 916,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0559
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.getChildAtIndex#557",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.getChildAtIndex(int)",
        "snippet": "  public Node getChildAtIndex(int i) {\n    Node n = first;\n    while (i > 0) {\n      n = n.next;\n      i--;\n    }\n    return n;\n  }\n",
        "begin_line": 557,
        "end_line": 564,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0553
        },
        "num_failing_tests": 1
    },
    {
        "name": "Compiler.initCompilerOptionsIfTesting#1585",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.initCompilerOptionsIfTesting()",
        "snippet": "  void initCompilerOptionsIfTesting() {\n    if (options == null) {\n      // initialization for tests that don't initialize the compiler\n      // by the normal mechanisms.\n      initOptions(newCompilerOptions());\n    }\n  }\n",
        "begin_line": 1585,
        "end_line": 1591,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0553
        },
        "num_failing_tests": 1
    },
    {
        "name": "Compiler.toSource#1805",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.toSource(com.google.javascript.rhino.Node)",
        "snippet": "  @Override\n  String toSource(Node n) {\n    initCompilerOptionsIfTesting();\n    return toSource(n, null, true);\n  }\n",
        "begin_line": 1805,
        "end_line": 1809,
        "comment": "\n   * Generates JavaScript source code for an AST, doesn't generate source\n   * map info.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0553
        },
        "num_failing_tests": 1
    },
    {
        "name": "IRFactory.position2charno#502",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.position2charno(int)",
        "snippet": "  private int position2charno(int position) {\n    int lineIndex = sourceString.lastIndexOf('\\n', position);\n    if (lineIndex == -1) {\n      return position;\n    } else {\n      // Subtract one for initial position being 0.\n      return position - lineIndex - 1;\n    }\n  }\n",
        "begin_line": 502,
        "end_line": 510,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0552
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.hasMoreThanOneChild#1388",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.hasMoreThanOneChild()",
        "snippet": "  public boolean hasMoreThanOneChild() {\n    return first != null && first != last;\n  }\n",
        "begin_line": 1388,
        "end_line": 1390,
        "comment": "\n   * Check for more than one child more efficiently than by iterating over all\n   * the children as is done with Node.getChildCount().\n   *\n   * @return Whether the node more than one child.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0551
        },
        "num_failing_tests": 1
    },
    {
        "name": "CodeGenerator.add#91",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodeGenerator.java",
        "class_name": "com.google.javascript.jscomp.CodeGenerator",
        "signature": "com.google.javascript.jscomp.CodeGenerator.add(java.lang.String)",
        "snippet": "  void add(String str) {\n    cc.add(str);\n  }\n",
        "begin_line": 91,
        "end_line": 93,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0551
        },
        "num_failing_tests": 1
    },
    {
        "name": "CodeConsumer.addIdentifier#61",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodeConsumer.java",
        "class_name": "com.google.javascript.jscomp.CodeConsumer",
        "signature": "com.google.javascript.jscomp.CodeConsumer.addIdentifier(java.lang.String)",
        "snippet": "  void addIdentifier(String identifier) {\n    add(identifier);\n  }\n",
        "begin_line": 61,
        "end_line": 63,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0551
        },
        "num_failing_tests": 1
    },
    {
        "name": "CodePrinter.getLastChar#206",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "class_name": "com.google.javascript.jscomp.CodePrinter",
        "signature": "com.google.javascript.jscomp.CodePrinter.MappedCodePrinter.getLastChar()",
        "snippet": "    @Override\n    char getLastChar() {\n      return (code.length() > 0) ? code.charAt(code.length() - 1) : '\\0';\n    }\n",
        "begin_line": 206,
        "end_line": 209,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.055
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.Node#358",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.Node(int, com.google.javascript.rhino.Node)",
        "snippet": "  public Node(int nodeType, Node child) {\n    Preconditions.checkArgument(child.parent == null,\n        \"new child has existing parent\");\n    Preconditions.checkArgument(child.next == null,\n        \"new child has existing sibling\");\n\n    type = nodeType;\n    parent = null;\n    first = last = child;\n    child.next = null;\n    child.parent = this;\n    sourcePosition = -1;\n  }\n",
        "begin_line": 358,
        "end_line": 370,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0549
        },
        "num_failing_tests": 1
    },
    {
        "name": "IRFactory.processFunctionNode#752",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.TransformDispatcher.processFunctionNode(com.google.javascript.rhino.head.ast.FunctionNode)",
        "snippet": "    @Override\n    Node processFunctionNode(FunctionNode functionNode) {\n      Name name = functionNode.getFunctionName();\n      Boolean isUnnamedFunction = false;\n      if (name == null) {\n        int functionType = functionNode.getFunctionType();\n        if (functionType != FunctionNode.FUNCTION_EXPRESSION) {\n          errorReporter.error(\n            \"unnamed function statement\",\n            sourceName,\n            functionNode.getLineno(), \"\", 0);\n\n          // Return the bare minimum to put the AST in a valid state.\n          return newNode(Token.EXPR_RESULT, Node.newNumber(0));\n        }\n        name = new Name();\n        name.setIdentifier(\"\");\n        isUnnamedFunction = true;\n      }\n      Node node = newNode(Token.FUNCTION);\n      Node newName = transform(name);\n      if (isUnnamedFunction) {\n        // Old Rhino tagged the empty name node with the line number of the\n        // declaration.\n        newName.setLineno(functionNode.getLineno());\n        // TODO(bowdidge) Mark line number of paren correctly.\n        // Same problem as below - the left paren might not be on the\n        // same line as the function keyword.\n        int lpColumn = functionNode.getAbsolutePosition() +\n            functionNode.getLp();\n        newName.setCharno(position2charno(lpColumn));\n        maybeSetLengthFrom(newName, name);\n      }\n\n      node.addChildToBack(newName);\n      Node lp = newNode(Token.PARAM_LIST);\n      // The left paren's complicated because it's not represented by an\n      // AstNode, so there's nothing that has the actual line number that it\n      // appeared on.  We know the paren has to appear on the same line as the\n      // function name (or else a semicolon will be inserted.)  If there's no\n      // function name, assume the paren was on the same line as the function.\n      // TODO(bowdidge): Mark line number of paren correctly.\n      Name fnName = functionNode.getFunctionName();\n      if (fnName != null) {\n        lp.setLineno(fnName.getLineno());\n      } else {\n        lp.setLineno(functionNode.getLineno());\n      }\n      int lparenCharno = functionNode.getLp() +\n          functionNode.getAbsolutePosition();\n\n      lp.setCharno(position2charno(lparenCharno));\n      for (AstNode param : functionNode.getParams()) {\n        Node paramNode = transformParameter(param);\n        // When in ideMode Rhino can generate a param list with only a single\n        // ErrorNode. This is transformed into an EMPTY node. Drop this node in\n        // ideMode to keep the AST in a valid state.\n        if (paramNode.isName()) {\n          lp.addChildToBack(paramNode);\n        } else {\n          // We expect this in ideMode or when there is an error handling\n          // destructuring parameter assignments which aren't supported\n          // (an error has already been reported).\n          Preconditions.checkState(\n              config.isIdeMode\n              || paramNode.isObjectLit()\n              || paramNode.isArrayLit());\n        }\n      }\n      node.addChildToBack(lp);\n\n      Node bodyNode = transform(functionNode.getBody());\n      if (!bodyNode.isBlock()) {\n        // When in ideMode Rhino tries to parse some constructs the compiler\n        // doesn't support, repair it here. see Rhino's\n        // Parser#parseFunctionBodyExpr.\n        Preconditions.checkState(config.isIdeMode);\n        bodyNode = IR.block();\n      }\n      parseDirectives(bodyNode);\n      node.addChildToBack(bodyNode);\n     return node;\n    }\n",
        "begin_line": 752,
        "end_line": 834,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0549
        },
        "num_failing_tests": 1
    },
    {
        "name": "IRFactory.transformParameter#383",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.transformParameter(com.google.javascript.rhino.head.ast.AstNode)",
        "snippet": "  private Node transformParameter(AstNode node) {\n    Node irNode = justTransform(node);\n    Comment comment = node.getJsDocNode();\n    if (comment != null) {\n      JSDocInfo info = parseInlineTypeDoc(comment, irNode);\n      if (info != null) {\n        irNode.setJSDocInfo(info);\n      }\n    }\n    setSourceInfo(irNode, node);\n    return irNode;\n  }\n",
        "begin_line": 383,
        "end_line": 394,
        "comment": "\n   * Parameter NAMEs are special, because they can have inline type docs\n   * attached.\n   *\n   * function f(/** string &#42;/ x) {}\n   * annotates 'x' as a string.\n   *\n   * @see http://code.google.com/p/jsdoc-toolkit/wiki/InlineDocs\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0549
        },
        "num_failing_tests": 1
    },
    {
        "name": "NodeTraversal.traverseFunction#511",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeTraversal.java",
        "class_name": "com.google.javascript.jscomp.NodeTraversal",
        "signature": "com.google.javascript.jscomp.NodeTraversal.traverseFunction(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  private void traverseFunction(Node n, Node parent) {\n    Preconditions.checkState(n.getChildCount() == 3);\n    Preconditions.checkState(n.isFunction());\n\n    final Node fnName = n.getFirstChild();\n\n    boolean isFunctionExpression = (parent != null)\n        && NodeUtil.isFunctionExpression(n);\n\n    if (!isFunctionExpression) {\n      // Functions declarations are in the scope containing the declaration.\n      traverseBranch(fnName, n);\n    }\n\n    curNode = n;\n    pushScope(n);\n\n    if (isFunctionExpression) {\n      // Function expression names are only accessible within the function\n      // scope.\n      traverseBranch(fnName, n);\n    }\n\n    final Node args = fnName.getNext();\n    final Node body = args.getNext();\n\n    // Args\n    traverseBranch(args, n);\n\n    // Body\n    Preconditions.checkState(body.getNext() == null &&\n            body.isBlock(), body);\n    traverseBranch(body, n);\n\n    popScope();\n  }\n",
        "begin_line": 511,
        "end_line": 546,
        "comment": "\n   * Traverses a function.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0549
        },
        "num_failing_tests": 1
    },
    {
        "name": "CodePrinter.append#443",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "class_name": "com.google.javascript.jscomp.CodePrinter",
        "signature": "com.google.javascript.jscomp.CodePrinter.CompactCodePrinter.append(java.lang.String)",
        "snippet": "    @Override\n    void append(String str) {\n      code.append(str);\n      lineLength += str.length();\n    }\n",
        "begin_line": 443,
        "end_line": 447,
        "comment": "\n     * Appends a string to the code, keeping track of the current line length.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0549
        },
        "num_failing_tests": 1
    },
    {
        "name": "CodePrinter.notePreferredLineBreak#509",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "class_name": "com.google.javascript.jscomp.CodePrinter",
        "signature": "com.google.javascript.jscomp.CodePrinter.CompactCodePrinter.notePreferredLineBreak()",
        "snippet": "    @Override\n    void notePreferredLineBreak() {\n      preferredBreakPosition = code.length();\n    }\n",
        "begin_line": 509,
        "end_line": 512,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0549
        },
        "num_failing_tests": 1
    },
    {
        "name": "CodeGenerator.addIdentifier#95",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodeGenerator.java",
        "class_name": "com.google.javascript.jscomp.CodeGenerator",
        "signature": "com.google.javascript.jscomp.CodeGenerator.addIdentifier(java.lang.String)",
        "snippet": "  private void addIdentifier(String identifier) {\n    cc.addIdentifier(identifierEscape(identifier));\n  }\n",
        "begin_line": 95,
        "end_line": 97,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0549
        },
        "num_failing_tests": 1
    },
    {
        "name": "CodeGenerator.identifierEscape#1165",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodeGenerator.java",
        "class_name": "com.google.javascript.jscomp.CodeGenerator",
        "signature": "com.google.javascript.jscomp.CodeGenerator.identifierEscape(java.lang.String)",
        "snippet": "  static String identifierEscape(String s) {\n    // First check if escaping is needed at all -- in most cases it isn't.\n    if (NodeUtil.isLatin(s)) {\n      return s;\n    }\n\n    // Now going through the string to escape non-Latin characters if needed.\n    StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < s.length(); i++) {\n      char c = s.charAt(i);\n      // Identifiers should always go to Latin1/ ASCII characters because\n      // different browser's rules for valid identifier characters are\n      // crazy.\n      if (c > 0x1F && c < 0x7F) {\n        sb.append(c);\n      } else {\n        appendHexJavaScriptRepresentation(sb, c);\n      }\n    }\n    return sb.toString();\n  }\n",
        "begin_line": 1165,
        "end_line": 1185,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0549
        },
        "num_failing_tests": 1
    },
    {
        "name": "NodeUtil.isStatementParent#1755",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "signature": "com.google.javascript.jscomp.NodeUtil.isStatementParent(com.google.javascript.rhino.Node)",
        "snippet": "  static boolean isStatementParent(Node parent) {\n    // It is not possible to determine definitely if a node is a statement\n    // or not if it is not part of the AST.  A FUNCTION node can be\n    // either part of an expression or a statement.\n    Preconditions.checkState(parent != null);\n    switch (parent.getType()) {\n      case Token.SCRIPT:\n      case Token.BLOCK:\n      case Token.LABEL:\n        return true;\n      default:\n        return false;\n    }\n  }\n",
        "begin_line": 1755,
        "end_line": 1768,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0547
        },
        "num_failing_tests": 1
    },
    {
        "name": "NodeUtil.isLatin#2429",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "signature": "com.google.javascript.jscomp.NodeUtil.isLatin(java.lang.String)",
        "snippet": "  static boolean isLatin(String s) {\n    int len = s.length();\n    for (int index = 0; index < len; index++) {\n      char c = s.charAt(index);\n      if (c > LARGEST_BASIC_LATIN) {\n        return false;\n      }\n    }\n    return true;\n  }\n",
        "begin_line": 2429,
        "end_line": 2438,
        "comment": " Test if all characters in the string are in the Basic Latin (aka ASCII)\n   * character set - that they have UTF-16 values equal to or below 0x7f.\n   * This check can find which identifiers with Unicode characters need to be\n   * escaped in order to allow resulting files to be processed by non-Unicode\n   * aware UNIX tools and editors.\n   * *\n   * See http://en.wikipedia.org/wiki/Latin_characters_in_Unicode\n   * for more on Basic Latin.\n   *\n   * @param s The string to be checked for ASCII-goodness.\n   *\n   * @return True if all characters in the string are in Basic Latin set.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0547
        },
        "num_failing_tests": 1
    },
    {
        "name": "AstValidator.validateExprStmt#473",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AstValidator.java",
        "class_name": "com.google.javascript.jscomp.AstValidator",
        "signature": "com.google.javascript.jscomp.AstValidator.validateExprStmt(com.google.javascript.rhino.Node)",
        "snippet": "  private void validateExprStmt(Node n) {\n    validateNodeType(Token.EXPR_RESULT, n);\n    validateChildCount(n, 1);\n    validateExpression(n.getFirstChild());\n  }\n",
        "begin_line": 473,
        "end_line": 477,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0546
        },
        "num_failing_tests": 1
    },
    {
        "name": "NodeUtil.isStatementBlock#1744",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "signature": "com.google.javascript.jscomp.NodeUtil.isStatementBlock(com.google.javascript.rhino.Node)",
        "snippet": "  static boolean isStatementBlock(Node n) {\n    return n.isScript() || n.isBlock();\n  }\n",
        "begin_line": 1744,
        "end_line": 1746,
        "comment": "\n   * @return Whether the node is of a type that contain other statements.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0546
        },
        "num_failing_tests": 1
    },
    {
        "name": "CodeConsumer.maybeEndStatement#152",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodeConsumer.java",
        "class_name": "com.google.javascript.jscomp.CodeConsumer",
        "signature": "com.google.javascript.jscomp.CodeConsumer.maybeEndStatement()",
        "snippet": "  void maybeEndStatement() {\n    // Add a ';' if we need to.\n    if (statementNeedsEnded) {\n      append(\";\");\n      maybeLineBreak();\n      endLine();\n      statementNeedsEnded = false;\n    }\n    statementStarted = true;\n  }\n",
        "begin_line": 152,
        "end_line": 161,
        "comment": "\n   * This is to be called when we're in a statement. If the prev statement\n   * needs to be ended, add a ';'.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0546
        },
        "num_failing_tests": 1
    },
    {
        "name": "CodeConsumer.add#181",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodeConsumer.java",
        "class_name": "com.google.javascript.jscomp.CodeConsumer",
        "signature": "com.google.javascript.jscomp.CodeConsumer.add(java.lang.String)",
        "snippet": "  void add(String newcode) {\n    maybeEndStatement();\n\n    if (newcode.length() == 0) {\n      return;\n    }\n\n    char c = newcode.charAt(0);\n    if ((isWordChar(c) || c == '\\\\') &&\n        isWordChar(getLastChar())) {\n      // need space to separate. This is not pretty printing.\n      // For example: \"return foo;\"\n      append(\" \");\n    } else if (c == '/' && getLastChar() == '/') {\n      // Do not allow a forward slash to appear after a DIV.\n      // For example,\n      // REGEXP DIV REGEXP\n      // is valid and should print like\n      // / // / /\n      append(\" \");\n    }\n\n    append(newcode);\n  }\n",
        "begin_line": 181,
        "end_line": 204,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0546
        },
        "num_failing_tests": 1
    },
    {
        "name": "CodeConsumer.isWordChar#286",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodeConsumer.java",
        "class_name": "com.google.javascript.jscomp.CodeConsumer",
        "signature": "com.google.javascript.jscomp.CodeConsumer.isWordChar(char)",
        "snippet": "  static boolean isWordChar(char ch) {\n    return (ch == '_' ||\n            ch == '$' ||\n            Character.isLetterOrDigit(ch));\n  }\n",
        "begin_line": 286,
        "end_line": 290,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0546
        },
        "num_failing_tests": 1
    },
    {
        "name": "AstValidator.validateChildCount#774",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AstValidator.java",
        "class_name": "com.google.javascript.jscomp.AstValidator",
        "signature": "com.google.javascript.jscomp.AstValidator.validateChildCount(com.google.javascript.rhino.Node, int)",
        "snippet": "  private void validateChildCount(Node n, int i) {\n    boolean valid = false;\n    if (i == 0) {\n      valid = !n.hasChildren();\n    } else if (i == 1) {\n      valid = n.hasOneChild();\n    } else {\n      valid = (n.getChildCount() == i);\n    }\n    if (!valid) {\n      violation(\n          \"Expected \" + i + \" children, but was \"\n              + n.getChildCount(), n);\n    }\n  }\n",
        "begin_line": 774,
        "end_line": 788,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0542
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.getIntProp#816",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.getIntProp(int)",
        "snippet": "  public int getIntProp(int propType) {\n    PropListItem item = lookupProperty(propType);\n    if (item == null) {\n      return 0;\n    }\n    return item.getIntValue();\n  }\n",
        "begin_line": 816,
        "end_line": 822,
        "comment": "\n   * Returns the integer value for the property, or 0 if the property\n   * is not defined.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0542
        },
        "num_failing_tests": 1
    },
    {
        "name": "IRFactory.processVariableDeclaration#1196",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.TransformDispatcher.processVariableDeclaration(com.google.javascript.rhino.head.ast.VariableDeclaration)",
        "snippet": "    @Override\n    Node processVariableDeclaration(VariableDeclaration declarationNode) {\n      if (!config.acceptConstKeyword && declarationNode.getType() ==\n          com.google.javascript.rhino.head.Token.CONST) {\n        processIllegalToken(declarationNode);\n      }\n\n      Node node = newNode(Token.VAR);\n      for (VariableInitializer child : declarationNode.getVariables()) {\n        node.addChildToBack(transform(child));\n      }\n      return node;\n    }\n",
        "begin_line": 1196,
        "end_line": 1208,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0541
        },
        "num_failing_tests": 1
    },
    {
        "name": "IRFactory.processInfixExpression#847",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.TransformDispatcher.processInfixExpression(com.google.javascript.rhino.head.ast.InfixExpression)",
        "snippet": "    @Override\n    Node processInfixExpression(InfixExpression exprNode) {\n      Node n =  newNode(\n          transformTokenType(exprNode.getType()),\n          transform(exprNode.getLeft()),\n          transform(exprNode.getRight()));\n      n.setLineno(exprNode.getLineno());\n      n.setCharno(position2charno(exprNode.getAbsolutePosition()));\n      maybeSetLengthFrom(n, exprNode);\n      return n;\n    }\n",
        "begin_line": 847,
        "end_line": 857,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0538
        },
        "num_failing_tests": 1
    },
    {
        "name": "CompilerOptions.getOutputCharset#1466",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "signature": "com.google.javascript.jscomp.CompilerOptions.getOutputCharset()",
        "snippet": "  Charset getOutputCharset() {\n    return outputCharset == null ? null : Charset.forName(outputCharset);\n  }\n",
        "begin_line": 1466,
        "end_line": 1468,
        "comment": "\n   * Gets the output charset as a rich object.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0538
        },
        "num_failing_tests": 1
    },
    {
        "name": "CompilerOptions.getLanguageOut#1493",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "signature": "com.google.javascript.jscomp.CompilerOptions.getLanguageOut()",
        "snippet": "  public LanguageMode getLanguageOut() {\n    return languageOut;\n  }\n",
        "begin_line": 1493,
        "end_line": 1495,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0538
        },
        "num_failing_tests": 1
    },
    {
        "name": "CompilerOptions.clone#1508",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "signature": "com.google.javascript.jscomp.CompilerOptions.clone()",
        "snippet": "  @Override\n  public Object clone() throws CloneNotSupportedException {\n    CompilerOptions clone = (CompilerOptions) super.clone();\n    // TODO(bolinfest): Add relevant custom cloning.\n    return clone;\n  }\n",
        "begin_line": 1508,
        "end_line": 1513,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0538
        },
        "num_failing_tests": 1
    },
    {
        "name": "Compiler.toSource#1814",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.toSource(com.google.javascript.rhino.Node, com.google.javascript.jscomp.SourceMap, boolean)",
        "snippet": "  private String toSource(Node n, SourceMap sourceMap, boolean firstOutput) {\n    CodePrinter.Builder builder = new CodePrinter.Builder(n);\n    builder.setCompilerOptions(options);\n    builder.setSourceMap(sourceMap);\n    builder.setTagAsStrict(firstOutput &&\n        options.getLanguageOut() == LanguageMode.ECMASCRIPT5_STRICT);\n    return builder.build();\n  }\n",
        "begin_line": 1814,
        "end_line": 1821,
        "comment": "\n   * Generates JavaScript source code for an AST.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0538
        },
        "num_failing_tests": 1
    },
    {
        "name": "CodePrinter.MappedCodePrinter#58",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "class_name": "com.google.javascript.jscomp.CodePrinter",
        "signature": "com.google.javascript.jscomp.CodePrinter.MappedCodePrinter.MappedCodePrinter(int, boolean, com.google.javascript.jscomp.SourceMap.DetailLevel)",
        "snippet": "    MappedCodePrinter(\n        int lineLengthThreshold,\n        boolean createSrcMap,\n        SourceMap.DetailLevel sourceMapDetailLevel) {\n      Preconditions.checkState(sourceMapDetailLevel != null);\n      this.lineLengthThreshold = lineLengthThreshold <= 0 ? Integer.MAX_VALUE :\n        lineLengthThreshold;\n      this.createSrcMap = createSrcMap;\n      this.sourceMapDetailLevel = sourceMapDetailLevel;\n      this.mappings = createSrcMap ? new ArrayDeque<Mapping>() : null;\n      this.allMappings = createSrcMap ? new ArrayList<Mapping>() : null;\n    }\n",
        "begin_line": 58,
        "end_line": 69,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0538
        },
        "num_failing_tests": 1
    },
    {
        "name": "CodePrinter.startSourceMapping#90",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "class_name": "com.google.javascript.jscomp.CodePrinter",
        "signature": "com.google.javascript.jscomp.CodePrinter.MappedCodePrinter.startSourceMapping(com.google.javascript.rhino.Node)",
        "snippet": "    @Override\n    void startSourceMapping(Node node) {\n      Preconditions.checkState(sourceMapDetailLevel != null);\n      Preconditions.checkState(node != null);\n      if (createSrcMap\n          && node.getSourceFileName() != null\n          && node.getLineno() > 0\n          && sourceMapDetailLevel.apply(node)) {\n        int line = getCurrentLineIndex();\n        int index = getCurrentCharIndex();\n        Preconditions.checkState(line >= 0);\n        Mapping mapping = new Mapping();\n        mapping.node = node;\n        mapping.start = new FilePosition(line, index);\n        mappings.push(mapping);\n        allMappings.add(mapping);\n      }\n    }\n",
        "begin_line": 90,
        "end_line": 107,
        "comment": "\n     * Starts the source mapping for the given\n     * node at the current position.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0538
        },
        "num_failing_tests": 1
    },
    {
        "name": "CodePrinter.endSourceMapping#113",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "class_name": "com.google.javascript.jscomp.CodePrinter",
        "signature": "com.google.javascript.jscomp.CodePrinter.MappedCodePrinter.endSourceMapping(com.google.javascript.rhino.Node)",
        "snippet": "    @Override\n    void endSourceMapping(Node node) {\n      if (createSrcMap && !mappings.isEmpty() && mappings.peek().node == node) {\n        Mapping mapping = mappings.pop();\n        int line = getCurrentLineIndex();\n        int index = getCurrentCharIndex();\n        Preconditions.checkState(line >= 0);\n        mapping.end = new FilePosition(line, index);\n      }\n    }\n",
        "begin_line": 113,
        "end_line": 122,
        "comment": "\n     * Finishes the source mapping for the given\n     * node at the current position.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0538
        },
        "num_failing_tests": 1
    },
    {
        "name": "CodePrinter.getCode#202",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "class_name": "com.google.javascript.jscomp.CodePrinter",
        "signature": "com.google.javascript.jscomp.CodePrinter.MappedCodePrinter.getCode()",
        "snippet": "    public String getCode() {\n      return code.toString();\n    }\n",
        "begin_line": 202,
        "end_line": 204,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0538
        },
        "num_failing_tests": 1
    },
    {
        "name": "CodePrinter.CompactCodePrinter#432",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "class_name": "com.google.javascript.jscomp.CodePrinter",
        "signature": "com.google.javascript.jscomp.CodePrinter.CompactCodePrinter.CompactCodePrinter(boolean, boolean, int, boolean, com.google.javascript.jscomp.SourceMap.DetailLevel)",
        "snippet": "    private CompactCodePrinter(boolean lineBreak,\n        boolean preferLineBreakAtEndOfFile, int lineLengthThreshold,\n        boolean createSrcMap, SourceMap.DetailLevel sourceMapDetailLevel) {\n      super(lineLengthThreshold, createSrcMap, sourceMapDetailLevel);\n      this.lineBreak = lineBreak;\n      this.preferLineBreakAtEndOfFile = preferLineBreakAtEndOfFile;\n    }\n",
        "begin_line": 432,
        "end_line": 438,
        "comment": "\n   * @param lineBreak break the lines a bit more aggressively\n   * @param lineLengthThreshold The length of a line after which we force\n   *                            a newline when possible.\n   * @param createSrcMap Whether to gather source position\n   *                            mapping information when printing.\n   * @param sourceMapDetailLevel A filter to control which nodes get mapped into\n   *     the source map.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0538
        },
        "num_failing_tests": 1
    },
    {
        "name": "CodePrinter.endFile#514",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "class_name": "com.google.javascript.jscomp.CodePrinter",
        "signature": "com.google.javascript.jscomp.CodePrinter.CompactCodePrinter.endFile()",
        "snippet": "    @Override\n    void endFile() {\n      super.endFile();\n      if (!preferLineBreakAtEndOfFile) {\n        return;\n      }\n      if (lineLength > lineLengthThreshold / 2) {\n        // Add an extra break at end of file.\n        append(\";\");\n        startNewLine();\n      } else if (prevCutPosition > 0) {\n        // Shift the previous break to end of file by replacing it with a\n        // <space> and adding a new break at end of file. Adding the space\n        // handles cases like instanceof\\nfoo. (it would be nice to avoid this)\n        code.setCharAt(prevCutPosition, ' ');\n        lineStartPosition = prevLineStartPosition;\n        lineLength = code.length() - lineStartPosition;\n        reportLineCut(lineIndex, prevCutPosition + 1, false);\n        lineIndex--;\n        prevCutPosition = 0;\n        prevLineStartPosition = 0;\n        append(\";\");\n        startNewLine();\n      } else {\n        // A small file with no line breaks. We do nothing in this case to\n        // avoid excessive line breaks. It's not ideal if a lot of these pile\n        // up, but that is reasonably unlikely.\n      }\n    }\n",
        "begin_line": 514,
        "end_line": 542,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0538
        },
        "num_failing_tests": 1
    },
    {
        "name": "CodePrinter.Builder#558",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "class_name": "com.google.javascript.jscomp.CodePrinter",
        "signature": "com.google.javascript.jscomp.CodePrinter.Builder.Builder(com.google.javascript.rhino.Node)",
        "snippet": "    Builder(Node node) {\n      root = node;\n    }\n",
        "begin_line": 558,
        "end_line": 560,
        "comment": "\n     * Sets the root node from which to generate the source code.\n     * @param node The root node.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0538
        },
        "num_failing_tests": 1
    },
    {
        "name": "CodePrinter.setCompilerOptions#565",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "class_name": "com.google.javascript.jscomp.CodePrinter",
        "signature": "com.google.javascript.jscomp.CodePrinter.Builder.setCompilerOptions(com.google.javascript.jscomp.CompilerOptions)",
        "snippet": "    Builder setCompilerOptions(CompilerOptions options) {\n      try {\n        this.options = (CompilerOptions) options.clone();\n      } catch (CloneNotSupportedException e) {\n        throw Throwables.propagate(e);\n      }\n      return this;\n    }\n",
        "begin_line": 565,
        "end_line": 572,
        "comment": "\n     * Sets the output options from compiler options.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0538
        },
        "num_failing_tests": 1
    },
    {
        "name": "CodePrinter.setSourceMap#612",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "class_name": "com.google.javascript.jscomp.CodePrinter",
        "signature": "com.google.javascript.jscomp.CodePrinter.Builder.setSourceMap(com.google.javascript.jscomp.SourceMap)",
        "snippet": "    Builder setSourceMap(SourceMap sourceMap) {\n      this.sourceMap = sourceMap;\n      return this;\n    }\n",
        "begin_line": 612,
        "end_line": 615,
        "comment": "\n     * Sets the source map to which to write the metadata about\n     * the generated source code.\n     *\n     * @param sourceMap The source map.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0538
        },
        "num_failing_tests": 1
    },
    {
        "name": "CodePrinter.setTagAsStrict#620",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "class_name": "com.google.javascript.jscomp.CodePrinter",
        "signature": "com.google.javascript.jscomp.CodePrinter.Builder.setTagAsStrict(boolean)",
        "snippet": "    Builder setTagAsStrict(boolean tagAsStrict) {\n      this.tagAsStrict = tagAsStrict;\n      return this;\n    }\n",
        "begin_line": 620,
        "end_line": 623,
        "comment": "\n     * Set whether the output should be tags as ECMASCRIPT 5 Strict.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0538
        },
        "num_failing_tests": 1
    },
    {
        "name": "CodePrinter.build#628",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "class_name": "com.google.javascript.jscomp.CodePrinter",
        "signature": "com.google.javascript.jscomp.CodePrinter.Builder.build()",
        "snippet": "    String build() {\n      if (root == null) {\n        throw new IllegalStateException(\n            \"Cannot build without root node being specified\");\n      }\n\n      Format outputFormat = outputTypes\n          ? Format.TYPED\n          : options.prettyPrint\n              ? Format.PRETTY\n              : Format.COMPACT;\n\n      return toSource(root, outputFormat, options, registry,\n          sourceMap, tagAsStrict);\n    }\n",
        "begin_line": 628,
        "end_line": 642,
        "comment": "\n     * Generates the source code and returns it.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0538
        },
        "num_failing_tests": 1
    },
    {
        "name": "CodePrinter.toSource#654",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "class_name": "com.google.javascript.jscomp.CodePrinter",
        "signature": "com.google.javascript.jscomp.CodePrinter.toSource(com.google.javascript.rhino.Node, com.google.javascript.jscomp.CodePrinter.Format, com.google.javascript.jscomp.CompilerOptions, com.google.javascript.rhino.jstype.JSTypeRegistry, com.google.javascript.jscomp.SourceMap, boolean)",
        "snippet": "  private static String toSource(Node root, Format outputFormat,\n      CompilerOptions options, JSTypeRegistry registry,\n      SourceMap sourceMap,  boolean tagAsStrict) {\n    Preconditions.checkState(options.sourceMapDetailLevel != null);\n\n    boolean createSourceMap = (sourceMap != null);\n    MappedCodePrinter mcp =\n        outputFormat == Format.COMPACT\n        ? new CompactCodePrinter(\n            options.lineBreak,\n            options.preferLineBreakAtEndOfFile,\n            options.lineLengthThreshold,\n            createSourceMap,\n            options.sourceMapDetailLevel)\n        : new PrettyCodePrinter(\n            options.lineLengthThreshold,\n            createSourceMap,\n            options.sourceMapDetailLevel);\n    CodeGenerator cg =\n        outputFormat == Format.TYPED\n        ? new TypedCodeGenerator(mcp, options, registry)\n        : new CodeGenerator(mcp, options);\n\n    if (tagAsStrict) {\n      cg.tagAsStrict();\n    }\n\n    cg.add(root);\n    mcp.endFile();\n\n    String code = mcp.getCode();\n\n    if (createSourceMap) {\n      mcp.generateSourceMap(sourceMap);\n    }\n\n    return code;\n  }\n",
        "begin_line": 654,
        "end_line": 691,
        "comment": "\n   * Converts a tree to JS code\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0538
        },
        "num_failing_tests": 1
    },
    {
        "name": "CodeGenerator.CodeGenerator#65",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodeGenerator.java",
        "class_name": "com.google.javascript.jscomp.CodeGenerator",
        "signature": "com.google.javascript.jscomp.CodeGenerator.CodeGenerator(com.google.javascript.jscomp.CodeConsumer, com.google.javascript.jscomp.CompilerOptions)",
        "snippet": "  CodeGenerator(\n      CodeConsumer consumer,\n      CompilerOptions options) {\n    cc = consumer;\n\n    Charset outputCharset = options.getOutputCharset();\n    if (outputCharset == null || outputCharset == Charsets.US_ASCII) {\n      // If we want our default (pretending to be UTF-8, but escaping anything\n      // outside of straight ASCII), then don't use the encoder, but\n      // just special-case the code.  This keeps the normal path through\n      // the code identical to how it's been for years.\n      this.outputCharsetEncoder = null;\n    } else {\n      this.outputCharsetEncoder = outputCharset.newEncoder();\n    }\n    this.preferSingleQuotes = options.preferSingleQuotes;\n    this.trustedStrings = options.trustedStrings;\n  }\n",
        "begin_line": 65,
        "end_line": 82,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0538
        },
        "num_failing_tests": 1
    },
    {
        "name": "CodeConsumer.endFile#312",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodeConsumer.java",
        "class_name": "com.google.javascript.jscomp.CodeConsumer",
        "signature": "com.google.javascript.jscomp.CodeConsumer.endFile()",
        "snippet": "  void endFile() {}\n",
        "begin_line": 312,
        "end_line": 312,
        "comment": " Called when we're at the end of a file. ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0538
        },
        "num_failing_tests": 1
    },
    {
        "name": "CodeConsumer.continueProcessing#52",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodeConsumer.java",
        "class_name": "com.google.javascript.jscomp.CodeConsumer",
        "signature": "com.google.javascript.jscomp.CodeConsumer.continueProcessing()",
        "snippet": "  boolean continueProcessing() {\n    return true;\n  }\n",
        "begin_line": 52,
        "end_line": 54,
        "comment": "\n   * Provides a means of interrupting the CodeGenerator. Derived classes should\n   * return false to stop further processing.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0538
        },
        "num_failing_tests": 1
    },
    {
        "name": "AstValidator.validateNonEmptyString#325",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AstValidator.java",
        "class_name": "com.google.javascript.jscomp.AstValidator",
        "signature": "com.google.javascript.jscomp.AstValidator.validateNonEmptyString(com.google.javascript.rhino.Node)",
        "snippet": "  private void validateNonEmptyString(Node n) {\n    validateNonNullString(n);\n    if (n.getString().isEmpty()) {\n      violation(\"Expected non-empty string.\", n);\n    }\n  }\n",
        "begin_line": 325,
        "end_line": 330,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0538
        },
        "num_failing_tests": 1
    },
    {
        "name": "AstValidator.validateNonNullString#332",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AstValidator.java",
        "class_name": "com.google.javascript.jscomp.AstValidator",
        "signature": "com.google.javascript.jscomp.AstValidator.validateNonNullString(com.google.javascript.rhino.Node)",
        "snippet": "  private void validateNonNullString(Node n) {\n    if (n.getString() == null) {\n      violation(\"Expected non-null string.\", n);\n    }\n  }\n",
        "begin_line": 332,
        "end_line": 336,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0538
        },
        "num_failing_tests": 1
    },
    {
        "name": "AstValidator.validateName#338",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AstValidator.java",
        "class_name": "com.google.javascript.jscomp.AstValidator",
        "signature": "com.google.javascript.jscomp.AstValidator.validateName(com.google.javascript.rhino.Node)",
        "snippet": "  private void validateName(Node n) {\n    validateNodeType(Token.NAME, n);\n    validateNonEmptyString(n);\n    validateChildCount(n, 0);\n  }\n",
        "begin_line": 338,
        "end_line": 342,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0538
        },
        "num_failing_tests": 1
    },
    {
        "name": "CodeGenerator.add#99",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodeGenerator.java",
        "class_name": "com.google.javascript.jscomp.CodeGenerator",
        "signature": "com.google.javascript.jscomp.CodeGenerator.add(com.google.javascript.rhino.Node)",
        "snippet": "  void add(Node n) {\n    add(n, Context.OTHER);\n  }\n",
        "begin_line": 99,
        "end_line": 101,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0537
        },
        "num_failing_tests": 1
    },
    {
        "name": "ParserRunner.initResourceConfig#82",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/ParserRunner.java",
        "class_name": "com.google.javascript.jscomp.parsing.ParserRunner",
        "signature": "com.google.javascript.jscomp.parsing.ParserRunner.initResourceConfig()",
        "snippet": "  private static synchronized void initResourceConfig() {\n    if (annotationNames != null) {\n      return;\n    }\n\n    ResourceBundle config = ResourceBundle.getBundle(configResource);\n    annotationNames = extractList(config.getString(\"jsdoc.annotations\"));\n    suppressionNames = extractList(config.getString(\"jsdoc.suppressions\"));\n    reservedVars = extractList(config.getString(\"compiler.reserved.vars\"));\n  }\n",
        "begin_line": 82,
        "end_line": 91,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0536
        },
        "num_failing_tests": 1
    },
    {
        "name": "IRFactory.processBlock#622",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.TransformDispatcher.processBlock(com.google.javascript.rhino.head.ast.Block)",
        "snippet": "    @Override\n    Node processBlock(Block blockNode) {\n      return processGeneric(blockNode);\n    }\n",
        "begin_line": 622,
        "end_line": 625,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0536
        },
        "num_failing_tests": 1
    },
    {
        "name": "PrepareAst.visit#132",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/PrepareAst.java",
        "class_name": "com.google.javascript.jscomp.PrepareAst",
        "signature": "com.google.javascript.jscomp.PrepareAst.PrepareAnnotations.visit(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "    @Override\n    public void visit(NodeTraversal t, Node n, Node parent) {\n      switch (n.getType()) {\n        case Token.CALL:\n          annotateCalls(n);\n          break;\n\n        case Token.FUNCTION:\n          annotateDispatchers(n, parent);\n          break;\n      }\n    }\n",
        "begin_line": 132,
        "end_line": 143,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0536
        },
        "num_failing_tests": 1
    },
    {
        "name": "PrepareAst.annotateDispatchers#179",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/PrepareAst.java",
        "class_name": "com.google.javascript.jscomp.PrepareAst",
        "signature": "com.google.javascript.jscomp.PrepareAst.PrepareAnnotations.annotateDispatchers(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "    private void annotateDispatchers(Node n, Node parent) {\n      Preconditions.checkState(n.isFunction());\n      if (parent.getJSDocInfo() != null\n          && parent.getJSDocInfo().isJavaDispatch()) {\n        if (parent.isAssign()) {\n          Preconditions.checkState(parent.getLastChild() == n);\n          n.putBooleanProp(Node.IS_DISPATCHER, true);\n        }\n      }\n    }\n",
        "begin_line": 179,
        "end_line": 188,
        "comment": "\n     * Translate dispatcher info into the property expected node.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0536
        },
        "num_failing_tests": 1
    },
    {
        "name": "NodeUtil.isFunctionExpression#1944",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "signature": "com.google.javascript.jscomp.NodeUtil.isFunctionExpression(com.google.javascript.rhino.Node)",
        "snippet": "  static boolean isFunctionExpression(Node n) {\n    return n.isFunction() && !isStatement(n);\n  }\n",
        "begin_line": 1944,
        "end_line": 1946,
        "comment": "\n   * Is a FUNCTION node an function expression? An function expression is one\n   * that has either no name or a name that is not added to the current scope.\n   *\n   * <p>Some examples of function expressions:\n   * <pre>\n   * (function () {})\n   * (function f() {})()\n   * [ function f() {} ]\n   * var f = function f() {};\n   * for (function f() {};;) {}\n   * </pre>\n   *\n   * <p>Some examples of functions that are <em>not</em> expressions:\n   * <pre>\n   * function f() {}\n   * if (x); else function f() {}\n   * for (;;) { function f() {} }\n   * </pre>\n   *\n   * @param n A node\n   * @return Whether n is an function used within an expression.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0536
        },
        "num_failing_tests": 1
    },
    {
        "name": "NodeTraversal.traverseBranch#477",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeTraversal.java",
        "class_name": "com.google.javascript.jscomp.NodeTraversal",
        "signature": "com.google.javascript.jscomp.NodeTraversal.traverseBranch(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  @SuppressWarnings(\"fallthrough\")\n  private void traverseBranch(Node n, Node parent) {\n    int type = n.getType();\n    if (type == Token.SCRIPT) {\n      inputId = n.getInputId();\n      sourceName = getSourceName(n);\n    }\n\n    curNode = n;\n    if (!callback.shouldTraverse(this, n, parent)) return;\n\n    switch (type) {\n      case Token.FUNCTION:\n        traverseFunction(n, parent);\n        break;\n\n      default:\n        for (Node child = n.getFirstChild(); child != null; ) {\n          // child could be replaced, in which case our child node\n          // would no longer point to the true next\n          Node next = child.getNext();\n          traverseBranch(child, n);\n          child = next;\n        }\n        break;\n    }\n\n    curNode = n;\n    callback.visit(this, n, parent);\n  }\n",
        "begin_line": 477,
        "end_line": 506,
        "comment": "\n   * Traverses a branch.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0536
        },
        "num_failing_tests": 1
    },
    {
        "name": "AstValidator.AstValidator#47",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AstValidator.java",
        "class_name": "com.google.javascript.jscomp.AstValidator",
        "signature": "com.google.javascript.jscomp.AstValidator.AstValidator()",
        "snippet": "  public AstValidator() {\n    this.violationHandler = new ViolationHandler() {\n      @Override\n      public void handleViolation(String message, Node n) {\n        throw new IllegalStateException(\n            message + \" Reference node \" + n.toString());\n      }\n    };\n  }\n",
        "begin_line": 47,
        "end_line": 55,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0536
        },
        "num_failing_tests": 1
    },
    {
        "name": "AstValidator.validateCodeRoot#75",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AstValidator.java",
        "class_name": "com.google.javascript.jscomp.AstValidator",
        "signature": "com.google.javascript.jscomp.AstValidator.validateCodeRoot(com.google.javascript.rhino.Node)",
        "snippet": "  public void validateCodeRoot(Node n) {\n    validateNodeType(Token.BLOCK, n);\n    validateIsSynthetic(n);\n    for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n      validateScript(c);\n    }\n  }\n",
        "begin_line": 75,
        "end_line": 81,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0536
        },
        "num_failing_tests": 1
    },
    {
        "name": "AstValidator.validateScript#83",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AstValidator.java",
        "class_name": "com.google.javascript.jscomp.AstValidator",
        "signature": "com.google.javascript.jscomp.AstValidator.validateScript(com.google.javascript.rhino.Node)",
        "snippet": "  public void validateScript(Node n) {\n    validateNodeType(Token.SCRIPT, n);\n    validateHasSourceName(n);\n    validateHasInputId(n);\n    for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n      validateStatement(c);\n    }\n  }\n",
        "begin_line": 83,
        "end_line": 90,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0536
        },
        "num_failing_tests": 1
    },
    {
        "name": "AstValidator.validateIsSynthetic#292",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AstValidator.java",
        "class_name": "com.google.javascript.jscomp.AstValidator",
        "signature": "com.google.javascript.jscomp.AstValidator.validateIsSynthetic(com.google.javascript.rhino.Node)",
        "snippet": "  private void validateIsSynthetic(Node n) {\n    if (!n.getBooleanProp(Node.SYNTHETIC_BLOCK_PROP)) {\n      violation(\"Missing 'synthetic block' annotation.\", n);\n    }\n  }\n",
        "begin_line": 292,
        "end_line": 296,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0536
        },
        "num_failing_tests": 1
    },
    {
        "name": "AstValidator.validateHasSourceName#298",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AstValidator.java",
        "class_name": "com.google.javascript.jscomp.AstValidator",
        "signature": "com.google.javascript.jscomp.AstValidator.validateHasSourceName(com.google.javascript.rhino.Node)",
        "snippet": "  private void validateHasSourceName(Node n) {\n    String sourceName = n.getSourceFileName();\n    if (sourceName == null || sourceName.isEmpty()) {\n      violation(\"Missing 'source name' annotation.\", n);\n    }\n  }\n",
        "begin_line": 298,
        "end_line": 303,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0536
        },
        "num_failing_tests": 1
    },
    {
        "name": "AstValidator.validateHasInputId#305",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AstValidator.java",
        "class_name": "com.google.javascript.jscomp.AstValidator",
        "signature": "com.google.javascript.jscomp.AstValidator.validateHasInputId(com.google.javascript.rhino.Node)",
        "snippet": "  private void validateHasInputId(Node n) {\n    InputId inputId = n.getInputId();\n    if (inputId == null) {\n      violation(\"Missing 'input id' annotation.\", n);\n    }\n  }\n",
        "begin_line": 305,
        "end_line": 310,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0536
        },
        "num_failing_tests": 1
    },
    {
        "name": "AstValidator.validateNodeType#766",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AstValidator.java",
        "class_name": "com.google.javascript.jscomp.AstValidator",
        "signature": "com.google.javascript.jscomp.AstValidator.validateNodeType(int, com.google.javascript.rhino.Node)",
        "snippet": "  private void validateNodeType(int type, Node n) {\n    if (n.getType() != type) {\n      violation(\n          \"Expected \" + Token.name(type) + \" but was \"\n              + Token.name(n.getType()), n);\n    }\n  }\n",
        "begin_line": 766,
        "end_line": 772,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0536
        },
        "num_failing_tests": 1
    },
    {
        "name": "AbstractCompiler.isNormalized#289",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AbstractCompiler.java",
        "class_name": "com.google.javascript.jscomp.AbstractCompiler",
        "signature": "com.google.javascript.jscomp.AbstractCompiler.LifeCycleStage.isNormalized()",
        "snippet": "    boolean isNormalized() {\n      return this == NORMALIZED || this == NORMALIZED_OBFUSCATED;\n    }\n",
        "begin_line": 289,
        "end_line": 291,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0536
        },
        "num_failing_tests": 1
    },
    {
        "name": "AbstractCompiler.getLifeCycleStage#185",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AbstractCompiler.java",
        "class_name": "com.google.javascript.jscomp.AbstractCompiler",
        "signature": "com.google.javascript.jscomp.AbstractCompiler.getLifeCycleStage()",
        "snippet": "  LifeCycleStage getLifeCycleStage() {\n    return stage;\n  }\n",
        "begin_line": 185,
        "end_line": 187,
        "comment": "\n   * @return The current life-cycle stage of the AST we're working on.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0536
        },
        "num_failing_tests": 1
    },
    {
        "name": "NodeUtil.isStatement#1751",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "signature": "com.google.javascript.jscomp.NodeUtil.isStatement(com.google.javascript.rhino.Node)",
        "snippet": "  static boolean isStatement(Node n) {\n    return isStatementParent(n.getParent());\n  }\n",
        "begin_line": 1751,
        "end_line": 1753,
        "comment": "\n   * @return Whether the node is used as a statement.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0535
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.isString#2339",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.isString()",
        "snippet": "  public boolean isString() {\n    return this.getType() == Token.STRING;\n  }\n",
        "begin_line": 2339,
        "end_line": 2341,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0533
        },
        "num_failing_tests": 1
    },
    {
        "name": "IRFactory.newNode#1474",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.newNode(int, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  private Node newNode(int type, Node child1, Node child2) {\n    return new Node(type, child1, child2).clonePropsFrom(templateNode);\n  }\n",
        "begin_line": 1474,
        "end_line": 1476,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0531
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.hasOneChild#1378",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.hasOneChild()",
        "snippet": "  public boolean hasOneChild() {\n    return first != null && first == last;\n  }\n",
        "begin_line": 1378,
        "end_line": 1380,
        "comment": "\n   * Check for one child more efficiently than by iterating over all the\n   * children as is done with Node.getChildCount().\n   *\n   * @return Whether the node has exactly one child.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.053
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.isCall#2183",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.isCall()",
        "snippet": "  public boolean isCall() {\n    return this.getType() == Token.CALL;\n  }\n",
        "begin_line": 2183,
        "end_line": 2185,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.053
        },
        "num_failing_tests": 1
    },
    {
        "name": "ParserRunner.createConfig#61",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/ParserRunner.java",
        "class_name": "com.google.javascript.jscomp.parsing.ParserRunner",
        "signature": "com.google.javascript.jscomp.parsing.ParserRunner.createConfig(boolean, com.google.javascript.jscomp.parsing.Config.LanguageMode, boolean, java.util.Set<java.lang.String>)",
        "snippet": "  public static Config createConfig(boolean isIdeMode,\n                                    LanguageMode languageMode,\n                                    boolean acceptConstKeyword,\n                                    Set<String> extraAnnotationNames) {\n    initResourceConfig();\n    Set<String> effectiveAnnotationNames;\n    if (extraAnnotationNames == null) {\n      effectiveAnnotationNames = annotationNames;\n    } else {\n      effectiveAnnotationNames = new HashSet<String>(annotationNames);\n      effectiveAnnotationNames.addAll(extraAnnotationNames);\n    }\n    return new Config(effectiveAnnotationNames, suppressionNames,\n        isIdeMode, languageMode, acceptConstKeyword);\n  }\n",
        "begin_line": 61,
        "end_line": 75,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.053
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.getIntValue#331",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.IntPropListItem.getIntValue()",
        "snippet": "    @Override\n    public int getIntValue() {\n      return intValue;\n    }\n",
        "begin_line": 331,
        "end_line": 334,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0529
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.Node#372",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.Node(int, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  public Node(int nodeType, Node left, Node right) {\n    Preconditions.checkArgument(left.parent == null,\n        \"first new child has existing parent\");\n    Preconditions.checkArgument(left.next == null,\n        \"first new child has existing sibling\");\n    Preconditions.checkArgument(right.parent == null,\n        \"second new child has existing parent\");\n    Preconditions.checkArgument(right.next == null,\n        \"second new child has existing sibling\");\n    type = nodeType;\n    parent = null;\n    first = left;\n    last = right;\n    left.next = right;\n    left.parent = this;\n    right.next = null;\n    right.parent = this;\n    sourcePosition = -1;\n  }\n",
        "begin_line": 372,
        "end_line": 390,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0529
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.hasChildren#527",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.hasChildren()",
        "snippet": "  public boolean hasChildren() {\n    return first != null;\n  }\n",
        "begin_line": 527,
        "end_line": 529,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0528
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.isExprResult#2231",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.isExprResult()",
        "snippet": "  public boolean isExprResult() {\n    return this.getType() == Token.EXPR_RESULT;\n  }\n",
        "begin_line": 2231,
        "end_line": 2233,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0528
        },
        "num_failing_tests": 1
    },
    {
        "name": "Compiler.init#365",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.init(java.util.List<T1>, java.util.List<T2>, com.google.javascript.jscomp.CompilerOptions)",
        "snippet": "  public <T1 extends SourceFile, T2 extends SourceFile> void init(\n      List<T1> externs,\n      List<T2> inputs,\n      CompilerOptions options) {\n    JSModule module = new JSModule(SINGLETON_MODULE_NAME);\n    for (SourceFile input : inputs) {\n      module.add(input);\n    }\n\n    initModules(externs, Lists.newArrayList(module), options);\n  }\n",
        "begin_line": 365,
        "end_line": 375,
        "comment": "\n   * Initializes the instance state needed for a compile job.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0525
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.getBooleanProp#808",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.getBooleanProp(int)",
        "snippet": "  public boolean getBooleanProp(int propType) {\n    return getIntProp(propType) != 0;\n  }\n",
        "begin_line": 808,
        "end_line": 810,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0524
        },
        "num_failing_tests": 1
    },
    {
        "name": "NodeUtil.getInputId#2878",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "signature": "com.google.javascript.jscomp.NodeUtil.getInputId(com.google.javascript.rhino.Node)",
        "snippet": "  public static InputId getInputId(Node n) {\n    while (n != null && !n.isScript()) {\n      n = n.getParent();\n    }\n\n    return (n != null && n.isScript()) ? n.getInputId() : null;\n  }\n",
        "begin_line": 2878,
        "end_line": 2884,
        "comment": "\n   * @param n The node.\n   * @return The InputId property on the node or its ancestors.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0518
        },
        "num_failing_tests": 1
    },
    {
        "name": "IRFactory.processExpressionStatement#702",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.TransformDispatcher.processExpressionStatement(com.google.javascript.rhino.head.ast.ExpressionStatement)",
        "snippet": "    @Override\n    Node processExpressionStatement(ExpressionStatement statementNode) {\n      Node node = newNode(transformTokenType(statementNode.getType()));\n      node.addChildToBack(transform(statementNode.getExpression()));\n      return node;\n    }\n",
        "begin_line": 702,
        "end_line": 707,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0517
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.getString#207",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.StringNode.getString()",
        "snippet": "    @Override\n    public String getString() {\n      return this.str;\n    }\n",
        "begin_line": 207,
        "end_line": 210,
        "comment": "\n     * returns the string content.\n     * @return non null.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0515
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.getLastChild#535",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.getLastChild()",
        "snippet": "  public Node getLastChild() {\n    return last;\n  }\n",
        "begin_line": 535,
        "end_line": 537,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0515
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.isVar#2371",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.isVar()",
        "snippet": "  public boolean isVar() {\n    return this.getType() == Token.VAR;\n  }\n",
        "begin_line": 2371,
        "end_line": 2373,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0514
        },
        "num_failing_tests": 1
    },
    {
        "name": "Compiler.hoistExterns#1421",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.hoistExterns(com.google.javascript.rhino.Node)",
        "snippet": "  private void hoistExterns(Node externsRoot) {\n    boolean staleInputs = false;\n    for (CompilerInput input : inputs) {\n      if (options.dependencyOptions.needsManagement()) {\n        // If we're doing scanning dependency info anyway, use that\n        // information to skip sources that obviously aren't externs.\n        if (!input.getProvides().isEmpty() || !input.getRequires().isEmpty()) {\n          continue;\n        }\n      }\n\n      Node n = input.getAstRoot(this);\n\n      // Inputs can have a null AST on a parse error.\n      if (n == null) {\n        continue;\n      }\n\n      JSDocInfo info = n.getJSDocInfo();\n      if (info != null && info.isExterns()) {\n        // If the input file is explicitly marked as an externs file, then\n        // assume the programmer made a mistake and throw it into\n        // the externs pile anyways.\n        externsRoot.addChildToBack(n);\n        input.setIsExtern(true);\n\n        input.getModule().remove(input);\n\n        externs.add(input);\n        staleInputs = true;\n      }\n    }\n\n    if (staleInputs) {\n      repartitionInputs();\n    }\n  }\n",
        "begin_line": 1421,
        "end_line": 1457,
        "comment": "\n   * Hoists inputs with the @externs annotation into the externs list.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0514
        },
        "num_failing_tests": 1
    },
    {
        "name": "Compiler.parseInputs#1296",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.parseInputs()",
        "snippet": "  Node parseInputs() {\n    boolean devMode = options.devMode != DevMode.OFF;\n\n    // If old roots exist (we are parsing a second time), detach each of the\n    // individual file parse trees.\n    if (externsRoot != null) {\n      externsRoot.detachChildren();\n    }\n    if (jsRoot != null) {\n      jsRoot.detachChildren();\n    }\n\n    // Parse main JS sources.\n    jsRoot = IR.block();\n    jsRoot.setIsSyntheticBlock(true);\n\n    externsRoot = IR.block();\n    externsRoot.setIsSyntheticBlock(true);\n\n    externAndJsRoot = IR.block(externsRoot, jsRoot);\n    externAndJsRoot.setIsSyntheticBlock(true);\n\n    if (options.tracer.isOn()) {\n      tracker = new PerformanceTracker(jsRoot, options.tracer);\n      addChangeHandler(tracker.getCodeChangeHandler());\n    }\n\n    Tracer tracer = newTracer(PARSING_PASS_NAME);\n\n    try {\n      // Parse externs sources.\n      for (CompilerInput input : externs) {\n        Node n = input.getAstRoot(this);\n        if (hasErrors()) {\n          return null;\n        }\n        externsRoot.addChildToBack(n);\n      }\n\n      // Modules inferred in ProcessCommonJS pass.\n      if (options.transformAMDToCJSModules || options.processCommonJSModules) {\n        processAMDAndCommonJSModules();\n      }\n\n      hoistExterns(externsRoot);\n\n      // Check if the sources need to be re-ordered.\n      boolean staleInputs = false;\n      if (options.dependencyOptions.needsManagement()) {\n        for (CompilerInput input : inputs) {\n          // Forward-declare all the provided types, so that they\n          // are not flagged even if they are dropped from the process.\n          for (String provide : input.getProvides()) {\n            getTypeRegistry().forwardDeclareType(provide);\n          }\n        }\n\n        try {\n          inputs =\n              (moduleGraph == null ? new JSModuleGraph(modules) : moduleGraph)\n              .manageDependencies(options.dependencyOptions, inputs);\n          staleInputs = true;\n        } catch (CircularDependencyException e) {\n          report(JSError.make(\n              JSModule.CIRCULAR_DEPENDENCY_ERROR, e.getMessage()));\n        } catch (MissingProvideException e) {\n          report(JSError.make(\n              MISSING_ENTRY_ERROR, e.getMessage()));\n        } catch (JSModuleGraph.MissingModuleException e) {\n          report(JSError.make(\n              MISSING_MODULE_ERROR, e.getMessage()));\n        }\n\n        // If in IDE mode, we ignore the error and keep going.\n        if (hasErrors()) {\n          return null;\n        }\n      }\n\n      hoistNoCompileFiles();\n\n      if (staleInputs) {\n        repartitionInputs();\n      }\n\n      // Build the AST.\n      for (CompilerInput input : inputs) {\n        Node n = input.getAstRoot(this);\n        if (n == null) {\n          continue;\n        }\n\n        if (devMode) {\n          runSanityCheck();\n          if (hasErrors()) {\n            return null;\n          }\n        }\n\n        if (options.sourceMapOutputPath != null ||\n            options.nameReferenceReportPath != null) {\n\n          // Annotate the nodes in the tree with information from the\n          // input file. This information is used to construct the SourceMap.\n          SourceInformationAnnotator sia =\n              new SourceInformationAnnotator(\n                  input.getName(), options.devMode != DevMode.OFF);\n          NodeTraversal.traverse(this, n, sia);\n        }\n\n        jsRoot.addChildToBack(n);\n      }\n\n      if (hasErrors()) {\n        return null;\n      }\n      return externAndJsRoot;\n    } finally {\n      stopTracer(tracer, PARSING_PASS_NAME);\n    }\n  }\n",
        "begin_line": 1296,
        "end_line": 1416,
        "comment": "\n   * Parses the externs and main inputs.\n   *\n   * @return A synthetic root node whose two children are the externs root\n   *     and the main root\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0513
        },
        "num_failing_tests": 1
    },
    {
        "name": "Compiler.hoistNoCompileFiles#1462",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.hoistNoCompileFiles()",
        "snippet": "  private void hoistNoCompileFiles() {\n    boolean staleInputs = false;\n    for (CompilerInput input : inputs) {\n      Node n = input.getAstRoot(this);\n\n      // Inputs can have a null AST on a parse error.\n      if (n == null) {\n        continue;\n      }\n\n      JSDocInfo info = n.getJSDocInfo();\n      if (info != null && info.isNoCompile()) {\n        input.getModule().remove(input);\n        staleInputs = true;\n      }\n    }\n\n    if (staleInputs) {\n      repartitionInputs();\n    }\n  }\n",
        "begin_line": 1462,
        "end_line": 1482,
        "comment": "\n   * Hoists inputs with the @nocompiler annotation out of the inputs.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0513
        },
        "num_failing_tests": 1
    },
    {
        "name": "Compiler.getErrorCount#2125",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.getErrorCount()",
        "snippet": "  public int getErrorCount() {\n    return errorManager.getErrorCount();\n  }\n",
        "begin_line": 2125,
        "end_line": 2127,
        "comment": "\n   * Gets the number of errors.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0513
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.isName#2287",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.isName()",
        "snippet": "  public boolean isName() {\n    return this.getType() == Token.NAME;\n  }\n",
        "begin_line": 2287,
        "end_line": 2289,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0512
        },
        "num_failing_tests": 1
    },
    {
        "name": "Compiler.makeCompilerInput#436",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.makeCompilerInput(java.util.List<T>, boolean)",
        "snippet": "  private <T extends SourceFile> List<CompilerInput> makeCompilerInput(\n      List<T> files, boolean isExtern) {\n    List<CompilerInput> inputs = Lists.newArrayList();\n    for (T file : files) {\n      inputs.add(new CompilerInput(file, isExtern));\n    }\n    return inputs;\n  }\n",
        "begin_line": 436,
        "end_line": 443,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.051
        },
        "num_failing_tests": 1
    },
    {
        "name": "Compiler.initInputsByIdMap#530",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.initInputsByIdMap()",
        "snippet": "  void initInputsByIdMap() {\n    inputsById = new HashMap<InputId, CompilerInput>();\n    for (CompilerInput input : externs) {\n      InputId id = input.getInputId();\n      CompilerInput previous = putCompilerInput(id, input);\n      if (previous != null) {\n        report(JSError.make(DUPLICATE_EXTERN_INPUT, input.getName()));\n      }\n    }\n    for (CompilerInput input : inputs) {\n      InputId id = input.getInputId();\n      CompilerInput previous = putCompilerInput(id, input);\n      if (previous != null) {\n        report(JSError.make(DUPLICATE_INPUT, input.getName()));\n      }\n    }\n  }\n",
        "begin_line": 530,
        "end_line": 546,
        "comment": "\n   * Creates a map to make looking up an input by name fast. Also checks for\n   * duplicate inputs.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.051
        },
        "num_failing_tests": 1
    },
    {
        "name": "Compiler.getErrors#997",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.getErrors()",
        "snippet": "  public JSError[] getErrors() {\n    return errorManager.getErrors();\n  }\n",
        "begin_line": 997,
        "end_line": 999,
        "comment": "\n   * Returns the array of errors (never null).\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.051
        },
        "num_failing_tests": 1
    },
    {
        "name": "Compiler.getWarnings#1004",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.getWarnings()",
        "snippet": "  public JSError[] getWarnings() {\n    return errorManager.getWarnings();\n  }\n",
        "begin_line": 1004,
        "end_line": 1006,
        "comment": "\n   * Returns the array of warnings (never null).\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.051
        },
        "num_failing_tests": 1
    },
    {
        "name": "BasicErrorManager.getWarnings#89",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/BasicErrorManager.java",
        "class_name": "com.google.javascript.jscomp.BasicErrorManager",
        "signature": "com.google.javascript.jscomp.BasicErrorManager.getWarnings()",
        "snippet": "  @Override\n  public JSError[] getWarnings() {\n    return toArray(CheckLevel.WARNING);\n  }\n",
        "begin_line": 89,
        "end_line": 92,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.051
        },
        "num_failing_tests": 1
    },
    {
        "name": "CompilerOptions.setCodingConvention#1384",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "signature": "com.google.javascript.jscomp.CompilerOptions.setCodingConvention(com.google.javascript.jscomp.CodingConvention)",
        "snippet": "  public void setCodingConvention(CodingConvention codingConvention) {\n    this.codingConvention = codingConvention;\n  }\n",
        "begin_line": 1384,
        "end_line": 1386,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.051
        },
        "num_failing_tests": 1
    },
    {
        "name": "Compiler.initModules#393",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.initModules(java.util.List<T>, java.util.List<com.google.javascript.jscomp.JSModule>, com.google.javascript.jscomp.CompilerOptions)",
        "snippet": "  public <T extends SourceFile> void initModules(\n      List<T> externs, List<JSModule> modules, CompilerOptions options) {\n    initOptions(options);\n\n    checkFirstModule(modules);\n    fillEmptyModules(modules);\n\n    this.externs = makeCompilerInput(externs, true);\n\n    // Generate the module graph, and report any errors in the module\n    // specification as errors.\n    this.modules = modules;\n    if (modules.size() > 1) {\n      try {\n        this.moduleGraph = new JSModuleGraph(modules);\n      } catch (JSModuleGraph.ModuleDependenceException e) {\n        // problems with the module format.  Report as an error.  The\n        // message gives all details.\n        report(JSError.make(MODULE_DEPENDENCY_ERROR,\n                e.getModule().getName(), e.getDependentModule().getName()));\n        return;\n      }\n    } else {\n      this.moduleGraph = null;\n    }\n\n    this.inputs = getAllInputsFromModules(modules);\n    initBasedOnOptions();\n\n    initInputsByIdMap();\n  }\n",
        "begin_line": 393,
        "end_line": 423,
        "comment": "\n   * Initializes the instance state needed for a compile job if the sources\n   * are in modules.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.051
        },
        "num_failing_tests": 1
    },
    {
        "name": "BasicErrorManager.getWarningCount#79",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/BasicErrorManager.java",
        "class_name": "com.google.javascript.jscomp.BasicErrorManager",
        "signature": "com.google.javascript.jscomp.BasicErrorManager.getWarningCount()",
        "snippet": "  @Override\n  public int getWarningCount() {\n    return warningCount;\n  }\n",
        "begin_line": 79,
        "end_line": 82,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.051
        },
        "num_failing_tests": 1
    },
    {
        "name": "BasicErrorManager.getErrors#84",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/BasicErrorManager.java",
        "class_name": "com.google.javascript.jscomp.BasicErrorManager",
        "signature": "com.google.javascript.jscomp.BasicErrorManager.getErrors()",
        "snippet": "  @Override\n  public JSError[] getErrors() {\n    return toArray(CheckLevel.ERROR);\n  }\n",
        "begin_line": 84,
        "end_line": 87,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.051
        },
        "num_failing_tests": 1
    },
    {
        "name": "BasicErrorManager.toArray#104",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/BasicErrorManager.java",
        "class_name": "com.google.javascript.jscomp.BasicErrorManager",
        "signature": "com.google.javascript.jscomp.BasicErrorManager.toArray(com.google.javascript.jscomp.CheckLevel)",
        "snippet": "  private JSError[] toArray(CheckLevel level) {\n    List<JSError> errors = new ArrayList<JSError>(messages.size());\n    for (ErrorWithLevel p : messages) {\n      if (p.level == level) {\n        errors.add(p.error);\n      }\n    }\n    return errors.toArray(new JSError[errors.size()]);\n  }\n",
        "begin_line": 104,
        "end_line": 112,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.051
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.isBlock#2175",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.isBlock()",
        "snippet": "  public boolean isBlock() {\n    return this.getType() == Token.BLOCK;\n  }\n",
        "begin_line": 2175,
        "end_line": 2177,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0509
        },
        "num_failing_tests": 1
    },
    {
        "name": "IRFactory.processName#894",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.TransformDispatcher.processName(com.google.javascript.rhino.head.ast.Name)",
        "snippet": "    @Override\n    Node processName(Name nameNode) {\n      return processName(nameNode, false);\n    }\n",
        "begin_line": 894,
        "end_line": 897,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0509
        },
        "num_failing_tests": 1
    },
    {
        "name": "IRFactory.processName#899",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.TransformDispatcher.processName(com.google.javascript.rhino.head.ast.Name, boolean)",
        "snippet": "    Node processName(Name nameNode, boolean asString) {\n      if (asString) {\n        return newStringNode(Token.STRING, nameNode.getIdentifier());\n      } else {\n        if (isReservedKeyword(nameNode.getIdentifier())) {\n          errorReporter.error(\n            \"identifier is a reserved word\",\n            sourceName,\n            nameNode.getLineno(), \"\", 0);\n        }\n        return newStringNode(Token.NAME, nameNode.getIdentifier());\n      }\n    }\n",
        "begin_line": 899,
        "end_line": 911,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0509
        },
        "num_failing_tests": 1
    },
    {
        "name": "IRFactory.isReservedKeyword#916",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.TransformDispatcher.isReservedKeyword(java.lang.String)",
        "snippet": "    private boolean isReservedKeyword(String identifier) {\n      return reservedKeywords != null && reservedKeywords.contains(identifier);\n    }\n",
        "begin_line": 916,
        "end_line": 918,
        "comment": "\n     * @return Whether the\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0509
        },
        "num_failing_tests": 1
    },
    {
        "name": "IRFactory.newStringNode#1486",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.newStringNode(int, java.lang.String)",
        "snippet": "  private Node newStringNode(int type, String value) {\n    return Node.newString(type, value).clonePropsFrom(templateNode);\n  }\n",
        "begin_line": 1486,
        "end_line": 1488,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0509
        },
        "num_failing_tests": 1
    },
    {
        "name": "BasicErrorManager.getErrorCount#74",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/BasicErrorManager.java",
        "class_name": "com.google.javascript.jscomp.BasicErrorManager",
        "signature": "com.google.javascript.jscomp.BasicErrorManager.getErrorCount()",
        "snippet": "  @Override\n  public int getErrorCount() {\n    return errorCount;\n  }\n",
        "begin_line": 74,
        "end_line": 77,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0509
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.isFunction#2243",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.isFunction()",
        "snippet": "  public boolean isFunction() {\n    return this.getType() == Token.FUNCTION;\n  }\n",
        "begin_line": 2243,
        "end_line": 2245,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0508
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.StringNode#187",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.StringNode.StringNode(int, java.lang.String)",
        "snippet": "    StringNode(int type, String str) {\n      super(type);\n      if (null == str) {\n        throw new IllegalArgumentException(\"StringNode: str is null\");\n      }\n      this.str = str;\n    }\n",
        "begin_line": 187,
        "end_line": 193,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0508
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.ObjectPropListItem#294",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.ObjectPropListItem.ObjectPropListItem(int, java.lang.Object, com.google.javascript.rhino.Node.PropListItem)",
        "snippet": "    ObjectPropListItem(int propType, Object objectValue, PropListItem next) {\n      super(propType, next);\n      this.objectValue = objectValue;\n    }\n",
        "begin_line": 294,
        "end_line": 297,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0508
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.getObjectValue#304",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.ObjectPropListItem.getObjectValue()",
        "snippet": "    @Override\n    public Object getObjectValue() {\n      return objectValue;\n    }\n",
        "begin_line": 304,
        "end_line": 307,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0508
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.IntPropListItem#326",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.IntPropListItem.IntPropListItem(int, int, com.google.javascript.rhino.Node.PropListItem)",
        "snippet": "    IntPropListItem(int propType, int intValue, PropListItem next) {\n      super(propType, next);\n      this.intValue = intValue;\n    }\n",
        "begin_line": 326,
        "end_line": 329,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0508
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.chain#346",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.IntPropListItem.chain(com.google.javascript.rhino.Node.PropListItem)",
        "snippet": "    @Override\n    public PropListItem chain(PropListItem next) {\n      return new IntPropListItem(getType(), intValue, next);\n    }\n",
        "begin_line": 346,
        "end_line": 349,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0508
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.AbstractPropListItem#268",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.AbstractPropListItem.AbstractPropListItem(int, com.google.javascript.rhino.Node.PropListItem)",
        "snippet": "    AbstractPropListItem(int propType, PropListItem next) {\n      this.propType = propType;\n      this.next = next;\n    }\n",
        "begin_line": 268,
        "end_line": 271,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0508
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.getType#273",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.AbstractPropListItem.getType()",
        "snippet": "    @Override\n    public int getType() {\n      return propType;\n    }\n",
        "begin_line": 273,
        "end_line": 276,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0508
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.getNext#278",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.AbstractPropListItem.getNext()",
        "snippet": "    @Override\n    public PropListItem getNext() {\n      return next;\n    }\n",
        "begin_line": 278,
        "end_line": 281,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0508
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.Node#352",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.Node(int)",
        "snippet": "  public Node(int nodeType) {\n    type = nodeType;\n    parent = null;\n    sourcePosition = -1;\n  }\n",
        "begin_line": 352,
        "end_line": 356,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0508
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.newString#507",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.newString(int, java.lang.String)",
        "snippet": "  public static Node newString(int type, String str) {\n    return new StringNode(type, str);\n  }\n",
        "begin_line": 507,
        "end_line": 509,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0508
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.getType#519",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.getType()",
        "snippet": "  public int getType() {\n    return type;\n  }\n",
        "begin_line": 519,
        "end_line": 521,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0508
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.getFirstChild#531",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.getFirstChild()",
        "snippet": "  public Node getFirstChild() {\n    return first;\n  }\n",
        "begin_line": 531,
        "end_line": 533,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0508
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.getNext#539",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.getNext()",
        "snippet": "  public Node getNext() {\n    return next;\n  }\n",
        "begin_line": 539,
        "end_line": 541,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0508
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.addChildToBack#599",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.addChildToBack(com.google.javascript.rhino.Node)",
        "snippet": "  public void addChildToBack(Node child) {\n    Preconditions.checkArgument(child.parent == null);\n    Preconditions.checkArgument(child.next == null);\n    child.parent = this;\n    child.next = null;\n    if (last == null) {\n      first = last = child;\n      return;\n    }\n    last.next = child;\n    last = child;\n  }\n",
        "begin_line": 599,
        "end_line": 610,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0508
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.lookupProperty#749",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.lookupProperty(int)",
        "snippet": "  @VisibleForTesting\n  PropListItem lookupProperty(int propType) {\n    PropListItem x = propListHead;\n    while (x != null && propType != x.getType()) {\n      x = x.getNext();\n    }\n    return x;\n  }\n",
        "begin_line": 749,
        "end_line": 756,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0508
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.clonePropsFrom#765",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.clonePropsFrom(com.google.javascript.rhino.Node)",
        "snippet": "  public Node clonePropsFrom(Node other) {\n    Preconditions.checkState(this.propListHead == null,\n        \"Node has existing properties.\");\n    this.propListHead = other.propListHead;\n    return this;\n  }\n",
        "begin_line": 765,
        "end_line": 770,
        "comment": "\n   * Clone the properties from the provided node without copying\n   * the property object.  The receiving node may not have any\n   * existing properties.\n   * @param other The node to clone properties from.\n   * @return this node.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0508
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.removeProp#772",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.removeProp(int)",
        "snippet": "  public void removeProp(int propType) {\n    PropListItem result = removeProp(propListHead, propType);\n    if (result != propListHead) {\n      propListHead = result;\n    }\n  }\n",
        "begin_line": 772,
        "end_line": 777,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0508
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.removeProp#785",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.removeProp(com.google.javascript.rhino.Node.PropListItem, int)",
        "snippet": "  private PropListItem removeProp(PropListItem item, int propType) {\n    if (item == null) {\n      return null;\n    } else if (item.getType() == propType) {\n      return item.getNext();\n    } else {\n      PropListItem result = removeProp(item.getNext(), propType);\n      if (result != item.getNext()) {\n        return item.chain(result);\n      } else {\n        return item;\n      }\n    }\n  }\n",
        "begin_line": 785,
        "end_line": 798,
        "comment": "\n   * @param item The item to inspect\n   * @param propType The property to look for\n   * @return The replacement list if the property was removed, or\n   *   'item' otherwise.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0508
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.getProp#800",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.getProp(int)",
        "snippet": "  public Object getProp(int propType) {\n    PropListItem item = lookupProperty(propType);\n    if (item == null) {\n      return null;\n    }\n    return item.getObjectValue();\n  }\n",
        "begin_line": 800,
        "end_line": 806,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0508
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.putProp#832",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.putProp(int, java.lang.Object)",
        "snippet": "  public void putProp(int propType, Object value) {\n    removeProp(propType);\n    if (value != null) {\n      propListHead = createProp(propType, value, propListHead);\n    }\n  }\n",
        "begin_line": 832,
        "end_line": 837,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0508
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.putBooleanProp#839",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.putBooleanProp(int, boolean)",
        "snippet": "  public void putBooleanProp(int propType, boolean value) {\n    putIntProp(propType, value ? 1 : 0);\n  }\n",
        "begin_line": 839,
        "end_line": 841,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0508
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.putIntProp#843",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.putIntProp(int, int)",
        "snippet": "  public void putIntProp(int propType, int value) {\n    removeProp(propType);\n    if (value != 0) {\n      propListHead = createProp(propType, value, propListHead);\n    }\n  }\n",
        "begin_line": 843,
        "end_line": 848,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0508
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.createProp#850",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.createProp(int, java.lang.Object, com.google.javascript.rhino.Node.PropListItem)",
        "snippet": "  PropListItem createProp(int propType, Object value, PropListItem next) {\n    return new ObjectPropListItem(propType, value, next);\n  }\n",
        "begin_line": 850,
        "end_line": 852,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0508
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.createProp#854",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.createProp(int, int, com.google.javascript.rhino.Node.PropListItem)",
        "snippet": "  PropListItem createProp(int propType, int value, PropListItem next) {\n    return new IntPropListItem(propType, value, next);\n  }\n",
        "begin_line": 854,
        "end_line": 856,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0508
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.setStaticSourceFile#1081",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.setStaticSourceFile(com.google.javascript.rhino.jstype.StaticSourceFile)",
        "snippet": "  public void setStaticSourceFile(StaticSourceFile file) {\n    this.putProp(STATIC_SOURCE_FILE, file);\n  }\n",
        "begin_line": 1081,
        "end_line": 1083,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0508
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.getSourceFileName#1090",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.getSourceFileName()",
        "snippet": "  public String getSourceFileName() {\n    StaticSourceFile file = getStaticSourceFile();\n    return file == null ? null : file.getName();\n  }\n",
        "begin_line": 1090,
        "end_line": 1093,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0508
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.getStaticSourceFile#1096",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.getStaticSourceFile()",
        "snippet": "  public StaticSourceFile getStaticSourceFile() {\n    return ((StaticSourceFile) this.getProp(STATIC_SOURCE_FILE));\n  }\n",
        "begin_line": 1096,
        "end_line": 1098,
        "comment": " Returns the source file associated with this input. May be null ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0508
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.setInputId#1103",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.setInputId(com.google.javascript.rhino.InputId)",
        "snippet": "  public void setInputId(InputId inputId) {\n    this.putProp(INPUT_ID, inputId);\n  }\n",
        "begin_line": 1103,
        "end_line": 1105,
        "comment": "\n   * @param inputId\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0508
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.getInputId#1110",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.getInputId()",
        "snippet": "  public InputId getInputId() {\n    return ((InputId) this.getProp(INPUT_ID));\n  }\n",
        "begin_line": 1110,
        "end_line": 1112,
        "comment": "\n   * @return The Id of the CompilerInput associated with this Node.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0508
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.getLineno#1127",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.getLineno()",
        "snippet": "  public int getLineno() {\n    return extractLineno(sourcePosition);\n  }\n",
        "begin_line": 1127,
        "end_line": 1129,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0508
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.getCharno#1131",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.getCharno()",
        "snippet": "  public int getCharno() {\n    return extractCharno(sourcePosition);\n  }\n",
        "begin_line": 1131,
        "end_line": 1133,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0508
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.setLineno#1151",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.setLineno(int)",
        "snippet": "  public void setLineno(int lineno) {\n      int charno = getCharno();\n      if (charno == -1) {\n        charno = 0;\n      }\n      sourcePosition = mergeLineCharNo(lineno, charno);\n  }\n",
        "begin_line": 1151,
        "end_line": 1157,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0508
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.setCharno#1159",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.setCharno(int)",
        "snippet": "  public void setCharno(int charno) {\n      sourcePosition = mergeLineCharNo(getLineno(), charno);\n  }\n",
        "begin_line": 1159,
        "end_line": 1161,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0508
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.mergeLineCharNo#1182",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.mergeLineCharNo(int, int)",
        "snippet": "  protected static int mergeLineCharNo(int lineno, int charno) {\n    if (lineno < 0 || charno < 0) {\n      return -1;\n    } else if ((charno & ~COLUMN_MASK) != 0) {\n      return lineno << COLUMN_BITS | COLUMN_MASK;\n    } else {\n      return lineno << COLUMN_BITS | (charno & COLUMN_MASK);\n    }\n  }\n",
        "begin_line": 1182,
        "end_line": 1190,
        "comment": "\n   * Merges the line number and character number in one integer. The Character\n   * number takes the first 12 bits and the line number takes the rest. If\n   * the character number is greater than <code>2<sup>12</sup>-1</code> it is\n   * adjusted to <code>2<sup>12</sup>-1</code>.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0508
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.extractLineno#1196",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.extractLineno(int)",
        "snippet": "  protected static int extractLineno(int lineCharNo) {\n    if (lineCharNo == -1) {\n      return -1;\n    } else {\n      return lineCharNo >>> COLUMN_BITS;\n    }\n  }\n",
        "begin_line": 1196,
        "end_line": 1202,
        "comment": "\n   * Extracts the line number and character number from a merged line char\n   * number (see {@link #mergeLineCharNo(int, int)}).\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0508
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.extractCharno#1208",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.extractCharno(int)",
        "snippet": "  protected static int extractCharno(int lineCharNo) {\n    if (lineCharNo == -1) {\n      return -1;\n    } else {\n      return lineCharNo & COLUMN_MASK;\n    }\n  }\n",
        "begin_line": 1208,
        "end_line": 1214,
        "comment": "\n   * Extracts the character number and character number from a merged line\n   * char number (see {@link #mergeLineCharNo(int, int)}).\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0508
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.getParent#1310",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.getParent()",
        "snippet": "  public Node getParent() {\n    return parent;\n  }\n",
        "begin_line": 1310,
        "end_line": 1312,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0508
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.getChildCount#1392",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.getChildCount()",
        "snippet": "  public int getChildCount() {\n    int c = 0;\n    for (Node n = first; n != null; n = n.next)\n      c++;\n\n    return c;\n  }\n",
        "begin_line": 1392,
        "end_line": 1398,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0508
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.getJsDocBuilderForNode#1822",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.getJsDocBuilderForNode()",
        "snippet": "  public FileLevelJsDocBuilder getJsDocBuilderForNode() {\n    return new FileLevelJsDocBuilder();\n  }\n",
        "begin_line": 1822,
        "end_line": 1824,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0508
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.getJSDocInfo#1856",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.getJSDocInfo()",
        "snippet": "  public JSDocInfo getJSDocInfo() {\n    return (JSDocInfo) getProp(JSDOC_INFO_PROP);\n  }\n",
        "begin_line": 1856,
        "end_line": 1858,
        "comment": "\n   * Get the {@link JSDocInfo} attached to this node.\n   * @return the information or {@code null} if no JSDoc is attached to this\n   * node\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0508
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.setIsSyntheticBlock#1908",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.setIsSyntheticBlock(boolean)",
        "snippet": "  public void setIsSyntheticBlock(boolean val) {\n    putBooleanProp(SYNTHETIC_BLOCK_PROP, val);\n  }\n",
        "begin_line": 1908,
        "end_line": 1910,
        "comment": "\n   * Sets whether this is a synthetic block that should not be considered\n   * a real source block.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0508
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.isObjectLit#2311",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.isObjectLit()",
        "snippet": "  public boolean isObjectLit() {\n    return this.getType() == Token.OBJECTLIT;\n  }\n",
        "begin_line": 2311,
        "end_line": 2313,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0508
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.isScript#2331",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.isScript()",
        "snippet": "  public boolean isScript() {\n    return this.getType() == Token.SCRIPT;\n  }\n",
        "begin_line": 2331,
        "end_line": 2333,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0508
        },
        "num_failing_tests": 1
    },
    {
        "name": "InputId.InputId#51",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/InputId.java",
        "class_name": "com.google.javascript.rhino.InputId",
        "signature": "com.google.javascript.rhino.InputId.InputId(java.lang.String)",
        "snippet": "  public InputId(String id) {\n    this.id = id;\n  }\n",
        "begin_line": 51,
        "end_line": 53,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0508
        },
        "num_failing_tests": 1
    },
    {
        "name": "InputId.getIdName#55",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/InputId.java",
        "class_name": "com.google.javascript.rhino.InputId",
        "signature": "com.google.javascript.rhino.InputId.getIdName()",
        "snippet": "  public String getIdName() {\n    return id;\n  }\n",
        "begin_line": 55,
        "end_line": 57,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0508
        },
        "num_failing_tests": 1
    },
    {
        "name": "InputId.hashCode#59",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/InputId.java",
        "class_name": "com.google.javascript.rhino.InputId",
        "signature": "com.google.javascript.rhino.InputId.hashCode()",
        "snippet": "  @Override\n  public int hashCode() {\n    return id.hashCode();\n  }\n",
        "begin_line": 59,
        "end_line": 62,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0508
        },
        "num_failing_tests": 1
    },
    {
        "name": "IR.block#91",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/IR.java",
        "class_name": "com.google.javascript.rhino.IR",
        "signature": "com.google.javascript.rhino.IR.block()",
        "snippet": "  public static Node block() {\n    Node block = new Node(Token.BLOCK);\n    return block;\n  }\n",
        "begin_line": 91,
        "end_line": 94,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0508
        },
        "num_failing_tests": 1
    },
    {
        "name": "IR.block#102",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/IR.java",
        "class_name": "com.google.javascript.rhino.IR",
        "signature": "com.google.javascript.rhino.IR.block(com.google.javascript.rhino.Node...)",
        "snippet": "  public static Node block(Node ... stmts) {\n    Node block = block();\n    for (Node stmt : stmts) {\n      Preconditions.checkState(mayBeStatement(stmt));\n      block.addChildToBack(stmt);\n    }\n    return block;\n  }\n",
        "begin_line": 102,
        "end_line": 109,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0508
        },
        "num_failing_tests": 1
    },
    {
        "name": "IR.mayBeStatementNoReturn#503",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/IR.java",
        "class_name": "com.google.javascript.rhino.IR",
        "signature": "com.google.javascript.rhino.IR.mayBeStatementNoReturn(com.google.javascript.rhino.Node)",
        "snippet": "  private static boolean mayBeStatementNoReturn(Node n) {\n    switch (n.getType()) {\n      case Token.EMPTY:\n      case Token.FUNCTION:\n        // EMPTY and FUNCTION are used both in expression and statement\n        // contexts\n        return true;\n\n      case Token.BLOCK:\n      case Token.BREAK:\n      case Token.CONST:\n      case Token.CONTINUE:\n      case Token.DEBUGGER:\n      case Token.DO:\n      case Token.EXPR_RESULT:\n      case Token.FOR:\n      case Token.IF:\n      case Token.LABEL:\n      case Token.SWITCH:\n      case Token.THROW:\n      case Token.TRY:\n      case Token.VAR:\n      case Token.WHILE:\n      case Token.WITH:\n        return true;\n\n      default:\n        return false;\n    }\n  }\n",
        "begin_line": 503,
        "end_line": 532,
        "comment": "\n   * It isn't possible to always determine if a detached node is a expression,\n   * so make a best guess.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0508
        },
        "num_failing_tests": 1
    },
    {
        "name": "IR.mayBeStatement#538",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/IR.java",
        "class_name": "com.google.javascript.rhino.IR",
        "signature": "com.google.javascript.rhino.IR.mayBeStatement(com.google.javascript.rhino.Node)",
        "snippet": "  private static boolean mayBeStatement(Node n) {\n    if (!mayBeStatementNoReturn(n)) {\n      return n.isReturn();\n    }\n    return true;\n  }\n",
        "begin_line": 538,
        "end_line": 543,
        "comment": "\n   * It isn't possible to always determine if a detached node is a expression,\n   * so make a best guess.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0508
        },
        "num_failing_tests": 1
    },
    {
        "name": "ParserRunner.ParseResult#163",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/ParserRunner.java",
        "class_name": "com.google.javascript.jscomp.parsing.ParserRunner",
        "signature": "com.google.javascript.jscomp.parsing.ParserRunner.ParseResult.ParseResult(com.google.javascript.rhino.Node, com.google.javascript.rhino.head.ast.AstRoot)",
        "snippet": "    public ParseResult(Node ast, AstRoot oldAst) {\n      this.ast = ast;\n      this.oldAst = oldAst;\n    }\n",
        "begin_line": 163,
        "end_line": 166,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0508
        },
        "num_failing_tests": 1
    },
    {
        "name": "ParserRunner.extractList#93",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/ParserRunner.java",
        "class_name": "com.google.javascript.jscomp.parsing.ParserRunner",
        "signature": "com.google.javascript.jscomp.parsing.ParserRunner.extractList(java.lang.String)",
        "snippet": "  private static Set<String> extractList(String configProp) {\n    String[] names = configProp.split(\",\");\n    Set<String> trimmedNames = Sets.newHashSet();\n    for (String name : names) {\n      trimmedNames.add(name.trim());\n    }\n    return ImmutableSet.copyOf(trimmedNames);\n  }\n",
        "begin_line": 93,
        "end_line": 100,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0508
        },
        "num_failing_tests": 1
    },
    {
        "name": "ParserRunner.parse#111",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/ParserRunner.java",
        "class_name": "com.google.javascript.jscomp.parsing.ParserRunner",
        "signature": "com.google.javascript.jscomp.parsing.ParserRunner.parse(com.google.javascript.rhino.jstype.StaticSourceFile, java.lang.String, com.google.javascript.jscomp.parsing.Config, com.google.javascript.rhino.head.ErrorReporter, java.util.logging.Logger)",
        "snippet": "  public static ParseResult parse(StaticSourceFile sourceFile,\n                                  String sourceString,\n                                  Config config,\n                                  ErrorReporter errorReporter,\n                                  Logger logger) throws IOException {\n    Context cx = Context.enter();\n    cx.setErrorReporter(errorReporter);\n    cx.setLanguageVersion(Context.VERSION_1_5);\n    CompilerEnvirons compilerEnv = new CompilerEnvirons();\n    compilerEnv.initFromContext(cx);\n    compilerEnv.setRecordingComments(true);\n    compilerEnv.setRecordingLocalJsDocComments(true);\n\n    // ES5 specifically allows trailing commas\n    compilerEnv.setWarnTrailingComma(\n        config.languageMode == LanguageMode.ECMASCRIPT3);\n\n    // Do our own identifier check for ECMASCRIPT 5\n    boolean acceptEs5 =\n        config.isIdeMode || config.languageMode != LanguageMode.ECMASCRIPT3;\n    compilerEnv.setReservedKeywordAsIdentifier(acceptEs5);\n\n    compilerEnv.setAllowMemberExprAsFunctionName(false);\n    compilerEnv.setIdeMode(config.isIdeMode);\n    compilerEnv.setRecoverFromErrors(config.isIdeMode);\n\n    Parser p = new Parser(compilerEnv, errorReporter);\n    AstRoot astRoot = null;\n    try {\n      astRoot = p.parse(sourceString, sourceFile.getName(), 1);\n    } catch (EvaluatorException e) {\n      logger.info(\n          \"Error parsing \" + sourceFile.getName() + \": \" + e.getMessage());\n    } finally {\n      Context.exit();\n    }\n    Node root = null;\n    if (astRoot != null) {\n      root = IRFactory.transformTree(\n          astRoot, sourceFile, sourceString, config, errorReporter);\n      root.setIsSyntheticBlock(true);\n    }\n    return new ParseResult(root, astRoot);\n  }\n",
        "begin_line": 111,
        "end_line": 154,
        "comment": "\n   * Parses the JavaScript text given by a reader.\n   *\n   * @param sourceString Source code from the file.\n   * @param errorReporter An error.\n   * @param logger A logger.\n   * @return The AST of the given text.\n   * @throws IOException\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0508
        },
        "num_failing_tests": 1
    },
    {
        "name": "IRFactory.processAstRoot#577",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.TransformDispatcher.processAstRoot(com.google.javascript.rhino.head.ast.AstRoot)",
        "snippet": "    @Override\n    Node processAstRoot(AstRoot rootNode) {\n      Node node = newNode(Token.SCRIPT);\n      for (com.google.javascript.rhino.head.Node child : rootNode) {\n        node.addChildToBack(transform((AstNode)child));\n      }\n      parseDirectives(node);\n      return node;\n    }\n",
        "begin_line": 577,
        "end_line": 585,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0508
        },
        "num_failing_tests": 1
    },
    {
        "name": "IRFactory.parseDirectives#596",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.TransformDispatcher.parseDirectives(com.google.javascript.rhino.Node)",
        "snippet": "    private void parseDirectives(Node node) {\n      // Remove all the directives, and encode them in the AST.\n      Set<String> directives = null;\n      while (isDirective(node.getFirstChild())) {\n        String directive = node.removeFirstChild().getFirstChild().getString();\n        if (directives == null) {\n          directives = Sets.newHashSet(directive);\n        } else {\n          directives.add(directive);\n        }\n      }\n\n      if (directives != null) {\n        node.setDirectives(directives);\n      }\n    }\n",
        "begin_line": 596,
        "end_line": 611,
        "comment": "\n     * Parse the directives, encode them in the AST, and remove their nodes.\n     *\n     * For information on ES5 directives, see section 14.1 of\n     * ECMA-262, Edition 5.\n     *\n     * It would be nice if Rhino would eventually take care of this for\n     * us, but right now their directive-processing is a one-off.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0508
        },
        "num_failing_tests": 1
    },
    {
        "name": "IRFactory.isDirective#613",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.TransformDispatcher.isDirective(com.google.javascript.rhino.Node)",
        "snippet": "    private boolean isDirective(Node n) {\n      if (n == null) return false;\n\n      int nType = n.getType();\n      return nType == Token.EXPR_RESULT &&\n          n.getFirstChild().isString() &&\n          ALLOWED_DIRECTIVES.contains(n.getFirstChild().getString());\n    }\n",
        "begin_line": 613,
        "end_line": 620,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0508
        },
        "num_failing_tests": 1
    },
    {
        "name": "IRFactory.createTemplateNode#172",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.createTemplateNode()",
        "snippet": "  private Node createTemplateNode() {\n    // The Node type choice is arbitrary.\n    Node templateNode = new Node(Token.SCRIPT);\n    templateNode.setStaticSourceFile(sourceFile);\n    return templateNode;\n  }\n",
        "begin_line": 172,
        "end_line": 177,
        "comment": " This reduces the cost of these properties to O(nodes) to O(files).",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0508
        },
        "num_failing_tests": 1
    },
    {
        "name": "IRFactory.transformTree#179",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.transformTree(com.google.javascript.rhino.head.ast.AstRoot, com.google.javascript.rhino.jstype.StaticSourceFile, java.lang.String, com.google.javascript.jscomp.parsing.Config, com.google.javascript.rhino.head.ErrorReporter)",
        "snippet": "  public static Node transformTree(AstRoot node,\n                                   StaticSourceFile sourceFile,\n                                   String sourceString,\n                                   Config config,\n                                   ErrorReporter errorReporter) {\n    IRFactory irFactory = new IRFactory(sourceString, sourceFile,\n        config, errorReporter);\n    Node irNode = irFactory.transform(node);\n\n    if (node.getComments() != null) {\n      for (Comment comment : node.getComments()) {\n        if (comment.getCommentType() == CommentType.JSDOC &&\n            !irFactory.parsedComments.contains(comment)) {\n          irFactory.handlePossibleFileOverviewJsDoc(comment, irNode);\n        } else if (comment.getCommentType() == CommentType.BLOCK_COMMENT) {\n          irFactory.handleBlockComment(comment);\n        }\n      }\n    }\n\n    irFactory.setFileOverviewJsDoc(irNode);\n\n    return irNode;\n  }\n",
        "begin_line": 179,
        "end_line": 202,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0508
        },
        "num_failing_tests": 1
    },
    {
        "name": "IRFactory.setFileOverviewJsDoc#204",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.setFileOverviewJsDoc(com.google.javascript.rhino.Node)",
        "snippet": "  private void setFileOverviewJsDoc(Node irNode) {\n    // Only after we've seen all @fileoverview entries, attach the\n    // last one to the root node, and copy the found license strings\n    // to that node.\n    JSDocInfo rootNodeJsDoc = rootNodeJsDocHolder.getJSDocInfo();\n    if (rootNodeJsDoc != null) {\n      irNode.setJSDocInfo(rootNodeJsDoc);\n      rootNodeJsDoc.setAssociatedNode(irNode);\n    }\n\n    if (fileOverviewInfo != null) {\n      if ((irNode.getJSDocInfo() != null) &&\n          (irNode.getJSDocInfo().getLicense() != null)) {\n        fileOverviewInfo.setLicense(irNode.getJSDocInfo().getLicense());\n      }\n      irNode.setJSDocInfo(fileOverviewInfo);\n      fileOverviewInfo.setAssociatedNode(irNode);\n    }\n  }\n",
        "begin_line": 204,
        "end_line": 222,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0508
        },
        "num_failing_tests": 1
    },
    {
        "name": "IRFactory.handleJsDoc#273",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.handleJsDoc(com.google.javascript.rhino.head.ast.AstNode, com.google.javascript.rhino.Node)",
        "snippet": "  private JSDocInfo handleJsDoc(AstNode node, Node irNode) {\n    Comment comment = node.getJsDocNode();\n    if (comment != null) {\n      JsDocInfoParser jsDocParser = createJsDocInfoParser(comment, irNode);\n      parsedComments.add(comment);\n      if (!handlePossibleFileOverviewJsDoc(jsDocParser)) {\n        JSDocInfo info = jsDocParser.retrieveAndResetParsedJSDocInfo();\n        if (info != null) {\n          validateTypeAnnotations(info, node);\n        }\n        return info;\n      }\n    }\n    return null;\n  }\n",
        "begin_line": 273,
        "end_line": 287,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0508
        },
        "num_failing_tests": 1
    },
    {
        "name": "IRFactory.transform#352",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.transform(com.google.javascript.rhino.head.ast.AstNode)",
        "snippet": "  private Node transform(AstNode node) {\n    Node irNode = justTransform(node);\n    JSDocInfo jsDocInfo = handleJsDoc(node, irNode);\n    if (jsDocInfo != null) {\n      irNode = maybeInjectCastNode(node, jsDocInfo, irNode);\n      irNode.setJSDocInfo(jsDocInfo);\n    }\n    setSourceInfo(irNode, node);\n    return irNode;\n  }\n",
        "begin_line": 352,
        "end_line": 361,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0508
        },
        "num_failing_tests": 1
    },
    {
        "name": "IRFactory.setSourceInfo#427",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.setSourceInfo(com.google.javascript.rhino.Node, com.google.javascript.rhino.head.ast.AstNode)",
        "snippet": "  private void setSourceInfo(Node irNode, AstNode node) {\n    if (irNode.getLineno() == -1) {\n      // If we didn't already set the line, then set it now. This avoids\n      // cases like ParenthesizedExpression where we just return a previous\n      // node, but don't want the new node to get its parent's line number.\n      int lineno = node.getLineno();\n      irNode.setLineno(lineno);\n      int charno = position2charno(node.getAbsolutePosition());\n      irNode.setCharno(charno);\n      maybeSetLengthFrom(irNode, node);\n    }\n  }\n",
        "begin_line": 427,
        "end_line": 438,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0508
        },
        "num_failing_tests": 1
    },
    {
        "name": "IRFactory.maybeSetLengthFrom#496",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.maybeSetLengthFrom(com.google.javascript.rhino.Node, com.google.javascript.rhino.head.ast.AstNode)",
        "snippet": "  private void maybeSetLengthFrom(Node node, AstNode source) {\n    if (config.isIdeMode) {\n      node.setLength(source.getLength());\n    }\n  }\n",
        "begin_line": 496,
        "end_line": 500,
        "comment": " Set the length on the node if we're in IDE mode.",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0508
        },
        "num_failing_tests": 1
    },
    {
        "name": "IRFactory.justTransform#512",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.justTransform(com.google.javascript.rhino.head.ast.AstNode)",
        "snippet": "  private Node justTransform(AstNode node) {\n    return transformDispatcher.process(node);\n  }\n",
        "begin_line": 512,
        "end_line": 514,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0508
        },
        "num_failing_tests": 1
    },
    {
        "name": "IRFactory.newNode#1466",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.newNode(int)",
        "snippet": "  private Node newNode(int type) {\n    return new Node(type).clonePropsFrom(templateNode);\n  }\n",
        "begin_line": 1466,
        "end_line": 1468,
        "comment": " Simple helper to create nodes and set the initial node properties.",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0508
        },
        "num_failing_tests": 1
    },
    {
        "name": "Config.Config#73",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/Config.java",
        "class_name": "com.google.javascript.jscomp.parsing.Config",
        "signature": "com.google.javascript.jscomp.parsing.Config.Config(java.util.Set<java.lang.String>, java.util.Set<java.lang.String>, boolean, com.google.javascript.jscomp.parsing.Config.LanguageMode, boolean)",
        "snippet": "  Config(Set<String> annotationWhitelist, Set<String> suppressionNames,\n      boolean isIdeMode, LanguageMode languageMode,\n      boolean acceptConstKeyword) {\n    this.annotationNames = buildAnnotationNames(annotationWhitelist);\n    this.parseJsDocDocumentation = isIdeMode;\n    this.suppressionNames = suppressionNames;\n    this.isIdeMode = isIdeMode;\n    this.languageMode = languageMode;\n    this.acceptConstKeyword = acceptConstKeyword;\n  }\n",
        "begin_line": 73,
        "end_line": 82,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0508
        },
        "num_failing_tests": 1
    },
    {
        "name": "Config.buildAnnotationNames#88",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/Config.java",
        "class_name": "com.google.javascript.jscomp.parsing.Config",
        "signature": "com.google.javascript.jscomp.parsing.Config.buildAnnotationNames(java.util.Set<java.lang.String>)",
        "snippet": "  private static Map<String, Annotation> buildAnnotationNames(\n      Set<String> annotationWhitelist) {\n    ImmutableMap.Builder<String, Annotation> annotationBuilder =\n        ImmutableMap.builder();\n    annotationBuilder.putAll(Annotation.recognizedAnnotations);\n    for (String unrecognizedAnnotation : annotationWhitelist) {\n      if (!Annotation.recognizedAnnotations.containsKey(\n              unrecognizedAnnotation)) {\n        annotationBuilder.put(\n            unrecognizedAnnotation, Annotation.NOT_IMPLEMENTED);\n      }\n    }\n    return annotationBuilder.build();\n  }\n",
        "begin_line": 88,
        "end_line": 101,
        "comment": "\n   * Create the annotation names from the user-specified\n   * annotation whitelist.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0508
        },
        "num_failing_tests": 1
    },
    {
        "name": "Tracer.isInitialized#745",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Tracer.java",
        "class_name": "com.google.javascript.jscomp.Tracer",
        "signature": "com.google.javascript.jscomp.Tracer.ThreadTrace.isInitialized()",
        "snippet": "    boolean isInitialized() {\n      return isInitialized;\n    }\n",
        "begin_line": 745,
        "end_line": 747,
        "comment": " Is initialized? ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0508
        },
        "num_failing_tests": 1
    },
    {
        "name": "Tracer.currentTimeMillis#222",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Tracer.java",
        "class_name": "com.google.javascript.jscomp.Tracer",
        "signature": "com.google.javascript.jscomp.Tracer.Anonymous-8158fbc5-358e-4a03-8f0e-2658f7ba0a94.currentTimeMillis()",
        "snippet": "    @Override\n    public long currentTimeMillis() {\n      return System.currentTimeMillis();\n    }\n",
        "begin_line": 222,
        "end_line": 225,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0508
        },
        "num_failing_tests": 1
    },
    {
        "name": "Tracer.Tracer#235",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Tracer.java",
        "class_name": "com.google.javascript.jscomp.Tracer",
        "signature": "com.google.javascript.jscomp.Tracer.Tracer(java.lang.String, java.lang.String)",
        "snippet": "  Tracer(@Nullable String type, @Nullable String comment) {\n    this.type = type;\n    this.comment = comment == null ? \"\" : comment;\n    startTimeMs = clock.currentTimeMillis();\n    startThread = Thread.currentThread();\n    if (!extraTracingStatistics.isEmpty()) {\n      int size = extraTracingStatistics.size();\n      extraTracingValues = new long[size];\n      int i = 0;\n      for (TracingStatistic tracingStatistic : extraTracingStatistics) {\n        extraTracingValues[i] = tracingStatistic.start(startThread);\n        i++;\n      }\n    }\n\n    ThreadTrace trace = getThreadTrace();\n\n    // Do nothing if the current thread trace wasn't initialized.\n    if (!trace.isInitialized()) {\n      return;\n    }\n\n    // Check if we are creating too many Tracers.\n    if (trace.events.size() >= MAX_TRACE_SIZE) {\n      logger.log(Level.WARNING,\n                  \"Giant thread trace. Too many Tracers created. \"\n                    + \"Clearing to avoid memory leak.\",\n                  new Throwable(trace.toString()));\n      trace.truncateEvents();\n    }\n\n    // Check if we forgot to close the Tracers.\n    if (trace.outstandingEvents.size() >= MAX_TRACE_SIZE) {\n      logger.log(Level.WARNING,\n                  \"Too many outstanding Tracers. Tracer.stop() is missing \"\n                    + \"or Tracer.stop() is not wrapped in a \"\n                    + \"try/finally block. \"\n                    + \"Clearing to avoid memory leak.\",\n                  new Throwable(trace.toString()));\n      trace.truncateOutstandingEvents();\n    }\n\n    trace.startEvent(this);\n  }\n",
        "begin_line": 235,
        "end_line": 278,
        "comment": "\n   * Create and start a tracer.\n   * Both type and comment may be null. See class comment for usage.\n   *\n   * @param type The type for totaling\n   * @param comment Comment about this tracer\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0508
        },
        "num_failing_tests": 1
    },
    {
        "name": "Tracer.stop#407",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Tracer.java",
        "class_name": "com.google.javascript.jscomp.Tracer",
        "signature": "com.google.javascript.jscomp.Tracer.stop(int)",
        "snippet": "  long stop(int silence_threshold) {\n    Preconditions.checkState(Thread.currentThread() == startThread);\n\n    ThreadTrace trace = getThreadTrace();\n    // Do nothing if the thread trace was not initialized.\n    if (!trace.isInitialized()) {\n      return 0;\n    }\n\n    stopTimeMs = clock.currentTimeMillis();\n    if (extraTracingValues != null) {\n      // We use extraTracingValues.length rather than\n      // extraTracingStatistics.size() because a new statistic may\n      // have been added\n      for (int i = 0; i < extraTracingValues.length; i++) {\n        long value = extraTracingStatistics.get(i).stop(startThread);\n        extraTracingValues[i] = value - extraTracingValues[i];\n      }\n    }\n\n    // Do nothing if the thread trace was not initialized.\n    if (!trace.isInitialized()) {\n      return 0;\n    }\n\n    trace.endEvent(this, silence_threshold);\n    return stopTimeMs - startTimeMs;\n  }\n",
        "begin_line": 407,
        "end_line": 434,
        "comment": "\n   * Stop the trace.\n   * This may only be done once and must be done from the same thread\n   * that started it.\n   * @param silence_threshold Traces for time less than silence_threshold\n   * ms will be left out of the trace report. A value of -1 indicates\n   * that the current ThreadTrace silence_threshold should be used.\n   * @return The time that this trace actually ran\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0508
        },
        "num_failing_tests": 1
    },
    {
        "name": "Tracer.stop#440",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Tracer.java",
        "class_name": "com.google.javascript.jscomp.Tracer",
        "signature": "com.google.javascript.jscomp.Tracer.stop()",
        "snippet": "  long stop() {\n    return stop(-1);\n  }\n",
        "begin_line": 440,
        "end_line": 442,
        "comment": " Stop the trace using the default silence_threshold\n   *\n   * @return  The time that this trace actually ran.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0508
        },
        "num_failing_tests": 1
    },
    {
        "name": "Tracer.getThreadTrace#958",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Tracer.java",
        "class_name": "com.google.javascript.jscomp.Tracer",
        "signature": "com.google.javascript.jscomp.Tracer.getThreadTrace()",
        "snippet": "  static ThreadTrace getThreadTrace() {\n    ThreadTrace t = traces.get();\n    if (t == null) {\n      t = new ThreadTrace();\n      t.prettyPrint = defaultPrettyPrint;\n      traces.set(t);\n    }\n    return t;\n  }\n",
        "begin_line": 958,
        "end_line": 966,
        "comment": "\n   * Get the ThreadTrace for the current thread, creating one if necessary.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0508
        },
        "num_failing_tests": 1
    },
    {
        "name": "SyntacticScopeCreator.SyntacticScopeCreator#56",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/SyntacticScopeCreator.java",
        "class_name": "com.google.javascript.jscomp.SyntacticScopeCreator",
        "signature": "com.google.javascript.jscomp.SyntacticScopeCreator.SyntacticScopeCreator(com.google.javascript.jscomp.AbstractCompiler)",
        "snippet": "  SyntacticScopeCreator(AbstractCompiler compiler) {\n    this.compiler = compiler;\n    this.redeclarationHandler = new DefaultRedeclarationHandler();\n  }\n",
        "begin_line": 56,
        "end_line": 59,
        "comment": "\n   * Creates a ScopeCreator.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0508
        },
        "num_failing_tests": 1
    },
    {
        "name": "SourceFile.getCode#131",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/SourceFile.java",
        "class_name": "com.google.javascript.jscomp.SourceFile",
        "signature": "com.google.javascript.jscomp.SourceFile.getCode()",
        "snippet": "  public String getCode() throws IOException {\n    return code;\n  }\n",
        "begin_line": 131,
        "end_line": 133,
        "comment": "\n   * Gets all the code in this source file.\n   * @throws IOException\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0508
        },
        "num_failing_tests": 1
    },
    {
        "name": "SourceFile.getName#173",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/SourceFile.java",
        "class_name": "com.google.javascript.jscomp.SourceFile",
        "signature": "com.google.javascript.jscomp.SourceFile.getName()",
        "snippet": "  @Override\n  public String getName() {\n    return fileName;\n  }\n",
        "begin_line": 173,
        "end_line": 176,
        "comment": " Returns a unique name for the source file. ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0508
        },
        "num_failing_tests": 1
    },
    {
        "name": "SourceFile.setIsExtern#185",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/SourceFile.java",
        "class_name": "com.google.javascript.jscomp.SourceFile",
        "signature": "com.google.javascript.jscomp.SourceFile.setIsExtern(boolean)",
        "snippet": "  void setIsExtern(boolean newVal) {\n    isExternFile = newVal;\n  }\n",
        "begin_line": 185,
        "end_line": 187,
        "comment": " Sets that this is an extern. ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0508
        },
        "num_failing_tests": 1
    },
    {
        "name": "PrepareAst.PrepareAnnotations#121",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/PrepareAst.java",
        "class_name": "com.google.javascript.jscomp.PrepareAst",
        "signature": "com.google.javascript.jscomp.PrepareAst.PrepareAnnotations.PrepareAnnotations()",
        "snippet": "    PrepareAnnotations() {\n    }\n",
        "begin_line": 121,
        "end_line": 122,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0508
        },
        "num_failing_tests": 1
    },
    {
        "name": "PrepareAst.shouldTraverse#124",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/PrepareAst.java",
        "class_name": "com.google.javascript.jscomp.PrepareAst",
        "signature": "com.google.javascript.jscomp.PrepareAst.PrepareAnnotations.shouldTraverse(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "    @Override\n    public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n      if (n.isObjectLit()) {\n        normalizeObjectLiteralAnnotations(n);\n      }\n      return true;\n    }\n",
        "begin_line": 124,
        "end_line": 130,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0508
        },
        "num_failing_tests": 1
    },
    {
        "name": "PrepareAst.PrepareAst#39",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/PrepareAst.java",
        "class_name": "com.google.javascript.jscomp.PrepareAst",
        "signature": "com.google.javascript.jscomp.PrepareAst.PrepareAst(com.google.javascript.jscomp.AbstractCompiler)",
        "snippet": "  PrepareAst(AbstractCompiler compiler) {\n    this(compiler, false);\n  }\n",
        "begin_line": 39,
        "end_line": 41,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0508
        },
        "num_failing_tests": 1
    },
    {
        "name": "PrepareAst.PrepareAst#43",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/PrepareAst.java",
        "class_name": "com.google.javascript.jscomp.PrepareAst",
        "signature": "com.google.javascript.jscomp.PrepareAst.PrepareAst(com.google.javascript.jscomp.AbstractCompiler, boolean)",
        "snippet": "  PrepareAst(AbstractCompiler compiler, boolean checkOnly) {\n    this.compiler = compiler;\n    this.checkOnly = checkOnly;\n  }\n",
        "begin_line": 43,
        "end_line": 46,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0508
        },
        "num_failing_tests": 1
    },
    {
        "name": "PrepareAst.process#54",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/PrepareAst.java",
        "class_name": "com.google.javascript.jscomp.PrepareAst",
        "signature": "com.google.javascript.jscomp.PrepareAst.process(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  @Override\n  public void process(Node externs, Node root) {\n    if (checkOnly) {\n      normalizeNodeTypes(root);\n    } else {\n      // Don't perform \"PrepareAnnotations\" when doing checks as\n      // they currently aren't valid during sanity checks.  In particular,\n      // they DIRECT_EVAL shouldn't be applied after inlining has been\n      // performed.\n      if (externs != null) {\n        NodeTraversal.traverse(\n            compiler, externs, new PrepareAnnotations());\n      }\n      if (root != null) {\n        NodeTraversal.traverse(\n            compiler, root, new PrepareAnnotations());\n      }\n    }\n  }\n",
        "begin_line": 54,
        "end_line": 72,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0508
        },
        "num_failing_tests": 1
    },
    {
        "name": "NodeTraversal.NodeTraversal#221",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeTraversal.java",
        "class_name": "com.google.javascript.jscomp.NodeTraversal",
        "signature": "com.google.javascript.jscomp.NodeTraversal.NodeTraversal(com.google.javascript.jscomp.AbstractCompiler, com.google.javascript.jscomp.NodeTraversal.Callback)",
        "snippet": "  public NodeTraversal(AbstractCompiler compiler, Callback cb) {\n    this(compiler, cb, new SyntacticScopeCreator(compiler));\n  }\n",
        "begin_line": 221,
        "end_line": 223,
        "comment": "\n   * Creates a node traversal using the specified callback interface.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0508
        },
        "num_failing_tests": 1
    },
    {
        "name": "NodeTraversal.NodeTraversal#229",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeTraversal.java",
        "class_name": "com.google.javascript.jscomp.NodeTraversal",
        "signature": "com.google.javascript.jscomp.NodeTraversal.NodeTraversal(com.google.javascript.jscomp.AbstractCompiler, com.google.javascript.jscomp.NodeTraversal.Callback, com.google.javascript.jscomp.ScopeCreator)",
        "snippet": "  public NodeTraversal(AbstractCompiler compiler, Callback cb,\n      ScopeCreator scopeCreator) {\n    this.callback = cb;\n    if (cb instanceof ScopedCallback) {\n      this.scopeCallback = (ScopedCallback) cb;\n    }\n    this.compiler = compiler;\n    this.inputId = null;\n    this.sourceName = \"\";\n    this.scopeCreator = scopeCreator;\n  }\n",
        "begin_line": 229,
        "end_line": 239,
        "comment": "\n   * Creates a node traversal using the specified callback interface\n   * and the scope creator.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0508
        },
        "num_failing_tests": 1
    },
    {
        "name": "NodeTraversal.traverse#271",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeTraversal.java",
        "class_name": "com.google.javascript.jscomp.NodeTraversal",
        "signature": "com.google.javascript.jscomp.NodeTraversal.traverse(com.google.javascript.rhino.Node)",
        "snippet": "  public void traverse(Node root) {\n    try {\n      inputId = NodeUtil.getInputId(root);\n      sourceName = \"\";\n      curNode = root;\n      pushScope(root);\n      traverseBranch(root, null);\n      popScope();\n    } catch (Exception unexpectedException) {\n      throwUnexpectedException(unexpectedException);\n    }\n  }\n",
        "begin_line": 271,
        "end_line": 282,
        "comment": "\n   * Traverses a parse tree recursively.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0508
        },
        "num_failing_tests": 1
    },
    {
        "name": "NodeTraversal.traverse#453",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeTraversal.java",
        "class_name": "com.google.javascript.jscomp.NodeTraversal",
        "signature": "com.google.javascript.jscomp.NodeTraversal.traverse(com.google.javascript.jscomp.AbstractCompiler, com.google.javascript.rhino.Node, com.google.javascript.jscomp.NodeTraversal.Callback)",
        "snippet": "  public static void traverse(\n      AbstractCompiler compiler, Node root, Callback cb) {\n    NodeTraversal t = new NodeTraversal(compiler, cb);\n    t.traverse(root);\n  }\n",
        "begin_line": 453,
        "end_line": 457,
        "comment": "\n   * Traverses a node recursively.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0508
        },
        "num_failing_tests": 1
    },
    {
        "name": "NodeTraversal.pushScope#563",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeTraversal.java",
        "class_name": "com.google.javascript.jscomp.NodeTraversal",
        "signature": "com.google.javascript.jscomp.NodeTraversal.pushScope(com.google.javascript.rhino.Node)",
        "snippet": "  private void pushScope(Node node) {\n    Preconditions.checkState(curNode != null);\n    scopeRoots.push(node);\n    cfgs.push(null);\n    if (scopeCallback != null) {\n      scopeCallback.enterScope(this);\n    }\n  }\n",
        "begin_line": 563,
        "end_line": 570,
        "comment": " Creates a new scope (e.g. when entering a function). ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0508
        },
        "num_failing_tests": 1
    },
    {
        "name": "NodeTraversal.popScope#583",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeTraversal.java",
        "class_name": "com.google.javascript.jscomp.NodeTraversal",
        "signature": "com.google.javascript.jscomp.NodeTraversal.popScope()",
        "snippet": "  private void popScope() {\n    if (scopeCallback != null) {\n      scopeCallback.exitScope(this);\n    }\n    if (scopeRoots.isEmpty()) {\n      scopes.pop();\n    } else {\n      scopeRoots.pop();\n    }\n    cfgs.pop();\n  }\n",
        "begin_line": 583,
        "end_line": 593,
        "comment": " Pops back to the previous scope (e.g. when leaving a function). ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0508
        },
        "num_failing_tests": 1
    },
    {
        "name": "NodeTraversal.getSourceName#655",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeTraversal.java",
        "class_name": "com.google.javascript.jscomp.NodeTraversal",
        "signature": "com.google.javascript.jscomp.NodeTraversal.getSourceName(com.google.javascript.rhino.Node)",
        "snippet": "  private static String getSourceName(Node n) {\n    String name = n.getSourceFileName();\n    return name == null ? \"\" : name;\n  }\n",
        "begin_line": 655,
        "end_line": 658,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0508
        },
        "num_failing_tests": 1
    },
    {
        "name": "JsAst.JsAst#43",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/JsAst.java",
        "class_name": "com.google.javascript.jscomp.JsAst",
        "signature": "com.google.javascript.jscomp.JsAst.JsAst(com.google.javascript.jscomp.SourceFile)",
        "snippet": "  public JsAst(SourceFile sourceFile) {\n    this.inputId = new InputId(sourceFile.getName());\n    this.sourceFile = sourceFile;\n    this.fileName = sourceFile.getName();\n  }\n",
        "begin_line": 43,
        "end_line": 47,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0508
        },
        "num_failing_tests": 1
    },
    {
        "name": "JsAst.getAstRoot#49",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/JsAst.java",
        "class_name": "com.google.javascript.jscomp.JsAst",
        "signature": "com.google.javascript.jscomp.JsAst.getAstRoot(com.google.javascript.jscomp.AbstractCompiler)",
        "snippet": "  @Override\n  public Node getAstRoot(AbstractCompiler compiler) {\n    if (root == null) {\n      parse(compiler);\n      root.setInputId(inputId);\n    }\n    return root;\n  }\n",
        "begin_line": 49,
        "end_line": 56,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0508
        },
        "num_failing_tests": 1
    },
    {
        "name": "JsAst.getInputId#67",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/JsAst.java",
        "class_name": "com.google.javascript.jscomp.JsAst",
        "signature": "com.google.javascript.jscomp.JsAst.getInputId()",
        "snippet": "  @Override\n  public InputId getInputId() {\n    return inputId;\n  }\n",
        "begin_line": 67,
        "end_line": 70,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0508
        },
        "num_failing_tests": 1
    },
    {
        "name": "JsAst.getSourceFile#72",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/JsAst.java",
        "class_name": "com.google.javascript.jscomp.JsAst",
        "signature": "com.google.javascript.jscomp.JsAst.getSourceFile()",
        "snippet": "  @Override\n  public SourceFile getSourceFile() {\n    return sourceFile;\n  }\n",
        "begin_line": 72,
        "end_line": 75,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0508
        },
        "num_failing_tests": 1
    },
    {
        "name": "JsAst.parse#83",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/JsAst.java",
        "class_name": "com.google.javascript.jscomp.JsAst",
        "signature": "com.google.javascript.jscomp.JsAst.parse(com.google.javascript.jscomp.AbstractCompiler)",
        "snippet": "  private void parse(AbstractCompiler compiler) {\n    try {\n      logger_.fine(\"Parsing: \" + sourceFile.getName());\n      ParserRunner.ParseResult result = ParserRunner.parse(sourceFile, sourceFile.getCode(),\n          compiler.getParserConfig(),\n          compiler.getDefaultErrorReporter(),\n          logger_);\n      root = result.ast;\n      compiler.setOldParseTree(sourceFile.getName(), result.oldAst);\n    } catch (IOException e) {\n      compiler.report(\n          JSError.make(AbstractCompiler.READ_ERROR, sourceFile.getName()));\n    }\n\n    if (root == null || compiler.hasHaltingErrors()) {\n      // There was a parse error or IOException, so use a dummy block.\n      root = IR.script();\n    } else {\n      compiler.prepareAst(root);\n    }\n\n    // Set the source name so that the compiler passes can track\n    // the source file and module.\n    root.setStaticSourceFile(sourceFile);\n  }\n",
        "begin_line": 83,
        "end_line": 107,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0508
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSModule.JSModule#62",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/JSModule.java",
        "class_name": "com.google.javascript.jscomp.JSModule",
        "signature": "com.google.javascript.jscomp.JSModule.JSModule(java.lang.String)",
        "snippet": "  public JSModule(String name) {\n    this.name = name;\n    this.depth = -1;\n  }\n",
        "begin_line": 62,
        "end_line": 65,
        "comment": "\n   * Creates an instance.\n   *\n   * @param name A unique name for the module\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0508
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSModule.add#93",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/JSModule.java",
        "class_name": "com.google.javascript.jscomp.JSModule",
        "signature": "com.google.javascript.jscomp.JSModule.add(com.google.javascript.jscomp.SourceFile)",
        "snippet": "  public void add(SourceFile file) {\n    add(new CompilerInput(file));\n  }\n",
        "begin_line": 93,
        "end_line": 95,
        "comment": " Adds a source file input to this module. ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0508
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSModule.add#103",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/JSModule.java",
        "class_name": "com.google.javascript.jscomp.JSModule",
        "signature": "com.google.javascript.jscomp.JSModule.add(com.google.javascript.jscomp.CompilerInput)",
        "snippet": "  public void add(CompilerInput input) {\n    inputs.add(input);\n    input.setModule(this);\n  }\n",
        "begin_line": 103,
        "end_line": 106,
        "comment": " Adds a source code input to this module. ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0508
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSModule.getInputs#204",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/JSModule.java",
        "class_name": "com.google.javascript.jscomp.JSModule",
        "signature": "com.google.javascript.jscomp.JSModule.getInputs()",
        "snippet": "  public List<CompilerInput> getInputs() {\n    return inputs;\n  }\n",
        "begin_line": 204,
        "end_line": 206,
        "comment": "\n   * Gets this module's list of source code inputs.\n   *\n   * @return A list that may be empty but not null\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0508
        },
        "num_failing_tests": 1
    },
    {
        "name": "DependencyOptions.needsManagement#121",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DependencyOptions.java",
        "class_name": "com.google.javascript.jscomp.DependencyOptions",
        "signature": "com.google.javascript.jscomp.DependencyOptions.needsManagement()",
        "snippet": "  boolean needsManagement() {\n    return sortDependencies || pruneDependencies;\n  }\n",
        "begin_line": 121,
        "end_line": 123,
        "comment": " Returns whether re-ordering of files is needed. ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0508
        },
        "num_failing_tests": 1
    },
    {
        "name": "CompilerOptions.isOn#2124",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "signature": "com.google.javascript.jscomp.CompilerOptions.TracerMode.isOn()",
        "snippet": "    boolean isOn() {\n      return this != OFF;\n    }\n",
        "begin_line": 2124,
        "end_line": 2126,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0508
        },
        "num_failing_tests": 1
    },
    {
        "name": "CompilerInput.CompilerInput#64",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CompilerInput.java",
        "class_name": "com.google.javascript.jscomp.CompilerInput",
        "signature": "com.google.javascript.jscomp.CompilerInput.CompilerInput(com.google.javascript.jscomp.SourceAst, boolean)",
        "snippet": "  public CompilerInput(SourceAst ast, boolean isExtern) {\n    this(ast, ast.getInputId(), isExtern);\n  }\n",
        "begin_line": 64,
        "end_line": 66,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0508
        },
        "num_failing_tests": 1
    },
    {
        "name": "CompilerInput.CompilerInput#72",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CompilerInput.java",
        "class_name": "com.google.javascript.jscomp.CompilerInput",
        "signature": "com.google.javascript.jscomp.CompilerInput.CompilerInput(com.google.javascript.jscomp.SourceAst, com.google.javascript.rhino.InputId, boolean)",
        "snippet": "  public CompilerInput(SourceAst ast, InputId inputId, boolean isExtern) {\n    this.ast = ast;\n    this.id = inputId;\n\n    // TODO(nicksantos): Add a precondition check here. People are passing\n    // in null, but they should not be.\n    if (ast != null && ast.getSourceFile() != null) {\n      ast.getSourceFile().setIsExtern(isExtern);\n    }\n  }\n",
        "begin_line": 72,
        "end_line": 81,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0508
        },
        "num_failing_tests": 1
    },
    {
        "name": "CompilerInput.CompilerInput#83",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CompilerInput.java",
        "class_name": "com.google.javascript.jscomp.CompilerInput",
        "signature": "com.google.javascript.jscomp.CompilerInput.CompilerInput(com.google.javascript.jscomp.SourceFile)",
        "snippet": "  public CompilerInput(SourceFile file) {\n    this(file, false);\n  }\n",
        "begin_line": 83,
        "end_line": 85,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0508
        },
        "num_failing_tests": 1
    },
    {
        "name": "CompilerInput.CompilerInput#87",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CompilerInput.java",
        "class_name": "com.google.javascript.jscomp.CompilerInput",
        "signature": "com.google.javascript.jscomp.CompilerInput.CompilerInput(com.google.javascript.jscomp.SourceFile, boolean)",
        "snippet": "  public CompilerInput(SourceFile file, boolean isExtern) {\n    this(new JsAst(file), isExtern);\n  }\n",
        "begin_line": 87,
        "end_line": 89,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0508
        },
        "num_failing_tests": 1
    },
    {
        "name": "CompilerInput.getInputId#92",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CompilerInput.java",
        "class_name": "com.google.javascript.jscomp.CompilerInput",
        "signature": "com.google.javascript.jscomp.CompilerInput.getInputId()",
        "snippet": "  @Override\n  public InputId getInputId() {\n    return id;\n  }\n",
        "begin_line": 92,
        "end_line": 95,
        "comment": " Returns a name for this input. Must be unique across all inputs. ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0508
        },
        "num_failing_tests": 1
    },
    {
        "name": "CompilerInput.getName#98",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CompilerInput.java",
        "class_name": "com.google.javascript.jscomp.CompilerInput",
        "signature": "com.google.javascript.jscomp.CompilerInput.getName()",
        "snippet": "  @Override\n  public String getName() {\n    return id.getIdName();\n  }\n",
        "begin_line": 98,
        "end_line": 101,
        "comment": " Returns a name for this input. Must be unique across all inputs. ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0508
        },
        "num_failing_tests": 1
    },
    {
        "name": "CompilerInput.getAstRoot#114",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CompilerInput.java",
        "class_name": "com.google.javascript.jscomp.CompilerInput",
        "signature": "com.google.javascript.jscomp.CompilerInput.getAstRoot(com.google.javascript.jscomp.AbstractCompiler)",
        "snippet": "  @Override\n  public Node getAstRoot(AbstractCompiler compiler) {\n    Node root = ast.getAstRoot(compiler);\n    // The root maybe null if the AST can not be created.\n    if (root != null) {\n      Preconditions.checkState(root.isScript());\n      Preconditions.checkNotNull(root.getInputId());\n    }\n    return root;\n  }\n",
        "begin_line": 114,
        "end_line": 123,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0508
        },
        "num_failing_tests": 1
    },
    {
        "name": "CompilerInput.setCompiler#146",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CompilerInput.java",
        "class_name": "com.google.javascript.jscomp.CompilerInput",
        "signature": "com.google.javascript.jscomp.CompilerInput.setCompiler(com.google.javascript.jscomp.AbstractCompiler)",
        "snippet": "  public void setCompiler(AbstractCompiler compiler) {\n    this.compiler = compiler;\n  }\n",
        "begin_line": 146,
        "end_line": 148,
        "comment": " Sets an abstract compiler for doing parsing. ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0508
        },
        "num_failing_tests": 1
    },
    {
        "name": "CompilerInput.setModule#324",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CompilerInput.java",
        "class_name": "com.google.javascript.jscomp.CompilerInput",
        "signature": "com.google.javascript.jscomp.CompilerInput.setModule(com.google.javascript.jscomp.JSModule)",
        "snippet": "  public void setModule(JSModule module) {\n    // An input may only belong to one module.\n    Preconditions.checkArgument(\n        module == null || this.module == null || this.module == module);\n    this.module = module;\n  }\n",
        "begin_line": 324,
        "end_line": 329,
        "comment": " Sets the module to which the input belongs. ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0508
        },
        "num_failing_tests": 1
    },
    {
        "name": "Compiler.acceptEcmaScript5#2015",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.acceptEcmaScript5()",
        "snippet": "  @Override\n  public boolean acceptEcmaScript5() {\n    switch (options.getLanguageIn()) {\n      case ECMASCRIPT5:\n      case ECMASCRIPT5_STRICT:\n        return true;\n      case ECMASCRIPT3:\n        return false;\n    }\n    throw new IllegalStateException(\"unexpected language mode\");\n  }\n",
        "begin_line": 2015,
        "end_line": 2025,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0508
        },
        "num_failing_tests": 1
    },
    {
        "name": "Compiler.initBasedOnOptions#428",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.initBasedOnOptions()",
        "snippet": "  private void initBasedOnOptions() {\n    // Create the source map if necessary.\n    if (options.sourceMapOutputPath != null) {\n      sourceMap = options.sourceMapFormat.getInstance();\n      sourceMap.setPrefixMappings(options.sourceMapLocationMappings);\n    }\n  }\n",
        "begin_line": 428,
        "end_line": 434,
        "comment": "\n   * Do any initialization that is dependent on the compiler options.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0508
        },
        "num_failing_tests": 1
    },
    {
        "name": "Compiler.checkFirstModule#457",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.checkFirstModule(java.util.List<com.google.javascript.jscomp.JSModule>)",
        "snippet": "  private void checkFirstModule(List<JSModule> modules) {\n    if (modules.isEmpty()) {\n      report(JSError.make(EMPTY_MODULE_LIST_ERROR));\n    } else if (modules.get(0).getInputs().isEmpty() && modules.size() > 1) {\n      // The root module may only be empty if there is exactly 1 module.\n      report(JSError.make(EMPTY_ROOT_MODULE_ERROR,\n          modules.get(0).getName()));\n    }\n  }\n",
        "begin_line": 457,
        "end_line": 465,
        "comment": "\n   * Verifies that at least one module has been provided and that the first one\n   * has at least one source code input.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0508
        },
        "num_failing_tests": 1
    },
    {
        "name": "Compiler.fillEmptyModules#479",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.fillEmptyModules(java.util.List<com.google.javascript.jscomp.JSModule>)",
        "snippet": "  private static void fillEmptyModules(List<JSModule> modules) {\n    for (JSModule module : modules) {\n      if (module.getInputs().isEmpty()) {\n        module.add(SourceFile.fromCode(\n            createFillFileName(module.getName()), \"\"));\n      }\n    }\n  }\n",
        "begin_line": 479,
        "end_line": 486,
        "comment": "\n   * Fill any empty modules with a place holder file. It makes any cross module\n   * motion easier.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0508
        },
        "num_failing_tests": 1
    },
    {
        "name": "Compiler.getAllInputsFromModules#502",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.getAllInputsFromModules(java.util.List<com.google.javascript.jscomp.JSModule>)",
        "snippet": "  private static List<CompilerInput> getAllInputsFromModules(\n      List<JSModule> modules) {\n    List<CompilerInput> inputs = Lists.newArrayList();\n    Map<String, JSModule> inputMap = Maps.newHashMap();\n    for (JSModule module : modules) {\n      for (CompilerInput input : module.getInputs()) {\n        String inputName = input.getName();\n\n        // NOTE(nicksantos): If an input is in more than one module,\n        // it will show up twice in the inputs list, and then we\n        // will get an error down the line.\n        inputs.add(input);\n        inputMap.put(inputName, module);\n      }\n    }\n    return inputs;\n  }\n",
        "begin_line": 502,
        "end_line": 518,
        "comment": "\n   * Builds a single list of all module inputs. Verifies that it contains no\n   * duplicates.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0508
        },
        "num_failing_tests": 1
    },
    {
        "name": "Compiler.newTracer#960",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.newTracer(java.lang.String)",
        "snippet": "  Tracer newTracer(String passName) {\n    String comment = passName\n        + (recentChange.hasCodeChanged() ? \" on recently changed AST\" : \"\");\n    if (options.tracer.isOn()) {\n      tracker.recordPassStart(passName, true);\n    }\n    return new Tracer(\"Compiler\", comment);\n  }\n",
        "begin_line": 960,
        "end_line": 967,
        "comment": "\n   * Returns a new tracer for the given pass name.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0508
        },
        "num_failing_tests": 1
    },
    {
        "name": "Compiler.stopTracer#969",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.stopTracer(com.google.javascript.jscomp.Tracer, java.lang.String)",
        "snippet": "  void stopTracer(Tracer t, String passName) {\n    long result = t.stop();\n    if (options.tracer.isOn()) {\n      tracker.recordPassStop(passName, result);\n    }\n  }\n",
        "begin_line": 969,
        "end_line": 974,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0508
        },
        "num_failing_tests": 1
    },
    {
        "name": "Compiler.putCompilerInput#1094",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.putCompilerInput(com.google.javascript.rhino.InputId, com.google.javascript.jscomp.CompilerInput)",
        "snippet": "  private CompilerInput putCompilerInput(InputId id, CompilerInput input) {\n    input.setCompiler(this);\n    return inputsById.put(id, input);\n  }\n",
        "begin_line": 1094,
        "end_line": 1097,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0508
        },
        "num_failing_tests": 1
    },
    {
        "name": "Compiler.getDefaultErrorReporter#1611",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.getDefaultErrorReporter()",
        "snippet": "  @Override\n  ErrorReporter getDefaultErrorReporter() {\n    return defaultErrorReporter;\n  }\n",
        "begin_line": 1611,
        "end_line": 1614,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0508
        },
        "num_failing_tests": 1
    },
    {
        "name": "Compiler.prepareAst#1955",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.prepareAst(com.google.javascript.rhino.Node)",
        "snippet": "  @Override\n  void prepareAst(Node root) {\n    CompilerPass pass = new PrepareAst(this);\n    pass.process(null, root);\n  }\n",
        "begin_line": 1955,
        "end_line": 1959,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0508
        },
        "num_failing_tests": 1
    },
    {
        "name": "Compiler.isIdeMode#2010",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.isIdeMode()",
        "snippet": "  @Override\n  public boolean isIdeMode() {\n    return options.ideMode;\n  }\n",
        "begin_line": 2010,
        "end_line": 2013,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0508
        },
        "num_failing_tests": 1
    },
    {
        "name": "Compiler.acceptConstKeyword#2031",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.acceptConstKeyword()",
        "snippet": "  @Override\n  public boolean acceptConstKeyword() {\n    return options.acceptConstKeyword;\n  }\n",
        "begin_line": 2031,
        "end_line": 2034,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0508
        },
        "num_failing_tests": 1
    },
    {
        "name": "Compiler.hasHaltingErrors#2136",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.hasHaltingErrors()",
        "snippet": "  @Override\n  boolean hasHaltingErrors() {\n    return !isIdeMode() && getErrorCount() > 0;\n  }\n",
        "begin_line": 2136,
        "end_line": 2139,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0508
        },
        "num_failing_tests": 1
    },
    {
        "name": "Compiler.hasErrors#2150",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.hasErrors()",
        "snippet": "  public boolean hasErrors() {\n    return hasHaltingErrors();\n  }\n",
        "begin_line": 2150,
        "end_line": 2152,
        "comment": "\n   * Consults the {@link ErrorManager} to see if we've encountered errors\n   * that should halt compilation. <p>\n   *\n   * If {@link CompilerOptions#ideMode} is {@code true}, this function\n   * always returns {@code false} without consulting the error manager. The\n   * error manager will continue to be told about new errors and warnings, but\n   * the compiler will complete compilation of all inputs.<p>\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0508
        },
        "num_failing_tests": 1
    },
    {
        "name": "Compiler.setOldParseTree#2555",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.setOldParseTree(java.lang.String, com.google.javascript.rhino.head.ast.AstRoot)",
        "snippet": "  @Override\n  public void setOldParseTree(String sourceName, AstRoot oldAst) {\n  }\n",
        "begin_line": 2555,
        "end_line": 2557,
        "comment": "\n   * {@inheritDoc}\n   ",
        "resolved_comments": {
            "com.google.javascript.jscomp.AbstractCompiler": "\n    * Stores the \"new\" Rhino parse tree for a given source file.\n    * @param sourceName The source file name.\n    * @param astRoot The \"new\" Rhino parse tree.\n    "
        },
        "susp": {
            "ochiai_susp": 0.0508
        },
        "num_failing_tests": 1
    },
    {
        "name": "CodeChangeHandler.hasCodeChanged#49",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodeChangeHandler.java",
        "class_name": "com.google.javascript.jscomp.CodeChangeHandler",
        "signature": "com.google.javascript.jscomp.CodeChangeHandler.hasCodeChanged()",
        "snippet": "  boolean hasCodeChanged() {\n    return hasChanged;\n  }\n",
        "begin_line": 49,
        "end_line": 51,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0508
        },
        "num_failing_tests": 1
    },
    {
        "name": "SuppressDocWarningsGuard.SuppressDocWarningsGuard#40",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/SuppressDocWarningsGuard.java",
        "class_name": "com.google.javascript.jscomp.SuppressDocWarningsGuard",
        "signature": "com.google.javascript.jscomp.SuppressDocWarningsGuard.SuppressDocWarningsGuard(java.util.Map<java.lang.String, com.google.javascript.jscomp.DiagnosticGroup>)",
        "snippet": "  SuppressDocWarningsGuard(Map<String, DiagnosticGroup> suppressibleGroups) {\n    for (Map.Entry<String, DiagnosticGroup> entry :\n             suppressibleGroups.entrySet()) {\n      suppressors.put(\n          entry.getKey(),\n          new DiagnosticGroupWarningsGuard(\n              entry.getValue(),\n              CheckLevel.OFF));\n    }\n  }\n",
        "begin_line": 40,
        "end_line": 49,
        "comment": "\n   * The suppressible groups, indexed by name.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0507
        },
        "num_failing_tests": 1
    },
    {
        "name": "SuppressDocWarningsGuard.getPriority#103",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/SuppressDocWarningsGuard.java",
        "class_name": "com.google.javascript.jscomp.SuppressDocWarningsGuard",
        "signature": "com.google.javascript.jscomp.SuppressDocWarningsGuard.getPriority()",
        "snippet": "  @Override\n  public int getPriority() {\n    // Happens after path-based filtering, but before other times\n    // of filtering.\n    return WarningsGuard.Priority.SUPPRESS_DOC.value;\n  }\n",
        "begin_line": 103,
        "end_line": 108,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0507
        },
        "num_failing_tests": 1
    },
    {
        "name": "LightweightMessageFormatter.LightweightMessageFormatter#44",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/LightweightMessageFormatter.java",
        "class_name": "com.google.javascript.jscomp.LightweightMessageFormatter",
        "signature": "com.google.javascript.jscomp.LightweightMessageFormatter.LightweightMessageFormatter(com.google.javascript.jscomp.SourceExcerptProvider)",
        "snippet": "  public LightweightMessageFormatter(SourceExcerptProvider source) {\n    this(source, LINE);\n  }\n",
        "begin_line": 44,
        "end_line": 46,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0507
        },
        "num_failing_tests": 1
    },
    {
        "name": "LightweightMessageFormatter.LightweightMessageFormatter#48",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/LightweightMessageFormatter.java",
        "class_name": "com.google.javascript.jscomp.LightweightMessageFormatter",
        "signature": "com.google.javascript.jscomp.LightweightMessageFormatter.LightweightMessageFormatter(com.google.javascript.jscomp.SourceExcerptProvider, com.google.javascript.jscomp.SourceExcerptProvider.SourceExcerpt)",
        "snippet": "  public LightweightMessageFormatter(SourceExcerptProvider source,\n      SourceExcerpt excerpt) {\n    super(source);\n    Preconditions.checkNotNull(source);\n    this.excerpt = excerpt;\n  }\n",
        "begin_line": 48,
        "end_line": 53,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0507
        },
        "num_failing_tests": 1
    },
    {
        "name": "ErrorFormat.toFormatter#35",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ErrorFormat.java",
        "class_name": "com.google.javascript.jscomp.ErrorFormat",
        "signature": "com.google.javascript.jscomp.ErrorFormat.toFormatter(com.google.javascript.jscomp.SourceExcerptProvider, boolean)",
        "snippet": "    @Override\n    public MessageFormatter toFormatter(\n        SourceExcerptProvider source, boolean colorize) {\n      LightweightMessageFormatter formatter = new LightweightMessageFormatter(\n          source);\n      formatter.setColorize(colorize);\n      return formatter;\n    }\n",
        "begin_line": 35,
        "end_line": 42,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0507
        },
        "num_failing_tests": 1
    },
    {
        "name": "DiagnosticGroups.getRegisteredGroups#63",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroups.java",
        "class_name": "com.google.javascript.jscomp.DiagnosticGroups",
        "signature": "com.google.javascript.jscomp.DiagnosticGroups.getRegisteredGroups()",
        "snippet": "  protected Map<String, DiagnosticGroup> getRegisteredGroups() {\n    return ImmutableMap.copyOf(groupsByName);\n  }\n",
        "begin_line": 63,
        "end_line": 65,
        "comment": " Get the registered diagnostic groups, indexed by name. ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0507
        },
        "num_failing_tests": 1
    },
    {
        "name": "DiagnosticGroup.matches#109",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroup.java",
        "class_name": "com.google.javascript.jscomp.DiagnosticGroup",
        "signature": "com.google.javascript.jscomp.DiagnosticGroup.matches(com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public boolean matches(DiagnosticType type) {\n    return types.contains(type);\n  }\n",
        "begin_line": 109,
        "end_line": 111,
        "comment": "\n   * Returns whether the given type matches a type in this group.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0507
        },
        "num_failing_tests": 1
    },
    {
        "name": "DiagnosticGroup.getTypes#128",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroup.java",
        "class_name": "com.google.javascript.jscomp.DiagnosticGroup",
        "signature": "com.google.javascript.jscomp.DiagnosticGroup.getTypes()",
        "snippet": "  public Iterable<DiagnosticType> getTypes() {\n    return types;\n  }\n",
        "begin_line": 128,
        "end_line": 130,
        "comment": "\n   * Returns an iterable over all the types in this group.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0507
        },
        "num_failing_tests": 1
    },
    {
        "name": "ComposeWarningsGuard.compare#61",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ComposeWarningsGuard.java",
        "class_name": "com.google.javascript.jscomp.ComposeWarningsGuard",
        "signature": "com.google.javascript.jscomp.ComposeWarningsGuard.GuardComparator.compare(com.google.javascript.jscomp.WarningsGuard, com.google.javascript.jscomp.WarningsGuard)",
        "snippet": "    @Override\n    public int compare(WarningsGuard a, WarningsGuard b) {\n      int priorityDiff = a.getPriority() - b.getPriority();\n      if (priorityDiff != 0) {\n        return priorityDiff;\n      }\n\n      // If the warnings guards have the same priority, the one that\n      // was added last wins.\n      return orderOfAddition.get(b).intValue() -\n          orderOfAddition.get(a).intValue();\n    }\n",
        "begin_line": 61,
        "end_line": 72,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0507
        },
        "num_failing_tests": 1
    },
    {
        "name": "ComposeWarningsGuard.addGuard#87",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ComposeWarningsGuard.java",
        "class_name": "com.google.javascript.jscomp.ComposeWarningsGuard",
        "signature": "com.google.javascript.jscomp.ComposeWarningsGuard.addGuard(com.google.javascript.jscomp.WarningsGuard)",
        "snippet": "  void addGuard(WarningsGuard guard) {\n    if (guard instanceof ComposeWarningsGuard) {\n      ComposeWarningsGuard composeGuard = (ComposeWarningsGuard) guard;\n      if (composeGuard.demoteErrors) {\n        this.demoteErrors = composeGuard.demoteErrors;\n      }\n\n      // Reverse the guards, so that they have the same order in the result.\n      addGuards(Lists.newArrayList(composeGuard.guards.descendingSet()));\n    } else {\n      numberOfAdds++;\n      orderOfAddition.put(guard, numberOfAdds);\n      guards.remove(guard);\n      guards.add(guard);\n    }\n  }\n",
        "begin_line": 87,
        "end_line": 102,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0507
        },
        "num_failing_tests": 1
    },
    {
        "name": "ComposeWarningsGuard.addGuards#104",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ComposeWarningsGuard.java",
        "class_name": "com.google.javascript.jscomp.ComposeWarningsGuard",
        "signature": "com.google.javascript.jscomp.ComposeWarningsGuard.addGuards(java.lang.Iterable<com.google.javascript.jscomp.WarningsGuard>)",
        "snippet": "  private void addGuards(Iterable<WarningsGuard> guards) {\n    for (WarningsGuard guard : guards) {\n      addGuard(guard);\n    }\n  }\n",
        "begin_line": 104,
        "end_line": 108,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0507
        },
        "num_failing_tests": 1
    },
    {
        "name": "CompilerOptions.enables#1125",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "signature": "com.google.javascript.jscomp.CompilerOptions.enables(com.google.javascript.jscomp.DiagnosticGroup)",
        "snippet": "  boolean enables(DiagnosticGroup type) {\n    return warningsGuard.enables(type);\n  }\n",
        "begin_line": 1125,
        "end_line": 1127,
        "comment": "\n   * Whether the warnings guard in this Options object enables the given\n   * group of warnings.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0507
        },
        "num_failing_tests": 1
    },
    {
        "name": "CompilerOptions.getWarningsGuard#1144",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "signature": "com.google.javascript.jscomp.CompilerOptions.getWarningsGuard()",
        "snippet": "  WarningsGuard getWarningsGuard() {\n    return warningsGuard;\n  }\n",
        "begin_line": 1144,
        "end_line": 1146,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0507
        },
        "num_failing_tests": 1
    },
    {
        "name": "CompilerOptions.shouldColorizeErrorOutput#1343",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "signature": "com.google.javascript.jscomp.CompilerOptions.shouldColorizeErrorOutput()",
        "snippet": "  public boolean shouldColorizeErrorOutput() {\n    return colorizeErrorOutput;\n  }\n",
        "begin_line": 1343,
        "end_line": 1345,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0507
        },
        "num_failing_tests": 1
    },
    {
        "name": "CompilerOptions.getLanguageIn#1489",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "signature": "com.google.javascript.jscomp.CompilerOptions.getLanguageIn()",
        "snippet": "  public LanguageMode getLanguageIn() {\n    return languageIn;\n  }\n",
        "begin_line": 1489,
        "end_line": 1491,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0507
        },
        "num_failing_tests": 1
    },
    {
        "name": "Compiler.setErrorManager#261",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.setErrorManager(com.google.javascript.jscomp.ErrorManager)",
        "snippet": "  public void setErrorManager(ErrorManager errorManager) {\n    Preconditions.checkNotNull(\n        errorManager, \"the error manager cannot be null\");\n    this.errorManager = errorManager;\n  }\n",
        "begin_line": 261,
        "end_line": 265,
        "comment": "\n   * Sets the error manager.\n   *\n   * @param errorManager the error manager, it cannot be {@code null}\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0507
        },
        "num_failing_tests": 1
    },
    {
        "name": "Compiler.createMessageFormatter#271",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.createMessageFormatter()",
        "snippet": "  private MessageFormatter createMessageFormatter() {\n    boolean colorize = options.shouldColorizeErrorOutput();\n    return options.errorFormat.toFormatter(this, colorize);\n  }\n",
        "begin_line": 271,
        "end_line": 274,
        "comment": "\n   * Creates a message formatter instance corresponding to the value of\n   * {@link CompilerOptions}.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0507
        },
        "num_failing_tests": 1
    },
    {
        "name": "CheckLevel.isOn#29",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CheckLevel.java",
        "class_name": "com.google.javascript.jscomp.CheckLevel",
        "signature": "com.google.javascript.jscomp.CheckLevel.isOn()",
        "snippet": "  boolean isOn() {\n    return this != OFF;\n  }\n",
        "begin_line": 29,
        "end_line": 31,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0507
        },
        "num_failing_tests": 1
    },
    {
        "name": "AbstractMessageFormatter.AbstractMessageFormatter#32",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AbstractMessageFormatter.java",
        "class_name": "com.google.javascript.jscomp.AbstractMessageFormatter",
        "signature": "com.google.javascript.jscomp.AbstractMessageFormatter.AbstractMessageFormatter(com.google.javascript.jscomp.SourceExcerptProvider)",
        "snippet": "  public AbstractMessageFormatter(SourceExcerptProvider source) {\n    this.source = source;\n  }\n",
        "begin_line": 32,
        "end_line": 34,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0507
        },
        "num_failing_tests": 1
    },
    {
        "name": "AbstractMessageFormatter.setColorize#36",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AbstractMessageFormatter.java",
        "class_name": "com.google.javascript.jscomp.AbstractMessageFormatter",
        "signature": "com.google.javascript.jscomp.AbstractMessageFormatter.setColorize(boolean)",
        "snippet": "  public void setColorize(boolean colorize) {\n    this.colorize = colorize;\n  }\n",
        "begin_line": 36,
        "end_line": 38,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0507
        },
        "num_failing_tests": 1
    },
    {
        "name": "ObjectType.createDelegateSuffix#237",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/ObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.ObjectType",
        "signature": "com.google.javascript.rhino.jstype.ObjectType.createDelegateSuffix(java.lang.String)",
        "snippet": "  public static String createDelegateSuffix(String suffix) {\n    return \"(\" + suffix + \")\";\n  }\n",
        "begin_line": 237,
        "end_line": 239,
        "comment": "\n   * Creates a suffix for a proxy delegate.\n   * @see #getNormalizedReferenceName\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0506
        },
        "num_failing_tests": 1
    },
    {
        "name": "ScriptRuntime.getMessage0#366",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/ScriptRuntime.java",
        "class_name": "com.google.javascript.rhino.ScriptRuntime",
        "signature": "com.google.javascript.rhino.ScriptRuntime.getMessage0(java.lang.String)",
        "snippet": "    public static String getMessage0(String messageId) {\n        return getMessage(messageId, null);\n    }\n",
        "begin_line": 366,
        "end_line": 368,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0506
        },
        "num_failing_tests": 1
    },
    {
        "name": "ScriptRuntime.getMessage#379",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/ScriptRuntime.java",
        "class_name": "com.google.javascript.rhino.ScriptRuntime",
        "signature": "com.google.javascript.rhino.ScriptRuntime.getMessage(java.lang.String, java.lang.Object[])",
        "snippet": "    public static String getMessage(String messageId, Object[] arguments) {\n        final String defaultResource\n            = \"rhino_ast.java.com.google.javascript.rhino.Messages\";\n\n        Locale locale = Locale.getDefault();\n\n        // ResourceBundle does caching.\n        ResourceBundle rb = ResourceBundle.getBundle(defaultResource, locale);\n\n        String formatString;\n        try {\n            formatString = rb.getString(messageId);\n        } catch (java.util.MissingResourceException mre) {\n            throw new RuntimeException\n                (\"no message resource found for message property \"+ messageId);\n        }\n\n        /*\n         * It's OK to format the string, even if 'arguments' is null;\n         * we need to format it anyway, to make double ''s collapse to\n         * single 's.\n         */\n        // TODO: MessageFormat is not available on pJava\n        MessageFormat formatter = new MessageFormat(formatString);\n        return formatter.format(arguments);\n    }\n",
        "begin_line": 379,
        "end_line": 404,
        "comment": " OPT there's a noticeable delay for the first error!  Maybe it'd\n     * make sense to use a ListResourceBundle instead of a properties\n     * file to avoid (synchronized) text parsing.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0506
        },
        "num_failing_tests": 1
    },
    {
        "name": "WarningsGuard.Priority#58",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/WarningsGuard.java",
        "class_name": "com.google.javascript.jscomp.WarningsGuard",
        "signature": "com.google.javascript.jscomp.WarningsGuard.Priority.Priority(int)",
        "snippet": "    Priority(int value) {\n      this.value = value;\n    }\n",
        "begin_line": 58,
        "end_line": 60,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0506
        },
        "num_failing_tests": 1
    },
    {
        "name": "WarningsGuard.getPriority#83",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/WarningsGuard.java",
        "class_name": "com.google.javascript.jscomp.WarningsGuard",
        "signature": "com.google.javascript.jscomp.WarningsGuard.getPriority()",
        "snippet": "  protected int getPriority() {\n    return Priority.DEFAULT.value;\n  }\n",
        "begin_line": 83,
        "end_line": 85,
        "comment": "\n   * The priority in which warnings guards are applied. Lower means the\n   * guard will be applied sooner. Expressed on a scale of 1 to 100.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0506
        },
        "num_failing_tests": 1
    },
    {
        "name": "RhinoErrorReporter.OldRhinoErrorReporter#161",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/RhinoErrorReporter.java",
        "class_name": "com.google.javascript.jscomp.RhinoErrorReporter",
        "signature": "com.google.javascript.jscomp.RhinoErrorReporter.OldRhinoErrorReporter.OldRhinoErrorReporter(com.google.javascript.jscomp.AbstractCompiler)",
        "snippet": "    private OldRhinoErrorReporter(AbstractCompiler compiler) {\n      super(compiler);\n    }\n",
        "begin_line": 161,
        "end_line": 163,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0506
        },
        "num_failing_tests": 1
    },
    {
        "name": "RhinoErrorReporter.NewRhinoErrorReporter#181",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/RhinoErrorReporter.java",
        "class_name": "com.google.javascript.jscomp.RhinoErrorReporter",
        "signature": "com.google.javascript.jscomp.RhinoErrorReporter.NewRhinoErrorReporter.NewRhinoErrorReporter(com.google.javascript.jscomp.AbstractCompiler)",
        "snippet": "    private NewRhinoErrorReporter(AbstractCompiler compiler) {\n      super(compiler);\n    }\n",
        "begin_line": 181,
        "end_line": 183,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0506
        },
        "num_failing_tests": 1
    },
    {
        "name": "RhinoErrorReporter.replacePlaceHolders#74",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/RhinoErrorReporter.java",
        "class_name": "com.google.javascript.jscomp.RhinoErrorReporter",
        "signature": "com.google.javascript.jscomp.RhinoErrorReporter.replacePlaceHolders(java.lang.String)",
        "snippet": "  private Pattern replacePlaceHolders(String s) {\n    s = Pattern.quote(s);\n    return Pattern.compile(s.replaceAll(\"\\\\{\\\\d+\\\\}\", \"\\\\\\\\E.*\\\\\\\\Q\"));\n  }\n",
        "begin_line": 74,
        "end_line": 77,
        "comment": "\n   * For each message such as \"Not a good use of {0}\", replace the place\n   * holder {0} with a wild card that matches all possible strings.\n   * Also put the any non-place-holder in quotes for regex matching later.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0506
        },
        "num_failing_tests": 1
    },
    {
        "name": "RhinoErrorReporter.RhinoErrorReporter#79",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/RhinoErrorReporter.java",
        "class_name": "com.google.javascript.jscomp.RhinoErrorReporter",
        "signature": "com.google.javascript.jscomp.RhinoErrorReporter.RhinoErrorReporter(com.google.javascript.jscomp.AbstractCompiler)",
        "snippet": "  private RhinoErrorReporter(AbstractCompiler compiler) {\n    this.compiler = compiler;\n    typeMap = ImmutableMap.<Pattern,DiagnosticType>builder()\n        // Trailing comma\n        .put(replacePlaceHolders(\n            com.google.javascript.rhino.head.ScriptRuntime.getMessage0(\n                \"msg.extra.trailing.comma\")),\n            TRAILING_COMMA)\n\n        // Duplicate parameter\n        .put(replacePlaceHolders(\n            com.google.javascript.rhino.head.ScriptRuntime.getMessage0(\n                \"msg.dup.parms\")),\n            DUPLICATE_PARAM)\n\n        // Unknown @annotations.\n        .put(replacePlaceHolders(ScriptRuntime.getMessage0(\"msg.bad.jsdoc.tag\")),\n            BAD_JSDOC_ANNOTATION)\n\n        .put(Pattern.compile(\"^Type annotations are not allowed here.*\"),\n            MISPLACED_TYPE_ANNOTATION)\n\n        // Type annotation errors.\n        .put(Pattern.compile(\"^Bad type annotation.*\"),\n            TYPE_PARSE_ERROR)\n\n        // Parse tree too deep.\n        .put(replacePlaceHolders(\n            com.google.javascript.rhino.head.ScriptRuntime.getMessage0(\n                \"msg.too.deep.parser.recursion\")),\n            PARSE_TREE_TOO_DEEP)\n        .build();\n  }\n",
        "begin_line": 79,
        "end_line": 111,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0506
        },
        "num_failing_tests": 1
    },
    {
        "name": "RhinoErrorReporter.forNewRhino#113",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/RhinoErrorReporter.java",
        "class_name": "com.google.javascript.jscomp.RhinoErrorReporter",
        "signature": "com.google.javascript.jscomp.RhinoErrorReporter.forNewRhino(com.google.javascript.jscomp.AbstractCompiler)",
        "snippet": "  public static com.google.javascript.rhino.head.ErrorReporter\n      forNewRhino(AbstractCompiler compiler) {\n    return new NewRhinoErrorReporter(compiler);\n  }\n",
        "begin_line": 113,
        "end_line": 116,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0506
        },
        "num_failing_tests": 1
    },
    {
        "name": "RhinoErrorReporter.forOldRhino#118",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/RhinoErrorReporter.java",
        "class_name": "com.google.javascript.jscomp.RhinoErrorReporter",
        "signature": "com.google.javascript.jscomp.RhinoErrorReporter.forOldRhino(com.google.javascript.jscomp.AbstractCompiler)",
        "snippet": "  public static ErrorReporter forOldRhino(AbstractCompiler compiler) {\n    return new OldRhinoErrorReporter(compiler);\n  }\n",
        "begin_line": 118,
        "end_line": 120,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0506
        },
        "num_failing_tests": 1
    },
    {
        "name": "ProcessTweaks.TweakFunction#123",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ProcessTweaks.java",
        "class_name": "com.google.javascript.jscomp.ProcessTweaks",
        "signature": "com.google.javascript.jscomp.ProcessTweaks.TweakFunction.TweakFunction(java.lang.String)",
        "snippet": "    TweakFunction(String name) {\n      this(name, null, Token.ERROR, Token.ERROR, null);\n    }\n",
        "begin_line": 123,
        "end_line": 125,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0506
        },
        "num_failing_tests": 1
    },
    {
        "name": "ProcessTweaks.TweakFunction#127",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ProcessTweaks.java",
        "class_name": "com.google.javascript.jscomp.ProcessTweaks",
        "signature": "com.google.javascript.jscomp.ProcessTweaks.TweakFunction.TweakFunction(java.lang.String, java.lang.String, int)",
        "snippet": "    TweakFunction(String name, String expectedTypeName,\n        int validNodeTypeA) {\n      this(name, expectedTypeName, validNodeTypeA, Token.ERROR, null);\n    }\n",
        "begin_line": 127,
        "end_line": 130,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0506
        },
        "num_failing_tests": 1
    },
    {
        "name": "ProcessTweaks.TweakFunction#132",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ProcessTweaks.java",
        "class_name": "com.google.javascript.jscomp.ProcessTweaks",
        "signature": "com.google.javascript.jscomp.ProcessTweaks.TweakFunction.TweakFunction(java.lang.String, java.lang.String, int, int)",
        "snippet": "    TweakFunction(String name, String expectedTypeName,\n        int validNodeTypeA, int validNodeTypeB) {\n      this(name, expectedTypeName, validNodeTypeA, validNodeTypeB, null);\n    }\n",
        "begin_line": 132,
        "end_line": 135,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0506
        },
        "num_failing_tests": 1
    },
    {
        "name": "ProcessTweaks.TweakFunction#137",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ProcessTweaks.java",
        "class_name": "com.google.javascript.jscomp.ProcessTweaks",
        "signature": "com.google.javascript.jscomp.ProcessTweaks.TweakFunction.TweakFunction(java.lang.String, com.google.javascript.jscomp.ProcessTweaks.TweakFunction)",
        "snippet": "    TweakFunction(String name, TweakFunction registerFunction) {\n      this(name, null, Token.ERROR, Token.ERROR, registerFunction);\n    }\n",
        "begin_line": 137,
        "end_line": 139,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0506
        },
        "num_failing_tests": 1
    },
    {
        "name": "ProcessTweaks.TweakFunction#141",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ProcessTweaks.java",
        "class_name": "com.google.javascript.jscomp.ProcessTweaks",
        "signature": "com.google.javascript.jscomp.ProcessTweaks.TweakFunction.TweakFunction(java.lang.String, java.lang.String, int, int, com.google.javascript.jscomp.ProcessTweaks.TweakFunction)",
        "snippet": "    TweakFunction(String name, String expectedTypeName,\n        int validNodeTypeA, int validNodeTypeB,\n        TweakFunction registerFunction) {\n      this.name = name;\n      this.expectedTypeName = expectedTypeName;\n      this.validNodeTypeA = validNodeTypeA;\n      this.validNodeTypeB = validNodeTypeB;\n      this.registerFunction = registerFunction;\n    }\n",
        "begin_line": 141,
        "end_line": 149,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0506
        },
        "num_failing_tests": 1
    },
    {
        "name": "ProcessTweaks.getName#164",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ProcessTweaks.java",
        "class_name": "com.google.javascript.jscomp.ProcessTweaks",
        "signature": "com.google.javascript.jscomp.ProcessTweaks.TweakFunction.getName()",
        "snippet": "    String getName() {\n      return name;\n    }\n",
        "begin_line": 164,
        "end_line": 166,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0506
        },
        "num_failing_tests": 1
    },
    {
        "name": "PassFactory.PassFactory#37",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/PassFactory.java",
        "class_name": "com.google.javascript.jscomp.PassFactory",
        "signature": "com.google.javascript.jscomp.PassFactory.PassFactory(java.lang.String, boolean)",
        "snippet": "  protected PassFactory(String name, boolean isOneTimePass) {\n    this.name = name;\n    this.isOneTimePass = isOneTimePass;\n  }\n",
        "begin_line": 37,
        "end_line": 40,
        "comment": "\n   * @param name The name of the pass that this factory creates.\n   * @param isOneTimePass If true, the pass produced by this factory can\n   *     only be run once.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0506
        },
        "num_failing_tests": 1
    },
    {
        "name": "DiagnosticType.disabled#75",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DiagnosticType.java",
        "class_name": "com.google.javascript.jscomp.DiagnosticType",
        "signature": "com.google.javascript.jscomp.DiagnosticType.disabled(java.lang.String, java.lang.String)",
        "snippet": "  public static DiagnosticType disabled(String name,\n      String descriptionFormat) {\n    return make(name, CheckLevel.OFF, descriptionFormat);\n  }\n",
        "begin_line": 75,
        "end_line": 78,
        "comment": "\n   * Create a DiagnosticType at level CheckLevel.OFF\n   *\n   * @param name An identifier\n   * @param descriptionFormat A format string\n   * @return A new DiagnosticType\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0506
        },
        "num_failing_tests": 1
    },
    {
        "name": "DiagnosticType.equals#113",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DiagnosticType.java",
        "class_name": "com.google.javascript.jscomp.DiagnosticType",
        "signature": "com.google.javascript.jscomp.DiagnosticType.equals(java.lang.Object)",
        "snippet": "  @Override\n  public boolean equals(Object type) {\n    return type instanceof DiagnosticType &&\n        ((DiagnosticType) type).key.equals(key);\n  }\n",
        "begin_line": 113,
        "end_line": 117,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0506
        },
        "num_failing_tests": 1
    },
    {
        "name": "DiagnosticType.hashCode#119",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DiagnosticType.java",
        "class_name": "com.google.javascript.jscomp.DiagnosticType",
        "signature": "com.google.javascript.jscomp.DiagnosticType.hashCode()",
        "snippet": "  @Override\n  public int hashCode() {\n    return key.hashCode();\n  }\n",
        "begin_line": 119,
        "end_line": 122,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0506
        },
        "num_failing_tests": 1
    },
    {
        "name": "DiagnosticGroups.DiagnosticGroups#33",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroups.java",
        "class_name": "com.google.javascript.jscomp.DiagnosticGroups",
        "signature": "com.google.javascript.jscomp.DiagnosticGroups.DiagnosticGroups()",
        "snippet": "  public DiagnosticGroups() {}\n",
        "begin_line": 33,
        "end_line": 33,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0506
        },
        "num_failing_tests": 1
    },
    {
        "name": "DiagnosticGroups.registerDeprecatedGroup#38",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroups.java",
        "class_name": "com.google.javascript.jscomp.DiagnosticGroups",
        "signature": "com.google.javascript.jscomp.DiagnosticGroups.registerDeprecatedGroup(java.lang.String)",
        "snippet": "  static DiagnosticGroup registerDeprecatedGroup(String name) {\n    return registerGroup(name, new DiagnosticGroup(name, UNUSED));\n  }\n",
        "begin_line": 38,
        "end_line": 40,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0506
        },
        "num_failing_tests": 1
    },
    {
        "name": "DiagnosticGroups.registerGroup#42",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroups.java",
        "class_name": "com.google.javascript.jscomp.DiagnosticGroups",
        "signature": "com.google.javascript.jscomp.DiagnosticGroups.registerGroup(java.lang.String, com.google.javascript.jscomp.DiagnosticGroup)",
        "snippet": "  static DiagnosticGroup registerGroup(String name,\n      DiagnosticGroup group) {\n    groupsByName.put(name, group);\n    return group;\n  }\n",
        "begin_line": 42,
        "end_line": 46,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0506
        },
        "num_failing_tests": 1
    },
    {
        "name": "DiagnosticGroups.registerGroup#48",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroups.java",
        "class_name": "com.google.javascript.jscomp.DiagnosticGroups",
        "signature": "com.google.javascript.jscomp.DiagnosticGroups.registerGroup(java.lang.String, com.google.javascript.jscomp.DiagnosticType...)",
        "snippet": "  static DiagnosticGroup registerGroup(String name,\n      DiagnosticType ... types) {\n    DiagnosticGroup group = new DiagnosticGroup(name, types);\n    groupsByName.put(name, group);\n    return group;\n  }\n",
        "begin_line": 48,
        "end_line": 53,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0506
        },
        "num_failing_tests": 1
    },
    {
        "name": "DiagnosticGroups.registerGroup#55",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroups.java",
        "class_name": "com.google.javascript.jscomp.DiagnosticGroups",
        "signature": "com.google.javascript.jscomp.DiagnosticGroups.registerGroup(java.lang.String, com.google.javascript.jscomp.DiagnosticGroup...)",
        "snippet": "  static DiagnosticGroup registerGroup(String name,\n      DiagnosticGroup ... groups) {\n    DiagnosticGroup group = new DiagnosticGroup(name, groups);\n    groupsByName.put(name, group);\n    return group;\n  }\n",
        "begin_line": 55,
        "end_line": 60,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0506
        },
        "num_failing_tests": 1
    },
    {
        "name": "DiagnosticGroupWarningsGuard.DiagnosticGroupWarningsGuard#32",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroupWarningsGuard.java",
        "class_name": "com.google.javascript.jscomp.DiagnosticGroupWarningsGuard",
        "signature": "com.google.javascript.jscomp.DiagnosticGroupWarningsGuard.DiagnosticGroupWarningsGuard(com.google.javascript.jscomp.DiagnosticGroup, com.google.javascript.jscomp.CheckLevel)",
        "snippet": "  public DiagnosticGroupWarningsGuard(\n      DiagnosticGroup group, CheckLevel level) {\n    this.group = group;\n    this.level = level;\n  }\n",
        "begin_line": 32,
        "end_line": 36,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0506
        },
        "num_failing_tests": 1
    },
    {
        "name": "DiagnosticGroup.DiagnosticGroup#45",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroup.java",
        "class_name": "com.google.javascript.jscomp.DiagnosticGroup",
        "signature": "com.google.javascript.jscomp.DiagnosticGroup.DiagnosticGroup(java.lang.String, com.google.javascript.jscomp.DiagnosticType...)",
        "snippet": "  DiagnosticGroup(String name, DiagnosticType ...types) {\n    this.name = name;\n    this.types = ImmutableSet.copyOf(Arrays.asList(types));\n  }\n",
        "begin_line": 45,
        "end_line": 48,
        "comment": "\n   * Create a group that matches all errors of the given types.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0506
        },
        "num_failing_tests": 1
    },
    {
        "name": "DiagnosticGroup.DiagnosticGroup#53",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroup.java",
        "class_name": "com.google.javascript.jscomp.DiagnosticGroup",
        "signature": "com.google.javascript.jscomp.DiagnosticGroup.DiagnosticGroup(com.google.javascript.jscomp.DiagnosticType...)",
        "snippet": "  public DiagnosticGroup(DiagnosticType ...types) {\n    this(null, types);\n  }\n",
        "begin_line": 53,
        "end_line": 55,
        "comment": "\n   * Create a group that matches all errors of the given types.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0506
        },
        "num_failing_tests": 1
    },
    {
        "name": "DiagnosticGroup.DiagnosticGroup#87",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroup.java",
        "class_name": "com.google.javascript.jscomp.DiagnosticGroup",
        "signature": "com.google.javascript.jscomp.DiagnosticGroup.DiagnosticGroup(java.lang.String, com.google.javascript.jscomp.DiagnosticGroup...)",
        "snippet": "  public DiagnosticGroup(String name, DiagnosticGroup ...groups) {\n    Set<DiagnosticType> set = Sets.newHashSet();\n\n    for (DiagnosticGroup group : groups) {\n      set.addAll(group.types);\n    }\n\n    this.name = name;\n    this.types = ImmutableSet.copyOf(set);\n  }\n",
        "begin_line": 87,
        "end_line": 96,
        "comment": "\n   * Create a composite group.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0506
        },
        "num_failing_tests": 1
    },
    {
        "name": "ComposeWarningsGuard.GuardComparator#57",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ComposeWarningsGuard.java",
        "class_name": "com.google.javascript.jscomp.ComposeWarningsGuard",
        "signature": "com.google.javascript.jscomp.ComposeWarningsGuard.GuardComparator.GuardComparator(java.util.Map<com.google.javascript.jscomp.WarningsGuard, java.lang.Integer>)",
        "snippet": "    private GuardComparator(Map<WarningsGuard, Integer> orderOfAddition) {\n      this.orderOfAddition = orderOfAddition;\n    }\n",
        "begin_line": 57,
        "end_line": 59,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0506
        },
        "num_failing_tests": 1
    },
    {
        "name": "ComposeWarningsGuard.ComposeWarningsGuard#79",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ComposeWarningsGuard.java",
        "class_name": "com.google.javascript.jscomp.ComposeWarningsGuard",
        "signature": "com.google.javascript.jscomp.ComposeWarningsGuard.ComposeWarningsGuard(java.util.List<com.google.javascript.jscomp.WarningsGuard>)",
        "snippet": "  public ComposeWarningsGuard(List<WarningsGuard> guards) {\n    addGuards(guards);\n  }\n",
        "begin_line": 79,
        "end_line": 81,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0506
        },
        "num_failing_tests": 1
    },
    {
        "name": "ComposeWarningsGuard.ComposeWarningsGuard#83",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ComposeWarningsGuard.java",
        "class_name": "com.google.javascript.jscomp.ComposeWarningsGuard",
        "signature": "com.google.javascript.jscomp.ComposeWarningsGuard.ComposeWarningsGuard(com.google.javascript.jscomp.WarningsGuard...)",
        "snippet": "  public ComposeWarningsGuard(WarningsGuard... guards) {\n    this(Lists.newArrayList(guards));\n  }\n",
        "begin_line": 83,
        "end_line": 85,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0506
        },
        "num_failing_tests": 1
    },
    {
        "name": "CompilerOptions.CompilerOptions#854",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "signature": "com.google.javascript.jscomp.CompilerOptions.CompilerOptions()",
        "snippet": "  public CompilerOptions() {\n    // Accepted language\n    languageIn = LanguageMode.ECMASCRIPT3;\n\n    // Language variation\n    acceptConstKeyword = false;\n\n    // Checks\n    skipAllPasses = false;\n    nameAnonymousFunctionsOnly = false;\n    devMode = DevMode.OFF;\n    checkDeterminism = false;\n    checkSymbols = false;\n    aggressiveVarCheck = CheckLevel.OFF;\n    checkSuspiciousCode = false;\n    checkControlStructures = false;\n    checkTypes = false;\n    tightenTypes = false;\n    reportMissingOverride = CheckLevel.OFF;\n    reportUnknownTypes = CheckLevel.OFF;\n    checkRequires = CheckLevel.OFF;\n    checkProvides = CheckLevel.OFF;\n    checkGlobalNamesLevel = CheckLevel.OFF;\n    brokenClosureRequiresLevel = CheckLevel.ERROR;\n    checkGlobalThisLevel = CheckLevel.OFF;\n    checkUnreachableCode = CheckLevel.OFF;\n    checkMissingReturn = CheckLevel.OFF;\n    checkMissingGetCssNameLevel = CheckLevel.OFF;\n    checkMissingGetCssNameBlacklist = null;\n    checkCaja = false;\n    computeFunctionSideEffects = false;\n    chainCalls = false;\n    extraAnnotationNames = null;\n\n    // Optimizations\n    foldConstants = false;\n    coalesceVariableNames = false;\n    deadAssignmentElimination = false;\n    inlineConstantVars = false;\n    inlineFunctions = false;\n    inlineLocalFunctions = false;\n    assumeStrictThis = false;\n    assumeClosuresOnlyCaptureReferences = false;\n    inlineProperties = false;\n    crossModuleCodeMotion = false;\n    crossModuleMethodMotion = false;\n    inlineGetters = false;\n    inlineVariables = false;\n    inlineLocalVariables = false;\n    smartNameRemoval = false;\n    removeDeadCode = false;\n    extractPrototypeMemberDeclarations = false;\n    removeUnusedPrototypeProperties = false;\n    removeUnusedPrototypePropertiesInExterns = false;\n    removeUnusedClassProperties = false;\n    removeUnusedVars = false;\n    removeUnusedLocalVars = false;\n    aliasExternals = false;\n    collapseVariableDeclarations = false;\n    groupVariableDeclarations = false;\n    collapseAnonymousFunctions = false;\n    aliasableStrings = Collections.emptySet();\n    aliasStringsBlacklist = \"\";\n    aliasAllStrings = false;\n    outputJsStringUsage = false;\n    convertToDottedProperties = false;\n    rewriteFunctionExpressions = false;\n    optimizeParameters = false;\n    optimizeReturns = false;\n\n    // Renaming\n    variableRenaming = VariableRenamingPolicy.OFF;\n    propertyRenaming = PropertyRenamingPolicy.OFF;\n    propertyAffinity = false;\n    labelRenaming = false;\n    generatePseudoNames = false;\n    shadowVariables = false;\n    renamePrefix = null;\n    aliasKeywords = false;\n    collapseProperties = false;\n    collapsePropertiesOnExternTypes = false;\n    collapseObjectLiterals = false;\n    devirtualizePrototypeMethods = false;\n    disambiguateProperties = false;\n    ambiguateProperties = false;\n    anonymousFunctionNaming = AnonymousFunctionNamingPolicy.OFF;\n    exportTestFunctions = false;\n\n    // Alterations\n    runtimeTypeCheck = false;\n    runtimeTypeCheckLogFunction = null;\n    ignoreCajaProperties = false;\n    syntheticBlockStartMarker = null;\n    syntheticBlockEndMarker = null;\n    locale = null;\n    markAsCompiled = false;\n    removeTryCatchFinally = false;\n    closurePass = false;\n    jqueryPass = false;\n    angularPass = false;\n    removeAbstractMethods = true;\n    removeClosureAsserts = false;\n    stripTypes = Collections.emptySet();\n    stripNameSuffixes = Collections.emptySet();\n    stripNamePrefixes = Collections.emptySet();\n    stripTypePrefixes = Collections.emptySet();\n    customPasses = null;\n    markNoSideEffectCalls = false;\n    defineReplacements = Maps.newHashMap();\n    tweakProcessing = TweakProcessing.OFF;\n    tweakReplacements = Maps.newHashMap();\n    moveFunctionDeclarations = false;\n    instrumentationTemplate = null;\n    appNameStr = \"\";\n    recordFunctionInformation = false;\n    generateExports = false;\n    cssRenamingMap = null;\n    cssRenamingWhitelist = null;\n    processObjectPropertyString = false;\n    idGenerators = Collections.emptySet();\n    replaceStringsFunctionDescriptions = Collections.emptyList();\n    replaceStringsPlaceholderToken = \"\";\n    replaceStringsReservedStrings = Collections.emptySet();\n    propertyInvalidationErrors = Maps.newHashMap();\n\n    // Output\n    printInputDelimiter = false;\n    prettyPrint = false;\n    lineBreak = false;\n    preferLineBreakAtEndOfFile = false;\n    reportPath = null;\n    tracer = TracerMode.OFF;\n    colorizeErrorOutput = false;\n    errorFormat = ErrorFormat.SINGLELINE;\n    debugFunctionSideEffectsPath = null;\n    externExports = false;\n    nameReferenceReportPath = null;\n    nameReferenceGraphPath = null;\n\n    // Debugging\n    aliasHandler = NULL_ALIAS_TRANSFORMATION_HANDLER;\n    errorHandler = null;\n  }\n",
        "begin_line": 854,
        "end_line": 996,
        "comment": "\n   * Initializes compiler options. All options are disabled by default.\n   *\n   * Command-line frontends to the compiler should set these properties\n   * like a builder.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0506
        },
        "num_failing_tests": 1
    },
    {
        "name": "CompilerOptions.setWarningLevel#1140",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "signature": "com.google.javascript.jscomp.CompilerOptions.setWarningLevel(com.google.javascript.jscomp.DiagnosticGroup, com.google.javascript.jscomp.CheckLevel)",
        "snippet": "  public void setWarningLevel(DiagnosticGroup type, CheckLevel level) {\n    addWarningsGuard(new DiagnosticGroupWarningsGuard(type, level));\n  }\n",
        "begin_line": 1140,
        "end_line": 1142,
        "comment": "\n   * Configure the given type of warning to the given level.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0506
        },
        "num_failing_tests": 1
    },
    {
        "name": "CompilerOptions.addWarningsGuard#1166",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "signature": "com.google.javascript.jscomp.CompilerOptions.addWarningsGuard(com.google.javascript.jscomp.WarningsGuard)",
        "snippet": "  public void addWarningsGuard(WarningsGuard guard) {\n    warningsGuard.addGuard(guard);\n  }\n",
        "begin_line": 1166,
        "end_line": 1168,
        "comment": "\n   * Add a guard to the set of warnings guards.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0506
        },
        "num_failing_tests": 1
    },
    {
        "name": "Compiler.Compiler#243",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.Compiler(java.io.PrintStream)",
        "snippet": "  public Compiler(PrintStream stream) {\n    addChangeHandler(recentChange);\n    outStream = stream;\n  }\n",
        "begin_line": 243,
        "end_line": 246,
        "comment": "\n   * Creates a Compiler that reports errors and warnings to an output stream.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0506
        },
        "num_failing_tests": 1
    },
    {
        "name": "Compiler.addChangeHandler#1981",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.addChangeHandler(com.google.javascript.jscomp.CodeChangeHandler)",
        "snippet": "  @Override\n  void addChangeHandler(CodeChangeHandler handler) {\n    codeChangeHandlers.add(handler);\n  }\n",
        "begin_line": 1981,
        "end_line": 1984,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0506
        },
        "num_failing_tests": 1
    },
    {
        "name": "Compiler.getDiagnosticGroups#2077",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.getDiagnosticGroups()",
        "snippet": "  protected DiagnosticGroups getDiagnosticGroups() {\n    return new DiagnosticGroups();\n  }\n",
        "begin_line": 2077,
        "end_line": 2079,
        "comment": "\n   * The warning classes that are available from the command-line, and\n   * are suppressible by the {@code @suppress} annotation.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0506
        },
        "num_failing_tests": 1
    },
    {
        "name": "CodingConventions.Proxy#59",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodingConventions.java",
        "class_name": "com.google.javascript.jscomp.CodingConventions",
        "signature": "com.google.javascript.jscomp.CodingConventions.Proxy.Proxy(com.google.javascript.jscomp.CodingConvention)",
        "snippet": "    protected Proxy(CodingConvention convention) {\n      this.nextConvention = convention;\n    }\n",
        "begin_line": 59,
        "end_line": 61,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0506
        },
        "num_failing_tests": 1
    },
    {
        "name": "CodingConventions.getIndirectlyDeclaredProperties#465",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodingConventions.java",
        "class_name": "com.google.javascript.jscomp.CodingConventions",
        "signature": "com.google.javascript.jscomp.CodingConventions.DefaultCodingConvention.getIndirectlyDeclaredProperties()",
        "snippet": "    @Override\n    public Collection<String> getIndirectlyDeclaredProperties() {\n      return ImmutableList.of();\n    }\n",
        "begin_line": 465,
        "end_line": 468,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0506
        },
        "num_failing_tests": 1
    },
    {
        "name": "ClosureCodingConvention.ClosureCodingConvention#49",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ClosureCodingConvention.java",
        "class_name": "com.google.javascript.jscomp.ClosureCodingConvention",
        "signature": "com.google.javascript.jscomp.ClosureCodingConvention.ClosureCodingConvention()",
        "snippet": "  public ClosureCodingConvention() {\n    this(CodingConventions.getDefault());\n  }\n",
        "begin_line": 49,
        "end_line": 51,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0506
        },
        "num_failing_tests": 1
    },
    {
        "name": "ClosureCodingConvention.ClosureCodingConvention#53",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ClosureCodingConvention.java",
        "class_name": "com.google.javascript.jscomp.ClosureCodingConvention",
        "signature": "com.google.javascript.jscomp.ClosureCodingConvention.ClosureCodingConvention(com.google.javascript.jscomp.CodingConvention)",
        "snippet": "  public ClosureCodingConvention(CodingConvention wrapped) {\n    super(wrapped);\n\n    Set<String> props = Sets.newHashSet(\n        \"superClass_\",\n        \"instance_\",\n        \"getInstance\");\n    props.addAll(wrapped.getIndirectlyDeclaredProperties());\n    indirectlyDeclaredProperties = ImmutableSet.copyOf(props);\n  }\n",
        "begin_line": 53,
        "end_line": 62,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0506
        },
        "num_failing_tests": 1
    },
    {
        "name": "AnonymousFunctionNamingPolicy.AnonymousFunctionNamingPolicy#47",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AnonymousFunctionNamingPolicy.java",
        "class_name": "com.google.javascript.jscomp.AnonymousFunctionNamingPolicy",
        "signature": "com.google.javascript.jscomp.AnonymousFunctionNamingPolicy.AnonymousFunctionNamingPolicy(char[])",
        "snippet": "  AnonymousFunctionNamingPolicy(char[] reservedCharacters) {\n    this.reservedCharacters = reservedCharacters;\n  }\n",
        "begin_line": 47,
        "end_line": 49,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0506
        },
        "num_failing_tests": 1
    },
    {
        "name": "DiagnosticType.error#53",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DiagnosticType.java",
        "class_name": "com.google.javascript.jscomp.DiagnosticType",
        "signature": "com.google.javascript.jscomp.DiagnosticType.error(java.lang.String, java.lang.String)",
        "snippet": "  public static DiagnosticType error(String name, String descriptionFormat) {\n    return make(name, CheckLevel.ERROR, descriptionFormat);\n  }\n",
        "begin_line": 53,
        "end_line": 55,
        "comment": "\n   * Create a DiagnosticType at level CheckLevel.ERROR\n   *\n   * @param name An identifier\n   * @param descriptionFormat A format string\n   * @return A new DiagnosticType\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0505
        },
        "num_failing_tests": 1
    },
    {
        "name": "DiagnosticType.warning#64",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DiagnosticType.java",
        "class_name": "com.google.javascript.jscomp.DiagnosticType",
        "signature": "com.google.javascript.jscomp.DiagnosticType.warning(java.lang.String, java.lang.String)",
        "snippet": "  public static DiagnosticType warning(String name, String descriptionFormat) {\n    return make(name, CheckLevel.WARNING, descriptionFormat);\n  }\n",
        "begin_line": 64,
        "end_line": 66,
        "comment": "\n   * Create a DiagnosticType at level CheckLevel.WARNING\n   *\n   * @param name An identifier\n   * @param descriptionFormat A format string\n   * @return A new DiagnosticType\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0505
        },
        "num_failing_tests": 1
    },
    {
        "name": "CodingConventions.getDefault#41",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodingConventions.java",
        "class_name": "com.google.javascript.jscomp.CodingConventions",
        "signature": "com.google.javascript.jscomp.CodingConventions.getDefault()",
        "snippet": "  public static CodingConvention getDefault() {\n    return new DefaultCodingConvention();\n  }\n",
        "begin_line": 41,
        "end_line": 43,
        "comment": " Gets the default coding convention. ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0505
        },
        "num_failing_tests": 1
    },
    {
        "name": "DiagnosticType.make#88",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DiagnosticType.java",
        "class_name": "com.google.javascript.jscomp.DiagnosticType",
        "signature": "com.google.javascript.jscomp.DiagnosticType.make(java.lang.String, com.google.javascript.jscomp.CheckLevel, java.lang.String)",
        "snippet": "  public static DiagnosticType make(String name, CheckLevel level,\n                                    String descriptionFormat) {\n    return\n        new DiagnosticType(name, level, new MessageFormat(descriptionFormat));\n  }\n",
        "begin_line": 88,
        "end_line": 92,
        "comment": "\n   * Create a DiagnosticType at a given CheckLevel.\n   *\n   * @param name An identifier\n   * @param level Either CheckLevel.ERROR or CheckLevel.WARNING\n   * @param descriptionFormat A format string\n   * @return A new DiagnosticType\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0504
        },
        "num_failing_tests": 1
    },
    {
        "name": "DiagnosticType.DiagnosticType#97",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DiagnosticType.java",
        "class_name": "com.google.javascript.jscomp.DiagnosticType",
        "signature": "com.google.javascript.jscomp.DiagnosticType.DiagnosticType(java.lang.String, com.google.javascript.jscomp.CheckLevel, java.text.MessageFormat)",
        "snippet": "  private DiagnosticType(String key, CheckLevel level, MessageFormat format) {\n    this.key = key;\n    this.defaultLevel = level;\n    this.format = format;\n\n    this.level = this.defaultLevel;\n  }\n",
        "begin_line": 97,
        "end_line": 103,
        "comment": "\n   * Create a DiagnosticType. Private to force use of static factory methods.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0504
        },
        "num_failing_tests": 1
    },
    {
        "name": "SourceFile.Preloaded#421",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/SourceFile.java",
        "class_name": "com.google.javascript.jscomp.SourceFile",
        "signature": "com.google.javascript.jscomp.SourceFile.Preloaded.Preloaded(java.lang.String, java.lang.String, java.lang.String)",
        "snippet": "    Preloaded(String fileName, String originalPath, String code) {\n      super(fileName);\n      super.setOriginalPath(originalPath);\n      super.setCode(code);\n    }\n",
        "begin_line": 421,
        "end_line": 425,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0504
        },
        "num_failing_tests": 1
    },
    {
        "name": "SourceFile.Builder#368",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/SourceFile.java",
        "class_name": "com.google.javascript.jscomp.SourceFile",
        "signature": "com.google.javascript.jscomp.SourceFile.Builder.Builder()",
        "snippet": "    public Builder() {}\n",
        "begin_line": 368,
        "end_line": 368,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0504
        },
        "num_failing_tests": 1
    },
    {
        "name": "SourceFile.buildFromCode#390",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/SourceFile.java",
        "class_name": "com.google.javascript.jscomp.SourceFile",
        "signature": "com.google.javascript.jscomp.SourceFile.Builder.buildFromCode(java.lang.String, java.lang.String)",
        "snippet": "    public SourceFile buildFromCode(String fileName, String code) {\n      return new Preloaded(fileName, originalPath, code);\n    }\n",
        "begin_line": 390,
        "end_line": 392,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0504
        },
        "num_failing_tests": 1
    },
    {
        "name": "SourceFile.SourceFile#81",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/SourceFile.java",
        "class_name": "com.google.javascript.jscomp.SourceFile",
        "signature": "com.google.javascript.jscomp.SourceFile.SourceFile(java.lang.String)",
        "snippet": "  public SourceFile(String fileName) {\n    if (fileName == null || fileName.isEmpty()) {\n      throw new IllegalArgumentException(\"a source must have a name\");\n    }\n    this.fileName = fileName;\n  }\n",
        "begin_line": 81,
        "end_line": 86,
        "comment": "\n   * Construct a new abstract source file.\n   *\n   * @param fileName The file name of the source file. It does not necessarily\n   *     need to correspond to a real path. But it should be unique. Will\n   *     appear in warning messages emitted by the compiler.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0504
        },
        "num_failing_tests": 1
    },
    {
        "name": "SourceFile.setCode#147",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/SourceFile.java",
        "class_name": "com.google.javascript.jscomp.SourceFile",
        "signature": "com.google.javascript.jscomp.SourceFile.setCode(java.lang.String)",
        "snippet": "  private void setCode(String sourceCode) {\n    code = sourceCode;\n  }\n",
        "begin_line": 147,
        "end_line": 149,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0504
        },
        "num_failing_tests": 1
    },
    {
        "name": "SourceFile.setOriginalPath#155",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/SourceFile.java",
        "class_name": "com.google.javascript.jscomp.SourceFile",
        "signature": "com.google.javascript.jscomp.SourceFile.setOriginalPath(java.lang.String)",
        "snippet": "  public void setOriginalPath(String originalPath) {\n    this.originalPath = originalPath;\n  }\n",
        "begin_line": 155,
        "end_line": 157,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0504
        },
        "num_failing_tests": 1
    },
    {
        "name": "SourceFile.fromCode#322",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/SourceFile.java",
        "class_name": "com.google.javascript.jscomp.SourceFile",
        "signature": "com.google.javascript.jscomp.SourceFile.fromCode(java.lang.String, java.lang.String)",
        "snippet": "  public static SourceFile fromCode(String fileName, String code) {\n    return builder().buildFromCode(fileName, code);\n  }\n",
        "begin_line": 322,
        "end_line": 324,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0504
        },
        "num_failing_tests": 1
    },
    {
        "name": "SourceFile.builder#354",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/SourceFile.java",
        "class_name": "com.google.javascript.jscomp.SourceFile",
        "signature": "com.google.javascript.jscomp.SourceFile.builder()",
        "snippet": "  public static Builder builder() {\n    return new Builder();\n  }\n",
        "begin_line": 354,
        "end_line": 356,
        "comment": " Create a new builder for source files. ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0504
        },
        "num_failing_tests": 1
    }
]