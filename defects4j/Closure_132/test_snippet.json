[
    {
        "class_name": "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java",
        "signature": "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest.PeepholeSubstituteAlternateSyntaxTest(boolean)",
        "snippet": "  private PeepholeSubstituteAlternateSyntaxTest(boolean compareAsTree) {\n    super(FOLD_CONSTANTS_TEST_EXTERNS, compareAsTree);\n  }\n",
        "begin_line": 37,
        "end_line": 39,
        "comment": " TODO(user): Remove this when we no longer need to do string comparison.",
        "child_ranges": [
            "(line 38,col 5)-(line 38,col 54)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java",
        "signature": "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest.PeepholeSubstituteAlternateSyntaxTest()",
        "snippet": "  public PeepholeSubstituteAlternateSyntaxTest() {\n    super(FOLD_CONSTANTS_TEST_EXTERNS);\n  }\n",
        "begin_line": 41,
        "end_line": 43,
        "comment": "",
        "child_ranges": [
            "(line 42,col 5)-(line 42,col 39)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java",
        "signature": "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest.setUp()",
        "snippet": "  @Override\n  public void setUp() throws Exception {\n    late = true;\n    super.setUp();\n    enableLineNumberCheck(true);\n    disableNormalize();\n  }\n",
        "begin_line": 45,
        "end_line": 51,
        "comment": "",
        "child_ranges": [
            "(line 47,col 5)-(line 47,col 16)",
            "(line 48,col 5)-(line 48,col 18)",
            "(line 49,col 5)-(line 49,col 32)",
            "(line 50,col 5)-(line 50,col 23)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java",
        "signature": "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest.getProcessor(com.google.javascript.jscomp.Compiler)",
        "snippet": "  @Override\n  public CompilerPass getProcessor(final Compiler compiler) {\n    CompilerPass peepholePass =\n      new PeepholeOptimizationsPass(compiler,\n          new PeepholeSubstituteAlternateSyntax(late))\n      .setRetraverseOnChange(false);\n\n    return peepholePass;\n  }\n",
        "begin_line": 53,
        "end_line": 61,
        "comment": "",
        "child_ranges": [
            "(line 55,col 5)-(line 58,col 36)",
            "(line 60,col 5)-(line 60,col 24)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java",
        "signature": "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest.getNumRepetitions()",
        "snippet": "  @Override\n  protected int getNumRepetitions() {\n    return 1;\n  }\n",
        "begin_line": 63,
        "end_line": 66,
        "comment": "",
        "child_ranges": [
            "(line 65,col 5)-(line 65,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java",
        "signature": "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest.foldSame(java.lang.String)",
        "snippet": "  private void foldSame(String js) {\n    testSame(js);\n  }\n",
        "begin_line": 68,
        "end_line": 70,
        "comment": "",
        "child_ranges": [
            "(line 69,col 5)-(line 69,col 17)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java",
        "signature": "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest.fold(java.lang.String, java.lang.String)",
        "snippet": "  private void fold(String js, String expected) {\n    test(js, expected);\n  }\n",
        "begin_line": 72,
        "end_line": 74,
        "comment": "",
        "child_ranges": [
            "(line 73,col 5)-(line 73,col 23)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java",
        "signature": "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest.assertResultString(java.lang.String, java.lang.String)",
        "snippet": "  void assertResultString(String js, String expected) {\n    assertResultString(js, expected, false);\n  }\n",
        "begin_line": 76,
        "end_line": 78,
        "comment": "",
        "child_ranges": [
            "(line 77,col 5)-(line 77,col 44)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java",
        "signature": "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest.assertResultString(java.lang.String, java.lang.String, boolean)",
        "snippet": "  void assertResultString(String js, String expected, boolean normalize) {\n    PeepholeSubstituteAlternateSyntaxTest scTest\n        = new PeepholeSubstituteAlternateSyntaxTest(false);\n\n    if (normalize) {\n      scTest.enableNormalize();\n    } else {\n      scTest.disableNormalize();\n    }\n\n    scTest.test(js, expected);\n  }\n",
        "begin_line": 82,
        "end_line": 93,
        "comment": " test that needs tell us where a folding is constructing an invalid AST.",
        "child_ranges": [
            "(line 83,col 5)-(line 84,col 59)",
            "(line 86,col 5)-(line 90,col 5)",
            "(line 92,col 5)-(line 92,col 30)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java",
        "signature": "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest.testFoldOneChildBlocks()",
        "snippet": "  public void testFoldOneChildBlocks() {\n    late = false;\n    fold(\"function f(){if(x)a();x=3}\",\n        \"function f(){x&&a();x=3}\");\n    fold(\"function f(){if(x){a()}x=3}\",\n        \"function f(){x&&a();x=3}\");\n    fold(\"function f(){if(x){return 3}}\",\n        \"function f(){if(x)return 3}\");\n    fold(\"function f(){if(x){a()}}\",\n        \"function f(){x&&a()}\");\n    fold(\"function f(){if(x){throw 1}}\", \"function f(){if(x)throw 1;}\");\n\n    // Try it out with functions\n    fold(\"function f(){if(x){foo()}}\", \"function f(){x&&foo()}\");\n    fold(\"function f(){if(x){foo()}else{bar()}}\",\n         \"function f(){x?foo():bar()}\");\n\n    // Try it out with properties and methods\n    fold(\"function f(){if(x){a.b=1}}\", \"function f(){if(x)a.b=1}\");\n    fold(\"function f(){if(x){a.b*=1}}\", \"function f(){x&&(a.b*=1)}\");\n    fold(\"function f(){if(x){a.b+=1}}\", \"function f(){x&&(a.b+=1)}\");\n    fold(\"function f(){if(x){++a.b}}\", \"function f(){x&&++a.b}\");\n    fold(\"function f(){if(x){a.foo()}}\", \"function f(){x&&a.foo()}\");\n\n    // Try it out with throw/catch/finally [which should not change]\n    fold(\"function f(){try{foo()}catch(e){bar(e)}finally{baz()}}\",\n         \"function f(){try{foo()}catch(e){bar(e)}finally{baz()}}\");\n\n    // Try it out with switch statements\n    fold(\"function f(){switch(x){case 1:break}}\",\n         \"function f(){switch(x){case 1:break}}\");\n\n    // Do while loops stay in a block if that's where they started\n    fold(\"function f(){if(e1){do foo();while(e2)}else foo2()}\",\n         \"function f(){if(e1){do foo();while(e2)}else foo2()}\");\n    // Test an obscure case with do and while\n    fold(\"if(x){do{foo()}while(y)}else bar()\",\n         \"if(x){do foo();while(y)}else bar()\");\n\n    // Play with nested IFs\n    fold(\"function f(){if(x){if(y)foo()}}\",\n         \"function f(){x&&y&&foo()}\");\n    fold(\"function f(){if(x){if(y)foo();else bar()}}\",\n         \"function f(){x&&(y?foo():bar())}\");\n    fold(\"function f(){if(x){if(y)foo()}else bar()}\",\n         \"function f(){x?y&&foo():bar()}\");\n    fold(\"function f(){if(x){if(y)foo();else bar()}else{baz()}}\",\n         \"function f(){x?y?foo():bar():baz()}\");\n\n    fold(\"if(e1){while(e2){if(e3){foo()}}}else{bar()}\",\n         \"if(e1)while(e2)e3&&foo();else bar()\");\n\n    fold(\"if(e1){with(e2){if(e3){foo()}}}else{bar()}\",\n         \"if(e1)with(e2)e3&&foo();else bar()\");\n\n    fold(\"if(a||b){if(c||d){var x;}}\", \"if(a||b)if(c||d)var x\");\n    fold(\"if(x){ if(y){var x;}else{var z;} }\",\n         \"if(x)if(y)var x;else var z\");\n\n    // NOTE - technically we can remove the blocks since both the parent\n    // and child have elses. But we don't since it causes ambiguities in\n    // some cases where not all descendent ifs having elses\n    fold(\"if(x){ if(y){var x;}else{var z;} }else{var w}\",\n         \"if(x)if(y)var x;else var z;else var w\");\n    fold(\"if (x) {var x;}else { if (y) { var y;} }\",\n         \"if(x)var x;else if(y)var y\");\n\n    // Here's some of the ambiguous cases\n    fold(\"if(a){if(b){f1();f2();}else if(c){f3();}}else {if(d){f4();}}\",\n         \"if(a)if(b){f1();f2()}else c&&f3();else d&&f4()\");\n\n    fold(\"function f(){foo()}\", \"function f(){foo()}\");\n    fold(\"switch(x){case y: foo()}\", \"switch(x){case y:foo()}\");\n    fold(\"try{foo()}catch(ex){bar()}finally{baz()}\",\n         \"try{foo()}catch(ex){bar()}finally{baz()}\");\n  }\n",
        "begin_line": 96,
        "end_line": 171,
        "comment": " Check that removing blocks with 1 child works ",
        "child_ranges": [
            "(line 97,col 5)-(line 97,col 17)",
            "(line 98,col 5)-(line 99,col 36)",
            "(line 100,col 5)-(line 101,col 36)",
            "(line 102,col 5)-(line 103,col 39)",
            "(line 104,col 5)-(line 105,col 32)",
            "(line 106,col 5)-(line 106,col 72)",
            "(line 109,col 5)-(line 109,col 65)",
            "(line 110,col 5)-(line 111,col 40)",
            "(line 114,col 5)-(line 114,col 67)",
            "(line 115,col 5)-(line 115,col 69)",
            "(line 116,col 5)-(line 116,col 69)",
            "(line 117,col 5)-(line 117,col 65)",
            "(line 118,col 5)-(line 118,col 69)",
            "(line 121,col 5)-(line 122,col 67)",
            "(line 125,col 5)-(line 126,col 50)",
            "(line 129,col 5)-(line 130,col 64)",
            "(line 132,col 5)-(line 133,col 47)",
            "(line 136,col 5)-(line 137,col 38)",
            "(line 138,col 5)-(line 139,col 45)",
            "(line 140,col 5)-(line 141,col 43)",
            "(line 142,col 5)-(line 143,col 48)",
            "(line 145,col 5)-(line 146,col 48)",
            "(line 148,col 5)-(line 149,col 47)",
            "(line 151,col 5)-(line 151,col 64)",
            "(line 152,col 5)-(line 153,col 39)",
            "(line 158,col 5)-(line 159,col 50)",
            "(line 160,col 5)-(line 161,col 39)",
            "(line 164,col 5)-(line 165,col 59)",
            "(line 167,col 5)-(line 167,col 55)",
            "(line 168,col 5)-(line 168,col 64)",
            "(line 169,col 5)-(line 170,col 53)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java",
        "signature": "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest.testFoldReturns()",
        "snippet": "  public void testFoldReturns() {\n    fold(\"function f(){if(x)return 1;else return 2}\",\n         \"function f(){return x?1:2}\");\n    fold(\"function f(){if(x)return 1;return 2}\",\n         \"function f(){return x?1:2}\");\n    fold(\"function f(){if(x)return;return 2}\",\n         \"function f(){return x?void 0:2}\");\n    fold(\"function f(){if(x)return 1+x;else return 2-x}\",\n         \"function f(){return x?1+x:2-x}\");\n    fold(\"function f(){if(x)return 1+x;return 2-x}\",\n         \"function f(){return x?1+x:2-x}\");\n    fold(\"function f(){if(x)return y += 1;else return y += 2}\",\n         \"function f(){return x?(y+=1):(y+=2)}\");\n\n    fold(\"function f(){if(x)return;else return 2-x}\",\n         \"function f(){if(x);else return 2-x}\");\n    fold(\"function f(){if(x)return;return 2-x}\",\n         \"function f(){return x?void 0:2-x}\");\n    fold(\"function f(){if(x)return x;else return}\",\n         \"function f(){if(x)return x;{}}\");\n    fold(\"function f(){if(x)return x;return}\",\n         \"function f(){if(x)return x}\");\n\n    foldSame(\"function f(){for(var x in y) { return x.y; } return k}\");\n  }\n",
        "begin_line": 174,
        "end_line": 198,
        "comment": " Try to minimize returns ",
        "child_ranges": [
            "(line 175,col 5)-(line 176,col 39)",
            "(line 177,col 5)-(line 178,col 39)",
            "(line 179,col 5)-(line 180,col 44)",
            "(line 181,col 5)-(line 182,col 43)",
            "(line 183,col 5)-(line 184,col 43)",
            "(line 185,col 5)-(line 186,col 49)",
            "(line 188,col 5)-(line 189,col 48)",
            "(line 190,col 5)-(line 191,col 46)",
            "(line 192,col 5)-(line 193,col 43)",
            "(line 194,col 5)-(line 195,col 40)",
            "(line 197,col 5)-(line 197,col 71)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java",
        "signature": "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest.testCombineIfs1()",
        "snippet": "  public void testCombineIfs1() {\n    fold(\"function f() {if (x) return 1; if (y) return 1}\",\n         \"function f() {if (x||y) return 1;}\");\n    fold(\"function f() {if (x) return 1; if (y) foo(); else return 1}\",\n         \"function f() {if ((!x)&&y) foo(); else return 1;}\");\n  }\n",
        "begin_line": 200,
        "end_line": 205,
        "comment": "",
        "child_ranges": [
            "(line 201,col 5)-(line 202,col 47)",
            "(line 203,col 5)-(line 204,col 62)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java",
        "signature": "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest.testCombineIfs2()",
        "snippet": "  public void testCombineIfs2() {\n    // combinable but not yet done\n    foldSame(\"function f() {if (x) throw 1; if (y) throw 1}\");\n    // Can't combine, side-effect\n    fold(\"function f(){ if (x) g(); if (y) g() }\",\n         \"function f(){ x&&g(); y&&g() }\");\n    // Can't combine, side-effect\n    fold(\"function f(){ if (x) y = 0; if (y) y = 0; }\",\n         \"function f(){ x&&(y = 0); y&&(y = 0); }\");\n  }\n",
        "begin_line": 207,
        "end_line": 216,
        "comment": "",
        "child_ranges": [
            "(line 209,col 5)-(line 209,col 62)",
            "(line 211,col 5)-(line 212,col 43)",
            "(line 214,col 5)-(line 215,col 52)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java",
        "signature": "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest.testCombineIfs3()",
        "snippet": "  public void testCombineIfs3() {\n    foldSame(\"function f() {if (x) return 1; if (y) {g();f()}}\");\n  }\n",
        "begin_line": 218,
        "end_line": 220,
        "comment": "",
        "child_ranges": [
            "(line 219,col 5)-(line 219,col 65)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java",
        "signature": "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest.testFoldAssignments()",
        "snippet": "  public void testFoldAssignments() {\n    fold(\"function f(){if(x)y=3;else y=4;}\", \"function f(){y=x?3:4}\");\n    fold(\"function f(){if(x)y=1+a;else y=2+a;}\", \"function f(){y=x?1+a:2+a}\");\n\n    // and operation assignments\n    fold(\"function f(){if(x)y+=1;else y+=2;}\", \"function f(){y+=x?1:2}\");\n    fold(\"function f(){if(x)y-=1;else y-=2;}\", \"function f(){y-=x?1:2}\");\n    fold(\"function f(){if(x)y%=1;else y%=2;}\", \"function f(){y%=x?1:2}\");\n    fold(\"function f(){if(x)y|=1;else y|=2;}\", \"function f(){y|=x?1:2}\");\n\n    // sanity check, don't fold if the 2 ops don't match\n    foldSame(\"function f(){x ? y-=1 : y+=2}\");\n\n    // sanity check, don't fold if the 2 LHS don't match\n    foldSame(\"function f(){x ? y-=1 : z-=1}\");\n\n    // sanity check, don't fold if there are potential effects\n    foldSame(\"function f(){x ? y().a=3 : y().a=4}\");\n  }\n",
        "begin_line": 224,
        "end_line": 242,
        "comment": " Try to minimize assignments ",
        "child_ranges": [
            "(line 225,col 5)-(line 225,col 70)",
            "(line 226,col 5)-(line 226,col 78)",
            "(line 229,col 5)-(line 229,col 73)",
            "(line 230,col 5)-(line 230,col 73)",
            "(line 231,col 5)-(line 231,col 73)",
            "(line 232,col 5)-(line 232,col 73)",
            "(line 235,col 5)-(line 235,col 46)",
            "(line 238,col 5)-(line 238,col 46)",
            "(line 241,col 5)-(line 241,col 52)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java",
        "signature": "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest.testRemoveDuplicateStatements()",
        "snippet": "  public void testRemoveDuplicateStatements() {\n    fold(\"if (a) { x = 1; x++ } else { x = 2; x++ }\",\n         \"x=(a) ? 1 : 2; x++\");\n    fold(\"if (a) { x = 1; x++; y += 1; z = pi; }\" +\n         \" else  { x = 2; x++; y += 1; z = pi; }\",\n         \"x=(a) ? 1 : 2; x++; y += 1; z = pi;\");\n    fold(\"function z() {\" +\n         \"if (a) { foo(); return !0 } else { goo(); return !0 }\" +\n         \"}\",\n         \"function z() {(a) ? foo() : goo(); return !0}\");\n    fold(\"function z() {if (a) { foo(); x = true; return true \" +\n         \"} else { goo(); x = true; return true }}\",\n         \"function z() {(a) ? foo() : goo(); x = !0; return !0}\");\n\n    fold(\"function z() {\" +\n         \"  if (a) { bar(); foo(); return true }\" +\n         \"    else { bar(); goo(); return true }\" +\n         \"}\",\n         \"function z() {\" +\n         \"  if (a) { bar(); foo(); }\" +\n         \"    else { bar(); goo(); }\" +\n         \"  return !0;\" +\n         \"}\");\n  }\n",
        "begin_line": 244,
        "end_line": 267,
        "comment": "",
        "child_ranges": [
            "(line 245,col 5)-(line 246,col 31)",
            "(line 247,col 5)-(line 249,col 48)",
            "(line 250,col 5)-(line 253,col 58)",
            "(line 254,col 5)-(line 256,col 66)",
            "(line 258,col 5)-(line 266,col 14)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java",
        "signature": "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest.testNotCond()",
        "snippet": "  public void testNotCond() {\n    fold(\"function f(){if(!x)foo()}\", \"function f(){x||foo()}\");\n    fold(\"function f(){if(!x)b=1}\", \"function f(){x||(b=1)}\");\n    fold(\"if(!x)z=1;else if(y)z=2\", \"if(x){y&&(z=2);}else{z=1;}\");\n    fold(\"if(x)y&&(z=2);else z=1;\", \"x ? y&&(z=2) : z=1\");\n    foldSame(\"function f(){if(!(x=1))a.b=1}\");\n  }\n",
        "begin_line": 269,
        "end_line": 275,
        "comment": "",
        "child_ranges": [
            "(line 270,col 5)-(line 270,col 64)",
            "(line 271,col 5)-(line 271,col 62)",
            "(line 272,col 5)-(line 272,col 66)",
            "(line 273,col 5)-(line 273,col 58)",
            "(line 274,col 5)-(line 274,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java",
        "signature": "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest.testAndParenthesesCount()",
        "snippet": "  public void testAndParenthesesCount() {\n    fold(\"function f(){if(x||y)a.foo()}\", \"function f(){(x||y)&&a.foo()}\");\n    fold(\"function f(){if(x.a)x.a=0}\",\n         \"function f(){x.a&&(x.a=0)}\");\n    foldSame(\"function f(){if(x()||y()){x()||y()}}\");\n  }\n",
        "begin_line": 277,
        "end_line": 282,
        "comment": "",
        "child_ranges": [
            "(line 278,col 5)-(line 278,col 75)",
            "(line 279,col 5)-(line 280,col 39)",
            "(line 281,col 5)-(line 281,col 53)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java",
        "signature": "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest.testFoldLogicalOpStringCompare()",
        "snippet": "  public void testFoldLogicalOpStringCompare() {\n    // side-effects\n    // There is two way to parse two &&'s and both are correct.\n    assertResultString(\"if(foo() && false) z()\", \"foo()&&0&&z()\");\n  }\n",
        "begin_line": 284,
        "end_line": 288,
        "comment": "",
        "child_ranges": [
            "(line 287,col 5)-(line 287,col 66)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java",
        "signature": "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest.testFoldNot()",
        "snippet": "  public void testFoldNot() {\n    fold(\"while(!(x==y)){a=b;}\" , \"while(x!=y){a=b;}\");\n    fold(\"while(!(x!=y)){a=b;}\" , \"while(x==y){a=b;}\");\n    fold(\"while(!(x===y)){a=b;}\", \"while(x!==y){a=b;}\");\n    fold(\"while(!(x!==y)){a=b;}\", \"while(x===y){a=b;}\");\n    // Because !(x<NaN) != x>=NaN don't fold < and > cases.\n    foldSame(\"while(!(x>y)){a=b;}\");\n    foldSame(\"while(!(x>=y)){a=b;}\");\n    foldSame(\"while(!(x<y)){a=b;}\");\n    foldSame(\"while(!(x<=y)){a=b;}\");\n    foldSame(\"while(!(x<=NaN)){a=b;}\");\n\n    // NOT forces a boolean context\n    fold(\"x = !(y() && true)\", \"x = !y()\");\n    // This will be further optimized by PeepholeFoldConstants.\n    fold(\"x = !true\", \"x = !1\");\n  }\n",
        "begin_line": 290,
        "end_line": 306,
        "comment": "",
        "child_ranges": [
            "(line 291,col 5)-(line 291,col 55)",
            "(line 292,col 5)-(line 292,col 55)",
            "(line 293,col 5)-(line 293,col 56)",
            "(line 294,col 5)-(line 294,col 56)",
            "(line 296,col 5)-(line 296,col 36)",
            "(line 297,col 5)-(line 297,col 37)",
            "(line 298,col 5)-(line 298,col 36)",
            "(line 299,col 5)-(line 299,col 37)",
            "(line 300,col 5)-(line 300,col 39)",
            "(line 303,col 5)-(line 303,col 43)",
            "(line 305,col 5)-(line 305,col 32)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java",
        "signature": "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest.testFoldRegExpConstructor()",
        "snippet": "  public void testFoldRegExpConstructor() {\n    enableNormalize();\n\n    // Cannot fold all the way to a literal because there are too few arguments.\n    fold(\"x = new RegExp\",                    \"x = RegExp()\");\n    // Empty regexp should not fold to // since that is a line comment in JS\n    fold(\"x = new RegExp(\\\"\\\")\",              \"x = RegExp(\\\"\\\")\");\n    fold(\"x = new RegExp(\\\"\\\", \\\"i\\\")\",       \"x = RegExp(\\\"\\\",\\\"i\\\")\");\n    // Bogus flags should not fold\n    testSame(\"x = RegExp(\\\"foobar\\\", \\\"bogus\\\")\",\n         PeepholeSubstituteAlternateSyntax.INVALID_REGULAR_EXPRESSION_FLAGS);\n    // Can Fold\n    fold(\"x = new RegExp(\\\"foobar\\\")\",        \"x = /foobar/\");\n    fold(\"x = RegExp(\\\"foobar\\\")\",            \"x = /foobar/\");\n    fold(\"x = new RegExp(\\\"foobar\\\", \\\"i\\\")\", \"x = /foobar/i\");\n    // Make sure that escaping works\n    fold(\"x = new RegExp(\\\"\\\\\\\\.\\\", \\\"i\\\")\",  \"x = /\\\\./i\");\n    fold(\"x = new RegExp(\\\"/\\\", \\\"\\\")\",       \"x = /\\\\//\");\n    fold(\"x = new RegExp(\\\"[/]\\\", \\\"\\\")\",     \"x = /[/]/\");\n    fold(\"x = new RegExp(\\\"///\\\", \\\"\\\")\",     \"x = /\\\\/\\\\/\\\\//\");\n    fold(\"x = new RegExp(\\\"\\\\\\\\\\\\/\\\", \\\"\\\")\", \"x = /\\\\//\");\n    fold(\"x = new RegExp(\\\"\\\\n\\\")\",           \"x = /\\\\n/\");\n    fold(\"x = new RegExp('\\\\\\\\\\\\r')\",         \"x = /\\\\r/\");\n\n    // Don't fold really long regexp literals, because Opera 9.2's\n    // regexp parser will explode.\n    String longRegexp = \"\";\n    for (int i = 0; i < 200; i++) longRegexp += \"x\";\n    foldSame(\"x = RegExp(\\\"\" + longRegexp + \"\\\")\");\n\n    // Shouldn't fold RegExp unnormalized because\n    // we can't be sure that RegExp hasn't been redefined\n    disableNormalize();\n\n    foldSame(\"x = new RegExp(\\\"foobar\\\")\");\n  }\n",
        "begin_line": 308,
        "end_line": 343,
        "comment": "",
        "child_ranges": [
            "(line 309,col 5)-(line 309,col 22)",
            "(line 312,col 5)-(line 312,col 62)",
            "(line 314,col 5)-(line 314,col 66)",
            "(line 315,col 5)-(line 315,col 72)",
            "(line 317,col 5)-(line 318,col 77)",
            "(line 320,col 5)-(line 320,col 62)",
            "(line 321,col 5)-(line 321,col 62)",
            "(line 322,col 5)-(line 322,col 63)",
            "(line 324,col 5)-(line 324,col 60)",
            "(line 325,col 5)-(line 325,col 59)",
            "(line 326,col 5)-(line 326,col 59)",
            "(line 327,col 5)-(line 327,col 65)",
            "(line 328,col 5)-(line 328,col 59)",
            "(line 329,col 5)-(line 329,col 59)",
            "(line 330,col 5)-(line 330,col 59)",
            "(line 334,col 5)-(line 334,col 27)",
            "(line 335,col 5)-(line 335,col 52)",
            "(line 336,col 5)-(line 336,col 51)",
            "(line 340,col 5)-(line 340,col 23)",
            "(line 342,col 5)-(line 342,col 43)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java",
        "signature": "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest.testVersionSpecificRegExpQuirks()",
        "snippet": "  public void testVersionSpecificRegExpQuirks() {\n    enableNormalize();\n\n    // Don't fold if the flags contain 'g'\n    enableEcmaScript5(false);\n    fold(\"x = new RegExp(\\\"foobar\\\", \\\"g\\\")\",\n         \"x = RegExp(\\\"foobar\\\",\\\"g\\\")\");\n    fold(\"x = new RegExp(\\\"foobar\\\", \\\"ig\\\")\",\n         \"x = RegExp(\\\"foobar\\\",\\\"ig\\\")\");\n    // ... unless in ECMAScript 5 mode per section 7.8.5 of ECMAScript 5.\n    enableEcmaScript5(true);\n    fold(\"x = new RegExp(\\\"foobar\\\", \\\"ig\\\")\",\n         \"x = /foobar/ig\");\n    // Don't fold things that crash older versions of Safari and that don't work\n    // as regex literals on other old versions of Safari\n    enableEcmaScript5(false);\n    fold(\"x = new RegExp(\\\"\\\\u2028\\\")\", \"x = RegExp(\\\"\\\\u2028\\\")\");\n    fold(\"x = new RegExp(\\\"\\\\\\\\\\\\\\\\u2028\\\")\", \"x = /\\\\\\\\u2028/\");\n    // Sunset Safari exclusions for ECMAScript 5 and later.\n    enableEcmaScript5(true);\n    fold(\"x = new RegExp(\\\"\\\\u2028\\\\u2029\\\")\", \"x = /\\\\u2028\\\\u2029/\");\n    fold(\"x = new RegExp(\\\"\\\\\\\\u2028\\\")\", \"x = /\\\\u2028/\");\n    fold(\"x = new RegExp(\\\"\\\\\\\\\\\\\\\\u2028\\\")\", \"x = /\\\\\\\\u2028/\");\n  }\n",
        "begin_line": 345,
        "end_line": 368,
        "comment": "",
        "child_ranges": [
            "(line 346,col 5)-(line 346,col 22)",
            "(line 349,col 5)-(line 349,col 29)",
            "(line 350,col 5)-(line 351,col 41)",
            "(line 352,col 5)-(line 353,col 42)",
            "(line 355,col 5)-(line 355,col 28)",
            "(line 356,col 5)-(line 357,col 27)",
            "(line 360,col 5)-(line 360,col 29)",
            "(line 361,col 5)-(line 361,col 67)",
            "(line 362,col 5)-(line 362,col 65)",
            "(line 364,col 5)-(line 364,col 28)",
            "(line 365,col 5)-(line 365,col 71)",
            "(line 366,col 5)-(line 366,col 59)",
            "(line 367,col 5)-(line 367,col 65)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java",
        "signature": "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest.testFoldRegExpConstructorStringCompare()",
        "snippet": "  public void testFoldRegExpConstructorStringCompare() {\n    // Might have something to do with the internal representation of \\n and how\n    // it is used in node comparison.\n    assertResultString(\"x=new RegExp(\\\"\\\\n\\\", \\\"i\\\")\", \"x=/\\\\n/i\", true);\n  }\n",
        "begin_line": 370,
        "end_line": 374,
        "comment": "",
        "child_ranges": [
            "(line 373,col 5)-(line 373,col 73)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java",
        "signature": "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest.testContainsUnicodeEscape()",
        "snippet": "  public void testContainsUnicodeEscape() throws Exception {\n    assertTrue(!PeepholeSubstituteAlternateSyntax.containsUnicodeEscape(\"\"));\n    assertTrue(!PeepholeSubstituteAlternateSyntax.containsUnicodeEscape(\"foo\"));\n    assertTrue(PeepholeSubstituteAlternateSyntax.containsUnicodeEscape(\n        \"\\u2028\"));\n    assertTrue(PeepholeSubstituteAlternateSyntax.containsUnicodeEscape(\n        \"\\\\u2028\"));\n    assertTrue(\n        PeepholeSubstituteAlternateSyntax.containsUnicodeEscape(\"foo\\\\u2028\"));\n    assertTrue(!PeepholeSubstituteAlternateSyntax.containsUnicodeEscape(\n        \"foo\\\\\\\\u2028\"));\n    assertTrue(PeepholeSubstituteAlternateSyntax.containsUnicodeEscape(\n            \"foo\\\\\\\\u2028bar\\\\u2028\"));\n  }\n",
        "begin_line": 376,
        "end_line": 389,
        "comment": "",
        "child_ranges": [
            "(line 377,col 5)-(line 377,col 77)",
            "(line 378,col 5)-(line 378,col 80)",
            "(line 379,col 5)-(line 380,col 19)",
            "(line 381,col 5)-(line 382,col 20)",
            "(line 383,col 5)-(line 384,col 79)",
            "(line 385,col 5)-(line 386,col 25)",
            "(line 387,col 5)-(line 388,col 39)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java",
        "signature": "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest.testFoldLiteralObjectConstructors()",
        "snippet": "  public void testFoldLiteralObjectConstructors() {\n    enableNormalize();\n\n    // Can fold when normalized\n    fold(\"x = new Object\", \"x = ({})\");\n    fold(\"x = new Object()\", \"x = ({})\");\n    fold(\"x = Object()\", \"x = ({})\");\n\n    disableNormalize();\n    // Cannot fold above when not normalized\n    foldSame(\"x = new Object\");\n    foldSame(\"x = new Object()\");\n    foldSame(\"x = Object()\");\n\n    enableNormalize();\n\n    // Cannot fold, the constructor being used is actually a local function\n    foldSame(\"x = \" +\n         \"(function f(){function Object(){this.x=4};return new Object();})();\");\n  }\n",
        "begin_line": 391,
        "end_line": 410,
        "comment": "",
        "child_ranges": [
            "(line 392,col 5)-(line 392,col 22)",
            "(line 395,col 5)-(line 395,col 39)",
            "(line 396,col 5)-(line 396,col 41)",
            "(line 397,col 5)-(line 397,col 37)",
            "(line 399,col 5)-(line 399,col 23)",
            "(line 401,col 5)-(line 401,col 31)",
            "(line 402,col 5)-(line 402,col 33)",
            "(line 403,col 5)-(line 403,col 29)",
            "(line 405,col 5)-(line 405,col 22)",
            "(line 408,col 5)-(line 409,col 80)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java",
        "signature": "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest.testFoldLiteralArrayConstructors()",
        "snippet": "  public void testFoldLiteralArrayConstructors() {\n    enableNormalize();\n\n    // No arguments - can fold when normalized\n    fold(\"x = new Array\", \"x = []\");\n    fold(\"x = new Array()\", \"x = []\");\n    fold(\"x = Array()\", \"x = []\");\n\n    // One argument - can be fold when normalized\n    fold(\"x = new Array(0)\", \"x = []\");\n    fold(\"x = Array(0)\", \"x = []\");\n    fold(\"x = new Array(\\\"a\\\")\", \"x = [\\\"a\\\"]\");\n    fold(\"x = Array(\\\"a\\\")\", \"x = [\\\"a\\\"]\");\n\n    // One argument - cannot be fold when normalized\n    fold(\"x = new Array(7)\", \"x = Array(7)\");\n    fold(\"x = Array(7)\", \"x = Array(7)\");\n    fold(\"x = new Array(y)\", \"x = Array(y)\");\n    fold(\"x = Array(y)\", \"x = Array(y)\");\n    fold(\"x = new Array(foo())\", \"x = Array(foo())\");\n    fold(\"x = Array(foo())\", \"x = Array(foo())\");\n\n    // More than one argument - can be fold when normalized\n    fold(\"x = new Array(1, 2, 3, 4)\", \"x = [1, 2, 3, 4]\");\n    fold(\"x = Array(1, 2, 3, 4)\", \"x = [1, 2, 3, 4]\");\n    fold(\"x = new Array('a', 1, 2, 'bc', 3, {}, 'abc')\",\n         \"x = ['a', 1, 2, 'bc', 3, {}, 'abc']\");\n    fold(\"x = Array('a', 1, 2, 'bc', 3, {}, 'abc')\",\n         \"x = ['a', 1, 2, 'bc', 3, {}, 'abc']\");\n    fold(\"x = new Array(Array(1, '2', 3, '4'))\", \"x = [[1, '2', 3, '4']]\");\n    fold(\"x = Array(Array(1, '2', 3, '4'))\", \"x = [[1, '2', 3, '4']]\");\n    fold(\"x = new Array(Object(), Array(\\\"abc\\\", Object(), Array(Array())))\",\n         \"x = [{}, [\\\"abc\\\", {}, [[]]]]\");\n    fold(\"x = new Array(Object(), Array(\\\"abc\\\", Object(), Array(Array())))\",\n         \"x = [{}, [\\\"abc\\\", {}, [[]]]]\");\n\n    disableNormalize();\n    // Cannot fold above when not normalized\n    foldSame(\"x = new Array\");\n    foldSame(\"x = new Array()\");\n    foldSame(\"x = Array()\");\n\n    foldSame(\"x = new Array(0)\");\n    foldSame(\"x = Array(0)\");\n    foldSame(\"x = new Array(\\\"a\\\")\");\n    foldSame(\"x = Array(\\\"a\\\")\");\n    foldSame(\"x = new Array(7)\");\n    foldSame(\"x = Array(7)\");\n    foldSame(\"x = new Array(foo())\");\n    foldSame(\"x = Array(foo())\");\n\n    foldSame(\"x = new Array(1, 2, 3, 4)\");\n    foldSame(\"x = Array(1, 2, 3, 4)\");\n    foldSame(\"x = new Array('a', 1, 2, 'bc', 3, {}, 'abc')\");\n    foldSame(\"x = Array('a', 1, 2, 'bc', 3, {}, 'abc')\");\n    foldSame(\"x = new Array(Array(1, '2', 3, '4'))\");\n    foldSame(\"x = Array(Array(1, '2', 3, '4'))\");\n    foldSame(\"x = new Array(\" +\n        \"Object(), Array(\\\"abc\\\", Object(), Array(Array())))\");\n    foldSame(\"x = new Array(\" +\n        \"Object(), Array(\\\"abc\\\", Object(), Array(Array())))\");\n  }\n",
        "begin_line": 412,
        "end_line": 473,
        "comment": "",
        "child_ranges": [
            "(line 413,col 5)-(line 413,col 22)",
            "(line 416,col 5)-(line 416,col 36)",
            "(line 417,col 5)-(line 417,col 38)",
            "(line 418,col 5)-(line 418,col 34)",
            "(line 421,col 5)-(line 421,col 39)",
            "(line 422,col 5)-(line 422,col 35)",
            "(line 423,col 5)-(line 423,col 48)",
            "(line 424,col 5)-(line 424,col 44)",
            "(line 427,col 5)-(line 427,col 45)",
            "(line 428,col 5)-(line 428,col 41)",
            "(line 429,col 5)-(line 429,col 45)",
            "(line 430,col 5)-(line 430,col 41)",
            "(line 431,col 5)-(line 431,col 53)",
            "(line 432,col 5)-(line 432,col 49)",
            "(line 435,col 5)-(line 435,col 58)",
            "(line 436,col 5)-(line 436,col 54)",
            "(line 437,col 5)-(line 438,col 48)",
            "(line 439,col 5)-(line 440,col 48)",
            "(line 441,col 5)-(line 441,col 75)",
            "(line 442,col 5)-(line 442,col 71)",
            "(line 443,col 5)-(line 444,col 42)",
            "(line 445,col 5)-(line 446,col 42)",
            "(line 448,col 5)-(line 448,col 23)",
            "(line 450,col 5)-(line 450,col 30)",
            "(line 451,col 5)-(line 451,col 32)",
            "(line 452,col 5)-(line 452,col 28)",
            "(line 454,col 5)-(line 454,col 33)",
            "(line 455,col 5)-(line 455,col 29)",
            "(line 456,col 5)-(line 456,col 37)",
            "(line 457,col 5)-(line 457,col 33)",
            "(line 458,col 5)-(line 458,col 33)",
            "(line 459,col 5)-(line 459,col 29)",
            "(line 460,col 5)-(line 460,col 37)",
            "(line 461,col 5)-(line 461,col 33)",
            "(line 463,col 5)-(line 463,col 42)",
            "(line 464,col 5)-(line 464,col 38)",
            "(line 465,col 5)-(line 465,col 61)",
            "(line 466,col 5)-(line 466,col 57)",
            "(line 467,col 5)-(line 467,col 53)",
            "(line 468,col 5)-(line 468,col 49)",
            "(line 469,col 5)-(line 470,col 63)",
            "(line 471,col 5)-(line 472,col 63)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java",
        "signature": "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest.testMinimizeExprCondition()",
        "snippet": "  public void testMinimizeExprCondition() {\n    fold(\"(x ? true : false) && y()\", \"x&&y()\");\n    fold(\"(x ? false : true) && y()\", \"(!x)&&y()\");\n    fold(\"(x ? true : y) && y()\", \"(x || y)&&y()\");\n    fold(\"(x ? y : false) && y()\", \"(x && y)&&y()\");\n    fold(\"(x && true) && y()\", \"x && y()\");\n    fold(\"(x && false) && y()\", \"0&&y()\");\n    fold(\"(x || true) && y()\", \"1&&y()\");\n    fold(\"(x || false) && y()\", \"x&&y()\");\n  }\n",
        "begin_line": 475,
        "end_line": 484,
        "comment": "",
        "child_ranges": [
            "(line 476,col 5)-(line 476,col 48)",
            "(line 477,col 5)-(line 477,col 51)",
            "(line 478,col 5)-(line 478,col 51)",
            "(line 479,col 5)-(line 479,col 52)",
            "(line 480,col 5)-(line 480,col 43)",
            "(line 481,col 5)-(line 481,col 42)",
            "(line 482,col 5)-(line 482,col 41)",
            "(line 483,col 5)-(line 483,col 42)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java",
        "signature": "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest.testMinimizeWhileCondition()",
        "snippet": "  public void testMinimizeWhileCondition() {\n    // This test uses constant folding logic, so is only here for completeness.\n    fold(\"while(!!true) foo()\", \"while(1) foo()\");\n    // These test tryMinimizeCondition\n    fold(\"while(!!x) foo()\", \"while(x) foo()\");\n    fold(\"while(!(!x&&!y)) foo()\", \"while(x||y) foo()\");\n    fold(\"while(x||!!y) foo()\", \"while(x||y) foo()\");\n    fold(\"while(!(!!x&&y)) foo()\", \"while(!x||!y) foo()\");\n    fold(\"while(!(!x&&y)) foo()\", \"while(x||!y) foo()\");\n    fold(\"while(!(x||!y)) foo()\", \"while(!x&&y) foo()\");\n    fold(\"while(!(x||y)) foo()\", \"while(!x&&!y) foo()\");\n    fold(\"while(!(!x||y-z)) foo()\", \"while(x&&!(y-z)) foo()\");\n    fold(\"while(!(!(x/y)||z+w)) foo()\", \"while(x/y&&!(z+w)) foo()\");\n    foldSame(\"while(!(x+y||z)) foo()\");\n    foldSame(\"while(!(x&&y*z)) foo()\");\n    fold(\"while(!(!!x&&y)) foo()\", \"while(!x||!y) foo()\");\n    fold(\"while(x&&!0) foo()\", \"while(x) foo()\");\n    fold(\"while(x||!1) foo()\", \"while(x) foo()\");\n    fold(\"while(!((x,y)&&z)) foo()\", \"while(!(x,y)||!z) foo()\");\n  }\n",
        "begin_line": 486,
        "end_line": 505,
        "comment": "",
        "child_ranges": [
            "(line 488,col 5)-(line 488,col 50)",
            "(line 490,col 5)-(line 490,col 47)",
            "(line 491,col 5)-(line 491,col 56)",
            "(line 492,col 5)-(line 492,col 53)",
            "(line 493,col 5)-(line 493,col 58)",
            "(line 494,col 5)-(line 494,col 56)",
            "(line 495,col 5)-(line 495,col 56)",
            "(line 496,col 5)-(line 496,col 56)",
            "(line 497,col 5)-(line 497,col 62)",
            "(line 498,col 5)-(line 498,col 68)",
            "(line 499,col 5)-(line 499,col 39)",
            "(line 500,col 5)-(line 500,col 39)",
            "(line 501,col 5)-(line 501,col 58)",
            "(line 502,col 5)-(line 502,col 49)",
            "(line 503,col 5)-(line 503,col 49)",
            "(line 504,col 5)-(line 504,col 64)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java",
        "signature": "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest.testMinimizeForCondition()",
        "snippet": "  public void testMinimizeForCondition() {\n    // This test uses constant folding logic, so is only here for completeness.\n    // These could be simplified to \"for(;;) ...\"\n    fold(\"for(;!!true;) foo()\", \"for(;1;) foo()\");\n    // Don't bother with FOR inits as there are normalized out.\n    fold(\"for(!!true;;) foo()\", \"for(!0;;) foo()\");\n\n    // These test tryMinimizeCondition\n    fold(\"for(;!!x;) foo()\", \"for(;x;) foo()\");\n\n    // sanity check\n    foldSame(\"for(a in b) foo()\");\n    foldSame(\"for(a in {}) foo()\");\n    foldSame(\"for(a in []) foo()\");\n    fold(\"for(a in !!true) foo()\", \"for(a in !0) foo()\");\n  }\n",
        "begin_line": 507,
        "end_line": 522,
        "comment": "",
        "child_ranges": [
            "(line 510,col 5)-(line 510,col 50)",
            "(line 512,col 5)-(line 512,col 51)",
            "(line 515,col 5)-(line 515,col 47)",
            "(line 518,col 5)-(line 518,col 34)",
            "(line 519,col 5)-(line 519,col 35)",
            "(line 520,col 5)-(line 520,col 35)",
            "(line 521,col 5)-(line 521,col 57)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java",
        "signature": "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest.testMinimizeCondition_example1()",
        "snippet": "  public void testMinimizeCondition_example1() {\n    // Based on a real failing code sample.\n    fold(\"if(!!(f() > 20)) {foo();foo()}\", \"if(f() > 20){foo();foo()}\");\n  }\n",
        "begin_line": 524,
        "end_line": 527,
        "comment": "",
        "child_ranges": [
            "(line 526,col 5)-(line 526,col 72)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java",
        "signature": "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest.testFoldLoopBreakLate()",
        "snippet": "  public void testFoldLoopBreakLate() {\n    late = true;\n    fold(\"for(;;) if (a) break\", \"for(;!a;);\");\n    foldSame(\"for(;;) if (a) { f(); break }\");\n    fold(\"for(;;) if (a) break; else f()\", \"for(;!a;) { { f(); } }\");\n    fold(\"for(;a;) if (b) break\", \"for(;a && !b;);\");\n    fold(\"for(;a;) { if (b) break; if (c) break; }\",\n         \"for(;(a && !b);) if (c) break;\");\n    fold(\"for(;(a && !b);) if (c) break;\", \"for(;(a && !b) && !c;);\");\n\n    // 'while' is normalized to 'for'\n    enableNormalize(true);\n    fold(\"while(true) if (a) break\", \"for(;1&&!a;);\");\n  }\n",
        "begin_line": 529,
        "end_line": 542,
        "comment": "",
        "child_ranges": [
            "(line 530,col 5)-(line 530,col 16)",
            "(line 531,col 5)-(line 531,col 47)",
            "(line 532,col 5)-(line 532,col 46)",
            "(line 533,col 5)-(line 533,col 69)",
            "(line 534,col 5)-(line 534,col 53)",
            "(line 535,col 5)-(line 536,col 43)",
            "(line 537,col 5)-(line 537,col 70)",
            "(line 540,col 5)-(line 540,col 26)",
            "(line 541,col 5)-(line 541,col 54)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java",
        "signature": "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest.testFoldLoopBreakEarly()",
        "snippet": "  public void testFoldLoopBreakEarly() {\n    late = false;\n    foldSame(\"for(;;) if (a) break\");\n    foldSame(\"for(;;) if (a) { f(); break }\");\n    foldSame(\"for(;;) if (a) break; else f()\");\n    foldSame(\"for(;a;) if (b) break\");\n    foldSame(\"for(;a;) { if (b) break; if (c) break; }\");\n\n    foldSame(\"while(1) if (a) break\");\n    enableNormalize(true);\n    foldSame(\"while(1) if (a) break\");\n  }\n",
        "begin_line": 544,
        "end_line": 555,
        "comment": "",
        "child_ranges": [
            "(line 545,col 5)-(line 545,col 17)",
            "(line 546,col 5)-(line 546,col 37)",
            "(line 547,col 5)-(line 547,col 46)",
            "(line 548,col 5)-(line 548,col 47)",
            "(line 549,col 5)-(line 549,col 38)",
            "(line 550,col 5)-(line 550,col 57)",
            "(line 552,col 5)-(line 552,col 38)",
            "(line 553,col 5)-(line 553,col 26)",
            "(line 554,col 5)-(line 554,col 38)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java",
        "signature": "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest.testFoldConditionalVarDeclaration()",
        "snippet": "  public void testFoldConditionalVarDeclaration() {\n    fold(\"if(x) var y=1;else y=2\", \"var y=x?1:2\");\n    fold(\"if(x) y=1;else var y=2\", \"var y=x?1:2\");\n\n    foldSame(\"if(x) var y = 1; z = 2\");\n    foldSame(\"if(x||y) y = 1; var z = 2\");\n\n    foldSame(\"if(x) { var y = 1; print(y)} else y = 2 \");\n    foldSame(\"if(x) var y = 1; else {y = 2; print(y)}\");\n  }\n",
        "begin_line": 557,
        "end_line": 566,
        "comment": "",
        "child_ranges": [
            "(line 558,col 5)-(line 558,col 50)",
            "(line 559,col 5)-(line 559,col 50)",
            "(line 561,col 5)-(line 561,col 39)",
            "(line 562,col 5)-(line 562,col 42)",
            "(line 564,col 5)-(line 564,col 57)",
            "(line 565,col 5)-(line 565,col 56)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java",
        "signature": "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest.testFoldReturnResult()",
        "snippet": "  public void testFoldReturnResult() {\n    fold(\"function f(){return false;}\", \"function f(){return !1}\");\n    foldSame(\"function f(){return null;}\");\n    fold(\"function f(){return void 0;}\",\n         \"function f(){return}\");\n    fold(\"function f(){return;}\",\n         \"function f(){}\");\n    foldSame(\"function f(){return void foo();}\");\n    fold(\"function f(){return undefined;}\",\n         \"function f(){return}\");\n    fold(\"function f(){if(a()){return undefined;}}\",\n         \"function f(){if(a()){return}}\");\n  }\n",
        "begin_line": 568,
        "end_line": 580,
        "comment": "",
        "child_ranges": [
            "(line 569,col 5)-(line 569,col 67)",
            "(line 570,col 5)-(line 570,col 43)",
            "(line 571,col 5)-(line 572,col 33)",
            "(line 573,col 5)-(line 574,col 27)",
            "(line 575,col 5)-(line 575,col 49)",
            "(line 576,col 5)-(line 577,col 33)",
            "(line 578,col 5)-(line 579,col 42)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java",
        "signature": "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest.testFoldStandardConstructors()",
        "snippet": "  public void testFoldStandardConstructors() {\n    foldSame(\"new Foo('a')\");\n    foldSame(\"var x = new goog.Foo(1)\");\n    foldSame(\"var x = new String(1)\");\n    foldSame(\"var x = new Number(1)\");\n    foldSame(\"var x = new Boolean(1)\");\n\n    enableNormalize();\n\n    fold(\"var x = new Object('a')\", \"var x = Object('a')\");\n    fold(\"var x = new RegExp('')\", \"var x = RegExp('')\");\n    fold(\"var x = new Error('20')\", \"var x = Error(\\\"20\\\")\");\n    fold(\"var x = new Array(20)\", \"var x = Array(20)\");\n  }\n",
        "begin_line": 582,
        "end_line": 595,
        "comment": "",
        "child_ranges": [
            "(line 583,col 5)-(line 583,col 29)",
            "(line 584,col 5)-(line 584,col 40)",
            "(line 585,col 5)-(line 585,col 38)",
            "(line 586,col 5)-(line 586,col 38)",
            "(line 587,col 5)-(line 587,col 39)",
            "(line 589,col 5)-(line 589,col 22)",
            "(line 591,col 5)-(line 591,col 59)",
            "(line 592,col 5)-(line 592,col 57)",
            "(line 593,col 5)-(line 593,col 61)",
            "(line 594,col 5)-(line 594,col 55)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java",
        "signature": "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest.testSubsituteReturn()",
        "snippet": "  public void testSubsituteReturn() {\n\n    fold(\"function f() { while(x) { return }}\",\n         \"function f() { while(x) { break }}\");\n\n    foldSame(\"function f() { while(x) { return 5 } }\");\n\n    foldSame(\"function f() { a: { return 5 } }\");\n\n    fold(\"function f() { while(x) { return 5}  return 5}\",\n         \"function f() { while(x) { break }    return 5}\");\n\n    fold(\"function f() { while(x) { return x}  return x}\",\n         \"function f() { while(x) { break }    return x}\");\n\n    fold(\"function f() { while(x) { if (y) { return }}}\",\n         \"function f() { while(x) { if (y) { break  }}}\");\n\n    fold(\"function f() { while(x) { if (y) { return }} return}\",\n         \"function f() { while(x) { if (y) { break  }}}\");\n\n    fold(\"function f() { while(x) { if (y) { return 5 }} return 5}\",\n         \"function f() { while(x) { if (y) { break    }} return 5}\");\n\n    // It doesn't matter if x is changed between them. We are still returning\n    // x at whatever x value current holds. The whole x = 1 is skipped.\n    fold(\"function f() { while(x) { if (y) { return x } x = 1} return x}\",\n         \"function f() { while(x) { if (y) { break    } x = 1} return x}\");\n\n    // RemoveUnreachableCode would take care of the useless breaks.\n    fold(\"function f() { while(x) { if (y) { return x } return x} return x}\",\n         \"function f() { while(x) { if (y) {} break }return x}\");\n\n    // A break here only breaks out of the inner loop.\n    foldSame(\"function f() { while(x) { while (y) { return } } }\");\n\n    foldSame(\"function f() { while(1) { return 7}  return 5}\");\n\n\n    foldSame(\"function f() {\" +\n             \"  try { while(x) {return f()}} catch (e) { } return f()}\");\n\n    foldSame(\"function f() {\" +\n             \"  try { while(x) {return f()}} finally {alert(1)} return f()}\");\n\n\n    // Both returns has the same handler\n    fold(\"function f() {\" +\n         \"  try { while(x) { return f() } return f() } catch (e) { } }\",\n         \"function f() {\" +\n         \"  try { while(x) { break } return f() } catch (e) { } }\");\n\n    // We can't fold this because it'll change the order of when foo is called.\n    foldSame(\"function f() {\" +\n             \"  try { while(x) { return foo() } } finally { alert(1) } \"  +\n             \"  return foo()}\");\n\n    // This is fine, we have no side effect in the return value.\n    fold(\"function f() {\" +\n         \"  try { while(x) { return 1 } } finally { alert(1) } return 1}\",\n         \"function f() {\" +\n         \"  try { while(x) { break    } } finally { alert(1) } return 1}\"\n         );\n\n    foldSame(\"function f() { try{ return a } finally { a = 2 } return a; }\");\n\n    fold(\n      \"function f() { switch(a){ case 1: return a; default: g();} return a;}\",\n      \"function f() { switch(a){ case 1: break; default: g();} return a; }\");\n  }\n",
        "begin_line": 597,
        "end_line": 666,
        "comment": "",
        "child_ranges": [
            "(line 599,col 5)-(line 600,col 47)",
            "(line 602,col 5)-(line 602,col 55)",
            "(line 604,col 5)-(line 604,col 49)",
            "(line 606,col 5)-(line 607,col 59)",
            "(line 609,col 5)-(line 610,col 59)",
            "(line 612,col 5)-(line 613,col 58)",
            "(line 615,col 5)-(line 616,col 58)",
            "(line 618,col 5)-(line 619,col 69)",
            "(line 623,col 5)-(line 624,col 75)",
            "(line 627,col 5)-(line 628,col 65)",
            "(line 631,col 5)-(line 631,col 67)",
            "(line 633,col 5)-(line 633,col 63)",
            "(line 636,col 5)-(line 637,col 73)",
            "(line 639,col 5)-(line 640,col 78)",
            "(line 644,col 5)-(line 647,col 68)",
            "(line 650,col 5)-(line 652,col 32)",
            "(line 655,col 5)-(line 659,col 11)",
            "(line 661,col 5)-(line 661,col 77)",
            "(line 663,col 5)-(line 665,col 77)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java",
        "signature": "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest.testSubsituteBreakForThrow()",
        "snippet": "  public void testSubsituteBreakForThrow() {\n\n    foldSame(\"function f() { while(x) { throw Error }}\");\n\n    fold(\"function f() { while(x) { throw Error } throw Error }\",\n         \"function f() { while(x) { break } throw Error}\");\n    foldSame(\"function f() { while(x) { throw Error(1) } throw Error(2)}\");\n    foldSame(\"function f() { while(x) { throw Error(1) } return Error(2)}\");\n\n    foldSame(\"function f() { while(x) { throw 5 } }\");\n\n    foldSame(\"function f() { a: { throw 5 } }\");\n\n    fold(\"function f() { while(x) { throw 5}  throw 5}\",\n         \"function f() { while(x) { break }   throw 5}\");\n\n    fold(\"function f() { while(x) { throw x}  throw x}\",\n         \"function f() { while(x) { break }   throw x}\");\n\n    foldSame(\"function f() { while(x) { if (y) { throw Error }}}\");\n\n    fold(\"function f() { while(x) { if (y) { throw Error }} throw Error}\",\n         \"function f() { while(x) { if (y) { break }} throw Error}\");\n\n    fold(\"function f() { while(x) { if (y) { throw 5 }} throw 5}\",\n         \"function f() { while(x) { if (y) { break    }} throw 5}\");\n\n    // It doesn't matter if x is changed between them. We are still throwing\n    // x at whatever x value current holds. The whole x = 1 is skipped.\n    fold(\"function f() { while(x) { if (y) { throw x } x = 1} throw x}\",\n         \"function f() { while(x) { if (y) { break    } x = 1} throw x}\");\n\n    // RemoveUnreachableCode would take care of the useless breaks.\n    fold(\"function f() { while(x) { if (y) { throw x } throw x} throw x}\",\n         \"function f() { while(x) { if (y) {} break }throw x}\");\n\n    // A break here only breaks out of the inner loop.\n    foldSame(\"function f() { while(x) { while (y) { throw Error } } }\");\n\n    foldSame(\"function f() { while(1) { throw 7}  throw 5}\");\n\n\n    foldSame(\"function f() {\" +\n             \"  try { while(x) {throw f()}} catch (e) { } throw f()}\");\n\n    foldSame(\"function f() {\" +\n             \"  try { while(x) {throw f()}} finally {alert(1)} throw f()}\");\n\n\n    // Both throws has the same handler\n    fold(\"function f() {\" +\n         \"  try { while(x) { throw f() } throw f() } catch (e) { } }\",\n         \"function f() {\" +\n         \"  try { while(x) { break } throw f() } catch (e) { } }\");\n\n    // We can't fold this because it'll change the order of when foo is called.\n    foldSame(\"function f() {\" +\n             \"  try { while(x) { throw foo() } } finally { alert(1) } \"  +\n             \"  throw foo()}\");\n\n    // This is fine, we have no side effect in the throw value.\n    fold(\"function f() {\" +\n         \"  try { while(x) { throw 1 } } finally { alert(1) } throw 1}\",\n         \"function f() {\" +\n         \"  try { while(x) { break    } } finally { alert(1) } throw 1}\"\n         );\n\n    foldSame(\"function f() { try{ throw a } finally { a = 2 } throw a; }\");\n\n    fold(\n      \"function f() { switch(a){ case 1: throw a; default: g();} throw a;}\",\n      \"function f() { switch(a){ case 1: break; default: g();} throw a; }\");\n  }\n",
        "begin_line": 668,
        "end_line": 740,
        "comment": "",
        "child_ranges": [
            "(line 670,col 5)-(line 670,col 57)",
            "(line 672,col 5)-(line 673,col 59)",
            "(line 674,col 5)-(line 674,col 75)",
            "(line 675,col 5)-(line 675,col 76)",
            "(line 677,col 5)-(line 677,col 54)",
            "(line 679,col 5)-(line 679,col 48)",
            "(line 681,col 5)-(line 682,col 57)",
            "(line 684,col 5)-(line 685,col 57)",
            "(line 687,col 5)-(line 687,col 67)",
            "(line 689,col 5)-(line 690,col 69)",
            "(line 692,col 5)-(line 693,col 68)",
            "(line 697,col 5)-(line 698,col 74)",
            "(line 701,col 5)-(line 702,col 64)",
            "(line 705,col 5)-(line 705,col 72)",
            "(line 707,col 5)-(line 707,col 61)",
            "(line 710,col 5)-(line 711,col 71)",
            "(line 713,col 5)-(line 714,col 76)",
            "(line 718,col 5)-(line 721,col 67)",
            "(line 724,col 5)-(line 726,col 31)",
            "(line 729,col 5)-(line 733,col 11)",
            "(line 735,col 5)-(line 735,col 75)",
            "(line 737,col 5)-(line 739,col 76)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java",
        "signature": "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest.testRemoveDuplicateReturn()",
        "snippet": "  public void testRemoveDuplicateReturn() {\n    fold(\"function f() { return; }\",\n         \"function f(){}\");\n    foldSame(\"function f() { return a; }\");\n    fold(\"function f() { if (x) { return a } return a; }\",\n         \"function f() { if (x) {} return a; }\");\n    foldSame(\n      \"function f() { try { if (x) { return a } } catch(e) {} return a; }\");\n    foldSame(\n      \"function f() { try { if (x) {} } catch(e) {} return 1; }\");\n\n    // finally clauses may have side effects\n    foldSame(\n      \"function f() { try { if (x) { return a } } finally { a++ } return a; }\");\n    // but they don't matter if the result doesn't have side effects and can't\n    // be affect by side-effects.\n    fold(\"function f() { try { if (x) { return 1 } } finally {} return 1; }\",\n         \"function f() { try { if (x) {} } finally {} return 1; }\");\n\n    fold(\"function f() { switch(a){ case 1: return a; } return a; }\",\n         \"function f() { switch(a){ case 1: } return a; }\");\n\n    fold(\"function f() { switch(a){ \" +\n         \"  case 1: return a; case 2: return a; } return a; }\",\n         \"function f() { switch(a){ \" +\n         \"  case 1: break; case 2: } return a; }\");\n  }\n",
        "begin_line": 743,
        "end_line": 769,
        "comment": "",
        "child_ranges": [
            "(line 744,col 5)-(line 745,col 27)",
            "(line 746,col 5)-(line 746,col 43)",
            "(line 747,col 5)-(line 748,col 49)",
            "(line 749,col 5)-(line 750,col 76)",
            "(line 751,col 5)-(line 752,col 66)",
            "(line 755,col 5)-(line 756,col 80)",
            "(line 759,col 5)-(line 760,col 68)",
            "(line 762,col 5)-(line 763,col 60)",
            "(line 765,col 5)-(line 768,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java",
        "signature": "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest.testRemoveDuplicateThrow()",
        "snippet": "  public void testRemoveDuplicateThrow() {\n    foldSame(\"function f() { throw a; }\");\n    fold(\"function f() { if (x) { throw a } throw a; }\",\n         \"function f() { if (x) {} throw a; }\");\n    foldSame(\n      \"function f() { try { if (x) {throw a} } catch(e) {} throw a; }\");\n    foldSame(\n      \"function f() { try { if (x) {throw 1} } catch(e) {f()} throw 1; }\");\n    foldSame(\n      \"function f() { try { if (x) {throw 1} } catch(e) {f()} throw 1; }\");\n    foldSame(\n      \"function f() { try { if (x) {throw 1} } catch(e) {throw 1}}\");\n    fold(\n      \"function f() { try { if (x) {throw 1} } catch(e) {throw 1} throw 1; }\",\n      \"function f() { try { if (x) {throw 1} } catch(e) {} throw 1; }\");\n\n    // finally clauses may have side effects\n    foldSame(\n      \"function f() { try { if (x) { throw a } } finally { a++ } throw a; }\");\n    // but they don't matter if the result doesn't have side effects and can't\n    // be affect by side-effects.\n    fold(\"function f() { try { if (x) { throw 1 } } finally {} throw 1; }\",\n         \"function f() { try { if (x) {} } finally {} throw 1; }\");\n\n    fold(\"function f() { switch(a){ case 1: throw a; } throw a; }\",\n         \"function f() { switch(a){ case 1: } throw a; }\");\n\n    fold(\"function f() { switch(a){ \" +\n             \"case 1: throw a; case 2: throw a; } throw a; }\",\n         \"function f() { switch(a){ case 1: break; case 2: } throw a; }\");\n  }\n",
        "begin_line": 771,
        "end_line": 801,
        "comment": "",
        "child_ranges": [
            "(line 772,col 5)-(line 772,col 42)",
            "(line 773,col 5)-(line 774,col 48)",
            "(line 775,col 5)-(line 776,col 72)",
            "(line 777,col 5)-(line 778,col 75)",
            "(line 779,col 5)-(line 780,col 75)",
            "(line 781,col 5)-(line 782,col 69)",
            "(line 783,col 5)-(line 785,col 72)",
            "(line 788,col 5)-(line 789,col 78)",
            "(line 792,col 5)-(line 793,col 67)",
            "(line 795,col 5)-(line 796,col 59)",
            "(line 798,col 5)-(line 800,col 74)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java",
        "signature": "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest.testNestedIfCombine()",
        "snippet": "  public void testNestedIfCombine() {\n    fold(\"if(x)if(y){while(1){}}\", \"if(x&&y){while(1){}}\");\n    fold(\"if(x||z)if(y){while(1){}}\", \"if((x||z)&&y){while(1){}}\");\n    fold(\"if(x)if(y||z){while(1){}}\", \"if((x)&&(y||z)){while(1){}}\");\n    foldSame(\"if(x||z)if(y||z){while(1){}}\");\n    fold(\"if(x)if(y){if(z){while(1){}}}\", \"if(x&&y&&z){while(1){}}\");\n  }\n",
        "begin_line": 803,
        "end_line": 809,
        "comment": "",
        "child_ranges": [
            "(line 804,col 5)-(line 804,col 59)",
            "(line 805,col 5)-(line 805,col 67)",
            "(line 806,col 5)-(line 806,col 69)",
            "(line 807,col 5)-(line 807,col 45)",
            "(line 808,col 5)-(line 808,col 69)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java",
        "signature": "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest.testFoldTrueFalse()",
        "snippet": "  public void testFoldTrueFalse() {\n    fold(\"x = true\", \"x = !0\");\n    fold(\"x = false\", \"x = !1\");\n  }\n",
        "begin_line": 811,
        "end_line": 814,
        "comment": "",
        "child_ranges": [
            "(line 812,col 5)-(line 812,col 31)",
            "(line 813,col 5)-(line 813,col 32)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java",
        "signature": "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest.testIssue291()",
        "snippet": "  public void testIssue291() {\n    fold(\"if (true) { f.onchange(); }\", \"if (1) f.onchange();\");\n    foldSame(\"if (f) { f.onchange(); }\");\n    foldSame(\"if (f) { f.bar(); } else { f.onchange(); }\");\n    fold(\"if (f) { f.bonchange(); }\", \"f && f.bonchange();\");\n    foldSame(\"if (f) { f['x'](); }\");\n  }\n",
        "begin_line": 816,
        "end_line": 822,
        "comment": "",
        "child_ranges": [
            "(line 817,col 5)-(line 817,col 64)",
            "(line 818,col 5)-(line 818,col 41)",
            "(line 819,col 5)-(line 819,col 59)",
            "(line 820,col 5)-(line 820,col 61)",
            "(line 821,col 5)-(line 821,col 37)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java",
        "signature": "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest.testUndefined()",
        "snippet": "  public void testUndefined() {\n    foldSame(\"var x = undefined\");\n    foldSame(\"function f(f) {var undefined=2;var x = undefined;}\");\n    this.enableNormalize();\n    fold(\"var x = undefined\", \"var x=void 0\");\n    foldSame(\n        \"var undefined = 1;\" +\n        \"function f() {var undefined=2;var x = undefined;}\");\n    foldSame(\"function f(undefined) {}\");\n    foldSame(\"try {} catch(undefined) {}\");\n    foldSame(\"for (undefined in {}) {}\");\n    foldSame(\"undefined++;\");\n    fold(\"undefined += undefined;\", \"undefined += void 0;\");\n  }\n",
        "begin_line": 823,
        "end_line": 836,
        "comment": "",
        "child_ranges": [
            "(line 824,col 5)-(line 824,col 34)",
            "(line 825,col 5)-(line 825,col 67)",
            "(line 826,col 5)-(line 826,col 27)",
            "(line 827,col 5)-(line 827,col 46)",
            "(line 828,col 5)-(line 830,col 61)",
            "(line 831,col 5)-(line 831,col 41)",
            "(line 832,col 5)-(line 832,col 43)",
            "(line 833,col 5)-(line 833,col 41)",
            "(line 834,col 5)-(line 834,col 29)",
            "(line 835,col 5)-(line 835,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java",
        "signature": "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest.testSplitCommaExpressions()",
        "snippet": "  public void testSplitCommaExpressions() {\n    late = false;\n    // Don't try to split in expressions.\n    foldSame(\"while (foo(), !0) boo()\");\n    foldSame(\"var a = (foo(), !0);\");\n    foldSame(\"a = (foo(), !0);\");\n\n    // Don't try to split COMMA under LABELs.\n    foldSame(\"a:a(),b()\");\n\n    fold(\"(x=2), foo()\", \"x=2; foo()\");\n    fold(\"foo(), boo();\", \"foo(); boo()\");\n    fold(\"(a(), b()), (c(), d());\", \"a(); b(); (c(), d());\");\n    fold(\"a(); b(); (c(), d());\", \"a(); b(); c(); d();\");\n    fold(\"foo(), true\", \"foo();true\");\n    fold(\"foo();true\", \"foo();1\");\n    fold(\"function x(){foo(), !0}\", \"function x(){foo(); !0}\");\n    fold(\"function x(){foo(); !0}\", \"function x(){foo(); 1}\");\n  }\n",
        "begin_line": 838,
        "end_line": 856,
        "comment": "",
        "child_ranges": [
            "(line 839,col 5)-(line 839,col 17)",
            "(line 841,col 5)-(line 841,col 40)",
            "(line 842,col 5)-(line 842,col 37)",
            "(line 843,col 5)-(line 843,col 33)",
            "(line 846,col 5)-(line 846,col 26)",
            "(line 848,col 5)-(line 848,col 39)",
            "(line 849,col 5)-(line 849,col 42)",
            "(line 850,col 5)-(line 850,col 61)",
            "(line 851,col 5)-(line 851,col 57)",
            "(line 852,col 5)-(line 852,col 38)",
            "(line 853,col 5)-(line 853,col 34)",
            "(line 854,col 5)-(line 854,col 63)",
            "(line 855,col 5)-(line 855,col 62)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java",
        "signature": "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest.testComma1()",
        "snippet": "  public void testComma1() {\n    late = false;\n    fold(\"1, 2\", \"1; 2\");\n    fold(\"1; 2\", \"1; 1\");\n    late = true;\n    foldSame(\"1, 2\");\n  }\n",
        "begin_line": 858,
        "end_line": 864,
        "comment": "",
        "child_ranges": [
            "(line 859,col 5)-(line 859,col 17)",
            "(line 860,col 5)-(line 860,col 25)",
            "(line 861,col 5)-(line 861,col 25)",
            "(line 862,col 5)-(line 862,col 16)",
            "(line 863,col 5)-(line 863,col 21)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java",
        "signature": "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest.testComma2()",
        "snippet": "  public void testComma2() {\n    late = false;\n    test(\"1, a()\", \"1; a()\");\n    late = true;\n    foldSame(\"1, a()\");\n  }\n",
        "begin_line": 866,
        "end_line": 871,
        "comment": "",
        "child_ranges": [
            "(line 867,col 5)-(line 867,col 17)",
            "(line 868,col 5)-(line 868,col 29)",
            "(line 869,col 5)-(line 869,col 16)",
            "(line 870,col 5)-(line 870,col 23)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java",
        "signature": "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest.testComma3()",
        "snippet": "  public void testComma3() {\n    late = false;\n    test(\"1, a(), b()\", \"1; a(); b()\");\n    late = true;\n    foldSame(\"1, a(), b()\");\n  }\n",
        "begin_line": 873,
        "end_line": 878,
        "comment": "",
        "child_ranges": [
            "(line 874,col 5)-(line 874,col 17)",
            "(line 875,col 5)-(line 875,col 39)",
            "(line 876,col 5)-(line 876,col 16)",
            "(line 877,col 5)-(line 877,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java",
        "signature": "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest.testComma4()",
        "snippet": "  public void testComma4() {\n    late = false;\n    test(\"a(), b()\", \"a();b()\");\n    late = true;\n    foldSame(\"a(), b()\");\n  }\n",
        "begin_line": 880,
        "end_line": 885,
        "comment": "",
        "child_ranges": [
            "(line 881,col 5)-(line 881,col 17)",
            "(line 882,col 5)-(line 882,col 32)",
            "(line 883,col 5)-(line 883,col 16)",
            "(line 884,col 5)-(line 884,col 25)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java",
        "signature": "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest.testComma5()",
        "snippet": "  public void testComma5() {\n    late = false;\n    test(\"a(), b(), 1\", \"a();b();1\");\n    late = true;\n    foldSame(\"a(), b(), 1\");\n  }\n",
        "begin_line": 887,
        "end_line": 892,
        "comment": "",
        "child_ranges": [
            "(line 888,col 5)-(line 888,col 17)",
            "(line 889,col 5)-(line 889,col 37)",
            "(line 890,col 5)-(line 890,col 16)",
            "(line 891,col 5)-(line 891,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java",
        "signature": "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest.testObjectLiteral()",
        "snippet": "  public void testObjectLiteral() {\n    test(\"({})\", \"1\");\n    test(\"({a:1})\", \"1\");\n    testSame(\"({a:foo()})\");\n    testSame(\"({'a':foo()})\");\n  }\n",
        "begin_line": 894,
        "end_line": 899,
        "comment": "",
        "child_ranges": [
            "(line 895,col 5)-(line 895,col 22)",
            "(line 896,col 5)-(line 896,col 25)",
            "(line 897,col 5)-(line 897,col 28)",
            "(line 898,col 5)-(line 898,col 30)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java",
        "signature": "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest.testArrayLiteral()",
        "snippet": "  public void testArrayLiteral() {\n    test(\"([])\", \"1\");\n    test(\"([1])\", \"1\");\n    test(\"([a])\", \"1\");\n    testSame(\"([foo()])\");\n  }\n",
        "begin_line": 901,
        "end_line": 906,
        "comment": "",
        "child_ranges": [
            "(line 902,col 5)-(line 902,col 22)",
            "(line 903,col 5)-(line 903,col 23)",
            "(line 904,col 5)-(line 904,col 23)",
            "(line 905,col 5)-(line 905,col 26)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java",
        "signature": "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest.testStringArraySplitting()",
        "snippet": "  public void testStringArraySplitting() {\n    testSame(\"var x=['1','2','3','4']\");\n    testSame(\"var x=['1','2','3','4','5']\");\n    test(\"var x=['1','2','3','4','5','6']\",\n         \"var x='123456'.split('')\");\n    test(\"var x=['1','2','3','4','5','00']\",\n         \"var x='1 2 3 4 5 00'.split(' ')\");\n    test(\"var x=['1','2','3','4','5','6','7']\",\n        \"var x='1234567'.split('')\");\n    test(\"var x=['1','2','3','4','5','6','00']\",\n         \"var x='1 2 3 4 5 6 00'.split(' ')\");\n    test(\"var x=[' ,',',',',',',',',',',']\",\n         \"var x=' ,;,;,;,;,;,'.split(';')\");\n    test(\"var x=[',,',' ',',',',',',',',']\",\n         \"var x=',,; ;,;,;,;,'.split(';')\");\n    test(\"var x=['a,',' ',',',',',',',',']\",\n         \"var x='a,; ;,;,;,;,'.split(';')\");\n\n    // all possible delimiters used, leave it alone\n    testSame(\"var x=[',', ' ', ';', '{', '}']\");\n  }\n",
        "begin_line": 908,
        "end_line": 928,
        "comment": "",
        "child_ranges": [
            "(line 909,col 5)-(line 909,col 40)",
            "(line 910,col 5)-(line 910,col 44)",
            "(line 911,col 5)-(line 912,col 37)",
            "(line 913,col 5)-(line 914,col 44)",
            "(line 915,col 5)-(line 916,col 37)",
            "(line 917,col 5)-(line 918,col 46)",
            "(line 919,col 5)-(line 920,col 44)",
            "(line 921,col 5)-(line 922,col 44)",
            "(line 923,col 5)-(line 924,col 44)",
            "(line 927,col 5)-(line 927,col 48)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java",
        "signature": "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest.testRemoveElseCause()",
        "snippet": "  public void testRemoveElseCause() {\n    test(\"function f() {\" +\n         \" if(x) return 1;\" +\n         \" else if(x) return 2;\" +\n         \" else if(x) return 3 }\",\n         \"function f() {\" +\n         \" if(x) return 1;\" +\n         \"{ if(x) return 2;\" +\n         \"{ if(x) return 3 } } }\");\n  }\n",
        "begin_line": 930,
        "end_line": 939,
        "comment": "",
        "child_ranges": [
            "(line 931,col 5)-(line 938,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java",
        "signature": "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest.testRemoveElseCause1()",
        "snippet": "  public void testRemoveElseCause1() {\n    test(\"function f() { if (x) throw 1; else f() }\",\n         \"function f() { if (x) throw 1; { f() } }\");\n  }\n",
        "begin_line": 942,
        "end_line": 945,
        "comment": "",
        "child_ranges": [
            "(line 943,col 5)-(line 944,col 53)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java",
        "signature": "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest.testRemoveElseCause2()",
        "snippet": "  public void testRemoveElseCause2() {\n    test(\"function f() { if (x) return 1; else f() }\",\n         \"function f() { if (x) return 1; { f() } }\");\n    test(\"function f() { if (x) return; else f() }\",\n         \"function f() { if (x) {} else { f() } }\");\n    // This case is handled by minimize exit points.\n    testSame(\"function f() { if (x) return; f() }\");\n  }\n",
        "begin_line": 947,
        "end_line": 954,
        "comment": "",
        "child_ranges": [
            "(line 948,col 5)-(line 949,col 54)",
            "(line 950,col 5)-(line 951,col 52)",
            "(line 953,col 5)-(line 953,col 52)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java",
        "signature": "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest.testRemoveElseCause3()",
        "snippet": "  public void testRemoveElseCause3() {\n    testSame(\"function f() { a:{if (x) break a; else f() } }\");\n    testSame(\"function f() { if (x) { a:{ break a } } else f() }\");\n    testSame(\"function f() { if (x) a:{ break a } else f() }\");\n  }\n",
        "begin_line": 956,
        "end_line": 960,
        "comment": "",
        "child_ranges": [
            "(line 957,col 5)-(line 957,col 63)",
            "(line 958,col 5)-(line 958,col 67)",
            "(line 959,col 5)-(line 959,col 63)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java",
        "signature": "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest.testRemoveElseCause4()",
        "snippet": "  public void testRemoveElseCause4() {\n    testSame(\"function f() { if (x) { if (y) { return 1; } } else f() }\");\n  }\n",
        "begin_line": 962,
        "end_line": 964,
        "comment": "",
        "child_ranges": [
            "(line 963,col 5)-(line 963,col 74)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java",
        "signature": "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest.testIssue925()",
        "snippet": "  public void testIssue925() {\n    test(\n        \"if (x[--y] === 1) {\\n\" +\n        \"    x[y] = 0;\\n\" +\n        \"} else {\\n\" +\n        \"    x[y] = 1;\\n\" +\n        \"}\",\n        \"(x[--y] === 1) ? x[y] = 0 : x[y] = 1;\");\n\n    test(\n        \"if (x[--y]) {\\n\" +\n        \"    a = 0;\\n\" +\n        \"} else {\\n\" +\n        \"    a = 1;\\n\" +\n        \"}\",\n        \"a = (x[--y]) ? 0 : 1;\");\n\n    test(\"if (x++) { x += 2 } else { x += 3 }\",\n         \"x++ ? x += 2 : x += 3\");\n\n    test(\"if (x++) { x = x + 2 } else { x = x + 3 }\",\n        \"x = x++ ? x + 2 : x + 3\");\n  }\n",
        "begin_line": 966,
        "end_line": 988,
        "comment": "",
        "child_ranges": [
            "(line 967,col 5)-(line 973,col 49)",
            "(line 975,col 5)-(line 981,col 33)",
            "(line 983,col 5)-(line 984,col 34)",
            "(line 986,col 5)-(line 987,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java",
        "signature": "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest.testBindToCall1()",
        "snippet": "  public void testBindToCall1() {\n    test(\"(goog.bind(f))()\", \"f()\");\n    test(\"(goog.bind(f,a))()\", \"f.call(a)\");\n    test(\"(goog.bind(f,a,b))()\", \"f.call(a,b)\");\n\n    test(\"(goog.bind(f))(a)\", \"f(a)\");\n    test(\"(goog.bind(f,a))(b)\", \"f.call(a,b)\");\n    test(\"(goog.bind(f,a,b))(c)\", \"f.call(a,b,c)\");\n\n    test(\"(goog.partial(f))()\", \"f()\");\n    test(\"(goog.partial(f,a))()\", \"f(a)\");\n    test(\"(goog.partial(f,a,b))()\", \"f(a,b)\");\n\n    test(\"(goog.partial(f))(a)\", \"f(a)\");\n    test(\"(goog.partial(f,a))(b)\", \"f(a,b)\");\n    test(\"(goog.partial(f,a,b))(c)\", \"f(a,b,c)\");\n\n    test(\"((function(){}).bind())()\", \"((function(){}))()\");\n    test(\"((function(){}).bind(a))()\", \"((function(){})).call(a)\");\n    test(\"((function(){}).bind(a,b))()\", \"((function(){})).call(a,b)\");\n\n    test(\"((function(){}).bind())(a)\", \"((function(){}))(a)\");\n    test(\"((function(){}).bind(a))(b)\", \"((function(){})).call(a,b)\");\n    test(\"((function(){}).bind(a,b))(c)\", \"((function(){})).call(a,b,c)\");\n\n    // Without using type information we don't know \"f\" is a function.\n    testSame(\"(f.bind())()\");\n    testSame(\"(f.bind(a))()\");\n    testSame(\"(f.bind())(a)\");\n    testSame(\"(f.bind(a))(b)\");\n\n    // Don't rewrite if the bind isn't the immediate call target\n    testSame(\"(goog.bind(f)).call(g)\");\n  }\n",
        "begin_line": 990,
        "end_line": 1023,
        "comment": "",
        "child_ranges": [
            "(line 991,col 5)-(line 991,col 36)",
            "(line 992,col 5)-(line 992,col 44)",
            "(line 993,col 5)-(line 993,col 48)",
            "(line 995,col 5)-(line 995,col 38)",
            "(line 996,col 5)-(line 996,col 47)",
            "(line 997,col 5)-(line 997,col 51)",
            "(line 999,col 5)-(line 999,col 39)",
            "(line 1000,col 5)-(line 1000,col 42)",
            "(line 1001,col 5)-(line 1001,col 46)",
            "(line 1003,col 5)-(line 1003,col 41)",
            "(line 1004,col 5)-(line 1004,col 45)",
            "(line 1005,col 5)-(line 1005,col 49)",
            "(line 1007,col 5)-(line 1007,col 60)",
            "(line 1008,col 5)-(line 1008,col 67)",
            "(line 1009,col 5)-(line 1009,col 71)",
            "(line 1011,col 5)-(line 1011,col 62)",
            "(line 1012,col 5)-(line 1012,col 70)",
            "(line 1013,col 5)-(line 1013,col 74)",
            "(line 1016,col 5)-(line 1016,col 29)",
            "(line 1017,col 5)-(line 1017,col 30)",
            "(line 1018,col 5)-(line 1018,col 30)",
            "(line 1019,col 5)-(line 1019,col 31)",
            "(line 1022,col 5)-(line 1022,col 39)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java",
        "signature": "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest.testBindToCall2()",
        "snippet": "  public void testBindToCall2() {\n    test(\"(goog$bind(f))()\", \"f()\");\n    test(\"(goog$bind(f,a))()\", \"f.call(a)\");\n    test(\"(goog$bind(f,a,b))()\", \"f.call(a,b)\");\n\n    test(\"(goog$bind(f))(a)\", \"f(a)\");\n    test(\"(goog$bind(f,a))(b)\", \"f.call(a,b)\");\n    test(\"(goog$bind(f,a,b))(c)\", \"f.call(a,b,c)\");\n\n    test(\"(goog$partial(f))()\", \"f()\");\n    test(\"(goog$partial(f,a))()\", \"f(a)\");\n    test(\"(goog$partial(f,a,b))()\", \"f(a,b)\");\n\n    test(\"(goog$partial(f))(a)\", \"f(a)\");\n    test(\"(goog$partial(f,a))(b)\", \"f(a,b)\");\n    test(\"(goog$partial(f,a,b))(c)\", \"f(a,b,c)\");\n\n    // Don't rewrite if the bind isn't the immediate call target\n    testSame(\"(goog$bind(f)).call(g)\");\n  }\n",
        "begin_line": 1025,
        "end_line": 1044,
        "comment": "",
        "child_ranges": [
            "(line 1026,col 5)-(line 1026,col 36)",
            "(line 1027,col 5)-(line 1027,col 44)",
            "(line 1028,col 5)-(line 1028,col 48)",
            "(line 1030,col 5)-(line 1030,col 38)",
            "(line 1031,col 5)-(line 1031,col 47)",
            "(line 1032,col 5)-(line 1032,col 51)",
            "(line 1034,col 5)-(line 1034,col 39)",
            "(line 1035,col 5)-(line 1035,col 42)",
            "(line 1036,col 5)-(line 1036,col 46)",
            "(line 1038,col 5)-(line 1038,col 41)",
            "(line 1039,col 5)-(line 1039,col 45)",
            "(line 1040,col 5)-(line 1040,col 49)",
            "(line 1043,col 5)-(line 1043,col 39)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java",
        "signature": "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest.testBindToCall3()",
        "snippet": "  public void testBindToCall3() {\n    // TODO(johnlenz): The code generator wraps free calls with (0,...) to\n    // prevent leaking \"this\", but the parser doesn't unfold it, making a\n    // AST comparison fail.  For now do a string comparison to validate the\n    // correct code is in fact generated.\n    // The FREE call wrapping should be moved out of the code generator\n    // and into a denormalizing pass.\n    new StringCompareTestCase().testBindToCall3();\n  }\n",
        "begin_line": 1046,
        "end_line": 1054,
        "comment": "",
        "child_ranges": [
            "(line 1053,col 5)-(line 1053,col 50)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java",
        "signature": "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest.testSimpleFunctionCall()",
        "snippet": "  public void testSimpleFunctionCall() {\n    test(\"var a = String(23)\", \"var a = '' + 23\");\n    test(\"var a = String('hello')\", \"var a = '' + 'hello'\");\n    testSame(\"var a = String('hello', bar());\");\n    testSame(\"var a = String({valueOf: function() { return 1; }});\");\n  }\n",
        "begin_line": 1056,
        "end_line": 1061,
        "comment": "",
        "child_ranges": [
            "(line 1057,col 5)-(line 1057,col 50)",
            "(line 1058,col 5)-(line 1058,col 60)",
            "(line 1059,col 5)-(line 1059,col 48)",
            "(line 1060,col 5)-(line 1060,col 69)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java",
        "signature": "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest.StringCompareTestCase.StringCompareTestCase()",
        "snippet": "    StringCompareTestCase() {\n      super(\"\", false);\n    }\n",
        "begin_line": 1065,
        "end_line": 1067,
        "comment": "",
        "child_ranges": [
            "(line 1066,col 7)-(line 1066,col 23)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java",
        "signature": "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest.StringCompareTestCase.getProcessor(com.google.javascript.jscomp.Compiler)",
        "snippet": "    @Override\n    protected CompilerPass getProcessor(Compiler compiler) {\n      CompilerPass peepholePass =\n        new PeepholeOptimizationsPass(compiler,\n            new PeepholeSubstituteAlternateSyntax(false));\n      return peepholePass;\n    }\n",
        "begin_line": 1069,
        "end_line": 1075,
        "comment": "",
        "child_ranges": [
            "(line 1071,col 7)-(line 1073,col 58)",
            "(line 1074,col 7)-(line 1074,col 26)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java",
        "signature": "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest.StringCompareTestCase.testBindToCall3()",
        "snippet": "    public void testBindToCall3() {\n      test(\"(goog.bind(f.m))()\", \"(0,f.m)()\");\n      test(\"(goog.bind(f.m,a))()\", \"f.m.call(a)\");\n\n      test(\"(goog.bind(f.m))(a)\", \"(0,f.m)(a)\");\n      test(\"(goog.bind(f.m,a))(b)\", \"f.m.call(a,b)\");\n\n      test(\"(goog.partial(f.m))()\", \"(0,f.m)()\");\n      test(\"(goog.partial(f.m,a))()\", \"(0,f.m)(a)\");\n\n      test(\"(goog.partial(f.m))(a)\", \"(0,f.m)(a)\");\n      test(\"(goog.partial(f.m,a))(b)\", \"(0,f.m)(a,b)\");\n\n      // Without using type information we don't know \"f\" is a function.\n      testSame(\"f.m.bind()()\");\n      testSame(\"f.m.bind(a)()\");\n      testSame(\"f.m.bind()(a)\");\n      testSame(\"f.m.bind(a)(b)\");\n\n      // Don't rewrite if the bind isn't the immediate call target\n      testSame(\"goog.bind(f.m).call(g)\");\n    }\n",
        "begin_line": 1077,
        "end_line": 1098,
        "comment": "",
        "child_ranges": [
            "(line 1078,col 7)-(line 1078,col 46)",
            "(line 1079,col 7)-(line 1079,col 50)",
            "(line 1081,col 7)-(line 1081,col 48)",
            "(line 1082,col 7)-(line 1082,col 53)",
            "(line 1084,col 7)-(line 1084,col 49)",
            "(line 1085,col 7)-(line 1085,col 52)",
            "(line 1087,col 7)-(line 1087,col 51)",
            "(line 1088,col 7)-(line 1088,col 55)",
            "(line 1091,col 7)-(line 1091,col 31)",
            "(line 1092,col 7)-(line 1092,col 32)",
            "(line 1093,col 7)-(line 1093,col 32)",
            "(line 1094,col 7)-(line 1094,col 33)",
            "(line 1097,col 7)-(line 1097,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.CompilerTestCase(java.lang.String, boolean)",
        "snippet": "  protected CompilerTestCase(String externs, boolean compareAsTree) {\n    this.externsInputs = ImmutableList.of(\n        SourceFile.fromCode(\"externs\", externs));\n    this.compareAsTree = compareAsTree;\n    this.parseTypeInfo = false;\n  }\n",
        "begin_line": 128,
        "end_line": 133,
        "comment": "\n   * Constructs a test.\n   *\n   * @param externs Externs JS as a string\n   * @param compareAsTree True to compare output & expected as a node tree.\n   *     99% of the time you want to compare as a tree. There are a few\n   *     special cases where you don't, like if you want to test the code\n   *     printing of \"unnatural\" syntax trees. For example,\n   *\n   * <pre>\n   * IF\n   *   IF\n   *     STATEMENT\n   * ELSE\n   *   STATEMENT\n   * </pre>\n   ",
        "child_ranges": [
            "(line 129,col 5)-(line 130,col 49)",
            "(line 131,col 5)-(line 131,col 39)",
            "(line 132,col 5)-(line 132,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.CompilerTestCase(java.lang.String)",
        "snippet": "  protected CompilerTestCase(String externs) {\n    this(externs, true);\n  }\n",
        "begin_line": 139,
        "end_line": 141,
        "comment": "\n   * Constructs a test. Uses AST comparison.\n   * @param externs Externs JS as a string\n   ",
        "child_ranges": [
            "(line 140,col 5)-(line 140,col 24)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.CompilerTestCase()",
        "snippet": "  protected CompilerTestCase() {\n    this(\"\", true);\n  }\n",
        "begin_line": 146,
        "end_line": 148,
        "comment": "\n   * Constructs a test. Uses AST comparison and no externs.\n   ",
        "child_ranges": [
            "(line 147,col 5)-(line 147,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.tearDown()",
        "snippet": "  @Override protected void tearDown() throws Exception {\n    super.tearDown();\n    expectParseWarningsThisTest = false;\n  }\n",
        "begin_line": 150,
        "end_line": 153,
        "comment": "",
        "child_ranges": [
            "(line 151,col 5)-(line 151,col 21)",
            "(line 152,col 5)-(line 152,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.getProcessor(com.google.javascript.jscomp.Compiler)",
        "snippet": "  protected abstract CompilerPass getProcessor(Compiler compiler);\n",
        "begin_line": 161,
        "end_line": 161,
        "comment": "\n   * Gets the compiler pass instance to use for a test.\n   *\n   * @param compiler The compiler\n   * @return The pass to test\n   ",
        "child_ranges": []
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.getOptions()",
        "snippet": "  protected CompilerOptions getOptions() {\n    return getOptions(new CompilerOptions());\n  }\n",
        "begin_line": 168,
        "end_line": 170,
        "comment": "\n   * Gets the compiler options to use for this test. Use getProcessor to\n   * determine what passes should be run.\n   ",
        "child_ranges": [
            "(line 169,col 5)-(line 169,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.getOptions(com.google.javascript.jscomp.CompilerOptions)",
        "snippet": "  protected CompilerOptions getOptions(CompilerOptions options) {\n    if (this.acceptES5) {\n      options.setLanguageIn(LanguageMode.ECMASCRIPT5);\n    }\n\n    // This doesn't affect whether checkSymbols is run--it just affects\n    // whether variable warnings are filtered.\n    options.checkSymbols = true;\n\n    options.setWarningLevel(\n        DiagnosticGroups.MISSING_PROPERTIES, CheckLevel.WARNING);\n    options.setWarningLevel(\n        DiagnosticGroups.INVALID_CASTS, CheckLevel.WARNING);\n    options.setCodingConvention(getCodingConvention());\n    return options;\n  }\n",
        "begin_line": 176,
        "end_line": 191,
        "comment": "\n   * Gets the compiler options to use for this test. Use getProcessor to\n   * determine what passes should be run.\n   ",
        "child_ranges": [
            "(line 177,col 5)-(line 179,col 5)",
            "(line 183,col 5)-(line 183,col 32)",
            "(line 185,col 5)-(line 186,col 65)",
            "(line 187,col 5)-(line 188,col 60)",
            "(line 189,col 5)-(line 189,col 55)",
            "(line 190,col 5)-(line 190,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.getCodingConvention()",
        "snippet": "  protected CodingConvention getCodingConvention() {\n    return new GoogleCodingConvention();\n  }\n",
        "begin_line": 193,
        "end_line": 195,
        "comment": "",
        "child_ranges": [
            "(line 194,col 5)-(line 194,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.setFilename(java.lang.String)",
        "snippet": "  public void setFilename(String filename) {\n    this.filename = filename;\n  }\n",
        "begin_line": 197,
        "end_line": 199,
        "comment": "",
        "child_ranges": [
            "(line 198,col 5)-(line 198,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.getNumRepetitions()",
        "snippet": "  protected int getNumRepetitions() {\n    // Since most compiler passes should be idempotent, we run each pass twice\n    // by default.\n    return 2;\n  }\n",
        "begin_line": 205,
        "end_line": 209,
        "comment": "\n   * Returns the number of times the pass should be run before results are\n   * verified.\n   ",
        "child_ranges": [
            "(line 208,col 5)-(line 208,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.allowSourcelessWarnings()",
        "snippet": "  void allowSourcelessWarnings() {\n    allowSourcelessWarnings = true;\n  }\n",
        "begin_line": 212,
        "end_line": 214,
        "comment": " Expect warnings without source information. ",
        "child_ranges": [
            "(line 213,col 5)-(line 213,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.getLastCompiler()",
        "snippet": "  Compiler getLastCompiler() {\n    return lastCompiler;\n  }\n",
        "begin_line": 217,
        "end_line": 219,
        "comment": " The most recently used JSComp instance. ",
        "child_ranges": [
            "(line 218,col 5)-(line 218,col 24)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.enableEcmaScript5(boolean)",
        "snippet": "  protected void enableEcmaScript5(boolean acceptES5) {\n    this.acceptES5 = acceptES5;\n  }\n",
        "begin_line": 224,
        "end_line": 226,
        "comment": "\n   * Whether to allow ECMASCRIPT5 source parsing.\n   ",
        "child_ranges": [
            "(line 225,col 5)-(line 225,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.allowExternsChanges(boolean)",
        "snippet": "  protected void allowExternsChanges(boolean allowExternsChanges) {\n    this.allowExternsChanges = allowExternsChanges;\n  }\n",
        "begin_line": 231,
        "end_line": 233,
        "comment": "\n   * Whether to allow externs changes.\n   ",
        "child_ranges": [
            "(line 232,col 5)-(line 232,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.enableTypeCheck(com.google.javascript.jscomp.CheckLevel)",
        "snippet": "  public void enableTypeCheck(CheckLevel level) {\n    typeCheckEnabled  = true;\n    typeCheckLevel = level;\n  }\n",
        "begin_line": 243,
        "end_line": 246,
        "comment": "\n   * Perform type checking before running the test pass. This will check\n   * for type errors and annotate nodes with type information.\n   *\n   * @param level the level of severity to report for type errors\n   *\n   * @see TypeCheck\n   ",
        "child_ranges": [
            "(line 244,col 5)-(line 244,col 29)",
            "(line 245,col 5)-(line 245,col 27)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.enableLineNumberCheck(boolean)",
        "snippet": "  public void enableLineNumberCheck(boolean newVal) {\n    checkLineNumbers = newVal;\n  }\n",
        "begin_line": 251,
        "end_line": 253,
        "comment": "\n   * Check to make sure that line numbers were preserved.\n   ",
        "child_ranges": [
            "(line 252,col 5)-(line 252,col 30)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.disableTypeCheck()",
        "snippet": "  void disableTypeCheck() {\n    typeCheckEnabled  = false;\n  }\n",
        "begin_line": 260,
        "end_line": 262,
        "comment": "\n   * Do not run type checking before running the test pass.\n   *\n   * @see TypeCheck\n   ",
        "child_ranges": [
            "(line 261,col 5)-(line 261,col 30)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.enableClosurePass()",
        "snippet": "  void enableClosurePass() {\n    closurePassEnabled = true;\n  }\n",
        "begin_line": 268,
        "end_line": 270,
        "comment": " TODO(nicksantos): Fix other passes to use this when appropriate.",
        "child_ranges": [
            "(line 269,col 5)-(line 269,col 30)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.enableNormalize()",
        "snippet": "  protected void enableNormalize() {\n    enableNormalize(true);\n  }\n",
        "begin_line": 278,
        "end_line": 280,
        "comment": "\n   * Perform AST normalization before running the test pass, and anti-normalize\n   * after running it.\n   *\n   * @see Normalize\n   ",
        "child_ranges": [
            "(line 279,col 5)-(line 279,col 26)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.enableNormalize(boolean)",
        "snippet": "  protected void enableNormalize(boolean normalizeExpected) {\n    normalizeEnabled = true;\n    this.normalizeExpected = normalizeExpected;\n  }\n",
        "begin_line": 290,
        "end_line": 293,
        "comment": "\n   * Perform AST normalization before running the test pass, and anti-normalize\n   * after running it.\n   *\n   * @param normalizeExpected Whether to perform normalization on the\n   * expected JS result.\n   * @see Normalize\n   ",
        "child_ranges": [
            "(line 291,col 5)-(line 291,col 28)",
            "(line 292,col 5)-(line 292,col 47)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.disableNormalize()",
        "snippet": "  protected void disableNormalize() {\n    normalizeEnabled = false;\n  }\n",
        "begin_line": 299,
        "end_line": 301,
        "comment": "\n   * Don't perform AST normalization before running the test pass.\n   * @see Normalize\n   ",
        "child_ranges": [
            "(line 300,col 5)-(line 300,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.enableMarkNoSideEffects()",
        "snippet": "  void enableMarkNoSideEffects() {\n    markNoSideEffects  = true;\n  }\n",
        "begin_line": 308,
        "end_line": 310,
        "comment": "\n   * Run the MarkSideEffectCalls pass before running the test pass.\n   *\n   * @see MarkNoSideEffectCalls\n   ",
        "child_ranges": [
            "(line 309,col 5)-(line 309,col 30)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.enableAstValidation(boolean)",
        "snippet": "  protected void enableAstValidation(boolean validate) {\n    astValidationEnabled = validate;\n  }\n",
        "begin_line": 315,
        "end_line": 317,
        "comment": "\n   * Whether to allow Validate the AST after each run of the pass.\n   ",
        "child_ranges": [
            "(line 316,col 5)-(line 316,col 36)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.setExpectParseWarningsThisTest()",
        "snippet": "  protected void setExpectParseWarningsThisTest() {\n    expectParseWarningsThisTest = true;\n  }\n",
        "begin_line": 320,
        "end_line": 322,
        "comment": " Whether we should ignore parse warnings for the current test method. ",
        "child_ranges": [
            "(line 321,col 5)-(line 321,col 39)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.createTypeCheck(com.google.javascript.jscomp.Compiler, com.google.javascript.jscomp.CheckLevel)",
        "snippet": "  private static TypeCheck createTypeCheck(Compiler compiler,\n      CheckLevel level) {\n    ReverseAbstractInterpreter rai =\n        new SemanticReverseAbstractInterpreter(compiler.getCodingConvention(),\n            compiler.getTypeRegistry());\n\n    return new TypeCheck(compiler, rai, compiler.getTypeRegistry(),\n        level, CheckLevel.OFF);\n  }\n",
        "begin_line": 325,
        "end_line": 333,
        "comment": " Returns a newly created TypeCheck. ",
        "child_ranges": [
            "(line 327,col 5)-(line 329,col 40)",
            "(line 331,col 5)-(line 332,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.lang.String, java.lang.String)",
        "snippet": "  public void test(String js, String expected) {\n    test(js, expected, (DiagnosticType) null);\n  }\n",
        "begin_line": 341,
        "end_line": 343,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output.\n   *\n   * @param js Input\n   * @param expected Expected JS output\n   ",
        "child_ranges": [
            "(line 342,col 5)-(line 342,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.lang.String, java.lang.String, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void test(String js, String expected, DiagnosticType error) {\n    test(js, expected, error, null);\n  }\n",
        "begin_line": 353,
        "end_line": 355,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output,\n   * or that an expected error is encountered.\n   *\n   * @param js Input\n   * @param expected Expected output, or null if an error is expected\n   * @param error Expected error, or null if no error is expected\n   ",
        "child_ranges": [
            "(line 354,col 5)-(line 354,col 36)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.lang.String, java.lang.String, com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType, java.lang.String)",
        "snippet": "  public void test(String js, String expected, DiagnosticType error,\n                   DiagnosticType warning, String description) {\n    test(externsInputs, js, expected, error, warning, description);\n  }\n",
        "begin_line": 368,
        "end_line": 371,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output,\n   * or that an expected error is encountered.\n   *\n   * @param js Input\n   * @param expected Expected output, or null if an error is expected\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   * @param description The content of the error expected\n   ",
        "child_ranges": [
            "(line 370,col 5)-(line 370,col 67)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.lang.String, java.lang.String, com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void test(String js, String expected,\n                   DiagnosticType error, DiagnosticType warning) {\n    test(externsInputs, js, expected, error, warning, null);\n  }\n",
        "begin_line": 383,
        "end_line": 386,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output\n   * and (optionally) that an expected warning is issued. Or, if an error is\n   * expected, this method just verifies that the error is encountered.\n   *\n   * @param js Input\n   * @param expected Expected output, or null if an error is expected\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   ",
        "child_ranges": [
            "(line 385,col 5)-(line 385,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.lang.String, java.lang.String, java.lang.String, com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void test(String externs, String js, String expected,\n                   DiagnosticType error, DiagnosticType warning) {\n    test(externs, js, expected, error, warning, null);\n  }\n",
        "begin_line": 399,
        "end_line": 402,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output\n   * and (optionally) that an expected warning is issued. Or, if an error is\n   * expected, this method just verifies that the error is encountered.\n   *\n   * @param externs Externs input\n   * @param js Input\n   * @param expected Expected output, or null if an error is expected\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   ",
        "child_ranges": [
            "(line 401,col 5)-(line 401,col 54)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.lang.String, java.lang.String, java.lang.String, com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType, java.lang.String)",
        "snippet": "  public void test(String externs, String js, String expected,\n                   DiagnosticType error, DiagnosticType warning,\n                   String description) {\n    List<SourceFile> externsInputs = ImmutableList.of(\n        SourceFile.fromCode(\"externs\", externs));\n    test(externsInputs, js, expected, error, warning, description);\n  }\n",
        "begin_line": 418,
        "end_line": 424,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output\n   * and (optionally) that an expected warning is issued. Or, if an error is\n   * expected, this method just verifies that the error is encountered.\n   *\n   * @param externs Externs input\n   * @param js Input\n   * @param expected Expected output, or null if an error is expected\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   * @param description The description of the expected warning,\n   *      or null if no warning is expected or if the warning's description\n   *      should not be examined\n   ",
        "child_ranges": [
            "(line 421,col 5)-(line 422,col 49)",
            "(line 423,col 5)-(line 423,col 67)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.util.List<com.google.javascript.jscomp.SourceFile>, java.lang.String, java.lang.String, com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType, java.lang.String)",
        "snippet": "  public void test(List<SourceFile> externs, String js, String expected,\n                   DiagnosticType error,\n                   DiagnosticType warning, String description) {\n    Compiler compiler = createCompiler();\n    lastCompiler = compiler;\n\n    CompilerOptions options = getOptions();\n\n    if (this.acceptES5) {\n      options.setLanguageIn(LanguageMode.ECMASCRIPT5);\n    }\n    // Note that in this context, turning on the checkTypes option won't\n    // actually cause the type check to run.\n    options.checkTypes = parseTypeInfo;\n    compiler.init(externs, ImmutableList.of(\n        SourceFile.fromCode(filename, js)), options);\n\n    BaseJSTypeTestCase.addNativeProperties(compiler.getTypeRegistry());\n\n    test(compiler, maybeCreateArray(expected), error, warning, description);\n  }\n",
        "begin_line": 440,
        "end_line": 460,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output\n   * and (optionally) that an expected warning is issued. Or, if an error is\n   * expected, this method just verifies that the error is encountered.\n   *\n   * @param externs Externs inputs\n   * @param js Input\n   * @param expected Expected output, or null if an error is expected\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   * @param description The description of the expected warning,\n   *      or null if no warning is expected or if the warning's description\n   *      should not be examined\n   ",
        "child_ranges": [
            "(line 443,col 5)-(line 443,col 41)",
            "(line 444,col 5)-(line 444,col 28)",
            "(line 446,col 5)-(line 446,col 43)",
            "(line 448,col 5)-(line 450,col 5)",
            "(line 453,col 5)-(line 453,col 39)",
            "(line 454,col 5)-(line 455,col 53)",
            "(line 457,col 5)-(line 457,col 71)",
            "(line 459,col 5)-(line 459,col 76)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.maybeCreateArray(java.lang.String)",
        "snippet": "  private String[] maybeCreateArray(String expected) {\n    if (expected != null) {\n      return new String[] { expected };\n    }\n    return null;\n  }\n",
        "begin_line": 462,
        "end_line": 467,
        "comment": "",
        "child_ranges": [
            "(line 463,col 5)-(line 465,col 5)",
            "(line 466,col 5)-(line 466,col 16)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.lang.String[], java.lang.String[])",
        "snippet": "  public void test(String[] js, String[] expected) {\n    test(js, expected, null);\n  }\n",
        "begin_line": 475,
        "end_line": 477,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output.\n   *\n   * @param js Inputs\n   * @param expected Expected JS output\n   ",
        "child_ranges": [
            "(line 476,col 5)-(line 476,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.lang.String[], java.lang.String[], com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void test(String[] js, String[] expected, DiagnosticType error) {\n    test(js, expected, error, null);\n  }\n",
        "begin_line": 487,
        "end_line": 489,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output,\n   * or that an expected error is encountered.\n   *\n   * @param js Inputs\n   * @param expected Expected JS output\n   * @param error Expected error, or null if no error is expected\n   ",
        "child_ranges": [
            "(line 488,col 5)-(line 488,col 36)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.lang.String[], java.lang.String[], com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void test(String[] js, String[] expected, DiagnosticType error,\n                   DiagnosticType warning) {\n    test(js, expected, error, warning, null);\n  }\n",
        "begin_line": 501,
        "end_line": 504,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output\n   * and (optionally) that an expected warning is issued. Or, if an error is\n   * expected, this method just verifies that the error is encountered.\n   *\n   * @param js Inputs\n   * @param expected Expected JS output\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   ",
        "child_ranges": [
            "(line 503,col 5)-(line 503,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.lang.String[], java.lang.String[], com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType, java.lang.String)",
        "snippet": "  public void test(String[] js, String[] expected, DiagnosticType error,\n                   DiagnosticType warning, String description) {\n    Compiler compiler = createCompiler();\n    lastCompiler = compiler;\n\n    List<SourceFile> inputs = Lists.newArrayList();\n    for (int i = 0; i < js.length; i++) {\n      inputs.add(SourceFile.fromCode(\"input\" + i, js[i]));\n    }\n    compiler.init(externsInputs, inputs, getOptions());\n    test(compiler, expected, error, warning, description);\n  }\n",
        "begin_line": 519,
        "end_line": 530,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output\n   * and (optionally) that an expected warning is issued. Or, if an error is\n   * expected, this method just verifies that the error is encountered.\n   *\n   * @param js Inputs\n   * @param expected Expected JS output\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   * @param description The description of the expected warning,\n   *      or null if no warning is expected or if the warning's description\n   *      should not be examined\n   ",
        "child_ranges": [
            "(line 521,col 5)-(line 521,col 41)",
            "(line 522,col 5)-(line 522,col 28)",
            "(line 524,col 5)-(line 524,col 51)",
            "(line 525,col 5)-(line 527,col 5)",
            "(line 528,col 5)-(line 528,col 55)",
            "(line 529,col 5)-(line 529,col 58)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(com.google.javascript.jscomp.JSModule[], java.lang.String[])",
        "snippet": "  public void test(JSModule[] modules, String[] expected) {\n    test(modules, expected, null);\n  }\n",
        "begin_line": 538,
        "end_line": 540,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output.\n   *\n   * @param modules Module inputs\n   * @param expected Expected JS outputs (one per module)\n   ",
        "child_ranges": [
            "(line 539,col 5)-(line 539,col 34)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(com.google.javascript.jscomp.JSModule[], java.lang.String[], com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void test(JSModule[] modules, String[] expected,\n      DiagnosticType error) {\n    test(modules, expected, error, null);\n  }\n",
        "begin_line": 550,
        "end_line": 553,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output,\n   * or that an expected error is encountered.\n   *\n   * @param modules Module inputs\n   * @param expected Expected JS outputs (one per module)\n   * @param error Expected error, or null if no error is expected\n   ",
        "child_ranges": [
            "(line 552,col 5)-(line 552,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(com.google.javascript.jscomp.JSModule[], java.lang.String[], com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void test(JSModule[] modules, String[] expected,\n                   DiagnosticType error, DiagnosticType warning) {\n    Compiler compiler = createCompiler();\n    lastCompiler = compiler;\n\n    compiler.initModules(\n        externsInputs, Lists.newArrayList(modules), getOptions());\n    test(compiler, expected, error, warning);\n  }\n",
        "begin_line": 565,
        "end_line": 573,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output\n   * and (optionally) that an expected warning is issued. Or, if an error is\n   * expected, this method just verifies that the error is encountered.\n   *\n   * @param modules Module inputs\n   * @param expected Expected JS outputs (one per module)\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   ",
        "child_ranges": [
            "(line 567,col 5)-(line 567,col 41)",
            "(line 568,col 5)-(line 568,col 28)",
            "(line 570,col 5)-(line 571,col 66)",
            "(line 572,col 5)-(line 572,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(java.lang.String)",
        "snippet": "  public void testSame(String js) {\n    test(js, js);\n  }\n",
        "begin_line": 580,
        "end_line": 582,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as its input.\n   *\n   * @param js Input and output\n   ",
        "child_ranges": [
            "(line 581,col 5)-(line 581,col 17)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(java.lang.String, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void testSame(String js, DiagnosticType warning) {\n    test(js, js, null, warning);\n  }\n",
        "begin_line": 591,
        "end_line": 593,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as its input\n   * and (optionally) that an expected warning is issued.\n   *\n   * @param js Input and output\n   * @param warning Expected warning, or null if no warning is expected\n   ",
        "child_ranges": [
            "(line 592,col 5)-(line 592,col 32)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(java.lang.String, com.google.javascript.jscomp.DiagnosticType, boolean)",
        "snippet": "  public void testSame(String js, DiagnosticType diag, boolean error) {\n    if (error) {\n      test(js, js, diag);\n    } else {\n      test(js, js, null, diag);\n    }\n  }\n",
        "begin_line": 603,
        "end_line": 609,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as its input\n   * and (optionally) that an expected warning is issued.\n   *\n   * @param js Input and output\n   * @param diag Expected error or warning, or null if none is expected\n   * @param error true if diag is an error, false if it is a warning\n   ",
        "child_ranges": [
            "(line 604,col 5)-(line 608,col 5)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(java.lang.String, java.lang.String, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void testSame(String externs, String js, DiagnosticType warning) {\n    testSame(externs, js, warning, null);\n  }\n",
        "begin_line": 619,
        "end_line": 621,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as its input\n   * and (optionally) that an expected warning is issued.\n   *\n   * @param externs Externs input\n   * @param js Input and output\n   * @param warning Expected warning, or null if no warning is expected\n   ",
        "child_ranges": [
            "(line 620,col 5)-(line 620,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(java.lang.String, java.lang.String, com.google.javascript.jscomp.DiagnosticType, boolean)",
        "snippet": "  public void testSame(\n      String externs, String js, DiagnosticType diag, boolean error) {\n    if (error) {\n      test(externs, js, js, diag, null);\n    } else {\n      test(externs, js, js, null, diag);\n    }\n  }\n",
        "begin_line": 632,
        "end_line": 639,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as its input\n   * and (optionally) that an expected warning is issued.\n   *\n   * @param externs Externs input\n   * @param js Input and output\n   * @param diag Expected error or warning, or null if none is expected\n   * @param error true if diag is an error, false if it is a warning\n   ",
        "child_ranges": [
            "(line 634,col 5)-(line 638,col 5)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(java.lang.String, java.lang.String, com.google.javascript.jscomp.DiagnosticType, java.lang.String)",
        "snippet": "  public void testSame(String externs, String js, DiagnosticType warning,\n                       String description) {\n    List<SourceFile> externsInputs = ImmutableList.of(\n        SourceFile.fromCode(\"externs\", externs));\n    test(externsInputs, js, js, null, warning, description);\n  }\n",
        "begin_line": 652,
        "end_line": 657,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as its input\n   * and (optionally) that an expected warning and description is issued.\n   *\n   * @param externs Externs input\n   * @param js Input and output\n   * @param warning Expected warning, or null if no warning is expected\n   * @param description The description of the expected warning,\n   *      or null if no warning is expected or if the warning's description\n   *      should not be examined\n   ",
        "child_ranges": [
            "(line 654,col 5)-(line 655,col 49)",
            "(line 656,col 5)-(line 656,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(java.lang.String[])",
        "snippet": "  public void testSame(String[] js) {\n    test(js, js);\n  }\n",
        "begin_line": 664,
        "end_line": 666,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as its input.\n   *\n   * @param js Inputs and outputs\n   ",
        "child_ranges": [
            "(line 665,col 5)-(line 665,col 17)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(java.lang.String[], com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void testSame(String[] js, DiagnosticType error) {\n    test(js, js, error);\n  }\n",
        "begin_line": 675,
        "end_line": 677,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as its input,\n   * and emits the given error.\n   *\n   * @param js Inputs and outputs\n   * @param error Expected error, or null if no error is expected\n   ",
        "child_ranges": [
            "(line 676,col 5)-(line 676,col 24)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(java.lang.String[], com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void testSame(\n      String[] js, DiagnosticType error, DiagnosticType warning) {\n    test(js, js, error, warning);\n  }\n",
        "begin_line": 687,
        "end_line": 690,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as its input,\n   * and emits the given error and warning.\n   *\n   * @param js Inputs and outputs\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   ",
        "child_ranges": [
            "(line 689,col 5)-(line 689,col 33)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(com.google.javascript.jscomp.JSModule[])",
        "snippet": "  public void testSame(JSModule[] modules) {\n    testSame(modules, null);\n  }\n",
        "begin_line": 697,
        "end_line": 699,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as the input.\n   *\n   * @param modules Module inputs\n   ",
        "child_ranges": [
            "(line 698,col 5)-(line 698,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(com.google.javascript.jscomp.JSModule[], com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void testSame(JSModule[] modules, DiagnosticType warning) {\n    try {\n      String[] expected = new String[modules.length];\n      for (int i = 0; i < modules.length; i++) {\n        expected[i] = \"\";\n        for (CompilerInput input : modules[i].getInputs()) {\n          expected[i] += input.getSourceFile().getCode();\n        }\n      }\n      test(modules, expected, null, warning);\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n  }\n",
        "begin_line": 707,
        "end_line": 720,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as the input.\n   *\n   * @param modules Module inputs\n   * @param warning A warning, or null for no expected warning.\n   ",
        "child_ranges": [
            "(line 708,col 5)-(line 719,col 5)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(com.google.javascript.jscomp.Compiler, java.lang.String[], com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  protected void test(Compiler compiler, String[] expected,\n                      DiagnosticType error, DiagnosticType warning) {\n    test(compiler, expected, error, warning, null);\n  }\n",
        "begin_line": 733,
        "end_line": 736,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output\n   * and (optionally) that an expected warning is issued. Or, if an error is\n   * expected, this method just verifies that the error is encountered.\n   *\n   * @param compiler A compiler that has been initialized via\n   *     {@link Compiler#init}\n   * @param expected Expected output, or null if an error is expected\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   ",
        "child_ranges": [
            "(line 735,col 5)-(line 735,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(com.google.javascript.jscomp.Compiler, java.lang.String[], com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType, java.lang.String)",
        "snippet": "  private void test(Compiler compiler, String[] expected,\n                    DiagnosticType error, DiagnosticType warning,\n                    String description) {\n    CodeChangeHandler recentChange = new  CodeChangeHandler();\n    compiler.addChangeHandler(recentChange);\n\n    Node root = compiler.parseInputs();\n    assertTrue(\"Unexpected parse error(s): \" +\n        Joiner.on(\"\\n\").join(compiler.getErrors()), root != null);\n    if (!expectParseWarningsThisTest) {\n      assertTrue(\"Unexpected parse warnings(s): \" +\n          Joiner.on(\"\\n\").join(compiler.getWarnings()),\n          compiler.getWarnings().length == 0);\n    }\n\n    if (astValidationEnabled) {\n      (new AstValidator()).validateRoot(root);\n    }\n    Node externsRoot = root.getFirstChild();\n    Node mainRoot = root.getLastChild();\n\n    // Save the tree for later comparison.\n    Node rootClone = root.cloneTree();\n    Node externsRootClone = rootClone.getFirstChild();\n    Node mainRootClone = rootClone.getLastChild();\n\n    int numRepetitions = getNumRepetitions();\n    ErrorManager[] errorManagers = new ErrorManager[numRepetitions];\n    int aggregateWarningCount = 0;\n    List<JSError> aggregateWarnings = Lists.newArrayList();\n    boolean hasCodeChanged = false;\n\n    assertFalse(\"Code should not change before processing\",\n        recentChange.hasCodeChanged());\n\n    for (int i = 0; i < numRepetitions; ++i) {\n      if (compiler.getErrorCount() == 0) {\n        errorManagers[i] = new BlackHoleErrorManager(compiler);\n\n        // Only run process closure primitives once, if asked.\n        if (closurePassEnabled && i == 0) {\n          recentChange.reset();\n          new ProcessClosurePrimitives(compiler, null, CheckLevel.ERROR)\n              .process(null, mainRoot);\n          hasCodeChanged = hasCodeChanged || recentChange.hasCodeChanged();\n        }\n\n        // Only run the type checking pass once, if asked.\n        // Running it twice can cause unpredictable behavior because duplicate\n        // objects for the same type are created, and the type system\n        // uses reference equality to compare many types.\n        if (typeCheckEnabled && i == 0) {\n          TypeCheck check = createTypeCheck(compiler, typeCheckLevel);\n          check.processForTesting(externsRoot, mainRoot);\n        }\n\n        // Only run the normalize pass once, if asked.\n        if (normalizeEnabled && i == 0) {\n          normalizeActualCode(compiler, externsRoot, mainRoot);\n        }\n\n        if (markNoSideEffects && i == 0) {\n          MarkNoSideEffectCalls mark = new MarkNoSideEffectCalls(compiler);\n          mark.process(externsRoot, mainRoot);\n        }\n\n        recentChange.reset();\n\n        getProcessor(compiler).process(externsRoot, mainRoot);\n        if (astValidationEnabled) {\n          (new AstValidator()).validateRoot(root);\n        }\n        if (checkLineNumbers) {\n          (new LineNumberCheck(compiler)).process(externsRoot, mainRoot);\n        }\n\n        hasCodeChanged = hasCodeChanged || recentChange.hasCodeChanged();\n        aggregateWarningCount += errorManagers[i].getWarningCount();\n        aggregateWarnings.addAll(Lists.newArrayList(compiler.getWarnings()));\n\n        if (normalizeEnabled) {\n          boolean verifyDeclaredConstants = true;\n          new Normalize.VerifyConstants(compiler, verifyDeclaredConstants)\n              .process(externsRoot, mainRoot);\n        }\n      }\n    }\n\n    if (error == null) {\n      assertEquals(\n          \"Unexpected error(s): \" + Joiner.on(\"\\n\").join(compiler.getErrors()),\n          0, compiler.getErrorCount());\n\n      // Verify the symbol table.\n      ErrorManager symbolTableErrorManager =\n          new BlackHoleErrorManager(compiler);\n      Node expectedRoot = null;\n      if (expected != null) {\n        expectedRoot = parseExpectedJs(expected);\n        expectedRoot.detachFromParent();\n      }\n\n      JSError[] stErrors = symbolTableErrorManager.getErrors();\n      if (expectedSymbolTableError != null) {\n        assertEquals(\"There should be one error.\", 1, stErrors.length);\n        assertEquals(expectedSymbolTableError, stErrors[0].getType());\n      } else {\n        assertEquals(\"Unexpected symbol table error(s): \" +\n            Joiner.on(\"\\n\").join(stErrors),\n            0, stErrors.length);\n      }\n\n      if (warning == null) {\n        assertEquals(\n            \"Unexpected warning(s): \" + Joiner.on(\"\\n\").join(aggregateWarnings),\n            0, aggregateWarningCount);\n      } else {\n        assertEquals(\"There should be one warning, repeated \" + numRepetitions +\n            \" time(s).\", numRepetitions, aggregateWarningCount);\n        for (int i = 0; i < numRepetitions; ++i) {\n          JSError[] warnings = errorManagers[i].getWarnings();\n          JSError actual = warnings[0];\n          assertEquals(warning, actual.getType());\n\n          // Make sure that source information is always provided.\n          if (!allowSourcelessWarnings) {\n            assertTrue(\"Missing source file name in warning\",\n                actual.sourceName != null && !actual.sourceName.isEmpty());\n            assertTrue(\"Missing line number in warning\",\n                -1 != actual.lineNumber);\n            assertTrue(\"Missing char number in warning\",\n                -1 != actual.getCharno());\n          }\n\n          if (description != null) {\n            assertEquals(description, actual.description);\n          }\n        }\n      }\n\n      // If we ran normalize on the AST, we must also run normalize on the\n      // clone before checking for changes.\n      if (normalizeEnabled) {\n        normalizeActualCode(compiler, externsRootClone, mainRootClone);\n      }\n\n      boolean codeChange = !mainRootClone.isEquivalentTo(mainRoot);\n      boolean externsChange = !externsRootClone.isEquivalentTo(externsRoot);\n\n      // Generally, externs should not be change by the compiler passes.\n      if (externsChange && !allowExternsChanges) {\n        String explanation = externsRootClone.checkTreeEquals(externsRoot);\n        fail(\"Unexpected changes to externs\" +\n            \"\\nExpected: \" + compiler.toSource(externsRootClone) +\n            \"\\nResult: \" + compiler.toSource(externsRoot) +\n            \"\\n\" + explanation);\n      }\n\n      if (!codeChange && !externsChange) {\n        assertFalse(\n            \"compiler.reportCodeChange() was called \" +\n            \"even though nothing changed\",\n            hasCodeChanged);\n      } else {\n        assertTrue(\"compiler.reportCodeChange() should have been called\",\n            hasCodeChanged);\n      }\n\n      if (expected != null) {\n        if (compareAsTree) {\n          String explanation = expectedRoot.checkTreeEquals(mainRoot);\n          assertNull(\"\\nExpected: \" + compiler.toSource(expectedRoot) +\n              \"\\nResult: \" + compiler.toSource(mainRoot) +\n              \"\\n\" + explanation, explanation);\n        } else if (expected != null) {\n          assertEquals(\n              Joiner.on(\"\").join(expected), compiler.toSource(mainRoot));\n        }\n      }\n\n      // Verify normalization is not invalidated.\n      Node normalizeCheckRootClone = root.cloneTree();\n      Node normalizeCheckExternsRootClone = normalizeCheckRootClone.getFirstChild();\n      Node normalizeCheckMainRootClone = normalizeCheckRootClone.getLastChild();\n      new PrepareAst(compiler).process(\n          normalizeCheckExternsRootClone, normalizeCheckMainRootClone);\n      String explanation =\n          normalizeCheckMainRootClone.checkTreeEquals(mainRoot);\n      assertNull(\"Node structure normalization invalidated.\\nExpected: \" +\n          compiler.toSource(normalizeCheckMainRootClone) +\n          \"\\nResult: \" + compiler.toSource(mainRoot) +\n          \"\\n\" + explanation, explanation);\n\n      // TODO(johnlenz): enable this for most test cases.\n      // Currently, this invalidates test for while-loops, for-loop\n      // initializers, and other naming.  However, a set of code\n      // (Closure primitive rewrites, etc) runs before the Normalize pass,\n      // so this can't be force on everywhere.\n      if (normalizeEnabled) {\n        new Normalize(compiler, true).process(\n            normalizeCheckExternsRootClone, normalizeCheckMainRootClone);\n        explanation =  normalizeCheckMainRootClone.checkTreeEquals(mainRoot);\n        assertNull(\"Normalization invalidated.\\nExpected: \" +\n            compiler.toSource(normalizeCheckMainRootClone) +\n            \"\\nResult: \" + compiler.toSource(mainRoot) +\n            \"\\n\" + explanation, explanation);\n      }\n    } else {\n      String errors = \"\";\n      for (JSError actualError : compiler.getErrors()) {\n        errors += actualError.description + \"\\n\";\n      }\n      assertEquals(\"There should be one error. \" + errors,\n          1, compiler.getErrorCount());\n      assertEquals(errors, error, compiler.getErrors()[0].getType());\n\n      if (warning != null) {\n        String warnings = \"\";\n        for (JSError actualError : compiler.getWarnings()) {\n          warnings += actualError.description + \"\\n\";\n        }\n        assertEquals(\"There should be one warning. \" + warnings,\n            1, compiler.getWarningCount());\n        assertEquals(warnings, warning, compiler.getWarnings()[0].getType());\n      }\n    }\n  }\n",
        "begin_line": 753,
        "end_line": 979,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output\n   * and (optionally) that an expected warning is issued. Or, if an error is\n   * expected, this method just verifies that the error is encountered.\n   *\n   * @param compiler A compiler that has been initialized via\n   *     {@link Compiler#init}\n   * @param expected Expected output, or null if an error is expected\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   * @param description The description of the expected warning,\n   *      or null if no warning is expected or if the warning's description\n   *      should not be examined\n   ",
        "child_ranges": [
            "(line 756,col 5)-(line 756,col 62)",
            "(line 757,col 5)-(line 757,col 44)",
            "(line 759,col 5)-(line 759,col 39)",
            "(line 760,col 5)-(line 761,col 66)",
            "(line 762,col 5)-(line 766,col 5)",
            "(line 768,col 5)-(line 770,col 5)",
            "(line 771,col 5)-(line 771,col 44)",
            "(line 772,col 5)-(line 772,col 40)",
            "(line 775,col 5)-(line 775,col 38)",
            "(line 776,col 5)-(line 776,col 54)",
            "(line 777,col 5)-(line 777,col 50)",
            "(line 779,col 5)-(line 779,col 45)",
            "(line 780,col 5)-(line 780,col 68)",
            "(line 781,col 5)-(line 781,col 34)",
            "(line 782,col 5)-(line 782,col 59)",
            "(line 783,col 5)-(line 783,col 35)",
            "(line 785,col 5)-(line 786,col 39)",
            "(line 788,col 5)-(line 839,col 5)",
            "(line 841,col 5)-(line 978,col 5)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.normalizeActualCode(com.google.javascript.jscomp.Compiler, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  private void normalizeActualCode(\n      Compiler compiler, Node externsRoot, Node mainRoot) {\n    Normalize normalize = new Normalize(compiler, false);\n    normalize.process(externsRoot, mainRoot);\n  }\n",
        "begin_line": 981,
        "end_line": 985,
        "comment": "",
        "child_ranges": [
            "(line 983,col 5)-(line 983,col 57)",
            "(line 984,col 5)-(line 984,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.parseExpectedJs(java.lang.String[])",
        "snippet": "  protected Node parseExpectedJs(String[] expected) {\n    Compiler compiler = createCompiler();\n    List<SourceFile> inputs = Lists.newArrayList();\n    for (int i = 0; i < expected.length; i++) {\n      inputs.add(SourceFile.fromCode(\"expected\" + i, expected[i]));\n    }\n    compiler.init(externsInputs, inputs, getOptions());\n    Node root = compiler.parseInputs();\n    assertTrue(\"Unexpected parse error(s): \" +\n        Joiner.on(\"\\n\").join(compiler.getErrors()), root != null);\n    Node externsRoot = root.getFirstChild();\n    Node mainRoot = externsRoot.getNext();\n    // Only run the normalize pass, if asked.\n    if (normalizeEnabled && normalizeExpected && !compiler.hasErrors()) {\n      Normalize normalize = new Normalize(compiler, false);\n      normalize.process(externsRoot, mainRoot);\n    }\n    return mainRoot;\n  }\n",
        "begin_line": 990,
        "end_line": 1008,
        "comment": "\n   * Parses expected JS inputs and returns the root of the parse tree.\n   ",
        "child_ranges": [
            "(line 991,col 5)-(line 991,col 41)",
            "(line 992,col 5)-(line 992,col 51)",
            "(line 993,col 5)-(line 995,col 5)",
            "(line 996,col 5)-(line 996,col 55)",
            "(line 997,col 5)-(line 997,col 39)",
            "(line 998,col 5)-(line 999,col 66)",
            "(line 1000,col 5)-(line 1000,col 44)",
            "(line 1001,col 5)-(line 1001,col 42)",
            "(line 1003,col 5)-(line 1006,col 5)",
            "(line 1007,col 5)-(line 1007,col 20)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.parseExpectedJs(java.lang.String)",
        "snippet": "  protected Node parseExpectedJs(String expected) {\n    return parseExpectedJs(new String[] {expected});\n  }\n",
        "begin_line": 1010,
        "end_line": 1012,
        "comment": "",
        "child_ranges": [
            "(line 1011,col 5)-(line 1011,col 52)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.createModuleChain(java.lang.String...)",
        "snippet": "  static JSModule[] createModuleChain(String... inputs) {\n    JSModule[] modules = createModules(inputs);\n    for (int i = 1; i < modules.length; i++) {\n      modules[i].addDependency(modules[i - 1]);\n    }\n    return modules;\n  }\n",
        "begin_line": 1018,
        "end_line": 1024,
        "comment": "\n   * Generates a list of modules from a list of inputs, such that each module\n   * depends on the module before it.\n   ",
        "child_ranges": [
            "(line 1019,col 5)-(line 1019,col 47)",
            "(line 1020,col 5)-(line 1022,col 5)",
            "(line 1023,col 5)-(line 1023,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.createModuleStar(java.lang.String...)",
        "snippet": "  static JSModule[] createModuleStar(String... inputs) {\n    JSModule[] modules = createModules(inputs);\n    for (int i = 1; i < modules.length; i++) {\n      modules[i].addDependency(modules[0]);\n    }\n    return modules;\n  }\n",
        "begin_line": 1030,
        "end_line": 1036,
        "comment": "\n   * Generates a list of modules from a list of inputs, such that each module\n   * depends on the first module.\n   ",
        "child_ranges": [
            "(line 1031,col 5)-(line 1031,col 47)",
            "(line 1032,col 5)-(line 1034,col 5)",
            "(line 1035,col 5)-(line 1035,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.createModuleBush(java.lang.String...)",
        "snippet": "  static JSModule[] createModuleBush(String ... inputs) {\n    Preconditions.checkState(inputs.length > 2);\n    JSModule[] modules = createModules(inputs);\n    for (int i = 1; i < modules.length; i++) {\n      modules[i].addDependency(modules[i == 1 ? 0 : 1]);\n    }\n    return modules;\n  }\n",
        "begin_line": 1043,
        "end_line": 1050,
        "comment": "\n   * Generates a list of modules from a list of inputs, such that modules\n   * form a bush formation. In a bush formation, module 2 depends\n   * on module 1, and all other modules depend on module 2.\n   ",
        "child_ranges": [
            "(line 1044,col 5)-(line 1044,col 48)",
            "(line 1045,col 5)-(line 1045,col 47)",
            "(line 1046,col 5)-(line 1048,col 5)",
            "(line 1049,col 5)-(line 1049,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.createModuleTree(java.lang.String...)",
        "snippet": "  static JSModule[] createModuleTree(String ... inputs) {\n    JSModule[] modules = createModules(inputs);\n    for (int i = 1; i < modules.length; i++) {\n      modules[i].addDependency(modules[(i - 1) / 2]);\n    }\n    return modules;\n  }\n",
        "begin_line": 1057,
        "end_line": 1063,
        "comment": "\n   * Generates a list of modules from a list of inputs, such that modules\n   * form a tree formation. In a tree formation, module N depends on\n   * module `floor(N/2)`, So the modules form a balanced binary tree.\n   ",
        "child_ranges": [
            "(line 1058,col 5)-(line 1058,col 47)",
            "(line 1059,col 5)-(line 1061,col 5)",
            "(line 1062,col 5)-(line 1062,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.createModules(java.lang.String...)",
        "snippet": "  static JSModule[] createModules(String... inputs) {\n    JSModule[] modules = new JSModule[inputs.length];\n    for (int i = 0; i < inputs.length; i++) {\n      JSModule module = modules[i] = new JSModule(\"m\" + i);\n      module.add(SourceFile.fromCode(\"i\" + i, inputs[i]));\n    }\n    return modules;\n  }\n",
        "begin_line": 1069,
        "end_line": 1076,
        "comment": "\n   * Generates a list of modules from a list of inputs. Does not generate any\n   * dependencies between the modules.\n   ",
        "child_ranges": [
            "(line 1070,col 5)-(line 1070,col 53)",
            "(line 1071,col 5)-(line 1074,col 5)",
            "(line 1075,col 5)-(line 1075,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.BlackHoleErrorManager.BlackHoleErrorManager(com.google.javascript.jscomp.Compiler)",
        "snippet": "    private BlackHoleErrorManager(Compiler compiler) {\n      compiler.setErrorManager(this);\n    }\n",
        "begin_line": 1079,
        "end_line": 1081,
        "comment": "",
        "child_ranges": [
            "(line 1080,col 7)-(line 1080,col 37)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.BlackHoleErrorManager.println(com.google.javascript.jscomp.CheckLevel, com.google.javascript.jscomp.JSError)",
        "snippet": "    @Override\n    public void println(CheckLevel level, JSError error) {}\n",
        "begin_line": 1083,
        "end_line": 1084,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.BlackHoleErrorManager.printSummary()",
        "snippet": "    @Override\n    public void printSummary() {}\n",
        "begin_line": 1086,
        "end_line": 1087,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.createCompiler()",
        "snippet": "  Compiler createCompiler() {\n    Compiler compiler = new Compiler();\n    return compiler;\n  }\n",
        "begin_line": 1090,
        "end_line": 1093,
        "comment": "",
        "child_ranges": [
            "(line 1091,col 5)-(line 1091,col 39)",
            "(line 1092,col 5)-(line 1092,col 20)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.setExpectedSymbolTableError(com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  protected void setExpectedSymbolTableError(DiagnosticType type) {\n    this.expectedSymbolTableError = type;\n  }\n",
        "begin_line": 1095,
        "end_line": 1097,
        "comment": "",
        "child_ranges": [
            "(line 1096,col 5)-(line 1096,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.findQualifiedNameNode(java.lang.String, com.google.javascript.rhino.Node)",
        "snippet": "  protected final Node findQualifiedNameNode(final String name, Node root) {\n    final List<Node> matches = Lists.newArrayList();\n    NodeUtil.visitPostOrder(root,\n        new NodeUtil.Visitor() {\n          @Override public void visit(Node n) {\n            if (name.equals(n.getQualifiedName())) {\n              matches.add(n);\n            }\n          }\n        },\n        Predicates.<Node>alwaysTrue());\n    return matches.get(0);\n  }\n",
        "begin_line": 1100,
        "end_line": 1112,
        "comment": " Finds the first matching qualified name node in post-traversal order. ",
        "child_ranges": [
            "(line 1101,col 5)-(line 1101,col 52)",
            "(line 1102,col 5)-(line 1110,col 39)",
            "(line 1111,col 5)-(line 1111,col 26)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.Anonymous-5dbcbf5c-6fa1-4236-a5c7-e2b0752628ca.visit(com.google.javascript.rhino.Node)",
        "snippet": "          @Override public void visit(Node n) {\n            if (name.equals(n.getQualifiedName())) {\n              matches.add(n);\n            }\n          }\n",
        "begin_line": 1104,
        "end_line": 1108,
        "comment": "",
        "child_ranges": [
            "(line 1105,col 13)-(line 1107,col 13)"
        ]
    }
]