[
    {
        "class_name": "org.apache.commons.math.linear.CholeskyDecompositionImpl",
        "src_path": "src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java",
        "signature": "org.apache.commons.math.linear.CholeskyDecompositionImpl.DEFAULT_RELATIVE_SYMMETRY_THRESHOLD",
        "snippet": "    public static final double DEFAULT_RELATIVE_SYMMETRY_THRESHOLD = 1.0e-15;",
        "begin_line": 38,
        "end_line": 38,
        "comment": " Default threshold above which off-diagonal elements are considered too different\n     * and matrix not symmetric. "
    },
    {
        "class_name": "org.apache.commons.math.linear.CholeskyDecompositionImpl",
        "src_path": "src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java",
        "signature": "org.apache.commons.math.linear.CholeskyDecompositionImpl.DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD",
        "snippet": "    public static final double DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD = 1.0e-10;",
        "begin_line": 42,
        "end_line": 42,
        "comment": " Default threshold below which diagonal elements are considered null\n     * and matrix not positive definite. "
    },
    {
        "class_name": "org.apache.commons.math.linear.CholeskyDecompositionImpl",
        "src_path": "src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java",
        "signature": "org.apache.commons.math.linear.CholeskyDecompositionImpl.lTData",
        "snippet": "    private double[][] lTData;",
        "begin_line": 45,
        "end_line": 45,
        "comment": " Row-oriented storage for L<sup>T</sup> matrix data. "
    },
    {
        "class_name": "org.apache.commons.math.linear.CholeskyDecompositionImpl",
        "src_path": "src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java",
        "signature": "org.apache.commons.math.linear.CholeskyDecompositionImpl.cachedL",
        "snippet": "    private RealMatrix cachedL;",
        "begin_line": 48,
        "end_line": 48,
        "comment": " Cached value of L. "
    },
    {
        "class_name": "org.apache.commons.math.linear.CholeskyDecompositionImpl",
        "src_path": "src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java",
        "signature": "org.apache.commons.math.linear.CholeskyDecompositionImpl.cachedLT",
        "snippet": "    private RealMatrix cachedLT;",
        "begin_line": 51,
        "end_line": 51,
        "comment": " Cached value of LT. "
    },
    {
        "class_name": "org.apache.commons.math.linear.Solver",
        "src_path": "src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java",
        "signature": "org.apache.commons.math.linear.Solver.lTData",
        "snippet": "        private final double[][] lTData;",
        "begin_line": 192,
        "end_line": 192,
        "comment": " Row-oriented storage for L<sup>T</sup> matrix data. "
    },
    {
        "class_name": "org.apache.commons.math.linear.AbstractRealMatrix",
        "src_path": "src/java/org/apache/commons/math/linear/AbstractRealMatrix.java",
        "signature": "org.apache.commons.math.linear.AbstractRealMatrix.lu",
        "snippet": "    @Deprecated\n    private DecompositionSolver lu;",
        "begin_line": 37,
        "end_line": 38,
        "comment": " Cached LU solver.\n     * @deprecated as of release 2.0, since all methods using this are deprecated\n     "
    },
    {
        "class_name": "org.apache.commons.math.linear.AbstractRealMatrix",
        "src_path": "src/java/org/apache/commons/math/linear/AbstractRealMatrix.java",
        "signature": "org.apache.commons.math.linear.AbstractRealMatrix.endRow",
        "snippet": "            private double endRow;",
        "begin_line": 198,
        "end_line": 198,
        "comment": " Last row index. "
    },
    {
        "class_name": "org.apache.commons.math.linear.AbstractRealMatrix",
        "src_path": "src/java/org/apache/commons/math/linear/AbstractRealMatrix.java",
        "signature": "org.apache.commons.math.linear.AbstractRealMatrix.columnSum",
        "snippet": "            private double columnSum;",
        "begin_line": 201,
        "end_line": 201,
        "comment": " Sum of absolute values on one column. "
    },
    {
        "class_name": "org.apache.commons.math.linear.AbstractRealMatrix",
        "src_path": "src/java/org/apache/commons/math/linear/AbstractRealMatrix.java",
        "signature": "org.apache.commons.math.linear.AbstractRealMatrix.maxColSum",
        "snippet": "            private double maxColSum;",
        "begin_line": 204,
        "end_line": 204,
        "comment": " Maximal sum across all columns. "
    },
    {
        "class_name": "org.apache.commons.math.linear.AbstractRealMatrix",
        "src_path": "src/java/org/apache/commons/math/linear/AbstractRealMatrix.java",
        "signature": "org.apache.commons.math.linear.AbstractRealMatrix.sum",
        "snippet": "            private double sum;",
        "begin_line": 237,
        "end_line": 237,
        "comment": " Sum of squared entries. "
    },
    {
        "class_name": "org.apache.commons.math.linear.AbstractRealMatrix",
        "src_path": "src/java/org/apache/commons/math/linear/AbstractRealMatrix.java",
        "signature": "org.apache.commons.math.linear.AbstractRealMatrix.startRow",
        "snippet": "            private int startRow;",
        "begin_line": 323,
        "end_line": 323,
        "comment": " Initial row index. "
    },
    {
        "class_name": "org.apache.commons.math.linear.AbstractRealMatrix",
        "src_path": "src/java/org/apache/commons/math/linear/AbstractRealMatrix.java",
        "signature": "org.apache.commons.math.linear.AbstractRealMatrix.startColumn",
        "snippet": "            private int startColumn;",
        "begin_line": 326,
        "end_line": 326,
        "comment": " Initial column index. "
    },
    {
        "class_name": "org.apache.commons.math.linear.FractionMatrixConverter",
        "src_path": "src/java/org/apache/commons/math/linear/MatrixUtils.java",
        "signature": "org.apache.commons.math.linear.FractionMatrixConverter.data",
        "snippet": "        private double[][] data;",
        "begin_line": 650,
        "end_line": 650,
        "comment": " Converted array. "
    },
    {
        "class_name": "org.apache.commons.math.linear.BigFractionMatrixConverter",
        "src_path": "src/java/org/apache/commons/math/linear/MatrixUtils.java",
        "signature": "org.apache.commons.math.linear.BigFractionMatrixConverter.data",
        "snippet": "        private double[][] data;",
        "begin_line": 694,
        "end_line": 694,
        "comment": " Converted array. "
    },
    {
        "class_name": "org.apache.commons.math.linear.DenseRealMatrix",
        "src_path": "src/java/org/apache/commons/math/linear/DenseRealMatrix.java",
        "signature": "org.apache.commons.math.linear.DenseRealMatrix.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 4991895511313664478L;",
        "begin_line": 67,
        "end_line": 67,
        "comment": " Serializable version identifier "
    },
    {
        "class_name": "org.apache.commons.math.linear.DenseRealMatrix",
        "src_path": "src/java/org/apache/commons/math/linear/DenseRealMatrix.java",
        "signature": "org.apache.commons.math.linear.DenseRealMatrix.BLOCK_SIZE",
        "snippet": "    public static final int BLOCK_SIZE = 52;",
        "begin_line": 70,
        "end_line": 70,
        "comment": " Block size. "
    },
    {
        "class_name": "org.apache.commons.math.linear.DenseRealMatrix",
        "src_path": "src/java/org/apache/commons/math/linear/DenseRealMatrix.java",
        "signature": "org.apache.commons.math.linear.DenseRealMatrix.blocks",
        "snippet": "    private final double blocks[][];",
        "begin_line": 73,
        "end_line": 73,
        "comment": " Blocks of matrix entries. "
    },
    {
        "class_name": "org.apache.commons.math.linear.DenseRealMatrix",
        "src_path": "src/java/org/apache/commons/math/linear/DenseRealMatrix.java",
        "signature": "org.apache.commons.math.linear.DenseRealMatrix.rows",
        "snippet": "    private final int rows;",
        "begin_line": 76,
        "end_line": 76,
        "comment": " Number of rows of the matrix. "
    },
    {
        "class_name": "org.apache.commons.math.linear.DenseRealMatrix",
        "src_path": "src/java/org/apache/commons/math/linear/DenseRealMatrix.java",
        "signature": "org.apache.commons.math.linear.DenseRealMatrix.columns",
        "snippet": "    private final int columns;",
        "begin_line": 79,
        "end_line": 79,
        "comment": " Number of columns of the matrix. "
    },
    {
        "class_name": "org.apache.commons.math.linear.DenseRealMatrix",
        "src_path": "src/java/org/apache/commons/math/linear/DenseRealMatrix.java",
        "signature": "org.apache.commons.math.linear.DenseRealMatrix.blockRows",
        "snippet": "    private final int blockRows;",
        "begin_line": 82,
        "end_line": 82,
        "comment": " Number of block rows of the matrix. "
    },
    {
        "class_name": "org.apache.commons.math.linear.DenseRealMatrix",
        "src_path": "src/java/org/apache/commons/math/linear/DenseRealMatrix.java",
        "signature": "org.apache.commons.math.linear.DenseRealMatrix.blockColumns",
        "snippet": "    private final int blockColumns;",
        "begin_line": 85,
        "end_line": 85,
        "comment": " Number of block columns of the matrix. "
    }
]