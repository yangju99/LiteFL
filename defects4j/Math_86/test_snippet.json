[
    {
        "class_name": "org.apache.commons.math.linear.CholeskyDecompositionImplTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java",
        "signature": "org.apache.commons.math.linear.CholeskyDecompositionImplTest.testDimensions()",
        "snippet": "    @Test\n    public void testDimensions() throws MathException {\n        CholeskyDecomposition llt =\n            new CholeskyDecompositionImpl(MatrixUtils.createRealMatrix(testData));\n        assertEquals(testData.length, llt.getL().getRowDimension());\n        assertEquals(testData.length, llt.getL().getColumnDimension());\n        assertEquals(testData.length, llt.getLT().getRowDimension());\n        assertEquals(testData.length, llt.getLT().getColumnDimension());\n    }\n",
        "begin_line": 44,
        "end_line": 52,
        "comment": " test dimensions ",
        "child_ranges": [
            "(line 46,col 9)-(line 47,col 82)",
            "(line 48,col 9)-(line 48,col 68)",
            "(line 49,col 9)-(line 49,col 71)",
            "(line 50,col 9)-(line 50,col 69)",
            "(line 51,col 9)-(line 51,col 72)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.CholeskyDecompositionImplTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java",
        "signature": "org.apache.commons.math.linear.CholeskyDecompositionImplTest.testNonSquare()",
        "snippet": "    @Test(expected = NonSquareMatrixException.class)\n    public void testNonSquare() throws MathException {\n        new CholeskyDecompositionImpl(MatrixUtils.createRealMatrix(new double[3][2]));\n    }\n",
        "begin_line": 55,
        "end_line": 58,
        "comment": " test non-square matrix ",
        "child_ranges": [
            "(line 57,col 9)-(line 57,col 86)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.CholeskyDecompositionImplTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java",
        "signature": "org.apache.commons.math.linear.CholeskyDecompositionImplTest.testNotSymmetricMatrixException()",
        "snippet": "    @Test(expected = NotSymmetricMatrixException.class)\n    public void testNotSymmetricMatrixException() throws MathException {\n        double[][] changed = testData.clone();\n        changed[0][changed[0].length - 1] += 1.0e-5;\n        new CholeskyDecompositionImpl(MatrixUtils.createRealMatrix(changed));\n    }\n",
        "begin_line": 61,
        "end_line": 66,
        "comment": " test non-symmetric matrix ",
        "child_ranges": [
            "(line 63,col 9)-(line 63,col 46)",
            "(line 64,col 9)-(line 64,col 52)",
            "(line 65,col 9)-(line 65,col 77)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.CholeskyDecompositionImplTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java",
        "signature": "org.apache.commons.math.linear.CholeskyDecompositionImplTest.testNotPositiveDefinite()",
        "snippet": "    @Test(expected = NotPositiveDefiniteMatrixException.class)\n    public void testNotPositiveDefinite() throws MathException {\n        CholeskyDecomposition cd = new CholeskyDecompositionImpl(MatrixUtils.createRealMatrix(new double[][] {\n                { 14, 11, 13, 15, 24 },\n                { 11, 34, 13, 8,  25 },\n                { 13, 13, 14, 15, 21 },\n                { 15, 8,  15, 18, 23 },\n                { 24, 25, 21, 23, 45 }\n        }));\n        System.out.println(cd.getL().multiply(cd.getLT()));\n    }\n",
        "begin_line": 69,
        "end_line": 79,
        "comment": " test non positive definite matrix ",
        "child_ranges": [
            "(line 71,col 9)-(line 77,col 12)",
            "(line 78,col 9)-(line 78,col 59)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.CholeskyDecompositionImplTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java",
        "signature": "org.apache.commons.math.linear.CholeskyDecompositionImplTest.testMath274()",
        "snippet": "    @Test(expected = NotPositiveDefiniteMatrixException.class)\n    public void testMath274() throws MathException {\n        new CholeskyDecompositionImpl(MatrixUtils.createRealMatrix(new double[][] {\n                { 0.40434286, -0.09376327, 0.30328980, 0.04909388 },\n                {-0.09376327,  0.10400408, 0.07137959, 0.04762857 },\n                { 0.30328980,  0.07137959, 0.30458776, 0.04882449 },\n                { 0.04909388,  0.04762857, 0.04882449, 0.07543265 }\n            \n        }));\n    }\n",
        "begin_line": 81,
        "end_line": 90,
        "comment": "",
        "child_ranges": [
            "(line 83,col 9)-(line 89,col 12)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.CholeskyDecompositionImplTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java",
        "signature": "org.apache.commons.math.linear.CholeskyDecompositionImplTest.testAEqualLLT()",
        "snippet": "    @Test\n    public void testAEqualLLT() throws MathException {\n        RealMatrix matrix = MatrixUtils.createRealMatrix(testData);\n        CholeskyDecomposition llt = new CholeskyDecompositionImpl(matrix);\n        RealMatrix l  = llt.getL();\n        RealMatrix lt = llt.getLT();\n        double norm = l.multiply(lt).subtract(matrix).getNorm();\n        assertEquals(0, norm, 1.0e-15);\n    }\n",
        "begin_line": 93,
        "end_line": 101,
        "comment": " test A = LLT ",
        "child_ranges": [
            "(line 95,col 9)-(line 95,col 67)",
            "(line 96,col 9)-(line 96,col 74)",
            "(line 97,col 9)-(line 97,col 35)",
            "(line 98,col 9)-(line 98,col 36)",
            "(line 99,col 9)-(line 99,col 64)",
            "(line 100,col 9)-(line 100,col 39)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.CholeskyDecompositionImplTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java",
        "signature": "org.apache.commons.math.linear.CholeskyDecompositionImplTest.testLLowerTriangular()",
        "snippet": "    @Test\n    public void testLLowerTriangular() throws MathException {\n        RealMatrix matrix = MatrixUtils.createRealMatrix(testData);\n        RealMatrix l = new CholeskyDecompositionImpl(matrix).getL();\n        for (int i = 0; i < l.getRowDimension(); i++) {\n            for (int j = i + 1; j < l.getColumnDimension(); j++) {\n                assertEquals(0.0, l.getEntry(i, j), 0.0);\n            }\n        }\n    }\n",
        "begin_line": 104,
        "end_line": 113,
        "comment": " test that L is lower triangular ",
        "child_ranges": [
            "(line 106,col 9)-(line 106,col 67)",
            "(line 107,col 9)-(line 107,col 68)",
            "(line 108,col 9)-(line 112,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.CholeskyDecompositionImplTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java",
        "signature": "org.apache.commons.math.linear.CholeskyDecompositionImplTest.testLTTransposed()",
        "snippet": "    @Test\n    public void testLTTransposed() throws MathException {\n        RealMatrix matrix = MatrixUtils.createRealMatrix(testData);\n        CholeskyDecomposition llt = new CholeskyDecompositionImpl(matrix);\n        RealMatrix l  = llt.getL();\n        RealMatrix lt = llt.getLT();\n        double norm = l.subtract(lt.transpose()).getNorm();\n        assertEquals(0, norm, 1.0e-15);\n    }\n",
        "begin_line": 116,
        "end_line": 124,
        "comment": " test that LT is transpose of L ",
        "child_ranges": [
            "(line 118,col 9)-(line 118,col 67)",
            "(line 119,col 9)-(line 119,col 74)",
            "(line 120,col 9)-(line 120,col 35)",
            "(line 121,col 9)-(line 121,col 36)",
            "(line 122,col 9)-(line 122,col 59)",
            "(line 123,col 9)-(line 123,col 39)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.CholeskyDecompositionImplTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java",
        "signature": "org.apache.commons.math.linear.CholeskyDecompositionImplTest.testMatricesValues()",
        "snippet": "    @Test\n    public void testMatricesValues() throws MathException {\n        RealMatrix lRef = MatrixUtils.createRealMatrix(new double[][] {\n                {  1,  0,  0,  0,  0 },\n                {  2,  3,  0,  0,  0 },\n                {  4,  5,  6,  0,  0 },\n                {  7,  8,  9, 10,  0 },\n                { 11, 12, 13, 14, 15 }\n        });\n       CholeskyDecomposition llt =\n            new CholeskyDecompositionImpl(MatrixUtils.createRealMatrix(testData));\n\n        // check values against known references\n        RealMatrix l = llt.getL();\n        assertEquals(0, l.subtract(lRef).getNorm(), 1.0e-13);\n        RealMatrix lt = llt.getLT();\n        assertEquals(0, lt.subtract(lRef.transpose()).getNorm(), 1.0e-13);\n\n        // check the same cached instance is returned the second time\n        assertTrue(l  == llt.getL());\n        assertTrue(lt == llt.getLT());\n        \n    }\n",
        "begin_line": 127,
        "end_line": 149,
        "comment": " test matrices values ",
        "child_ranges": [
            "(line 129,col 9)-(line 135,col 11)",
            "(line 136,col 8)-(line 137,col 82)",
            "(line 140,col 9)-(line 140,col 34)",
            "(line 141,col 9)-(line 141,col 61)",
            "(line 142,col 9)-(line 142,col 36)",
            "(line 143,col 9)-(line 143,col 74)",
            "(line 146,col 9)-(line 146,col 37)",
            "(line 147,col 9)-(line 147,col 38)"
        ]
    }
]