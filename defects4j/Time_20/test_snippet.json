[
    {
        "class_name": "org.joda.time.format.TestDateTimeFormatterBuilder",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java",
        "signature": "org.joda.time.format.TestDateTimeFormatterBuilder.main(java.lang.String[])",
        "snippet": "    public static void main(String[] args) {\n        junit.textui.TestRunner.run(suite());\n    }\n",
        "begin_line": 42,
        "end_line": 44,
        "comment": "",
        "child_ranges": [
            "(line 43,col 9)-(line 43,col 45)"
        ]
    },
    {
        "class_name": "org.joda.time.format.TestDateTimeFormatterBuilder",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java",
        "signature": "org.joda.time.format.TestDateTimeFormatterBuilder.suite()",
        "snippet": "    public static TestSuite suite() {\n        return new TestSuite(TestDateTimeFormatterBuilder.class);\n    }\n",
        "begin_line": 46,
        "end_line": 48,
        "comment": "",
        "child_ranges": [
            "(line 47,col 9)-(line 47,col 65)"
        ]
    },
    {
        "class_name": "org.joda.time.format.TestDateTimeFormatterBuilder",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java",
        "signature": "org.joda.time.format.TestDateTimeFormatterBuilder.TestDateTimeFormatterBuilder(java.lang.String)",
        "snippet": "    public TestDateTimeFormatterBuilder(String name) {\n        super(name);\n    }\n",
        "begin_line": 50,
        "end_line": 52,
        "comment": "",
        "child_ranges": [
            "(line 51,col 9)-(line 51,col 20)"
        ]
    },
    {
        "class_name": "org.joda.time.format.TestDateTimeFormatterBuilder",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java",
        "signature": "org.joda.time.format.TestDateTimeFormatterBuilder.setUp()",
        "snippet": "    protected void setUp() throws Exception {\n    }\n",
        "begin_line": 54,
        "end_line": 55,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.joda.time.format.TestDateTimeFormatterBuilder",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java",
        "signature": "org.joda.time.format.TestDateTimeFormatterBuilder.tearDown()",
        "snippet": "    protected void tearDown() throws Exception {\n    }\n",
        "begin_line": 57,
        "end_line": 58,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.joda.time.format.TestDateTimeFormatterBuilder",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java",
        "signature": "org.joda.time.format.TestDateTimeFormatterBuilder.test_toFormatter()",
        "snippet": "    public void test_toFormatter() {\n        DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder();\n        try {\n            bld.toFormatter();\n            fail();\n        } catch (UnsupportedOperationException ex) {}\n        bld.appendLiteral('X');\n        assertNotNull(bld.toFormatter());\n    }\n",
        "begin_line": 61,
        "end_line": 69,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 62,col 9)-(line 62,col 70)",
            "(line 63,col 9)-(line 66,col 53)",
            "(line 67,col 9)-(line 67,col 31)",
            "(line 68,col 9)-(line 68,col 41)"
        ]
    },
    {
        "class_name": "org.joda.time.format.TestDateTimeFormatterBuilder",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java",
        "signature": "org.joda.time.format.TestDateTimeFormatterBuilder.test_toPrinter()",
        "snippet": "    public void test_toPrinter() {\n        DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder();\n        try {\n            bld.toPrinter();\n            fail();\n        } catch (UnsupportedOperationException ex) {}\n        bld.appendLiteral('X');\n        assertNotNull(bld.toPrinter());\n    }\n",
        "begin_line": 71,
        "end_line": 79,
        "comment": "",
        "child_ranges": [
            "(line 72,col 9)-(line 72,col 70)",
            "(line 73,col 9)-(line 76,col 53)",
            "(line 77,col 9)-(line 77,col 31)",
            "(line 78,col 9)-(line 78,col 39)"
        ]
    },
    {
        "class_name": "org.joda.time.format.TestDateTimeFormatterBuilder",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java",
        "signature": "org.joda.time.format.TestDateTimeFormatterBuilder.test_toParser()",
        "snippet": "    public void test_toParser() {\n        DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder();\n        try {\n            bld.toParser();\n            fail();\n        } catch (UnsupportedOperationException ex) {}\n        bld.appendLiteral('X');\n        assertNotNull(bld.toParser());\n    }\n",
        "begin_line": 81,
        "end_line": 89,
        "comment": "",
        "child_ranges": [
            "(line 82,col 9)-(line 82,col 70)",
            "(line 83,col 9)-(line 86,col 53)",
            "(line 87,col 9)-(line 87,col 31)",
            "(line 88,col 9)-(line 88,col 38)"
        ]
    },
    {
        "class_name": "org.joda.time.format.TestDateTimeFormatterBuilder",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java",
        "signature": "org.joda.time.format.TestDateTimeFormatterBuilder.test_canBuildFormatter()",
        "snippet": "    public void test_canBuildFormatter() {\n        DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder();\n        assertEquals(false, bld.canBuildFormatter());\n        bld.appendLiteral('X');\n        assertEquals(true, bld.canBuildFormatter());\n    }\n",
        "begin_line": 92,
        "end_line": 97,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 93,col 9)-(line 93,col 70)",
            "(line 94,col 9)-(line 94,col 53)",
            "(line 95,col 9)-(line 95,col 31)",
            "(line 96,col 9)-(line 96,col 52)"
        ]
    },
    {
        "class_name": "org.joda.time.format.TestDateTimeFormatterBuilder",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java",
        "signature": "org.joda.time.format.TestDateTimeFormatterBuilder.test_canBuildPrinter()",
        "snippet": "    public void test_canBuildPrinter() {\n        DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder();\n        assertEquals(false, bld.canBuildPrinter());\n        bld.appendLiteral('X');\n        assertEquals(true, bld.canBuildPrinter());\n    }\n",
        "begin_line": 99,
        "end_line": 104,
        "comment": "",
        "child_ranges": [
            "(line 100,col 9)-(line 100,col 70)",
            "(line 101,col 9)-(line 101,col 51)",
            "(line 102,col 9)-(line 102,col 31)",
            "(line 103,col 9)-(line 103,col 50)"
        ]
    },
    {
        "class_name": "org.joda.time.format.TestDateTimeFormatterBuilder",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java",
        "signature": "org.joda.time.format.TestDateTimeFormatterBuilder.test_canBuildParser()",
        "snippet": "    public void test_canBuildParser() {\n        DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder();\n        assertEquals(false, bld.canBuildParser());\n        bld.appendLiteral('X');\n        assertEquals(true, bld.canBuildParser());\n    }\n",
        "begin_line": 106,
        "end_line": 111,
        "comment": "",
        "child_ranges": [
            "(line 107,col 9)-(line 107,col 70)",
            "(line 108,col 9)-(line 108,col 50)",
            "(line 109,col 9)-(line 109,col 31)",
            "(line 110,col 9)-(line 110,col 49)"
        ]
    },
    {
        "class_name": "org.joda.time.format.TestDateTimeFormatterBuilder",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java",
        "signature": "org.joda.time.format.TestDateTimeFormatterBuilder.test_append_Formatter()",
        "snippet": "    public void test_append_Formatter() {\n        DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder();\n        bld.appendLiteral('Y');\n        DateTimeFormatter f = bld.toFormatter();\n        \n        DateTimeFormatterBuilder bld2 = new DateTimeFormatterBuilder();\n        bld2.appendLiteral('X');\n        bld2.append(f);\n        bld2.appendLiteral('Z');\n        assertEquals(\"XYZ\", bld2.toFormatter().print(0L));\n    }\n",
        "begin_line": 114,
        "end_line": 124,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 115,col 9)-(line 115,col 70)",
            "(line 116,col 9)-(line 116,col 31)",
            "(line 117,col 9)-(line 117,col 48)",
            "(line 119,col 9)-(line 119,col 71)",
            "(line 120,col 9)-(line 120,col 32)",
            "(line 121,col 9)-(line 121,col 23)",
            "(line 122,col 9)-(line 122,col 32)",
            "(line 123,col 9)-(line 123,col 58)"
        ]
    },
    {
        "class_name": "org.joda.time.format.TestDateTimeFormatterBuilder",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java",
        "signature": "org.joda.time.format.TestDateTimeFormatterBuilder.test_append_Printer()",
        "snippet": "    public void test_append_Printer() {\n        DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder();\n        bld.appendLiteral('Y');\n        DateTimePrinter p = bld.toPrinter();\n        \n        DateTimeFormatterBuilder bld2 = new DateTimeFormatterBuilder();\n        bld2.appendLiteral('X');\n        bld2.append(p);\n        bld2.appendLiteral('Z');\n        assertEquals(\"XYZ\", bld2.toFormatter().print(0L));\n    }\n",
        "begin_line": 127,
        "end_line": 137,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 128,col 9)-(line 128,col 70)",
            "(line 129,col 9)-(line 129,col 31)",
            "(line 130,col 9)-(line 130,col 44)",
            "(line 132,col 9)-(line 132,col 71)",
            "(line 133,col 9)-(line 133,col 32)",
            "(line 134,col 9)-(line 134,col 23)",
            "(line 135,col 9)-(line 135,col 32)",
            "(line 136,col 9)-(line 136,col 58)"
        ]
    },
    {
        "class_name": "org.joda.time.format.TestDateTimeFormatterBuilder",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java",
        "signature": "org.joda.time.format.TestDateTimeFormatterBuilder.test_appendFixedDecimal()",
        "snippet": "    public void test_appendFixedDecimal() {\n        DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder();\n        bld.appendFixedDecimal(DateTimeFieldType.year(), 4);\n        DateTimeFormatter f = bld.toFormatter();\n\n        assertEquals(\"2007\", f.print(new DateTime(\"2007-01-01\")));\n        assertEquals(\"0123\", f.print(new DateTime(\"123-01-01\")));\n        assertEquals(\"0001\", f.print(new DateTime(\"1-2-3\")));\n        assertEquals(\"99999\", f.print(new DateTime(\"99999-2-3\")));\n        assertEquals(\"-0099\", f.print(new DateTime(\"-99-2-3\")));\n        assertEquals(\"0000\", f.print(new DateTime(\"0-2-3\")));\n\n        assertEquals(2001, f.parseDateTime(\"2001\").getYear());\n        try {\n            f.parseDateTime(\"-2001\");\n            fail();\n        } catch (IllegalArgumentException e) {\n        }\n        try {\n            f.parseDateTime(\"200\");\n            fail();\n        } catch (IllegalArgumentException e) {\n        }\n        try {\n            f.parseDateTime(\"20016\");\n            fail();\n        } catch (IllegalArgumentException e) {\n        }\n\n        bld = new DateTimeFormatterBuilder();\n        bld.appendFixedDecimal(DateTimeFieldType.hourOfDay(), 2);\n        bld.appendLiteral(':');\n        bld.appendFixedDecimal(DateTimeFieldType.minuteOfHour(), 2);\n        bld.appendLiteral(':');\n        bld.appendFixedDecimal(DateTimeFieldType.secondOfMinute(), 2);\n        f = bld.toFormatter();\n\n        assertEquals(\"01:02:34\", f.print(new DateTime(\"T1:2:34\")));\n\n        DateTime dt = f.parseDateTime(\"01:02:34\");\n        assertEquals(1, dt.getHourOfDay());\n        assertEquals(2, dt.getMinuteOfHour());\n        assertEquals(34, dt.getSecondOfMinute());\n\n        try {\n            f.parseDateTime(\"0145:02:34\");\n            fail();\n        } catch (IllegalArgumentException e) {\n        }\n        try {\n            f.parseDateTime(\"01:0:34\");\n            fail();\n        } catch (IllegalArgumentException e) {\n        }\n    }\n",
        "begin_line": 140,
        "end_line": 194,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 141,col 9)-(line 141,col 70)",
            "(line 142,col 9)-(line 142,col 60)",
            "(line 143,col 9)-(line 143,col 48)",
            "(line 145,col 9)-(line 145,col 66)",
            "(line 146,col 9)-(line 146,col 65)",
            "(line 147,col 9)-(line 147,col 61)",
            "(line 148,col 9)-(line 148,col 66)",
            "(line 149,col 9)-(line 149,col 64)",
            "(line 150,col 9)-(line 150,col 61)",
            "(line 152,col 9)-(line 152,col 62)",
            "(line 153,col 9)-(line 157,col 9)",
            "(line 158,col 9)-(line 162,col 9)",
            "(line 163,col 9)-(line 167,col 9)",
            "(line 169,col 9)-(line 169,col 45)",
            "(line 170,col 9)-(line 170,col 65)",
            "(line 171,col 9)-(line 171,col 31)",
            "(line 172,col 9)-(line 172,col 68)",
            "(line 173,col 9)-(line 173,col 31)",
            "(line 174,col 9)-(line 174,col 70)",
            "(line 175,col 9)-(line 175,col 30)",
            "(line 177,col 9)-(line 177,col 67)",
            "(line 179,col 9)-(line 179,col 50)",
            "(line 180,col 9)-(line 180,col 43)",
            "(line 181,col 9)-(line 181,col 46)",
            "(line 182,col 9)-(line 182,col 49)",
            "(line 184,col 9)-(line 188,col 9)",
            "(line 189,col 9)-(line 193,col 9)"
        ]
    },
    {
        "class_name": "org.joda.time.format.TestDateTimeFormatterBuilder",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java",
        "signature": "org.joda.time.format.TestDateTimeFormatterBuilder.test_appendFixedSignedDecimal()",
        "snippet": "    public void test_appendFixedSignedDecimal() {\n        DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder();\n        bld.appendFixedSignedDecimal(DateTimeFieldType.year(), 4);\n        DateTimeFormatter f = bld.toFormatter();\n\n        assertEquals(\"2007\", f.print(new DateTime(\"2007-01-01\")));\n        assertEquals(\"0123\", f.print(new DateTime(\"123-01-01\")));\n        assertEquals(\"0001\", f.print(new DateTime(\"1-2-3\")));\n        assertEquals(\"99999\", f.print(new DateTime(\"99999-2-3\")));\n        assertEquals(\"-0099\", f.print(new DateTime(\"-99-2-3\")));\n        assertEquals(\"0000\", f.print(new DateTime(\"0-2-3\")));\n\n        assertEquals(2001, f.parseDateTime(\"2001\").getYear());\n        assertEquals(-2001, f.parseDateTime(\"-2001\").getYear());\n        assertEquals(2001, f.parseDateTime(\"+2001\").getYear());\n        try {\n            f.parseDateTime(\"20016\");\n            fail();\n        } catch (IllegalArgumentException e) {\n        }\n    }\n",
        "begin_line": 197,
        "end_line": 217,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 198,col 9)-(line 198,col 70)",
            "(line 199,col 9)-(line 199,col 66)",
            "(line 200,col 9)-(line 200,col 48)",
            "(line 202,col 9)-(line 202,col 66)",
            "(line 203,col 9)-(line 203,col 65)",
            "(line 204,col 9)-(line 204,col 61)",
            "(line 205,col 9)-(line 205,col 66)",
            "(line 206,col 9)-(line 206,col 64)",
            "(line 207,col 9)-(line 207,col 61)",
            "(line 209,col 9)-(line 209,col 62)",
            "(line 210,col 9)-(line 210,col 64)",
            "(line 211,col 9)-(line 211,col 63)",
            "(line 212,col 9)-(line 216,col 9)"
        ]
    },
    {
        "class_name": "org.joda.time.format.TestDateTimeFormatterBuilder",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java",
        "signature": "org.joda.time.format.TestDateTimeFormatterBuilder.test_appendTimeZoneId()",
        "snippet": "    public void test_appendTimeZoneId() {\n        DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder();\n        bld.appendTimeZoneId();\n        DateTimeFormatter f = bld.toFormatter();\n        \n        assertEquals(\"Asia/Tokyo\", f.print(new DateTime(2007, 3, 4, 0, 0, 0, TOKYO)));\n        assertEquals(TOKYO, f.parseDateTime(\"Asia/Tokyo\").getZone());\n        try {\n            f.parseDateTime(\"Nonsense\");\n            fail();\n        } catch (IllegalArgumentException e) {\n        }\n    }\n",
        "begin_line": 220,
        "end_line": 232,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 221,col 9)-(line 221,col 70)",
            "(line 222,col 9)-(line 222,col 31)",
            "(line 223,col 9)-(line 223,col 48)",
            "(line 225,col 9)-(line 225,col 86)",
            "(line 226,col 9)-(line 226,col 69)",
            "(line 227,col 9)-(line 231,col 9)"
        ]
    },
    {
        "class_name": "org.joda.time.format.TestDateTimeFormatterBuilder",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java",
        "signature": "org.joda.time.format.TestDateTimeFormatterBuilder.test_printParseZoneTokyo()",
        "snippet": "    public void test_printParseZoneTokyo() {\n        DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder()\n            .appendPattern(\"yyyy-MM-dd HH:mm \").appendTimeZoneId();\n        DateTimeFormatter f = bld.toFormatter();\n        \n        DateTime dt = new DateTime(2007, 3, 4, 12, 30, 0, TOKYO);\n        assertEquals(\"2007-03-04 12:30 Asia/Tokyo\", f.print(dt));\n        assertEquals(dt, f.parseDateTime(\"2007-03-04 12:30 Asia/Tokyo\"));\n    }\n",
        "begin_line": 234,
        "end_line": 242,
        "comment": "",
        "child_ranges": [
            "(line 235,col 9)-(line 236,col 67)",
            "(line 237,col 9)-(line 237,col 48)",
            "(line 239,col 9)-(line 239,col 65)",
            "(line 240,col 9)-(line 240,col 65)",
            "(line 241,col 9)-(line 241,col 73)"
        ]
    },
    {
        "class_name": "org.joda.time.format.TestDateTimeFormatterBuilder",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java",
        "signature": "org.joda.time.format.TestDateTimeFormatterBuilder.test_printParseZoneParis()",
        "snippet": "    public void test_printParseZoneParis() {\n        DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder()\n            .appendPattern(\"yyyy-MM-dd HH:mm \").appendTimeZoneId();\n        DateTimeFormatter f = bld.toFormatter();\n        \n        DateTime dt = new DateTime(2007, 3, 4, 12, 30, 0, PARIS);\n        assertEquals(\"2007-03-04 12:30 Europe/Paris\", f.print(dt));\n        assertEquals(dt, f.parseDateTime(\"2007-03-04 12:30 Europe/Paris\"));\n        assertEquals(dt, f.withOffsetParsed().parseDateTime(\"2007-03-04 12:30 Europe/Paris\"));\n    }\n",
        "begin_line": 244,
        "end_line": 253,
        "comment": "",
        "child_ranges": [
            "(line 245,col 9)-(line 246,col 67)",
            "(line 247,col 9)-(line 247,col 48)",
            "(line 249,col 9)-(line 249,col 65)",
            "(line 250,col 9)-(line 250,col 67)",
            "(line 251,col 9)-(line 251,col 75)",
            "(line 252,col 9)-(line 252,col 94)"
        ]
    },
    {
        "class_name": "org.joda.time.format.TestDateTimeFormatterBuilder",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java",
        "signature": "org.joda.time.format.TestDateTimeFormatterBuilder.test_printParseZoneDawsonCreek()",
        "snippet": "    public void test_printParseZoneDawsonCreek() {  // clashes with shorter Dawson\n        DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder()\n            .appendPattern(\"yyyy-MM-dd HH:mm \").appendTimeZoneId();\n        DateTimeFormatter f = bld.toFormatter();\n        \n        DateTime dt = new DateTime(2007, 3, 4, 12, 30, 0, DateTimeZone.forID(\"America/Dawson_Creek\"));\n        assertEquals(\"2007-03-04 12:30 America/Dawson_Creek\", f.print(dt));\n        assertEquals(dt, f.parseDateTime(\"2007-03-04 12:30 America/Dawson_Creek\"));\n    }\n",
        "begin_line": 255,
        "end_line": 263,
        "comment": "",
        "child_ranges": [
            "(line 256,col 9)-(line 257,col 67)",
            "(line 258,col 9)-(line 258,col 48)",
            "(line 260,col 9)-(line 260,col 102)",
            "(line 261,col 9)-(line 261,col 75)",
            "(line 262,col 9)-(line 262,col 83)"
        ]
    },
    {
        "class_name": "org.joda.time.format.TestDateTimeFormatterBuilder",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java",
        "signature": "org.joda.time.format.TestDateTimeFormatterBuilder.test_printParseOffset()",
        "snippet": "    public void test_printParseOffset() {\n        DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder()\n            .appendPattern(\"yyyy-MM-dd HH:mm \").appendTimeZoneOffset(\"Z\", true, 2, 2);\n        DateTimeFormatter f = bld.toFormatter();\n        \n        DateTime dt = new DateTime(2007, 3, 4, 12, 30, 0, TOKYO);\n        assertEquals(\"2007-03-04 12:30 +09:00\", f.print(dt));\n        assertEquals(dt.withZone(DateTimeZone.getDefault()), f.parseDateTime(\"2007-03-04 12:30 +09:00\"));\n        assertEquals(dt, f.withZone(TOKYO).parseDateTime(\"2007-03-04 12:30 +09:00\"));\n        assertEquals(dt.withZone(DateTimeZone.forOffsetHours(9)), f.withOffsetParsed().parseDateTime(\"2007-03-04 12:30 +09:00\"));\n    }\n",
        "begin_line": 265,
        "end_line": 275,
        "comment": "",
        "child_ranges": [
            "(line 266,col 9)-(line 267,col 86)",
            "(line 268,col 9)-(line 268,col 48)",
            "(line 270,col 9)-(line 270,col 65)",
            "(line 271,col 9)-(line 271,col 61)",
            "(line 272,col 9)-(line 272,col 105)",
            "(line 273,col 9)-(line 273,col 85)",
            "(line 274,col 9)-(line 274,col 129)"
        ]
    },
    {
        "class_name": "org.joda.time.format.TestDateTimeFormatterBuilder",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java",
        "signature": "org.joda.time.format.TestDateTimeFormatterBuilder.test_printParseOffsetAndZone()",
        "snippet": "    public void test_printParseOffsetAndZone() {\n        DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder()\n            .appendPattern(\"yyyy-MM-dd HH:mm \").appendTimeZoneOffset(\"Z\", true, 2, 2).appendLiteral(' ').appendTimeZoneId();\n        DateTimeFormatter f = bld.toFormatter();\n        \n        DateTime dt = new DateTime(2007, 3, 4, 12, 30, 0, TOKYO);\n        assertEquals(\"2007-03-04 12:30 +09:00 Asia/Tokyo\", f.print(dt));\n        assertEquals(dt, f.withZone(TOKYO).parseDateTime(\"2007-03-04 12:30 +09:00 Asia/Tokyo\"));\n        assertEquals(dt.withZone(PARIS), f.withZone(PARIS).parseDateTime(\"2007-03-04 12:30 +09:00 Asia/Tokyo\"));\n        assertEquals(dt.withZone(DateTimeZone.forOffsetHours(9)), f.withOffsetParsed().parseDateTime(\"2007-03-04 12:30 +09:00 Asia/Tokyo\"));\n    }\n",
        "begin_line": 277,
        "end_line": 287,
        "comment": "",
        "child_ranges": [
            "(line 278,col 9)-(line 279,col 124)",
            "(line 280,col 9)-(line 280,col 48)",
            "(line 282,col 9)-(line 282,col 65)",
            "(line 283,col 9)-(line 283,col 72)",
            "(line 284,col 9)-(line 284,col 96)",
            "(line 285,col 9)-(line 285,col 112)",
            "(line 286,col 9)-(line 286,col 140)"
        ]
    },
    {
        "class_name": "org.joda.time.format.TestDateTimeFormatterBuilder",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java",
        "signature": "org.joda.time.format.TestDateTimeFormatterBuilder.test_parseWrongOffset()",
        "snippet": "    public void test_parseWrongOffset() {\n        DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder()\n            .appendPattern(\"yyyy-MM-dd HH:mm \").appendTimeZoneOffset(\"Z\", true, 2, 2);\n        DateTimeFormatter f = bld.toFormatter();\n        \n        DateTime expected = new DateTime(2007, 3, 4, 12, 30, 0, DateTimeZone.forOffsetHours(7));\n        // parses offset time then adjusts to requested zone\n        assertEquals(expected.withZone(TOKYO), f.withZone(TOKYO).parseDateTime(\"2007-03-04 12:30 +07:00\"));\n        // parses offset time returning offset zone\n        assertEquals(expected, f.withOffsetParsed().parseDateTime(\"2007-03-04 12:30 +07:00\"));\n        // parses offset time then converts to default zone\n        assertEquals(expected.withZone(DateTimeZone.getDefault()), f.parseDateTime(\"2007-03-04 12:30 +07:00\"));\n    }\n",
        "begin_line": 289,
        "end_line": 301,
        "comment": "",
        "child_ranges": [
            "(line 290,col 9)-(line 291,col 86)",
            "(line 292,col 9)-(line 292,col 48)",
            "(line 294,col 9)-(line 294,col 96)",
            "(line 296,col 9)-(line 296,col 107)",
            "(line 298,col 9)-(line 298,col 94)",
            "(line 300,col 9)-(line 300,col 111)"
        ]
    },
    {
        "class_name": "org.joda.time.format.TestDateTimeFormatterBuilder",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java",
        "signature": "org.joda.time.format.TestDateTimeFormatterBuilder.test_parseWrongOffsetAndZone()",
        "snippet": "    public void test_parseWrongOffsetAndZone() {\n        DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder()\n            .appendPattern(\"yyyy-MM-dd HH:mm \").appendTimeZoneOffset(\"Z\", true, 2, 2).appendLiteral(' ').appendTimeZoneId();\n        DateTimeFormatter f = bld.toFormatter();\n        \n        DateTime expected = new DateTime(2007, 3, 4, 12, 30, 0, DateTimeZone.forOffsetHours(7));\n        // parses offset time then adjusts to parsed zone\n        assertEquals(expected.withZone(TOKYO), f.parseDateTime(\"2007-03-04 12:30 +07:00 Asia/Tokyo\"));\n        // parses offset time then adjusts to requested zone\n        assertEquals(expected.withZone(TOKYO), f.withZone(TOKYO).parseDateTime(\"2007-03-04 12:30 +07:00 Asia/Tokyo\"));\n        // parses offset time returning offset zone (ignores zone)\n        assertEquals(expected, f.withOffsetParsed().parseDateTime(\"2007-03-04 12:30 +07:00 Asia/Tokyo\"));\n    }\n",
        "begin_line": 303,
        "end_line": 315,
        "comment": "",
        "child_ranges": [
            "(line 304,col 9)-(line 305,col 124)",
            "(line 306,col 9)-(line 306,col 48)",
            "(line 308,col 9)-(line 308,col 96)",
            "(line 310,col 9)-(line 310,col 102)",
            "(line 312,col 9)-(line 312,col 118)",
            "(line 314,col 9)-(line 314,col 105)"
        ]
    },
    {
        "class_name": "org.joda.time.format.TestDateTimeFormatterBuilder",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java",
        "signature": "org.joda.time.format.TestDateTimeFormatterBuilder.test_localPrintParseZoneTokyo()",
        "snippet": "    public void test_localPrintParseZoneTokyo() {\n        DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder()\n            .appendPattern(\"yyyy-MM-dd HH:mm \").appendTimeZoneId();\n        DateTimeFormatter f = bld.toFormatter();\n        \n        DateTime dt = new DateTime(2007, 3, 4, 12, 30, 0, TOKYO);\n        assertEquals(\"2007-03-04 12:30 Asia/Tokyo\", f.print(dt));\n        \n        LocalDateTime expected = new LocalDateTime(2007, 3, 4, 12, 30);\n        assertEquals(expected, f.parseLocalDateTime(\"2007-03-04 12:30 Asia/Tokyo\"));\n    }\n",
        "begin_line": 318,
        "end_line": 328,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 319,col 9)-(line 320,col 67)",
            "(line 321,col 9)-(line 321,col 48)",
            "(line 323,col 9)-(line 323,col 65)",
            "(line 324,col 9)-(line 324,col 65)",
            "(line 326,col 9)-(line 326,col 71)",
            "(line 327,col 9)-(line 327,col 84)"
        ]
    },
    {
        "class_name": "org.joda.time.format.TestDateTimeFormatterBuilder",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java",
        "signature": "org.joda.time.format.TestDateTimeFormatterBuilder.test_localPrintParseOffset()",
        "snippet": "    public void test_localPrintParseOffset() {\n        DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder()\n            .appendPattern(\"yyyy-MM-dd HH:mm \").appendTimeZoneOffset(\"Z\", true, 2, 2);\n        DateTimeFormatter f = bld.toFormatter();\n        \n        DateTime dt = new DateTime(2007, 3, 4, 12, 30, 0, TOKYO);\n        assertEquals(\"2007-03-04 12:30 +09:00\", f.print(dt));\n        \n        LocalDateTime expected = new LocalDateTime(2007, 3, 4, 12, 30);\n        assertEquals(expected, f.parseLocalDateTime(\"2007-03-04 12:30 +09:00\"));\n        assertEquals(expected, f.withZone(TOKYO).parseLocalDateTime(\"2007-03-04 12:30 +09:00\"));\n        assertEquals(expected, f.withOffsetParsed().parseLocalDateTime(\"2007-03-04 12:30 +09:00\"));\n    }\n",
        "begin_line": 330,
        "end_line": 342,
        "comment": "",
        "child_ranges": [
            "(line 331,col 9)-(line 332,col 86)",
            "(line 333,col 9)-(line 333,col 48)",
            "(line 335,col 9)-(line 335,col 65)",
            "(line 336,col 9)-(line 336,col 61)",
            "(line 338,col 9)-(line 338,col 71)",
            "(line 339,col 9)-(line 339,col 80)",
            "(line 340,col 9)-(line 340,col 96)",
            "(line 341,col 9)-(line 341,col 99)"
        ]
    },
    {
        "class_name": "org.joda.time.format.TestDateTimeFormatterBuilder",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java",
        "signature": "org.joda.time.format.TestDateTimeFormatterBuilder.test_localPrintParseOffsetAndZone()",
        "snippet": "    public void test_localPrintParseOffsetAndZone() {\n        DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder()\n            .appendPattern(\"yyyy-MM-dd HH:mm \").appendTimeZoneOffset(\"Z\", true, 2, 2).appendLiteral(' ').appendTimeZoneId();\n        DateTimeFormatter f = bld.toFormatter();\n        \n        DateTime dt = new DateTime(2007, 3, 4, 12, 30, 0, TOKYO);\n        assertEquals(\"2007-03-04 12:30 +09:00 Asia/Tokyo\", f.print(dt));\n        \n        LocalDateTime expected = new LocalDateTime(2007, 3, 4, 12, 30);\n        assertEquals(expected, f.withZone(TOKYO).parseLocalDateTime(\"2007-03-04 12:30 +09:00 Asia/Tokyo\"));\n        assertEquals(expected, f.withZone(PARIS).parseLocalDateTime(\"2007-03-04 12:30 +09:00 Asia/Tokyo\"));\n    }\n",
        "begin_line": 344,
        "end_line": 355,
        "comment": "",
        "child_ranges": [
            "(line 345,col 9)-(line 346,col 124)",
            "(line 347,col 9)-(line 347,col 48)",
            "(line 349,col 9)-(line 349,col 65)",
            "(line 350,col 9)-(line 350,col 72)",
            "(line 352,col 9)-(line 352,col 71)",
            "(line 353,col 9)-(line 353,col 107)",
            "(line 354,col 9)-(line 354,col 107)"
        ]
    },
    {
        "class_name": "org.joda.time.format.TestDateTimeFormatterBuilder",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java",
        "signature": "org.joda.time.format.TestDateTimeFormatterBuilder.test_localParseWrongOffsetAndZone()",
        "snippet": "    public void test_localParseWrongOffsetAndZone() {\n        DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder()\n            .appendPattern(\"yyyy-MM-dd HH:mm \").appendTimeZoneOffset(\"Z\", true, 2, 2).appendLiteral(' ').appendTimeZoneId();\n        DateTimeFormatter f = bld.toFormatter();\n        \n        LocalDateTime expected = new LocalDateTime(2007, 3, 4, 12, 30);\n        // parses offset time then adjusts to parsed zone\n        assertEquals(expected, f.parseLocalDateTime(\"2007-03-04 12:30 +07:00 Asia/Tokyo\"));\n        // parses offset time then adjusts to requested zone\n        assertEquals(expected, f.withZone(TOKYO).parseLocalDateTime(\"2007-03-04 12:30 +07:00 Asia/Tokyo\"));\n        // parses offset time returning offset zone (ignores zone)\n        assertEquals(expected, f.withOffsetParsed().parseLocalDateTime(\"2007-03-04 12:30 +07:00 Asia/Tokyo\"));\n    }\n",
        "begin_line": 357,
        "end_line": 369,
        "comment": "",
        "child_ranges": [
            "(line 358,col 9)-(line 359,col 124)",
            "(line 360,col 9)-(line 360,col 48)",
            "(line 362,col 9)-(line 362,col 71)",
            "(line 364,col 9)-(line 364,col 91)",
            "(line 366,col 9)-(line 366,col 107)",
            "(line 368,col 9)-(line 368,col 110)"
        ]
    },
    {
        "class_name": "org.joda.time.format.TestDateTimeFormatterBuilder",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java",
        "signature": "org.joda.time.format.TestDateTimeFormatterBuilder.test_printParseShortName()",
        "snippet": "    public void test_printParseShortName() {}\n",
        "begin_line": 372,
        "end_line": 372,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": []
    },
    {
        "class_name": "org.joda.time.format.TestDateTimeFormatterBuilder",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java",
        "signature": "org.joda.time.format.TestDateTimeFormatterBuilder.test_printParseShortNameWithLookup()",
        "snippet": "    public void test_printParseShortNameWithLookup() {}\n",
        "begin_line": 390,
        "end_line": 390,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.joda.time.format.TestDateTimeFormatterBuilder",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java",
        "signature": "org.joda.time.format.TestDateTimeFormatterBuilder.test_printParseLongName()",
        "snippet": "    public void test_printParseLongName() {}\n",
        "begin_line": 415,
        "end_line": 415,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": []
    },
    {
        "class_name": "org.joda.time.format.TestDateTimeFormatterBuilder",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java",
        "signature": "org.joda.time.format.TestDateTimeFormatterBuilder.test_printParseLongNameWithLookup()",
        "snippet": "    public void test_printParseLongNameWithLookup() {}\n",
        "begin_line": 433,
        "end_line": 433,
        "comment": "",
        "child_ranges": []
    }
]