[
    {
        "class_name": "com.google.javascript.jscomp.PeepholeFoldConstantsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java",
        "signature": "com.google.javascript.jscomp.PeepholeFoldConstantsTest.PeepholeFoldConstantsTest(boolean)",
        "snippet": "  private PeepholeFoldConstantsTest(boolean compareAsTree) {\n    super(\"\", compareAsTree);\n  }\n",
        "begin_line": 26,
        "end_line": 28,
        "comment": " TODO(user): Remove this when we no longer need to do string comparison.",
        "child_ranges": [
            "(line 27,col 5)-(line 27,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PeepholeFoldConstantsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java",
        "signature": "com.google.javascript.jscomp.PeepholeFoldConstantsTest.PeepholeFoldConstantsTest()",
        "snippet": "  public PeepholeFoldConstantsTest() {\n    super(\"\");\n  }\n",
        "begin_line": 30,
        "end_line": 32,
        "comment": "",
        "child_ranges": [
            "(line 31,col 5)-(line 31,col 14)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PeepholeFoldConstantsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java",
        "signature": "com.google.javascript.jscomp.PeepholeFoldConstantsTest.setUp()",
        "snippet": "  @Override\n  public void setUp() {\n    enableLineNumberCheck(true);\n  }\n",
        "begin_line": 34,
        "end_line": 37,
        "comment": "",
        "child_ranges": [
            "(line 36,col 5)-(line 36,col 32)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PeepholeFoldConstantsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java",
        "signature": "com.google.javascript.jscomp.PeepholeFoldConstantsTest.getProcessor(com.google.javascript.jscomp.Compiler)",
        "snippet": "  @Override\n  public CompilerPass getProcessor(final Compiler compiler) {\n    CompilerPass peepholePass = new PeepholeOptimizationsPass(compiler,\n          new PeepholeFoldConstants());\n\n    return peepholePass;\n  }\n",
        "begin_line": 39,
        "end_line": 45,
        "comment": "",
        "child_ranges": [
            "(line 41,col 5)-(line 42,col 39)",
            "(line 44,col 5)-(line 44,col 24)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PeepholeFoldConstantsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java",
        "signature": "com.google.javascript.jscomp.PeepholeFoldConstantsTest.getNumRepetitions()",
        "snippet": "  @Override\n  protected int getNumRepetitions() {\n    // Reduce this to 2 if we get better expression evaluators.\n    return 2;\n  }\n",
        "begin_line": 47,
        "end_line": 51,
        "comment": "",
        "child_ranges": [
            "(line 50,col 5)-(line 50,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PeepholeFoldConstantsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java",
        "signature": "com.google.javascript.jscomp.PeepholeFoldConstantsTest.foldSame(java.lang.String)",
        "snippet": "  private void foldSame(String js) {\n    testSame(js);\n  }\n",
        "begin_line": 53,
        "end_line": 55,
        "comment": "",
        "child_ranges": [
            "(line 54,col 5)-(line 54,col 17)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PeepholeFoldConstantsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java",
        "signature": "com.google.javascript.jscomp.PeepholeFoldConstantsTest.fold(java.lang.String, java.lang.String)",
        "snippet": "  private void fold(String js, String expected) {\n    test(js, expected);\n  }\n",
        "begin_line": 57,
        "end_line": 59,
        "comment": "",
        "child_ranges": [
            "(line 58,col 5)-(line 58,col 23)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PeepholeFoldConstantsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java",
        "signature": "com.google.javascript.jscomp.PeepholeFoldConstantsTest.fold(java.lang.String, java.lang.String, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  private void fold(String js, String expected, DiagnosticType warning) {\n    test(js, expected, warning);\n  }\n",
        "begin_line": 61,
        "end_line": 63,
        "comment": "",
        "child_ranges": [
            "(line 62,col 5)-(line 62,col 32)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PeepholeFoldConstantsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java",
        "signature": "com.google.javascript.jscomp.PeepholeFoldConstantsTest.assertResultString(java.lang.String, java.lang.String)",
        "snippet": "  private void assertResultString(String js, String expected) {\n    PeepholeFoldConstantsTest scTest = new PeepholeFoldConstantsTest(false);\n\n    scTest.test(js, expected);\n  }\n",
        "begin_line": 67,
        "end_line": 71,
        "comment": " test that needs tell us where a folding is constructing an invalid AST.",
        "child_ranges": [
            "(line 68,col 5)-(line 68,col 76)",
            "(line 70,col 5)-(line 70,col 30)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PeepholeFoldConstantsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java",
        "signature": "com.google.javascript.jscomp.PeepholeFoldConstantsTest.testUndefinedComparison()",
        "snippet": "  public void testUndefinedComparison() {\n    fold(\"undefined == undefined\", \"true\");\n    fold(\"undefined == null\", \"true\");\n    fold(\"undefined == void 0\", \"true\");\n\n    fold(\"undefined == 0\", \"false\");\n    fold(\"undefined == 1\", \"false\");\n    fold(\"undefined == 'hi'\", \"false\");\n    fold(\"undefined == true\", \"false\");\n    fold(\"undefined == false\", \"false\");\n\n    fold(\"undefined === undefined\", \"true\");\n    fold(\"undefined === null\", \"false\");\n    fold(\"undefined === void 0\", \"true\");\n\n    foldSame(\"undefined == this\");\n    foldSame(\"undefined == x\");\n\n    fold(\"undefined != undefined\", \"false\");\n    fold(\"undefined != null\", \"false\");\n    fold(\"undefined != void 0\", \"false\");\n\n    fold(\"undefined != 0\", \"true\");\n    fold(\"undefined != 1\", \"true\");\n    fold(\"undefined != 'hi'\", \"true\");\n    fold(\"undefined != true\", \"true\");\n    fold(\"undefined != false\", \"true\");\n\n    fold(\"undefined !== undefined\", \"false\");\n    fold(\"undefined !== void 0\", \"false\");\n    fold(\"undefined !== null\", \"true\");\n\n    foldSame(\"undefined != this\");\n    foldSame(\"undefined != x\");\n\n    fold(\"undefined < undefined\", \"false\");\n    fold(\"undefined > undefined\", \"false\");\n    fold(\"undefined >= undefined\", \"false\");\n    fold(\"undefined <= undefined\", \"false\");\n\n    fold(\"0 < undefined\", \"false\");\n    fold(\"true > undefined\", \"false\");\n    fold(\"'hi' >= undefined\", \"false\");\n    fold(\"null <= undefined\", \"false\");\n\n    fold(\"undefined < 0\", \"false\");\n    fold(\"undefined > true\", \"false\");\n    fold(\"undefined >= 'hi'\", \"false\");\n    fold(\"undefined <= null\", \"false\");\n\n    fold(\"null == undefined\", \"true\");\n    fold(\"0 == undefined\", \"false\");\n    fold(\"1 == undefined\", \"false\");\n    fold(\"'hi' == undefined\", \"false\");\n    fold(\"true == undefined\", \"false\");\n    fold(\"false == undefined\", \"false\");\n    fold(\"null === undefined\", \"false\");\n    fold(\"void 0 === undefined\", \"true\");\n\n    foldSame(\"this == undefined\");\n    foldSame(\"x == undefined\");\n  }\n",
        "begin_line": 73,
        "end_line": 134,
        "comment": "",
        "child_ranges": [
            "(line 74,col 5)-(line 74,col 43)",
            "(line 75,col 5)-(line 75,col 38)",
            "(line 76,col 5)-(line 76,col 40)",
            "(line 78,col 5)-(line 78,col 36)",
            "(line 79,col 5)-(line 79,col 36)",
            "(line 80,col 5)-(line 80,col 39)",
            "(line 81,col 5)-(line 81,col 39)",
            "(line 82,col 5)-(line 82,col 40)",
            "(line 84,col 5)-(line 84,col 44)",
            "(line 85,col 5)-(line 85,col 40)",
            "(line 86,col 5)-(line 86,col 41)",
            "(line 88,col 5)-(line 88,col 34)",
            "(line 89,col 5)-(line 89,col 31)",
            "(line 91,col 5)-(line 91,col 44)",
            "(line 92,col 5)-(line 92,col 39)",
            "(line 93,col 5)-(line 93,col 41)",
            "(line 95,col 5)-(line 95,col 35)",
            "(line 96,col 5)-(line 96,col 35)",
            "(line 97,col 5)-(line 97,col 38)",
            "(line 98,col 5)-(line 98,col 38)",
            "(line 99,col 5)-(line 99,col 39)",
            "(line 101,col 5)-(line 101,col 45)",
            "(line 102,col 5)-(line 102,col 42)",
            "(line 103,col 5)-(line 103,col 39)",
            "(line 105,col 5)-(line 105,col 34)",
            "(line 106,col 5)-(line 106,col 31)",
            "(line 108,col 5)-(line 108,col 43)",
            "(line 109,col 5)-(line 109,col 43)",
            "(line 110,col 5)-(line 110,col 44)",
            "(line 111,col 5)-(line 111,col 44)",
            "(line 113,col 5)-(line 113,col 35)",
            "(line 114,col 5)-(line 114,col 38)",
            "(line 115,col 5)-(line 115,col 39)",
            "(line 116,col 5)-(line 116,col 39)",
            "(line 118,col 5)-(line 118,col 35)",
            "(line 119,col 5)-(line 119,col 38)",
            "(line 120,col 5)-(line 120,col 39)",
            "(line 121,col 5)-(line 121,col 39)",
            "(line 123,col 5)-(line 123,col 38)",
            "(line 124,col 5)-(line 124,col 36)",
            "(line 125,col 5)-(line 125,col 36)",
            "(line 126,col 5)-(line 126,col 39)",
            "(line 127,col 5)-(line 127,col 39)",
            "(line 128,col 5)-(line 128,col 40)",
            "(line 129,col 5)-(line 129,col 40)",
            "(line 130,col 5)-(line 130,col 41)",
            "(line 132,col 5)-(line 132,col 34)",
            "(line 133,col 5)-(line 133,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PeepholeFoldConstantsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java",
        "signature": "com.google.javascript.jscomp.PeepholeFoldConstantsTest.testUnaryOps()",
        "snippet": "  public void testUnaryOps() {\n    fold(\"!foo()\", \"foo()\");\n    fold(\"~foo()\", \"foo()\");\n    fold(\"-foo()\", \"foo()\");\n    fold(\"a=!true\", \"a=false\");\n    fold(\"a=!10\", \"a=false\");\n    fold(\"a=!false\", \"a=true\");\n    fold(\"a=!foo()\", \"a=!foo()\");\n    fold(\"a=-0\", \"a=0\");\n    fold(\"a=-Infinity\", \"a=-Infinity\");\n    fold(\"a=-NaN\", \"a=NaN\");\n    fold(\"a=-foo()\", \"a=-foo()\");\n    fold(\"a=~~0\", \"a=0\");\n    fold(\"a=~~10\", \"a=10\");\n    fold(\"a=~-7\", \"a=6\");\n    fold(\"a=~0x100000000\", \"a=~0x100000000\",\n         PeepholeFoldConstants.BITWISE_OPERAND_OUT_OF_RANGE);\n    fold(\"a=~-0x100000000\", \"a=~-0x100000000\",\n         PeepholeFoldConstants.BITWISE_OPERAND_OUT_OF_RANGE);\n    fold(\"a=~.5\", \"~.5\", PeepholeFoldConstants.FRACTIONAL_BITWISE_OPERAND);\n  }\n",
        "begin_line": 136,
        "end_line": 156,
        "comment": "",
        "child_ranges": [
            "(line 137,col 5)-(line 137,col 28)",
            "(line 138,col 5)-(line 138,col 28)",
            "(line 139,col 5)-(line 139,col 28)",
            "(line 140,col 5)-(line 140,col 31)",
            "(line 141,col 5)-(line 141,col 29)",
            "(line 142,col 5)-(line 142,col 31)",
            "(line 143,col 5)-(line 143,col 33)",
            "(line 144,col 5)-(line 144,col 24)",
            "(line 145,col 5)-(line 145,col 39)",
            "(line 146,col 5)-(line 146,col 28)",
            "(line 147,col 5)-(line 147,col 33)",
            "(line 148,col 5)-(line 148,col 25)",
            "(line 149,col 5)-(line 149,col 27)",
            "(line 150,col 5)-(line 150,col 25)",
            "(line 151,col 5)-(line 152,col 61)",
            "(line 153,col 5)-(line 154,col 61)",
            "(line 155,col 5)-(line 155,col 75)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PeepholeFoldConstantsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java",
        "signature": "com.google.javascript.jscomp.PeepholeFoldConstantsTest.testUnaryOpsStringCompare()",
        "snippet": "  public void testUnaryOpsStringCompare() {\n    // Negatives are folded into a single number node.\n    assertResultString(\"a=-1\", \"a=-1\");\n    assertResultString(\"a=~0\", \"a=-1\");\n    assertResultString(\"a=~1\", \"a=-2\");\n    assertResultString(\"a=~101\", \"a=-102\");\n  }\n",
        "begin_line": 158,
        "end_line": 164,
        "comment": "",
        "child_ranges": [
            "(line 160,col 5)-(line 160,col 39)",
            "(line 161,col 5)-(line 161,col 39)",
            "(line 162,col 5)-(line 162,col 39)",
            "(line 163,col 5)-(line 163,col 43)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PeepholeFoldConstantsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java",
        "signature": "com.google.javascript.jscomp.PeepholeFoldConstantsTest.testFoldLogicalOp()",
        "snippet": "  public void testFoldLogicalOp() {\n    fold(\"x = true && x\", \"x = x\");\n    fold(\"x = false && x\", \"x = false\");\n    fold(\"x = true || x\", \"x = true\");\n    fold(\"x = false || x\", \"x = x\");\n    fold(\"x = 0 && x\", \"x = 0\");\n    fold(\"x = 3 || x\", \"x = 3\");\n    fold(\"x = false || 0\", \"x = 0\");\n\n    // surprisingly unfoldable\n    fold(\"a = x && true\", \"a=x&&true\");\n    fold(\"a = x && false\", \"a=x&&false\");\n    fold(\"a = x || 3\", \"a=x||3\");\n    fold(\"a = x || false\", \"a=x||false\");\n    fold(\"a = b ? c : x || false\", \"a=b?c:x||false\");\n    fold(\"a = b ? x || false : c\", \"a=b?x||false:c\");\n    fold(\"a = b ? c : x && true\", \"a=b?c:x&&true\");\n    fold(\"a = b ? x && true : c\", \"a=b?x&&true:c\");\n\n    // foldable, analogous to if().\n    fold(\"a = x || false ? b : c\", \"a=x?b:c\");\n    fold(\"a = x && true ? b : c\", \"a=x?b:c\");\n\n    fold(\"x = foo() || true || bar()\", \"x = foo()||true\");\n    fold(\"x = foo() || false || bar()\", \"x = foo()||bar()\");\n    fold(\"x = foo() || true && bar()\", \"x = foo()||bar()\");\n    fold(\"x = foo() || false && bar()\", \"x = foo()||false\");\n    fold(\"x = foo() && false && bar()\", \"x = foo()&&false\");\n    fold(\"x = foo() && true && bar()\", \"x = foo()&&bar()\");\n    fold(\"x = foo() && false || bar()\", \"x = foo()&&false||bar()\");\n\n    // Really not foldable, because it would change the type of the\n    // expression if foo() returns something equivalent, but not\n    // identical, to true. Cf. FoldConstants.tryFoldAndOr().\n    foldSame(\"x = foo() && true || bar()\");\n    foldSame(\"foo() && true || bar()\");\n\n  }\n",
        "begin_line": 166,
        "end_line": 203,
        "comment": "",
        "child_ranges": [
            "(line 167,col 5)-(line 167,col 35)",
            "(line 168,col 5)-(line 168,col 40)",
            "(line 169,col 5)-(line 169,col 38)",
            "(line 170,col 5)-(line 170,col 36)",
            "(line 171,col 5)-(line 171,col 32)",
            "(line 172,col 5)-(line 172,col 32)",
            "(line 173,col 5)-(line 173,col 36)",
            "(line 176,col 5)-(line 176,col 39)",
            "(line 177,col 5)-(line 177,col 41)",
            "(line 178,col 5)-(line 178,col 33)",
            "(line 179,col 5)-(line 179,col 41)",
            "(line 180,col 5)-(line 180,col 53)",
            "(line 181,col 5)-(line 181,col 53)",
            "(line 182,col 5)-(line 182,col 51)",
            "(line 183,col 5)-(line 183,col 51)",
            "(line 186,col 5)-(line 186,col 46)",
            "(line 187,col 5)-(line 187,col 45)",
            "(line 189,col 5)-(line 189,col 58)",
            "(line 190,col 5)-(line 190,col 60)",
            "(line 191,col 5)-(line 191,col 59)",
            "(line 192,col 5)-(line 192,col 60)",
            "(line 193,col 5)-(line 193,col 60)",
            "(line 194,col 5)-(line 194,col 59)",
            "(line 195,col 5)-(line 195,col 67)",
            "(line 200,col 5)-(line 200,col 43)",
            "(line 201,col 5)-(line 201,col 39)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PeepholeFoldConstantsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java",
        "signature": "com.google.javascript.jscomp.PeepholeFoldConstantsTest.testFoldBitwiseOp()",
        "snippet": "  public void testFoldBitwiseOp() {\n    fold(\"x = 1 & 1\", \"x = 1\");\n    fold(\"x = 1 & 2\", \"x = 0\");\n    fold(\"x = 3 & 1\", \"x = 1\");\n    fold(\"x = 3 & 3\", \"x = 3\");\n\n    fold(\"x = 1 | 1\", \"x = 1\");\n    fold(\"x = 1 | 2\", \"x = 3\");\n    fold(\"x = 3 | 1\", \"x = 3\");\n    fold(\"x = 3 | 3\", \"x = 3\");\n\n    fold(\"x = -1 & 0\", \"x = 0\");\n    fold(\"x = 0 & -1\", \"x = 0\");\n    fold(\"x = 1 & 4\", \"x = 0\");\n    fold(\"x = 2 & 3\", \"x = 2\");\n\n    // make sure we fold only when we are supposed to -- not when doing so would\n    // lose information or when it is performed on nonsensical arguments.\n    fold(\"x = 1 & 1.1\", \"x = 1&1.1\");\n    fold(\"x = 1.1 & 1\", \"x = 1.1&1\");\n    fold(\"x = 1 & 3000000000\", \"x = 1&3000000000\");\n    fold(\"x = 3000000000 & 1\", \"x = 3000000000&1\");\n\n    // Try some cases with | as well\n    fold(\"x = 1 | 4\", \"x = 5\");\n    fold(\"x = 1 | 3\", \"x = 3\");\n    fold(\"x = 1 | 1.1\", \"x = 1|1.1\");\n    fold(\"x = 1 | 3000000000\", \"x = 1|3000000000\");\n  }\n",
        "begin_line": 205,
        "end_line": 233,
        "comment": "",
        "child_ranges": [
            "(line 206,col 5)-(line 206,col 31)",
            "(line 207,col 5)-(line 207,col 31)",
            "(line 208,col 5)-(line 208,col 31)",
            "(line 209,col 5)-(line 209,col 31)",
            "(line 211,col 5)-(line 211,col 31)",
            "(line 212,col 5)-(line 212,col 31)",
            "(line 213,col 5)-(line 213,col 31)",
            "(line 214,col 5)-(line 214,col 31)",
            "(line 216,col 5)-(line 216,col 32)",
            "(line 217,col 5)-(line 217,col 32)",
            "(line 218,col 5)-(line 218,col 31)",
            "(line 219,col 5)-(line 219,col 31)",
            "(line 223,col 5)-(line 223,col 37)",
            "(line 224,col 5)-(line 224,col 37)",
            "(line 225,col 5)-(line 225,col 51)",
            "(line 226,col 5)-(line 226,col 51)",
            "(line 229,col 5)-(line 229,col 31)",
            "(line 230,col 5)-(line 230,col 31)",
            "(line 231,col 5)-(line 231,col 37)",
            "(line 232,col 5)-(line 232,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PeepholeFoldConstantsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java",
        "signature": "com.google.javascript.jscomp.PeepholeFoldConstantsTest.testFoldBitwiseOpStringCompare()",
        "snippet": "  public void testFoldBitwiseOpStringCompare() {\n    assertResultString(\"x = -1 | 0\", \"x=-1\");\n    // EXPR_RESULT case is in in PeepholeIntegrationTest\n  }\n",
        "begin_line": 235,
        "end_line": 238,
        "comment": "",
        "child_ranges": [
            "(line 236,col 5)-(line 236,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PeepholeFoldConstantsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java",
        "signature": "com.google.javascript.jscomp.PeepholeFoldConstantsTest.testFoldBitShifts()",
        "snippet": "  public void testFoldBitShifts() {\n    fold(\"x = 1 << 0\", \"x = 1\");\n    fold(\"x = -1 << 0\", \"x = -1\");\n    fold(\"x = 1 << 1\", \"x = 2\");\n    fold(\"x = 3 << 1\", \"x = 6\");\n    fold(\"x = 1 << 8\", \"x = 256\");\n\n    fold(\"x = 1 >> 0\", \"x = 1\");\n    fold(\"x = -1 >> 0\", \"x = -1\");\n    fold(\"x = 1 >> 1\", \"x = 0\");\n    fold(\"x = 2 >> 1\", \"x = 1\");\n    fold(\"x = 5 >> 1\", \"x = 2\");\n    fold(\"x = 127 >> 3\", \"x = 15\");\n    fold(\"x = 3 >> 1\", \"x = 1\");\n    fold(\"x = 3 >> 2\", \"x = 0\");\n    fold(\"x = 10 >> 1\", \"x = 5\");\n    fold(\"x = 10 >> 2\", \"x = 2\");\n    fold(\"x = 10 >> 5\", \"x = 0\");\n\n    fold(\"x = 10 >>> 1\", \"x = 5\");\n    fold(\"x = 10 >>> 2\", \"x = 2\");\n    fold(\"x = 10 >>> 5\", \"x = 0\");\n    fold(\"x = -1 >>> 1\", \"x = 2147483647\"); // 0x7fffffff\n    fold(\"x = -1 >>> 0\", \"x = 4294967295\"); // 0xffffffff\n    fold(\"x = -2 >>> 0\", \"x = 4294967294\"); // 0xfffffffe\n\n    fold(\"3000000000 << 1\", \"3000000000<<1\",\n         PeepholeFoldConstants.BITWISE_OPERAND_OUT_OF_RANGE);\n    fold(\"1 << 32\", \"1<<32\",\n        PeepholeFoldConstants.SHIFT_AMOUNT_OUT_OF_BOUNDS);\n    fold(\"1 << -1\", \"1<<32\",\n        PeepholeFoldConstants.SHIFT_AMOUNT_OUT_OF_BOUNDS);\n    fold(\"3000000000 >> 1\", \"3000000000>>1\",\n        PeepholeFoldConstants.BITWISE_OPERAND_OUT_OF_RANGE);\n    fold(\"1 >> 32\", \"1>>32\",\n        PeepholeFoldConstants.SHIFT_AMOUNT_OUT_OF_BOUNDS);\n    fold(\"1.5 << 0\",  \"1.5<<0\",\n        PeepholeFoldConstants.FRACTIONAL_BITWISE_OPERAND);\n    fold(\"1 << .5\",   \"1.5<<0\",\n        PeepholeFoldConstants.FRACTIONAL_BITWISE_OPERAND);\n    fold(\"1.5 >>> 0\", \"1.5>>>0\",\n        PeepholeFoldConstants.FRACTIONAL_BITWISE_OPERAND);\n    fold(\"1 >>> .5\",  \"1.5>>>0\",\n        PeepholeFoldConstants.FRACTIONAL_BITWISE_OPERAND);\n    fold(\"1.5 >> 0\",  \"1.5>>0\",\n        PeepholeFoldConstants.FRACTIONAL_BITWISE_OPERAND);\n    fold(\"1 >> .5\",   \"1.5>>0\",\n        PeepholeFoldConstants.FRACTIONAL_BITWISE_OPERAND);\n  }\n",
        "begin_line": 240,
        "end_line": 288,
        "comment": "",
        "child_ranges": [
            "(line 241,col 5)-(line 241,col 32)",
            "(line 242,col 5)-(line 242,col 34)",
            "(line 243,col 5)-(line 243,col 32)",
            "(line 244,col 5)-(line 244,col 32)",
            "(line 245,col 5)-(line 245,col 34)",
            "(line 247,col 5)-(line 247,col 32)",
            "(line 248,col 5)-(line 248,col 34)",
            "(line 249,col 5)-(line 249,col 32)",
            "(line 250,col 5)-(line 250,col 32)",
            "(line 251,col 5)-(line 251,col 32)",
            "(line 252,col 5)-(line 252,col 35)",
            "(line 253,col 5)-(line 253,col 32)",
            "(line 254,col 5)-(line 254,col 32)",
            "(line 255,col 5)-(line 255,col 33)",
            "(line 256,col 5)-(line 256,col 33)",
            "(line 257,col 5)-(line 257,col 33)",
            "(line 259,col 5)-(line 259,col 34)",
            "(line 260,col 5)-(line 260,col 34)",
            "(line 261,col 5)-(line 261,col 34)",
            "(line 262,col 5)-(line 262,col 43)",
            "(line 263,col 5)-(line 263,col 43)",
            "(line 264,col 5)-(line 264,col 43)",
            "(line 266,col 5)-(line 267,col 61)",
            "(line 268,col 5)-(line 269,col 58)",
            "(line 270,col 5)-(line 271,col 58)",
            "(line 272,col 5)-(line 273,col 60)",
            "(line 274,col 5)-(line 275,col 58)",
            "(line 276,col 5)-(line 277,col 58)",
            "(line 278,col 5)-(line 279,col 58)",
            "(line 280,col 5)-(line 281,col 58)",
            "(line 282,col 5)-(line 283,col 58)",
            "(line 284,col 5)-(line 285,col 58)",
            "(line 286,col 5)-(line 287,col 58)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PeepholeFoldConstantsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java",
        "signature": "com.google.javascript.jscomp.PeepholeFoldConstantsTest.testFoldBitShiftsStringCompare()",
        "snippet": "  public void testFoldBitShiftsStringCompare() {\n    // Negative numbers.\n    assertResultString(\"x = -1 << 1\", \"x=-2\");\n    assertResultString(\"x = -1 << 8\", \"x=-256\");\n    assertResultString(\"x = -1 >> 1\", \"x=-1\");\n    assertResultString(\"x = -2 >> 1\", \"x=-1\");\n    assertResultString(\"x = -1 >> 0\", \"x=-1\");\n  }\n",
        "begin_line": 290,
        "end_line": 297,
        "comment": "",
        "child_ranges": [
            "(line 292,col 5)-(line 292,col 46)",
            "(line 293,col 5)-(line 293,col 48)",
            "(line 294,col 5)-(line 294,col 46)",
            "(line 295,col 5)-(line 295,col 46)",
            "(line 296,col 5)-(line 296,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PeepholeFoldConstantsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java",
        "signature": "com.google.javascript.jscomp.PeepholeFoldConstantsTest.testStringAdd()",
        "snippet": "  public void testStringAdd() {\n    fold(\"x = 'a' + \\\"bc\\\"\", \"x = \\\"abc\\\"\");\n    fold(\"x = 'a' + 5\", \"x = \\\"a5\\\"\");\n    fold(\"x = 5 + 'a'\", \"x = \\\"5a\\\"\");\n    fold(\"x = 'a' + ''\", \"x = \\\"a\\\"\");\n    fold(\"x = \\\"a\\\" + foo()\", \"x = \\\"a\\\"+foo()\");\n    fold(\"x = foo() + 'a' + 'b'\", \"x = foo()+\\\"ab\\\"\");\n    fold(\"x = (foo() + 'a') + 'b'\", \"x = foo()+\\\"ab\\\"\");  // believe it!\n    fold(\"x = foo() + 'a' + 'b' + 'cd' + bar()\", \"x = foo()+\\\"abcd\\\"+bar()\");\n    fold(\"x = foo() + 2 + 'b'\", \"x = foo()+2+\\\"b\\\"\");  // don't fold!\n    fold(\"x = foo() + 'a' + 2\", \"x = foo()+\\\"a2\\\"\");\n    fold(\"x = '' + null\", \"x = \\\"null\\\"\");\n    fold(\"x = true + '' + false\", \"x = \\\"truefalse\\\"\");\n    fold(\"x = '' + []\", \"x = \\\"\\\"+[]\");      // cannot fold (but nice if we can)\n  }\n",
        "begin_line": 299,
        "end_line": 313,
        "comment": "",
        "child_ranges": [
            "(line 300,col 5)-(line 300,col 44)",
            "(line 301,col 5)-(line 301,col 38)",
            "(line 302,col 5)-(line 302,col 38)",
            "(line 303,col 5)-(line 303,col 38)",
            "(line 304,col 5)-(line 304,col 49)",
            "(line 305,col 5)-(line 305,col 54)",
            "(line 306,col 5)-(line 306,col 56)",
            "(line 307,col 5)-(line 307,col 77)",
            "(line 308,col 5)-(line 308,col 53)",
            "(line 309,col 5)-(line 309,col 52)",
            "(line 310,col 5)-(line 310,col 42)",
            "(line 311,col 5)-(line 311,col 55)",
            "(line 312,col 5)-(line 312,col 39)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PeepholeFoldConstantsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java",
        "signature": "com.google.javascript.jscomp.PeepholeFoldConstantsTest.testStringIndexOf()",
        "snippet": "  public void testStringIndexOf() {\n    fold(\"x = 'abcdef'.indexOf('b')\", \"x = 1\");\n    fold(\"x = 'abcdefbe'.indexOf('b', 2)\", \"x = 6\");\n    fold(\"x = 'abcdef'.indexOf('bcd')\", \"x = 1\");\n    fold(\"x = 'abcdefsdfasdfbcdassd'.indexOf('bcd', 4)\", \"x = 13\");\n\n    fold(\"x = 'abcdef'.lastIndexOf('b')\", \"x = 1\");\n    fold(\"x = 'abcdefbe'.lastIndexOf('b')\", \"x = 6\");\n    fold(\"x = 'abcdefbe'.lastIndexOf('b', 5)\", \"x = 1\");\n\n    // Both elements must be string. Dont do anything if either one is not\n    // string.\n    fold(\"x = 'abc1def'.indexOf(1)\", \"x = 3\");\n    fold(\"x = 'abcNaNdef'.indexOf(NaN)\", \"x = 3\");\n    fold(\"x = 'abcundefineddef'.indexOf(undefined)\", \"x = 3\");\n    fold(\"x = 'abcnulldef'.indexOf(null)\", \"x = 3\");\n    fold(\"x = 'abctruedef'.indexOf(true)\", \"x = 3\");\n\n    // The following testcase fails with JSC_PARSE_ERROR. Hence omitted.\n    // foldSame(\"x = 1.indexOf('bcd');\");\n    foldSame(\"x = NaN.indexOf('bcd')\");\n    foldSame(\"x = undefined.indexOf('bcd')\");\n    foldSame(\"x = null.indexOf('bcd')\");\n    foldSame(\"x = true.indexOf('bcd')\");\n    foldSame(\"x = false.indexOf('bcd')\");\n\n    // Avoid dealing with regex or other types.\n    foldSame(\"x = 'abcdef'.indexOf(/b./)\");\n    foldSame(\"x = 'abcdef'.indexOf({a:2})\");\n    foldSame(\"x = 'abcdef'.indexOf([1,2])\");\n  }\n",
        "begin_line": 315,
        "end_line": 345,
        "comment": "",
        "child_ranges": [
            "(line 316,col 5)-(line 316,col 47)",
            "(line 317,col 5)-(line 317,col 52)",
            "(line 318,col 5)-(line 318,col 49)",
            "(line 319,col 5)-(line 319,col 67)",
            "(line 321,col 5)-(line 321,col 51)",
            "(line 322,col 5)-(line 322,col 53)",
            "(line 323,col 5)-(line 323,col 56)",
            "(line 327,col 5)-(line 327,col 46)",
            "(line 328,col 5)-(line 328,col 50)",
            "(line 329,col 5)-(line 329,col 62)",
            "(line 330,col 5)-(line 330,col 52)",
            "(line 331,col 5)-(line 331,col 52)",
            "(line 335,col 5)-(line 335,col 39)",
            "(line 336,col 5)-(line 336,col 45)",
            "(line 337,col 5)-(line 337,col 40)",
            "(line 338,col 5)-(line 338,col 40)",
            "(line 339,col 5)-(line 339,col 41)",
            "(line 342,col 5)-(line 342,col 43)",
            "(line 343,col 5)-(line 343,col 44)",
            "(line 344,col 5)-(line 344,col 44)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PeepholeFoldConstantsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java",
        "signature": "com.google.javascript.jscomp.PeepholeFoldConstantsTest.testStringJoinAdd()",
        "snippet": "  public void testStringJoinAdd() {\n    fold(\"x = ['a', 'b', 'c'].join('')\", \"x = \\\"abc\\\"\");\n    fold(\"x = [].join(',')\", \"x = \\\"\\\"\");\n    fold(\"x = ['a'].join(',')\", \"x = \\\"a\\\"\");\n    fold(\"x = ['a', 'b', 'c'].join(',')\", \"x = \\\"a,b,c\\\"\");\n    fold(\"x = ['a', foo, 'b', 'c'].join(',')\",\n        \"x = [\\\"a\\\",foo,\\\"b,c\\\"].join(\\\",\\\")\");\n    fold(\"x = [foo, 'a', 'b', 'c'].join(',')\",\n        \"x = [foo,\\\"a,b,c\\\"].join(\\\",\\\")\");\n    fold(\"x = ['a', 'b', 'c', foo].join(',')\",\n        \"x = [\\\"a,b,c\\\",foo].join(\\\",\\\")\");\n\n    // Works with numbers\n    fold(\"x = ['a=', 5].join('')\", \"x = \\\"a=5\\\"\");\n    fold(\"x = ['a', '5'].join(7)\", \"x = \\\"a75\\\"\");\n\n    // Works on boolean\n    fold(\"x = ['a=', false].join('')\", \"x = \\\"a=false\\\"\");\n    fold(\"x = ['a', '5'].join(true)\", \"x = \\\"atrue5\\\"\");\n    fold(\"x = ['a', '5'].join(false)\", \"x = \\\"afalse5\\\"\");\n\n    // Only optimize if it's a size win.\n    fold(\"x = ['a', '5', 'c'].join('a very very very long chain')\",\n         \"x = [\\\"a\\\",\\\"5\\\",\\\"c\\\"].join(\\\"a very very very long chain\\\")\");\n\n    // TODO(user): Its possible to fold this better.\n    foldSame(\"x = ['', foo].join(',')\");\n    foldSame(\"x = ['', foo, ''].join(',')\");\n\n    fold(\"x = ['', '', foo, ''].join(',')\", \"x = [',', foo, ''].join(',')\");\n    fold(\"x = ['', '', foo, '', ''].join(',')\",\n         \"x = [',', foo, ','].join(',')\");\n\n    fold(\"x = ['', '', foo, '', '', bar].join(',')\",\n         \"x = [',', foo, ',', bar].join(',')\");\n\n    fold(\"x = [1,2,3].join('abcdef')\",\n         \"x = '1abcdef2abcdef3'\");\n  }\n",
        "begin_line": 347,
        "end_line": 385,
        "comment": "",
        "child_ranges": [
            "(line 348,col 5)-(line 348,col 56)",
            "(line 349,col 5)-(line 349,col 41)",
            "(line 350,col 5)-(line 350,col 45)",
            "(line 351,col 5)-(line 351,col 59)",
            "(line 352,col 5)-(line 353,col 47)",
            "(line 354,col 5)-(line 355,col 43)",
            "(line 356,col 5)-(line 357,col 43)",
            "(line 360,col 5)-(line 360,col 50)",
            "(line 361,col 5)-(line 361,col 50)",
            "(line 364,col 5)-(line 364,col 58)",
            "(line 365,col 5)-(line 365,col 56)",
            "(line 366,col 5)-(line 366,col 58)",
            "(line 369,col 5)-(line 370,col 74)",
            "(line 373,col 5)-(line 373,col 40)",
            "(line 374,col 5)-(line 374,col 44)",
            "(line 376,col 5)-(line 376,col 76)",
            "(line 377,col 5)-(line 378,col 42)",
            "(line 380,col 5)-(line 381,col 47)",
            "(line 383,col 5)-(line 384,col 34)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PeepholeFoldConstantsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java",
        "signature": "com.google.javascript.jscomp.PeepholeFoldConstantsTest.testStringJoinAdd_b1992789()",
        "snippet": "  public void testStringJoinAdd_b1992789() {\n    fold(\"x = ['a'].join('')\", \"x = \\\"a\\\"\");\n    fold(\"x = [foo()].join('')\", \"x = '' + foo()\");\n    fold(\"[foo()].join('')\", \"'' + foo()\");\n  }\n",
        "begin_line": 387,
        "end_line": 391,
        "comment": "",
        "child_ranges": [
            "(line 388,col 5)-(line 388,col 44)",
            "(line 389,col 5)-(line 389,col 51)",
            "(line 390,col 5)-(line 390,col 43)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PeepholeFoldConstantsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java",
        "signature": "com.google.javascript.jscomp.PeepholeFoldConstantsTest.testFoldArithmetic()",
        "snippet": "  public void testFoldArithmetic() {\n    fold(\"x = 10 + 20\", \"x = 30\");\n    fold(\"x = 2 / 4\", \"x = 0.5\");\n    fold(\"x = 2.25 * 3\", \"x = 6.75\");\n    fold(\"z = x * y\", \"z = x * y\");\n    fold(\"x = y * 5\", \"x = y * 5\");\n    fold(\"x = 1 / 0\", \"\", PeepholeFoldConstants.DIVIDE_BY_0_ERROR);\n  }\n",
        "begin_line": 393,
        "end_line": 400,
        "comment": "",
        "child_ranges": [
            "(line 394,col 5)-(line 394,col 34)",
            "(line 395,col 5)-(line 395,col 33)",
            "(line 396,col 5)-(line 396,col 37)",
            "(line 397,col 5)-(line 397,col 35)",
            "(line 398,col 5)-(line 398,col 35)",
            "(line 399,col 5)-(line 399,col 67)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PeepholeFoldConstantsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java",
        "signature": "com.google.javascript.jscomp.PeepholeFoldConstantsTest.testFoldArithmeticStringComp()",
        "snippet": "  public void testFoldArithmeticStringComp() {\n    // Negative Numbers.\n    assertResultString(\"x = 10 - 20\", \"x=-10\");\n  }\n",
        "begin_line": 402,
        "end_line": 405,
        "comment": "",
        "child_ranges": [
            "(line 404,col 5)-(line 404,col 47)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PeepholeFoldConstantsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java",
        "signature": "com.google.javascript.jscomp.PeepholeFoldConstantsTest.testFoldComparison()",
        "snippet": "  public void testFoldComparison() {\n    fold(\"x = 0 == 0\", \"x = true\");\n    fold(\"x = 1 == 2\", \"x = false\");\n    fold(\"x = 'abc' == 'def'\", \"x = false\");\n    fold(\"x = 'abc' == 'abc'\", \"x = true\");\n    fold(\"x = \\\"\\\" == ''\", \"x = true\");\n    fold(\"x = foo() == bar()\", \"x = foo()==bar()\");\n\n    fold(\"x = 1 != 0\", \"x = true\");\n    fold(\"x = 'abc' != 'def'\", \"x = true\");\n    fold(\"x = 'a' != 'a'\", \"x = false\");\n\n    fold(\"x = 1 < 20\", \"x = true\");\n    fold(\"x = 3 < 3\", \"x = false\");\n    fold(\"x = 10 > 1.0\", \"x = true\");\n    fold(\"x = 10 > 10.25\", \"x = false\");\n    fold(\"x = y == y\", \"x = y==y\");\n    fold(\"x = y < y\", \"x = false\");\n    fold(\"x = y > y\", \"x = false\");\n    fold(\"x = 1 <= 1\", \"x = true\");\n    fold(\"x = 1 <= 0\", \"x = false\");\n    fold(\"x = 0 >= 0\", \"x = true\");\n    fold(\"x = -1 >= 9\", \"x = false\");\n\n    fold(\"x = true == true\", \"x = true\");\n    fold(\"x = true == true\", \"x = true\");\n    fold(\"x = false == null\", \"x = false\");\n    fold(\"x = false == true\", \"x = false\");\n    fold(\"x = true == null\", \"x = false\");\n\n    fold(\"0 == 0\", \"true\");\n    fold(\"1 == 2\", \"false\");\n    fold(\"'abc' == 'def'\", \"false\");\n    fold(\"'abc' == 'abc'\", \"true\");\n    fold(\"\\\"\\\" == ''\", \"true\");\n    foldSame(\"foo() == bar()\");\n\n    fold(\"1 != 0\", \"true\");\n    fold(\"'abc' != 'def'\", \"true\");\n    fold(\"'a' != 'a'\", \"false\");\n\n    fold(\"1 < 20\", \"true\");\n    fold(\"3 < 3\", \"false\");\n    fold(\"10 > 1.0\", \"true\");\n    fold(\"10 > 10.25\", \"false\");\n    foldSame(\"x == x\");\n    fold(\"x < x\", \"false\");\n    fold(\"x > x\", \"false\");\n    fold(\"1 <= 1\", \"true\");\n    fold(\"1 <= 0\", \"false\");\n    fold(\"0 >= 0\", \"true\");\n    fold(\"-1 >= 9\", \"false\");\n\n    fold(\"true == true\", \"true\");\n    fold(\"false == null\", \"false\");\n    fold(\"false == true\", \"false\");\n    fold(\"true == null\", \"false\");\n  }\n",
        "begin_line": 407,
        "end_line": 464,
        "comment": "",
        "child_ranges": [
            "(line 408,col 5)-(line 408,col 35)",
            "(line 409,col 5)-(line 409,col 36)",
            "(line 410,col 5)-(line 410,col 44)",
            "(line 411,col 5)-(line 411,col 43)",
            "(line 412,col 5)-(line 412,col 39)",
            "(line 413,col 5)-(line 413,col 51)",
            "(line 415,col 5)-(line 415,col 35)",
            "(line 416,col 5)-(line 416,col 43)",
            "(line 417,col 5)-(line 417,col 40)",
            "(line 419,col 5)-(line 419,col 35)",
            "(line 420,col 5)-(line 420,col 35)",
            "(line 421,col 5)-(line 421,col 37)",
            "(line 422,col 5)-(line 422,col 40)",
            "(line 423,col 5)-(line 423,col 35)",
            "(line 424,col 5)-(line 424,col 35)",
            "(line 425,col 5)-(line 425,col 35)",
            "(line 426,col 5)-(line 426,col 35)",
            "(line 427,col 5)-(line 427,col 36)",
            "(line 428,col 5)-(line 428,col 35)",
            "(line 429,col 5)-(line 429,col 37)",
            "(line 431,col 5)-(line 431,col 41)",
            "(line 432,col 5)-(line 432,col 41)",
            "(line 433,col 5)-(line 433,col 43)",
            "(line 434,col 5)-(line 434,col 43)",
            "(line 435,col 5)-(line 435,col 42)",
            "(line 437,col 5)-(line 437,col 27)",
            "(line 438,col 5)-(line 438,col 28)",
            "(line 439,col 5)-(line 439,col 36)",
            "(line 440,col 5)-(line 440,col 35)",
            "(line 441,col 5)-(line 441,col 31)",
            "(line 442,col 5)-(line 442,col 31)",
            "(line 444,col 5)-(line 444,col 27)",
            "(line 445,col 5)-(line 445,col 35)",
            "(line 446,col 5)-(line 446,col 32)",
            "(line 448,col 5)-(line 448,col 27)",
            "(line 449,col 5)-(line 449,col 27)",
            "(line 450,col 5)-(line 450,col 29)",
            "(line 451,col 5)-(line 451,col 32)",
            "(line 452,col 5)-(line 452,col 23)",
            "(line 453,col 5)-(line 453,col 27)",
            "(line 454,col 5)-(line 454,col 27)",
            "(line 455,col 5)-(line 455,col 27)",
            "(line 456,col 5)-(line 456,col 28)",
            "(line 457,col 5)-(line 457,col 27)",
            "(line 458,col 5)-(line 458,col 29)",
            "(line 460,col 5)-(line 460,col 33)",
            "(line 461,col 5)-(line 461,col 35)",
            "(line 462,col 5)-(line 462,col 35)",
            "(line 463,col 5)-(line 463,col 34)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PeepholeFoldConstantsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java",
        "signature": "com.google.javascript.jscomp.PeepholeFoldConstantsTest.testFoldComparison2()",
        "snippet": "  public void testFoldComparison2() {\n    fold(\"x = 0 === 0\", \"x = true\");\n    fold(\"x = 1 === 2\", \"x = false\");\n    fold(\"x = 'abc' === 'def'\", \"x = false\");\n    fold(\"x = 'abc' === 'abc'\", \"x = true\");\n    fold(\"x = \\\"\\\" === ''\", \"x = true\");\n    fold(\"x = foo() === bar()\", \"x = foo()===bar()\");\n\n    fold(\"x = 1 !== 0\", \"x = true\");\n    fold(\"x = 'abc' !== 'def'\", \"x = true\");\n    fold(\"x = 'a' !== 'a'\", \"x = false\");\n\n    fold(\"x = y === y\", \"x = y===y\");\n\n    fold(\"x = true === true\", \"x = true\");\n    fold(\"x = true === true\", \"x = true\");\n    fold(\"x = false === null\", \"x = false\");\n    fold(\"x = false === true\", \"x = false\");\n    fold(\"x = true === null\", \"x = false\");\n\n    fold(\"0 === 0\", \"true\");\n    fold(\"1 === 2\", \"false\");\n    fold(\"'abc' === 'def'\", \"false\");\n    fold(\"'abc' === 'abc'\", \"true\");\n    fold(\"\\\"\\\" === ''\", \"true\");\n    foldSame(\"foo() === bar()\");\n\n    // TODO(johnlenz): It would be nice to handle these cases as well.\n    foldSame(\"1 === '1'\");\n    foldSame(\"1 === true\");\n    foldSame(\"1 !== '1'\");\n    foldSame(\"1 !== true\");\n\n    fold(\"1 !== 0\", \"true\");\n    fold(\"'abc' !== 'def'\", \"true\");\n    fold(\"'a' !== 'a'\", \"false\");\n\n    foldSame(\"x === x\");\n\n    fold(\"true === true\", \"true\");\n    fold(\"false === null\", \"false\");\n    fold(\"false === true\", \"false\");\n    fold(\"true === null\", \"false\");\n  }\n",
        "begin_line": 467,
        "end_line": 510,
        "comment": " ===, !== comparison tests",
        "child_ranges": [
            "(line 468,col 5)-(line 468,col 36)",
            "(line 469,col 5)-(line 469,col 37)",
            "(line 470,col 5)-(line 470,col 45)",
            "(line 471,col 5)-(line 471,col 44)",
            "(line 472,col 5)-(line 472,col 40)",
            "(line 473,col 5)-(line 473,col 53)",
            "(line 475,col 5)-(line 475,col 36)",
            "(line 476,col 5)-(line 476,col 44)",
            "(line 477,col 5)-(line 477,col 41)",
            "(line 479,col 5)-(line 479,col 37)",
            "(line 481,col 5)-(line 481,col 42)",
            "(line 482,col 5)-(line 482,col 42)",
            "(line 483,col 5)-(line 483,col 44)",
            "(line 484,col 5)-(line 484,col 44)",
            "(line 485,col 5)-(line 485,col 43)",
            "(line 487,col 5)-(line 487,col 28)",
            "(line 488,col 5)-(line 488,col 29)",
            "(line 489,col 5)-(line 489,col 37)",
            "(line 490,col 5)-(line 490,col 36)",
            "(line 491,col 5)-(line 491,col 32)",
            "(line 492,col 5)-(line 492,col 32)",
            "(line 495,col 5)-(line 495,col 26)",
            "(line 496,col 5)-(line 496,col 27)",
            "(line 497,col 5)-(line 497,col 26)",
            "(line 498,col 5)-(line 498,col 27)",
            "(line 500,col 5)-(line 500,col 28)",
            "(line 501,col 5)-(line 501,col 36)",
            "(line 502,col 5)-(line 502,col 33)",
            "(line 504,col 5)-(line 504,col 24)",
            "(line 506,col 5)-(line 506,col 34)",
            "(line 507,col 5)-(line 507,col 36)",
            "(line 508,col 5)-(line 508,col 36)",
            "(line 509,col 5)-(line 509,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PeepholeFoldConstantsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java",
        "signature": "com.google.javascript.jscomp.PeepholeFoldConstantsTest.testFoldGetElem()",
        "snippet": "  public void testFoldGetElem() {\n    fold(\"x = [10, 20][0]\", \"x = 10\");\n    fold(\"x = [10, 20][1]\", \"x = 20\");\n    fold(\"x = [10, 20][0.5]\", \"\",\n        PeepholeFoldConstants.INVALID_GETELEM_INDEX_ERROR);\n    fold(\"x = [10, 20][-1]\",    \"\",\n        PeepholeFoldConstants.INDEX_OUT_OF_BOUNDS_ERROR);\n    fold(\"x = [10, 20][2]\",     \"\",\n        PeepholeFoldConstants.INDEX_OUT_OF_BOUNDS_ERROR);\n  }\n",
        "begin_line": 512,
        "end_line": 521,
        "comment": "",
        "child_ranges": [
            "(line 513,col 5)-(line 513,col 38)",
            "(line 514,col 5)-(line 514,col 38)",
            "(line 515,col 5)-(line 516,col 59)",
            "(line 517,col 5)-(line 518,col 57)",
            "(line 519,col 5)-(line 520,col 57)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PeepholeFoldConstantsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java",
        "signature": "com.google.javascript.jscomp.PeepholeFoldConstantsTest.testFoldComplex()",
        "snippet": "  public void testFoldComplex() {\n    fold(\"x = (3 / 1.0) + (1 * 2)\", \"x = 5\");\n    fold(\"x = (1 == 1.0) && foo() && true\", \"x = foo()&&true\");\n    fold(\"x = 'abc' + 5 + 10\", \"x = \\\"abc510\\\"\");\n  }\n",
        "begin_line": 523,
        "end_line": 527,
        "comment": "",
        "child_ranges": [
            "(line 524,col 5)-(line 524,col 45)",
            "(line 525,col 5)-(line 525,col 63)",
            "(line 526,col 5)-(line 526,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PeepholeFoldConstantsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java",
        "signature": "com.google.javascript.jscomp.PeepholeFoldConstantsTest.testFoldArrayLength()",
        "snippet": "  public void testFoldArrayLength() {\n    // Can fold\n    fold(\"x = [].length\", \"x = 0\");\n    fold(\"x = [1,2,3].length\", \"x = 3\");\n    fold(\"x = [a,b].length\", \"x = 2\");\n\n    // Cannot fold\n    fold(\"x = [foo(), 0].length\", \"x = [foo(),0].length\");\n    fold(\"x = y.length\", \"x = y.length\");\n  }\n",
        "begin_line": 529,
        "end_line": 538,
        "comment": "",
        "child_ranges": [
            "(line 531,col 5)-(line 531,col 35)",
            "(line 532,col 5)-(line 532,col 40)",
            "(line 533,col 5)-(line 533,col 38)",
            "(line 536,col 5)-(line 536,col 58)",
            "(line 537,col 5)-(line 537,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PeepholeFoldConstantsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java",
        "signature": "com.google.javascript.jscomp.PeepholeFoldConstantsTest.testFoldStringLength()",
        "snippet": "  public void testFoldStringLength() {\n    // Can fold basic strings.\n    fold(\"x = ''.length\", \"x = 0\");\n    fold(\"x = '123'.length\", \"x = 3\");\n\n    // Test unicode escapes are accounted for.\n    fold(\"x = '123\\u01dc'.length\", \"x = 4\");\n  }\n",
        "begin_line": 540,
        "end_line": 547,
        "comment": "",
        "child_ranges": [
            "(line 542,col 5)-(line 542,col 35)",
            "(line 543,col 5)-(line 543,col 38)",
            "(line 546,col 5)-(line 546,col 44)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PeepholeFoldConstantsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java",
        "signature": "com.google.javascript.jscomp.PeepholeFoldConstantsTest.testFoldTypeof()",
        "snippet": "  public void testFoldTypeof() {\n    fold(\"x = typeof 1\", \"x = \\\"number\\\"\");\n    fold(\"x = typeof 'foo'\", \"x = \\\"string\\\"\");\n    fold(\"x = typeof true\", \"x = \\\"boolean\\\"\");\n    fold(\"x = typeof false\", \"x = \\\"boolean\\\"\");\n    fold(\"x = typeof null\", \"x = \\\"object\\\"\");\n    fold(\"x = typeof undefined\", \"x = \\\"undefined\\\"\");\n    fold(\"x = typeof void 0\", \"x = \\\"undefined\\\"\");\n    fold(\"x = typeof []\", \"x = \\\"object\\\"\");\n    fold(\"x = typeof [1]\", \"x = \\\"object\\\"\");\n    fold(\"x = typeof [1,[]]\", \"x = \\\"object\\\"\");\n    fold(\"x = typeof {}\", \"x = \\\"object\\\"\");\n\n    foldSame(\"x = typeof[1,[foo()]]\");\n    foldSame(\"x = typeof{bathwater:baby()}\");\n  }\n",
        "begin_line": 549,
        "end_line": 564,
        "comment": "",
        "child_ranges": [
            "(line 550,col 5)-(line 550,col 43)",
            "(line 551,col 5)-(line 551,col 47)",
            "(line 552,col 5)-(line 552,col 47)",
            "(line 553,col 5)-(line 553,col 48)",
            "(line 554,col 5)-(line 554,col 46)",
            "(line 555,col 5)-(line 555,col 54)",
            "(line 556,col 5)-(line 556,col 51)",
            "(line 557,col 5)-(line 557,col 44)",
            "(line 558,col 5)-(line 558,col 45)",
            "(line 559,col 5)-(line 559,col 48)",
            "(line 560,col 5)-(line 560,col 44)",
            "(line 562,col 5)-(line 562,col 38)",
            "(line 563,col 5)-(line 563,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PeepholeFoldConstantsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java",
        "signature": "com.google.javascript.jscomp.PeepholeFoldConstantsTest.testFoldInstanceOf()",
        "snippet": "  public void testFoldInstanceOf() {\n    // Non object types are never instances of anything.\n    fold(\"64 instanceof Object\", \"false\");\n    fold(\"64 instanceof Number\", \"false\");\n    fold(\"'' instanceof Object\", \"false\");\n    fold(\"'' instanceof String\", \"false\");\n    fold(\"true instanceof Object\", \"false\");\n    fold(\"true instanceof Boolean\", \"false\");\n    fold(\"false instanceof Object\", \"false\");\n    fold(\"null instanceof Object\", \"false\");\n    fold(\"undefined instanceof Object\", \"false\");\n    fold(\"NaN instanceof Object\", \"false\");\n    fold(\"Infinity instanceof Object\", \"false\");\n\n    // Array and object literals are known to be objects.\n    fold(\"[] instanceof Object\", \"true\");\n    fold(\"({}) instanceof Object\", \"true\");\n\n    // These cases is foldable, but no handled currently.\n    foldSame(\"new Foo() instanceof Object\");\n    // These would require type information to fold.\n    foldSame(\"[] instanceof Foo\");\n    foldSame(\"({}) instanceof Foo\");\n  }\n",
        "begin_line": 566,
        "end_line": 589,
        "comment": "",
        "child_ranges": [
            "(line 568,col 5)-(line 568,col 42)",
            "(line 569,col 5)-(line 569,col 42)",
            "(line 570,col 5)-(line 570,col 42)",
            "(line 571,col 5)-(line 571,col 42)",
            "(line 572,col 5)-(line 572,col 44)",
            "(line 573,col 5)-(line 573,col 45)",
            "(line 574,col 5)-(line 574,col 45)",
            "(line 575,col 5)-(line 575,col 44)",
            "(line 576,col 5)-(line 576,col 49)",
            "(line 577,col 5)-(line 577,col 43)",
            "(line 578,col 5)-(line 578,col 48)",
            "(line 581,col 5)-(line 581,col 41)",
            "(line 582,col 5)-(line 582,col 43)",
            "(line 585,col 5)-(line 585,col 44)",
            "(line 587,col 5)-(line 587,col 34)",
            "(line 588,col 5)-(line 588,col 36)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PeepholeFoldConstantsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java",
        "signature": "com.google.javascript.jscomp.PeepholeFoldConstantsTest.testDivision()",
        "snippet": "  public void testDivision() {\n    // Make sure the 1/3 does not expand to 0.333333\n    fold(\"print(1/3)\", \"print(1/3)\");\n\n    // Decimal form is preferable to fraction form when strings are the\n    // same length.\n    fold(\"print(1/2)\", \"print(0.5)\");\n  }\n",
        "begin_line": 591,
        "end_line": 598,
        "comment": "",
        "child_ranges": [
            "(line 593,col 5)-(line 593,col 37)",
            "(line 597,col 5)-(line 597,col 37)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PeepholeFoldConstantsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java",
        "signature": "com.google.javascript.jscomp.PeepholeFoldConstantsTest.testAssignOps()",
        "snippet": "  public void testAssignOps() {\n    fold(\"x=x+y\", \"x+=y\");\n    fold(\"x=x*y\", \"x*=y\");\n    fold(\"x.y=x.y+z\", \"x.y+=z\");\n    foldSame(\"next().x = next().x + 1\");\n  }\n",
        "begin_line": 600,
        "end_line": 605,
        "comment": "",
        "child_ranges": [
            "(line 601,col 5)-(line 601,col 26)",
            "(line 602,col 5)-(line 602,col 26)",
            "(line 603,col 5)-(line 603,col 32)",
            "(line 604,col 5)-(line 604,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PeepholeFoldConstantsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.CompilerTestCase(java.lang.String, boolean)",
        "snippet": "  protected CompilerTestCase(String externs, boolean compareAsTree) {\n    this.externsInputs = new JSSourceFile[] {\n        JSSourceFile.fromCode(\"externs\", externs)\n    };\n    this.compareAsTree = compareAsTree;\n    this.parseTypeInfo = false;\n  }\n",
        "begin_line": 101,
        "end_line": 107,
        "comment": "\n   * Constructs a test.\n   *\n   * @param externs Externs JS as a string\n   * @param compareAsTree True to compare output & expected as a node tree.\n   *     99% of the time you want to compare as a tree. There are a few\n   *     special cases where you don't, like if you want to test the code\n   *     printing of \"unnatural\" syntax trees. For example,\n   *\n   * <pre>\n   * IF\n   *   IF\n   *     STATEMENT\n   * ELSE\n   *   STATEMENT\n   * </pre>\n   ",
        "child_ranges": [
            "(line 102,col 5)-(line 104,col 6)",
            "(line 105,col 5)-(line 105,col 39)",
            "(line 106,col 5)-(line 106,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PeepholeFoldConstantsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.CompilerTestCase(java.lang.String)",
        "snippet": "  protected CompilerTestCase(String externs) {\n    this(externs, true);\n  }\n",
        "begin_line": 113,
        "end_line": 115,
        "comment": "\n   * Constructs a test. Uses AST comparison.\n   * @param externs Externs JS as a string\n   ",
        "child_ranges": [
            "(line 114,col 5)-(line 114,col 24)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PeepholeFoldConstantsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.CompilerTestCase()",
        "snippet": "  protected CompilerTestCase() {\n    this(\"\", true);\n  }\n",
        "begin_line": 120,
        "end_line": 122,
        "comment": "\n   * Constructs a test. Uses AST comparison and no externs.\n   ",
        "child_ranges": [
            "(line 121,col 5)-(line 121,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PeepholeFoldConstantsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.getProcessor(com.google.javascript.jscomp.Compiler)",
        "snippet": "  protected abstract CompilerPass getProcessor(Compiler compiler);\n",
        "begin_line": 130,
        "end_line": 130,
        "comment": "\n   * Gets the compiler pass instance to use for a test.\n   *\n   * @param compiler The compiler\n   * @return The pass to test\n   ",
        "child_ranges": []
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PeepholeFoldConstantsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.getOptions()",
        "snippet": "  protected CompilerOptions getOptions() {\n    CompilerOptions options = new CompilerOptions();\n    options.setWarningLevel(\n        DiagnosticGroups.MISSING_PROPERTIES, CheckLevel.WARNING);\n    options.setCodingConvention(getCodingConvention());\n    return options;\n  }\n",
        "begin_line": 139,
        "end_line": 145,
        "comment": "\n   * Gets the compiler options to use for this test. Defaults to do nothing\n   * options.\n   *\n   * This is really only for configuring warnings guards. Use getProcessor\n   * to determine what passes should be run.\n   ",
        "child_ranges": [
            "(line 140,col 5)-(line 140,col 52)",
            "(line 141,col 5)-(line 142,col 65)",
            "(line 143,col 5)-(line 143,col 55)",
            "(line 144,col 5)-(line 144,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PeepholeFoldConstantsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.getCodingConvention()",
        "snippet": "  protected CodingConvention getCodingConvention() {\n    return new GoogleCodingConvention();\n  }\n",
        "begin_line": 147,
        "end_line": 149,
        "comment": "",
        "child_ranges": [
            "(line 148,col 5)-(line 148,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PeepholeFoldConstantsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.getNumRepetitions()",
        "snippet": "  protected int getNumRepetitions() {\n    // Since most compiler passes should be idempotent, we run each pass twice\n    // by default.\n    return 2;\n  }\n",
        "begin_line": 155,
        "end_line": 159,
        "comment": "\n   * Returns the number of times the pass should be run before results are\n   * verified.\n   ",
        "child_ranges": [
            "(line 158,col 5)-(line 158,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PeepholeFoldConstantsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.allowSourcelessWarnings()",
        "snippet": "  void allowSourcelessWarnings() {\n    allowSourcelessWarnings = true;\n  }\n",
        "begin_line": 162,
        "end_line": 164,
        "comment": " Expect warnings without source information. ",
        "child_ranges": [
            "(line 163,col 5)-(line 163,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PeepholeFoldConstantsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.getLastCompiler()",
        "snippet": "  Compiler getLastCompiler() {\n    return lastCompiler;\n  }\n",
        "begin_line": 167,
        "end_line": 169,
        "comment": " The most recently used JSComp instance. ",
        "child_ranges": [
            "(line 168,col 5)-(line 168,col 24)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PeepholeFoldConstantsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.enableTypeCheck(com.google.javascript.jscomp.CheckLevel)",
        "snippet": "  public void enableTypeCheck(CheckLevel level) {\n    typeCheckEnabled  = true;\n    typeCheckLevel = level;\n  }\n",
        "begin_line": 179,
        "end_line": 182,
        "comment": "\n   * Perform type checking before running the test pass. This will check\n   * for type errors and annotate nodes with type information.\n   *\n   * @param level the level of severity to report for type errors\n   *\n   * @see TypeCheck\n   ",
        "child_ranges": [
            "(line 180,col 5)-(line 180,col 29)",
            "(line 181,col 5)-(line 181,col 27)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PeepholeFoldConstantsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.enableLineNumberCheck(boolean)",
        "snippet": "  public void enableLineNumberCheck(boolean newVal) {\n    checkLineNumbers = newVal;\n  }\n",
        "begin_line": 187,
        "end_line": 189,
        "comment": "\n   * Check to make sure that line numbers were preserved.\n   ",
        "child_ranges": [
            "(line 188,col 5)-(line 188,col 30)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PeepholeFoldConstantsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.disableTypeCheck()",
        "snippet": "  void disableTypeCheck() {\n    typeCheckEnabled  = false;\n  }\n",
        "begin_line": 196,
        "end_line": 198,
        "comment": "\n   * Do not run type checking before running the test pass.\n   *\n   * @see TypeCheck\n   ",
        "child_ranges": [
            "(line 197,col 5)-(line 197,col 30)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PeepholeFoldConstantsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.enableNormalize()",
        "snippet": "  protected void enableNormalize() {\n    enableNormalize(true);\n  }\n",
        "begin_line": 206,
        "end_line": 208,
        "comment": "\n   * Perform AST normalization before running the test pass, and anti-normalize\n   * after running it.\n   *\n   * @see Normalize\n   ",
        "child_ranges": [
            "(line 207,col 5)-(line 207,col 26)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PeepholeFoldConstantsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.enableNormalize(boolean)",
        "snippet": "  protected void enableNormalize(boolean normalizeExpected) {\n    normalizeEnabled = true;\n    this.normalizeExpected = normalizeExpected;\n  }\n",
        "begin_line": 218,
        "end_line": 221,
        "comment": "\n   * Perform AST normalization before running the test pass, and anti-normalize\n   * after running it.\n   *\n   * @param normalizeExpected Whether to perform normalization on the\n   * expected js result.\n   * @see Normalize\n   ",
        "child_ranges": [
            "(line 219,col 5)-(line 219,col 28)",
            "(line 220,col 5)-(line 220,col 47)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PeepholeFoldConstantsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.disableNormalize()",
        "snippet": "  protected void disableNormalize() {\n    normalizeEnabled = false;\n  }\n",
        "begin_line": 227,
        "end_line": 229,
        "comment": "\n   * Don't perform AST normalization before running the test pass.\n   * @see Normalize\n   ",
        "child_ranges": [
            "(line 228,col 5)-(line 228,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PeepholeFoldConstantsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.enableMarkNoSideEffects()",
        "snippet": "  void enableMarkNoSideEffects() {\n    markNoSideEffects  = true;\n  }\n",
        "begin_line": 236,
        "end_line": 238,
        "comment": "\n   * Run the MarkSideEffectCalls pass before running the test pass.\n   *\n   * @see MarkNoSideEffectCalls\n   ",
        "child_ranges": [
            "(line 237,col 5)-(line 237,col 30)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PeepholeFoldConstantsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.createTypeCheck(com.google.javascript.jscomp.Compiler, com.google.javascript.jscomp.CheckLevel)",
        "snippet": "  private static TypeCheck createTypeCheck(Compiler compiler,\n      CheckLevel level) {\n    ReverseAbstractInterpreter rai =\n        new SemanticReverseAbstractInterpreter(compiler.getCodingConvention(),\n            compiler.getTypeRegistry());\n\n    return new TypeCheck(compiler, rai, compiler.getTypeRegistry(),\n        level, CheckLevel.OFF);\n  }\n",
        "begin_line": 241,
        "end_line": 249,
        "comment": " Returns a newly created TypeCheck. ",
        "child_ranges": [
            "(line 243,col 5)-(line 245,col 40)",
            "(line 247,col 5)-(line 248,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PeepholeFoldConstantsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.lang.String, java.lang.String)",
        "snippet": "  public void test(String js, String expected) {\n    test(js, expected, (DiagnosticType) null);\n  }\n",
        "begin_line": 257,
        "end_line": 259,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output.\n   *\n   * @param js Input\n   * @param expected Expected JS output\n   ",
        "child_ranges": [
            "(line 258,col 5)-(line 258,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PeepholeFoldConstantsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.lang.String, java.lang.String, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void test(String js, String expected, DiagnosticType error) {\n    test(js, expected, error, null);\n  }\n",
        "begin_line": 269,
        "end_line": 271,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output,\n   * or that an expected error is encountered.\n   *\n   * @param js Input\n   * @param expected Expected output, or null if an error is expected\n   * @param error Expected error, or null if no error is expected\n   ",
        "child_ranges": [
            "(line 270,col 5)-(line 270,col 36)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PeepholeFoldConstantsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.lang.String, java.lang.String, com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType, java.lang.String)",
        "snippet": "  public void test(String js, String expected, DiagnosticType error,\n                   DiagnosticType warning, String description) {\n    test(externsInputs, js, expected, error, warning, description);\n  }\n",
        "begin_line": 284,
        "end_line": 287,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output,\n   * or that an expected error is encountered.\n   *\n   * @param js Input\n   * @param expected Expected output, or null if an error is expected\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   * @param description The content of the error expected\n   ",
        "child_ranges": [
            "(line 286,col 5)-(line 286,col 67)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PeepholeFoldConstantsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.lang.String, java.lang.String, com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void test(String js, String expected,\n                   DiagnosticType error, DiagnosticType warning) {\n    test(externsInputs, js, expected, error, warning, null);\n  }\n",
        "begin_line": 299,
        "end_line": 302,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output\n   * and (optionally) that an expected warning is issued. Or, if an error is\n   * expected, this method just verifies that the error is encountered.\n   *\n   * @param js Input\n   * @param expected Expected output, or null if an error is expected\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   ",
        "child_ranges": [
            "(line 301,col 5)-(line 301,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PeepholeFoldConstantsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.lang.String, java.lang.String, java.lang.String, com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void test(String externs, String js, String expected,\n                   DiagnosticType error, DiagnosticType warning) {\n    test(externs, js, expected, error, warning, null);\n  }\n",
        "begin_line": 315,
        "end_line": 318,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output\n   * and (optionally) that an expected warning is issued. Or, if an error is\n   * expected, this method just verifies that the error is encountered.\n   *\n   * @param externs Externs input\n   * @param js Input\n   * @param expected Expected output, or null if an error is expected\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   ",
        "child_ranges": [
            "(line 317,col 5)-(line 317,col 54)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PeepholeFoldConstantsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.lang.String, java.lang.String, java.lang.String, com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType, java.lang.String)",
        "snippet": "  public void test(String externs, String js, String expected,\n                   DiagnosticType error, DiagnosticType warning,\n                   String description) {\n    JSSourceFile[] externsInputs = new JSSourceFile[]{\n        JSSourceFile.fromCode(\"externs\", externs)\n    };\n    test(externsInputs, js, expected, error, warning, description);\n  }\n",
        "begin_line": 334,
        "end_line": 341,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output\n   * and (optionally) that an expected warning is issued. Or, if an error is\n   * expected, this method just verifies that the error is encountered.\n   *\n   * @param externs Externs input\n   * @param js Input\n   * @param expected Expected output, or null if an error is expected\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   * @param description The description of the expected warning,\n   *      or null if no warning is expected or if the warning's description\n   *      should not be examined\n   ",
        "child_ranges": [
            "(line 337,col 5)-(line 339,col 6)",
            "(line 340,col 5)-(line 340,col 67)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PeepholeFoldConstantsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(com.google.javascript.jscomp.JSSourceFile[], java.lang.String, java.lang.String, com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType, java.lang.String)",
        "snippet": "  public void test(JSSourceFile[] externs, String js, String expected,\n                   DiagnosticType error,\n                   DiagnosticType warning, String description) {\n    Compiler compiler = createCompiler();\n    lastCompiler = compiler;\n\n    CompilerOptions options = getOptions();\n    // Note that in this context, turning on the checkTypes option won't\n    // actually cause the type check to run.\n    options.checkTypes = parseTypeInfo;\n    compiler.init(externs, new JSSourceFile[] {\n        JSSourceFile.fromCode(\"testcode\", js) }, options);\n\n    BaseJSTypeTestCase.addNativeProperties(compiler.getTypeRegistry());\n\n    test(compiler, new String[] { expected }, error, warning, description);\n  }\n",
        "begin_line": 357,
        "end_line": 373,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output\n   * and (optionally) that an expected warning is issued. Or, if an error is\n   * expected, this method just verifies that the error is encountered.\n   *\n   * @param externs Externs inputs\n   * @param js Input\n   * @param expected Expected output, or null if an error is expected\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   * @param description The description of the expected warning,\n   *      or null if no warning is expected or if the warning's description\n   *      should not be examined\n   ",
        "child_ranges": [
            "(line 360,col 5)-(line 360,col 41)",
            "(line 361,col 5)-(line 361,col 28)",
            "(line 363,col 5)-(line 363,col 43)",
            "(line 366,col 5)-(line 366,col 39)",
            "(line 367,col 5)-(line 368,col 58)",
            "(line 370,col 5)-(line 370,col 71)",
            "(line 372,col 5)-(line 372,col 75)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PeepholeFoldConstantsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.lang.String[], java.lang.String[])",
        "snippet": "  public void test(String[] js, String[] expected) {\n    test(js, expected, null);\n  }\n",
        "begin_line": 381,
        "end_line": 383,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output.\n   *\n   * @param js Inputs\n   * @param expected Expected JS output\n   ",
        "child_ranges": [
            "(line 382,col 5)-(line 382,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PeepholeFoldConstantsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.lang.String[], java.lang.String[], com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void test(String[] js, String[] expected, DiagnosticType error) {\n    test(js, expected, error, null);\n  }\n",
        "begin_line": 393,
        "end_line": 395,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output,\n   * or that an expected error is encountered.\n   *\n   * @param js Inputs\n   * @param expected Expected JS output\n   * @param error Expected error, or null if no error is expected\n   ",
        "child_ranges": [
            "(line 394,col 5)-(line 394,col 36)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PeepholeFoldConstantsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.lang.String[], java.lang.String[], com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void test(String[] js, String[] expected, DiagnosticType error,\n                   DiagnosticType warning) {\n    test(js, expected, error, warning, null);\n  }\n",
        "begin_line": 407,
        "end_line": 410,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output\n   * and (optionally) that an expected warning is issued. Or, if an error is\n   * expected, this method just verifies that the error is encountered.\n   *\n   * @param js Inputs\n   * @param expected Expected JS output\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   ",
        "child_ranges": [
            "(line 409,col 5)-(line 409,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PeepholeFoldConstantsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.lang.String[], java.lang.String[], com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType, java.lang.String)",
        "snippet": "  public void test(String[] js, String[] expected, DiagnosticType error,\n                   DiagnosticType warning, String description) {\n    Compiler compiler = createCompiler();\n    lastCompiler = compiler;\n\n    JSSourceFile[] inputs = new JSSourceFile[js.length];\n    for (int i = 0; i < js.length; i++) {\n      inputs[i] = JSSourceFile.fromCode(\"input\" + i, js[i]);\n    }\n    compiler.init(externsInputs, inputs, getOptions());\n    test(compiler, expected, error, warning, description);\n  }\n",
        "begin_line": 425,
        "end_line": 436,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output\n   * and (optionally) that an expected warning is issued. Or, if an error is\n   * expected, this method just verifies that the error is encountered.\n   *\n   * @param js Inputs\n   * @param expected Expected JS output\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   * @param description The description of the expected warning,\n   *      or null if no warning is expected or if the warning's description\n   *      should not be examined\n   ",
        "child_ranges": [
            "(line 427,col 5)-(line 427,col 41)",
            "(line 428,col 5)-(line 428,col 28)",
            "(line 430,col 5)-(line 430,col 56)",
            "(line 431,col 5)-(line 433,col 5)",
            "(line 434,col 5)-(line 434,col 55)",
            "(line 435,col 5)-(line 435,col 58)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PeepholeFoldConstantsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(com.google.javascript.jscomp.JSModule[], java.lang.String[])",
        "snippet": "  public void test(JSModule[] modules, String[] expected) {\n    test(modules, expected, null);\n  }\n",
        "begin_line": 444,
        "end_line": 446,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output.\n   *\n   * @param modules Module inputs\n   * @param expected Expected JS outputs (one per module)\n   ",
        "child_ranges": [
            "(line 445,col 5)-(line 445,col 34)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PeepholeFoldConstantsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(com.google.javascript.jscomp.JSModule[], java.lang.String[], com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void test(JSModule[] modules, String[] expected,\n      DiagnosticType error) {\n    test(modules, expected, error, null);\n  }\n",
        "begin_line": 456,
        "end_line": 459,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output,\n   * or that an expected error is encountered.\n   *\n   * @param modules Module inputs\n   * @param expected Expected JS outputs (one per module)\n   * @param error Expected error, or null if no error is expected\n   ",
        "child_ranges": [
            "(line 458,col 5)-(line 458,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PeepholeFoldConstantsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(com.google.javascript.jscomp.JSModule[], java.lang.String[], com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void test(JSModule[] modules, String[] expected,\n                   DiagnosticType error, DiagnosticType warning) {\n    Compiler compiler = createCompiler();\n    lastCompiler = compiler;\n\n    compiler.init(externsInputs, modules, getOptions());\n    test(compiler, expected, error, warning);\n  }\n",
        "begin_line": 471,
        "end_line": 478,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output\n   * and (optionally) that an expected warning is issued. Or, if an error is\n   * expected, this method just verifies that the error is encountered.\n   *\n   * @param modules Module inputs\n   * @param expected Expected JS outputs (one per module)\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   ",
        "child_ranges": [
            "(line 473,col 5)-(line 473,col 41)",
            "(line 474,col 5)-(line 474,col 28)",
            "(line 476,col 5)-(line 476,col 56)",
            "(line 477,col 5)-(line 477,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PeepholeFoldConstantsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(java.lang.String)",
        "snippet": "  public void testSame(String js) {\n    test(js, js);\n  }\n",
        "begin_line": 485,
        "end_line": 487,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as its input.\n   *\n   * @param js Input and output\n   ",
        "child_ranges": [
            "(line 486,col 5)-(line 486,col 17)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PeepholeFoldConstantsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(java.lang.String, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void testSame(String js, DiagnosticType warning) {\n    test(js, js, null, warning);\n  }\n",
        "begin_line": 496,
        "end_line": 498,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as its input\n   * and (optionally) that an expected warning is issued.\n   *\n   * @param js Input and output\n   * @param warning Expected warning, or null if no warning is expected\n   ",
        "child_ranges": [
            "(line 497,col 5)-(line 497,col 32)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PeepholeFoldConstantsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(java.lang.String, com.google.javascript.jscomp.DiagnosticType, boolean)",
        "snippet": "  public void testSame(String js, DiagnosticType diag, boolean error) {\n    if (error) {\n      test(js, js, diag);\n    } else {\n      test(js, js, null, diag);\n    }\n  }\n",
        "begin_line": 508,
        "end_line": 514,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as its input\n   * and (optionally) that an expected warning is issued.\n   *\n   * @param js Input and output\n   * @param diag Expected error or warning, or null if none is expected\n   * @param error true if diag is an error, false if it is a warning\n   ",
        "child_ranges": [
            "(line 509,col 5)-(line 513,col 5)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PeepholeFoldConstantsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(java.lang.String, java.lang.String, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void testSame(String externs, String js, DiagnosticType warning) {\n    testSame(externs, js, warning, null);\n  }\n",
        "begin_line": 524,
        "end_line": 526,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as its input\n   * and (optionally) that an expected warning is issued.\n   *\n   * @param externs Externs input\n   * @param js Input and output\n   * @param warning Expected warning, or null if no warning is expected\n   ",
        "child_ranges": [
            "(line 525,col 5)-(line 525,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PeepholeFoldConstantsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(java.lang.String, java.lang.String, com.google.javascript.jscomp.DiagnosticType, boolean)",
        "snippet": "  public void testSame(\n      String externs, String js, DiagnosticType diag, boolean error) {\n    if (error) {\n      test(externs, js, js, diag, null);\n    } else {\n      test(externs, js, js, null, diag);\n    }\n  }\n",
        "begin_line": 537,
        "end_line": 544,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as its input\n   * and (optionally) that an expected warning is issued.\n   *\n   * @param externs Externs input\n   * @param js Input and output\n   * @param diag Expected error or warning, or null if none is expected\n   * @param error true if diag is an error, false if it is a warning\n   ",
        "child_ranges": [
            "(line 539,col 5)-(line 543,col 5)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PeepholeFoldConstantsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(java.lang.String, java.lang.String, com.google.javascript.jscomp.DiagnosticType, java.lang.String)",
        "snippet": "  public void testSame(String externs, String js, DiagnosticType warning,\n                       String description) {\n    JSSourceFile[] externsInputs = new JSSourceFile[]{\n        JSSourceFile.fromCode(\"externs\", externs)\n    };\n    test(externsInputs, js, js, null, warning, description);\n  }\n",
        "begin_line": 557,
        "end_line": 563,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as its input\n   * and (optionally) that an expected warning and description is issued.\n   *\n   * @param externs Externs input\n   * @param js Input and output\n   * @param warning Expected warning, or null if no warning is expected\n   * @param description The description of the expected warning,\n   *      or null if no warning is expected or if the warning's description\n   *      should not be examined\n   ",
        "child_ranges": [
            "(line 559,col 5)-(line 561,col 6)",
            "(line 562,col 5)-(line 562,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PeepholeFoldConstantsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(java.lang.String[])",
        "snippet": "  public void testSame(String[] js) {\n    test(js, js);\n  }\n",
        "begin_line": 570,
        "end_line": 572,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as its input.\n   *\n   * @param js Inputs and outputs\n   ",
        "child_ranges": [
            "(line 571,col 5)-(line 571,col 17)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PeepholeFoldConstantsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(java.lang.String[], com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void testSame(String[] js, DiagnosticType error) {\n    test(js, js, error);\n  }\n",
        "begin_line": 581,
        "end_line": 583,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as its input,\n   * and emits the given error.\n   *\n   * @param js Inputs and outputs\n   * @param error Expected error, or null if no error is expected\n   ",
        "child_ranges": [
            "(line 582,col 5)-(line 582,col 24)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PeepholeFoldConstantsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(java.lang.String[], com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void testSame(String[] js, DiagnosticType error, DiagnosticType warning) {\n    test(js, js, error, warning);\n  }\n",
        "begin_line": 593,
        "end_line": 595,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as its input,\n   * and emits the given error and warning.\n   *\n   * @param js Inputs and outputs\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   ",
        "child_ranges": [
            "(line 594,col 5)-(line 594,col 33)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PeepholeFoldConstantsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(com.google.javascript.jscomp.JSModule[])",
        "snippet": "  public void testSame(JSModule[] modules) {\n    testSame(modules, null);\n  }\n",
        "begin_line": 602,
        "end_line": 604,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as the input.\n   *\n   * @param modules Module inputs\n   ",
        "child_ranges": [
            "(line 603,col 5)-(line 603,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PeepholeFoldConstantsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(com.google.javascript.jscomp.JSModule[], com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void testSame(JSModule[] modules, DiagnosticType warning) {\n    try {\n      String[] expected = new String[modules.length];\n      for (int i = 0; i < modules.length; i++) {\n        expected[i] = \"\";\n        for (CompilerInput input : modules[i].getInputs()) {\n          expected[i] += input.getSourceFile().getCode();\n        }\n      }\n      test(modules, expected, null, warning);\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n  }\n",
        "begin_line": 612,
        "end_line": 625,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as the input.\n   *\n   * @param modules Module inputs\n   * @param warning A warning, or null for no expected warning.\n   ",
        "child_ranges": [
            "(line 613,col 5)-(line 624,col 5)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PeepholeFoldConstantsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(com.google.javascript.jscomp.Compiler, java.lang.String[], com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  protected void test(Compiler compiler, String[] expected,\n                      DiagnosticType error, DiagnosticType warning) {\n    test(compiler, expected, error, warning, null);\n  }\n",
        "begin_line": 638,
        "end_line": 641,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output\n   * and (optionally) that an expected warning is issued. Or, if an error is\n   * expected, this method just verifies that the error is encountered.\n   *\n   * @param compiler A compiler that has been initialized via\n   *     {@link Compiler#init}\n   * @param expected Expected output, or null if an error is expected\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   ",
        "child_ranges": [
            "(line 640,col 5)-(line 640,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PeepholeFoldConstantsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(com.google.javascript.jscomp.Compiler, java.lang.String[], com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType, java.lang.String)",
        "snippet": "  private void test(Compiler compiler, String[] expected,\n                    DiagnosticType error, DiagnosticType warning,\n                    String description) {\n    RecentChange recentChange = new RecentChange();\n    compiler.addChangeHandler(recentChange);\n\n    Node root = compiler.parseInputs();\n    assertTrue(\"Unexpected parse error(s): \" +\n        Joiner.on(\"\\n\").join(compiler.getErrors()), root != null);\n\n    Node externsRoot = root.getFirstChild();\n    Node mainRoot = root.getLastChild();\n\n    // Save the tree for later comparison.\n    Node rootClone = root.cloneTree();\n    Node externsRootClone = rootClone.getFirstChild();\n    Node mainRootClone = rootClone.getLastChild();\n\n    int numRepetitions = getNumRepetitions();\n    ErrorManager[] errorManagers = new ErrorManager[numRepetitions];\n    int aggregateWarningCount = 0;\n    List<JSError> aggregateWarnings = Lists.newArrayList();\n    boolean hasCodeChanged = false;\n\n    assertFalse(\"Code should not change before processing\",\n        recentChange.hasCodeChanged());\n\n    for (int i = 0; i < numRepetitions; ++i) {\n      if (compiler.getErrorCount() == 0) {\n        errorManagers[i] = new BlackHoleErrorManager(compiler);\n\n        // Only run the type checking pass once, if asked.\n        // Running it twice can cause unpredictable behavior because duplicate\n        // objects for the same type are created, and the type system\n        // uses reference equality to compare many types.\n        if (typeCheckEnabled && i == 0) {\n          TypeCheck check = createTypeCheck(compiler, typeCheckLevel);\n          check.processForTesting(externsRoot, mainRoot);\n        }\n\n        // Only run the normalize pass once, if asked.\n        if (normalizeEnabled && i == 0) {\n          normalizeActualCode(compiler, externsRoot, mainRoot);\n        }\n\n        if (markNoSideEffects && i == 0) {\n          MarkNoSideEffectCalls mark = new MarkNoSideEffectCalls(compiler);\n          mark.process(externsRoot, mainRoot);\n        }\n\n        recentChange.reset();\n\n        getProcessor(compiler).process(externsRoot, mainRoot);\n        if (checkLineNumbers) {\n          (new LineNumberCheck(compiler)).process(externsRoot, mainRoot);\n        }\n\n        hasCodeChanged = hasCodeChanged || recentChange.hasCodeChanged();\n        aggregateWarningCount += errorManagers[i].getWarningCount();\n        aggregateWarnings.addAll(Lists.newArrayList(compiler.getWarnings()));\n\n        if (normalizeEnabled) {\n          boolean verifyDeclaredConstants = true;\n          new Normalize.VerifyConstants(compiler, verifyDeclaredConstants)\n              .process(externsRoot, mainRoot);\n        }\n      }\n    }\n\n    if (error == null) {\n      assertEquals(\n          \"Unexpected error(s): \" + Joiner.on(\"\\n\").join(compiler.getErrors()),\n          0, compiler.getErrorCount());\n\n      // Verify the symbol table.\n      ErrorManager symbolTableErrorManager =\n          new BlackHoleErrorManager(compiler);\n      Node expectedRoot = parseExpectedJs(expected);\n      expectedRoot.detachFromParent();\n\n      JSError[] stErrors = symbolTableErrorManager.getErrors();\n      if (expectedSymbolTableError != null) {\n        assertEquals(\"There should be one error.\", 1, stErrors.length);\n        assertEquals(expectedSymbolTableError, stErrors[0].getType());\n      } else {\n        assertEquals(\"Unexpected symbol table error(s): \" +\n            Joiner.on(\"\\n\").join(stErrors),\n            0, stErrors.length);\n      }\n\n      if (warning == null) {\n        assertEquals(\n            \"Unexpected warning(s): \" + Joiner.on(\"\\n\").join(aggregateWarnings),\n            0, aggregateWarningCount);\n      } else {\n        assertEquals(\"There should be one warning, repeated \" + numRepetitions +\n            \" time(s).\", numRepetitions, aggregateWarningCount);\n        for (int i = 0; i < numRepetitions; ++i) {\n          JSError[] warnings = errorManagers[i].getWarnings();\n          JSError actual = warnings[0];\n          assertEquals(warning, actual.getType());\n\n          // Make sure that source information is always provided.\n          if (!allowSourcelessWarnings) {\n            assertTrue(\"Missing source file name in warning\",\n                actual.sourceName != null && !actual.sourceName.isEmpty());\n            assertTrue(\"Missing line number in warning\",\n                -1 != actual.lineNumber);\n            assertTrue(\"Missing char number in warning\",\n                -1 != actual.getCharno());\n          }\n\n          if (description != null) {\n            assertEquals(description, actual.description);\n          }\n        }\n      }\n\n      if (normalizeEnabled) {\n        normalizeActualCode(compiler, externsRootClone, mainRootClone);\n      }\n\n      if (mainRootClone.checkTreeEqualsSilent(mainRoot)) {\n        assertFalse(\n            \"compiler.reportCodeChange() was called \" +\n            \"even though nothing changed\",\n            hasCodeChanged);\n      } else {\n        assertTrue(\"compiler.reportCodeChange() should have been called\",\n            hasCodeChanged);\n      }\n\n      if (compareAsTree) {\n        String explanation = expectedRoot.checkTreeEquals(mainRoot);\n        assertNull(\"\\nExpected: \" + compiler.toSource(expectedRoot) +\n            \"\\nResult: \" + compiler.toSource(mainRoot) +\n            \"\\n\" + explanation, explanation);\n      } else if (expected != null) {\n        assertEquals(\n            Joiner.on(\"\").join(expected), compiler.toSource(mainRoot));\n      }\n\n      // Verify normalization is not invalidated.\n      Node normalizeCheckRootClone = root.cloneTree();\n      Node normalizeCheckExternsRootClone = root.getFirstChild();\n      Node normalizeCheckMainRootClone = root.getLastChild();\n      new PrepareAst(compiler).process(\n          normalizeCheckExternsRootClone, normalizeCheckMainRootClone);\n      String explanation =\n          normalizeCheckMainRootClone.checkTreeEquals(mainRoot);\n      assertNull(\"Node structure normalization invalidated.\\nExpected: \" +\n          compiler.toSource(normalizeCheckMainRootClone) +\n          \"\\nResult: \" + compiler.toSource(mainRoot) +\n          \"\\n\" + explanation, explanation);\n\n      // TODO(johnlenz): enable this for most test cases.\n      // Currently, this invalidates test for while-loops, for-loop\n      // initializers, and other naming.  However, a set of code\n      // (FoldConstants, etc) runs before the Normalize pass, so this can't be\n      // force on everywhere.\n      if (normalizeEnabled) {\n        new Normalize(compiler, true).process(\n            normalizeCheckExternsRootClone, normalizeCheckMainRootClone);\n        explanation =  normalizeCheckMainRootClone.checkTreeEquals(mainRoot);\n        assertNull(\"Normalization invalidated.\\nExpected: \" +\n            compiler.toSource(normalizeCheckMainRootClone) +\n            \"\\nResult: \" + compiler.toSource(mainRoot) +\n            \"\\n\" + explanation, explanation);\n      }\n    } else {\n      String errors = \"\";\n      for (JSError actualError : compiler.getErrors()) {\n        errors += actualError.description + \"\\n\";\n      }\n      assertEquals(\"There should be one error. \" + errors,\n          1, compiler.getErrorCount());\n      assertEquals(errors, error, compiler.getErrors()[0].getType());\n\n      if (warning != null) {\n        String warnings = \"\";\n        for (JSError actualError : compiler.getWarnings()) {\n          warnings += actualError.description + \"\\n\";\n        }\n        assertEquals(\"There should be one warning. \" + warnings,\n            1, compiler.getWarningCount());\n        assertEquals(warnings, warning, compiler.getWarnings()[0].getType());\n      }\n    }\n  }\n",
        "begin_line": 658,
        "end_line": 846,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output\n   * and (optionally) that an expected warning is issued. Or, if an error is\n   * expected, this method just verifies that the error is encountered.\n   *\n   * @param compiler A compiler that has been initialized via\n   *     {@link Compiler#init}\n   * @param expected Expected output, or null if an error is expected\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   * @param description The description of the expected warning,\n   *      or null if no warning is expected or if the warning's description\n   *      should not be examined\n   ",
        "child_ranges": [
            "(line 661,col 5)-(line 661,col 51)",
            "(line 662,col 5)-(line 662,col 44)",
            "(line 664,col 5)-(line 664,col 39)",
            "(line 665,col 5)-(line 666,col 66)",
            "(line 668,col 5)-(line 668,col 44)",
            "(line 669,col 5)-(line 669,col 40)",
            "(line 672,col 5)-(line 672,col 38)",
            "(line 673,col 5)-(line 673,col 54)",
            "(line 674,col 5)-(line 674,col 50)",
            "(line 676,col 5)-(line 676,col 45)",
            "(line 677,col 5)-(line 677,col 68)",
            "(line 678,col 5)-(line 678,col 34)",
            "(line 679,col 5)-(line 679,col 59)",
            "(line 680,col 5)-(line 680,col 35)",
            "(line 682,col 5)-(line 683,col 39)",
            "(line 685,col 5)-(line 725,col 5)",
            "(line 727,col 5)-(line 845,col 5)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PeepholeFoldConstantsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.normalizeActualCode(com.google.javascript.jscomp.Compiler, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  private void normalizeActualCode(\n      Compiler compiler, Node externsRoot, Node mainRoot) {\n    Normalize normalize = new Normalize(compiler, false);\n    normalize.process(externsRoot, mainRoot);\n  }\n",
        "begin_line": 848,
        "end_line": 852,
        "comment": "",
        "child_ranges": [
            "(line 850,col 5)-(line 850,col 57)",
            "(line 851,col 5)-(line 851,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PeepholeFoldConstantsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.parseExpectedJs(java.lang.String[])",
        "snippet": "  Node parseExpectedJs(String[] expected) {\n    Compiler compiler = createCompiler();\n    JSSourceFile[] inputs = new JSSourceFile[expected.length];\n    for (int i = 0; i < expected.length; i++) {\n      inputs[i] = JSSourceFile.fromCode(\"expected\" + i, expected[i]);\n    }\n    compiler.init(externsInputs, inputs, getOptions());\n    Node root = compiler.parseInputs();\n    assertTrue(\"Unexpected parse error(s): \" +\n        Joiner.on(\"\\n\").join(compiler.getErrors()), root != null);\n    Node externsRoot = root.getFirstChild();\n    Node mainRoot = externsRoot.getNext();\n    // Only run the normalize pass, if asked.\n    if (normalizeEnabled && normalizeExpected && !compiler.hasErrors()) {\n      Normalize normalize = new Normalize(compiler, false);\n      normalize.process(externsRoot, mainRoot);\n    }\n    return mainRoot;\n  }\n",
        "begin_line": 857,
        "end_line": 875,
        "comment": "\n   * Parses expected js inputs and returns the root of the parse tree.\n   ",
        "child_ranges": [
            "(line 858,col 5)-(line 858,col 41)",
            "(line 859,col 5)-(line 859,col 62)",
            "(line 860,col 5)-(line 862,col 5)",
            "(line 863,col 5)-(line 863,col 55)",
            "(line 864,col 5)-(line 864,col 39)",
            "(line 865,col 5)-(line 866,col 66)",
            "(line 867,col 5)-(line 867,col 44)",
            "(line 868,col 5)-(line 868,col 42)",
            "(line 870,col 5)-(line 873,col 5)",
            "(line 874,col 5)-(line 874,col 20)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PeepholeFoldConstantsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.parseExpectedJs(java.lang.String)",
        "snippet": "  Node parseExpectedJs(String expected) {\n    return parseExpectedJs(new String[] {expected});\n  }\n",
        "begin_line": 877,
        "end_line": 879,
        "comment": "",
        "child_ranges": [
            "(line 878,col 5)-(line 878,col 52)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PeepholeFoldConstantsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.createModuleChain(java.lang.String...)",
        "snippet": "  static JSModule[] createModuleChain(String... inputs) {\n    JSModule[] modules = createModules(inputs);\n    for (int i = 1; i < modules.length; i++) {\n      modules[i].addDependency(modules[i - 1]);\n    }\n    return modules;\n  }\n",
        "begin_line": 885,
        "end_line": 891,
        "comment": "\n   * Generates a list of modules from a list of inputs, such that each module\n   * depends on the module before it.\n   ",
        "child_ranges": [
            "(line 886,col 5)-(line 886,col 47)",
            "(line 887,col 5)-(line 889,col 5)",
            "(line 890,col 5)-(line 890,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PeepholeFoldConstantsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.createModuleStar(java.lang.String...)",
        "snippet": "  static JSModule[] createModuleStar(String... inputs) {\n    JSModule[] modules = createModules(inputs);\n    for (int i = 1; i < modules.length; i++) {\n      modules[i].addDependency(modules[0]);\n    }\n    return modules;\n  }\n",
        "begin_line": 897,
        "end_line": 903,
        "comment": "\n   * Generates a list of modules from a list of inputs, such that each module\n   * depends on the first module.\n   ",
        "child_ranges": [
            "(line 898,col 5)-(line 898,col 47)",
            "(line 899,col 5)-(line 901,col 5)",
            "(line 902,col 5)-(line 902,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PeepholeFoldConstantsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.createModules(java.lang.String...)",
        "snippet": "  static JSModule[] createModules(String... inputs) {\n    JSModule[] modules = new JSModule[inputs.length];\n    for (int i = 0; i < inputs.length; i++) {\n      JSModule module = modules[i] = new JSModule(\"m\" + i);\n      module.add(JSSourceFile.fromCode(\"i\" + i, inputs[i]));\n    }\n    return modules;\n  }\n",
        "begin_line": 909,
        "end_line": 916,
        "comment": "\n   * Generates a list of modules from a list of inputs. Does not generate any\n   * dependencies between the modules.\n   ",
        "child_ranges": [
            "(line 910,col 5)-(line 910,col 53)",
            "(line 911,col 5)-(line 914,col 5)",
            "(line 915,col 5)-(line 915,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PeepholeFoldConstantsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.BlackHoleErrorManager.BlackHoleErrorManager(com.google.javascript.jscomp.Compiler)",
        "snippet": "    private BlackHoleErrorManager(Compiler compiler) {\n      compiler.setErrorManager(this);\n    }\n",
        "begin_line": 919,
        "end_line": 921,
        "comment": "",
        "child_ranges": [
            "(line 920,col 7)-(line 920,col 37)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PeepholeFoldConstantsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.BlackHoleErrorManager.println(com.google.javascript.jscomp.CheckLevel, com.google.javascript.jscomp.JSError)",
        "snippet": "    @Override\n    public void println(CheckLevel level, JSError error) {}\n",
        "begin_line": 923,
        "end_line": 924,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PeepholeFoldConstantsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.BlackHoleErrorManager.printSummary()",
        "snippet": "    @Override\n    public void printSummary() {}\n",
        "begin_line": 926,
        "end_line": 927,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PeepholeFoldConstantsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.createCompiler()",
        "snippet": "  private Compiler createCompiler() {\n    Compiler compiler = new Compiler();\n    return compiler;\n  }\n",
        "begin_line": 930,
        "end_line": 933,
        "comment": "",
        "child_ranges": [
            "(line 931,col 5)-(line 931,col 39)",
            "(line 932,col 5)-(line 932,col 20)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PeepholeFoldConstantsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.setExpectedSymbolTableError(com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  protected void setExpectedSymbolTableError(DiagnosticType type) {\n    this.expectedSymbolTableError = type;\n  }\n",
        "begin_line": 935,
        "end_line": 937,
        "comment": "",
        "child_ranges": [
            "(line 936,col 5)-(line 936,col 41)"
        ]
    }
]