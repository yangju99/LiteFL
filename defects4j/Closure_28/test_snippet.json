[
    {
        "class_name": "com.google.javascript.jscomp.InlineCostEstimatorTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineCostEstimatorTest.java",
        "signature": "com.google.javascript.jscomp.InlineCostEstimatorTest.parse(java.lang.String)",
        "snippet": "  static Node parse(String js) {\n    Compiler compiler = new Compiler();\n    Node n = compiler.parseTestCode(js);\n    assertEquals(0, compiler.getErrorCount());\n    return n;\n  }\n",
        "begin_line": 30,
        "end_line": 35,
        "comment": "",
        "child_ranges": [
            "(line 31,col 5)-(line 31,col 39)",
            "(line 32,col 5)-(line 32,col 40)",
            "(line 33,col 5)-(line 33,col 46)",
            "(line 34,col 5)-(line 34,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineCostEstimatorTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineCostEstimatorTest.java",
        "signature": "com.google.javascript.jscomp.InlineCostEstimatorTest.minimize(java.lang.String)",
        "snippet": "  static String minimize(String js) {\n    return new CodePrinter.Builder(parse(js)).\n        setLineLengthThreshold(Integer.MAX_VALUE).\n        build();\n  }\n",
        "begin_line": 37,
        "end_line": 41,
        "comment": "",
        "child_ranges": [
            "(line 38,col 5)-(line 40,col 16)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineCostEstimatorTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineCostEstimatorTest.java",
        "signature": "com.google.javascript.jscomp.InlineCostEstimatorTest.cost(java.lang.String)",
        "snippet": "  static long cost(String js) {\n    return InlineCostEstimator.getCost(parse(js));\n  }\n",
        "begin_line": 43,
        "end_line": 45,
        "comment": "",
        "child_ranges": [
            "(line 44,col 5)-(line 44,col 50)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineCostEstimatorTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineCostEstimatorTest.java",
        "signature": "com.google.javascript.jscomp.InlineCostEstimatorTest.testCost()",
        "snippet": "  public void testCost() {\n    checkCost(\"1\", \"1\");\n    checkCost(\"true\", \"1\");\n    checkCost(\"false\", \"1\");\n    checkCost(\"a\", \"xx\");\n    checkCost(\"a + b\", \"xx+xx\");\n    checkCost(\"foo()\", \"xx()\");\n    checkCost(\"foo(a,b)\", \"xx(xx,xx)\");\n    checkCost(\"10 + foo(a,b)\", \"0+xx(xx,xx)\");\n    checkCost(\"1 + foo(a,b)\", \"1+xx(xx,xx)\");\n    checkCost(\"a ? 1 : 0\", \"xx?1:0\");\n    checkCost(\"a.b\", \"xx.xx\");\n    checkCost(\"new Obj()\", \"new xx\");\n    checkCost(\"function a() {return \\\"monkey\\\"}\",\n              \"function xx(){return\\\"monkey\\\"}\");\n  }\n",
        "begin_line": 47,
        "end_line": 62,
        "comment": "",
        "child_ranges": [
            "(line 48,col 5)-(line 48,col 24)",
            "(line 49,col 5)-(line 49,col 27)",
            "(line 50,col 5)-(line 50,col 28)",
            "(line 51,col 5)-(line 51,col 25)",
            "(line 52,col 5)-(line 52,col 32)",
            "(line 53,col 5)-(line 53,col 31)",
            "(line 54,col 5)-(line 54,col 39)",
            "(line 55,col 5)-(line 55,col 46)",
            "(line 56,col 5)-(line 56,col 45)",
            "(line 57,col 5)-(line 57,col 37)",
            "(line 58,col 5)-(line 58,col 30)",
            "(line 59,col 5)-(line 59,col 37)",
            "(line 60,col 5)-(line 61,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineCostEstimatorTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineCostEstimatorTest.java",
        "signature": "com.google.javascript.jscomp.InlineCostEstimatorTest.checkCost(java.lang.String, java.lang.String)",
        "snippet": "  private void checkCost(String source, String example) {\n\n    // The example string should have been minified already.\n    assertEquals(minimize(example), example);\n\n    // cost estimate should be the same as the length of the example string.\n    assertEquals(example.length(), cost(source));\n  }\n",
        "begin_line": 64,
        "end_line": 71,
        "comment": "",
        "child_ranges": [
            "(line 67,col 5)-(line 67,col 45)",
            "(line 70,col 5)-(line 70,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.InlineFunctionsTest()",
        "snippet": "  public InlineFunctionsTest() {\n    this.enableNormalize();\n    this.enableMarkNoSideEffects();\n  }\n",
        "begin_line": 33,
        "end_line": 36,
        "comment": "",
        "child_ranges": [
            "(line 34,col 5)-(line 34,col 27)",
            "(line 35,col 5)-(line 35,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.setUp()",
        "snippet": "  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n    super.enableLineNumberCheck(true);\n    allowGlobalFunctionInlining = true;\n    allowBlockInlining = true;\n    assumeStrictThis = false;\n    assumeMinimumCapture = false;\n  }\n",
        "begin_line": 38,
        "end_line": 46,
        "comment": "",
        "child_ranges": [
            "(line 40,col 5)-(line 40,col 18)",
            "(line 41,col 5)-(line 41,col 38)",
            "(line 42,col 5)-(line 42,col 39)",
            "(line 43,col 5)-(line 43,col 30)",
            "(line 44,col 5)-(line 44,col 29)",
            "(line 45,col 5)-(line 45,col 33)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.getProcessor(com.google.javascript.jscomp.Compiler)",
        "snippet": "  @Override\n  protected CompilerPass getProcessor(Compiler compiler) {\n    compiler.resetUniqueNameId();\n    return new InlineFunctions(\n        compiler,\n        compiler.getUniqueNameIdSupplier(),\n        allowGlobalFunctionInlining,\n        allowLocalFunctionInlining,\n        allowBlockInlining,\n        assumeStrictThis,\n        assumeMinimumCapture);\n  }\n",
        "begin_line": 48,
        "end_line": 59,
        "comment": "",
        "child_ranges": [
            "(line 50,col 5)-(line 50,col 33)",
            "(line 51,col 5)-(line 58,col 30)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.getNumRepetitions()",
        "snippet": "  @Override\n  protected int getNumRepetitions() {\n    // Some inlining can only be done in mutliple passes.\n    return 3;\n  }\n",
        "begin_line": 65,
        "end_line": 69,
        "comment": "\n   * Returns the number of times the pass should be run before results are\n   * verified.\n   ",
        "child_ranges": [
            "(line 68,col 5)-(line 68,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testInlineEmptyFunction1()",
        "snippet": "  public void testInlineEmptyFunction1() {\n    // Empty function, no params.\n    test(\"function foo(){}\" +\n        \"foo();\",\n        \"void 0;\");\n  }\n",
        "begin_line": 71,
        "end_line": 76,
        "comment": "",
        "child_ranges": [
            "(line 73,col 5)-(line 75,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testInlineEmptyFunction2()",
        "snippet": "  public void testInlineEmptyFunction2() {\n    // Empty function, params with no side-effects.\n    test(\"function foo(){}\" +\n        \"foo(1, new Date, function(){});\",\n        \"void 0;\");\n  }\n",
        "begin_line": 78,
        "end_line": 83,
        "comment": "",
        "child_ranges": [
            "(line 80,col 5)-(line 82,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testInlineEmptyFunction3()",
        "snippet": "  public void testInlineEmptyFunction3() {\n    // Empty function, multiple references.\n    test(\"function foo(){}\" +\n        \"foo();foo();foo();\",\n        \"void 0;void 0;void 0\");\n  }\n",
        "begin_line": 85,
        "end_line": 90,
        "comment": "",
        "child_ranges": [
            "(line 87,col 5)-(line 89,col 32)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testInlineEmptyFunction4()",
        "snippet": "  public void testInlineEmptyFunction4() {\n    // Empty function, params with side-effects forces block inlining.\n    test(\"function foo(){}\" +\n        \"foo(x());\",\n        \"{var JSCompiler_inline_anon_param_0=x();}\");\n  }\n",
        "begin_line": 92,
        "end_line": 97,
        "comment": "",
        "child_ranges": [
            "(line 94,col 5)-(line 96,col 53)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testInlineEmptyFunction5()",
        "snippet": "  public void testInlineEmptyFunction5() {\n    // Empty function, call params with side-effects in expression can not\n    // be inlined.\n    allowBlockInlining = false;\n    testSame(\"function foo(){}\" +\n        \"foo(x());\");\n  }\n",
        "begin_line": 99,
        "end_line": 105,
        "comment": "",
        "child_ranges": [
            "(line 102,col 5)-(line 102,col 31)",
            "(line 103,col 5)-(line 104,col 21)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testInlineFunctions1()",
        "snippet": "  public void testInlineFunctions1() {\n    // As simple a test as we can get.\n    test(\"function foo(){ return 4 }\" +\n        \"foo();\",\n        \"4\");\n  }\n",
        "begin_line": 107,
        "end_line": 112,
        "comment": "",
        "child_ranges": [
            "(line 109,col 5)-(line 111,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testInlineFunctions2()",
        "snippet": "  public void testInlineFunctions2() {\n    // inline simple constants\n    // NOTE: CD is not inlined.\n    test(\"var t;var AB=function(){return 4};\" +\n         \"function BC(){return 6;}\" +\n         \"CD=function(x){return x + 5};x=CD(3);y=AB();z=BC();\",\n         \"var t;CD=function(x){return x+5};x=CD(3);y=4;z=6\"\n         );\n  }\n",
        "begin_line": 114,
        "end_line": 122,
        "comment": "",
        "child_ranges": [
            "(line 117,col 5)-(line 121,col 11)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testInlineFunctions3()",
        "snippet": "  public void testInlineFunctions3() {\n    // inline simple constants\n    test(\"var t;var AB=function(){return 4};\" +\n        \"function BC(){return 6;}\" +\n        \"var CD=function(x){return x + 5};x=CD(3);y=AB();z=BC();\",\n        \"var t;x=3+5;y=4;z=6\");\n  }\n",
        "begin_line": 124,
        "end_line": 130,
        "comment": "",
        "child_ranges": [
            "(line 126,col 5)-(line 129,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testInlineFunctions4()",
        "snippet": "  public void testInlineFunctions4() {\n    // don't inline if there are multiple definitions (need DFA for that).\n    test(\"var t; var AB = function() { return 4 }; \" +\n        \"function BC() { return 6; }\" +\n        \"CD = 0;\" +\n        \"CD = function(x) { return x + 5 }; x = CD(3); y = AB(); z = BC();\",\n\n        \"var t;CD=0;CD=function(x){return x+5};x=CD(3);y=4;z=6\");\n  }\n",
        "begin_line": 132,
        "end_line": 140,
        "comment": "",
        "child_ranges": [
            "(line 134,col 5)-(line 139,col 65)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testInlineFunctions5()",
        "snippet": "  public void testInlineFunctions5() {\n    // inline additions\n    test(\"var FOO_FN=function(x,y) { return \\\"de\\\" + x + \\\"nu\\\" + y };\" +\n         \"var a = FOO_FN(\\\"ez\\\", \\\"ts\\\")\",\n\n         \"var a=\\\"de\\\"+\\\"ez\\\"+\\\"nu\\\"+\\\"ts\\\"\");\n  }\n",
        "begin_line": 142,
        "end_line": 148,
        "comment": "",
        "child_ranges": [
            "(line 144,col 5)-(line 147,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testInlineFunctions6()",
        "snippet": "  public void testInlineFunctions6() {\n    // more complex inlines\n    test(\"function BAR_FN(x, y, z) { return z(foo(x + y)) }\" +\n         \"alert(BAR_FN(1, 2, baz))\",\n\n         \"alert(baz(foo(1+2)))\");\n  }\n",
        "begin_line": 150,
        "end_line": 156,
        "comment": "",
        "child_ranges": [
            "(line 152,col 5)-(line 155,col 33)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testInlineFunctions7()",
        "snippet": "  public void testInlineFunctions7() {\n    // inlines appearing multiple times\n    test(\"function FN(x,y,z){return x+x+y}\" +\n         \"var b=FN(1,2,3)\",\n\n         \"var b=1+1+2\");\n  }\n",
        "begin_line": 158,
        "end_line": 164,
        "comment": "",
        "child_ranges": [
            "(line 160,col 5)-(line 163,col 24)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testInlineFunctions8()",
        "snippet": "  public void testInlineFunctions8() {\n    // check correct parenthesization\n    test(\"function MUL(x,y){return x*y}function ADD(x,y){return x+y}\" +\n         \"var a=1+MUL(2,3);var b=2*ADD(3,4)\",\n\n         \"var a=1+2*3;var b=2*(3+4)\");\n  }\n",
        "begin_line": 166,
        "end_line": 172,
        "comment": "",
        "child_ranges": [
            "(line 168,col 5)-(line 171,col 38)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testInlineFunctions9()",
        "snippet": "  public void testInlineFunctions9() {\n    // don't inline if the input parameter is modified.\n    test(\"function INC(x){return x++}\" +\n         \"var y=INC(i)\",\n         \"var y;{var x$$inline_0=i;\" +\n         \"y=x$$inline_0++}\");\n  }\n",
        "begin_line": 174,
        "end_line": 180,
        "comment": "",
        "child_ranges": [
            "(line 176,col 5)-(line 179,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testInlineFunctions10()",
        "snippet": "  public void testInlineFunctions10() {\n    test(\"function INC(x){return x++}\" +\n         \"var y=INC(i);y=INC(i)\",\n         \"var y;\" +\n         \"{var x$$inline_0=i;\" +\n         \"y=x$$inline_0++}\" +\n         \"{var x$$inline_2=i;\" +\n         \"y=x$$inline_2++}\");\n  }\n",
        "begin_line": 182,
        "end_line": 190,
        "comment": "",
        "child_ranges": [
            "(line 183,col 5)-(line 189,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testInlineFunctions11()",
        "snippet": "  public void testInlineFunctions11() {\n    test(\"function f(x){return x}\" +\n          \"var y=f(i)\",\n          \"var y=i\");\n  }\n",
        "begin_line": 192,
        "end_line": 196,
        "comment": "",
        "child_ranges": [
            "(line 193,col 5)-(line 195,col 21)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testInlineFunctions12()",
        "snippet": "  public void testInlineFunctions12() {\n    // don't inline if the input parameter has side-effects.\n    allowBlockInlining = false;\n    test(\"function f(x){return x}\" +\n          \"var y=f(i)\",\n          \"var y=i\");\n    testSame(\"function f(x){return x}\" +\n         \"var y=f(i++)\");\n  }\n",
        "begin_line": 198,
        "end_line": 206,
        "comment": "",
        "child_ranges": [
            "(line 200,col 5)-(line 200,col 31)",
            "(line 201,col 5)-(line 203,col 21)",
            "(line 204,col 5)-(line 205,col 25)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testInlineFunctions13()",
        "snippet": "  public void testInlineFunctions13() {\n    // inline as block if the input parameter has side-effects.\n    test(\"function f(x){return x}\" +\n         \"var y=f(i++)\",\n         \"var y;{var x$$inline_0=i++;y=x$$inline_0}\");\n  }\n",
        "begin_line": 208,
        "end_line": 213,
        "comment": "",
        "child_ranges": [
            "(line 210,col 5)-(line 212,col 54)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testInlineFunctions14()",
        "snippet": "  public void testInlineFunctions14() {\n    // don't remove functions that are referenced on other ways\n    test(\"function FOO(x){return x}var BAR=function(y){return y}\" +\n             \";b=FOO;a(BAR);x=FOO(1);y=BAR(2)\",\n\n         \"function FOO(x){return x}var BAR=function(y){return y}\" +\n             \";b=FOO;a(BAR);x=1;y=2\");\n  }\n",
        "begin_line": 215,
        "end_line": 222,
        "comment": "",
        "child_ranges": [
            "(line 217,col 5)-(line 221,col 38)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testInlineFunctions15a()",
        "snippet": "  public void testInlineFunctions15a() {\n    // closure factories: do inline into global scope.\n    test(\"function foo(){return function(a){return a+1}}\" +\n         \"var b=function(){return c};\" +\n         \"var d=b()+foo()\",\n\n         \"var d=c+function(a){return a+1}\");\n  }\n",
        "begin_line": 224,
        "end_line": 231,
        "comment": "",
        "child_ranges": [
            "(line 226,col 5)-(line 230,col 44)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testInlineFunctions15b()",
        "snippet": "  public void testInlineFunctions15b() {\n    assumeMinimumCapture = false;\n\n    // closure factories: don't inline closure with locals into global scope.\n    test(\"function foo(){var x;return function(a){return a+1}}\" +\n         \"var b=function(){return c};\" +\n         \"var d=b()+foo()\",\n\n         \"function foo(){var x;return function(a){return a+1}}\" +\n         \"var d=c+foo()\");\n\n    assumeMinimumCapture = true;\n\n    test(\"function foo(){var x;return function(a){return a+1}}\" +\n         \"var b=function(){return c};\" +\n         \"var d=b()+foo()\",\n\n         \"var JSCompiler_temp_const$$0 = c;\\n\" +\n         \"{\\n\" +\n         \"var JSCompiler_inline_result$$1;\\n\" +\n         \"var x$$inline_2;\\n\" +\n         \"JSCompiler_inline_result$$1 = \" +\n         \"    function(a$$inline_3){ return a$$inline_3+1 };\\n\" +\n         \"}\" +\n         \"var d=JSCompiler_temp_const$$0 + JSCompiler_inline_result$$1\");\n  }\n",
        "begin_line": 233,
        "end_line": 258,
        "comment": "",
        "child_ranges": [
            "(line 234,col 5)-(line 234,col 33)",
            "(line 237,col 5)-(line 242,col 26)",
            "(line 244,col 5)-(line 244,col 32)",
            "(line 246,col 5)-(line 257,col 73)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testInlineFunctions15c()",
        "snippet": "  public void testInlineFunctions15c() {\n    assumeMinimumCapture = false;\n\n    // closure factories: don't inline into non-global scope.\n    test(\"function foo(){return function(a){return a+1}}\" +\n         \"var b=function(){return c};\" +\n         \"function _x(){ var d=b()+foo() }\",\n\n         \"function foo(){return function(a){return a+1}}\" +\n         \"function _x(){ var d=c+foo() }\");\n\n    assumeMinimumCapture = true;\n\n    // closure factories: don't inline into non-global scope.\n    test(\"function foo(){return function(a){return a+1}}\" +\n         \"var b=function(){return c};\" +\n         \"function _x(){ var d=b()+foo() }\",\n\n         \"function _x(){var d=c+function(a){return a+1}}\");\n\n  }\n",
        "begin_line": 260,
        "end_line": 280,
        "comment": "",
        "child_ranges": [
            "(line 261,col 5)-(line 261,col 33)",
            "(line 264,col 5)-(line 269,col 43)",
            "(line 271,col 5)-(line 271,col 32)",
            "(line 274,col 5)-(line 278,col 59)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testInlineFunctions15d()",
        "snippet": "  public void testInlineFunctions15d() {\n    assumeMinimumCapture = false;\n\n    // closure factories: don't inline functions with vars.\n    test(\"function foo(){var x; return function(a){return a+1}}\" +\n         \"var b=function(){return c};\" +\n         \"function _x(){ var d=b()+foo() }\",\n\n         \"function foo(){var x; return function(a){return a+1}}\" +\n         \"function _x(){ var d=c+foo() }\");\n\n    assumeMinimumCapture = true;\n\n    // closure factories: don't inline functions with vars.\n    test(\"function foo(){var x; return function(a){return a+1}}\" +\n         \"var b=function(){return c};\" +\n         \"function _x(){ var d=b()+foo() }\",\n\n         \"function _x() { \\n\" +\n         \"  var JSCompiler_temp_const$$0 = c;\\n\" +\n         \"  {\\n\" +\n         \"  var JSCompiler_inline_result$$1;\\n\" +\n         \"  var x$$inline_2;\\n\" +\n         \"  JSCompiler_inline_result$$1 = \" +\n         \"      function(a$$inline_3) {return a$$inline_3+1};\\n\" +\n         \"  }\\n\" +\n         \"  var d = JSCompiler_temp_const$$0+JSCompiler_inline_result$$1\\n\" +\n         \"}\");\n  }\n",
        "begin_line": 282,
        "end_line": 310,
        "comment": "",
        "child_ranges": [
            "(line 283,col 5)-(line 283,col 33)",
            "(line 286,col 5)-(line 291,col 43)",
            "(line 293,col 5)-(line 293,col 32)",
            "(line 296,col 5)-(line 309,col 14)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testInlineFunctions16a()",
        "snippet": "  public void testInlineFunctions16a() {\n    assumeMinimumCapture = false;\n\n    testSame(\"function foo(b){return window.bar(function(){c(b)})}\" +\n         \"var d=foo(e)\");\n\n    assumeMinimumCapture = true;\n\n    test(\n        \"function foo(b){return window.bar(function(){c(b)})}\" +\n        \"var d=foo(e)\",\n        \"var d;{var b$$inline_0=e;\" +\n        \"d=window.bar(function(){c(b$$inline_0)})}\");\n  }\n",
        "begin_line": 312,
        "end_line": 325,
        "comment": "",
        "child_ranges": [
            "(line 313,col 5)-(line 313,col 33)",
            "(line 315,col 5)-(line 316,col 25)",
            "(line 318,col 5)-(line 318,col 32)",
            "(line 320,col 5)-(line 324,col 53)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testInlineFunctions16b()",
        "snippet": "  public void testInlineFunctions16b() {\n    test(\"function foo(){return window.bar(function(){c()})}\" +\n         \"var d=foo(e)\",\n         \"var d=window.bar(function(){c()})\");\n  }\n",
        "begin_line": 327,
        "end_line": 331,
        "comment": "",
        "child_ranges": [
            "(line 328,col 5)-(line 330,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testInlineFunctions17()",
        "snippet": "  public void testInlineFunctions17() {\n    // don't inline recursive functions\n    testSame(\"function foo(x){return x*x+foo(3)}var bar=foo(4)\");\n  }\n",
        "begin_line": 333,
        "end_line": 336,
        "comment": "",
        "child_ranges": [
            "(line 335,col 5)-(line 335,col 65)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testInlineFunctions18()",
        "snippet": "  public void testInlineFunctions18() {\n    // TRICKY ... test nested inlines\n    allowBlockInlining = false;\n    test(\"function foo(a, b){return a+b}\" +\n         \"function bar(d){return c}\" +\n         \"var d=foo(bar(1),e)\",\n         \"var d=c+e\");\n  }\n",
        "begin_line": 338,
        "end_line": 345,
        "comment": "",
        "child_ranges": [
            "(line 340,col 5)-(line 340,col 31)",
            "(line 341,col 5)-(line 344,col 22)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testInlineFunctions19()",
        "snippet": "  public void testInlineFunctions19() {\n    // TRICKY ... test nested inlines\n    // with block inlining possible\n    test(\"function foo(a, b){return a+b}\" +\n        \"function bar(d){return c}\" +\n        \"var d=foo(bar(1),e)\",\n        \"var d;{d=c+e}\");\n  }\n",
        "begin_line": 347,
        "end_line": 354,
        "comment": "",
        "child_ranges": [
            "(line 350,col 5)-(line 353,col 25)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testInlineFunctions20()",
        "snippet": "  public void testInlineFunctions20() {\n    // Make sure both orderings work\n    allowBlockInlining = false;\n    test(\"function foo(a, b){return a+b}\" +\n         \"function bar(d){return c}\" +\n         \"var d=bar(foo(1,e));\",\n         \"var d=c\");\n  }\n",
        "begin_line": 356,
        "end_line": 363,
        "comment": "",
        "child_ranges": [
            "(line 358,col 5)-(line 358,col 31)",
            "(line 359,col 5)-(line 362,col 20)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testInlineFunctions21()",
        "snippet": "  public void testInlineFunctions21() {\n    // with block inlining possible\n    test(\"function foo(a, b){return a+b}\" +\n        \"function bar(d){return c}\" +\n        \"var d=bar(foo(1,e))\",\n        \"var d;{d=c}\");\n  }\n",
        "begin_line": 365,
        "end_line": 371,
        "comment": "",
        "child_ranges": [
            "(line 367,col 5)-(line 370,col 23)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testInlineFunctions22()",
        "snippet": "  public void testInlineFunctions22() {\n    // Another tricky case ... test nested compiler inlines\n    test(\"function plex(a){if(a) return 0;else return 1;}\" +\n         \"function foo(a, b){return bar(a+b)}\" +\n         \"function bar(d){return plex(d)}\" +\n         \"var d=foo(1,2)\",\n\n         \"var d;{JSCompiler_inline_label_plex_1:{\" +\n         \"if(1+2){\" +\n         \"d=0;break JSCompiler_inline_label_plex_1}\" +\n         \"else{\" +\n         \"d=1;break JSCompiler_inline_label_plex_1}d=void 0}}\");\n  }\n",
        "begin_line": 373,
        "end_line": 385,
        "comment": "",
        "child_ranges": [
            "(line 375,col 5)-(line 384,col 64)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testInlineFunctions23()",
        "snippet": "  public void testInlineFunctions23() {\n    // Test both orderings again\n    test(\"function complex(a){if(a) return 0;else return 1;}\" +\n         \"function bar(d){return complex(d)}\" +\n         \"function foo(a, b){return bar(a+b)}\" +\n         \"var d=foo(1,2)\",\n\n         \"var d;{JSCompiler_inline_label_complex_1:{\" +\n         \"if(1+2){\" +\n         \"d=0;break JSCompiler_inline_label_complex_1\" +\n         \"}else{\" +\n         \"d=1;break JSCompiler_inline_label_complex_1\" +\n         \"}d=void 0}}\");\n  }\n",
        "begin_line": 387,
        "end_line": 400,
        "comment": "",
        "child_ranges": [
            "(line 389,col 5)-(line 399,col 24)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testInlineFunctions24()",
        "snippet": "  public void testInlineFunctions24() {\n    // Don't inline functions with 'arguments' or 'this'\n    testSame(\"function foo(x){return this}foo(1)\");\n  }\n",
        "begin_line": 402,
        "end_line": 405,
        "comment": "",
        "child_ranges": [
            "(line 404,col 5)-(line 404,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testInlineFunctions25()",
        "snippet": "  public void testInlineFunctions25() {\n    testSame(\"function foo(){return arguments[0]}foo()\");\n  }\n",
        "begin_line": 407,
        "end_line": 409,
        "comment": "",
        "child_ranges": [
            "(line 408,col 5)-(line 408,col 57)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testInlineFunctions26()",
        "snippet": "  public void testInlineFunctions26() {\n    // Don't inline external functions\n    testSame(\"function _foo(x){return x}_foo(1)\");\n  }\n",
        "begin_line": 411,
        "end_line": 414,
        "comment": "",
        "child_ranges": [
            "(line 413,col 5)-(line 413,col 50)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testInlineFunctions27()",
        "snippet": "  public void testInlineFunctions27() {\n    test(\"var window = {}; function foo(){window.bar++; return 3;}\" +\n        \"var x = {y: 1, z: foo(2)};\",\n        \"var window={};\" +\n        \"{\" +\n        \"  var JSCompiler_inline_result$$0;\" +\n        \"  window.bar++;\" +\n        \"  JSCompiler_inline_result$$0 = 3;\" +\n        \"}\" +\n        \"var x = {y: 1, z: JSCompiler_inline_result$$0};\");\n  }\n",
        "begin_line": 416,
        "end_line": 426,
        "comment": "",
        "child_ranges": [
            "(line 417,col 5)-(line 425,col 59)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testInlineFunctions28()",
        "snippet": "  public void testInlineFunctions28() {\n    test(\"var window = {}; function foo(){window.bar++; return 3;}\" +\n        \"var x = {y: alert(), z: foo(2)};\",\n        \"var window = {};\" +\n        \"var JSCompiler_temp_const$$0 = alert();\" +\n        \"{\" +\n        \" var JSCompiler_inline_result$$1;\" +\n        \" window.bar++;\" +\n        \" JSCompiler_inline_result$$1 = 3;}\" +\n        \"var x = {\" +\n        \"  y: JSCompiler_temp_const$$0,\" +\n        \"  z: JSCompiler_inline_result$$1\" +\n        \"};\");\n  }\n",
        "begin_line": 428,
        "end_line": 441,
        "comment": "",
        "child_ranges": [
            "(line 429,col 5)-(line 440,col 14)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testInlineFunctions29()",
        "snippet": "  public void testInlineFunctions29() {\n    test(\"var window = {}; function foo(){window.bar++; return 3;}\" +\n        \"var x = {a: alert(), b: alert2(), c: foo(2)};\",\n        \"var window = {};\" +\n        \"var JSCompiler_temp_const$$1 = alert();\" +\n        \"var JSCompiler_temp_const$$0 = alert2();\" +\n        \"{\" +\n        \" var JSCompiler_inline_result$$2;\" +\n        \" window.bar++;\" +\n        \" JSCompiler_inline_result$$2 = 3;}\" +\n        \"var x = {\" +\n        \"  a: JSCompiler_temp_const$$1,\" +\n        \"  b: JSCompiler_temp_const$$0,\" +\n        \"  c: JSCompiler_inline_result$$2\" +\n        \"};\");\n  }\n",
        "begin_line": 443,
        "end_line": 458,
        "comment": "",
        "child_ranges": [
            "(line 444,col 5)-(line 457,col 14)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testInlineFunctions30()",
        "snippet": "  public void testInlineFunctions30() {\n    // As simple a test as we can get.\n    testSame(\"function foo(){ return eval() }\" +\n        \"foo();\");\n  }\n",
        "begin_line": 460,
        "end_line": 464,
        "comment": "",
        "child_ranges": [
            "(line 462,col 5)-(line 463,col 18)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testInlineFunctions31()",
        "snippet": "  public void testInlineFunctions31() {\n    // Don't introduce a duplicate label in the same scope\n    test(\"function foo(){ lab:{4;} }\" +\n        \"lab:{foo();}\",\n        \"lab:{{JSCompiler_inline_label_0:{4}}}\");\n  }\n",
        "begin_line": 466,
        "end_line": 471,
        "comment": "",
        "child_ranges": [
            "(line 468,col 5)-(line 470,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testMixedModeInlining1()",
        "snippet": "  public void testMixedModeInlining1() {\n    // Base line tests, direct inlining\n    test(\"function foo(){return 1}\" +\n        \"foo();\",\n        \"1;\");\n  }\n",
        "begin_line": 473,
        "end_line": 478,
        "comment": "",
        "child_ranges": [
            "(line 475,col 5)-(line 477,col 14)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testMixedModeInlining2()",
        "snippet": "  public void testMixedModeInlining2() {\n    // Base line tests, block inlining. Block inlining is needed by\n    // possible-side-effect parameter.\n    test(\"function foo(){return 1}\" +\n        \"foo(x());\",\n        \"{var JSCompiler_inline_anon_param_0=x();1}\");\n  }\n",
        "begin_line": 480,
        "end_line": 486,
        "comment": "",
        "child_ranges": [
            "(line 483,col 5)-(line 485,col 54)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testMixedModeInlining3()",
        "snippet": "  public void testMixedModeInlining3() {\n    // Inline using both modes.\n    test(\"function foo(){return 1}\" +\n        \"foo();foo(x());\",\n        \"1;{var JSCompiler_inline_anon_param_0=x();1}\");\n  }\n",
        "begin_line": 488,
        "end_line": 493,
        "comment": "",
        "child_ranges": [
            "(line 490,col 5)-(line 492,col 56)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testMixedModeInlining4()",
        "snippet": "  public void testMixedModeInlining4() {\n    // Inline using both modes. Alternating. Second call of each type has\n    // side-effect-less parameter, this is thrown away.\n    test(\"function foo(){return 1}\" +\n        \"foo();foo(x());\" +\n        \"foo(1);foo(1,x());\",\n        \"1;{var JSCompiler_inline_anon_param_0=x();1}\" +\n        \"1;{var JSCompiler_inline_anon_param_4=x();1}\");\n  }\n",
        "begin_line": 495,
        "end_line": 503,
        "comment": "",
        "child_ranges": [
            "(line 498,col 5)-(line 502,col 56)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testMixedModeInliningCosting1()",
        "snippet": "  public void testMixedModeInliningCosting1() {\n    // Inline using both modes. Costing estimates.\n\n    // Base line.\n    test(\n        \"function foo(a,b){return a+b+a+b+4+5+6+7+8+9+1+2+3+4+5}\" +\n        \"foo(1,2);\" +\n        \"foo(2,3)\",\n\n        \"1+2+1+2+4+5+6+7+8+9+1+2+3+4+5;\" +\n        \"2+3+2+3+4+5+6+7+8+9+1+2+3+4+5\");\n  }\n",
        "begin_line": 505,
        "end_line": 516,
        "comment": "",
        "child_ranges": [
            "(line 509,col 5)-(line 515,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testMixedModeInliningCosting2()",
        "snippet": "  public void testMixedModeInliningCosting2() {\n    // Don't inline here because the function definition can not be eliminated.\n    // TODO(johnlenz): Should we add constant removing to the unit test?\n    testSame(\n        \"function foo(a,b){return a+b+a+b+4+5+6+7+8+9+1+2+3+4+5}\" +\n        \"foo(1,2);\" +\n        \"foo(2,3,x())\");\n  }\n",
        "begin_line": 518,
        "end_line": 525,
        "comment": "",
        "child_ranges": [
            "(line 521,col 5)-(line 524,col 24)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testMixedModeInliningCosting3()",
        "snippet": "  public void testMixedModeInliningCosting3() {\n    // Do inline here because the function definition can be eliminated.\n    test(\n        \"function foo(a,b){return a+b+a+b+4+5+6+7+8+9+1+2+3+10}\" +\n        \"foo(1,2);\" +\n        \"foo(2,3,x())\",\n\n        \"1+2+1+2+4+5+6+7+8+9+1+2+3+10;\" +\n        \"{var JSCompiler_inline_anon_param_2=x();\" +\n        \"2+3+2+3+4+5+6+7+8+9+1+2+3+10}\");\n  }\n",
        "begin_line": 527,
        "end_line": 537,
        "comment": "",
        "child_ranges": [
            "(line 529,col 5)-(line 536,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testMixedModeInliningCosting4()",
        "snippet": "  public void testMixedModeInliningCosting4() {\n    // Threshold test.\n    testSame(\n        \"function foo(a,b){return a+b+a+b+4+5+6+7+8+9+1+2+3+4+101}\" +\n        \"foo(1,2);\" +\n        \"foo(2,3,x())\");\n  }\n",
        "begin_line": 539,
        "end_line": 545,
        "comment": "",
        "child_ranges": [
            "(line 541,col 5)-(line 544,col 24)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testNoInlineIfParametersModified1()",
        "snippet": "  public void testNoInlineIfParametersModified1() {\n    // Assignment\n    test(\"function f(x){return x=1}f(undefined)\",\n         \"{var x$$inline_0=undefined;\" +\n         \"x$$inline_0=1}\");\n  }\n",
        "begin_line": 547,
        "end_line": 552,
        "comment": "",
        "child_ranges": [
            "(line 549,col 5)-(line 551,col 27)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testNoInlineIfParametersModified2()",
        "snippet": "  public void testNoInlineIfParametersModified2() {\n    test(\"function f(x){return (x)=1;}f(2)\",\n         \"{var x$$inline_0=2;\" +\n         \"x$$inline_0=1}\");\n  }\n",
        "begin_line": 554,
        "end_line": 558,
        "comment": "",
        "child_ranges": [
            "(line 555,col 5)-(line 557,col 27)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testNoInlineIfParametersModified3()",
        "snippet": "  public void testNoInlineIfParametersModified3() {\n    // Assignment variant.\n    test(\"function f(x){return x*=2}f(2)\",\n         \"{var x$$inline_0=2;\" +\n         \"x$$inline_0*=2}\");\n  }\n",
        "begin_line": 560,
        "end_line": 565,
        "comment": "",
        "child_ranges": [
            "(line 562,col 5)-(line 564,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testNoInlineIfParametersModified4()",
        "snippet": "  public void testNoInlineIfParametersModified4() {\n    // Assignment in if.\n    test(\"function f(x){return x?(x=2):0}f(2)\",\n         \"{var x$$inline_0=2;\" +\n         \"x$$inline_0?(\" +\n         \"x$$inline_0=2):0}\");\n  }\n",
        "begin_line": 567,
        "end_line": 573,
        "comment": "",
        "child_ranges": [
            "(line 569,col 5)-(line 572,col 30)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testNoInlineIfParametersModified5()",
        "snippet": "  public void testNoInlineIfParametersModified5() {\n    // Assignment in if, multiple params\n    test(\"function f(x,y){return x?(y=2):0}f(2,undefined)\",\n         \"{var y$$inline_1=undefined;2?(\" +\n         \"y$$inline_1=2):0}\");\n  }\n",
        "begin_line": 575,
        "end_line": 580,
        "comment": "",
        "child_ranges": [
            "(line 577,col 5)-(line 579,col 30)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testNoInlineIfParametersModified6()",
        "snippet": "  public void testNoInlineIfParametersModified6() {\n    test(\"function f(x,y){return x?(y=2):0}f(2)\",\n         \"{var y$$inline_1=void 0;2?(\" +\n         \"y$$inline_1=2):0}\");\n  }\n",
        "begin_line": 582,
        "end_line": 586,
        "comment": "",
        "child_ranges": [
            "(line 583,col 5)-(line 585,col 30)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testNoInlineIfParametersModified7()",
        "snippet": "  public void testNoInlineIfParametersModified7() {\n    // Increment\n    test(\"function f(a){return++a<++a}f(1)\",\n         \"{var a$$inline_0=1;\" +\n         \"++a$$inline_0<\" +\n         \"++a$$inline_0}\");\n  }\n",
        "begin_line": 588,
        "end_line": 594,
        "comment": "",
        "child_ranges": [
            "(line 590,col 5)-(line 593,col 27)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testNoInlineIfParametersModified8()",
        "snippet": "  public void testNoInlineIfParametersModified8() {\n    // OK, object parameter modified.\n    test(\"function f(a){return a.x=2}f(o)\", \"o.x=2\");\n  }\n",
        "begin_line": 596,
        "end_line": 599,
        "comment": "",
        "child_ranges": [
            "(line 598,col 5)-(line 598,col 53)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testNoInlineIfParametersModified9()",
        "snippet": "  public void testNoInlineIfParametersModified9() {\n    // OK, array parameter modified.\n    test(\"function f(a){return a[2]=2}f(o)\", \"o[2]=2\");\n  }\n",
        "begin_line": 601,
        "end_line": 604,
        "comment": "",
        "child_ranges": [
            "(line 603,col 5)-(line 603,col 55)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testInlineNeverPartialSubtitution1()",
        "snippet": "  public void testInlineNeverPartialSubtitution1() {\n    test(\"function f(z){return x.y.z;}f(1)\",\n         \"x.y.z\");\n  }\n",
        "begin_line": 606,
        "end_line": 609,
        "comment": "",
        "child_ranges": [
            "(line 607,col 5)-(line 608,col 18)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testInlineNeverPartialSubtitution2()",
        "snippet": "  public void testInlineNeverPartialSubtitution2() {\n    test(\"function f(z){return x.y[z];}f(a)\",\n         \"x.y[a]\");\n  }\n",
        "begin_line": 611,
        "end_line": 614,
        "comment": "",
        "child_ranges": [
            "(line 612,col 5)-(line 613,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testInlineNeverMutateConstants()",
        "snippet": "  public void testInlineNeverMutateConstants() {\n    test(\"function f(x){return x=1}f(undefined)\",\n         \"{var x$$inline_0=undefined;\" +\n         \"x$$inline_0=1}\");\n  }\n",
        "begin_line": 616,
        "end_line": 620,
        "comment": "",
        "child_ranges": [
            "(line 617,col 5)-(line 619,col 27)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testInlineNeverOverrideNewValues()",
        "snippet": "  public void testInlineNeverOverrideNewValues() {\n    test(\"function f(a){return++a<++a}f(1)\",\n        \"{var a$$inline_0=1;\" +\n        \"++a$$inline_0<++a$$inline_0}\");\n  }\n",
        "begin_line": 622,
        "end_line": 626,
        "comment": "",
        "child_ranges": [
            "(line 623,col 5)-(line 625,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testInlineMutableArgsReferencedOnce()",
        "snippet": "  public void testInlineMutableArgsReferencedOnce() {\n    test(\"function foo(x){return x;}foo([])\", \"[]\");\n  }\n",
        "begin_line": 628,
        "end_line": 630,
        "comment": "",
        "child_ranges": [
            "(line 629,col 5)-(line 629,col 52)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testNoInlineMutableArgs1()",
        "snippet": "  public void testNoInlineMutableArgs1() {\n    allowBlockInlining = false;\n    testSame(\"function foo(x){return x+x} foo([])\");\n  }\n",
        "begin_line": 632,
        "end_line": 635,
        "comment": "",
        "child_ranges": [
            "(line 633,col 5)-(line 633,col 31)",
            "(line 634,col 5)-(line 634,col 52)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testNoInlineMutableArgs2()",
        "snippet": "  public void testNoInlineMutableArgs2() {\n    allowBlockInlining = false;\n    testSame(\"function foo(x){return x+x} foo(new Date)\");\n  }\n",
        "begin_line": 637,
        "end_line": 640,
        "comment": "",
        "child_ranges": [
            "(line 638,col 5)-(line 638,col 31)",
            "(line 639,col 5)-(line 639,col 58)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testNoInlineMutableArgs3()",
        "snippet": "  public void testNoInlineMutableArgs3() {\n    allowBlockInlining = false;\n    testSame(\"function foo(x){return x+x} foo(true&&new Date)\");\n  }\n",
        "begin_line": 642,
        "end_line": 645,
        "comment": "",
        "child_ranges": [
            "(line 643,col 5)-(line 643,col 31)",
            "(line 644,col 5)-(line 644,col 64)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testNoInlineMutableArgs4()",
        "snippet": "  public void testNoInlineMutableArgs4() {\n    allowBlockInlining = false;\n    testSame(\"function foo(x){return x+x} foo({})\");\n  }\n",
        "begin_line": 647,
        "end_line": 650,
        "comment": "",
        "child_ranges": [
            "(line 648,col 5)-(line 648,col 31)",
            "(line 649,col 5)-(line 649,col 52)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testInlineBlockMutableArgs1()",
        "snippet": "  public void testInlineBlockMutableArgs1() {\n    test(\"function foo(x){x+x}foo([])\",\n         \"{var x$$inline_0=[];\" +\n         \"x$$inline_0+x$$inline_0}\");\n  }\n",
        "begin_line": 652,
        "end_line": 656,
        "comment": "",
        "child_ranges": [
            "(line 653,col 5)-(line 655,col 37)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testInlineBlockMutableArgs2()",
        "snippet": "  public void testInlineBlockMutableArgs2() {\n    test(\"function foo(x){x+x}foo(new Date)\",\n         \"{var x$$inline_0=new Date;\" +\n         \"x$$inline_0+x$$inline_0}\");\n  }\n",
        "begin_line": 658,
        "end_line": 662,
        "comment": "",
        "child_ranges": [
            "(line 659,col 5)-(line 661,col 37)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testInlineBlockMutableArgs3()",
        "snippet": "  public void testInlineBlockMutableArgs3() {\n    test(\"function foo(x){x+x}foo(true&&new Date)\",\n         \"{var x$$inline_0=true&&new Date;\" +\n         \"x$$inline_0+x$$inline_0}\");\n  }\n",
        "begin_line": 664,
        "end_line": 668,
        "comment": "",
        "child_ranges": [
            "(line 665,col 5)-(line 667,col 37)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testInlineBlockMutableArgs4()",
        "snippet": "  public void testInlineBlockMutableArgs4() {\n    test(\"function foo(x){x+x}foo({})\",\n         \"{var x$$inline_0={};\" +\n         \"x$$inline_0+x$$inline_0}\");\n  }\n",
        "begin_line": 670,
        "end_line": 674,
        "comment": "",
        "child_ranges": [
            "(line 671,col 5)-(line 673,col 37)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testShadowVariables1()",
        "snippet": "  public void testShadowVariables1() {\n    // The Normalize pass now guarantees that that globals are never shadowed\n    // by locals.\n\n    // \"foo\" is inlined here as its parameter \"a\" doesn't conflict.\n    // \"bar\" is assigned a new name.\n    test(\"var a=0;\" +\n         \"function foo(a){return 3+a}\" +\n         \"function bar(){var a=foo(4)}\" +\n         \"bar();\",\n\n         \"var a=0;\" +\n         \"{var a$$inline_0=3+4}\");\n  }\n",
        "begin_line": 676,
        "end_line": 689,
        "comment": "",
        "child_ranges": [
            "(line 682,col 5)-(line 688,col 34)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testShadowVariables2()",
        "snippet": "  public void testShadowVariables2() {\n    // \"foo\" is inlined here as its parameter \"a\" doesn't conflict.\n    // \"bar\" is inlined as its uses global \"a\", and does introduce any new\n    // globals.\n    test(\"var a=0;\" +\n        \"function foo(a){return 3+a}\" +\n        \"function bar(){a=foo(4)}\" +\n        \"bar()\",\n\n        \"var a=0;\" +\n        \"{a=3+4}\");\n  }\n",
        "begin_line": 691,
        "end_line": 702,
        "comment": "",
        "child_ranges": [
            "(line 695,col 5)-(line 701,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testShadowVariables3()",
        "snippet": "  public void testShadowVariables3() {\n    // \"foo\" is inlined into exported \"_bar\", aliasing foo's \"a\".\n    test(\"var a=0;\" +\n        \"function foo(){var a=2;return 3+a}\" +\n        \"function _bar(){a=foo()}\",\n\n        \"var a=0;\" +\n        \"function _bar(){{var a$$inline_0=2;\" +\n        \"a=3+a$$inline_0}}\");\n  }\n",
        "begin_line": 704,
        "end_line": 713,
        "comment": "",
        "child_ranges": [
            "(line 706,col 5)-(line 712,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testShadowVariables4()",
        "snippet": "  public void testShadowVariables4() {\n    // \"foo\" is inlined.\n    // block access to global \"a\".\n    test(\"var a=0;\" +\n         \"function foo(){return 3+a}\" +\n         \"function _bar(a){a=foo(4)+a}\",\n\n         \"var a=0;function _bar(a$$1){\" +\n         \"a$$1=\" +\n         \"3+a+a$$1}\");\n  }\n",
        "begin_line": 715,
        "end_line": 725,
        "comment": "",
        "child_ranges": [
            "(line 718,col 5)-(line 724,col 22)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testShadowVariables5()",
        "snippet": "  public void testShadowVariables5() {\n    // Can't yet inline mulitple statements functions into expressions\n    // (though some are possible using the COMMA operator).\n    allowBlockInlining = false;\n    testSame(\"var a=0;\" +\n        \"function foo(){var a=4;return 3+a}\" +\n        \"function _bar(a){a=foo(4)+a}\");\n  }\n",
        "begin_line": 727,
        "end_line": 734,
        "comment": "",
        "child_ranges": [
            "(line 730,col 5)-(line 730,col 31)",
            "(line 731,col 5)-(line 733,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testShadowVariables6()",
        "snippet": "  public void testShadowVariables6() {\n    test(\"var a=0;\" +\n        \"function foo(){var a=4;return 3+a}\" +\n        \"function _bar(a){a=foo(4)}\",\n\n        \"var a=0;function _bar(a$$2){{\" +\n        \"var a$$inline_0=4;\" +\n        \"a$$2=3+a$$inline_0}}\");\n  }\n",
        "begin_line": 736,
        "end_line": 744,
        "comment": "",
        "child_ranges": [
            "(line 737,col 5)-(line 743,col 32)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testShadowVariables7()",
        "snippet": "  public void testShadowVariables7() {\n    assumeMinimumCapture = false;\n    test(\"var a=3;\" +\n         \"function foo(){return a}\" +\n         \"(function(){var a=5;(function(){foo()})()})()\",\n         \"var a=3;\" +\n         \"{var a$$inline_0=5;{a}}\"\n         );\n\n    assumeMinimumCapture = true;\n    test(\"var a=3;\" +\n         \"function foo(){return a}\" +\n         \"(function(){var a=5;(function(){foo()})()})()\",\n         \"var a=3;\" +\n         \"{var a$$inline_1=5;{a}}\"\n         );\n  }\n",
        "begin_line": 746,
        "end_line": 762,
        "comment": "",
        "child_ranges": [
            "(line 747,col 5)-(line 747,col 33)",
            "(line 748,col 5)-(line 753,col 11)",
            "(line 755,col 5)-(line 755,col 32)",
            "(line 756,col 5)-(line 761,col 11)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testShadowVariables8()",
        "snippet": "  public void testShadowVariables8() {\n    // this should be inlined\n    test(\"var a=0;\" +\n         \"function foo(){return 3}\" +\n         \"function _bar(){var a=foo()}\",\n\n         \"var a=0;\" +\n         \"function _bar(){var a=3}\");\n  }\n",
        "begin_line": 764,
        "end_line": 772,
        "comment": "",
        "child_ranges": [
            "(line 766,col 5)-(line 771,col 37)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testShadowVariables9()",
        "snippet": "  public void testShadowVariables9() {\n    // this should be inlined too [even if the global is not declared]\n    test(\"function foo(){return 3}\" +\n         \"function _bar(){var a=foo()}\",\n\n         \"function _bar(){var a=3}\");\n  }\n",
        "begin_line": 774,
        "end_line": 780,
        "comment": "",
        "child_ranges": [
            "(line 776,col 5)-(line 779,col 37)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testShadowVariables10()",
        "snippet": "  public void testShadowVariables10() {\n    // callee var must be renamed.\n    test(\"var a;function foo(){return a}\" +\n         \"function _bar(){var a=foo()}\",\n         \"var a;function _bar(){var a$$1=a}\");\n  }\n",
        "begin_line": 782,
        "end_line": 787,
        "comment": "",
        "child_ranges": [
            "(line 784,col 5)-(line 786,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testShadowVariables11()",
        "snippet": "  public void testShadowVariables11() {\n    // The call has a local variable\n    // which collides with the function being inlined\n    test(\"var a=0;var b=1;\" +\n         \"function foo(){return a+a}\" +\n         \"function _bar(){var a=foo();alert(a)}\",\n         \"var a=0;var b=1;\" +\n         \"function _bar(){var a$$1=a+a;\" +\n         \"alert(a$$1)}\"\n         );\n  }\n",
        "begin_line": 789,
        "end_line": 799,
        "comment": "",
        "child_ranges": [
            "(line 792,col 5)-(line 798,col 11)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testShadowVariables12()",
        "snippet": "  public void testShadowVariables12() {\n    // 2 globals colliding\n    test(\"var a=0;var b=1;\" +\n         \"function foo(){return a+b}\" +\n         \"function _bar(){var a=foo(),b;alert(a)}\",\n         \"var a=0;var b=1;\" +\n         \"function _bar(){var a$$1=a+b,\" +\n         \"b$$1;\" +\n         \"alert(a$$1)}\");\n  }\n",
        "begin_line": 801,
        "end_line": 810,
        "comment": "",
        "child_ranges": [
            "(line 803,col 5)-(line 809,col 25)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testShadowVariables13()",
        "snippet": "  public void testShadowVariables13() {\n    // The only change is to remove the collision\n    test(\"var a=0;var b=1;\" +\n         \"function foo(){return a+a}\" +\n         \"function _bar(){var c=foo();alert(c)}\",\n\n         \"var a=0;var b=1;\" +\n         \"function _bar(){var c=a+a;alert(c)}\");\n  }\n",
        "begin_line": 812,
        "end_line": 820,
        "comment": "",
        "child_ranges": [
            "(line 814,col 5)-(line 819,col 48)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testShadowVariables14()",
        "snippet": "  public void testShadowVariables14() {\n    // There is a colision even though it is not read.\n    test(\"var a=0;var b=1;\" +\n         \"function foo(){return a+b}\" +\n         \"function _bar(){var c=foo(),b;alert(c)}\",\n         \"var a=0;var b=1;\" +\n         \"function _bar(){var c=a+b,\" +\n         \"b$$1;alert(c)}\");\n  }\n",
        "begin_line": 822,
        "end_line": 830,
        "comment": "",
        "child_ranges": [
            "(line 824,col 5)-(line 829,col 27)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testShadowVariables15()",
        "snippet": "  public void testShadowVariables15() {\n    // Both parent and child reference a global\n    test(\"var a=0;var b=1;\" +\n         \"function foo(){return a+a}\" +\n         \"function _bar(){var c=foo();alert(c+a)}\",\n\n         \"var a=0;var b=1;\" +\n         \"function _bar(){var c=a+a;alert(c+a)}\");\n  }\n",
        "begin_line": 832,
        "end_line": 840,
        "comment": "",
        "child_ranges": [
            "(line 834,col 5)-(line 839,col 50)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testShadowVariables16()",
        "snippet": "  public void testShadowVariables16() {\n    assumeMinimumCapture = false;\n    // Inline functions defined as a child of the CALL node.\n    test(\"var a=3;\" +\n         \"function foo(){return a}\" +\n         \"(function(){var a=5;(function(){foo()})()})()\",\n         \"var a=3;\" +\n         \"{var a$$inline_0=5;{a}}\"\n         );\n\n    assumeMinimumCapture = true;\n    // Inline functions defined as a child of the CALL node.\n    test(\"var a=3;\" +\n         \"function foo(){return a}\" +\n         \"(function(){var a=5;(function(){foo()})()})()\",\n         \"var a=3;\" +\n         \"{var a$$inline_1=5;{a}}\"\n         );\n\n  }\n",
        "begin_line": 842,
        "end_line": 861,
        "comment": "",
        "child_ranges": [
            "(line 843,col 5)-(line 843,col 33)",
            "(line 845,col 5)-(line 850,col 11)",
            "(line 852,col 5)-(line 852,col 32)",
            "(line 854,col 5)-(line 859,col 11)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testShadowVariables17()",
        "snippet": "  public void testShadowVariables17() {\n    test(\"var a=0;\" +\n         \"function bar(){return a+a}\" +\n         \"function foo(){return bar()}\" +\n         \"function _goo(){var a=2;var x=foo();}\",\n\n         \"var a=0;\" +\n         \"function _goo(){var a$$1=2;var x=a+a}\");\n  }\n",
        "begin_line": 863,
        "end_line": 871,
        "comment": "",
        "child_ranges": [
            "(line 864,col 5)-(line 870,col 50)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testShadowVariables18()",
        "snippet": "  public void testShadowVariables18() {\n    test(\"var a=0;\" +\n        \"function bar(){return a+a}\" +\n        \"function foo(){var a=3;return bar()}\" +\n        \"function _goo(){var a=2;var x=foo();}\",\n\n        \"var a=0;\" +\n        \"function _goo(){var a$$2=2;var x;\" +\n        \"{var a$$inline_0=3;x=a+a}}\");\n  }\n",
        "begin_line": 873,
        "end_line": 882,
        "comment": "",
        "child_ranges": [
            "(line 874,col 5)-(line 881,col 38)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testCostBasedInlining1()",
        "snippet": "  public void testCostBasedInlining1() {\n    testSame(\n        \"function foo(a){return a}\" +\n        \"foo=new Function(\\\"return 1\\\");\" +\n        \"foo(1)\");\n  }\n",
        "begin_line": 884,
        "end_line": 889,
        "comment": "",
        "child_ranges": [
            "(line 885,col 5)-(line 888,col 18)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testCostBasedInlining2()",
        "snippet": "  public void testCostBasedInlining2() {\n    // Baseline complexity tests.\n    // Single call, function not removed.\n    test(\n        \"function foo(a){return a}\" +\n        \"var b=foo;\" +\n        \"function _t1(){return foo(1)}\",\n\n        \"function foo(a){return a}\" +\n        \"var b=foo;\" +\n        \"function _t1(){return 1}\");\n  }\n",
        "begin_line": 891,
        "end_line": 902,
        "comment": "",
        "child_ranges": [
            "(line 894,col 5)-(line 901,col 36)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testCostBasedInlining3()",
        "snippet": "  public void testCostBasedInlining3() {\n    // Two calls, function not removed.\n    test(\n        \"function foo(a,b){return a+b}\" +\n        \"var b=foo;\" +\n        \"function _t1(){return foo(1,2)}\" +\n        \"function _t2(){return foo(2,3)}\",\n\n        \"function foo(a,b){return a+b}\" +\n        \"var b=foo;\" +\n        \"function _t1(){return 1+2}\" +\n        \"function _t2(){return 2+3}\");\n  }\n",
        "begin_line": 904,
        "end_line": 916,
        "comment": "",
        "child_ranges": [
            "(line 906,col 5)-(line 915,col 38)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testCostBasedInlining4()",
        "snippet": "  public void testCostBasedInlining4() {\n    // Two calls, function not removed.\n    // Here there isn't enough savings to justify inlining.\n    testSame(\n        \"function foo(a,b){return a+b+a+b}\" +\n        \"var b=foo;\" +\n        \"function _t1(){return foo(1,2)}\" +\n        \"function _t2(){return foo(2,3)}\");\n  }\n",
        "begin_line": 918,
        "end_line": 926,
        "comment": "",
        "child_ranges": [
            "(line 921,col 5)-(line 925,col 43)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testCostBasedInlining5()",
        "snippet": "  public void testCostBasedInlining5() {\n    // Here there is enough savings to justify inlining.\n    test(\n        \"function foo(a,b){return a+b+a+b}\" +\n        \"function _t1(){return foo(1,2)}\" +\n        \"function _t2(){return foo(2,3)}\",\n\n        \"function _t1(){return 1+2+1+2}\" +\n        \"function _t2(){return 2+3+2+3}\");\n  }\n",
        "begin_line": 928,
        "end_line": 937,
        "comment": "",
        "child_ranges": [
            "(line 930,col 5)-(line 936,col 42)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testCostBasedInlining6()",
        "snippet": "  public void testCostBasedInlining6() {\n    // Here we have a threshold test.\n    // Do inline here:\n    test(\n        \"function foo(a,b){return a+b+a+b+a+b+a+b+4+5+6+7+8+9+1+2+3+4+5}\" +\n        \"function _t1(){return foo(1,2)}\" +\n        \"function _t2(){return foo(2,3)}\",\n\n        \"function _t1(){return 1+2+1+2+1+2+1+2+4+5+6+7+8+9+1+2+3+4+5}\" +\n        \"function _t2(){return 2+3+2+3+2+3+2+3+4+5+6+7+8+9+1+2+3+4+5}\");\n  }\n",
        "begin_line": 939,
        "end_line": 949,
        "comment": "",
        "child_ranges": [
            "(line 942,col 5)-(line 948,col 72)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testCostBasedInlining7()",
        "snippet": "  public void testCostBasedInlining7() {\n    // Don't inline here (not enough savings):\n    testSame(\n        \"function foo(a,b){\" +\n        \"    return a+b+a+b+a+b+a+b+4+5+6+7+8+9+1+2+3+4+5+6}\" +\n        \"function _t1(){return foo(1,2)}\" +\n        \"function _t2(){return foo(2,3)}\");\n  }\n",
        "begin_line": 951,
        "end_line": 958,
        "comment": "",
        "child_ranges": [
            "(line 953,col 5)-(line 957,col 43)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testCostBasedInlining8()",
        "snippet": "  public void testCostBasedInlining8() {\n    // Verify mutiple references in the same statement:\n    // Here \"f\" is not known to be removable, as it is a used as parameter\n    // and is not known to be side-effect free.  The first call to f() can\n    // not be inlined on the first pass (as the call to f() as a parameter\n    // prevents this). However, the call to f() would be inlinable, if it\n    // is small enough to be inlined without removing the function declaration.\n    // but it is not in this first test.\n    allowBlockInlining = false;\n    testSame(\"function f(a){return 1 + a + a;}\" +\n        \"var a = f(f(1));\");\n  }\n",
        "begin_line": 960,
        "end_line": 971,
        "comment": "",
        "child_ranges": [
            "(line 968,col 5)-(line 968,col 31)",
            "(line 969,col 5)-(line 970,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testCostBasedInlining9()",
        "snippet": "  public void testCostBasedInlining9() {\n    // Here both direct and block inlining is used.  The call to f as a\n    // parameter is inlined directly, which the call to f with f as a parameter\n    // is inlined using block inlining.\n    test(\"function f(a){return 1 + a + a;}\" +\n         \"var a = f(f(1));\",\n         \"var a;\" +\n         \"{var a$$inline_0=1+1+1;\" +\n         \"a=1+a$$inline_0+a$$inline_0}\");\n  }\n",
        "begin_line": 973,
        "end_line": 982,
        "comment": "",
        "child_ranges": [
            "(line 977,col 5)-(line 981,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testCostBasedInlining10()",
        "snippet": "  public void testCostBasedInlining10() {\n    // But it is small enough here, and on the second iteration, the remaining\n    // call to f() is inlined, as there is no longer a possible side-effect-ing\n    // parameter.\n    allowBlockInlining = false;\n    test(\"function f(a){return a + a;}\" +\n        \"var a = f(f(1));\",\n        \"var a= 1+1+(1+1);\");\n  }\n",
        "begin_line": 984,
        "end_line": 992,
        "comment": "",
        "child_ranges": [
            "(line 988,col 5)-(line 988,col 31)",
            "(line 989,col 5)-(line 991,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testCostBasedInlining11()",
        "snippet": "  public void testCostBasedInlining11() {\n    // With block inlining\n    test(\"function f(a){return a + a;}\" +\n         \"var a = f(f(1))\",\n         \"var a;\" +\n         \"{var a$$inline_0=1+1;\" +\n         \"a=a$$inline_0+a$$inline_0}\");\n  }\n",
        "begin_line": 994,
        "end_line": 1001,
        "comment": "",
        "child_ranges": [
            "(line 996,col 5)-(line 1000,col 39)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testCostBasedInlining12()",
        "snippet": "  public void testCostBasedInlining12() {\n    test(\"function f(a){return 1 + a + a;}\" +\n         \"var a = f(1) + f(2);\",\n\n         \"var a=1+1+1+(1+2+2)\");\n  }\n",
        "begin_line": 1003,
        "end_line": 1008,
        "comment": "",
        "child_ranges": [
            "(line 1004,col 5)-(line 1007,col 32)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testCostBasedInliningComplex1()",
        "snippet": "  public void testCostBasedInliningComplex1() {\n    testSame(\n        \"function foo(a){a()}\" +\n        \"foo=new Function(\\\"return 1\\\");\" +\n        \"foo(1)\");\n  }\n",
        "begin_line": 1010,
        "end_line": 1015,
        "comment": "",
        "child_ranges": [
            "(line 1011,col 5)-(line 1014,col 18)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testCostBasedInliningComplex2()",
        "snippet": "  public void testCostBasedInliningComplex2() {\n    // Baseline complexity tests.\n    // Single call, function not removed.\n    test(\n        \"function foo(a){a()}\" +\n        \"var b=foo;\" +\n        \"function _t1(){foo(x)}\",\n\n        \"function foo(a){a()}\" +\n        \"var b=foo;\" +\n        \"function _t1(){{x()}}\");\n  }\n",
        "begin_line": 1017,
        "end_line": 1028,
        "comment": "",
        "child_ranges": [
            "(line 1020,col 5)-(line 1027,col 33)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testCostBasedInliningComplex3()",
        "snippet": "  public void testCostBasedInliningComplex3() {\n    // Two calls, function not removed.\n    test(\n        \"function foo(a,b){a+b}\" +\n        \"var b=foo;\" +\n        \"function _t1(){foo(1,2)}\" +\n        \"function _t2(){foo(2,3)}\",\n\n        \"function foo(a,b){a+b}\" +\n        \"var b=foo;\" +\n        \"function _t1(){{1+2}}\" +\n        \"function _t2(){{2+3}}\");\n  }\n",
        "begin_line": 1030,
        "end_line": 1042,
        "comment": "",
        "child_ranges": [
            "(line 1032,col 5)-(line 1041,col 33)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testCostBasedInliningComplex4()",
        "snippet": "  public void testCostBasedInliningComplex4() {\n    // Two calls, function not removed.\n    // Here there isn't enough savings to justify inlining.\n    testSame(\n        \"function foo(a,b){a+b+a+b}\" +\n        \"var b=foo;\" +\n        \"function _t1(){foo(1,2)}\" +\n        \"function _t2(){foo(2,3)}\");\n  }\n",
        "begin_line": 1044,
        "end_line": 1052,
        "comment": "",
        "child_ranges": [
            "(line 1047,col 5)-(line 1051,col 36)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testCostBasedInliningComplex5()",
        "snippet": "  public void testCostBasedInliningComplex5() {\n    // Here there is enough savings to justify inlining.\n    test(\n        \"function foo(a,b){a+b+a+b}\" +\n        \"function _t1(){foo(1,2)}\" +\n        \"function _t2(){foo(2,3)}\",\n\n        \"function _t1(){{1+2+1+2}}\" +\n        \"function _t2(){{2+3+2+3}}\");\n  }\n",
        "begin_line": 1054,
        "end_line": 1063,
        "comment": "",
        "child_ranges": [
            "(line 1056,col 5)-(line 1062,col 37)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testCostBasedInliningComplex6()",
        "snippet": "  public void testCostBasedInliningComplex6() {\n    // Here we have a threshold test.\n    // Do inline here:\n    test(\n        \"function foo(a,b){a+b+a+b+a+b+a+b+4+5+6+7+8+9+1}\" +\n        \"function _t1(){foo(1,2)}\" +\n        \"function _t2(){foo(2,3)}\",\n\n        \"function _t1(){{1+2+1+2+1+2+1+2+4+5+6+7+8+9+1}}\" +\n        \"function _t2(){{2+3+2+3+2+3+2+3+4+5+6+7+8+9+1}}\");\n  }\n",
        "begin_line": 1065,
        "end_line": 1075,
        "comment": "",
        "child_ranges": [
            "(line 1068,col 5)-(line 1074,col 59)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testCostBasedInliningComplex7()",
        "snippet": "  public void testCostBasedInliningComplex7() {\n    // Don't inline here (not enough savings):\n    testSame(\n        \"function foo(a,b){a+b+a+b+a+b+a+b+4+5+6+7+8+9+1+2}\" +\n        \"function _t1(){foo(1,2)}\" +\n        \"function _t2(){foo(2,3)}\");\n  }\n",
        "begin_line": 1077,
        "end_line": 1083,
        "comment": "",
        "child_ranges": [
            "(line 1079,col 5)-(line 1082,col 36)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testCostBasedInliningComplex8()",
        "snippet": "  public void testCostBasedInliningComplex8() {\n    // Verify mutiple references in the same statement.\n    testSame(\"function _f(a){1+a+a}\" +\n             \"a=_f(1)+_f(1)\");\n  }\n",
        "begin_line": 1085,
        "end_line": 1089,
        "comment": "",
        "child_ranges": [
            "(line 1087,col 5)-(line 1088,col 30)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testCostBasedInliningComplex9()",
        "snippet": "  public void testCostBasedInliningComplex9() {\n    test(\"function f(a){1 + a + a;}\" +\n         \"f(1);f(2);\",\n         \"{1+1+1}{1+2+2}\");\n  }\n",
        "begin_line": 1091,
        "end_line": 1095,
        "comment": "",
        "child_ranges": [
            "(line 1092,col 5)-(line 1094,col 27)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testDoubleInlining1()",
        "snippet": "  public void testDoubleInlining1() {\n    allowBlockInlining = false;\n    test(\"var foo = function(a) { return getWindow(a); };\" +\n         \"var bar = function(b) { return b; };\" +\n         \"foo(bar(x));\",\n         \"getWindow(x)\");\n  }\n",
        "begin_line": 1097,
        "end_line": 1103,
        "comment": "",
        "child_ranges": [
            "(line 1098,col 5)-(line 1098,col 31)",
            "(line 1099,col 5)-(line 1102,col 25)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testDoubleInlining2()",
        "snippet": "  public void testDoubleInlining2() {\n    test(\"var foo = function(a) { return getWindow(a); };\" +\n         \"var bar = function(b) { return b; };\" +\n         \"foo(bar(x));\",\n         \"{getWindow(x)}\");\n  }\n",
        "begin_line": 1105,
        "end_line": 1110,
        "comment": "",
        "child_ranges": [
            "(line 1106,col 5)-(line 1109,col 27)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testNoInlineOfNonGlobalFunction1()",
        "snippet": "  public void testNoInlineOfNonGlobalFunction1() {\n    test(\"var g;function _f(){function g(){return 0}}\" +\n         \"function _h(){return g()}\",\n         \"var g;function _f(){}\" +\n         \"function _h(){return g()}\");\n  }\n",
        "begin_line": 1112,
        "end_line": 1117,
        "comment": "",
        "child_ranges": [
            "(line 1113,col 5)-(line 1116,col 38)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testNoInlineOfNonGlobalFunction2()",
        "snippet": "  public void testNoInlineOfNonGlobalFunction2() {\n    test(\"var g;function _f(){var g=function(){return 0}}\" +\n         \"function _h(){return g()}\",\n         \"var g;function _f(){}\" +\n         \"function _h(){return g()}\");\n  }\n",
        "begin_line": 1119,
        "end_line": 1124,
        "comment": "",
        "child_ranges": [
            "(line 1120,col 5)-(line 1123,col 38)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testNoInlineOfNonGlobalFunction3()",
        "snippet": "  public void testNoInlineOfNonGlobalFunction3() {\n    test(\"var g;function _f(){var g=function(){return 0}}\" +\n         \"function _h(){return g()}\",\n         \"var g;function _f(){}\" +\n         \"function _h(){return g()}\");\n  }\n",
        "begin_line": 1126,
        "end_line": 1131,
        "comment": "",
        "child_ranges": [
            "(line 1127,col 5)-(line 1130,col 38)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testNoInlineOfNonGlobalFunction4()",
        "snippet": "  public void testNoInlineOfNonGlobalFunction4() {\n    test(\"var g;function _f(){function g(){return 0}}\" +\n         \"function _h(){return g()}\",\n         \"var g;function _f(){}\" +\n         \"function _h(){return g()}\");\n\n  }\n",
        "begin_line": 1133,
        "end_line": 1139,
        "comment": "",
        "child_ranges": [
            "(line 1134,col 5)-(line 1137,col 38)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testNoInlineMaskedFunction()",
        "snippet": "  public void testNoInlineMaskedFunction() {\n    // Normalization makes this test of marginal value.\n    // The unreferenced function is removed.\n    test(\"var g=function(){return 0};\" +\n         \"function _f(g){return g()}\",\n         \"function _f(g$$1){return g$$1()}\");\n  }\n",
        "begin_line": 1141,
        "end_line": 1147,
        "comment": "",
        "child_ranges": [
            "(line 1144,col 5)-(line 1146,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testNoInlineNonFunction()",
        "snippet": "  public void testNoInlineNonFunction() {\n    testSame(\"var g=3;function _f(){return g()}\");\n  }\n",
        "begin_line": 1149,
        "end_line": 1151,
        "comment": "",
        "child_ranges": [
            "(line 1150,col 5)-(line 1150,col 50)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testInlineCall()",
        "snippet": "  public void testInlineCall() {\n    test(\"function f(g) { return g.h(); } f('x');\",\n         \"\\\"x\\\".h()\");\n  }\n",
        "begin_line": 1153,
        "end_line": 1156,
        "comment": "",
        "child_ranges": [
            "(line 1154,col 5)-(line 1155,col 22)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testInlineFunctionWithArgsMismatch1()",
        "snippet": "  public void testInlineFunctionWithArgsMismatch1() {\n    test(\"function f(g) { return g; } f();\",\n         \"void 0\");\n  }\n",
        "begin_line": 1158,
        "end_line": 1161,
        "comment": "",
        "child_ranges": [
            "(line 1159,col 5)-(line 1160,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testInlineFunctionWithArgsMismatch2()",
        "snippet": "  public void testInlineFunctionWithArgsMismatch2() {\n    test(\"function f() { return 0; } f(1);\",\n         \"0\");\n  }\n",
        "begin_line": 1163,
        "end_line": 1166,
        "comment": "",
        "child_ranges": [
            "(line 1164,col 5)-(line 1165,col 14)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testInlineFunctionWithArgsMismatch3()",
        "snippet": "  public void testInlineFunctionWithArgsMismatch3() {\n    test(\"function f(one, two, three) { return one + two + three; } f(1);\",\n         \"1+void 0+void 0\");\n  }\n",
        "begin_line": 1168,
        "end_line": 1171,
        "comment": "",
        "child_ranges": [
            "(line 1169,col 5)-(line 1170,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testInlineFunctionWithArgsMismatch4()",
        "snippet": "  public void testInlineFunctionWithArgsMismatch4() {\n    test(\"function f(one, two, three) { return one + two + three; }\" +\n         \"f(1,2,3,4,5);\",\n         \"1+2+3\");\n  }\n",
        "begin_line": 1173,
        "end_line": 1177,
        "comment": "",
        "child_ranges": [
            "(line 1174,col 5)-(line 1176,col 18)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testArgumentsWithSideEffectsNeverInlined1()",
        "snippet": "  public void testArgumentsWithSideEffectsNeverInlined1() {\n    allowBlockInlining = false;\n    testSame(\"function f(){return 0} f(new goo());\");\n  }\n",
        "begin_line": 1179,
        "end_line": 1182,
        "comment": "",
        "child_ranges": [
            "(line 1180,col 5)-(line 1180,col 31)",
            "(line 1181,col 5)-(line 1181,col 53)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testArgumentsWithSideEffectsNeverInlined2()",
        "snippet": "  public void testArgumentsWithSideEffectsNeverInlined2() {\n    allowBlockInlining = false;\n    testSame(\"function f(g,h){return h+g}f(g(),h());\");\n  }\n",
        "begin_line": 1184,
        "end_line": 1187,
        "comment": "",
        "child_ranges": [
            "(line 1185,col 5)-(line 1185,col 31)",
            "(line 1186,col 5)-(line 1186,col 55)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testOneSideEffectCallDoesNotRuinOthers()",
        "snippet": "  public void testOneSideEffectCallDoesNotRuinOthers() {\n    allowBlockInlining = false;\n    test(\"function f(){return 0}f(new goo());f()\",\n         \"function f(){return 0}f(new goo());0\");\n  }\n",
        "begin_line": 1189,
        "end_line": 1193,
        "comment": "",
        "child_ranges": [
            "(line 1190,col 5)-(line 1190,col 31)",
            "(line 1191,col 5)-(line 1192,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testComplexInlineNoResultNoParamCall1()",
        "snippet": "  public void testComplexInlineNoResultNoParamCall1() {\n    test(\"function f(){a()}f()\",\n         \"{a()}\");\n  }\n",
        "begin_line": 1195,
        "end_line": 1198,
        "comment": "",
        "child_ranges": [
            "(line 1196,col 5)-(line 1197,col 18)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testComplexInlineNoResultNoParamCall2()",
        "snippet": "  public void testComplexInlineNoResultNoParamCall2() {\n   test(\"function f(){if (true){return;}else;} f();\",\n         \"{JSCompiler_inline_label_f_0:{\" +\n             \"if(true)break JSCompiler_inline_label_f_0;else;}}\");\n  }\n",
        "begin_line": 1200,
        "end_line": 1204,
        "comment": "",
        "child_ranges": [
            "(line 1201,col 4)-(line 1203,col 66)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testComplexInlineNoResultNoParamCall3()",
        "snippet": "  public void testComplexInlineNoResultNoParamCall3() {\n    // We now allow vars in the global space.\n    //   Don't inline into vars into global scope.\n    //   testSame(\"function f(){a();b();var z=1+1}f()\");\n\n    // But do inline into functions\n    test(\"function f(){a();b();var z=1+1}function _foo(){f()}\",\n         \"function _foo(){{a();b();var z$$inline_0=1+1}}\");\n\n  }\n",
        "begin_line": 1206,
        "end_line": 1215,
        "comment": "",
        "child_ranges": [
            "(line 1212,col 5)-(line 1213,col 59)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testComplexInlineNoResultWithParamCall1()",
        "snippet": "  public void testComplexInlineNoResultWithParamCall1() {\n    test(\"function f(x){a(x)}f(1)\",\n         \"{a(1)}\");\n  }\n",
        "begin_line": 1217,
        "end_line": 1220,
        "comment": "",
        "child_ranges": [
            "(line 1218,col 5)-(line 1219,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testComplexInlineNoResultWithParamCall2()",
        "snippet": "  public void testComplexInlineNoResultWithParamCall2() {\n    test(\"function f(x,y){a(x)}var b=1;f(1,b)\",\n         \"var b=1;{a(1)}\");\n  }\n",
        "begin_line": 1222,
        "end_line": 1225,
        "comment": "",
        "child_ranges": [
            "(line 1223,col 5)-(line 1224,col 27)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testComplexInlineNoResultWithParamCall3()",
        "snippet": "  public void testComplexInlineNoResultWithParamCall3() {\n    test(\"function f(x,y){if (x) y(); return true;}var b=1;f(1,b)\",\n         \"var b=1;{if(1)b();true}\");\n  }\n",
        "begin_line": 1227,
        "end_line": 1230,
        "comment": "",
        "child_ranges": [
            "(line 1228,col 5)-(line 1229,col 36)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testComplexInline1()",
        "snippet": "  public void testComplexInline1() {\n    test(\"function f(){if (true){return;}else;} z=f();\",\n         \"{JSCompiler_inline_label_f_0:\" +\n         \"{if(true){z=void 0;\" +\n         \"break JSCompiler_inline_label_f_0}else;z=void 0}}\");\n  }\n",
        "begin_line": 1232,
        "end_line": 1237,
        "comment": "",
        "child_ranges": [
            "(line 1233,col 5)-(line 1236,col 62)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testComplexInline2()",
        "snippet": "  public void testComplexInline2() {\n    test(\"function f(){if (true){return;}else return;} z=f();\",\n         \"{JSCompiler_inline_label_f_0:{if(true){z=void 0;\" +\n         \"break JSCompiler_inline_label_f_0}else{z=void 0;\" +\n         \"break JSCompiler_inline_label_f_0}z=void 0}}\");\n  }\n",
        "begin_line": 1239,
        "end_line": 1244,
        "comment": "",
        "child_ranges": [
            "(line 1240,col 5)-(line 1243,col 57)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testComplexInline3()",
        "snippet": "  public void testComplexInline3() {\n    test(\"function f(){if (true){return 1;}else return 0;} z=f();\",\n         \"{JSCompiler_inline_label_f_0:{if(true){z=1;\" +\n         \"break JSCompiler_inline_label_f_0}else{z=0;\" +\n         \"break JSCompiler_inline_label_f_0}z=void 0}}\");\n  }\n",
        "begin_line": 1246,
        "end_line": 1251,
        "comment": "",
        "child_ranges": [
            "(line 1247,col 5)-(line 1250,col 57)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testComplexInline4()",
        "snippet": "  public void testComplexInline4() {\n    test(\"function f(x){a(x)} z = f(1)\",\n         \"{a(1);z=void 0}\");\n  }\n",
        "begin_line": 1253,
        "end_line": 1256,
        "comment": "",
        "child_ranges": [
            "(line 1254,col 5)-(line 1255,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testComplexInline5()",
        "snippet": "  public void testComplexInline5() {\n    test(\"function f(x,y){a(x)}var b=1;z=f(1,b)\",\n         \"var b=1;{a(1);z=void 0}\");\n  }\n",
        "begin_line": 1258,
        "end_line": 1261,
        "comment": "",
        "child_ranges": [
            "(line 1259,col 5)-(line 1260,col 36)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testComplexInline6()",
        "snippet": "  public void testComplexInline6() {\n    test(\"function f(x,y){if (x) y(); return true;}var b=1;z=f(1,b)\",\n         \"var b=1;{if(1)b();z=true}\");\n  }\n",
        "begin_line": 1263,
        "end_line": 1266,
        "comment": "",
        "child_ranges": [
            "(line 1264,col 5)-(line 1265,col 38)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testComplexInline7()",
        "snippet": "  public void testComplexInline7() {\n    test(\"function f(x,y){if (x) return y(); else return true;}\" +\n         \"var b=1;z=f(1,b)\",\n         \"var b=1;{JSCompiler_inline_label_f_2:{if(1){z=b();\" +\n         \"break JSCompiler_inline_label_f_2}else{z=true;\" +\n         \"break JSCompiler_inline_label_f_2}z=void 0}}\");\n  }\n",
        "begin_line": 1268,
        "end_line": 1274,
        "comment": "",
        "child_ranges": [
            "(line 1269,col 5)-(line 1273,col 57)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testComplexInline8()",
        "snippet": "  public void testComplexInline8() {\n    test(\"function f(x){a(x)}var z=f(1)\",\n         \"var z;{a(1);z=void 0}\");\n  }\n",
        "begin_line": 1276,
        "end_line": 1279,
        "comment": "",
        "child_ranges": [
            "(line 1277,col 5)-(line 1278,col 34)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testComplexInlineVars1()",
        "snippet": "  public void testComplexInlineVars1() {\n    test(\"function f(){if (true){return;}else;}var z=f();\",\n         \"var z;{JSCompiler_inline_label_f_0:{\" +\n         \"if(true){z=void 0;break JSCompiler_inline_label_f_0}else;z=void 0}}\");\n  }\n",
        "begin_line": 1281,
        "end_line": 1285,
        "comment": "",
        "child_ranges": [
            "(line 1282,col 5)-(line 1284,col 80)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testComplexInlineVars2()",
        "snippet": "  public void testComplexInlineVars2() {\n    test(\"function f(){if (true){return;}else return;}var z=f();\",\n        \"var z;{JSCompiler_inline_label_f_0:{\" +\n        \"if(true){z=void 0;break JSCompiler_inline_label_f_0\" +\n        \"}else{\" +\n        \"z=void 0;break JSCompiler_inline_label_f_0}z=void 0}}\");\n  }\n",
        "begin_line": 1287,
        "end_line": 1293,
        "comment": "",
        "child_ranges": [
            "(line 1288,col 5)-(line 1292,col 65)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testComplexInlineVars3()",
        "snippet": "  public void testComplexInlineVars3() {\n    test(\"function f(){if (true){return 1;}else return 0;}var z=f();\",\n         \"var z;{JSCompiler_inline_label_f_0:{if(true){\" +\n         \"z=1;break JSCompiler_inline_label_f_0\" +\n         \"}else{\" +\n         \"z=0;break JSCompiler_inline_label_f_0}z=void 0}}\");\n  }\n",
        "begin_line": 1295,
        "end_line": 1301,
        "comment": "",
        "child_ranges": [
            "(line 1296,col 5)-(line 1300,col 61)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testComplexInlineVars4()",
        "snippet": "  public void testComplexInlineVars4() {\n    test(\"function f(x){a(x)}var z = f(1)\",\n         \"var z;{a(1);z=void 0}\");\n  }\n",
        "begin_line": 1303,
        "end_line": 1306,
        "comment": "",
        "child_ranges": [
            "(line 1304,col 5)-(line 1305,col 34)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testComplexInlineVars5()",
        "snippet": "  public void testComplexInlineVars5() {\n    test(\"function f(x,y){a(x)}var b=1;var z=f(1,b)\",\n         \"var b=1;var z;{a(1);z=void 0}\");\n  }\n",
        "begin_line": 1308,
        "end_line": 1311,
        "comment": "",
        "child_ranges": [
            "(line 1309,col 5)-(line 1310,col 42)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testComplexInlineVars6()",
        "snippet": "  public void testComplexInlineVars6() {\n    test(\"function f(x,y){if (x) y(); return true;}var b=1;var z=f(1,b)\",\n         \"var b=1;var z;{if(1)b();z=true}\");\n  }\n",
        "begin_line": 1313,
        "end_line": 1316,
        "comment": "",
        "child_ranges": [
            "(line 1314,col 5)-(line 1315,col 44)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testComplexInlineVars7()",
        "snippet": "  public void testComplexInlineVars7() {\n    test(\"function f(x,y){if (x) return y(); else return true;}\" +\n         \"var b=1;var z=f(1,b)\",\n         \"var b=1;var z;\" +\n         \"{JSCompiler_inline_label_f_2:{if(1){z=b();\" +\n         \"break JSCompiler_inline_label_f_2\" +\n         \"}else{\" +\n         \"z=true;break JSCompiler_inline_label_f_2}z=void 0}}\");\n  }\n",
        "begin_line": 1318,
        "end_line": 1326,
        "comment": "",
        "child_ranges": [
            "(line 1319,col 5)-(line 1325,col 64)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testComplexInlineVars8()",
        "snippet": "  public void testComplexInlineVars8() {\n    test(\"function f(x){a(x)}var x;var z=f(1)\",\n         \"var x;var z;{a(1);z=void 0}\");\n  }\n",
        "begin_line": 1328,
        "end_line": 1331,
        "comment": "",
        "child_ranges": [
            "(line 1329,col 5)-(line 1330,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testComplexInlineVars9()",
        "snippet": "  public void testComplexInlineVars9() {\n    test(\"function f(x){a(x)}var x;var z=f(1);var y\",\n         \"var x;var z;{a(1);z=void 0}var y\");\n  }\n",
        "begin_line": 1333,
        "end_line": 1336,
        "comment": "",
        "child_ranges": [
            "(line 1334,col 5)-(line 1335,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testComplexInlineVars10()",
        "snippet": "  public void testComplexInlineVars10() {\n    test(\"function f(x){a(x)}var x=blah();var z=f(1);var y=blah();\",\n          \"var x=blah();var z;{a(1);z=void 0}var y=blah()\");\n  }\n",
        "begin_line": 1338,
        "end_line": 1341,
        "comment": "",
        "child_ranges": [
            "(line 1339,col 5)-(line 1340,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testComplexInlineVars11()",
        "snippet": "  public void testComplexInlineVars11() {\n    test(\"function f(x){a(x)}var x=blah();var z=f(1);var y;\",\n         \"var x=blah();var z;{a(1);z=void 0}var y\");\n  }\n",
        "begin_line": 1343,
        "end_line": 1346,
        "comment": "",
        "child_ranges": [
            "(line 1344,col 5)-(line 1345,col 52)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testComplexInlineVars12()",
        "snippet": "  public void testComplexInlineVars12() {\n    test(\"function f(x){a(x)}var x;var z=f(1);var y=blah();\",\n         \"var x;var z;{a(1);z=void 0}var y=blah()\");\n  }\n",
        "begin_line": 1348,
        "end_line": 1351,
        "comment": "",
        "child_ranges": [
            "(line 1349,col 5)-(line 1350,col 52)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testComplexInlineInExpresssions1()",
        "snippet": "  public void testComplexInlineInExpresssions1() {\n    test(\"function f(){a()}var z=f()\",\n         \"var z;{a();z=void 0}\");\n  }\n",
        "begin_line": 1353,
        "end_line": 1356,
        "comment": "",
        "child_ranges": [
            "(line 1354,col 5)-(line 1355,col 33)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testComplexInlineInExpresssions2()",
        "snippet": "  public void testComplexInlineInExpresssions2() {\n    test(\"function f(){a()}c=z=f()\",\n         \"{var JSCompiler_inline_result$$0;a();}\" +\n         \"c=z=JSCompiler_inline_result$$0\");\n  }\n",
        "begin_line": 1358,
        "end_line": 1362,
        "comment": "",
        "child_ranges": [
            "(line 1359,col 5)-(line 1361,col 44)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testComplexInlineInExpresssions3()",
        "snippet": "  public void testComplexInlineInExpresssions3() {\n    test(\"function f(){a()}c=z=f()\",\n        \"{var JSCompiler_inline_result$$0;a();}\" +\n        \"c=z=JSCompiler_inline_result$$0\");\n  }\n",
        "begin_line": 1364,
        "end_line": 1368,
        "comment": "",
        "child_ranges": [
            "(line 1365,col 5)-(line 1367,col 43)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testComplexInlineInExpresssions4()",
        "snippet": "  public void testComplexInlineInExpresssions4() {\n    test(\"function f(){a()}if(z=f());\",\n        \"{var JSCompiler_inline_result$$0;a();}\" +\n        \"if(z=JSCompiler_inline_result$$0);\");\n  }\n",
        "begin_line": 1370,
        "end_line": 1374,
        "comment": "",
        "child_ranges": [
            "(line 1371,col 5)-(line 1373,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testComplexInlineInExpresssions5()",
        "snippet": "  public void testComplexInlineInExpresssions5() {\n    test(\"function f(){a()}if(z.y=f());\",\n         \"var JSCompiler_temp_const$$0=z;\" +\n         \"{var JSCompiler_inline_result$$1;a()}\" +\n         \"if(JSCompiler_temp_const$$0.y=JSCompiler_inline_result$$1);\");\n  }\n",
        "begin_line": 1376,
        "end_line": 1381,
        "comment": "",
        "child_ranges": [
            "(line 1377,col 5)-(line 1380,col 72)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testComplexNoInline1()",
        "snippet": "  public void testComplexNoInline1() {\n    testSame(\"function f(){a()}while(z=f())continue\");\n  }\n",
        "begin_line": 1383,
        "end_line": 1385,
        "comment": "",
        "child_ranges": [
            "(line 1384,col 5)-(line 1384,col 54)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testComplexNoInline2()",
        "snippet": "  public void testComplexNoInline2() {\n    testSame(\"function f(){a()}do;while(z=f())\");\n  }\n",
        "begin_line": 1387,
        "end_line": 1389,
        "comment": "",
        "child_ranges": [
            "(line 1388,col 5)-(line 1388,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testComplexSample()",
        "snippet": "  public void testComplexSample() {\n    String result = \"\" +\n      \"{{\" +\n      \"var styleSheet$$inline_2=null;\" +\n      \"if(goog$userAgent$IE)\" +\n        \"styleSheet$$inline_2=0;\" +\n      \"else \" +\n        \"var head$$inline_3=0;\" +\n      \"{\" +\n        \"var element$$inline_4=\" +\n            \"styleSheet$$inline_2;\" +\n        \"var stylesString$$inline_5=a;\" +\n        \"if(goog$userAgent$IE)\" +\n          \"element$$inline_4.cssText=\" +\n              \"stylesString$$inline_5;\" +\n        \"else \" +\n        \"{\" +\n          \"var propToSet$$inline_6=\" +\n              \"\\\"innerText\\\";\" +\n          \"element$$inline_4[\" +\n              \"propToSet$$inline_6]=\" +\n                  \"stylesString$$inline_5\" +\n        \"}\" +\n      \"}\" +\n      \"styleSheet$$inline_2\" +\n      \"}}\";\n\n    test(\"var foo = function(stylesString, opt_element) { \" +\n        \"var styleSheet = null;\" +\n        \"if (goog$userAgent$IE)\" +\n          \"styleSheet = 0;\" +\n        \"else \" +\n          \"var head = 0;\" +\n        \"\" +\n        \"goo$zoo(styleSheet, stylesString);\" +\n        \"return styleSheet;\" +\n     \" };\\n \" +\n\n     \"var goo$zoo = function(element, stylesString) {\" +\n        \"if (goog$userAgent$IE)\" +\n          \"element.cssText = stylesString;\" +\n        \"else {\" +\n          \"var propToSet = 'innerText';\" +\n          \"element[propToSet] = stylesString;\" +\n        \"}\" +\n      \"};\" +\n      \"(function(){foo(a,b);})();\",\n     result);\n  }\n",
        "begin_line": 1391,
        "end_line": 1439,
        "comment": "",
        "child_ranges": [
            "(line 1392,col 5)-(line 1416,col 11)",
            "(line 1418,col 5)-(line 1438,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testComplexSampleNoInline()",
        "snippet": "  public void testComplexSampleNoInline() {\n    // This is the result we would expect if we could handle \"foo = function\"\n    String result =\n    \"foo=function(stylesString,opt_element){\" +\n        \"var styleSheet=null;\" +\n        \"if(goog$userAgent$IE){\" +\n          \"styleSheet=0\" +\n        \"}else{\" +\n          \"var head=0\" +\n         \"}\" +\n         \"{var JSCompiler_inline_element_0=styleSheet;\" +\n         \"var JSCompiler_inline_stylesString_1=stylesString;\" +\n         \"if(goog$userAgent$IE){\" +\n           \"JSCompiler_inline_element_0.cssText=\" +\n           \"JSCompiler_inline_stylesString_1\" +\n         \"}else{\" +\n           \"var propToSet=goog$userAgent$WEBKIT?\\\"innerText\\\":\\\"innerHTML\\\";\" +\n           \"JSCompiler_inline_element_0[propToSet]=\" +\n           \"JSCompiler_inline_stylesString_1\" +\n         \"}}\" +\n        \"return styleSheet\" +\n     \"}\";\n\n    testSame(\n      \"foo=function(stylesString,opt_element){\" +\n        \"var styleSheet=null;\" +\n        \"if(goog$userAgent$IE)\" +\n          \"styleSheet=0;\" +\n        \"else \" +\n          \"var head=0;\" +\n        \"\" +\n        \"goo$zoo(styleSheet,stylesString);\" +\n        \"return styleSheet\" +\n     \"};\" +\n     \"goo$zoo=function(element,stylesString){\" +\n        \"if(goog$userAgent$IE)\" +\n          \"element.cssText=stylesString;\" +\n        \"else{\" +\n          \"var propToSet=goog$userAgent$WEBKIT?\\\"innerText\\\":\\\"innerHTML\\\";\" +\n          \"element[propToSet]=stylesString\" +\n        \"}\" +\n      \"}\");\n  }\n",
        "begin_line": 1441,
        "end_line": 1483,
        "comment": "",
        "child_ranges": [
            "(line 1443,col 5)-(line 1462,col 9)",
            "(line 1464,col 5)-(line 1482,col 11)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testComplexNoVarSub()",
        "snippet": "  public void testComplexNoVarSub() {\n    test(\n        \"function foo(x){\" +\n          \"var x;\" +\n          \"y=x\" +\n        \"}\" +\n        \"foo(1)\",\n\n        \"{y=1}\"\n        );\n   }\n",
        "begin_line": 1486,
        "end_line": 1496,
        "comment": " Test redefinition of parameter name.",
        "child_ranges": [
            "(line 1487,col 5)-(line 1495,col 10)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testComplexFunctionWithFunctionDefinition1()",
        "snippet": "  public void testComplexFunctionWithFunctionDefinition1() {\n    test(\"function f(){call(function(){return})}f()\",\n         \"{call(function(){return})}\");\n  }\n",
        "begin_line": 1498,
        "end_line": 1501,
        "comment": "",
        "child_ranges": [
            "(line 1499,col 5)-(line 1500,col 39)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testComplexFunctionWithFunctionDefinition2()",
        "snippet": "  public void testComplexFunctionWithFunctionDefinition2() {\n    assumeMinimumCapture = false;\n\n    // Don't inline if local names might be captured.\n    testSame(\"function f(a){call(function(){return})}f()\");\n\n    assumeMinimumCapture = true;\n\n    test(\"(function(){\" +\n         \"var f = function(a){call(function(){return a})};f()})()\",\n         \"{{var a$$inline_0=void 0;call(function(){return a$$inline_0})}}\");\n  }\n",
        "begin_line": 1503,
        "end_line": 1514,
        "comment": "",
        "child_ranges": [
            "(line 1504,col 5)-(line 1504,col 33)",
            "(line 1507,col 5)-(line 1507,col 59)",
            "(line 1509,col 5)-(line 1509,col 32)",
            "(line 1511,col 5)-(line 1513,col 76)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testComplexFunctionWithFunctionDefinition2a()",
        "snippet": "  public void testComplexFunctionWithFunctionDefinition2a() {\n    assumeMinimumCapture = false;\n\n    // Don't inline if local names might be captured.\n    testSame(\"(function(){\" +\n        \"var f = function(a){call(function(){return a})};f()})()\");\n\n    assumeMinimumCapture = true;\n\n    test(\"(function(){\" +\n         \"var f = function(a){call(function(){return a})};f()})()\",\n         \"{{var a$$inline_0=void 0;call(function(){return a$$inline_0})}}\");\n  }\n",
        "begin_line": 1516,
        "end_line": 1528,
        "comment": "",
        "child_ranges": [
            "(line 1517,col 5)-(line 1517,col 33)",
            "(line 1520,col 5)-(line 1521,col 67)",
            "(line 1523,col 5)-(line 1523,col 32)",
            "(line 1525,col 5)-(line 1527,col 76)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testComplexFunctionWithFunctionDefinition3()",
        "snippet": "  public void testComplexFunctionWithFunctionDefinition3() {\n    assumeMinimumCapture = false;\n\n    // Don't inline if local names might need to be captured.\n    testSame(\"function f(){var a; call(function(){return a})}f()\");\n\n    assumeMinimumCapture = true;\n\n    test(\"function f(){var a; call(function(){return a})}f()\",\n         \"{var a$$inline_0;call(function(){return a$$inline_0})}\");\n\n  }\n",
        "begin_line": 1530,
        "end_line": 1541,
        "comment": "",
        "child_ranges": [
            "(line 1531,col 5)-(line 1531,col 33)",
            "(line 1534,col 5)-(line 1534,col 67)",
            "(line 1536,col 5)-(line 1536,col 32)",
            "(line 1538,col 5)-(line 1539,col 67)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testDecomposePlusEquals()",
        "snippet": "  public void testDecomposePlusEquals() {\n    test(\"function f(){a=1;return 1} var x = 1; x += f()\",\n        \"var x = 1;\" +\n        \"var JSCompiler_temp_const$$0 = x;\" +\n        \"{var JSCompiler_inline_result$$1; a=1;\" +\n        \" JSCompiler_inline_result$$1=1}\" +\n        \"x = JSCompiler_temp_const$$0 + JSCompiler_inline_result$$1;\");\n  }\n",
        "begin_line": 1543,
        "end_line": 1550,
        "comment": "",
        "child_ranges": [
            "(line 1544,col 5)-(line 1549,col 71)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testDecomposeFunctionExpressionInCall()",
        "snippet": "  public void testDecomposeFunctionExpressionInCall() {\n    test(\n        \"(function(map){descriptions_=map})(\\n\" +\n           \"function(){\\n\" +\n              \"var ret={};\\n\" +\n              \"ret[ONE]='a';\\n\" +\n              \"ret[TWO]='b';\\n\" +\n              \"return ret\\n\" +\n           \"}()\\n\" +\n        \");\",\n        \"{\" +\n        \"var JSCompiler_inline_result$$0;\" +\n        \"var ret$$inline_1={};\\n\" +\n        \"ret$$inline_1[ONE]='a';\\n\" +\n        \"ret$$inline_1[TWO]='b';\\n\" +\n        \"JSCompiler_inline_result$$0 = ret$$inline_1;\\n\" +\n        \"}\" +\n        \"{\" +\n        \"descriptions_=JSCompiler_inline_result$$0;\" +\n        \"}\"\n        );\n  }\n",
        "begin_line": 1552,
        "end_line": 1573,
        "comment": "",
        "child_ranges": [
            "(line 1553,col 5)-(line 1572,col 10)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testInlineConstructor1()",
        "snippet": "  public void testInlineConstructor1() {\n    test(\"function f() {} function _g() {f.call(this)}\",\n         \"function _g() {void 0}\");\n  }\n",
        "begin_line": 1575,
        "end_line": 1578,
        "comment": "",
        "child_ranges": [
            "(line 1576,col 5)-(line 1577,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testInlineConstructor2()",
        "snippet": "  public void testInlineConstructor2() {\n    test(\"function f() {} f.prototype.a = 0; function _g() {f.call(this)}\",\n         \"function f() {} f.prototype.a = 0; function _g() {void 0}\");\n  }\n",
        "begin_line": 1580,
        "end_line": 1583,
        "comment": "",
        "child_ranges": [
            "(line 1581,col 5)-(line 1582,col 70)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testInlineConstructor3()",
        "snippet": "  public void testInlineConstructor3() {\n    test(\"function f() {x.call(this)} f.prototype.a = 0;\" +\n         \"function _g() {f.call(this)}\",\n         \"function f() {x.call(this)} f.prototype.a = 0;\" +\n         \"function _g() {{x.call(this)}}\");\n  }\n",
        "begin_line": 1585,
        "end_line": 1590,
        "comment": "",
        "child_ranges": [
            "(line 1586,col 5)-(line 1589,col 43)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testInlineConstructor4()",
        "snippet": "  public void testInlineConstructor4() {\n    test(\"function f() {x.call(this)} f.prototype.a = 0;\" +\n         \"function _g() {var t = f.call(this)}\",\n         \"function f() {x.call(this)} f.prototype.a = 0;\" +\n         \"function _g() {var t; {x.call(this); t = void 0}}\");\n  }\n",
        "begin_line": 1592,
        "end_line": 1597,
        "comment": "",
        "child_ranges": [
            "(line 1593,col 5)-(line 1596,col 62)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testFunctionExpressionInlining1()",
        "snippet": "  public void testFunctionExpressionInlining1() {\n    test(\"(function(){})()\",\n         \"void 0\");\n  }\n",
        "begin_line": 1599,
        "end_line": 1602,
        "comment": "",
        "child_ranges": [
            "(line 1600,col 5)-(line 1601,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testFunctionExpressionInlining2()",
        "snippet": "  public void testFunctionExpressionInlining2() {\n    test(\"(function(){foo()})()\",\n         \"{foo()}\");\n  }\n",
        "begin_line": 1604,
        "end_line": 1607,
        "comment": "",
        "child_ranges": [
            "(line 1605,col 5)-(line 1606,col 20)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testFunctionExpressionInlining3()",
        "snippet": "  public void testFunctionExpressionInlining3() {\n    test(\"var a = (function(){return foo()})()\",\n         \"var a = foo()\");\n  }\n",
        "begin_line": 1609,
        "end_line": 1612,
        "comment": "",
        "child_ranges": [
            "(line 1610,col 5)-(line 1611,col 26)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testFunctionExpressionInlining4()",
        "snippet": "  public void testFunctionExpressionInlining4() {\n    test(\"var a; a = 1 + (function(){return foo()})()\",\n         \"var a; a = 1 + foo()\");\n  }\n",
        "begin_line": 1614,
        "end_line": 1617,
        "comment": "",
        "child_ranges": [
            "(line 1615,col 5)-(line 1616,col 33)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testFunctionExpressionCallInlining1()",
        "snippet": "  public void testFunctionExpressionCallInlining1() {\n    test(\"(function(){}).call(this)\",\n         \"void 0\");\n  }\n",
        "begin_line": 1619,
        "end_line": 1622,
        "comment": "",
        "child_ranges": [
            "(line 1620,col 5)-(line 1621,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testFunctionExpressionCallInlining2()",
        "snippet": "  public void testFunctionExpressionCallInlining2() {\n    test(\"(function(){foo(this)}).call(this)\",\n         \"{foo(this)}\");\n  }\n",
        "begin_line": 1624,
        "end_line": 1627,
        "comment": "",
        "child_ranges": [
            "(line 1625,col 5)-(line 1626,col 24)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testFunctionExpressionCallInlining3()",
        "snippet": "  public void testFunctionExpressionCallInlining3() {\n    test(\"var a = (function(){return foo(this)}).call(this)\",\n         \"var a = foo(this)\");\n  }\n",
        "begin_line": 1629,
        "end_line": 1632,
        "comment": "",
        "child_ranges": [
            "(line 1630,col 5)-(line 1631,col 30)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testFunctionExpressionCallInlining4()",
        "snippet": "  public void testFunctionExpressionCallInlining4() {\n    test(\"var a; a = 1 + (function(){return foo(this)}).call(this)\",\n         \"var a; a = 1 + foo(this)\");\n  }\n",
        "begin_line": 1634,
        "end_line": 1637,
        "comment": "",
        "child_ranges": [
            "(line 1635,col 5)-(line 1636,col 37)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testFunctionExpressionCallInlining5()",
        "snippet": "  public void testFunctionExpressionCallInlining5() {\n    test(\"a:(function(){return foo()})()\",\n         \"a:foo()\");\n  }\n",
        "begin_line": 1639,
        "end_line": 1642,
        "comment": "",
        "child_ranges": [
            "(line 1640,col 5)-(line 1641,col 20)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testFunctionExpressionCallInlining6()",
        "snippet": "  public void testFunctionExpressionCallInlining6() {\n    test(\"a:(function(){return foo()}).call(this)\",\n         \"a:foo()\");\n  }\n",
        "begin_line": 1644,
        "end_line": 1647,
        "comment": "",
        "child_ranges": [
            "(line 1645,col 5)-(line 1646,col 20)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testFunctionExpressionCallInlining7()",
        "snippet": "  public void testFunctionExpressionCallInlining7() {\n    test(\"a:(function(){})()\",\n         \"a:void 0\");\n  }\n",
        "begin_line": 1649,
        "end_line": 1652,
        "comment": "",
        "child_ranges": [
            "(line 1650,col 5)-(line 1651,col 21)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testFunctionExpressionCallInlining8()",
        "snippet": "  public void testFunctionExpressionCallInlining8() {\n    test(\"a:(function(){}).call(this)\",\n         \"a:void 0\");\n  }\n",
        "begin_line": 1654,
        "end_line": 1657,
        "comment": "",
        "child_ranges": [
            "(line 1655,col 5)-(line 1656,col 21)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testFunctionExpressionCallInlining9()",
        "snippet": "  public void testFunctionExpressionCallInlining9() {\n    // ... with unused recursive name.\n    test(\"(function foo(){})()\",\n         \"void 0\");\n  }\n",
        "begin_line": 1659,
        "end_line": 1663,
        "comment": "",
        "child_ranges": [
            "(line 1661,col 5)-(line 1662,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testFunctionExpressionCallInlining10()",
        "snippet": "  public void testFunctionExpressionCallInlining10() {\n    // ... with unused recursive name.\n    test(\"(function foo(){}).call(this)\",\n         \"void 0\");\n  }\n",
        "begin_line": 1665,
        "end_line": 1669,
        "comment": "",
        "child_ranges": [
            "(line 1667,col 5)-(line 1668,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testFunctionExpressionCallInlining11a()",
        "snippet": "  public void testFunctionExpressionCallInlining11a() {\n    // Inline functions that return inner functions.\n    test(\"((function(){return function(){foo()}})())();\", \"{foo()}\");\n  }\n",
        "begin_line": 1671,
        "end_line": 1674,
        "comment": "",
        "child_ranges": [
            "(line 1673,col 5)-(line 1673,col 69)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testFunctionExpressionCallInlining11b()",
        "snippet": "  public void testFunctionExpressionCallInlining11b() {\n    assumeMinimumCapture = false;\n    // Can't inline functions that return inner functions and have local names.\n    testSame(\"((function(){var a; return function(){foo()}})())();\");\n\n    assumeMinimumCapture = true;\n    test(\n        \"((function(){var a; return function(){foo()}})())();\",\n\n        \"{var JSCompiler_inline_result$$0;\" +\n        \"var a$$inline_1;\" +\n        \"JSCompiler_inline_result$$0=function(){foo()};}\" +\n        \"JSCompiler_inline_result$$0()\");\n\n  }\n",
        "begin_line": 1676,
        "end_line": 1690,
        "comment": "",
        "child_ranges": [
            "(line 1677,col 5)-(line 1677,col 33)",
            "(line 1679,col 5)-(line 1679,col 69)",
            "(line 1681,col 5)-(line 1681,col 32)",
            "(line 1682,col 5)-(line 1688,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testFunctionExpressionCallInlining11c()",
        "snippet": "  public void testFunctionExpressionCallInlining11c() {\n    // TODO(johnlenz): Can inline, not temps needed.\n    assumeMinimumCapture = false;\n    testSame(\"function _x() {\" +\n         \"  ((function(){return function(){foo()}})())();\" +\n         \"}\");\n\n    assumeMinimumCapture = true;\n    test(\n        \"function _x() {\" +\n        \"  ((function(){return function(){foo()}})())();\" +\n        \"}\",\n        \"function _x() {\" +\n        \"  {foo()}\" +\n        \"}\");\n  }\n",
        "begin_line": 1692,
        "end_line": 1707,
        "comment": "",
        "child_ranges": [
            "(line 1694,col 5)-(line 1694,col 33)",
            "(line 1695,col 5)-(line 1697,col 14)",
            "(line 1699,col 5)-(line 1699,col 32)",
            "(line 1700,col 5)-(line 1706,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testFunctionExpressionCallInlining11d()",
        "snippet": "  public void testFunctionExpressionCallInlining11d() {\n    // TODO(johnlenz): Can inline into a function containing eval, if\n    // no names are introduced.\n    assumeMinimumCapture = false;\n    testSame(\"function _x() {\" +\n         \"  eval();\" +\n         \"  ((function(){return function(){foo()}})())();\" +\n         \"}\");\n\n    assumeMinimumCapture = true;\n    test(\n        \"function _x() {\" +\n        \"  eval();\" +\n        \"  ((function(){return function(){foo()}})())();\" +\n        \"}\",\n        \"function _x() {\" +\n        \"  eval();\" +\n        \"  {foo()}\" +\n        \"}\");\n\n  }\n",
        "begin_line": 1709,
        "end_line": 1729,
        "comment": "",
        "child_ranges": [
            "(line 1712,col 5)-(line 1712,col 33)",
            "(line 1713,col 5)-(line 1716,col 14)",
            "(line 1718,col 5)-(line 1718,col 32)",
            "(line 1719,col 5)-(line 1727,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testFunctionExpressionCallInlining11e()",
        "snippet": "  public void testFunctionExpressionCallInlining11e() {\n    // No, don't inline into a function containing eval,\n    // if temps are introduced.\n    assumeMinimumCapture = false;\n    testSame(\"function _x() {\" +\n         \"  eval();\" +\n         \"  ((function(a){return function(){foo()}})())();\" +\n         \"}\");\n\n    assumeMinimumCapture = true;\n    test(\"function _x() {\" +\n        \"  eval();\" +\n        \"  ((function(a){return function(){foo()}})())();\" +\n        \"}\",\n        \"function _x() {\" +\n        \"  eval();\" +\n        \"  {foo();}\" +\n        \"}\");\n  }\n",
        "begin_line": 1731,
        "end_line": 1749,
        "comment": "",
        "child_ranges": [
            "(line 1734,col 5)-(line 1734,col 33)",
            "(line 1735,col 5)-(line 1738,col 14)",
            "(line 1740,col 5)-(line 1740,col 32)",
            "(line 1741,col 5)-(line 1748,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testFunctionExpressionCallInlining12()",
        "snippet": "  public void testFunctionExpressionCallInlining12() {\n    // Can't inline functions that recurse.\n    testSame(\"(function foo(){foo()})()\");\n  }\n",
        "begin_line": 1751,
        "end_line": 1754,
        "comment": "",
        "child_ranges": [
            "(line 1753,col 5)-(line 1753,col 42)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testFunctionExpressionOmega()",
        "snippet": "  public void testFunctionExpressionOmega() {\n    // ... with unused recursive name.\n    test(\"(function (f){f(f)})(function(f){f(f)})\",\n         \"{var f$$inline_0=function(f$$1){f$$1(f$$1)};\" +\n          \"{{f$$inline_0(f$$inline_0)}}}\");\n  }\n",
        "begin_line": 1756,
        "end_line": 1761,
        "comment": "",
        "child_ranges": [
            "(line 1758,col 5)-(line 1760,col 43)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testLocalFunctionInlining1()",
        "snippet": "  public void testLocalFunctionInlining1() {\n    test(\"function _f(){ function g() {} g() }\",\n         \"function _f(){ void 0 }\");\n  }\n",
        "begin_line": 1763,
        "end_line": 1766,
        "comment": "",
        "child_ranges": [
            "(line 1764,col 5)-(line 1765,col 36)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testLocalFunctionInlining2()",
        "snippet": "  public void testLocalFunctionInlining2() {\n    test(\"function _f(){ function g() {foo(); bar();} g() }\",\n         \"function _f(){ {foo(); bar();} }\");\n  }\n",
        "begin_line": 1768,
        "end_line": 1771,
        "comment": "",
        "child_ranges": [
            "(line 1769,col 5)-(line 1770,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testLocalFunctionInlining3()",
        "snippet": "  public void testLocalFunctionInlining3() {\n    test(\"function _f(){ function g() {foo(); bar();} g() }\",\n         \"function _f(){ {foo(); bar();} }\");\n  }\n",
        "begin_line": 1773,
        "end_line": 1776,
        "comment": "",
        "child_ranges": [
            "(line 1774,col 5)-(line 1775,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testLocalFunctionInlining4()",
        "snippet": "  public void testLocalFunctionInlining4() {\n    test(\"function _f(){ function g() {return 1} return g() }\",\n         \"function _f(){ return 1 }\");\n  }\n",
        "begin_line": 1778,
        "end_line": 1781,
        "comment": "",
        "child_ranges": [
            "(line 1779,col 5)-(line 1780,col 38)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testLocalFunctionInlining5()",
        "snippet": "  public void testLocalFunctionInlining5() {\n    testSame(\"function _f(){ function g() {this;} g() }\");\n  }\n",
        "begin_line": 1783,
        "end_line": 1785,
        "comment": "",
        "child_ranges": [
            "(line 1784,col 5)-(line 1784,col 58)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testLocalFunctionInlining6()",
        "snippet": "  public void testLocalFunctionInlining6() {\n    testSame(\"function _f(){ function g() {this;} return g; }\");\n  }\n",
        "begin_line": 1787,
        "end_line": 1789,
        "comment": "",
        "child_ranges": [
            "(line 1788,col 5)-(line 1788,col 64)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testLocalFunctionInliningOnly1()",
        "snippet": "  public void testLocalFunctionInliningOnly1() {\n    this.allowGlobalFunctionInlining = true;\n    test(\"function f(){} f()\", \"void 0;\");\n    this.allowGlobalFunctionInlining = false;\n    testSame(\"function f(){} f()\");\n  }\n",
        "begin_line": 1791,
        "end_line": 1796,
        "comment": "",
        "child_ranges": [
            "(line 1792,col 5)-(line 1792,col 44)",
            "(line 1793,col 5)-(line 1793,col 42)",
            "(line 1794,col 5)-(line 1794,col 45)",
            "(line 1795,col 5)-(line 1795,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testLocalFunctionInliningOnly2()",
        "snippet": "  public void testLocalFunctionInliningOnly2() {\n    this.allowGlobalFunctionInlining = false;\n    testSame(\"function f(){} f()\");\n\n    test(\"function f(){ function g() {return 1} return g() }; f();\",\n         \"function f(){ return 1 }; f();\");\n  }\n",
        "begin_line": 1798,
        "end_line": 1804,
        "comment": "",
        "child_ranges": [
            "(line 1799,col 5)-(line 1799,col 45)",
            "(line 1800,col 5)-(line 1800,col 35)",
            "(line 1802,col 5)-(line 1803,col 43)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testLocalFunctionInliningOnly3()",
        "snippet": "  public void testLocalFunctionInliningOnly3() {\n    this.allowGlobalFunctionInlining = false;\n    testSame(\"function f(){} f()\");\n\n    test(\"(function(){ function g() {return 1} return g() })();\",\n         \"(function(){ return 1 })();\");\n  }\n",
        "begin_line": 1806,
        "end_line": 1812,
        "comment": "",
        "child_ranges": [
            "(line 1807,col 5)-(line 1807,col 45)",
            "(line 1808,col 5)-(line 1808,col 35)",
            "(line 1810,col 5)-(line 1811,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testLocalFunctionInliningOnly4()",
        "snippet": "  public void testLocalFunctionInliningOnly4() {\n    this.allowGlobalFunctionInlining = false;\n    testSame(\"function f(){} f()\");\n\n    test(\"(function(){ return (function() {return 1})() })();\",\n         \"(function(){ return 1 })();\");\n  }\n",
        "begin_line": 1814,
        "end_line": 1820,
        "comment": "",
        "child_ranges": [
            "(line 1815,col 5)-(line 1815,col 45)",
            "(line 1816,col 5)-(line 1816,col 35)",
            "(line 1818,col 5)-(line 1819,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testInlineWithThis1()",
        "snippet": "  public void testInlineWithThis1() {\n    assumeStrictThis = false;\n    // If no \"this\" is provided it might need to be coerced to the global\n    // \"this\".\n    testSame(\"function f(){} f.call();\");\n    testSame(\"function f(){this} f.call();\");\n\n    assumeStrictThis = true;\n    // In strict mode, \"this\" is never coerced so we can use the provided value.\n    test(\"function f(){} f.call();\", \"{}\");\n    test(\"function f(){this} f.call();\",\n         \"{void 0;}\");\n  }\n",
        "begin_line": 1822,
        "end_line": 1834,
        "comment": "",
        "child_ranges": [
            "(line 1823,col 5)-(line 1823,col 29)",
            "(line 1826,col 5)-(line 1826,col 41)",
            "(line 1827,col 5)-(line 1827,col 45)",
            "(line 1829,col 5)-(line 1829,col 28)",
            "(line 1831,col 5)-(line 1831,col 43)",
            "(line 1832,col 5)-(line 1833,col 22)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testInlineWithThis2()",
        "snippet": "  public void testInlineWithThis2() {\n    // \"this\" can always be replaced with \"this\"\n    assumeStrictThis = false;\n    test(\"function f(){} f.call(this);\", \"void 0\");\n\n    assumeStrictThis = true;\n    test(\"function f(){} f.call(this);\", \"void 0\");\n  }\n",
        "begin_line": 1836,
        "end_line": 1843,
        "comment": "",
        "child_ranges": [
            "(line 1838,col 5)-(line 1838,col 29)",
            "(line 1839,col 5)-(line 1839,col 51)",
            "(line 1841,col 5)-(line 1841,col 28)",
            "(line 1842,col 5)-(line 1842,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testInlineWithThis3()",
        "snippet": "  public void testInlineWithThis3() {\n    assumeStrictThis = false;\n    // If no \"this\" is provided it might need to be coerced to the global\n    // \"this\".\n    testSame(\"function f(){} f.call([]);\");\n\n    assumeStrictThis = true;\n    // In strict mode, \"this\" is never coerced so we can use the provided value.\n    test(\"function f(){} f.call([]);\", \"{}\");\n  }\n",
        "begin_line": 1845,
        "end_line": 1854,
        "comment": "",
        "child_ranges": [
            "(line 1846,col 5)-(line 1846,col 29)",
            "(line 1849,col 5)-(line 1849,col 43)",
            "(line 1851,col 5)-(line 1851,col 28)",
            "(line 1853,col 5)-(line 1853,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testInlineWithThis4()",
        "snippet": "  public void testInlineWithThis4() {\n    assumeStrictThis = false;\n    // If no \"this\" is provided it might need to be coerced to the global\n    // \"this\".\n    testSame(\"function f(){} f.call(new g);\");\n\n    assumeStrictThis = true;\n    // In strict mode, \"this\" is never coerced so we can use the provided value.\n    test(\"function f(){} f.call(new g);\",\n         \"{var JSCompiler_inline_this_0=new g}\");\n  }\n",
        "begin_line": 1856,
        "end_line": 1866,
        "comment": "",
        "child_ranges": [
            "(line 1857,col 5)-(line 1857,col 29)",
            "(line 1860,col 5)-(line 1860,col 46)",
            "(line 1862,col 5)-(line 1862,col 28)",
            "(line 1864,col 5)-(line 1865,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testInlineWithThis5()",
        "snippet": "  public void testInlineWithThis5() {\n    assumeStrictThis = false;\n    // If no \"this\" is provided it might need to be coerced to the global\n    // \"this\".\n    testSame(\"function f(){} f.call(g());\");\n\n    assumeStrictThis = true;\n    // In strict mode, \"this\" is never coerced so we can use the provided value.\n    test(\"function f(){} f.call(g());\",\n         \"{var JSCompiler_inline_this_0=g()}\");\n  }\n",
        "begin_line": 1868,
        "end_line": 1878,
        "comment": "",
        "child_ranges": [
            "(line 1869,col 5)-(line 1869,col 29)",
            "(line 1872,col 5)-(line 1872,col 44)",
            "(line 1874,col 5)-(line 1874,col 28)",
            "(line 1876,col 5)-(line 1877,col 47)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testInlineWithThis6()",
        "snippet": "  public void testInlineWithThis6() {\n    assumeStrictThis = false;\n    // If no \"this\" is provided it might need to be coerced to the global\n    // \"this\".\n    testSame(\"function f(){this} f.call(new g);\");\n\n    assumeStrictThis = true;\n    // In strict mode, \"this\" is never coerced so we can use the provided value.\n    test(\"function f(){this} f.call(new g);\",\n         \"{var JSCompiler_inline_this_0=new g;JSCompiler_inline_this_0}\");\n  }\n",
        "begin_line": 1880,
        "end_line": 1890,
        "comment": "",
        "child_ranges": [
            "(line 1881,col 5)-(line 1881,col 29)",
            "(line 1884,col 5)-(line 1884,col 50)",
            "(line 1886,col 5)-(line 1886,col 28)",
            "(line 1888,col 5)-(line 1889,col 74)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testInlineWithThis7()",
        "snippet": "  public void testInlineWithThis7() {\n    assumeStrictThis = true;\n    // In strict mode, \"this\" is never coerced so we can use the provided value.\n    test(\"function f(a){a=1;this} f.call();\",\n         \"{var a$$inline_0=void 0; a$$inline_0=1; void 0;}\");\n    test(\"function f(a){a=1;this} f.call(x, x);\",\n         \"{var a$$inline_0=x; a$$inline_0=1; x;}\");\n  }\n",
        "begin_line": 1892,
        "end_line": 1899,
        "comment": "",
        "child_ranges": [
            "(line 1893,col 5)-(line 1893,col 28)",
            "(line 1895,col 5)-(line 1896,col 61)",
            "(line 1897,col 5)-(line 1898,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testFunctionExpressionYCombinator()",
        "snippet": "  public void testFunctionExpressionYCombinator() {\n    assumeMinimumCapture = false;\n    testSame(\n        \"var factorial = ((function(M) {\\n\" +\n        \"      return ((function(f) {\\n\" +\n        \"                 return M(function(arg) {\\n\" +\n        \"                            return (f(f))(arg);\\n\" +\n        \"                            })\\n\" +\n        \"               })\\n\" +\n        \"              (function(f) {\\n\" +\n        \"                 return M(function(arg) {\\n\" +\n        \"                            return (f(f))(arg);\\n\" +\n        \"                           })\\n\" +\n        \"                 }));\\n\" +\n        \"     })\\n\" +\n        \"    (function(f) {\\n\" +\n        \"       return function(n) {\\n\" +\n        \"        if (n === 0)\\n\" +\n        \"          return 1;\\n\" +\n        \"        else\\n\" +\n        \"          return n * f(n - 1);\\n\" +\n        \"       };\\n\" +\n        \"     }));\\n\" +\n        \"\\n\" +\n        \"factorial(5)\\n\");\n\n    assumeMinimumCapture = true;\n    test(\n        \"var factorial = ((function(M) {\\n\" +\n        \"      return ((function(f) {\\n\" +\n        \"                 return M(function(arg) {\\n\" +\n        \"                            return (f(f))(arg);\\n\" +\n        \"                            })\\n\" +\n        \"               })\\n\" +\n        \"              (function(f) {\\n\" +\n        \"                 return M(function(arg) {\\n\" +\n        \"                            return (f(f))(arg);\\n\" +\n        \"                           })\\n\" +\n        \"                 }));\\n\" +\n        \"     })\\n\" +\n        \"    (function(f) {\\n\" +\n        \"       return function(n) {\\n\" +\n        \"        if (n === 0)\\n\" +\n        \"          return 1;\\n\" +\n        \"        else\\n\" +\n        \"          return n * f(n - 1);\\n\" +\n        \"       };\\n\" +\n        \"     }));\\n\" +\n        \"\\n\" +\n        \"factorial(5)\\n\",\n        \"var factorial;\\n\" +\n        \"{\\n\" +\n        \"var M$$inline_4 = function(f$$2) {\\n\" +\n        \"  return function(n){if(n===0)return 1;else return n*f$$2(n-1)}\\n\" +\n        \"};\\n\" +\n        \"{\\n\" +\n        \"var f$$inline_0=function(f$$inline_7){\\n\" +\n        \"  return M$$inline_4(\\n\" +\n        \"    function(arg$$inline_8){\\n\" +\n        \"      return f$$inline_7(f$$inline_7)(arg$$inline_8)\\n\" +\n        \"     })\\n\" +\n        \"};\\n\" +\n        \"factorial=M$$inline_4(\\n\" +\n        \"  function(arg$$inline_1){\\n\" +\n        \"    return f$$inline_0(f$$inline_0)(arg$$inline_1)\\n\" +\n        \"});\\n\" +\n        \"}\\n\" +\n        \"}\" +\n        \"factorial(5)\");\n  }\n",
        "begin_line": 1902,
        "end_line": 1971,
        "comment": " http://en.wikipedia.org/wiki/Fixed_point_combinator#Y_combinator",
        "child_ranges": [
            "(line 1903,col 5)-(line 1903,col 33)",
            "(line 1904,col 5)-(line 1926,col 26)",
            "(line 1928,col 5)-(line 1928,col 32)",
            "(line 1929,col 5)-(line 1970,col 24)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testRenamePropertyFunction()",
        "snippet": "  public void testRenamePropertyFunction() {\n    testSame(\"function JSCompiler_renameProperty(x) {return x} \" +\n             \"JSCompiler_renameProperty('foo')\");\n  }\n",
        "begin_line": 1973,
        "end_line": 1976,
        "comment": "",
        "child_ranges": [
            "(line 1974,col 5)-(line 1975,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testReplacePropertyFunction()",
        "snippet": "  public void testReplacePropertyFunction() {\n    // baseline: an alias doesn't prevents declaration removal, but not\n    // inlining.\n    test(\"function f(x) {return x} \" +\n         \"foo(window, f); f(1)\",\n         \"function f(x) {return x} \" +\n         \"foo(window, f); 1\");\n    // a reference passed to JSCompiler_ObjectPropertyString prevents inlining\n    // as well.\n    testSame(\"function f(x) {return x} \" +\n             \"new JSCompiler_ObjectPropertyString(window, f); f(1)\");\n  }\n",
        "begin_line": 1978,
        "end_line": 1989,
        "comment": "",
        "child_ranges": [
            "(line 1981,col 5)-(line 1984,col 30)",
            "(line 1987,col 5)-(line 1988,col 69)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testInlineWithClosureContainingThis()",
        "snippet": "  public void testInlineWithClosureContainingThis() {\n    test(\"(function (){return f(function(){return this})})();\",\n         \"f(function(){return this})\");\n  }\n",
        "begin_line": 1991,
        "end_line": 1994,
        "comment": "",
        "child_ranges": [
            "(line 1992,col 5)-(line 1993,col 39)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testIssue5159924a()",
        "snippet": "  public void testIssue5159924a() {\n    test(\"function f() { if (x()) return y() }\\n\" +\n         \"while(1){ var m = f() || z() }\",\n         \"for(;1;) {\" +\n         \"  {\" +\n         \"    var JSCompiler_inline_result$$0;\" +\n         \"    JSCompiler_inline_label_f_1: {\" +\n         \"      if(x()) {\" +\n         \"        JSCompiler_inline_result$$0 = y();\" +\n         \"        break JSCompiler_inline_label_f_1\" +\n         \"      }\" +\n         \"      JSCompiler_inline_result$$0 = void 0;\" +\n         \"    }\" +\n         \"  }\" +\n         \"  var m=JSCompiler_inline_result$$0 || z()\" +\n         \"}\");\n  }\n",
        "begin_line": 1996,
        "end_line": 2012,
        "comment": "",
        "child_ranges": [
            "(line 1997,col 5)-(line 2011,col 14)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testIssue5159924b()",
        "snippet": "  public void testIssue5159924b() {\n    test(\"function f() { if (x()) return y() }\\n\" +\n         \"while(1){ var m = f() }\",\n         \"for(;1;){\" +\n         \"  var m;\" +\n         \"  {\" +\n         \"    JSCompiler_inline_label_f_0: { \" +\n         \"      if(x()) {\" +\n         \"        m = y();\" +\n         \"        break JSCompiler_inline_label_f_0\" +\n         \"      }\" +\n         \"      m = void 0\" +\n         \"    }\" +\n         \"  }\" +\n         \"}\");\n  }\n",
        "begin_line": 2014,
        "end_line": 2029,
        "comment": "",
        "child_ranges": [
            "(line 2015,col 5)-(line 2028,col 14)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testInlineObject()",
        "snippet": "  public void testInlineObject() {\n    new StringCompare().testInlineObject();\n  }\n",
        "begin_line": 2031,
        "end_line": 2033,
        "comment": "",
        "child_ranges": [
            "(line 2032,col 5)-(line 2032,col 43)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.StringCompare.StringCompare()",
        "snippet": "    StringCompare() {\n      super(\"\", false);\n      this.enableNormalize();\n      this.enableMarkNoSideEffects();\n    }\n",
        "begin_line": 2038,
        "end_line": 2042,
        "comment": "",
        "child_ranges": [
            "(line 2039,col 7)-(line 2039,col 23)",
            "(line 2040,col 7)-(line 2040,col 29)",
            "(line 2041,col 7)-(line 2041,col 37)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.StringCompare.setUp()",
        "snippet": "    @Override\n    public void setUp() throws Exception {\n      super.setUp();\n      super.enableLineNumberCheck(true);\n      allowGlobalFunctionInlining = true;\n    }\n",
        "begin_line": 2044,
        "end_line": 2049,
        "comment": "",
        "child_ranges": [
            "(line 2046,col 7)-(line 2046,col 20)",
            "(line 2047,col 7)-(line 2047,col 40)",
            "(line 2048,col 7)-(line 2048,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.StringCompare.getProcessor(com.google.javascript.jscomp.Compiler)",
        "snippet": "    @Override\n    protected CompilerPass getProcessor(Compiler compiler) {\n      compiler.resetUniqueNameId();\n      return new InlineFunctions(\n          compiler,\n          compiler.getUniqueNameIdSupplier(),\n          allowGlobalFunctionInlining,\n          true,  // allowLocalFunctionInlining\n          true,  // allowBlockInlining\n          true,  // assumeStrictThis\n          true); // assumeMinimumCapture\n    }\n",
        "begin_line": 2051,
        "end_line": 2062,
        "comment": "",
        "child_ranges": [
            "(line 2053,col 7)-(line 2053,col 35)",
            "(line 2054,col 7)-(line 2061,col 16)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.StringCompare.testInlineObject()",
        "snippet": "    public void testInlineObject() {\n      allowGlobalFunctionInlining = false;\n      // TODO(johnlenz): normalize the AST so an AST comparison can be done.\n      // As is, the expected AST does not match the actual correct result:\n      // The AST matches \"g.a()\" with a FREE_CALL annotation, but this as\n      // expected string would fail as it won't be mark as a free call.\n      // \"(0,g.a)()\" matches the output, but not the resulting AST.\n      test(\"function inner(){function f(){return g.a}(f())()}\",\n           \"function inner(){(0,g.a)()}\");\n    }\n",
        "begin_line": 2064,
        "end_line": 2073,
        "comment": "",
        "child_ranges": [
            "(line 2065,col 7)-(line 2065,col 42)",
            "(line 2071,col 7)-(line 2072,col 42)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testBug4944818()",
        "snippet": "  public void testBug4944818() {\n    test(\n        \"var getDomServices_ = function(self) {\\n\" +\n        \"  if (!self.domServices_) {\\n\" +\n        \"    self.domServices_ = goog$component$DomServices.get(\" +\n        \"        self.appContext_);\\n\" +\n        \"  }\\n\" +\n        \"\\n\" +\n        \"  return self.domServices_;\\n\" +\n        \"};\\n\" +\n        \"\\n\" +\n        \"var getOwnerWin_ = function(self) {\\n\" +\n        \"  return getDomServices_(self).getDomHelper().getWindow();\\n\" +\n        \"};\\n\" +\n        \"\\n\" +\n        \"HangoutStarter.prototype.launchHangout = function() {\\n\" +\n        \"  var self = a.b;\\n\" +\n        \"  var myUrl = new goog.Uri(getOwnerWin_(self).location.href);\\n\" +\n        \"};\",\n        \"HangoutStarter.prototype.launchHangout = function() { \" +\n        \"  var self$$2 = a.b;\" +\n        \"  var JSCompiler_temp_const$$0 = goog.Uri;\" +\n        \"  {\" +\n        \"  var JSCompiler_inline_result$$1;\" +\n        \"  var self$$inline_2 = self$$2;\" +\n        \"  if (!self$$inline_2.domServices_) {\" +\n        \"    self$$inline_2.domServices_ = goog$component$DomServices.get(\" +\n        \"        self$$inline_2.appContext_);\" +\n        \"  }\" +\n        \"  JSCompiler_inline_result$$1=self$$inline_2.domServices_;\" +\n        \"  }\" +\n        \"  var myUrl = new JSCompiler_temp_const$$0(\" +\n        \"      JSCompiler_inline_result$$1.getDomHelper().\" +\n        \"          getWindow().location.href)\" +\n        \"}\");\n  }\n",
        "begin_line": 2076,
        "end_line": 2111,
        "comment": "",
        "child_ranges": [
            "(line 2077,col 5)-(line 2110,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testIssue423()",
        "snippet": "  public void testIssue423() {\n    assumeMinimumCapture = false;\n    test(\n        \"(function($) {\\n\" +\n        \"  $.fn.multicheck = function(options) {\\n\" +\n        \"    initialize.call(this, options);\\n\" +\n        \"  };\\n\" +\n        \"\\n\" +\n        \"  function initialize(options) {\\n\" +\n        \"    options.checkboxes = $(this).siblings(':checkbox');\\n\" +\n        \"    preload_check_all.call(this);\\n\" +\n        \"  }\\n\" +\n        \"\\n\" +\n        \"  function preload_check_all() {\\n\" +\n        \"    $(this).data('checkboxes');\\n\" +\n        \"  }\\n\" +\n        \"})(jQuery)\",\n        \"(function($){\" +\n        \"  $.fn.multicheck=function(options$$1){\" +\n        \"    {\" +\n        \"     options$$1.checkboxes=$(this).siblings(\\\":checkbox\\\");\" +\n        \"     {\" +\n        \"       $(this).data(\\\"checkboxes\\\")\" +\n        \"     }\" +\n        \"    }\" +\n        \"  }\" +\n        \"})(jQuery)\");\n\n    assumeMinimumCapture = true;\n    test(\n        \"(function($) {\\n\" +\n        \"  $.fn.multicheck = function(options) {\\n\" +\n        \"    initialize.call(this, options);\\n\" +\n        \"  };\\n\" +\n        \"\\n\" +\n        \"  function initialize(options) {\\n\" +\n        \"    options.checkboxes = $(this).siblings(':checkbox');\\n\" +\n        \"    preload_check_all.call(this);\\n\" +\n        \"  }\\n\" +\n        \"\\n\" +\n        \"  function preload_check_all() {\\n\" +\n        \"    $(this).data('checkboxes');\\n\" +\n        \"  }\\n\" +\n        \"})(jQuery)\",\n        \"{var $$$inline_0=jQuery;\\n\" +\n        \"$$$inline_0.fn.multicheck=function(options$$inline_4){\\n\" +\n        \"  {options$$inline_4.checkboxes=\" +\n            \"$$$inline_0(this).siblings(\\\":checkbox\\\");\\n\" +\n        \"  {$$$inline_0(this).data(\\\"checkboxes\\\")}\" +\n        \"  }\\n\" +\n        \"}\\n\" +\n        \"}\");\n  }\n",
        "begin_line": 2113,
        "end_line": 2165,
        "comment": "",
        "child_ranges": [
            "(line 2114,col 5)-(line 2114,col 33)",
            "(line 2115,col 5)-(line 2139,col 22)",
            "(line 2141,col 5)-(line 2141,col 32)",
            "(line 2142,col 5)-(line 2164,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testIssue728()",
        "snippet": "  public void testIssue728() {\n    String f = \"var f = function() { return false; };\";\n    StringBuilder calls = new StringBuilder();\n    StringBuilder folded = new StringBuilder();\n    for (int i = 0; i < 30; i++) {\n      calls.append(\"if (!f()) alert('x');\");\n      folded.append(\"if (!false) alert('x');\");\n    }\n\n    test(f + calls, folded.toString());\n  }\n",
        "begin_line": 2167,
        "end_line": 2177,
        "comment": "",
        "child_ranges": [
            "(line 2168,col 5)-(line 2168,col 55)",
            "(line 2169,col 5)-(line 2169,col 46)",
            "(line 2170,col 5)-(line 2170,col 47)",
            "(line 2171,col 5)-(line 2174,col 5)",
            "(line 2176,col 5)-(line 2176,col 39)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testAnonymous1()",
        "snippet": "  public void testAnonymous1() {\n    assumeMinimumCapture = false;\n    test(\"(function(){var a=10;(function(){var b=a;a++;alert(b)})()})();\",\n         \"{var a$$inline_0=10;\" +\n         \"{var b$$inline_1=a$$inline_0;\" +\n         \"a$$inline_0++;alert(b$$inline_1)}}\");\n\n    assumeMinimumCapture = true;\n    test(\"(function(){var a=10;(function(){var b=a;a++;alert(b)})()})();\",\n        \"{var a$$inline_2=10;\" +\n        \"{var b$$inline_0=a$$inline_2;\" +\n        \"a$$inline_2++;alert(b$$inline_0)}}\");\n  }\n",
        "begin_line": 2179,
        "end_line": 2191,
        "comment": "",
        "child_ranges": [
            "(line 2180,col 5)-(line 2180,col 33)",
            "(line 2181,col 5)-(line 2184,col 47)",
            "(line 2186,col 5)-(line 2186,col 32)",
            "(line 2187,col 5)-(line 2190,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testAnonymous2()",
        "snippet": "  public void testAnonymous2() {\n    testSame(\"(function(){eval();(function(){var b=a;a++;alert(b)})()})();\");\n  }\n",
        "begin_line": 2193,
        "end_line": 2195,
        "comment": "",
        "child_ranges": [
            "(line 2194,col 5)-(line 2194,col 77)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testAnonymous3()",
        "snippet": "  public void testAnonymous3() {\n    // Introducing a new value into is tricky\n    assumeMinimumCapture = false;\n    testSame(\"(function(){var a=10;(function(){arguments;})()})();\");\n\n    assumeMinimumCapture = true;\n    test(\"(function(){var a=10;(function(){arguments;})()})();\",\n         \"{var a$$inline_0=10;(function(){arguments;})();}\");\n\n    test(\"(function(){(function(){arguments;})()})();\",\n        \"{(function(){arguments;})()}\");\n  }\n",
        "begin_line": 2197,
        "end_line": 2208,
        "comment": "",
        "child_ranges": [
            "(line 2199,col 5)-(line 2199,col 33)",
            "(line 2200,col 5)-(line 2200,col 69)",
            "(line 2202,col 5)-(line 2202,col 32)",
            "(line 2203,col 5)-(line 2204,col 61)",
            "(line 2206,col 5)-(line 2207,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testLoopWithFunctionWithFunction()",
        "snippet": "  public void testLoopWithFunctionWithFunction() {\n    assumeMinimumCapture = true;\n    test(\"function _testLocalVariableInLoop_() {\\n\" +\n        \"  var result = 0;\\n\" +\n        \"  function foo() {\\n\" +\n        \"    var arr = [1, 2, 3, 4, 5];\\n\" +\n        \"    for (var i = 0, l = arr.length; i < l; i++) {\\n\" +\n        \"      var j = arr[i];\\n\" +\n        // don't inline this function, because the correct behavior depends\n        // captured values.\n        \"      (function() {\\n\" +\n        \"        var k = j;\\n\" +\n        \"        setTimeout(function() { result += k; }, 5 * i);\\n\" +\n        \"      })();\\n\" +\n        \"    }\\n\" +\n        \"  }\\n\" +\n        \"  foo();\\n\" +\n        \"}\",\n        \"function _testLocalVariableInLoop_(){\\n\" +\n        \"  var result=0;\\n\" +\n        \"  {\" +\n        \"  var arr$$inline_0=[1,2,3,4,5];\\n\" +\n        \"  var i$$inline_1=0;\\n\" +\n        \"  var l$$inline_2=arr$$inline_0.length;\\n\" +\n        \"  for(;i$$inline_1<l$$inline_2;i$$inline_1++){\\n\" +\n        \"    var j$$inline_3=arr$$inline_0[i$$inline_1];\\n\" +\n        \"    (function(){\\n\" +\n        \"       var k$$inline_4=j$$inline_3;\\n\" +\n        \"       setTimeout(function(){result+=k$$inline_4},5*i$$inline_1)\\n\" +\n        \"     })()\\n\" +\n        \"  }\\n\" +\n        \"  }\\n\" +\n        \"}\");\n  }\n",
        "begin_line": 2211,
        "end_line": 2244,
        "comment": "",
        "child_ranges": [
            "(line 2212,col 5)-(line 2212,col 32)",
            "(line 2213,col 5)-(line 2243,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testMethodWithFunctionWithFunction()",
        "snippet": "  public void testMethodWithFunctionWithFunction() {\n    assumeMinimumCapture = true;\n    test(\"function _testLocalVariable_() {\\n\" +\n        \"  var result = 0;\\n\" +\n        \"  function foo() {\\n\" +\n        \"      var j = [i];\\n\" +\n        \"      (function(j) {\\n\" +\n        \"        setTimeout(function() { result += j; }, 5 * i);\\n\" +\n        \"      })(j);\\n\" +\n        \"      j = null;\" +\n        \"  }\\n\" +\n        \"  foo();\\n\" +\n        \"}\",\n        \"function _testLocalVariable_(){\\n\" +\n        \"  var result=0;\\n\" +\n        \"  {\\n\" +\n        \"  var j$$inline_2=[i];\\n\" +\n        \"  {\\n\" +\n        \"  var j$$inline_0=j$$inline_2;\\n\" +  // this temp is needed.\n        \"  setTimeout(function(){result+=j$$inline_0},5*i);\\n\" +\n        \"  }\\n\" +\n        \"  j$$inline_2=null\\n\" + // because this value can be modified later.\n        \"  }\\n\" +\n        \"}\");\n  }\n",
        "begin_line": 2246,
        "end_line": 2270,
        "comment": "",
        "child_ranges": [
            "(line 2247,col 5)-(line 2247,col 32)",
            "(line 2248,col 5)-(line 2269,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testCrossModuleInlining1()",
        "snippet": "  public void testCrossModuleInlining1() {\n    test(createModuleChain(\n             // m1\n             \"function foo(){return f(1)+g(2)+h(3);}\",\n             // m2\n             \"foo()\"\n             ),\n         new String[] {\n             // m1\n             \"\",\n             // m2\n             \"f(1)+g(2)+h(3);\"\n            }\n        );\n  }\n",
        "begin_line": 2273,
        "end_line": 2287,
        "comment": " Inline a single reference function into deeper modules",
        "child_ranges": [
            "(line 2274,col 5)-(line 2286,col 10)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testCrossModuleInlining2()",
        "snippet": "  public void testCrossModuleInlining2() {\n    testSame(createModuleChain(\n                // m1\n                \"foo()\",\n                // m2\n                \"function foo(){return f(1)+g(2)+h(3);}\"\n                )\n            );\n\n    test(createModuleChain(\n             // m1\n             \"foo()\",\n             // m2\n             \"function foo(){return f();}\"\n             ),\n         new String[] {\n             // m1\n             \"f();\",\n             // m2\n             \"\"\n            }\n        );\n  }\n",
        "begin_line": 2291,
        "end_line": 2313,
        "comment": " is cheaper than the call itself.",
        "child_ranges": [
            "(line 2292,col 5)-(line 2298,col 14)",
            "(line 2300,col 5)-(line 2312,col 10)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testCrossModuleInlining3()",
        "snippet": "  public void testCrossModuleInlining3() {\n    testSame(createModuleChain(\n                // m1\n                \"foo()\",\n                // m2\n                \"function foo(){return f(1)+g(2)+h(3);}\",\n                // m3\n                \"foo()\"\n                )\n            );\n\n    test(createModuleChain(\n             // m1\n             \"foo()\",\n             // m2\n             \"function foo(){return f();}\",\n             // m3\n             \"foo()\"\n             ),\n         new String[] {\n             // m1\n             \"f();\",\n             // m2\n             \"\",\n             // m3\n             \"f();\"\n            }\n         );\n  }\n",
        "begin_line": 2317,
        "end_line": 2345,
        "comment": " is cheaper than the call itself.",
        "child_ranges": [
            "(line 2318,col 5)-(line 2326,col 14)",
            "(line 2328,col 5)-(line 2344,col 11)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.InlineFunctionsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.CompilerTestCase(java.lang.String, boolean)",
        "snippet": "  protected CompilerTestCase(String externs, boolean compareAsTree) {\n    this.externsInputs = ImmutableList.of(\n        SourceFile.fromCode(\"externs\", externs));\n    this.compareAsTree = compareAsTree;\n    this.parseTypeInfo = false;\n  }\n",
        "begin_line": 126,
        "end_line": 131,
        "comment": "\n   * Constructs a test.\n   *\n   * @param externs Externs JS as a string\n   * @param compareAsTree True to compare output & expected as a node tree.\n   *     99% of the time you want to compare as a tree. There are a few\n   *     special cases where you don't, like if you want to test the code\n   *     printing of \"unnatural\" syntax trees. For example,\n   *\n   * <pre>\n   * IF\n   *   IF\n   *     STATEMENT\n   * ELSE\n   *   STATEMENT\n   * </pre>\n   ",
        "child_ranges": [
            "(line 127,col 5)-(line 128,col 49)",
            "(line 129,col 5)-(line 129,col 39)",
            "(line 130,col 5)-(line 130,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.InlineFunctionsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.CompilerTestCase(java.lang.String)",
        "snippet": "  protected CompilerTestCase(String externs) {\n    this(externs, true);\n  }\n",
        "begin_line": 137,
        "end_line": 139,
        "comment": "\n   * Constructs a test. Uses AST comparison.\n   * @param externs Externs JS as a string\n   ",
        "child_ranges": [
            "(line 138,col 5)-(line 138,col 24)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.InlineFunctionsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.CompilerTestCase()",
        "snippet": "  protected CompilerTestCase() {\n    this(\"\", true);\n  }\n",
        "begin_line": 144,
        "end_line": 146,
        "comment": "\n   * Constructs a test. Uses AST comparison and no externs.\n   ",
        "child_ranges": [
            "(line 145,col 5)-(line 145,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.InlineFunctionsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.getProcessor(com.google.javascript.jscomp.Compiler)",
        "snippet": "  protected abstract CompilerPass getProcessor(Compiler compiler);\n",
        "begin_line": 154,
        "end_line": 154,
        "comment": "\n   * Gets the compiler pass instance to use for a test.\n   *\n   * @param compiler The compiler\n   * @return The pass to test\n   ",
        "child_ranges": []
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.InlineFunctionsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.getOptions()",
        "snippet": "  protected CompilerOptions getOptions() {\n    return getOptions(new CompilerOptions());\n  }\n",
        "begin_line": 161,
        "end_line": 163,
        "comment": "\n   * Gets the compiler options to use for this test. Use getProcessor to\n   * determine what passes should be run.\n   ",
        "child_ranges": [
            "(line 162,col 5)-(line 162,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.InlineFunctionsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.getOptions(com.google.javascript.jscomp.CompilerOptions)",
        "snippet": "  protected CompilerOptions getOptions(CompilerOptions options) {\n    if (this.acceptES5) {\n      options.setLanguageIn(LanguageMode.ECMASCRIPT5);\n    }\n\n    // This doesn't affect whether checkSymbols is run--it just affects\n    // whether variable warnings are filtered.\n    options.checkSymbols = true;\n\n    options.setWarningLevel(\n        DiagnosticGroups.MISSING_PROPERTIES, CheckLevel.WARNING);\n    options.setCodingConvention(getCodingConvention());\n    return options;\n  }\n",
        "begin_line": 169,
        "end_line": 182,
        "comment": "\n   * Gets the compiler options to use for this test. Use getProcessor to\n   * determine what passes should be run.\n   ",
        "child_ranges": [
            "(line 170,col 5)-(line 172,col 5)",
            "(line 176,col 5)-(line 176,col 32)",
            "(line 178,col 5)-(line 179,col 65)",
            "(line 180,col 5)-(line 180,col 55)",
            "(line 181,col 5)-(line 181,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.InlineFunctionsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.getCodingConvention()",
        "snippet": "  protected CodingConvention getCodingConvention() {\n    return new GoogleCodingConvention();\n  }\n",
        "begin_line": 184,
        "end_line": 186,
        "comment": "",
        "child_ranges": [
            "(line 185,col 5)-(line 185,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.InlineFunctionsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.setFilename(java.lang.String)",
        "snippet": "  public void setFilename(String filename) {\n    this.filename = filename;\n  }\n",
        "begin_line": 188,
        "end_line": 190,
        "comment": "",
        "child_ranges": [
            "(line 189,col 5)-(line 189,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.InlineFunctionsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.getNumRepetitions()",
        "snippet": "  protected int getNumRepetitions() {\n    // Since most compiler passes should be idempotent, we run each pass twice\n    // by default.\n    return 2;\n  }\n",
        "begin_line": 196,
        "end_line": 200,
        "comment": "\n   * Returns the number of times the pass should be run before results are\n   * verified.\n   ",
        "child_ranges": [
            "(line 199,col 5)-(line 199,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.InlineFunctionsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.allowSourcelessWarnings()",
        "snippet": "  void allowSourcelessWarnings() {\n    allowSourcelessWarnings = true;\n  }\n",
        "begin_line": 203,
        "end_line": 205,
        "comment": " Expect warnings without source information. ",
        "child_ranges": [
            "(line 204,col 5)-(line 204,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.InlineFunctionsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.getLastCompiler()",
        "snippet": "  Compiler getLastCompiler() {\n    return lastCompiler;\n  }\n",
        "begin_line": 208,
        "end_line": 210,
        "comment": " The most recently used JSComp instance. ",
        "child_ranges": [
            "(line 209,col 5)-(line 209,col 24)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.InlineFunctionsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.enableEcmaScript5(boolean)",
        "snippet": "  protected void enableEcmaScript5(boolean acceptES5) {\n    this.acceptES5 = acceptES5;\n  }\n",
        "begin_line": 215,
        "end_line": 217,
        "comment": "\n   * Whether to allow ECMASCRIPT5 source parsing.\n   ",
        "child_ranges": [
            "(line 216,col 5)-(line 216,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.InlineFunctionsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.allowExternsChanges(boolean)",
        "snippet": "  protected void allowExternsChanges(boolean allowExternsChanges) {\n    this.allowExternsChanges = allowExternsChanges;\n  }\n",
        "begin_line": 222,
        "end_line": 224,
        "comment": "\n   * Whether to allow externs changes.\n   ",
        "child_ranges": [
            "(line 223,col 5)-(line 223,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.InlineFunctionsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.enableTypeCheck(com.google.javascript.jscomp.CheckLevel)",
        "snippet": "  public void enableTypeCheck(CheckLevel level) {\n    typeCheckEnabled  = true;\n    typeCheckLevel = level;\n  }\n",
        "begin_line": 234,
        "end_line": 237,
        "comment": "\n   * Perform type checking before running the test pass. This will check\n   * for type errors and annotate nodes with type information.\n   *\n   * @param level the level of severity to report for type errors\n   *\n   * @see TypeCheck\n   ",
        "child_ranges": [
            "(line 235,col 5)-(line 235,col 29)",
            "(line 236,col 5)-(line 236,col 27)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.InlineFunctionsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.enableLineNumberCheck(boolean)",
        "snippet": "  public void enableLineNumberCheck(boolean newVal) {\n    checkLineNumbers = newVal;\n  }\n",
        "begin_line": 242,
        "end_line": 244,
        "comment": "\n   * Check to make sure that line numbers were preserved.\n   ",
        "child_ranges": [
            "(line 243,col 5)-(line 243,col 30)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.InlineFunctionsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.disableTypeCheck()",
        "snippet": "  void disableTypeCheck() {\n    typeCheckEnabled  = false;\n  }\n",
        "begin_line": 251,
        "end_line": 253,
        "comment": "\n   * Do not run type checking before running the test pass.\n   *\n   * @see TypeCheck\n   ",
        "child_ranges": [
            "(line 252,col 5)-(line 252,col 30)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.InlineFunctionsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.enableClosurePass()",
        "snippet": "  void enableClosurePass() {\n    closurePassEnabled = true;\n  }\n",
        "begin_line": 259,
        "end_line": 261,
        "comment": " TODO(nicksantos): Fix other passes to use this when appropriate.",
        "child_ranges": [
            "(line 260,col 5)-(line 260,col 30)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.InlineFunctionsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.enableNormalize()",
        "snippet": "  protected void enableNormalize() {\n    enableNormalize(true);\n  }\n",
        "begin_line": 269,
        "end_line": 271,
        "comment": "\n   * Perform AST normalization before running the test pass, and anti-normalize\n   * after running it.\n   *\n   * @see Normalize\n   ",
        "child_ranges": [
            "(line 270,col 5)-(line 270,col 26)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.InlineFunctionsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.enableNormalize(boolean)",
        "snippet": "  protected void enableNormalize(boolean normalizeExpected) {\n    normalizeEnabled = true;\n    this.normalizeExpected = normalizeExpected;\n  }\n",
        "begin_line": 281,
        "end_line": 284,
        "comment": "\n   * Perform AST normalization before running the test pass, and anti-normalize\n   * after running it.\n   *\n   * @param normalizeExpected Whether to perform normalization on the\n   * expected js result.\n   * @see Normalize\n   ",
        "child_ranges": [
            "(line 282,col 5)-(line 282,col 28)",
            "(line 283,col 5)-(line 283,col 47)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.InlineFunctionsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.disableNormalize()",
        "snippet": "  protected void disableNormalize() {\n    normalizeEnabled = false;\n  }\n",
        "begin_line": 290,
        "end_line": 292,
        "comment": "\n   * Don't perform AST normalization before running the test pass.\n   * @see Normalize\n   ",
        "child_ranges": [
            "(line 291,col 5)-(line 291,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.InlineFunctionsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.enableMarkNoSideEffects()",
        "snippet": "  void enableMarkNoSideEffects() {\n    markNoSideEffects  = true;\n  }\n",
        "begin_line": 299,
        "end_line": 301,
        "comment": "\n   * Run the MarkSideEffectCalls pass before running the test pass.\n   *\n   * @see MarkNoSideEffectCalls\n   ",
        "child_ranges": [
            "(line 300,col 5)-(line 300,col 30)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.InlineFunctionsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.enableAstValidation(boolean)",
        "snippet": "  protected void enableAstValidation(boolean validate) {\n    astValidationEnabled = validate;\n  }\n",
        "begin_line": 306,
        "end_line": 308,
        "comment": "\n   * Whether to allow Validate the AST after each run of the pass.\n   ",
        "child_ranges": [
            "(line 307,col 5)-(line 307,col 36)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.InlineFunctionsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.createTypeCheck(com.google.javascript.jscomp.Compiler, com.google.javascript.jscomp.CheckLevel)",
        "snippet": "  private static TypeCheck createTypeCheck(Compiler compiler,\n      CheckLevel level) {\n    ReverseAbstractInterpreter rai =\n        new SemanticReverseAbstractInterpreter(compiler.getCodingConvention(),\n            compiler.getTypeRegistry());\n\n    return new TypeCheck(compiler, rai, compiler.getTypeRegistry(),\n        level, CheckLevel.OFF);\n  }\n",
        "begin_line": 311,
        "end_line": 319,
        "comment": " Returns a newly created TypeCheck. ",
        "child_ranges": [
            "(line 313,col 5)-(line 315,col 40)",
            "(line 317,col 5)-(line 318,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.InlineFunctionsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.lang.String, java.lang.String)",
        "snippet": "  public void test(String js, String expected) {\n    test(js, expected, (DiagnosticType) null);\n  }\n",
        "begin_line": 327,
        "end_line": 329,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output.\n   *\n   * @param js Input\n   * @param expected Expected JS output\n   ",
        "child_ranges": [
            "(line 328,col 5)-(line 328,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.InlineFunctionsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.lang.String, java.lang.String, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void test(String js, String expected, DiagnosticType error) {\n    test(js, expected, error, null);\n  }\n",
        "begin_line": 339,
        "end_line": 341,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output,\n   * or that an expected error is encountered.\n   *\n   * @param js Input\n   * @param expected Expected output, or null if an error is expected\n   * @param error Expected error, or null if no error is expected\n   ",
        "child_ranges": [
            "(line 340,col 5)-(line 340,col 36)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.InlineFunctionsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.lang.String, java.lang.String, com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType, java.lang.String)",
        "snippet": "  public void test(String js, String expected, DiagnosticType error,\n                   DiagnosticType warning, String description) {\n    test(externsInputs, js, expected, error, warning, description);\n  }\n",
        "begin_line": 354,
        "end_line": 357,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output,\n   * or that an expected error is encountered.\n   *\n   * @param js Input\n   * @param expected Expected output, or null if an error is expected\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   * @param description The content of the error expected\n   ",
        "child_ranges": [
            "(line 356,col 5)-(line 356,col 67)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.InlineFunctionsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.lang.String, java.lang.String, com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void test(String js, String expected,\n                   DiagnosticType error, DiagnosticType warning) {\n    test(externsInputs, js, expected, error, warning, null);\n  }\n",
        "begin_line": 369,
        "end_line": 372,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output\n   * and (optionally) that an expected warning is issued. Or, if an error is\n   * expected, this method just verifies that the error is encountered.\n   *\n   * @param js Input\n   * @param expected Expected output, or null if an error is expected\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   ",
        "child_ranges": [
            "(line 371,col 5)-(line 371,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.InlineFunctionsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.lang.String, java.lang.String, java.lang.String, com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void test(String externs, String js, String expected,\n                   DiagnosticType error, DiagnosticType warning) {\n    test(externs, js, expected, error, warning, null);\n  }\n",
        "begin_line": 385,
        "end_line": 388,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output\n   * and (optionally) that an expected warning is issued. Or, if an error is\n   * expected, this method just verifies that the error is encountered.\n   *\n   * @param externs Externs input\n   * @param js Input\n   * @param expected Expected output, or null if an error is expected\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   ",
        "child_ranges": [
            "(line 387,col 5)-(line 387,col 54)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.InlineFunctionsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.lang.String, java.lang.String, java.lang.String, com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType, java.lang.String)",
        "snippet": "  public void test(String externs, String js, String expected,\n                   DiagnosticType error, DiagnosticType warning,\n                   String description) {\n    List<SourceFile> externsInputs = ImmutableList.of(\n        SourceFile.fromCode(\"externs\", externs));\n    test(externsInputs, js, expected, error, warning, description);\n  }\n",
        "begin_line": 404,
        "end_line": 410,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output\n   * and (optionally) that an expected warning is issued. Or, if an error is\n   * expected, this method just verifies that the error is encountered.\n   *\n   * @param externs Externs input\n   * @param js Input\n   * @param expected Expected output, or null if an error is expected\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   * @param description The description of the expected warning,\n   *      or null if no warning is expected or if the warning's description\n   *      should not be examined\n   ",
        "child_ranges": [
            "(line 407,col 5)-(line 408,col 49)",
            "(line 409,col 5)-(line 409,col 67)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.InlineFunctionsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.util.List<com.google.javascript.jscomp.SourceFile>, java.lang.String, java.lang.String, com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType, java.lang.String)",
        "snippet": "  public void test(List<SourceFile> externs, String js, String expected,\n                   DiagnosticType error,\n                   DiagnosticType warning, String description) {\n    Compiler compiler = createCompiler();\n    lastCompiler = compiler;\n\n    CompilerOptions options = getOptions();\n\n    if (this.acceptES5) {\n      options.setLanguageIn(LanguageMode.ECMASCRIPT5);\n    }\n    // Note that in this context, turning on the checkTypes option won't\n    // actually cause the type check to run.\n    options.checkTypes = parseTypeInfo;\n    compiler.init(externs, ImmutableList.of(\n        SourceFile.fromCode(filename, js)), options);\n\n    BaseJSTypeTestCase.addNativeProperties(compiler.getTypeRegistry());\n\n    test(compiler, new String[] { expected }, error, warning, description);\n  }\n",
        "begin_line": 426,
        "end_line": 446,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output\n   * and (optionally) that an expected warning is issued. Or, if an error is\n   * expected, this method just verifies that the error is encountered.\n   *\n   * @param externs Externs inputs\n   * @param js Input\n   * @param expected Expected output, or null if an error is expected\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   * @param description The description of the expected warning,\n   *      or null if no warning is expected or if the warning's description\n   *      should not be examined\n   ",
        "child_ranges": [
            "(line 429,col 5)-(line 429,col 41)",
            "(line 430,col 5)-(line 430,col 28)",
            "(line 432,col 5)-(line 432,col 43)",
            "(line 434,col 5)-(line 436,col 5)",
            "(line 439,col 5)-(line 439,col 39)",
            "(line 440,col 5)-(line 441,col 53)",
            "(line 443,col 5)-(line 443,col 71)",
            "(line 445,col 5)-(line 445,col 75)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.InlineFunctionsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.lang.String[], java.lang.String[])",
        "snippet": "  public void test(String[] js, String[] expected) {\n    test(js, expected, null);\n  }\n",
        "begin_line": 454,
        "end_line": 456,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output.\n   *\n   * @param js Inputs\n   * @param expected Expected JS output\n   ",
        "child_ranges": [
            "(line 455,col 5)-(line 455,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.InlineFunctionsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.lang.String[], java.lang.String[], com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void test(String[] js, String[] expected, DiagnosticType error) {\n    test(js, expected, error, null);\n  }\n",
        "begin_line": 466,
        "end_line": 468,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output,\n   * or that an expected error is encountered.\n   *\n   * @param js Inputs\n   * @param expected Expected JS output\n   * @param error Expected error, or null if no error is expected\n   ",
        "child_ranges": [
            "(line 467,col 5)-(line 467,col 36)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.InlineFunctionsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.lang.String[], java.lang.String[], com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void test(String[] js, String[] expected, DiagnosticType error,\n                   DiagnosticType warning) {\n    test(js, expected, error, warning, null);\n  }\n",
        "begin_line": 480,
        "end_line": 483,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output\n   * and (optionally) that an expected warning is issued. Or, if an error is\n   * expected, this method just verifies that the error is encountered.\n   *\n   * @param js Inputs\n   * @param expected Expected JS output\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   ",
        "child_ranges": [
            "(line 482,col 5)-(line 482,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.InlineFunctionsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.lang.String[], java.lang.String[], com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType, java.lang.String)",
        "snippet": "  public void test(String[] js, String[] expected, DiagnosticType error,\n                   DiagnosticType warning, String description) {\n    Compiler compiler = createCompiler();\n    lastCompiler = compiler;\n\n    List<SourceFile> inputs = Lists.newArrayList();\n    for (int i = 0; i < js.length; i++) {\n      inputs.add(SourceFile.fromCode(\"input\" + i, js[i]));\n    }\n    compiler.init(externsInputs, inputs, getOptions());\n    test(compiler, expected, error, warning, description);\n  }\n",
        "begin_line": 498,
        "end_line": 509,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output\n   * and (optionally) that an expected warning is issued. Or, if an error is\n   * expected, this method just verifies that the error is encountered.\n   *\n   * @param js Inputs\n   * @param expected Expected JS output\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   * @param description The description of the expected warning,\n   *      or null if no warning is expected or if the warning's description\n   *      should not be examined\n   ",
        "child_ranges": [
            "(line 500,col 5)-(line 500,col 41)",
            "(line 501,col 5)-(line 501,col 28)",
            "(line 503,col 5)-(line 503,col 51)",
            "(line 504,col 5)-(line 506,col 5)",
            "(line 507,col 5)-(line 507,col 55)",
            "(line 508,col 5)-(line 508,col 58)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.InlineFunctionsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(com.google.javascript.jscomp.JSModule[], java.lang.String[])",
        "snippet": "  public void test(JSModule[] modules, String[] expected) {\n    test(modules, expected, null);\n  }\n",
        "begin_line": 517,
        "end_line": 519,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output.\n   *\n   * @param modules Module inputs\n   * @param expected Expected JS outputs (one per module)\n   ",
        "child_ranges": [
            "(line 518,col 5)-(line 518,col 34)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.InlineFunctionsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(com.google.javascript.jscomp.JSModule[], java.lang.String[], com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void test(JSModule[] modules, String[] expected,\n      DiagnosticType error) {\n    test(modules, expected, error, null);\n  }\n",
        "begin_line": 529,
        "end_line": 532,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output,\n   * or that an expected error is encountered.\n   *\n   * @param modules Module inputs\n   * @param expected Expected JS outputs (one per module)\n   * @param error Expected error, or null if no error is expected\n   ",
        "child_ranges": [
            "(line 531,col 5)-(line 531,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.InlineFunctionsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(com.google.javascript.jscomp.JSModule[], java.lang.String[], com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void test(JSModule[] modules, String[] expected,\n                   DiagnosticType error, DiagnosticType warning) {\n    Compiler compiler = createCompiler();\n    lastCompiler = compiler;\n\n    compiler.initModules(\n        externsInputs, Lists.newArrayList(modules), getOptions());\n    test(compiler, expected, error, warning);\n  }\n",
        "begin_line": 544,
        "end_line": 552,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output\n   * and (optionally) that an expected warning is issued. Or, if an error is\n   * expected, this method just verifies that the error is encountered.\n   *\n   * @param modules Module inputs\n   * @param expected Expected JS outputs (one per module)\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   ",
        "child_ranges": [
            "(line 546,col 5)-(line 546,col 41)",
            "(line 547,col 5)-(line 547,col 28)",
            "(line 549,col 5)-(line 550,col 66)",
            "(line 551,col 5)-(line 551,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.InlineFunctionsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(java.lang.String)",
        "snippet": "  public void testSame(String js) {\n    test(js, js);\n  }\n",
        "begin_line": 559,
        "end_line": 561,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as its input.\n   *\n   * @param js Input and output\n   ",
        "child_ranges": [
            "(line 560,col 5)-(line 560,col 17)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.InlineFunctionsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(java.lang.String, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void testSame(String js, DiagnosticType warning) {\n    test(js, js, null, warning);\n  }\n",
        "begin_line": 570,
        "end_line": 572,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as its input\n   * and (optionally) that an expected warning is issued.\n   *\n   * @param js Input and output\n   * @param warning Expected warning, or null if no warning is expected\n   ",
        "child_ranges": [
            "(line 571,col 5)-(line 571,col 32)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.InlineFunctionsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(java.lang.String, com.google.javascript.jscomp.DiagnosticType, boolean)",
        "snippet": "  public void testSame(String js, DiagnosticType diag, boolean error) {\n    if (error) {\n      test(js, js, diag);\n    } else {\n      test(js, js, null, diag);\n    }\n  }\n",
        "begin_line": 582,
        "end_line": 588,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as its input\n   * and (optionally) that an expected warning is issued.\n   *\n   * @param js Input and output\n   * @param diag Expected error or warning, or null if none is expected\n   * @param error true if diag is an error, false if it is a warning\n   ",
        "child_ranges": [
            "(line 583,col 5)-(line 587,col 5)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.InlineFunctionsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(java.lang.String, java.lang.String, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void testSame(String externs, String js, DiagnosticType warning) {\n    testSame(externs, js, warning, null);\n  }\n",
        "begin_line": 598,
        "end_line": 600,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as its input\n   * and (optionally) that an expected warning is issued.\n   *\n   * @param externs Externs input\n   * @param js Input and output\n   * @param warning Expected warning, or null if no warning is expected\n   ",
        "child_ranges": [
            "(line 599,col 5)-(line 599,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.InlineFunctionsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(java.lang.String, java.lang.String, com.google.javascript.jscomp.DiagnosticType, boolean)",
        "snippet": "  public void testSame(\n      String externs, String js, DiagnosticType diag, boolean error) {\n    if (error) {\n      test(externs, js, js, diag, null);\n    } else {\n      test(externs, js, js, null, diag);\n    }\n  }\n",
        "begin_line": 611,
        "end_line": 618,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as its input\n   * and (optionally) that an expected warning is issued.\n   *\n   * @param externs Externs input\n   * @param js Input and output\n   * @param diag Expected error or warning, or null if none is expected\n   * @param error true if diag is an error, false if it is a warning\n   ",
        "child_ranges": [
            "(line 613,col 5)-(line 617,col 5)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.InlineFunctionsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(java.lang.String, java.lang.String, com.google.javascript.jscomp.DiagnosticType, java.lang.String)",
        "snippet": "  public void testSame(String externs, String js, DiagnosticType warning,\n                       String description) {\n    List<SourceFile> externsInputs = ImmutableList.of(\n        SourceFile.fromCode(\"externs\", externs));\n    test(externsInputs, js, js, null, warning, description);\n  }\n",
        "begin_line": 631,
        "end_line": 636,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as its input\n   * and (optionally) that an expected warning and description is issued.\n   *\n   * @param externs Externs input\n   * @param js Input and output\n   * @param warning Expected warning, or null if no warning is expected\n   * @param description The description of the expected warning,\n   *      or null if no warning is expected or if the warning's description\n   *      should not be examined\n   ",
        "child_ranges": [
            "(line 633,col 5)-(line 634,col 49)",
            "(line 635,col 5)-(line 635,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.InlineFunctionsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(java.lang.String[])",
        "snippet": "  public void testSame(String[] js) {\n    test(js, js);\n  }\n",
        "begin_line": 643,
        "end_line": 645,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as its input.\n   *\n   * @param js Inputs and outputs\n   ",
        "child_ranges": [
            "(line 644,col 5)-(line 644,col 17)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.InlineFunctionsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(java.lang.String[], com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void testSame(String[] js, DiagnosticType error) {\n    test(js, js, error);\n  }\n",
        "begin_line": 654,
        "end_line": 656,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as its input,\n   * and emits the given error.\n   *\n   * @param js Inputs and outputs\n   * @param error Expected error, or null if no error is expected\n   ",
        "child_ranges": [
            "(line 655,col 5)-(line 655,col 24)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.InlineFunctionsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(java.lang.String[], com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void testSame(\n      String[] js, DiagnosticType error, DiagnosticType warning) {\n    test(js, js, error, warning);\n  }\n",
        "begin_line": 666,
        "end_line": 669,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as its input,\n   * and emits the given error and warning.\n   *\n   * @param js Inputs and outputs\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   ",
        "child_ranges": [
            "(line 668,col 5)-(line 668,col 33)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.InlineFunctionsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(com.google.javascript.jscomp.JSModule[])",
        "snippet": "  public void testSame(JSModule[] modules) {\n    testSame(modules, null);\n  }\n",
        "begin_line": 676,
        "end_line": 678,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as the input.\n   *\n   * @param modules Module inputs\n   ",
        "child_ranges": [
            "(line 677,col 5)-(line 677,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.InlineFunctionsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(com.google.javascript.jscomp.JSModule[], com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void testSame(JSModule[] modules, DiagnosticType warning) {\n    try {\n      String[] expected = new String[modules.length];\n      for (int i = 0; i < modules.length; i++) {\n        expected[i] = \"\";\n        for (CompilerInput input : modules[i].getInputs()) {\n          expected[i] += input.getSourceFile().getCode();\n        }\n      }\n      test(modules, expected, null, warning);\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n  }\n",
        "begin_line": 686,
        "end_line": 699,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as the input.\n   *\n   * @param modules Module inputs\n   * @param warning A warning, or null for no expected warning.\n   ",
        "child_ranges": [
            "(line 687,col 5)-(line 698,col 5)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.InlineFunctionsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(com.google.javascript.jscomp.Compiler, java.lang.String[], com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  protected void test(Compiler compiler, String[] expected,\n                      DiagnosticType error, DiagnosticType warning) {\n    test(compiler, expected, error, warning, null);\n  }\n",
        "begin_line": 712,
        "end_line": 715,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output\n   * and (optionally) that an expected warning is issued. Or, if an error is\n   * expected, this method just verifies that the error is encountered.\n   *\n   * @param compiler A compiler that has been initialized via\n   *     {@link Compiler#init}\n   * @param expected Expected output, or null if an error is expected\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   ",
        "child_ranges": [
            "(line 714,col 5)-(line 714,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.InlineFunctionsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(com.google.javascript.jscomp.Compiler, java.lang.String[], com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType, java.lang.String)",
        "snippet": "  private void test(Compiler compiler, String[] expected,\n                    DiagnosticType error, DiagnosticType warning,\n                    String description) {\n    RecentChange recentChange = new RecentChange();\n    compiler.addChangeHandler(recentChange);\n\n    Node root = compiler.parseInputs();\n    assertTrue(\"Unexpected parse error(s): \" +\n        Joiner.on(\"\\n\").join(compiler.getErrors()), root != null);\n\n    if (astValidationEnabled) {\n      (new AstValidator()).validateRoot(root);\n    }\n    Node externsRoot = root.getFirstChild();\n    Node mainRoot = root.getLastChild();\n\n    // Save the tree for later comparison.\n    Node rootClone = root.cloneTree();\n    Node externsRootClone = rootClone.getFirstChild();\n    Node mainRootClone = rootClone.getLastChild();\n\n    int numRepetitions = getNumRepetitions();\n    ErrorManager[] errorManagers = new ErrorManager[numRepetitions];\n    int aggregateWarningCount = 0;\n    List<JSError> aggregateWarnings = Lists.newArrayList();\n    boolean hasCodeChanged = false;\n\n    assertFalse(\"Code should not change before processing\",\n        recentChange.hasCodeChanged());\n\n    for (int i = 0; i < numRepetitions; ++i) {\n      if (compiler.getErrorCount() == 0) {\n        errorManagers[i] = new BlackHoleErrorManager(compiler);\n\n        // Only run process closure primitives once, if asked.\n        if (closurePassEnabled && i == 0) {\n          recentChange.reset();\n          new ProcessClosurePrimitives(compiler, null, CheckLevel.ERROR, true)\n              .process(null, mainRoot);\n          hasCodeChanged = hasCodeChanged || recentChange.hasCodeChanged();\n        }\n\n        // Only run the type checking pass once, if asked.\n        // Running it twice can cause unpredictable behavior because duplicate\n        // objects for the same type are created, and the type system\n        // uses reference equality to compare many types.\n        if (typeCheckEnabled && i == 0) {\n          TypeCheck check = createTypeCheck(compiler, typeCheckLevel);\n          check.processForTesting(externsRoot, mainRoot);\n        }\n\n        // Only run the normalize pass once, if asked.\n        if (normalizeEnabled && i == 0) {\n          normalizeActualCode(compiler, externsRoot, mainRoot);\n        }\n\n        if (markNoSideEffects && i == 0) {\n          MarkNoSideEffectCalls mark = new MarkNoSideEffectCalls(compiler);\n          mark.process(externsRoot, mainRoot);\n        }\n\n        recentChange.reset();\n\n        getProcessor(compiler).process(externsRoot, mainRoot);\n        if (astValidationEnabled) {\n          (new AstValidator()).validateRoot(root);\n        }\n        if (checkLineNumbers) {\n          (new LineNumberCheck(compiler)).process(externsRoot, mainRoot);\n        }\n\n        hasCodeChanged = hasCodeChanged || recentChange.hasCodeChanged();\n        aggregateWarningCount += errorManagers[i].getWarningCount();\n        aggregateWarnings.addAll(Lists.newArrayList(compiler.getWarnings()));\n\n        if (normalizeEnabled) {\n          boolean verifyDeclaredConstants = true;\n          new Normalize.VerifyConstants(compiler, verifyDeclaredConstants)\n              .process(externsRoot, mainRoot);\n        }\n      }\n    }\n\n    if (error == null) {\n      assertEquals(\n          \"Unexpected error(s): \" + Joiner.on(\"\\n\").join(compiler.getErrors()),\n          0, compiler.getErrorCount());\n\n      // Verify the symbol table.\n      ErrorManager symbolTableErrorManager =\n          new BlackHoleErrorManager(compiler);\n      Node expectedRoot = parseExpectedJs(expected);\n      expectedRoot.detachFromParent();\n\n      JSError[] stErrors = symbolTableErrorManager.getErrors();\n      if (expectedSymbolTableError != null) {\n        assertEquals(\"There should be one error.\", 1, stErrors.length);\n        assertEquals(expectedSymbolTableError, stErrors[0].getType());\n      } else {\n        assertEquals(\"Unexpected symbol table error(s): \" +\n            Joiner.on(\"\\n\").join(stErrors),\n            0, stErrors.length);\n      }\n\n      if (warning == null) {\n        assertEquals(\n            \"Unexpected warning(s): \" + Joiner.on(\"\\n\").join(aggregateWarnings),\n            0, aggregateWarningCount);\n      } else {\n        assertEquals(\"There should be one warning, repeated \" + numRepetitions +\n            \" time(s).\", numRepetitions, aggregateWarningCount);\n        for (int i = 0; i < numRepetitions; ++i) {\n          JSError[] warnings = errorManagers[i].getWarnings();\n          JSError actual = warnings[0];\n          assertEquals(warning, actual.getType());\n\n          // Make sure that source information is always provided.\n          if (!allowSourcelessWarnings) {\n            assertTrue(\"Missing source file name in warning\",\n                actual.sourceName != null && !actual.sourceName.isEmpty());\n            assertTrue(\"Missing line number in warning\",\n                -1 != actual.lineNumber);\n            assertTrue(\"Missing char number in warning\",\n                -1 != actual.getCharno());\n          }\n\n          if (description != null) {\n            assertEquals(description, actual.description);\n          }\n        }\n      }\n\n      if (normalizeEnabled) {\n        normalizeActualCode(compiler, externsRootClone, mainRootClone);\n      }\n\n      boolean codeChange = !mainRootClone.isEquivalentTo(mainRoot);\n      boolean externsChange = !externsRootClone.isEquivalentTo(externsRoot);\n\n      // Generally, externs should not be change by the compiler passes.\n      if (externsChange && !allowExternsChanges) {\n        String explanation = externsRootClone.checkTreeEquals(externsRoot);\n        fail(\"Unexpected changes to externs\" +\n            \"\\nExpected: \" + compiler.toSource(externsRootClone) +\n            \"\\nResult: \" + compiler.toSource(externsRoot) +\n            \"\\n\" + explanation);\n      }\n\n      if (!codeChange && !externsChange) {\n        assertFalse(\n            \"compiler.reportCodeChange() was called \" +\n            \"even though nothing changed\",\n            hasCodeChanged);\n      } else {\n        assertTrue(\"compiler.reportCodeChange() should have been called\",\n            hasCodeChanged);\n      }\n\n      if (compareAsTree) {\n        String explanation = expectedRoot.checkTreeEquals(mainRoot);\n        assertNull(\"\\nExpected: \" + compiler.toSource(expectedRoot) +\n            \"\\nResult: \" + compiler.toSource(mainRoot) +\n            \"\\n\" + explanation, explanation);\n      } else if (expected != null) {\n        assertEquals(\n            Joiner.on(\"\").join(expected), compiler.toSource(mainRoot));\n      }\n\n      // Verify normalization is not invalidated.\n      Node normalizeCheckRootClone = root.cloneTree();\n      Node normalizeCheckExternsRootClone = root.getFirstChild();\n      Node normalizeCheckMainRootClone = root.getLastChild();\n      new PrepareAst(compiler).process(\n          normalizeCheckExternsRootClone, normalizeCheckMainRootClone);\n      String explanation =\n          normalizeCheckMainRootClone.checkTreeEquals(mainRoot);\n      assertNull(\"Node structure normalization invalidated.\\nExpected: \" +\n          compiler.toSource(normalizeCheckMainRootClone) +\n          \"\\nResult: \" + compiler.toSource(mainRoot) +\n          \"\\n\" + explanation, explanation);\n\n      // TODO(johnlenz): enable this for most test cases.\n      // Currently, this invalidates test for while-loops, for-loop\n      // initializers, and other naming.  However, a set of code\n      // (FoldConstants, etc) runs before the Normalize pass, so this can't be\n      // force on everywhere.\n      if (normalizeEnabled) {\n        new Normalize(compiler, true).process(\n            normalizeCheckExternsRootClone, normalizeCheckMainRootClone);\n        explanation =  normalizeCheckMainRootClone.checkTreeEquals(mainRoot);\n        assertNull(\"Normalization invalidated.\\nExpected: \" +\n            compiler.toSource(normalizeCheckMainRootClone) +\n            \"\\nResult: \" + compiler.toSource(mainRoot) +\n            \"\\n\" + explanation, explanation);\n      }\n    } else {\n      String errors = \"\";\n      for (JSError actualError : compiler.getErrors()) {\n        errors += actualError.description + \"\\n\";\n      }\n      assertEquals(\"There should be one error. \" + errors,\n          1, compiler.getErrorCount());\n      assertEquals(errors, error, compiler.getErrors()[0].getType());\n\n      if (warning != null) {\n        String warnings = \"\";\n        for (JSError actualError : compiler.getWarnings()) {\n          warnings += actualError.description + \"\\n\";\n        }\n        assertEquals(\"There should be one warning. \" + warnings,\n            1, compiler.getWarningCount());\n        assertEquals(warnings, warning, compiler.getWarnings()[0].getType());\n      }\n    }\n  }\n",
        "begin_line": 732,
        "end_line": 946,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output\n   * and (optionally) that an expected warning is issued. Or, if an error is\n   * expected, this method just verifies that the error is encountered.\n   *\n   * @param compiler A compiler that has been initialized via\n   *     {@link Compiler#init}\n   * @param expected Expected output, or null if an error is expected\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   * @param description The description of the expected warning,\n   *      or null if no warning is expected or if the warning's description\n   *      should not be examined\n   ",
        "child_ranges": [
            "(line 735,col 5)-(line 735,col 51)",
            "(line 736,col 5)-(line 736,col 44)",
            "(line 738,col 5)-(line 738,col 39)",
            "(line 739,col 5)-(line 740,col 66)",
            "(line 742,col 5)-(line 744,col 5)",
            "(line 745,col 5)-(line 745,col 44)",
            "(line 746,col 5)-(line 746,col 40)",
            "(line 749,col 5)-(line 749,col 38)",
            "(line 750,col 5)-(line 750,col 54)",
            "(line 751,col 5)-(line 751,col 50)",
            "(line 753,col 5)-(line 753,col 45)",
            "(line 754,col 5)-(line 754,col 68)",
            "(line 755,col 5)-(line 755,col 34)",
            "(line 756,col 5)-(line 756,col 59)",
            "(line 757,col 5)-(line 757,col 35)",
            "(line 759,col 5)-(line 760,col 39)",
            "(line 762,col 5)-(line 813,col 5)",
            "(line 815,col 5)-(line 945,col 5)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.InlineFunctionsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.normalizeActualCode(com.google.javascript.jscomp.Compiler, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  private void normalizeActualCode(\n      Compiler compiler, Node externsRoot, Node mainRoot) {\n    Normalize normalize = new Normalize(compiler, false);\n    normalize.process(externsRoot, mainRoot);\n  }\n",
        "begin_line": 948,
        "end_line": 952,
        "comment": "",
        "child_ranges": [
            "(line 950,col 5)-(line 950,col 57)",
            "(line 951,col 5)-(line 951,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.InlineFunctionsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.parseExpectedJs(java.lang.String[])",
        "snippet": "  protected Node parseExpectedJs(String[] expected) {\n    Compiler compiler = createCompiler();\n    List<SourceFile> inputs = Lists.newArrayList();\n    for (int i = 0; i < expected.length; i++) {\n      inputs.add(SourceFile.fromCode(\"expected\" + i, expected[i]));\n    }\n    compiler.init(externsInputs, inputs, getOptions());\n    Node root = compiler.parseInputs();\n    assertTrue(\"Unexpected parse error(s): \" +\n        Joiner.on(\"\\n\").join(compiler.getErrors()), root != null);\n    Node externsRoot = root.getFirstChild();\n    Node mainRoot = externsRoot.getNext();\n    // Only run the normalize pass, if asked.\n    if (normalizeEnabled && normalizeExpected && !compiler.hasErrors()) {\n      Normalize normalize = new Normalize(compiler, false);\n      normalize.process(externsRoot, mainRoot);\n    }\n    return mainRoot;\n  }\n",
        "begin_line": 957,
        "end_line": 975,
        "comment": "\n   * Parses expected js inputs and returns the root of the parse tree.\n   ",
        "child_ranges": [
            "(line 958,col 5)-(line 958,col 41)",
            "(line 959,col 5)-(line 959,col 51)",
            "(line 960,col 5)-(line 962,col 5)",
            "(line 963,col 5)-(line 963,col 55)",
            "(line 964,col 5)-(line 964,col 39)",
            "(line 965,col 5)-(line 966,col 66)",
            "(line 967,col 5)-(line 967,col 44)",
            "(line 968,col 5)-(line 968,col 42)",
            "(line 970,col 5)-(line 973,col 5)",
            "(line 974,col 5)-(line 974,col 20)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.InlineFunctionsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.parseExpectedJs(java.lang.String)",
        "snippet": "  protected Node parseExpectedJs(String expected) {\n    return parseExpectedJs(new String[] {expected});\n  }\n",
        "begin_line": 977,
        "end_line": 979,
        "comment": "",
        "child_ranges": [
            "(line 978,col 5)-(line 978,col 52)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.InlineFunctionsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.createModuleChain(java.lang.String...)",
        "snippet": "  static JSModule[] createModuleChain(String... inputs) {\n    JSModule[] modules = createModules(inputs);\n    for (int i = 1; i < modules.length; i++) {\n      modules[i].addDependency(modules[i - 1]);\n    }\n    return modules;\n  }\n",
        "begin_line": 985,
        "end_line": 991,
        "comment": "\n   * Generates a list of modules from a list of inputs, such that each module\n   * depends on the module before it.\n   ",
        "child_ranges": [
            "(line 986,col 5)-(line 986,col 47)",
            "(line 987,col 5)-(line 989,col 5)",
            "(line 990,col 5)-(line 990,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.InlineFunctionsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.createModuleStar(java.lang.String...)",
        "snippet": "  static JSModule[] createModuleStar(String... inputs) {\n    JSModule[] modules = createModules(inputs);\n    for (int i = 1; i < modules.length; i++) {\n      modules[i].addDependency(modules[0]);\n    }\n    return modules;\n  }\n",
        "begin_line": 997,
        "end_line": 1003,
        "comment": "\n   * Generates a list of modules from a list of inputs, such that each module\n   * depends on the first module.\n   ",
        "child_ranges": [
            "(line 998,col 5)-(line 998,col 47)",
            "(line 999,col 5)-(line 1001,col 5)",
            "(line 1002,col 5)-(line 1002,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.InlineFunctionsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.createModuleBush(java.lang.String...)",
        "snippet": "  static JSModule[] createModuleBush(String ... inputs) {\n    Preconditions.checkState(inputs.length > 2);\n    JSModule[] modules = createModules(inputs);\n    for (int i = 1; i < modules.length; i++) {\n      modules[i].addDependency(modules[i == 1 ? 0 : 1]);\n    }\n    return modules;\n  }\n",
        "begin_line": 1010,
        "end_line": 1017,
        "comment": "\n   * Generates a list of modules from a list of inputs, such that modules\n   * form a bush formation. In a bush formation, module 2 depends\n   * on module 1, and all other modules depend on module 2.\n   ",
        "child_ranges": [
            "(line 1011,col 5)-(line 1011,col 48)",
            "(line 1012,col 5)-(line 1012,col 47)",
            "(line 1013,col 5)-(line 1015,col 5)",
            "(line 1016,col 5)-(line 1016,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.InlineFunctionsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.createModuleTree(java.lang.String...)",
        "snippet": "  static JSModule[] createModuleTree(String ... inputs) {\n    JSModule[] modules = createModules(inputs);\n    for (int i = 1; i < modules.length; i++) {\n      modules[i].addDependency(modules[(i - 1) / 2]);\n    }\n    return modules;\n  }\n",
        "begin_line": 1024,
        "end_line": 1030,
        "comment": "\n   * Generates a list of modules from a list of inputs, such that modules\n   * form a tree formation. In a tree formation, module N depends on\n   * module `floor(N/2)`, So the modules form a balanced binary tree.\n   ",
        "child_ranges": [
            "(line 1025,col 5)-(line 1025,col 47)",
            "(line 1026,col 5)-(line 1028,col 5)",
            "(line 1029,col 5)-(line 1029,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.InlineFunctionsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.createModules(java.lang.String...)",
        "snippet": "  static JSModule[] createModules(String... inputs) {\n    JSModule[] modules = new JSModule[inputs.length];\n    for (int i = 0; i < inputs.length; i++) {\n      JSModule module = modules[i] = new JSModule(\"m\" + i);\n      module.add(SourceFile.fromCode(\"i\" + i, inputs[i]));\n    }\n    return modules;\n  }\n",
        "begin_line": 1036,
        "end_line": 1043,
        "comment": "\n   * Generates a list of modules from a list of inputs. Does not generate any\n   * dependencies between the modules.\n   ",
        "child_ranges": [
            "(line 1037,col 5)-(line 1037,col 53)",
            "(line 1038,col 5)-(line 1041,col 5)",
            "(line 1042,col 5)-(line 1042,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.InlineFunctionsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.BlackHoleErrorManager.BlackHoleErrorManager(com.google.javascript.jscomp.Compiler)",
        "snippet": "    private BlackHoleErrorManager(Compiler compiler) {\n      compiler.setErrorManager(this);\n    }\n",
        "begin_line": 1046,
        "end_line": 1048,
        "comment": "",
        "child_ranges": [
            "(line 1047,col 7)-(line 1047,col 37)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.InlineFunctionsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.BlackHoleErrorManager.println(com.google.javascript.jscomp.CheckLevel, com.google.javascript.jscomp.JSError)",
        "snippet": "    @Override\n    public void println(CheckLevel level, JSError error) {}\n",
        "begin_line": 1050,
        "end_line": 1051,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.InlineFunctionsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.BlackHoleErrorManager.printSummary()",
        "snippet": "    @Override\n    public void printSummary() {}\n",
        "begin_line": 1053,
        "end_line": 1054,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.InlineFunctionsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.createCompiler()",
        "snippet": "  Compiler createCompiler() {\n    Compiler compiler = new Compiler();\n    return compiler;\n  }\n",
        "begin_line": 1057,
        "end_line": 1060,
        "comment": "",
        "child_ranges": [
            "(line 1058,col 5)-(line 1058,col 39)",
            "(line 1059,col 5)-(line 1059,col 20)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.InlineFunctionsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.setExpectedSymbolTableError(com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  protected void setExpectedSymbolTableError(DiagnosticType type) {\n    this.expectedSymbolTableError = type;\n  }\n",
        "begin_line": 1062,
        "end_line": 1064,
        "comment": "",
        "child_ranges": [
            "(line 1063,col 5)-(line 1063,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.InlineFunctionsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.findQualifiedNameNode(java.lang.String, com.google.javascript.rhino.Node)",
        "snippet": "  protected final Node findQualifiedNameNode(final String name, Node root) {\n    final List<Node> matches = Lists.newArrayList();\n    NodeUtil.visitPostOrder(root,\n        new NodeUtil.Visitor() {\n          @Override public void visit(Node n) {\n            if (name.equals(n.getQualifiedName())) {\n              matches.add(n);\n            }\n          }\n        },\n        Predicates.<Node>alwaysTrue());\n    return matches.get(0);\n  }\n",
        "begin_line": 1067,
        "end_line": 1079,
        "comment": " Finds the first matching qualified name node in post-traversal order. ",
        "child_ranges": [
            "(line 1068,col 5)-(line 1068,col 52)",
            "(line 1069,col 5)-(line 1077,col 39)",
            "(line 1078,col 5)-(line 1078,col 26)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.InlineFunctionsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.Anonymous-5be7afe2-2be6-49f4-a28e-a342f9119eec.visit(com.google.javascript.rhino.Node)",
        "snippet": "          @Override public void visit(Node n) {\n            if (name.equals(n.getQualifiedName())) {\n              matches.add(n);\n            }\n          }\n",
        "begin_line": 1071,
        "end_line": 1075,
        "comment": "",
        "child_ranges": [
            "(line 1072,col 13)-(line 1074,col 13)"
        ]
    }
]